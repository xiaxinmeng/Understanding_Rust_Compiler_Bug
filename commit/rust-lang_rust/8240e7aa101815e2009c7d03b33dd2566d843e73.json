{"sha": "8240e7aa101815e2009c7d03b33dd2566d843e73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNDBlN2FhMTAxODE1ZTIwMDljN2QwM2IzM2RkMjU2NmQ4NDNlNzM=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2021-06-11T11:22:13Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2021-07-06T10:12:15Z"}, "message": "Replace per-target ABI denylist with an allowlist\n\nIt makes very little sense to maintain denylists of ABIs when, as far as\nnon-generic ABIs are concerned, targets usually only support a small\nsubset of the available ABIs.\n\nThis has historically been a cause of bugs such as us allowing use of\nthe platform-specific ABIs on x86 targets \u2013 these in turn would cause\nLLVM errors or assertions to fire.\n\nFixes #57182\n\nSponsored by: standard.ai", "tree": {"sha": "acd63da2f2a9ec826d6d5844cdc8a4d3892dbd6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acd63da2f2a9ec826d6d5844cdc8a4d3892dbd6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8240e7aa101815e2009c7d03b33dd2566d843e73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8240e7aa101815e2009c7d03b33dd2566d843e73", "html_url": "https://github.com/rust-lang/rust/commit/8240e7aa101815e2009c7d03b33dd2566d843e73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8240e7aa101815e2009c7d03b33dd2566d843e73/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96859dbaf6229f131fbd427a32aaa95d4f9cb132", "url": "https://api.github.com/repos/rust-lang/rust/commits/96859dbaf6229f131fbd427a32aaa95d4f9cb132", "html_url": "https://github.com/rust-lang/rust/commit/96859dbaf6229f131fbd427a32aaa95d4f9cb132"}], "stats": {"total": 2545, "additions": 1507, "deletions": 1038}, "files": [{"sha": "9dab4053c8edbbae25241671c07749aa23c298d6", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -2974,6 +2974,7 @@ declare_lint_pass! {\n         LARGE_ASSIGNMENTS,\n         FUTURE_PRELUDE_COLLISION,\n         RESERVED_PREFIX,\n+        UNSUPPORTED_CALLING_CONVENTIONS,\n     ]\n }\n \n@@ -3303,3 +3304,49 @@ declare_lint! {\n     };\n     crate_level_only\n }\n+\n+declare_lint! {\n+    /// The `unsupported_calling_conventions` lint is output whenever there is an use of the\n+    /// `stdcall`, `fastcall`, `thiscall`, `vectorcall` calling conventions (or their unwind\n+    /// variants) on targets that cannot meaningfully be supported for the requested target.\n+    ///\n+    /// For example `stdcall` does not make much sense for a x86_64 or, more apparently, powerpc\n+    /// code, because this calling convention was never specified for those targets.\n+    ///\n+    /// Historically MSVC toolchains have fallen back to the regular C calling convention for\n+    /// targets other than x86, but Rust doesn't really see a similar need to introduce a similar\n+    /// hack across many more targets.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,ignore (needs specific targets)\n+    /// extern \"stdcall\" fn stdcall() {}\n+    /// ```\n+    ///\n+    /// This will produce:\n+    ///\n+    /// ```text\n+    /// warning: use of calling convention not supported on this target\n+    ///   --> $DIR/unsupported.rs:39:1\n+    ///    |\n+    /// LL | extern \"stdcall\" fn stdcall() {}\n+    ///    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    ///    |\n+    ///    = note: `#[warn(unsupported_calling_conventions)]` on by default\n+    ///    = warning: this was previously accepted by the compiler but is being phased out;\n+    ///               it will become a hard error in a future release!\n+    ///    = note: for more information, see issue ...\n+    /// ```\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// On most of the targets the behaviour of `stdcall` and similar calling conventions is not\n+    /// defined at all, but was previously accepted due to a bug in the implementation of the\n+    /// compiler.\n+    pub UNSUPPORTED_CALLING_CONVENTIONS,\n+    Warn,\n+    \"use of unsupported calling convention\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #00000 <https://github.com/rust-lang/rust/issues/00000>\",\n+    };\n+}"}, {"sha": "e5805d9e691cbe3ff311db0ed4413b756c275b2a", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -2,7 +2,6 @@ use super::apple_sdk_base::{opts, Arch};\n use crate::spec::{FramePointer, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(\"ios\", Arch::Arm64);\n     Target {\n         llvm_target: \"arm64-apple-ios\".to_string(),\n         pointer_width: 64,\n@@ -11,7 +10,6 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             features: \"+neon,+fp-armv8,+apple-a7\".to_string(),\n             max_atomic_width: Some(128),\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n             forces_embed_bitcode: true,\n             frame_pointer: FramePointer::NonLeaf,\n             // Taken from a clang build on Xcode 11.4.1.\n@@ -25,7 +23,7 @@ pub fn target() -> Target {\n                 darwinpcs\\0\\\n                 -Os\\0\"\n                 .to_string(),\n-            ..base\n+            ..opts(\"ios\", Arch::Arm64)\n         },\n     }\n }"}, {"sha": "d16328f00f9ab65f7137b784b009c812dcbcf690", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios_macabi.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_macabi.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -2,7 +2,6 @@ use super::apple_sdk_base::{opts, Arch};\n use crate::spec::{FramePointer, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(\"ios\", Arch::Arm64_macabi);\n     Target {\n         llvm_target: \"arm64-apple-ios14.0-macabi\".to_string(),\n         pointer_width: 64,\n@@ -11,7 +10,6 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             features: \"+neon,+fp-armv8,+apple-a12\".to_string(),\n             max_atomic_width: Some(128),\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n             forces_embed_bitcode: true,\n             frame_pointer: FramePointer::NonLeaf,\n             // Taken from a clang build on Xcode 11.4.1.\n@@ -23,7 +21,7 @@ pub fn target() -> Target {\n                 -disable-llvm-passes\\0\\\n                 -Os\\0\"\n                 .to_string(),\n-            ..base\n+            ..opts(\"ios\", Arch::Arm64_macabi)\n         },\n     }\n }"}, {"sha": "07b3453218fee47b80e7fa3d967a9ff47e5ba6b8", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios_sim.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_sim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_sim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios_sim.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -19,7 +19,6 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             features: \"+neon,+fp-armv8,+apple-a7\".to_string(),\n             max_atomic_width: Some(128),\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n             forces_embed_bitcode: true,\n             frame_pointer: FramePointer::NonLeaf,\n             // Taken from a clang build on Xcode 11.4.1."}, {"sha": "b4bd72a082be7c544d7eaf08d7b36792aa417764", "filename": "compiler/rustc_target/src/spec/aarch64_apple_tvos.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -2,7 +2,6 @@ use super::apple_sdk_base::{opts, Arch};\n use crate::spec::{FramePointer, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(\"tvos\", Arch::Arm64);\n     Target {\n         llvm_target: \"arm64-apple-tvos\".to_string(),\n         pointer_width: 64,\n@@ -11,10 +10,9 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             features: \"+neon,+fp-armv8,+apple-a7\".to_string(),\n             max_atomic_width: Some(128),\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n             forces_embed_bitcode: true,\n             frame_pointer: FramePointer::NonLeaf,\n-            ..base\n+            ..opts(\"tvos\", Arch::Arm64)\n         },\n     }\n }"}, {"sha": "71ee6deb07f903b5c64b9b46d8e5ec59e9c6c1bd", "filename": "compiler/rustc_target/src/spec/aarch64_be_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -2,19 +2,16 @@ use crate::abi::Endian;\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let mut base = super::linux_gnu_base::opts();\n-    base.max_atomic_width = Some(128);\n-\n     Target {\n         llvm_target: \"aarch64_be-unknown-linux-gnu\".to_string(),\n         pointer_width: 64,\n         data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n         options: TargetOptions {\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n+            max_atomic_width: Some(128),\n             mcount: \"\\u{1}_mcount\".to_string(),\n             endian: Endian::Big,\n-            ..base\n+            ..super::linux_gnu_base::opts()\n         },\n     }\n }"}, {"sha": "c1adc963425ea6791eb756429f568d738d7d80f4", "filename": "compiler/rustc_target/src/spec/aarch64_be_unknown_linux_gnu_ilp32.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu_ilp32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu_ilp32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu_ilp32.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -10,11 +10,6 @@ pub fn target() -> Target {\n         pointer_width: 32,\n         data_layout: \"E-m:e-p:32:32-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        options: TargetOptions {\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n-            mcount: \"\\u{1}_mcount\".to_string(),\n-            endian: Endian::Big,\n-            ..base\n-        },\n+        options: TargetOptions { mcount: \"\\u{1}_mcount\".to_string(), endian: Endian::Big, ..base },\n     }\n }"}, {"sha": "56d71df6bda242af9d55c0dace7aa5d6689868dd", "filename": "compiler/rustc_target/src/spec/aarch64_fuchsia.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_fuchsia.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,15 +1,15 @@\n use crate::spec::{SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let mut base = super::fuchsia_base::opts();\n-    base.max_atomic_width = Some(128);\n-    base.supported_sanitizers = SanitizerSet::ADDRESS;\n-\n     Target {\n         llvm_target: \"aarch64-fuchsia\".to_string(),\n         pointer_width: 64,\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n+        options: TargetOptions {\n+            max_atomic_width: Some(128),\n+            supported_sanitizers: SanitizerSet::ADDRESS,\n+            ..super::fuchsia_base::opts()\n+        },\n     }\n }"}, {"sha": "409cab72ec2196898ba478fa53d379c6041cb51d", "filename": "compiler/rustc_target/src/spec/aarch64_linux_android.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -4,17 +4,18 @@ use crate::spec::{SanitizerSet, Target, TargetOptions};\n // for target ABI requirements.\n \n pub fn target() -> Target {\n-    let mut base = super::android_base::opts();\n-    base.max_atomic_width = Some(128);\n-    // As documented in https://developer.android.com/ndk/guides/cpu-features.html\n-    // the neon (ASIMD) and FP must exist on all android aarch64 targets.\n-    base.features = \"+neon,+fp-armv8\".to_string();\n-    base.supported_sanitizers = SanitizerSet::HWADDRESS;\n     Target {\n         llvm_target: \"aarch64-linux-android\".to_string(),\n         pointer_width: 64,\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n+        options: TargetOptions {\n+            max_atomic_width: Some(128),\n+            // As documented in https://developer.android.com/ndk/guides/cpu-features.html\n+            // the neon (ASIMD) and FP must exist on all android aarch64 targets.\n+            features: \"+neon,+fp-armv8\".to_string(),\n+            supported_sanitizers: SanitizerSet::HWADDRESS,\n+            ..super::android_base::opts()\n+        },\n     }\n }"}, {"sha": "09ea7d33cfdb22e608eb5dbe7017d18b867f8ee6", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_freebsd.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,14 +1,11 @@\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let mut base = super::freebsd_base::opts();\n-    base.max_atomic_width = Some(128);\n-\n     Target {\n         llvm_target: \"aarch64-unknown-freebsd\".to_string(),\n         pointer_width: 64,\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n+        options: TargetOptions { max_atomic_width: Some(128), ..super::freebsd_base::opts() },\n     }\n }"}, {"sha": "3e92ecbae054cc429c1ab49d97c698250ffeee67", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_gnu.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,23 +1,20 @@\n use crate::spec::{SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let mut base = super::linux_gnu_base::opts();\n-    base.max_atomic_width = Some(128);\n-    base.supported_sanitizers = SanitizerSet::ADDRESS\n-        | SanitizerSet::LEAK\n-        | SanitizerSet::MEMORY\n-        | SanitizerSet::THREAD\n-        | SanitizerSet::HWADDRESS;\n-\n     Target {\n         llvm_target: \"aarch64-unknown-linux-gnu\".to_string(),\n         pointer_width: 64,\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n         options: TargetOptions {\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n             mcount: \"\\u{1}_mcount\".to_string(),\n-            ..base\n+            max_atomic_width: Some(128),\n+            supported_sanitizers: SanitizerSet::ADDRESS\n+                | SanitizerSet::LEAK\n+                | SanitizerSet::MEMORY\n+                | SanitizerSet::THREAD\n+                | SanitizerSet::HWADDRESS,\n+            ..super::linux_gnu_base::opts()\n         },\n     }\n }"}, {"sha": "e2618447f2810e69166efb79abbb87f2878a986e", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_gnu_ilp32.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu_ilp32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu_ilp32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu_ilp32.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,18 +1,15 @@\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let mut base = super::linux_gnu_base::opts();\n-    base.max_atomic_width = Some(128);\n-\n     Target {\n         llvm_target: \"aarch64-unknown-linux-gnu_ilp32\".to_string(),\n         pointer_width: 32,\n         data_layout: \"e-m:e-p:32:32-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n         options: TargetOptions {\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n+            max_atomic_width: Some(128),\n             mcount: \"\\u{1}_mcount\".to_string(),\n-            ..base\n+            ..super::linux_gnu_base::opts()\n         },\n     }\n }"}, {"sha": "6a16b4ce419647f0569220f47e35f6f68540b0c1", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -9,10 +9,6 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        options: TargetOptions {\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n-            mcount: \"\\u{1}_mcount\".to_string(),\n-            ..base\n-        },\n+        options: TargetOptions { mcount: \"\\u{1}_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "4042028e2dc982a9b30065de0b33f2249ca1116e", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_netbsd.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_netbsd.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,15 +1,15 @@\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let mut base = super::netbsd_base::opts();\n-    base.max_atomic_width = Some(128);\n-    base.unsupported_abis = super::arm_base::unsupported_abis();\n-\n     Target {\n         llvm_target: \"aarch64-unknown-netbsd\".to_string(),\n         pointer_width: 64,\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        options: TargetOptions { mcount: \"__mcount\".to_string(), ..base },\n+        options: TargetOptions {\n+            mcount: \"__mcount\".to_string(),\n+            max_atomic_width: Some(128),\n+            ..super::netbsd_base::opts()\n+        },\n     }\n }"}, {"sha": "9d3652790108c685326e95b0b8131d8981556fba", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_none.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -18,7 +18,6 @@ pub fn target() -> Target {\n         disable_redzone: true,\n         max_atomic_width: Some(128),\n         panic_strategy: PanicStrategy::Abort,\n-        unsupported_abis: super::arm_base::unsupported_abis(),\n         ..Default::default()\n     };\n     Target {"}, {"sha": "482db0c53420e70ad8caeb0b705552bf263160fc", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_none_softfloat.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -18,7 +18,6 @@ pub fn target() -> Target {\n         disable_redzone: true,\n         max_atomic_width: Some(128),\n         panic_strategy: PanicStrategy::Abort,\n-        unsupported_abis: super::arm_base::unsupported_abis(),\n         ..Default::default()\n     };\n     Target {"}, {"sha": "193f98142102881345200b54185ba05c8f9d6e1d", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_openbsd.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_openbsd.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,15 +1,11 @@\n-use crate::spec::Target;\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let mut base = super::openbsd_base::opts();\n-    base.max_atomic_width = Some(128);\n-    base.unsupported_abis = super::arm_base::unsupported_abis();\n-\n     Target {\n         llvm_target: \"aarch64-unknown-openbsd\".to_string(),\n         pointer_width: 64,\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        options: base,\n+        options: TargetOptions { max_atomic_width: Some(128), ..super::openbsd_base::opts() },\n     }\n }"}, {"sha": "66140060f8e33d84f6bb868ffe585e1641e025e8", "filename": "compiler/rustc_target/src/spec/aarch64_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_wrs_vxworks.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,14 +1,11 @@\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let mut base = super::vxworks_base::opts();\n-    base.max_atomic_width = Some(128);\n-\n     Target {\n         llvm_target: \"aarch64-unknown-linux-gnu\".to_string(),\n         pointer_width: 64,\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n+        options: TargetOptions { max_atomic_width: Some(128), ..super::vxworks_base::opts() },\n     }\n }"}, {"sha": "ee36090c549513241c403c00020904780a90119b", "filename": "compiler/rustc_target/src/spec/abi.rs", "status": "modified", "additions": 31, "deletions": 52, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -8,16 +8,11 @@ mod tests;\n #[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Clone, Copy, Debug)]\n #[derive(HashStable_Generic, Encodable, Decodable)]\n pub enum Abi {\n-    // Multiplatform / generic ABIs\n-    //\n-    // These ABIs come first because every time we add a new ABI, we\n-    // have to re-bless all the hashing tests. These are used in many\n-    // places, so giving them stable values reduces test churn. The\n-    // specific values are meaningless.\n+    // Some of the ABIs come first because every time we add a new ABI, we have to re-bless all the\n+    // hashing tests. These are used in many places, so giving them stable values reduces test\n+    // churn. The specific values are meaningless.\n     Rust,\n     C { unwind: bool },\n-\n-    // Single platform ABIs\n     Cdecl,\n     Stdcall { unwind: bool },\n     Fastcall,\n@@ -35,8 +30,6 @@ pub enum Abi {\n     AvrNonBlockingInterrupt,\n     CCmseNonSecureCall,\n     Wasm,\n-\n-    // Multiplatform / generic ABIs\n     System { unwind: bool },\n     RustIntrinsic,\n     RustCall,\n@@ -50,48 +43,38 @@ pub struct AbiData {\n \n     /// Name of this ABI as we like it called.\n     name: &'static str,\n-\n-    /// A generic ABI is supported on all platforms.\n-    generic: bool,\n }\n \n #[allow(non_upper_case_globals)]\n const AbiDatas: &[AbiData] = &[\n-    // Cross-platform ABIs\n-    AbiData { abi: Abi::Rust, name: \"Rust\", generic: true },\n-    AbiData { abi: Abi::C { unwind: false }, name: \"C\", generic: true },\n-    AbiData { abi: Abi::C { unwind: true }, name: \"C-unwind\", generic: true },\n-    // Platform-specific ABIs\n-    AbiData { abi: Abi::Cdecl, name: \"cdecl\", generic: false },\n-    AbiData { abi: Abi::Stdcall { unwind: false }, name: \"stdcall\", generic: false },\n-    AbiData { abi: Abi::Stdcall { unwind: true }, name: \"stdcall-unwind\", generic: false },\n-    AbiData { abi: Abi::Fastcall, name: \"fastcall\", generic: false },\n-    AbiData { abi: Abi::Vectorcall, name: \"vectorcall\", generic: false },\n-    AbiData { abi: Abi::Thiscall { unwind: false }, name: \"thiscall\", generic: false },\n-    AbiData { abi: Abi::Thiscall { unwind: true }, name: \"thiscall-unwind\", generic: false },\n-    AbiData { abi: Abi::Aapcs, name: \"aapcs\", generic: false },\n-    AbiData { abi: Abi::Win64, name: \"win64\", generic: false },\n-    AbiData { abi: Abi::SysV64, name: \"sysv64\", generic: false },\n-    AbiData { abi: Abi::PtxKernel, name: \"ptx-kernel\", generic: false },\n-    AbiData { abi: Abi::Msp430Interrupt, name: \"msp430-interrupt\", generic: false },\n-    AbiData { abi: Abi::X86Interrupt, name: \"x86-interrupt\", generic: false },\n-    AbiData { abi: Abi::AmdGpuKernel, name: \"amdgpu-kernel\", generic: false },\n-    AbiData { abi: Abi::EfiApi, name: \"efiapi\", generic: false },\n-    AbiData { abi: Abi::AvrInterrupt, name: \"avr-interrupt\", generic: false },\n-    AbiData {\n-        abi: Abi::AvrNonBlockingInterrupt,\n-        name: \"avr-non-blocking-interrupt\",\n-        generic: false,\n-    },\n-    AbiData { abi: Abi::CCmseNonSecureCall, name: \"C-cmse-nonsecure-call\", generic: false },\n-    AbiData { abi: Abi::Wasm, name: \"wasm\", generic: false },\n-    // Cross-platform ABIs\n-    AbiData { abi: Abi::System { unwind: false }, name: \"system\", generic: true },\n-    AbiData { abi: Abi::System { unwind: true }, name: \"system-unwind\", generic: true },\n-    AbiData { abi: Abi::RustIntrinsic, name: \"rust-intrinsic\", generic: true },\n-    AbiData { abi: Abi::RustCall, name: \"rust-call\", generic: true },\n-    AbiData { abi: Abi::PlatformIntrinsic, name: \"platform-intrinsic\", generic: true },\n-    AbiData { abi: Abi::Unadjusted, name: \"unadjusted\", generic: true },\n+    AbiData { abi: Abi::Rust, name: \"Rust\" },\n+    AbiData { abi: Abi::C { unwind: false }, name: \"C\" },\n+    AbiData { abi: Abi::C { unwind: true }, name: \"C-unwind\" },\n+    AbiData { abi: Abi::Cdecl, name: \"cdecl\" },\n+    AbiData { abi: Abi::Stdcall { unwind: false }, name: \"stdcall\" },\n+    AbiData { abi: Abi::Stdcall { unwind: true }, name: \"stdcall-unwind\" },\n+    AbiData { abi: Abi::Fastcall, name: \"fastcall\" },\n+    AbiData { abi: Abi::Vectorcall, name: \"vectorcall\" },\n+    AbiData { abi: Abi::Thiscall { unwind: false }, name: \"thiscall\" },\n+    AbiData { abi: Abi::Thiscall { unwind: true }, name: \"thiscall-unwind\" },\n+    AbiData { abi: Abi::Aapcs, name: \"aapcs\" },\n+    AbiData { abi: Abi::Win64, name: \"win64\" },\n+    AbiData { abi: Abi::SysV64, name: \"sysv64\" },\n+    AbiData { abi: Abi::PtxKernel, name: \"ptx-kernel\" },\n+    AbiData { abi: Abi::Msp430Interrupt, name: \"msp430-interrupt\" },\n+    AbiData { abi: Abi::X86Interrupt, name: \"x86-interrupt\" },\n+    AbiData { abi: Abi::AmdGpuKernel, name: \"amdgpu-kernel\" },\n+    AbiData { abi: Abi::EfiApi, name: \"efiapi\" },\n+    AbiData { abi: Abi::AvrInterrupt, name: \"avr-interrupt\" },\n+    AbiData { abi: Abi::AvrNonBlockingInterrupt, name: \"avr-non-blocking-interrupt\" },\n+    AbiData { abi: Abi::CCmseNonSecureCall, name: \"C-cmse-nonsecure-call\" },\n+    AbiData { abi: Abi::Wasm, name: \"wasm\" },\n+    AbiData { abi: Abi::System { unwind: false }, name: \"system\" },\n+    AbiData { abi: Abi::System { unwind: true }, name: \"system-unwind\" },\n+    AbiData { abi: Abi::RustIntrinsic, name: \"rust-intrinsic\" },\n+    AbiData { abi: Abi::RustCall, name: \"rust-call\" },\n+    AbiData { abi: Abi::PlatformIntrinsic, name: \"platform-intrinsic\" },\n+    AbiData { abi: Abi::Unadjusted, name: \"unadjusted\" },\n ];\n \n /// Returns the ABI with the given name (if any).\n@@ -163,10 +146,6 @@ impl Abi {\n     pub fn name(self) -> &'static str {\n         self.data().name\n     }\n-\n-    pub fn generic(self) -> bool {\n-        self.data().generic\n-    }\n }\n \n impl fmt::Display for Abi {"}, {"sha": "01f573313c97fb85401ae0982077ac0fa5dc8743", "filename": "compiler/rustc_target/src/spec/arm_base.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/96859dbaf6229f131fbd427a32aaa95d4f9cb132/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96859dbaf6229f131fbd427a32aaa95d4f9cb132/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_base.rs?ref=96859dbaf6229f131fbd427a32aaa95d4f9cb132", "patch": "@@ -1,15 +0,0 @@\n-use crate::spec::abi::Abi;\n-\n-// All the calling conventions trigger an assertion(Unsupported calling convention) in llvm on arm\n-pub fn unsupported_abis() -> Vec<Abi> {\n-    vec![\n-        Abi::Stdcall { unwind: false },\n-        Abi::Stdcall { unwind: true },\n-        Abi::Fastcall,\n-        Abi::Vectorcall,\n-        Abi::Thiscall { unwind: false },\n-        Abi::Thiscall { unwind: true },\n-        Abi::Win64,\n-        Abi::SysV64,\n-    ]\n-}"}, {"sha": "f2430830afca584484d819d4de987b1e0f62e490", "filename": "compiler/rustc_target/src/spec/arm_linux_androideabi.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_linux_androideabi.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,16 +1,16 @@\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let mut base = super::android_base::opts();\n-    // https://developer.android.com/ndk/guides/abis.html#armeabi\n-    base.features = \"+strict-align,+v5te\".to_string();\n-    base.max_atomic_width = Some(32);\n-\n     Target {\n         llvm_target: \"arm-linux-androideabi\".to_string(),\n         pointer_width: 32,\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n+        options: TargetOptions {\n+            // https://developer.android.com/ndk/guides/abis.html#armeabi\n+            features: \"+strict-align,+v5te\".to_string(),\n+            max_atomic_width: Some(32),\n+            ..super::android_base::opts()\n+        },\n     }\n }"}, {"sha": "225db0032a89d2d9815426c63f368381dc92f200", "filename": "compiler/rustc_target/src/spec/arm_unknown_linux_gnueabi.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabi.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,19 +1,16 @@\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let mut base = super::linux_gnu_base::opts();\n-    base.max_atomic_width = Some(64);\n     Target {\n         llvm_target: \"arm-unknown-linux-gnueabi\".to_string(),\n         pointer_width: 32,\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-\n         options: TargetOptions {\n             features: \"+strict-align,+v6\".to_string(),\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n+            max_atomic_width: Some(64),\n             mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n-            ..base\n+            ..super::linux_gnu_base::opts()\n         },\n     }\n }"}, {"sha": "33703195ee751a3df2fcf400a772e8c34e89db3c", "filename": "compiler/rustc_target/src/spec/arm_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabihf.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,19 +1,16 @@\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let mut base = super::linux_gnu_base::opts();\n-    base.max_atomic_width = Some(64);\n     Target {\n         llvm_target: \"arm-unknown-linux-gnueabihf\".to_string(),\n         pointer_width: 32,\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-\n         options: TargetOptions {\n             features: \"+strict-align,+v6,+vfp2,-d32\".to_string(),\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n+            max_atomic_width: Some(64),\n             mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n-            ..base\n+            ..super::linux_gnu_base::opts()\n         },\n     }\n }"}, {"sha": "850844993f95cca9337977e9e90cee5fdba87306", "filename": "compiler/rustc_target/src/spec/arm_unknown_linux_musleabi.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabi.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,12 +1,6 @@\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let mut base = super::linux_musl_base::opts();\n-\n-    // Most of these settings are copied from the arm_unknown_linux_gnueabi\n-    // target.\n-    base.features = \"+strict-align,+v6\".to_string();\n-    base.max_atomic_width = Some(64);\n     Target {\n         // It's important we use \"gnueabi\" and not \"musleabi\" here. LLVM uses it\n         // to determine the calling convention and float ABI, and it doesn't\n@@ -16,9 +10,12 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         options: TargetOptions {\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n+            // Most of these settings are copied from the arm_unknown_linux_gnueabi\n+            // target.\n+            features: \"+strict-align,+v6\".to_string(),\n+            max_atomic_width: Some(64),\n             mcount: \"\\u{1}mcount\".to_string(),\n-            ..base\n+            ..super::linux_musl_base::opts()\n         },\n     }\n }"}, {"sha": "ff69c462e8ed233d9ef438d998f3b206d8b0e5a2", "filename": "compiler/rustc_target/src/spec/arm_unknown_linux_musleabihf.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabihf.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,12 +1,6 @@\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let mut base = super::linux_musl_base::opts();\n-\n-    // Most of these settings are copied from the arm_unknown_linux_gnueabihf\n-    // target.\n-    base.features = \"+strict-align,+v6,+vfp2,-d32\".to_string();\n-    base.max_atomic_width = Some(64);\n     Target {\n         // It's important we use \"gnueabihf\" and not \"musleabihf\" here. LLVM\n         // uses it to determine the calling convention and float ABI, and it\n@@ -16,9 +10,12 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         options: TargetOptions {\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n+            // Most of these settings are copied from the arm_unknown_linux_gnueabihf\n+            // target.\n+            features: \"+strict-align,+v6,+vfp2,-d32\".to_string(),\n+            max_atomic_width: Some(64),\n             mcount: \"\\u{1}mcount\".to_string(),\n-            ..base\n+            ..super::linux_musl_base::opts()\n         },\n     }\n }"}, {"sha": "547f48c5d3b61d2ad92fd068f688e4e82d9c8279", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabi.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -10,7 +10,6 @@ pub fn target() -> Target {\n         pointer_width: 32,\n         data_layout: \"E-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-\n         options: TargetOptions {\n             endian: Endian::Big,\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n@@ -19,7 +18,6 @@ pub fn target() -> Target {\n             relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,\n             max_atomic_width: Some(32),\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n             emit_debug_gdb_scripts: false,\n             ..Default::default()\n         },"}, {"sha": "f4f61e87ab9448e2072446228d00c62ba43381bb", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabihf.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -10,7 +10,6 @@ pub fn target() -> Target {\n         pointer_width: 32,\n         data_layout: \"E-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-\n         options: TargetOptions {\n             endian: Endian::Big,\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n@@ -20,7 +19,6 @@ pub fn target() -> Target {\n             panic_strategy: PanicStrategy::Abort,\n             features: \"+vfp3,-d32,-fp16\".to_string(),\n             max_atomic_width: Some(32),\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n             emit_debug_gdb_scripts: false,\n             ..Default::default()\n         },"}, {"sha": "8a289fee7812f4456d9320d5bdee9cdefbf6badc", "filename": "compiler/rustc_target/src/spec/armv4t_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,21 +1,18 @@\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = super::linux_gnu_base::opts();\n     Target {\n         llvm_target: \"armv4t-unknown-linux-gnueabi\".to_string(),\n         pointer_width: 32,\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-\n         options: TargetOptions {\n             features: \"+soft-float,+strict-align\".to_string(),\n             // Atomic operations provided by compiler-builtins\n             max_atomic_width: Some(32),\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n             mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             has_thumb_interworking: true,\n-            ..base\n+            ..super::linux_gnu_base::opts()\n         },\n     }\n }"}, {"sha": "177ab453b04c49ec05d7ebe09eb9c63e20dcab3a", "filename": "compiler/rustc_target/src/spec/armv5te_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,21 +1,18 @@\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = super::linux_gnu_base::opts();\n     Target {\n         llvm_target: \"armv5te-unknown-linux-gnueabi\".to_string(),\n         pointer_width: 32,\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-\n         options: TargetOptions {\n             features: \"+soft-float,+strict-align\".to_string(),\n             // Atomic operations provided by compiler-builtins\n             max_atomic_width: Some(32),\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n             mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             has_thumb_interworking: true,\n-            ..base\n+            ..super::linux_gnu_base::opts()\n         },\n     }\n }"}, {"sha": "1f084443bd991f608504ca20b38f6c6637d4dd54", "filename": "compiler/rustc_target/src/spec/armv5te_unknown_linux_musleabi.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_musleabi.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,24 +1,22 @@\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = super::linux_musl_base::opts();\n     Target {\n+        // FIXME: this comment below does not seem applicable?\n         // It's important we use \"gnueabihf\" and not \"musleabihf\" here. LLVM\n         // uses it to determine the calling convention and float ABI, and LLVM\n         // doesn't support the \"musleabihf\" value.\n         llvm_target: \"armv5te-unknown-linux-gnueabi\".to_string(),\n         pointer_width: 32,\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-\n         options: TargetOptions {\n             features: \"+soft-float,+strict-align\".to_string(),\n             // Atomic operations provided by compiler-builtins\n             max_atomic_width: Some(32),\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n             mcount: \"\\u{1}mcount\".to_string(),\n             has_thumb_interworking: true,\n-            ..base\n+            ..super::linux_musl_base::opts()\n         },\n     }\n }"}, {"sha": "4e5b714bded7c93f9829822ca4d774192a5697c5", "filename": "compiler/rustc_target/src/spec/armv5te_unknown_linux_uclibceabi.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_uclibceabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_uclibceabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_uclibceabi.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -10,10 +10,8 @@ pub fn target() -> Target {\n             features: \"+soft-float,+strict-align\".to_string(),\n             // Atomic operations provided by compiler-builtins\n             max_atomic_width: Some(32),\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n             mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             has_thumb_interworking: true,\n-\n             ..super::linux_uclibc_base::opts()\n         },\n     }"}, {"sha": "08fc51e8a8b57d86b1b6e95ee49ea70e976c6953", "filename": "compiler/rustc_target/src/spec/armv6_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_freebsd.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,20 +1,17 @@\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = super::freebsd_base::opts();\n     Target {\n         llvm_target: \"armv6-unknown-freebsd-gnueabihf\".to_string(),\n         pointer_width: 32,\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-\n         options: TargetOptions {\n             env: \"gnueabihf\".to_string(),\n             features: \"+v6,+vfp2,-d32\".to_string(),\n             max_atomic_width: Some(64),\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n             mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n-            ..base\n+            ..super::freebsd_base::opts()\n         },\n     }\n }"}, {"sha": "b109aa1e1ab152ab9296b71247ff7d95f5295f71", "filename": "compiler/rustc_target/src/spec/armv6_unknown_netbsd_eabihf.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,20 +1,17 @@\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let mut base = super::netbsd_base::opts();\n-    base.max_atomic_width = Some(64);\n     Target {\n         llvm_target: \"armv6-unknown-netbsdelf-eabihf\".to_string(),\n         pointer_width: 32,\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-\n         options: TargetOptions {\n             env: \"eabihf\".to_string(),\n             features: \"+v6,+vfp2,-d32\".to_string(),\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n+            max_atomic_width: Some(64),\n             mcount: \"__mcount\".to_string(),\n-            ..base\n+            ..super::netbsd_base::opts()\n         },\n     }\n }"}, {"sha": "2f228688f43c55c43056ffc63de52982c998e6cf", "filename": "compiler/rustc_target/src/spec/armv7_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -2,7 +2,6 @@ use super::apple_sdk_base::{opts, Arch};\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(\"ios\", Arch::Armv7);\n     Target {\n         llvm_target: \"armv7-apple-ios\".to_string(),\n         pointer_width: 32,\n@@ -11,8 +10,7 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             features: \"+v7,+vfp3,+neon\".to_string(),\n             max_atomic_width: Some(64),\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n-            ..base\n+            ..opts(\"ios\", Arch::Armv7)\n         },\n     }\n }"}, {"sha": "821080ec07de8f370dad99885073d2471ce466ea", "filename": "compiler/rustc_target/src/spec/armv7_linux_androideabi.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_linux_androideabi.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -10,15 +10,16 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::android_base::opts();\n-    base.features = \"+v7,+thumb-mode,+thumb2,+vfp3,-d32,-neon\".to_string();\n-    base.max_atomic_width = Some(64);\n     base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-march=armv7-a\".to_string());\n-\n     Target {\n         llvm_target: \"armv7-none-linux-android\".to_string(),\n         pointer_width: 32,\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n+        options: TargetOptions {\n+            features: \"+v7,+thumb-mode,+thumb2,+vfp3,-d32,-neon\".to_string(),\n+            max_atomic_width: Some(64),\n+            ..base\n+        },\n     }\n }"}, {"sha": "190d3bb691aab8a8ab63d3cc79f2938a18b67c6a", "filename": "compiler/rustc_target/src/spec/armv7_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_freebsd.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,20 +1,17 @@\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = super::freebsd_base::opts();\n     Target {\n         llvm_target: \"armv7-unknown-freebsd-gnueabihf\".to_string(),\n         pointer_width: 32,\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-\n         options: TargetOptions {\n             env: \"gnueabihf\".to_string(),\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             max_atomic_width: Some(64),\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n             mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n-            ..base\n+            ..super::freebsd_base::opts()\n         },\n     }\n }"}, {"sha": "088a8cf753402ac32b6987533828ad742cc71066", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabi.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -4,19 +4,16 @@ use crate::spec::{Target, TargetOptions};\n // hardfloat.\n \n pub fn target() -> Target {\n-    let base = super::linux_gnu_base::opts();\n     Target {\n         llvm_target: \"armv7-unknown-linux-gnueabi\".to_string(),\n         pointer_width: 32,\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-\n         options: TargetOptions {\n             features: \"+v7,+thumb2,+soft-float,-neon\".to_string(),\n             max_atomic_width: Some(64),\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n             mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n-            ..base\n+            ..super::linux_gnu_base::opts()\n         },\n     }\n }"}, {"sha": "521053ec2d3178f76c4cd6d13bfe3b4fc09cc52b", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -4,20 +4,17 @@ use crate::spec::{Target, TargetOptions};\n // thumb-mode. See the thumbv7neon variant for enabling both.\n \n pub fn target() -> Target {\n-    let base = super::linux_gnu_base::opts();\n     Target {\n         llvm_target: \"armv7-unknown-linux-gnueabihf\".to_string(),\n         pointer_width: 32,\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-\n         options: TargetOptions {\n             // Info about features at https://wiki.debian.org/ArmHardFloatPort\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             max_atomic_width: Some(64),\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n             mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n-            ..base\n+            ..super::linux_gnu_base::opts()\n         },\n     }\n }"}, {"sha": "0ee2c3e45e0b1d538c2ce9c7092d9f80d70ecfb1", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabi.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -4,7 +4,6 @@ use crate::spec::{Target, TargetOptions};\n // hardfloat.\n \n pub fn target() -> Target {\n-    let base = super::linux_musl_base::opts();\n     // Most of these settings are copied from the armv7_unknown_linux_gnueabi\n     // target.\n     Target {\n@@ -19,9 +18,8 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             features: \"+v7,+thumb2,+soft-float,-neon\".to_string(),\n             max_atomic_width: Some(64),\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n             mcount: \"\\u{1}mcount\".to_string(),\n-            ..base\n+            ..super::linux_musl_base::opts()\n         },\n     }\n }"}, {"sha": "a6ce382c7a6661caa20b80d433af52ff6ddc11df", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabihf.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -3,7 +3,6 @@ use crate::spec::{Target, TargetOptions};\n // This target is for musl Linux on ARMv7 without thumb-mode or NEON.\n \n pub fn target() -> Target {\n-    let base = super::linux_musl_base::opts();\n     Target {\n         // It's important we use \"gnueabihf\" and not \"musleabihf\" here. LLVM\n         // uses it to determine the calling convention and float ABI, and LLVM\n@@ -18,9 +17,8 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             max_atomic_width: Some(64),\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n             mcount: \"\\u{1}mcount\".to_string(),\n-            ..base\n+            ..super::linux_musl_base::opts()\n         },\n     }\n }"}, {"sha": "e509dcaddaa371de692697c9251181c870f2e8c1", "filename": "compiler/rustc_target/src/spec/armv7_unknown_netbsd_eabihf.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,20 +1,17 @@\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = super::netbsd_base::opts();\n     Target {\n         llvm_target: \"armv7-unknown-netbsdelf-eabihf\".to_string(),\n         pointer_width: 32,\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-\n         options: TargetOptions {\n             env: \"eabihf\".to_string(),\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             max_atomic_width: Some(64),\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n             mcount: \"__mcount\".to_string(),\n-            ..base\n+            ..super::netbsd_base::opts()\n         },\n     }\n }"}, {"sha": "0aabf2fe48669915b949a5c8edb3f6b17c4e16d0", "filename": "compiler/rustc_target/src/spec/armv7_wrs_vxworks_eabihf.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,7 +1,6 @@\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = super::vxworks_base::opts();\n     Target {\n         llvm_target: \"armv7-unknown-linux-gnueabihf\".to_string(),\n         pointer_width: 32,\n@@ -11,8 +10,7 @@ pub fn target() -> Target {\n             // Info about features at https://wiki.debian.org/ArmHardFloatPort\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             max_atomic_width: Some(64),\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n-            ..base\n+            ..super::vxworks_base::opts()\n         },\n     }\n }"}, {"sha": "bd703ee3e45e4f78bc61900428b9116342fdb3c3", "filename": "compiler/rustc_target/src/spec/armv7a_none_eabi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -26,7 +26,6 @@ pub fn target() -> Target {\n         disable_redzone: true,\n         max_atomic_width: Some(64),\n         panic_strategy: PanicStrategy::Abort,\n-        unsupported_abis: super::arm_base::unsupported_abis(),\n         emit_debug_gdb_scripts: false,\n         ..Default::default()\n     };"}, {"sha": "ad86ae1cedcc012ebd5ca66c98eecb5c1ae8dc4e", "filename": "compiler/rustc_target/src/spec/armv7a_none_eabihf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -17,7 +17,6 @@ pub fn target() -> Target {\n         disable_redzone: true,\n         max_atomic_width: Some(64),\n         panic_strategy: PanicStrategy::Abort,\n-        unsupported_abis: super::arm_base::unsupported_abis(),\n         emit_debug_gdb_scripts: false,\n         ..Default::default()\n     };"}, {"sha": "c07d6adc37eb5ceb0be80280a8387f0794a0d3ef", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -17,7 +17,6 @@ pub fn target() -> Target {\n             relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,\n             max_atomic_width: Some(32),\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n             emit_debug_gdb_scripts: false,\n             ..Default::default()\n         },"}, {"sha": "fbf2f8e9b72786c7a71bbdf122647269ea01ae23", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabihf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -18,7 +18,6 @@ pub fn target() -> Target {\n             panic_strategy: PanicStrategy::Abort,\n             features: \"+vfp3,-d32,-fp16\".to_string(),\n             max_atomic_width: Some(32),\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n             emit_debug_gdb_scripts: false,\n             ..Default::default()\n         },"}, {"sha": "2a48e7b62143f0b4268213270488c6f3cb04eeb7", "filename": "compiler/rustc_target/src/spec/armv7s_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -2,7 +2,6 @@ use super::apple_sdk_base::{opts, Arch};\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(\"ios\", Arch::Armv7s);\n     Target {\n         llvm_target: \"armv7s-apple-ios\".to_string(),\n         pointer_width: 32,\n@@ -11,8 +10,7 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             features: \"+v7,+vfp4,+neon\".to_string(),\n             max_atomic_width: Some(64),\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n-            ..base\n+            ..opts(\"ios\", Arch::Armv7s)\n         },\n     }\n }"}, {"sha": "4fa6e12f5ba86177854f80f16d0bcd74d496ad35", "filename": "compiler/rustc_target/src/spec/bpf_base.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpf_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpf_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpf_base.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,5 +1,5 @@\n+use crate::abi::Endian;\n use crate::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, TargetOptions};\n-use crate::{abi::Endian, spec::abi::Abi};\n \n pub fn opts(endian: Endian) -> TargetOptions {\n     TargetOptions {\n@@ -21,22 +21,6 @@ pub fn opts(endian: Endian) -> TargetOptions {\n         requires_lto: false,\n         singlethread: true,\n         max_atomic_width: Some(64),\n-        unsupported_abis: vec![\n-            Abi::Cdecl,\n-            Abi::Stdcall { unwind: false },\n-            Abi::Stdcall { unwind: true },\n-            Abi::Fastcall,\n-            Abi::Vectorcall,\n-            Abi::Thiscall { unwind: false },\n-            Abi::Thiscall { unwind: true },\n-            Abi::Aapcs,\n-            Abi::Win64,\n-            Abi::SysV64,\n-            Abi::PtxKernel,\n-            Abi::Msp430Interrupt,\n-            Abi::X86Interrupt,\n-            Abi::AmdGpuKernel,\n-        ],\n         ..Default::default()\n     }\n }"}, {"sha": "5955baa31dbacb42e8b4bc5b72ee5c523483a407", "filename": "compiler/rustc_target/src/spec/mipsel_unknown_none.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -2,7 +2,6 @@\n //!\n //! Can be used for MIPS M4K core (e.g. on PIC32MX devices)\n \n-use crate::spec::abi::Abi;\n use crate::spec::{LinkerFlavor, LldFlavor, RelocModel};\n use crate::spec::{PanicStrategy, Target, TargetOptions};\n \n@@ -22,16 +21,6 @@ pub fn target() -> Target {\n             linker: Some(\"rust-lld\".to_owned()),\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,\n-            unsupported_abis: vec![\n-                Abi::Stdcall { unwind: false },\n-                Abi::Stdcall { unwind: true },\n-                Abi::Fastcall,\n-                Abi::Vectorcall,\n-                Abi::Thiscall { unwind: false },\n-                Abi::Thiscall { unwind: true },\n-                Abi::Win64,\n-                Abi::SysV64,\n-            ],\n             emit_debug_gdb_scripts: false,\n             ..Default::default()\n         },"}, {"sha": "0a5f8c17c63a6cc201a779482bc12ec9ca0ff66f", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 75, "deletions": 80, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -55,7 +55,6 @@ pub mod crt_objects;\n mod android_base;\n mod apple_base;\n mod apple_sdk_base;\n-mod arm_base;\n mod avr_gnu_base;\n mod bpf_base;\n mod dragonfly_base;\n@@ -75,7 +74,6 @@ mod msvc_base;\n mod netbsd_base;\n mod openbsd_base;\n mod redox_base;\n-mod riscv_base;\n mod solaris_base;\n mod thumb_base;\n mod uefi_msvc_base;\n@@ -1226,11 +1224,6 @@ pub struct TargetOptions {\n     /// Panic strategy: \"unwind\" or \"abort\"\n     pub panic_strategy: PanicStrategy,\n \n-    /// A list of ABIs unsupported by the current target. Note that generic ABIs\n-    /// are considered to be supported on all platforms and cannot be marked\n-    /// unsupported.\n-    pub unsupported_abis: Vec<Abi>,\n-\n     /// Whether or not linking dylibs to a static CRT is allowed.\n     pub crt_static_allows_dylibs: bool,\n     /// Whether or not the CRT is statically linked by default.\n@@ -1412,7 +1405,6 @@ impl Default for TargetOptions {\n             max_atomic_width: None,\n             atomic_cas: true,\n             panic_strategy: PanicStrategy::Unwind,\n-            unsupported_abis: vec![],\n             crt_static_allows_dylibs: false,\n             crt_static_default: false,\n             crt_static_respected: false,\n@@ -1465,40 +1457,88 @@ impl Target {\n     /// Given a function ABI, turn it into the correct ABI for this target.\n     pub fn adjust_abi(&self, abi: Abi) -> Abi {\n         match abi {\n-            Abi::System { unwind } => {\n-                if self.is_like_windows && self.arch == \"x86\" {\n-                    Abi::Stdcall { unwind }\n-                } else {\n-                    Abi::C { unwind }\n-                }\n-            }\n-            // These ABI kinds are ignored on non-x86 Windows targets.\n-            // See https://docs.microsoft.com/en-us/cpp/cpp/argument-passing-and-naming-conventions\n-            // and the individual pages for __stdcall et al.\n-            Abi::Stdcall { unwind } | Abi::Thiscall { unwind } => {\n-                if self.is_like_windows && self.arch != \"x86\" { Abi::C { unwind } } else { abi }\n-            }\n-            Abi::Fastcall | Abi::Vectorcall => {\n-                if self.is_like_windows && self.arch != \"x86\" {\n-                    Abi::C { unwind: false }\n-                } else {\n-                    abi\n-                }\n-            }\n-            Abi::EfiApi => {\n-                if self.arch == \"x86_64\" {\n-                    Abi::Win64\n-                } else {\n-                    Abi::C { unwind: false }\n-                }\n+            Abi::C { .. } => self.default_adjusted_cabi.unwrap_or(abi),\n+            Abi::System { unwind } if self.is_like_windows && self.arch == \"x86\" => {\n+                Abi::Stdcall { unwind }\n             }\n+            Abi::System { unwind } => Abi::C { unwind },\n+            Abi::EfiApi if self.arch == \"x86_64\" => Abi::Win64,\n+            Abi::EfiApi => Abi::C { unwind: false },\n \n-            Abi::C { unwind } => self.default_adjusted_cabi.unwrap_or(Abi::C { unwind }),\n+            // See commentary in `is_abi_supported`.\n+            Abi::Stdcall { .. } | Abi::Thiscall { .. } if self.arch == \"x86\" => abi,\n+            Abi::Stdcall { unwind } | Abi::Thiscall { unwind } => Abi::C { unwind },\n+            Abi::Fastcall if self.arch == \"x86\" => abi,\n+            Abi::Vectorcall if [\"x86\", \"x86_64\"].contains(&&self.arch[..]) => abi,\n+            Abi::Fastcall | Abi::Vectorcall => Abi::C { unwind: false },\n \n             abi => abi,\n         }\n     }\n \n+    /// Returns a None if the UNSUPPORTED_CALLING_CONVENTIONS lint should be emitted\n+    pub fn is_abi_supported(&self, abi: Abi) -> Option<bool> {\n+        use Abi::*;\n+        Some(match abi {\n+            Rust\n+            | C { .. }\n+            | System { .. }\n+            | RustIntrinsic\n+            | RustCall\n+            | PlatformIntrinsic\n+            | Unadjusted\n+            | Cdecl\n+            | EfiApi => true,\n+            X86Interrupt => [\"x86\", \"x86_64\"].contains(&&self.arch[..]),\n+            Aapcs | CCmseNonSecureCall => [\"arm\", \"aarch64\"].contains(&&self.arch[..]),\n+            Win64 | SysV64 => self.arch == \"x86_64\",\n+            PtxKernel => self.arch == \"nvptx64\",\n+            Msp430Interrupt => self.arch == \"msp430\",\n+            AmdGpuKernel => self.arch == \"amdgcn\",\n+            AvrInterrupt | AvrNonBlockingInterrupt => self.arch == \"avr\",\n+            Wasm => [\"wasm32\", \"wasm64\"].contains(&&self.arch[..]),\n+            // On windows these fall-back to platform native calling convention (C) when the\n+            // architecture is not supported.\n+            //\n+            // This is I believe a historical accident that has occurred as part of Microsoft\n+            // striving to allow most of the code to \"just\" compile when support for 64-bit x86\n+            // was added and then later again, when support for ARM architectures was added.\n+            //\n+            // This is well documented across MSDN. Support for this in Rust has been added in\n+            // #54576. This makes much more sense in context of Microsoft's C++ than it does in\n+            // Rust, but there isn't much leeway remaining here to change it back at the time this\n+            // comment has been written.\n+            //\n+            // Following are the relevant excerpts from the MSDN documentation.\n+            //\n+            // > The __vectorcall calling convention is only supported in native code on x86 and\n+            // x64 processors that include Streaming SIMD Extensions 2 (SSE2) and above.\n+            // > ...\n+            // > On ARM machines, __vectorcall is accepted and ignored by the compiler.\n+            //\n+            // -- https://docs.microsoft.com/en-us/cpp/cpp/vectorcall?view=msvc-160\n+            //\n+            // > On ARM and x64 processors, __stdcall is accepted and ignored by the compiler;\n+            //\n+            // -- https://docs.microsoft.com/en-us/cpp/cpp/stdcall?view=msvc-160\n+            //\n+            // > In most cases, keywords or compiler switches that specify an unsupported\n+            // > convention on a particular platform are ignored, and the platform default\n+            // > convention is used.\n+            //\n+            // -- https://docs.microsoft.com/en-us/cpp/cpp/argument-passing-and-naming-conventions\n+            Stdcall { .. } | Fastcall | Thiscall { .. } | Vectorcall if self.is_like_windows => {\n+                true\n+            }\n+            // Outside of Windows we want to only support these calling conventions for the\n+            // architectures for which these calling conventions are actually well defined.\n+            Stdcall { .. } | Fastcall | Thiscall { .. } if self.arch == \"x86\" => true,\n+            Vectorcall if [\"x86\", \"x86_64\"].contains(&&self.arch[..]) => true,\n+            // Return a `None` for other cases so that we know to emit a future compat lint.\n+            Stdcall { .. } | Fastcall | Thiscall { .. } | Vectorcall => return None,\n+        })\n+    }\n+\n     /// Minimum integer size in bits that this target can perform atomic\n     /// operations on.\n     pub fn min_atomic_width(&self) -> u64 {\n@@ -1511,10 +1551,6 @@ impl Target {\n         self.max_atomic_width.unwrap_or_else(|| self.pointer_width.into())\n     }\n \n-    pub fn is_abi_supported(&self, abi: Abi) -> bool {\n-        abi.generic() || !self.unsupported_abis.contains(&abi)\n-    }\n-\n     /// Loads a target descriptor from a JSON object.\n     pub fn from_json(mut obj: Json) -> Result<(Target, TargetWarnings), String> {\n         // While ugly, this code must remain this way to retain\n@@ -1974,36 +2010,6 @@ impl Target {\n         key!(supported_sanitizers, SanitizerSet)?;\n         key!(default_adjusted_cabi, Option<Abi>)?;\n \n-        // NB: The old name is deprecated, but support for it is retained for\n-        // compatibility.\n-        for name in [\"abi-blacklist\", \"unsupported-abis\"].iter() {\n-            if let Some(j) = obj.remove_key(name) {\n-                if let Some(array) = Json::as_array(&j) {\n-                    for name in array.iter().filter_map(|abi| abi.as_string()) {\n-                        match lookup_abi(name) {\n-                            Some(abi) => {\n-                                if abi.generic() {\n-                                    return Err(format!(\n-                                        \"The ABI \\\"{}\\\" is considered to be supported on all \\\n-                                        targets and cannot be marked unsupported\",\n-                                        abi\n-                                    ));\n-                                }\n-\n-                                base.unsupported_abis.push(abi)\n-                            }\n-                            None => {\n-                                return Err(format!(\n-                                    \"Unknown ABI \\\"{}\\\" in target specification\",\n-                                    name\n-                                ));\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-\n         // Each field should have been read using `Json::remove_key` so any keys remaining are unused.\n         let remaining_keys = obj.as_object().ok_or(\"Expected JSON object for target\")?.keys();\n         Ok((\n@@ -2241,17 +2247,6 @@ impl ToJson for Target {\n             d.insert(\"default-adjusted-cabi\".to_string(), Abi::name(abi).to_json());\n         }\n \n-        if default.unsupported_abis != self.unsupported_abis {\n-            d.insert(\n-                \"unsupported-abis\".to_string(),\n-                self.unsupported_abis\n-                    .iter()\n-                    .map(|&name| Abi::name(name).to_json())\n-                    .collect::<Vec<_>>()\n-                    .to_json(),\n-            );\n-        }\n-\n         Json::Object(d)\n     }\n }"}, {"sha": "083262cf3514c2509eada87ea4934c46b023c3d8", "filename": "compiler/rustc_target/src/spec/nvptx64_nvidia_cuda.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,4 +1,3 @@\n-use crate::spec::abi::Abi;\n use crate::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -45,25 +44,6 @@ pub fn target() -> Target {\n             // produce kernel functions that call other kernel functions.\n             // This behavior is not supported by PTX ISA.\n             merge_functions: MergeFunctions::Disabled,\n-\n-            // FIXME: enable compilation tests for the target and\n-            // create the tests for this.\n-            unsupported_abis: vec![\n-                Abi::Cdecl,\n-                Abi::Stdcall { unwind: false },\n-                Abi::Stdcall { unwind: true },\n-                Abi::Fastcall,\n-                Abi::Vectorcall,\n-                Abi::Thiscall { unwind: false },\n-                Abi::Thiscall { unwind: true },\n-                Abi::Aapcs,\n-                Abi::Win64,\n-                Abi::SysV64,\n-                Abi::Msp430Interrupt,\n-                Abi::X86Interrupt,\n-                Abi::AmdGpuKernel,\n-            ],\n-\n             ..Default::default()\n         },\n     }"}, {"sha": "a9cdad1a8b1b4cd1f8384efd0d50161a682a4e77", "filename": "compiler/rustc_target/src/spec/riscv32gc_unknown_linux_gnu.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32gc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32gc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32gc_unknown_linux_gnu.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -7,7 +7,6 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-i64:64-n32-S128\".to_string(),\n         arch: \"riscv32\".to_string(),\n         options: TargetOptions {\n-            unsupported_abis: super::riscv_base::unsupported_abis(),\n             code_model: Some(CodeModel::Medium),\n             cpu: \"generic-rv32\".to_string(),\n             features: \"+m,+a,+f,+d,+c\".to_string(),"}, {"sha": "a64a82d55b90cef843e50a7e53a3f4ee46eaa22f", "filename": "compiler/rustc_target/src/spec/riscv32gc_unknown_linux_musl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32gc_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32gc_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32gc_unknown_linux_musl.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -7,7 +7,6 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-i64:64-n32-S128\".to_string(),\n         arch: \"riscv32\".to_string(),\n         options: TargetOptions {\n-            unsupported_abis: super::riscv_base::unsupported_abis(),\n             code_model: Some(CodeModel::Medium),\n             cpu: \"generic-rv32\".to_string(),\n             features: \"+m,+a,+f,+d,+c\".to_string(),"}, {"sha": "16d37218f4156ae4b2315abda1ece883dfc62925", "filename": "compiler/rustc_target/src/spec/riscv32i_unknown_none_elf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32i_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32i_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32i_unknown_none_elf.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -18,7 +18,6 @@ pub fn target() -> Target {\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,\n             emit_debug_gdb_scripts: false,\n-            unsupported_abis: super::riscv_base::unsupported_abis(),\n             eh_frame_header: false,\n             ..Default::default()\n         },"}, {"sha": "b53bae6cb56cd2b5919b7a330c1bda384719a28e", "filename": "compiler/rustc_target/src/spec/riscv32imac_unknown_none_elf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_unknown_none_elf.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -18,7 +18,6 @@ pub fn target() -> Target {\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,\n             emit_debug_gdb_scripts: false,\n-            unsupported_abis: super::riscv_base::unsupported_abis(),\n             eh_frame_header: false,\n             ..Default::default()\n         },"}, {"sha": "9a23def199676c39758eb1e9edc39f0420a6ed48", "filename": "compiler/rustc_target/src/spec/riscv32imc_unknown_none_elf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_unknown_none_elf.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -19,7 +19,6 @@ pub fn target() -> Target {\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,\n             emit_debug_gdb_scripts: false,\n-            unsupported_abis: super::riscv_base::unsupported_abis(),\n             eh_frame_header: false,\n             ..Default::default()\n         },"}, {"sha": "02d44b5ed7e7981fbf652a250634c71bfb751f67", "filename": "compiler/rustc_target/src/spec/riscv64gc_unknown_linux_gnu.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_linux_gnu.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -7,7 +7,6 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".to_string(),\n         arch: \"riscv64\".to_string(),\n         options: TargetOptions {\n-            unsupported_abis: super::riscv_base::unsupported_abis(),\n             code_model: Some(CodeModel::Medium),\n             cpu: \"generic-rv64\".to_string(),\n             features: \"+m,+a,+f,+d,+c\".to_string(),"}, {"sha": "3754750e48d23e80c386949be640650cdb8beaea", "filename": "compiler/rustc_target/src/spec/riscv64gc_unknown_linux_musl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_linux_musl.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -7,7 +7,6 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".to_string(),\n         arch: \"riscv64\".to_string(),\n         options: TargetOptions {\n-            unsupported_abis: super::riscv_base::unsupported_abis(),\n             code_model: Some(CodeModel::Medium),\n             cpu: \"generic-rv64\".to_string(),\n             features: \"+m,+a,+f,+d,+c\".to_string(),"}, {"sha": "f527a6cd26d827b137666373bc947307260bfc9b", "filename": "compiler/rustc_target/src/spec/riscv64gc_unknown_none_elf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -20,7 +20,6 @@ pub fn target() -> Target {\n             relocation_model: RelocModel::Static,\n             code_model: Some(CodeModel::Medium),\n             emit_debug_gdb_scripts: false,\n-            unsupported_abis: super::riscv_base::unsupported_abis(),\n             eh_frame_header: false,\n             ..Default::default()\n         },"}, {"sha": "8b1ba88e67f27677c294afed2533349408c00363", "filename": "compiler/rustc_target/src/spec/riscv64imac_unknown_none_elf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64imac_unknown_none_elf.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -19,7 +19,6 @@ pub fn target() -> Target {\n             relocation_model: RelocModel::Static,\n             code_model: Some(CodeModel::Medium),\n             emit_debug_gdb_scripts: false,\n-            unsupported_abis: super::riscv_base::unsupported_abis(),\n             eh_frame_header: false,\n             ..Default::default()\n         },"}, {"sha": "5bcbb2e621bd005ad33c768f857296b04b79cf70", "filename": "compiler/rustc_target/src/spec/riscv_base.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/96859dbaf6229f131fbd427a32aaa95d4f9cb132/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96859dbaf6229f131fbd427a32aaa95d4f9cb132/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv_base.rs?ref=96859dbaf6229f131fbd427a32aaa95d4f9cb132", "patch": "@@ -1,22 +0,0 @@\n-use crate::spec::abi::Abi;\n-\n-// All the calling conventions trigger an assertion(Unsupported calling\n-// convention) in llvm on RISCV\n-pub fn unsupported_abis() -> Vec<Abi> {\n-    vec![\n-        Abi::Cdecl,\n-        Abi::Stdcall { unwind: false },\n-        Abi::Stdcall { unwind: true },\n-        Abi::Fastcall,\n-        Abi::Vectorcall,\n-        Abi::Thiscall { unwind: false },\n-        Abi::Thiscall { unwind: true },\n-        Abi::Aapcs,\n-        Abi::Win64,\n-        Abi::SysV64,\n-        Abi::PtxKernel,\n-        Abi::Msp430Interrupt,\n-        Abi::X86Interrupt,\n-        Abi::AmdGpuKernel,\n-    ]\n-}"}, {"sha": "bac1203980eb010720829fe3570be0bcb8a20497", "filename": "compiler/rustc_target/src/spec/thumb_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -43,7 +43,6 @@ pub fn opts() -> TargetOptions {\n         // Similarly, one almost always never wants to use relocatable code because of the extra\n         // costs it involves.\n         relocation_model: RelocModel::Static,\n-        unsupported_abis: super::arm_base::unsupported_abis(),\n         // When this section is added a volatile load to its start address is also generated. This\n         // volatile load is a footgun as it can end up loading an invalid memory address, depending\n         // on how the user set up their linker scripts. This section adds pretty printer for stuff"}, {"sha": "369e6cd5e9326e4b85086bb0663d4e359dfea6aa", "filename": "compiler/rustc_target/src/spec/thumbv7a_pc_windows_msvc.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_pc_windows_msvc.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -2,7 +2,6 @@ use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions}\n \n pub fn target() -> Target {\n     let mut base = super::windows_msvc_base::opts();\n-\n     // Prevent error LNK2013: BRANCH24(T) fixup overflow\n     // The LBR optimization tries to eliminate branch islands,\n     // but if the displacement is larger than can fit\n@@ -17,20 +16,17 @@ pub fn target() -> Target {\n         .or_default()\n         .push(pre_link_args_msvc);\n \n-    // FIXME(jordanrh): use PanicStrategy::Unwind when SEH is\n-    // implemented for windows/arm in LLVM\n-    base.panic_strategy = PanicStrategy::Abort;\n-\n     Target {\n         llvm_target: \"thumbv7a-pc-windows-msvc\".to_string(),\n         pointer_width: 32,\n         data_layout: \"e-m:w-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-\n         options: TargetOptions {\n             features: \"+vfp3,+neon\".to_string(),\n             max_atomic_width: Some(64),\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n+            // FIXME(jordanrh): use PanicStrategy::Unwind when SEH is\n+            // implemented for windows/arm in LLVM\n+            panic_strategy: PanicStrategy::Abort,\n             ..base\n         },\n     }"}, {"sha": "b44c0085005217b3cc225be14424e92ec9e62436", "filename": "compiler/rustc_target/src/spec/thumbv7a_uwp_windows_msvc.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,23 +1,19 @@\n use crate::spec::{PanicStrategy, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let mut base = super::windows_uwp_msvc_base::opts();\n-    base.max_atomic_width = Some(64);\n-    base.has_elf_tls = true;\n-\n-    // FIXME(jordanrh): use PanicStrategy::Unwind when SEH is\n-    // implemented for windows/arm in LLVM\n-    base.panic_strategy = PanicStrategy::Abort;\n-\n     Target {\n         llvm_target: \"thumbv7a-pc-windows-msvc\".to_string(),\n         pointer_width: 32,\n         data_layout: \"e-m:w-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         options: TargetOptions {\n             features: \"+vfp3,+neon\".to_string(),\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n-            ..base\n+            max_atomic_width: Some(64),\n+            has_elf_tls: true,\n+            // FIXME(jordanrh): use PanicStrategy::Unwind when SEH is\n+            // implemented for windows/arm in LLVM\n+            panic_strategy: PanicStrategy::Abort,\n+            ..super::windows_uwp_msvc_base::opts()\n         },\n     }\n }"}, {"sha": "14020b88695ac15a762739e8f31bd40e21ed98df", "filename": "compiler/rustc_target/src/spec/thumbv7neon_linux_androideabi.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_linux_androideabi.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -10,15 +10,16 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::android_base::opts();\n-    base.features = \"+v7,+thumb-mode,+thumb2,+vfp3,+neon\".to_string();\n-    base.max_atomic_width = Some(64);\n     base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-march=armv7-a\".to_string());\n-\n     Target {\n         llvm_target: \"armv7-none-linux-android\".to_string(),\n         pointer_width: 32,\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n+        options: TargetOptions {\n+            features: \"+v7,+thumb-mode,+thumb2,+vfp3,+neon\".to_string(),\n+            max_atomic_width: Some(64),\n+            ..base\n+        },\n     }\n }"}, {"sha": "4042d5394167695326012dc6c4a6efbc414ab384", "filename": "compiler/rustc_target/src/spec/thumbv7neon_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -7,19 +7,16 @@ use crate::spec::{Target, TargetOptions};\n // https://static.docs.arm.com/ddi0406/cd/DDI0406C_d_armv7ar_arm.pdf\n \n pub fn target() -> Target {\n-    let base = super::linux_gnu_base::opts();\n     Target {\n         llvm_target: \"armv7-unknown-linux-gnueabihf\".to_string(),\n         pointer_width: 32,\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-\n         options: TargetOptions {\n             // Info about features at https://wiki.debian.org/ArmHardFloatPort\n             features: \"+v7,+thumb-mode,+thumb2,+vfp3,+neon\".to_string(),\n             max_atomic_width: Some(64),\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n-            ..base\n+            ..super::linux_gnu_base::opts()\n         },\n     }\n }"}, {"sha": "318b864a9cf08ebcaf3b26319b7a8f35a98f4eb4", "filename": "compiler/rustc_target/src/spec/thumbv7neon_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -7,7 +7,6 @@ use crate::spec::{Target, TargetOptions};\n // https://static.docs.arm.com/ddi0406/cd/DDI0406C_d_armv7ar_arm.pdf\n \n pub fn target() -> Target {\n-    let base = super::linux_musl_base::opts();\n     Target {\n         // It's important we use \"gnueabihf\" and not \"musleabihf\" here. LLVM\n         // uses it to determine the calling convention and float ABI, and LLVM\n@@ -22,9 +21,8 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             features: \"+v7,+thumb-mode,+thumb2,+vfp3,+neon\".to_string(),\n             max_atomic_width: Some(64),\n-            unsupported_abis: super::arm_base::unsupported_abis(),\n             mcount: \"\\u{1}mcount\".to_string(),\n-            ..base\n+            ..super::linux_musl_base::opts()\n         },\n     }\n }"}, {"sha": "496721e6f7634f54706a468573979a7a3840ea2f", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::ty::layout::MAX_SIMD_LANES;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::util::{Discr, IntTypeExt};\n use rustc_middle::ty::{self, OpaqueTypeKey, ParamEnv, RegionKind, Ty, TyCtxt};\n-use rustc_session::lint::builtin::UNINHABITED_STATIC;\n+use rustc_session::lint::builtin::{UNINHABITED_STATIC, UNSUPPORTED_CALLING_CONVENTIONS};\n use rustc_span::symbol::sym;\n use rustc_span::{self, MultiSpan, Span};\n use rustc_target::spec::abi::Abi;\n@@ -34,16 +34,22 @@ pub fn check_wf_new(tcx: TyCtxt<'_>) {\n     tcx.hir().krate().par_visit_all_item_likes(&visit);\n }\n \n-pub(super) fn check_abi(tcx: TyCtxt<'_>, span: Span, abi: Abi) {\n-    if !tcx.sess.target.is_abi_supported(abi) {\n-        struct_span_err!(\n+pub(super) fn check_abi(tcx: TyCtxt<'_>, hir_id: hir::HirId, span: Span, abi: Abi) {\n+    match tcx.sess.target.is_abi_supported(abi) {\n+        Some(true) => (),\n+        Some(false) => struct_span_err!(\n             tcx.sess,\n             span,\n             E0570,\n-            \"The ABI `{}` is not supported for the current target\",\n+            \"`{}` is not a supported ABI for the current target\",\n             abi\n         )\n-        .emit()\n+        .emit(),\n+        None => {\n+            tcx.struct_span_lint_hir(UNSUPPORTED_CALLING_CONVENTIONS, hir_id, span, |lint| {\n+                lint.build(\"use of calling convention not supported on this target\").emit()\n+            });\n+        }\n     }\n \n     // This ABI is only allowed on function pointers\n@@ -828,7 +834,7 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item<'tcx>) {\n             check_type_params_are_used(tcx, &generics, pty_ty);\n         }\n         hir::ItemKind::ForeignMod { abi, items } => {\n-            check_abi(tcx, it.span, abi);\n+            check_abi(tcx, it.hir_id(), it.span, abi);\n \n             if abi == Abi::RustIntrinsic {\n                 for item in items {"}, {"sha": "ff7d291d3c9098a80494eb6b1e36e624d375e9a6", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -499,7 +499,7 @@ fn typeck_with_fallback<'tcx>(\n                 tcx.fn_sig(def_id)\n             };\n \n-            check_abi(tcx, span, fn_sig.abi());\n+            check_abi(tcx, id, span, fn_sig.abi());\n \n             // Compute the fty from point of view of inside the fn.\n             let fn_sig = tcx.liberate_late_bound_regions(def_id.to_def_id(), fn_sig);"}, {"sha": "f1dff27ad67b25d1413423e67dd4b11d7c7710cd", "filename": "src/test/codegen/unwind-abis/stdcall-unwind-abi.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fcodegen%2Funwind-abis%2Fstdcall-unwind-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fcodegen%2Funwind-abis%2Fstdcall-unwind-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-abis%2Fstdcall-unwind-abi.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,15 +1,14 @@\n-// compile-flags: -C opt-level=0\n-// ignore-arm stdcall isn't supported\n-// ignore-aarch64 stdcall isn't supported\n-// ignore-riscv64 stdcall isn't supported\n+// needs-llvm-components: x86\n+// compile-flags: --target=i686-pc-windows-msvc --crate-type=rlib -Cno-prepopulate-passes\n+#![no_core]\n+#![feature(no_core, lang_items, c_unwind)]\n+#[lang=\"sized\"]\n+trait Sized { }\n \n // Test that `nounwind` atributes are correctly applied to exported `stdcall` and `stdcall-unwind`\n // extern functions. `stdcall-unwind` functions MUST NOT have this attribute. We disable\n // optimizations above to prevent LLVM from inferring the attribute.\n \n-#![crate_type = \"lib\"]\n-#![feature(c_unwind)]\n-\n // CHECK: @rust_item_that_cannot_unwind() unnamed_addr #0 {\n #[no_mangle]\n pub extern \"stdcall\" fn rust_item_that_cannot_unwind() {"}, {"sha": "d2cf041b72d2371efa2b994ce219d3b74cf3f227", "filename": "src/test/codegen/unwind-abis/thiscall-unwind-abi.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fcodegen%2Funwind-abis%2Fthiscall-unwind-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fcodegen%2Funwind-abis%2Fthiscall-unwind-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-abis%2Fthiscall-unwind-abi.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,16 +1,14 @@\n-// compile-flags: -C opt-level=0\n-// ignore-arm thiscall isn't supported\n-// ignore-aarch64 thiscall isn't supported\n-// ignore-riscv64 thiscall isn't supported\n+// needs-llvm-components: x86\n+// compile-flags: --target=i686-pc-windows-msvc --crate-type=rlib -Cno-prepopulate-passes\n+#![no_core]\n+#![feature(no_core, lang_items, c_unwind, abi_thiscall)]\n+#[lang=\"sized\"]\n+trait Sized { }\n \n // Test that `nounwind` atributes are correctly applied to exported `thiscall` and\n // `thiscall-unwind` extern functions. `thiscall-unwind` functions MUST NOT have this attribute. We\n // disable optimizations above to prevent LLVM from inferring the attribute.\n \n-#![crate_type = \"lib\"]\n-#![feature(abi_thiscall)]\n-#![feature(c_unwind)]\n-\n // CHECK: @rust_item_that_cannot_unwind() unnamed_addr #0 {\n #[no_mangle]\n pub extern \"thiscall\" fn rust_item_that_cannot_unwind() {"}, {"sha": "890174537592f91c56ea66e792814ea2d71d951a", "filename": "src/test/ui/abi/unsupported.aarch64.stderr", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Fabi%2Funsupported.aarch64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Fabi%2Funsupported.aarch64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Funsupported.aarch64.stderr?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -0,0 +1,58 @@\n+error[E0570]: `\"ptx-kernel\"` is not a supported ABI for the current target\n+  --> $DIR/unsupported.rs:24:1\n+   |\n+LL | extern \"ptx-kernel\" fn ptx() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0570]: `\"amdgpu-kernel\"` is not a supported ABI for the current target\n+  --> $DIR/unsupported.rs:26:1\n+   |\n+LL | extern \"amdgpu-kernel\" fn amdgpu() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0570]: `\"wasm\"` is not a supported ABI for the current target\n+  --> $DIR/unsupported.rs:28:1\n+   |\n+LL | extern \"wasm\" fn wasm() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0570]: `\"msp430-interrupt\"` is not a supported ABI for the current target\n+  --> $DIR/unsupported.rs:33:1\n+   |\n+LL | extern \"msp430-interrupt\" fn msp430() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0570]: `\"avr-interrupt\"` is not a supported ABI for the current target\n+  --> $DIR/unsupported.rs:35:1\n+   |\n+LL | extern \"avr-interrupt\" fn avr() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0570]: `\"x86-interrupt\"` is not a supported ABI for the current target\n+  --> $DIR/unsupported.rs:37:1\n+   |\n+LL | extern \"x86-interrupt\" fn x86() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: use of calling convention not supported on this target\n+  --> $DIR/unsupported.rs:39:1\n+   |\n+LL | extern \"stdcall\" fn stdcall() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unsupported_calling_conventions)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #00000 <https://github.com/rust-lang/rust/issues/00000>\n+\n+warning: use of calling convention not supported on this target\n+  --> $DIR/unsupported.rs:44:1\n+   |\n+LL | extern \"thiscall\" fn thiscall() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #00000 <https://github.com/rust-lang/rust/issues/00000>\n+\n+error: aborting due to 6 previous errors; 2 warnings emitted\n+\n+For more information about this error, try `rustc --explain E0570`."}, {"sha": "81b12653d2ee8680206e46ebe6527165b6d25b06", "filename": "src/test/ui/abi/unsupported.i686.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Fabi%2Funsupported.i686.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Fabi%2Funsupported.i686.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Funsupported.i686.stderr?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -0,0 +1,39 @@\n+error[E0570]: `\"ptx-kernel\"` is not a supported ABI for the current target\n+  --> $DIR/unsupported.rs:24:1\n+   |\n+LL | extern \"ptx-kernel\" fn ptx() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0570]: `\"amdgpu-kernel\"` is not a supported ABI for the current target\n+  --> $DIR/unsupported.rs:26:1\n+   |\n+LL | extern \"amdgpu-kernel\" fn amdgpu() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0570]: `\"wasm\"` is not a supported ABI for the current target\n+  --> $DIR/unsupported.rs:28:1\n+   |\n+LL | extern \"wasm\" fn wasm() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0570]: `\"aapcs\"` is not a supported ABI for the current target\n+  --> $DIR/unsupported.rs:30:1\n+   |\n+LL | extern \"aapcs\" fn aapcs() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0570]: `\"msp430-interrupt\"` is not a supported ABI for the current target\n+  --> $DIR/unsupported.rs:33:1\n+   |\n+LL | extern \"msp430-interrupt\" fn msp430() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0570]: `\"avr-interrupt\"` is not a supported ABI for the current target\n+  --> $DIR/unsupported.rs:35:1\n+   |\n+LL | extern \"avr-interrupt\" fn avr() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0570`."}, {"sha": "f0debdcf621e29234fb85ea33b64fa54fc60f6b5", "filename": "src/test/ui/abi/unsupported.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Fabi%2Funsupported.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Fabi%2Funsupported.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Funsupported.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -0,0 +1,48 @@\n+// revisions: x64 i686 aarch64\n+//\n+// [x64] needs-llvm-components: x86\n+// [x64]compile-flags: --target=x86_64-unknown-linux-gnu --crate-type=rlib\n+// [i686] needs-llvm-components: x86\n+// [i686]compile-flags: --target=i686-unknown-linux-gnu --crate-type=rlib\n+// [aarch64] needs-llvm-components: aarch64\n+// [aarch64]compile-flags: --target=aarch64-unknown-linux-gnu --crate-type=rlib\n+#![no_core]\n+#![feature(\n+    no_core,\n+    lang_items,\n+    abi_ptx,\n+    abi_msp430_interrupt,\n+    abi_avr_interrupt,\n+    abi_thiscall,\n+    abi_amdgpu_kernel,\n+    wasm_abi,\n+    abi_x86_interrupt\n+)]\n+#[lang=\"sized\"]\n+trait Sized { }\n+\n+extern \"ptx-kernel\" fn ptx() {}\n+//~^ ERROR is not a supported ABI\n+extern \"amdgpu-kernel\" fn amdgpu() {}\n+//~^ ERROR is not a supported ABI\n+extern \"wasm\" fn wasm() {}\n+//~^ ERROR is not a supported ABI\n+extern \"aapcs\" fn aapcs() {}\n+//[x64]~^ ERROR is not a supported ABI\n+//[i686]~^^ ERROR is not a supported ABI\n+extern \"msp430-interrupt\" fn msp430() {}\n+//~^ ERROR is not a supported ABI\n+extern \"avr-interrupt\" fn avr() {}\n+//~^ ERROR is not a supported ABI\n+extern \"x86-interrupt\" fn x86() {}\n+//[aarch64]~^ ERROR is not a supported ABI\n+extern \"stdcall\" fn stdcall() {}\n+//[x64]~^ WARN use of calling convention not supported\n+//[x64]~^^ WARN this was previously accepted\n+//[aarch64]~^^^ WARN use of calling convention not supported\n+//[aarch64]~^^^^ WARN this was previously accepted\n+extern \"thiscall\" fn thiscall() {}\n+//[x64]~^ WARN use of calling convention not supported\n+//[x64]~^^ WARN this was previously accepted\n+//[aarch64]~^^^ WARN use of calling convention not supported\n+//[aarch64]~^^^^ WARN this was previously accepted"}, {"sha": "5c68461e4fb392e81f1f7f36d4bec9ef8a9b6f95", "filename": "src/test/ui/abi/unsupported.x64.stderr", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Fabi%2Funsupported.x64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Fabi%2Funsupported.x64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Funsupported.x64.stderr?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -0,0 +1,58 @@\n+error[E0570]: `\"ptx-kernel\"` is not a supported ABI for the current target\n+  --> $DIR/unsupported.rs:24:1\n+   |\n+LL | extern \"ptx-kernel\" fn ptx() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0570]: `\"amdgpu-kernel\"` is not a supported ABI for the current target\n+  --> $DIR/unsupported.rs:26:1\n+   |\n+LL | extern \"amdgpu-kernel\" fn amdgpu() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0570]: `\"wasm\"` is not a supported ABI for the current target\n+  --> $DIR/unsupported.rs:28:1\n+   |\n+LL | extern \"wasm\" fn wasm() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0570]: `\"aapcs\"` is not a supported ABI for the current target\n+  --> $DIR/unsupported.rs:30:1\n+   |\n+LL | extern \"aapcs\" fn aapcs() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0570]: `\"msp430-interrupt\"` is not a supported ABI for the current target\n+  --> $DIR/unsupported.rs:33:1\n+   |\n+LL | extern \"msp430-interrupt\" fn msp430() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0570]: `\"avr-interrupt\"` is not a supported ABI for the current target\n+  --> $DIR/unsupported.rs:35:1\n+   |\n+LL | extern \"avr-interrupt\" fn avr() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: use of calling convention not supported on this target\n+  --> $DIR/unsupported.rs:39:1\n+   |\n+LL | extern \"stdcall\" fn stdcall() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unsupported_calling_conventions)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #00000 <https://github.com/rust-lang/rust/issues/00000>\n+\n+warning: use of calling convention not supported on this target\n+  --> $DIR/unsupported.rs:44:1\n+   |\n+LL | extern \"thiscall\" fn thiscall() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #00000 <https://github.com/rust-lang/rust/issues/00000>\n+\n+error: aborting due to 6 previous errors; 2 warnings emitted\n+\n+For more information about this error, try `rustc --explain E0570`."}, {"sha": "a76efd9a205088efdbd729ca7bc77c46454399f7", "filename": "src/test/ui/c-variadic/variadic-ffi-1.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,6 +1,9 @@\n-// ignore-arm stdcall isn't supported\n-// ignore-aarch64 stdcall isn't supported\n-// ignore-riscv64 stdcall isn't supported\n+// needs-llvm-components: x86\n+// compile-flags: --target=i686-pc-windows-msvc --crate-type=rlib\n+#![no_core]\n+#![feature(no_core, lang_items)]\n+#[lang=\"sized\"]\n+trait Sized { }\n \n extern \"stdcall\" {\n     fn printf(_: *const u8, ...); //~ ERROR: variadic function must have C or cdecl calling"}, {"sha": "5b4e656d9dca147a55d638380c30ad360e02913f", "filename": "src/test/ui/c-variadic/variadic-ffi-1.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,39 +1,39 @@\n error[E0045]: C-variadic function must have C or cdecl calling convention\n-  --> $DIR/variadic-ffi-1.rs:6:5\n+  --> $DIR/variadic-ffi-1.rs:9:5\n    |\n LL |     fn printf(_: *const u8, ...);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadics require C or cdecl calling convention\n \n error[E0060]: this function takes at least 2 arguments but 0 arguments were supplied\n-  --> $DIR/variadic-ffi-1.rs:17:9\n+  --> $DIR/variadic-ffi-1.rs:20:9\n    |\n LL |         foo();\n    |         ^^^-- supplied 0 arguments\n    |         |\n    |         expected at least 2 arguments\n    |\n note: function defined here\n-  --> $DIR/variadic-ffi-1.rs:10:8\n+  --> $DIR/variadic-ffi-1.rs:13:8\n    |\n LL |     fn foo(f: isize, x: u8, ...);\n    |        ^^^\n \n error[E0060]: this function takes at least 2 arguments but 1 argument was supplied\n-  --> $DIR/variadic-ffi-1.rs:18:9\n+  --> $DIR/variadic-ffi-1.rs:21:9\n    |\n LL |         foo(1);\n    |         ^^^ - supplied 1 argument\n    |         |\n    |         expected at least 2 arguments\n    |\n note: function defined here\n-  --> $DIR/variadic-ffi-1.rs:10:8\n+  --> $DIR/variadic-ffi-1.rs:13:8\n    |\n LL |     fn foo(f: isize, x: u8, ...);\n    |        ^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variadic-ffi-1.rs:20:56\n+  --> $DIR/variadic-ffi-1.rs:23:56\n    |\n LL |         let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo;\n    |                -------------------------------------   ^^^ expected non-variadic fn, found variadic function\n@@ -44,7 +44,7 @@ LL |         let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo;\n                  found fn item `unsafe extern \"C\" fn(_, _, ...) {foo}`\n \n error[E0308]: mismatched types\n-  --> $DIR/variadic-ffi-1.rs:21:54\n+  --> $DIR/variadic-ffi-1.rs:24:54\n    |\n LL |         let y: extern \"C\" fn(f: isize, x: u8, ...) = bar;\n    |                -----------------------------------   ^^^ expected variadic fn, found non-variadic function\n@@ -55,37 +55,37 @@ LL |         let y: extern \"C\" fn(f: isize, x: u8, ...) = bar;\n                  found fn item `extern \"C\" fn(_, _) {bar}`\n \n error[E0617]: can't pass `f32` to variadic function\n-  --> $DIR/variadic-ffi-1.rs:23:19\n+  --> $DIR/variadic-ffi-1.rs:26:19\n    |\n LL |         foo(1, 2, 3f32);\n    |                   ^^^^ help: cast the value to `c_double`: `3f32 as c_double`\n \n error[E0617]: can't pass `bool` to variadic function\n-  --> $DIR/variadic-ffi-1.rs:24:19\n+  --> $DIR/variadic-ffi-1.rs:27:19\n    |\n LL |         foo(1, 2, true);\n    |                   ^^^^ help: cast the value to `c_int`: `true as c_int`\n \n error[E0617]: can't pass `i8` to variadic function\n-  --> $DIR/variadic-ffi-1.rs:25:19\n+  --> $DIR/variadic-ffi-1.rs:28:19\n    |\n LL |         foo(1, 2, 1i8);\n    |                   ^^^ help: cast the value to `c_int`: `1i8 as c_int`\n \n error[E0617]: can't pass `u8` to variadic function\n-  --> $DIR/variadic-ffi-1.rs:26:19\n+  --> $DIR/variadic-ffi-1.rs:29:19\n    |\n LL |         foo(1, 2, 1u8);\n    |                   ^^^ help: cast the value to `c_uint`: `1u8 as c_uint`\n \n error[E0617]: can't pass `i16` to variadic function\n-  --> $DIR/variadic-ffi-1.rs:27:19\n+  --> $DIR/variadic-ffi-1.rs:30:19\n    |\n LL |         foo(1, 2, 1i16);\n    |                   ^^^^ help: cast the value to `c_int`: `1i16 as c_int`\n \n error[E0617]: can't pass `u16` to variadic function\n-  --> $DIR/variadic-ffi-1.rs:28:19\n+  --> $DIR/variadic-ffi-1.rs:31:19\n    |\n LL |         foo(1, 2, 1u16);\n    |                   ^^^^ help: cast the value to `c_uint`: `1u16 as c_uint`"}, {"sha": "3909b5301ade5ab672919e9d373c6692200b9d87", "filename": "src/test/ui/extern/extern-methods.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Fextern%2Fextern-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Fextern%2Fextern-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-methods.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n-// ignore-arm\n-// ignore-aarch64\n-// ignore-riscv64 fastcall isn't supported\n+// only-i686\n \n trait A {\n     extern \"fastcall\" fn test1(i: i32);"}, {"sha": "8ce94aa71aae6e9172fc0fbfd7be185e49a22e75", "filename": "src/test/ui/extern/extern-thiscall.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Fextern%2Fextern-thiscall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Fextern%2Fextern-thiscall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-thiscall.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n-// ignore-arm\n-// ignore-aarch64\n-// ignore-riscv64 thiscall isn't supported\n+// only-i686\n \n #![feature(abi_thiscall)]\n "}, {"sha": "f625eb0890f05dc5efbd4b400f904b3038be6a0c", "filename": "src/test/ui/extern/extern-vectorcall.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Fextern%2Fextern-vectorcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Fextern%2Fextern-vectorcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-vectorcall.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n-// ignore-arm\n-// ignore-aarch64\n-// ignore-riscv64 vectorcall isn't supported\n+// revisions: x64 x32\n+// [x64]only-x86_64\n+// [x32]only-i686\n \n #![feature(abi_vectorcall)]\n "}, {"sha": "05461297afd025b83d122883d341675e8fcd185d", "filename": "src/test/ui/feature-gates/feature-gate-abi-avr-interrupt.rs", "status": "modified", "additions": 46, "deletions": 4, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-avr-interrupt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-avr-interrupt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-avr-interrupt.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,9 +1,51 @@\n+// needs-llvm-components: avr\n+// compile-flags: --target=avr-unknown-gnu-atmega328 --crate-type=rlib\n+#![no_core]\n+#![feature(no_core, lang_items)]\n+#[lang=\"sized\"]\n+trait Sized { }\n+\n // Test that the AVR interrupt ABI cannot be used when avr_interrupt\n // feature gate is not used.\n \n-extern \"avr-interrupt\" fn foo() {}\n-//~^ ERROR avr-interrupt and avr-non-blocking-interrupt ABIs are experimental and subject to change\n+extern \"avr-non-blocking-interrupt\" fn fu() {}\n+//~^ ERROR avr-interrupt and avr-non-blocking-interrupt ABIs are experimental\n+extern \"avr-interrupt\" fn f() {}\n+//~^ ERROR avr-interrupt and avr-non-blocking-interrupt ABIs are experimental\n+\n+trait T {\n+    extern \"avr-interrupt\" fn m();\n+    //~^ ERROR avr-interrupt and avr-non-blocking-interrupt ABIs are experimental\n+    extern \"avr-non-blocking-interrupt\" fn mu();\n+    //~^ ERROR avr-interrupt and avr-non-blocking-interrupt ABIs are experimental\n+\n+    extern \"avr-interrupt\" fn dm() {}\n+    //~^ ERROR avr-interrupt and avr-non-blocking-interrupt ABIs are experimental\n+    extern \"avr-non-blocking-interrupt\" fn dmu() {}\n+    //~^ ERROR avr-interrupt and avr-non-blocking-interrupt ABIs are experimental\n+}\n+\n+struct S;\n+impl T for S {\n+    extern \"avr-interrupt\" fn m() {}\n+    //~^ ERROR avr-interrupt and avr-non-blocking-interrupt ABIs are experimental\n+    extern \"avr-non-blocking-interrupt\" fn mu() {}\n+    //~^ ERROR avr-interrupt and avr-non-blocking-interrupt ABIs are experimental\n+}\n \n-fn main() {\n-    foo();\n+impl S {\n+    extern \"avr-interrupt\" fn im() {}\n+    //~^ ERROR avr-interrupt and avr-non-blocking-interrupt ABIs are experimental\n+    extern \"avr-non-blocking-interrupt\" fn imu() {}\n+    //~^ ERROR avr-interrupt and avr-non-blocking-interrupt ABIs are experimental\n }\n+\n+type TA = extern \"avr-interrupt\" fn();\n+//~^ ERROR avr-interrupt and avr-non-blocking-interrupt ABIs are experimental\n+type TAU = extern \"avr-non-blocking-interrupt\" fn();\n+//~^ ERROR avr-interrupt and avr-non-blocking-interrupt ABIs are experimental\n+\n+extern \"avr-interrupt\" {}\n+//~^ ERROR avr-interrupt and avr-non-blocking-interrupt ABIs are experimental\n+extern \"avr-non-blocking-interrupt\" {}\n+//~^ ERROR avr-interrupt and avr-non-blocking-interrupt ABIs are experimental"}, {"sha": "d017d03a3853ac4952b4ce9593202dfc52b68570", "filename": "src/test/ui/feature-gates/feature-gate-abi-avr-interrupt.stderr", "status": "modified", "additions": 120, "deletions": 3, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-avr-interrupt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-avr-interrupt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-avr-interrupt.stderr?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,12 +1,129 @@\n error[E0658]: avr-interrupt and avr-non-blocking-interrupt ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi-avr-interrupt.rs:4:8\n+  --> $DIR/feature-gate-abi-avr-interrupt.rs:11:8\n    |\n-LL | extern \"avr-interrupt\" fn foo() {}\n+LL | extern \"avr-non-blocking-interrupt\" fn fu() {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #69664 <https://github.com/rust-lang/rust/issues/69664> for more information\n+   = help: add `#![feature(abi_avr_interrupt)]` to the crate attributes to enable\n+\n+error[E0658]: avr-interrupt and avr-non-blocking-interrupt ABIs are experimental and subject to change\n+  --> $DIR/feature-gate-abi-avr-interrupt.rs:13:8\n+   |\n+LL | extern \"avr-interrupt\" fn f() {}\n    |        ^^^^^^^^^^^^^^^\n    |\n    = note: see issue #69664 <https://github.com/rust-lang/rust/issues/69664> for more information\n    = help: add `#![feature(abi_avr_interrupt)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: avr-interrupt and avr-non-blocking-interrupt ABIs are experimental and subject to change\n+  --> $DIR/feature-gate-abi-avr-interrupt.rs:17:12\n+   |\n+LL |     extern \"avr-interrupt\" fn m();\n+   |            ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #69664 <https://github.com/rust-lang/rust/issues/69664> for more information\n+   = help: add `#![feature(abi_avr_interrupt)]` to the crate attributes to enable\n+\n+error[E0658]: avr-interrupt and avr-non-blocking-interrupt ABIs are experimental and subject to change\n+  --> $DIR/feature-gate-abi-avr-interrupt.rs:19:12\n+   |\n+LL |     extern \"avr-non-blocking-interrupt\" fn mu();\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #69664 <https://github.com/rust-lang/rust/issues/69664> for more information\n+   = help: add `#![feature(abi_avr_interrupt)]` to the crate attributes to enable\n+\n+error[E0658]: avr-interrupt and avr-non-blocking-interrupt ABIs are experimental and subject to change\n+  --> $DIR/feature-gate-abi-avr-interrupt.rs:22:12\n+   |\n+LL |     extern \"avr-interrupt\" fn dm() {}\n+   |            ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #69664 <https://github.com/rust-lang/rust/issues/69664> for more information\n+   = help: add `#![feature(abi_avr_interrupt)]` to the crate attributes to enable\n+\n+error[E0658]: avr-interrupt and avr-non-blocking-interrupt ABIs are experimental and subject to change\n+  --> $DIR/feature-gate-abi-avr-interrupt.rs:24:12\n+   |\n+LL |     extern \"avr-non-blocking-interrupt\" fn dmu() {}\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #69664 <https://github.com/rust-lang/rust/issues/69664> for more information\n+   = help: add `#![feature(abi_avr_interrupt)]` to the crate attributes to enable\n+\n+error[E0658]: avr-interrupt and avr-non-blocking-interrupt ABIs are experimental and subject to change\n+  --> $DIR/feature-gate-abi-avr-interrupt.rs:30:12\n+   |\n+LL |     extern \"avr-interrupt\" fn m() {}\n+   |            ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #69664 <https://github.com/rust-lang/rust/issues/69664> for more information\n+   = help: add `#![feature(abi_avr_interrupt)]` to the crate attributes to enable\n+\n+error[E0658]: avr-interrupt and avr-non-blocking-interrupt ABIs are experimental and subject to change\n+  --> $DIR/feature-gate-abi-avr-interrupt.rs:32:12\n+   |\n+LL |     extern \"avr-non-blocking-interrupt\" fn mu() {}\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #69664 <https://github.com/rust-lang/rust/issues/69664> for more information\n+   = help: add `#![feature(abi_avr_interrupt)]` to the crate attributes to enable\n+\n+error[E0658]: avr-interrupt and avr-non-blocking-interrupt ABIs are experimental and subject to change\n+  --> $DIR/feature-gate-abi-avr-interrupt.rs:37:12\n+   |\n+LL |     extern \"avr-interrupt\" fn im() {}\n+   |            ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #69664 <https://github.com/rust-lang/rust/issues/69664> for more information\n+   = help: add `#![feature(abi_avr_interrupt)]` to the crate attributes to enable\n+\n+error[E0658]: avr-interrupt and avr-non-blocking-interrupt ABIs are experimental and subject to change\n+  --> $DIR/feature-gate-abi-avr-interrupt.rs:39:12\n+   |\n+LL |     extern \"avr-non-blocking-interrupt\" fn imu() {}\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #69664 <https://github.com/rust-lang/rust/issues/69664> for more information\n+   = help: add `#![feature(abi_avr_interrupt)]` to the crate attributes to enable\n+\n+error[E0658]: avr-interrupt and avr-non-blocking-interrupt ABIs are experimental and subject to change\n+  --> $DIR/feature-gate-abi-avr-interrupt.rs:43:18\n+   |\n+LL | type TA = extern \"avr-interrupt\" fn();\n+   |                  ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #69664 <https://github.com/rust-lang/rust/issues/69664> for more information\n+   = help: add `#![feature(abi_avr_interrupt)]` to the crate attributes to enable\n+\n+error[E0658]: avr-interrupt and avr-non-blocking-interrupt ABIs are experimental and subject to change\n+  --> $DIR/feature-gate-abi-avr-interrupt.rs:45:19\n+   |\n+LL | type TAU = extern \"avr-non-blocking-interrupt\" fn();\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #69664 <https://github.com/rust-lang/rust/issues/69664> for more information\n+   = help: add `#![feature(abi_avr_interrupt)]` to the crate attributes to enable\n+\n+error[E0658]: avr-interrupt and avr-non-blocking-interrupt ABIs are experimental and subject to change\n+  --> $DIR/feature-gate-abi-avr-interrupt.rs:48:8\n+   |\n+LL | extern \"avr-interrupt\" {}\n+   |        ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #69664 <https://github.com/rust-lang/rust/issues/69664> for more information\n+   = help: add `#![feature(abi_avr_interrupt)]` to the crate attributes to enable\n+\n+error[E0658]: avr-interrupt and avr-non-blocking-interrupt ABIs are experimental and subject to change\n+  --> $DIR/feature-gate-abi-avr-interrupt.rs:50:8\n+   |\n+LL | extern \"avr-non-blocking-interrupt\" {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #69664 <https://github.com/rust-lang/rust/issues/69664> for more information\n+   = help: add `#![feature(abi_avr_interrupt)]` to the crate attributes to enable\n+\n+error: aborting due to 14 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "8b7d8066aa67434b6a790f58342c5527acdcdec9", "filename": "src/test/ui/feature-gates/feature-gate-abi-msp430-interrupt.rs", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-msp430-interrupt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-msp430-interrupt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-msp430-interrupt.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,11 +1,34 @@\n-// Test that the MSP430 interrupt ABI cannot be used when msp430_interrupt\n-// feature gate is not used.\n+// needs-llvm-components: msp430\n+// compile-flags: --target=msp430-none-elf --crate-type=rlib\n+#![no_core]\n+#![feature(no_core, lang_items)]\n+#[lang=\"sized\"]\n+trait Sized { }\n \n-// ignore-riscv64 msp430 is not supported\n+extern \"msp430-interrupt\" fn f() {}\n+//~^ ERROR msp430-interrupt ABI is experimental\n \n-extern \"msp430-interrupt\" fn foo() {}\n-//~^ ERROR msp430-interrupt ABI is experimental and subject to change\n+trait T {\n+    extern \"msp430-interrupt\" fn m();\n+    //~^ ERROR msp430-interrupt ABI is experimental\n \n-fn main() {\n-    foo();\n+    extern \"msp430-interrupt\" fn dm() {}\n+    //~^ ERROR msp430-interrupt ABI is experimental\n }\n+\n+struct S;\n+impl T for S {\n+    extern \"msp430-interrupt\" fn m() {}\n+    //~^ ERROR msp430-interrupt ABI is experimental\n+}\n+\n+impl S {\n+    extern \"msp430-interrupt\" fn im() {}\n+    //~^ ERROR msp430-interrupt ABI is experimental\n+}\n+\n+type TA = extern \"msp430-interrupt\" fn();\n+//~^ ERROR msp430-interrupt ABI is experimental\n+\n+extern \"msp430-interrupt\" {}\n+//~^ ERROR msp430-interrupt ABI is experimental"}, {"sha": "c19ec97896ba3a953664bb942151b2cd91f7d275", "filename": "src/test/ui/feature-gates/feature-gate-abi-msp430-interrupt.stderr", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-msp430-interrupt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-msp430-interrupt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-msp430-interrupt.stderr?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,12 +1,66 @@\n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi-msp430-interrupt.rs:6:8\n+  --> $DIR/feature-gate-abi-msp430-interrupt.rs:8:8\n    |\n-LL | extern \"msp430-interrupt\" fn foo() {}\n+LL | extern \"msp430-interrupt\" fn f() {}\n    |        ^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #38487 <https://github.com/rust-lang/rust/issues/38487> for more information\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: msp430-interrupt ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi-msp430-interrupt.rs:12:12\n+   |\n+LL |     extern \"msp430-interrupt\" fn m();\n+   |            ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #38487 <https://github.com/rust-lang/rust/issues/38487> for more information\n+   = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n+\n+error[E0658]: msp430-interrupt ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi-msp430-interrupt.rs:15:12\n+   |\n+LL |     extern \"msp430-interrupt\" fn dm() {}\n+   |            ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #38487 <https://github.com/rust-lang/rust/issues/38487> for more information\n+   = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n+\n+error[E0658]: msp430-interrupt ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi-msp430-interrupt.rs:21:12\n+   |\n+LL |     extern \"msp430-interrupt\" fn m() {}\n+   |            ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #38487 <https://github.com/rust-lang/rust/issues/38487> for more information\n+   = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n+\n+error[E0658]: msp430-interrupt ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi-msp430-interrupt.rs:26:12\n+   |\n+LL |     extern \"msp430-interrupt\" fn im() {}\n+   |            ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #38487 <https://github.com/rust-lang/rust/issues/38487> for more information\n+   = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n+\n+error[E0658]: msp430-interrupt ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi-msp430-interrupt.rs:30:18\n+   |\n+LL | type TA = extern \"msp430-interrupt\" fn();\n+   |                  ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #38487 <https://github.com/rust-lang/rust/issues/38487> for more information\n+   = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n+\n+error[E0658]: msp430-interrupt ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi-msp430-interrupt.rs:33:8\n+   |\n+LL | extern \"msp430-interrupt\" {}\n+   |        ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #38487 <https://github.com/rust-lang/rust/issues/38487> for more information\n+   = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n+\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "7c3e4d10d990361b460120ae68c57d49cbdc2754", "filename": "src/test/ui/feature-gates/feature-gate-abi-x86-interrupt.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-x86-interrupt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-x86-interrupt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-x86-interrupt.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -0,0 +1,28 @@\n+// needs-llvm-components: x86\n+// compile-flags: --target=x86_64-unknown-linux-gnu --crate-type=rlib\n+#![no_core]\n+#![feature(no_core, lang_items)]\n+#[lang=\"sized\"]\n+trait Sized { }\n+\n+extern \"x86-interrupt\" fn f7() {} //~ ERROR x86-interrupt ABI is experimental\n+trait Tr {\n+    extern \"x86-interrupt\" fn m7(); //~ ERROR x86-interrupt ABI is experimental\n+    extern \"x86-interrupt\" fn dm7() {} //~ ERROR x86-interrupt ABI is experimental\n+}\n+\n+struct S;\n+\n+// Methods in trait impl\n+impl Tr for S {\n+    extern \"x86-interrupt\" fn m7() {} //~ ERROR x86-interrupt ABI is experimental\n+}\n+\n+// Methods in inherent impl\n+impl S {\n+    extern \"x86-interrupt\" fn im7() {} //~ ERROR x86-interrupt ABI is experimental\n+}\n+\n+type A7 = extern \"x86-interrupt\" fn(); //~ ERROR x86-interrupt ABI is experimental\n+\n+extern \"x86-interrupt\" {} //~ ERROR x86-interrupt ABI is experimental"}, {"sha": "3b727a745e8ffc9e0dc732bb0f8b3609be24d702", "filename": "src/test/ui/feature-gates/feature-gate-abi-x86-interrupt.stderr", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-x86-interrupt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-x86-interrupt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi-x86-interrupt.stderr?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -0,0 +1,66 @@\n+error[E0658]: x86-interrupt ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi-x86-interrupt.rs:8:8\n+   |\n+LL | extern \"x86-interrupt\" fn f7() {}\n+   |        ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #40180 <https://github.com/rust-lang/rust/issues/40180> for more information\n+   = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n+\n+error[E0658]: x86-interrupt ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi-x86-interrupt.rs:10:12\n+   |\n+LL |     extern \"x86-interrupt\" fn m7();\n+   |            ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #40180 <https://github.com/rust-lang/rust/issues/40180> for more information\n+   = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n+\n+error[E0658]: x86-interrupt ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi-x86-interrupt.rs:11:12\n+   |\n+LL |     extern \"x86-interrupt\" fn dm7() {}\n+   |            ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #40180 <https://github.com/rust-lang/rust/issues/40180> for more information\n+   = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n+\n+error[E0658]: x86-interrupt ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi-x86-interrupt.rs:18:12\n+   |\n+LL |     extern \"x86-interrupt\" fn m7() {}\n+   |            ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #40180 <https://github.com/rust-lang/rust/issues/40180> for more information\n+   = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n+\n+error[E0658]: x86-interrupt ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi-x86-interrupt.rs:23:12\n+   |\n+LL |     extern \"x86-interrupt\" fn im7() {}\n+   |            ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #40180 <https://github.com/rust-lang/rust/issues/40180> for more information\n+   = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n+\n+error[E0658]: x86-interrupt ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi-x86-interrupt.rs:26:18\n+   |\n+LL | type A7 = extern \"x86-interrupt\" fn();\n+   |                  ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #40180 <https://github.com/rust-lang/rust/issues/40180> for more information\n+   = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n+\n+error[E0658]: x86-interrupt ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi-x86-interrupt.rs:28:8\n+   |\n+LL | extern \"x86-interrupt\" {}\n+   |        ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #40180 <https://github.com/rust-lang/rust/issues/40180> for more information\n+   = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "855263595d0ba5672b187e5df29b83e0516cf4bb", "filename": "src/test/ui/feature-gates/feature-gate-abi.rs", "status": "modified", "additions": 7, "deletions": 57, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,53 +1,33 @@\n-// only-x86_64\n // gate-test-intrinsics\n // gate-test-platform_intrinsics\n-// gate-test-abi_vectorcall\n-// gate-test-abi_thiscall\n-// gate-test-abi_ptx\n-// gate-test-abi_x86_interrupt\n-// gate-test-abi_amdgpu_kernel\n // gate-test-abi_efiapi\n+// compile-flags: --crate-type=rlib\n+\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized { }\n \n // Functions\n extern \"rust-intrinsic\" fn f1() {} //~ ERROR intrinsics are subject to change\n                                    //~^ ERROR intrinsic must be in\n extern \"platform-intrinsic\" fn f2() {} //~ ERROR platform intrinsics are experimental\n                                        //~^ ERROR intrinsic must be in\n-extern \"vectorcall\" fn f3() {} //~ ERROR vectorcall is experimental and subject to change\n extern \"rust-call\" fn f4(_: ()) {} //~ ERROR rust-call ABI is subject to change\n-extern \"msp430-interrupt\" fn f5() {} //~ ERROR msp430-interrupt ABI is experimental\n-extern \"ptx-kernel\" fn f6() {} //~ ERROR PTX ABIs are experimental and subject to change\n-extern \"x86-interrupt\" fn f7() {} //~ ERROR x86-interrupt ABI is experimental\n-extern \"thiscall\" fn f8() {} //~ ERROR thiscall is experimental and subject to change\n-extern \"amdgpu-kernel\" fn f9() {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n extern \"efiapi\" fn f10() {} //~ ERROR efiapi ABI is experimental and subject to change\n-extern \"wasm\" fn f11() {} //~ ERROR wasm ABI is experimental and subject to change\n \n // Methods in trait definition\n trait Tr {\n     extern \"rust-intrinsic\" fn m1(); //~ ERROR intrinsics are subject to change\n                                      //~^ ERROR intrinsic must be in\n     extern \"platform-intrinsic\" fn m2(); //~ ERROR platform intrinsics are experimental\n                                          //~^ ERROR intrinsic must be in\n-    extern \"vectorcall\" fn m3(); //~ ERROR vectorcall is experimental and subject to change\n     extern \"rust-call\" fn m4(_: ()); //~ ERROR rust-call ABI is subject to change\n-    extern \"msp430-interrupt\" fn m5(); //~ ERROR msp430-interrupt ABI is experimental\n-    extern \"ptx-kernel\" fn m6(); //~ ERROR PTX ABIs are experimental and subject to change\n-    extern \"x86-interrupt\" fn m7(); //~ ERROR x86-interrupt ABI is experimental\n-    extern \"thiscall\" fn m8(); //~ ERROR thiscall is experimental and subject to change\n-    extern \"amdgpu-kernel\" fn m9(); //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n     extern \"efiapi\" fn m10(); //~ ERROR efiapi ABI is experimental and subject to change\n-    extern \"wasm\" fn m11() {} //~ ERROR wasm ABI is experimental and subject to change\n \n-    extern \"vectorcall\" fn dm3() {} //~ ERROR vectorcall is experimental and subject to change\n     extern \"rust-call\" fn dm4(_: ()) {} //~ ERROR rust-call ABI is subject to change\n-    extern \"msp430-interrupt\" fn dm5() {} //~ ERROR msp430-interrupt ABI is experimental\n-    extern \"ptx-kernel\" fn dm6() {} //~ ERROR PTX ABIs are experimental and subject to change\n-    extern \"x86-interrupt\" fn dm7() {} //~ ERROR x86-interrupt ABI is experimental\n-    extern \"thiscall\" fn dm8() {} //~ ERROR thiscall is experimental and subject to change\n-    extern \"amdgpu-kernel\" fn dm9() {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n     extern \"efiapi\" fn dm10() {} //~ ERROR efiapi ABI is experimental and subject to change\n-    extern \"wasm\" fn dm11() {} //~ ERROR wasm ABI is experimental and subject to change\n }\n \n struct S;\n@@ -58,15 +38,8 @@ impl Tr for S {\n                                        //~^ ERROR intrinsic must be in\n     extern \"platform-intrinsic\" fn m2() {} //~ ERROR platform intrinsics are experimental\n                                            //~^ ERROR intrinsic must be in\n-    extern \"vectorcall\" fn m3() {} //~ ERROR vectorcall is experimental and subject to change\n     extern \"rust-call\" fn m4(_: ()) {} //~ ERROR rust-call ABI is subject to change\n-    extern \"msp430-interrupt\" fn m5() {} //~ ERROR msp430-interrupt ABI is experimental\n-    extern \"ptx-kernel\" fn m6() {} //~ ERROR PTX ABIs are experimental and subject to change\n-    extern \"x86-interrupt\" fn m7() {} //~ ERROR x86-interrupt ABI is experimental\n-    extern \"thiscall\" fn m8() {} //~ ERROR thiscall is experimental and subject to change\n-    extern \"amdgpu-kernel\" fn m9() {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n     extern \"efiapi\" fn m10() {} //~ ERROR efiapi ABI is experimental and subject to change\n-    extern \"wasm\" fn m11() {} //~ ERROR wasm ABI is experimental and subject to change\n }\n \n // Methods in inherent impl\n@@ -75,41 +48,18 @@ impl S {\n                                         //~^ ERROR intrinsic must be in\n     extern \"platform-intrinsic\" fn im2() {} //~ ERROR platform intrinsics are experimental\n                                             //~^ ERROR intrinsic must be in\n-    extern \"vectorcall\" fn im3() {} //~ ERROR vectorcall is experimental and subject to change\n     extern \"rust-call\" fn im4(_: ()) {} //~ ERROR rust-call ABI is subject to change\n-    extern \"msp430-interrupt\" fn im5() {} //~ ERROR msp430-interrupt ABI is experimental\n-    extern \"ptx-kernel\" fn im6() {} //~ ERROR PTX ABIs are experimental and subject to change\n-    extern \"x86-interrupt\" fn im7() {} //~ ERROR x86-interrupt ABI is experimental\n-    extern \"thiscall\" fn im8() {} //~ ERROR thiscall is experimental and subject to change\n-    extern \"amdgpu-kernel\" fn im9() {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n     extern \"efiapi\" fn im10() {} //~ ERROR efiapi ABI is experimental and subject to change\n-    extern \"wasm\" fn im11() {} //~ ERROR wasm ABI is experimental and subject to change\n }\n \n // Function pointer types\n type A1 = extern \"rust-intrinsic\" fn(); //~ ERROR intrinsics are subject to change\n type A2 = extern \"platform-intrinsic\" fn(); //~ ERROR platform intrinsics are experimental\n-type A3 = extern \"vectorcall\" fn(); //~ ERROR vectorcall is experimental and subject to change\n type A4 = extern \"rust-call\" fn(_: ()); //~ ERROR rust-call ABI is subject to change\n-type A5 = extern \"msp430-interrupt\" fn(); //~ ERROR msp430-interrupt ABI is experimental\n-type A6 = extern \"ptx-kernel\" fn(); //~ ERROR PTX ABIs are experimental and subject to change\n-type A7 = extern \"x86-interrupt\" fn(); //~ ERROR x86-interrupt ABI is experimental\n-type A8 = extern \"thiscall\" fn(); //~ ERROR thiscall is experimental and subject to change\n-type A9 = extern \"amdgpu-kernel\" fn(); //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n type A10 = extern \"efiapi\" fn(); //~ ERROR efiapi ABI is experimental and subject to change\n-type A11 = extern \"wasm\" fn(); //~ ERROR wasm ABI is experimental and subject to change\n \n // Foreign modules\n extern \"rust-intrinsic\" {} //~ ERROR intrinsics are subject to change\n extern \"platform-intrinsic\" {} //~ ERROR platform intrinsics are experimental\n-extern \"vectorcall\" {} //~ ERROR vectorcall is experimental and subject to change\n extern \"rust-call\" {} //~ ERROR rust-call ABI is subject to change\n-extern \"msp430-interrupt\" {} //~ ERROR msp430-interrupt ABI is experimental\n-extern \"ptx-kernel\" {} //~ ERROR PTX ABIs are experimental and subject to change\n-extern \"x86-interrupt\" {} //~ ERROR x86-interrupt ABI is experimental\n-extern \"thiscall\" {} //~ ERROR thiscall is experimental and subject to change\n-extern \"amdgpu-kernel\" {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n extern \"efiapi\" {} //~ ERROR efiapi ABI is experimental and subject to change\n-extern \"wasm\" {} //~ ERROR wasm ABI is experimental and subject to change\n-\n-fn main() {}"}, {"sha": "bcca39c8fb808c63b73a7cbba084d6dcb85216ef", "filename": "src/test/ui/feature-gates/feature-gate-abi.stderr", "status": "modified", "additions": 34, "deletions": 461, "changes": 495, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,28 +1,20 @@\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:12:8\n+  --> $DIR/feature-gate-abi.rs:13:8\n    |\n LL | extern \"rust-intrinsic\" fn f1() {}\n    |        ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:14:8\n+  --> $DIR/feature-gate-abi.rs:15:8\n    |\n LL | extern \"platform-intrinsic\" fn f2() {}\n    |        ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #27731 <https://github.com/rust-lang/rust/issues/27731> for more information\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n-error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:16:8\n-   |\n-LL | extern \"vectorcall\" fn f3() {}\n-   |        ^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n-\n error[E0658]: rust-call ABI is subject to change\n   --> $DIR/feature-gate-abi.rs:17:8\n    |\n@@ -32,675 +24,256 @@ LL | extern \"rust-call\" fn f4(_: ()) {}\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n-error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:18:8\n-   |\n-LL | extern \"msp430-interrupt\" fn f5() {}\n-   |        ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #38487 <https://github.com/rust-lang/rust/issues/38487> for more information\n-   = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n-\n-error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:19:8\n-   |\n-LL | extern \"ptx-kernel\" fn f6() {}\n-   |        ^^^^^^^^^^^^\n-   |\n-   = note: see issue #38788 <https://github.com/rust-lang/rust/issues/38788> for more information\n-   = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n-\n-error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:20:8\n-   |\n-LL | extern \"x86-interrupt\" fn f7() {}\n-   |        ^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #40180 <https://github.com/rust-lang/rust/issues/40180> for more information\n-   = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n-\n-error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:21:8\n-   |\n-LL | extern \"thiscall\" fn f8() {}\n-   |        ^^^^^^^^^^\n-   |\n-   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n-\n-error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:22:8\n-   |\n-LL | extern \"amdgpu-kernel\" fn f9() {}\n-   |        ^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51575 <https://github.com/rust-lang/rust/issues/51575> for more information\n-   = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n-\n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:23:8\n+  --> $DIR/feature-gate-abi.rs:18:8\n    |\n LL | extern \"efiapi\" fn f10() {}\n    |        ^^^^^^^^\n    |\n    = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n-error[E0658]: wasm ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:24:8\n-   |\n-LL | extern \"wasm\" fn f11() {}\n-   |        ^^^^^^\n-   |\n-   = note: see issue #83788 <https://github.com/rust-lang/rust/issues/83788> for more information\n-   = help: add `#![feature(wasm_abi)]` to the crate attributes to enable\n-\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:28:12\n+  --> $DIR/feature-gate-abi.rs:22:12\n    |\n LL |     extern \"rust-intrinsic\" fn m1();\n    |            ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:30:12\n+  --> $DIR/feature-gate-abi.rs:24:12\n    |\n LL |     extern \"platform-intrinsic\" fn m2();\n    |            ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #27731 <https://github.com/rust-lang/rust/issues/27731> for more information\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n-error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:32:12\n-   |\n-LL |     extern \"vectorcall\" fn m3();\n-   |            ^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n-\n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:33:12\n+  --> $DIR/feature-gate-abi.rs:26:12\n    |\n LL |     extern \"rust-call\" fn m4(_: ());\n    |            ^^^^^^^^^^^\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n-error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:34:12\n-   |\n-LL |     extern \"msp430-interrupt\" fn m5();\n-   |            ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #38487 <https://github.com/rust-lang/rust/issues/38487> for more information\n-   = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n-\n-error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:35:12\n-   |\n-LL |     extern \"ptx-kernel\" fn m6();\n-   |            ^^^^^^^^^^^^\n-   |\n-   = note: see issue #38788 <https://github.com/rust-lang/rust/issues/38788> for more information\n-   = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n-\n-error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:36:12\n-   |\n-LL |     extern \"x86-interrupt\" fn m7();\n-   |            ^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #40180 <https://github.com/rust-lang/rust/issues/40180> for more information\n-   = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n-\n-error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:37:12\n-   |\n-LL |     extern \"thiscall\" fn m8();\n-   |            ^^^^^^^^^^\n-   |\n-   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n-\n-error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:38:12\n-   |\n-LL |     extern \"amdgpu-kernel\" fn m9();\n-   |            ^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51575 <https://github.com/rust-lang/rust/issues/51575> for more information\n-   = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n-\n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:39:12\n+  --> $DIR/feature-gate-abi.rs:27:12\n    |\n LL |     extern \"efiapi\" fn m10();\n    |            ^^^^^^^^\n    |\n    = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n-error[E0658]: wasm ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:40:12\n-   |\n-LL |     extern \"wasm\" fn m11() {}\n-   |            ^^^^^^\n-   |\n-   = note: see issue #83788 <https://github.com/rust-lang/rust/issues/83788> for more information\n-   = help: add `#![feature(wasm_abi)]` to the crate attributes to enable\n-\n-error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:42:12\n-   |\n-LL |     extern \"vectorcall\" fn dm3() {}\n-   |            ^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n-\n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:43:12\n+  --> $DIR/feature-gate-abi.rs:29:12\n    |\n LL |     extern \"rust-call\" fn dm4(_: ()) {}\n    |            ^^^^^^^^^^^\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n-error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:44:12\n-   |\n-LL |     extern \"msp430-interrupt\" fn dm5() {}\n-   |            ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #38487 <https://github.com/rust-lang/rust/issues/38487> for more information\n-   = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n-\n-error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:45:12\n-   |\n-LL |     extern \"ptx-kernel\" fn dm6() {}\n-   |            ^^^^^^^^^^^^\n-   |\n-   = note: see issue #38788 <https://github.com/rust-lang/rust/issues/38788> for more information\n-   = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n-\n-error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:46:12\n-   |\n-LL |     extern \"x86-interrupt\" fn dm7() {}\n-   |            ^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #40180 <https://github.com/rust-lang/rust/issues/40180> for more information\n-   = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n-\n-error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:47:12\n-   |\n-LL |     extern \"thiscall\" fn dm8() {}\n-   |            ^^^^^^^^^^\n-   |\n-   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n-\n-error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:48:12\n-   |\n-LL |     extern \"amdgpu-kernel\" fn dm9() {}\n-   |            ^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51575 <https://github.com/rust-lang/rust/issues/51575> for more information\n-   = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n-\n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:49:12\n+  --> $DIR/feature-gate-abi.rs:30:12\n    |\n LL |     extern \"efiapi\" fn dm10() {}\n    |            ^^^^^^^^\n    |\n    = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n-error[E0658]: wasm ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:50:12\n-   |\n-LL |     extern \"wasm\" fn dm11() {}\n-   |            ^^^^^^\n-   |\n-   = note: see issue #83788 <https://github.com/rust-lang/rust/issues/83788> for more information\n-   = help: add `#![feature(wasm_abi)]` to the crate attributes to enable\n-\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:57:12\n+  --> $DIR/feature-gate-abi.rs:37:12\n    |\n LL |     extern \"rust-intrinsic\" fn m1() {}\n    |            ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:59:12\n+  --> $DIR/feature-gate-abi.rs:39:12\n    |\n LL |     extern \"platform-intrinsic\" fn m2() {}\n    |            ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #27731 <https://github.com/rust-lang/rust/issues/27731> for more information\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n-error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:61:12\n-   |\n-LL |     extern \"vectorcall\" fn m3() {}\n-   |            ^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n-\n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:62:12\n+  --> $DIR/feature-gate-abi.rs:41:12\n    |\n LL |     extern \"rust-call\" fn m4(_: ()) {}\n    |            ^^^^^^^^^^^\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n-error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:63:12\n-   |\n-LL |     extern \"msp430-interrupt\" fn m5() {}\n-   |            ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #38487 <https://github.com/rust-lang/rust/issues/38487> for more information\n-   = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n-\n-error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:64:12\n-   |\n-LL |     extern \"ptx-kernel\" fn m6() {}\n-   |            ^^^^^^^^^^^^\n-   |\n-   = note: see issue #38788 <https://github.com/rust-lang/rust/issues/38788> for more information\n-   = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n-\n-error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:65:12\n-   |\n-LL |     extern \"x86-interrupt\" fn m7() {}\n-   |            ^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #40180 <https://github.com/rust-lang/rust/issues/40180> for more information\n-   = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n-\n-error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:66:12\n-   |\n-LL |     extern \"thiscall\" fn m8() {}\n-   |            ^^^^^^^^^^\n-   |\n-   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n-\n-error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:67:12\n-   |\n-LL |     extern \"amdgpu-kernel\" fn m9() {}\n-   |            ^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51575 <https://github.com/rust-lang/rust/issues/51575> for more information\n-   = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n-\n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:68:12\n+  --> $DIR/feature-gate-abi.rs:42:12\n    |\n LL |     extern \"efiapi\" fn m10() {}\n    |            ^^^^^^^^\n    |\n    = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n-error[E0658]: wasm ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:69:12\n-   |\n-LL |     extern \"wasm\" fn m11() {}\n-   |            ^^^^^^\n-   |\n-   = note: see issue #83788 <https://github.com/rust-lang/rust/issues/83788> for more information\n-   = help: add `#![feature(wasm_abi)]` to the crate attributes to enable\n-\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:74:12\n+  --> $DIR/feature-gate-abi.rs:47:12\n    |\n LL |     extern \"rust-intrinsic\" fn im1() {}\n    |            ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:76:12\n+  --> $DIR/feature-gate-abi.rs:49:12\n    |\n LL |     extern \"platform-intrinsic\" fn im2() {}\n    |            ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #27731 <https://github.com/rust-lang/rust/issues/27731> for more information\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n-error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:78:12\n-   |\n-LL |     extern \"vectorcall\" fn im3() {}\n-   |            ^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n-\n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:79:12\n+  --> $DIR/feature-gate-abi.rs:51:12\n    |\n LL |     extern \"rust-call\" fn im4(_: ()) {}\n    |            ^^^^^^^^^^^\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n-error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:80:12\n-   |\n-LL |     extern \"msp430-interrupt\" fn im5() {}\n-   |            ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #38487 <https://github.com/rust-lang/rust/issues/38487> for more information\n-   = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n-\n-error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:81:12\n-   |\n-LL |     extern \"ptx-kernel\" fn im6() {}\n-   |            ^^^^^^^^^^^^\n-   |\n-   = note: see issue #38788 <https://github.com/rust-lang/rust/issues/38788> for more information\n-   = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n-\n-error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:82:12\n-   |\n-LL |     extern \"x86-interrupt\" fn im7() {}\n-   |            ^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #40180 <https://github.com/rust-lang/rust/issues/40180> for more information\n-   = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n-\n-error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:83:12\n-   |\n-LL |     extern \"thiscall\" fn im8() {}\n-   |            ^^^^^^^^^^\n-   |\n-   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n-\n-error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:84:12\n-   |\n-LL |     extern \"amdgpu-kernel\" fn im9() {}\n-   |            ^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51575 <https://github.com/rust-lang/rust/issues/51575> for more information\n-   = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n-\n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:85:12\n+  --> $DIR/feature-gate-abi.rs:52:12\n    |\n LL |     extern \"efiapi\" fn im10() {}\n    |            ^^^^^^^^\n    |\n    = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n-error[E0658]: wasm ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:86:12\n-   |\n-LL |     extern \"wasm\" fn im11() {}\n-   |            ^^^^^^\n-   |\n-   = note: see issue #83788 <https://github.com/rust-lang/rust/issues/83788> for more information\n-   = help: add `#![feature(wasm_abi)]` to the crate attributes to enable\n-\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:90:18\n+  --> $DIR/feature-gate-abi.rs:56:18\n    |\n LL | type A1 = extern \"rust-intrinsic\" fn();\n    |                  ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:91:18\n+  --> $DIR/feature-gate-abi.rs:57:18\n    |\n LL | type A2 = extern \"platform-intrinsic\" fn();\n    |                  ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #27731 <https://github.com/rust-lang/rust/issues/27731> for more information\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n-error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:92:18\n-   |\n-LL | type A3 = extern \"vectorcall\" fn();\n-   |                  ^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n-\n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:93:18\n+  --> $DIR/feature-gate-abi.rs:58:18\n    |\n LL | type A4 = extern \"rust-call\" fn(_: ());\n    |                  ^^^^^^^^^^^\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n-error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:94:18\n-   |\n-LL | type A5 = extern \"msp430-interrupt\" fn();\n-   |                  ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #38487 <https://github.com/rust-lang/rust/issues/38487> for more information\n-   = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n-\n-error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:95:18\n-   |\n-LL | type A6 = extern \"ptx-kernel\" fn();\n-   |                  ^^^^^^^^^^^^\n-   |\n-   = note: see issue #38788 <https://github.com/rust-lang/rust/issues/38788> for more information\n-   = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n-\n-error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:96:18\n-   |\n-LL | type A7 = extern \"x86-interrupt\" fn();\n-   |                  ^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #40180 <https://github.com/rust-lang/rust/issues/40180> for more information\n-   = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n-\n-error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:97:18\n-   |\n-LL | type A8 = extern \"thiscall\" fn();\n-   |                  ^^^^^^^^^^\n-   |\n-   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n-\n-error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:98:18\n-   |\n-LL | type A9 = extern \"amdgpu-kernel\" fn();\n-   |                  ^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51575 <https://github.com/rust-lang/rust/issues/51575> for more information\n-   = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n-\n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:99:19\n+  --> $DIR/feature-gate-abi.rs:59:19\n    |\n LL | type A10 = extern \"efiapi\" fn();\n    |                   ^^^^^^^^\n    |\n    = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n-error[E0658]: wasm ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:100:19\n-   |\n-LL | type A11 = extern \"wasm\" fn();\n-   |                   ^^^^^^\n-   |\n-   = note: see issue #83788 <https://github.com/rust-lang/rust/issues/83788> for more information\n-   = help: add `#![feature(wasm_abi)]` to the crate attributes to enable\n-\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:103:8\n+  --> $DIR/feature-gate-abi.rs:62:8\n    |\n LL | extern \"rust-intrinsic\" {}\n    |        ^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:104:8\n+  --> $DIR/feature-gate-abi.rs:63:8\n    |\n LL | extern \"platform-intrinsic\" {}\n    |        ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #27731 <https://github.com/rust-lang/rust/issues/27731> for more information\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n-error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:105:8\n-   |\n-LL | extern \"vectorcall\" {}\n-   |        ^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n-\n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:106:8\n+  --> $DIR/feature-gate-abi.rs:64:8\n    |\n LL | extern \"rust-call\" {}\n    |        ^^^^^^^^^^^\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n-error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:107:8\n-   |\n-LL | extern \"msp430-interrupt\" {}\n-   |        ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #38487 <https://github.com/rust-lang/rust/issues/38487> for more information\n-   = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n-\n-error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:108:8\n-   |\n-LL | extern \"ptx-kernel\" {}\n-   |        ^^^^^^^^^^^^\n-   |\n-   = note: see issue #38788 <https://github.com/rust-lang/rust/issues/38788> for more information\n-   = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n-\n-error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:109:8\n-   |\n-LL | extern \"x86-interrupt\" {}\n-   |        ^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #40180 <https://github.com/rust-lang/rust/issues/40180> for more information\n-   = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n-\n-error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:110:8\n-   |\n-LL | extern \"thiscall\" {}\n-   |        ^^^^^^^^^^\n-   |\n-   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n-\n-error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:111:8\n-   |\n-LL | extern \"amdgpu-kernel\" {}\n-   |        ^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51575 <https://github.com/rust-lang/rust/issues/51575> for more information\n-   = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n-\n error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:112:8\n+  --> $DIR/feature-gate-abi.rs:65:8\n    |\n LL | extern \"efiapi\" {}\n    |        ^^^^^^^^\n    |\n    = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n    = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n \n-error[E0658]: wasm ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:113:8\n-   |\n-LL | extern \"wasm\" {}\n-   |        ^^^^^^\n-   |\n-   = note: see issue #83788 <https://github.com/rust-lang/rust/issues/83788> for more information\n-   = help: add `#![feature(wasm_abi)]` to the crate attributes to enable\n-\n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:28:32\n+  --> $DIR/feature-gate-abi.rs:22:32\n    |\n LL |     extern \"rust-intrinsic\" fn m1();\n    |                                ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:30:36\n+  --> $DIR/feature-gate-abi.rs:24:36\n    |\n LL |     extern \"platform-intrinsic\" fn m2();\n    |                                    ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:12:33\n+  --> $DIR/feature-gate-abi.rs:13:33\n    |\n LL | extern \"rust-intrinsic\" fn f1() {}\n    |                                 ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:14:37\n+  --> $DIR/feature-gate-abi.rs:15:37\n    |\n LL | extern \"platform-intrinsic\" fn f2() {}\n    |                                     ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:57:37\n+  --> $DIR/feature-gate-abi.rs:37:37\n    |\n LL |     extern \"rust-intrinsic\" fn m1() {}\n    |                                     ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:59:41\n+  --> $DIR/feature-gate-abi.rs:39:41\n    |\n LL |     extern \"platform-intrinsic\" fn m2() {}\n    |                                         ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:74:38\n+  --> $DIR/feature-gate-abi.rs:47:38\n    |\n LL |     extern \"rust-intrinsic\" fn im1() {}\n    |                                      ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:76:42\n+  --> $DIR/feature-gate-abi.rs:49:42\n    |\n LL |     extern \"platform-intrinsic\" fn im2() {}\n    |                                          ^^\n \n-error: aborting due to 83 previous errors\n+error: aborting due to 34 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "465b81d7fe33c48d5725e9eb01280323aaeba2a9", "filename": "src/test/ui/feature-gates/feature-gate-abi_amdgpu_kernel.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi_amdgpu_kernel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi_amdgpu_kernel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi_amdgpu_kernel.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -0,0 +1,30 @@\n+// compile-flags: --crate-type=rlib\n+#![no_core]\n+#![feature(no_core, lang_items)]\n+#[lang=\"sized\"]\n+trait Sized { }\n+\n+extern \"amdgpu-kernel\" fn fu() {} //~ ERROR amdgpu-kernel ABI is experimental\n+//~^ ERROR is not a supported ABI\n+\n+trait T {\n+    extern \"amdgpu-kernel\" fn mu(); //~ ERROR amdgpu-kernel ABI is experimental\n+    extern \"amdgpu-kernel\" fn dmu() {} //~ ERROR amdgpu-kernel ABI is experimental\n+    //~^ ERROR is not a supported ABI\n+}\n+\n+struct S;\n+impl T for S {\n+    extern \"amdgpu-kernel\" fn mu() {} //~ ERROR amdgpu-kernel ABI is experimental\n+    //~^ ERROR is not a supported ABI\n+}\n+\n+impl S {\n+    extern \"amdgpu-kernel\" fn imu() {} //~ ERROR amdgpu-kernel ABI is experimental\n+    //~^ ERROR is not a supported ABI\n+}\n+\n+type TAU = extern \"amdgpu-kernel\" fn(); //~ ERROR amdgpu-kernel ABI is experimental\n+\n+extern \"amdgpu-kernel\" {} //~ ERROR amdgpu-kernel ABI is experimental\n+//~^ ERROR is not a supported ABI"}, {"sha": "c89ab7bae116992618a755a03f16f2309050eb62", "filename": "src/test/ui/feature-gates/feature-gate-abi_amdgpu_kernel.stderr", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi_amdgpu_kernel.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi_amdgpu_kernel.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi_amdgpu_kernel.stderr?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -0,0 +1,97 @@\n+error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi_amdgpu_kernel.rs:7:8\n+   |\n+LL | extern \"amdgpu-kernel\" fn fu() {}\n+   |        ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #51575 <https://github.com/rust-lang/rust/issues/51575> for more information\n+   = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n+\n+error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi_amdgpu_kernel.rs:11:12\n+   |\n+LL |     extern \"amdgpu-kernel\" fn mu();\n+   |            ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #51575 <https://github.com/rust-lang/rust/issues/51575> for more information\n+   = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n+\n+error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi_amdgpu_kernel.rs:12:12\n+   |\n+LL |     extern \"amdgpu-kernel\" fn dmu() {}\n+   |            ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #51575 <https://github.com/rust-lang/rust/issues/51575> for more information\n+   = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n+\n+error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi_amdgpu_kernel.rs:18:12\n+   |\n+LL |     extern \"amdgpu-kernel\" fn mu() {}\n+   |            ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #51575 <https://github.com/rust-lang/rust/issues/51575> for more information\n+   = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n+\n+error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi_amdgpu_kernel.rs:23:12\n+   |\n+LL |     extern \"amdgpu-kernel\" fn imu() {}\n+   |            ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #51575 <https://github.com/rust-lang/rust/issues/51575> for more information\n+   = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n+\n+error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi_amdgpu_kernel.rs:27:19\n+   |\n+LL | type TAU = extern \"amdgpu-kernel\" fn();\n+   |                   ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #51575 <https://github.com/rust-lang/rust/issues/51575> for more information\n+   = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n+\n+error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi_amdgpu_kernel.rs:29:8\n+   |\n+LL | extern \"amdgpu-kernel\" {}\n+   |        ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #51575 <https://github.com/rust-lang/rust/issues/51575> for more information\n+   = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n+\n+error[E0570]: `\"amdgpu-kernel\"` is not a supported ABI for the current target\n+  --> $DIR/feature-gate-abi_amdgpu_kernel.rs:29:1\n+   |\n+LL | extern \"amdgpu-kernel\" {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0570]: `\"amdgpu-kernel\"` is not a supported ABI for the current target\n+  --> $DIR/feature-gate-abi_amdgpu_kernel.rs:7:1\n+   |\n+LL | extern \"amdgpu-kernel\" fn fu() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0570]: `\"amdgpu-kernel\"` is not a supported ABI for the current target\n+  --> $DIR/feature-gate-abi_amdgpu_kernel.rs:12:5\n+   |\n+LL |     extern \"amdgpu-kernel\" fn dmu() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0570]: `\"amdgpu-kernel\"` is not a supported ABI for the current target\n+  --> $DIR/feature-gate-abi_amdgpu_kernel.rs:18:5\n+   |\n+LL |     extern \"amdgpu-kernel\" fn mu() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0570]: `\"amdgpu-kernel\"` is not a supported ABI for the current target\n+  --> $DIR/feature-gate-abi_amdgpu_kernel.rs:23:5\n+   |\n+LL |     extern \"amdgpu-kernel\" fn imu() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 12 previous errors\n+\n+Some errors have detailed explanations: E0570, E0658.\n+For more information about an error, try `rustc --explain E0570`."}, {"sha": "e3405641ecd8256fd05d7234fec9ec5f55a1cd62", "filename": "src/test/ui/feature-gates/feature-gate-abi_ptx.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi_ptx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi_ptx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi_ptx.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -0,0 +1,26 @@\n+// needs-llvm-components: nvptx\n+// compile-flags: --target=nvptx64-nvidia-cuda --crate-type=rlib\n+#![no_core]\n+#![feature(no_core, lang_items)]\n+#[lang=\"sized\"]\n+trait Sized { }\n+\n+extern \"ptx-kernel\" fn fu() {} //~ ERROR PTX ABIs are experimental\n+\n+trait T {\n+    extern \"ptx-kernel\" fn mu(); //~ ERROR PTX ABIs are experimental\n+    extern \"ptx-kernel\" fn dmu() {} //~ ERROR PTX ABIs are experimental\n+}\n+\n+struct S;\n+impl T for S {\n+    extern \"ptx-kernel\" fn mu() {} //~ ERROR PTX ABIs are experimental\n+}\n+\n+impl S {\n+    extern \"ptx-kernel\" fn imu() {} //~ ERROR PTX ABIs are experimental\n+}\n+\n+type TAU = extern \"ptx-kernel\" fn(); //~ ERROR PTX ABIs are experimental\n+\n+extern \"ptx-kernel\" {} //~ ERROR PTX ABIs are experimental"}, {"sha": "40782d361ee33ac2eeffe5ec6e6900ceca19c389", "filename": "src/test/ui/feature-gates/feature-gate-abi_ptx.stderr", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi_ptx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi_ptx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi_ptx.stderr?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -0,0 +1,66 @@\n+error[E0658]: PTX ABIs are experimental and subject to change\n+  --> $DIR/feature-gate-abi_ptx.rs:8:8\n+   |\n+LL | extern \"ptx-kernel\" fn fu() {}\n+   |        ^^^^^^^^^^^^\n+   |\n+   = note: see issue #38788 <https://github.com/rust-lang/rust/issues/38788> for more information\n+   = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n+\n+error[E0658]: PTX ABIs are experimental and subject to change\n+  --> $DIR/feature-gate-abi_ptx.rs:11:12\n+   |\n+LL |     extern \"ptx-kernel\" fn mu();\n+   |            ^^^^^^^^^^^^\n+   |\n+   = note: see issue #38788 <https://github.com/rust-lang/rust/issues/38788> for more information\n+   = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n+\n+error[E0658]: PTX ABIs are experimental and subject to change\n+  --> $DIR/feature-gate-abi_ptx.rs:12:12\n+   |\n+LL |     extern \"ptx-kernel\" fn dmu() {}\n+   |            ^^^^^^^^^^^^\n+   |\n+   = note: see issue #38788 <https://github.com/rust-lang/rust/issues/38788> for more information\n+   = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n+\n+error[E0658]: PTX ABIs are experimental and subject to change\n+  --> $DIR/feature-gate-abi_ptx.rs:17:12\n+   |\n+LL |     extern \"ptx-kernel\" fn mu() {}\n+   |            ^^^^^^^^^^^^\n+   |\n+   = note: see issue #38788 <https://github.com/rust-lang/rust/issues/38788> for more information\n+   = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n+\n+error[E0658]: PTX ABIs are experimental and subject to change\n+  --> $DIR/feature-gate-abi_ptx.rs:21:12\n+   |\n+LL |     extern \"ptx-kernel\" fn imu() {}\n+   |            ^^^^^^^^^^^^\n+   |\n+   = note: see issue #38788 <https://github.com/rust-lang/rust/issues/38788> for more information\n+   = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n+\n+error[E0658]: PTX ABIs are experimental and subject to change\n+  --> $DIR/feature-gate-abi_ptx.rs:24:19\n+   |\n+LL | type TAU = extern \"ptx-kernel\" fn();\n+   |                   ^^^^^^^^^^^^\n+   |\n+   = note: see issue #38788 <https://github.com/rust-lang/rust/issues/38788> for more information\n+   = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n+\n+error[E0658]: PTX ABIs are experimental and subject to change\n+  --> $DIR/feature-gate-abi_ptx.rs:26:8\n+   |\n+LL | extern \"ptx-kernel\" {}\n+   |        ^^^^^^^^^^^^\n+   |\n+   = note: see issue #38788 <https://github.com/rust-lang/rust/issues/38788> for more information\n+   = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "5a6c6d28804c74bd71658d149133ce32fa375829", "filename": "src/test/ui/feature-gates/feature-gate-vectorcall.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-vectorcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-vectorcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-vectorcall.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -0,0 +1,31 @@\n+// gate-test-abi_vectorcall\n+// needs-llvm-components: x86\n+// compile-flags: --target=i686-pc-windows-msvc --crate-type=rlib\n+#![no_core]\n+#![feature(no_core, lang_items)]\n+#[lang=\"sized\"]\n+trait Sized { }\n+\n+// Test that the \"vectorcall-unwind\" ABI is feature-gated, and cannot be used when\n+// the `c_unwind` feature gate is not used.\n+\n+extern \"vectorcall\" fn f() {} //~ ERROR vectorcall is experimental\n+\n+trait T {\n+    extern \"vectorcall\" fn m(); //~ ERROR vectorcall is experimental\n+\n+    extern \"vectorcall\" fn dm() {} //~ ERROR vectorcall is experimental\n+}\n+\n+struct S;\n+impl T for S {\n+    extern \"vectorcall\" fn m() {} //~ ERROR vectorcall is experimental\n+}\n+\n+impl S {\n+    extern \"vectorcall\" fn im() {} //~ ERROR vectorcall is experimental\n+}\n+\n+type TA = extern \"vectorcall\" fn(); //~ ERROR vectorcall is experimental\n+\n+extern \"vectorcall\" {} //~ ERROR vectorcall is experimental"}, {"sha": "55ee76ec3f1bb1ce0fc2788f6cf7c2417b5d5d2a", "filename": "src/test/ui/feature-gates/feature-gate-vectorcall.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-vectorcall.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-vectorcall.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-vectorcall.stderr?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -0,0 +1,59 @@\n+error[E0658]: vectorcall is experimental and subject to change\n+  --> $DIR/feature-gate-vectorcall.rs:12:8\n+   |\n+LL | extern \"vectorcall\" fn f() {}\n+   |        ^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n+\n+error[E0658]: vectorcall is experimental and subject to change\n+  --> $DIR/feature-gate-vectorcall.rs:15:12\n+   |\n+LL |     extern \"vectorcall\" fn m();\n+   |            ^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n+\n+error[E0658]: vectorcall is experimental and subject to change\n+  --> $DIR/feature-gate-vectorcall.rs:17:12\n+   |\n+LL |     extern \"vectorcall\" fn dm() {}\n+   |            ^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n+\n+error[E0658]: vectorcall is experimental and subject to change\n+  --> $DIR/feature-gate-vectorcall.rs:22:12\n+   |\n+LL |     extern \"vectorcall\" fn m() {}\n+   |            ^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n+\n+error[E0658]: vectorcall is experimental and subject to change\n+  --> $DIR/feature-gate-vectorcall.rs:26:12\n+   |\n+LL |     extern \"vectorcall\" fn im() {}\n+   |            ^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n+\n+error[E0658]: vectorcall is experimental and subject to change\n+  --> $DIR/feature-gate-vectorcall.rs:29:18\n+   |\n+LL | type TA = extern \"vectorcall\" fn();\n+   |                  ^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n+\n+error[E0658]: vectorcall is experimental and subject to change\n+  --> $DIR/feature-gate-vectorcall.rs:31:8\n+   |\n+LL | extern \"vectorcall\" {}\n+   |        ^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "222c88daf94843d060563ce33e46cc4046848c8f", "filename": "src/test/ui/feature-gates/feature-gate-wasm_abi.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-wasm_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-wasm_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-wasm_abi.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,7 +1,26 @@\n-extern \"wasm\" fn foo() {\n-    //~^ ERROR: wasm ABI is experimental and subject to change\n+// needs-llvm-components: webassembly\n+// compile-flags: --target=wasm32-unknown-unknown --crate-type=rlib\n+#![no_core]\n+#![feature(no_core, lang_items)]\n+#[lang=\"sized\"]\n+trait Sized { }\n+\n+extern \"wasm\" fn fu() {} //~ ERROR wasm ABI is experimental\n+\n+trait T {\n+    extern \"wasm\" fn mu(); //~ ERROR wasm ABI is experimental\n+    extern \"wasm\" fn dmu() {} //~ ERROR wasm ABI is experimental\n+}\n+\n+struct S;\n+impl T for S {\n+    extern \"wasm\" fn mu() {} //~ ERROR wasm ABI is experimental\n }\n \n-fn main() {\n-    foo();\n+impl S {\n+    extern \"wasm\" fn imu() {} //~ ERROR wasm ABI is experimental\n }\n+\n+type TAU = extern \"wasm\" fn(); //~ ERROR wasm ABI is experimental\n+\n+extern \"wasm\" {} //~ ERROR wasm ABI is experimental"}, {"sha": "0140002e350a36e345608b61922b3ac7a726f6a5", "filename": "src/test/ui/feature-gates/feature-gate-wasm_abi.stderr", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-wasm_abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-wasm_abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-wasm_abi.stderr?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,12 +1,66 @@\n error[E0658]: wasm ABI is experimental and subject to change\n-  --> $DIR/feature-gate-wasm_abi.rs:1:8\n+  --> $DIR/feature-gate-wasm_abi.rs:8:8\n    |\n-LL | extern \"wasm\" fn foo() {\n+LL | extern \"wasm\" fn fu() {}\n    |        ^^^^^^\n    |\n    = note: see issue #83788 <https://github.com/rust-lang/rust/issues/83788> for more information\n    = help: add `#![feature(wasm_abi)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: wasm ABI is experimental and subject to change\n+  --> $DIR/feature-gate-wasm_abi.rs:11:12\n+   |\n+LL |     extern \"wasm\" fn mu();\n+   |            ^^^^^^\n+   |\n+   = note: see issue #83788 <https://github.com/rust-lang/rust/issues/83788> for more information\n+   = help: add `#![feature(wasm_abi)]` to the crate attributes to enable\n+\n+error[E0658]: wasm ABI is experimental and subject to change\n+  --> $DIR/feature-gate-wasm_abi.rs:12:12\n+   |\n+LL |     extern \"wasm\" fn dmu() {}\n+   |            ^^^^^^\n+   |\n+   = note: see issue #83788 <https://github.com/rust-lang/rust/issues/83788> for more information\n+   = help: add `#![feature(wasm_abi)]` to the crate attributes to enable\n+\n+error[E0658]: wasm ABI is experimental and subject to change\n+  --> $DIR/feature-gate-wasm_abi.rs:17:12\n+   |\n+LL |     extern \"wasm\" fn mu() {}\n+   |            ^^^^^^\n+   |\n+   = note: see issue #83788 <https://github.com/rust-lang/rust/issues/83788> for more information\n+   = help: add `#![feature(wasm_abi)]` to the crate attributes to enable\n+\n+error[E0658]: wasm ABI is experimental and subject to change\n+  --> $DIR/feature-gate-wasm_abi.rs:21:12\n+   |\n+LL |     extern \"wasm\" fn imu() {}\n+   |            ^^^^^^\n+   |\n+   = note: see issue #83788 <https://github.com/rust-lang/rust/issues/83788> for more information\n+   = help: add `#![feature(wasm_abi)]` to the crate attributes to enable\n+\n+error[E0658]: wasm ABI is experimental and subject to change\n+  --> $DIR/feature-gate-wasm_abi.rs:24:19\n+   |\n+LL | type TAU = extern \"wasm\" fn();\n+   |                   ^^^^^^\n+   |\n+   = note: see issue #83788 <https://github.com/rust-lang/rust/issues/83788> for more information\n+   = help: add `#![feature(wasm_abi)]` to the crate attributes to enable\n+\n+error[E0658]: wasm ABI is experimental and subject to change\n+  --> $DIR/feature-gate-wasm_abi.rs:26:8\n+   |\n+LL | extern \"wasm\" {}\n+   |        ^^^^^^\n+   |\n+   = note: see issue #83788 <https://github.com/rust-lang/rust/issues/83788> for more information\n+   = help: add `#![feature(wasm_abi)]` to the crate attributes to enable\n+\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "cfa8eb3cad04b13d7103f3fe9d201d9512b08ff2", "filename": "src/test/ui/unwind-abis/feature-gate-stdcall-unwind.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-stdcall-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-stdcall-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-stdcall-unwind.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,13 +1,30 @@\n-// ignore-arm stdcall isn't supported\n-// ignore-aarch64 stdcall isn't supported\n-// ignore-riscv64 stdcall isn't supported\n+// gate-test-c_unwind\n+// needs-llvm-components: x86\n+// compile-flags: --target=i686-pc-windows-msvc --crate-type=rlib\n+#![no_core]\n+#![feature(no_core, lang_items)]\n+#[lang=\"sized\"]\n+trait Sized { }\n \n // Test that the \"stdcall-unwind\" ABI is feature-gated, and cannot be used when\n // the `c_unwind` feature gate is not used.\n \n-extern \"stdcall-unwind\" fn f() {}\n-//~^ ERROR stdcall-unwind ABI is experimental and subject to change [E0658]\n+extern \"stdcall-unwind\" fn fu() {} //~ ERROR stdcall-unwind ABI is experimental\n \n-fn main() {\n-    f();\n+trait T {\n+    extern \"stdcall-unwind\" fn mu(); //~ ERROR stdcall-unwind ABI is experimental\n+    extern \"stdcall-unwind\" fn dmu() {} //~ ERROR stdcall-unwind ABI is experimental\n }\n+\n+struct S;\n+impl T for S {\n+    extern \"stdcall-unwind\" fn mu() {} //~ ERROR stdcall-unwind ABI is experimental\n+}\n+\n+impl S {\n+    extern \"stdcall-unwind\" fn imu() {} //~ ERROR stdcall-unwind ABI is experimental\n+}\n+\n+type TAU = extern \"stdcall-unwind\" fn(); //~ ERROR stdcall-unwind ABI is experimental\n+\n+extern \"stdcall-unwind\" {} //~ ERROR stdcall-unwind ABI is experimental"}, {"sha": "c2cce0e1193cd81eb8449bbd878057a7dd097772", "filename": "src/test/ui/unwind-abis/feature-gate-stdcall-unwind.stderr", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-stdcall-unwind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-stdcall-unwind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-stdcall-unwind.stderr?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,12 +1,66 @@\n error[E0658]: stdcall-unwind ABI is experimental and subject to change\n-  --> $DIR/feature-gate-stdcall-unwind.rs:8:8\n+  --> $DIR/feature-gate-stdcall-unwind.rs:12:8\n    |\n-LL | extern \"stdcall-unwind\" fn f() {}\n+LL | extern \"stdcall-unwind\" fn fu() {}\n    |        ^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n    = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: stdcall-unwind ABI is experimental and subject to change\n+  --> $DIR/feature-gate-stdcall-unwind.rs:15:12\n+   |\n+LL |     extern \"stdcall-unwind\" fn mu();\n+   |            ^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n+   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n+\n+error[E0658]: stdcall-unwind ABI is experimental and subject to change\n+  --> $DIR/feature-gate-stdcall-unwind.rs:16:12\n+   |\n+LL |     extern \"stdcall-unwind\" fn dmu() {}\n+   |            ^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n+   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n+\n+error[E0658]: stdcall-unwind ABI is experimental and subject to change\n+  --> $DIR/feature-gate-stdcall-unwind.rs:21:12\n+   |\n+LL |     extern \"stdcall-unwind\" fn mu() {}\n+   |            ^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n+   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n+\n+error[E0658]: stdcall-unwind ABI is experimental and subject to change\n+  --> $DIR/feature-gate-stdcall-unwind.rs:25:12\n+   |\n+LL |     extern \"stdcall-unwind\" fn imu() {}\n+   |            ^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n+   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n+\n+error[E0658]: stdcall-unwind ABI is experimental and subject to change\n+  --> $DIR/feature-gate-stdcall-unwind.rs:28:19\n+   |\n+LL | type TAU = extern \"stdcall-unwind\" fn();\n+   |                   ^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n+   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n+\n+error[E0658]: stdcall-unwind ABI is experimental and subject to change\n+  --> $DIR/feature-gate-stdcall-unwind.rs:30:8\n+   |\n+LL | extern \"stdcall-unwind\" {}\n+   |        ^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n+   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n+\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "0a323e50fcf26015dfe4b7e881d40b83928d2896", "filename": "src/test/ui/unwind-abis/feature-gate-thiscall-unwind.rs", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-thiscall-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-thiscall-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-thiscall-unwind.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,13 +1,39 @@\n-// ignore-arm thiscall isn't supported\n-// ignore-aarch64 thiscall isn't supported\n-// ignore-riscv64 thiscall isn't supported\n+// gate-test-abi_thiscall\n+// gate-test-c_unwind\n+// needs-llvm-components: x86\n+// compile-flags: --target=i686-pc-windows-msvc --crate-type=rlib\n+#![no_core]\n+#![feature(no_core, lang_items)]\n+#[lang=\"sized\"]\n+trait Sized { }\n \n // Test that the \"thiscall-unwind\" ABI is feature-gated, and cannot be used when\n // the `c_unwind` feature gate is not used.\n \n-extern \"thiscall-unwind\" fn f() {}\n-//~^ ERROR thiscall-unwind ABI is experimental and subject to change [E0658]\n+extern \"thiscall-unwind\" fn fu() {} //~ ERROR thiscall-unwind ABI is experimental\n+extern \"thiscall\" fn f() {} //~ ERROR thiscall is experimental\n \n-fn main() {\n-    f();\n+trait T {\n+    extern \"thiscall\" fn m(); //~ ERROR thiscall is experimental\n+    extern \"thiscall-unwind\" fn mu(); //~ ERROR thiscall-unwind ABI is experimental\n+\n+    extern \"thiscall\" fn dm() {} //~ ERROR thiscall is experimental\n+    extern \"thiscall-unwind\" fn dmu() {} //~ ERROR thiscall-unwind ABI is experimental\n+}\n+\n+struct S;\n+impl T for S {\n+    extern \"thiscall\" fn m() {} //~ ERROR thiscall is experimental\n+    extern \"thiscall-unwind\" fn mu() {} //~ ERROR thiscall-unwind ABI is experimental\n }\n+\n+impl S {\n+    extern \"thiscall\" fn im() {} //~ ERROR thiscall is experimental\n+    extern \"thiscall-unwind\" fn imu() {} //~ ERROR thiscall-unwind ABI is experimental\n+}\n+\n+type TA = extern \"thiscall\" fn(); //~ ERROR thiscall is experimental\n+type TAU = extern \"thiscall-unwind\" fn(); //~ ERROR thiscall-unwind ABI is experimental\n+\n+extern \"thiscall\" {} //~ ERROR thiscall is experimental\n+extern \"thiscall-unwind\" {} //~ ERROR thiscall-unwind ABI is experimental"}, {"sha": "9ca00a55cd85ba824c02054f0ffbb8bf198b52e1", "filename": "src/test/ui/unwind-abis/feature-gate-thiscall-unwind.stderr", "status": "modified", "additions": 113, "deletions": 3, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-thiscall-unwind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-thiscall-unwind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-thiscall-unwind.stderr?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -1,12 +1,122 @@\n error[E0658]: thiscall-unwind ABI is experimental and subject to change\n-  --> $DIR/feature-gate-thiscall-unwind.rs:8:8\n+  --> $DIR/feature-gate-thiscall-unwind.rs:13:8\n    |\n-LL | extern \"thiscall-unwind\" fn f() {}\n+LL | extern \"thiscall-unwind\" fn fu() {}\n    |        ^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n    = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: thiscall is experimental and subject to change\n+  --> $DIR/feature-gate-thiscall-unwind.rs:14:8\n+   |\n+LL | extern \"thiscall\" fn f() {}\n+   |        ^^^^^^^^^^\n+   |\n+   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n+\n+error[E0658]: thiscall is experimental and subject to change\n+  --> $DIR/feature-gate-thiscall-unwind.rs:17:12\n+   |\n+LL |     extern \"thiscall\" fn m();\n+   |            ^^^^^^^^^^\n+   |\n+   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n+\n+error[E0658]: thiscall-unwind ABI is experimental and subject to change\n+  --> $DIR/feature-gate-thiscall-unwind.rs:18:12\n+   |\n+LL |     extern \"thiscall-unwind\" fn mu();\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n+   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n+\n+error[E0658]: thiscall is experimental and subject to change\n+  --> $DIR/feature-gate-thiscall-unwind.rs:20:12\n+   |\n+LL |     extern \"thiscall\" fn dm() {}\n+   |            ^^^^^^^^^^\n+   |\n+   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n+\n+error[E0658]: thiscall-unwind ABI is experimental and subject to change\n+  --> $DIR/feature-gate-thiscall-unwind.rs:21:12\n+   |\n+LL |     extern \"thiscall-unwind\" fn dmu() {}\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n+   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n+\n+error[E0658]: thiscall is experimental and subject to change\n+  --> $DIR/feature-gate-thiscall-unwind.rs:26:12\n+   |\n+LL |     extern \"thiscall\" fn m() {}\n+   |            ^^^^^^^^^^\n+   |\n+   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n+\n+error[E0658]: thiscall-unwind ABI is experimental and subject to change\n+  --> $DIR/feature-gate-thiscall-unwind.rs:27:12\n+   |\n+LL |     extern \"thiscall-unwind\" fn mu() {}\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n+   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n+\n+error[E0658]: thiscall is experimental and subject to change\n+  --> $DIR/feature-gate-thiscall-unwind.rs:31:12\n+   |\n+LL |     extern \"thiscall\" fn im() {}\n+   |            ^^^^^^^^^^\n+   |\n+   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n+\n+error[E0658]: thiscall-unwind ABI is experimental and subject to change\n+  --> $DIR/feature-gate-thiscall-unwind.rs:32:12\n+   |\n+LL |     extern \"thiscall-unwind\" fn imu() {}\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n+   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n+\n+error[E0658]: thiscall is experimental and subject to change\n+  --> $DIR/feature-gate-thiscall-unwind.rs:35:18\n+   |\n+LL | type TA = extern \"thiscall\" fn();\n+   |                  ^^^^^^^^^^\n+   |\n+   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n+\n+error[E0658]: thiscall-unwind ABI is experimental and subject to change\n+  --> $DIR/feature-gate-thiscall-unwind.rs:36:19\n+   |\n+LL | type TAU = extern \"thiscall-unwind\" fn();\n+   |                   ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n+   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n+\n+error[E0658]: thiscall is experimental and subject to change\n+  --> $DIR/feature-gate-thiscall-unwind.rs:38:8\n+   |\n+LL | extern \"thiscall\" {}\n+   |        ^^^^^^^^^^\n+   |\n+   = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n+\n+error[E0658]: thiscall-unwind ABI is experimental and subject to change\n+  --> $DIR/feature-gate-thiscall-unwind.rs:39:8\n+   |\n+LL | extern \"thiscall-unwind\" {}\n+   |        ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n+   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n+\n+error: aborting due to 14 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "53c75a463390d75b8be1e66b9a9dd2f9b31e91df", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240e7aa101815e2009c7d03b33dd2566d843e73/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=8240e7aa101815e2009c7d03b33dd2566d843e73", "patch": "@@ -11,7 +11,7 @@ use regex::Regex;\n // A few of those error codes can't be tested but all the others can and *should* be tested!\n const EXEMPTED_FROM_TEST: &[&str] = &[\n     \"E0227\", \"E0279\", \"E0280\", \"E0313\", \"E0377\", \"E0461\", \"E0462\", \"E0464\", \"E0465\", \"E0476\",\n-    \"E0482\", \"E0514\", \"E0519\", \"E0523\", \"E0554\", \"E0570\", \"E0640\", \"E0717\", \"E0729\",\n+    \"E0482\", \"E0514\", \"E0519\", \"E0523\", \"E0554\", \"E0640\", \"E0717\", \"E0729\",\n ];\n \n // Some error codes don't have any tests apparently..."}]}