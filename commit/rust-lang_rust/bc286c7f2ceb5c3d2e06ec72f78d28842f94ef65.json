{"sha": "bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMjg2YzdmMmNlYjVjM2QyZTA2ZWM3MmY3OGQyODg0MmY5NGVmNjU=", "commit": {"author": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-06-24T15:13:32Z"}, "committer": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-06-24T15:13:32Z"}, "message": "Resolve and typecheck patterns in pattern alt.", "tree": {"sha": "eac0b9f72ce3a7c97440bc76f38f5159ecc2cdfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eac0b9f72ce3a7c97440bc76f38f5159ecc2cdfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65", "html_url": "https://github.com/rust-lang/rust/commit/bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65/comments", "author": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f038f4d533f897a29f9422510d1b3f0caac97388", "url": "https://api.github.com/repos/rust-lang/rust/commits/f038f4d533f897a29f9422510d1b3f0caac97388", "html_url": "https://github.com/rust-lang/rust/commit/f038f4d533f897a29f9422510d1b3f0caac97388"}], "stats": {"total": 303, "additions": 223, "deletions": 80}, "files": [{"sha": "bc1875670399951f0c65d059fc4a5febcae8cbb9", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65", "patch": "@@ -331,6 +331,7 @@ TEST_XFAILS_X86 :=  test/run-pass/mlist-cycle.rs \\\n \n TEST_XFAILS_LLVM := $(addprefix test/run-pass/, \\\n                       acyclic-unwind.rs \\\n+                      alt-pattern-simple.rs \\\n                       alt-tag.rs \\\n                       argv.rs \\\n                       basic.rs \\"}, {"sha": "438d9de9052231ce8530e66158bec349e58d34b5", "filename": "src/boot/fe/ast.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65/src%2Fboot%2Ffe%2Fast.ml", "raw_url": "https://github.com/rust-lang/rust/raw/bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65/src%2Fboot%2Ffe%2Fast.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fast.ml?ref=bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65", "patch": "@@ -300,7 +300,7 @@ and domain =\n \n and pat =\n     PAT_lit of lit\n-  | PAT_tag of ident * (pat array)\n+  | PAT_tag of ((name identified) * (pat array))\n   | PAT_slot of ((slot identified) * ident)\n   | PAT_wild\n "}, {"sha": "209526e52eb5a835e761eee66d7da2f3e29cc6ce", "filename": "src/boot/fe/item.ml", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65/src%2Fboot%2Ffe%2Fitem.ml", "raw_url": "https://github.com/rust-lang/rust/raw/bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65/src%2Fboot%2Ffe%2Fitem.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fitem.ml?ref=bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65", "patch": "@@ -224,24 +224,29 @@ and parse_stmts (ps:pstate) : Ast.stmt array =\n                   let (stmts, lval) = bracketed LPAREN RPAREN parse_lval ps in\n                   let rec parse_pat ps =\n                     match peek ps with\n-                        IDENT ident ->\n+                        IDENT _ ->\n                           let apos = lexpos ps in\n-                          bump ps;\n+                          let name = Pexp.parse_name ps in\n                           let bpos = lexpos ps in\n \n-                          (* TODO: nullary constructors *)\n                           if peek ps != LPAREN then\n-                            let slot =\n-                              { Ast.slot_mode = Ast.MODE_interior;\n-                                Ast.slot_mutable = false;\n-                                Ast.slot_ty = None }\n-                            in\n-                            Ast.PAT_slot ((span ps apos bpos slot), ident)\n+                            begin\n+                              match name with\n+                                  Ast.NAME_base (Ast.BASE_ident ident) ->\n+                                    let slot =\n+                                      { Ast.slot_mode = Ast.MODE_interior;\n+                                        Ast.slot_mutable = false;\n+                                        Ast.slot_ty = None }\n+                                    in\n+                                      Ast.PAT_slot\n+                                        ((span ps apos bpos slot), ident)\n+                                |_ -> raise (unexpected ps)\n+                            end\n                           else\n                             let pats =\n                               paren_comma_list parse_pat ps\n                             in\n-                            Ast.PAT_tag (ident, pats)\n+                            Ast.PAT_tag ((span ps apos bpos name), pats)\n                       | LIT_INT _ | LIT_CHAR _ | LIT_BOOL _ ->\n                           Ast.PAT_lit (Pexp.parse_lit ps)\n                       | UNDERSCORE -> bump ps; Ast.PAT_wild"}, {"sha": "bfbac10d4079a00c69cffe9e4a782dabfc26ad68", "filename": "src/boot/me/resolve.ml", "status": "modified", "additions": 51, "deletions": 18, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65/src%2Fboot%2Fme%2Fresolve.ml", "raw_url": "https://github.com/rust-lang/rust/raw/bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65/src%2Fboot%2Fme%2Fresolve.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fresolve.ml?ref=bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65", "patch": "@@ -870,28 +870,61 @@ let pattern_resolving_visitor\n     (cx:ctxt)\n     (scopes:scope list ref)\n     (inner:Walk.visitor) : Walk.visitor =\n+\n+  let not_tag_ctor (nid:Ast.name identified) : unit =\n+    err (Some nid.id) \"'%s' is not a tag constructor\"\n+      (string_of_name nid.node)\n+  in\n+\n+  let resolve_pat_tag\n+      (namei:Ast.name identified)\n+      (pats:Ast.pat array)\n+      (tag_ctor_id:node_id)\n+      : unit =\n+\n+    let tag_ty = \n+      fn_output_ty\n+        (Hashtbl.find cx.ctxt_all_item_types tag_ctor_id)\n+    in\n+      begin\n+        match tag_ty with\n+            Ast.TY_tag _\n+          | Ast.TY_iso _ ->\n+              let tag_ty_tup = tag_or_iso_ty_tup_by_name tag_ty namei.node in\n+              let arity = Array.length tag_ty_tup in\n+                if (Array.length pats) == arity\n+                then Hashtbl.add cx.ctxt_pattag_to_item namei.id tag_ctor_id\n+                else err (Some namei.id)\n+                  \"tag pattern '%s' with wrong number of components\"\n+                  (string_of_name namei.node)\n+          | _ -> not_tag_ctor namei\n+      end\n+  in\n+\n+  let resolve_arm { node = arm } =\n+    match fst arm with\n+        Ast.PAT_tag (namei, pats) ->\n+          begin\n+            match lookup_by_name cx !scopes namei.node with\n+                None ->\n+                  err (Some namei.id) \"unresolved tag constructor '%s'\"\n+                    (string_of_name namei.node)\n+              | Some (_, tag_ctor_id) when referent_is_item cx tag_ctor_id ->\n+                  (*\n+                   * FIXME we should actually check here that the function\n+                   * is a tag value-ctor.  For now this actually allows any\n+                   * function returning a tag type to pass as a tag pattern.\n+                   *)\n+                  resolve_pat_tag namei pats tag_ctor_id\n+              |_ -> not_tag_ctor namei\n+          end\n+      | _ -> ()\n+  in\n+\n   let visit_stmt_pre stmt =\n     begin\n       match stmt.node with\n         Ast.STMT_alt_tag { Ast.alt_tag_lval = _; Ast.alt_tag_arms = arms } ->\n-          let resolve_arm { node = arm } =\n-            match fst arm with\n-                Ast.PAT_tag (ident, _) ->\n-                  begin\n-                    match lookup_by_ident cx !scopes ident with\n-                        None ->\n-                          err None \"unresolved tag constructor '%s'\" ident\n-                      | Some (_, tag_id) ->\n-                          match Hashtbl.find cx.ctxt_all_defns tag_id with\n-                              DEFN_item {\n-                                  Ast.decl_item = Ast.MOD_ITEM_tag _\n-                                } -> ()\n-                            | _ ->\n-                                err None \"'%s' is not a tag constructor\" ident\n-                  end\n-              | _ -> ()\n-\n-          in\n           Array.iter resolve_arm arms\n       | _ -> ()\n     end;"}, {"sha": "f7acccfb88558357a05d82c10a462c56a4d244aa", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65", "patch": "@@ -102,6 +102,7 @@ type ctxt =\n \n       (* reference id --> definition id *)\n       ctxt_lval_to_referent: (node_id,node_id) Hashtbl.t;\n+      ctxt_pattag_to_item: (node_id,node_id) Hashtbl.t;\n \n       ctxt_required_items: (node_id, (required_lib * nabi_conv)) Hashtbl.t;\n       ctxt_required_syms: (node_id, string) Hashtbl.t;\n@@ -186,6 +187,7 @@ let new_ctxt sess abi crate =\n     ctxt_all_lvals = Hashtbl.create 0;\n     ctxt_all_defns = Hashtbl.create 0;\n     ctxt_lval_to_referent = Hashtbl.create 0;\n+    ctxt_pattag_to_item = Hashtbl.create 0;\n     ctxt_required_items = crate.Ast.crate_required;\n     ctxt_required_syms = crate.Ast.crate_required_syms;\n \n@@ -396,6 +398,27 @@ let slot_ty (s:Ast.slot) : Ast.ty =\n     | None -> bug () \"untyped slot\"\n ;;\n \n+let fn_output_ty (fn_ty:Ast.ty) : Ast.ty =\n+  match fn_ty with\n+      Ast.TY_fn ({ Ast.sig_output_slot = slot }, _) ->\n+        begin\n+          match slot.Ast.slot_ty with\n+              Some ty -> ty\n+            | None -> bug () \"function has untyped output slot\"\n+        end\n+    | _ -> bug () \"fn_output_ty on non-TY_fn\"\n+;;\n+\n+let tag_or_iso_ty_tup_by_name (ty:Ast.ty) (name:Ast.name) : Ast.ty_tup =\n+  match ty with\n+      Ast.TY_tag tags ->\n+        Hashtbl.find tags name\n+    | Ast.TY_iso { Ast.iso_index = i; Ast.iso_group = gp } ->\n+        Hashtbl.find gp.(i) name\n+    | _ ->\n+        bug () \"tag_or_iso_ty_tup_by_name called with non-tag or -iso type\"\n+;;\n+\n let defn_is_slot (d:defn) : bool =\n   match d with\n       DEFN_slot _ -> true"}, {"sha": "a7ff502c31f9ced5f9e4dc7a86aa617a813e94dc", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65", "patch": "@@ -3757,15 +3757,15 @@ let trans_visitor\n               emit (Il.jmp Il.JNE Il.CodeNone);\n               [ next_jump ]\n \n-          | Ast.PAT_tag (ident, pats) ->\n+          | Ast.PAT_tag (tag_namei, pats) ->\n+              let tag_name = tag_namei.node in\n               let ty_tag =\n                 match ty with\n                     Ast.TY_tag tag_ty -> tag_ty\n                   | Ast.TY_iso ti -> (ti.Ast.iso_group).(ti.Ast.iso_index)\n                   | _ -> bug cx \"expected tag type\"\n               in\n               let tag_keys = sorted_htab_keys ty_tag in\n-              let tag_name = Ast.NAME_base (Ast.BASE_ident ident) in\n               let tag_number = arr_idx tag_keys tag_name in\n               let ty_tup = Hashtbl.find ty_tag tag_name in\n "}, {"sha": "2dd271443b0b4efa66cf9d14d471bc02a1e47a96", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 121, "deletions": 47, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65", "patch": "@@ -165,6 +165,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n     cx.ctxt_sess.Session.sess_log_type\n     cx.ctxt_sess.Session.sess_log_out\n   in\n+\n   let retval_tvs = Stack.create () in\n   let push_retval_tv tv =\n     Stack.push tv retval_tvs\n@@ -175,6 +176,18 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n   let retval_tv _ =\n     Stack.top retval_tvs\n   in\n+\n+  let pat_tvs = Stack.create () in\n+  let push_pat_tv tv =\n+    Stack.push tv pat_tvs\n+  in\n+  let pop_pat_tv _ =\n+    ignore (Stack.pop pat_tvs)\n+  in\n+  let pat_tv _ =\n+    Stack.top pat_tvs\n+  in\n+\n   let (bindings:(node_id, tyvar) Hashtbl.t) = Hashtbl.create 10 in\n   let (item_params:(node_id, tyvar array) Hashtbl.t) = Hashtbl.create 10 in\n   let (lval_tyvars:(node_id, tyvar) Hashtbl.t) = Hashtbl.create 0 in\n@@ -737,23 +750,36 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n         a := TYSPEC_equiv c;\n         b := TYSPEC_equiv c\n \n+    and unify_ty_parametric\n+        (ty:Ast.ty)\n+        (tps:Ast.ty_param array)\n+        (tv:tyvar)\n+        : unit =\n+      unify_tyvars (ref (TYSPEC_resolved (tps, ty))) tv\n+\n     and unify_ty (ty:Ast.ty) (tv:tyvar) : unit =\n-      unify_tyvars (ref (TYSPEC_resolved ([||], ty))) tv\n+      unify_ty_parametric ty [||] tv\n+\n     in\n \n-    let rec unify_atom (atom:Ast.atom) (tv:tyvar) : unit =\n+    let rec unify_lit (lit:Ast.lit) (tv:tyvar) : unit =\n+      let ty =\n+        match lit with\n+            Ast.LIT_nil -> Ast.TY_nil\n+          | Ast.LIT_bool _ -> Ast.TY_bool\n+          | Ast.LIT_mach (mty, _, _) -> Ast.TY_mach mty\n+          | Ast.LIT_int (_, _) -> Ast.TY_int\n+          | Ast.LIT_uint (_, _) -> Ast.TY_uint\n+          | Ast.LIT_char _ -> Ast.TY_char\n+      in\n+        unify_ty ty tv\n+\n+    and unify_atom (atom:Ast.atom) (tv:tyvar) : unit =\n       match atom with\n           Ast.ATOM_literal { node = literal; id = _ } ->\n-            let ty = match literal with\n-                Ast.LIT_nil -> Ast.TY_nil\n-              | Ast.LIT_bool _ -> Ast.TY_bool\n-              | Ast.LIT_mach (mty, _, _) -> Ast.TY_mach mty\n-              | Ast.LIT_int (_, _) -> Ast.TY_int\n-              | Ast.LIT_uint (_, _) -> Ast.TY_uint\n-              | Ast.LIT_char _ -> Ast.TY_char\n-            in\n-              unify_ty ty tv\n-        | Ast.ATOM_lval lval -> unify_lval lval tv\n+            unify_lit literal tv\n+        | Ast.ATOM_lval lval ->\n+            unify_lval lval tv\n \n     and unify_expr (expr:Ast.expr) (tv:tyvar) : unit =\n       match expr with\n@@ -886,39 +912,40 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n                             | Ast.BASE_app (_, args) ->\n                                 note_args args;\n                                 ref (TYSPEC_app (tv, args))\n-                          | _ -> err None \"bad lval / tyspec combination\"\n-                      in\n-                        unify_tyvars (ref spec) tv\n-              end\n-        | Ast.LVAL_ext (base, comp) ->\n-            let base_ts = match comp with\n-                Ast.COMP_named (Ast.COMP_ident id) ->\n-                  let names = Hashtbl.create 1 in\n-                    Hashtbl.add names id tv;\n-                    TYSPEC_dictionary names\n-\n-              | Ast.COMP_named (Ast.COMP_app (id, args)) ->\n-                  note_args args;\n-                  let tv = ref (TYSPEC_app (tv, args)) in\n-                  let names = Hashtbl.create 1 in\n-                    Hashtbl.add names id tv;\n-                    TYSPEC_dictionary names\n-\n-              | Ast.COMP_named (Ast.COMP_idx i) ->\n-                  let init j = if i + 1 == j then tv else ref TYSPEC_all in\n-                    TYSPEC_tuple (Array.init (i + 1) init)\n-\n-              | Ast.COMP_atom atom ->\n-                  unify_atom atom (ref (TYSPEC_resolved ([||], Ast.TY_int)));\n-                  TYSPEC_collection tv\n-            in\n-            let base_tv = ref base_ts in\n-              unify_lval' base base_tv;\n-              match !(resolve_tyvar base_tv) with\n-                  TYSPEC_resolved (_, ty) ->\n-                    unify_ty (slot_ty (project_type_to_slot ty comp)) tv\n-                | _ ->\n-                    ()\n+                            | _ -> err None \"bad lval / tyspec combination\"\n+                        in\n+                          unify_tyvars (ref spec) tv\n+                end\n+          | Ast.LVAL_ext (base, comp) ->\n+              let base_ts = match comp with\n+                  Ast.COMP_named (Ast.COMP_ident id) ->\n+                    let names = Hashtbl.create 1 in\n+                      Hashtbl.add names id tv;\n+                      TYSPEC_dictionary names\n+\n+                | Ast.COMP_named (Ast.COMP_app (id, args)) ->\n+                    note_args args;\n+                    let tv = ref (TYSPEC_app (tv, args)) in\n+                    let names = Hashtbl.create 1 in\n+                      Hashtbl.add names id tv;\n+                      TYSPEC_dictionary names\n+\n+                | Ast.COMP_named (Ast.COMP_idx i) ->\n+                    let init j = if i + 1 == j then tv else ref TYSPEC_all in\n+                      TYSPEC_tuple (Array.init (i + 1) init)\n+\n+                | Ast.COMP_atom atom ->\n+                    unify_atom atom\n+                      (ref (TYSPEC_resolved ([||], Ast.TY_int)));\n+                    TYSPEC_collection tv\n+              in\n+              let base_tv = ref base_ts in\n+                unify_lval' base base_tv;\n+                match !(resolve_tyvar base_tv) with\n+                    TYSPEC_resolved (_, ty) ->\n+                      unify_ty (slot_ty (project_type_to_slot ty comp)) tv\n+                  | _ ->\n+                      ()\n \n     and unify_lval (lval:Ast.lval) (tv:tyvar) : unit =\n       let id = lval_base_id lval in\n@@ -1080,6 +1107,12 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n               unify_lval seq seq_tv;\n               unify_slot si.node (Some si.id) mem_tv\n \n+        | Ast.STMT_alt_tag\n+            { Ast.alt_tag_lval = lval; Ast.alt_tag_arms = arms } ->\n+            let lval_tv = ref TYSPEC_all in\n+              unify_lval lval lval_tv;\n+              Array.iter (fun _ -> push_pat_tv lval_tv) arms\n+            \n         (* FIXME (issue #52): plenty more to handle here. *)\n         | _ ->\n             log cx \"warning: not typechecking stmt %s\\n\"\n@@ -1163,13 +1196,54 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n         | _ -> ()\n     in\n \n+    let visit_pat_pre (pat:Ast.pat) : unit =\n+      let expected = pat_tv() in\n+        match pat with\n+            Ast.PAT_lit lit -> unify_lit lit expected\n+\n+          | Ast.PAT_tag (namei, _) ->\n+              let expect ty =\n+                let tv = ref TYSPEC_all in\n+                  unify_ty ty tv;\n+                  push_pat_tv tv;\n+              in\n+              let item_id = Hashtbl.find cx.ctxt_pattag_to_item namei.id in\n+              let tag_ty =\n+                fn_output_ty (Hashtbl.find cx.ctxt_all_item_types item_id)\n+              in\n+              let tag_ty_tup = tag_or_iso_ty_tup_by_name tag_ty namei.node in\n+              let tag_tv = ref TYSPEC_all in\n+                unify_ty tag_ty tag_tv;\n+                unify_tyvars expected tag_tv;\n+                (* FIXME check arity here? *)\n+                List.iter\n+                  begin\n+                    fun slot ->\n+                      match slot.Ast.slot_ty with\n+                          Some ty -> expect ty\n+                        | None -> bug () \"no slot type in tag slot tuple\"\n+                  end\n+                  (List.rev (Array.to_list tag_ty_tup));\n+\n+          | Ast.PAT_slot (sloti, _) ->\n+              unify_slot sloti.node (Some sloti.id) expected\n+\n+          | Ast.PAT_wild -> ()\n+    in\n+\n+    let visit_pat_post (_:Ast.pat) : unit =\n+      pop_pat_tv()\n+    in\n+\n       {\n         inner with\n           Walk.visit_mod_item_pre = visit_mod_item_pre;\n           Walk.visit_mod_item_post = visit_mod_item_post;\n           Walk.visit_obj_fn_pre = visit_obj_fn_pre;\n           Walk.visit_obj_fn_post = visit_obj_fn_post;\n-          Walk.visit_stmt_pre = visit_stmt_pre\n+          Walk.visit_stmt_pre = visit_stmt_pre;\n+          Walk.visit_pat_pre = visit_pat_pre;\n+          Walk.visit_pat_post = visit_pat_post;\n       }\n \n   in\n@@ -1223,7 +1297,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n                 Hashtbl.find bindings id\n         in\n           match defn with\n-              DEFN_item ({ Ast.decl_item=Ast.MOD_ITEM_mod _ } as item) ->\n+              DEFN_item ({ Ast.decl_item = Ast.MOD_ITEM_mod _ } as item) ->\n                 ignore (tv_of_item id item)\n             | _ -> ()\n       in"}, {"sha": "a8d74cad266231c2a062d83159147e0245c49b76", "filename": "src/boot/me/walk.ml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65/src%2Fboot%2Fme%2Fwalk.ml", "raw_url": "https://github.com/rust-lang/rust/raw/bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65/src%2Fboot%2Fme%2Fwalk.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fwalk.ml?ref=bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65", "patch": "@@ -652,10 +652,10 @@ and walk_pat\n     (v:visitor)\n     (p:Ast.pat)\n     : unit =\n-  let rec walk p =\n+  let walk p =\n     match p with\n         Ast.PAT_lit lit -> walk_lit v lit\n-      | Ast.PAT_tag (_, pats) -> Array.iter walk pats\n+      | Ast.PAT_tag (_, pats) -> Array.iter (walk_pat v) pats\n       | Ast.PAT_slot (si, _) -> walk_slot_identified v si\n       | Ast.PAT_wild -> ()\n   in"}, {"sha": "d0a4159ebb6a8cd9649bdac3be7e64d6b5a2fcf5", "filename": "src/test/run-pass/alt-pattern-simple.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65/src%2Ftest%2Frun-pass%2Falt-pattern-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65/src%2Ftest%2Frun-pass%2Falt-pattern-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-simple.rs?ref=bc286c7f2ceb5c3d2e06ec72f78d28842f94ef65", "patch": "@@ -0,0 +1,7 @@\n+fn altsimple(int f) {\n+  alt (f) {\n+    case (x) {}\n+  }\n+}\n+\n+fn main() {}"}]}