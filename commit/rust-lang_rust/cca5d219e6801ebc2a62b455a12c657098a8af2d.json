{"sha": "cca5d219e6801ebc2a62b455a12c657098a8af2d", "node_id": "C_kwDOAAsO6NoAKGNjYTVkMjE5ZTY4MDFlYmMyYTYyYjQ1NWExMmM2NTcwOThhOGFmMmQ", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2023-01-01T18:53:50Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2023-01-01T19:48:26Z"}, "message": "Rustdoc-Json: Report discriminant on all kinds of enum variant.\n\nCloses #106299", "tree": {"sha": "241017ae94f6e4f60ff225529271245c154fa1b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/241017ae94f6e4f60ff225529271245c154fa1b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cca5d219e6801ebc2a62b455a12c657098a8af2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cca5d219e6801ebc2a62b455a12c657098a8af2d", "html_url": "https://github.com/rust-lang/rust/commit/cca5d219e6801ebc2a62b455a12c657098a8af2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cca5d219e6801ebc2a62b455a12c657098a8af2d/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7b252a4f43b9ba8ca46a8d8443f2022259ec6e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7b252a4f43b9ba8ca46a8d8443f2022259ec6e6", "html_url": "https://github.com/rust-lang/rust/commit/b7b252a4f43b9ba8ca46a8d8443f2022259ec6e6"}], "stats": {"total": 311, "additions": 167, "deletions": 144}, "files": [{"sha": "84af194904d1bca771e5b84fcb718180fa5d9943", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=cca5d219e6801ebc2a62b455a12c657098a8af2d", "patch": "@@ -650,14 +650,16 @@ impl FromWithTcx<clean::Variant> for Variant {\n \n         let discriminant = variant.discriminant.map(|d| d.into_tcx(tcx));\n \n-        match variant.kind {\n-            CLike => Variant::Plain(discriminant),\n-            Tuple(fields) => Variant::Tuple(ids_keeping_stripped(fields, tcx)),\n-            Struct(s) => Variant::Struct {\n+        let kind = match variant.kind {\n+            CLike => VariantKind::Plain,\n+            Tuple(fields) => VariantKind::Tuple(ids_keeping_stripped(fields, tcx)),\n+            Struct(s) => VariantKind::Struct {\n                 fields_stripped: s.has_stripped_entries(),\n                 fields: ids(s.fields, tcx),\n             },\n-        }\n+        };\n+\n+        Variant { kind, discriminant }\n     }\n }\n "}, {"sha": "387d5787dfcb25fe0348bd0daf998796595c5359", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=cca5d219e6801ebc2a62b455a12c657098a8af2d", "patch": "@@ -9,7 +9,7 @@ use std::path::PathBuf;\n use serde::{Deserialize, Serialize};\n \n /// rustdoc format-version.\n-pub const FORMAT_VERSION: u32 = 23;\n+pub const FORMAT_VERSION: u32 = 24;\n \n /// A `Crate` is the root of the emitted JSON blob. It contains all type/documentation information\n /// about the language items in the local crate, as well as info about external items to allow\n@@ -333,19 +333,26 @@ pub struct Enum {\n     pub impls: Vec<Id>,\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n+pub struct Variant {\n+    /// Whether the variant is plain, a tuple-like, or struct-like. Contains the fields.\n+    pub kind: VariantKind,\n+    /// The discriminant, if explicitly specified.\n+    pub discriminant: Option<Discriminant>,\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n-#[serde(tag = \"variant_kind\", content = \"variant_inner\")]\n-pub enum Variant {\n-    /// A variant with no parentheses, and possible discriminant.\n+pub enum VariantKind {\n+    /// A variant with no parentheses\n     ///\n     /// ```rust\n     /// enum Demo {\n     ///     PlainVariant,\n     ///     PlainWithDiscriminant = 1,\n     /// }\n     /// ```\n-    Plain(Option<Discriminant>),\n+    Plain,\n     /// A variant with unnamed fields.\n     ///\n     /// Unlike most of json, `#[doc(hidden)]` fields will be given as `None`"}, {"sha": "06906df3b2c64abed8e5e711db781e987d32d270", "filename": "src/test/rustdoc-json/enums/discriminant/basic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fbasic.rs?ref=cca5d219e6801ebc2a62b455a12c657098a8af2d", "patch": "@@ -1,12 +1,12 @@\n #[repr(i8)]\n pub enum Ordering {\n-    // @is \"$.index[*][?(@.name=='Less')].inner.variant_inner.expr\" '\"-1\"'\n-    // @is \"$.index[*][?(@.name=='Less')].inner.variant_inner.value\" '\"-1\"'\n+    // @is \"$.index[*][?(@.name=='Less')].inner.discriminant.expr\" '\"-1\"'\n+    // @is \"$.index[*][?(@.name=='Less')].inner.discriminant.value\" '\"-1\"'\n     Less = -1,\n-    // @is \"$.index[*][?(@.name=='Equal')].inner.variant_inner.expr\" '\"0\"'\n-    // @is \"$.index[*][?(@.name=='Equal')].inner.variant_inner.value\" '\"0\"'\n+    // @is \"$.index[*][?(@.name=='Equal')].inner.discriminant.expr\" '\"0\"'\n+    // @is \"$.index[*][?(@.name=='Equal')].inner.discriminant.value\" '\"0\"'\n     Equal = 0,\n-    // @is \"$.index[*][?(@.name=='Greater')].inner.variant_inner.expr\" '\"1\"'\n-    // @is \"$.index[*][?(@.name=='Greater')].inner.variant_inner.value\" '\"1\"'\n+    // @is \"$.index[*][?(@.name=='Greater')].inner.discriminant.expr\" '\"1\"'\n+    // @is \"$.index[*][?(@.name=='Greater')].inner.discriminant.value\" '\"1\"'\n     Greater = 1,\n }"}, {"sha": "e639965e79b428e180ed94a959dd3d5219e10365", "filename": "src/test/rustdoc-json/enums/discriminant/expr.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fexpr.rs?ref=cca5d219e6801ebc2a62b455a12c657098a8af2d", "patch": "@@ -1,30 +1,30 @@\n pub enum Foo {\n-    // @is \"$.index[*][?(@.name=='Addition')].inner.variant_inner.value\" '\"0\"'\n-    // @is \"$.index[*][?(@.name=='Addition')].inner.variant_inner.expr\" '\"{ _ }\"'\n+    // @is \"$.index[*][?(@.name=='Addition')].inner.discriminant.value\" '\"0\"'\n+    // @is \"$.index[*][?(@.name=='Addition')].inner.discriminant.expr\" '\"{ _ }\"'\n     Addition = 0 + 0,\n-    // @is \"$.index[*][?(@.name=='Bin')].inner.variant_inner.value\" '\"1\"'\n-    // @is \"$.index[*][?(@.name=='Bin')].inner.variant_inner.expr\" '\"0b1\"'\n+    // @is \"$.index[*][?(@.name=='Bin')].inner.discriminant.value\" '\"1\"'\n+    // @is \"$.index[*][?(@.name=='Bin')].inner.discriminant.expr\" '\"0b1\"'\n     Bin = 0b1,\n-    // @is \"$.index[*][?(@.name=='Oct')].inner.variant_inner.value\" '\"2\"'\n-    // @is \"$.index[*][?(@.name=='Oct')].inner.variant_inner.expr\" '\"0o2\"'\n+    // @is \"$.index[*][?(@.name=='Oct')].inner.discriminant.value\" '\"2\"'\n+    // @is \"$.index[*][?(@.name=='Oct')].inner.discriminant.expr\" '\"0o2\"'\n     Oct = 0o2,\n-    // @is \"$.index[*][?(@.name=='PubConst')].inner.variant_inner.value\" '\"3\"'\n-    // @is \"$.index[*][?(@.name=='PubConst')].inner.variant_inner.expr\" '\"THREE\"'\n+    // @is \"$.index[*][?(@.name=='PubConst')].inner.discriminant.value\" '\"3\"'\n+    // @is \"$.index[*][?(@.name=='PubConst')].inner.discriminant.expr\" '\"THREE\"'\n     PubConst = THREE,\n-    // @is \"$.index[*][?(@.name=='Hex')].inner.variant_inner.value\" '\"4\"'\n-    // @is \"$.index[*][?(@.name=='Hex')].inner.variant_inner.expr\" '\"0x4\"'\n+    // @is \"$.index[*][?(@.name=='Hex')].inner.discriminant.value\" '\"4\"'\n+    // @is \"$.index[*][?(@.name=='Hex')].inner.discriminant.expr\" '\"0x4\"'\n     Hex = 0x4,\n-    // @is \"$.index[*][?(@.name=='Cast')].inner.variant_inner.value\" '\"5\"'\n-    // @is \"$.index[*][?(@.name=='Cast')].inner.variant_inner.expr\" '\"{ _ }\"'\n+    // @is \"$.index[*][?(@.name=='Cast')].inner.discriminant.value\" '\"5\"'\n+    // @is \"$.index[*][?(@.name=='Cast')].inner.discriminant.expr\" '\"{ _ }\"'\n     Cast = 5 as isize,\n-    // @is \"$.index[*][?(@.name=='PubCall')].inner.variant_inner.value\" '\"6\"'\n-    // @is \"$.index[*][?(@.name=='PubCall')].inner.variant_inner.expr\" '\"{ _ }\"'\n+    // @is \"$.index[*][?(@.name=='PubCall')].inner.discriminant.value\" '\"6\"'\n+    // @is \"$.index[*][?(@.name=='PubCall')].inner.discriminant.expr\" '\"{ _ }\"'\n     PubCall = six(),\n-    // @is \"$.index[*][?(@.name=='PrivCall')].inner.variant_inner.value\" '\"7\"'\n-    // @is \"$.index[*][?(@.name=='PrivCall')].inner.variant_inner.expr\" '\"{ _ }\"'\n+    // @is \"$.index[*][?(@.name=='PrivCall')].inner.discriminant.value\" '\"7\"'\n+    // @is \"$.index[*][?(@.name=='PrivCall')].inner.discriminant.expr\" '\"{ _ }\"'\n     PrivCall = seven(),\n-    // @is \"$.index[*][?(@.name=='PrivConst')].inner.variant_inner.value\" '\"8\"'\n-    // @is \"$.index[*][?(@.name=='PrivConst')].inner.variant_inner.expr\" '\"EIGHT\"'\n+    // @is \"$.index[*][?(@.name=='PrivConst')].inner.discriminant.value\" '\"8\"'\n+    // @is \"$.index[*][?(@.name=='PrivConst')].inner.discriminant.expr\" '\"EIGHT\"'\n     PrivConst = EIGHT,\n }\n "}, {"sha": "e56d5594f2fc915730be2531d85e2f47e43fa20d", "filename": "src/test/rustdoc-json/enums/discriminant/limits.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Flimits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Flimits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Flimits.rs?ref=cca5d219e6801ebc2a62b455a12c657098a8af2d", "patch": "@@ -4,40 +4,40 @@\n \n #[repr(u64)]\n pub enum U64 {\n-    // @is \"$.index[*][?(@.name=='U64Min')].inner.variant_inner.value\" '\"0\"'\n-    // @is \"$.index[*][?(@.name=='U64Min')].inner.variant_inner.expr\" '\"u64::MIN\"'\n+    // @is \"$.index[*][?(@.name=='U64Min')].inner.discriminant.value\" '\"0\"'\n+    // @is \"$.index[*][?(@.name=='U64Min')].inner.discriminant.expr\" '\"u64::MIN\"'\n     U64Min = u64::MIN,\n-    // @is \"$.index[*][?(@.name=='U64Max')].inner.variant_inner.value\" '\"18446744073709551615\"'\n-    // @is \"$.index[*][?(@.name=='U64Max')].inner.variant_inner.expr\" '\"u64::MAX\"'\n+    // @is \"$.index[*][?(@.name=='U64Max')].inner.discriminant.value\" '\"18446744073709551615\"'\n+    // @is \"$.index[*][?(@.name=='U64Max')].inner.discriminant.expr\" '\"u64::MAX\"'\n     U64Max = u64::MAX,\n }\n \n #[repr(i64)]\n pub enum I64 {\n-    // @is \"$.index[*][?(@.name=='I64Min')].inner.variant_inner.value\" '\"-9223372036854775808\"'\n-    // @is \"$.index[*][?(@.name=='I64Min')].inner.variant_inner.expr\" '\"i64::MIN\"'\n+    // @is \"$.index[*][?(@.name=='I64Min')].inner.discriminant.value\" '\"-9223372036854775808\"'\n+    // @is \"$.index[*][?(@.name=='I64Min')].inner.discriminant.expr\" '\"i64::MIN\"'\n     I64Min = i64::MIN,\n-    // @is \"$.index[*][?(@.name=='I64Max')].inner.variant_inner.value\" '\"9223372036854775807\"'\n-    // @is \"$.index[*][?(@.name=='I64Max')].inner.variant_inner.expr\" '\"i64::MAX\"'\n+    // @is \"$.index[*][?(@.name=='I64Max')].inner.discriminant.value\" '\"9223372036854775807\"'\n+    // @is \"$.index[*][?(@.name=='I64Max')].inner.discriminant.expr\" '\"i64::MAX\"'\n     I64Max = i64::MAX,\n }\n \n #[repr(u128)]\n pub enum U128 {\n-    // @is \"$.index[*][?(@.name=='U128Min')].inner.variant_inner.value\" '\"0\"'\n-    // @is \"$.index[*][?(@.name=='U128Min')].inner.variant_inner.expr\" '\"u128::MIN\"'\n+    // @is \"$.index[*][?(@.name=='U128Min')].inner.discriminant.value\" '\"0\"'\n+    // @is \"$.index[*][?(@.name=='U128Min')].inner.discriminant.expr\" '\"u128::MIN\"'\n     U128Min = u128::MIN,\n-    // @is \"$.index[*][?(@.name=='U128Max')].inner.variant_inner.value\" '\"340282366920938463463374607431768211455\"'\n-    // @is \"$.index[*][?(@.name=='U128Max')].inner.variant_inner.expr\" '\"u128::MAX\"'\n+    // @is \"$.index[*][?(@.name=='U128Max')].inner.discriminant.value\" '\"340282366920938463463374607431768211455\"'\n+    // @is \"$.index[*][?(@.name=='U128Max')].inner.discriminant.expr\" '\"u128::MAX\"'\n     U128Max = u128::MAX,\n }\n \n #[repr(i128)]\n pub enum I128 {\n-    // @is \"$.index[*][?(@.name=='I128Min')].inner.variant_inner.value\" '\"-170141183460469231731687303715884105728\"'\n-    // @is \"$.index[*][?(@.name=='I128Min')].inner.variant_inner.expr\" '\"i128::MIN\"'\n+    // @is \"$.index[*][?(@.name=='I128Min')].inner.discriminant.value\" '\"-170141183460469231731687303715884105728\"'\n+    // @is \"$.index[*][?(@.name=='I128Min')].inner.discriminant.expr\" '\"i128::MIN\"'\n     I128Min = i128::MIN,\n-    // @is \"$.index[*][?(@.name=='I128Max')].inner.variant_inner.value\" '\"170141183460469231731687303715884105727\"'\n-    // @is \"$.index[*][?(@.name=='I128Max')].inner.variant_inner.expr\" '\"i128::MAX\"'\n+    // @is \"$.index[*][?(@.name=='I128Max')].inner.discriminant.value\" '\"170141183460469231731687303715884105727\"'\n+    // @is \"$.index[*][?(@.name=='I128Max')].inner.discriminant.expr\" '\"i128::MAX\"'\n     I128Max = i128::MAX,\n }"}, {"sha": "6889b305ffb41b32c475100bfe62afd7ad5b86ad", "filename": "src/test/rustdoc-json/enums/discriminant/num_underscore_and_suffix.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fnum_underscore_and_suffix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fnum_underscore_and_suffix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fnum_underscore_and_suffix.rs?ref=cca5d219e6801ebc2a62b455a12c657098a8af2d", "patch": "@@ -1,15 +1,15 @@\n #[repr(u32)]\n pub enum Foo {\n-    // @is \"$.index[*][?(@.name=='Basic')].inner.variant_inner.value\" '\"0\"'\n-    // @is \"$.index[*][?(@.name=='Basic')].inner.variant_inner.expr\" '\"0\"'\n+    // @is \"$.index[*][?(@.name=='Basic')].inner.discriminant.value\" '\"0\"'\n+    // @is \"$.index[*][?(@.name=='Basic')].inner.discriminant.expr\" '\"0\"'\n     Basic = 0,\n-    // @is \"$.index[*][?(@.name=='Suffix')].inner.variant_inner.value\" '\"10\"'\n-    // @is \"$.index[*][?(@.name=='Suffix')].inner.variant_inner.expr\" '\"10u32\"'\n+    // @is \"$.index[*][?(@.name=='Suffix')].inner.discriminant.value\" '\"10\"'\n+    // @is \"$.index[*][?(@.name=='Suffix')].inner.discriminant.expr\" '\"10u32\"'\n     Suffix = 10u32,\n-    // @is \"$.index[*][?(@.name=='Underscore')].inner.variant_inner.value\" '\"100\"'\n-    // @is \"$.index[*][?(@.name=='Underscore')].inner.variant_inner.expr\" '\"1_0_0\"'\n+    // @is \"$.index[*][?(@.name=='Underscore')].inner.discriminant.value\" '\"100\"'\n+    // @is \"$.index[*][?(@.name=='Underscore')].inner.discriminant.expr\" '\"1_0_0\"'\n     Underscore = 1_0_0,\n-    // @is \"$.index[*][?(@.name=='SuffixUnderscore')].inner.variant_inner.value\" '\"1000\"'\n-    // @is \"$.index[*][?(@.name=='SuffixUnderscore')].inner.variant_inner.expr\" '\"1_0_0_0u32\"'\n+    // @is \"$.index[*][?(@.name=='SuffixUnderscore')].inner.discriminant.value\" '\"1000\"'\n+    // @is \"$.index[*][?(@.name=='SuffixUnderscore')].inner.discriminant.expr\" '\"1_0_0_0u32\"'\n     SuffixUnderscore = 1_0_0_0u32,\n }"}, {"sha": "6a4f54de617454a7528bc299db0e0edf81439d6c", "filename": "src/test/rustdoc-json/enums/discriminant/only_some_have_discriminant.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fonly_some_have_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fonly_some_have_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fonly_some_have_discriminant.rs?ref=cca5d219e6801ebc2a62b455a12c657098a8af2d", "patch": "@@ -1,10 +1,10 @@\n pub enum Foo {\n-    // @is \"$.index[*][?(@.name=='Has')].inner.variant_inner\" '{\"expr\":\"0\", \"value\":\"0\"}'\n+    // @is \"$.index[*][?(@.name=='Has')].inner.discriminant\" '{\"expr\":\"0\", \"value\":\"0\"}'\n     Has = 0,\n-    // @is \"$.index[*][?(@.name=='Doesnt')].inner.variant_inner\" null\n+    // @is \"$.index[*][?(@.name=='Doesnt')].inner.discriminant\" null\n     Doesnt,\n-    // @is \"$.index[*][?(@.name=='AlsoDoesnt')].inner.variant_inner\" null\n+    // @is \"$.index[*][?(@.name=='AlsoDoesnt')].inner.discriminant\" null\n     AlsoDoesnt,\n-    // @is \"$.index[*][?(@.name=='AlsoHas')].inner.variant_inner\" '{\"expr\":\"44\", \"value\":\"44\"}'\n+    // @is \"$.index[*][?(@.name=='AlsoHas')].inner.discriminant\" '{\"expr\":\"44\", \"value\":\"44\"}'\n     AlsoHas = 44,\n }"}, {"sha": "e91a632a3b38e8a1ca4d7a61d6f58ea6bb22ac1d", "filename": "src/test/rustdoc-json/enums/discriminant/struct.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fstruct.rs?ref=cca5d219e6801ebc2a62b455a12c657098a8af2d", "patch": "@@ -0,0 +1,15 @@\n+// ignore-tidy-linelength\n+\n+#[repr(i32)]\n+// @is \"$.index[*][?(@.name=='Foo')].attrs\" '[\"#[repr(i32)]\"]'\n+pub enum Foo {\n+    // @is    \"$.index[*][?(@.name=='Struct')].inner.discriminant\" null\n+    // @count \"$.index[*][?(@.name=='Struct')].inner.kind.struct.fields[*]\" 0\n+    Struct {},\n+    // @is    \"$.index[*][?(@.name=='StructWithDiscr')].inner.discriminant\" '{\"expr\": \"42\", \"value\": \"42\"}'\n+    // @count \"$.index[*][?(@.name=='StructWithDiscr')].inner.kind.struct.fields[*]\" 1\n+    StructWithDiscr { x: i32 } = 42,\n+    // @is    \"$.index[*][?(@.name=='StructWithHexDiscr')].inner.discriminant\"  '{\"expr\": \"0x42\", \"value\": \"66\"}'\n+    // @count \"$.index[*][?(@.name=='StructWithHexDiscr')].inner.kind.struct.fields[*]\" 2\n+    StructWithHexDiscr { x: i32, y: bool } = 0x42,\n+}"}, {"sha": "b94d5739eabcb2990715abbc313125c7fd8277c3", "filename": "src/test/rustdoc-json/enums/discriminant/tuple.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Ftuple.rs?ref=cca5d219e6801ebc2a62b455a12c657098a8af2d", "patch": "@@ -0,0 +1,15 @@\n+// ignore-tidy-linelength\n+\n+#[repr(u32)]\n+// @is \"$.index[*][?(@.name=='Foo')].attrs\" '[\"#[repr(u32)]\"]'\n+pub enum Foo {\n+    // @is    \"$.index[*][?(@.name=='Tuple')].inner.discriminant\" null\n+    // @count \"$.index[*][?(@.name=='Tuple')].inner.kind.tuple[*]\" 0\n+    Tuple(),\n+    // @is    \"$.index[*][?(@.name=='TupleWithDiscr')].inner.discriminant\" '{\"expr\": \"1\", \"value\": \"1\"}'\n+    // @count \"$.index[*][?(@.name=='TupleWithDiscr')].inner.kind.tuple[*]\" 1\n+    TupleWithDiscr(i32) = 1,\n+    // @is    \"$.index[*][?(@.name=='TupleWithBinDiscr')].inner.discriminant\" '{\"expr\": \"0b10\", \"value\": \"2\"}'\n+    // @count \"$.index[*][?(@.name=='TupleWithBinDiscr')].inner.kind.tuple[*]\" 2\n+    TupleWithBinDiscr(i32, i32) = 0b10,\n+}"}, {"sha": "78a05431472cb8874cc80439fbc0e973ab18d506", "filename": "src/test/rustdoc-json/enums/field_hidden.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Ftest%2Frustdoc-json%2Fenums%2Ffield_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Ftest%2Frustdoc-json%2Fenums%2Ffield_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Ffield_hidden.rs?ref=cca5d219e6801ebc2a62b455a12c657098a8af2d", "patch": "@@ -5,8 +5,8 @@\n \n // @has \"$.index[*][?(@.name=='ParseError')]\"\n // @has \"$.index[*][?(@.name=='UnexpectedEndTag')]\"\n-// @is \"$.index[*][?(@.name=='UnexpectedEndTag')].inner.variant_kind\" '\"tuple\"'\n-// @is \"$.index[*][?(@.name=='UnexpectedEndTag')].inner.variant_inner\" [null]\n+// @is \"$.index[*][?(@.name=='UnexpectedEndTag')].inner.kind.tuple\" [null]\n+// @is \"$.index[*][?(@.name=='UnexpectedEndTag')].inner.discriminant\" null\n \n pub enum ParseError {\n     UnexpectedEndTag(#[doc(hidden)] u32),"}, {"sha": "1787a859c8b37c8fb4afb11d80e25dca246f960e", "filename": "src/test/rustdoc-json/enums/kind.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Ftest%2Frustdoc-json%2Fenums%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Ftest%2Frustdoc-json%2Fenums%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fkind.rs?ref=cca5d219e6801ebc2a62b455a12c657098a8af2d", "patch": "@@ -5,27 +5,22 @@\n \n pub enum Foo {\n     // @set Unit = \"$.index[*][?(@.name=='Unit')].id\"\n-    // @is \"$.index[*][?(@.name=='Unit')].inner.variant_kind\" '\"plain\"'\n-    // @is \"$.index[*][?(@.name=='Unit')].inner.variant_inner\" null\n+    // @is \"$.index[*][?(@.name=='Unit')].inner.kind\" '\"plain\"'\n     Unit,\n     // @set Named = \"$.index[*][?(@.name=='Named')].id\"\n-    // @is \"$.index[*][?(@.name=='Named')].inner.variant_kind\" '\"struct\"'\n-    // @is \"$.index[*][?(@.name=='Named')].inner.variant_inner\" '{\"fields\": [], \"fields_stripped\": false}'\n+    // @is \"$.index[*][?(@.name=='Named')].inner.kind.struct\" '{\"fields\": [], \"fields_stripped\": false}'\n     Named {},\n     // @set Tuple = \"$.index[*][?(@.name=='Tuple')].id\"\n-    // @is \"$.index[*][?(@.name=='Tuple')].inner.variant_kind\" '\"tuple\"'\n-    // @is \"$.index[*][?(@.name=='Tuple')].inner.variant_inner\" []\n+    // @is \"$.index[*][?(@.name=='Tuple')].inner.kind.tuple\" []\n     Tuple(),\n     // @set NamedField = \"$.index[*][?(@.name=='NamedField')].id\"\n     // @set x = \"$.index[*][?(@.name=='x' && @.kind=='struct_field')].id\"\n-    // @is \"$.index[*][?(@.name=='NamedField')].inner.variant_kind\" '\"struct\"'\n-    // @is \"$.index[*][?(@.name=='NamedField')].inner.variant_inner.fields[*]\" $x\n-    // @is \"$.index[*][?(@.name=='NamedField')].inner.variant_inner.fields_stripped\" false\n+    // @is \"$.index[*][?(@.name=='NamedField')].inner.kind.struct.fields[*]\" $x\n+    // @is \"$.index[*][?(@.name=='NamedField')].inner.kind.struct.fields_stripped\" false\n     NamedField { x: i32 },\n     // @set TupleField = \"$.index[*][?(@.name=='TupleField')].id\"\n-    // @is \"$.index[*][?(@.name=='TupleField')].inner.variant_kind\" '\"tuple\"'\n     // @set tup_field = \"$.index[*][?(@.name=='0' && @.kind=='struct_field')].id\"\n-    // @is \"$.index[*][?(@.name=='TupleField')].inner.variant_inner[*]\" $tup_field\n+    // @is \"$.index[*][?(@.name=='TupleField')].inner.kind.tuple[*]\" $tup_field\n     TupleField(i32),\n }\n "}, {"sha": "de939cde2e7b34b990736d3664a39dca6202e0b8", "filename": "src/test/rustdoc-json/enums/struct_field_hidden.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Ftest%2Frustdoc-json%2Fenums%2Fstruct_field_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Ftest%2Frustdoc-json%2Fenums%2Fstruct_field_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fstruct_field_hidden.rs?ref=cca5d219e6801ebc2a62b455a12c657098a8af2d", "patch": "@@ -9,9 +9,8 @@ pub enum Foo {\n         // @set y = \"$.index[*][?(@.name=='y')].id\"\n         y: i32,\n     },\n-    // @is \"$.index[*][?(@.name=='Variant')].inner.variant_kind\" '\"struct\"'\n-    // @is \"$.index[*][?(@.name=='Variant')].inner.variant_inner.fields_stripped\" true\n-    // @is \"$.index[*][?(@.name=='Variant')].inner.variant_inner.fields[0]\" $b\n-    // @is \"$.index[*][?(@.name=='Variant')].inner.variant_inner.fields[1]\" $y\n-    // @count \"$.index[*][?(@.name=='Variant')].inner.variant_inner.fields[*]\" 2\n+    // @is \"$.index[*][?(@.name=='Variant')].inner.kind.struct.fields_stripped\" true\n+    // @is \"$.index[*][?(@.name=='Variant')].inner.kind.struct.fields[0]\" $b\n+    // @is \"$.index[*][?(@.name=='Variant')].inner.kind.struct.fields[1]\" $y\n+    // @count \"$.index[*][?(@.name=='Variant')].inner.kind.struct.fields[*]\" 2\n }"}, {"sha": "70bfbb81826bee450acfcc2018d34da3661e449a", "filename": "src/test/rustdoc-json/enums/tuple_fields_hidden.rs", "status": "modified", "additions": 29, "deletions": 40, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Ftest%2Frustdoc-json%2Fenums%2Ftuple_fields_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Ftest%2Frustdoc-json%2Fenums%2Ftuple_fields_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Ftuple_fields_hidden.rs?ref=cca5d219e6801ebc2a62b455a12c657098a8af2d", "patch": "@@ -14,61 +14,50 @@\n // @set 3.3.1 = \"$.index[*][?(@.docs=='3.3.1')].id\"\n \n pub enum EnumWithStrippedTupleVariants {\n-    // @is    \"$.index[*][?(@.name=='None')].inner.variant_kind\" '\"tuple\"'\n-    // @count \"$.index[*][?(@.name=='None')].inner.variant_inner[*]\" 0\n+    // @count \"$.index[*][?(@.name=='None')].inner.kind.tuple[*]\" 0\n     None(),\n \n-    // @is    \"$.index[*][?(@.name=='One')].inner.variant_kind\" '\"tuple\"'\n-    // @count \"$.index[*][?(@.name=='One')].inner.variant_inner[*]\" 1\n-    // @is    \"$.index[*][?(@.name=='One')].inner.variant_inner[0]\" $1.1.0\n+    // @count \"$.index[*][?(@.name=='One')].inner.kind.tuple[*]\" 1\n+    // @is    \"$.index[*][?(@.name=='One')].inner.kind.tuple[0]\" $1.1.0\n     One(/** 1.1.0*/ bool),\n-    // @is    \"$.index[*][?(@.name=='OneHidden')].inner.variant_kind\" '\"tuple\"'\n-    // @count \"$.index[*][?(@.name=='OneHidden')].inner.variant_inner[*]\" 1\n-    // @is    \"$.index[*][?(@.name=='OneHidden')].inner.variant_inner[0]\" null\n+    // @count \"$.index[*][?(@.name=='OneHidden')].inner.kind.tuple[*]\" 1\n+    // @is    \"$.index[*][?(@.name=='OneHidden')].inner.kind.tuple[0]\" null\n     OneHidden(#[doc(hidden)] bool),\n \n-    // @is    \"$.index[*][?(@.name=='Two')].inner.variant_kind\" '\"tuple\"'\n-    // @count \"$.index[*][?(@.name=='Two')].inner.variant_inner[*]\" 2\n-    // @is    \"$.index[*][?(@.name=='Two')].inner.variant_inner[0]\" $2.1.0\n-    // @is    \"$.index[*][?(@.name=='Two')].inner.variant_inner[1]\" $2.1.1\n+    // @count \"$.index[*][?(@.name=='Two')].inner.kind.tuple[*]\" 2\n+    // @is    \"$.index[*][?(@.name=='Two')].inner.kind.tuple[0]\" $2.1.0\n+    // @is    \"$.index[*][?(@.name=='Two')].inner.kind.tuple[1]\" $2.1.1\n     Two(/** 2.1.0*/ bool, /** 2.1.1*/ bool),\n-    // @is    \"$.index[*][?(@.name=='TwoLeftHidden')].inner.variant_kind\" '\"tuple\"'\n-    // @count \"$.index[*][?(@.name=='TwoLeftHidden')].inner.variant_inner[*]\" 2\n-    // @is    \"$.index[*][?(@.name=='TwoLeftHidden')].inner.variant_inner[0]\" null\n-    // @is    \"$.index[*][?(@.name=='TwoLeftHidden')].inner.variant_inner[1]\" $2.2.1\n+    // @count \"$.index[*][?(@.name=='TwoLeftHidden')].inner.kind.tuple[*]\" 2\n+    // @is    \"$.index[*][?(@.name=='TwoLeftHidden')].inner.kind.tuple[0]\" null\n+    // @is    \"$.index[*][?(@.name=='TwoLeftHidden')].inner.kind.tuple[1]\" $2.2.1\n     TwoLeftHidden(#[doc(hidden)] bool, /** 2.2.1*/ bool),\n-    // @is    \"$.index[*][?(@.name=='TwoRightHidden')].inner.variant_kind\" '\"tuple\"'\n-    // @count \"$.index[*][?(@.name=='TwoRightHidden')].inner.variant_inner[*]\" 2\n-    // @is    \"$.index[*][?(@.name=='TwoRightHidden')].inner.variant_inner[0]\" $2.3.0\n-    // @is    \"$.index[*][?(@.name=='TwoRightHidden')].inner.variant_inner[1]\" null\n+    // @count \"$.index[*][?(@.name=='TwoRightHidden')].inner.kind.tuple[*]\" 2\n+    // @is    \"$.index[*][?(@.name=='TwoRightHidden')].inner.kind.tuple[0]\" $2.3.0\n+    // @is    \"$.index[*][?(@.name=='TwoRightHidden')].inner.kind.tuple[1]\" null\n     TwoRightHidden(/** 2.3.0*/ bool, #[doc(hidden)] bool),\n-    // @is    \"$.index[*][?(@.name=='TwoBothHidden')].inner.variant_kind\" '\"tuple\"'\n-    // @count \"$.index[*][?(@.name=='TwoBothHidden')].inner.variant_inner[*]\" 2\n-    // @is    \"$.index[*][?(@.name=='TwoBothHidden')].inner.variant_inner[0]\" null\n-    // @is    \"$.index[*][?(@.name=='TwoBothHidden')].inner.variant_inner[1]\" null\n+    // @count \"$.index[*][?(@.name=='TwoBothHidden')].inner.kind.tuple[*]\" 2\n+    // @is    \"$.index[*][?(@.name=='TwoBothHidden')].inner.kind.tuple[0]\" null\n+    // @is    \"$.index[*][?(@.name=='TwoBothHidden')].inner.kind.tuple[1]\" null\n     TwoBothHidden(#[doc(hidden)] bool, #[doc(hidden)] bool),\n \n-    // @is    \"$.index[*][?(@.name=='Three1')].inner.variant_kind\" '\"tuple\"'\n-    // @count \"$.index[*][?(@.name=='Three1')].inner.variant_inner[*]\" 3\n-    // @is    \"$.index[*][?(@.name=='Three1')].inner.variant_inner[0]\" null\n-    // @is    \"$.index[*][?(@.name=='Three1')].inner.variant_inner[1]\" $3.1.1\n-    // @is    \"$.index[*][?(@.name=='Three1')].inner.variant_inner[2]\" $3.1.2\n+    // @count \"$.index[*][?(@.name=='Three1')].inner.kind.tuple[*]\" 3\n+    // @is    \"$.index[*][?(@.name=='Three1')].inner.kind.tuple[0]\" null\n+    // @is    \"$.index[*][?(@.name=='Three1')].inner.kind.tuple[1]\" $3.1.1\n+    // @is    \"$.index[*][?(@.name=='Three1')].inner.kind.tuple[2]\" $3.1.2\n     Three1(#[doc(hidden)] bool, /** 3.1.1*/ bool, /** 3.1.2*/ bool),\n-    // @is    \"$.index[*][?(@.name=='Three2')].inner.variant_kind\" '\"tuple\"'\n-    // @count \"$.index[*][?(@.name=='Three2')].inner.variant_inner[*]\" 3\n-    // @is    \"$.index[*][?(@.name=='Three2')].inner.variant_inner[0]\" $3.2.0\n-    // @is    \"$.index[*][?(@.name=='Three2')].inner.variant_inner[1]\" null\n-    // @is    \"$.index[*][?(@.name=='Three2')].inner.variant_inner[2]\" $3.2.2\n+    // @count \"$.index[*][?(@.name=='Three2')].inner.kind.tuple[*]\" 3\n+    // @is    \"$.index[*][?(@.name=='Three2')].inner.kind.tuple[0]\" $3.2.0\n+    // @is    \"$.index[*][?(@.name=='Three2')].inner.kind.tuple[1]\" null\n+    // @is    \"$.index[*][?(@.name=='Three2')].inner.kind.tuple[2]\" $3.2.2\n     Three2(/** 3.2.0*/ bool, #[doc(hidden)] bool, /** 3.2.2*/ bool),\n-    // @is    \"$.index[*][?(@.name=='Three3')].inner.variant_kind\" '\"tuple\"'\n-    // @count \"$.index[*][?(@.name=='Three3')].inner.variant_inner[*]\" 3\n-    // @is    \"$.index[*][?(@.name=='Three3')].inner.variant_inner[0]\" $3.3.0\n-    // @is    \"$.index[*][?(@.name=='Three3')].inner.variant_inner[1]\" $3.3.1\n-    // @is    \"$.index[*][?(@.name=='Three3')].inner.variant_inner[2]\" null\n+    // @count \"$.index[*][?(@.name=='Three3')].inner.kind.tuple[*]\" 3\n+    // @is    \"$.index[*][?(@.name=='Three3')].inner.kind.tuple[0]\" $3.3.0\n+    // @is    \"$.index[*][?(@.name=='Three3')].inner.kind.tuple[1]\" $3.3.1\n+    // @is    \"$.index[*][?(@.name=='Three3')].inner.kind.tuple[2]\" null\n     Three3(/** 3.3.0*/ bool, /** 3.3.1*/ bool, #[doc(hidden)] bool),\n }\n \n-\n // @is \"$.index[*][?(@.docs=='1.1.0')].name\" '\"0\"'\n // @is \"$.index[*][?(@.docs=='2.1.0')].name\" '\"0\"'\n // @is \"$.index[*][?(@.docs=='2.1.1')].name\" '\"1\"'"}, {"sha": "bc870c502a0112b0f801495c15ac061b9ae83870", "filename": "src/test/rustdoc-json/enums/variant_struct.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Ftest%2Frustdoc-json%2Fenums%2Fvariant_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Ftest%2Frustdoc-json%2Fenums%2Fvariant_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fvariant_struct.rs?ref=cca5d219e6801ebc2a62b455a12c657098a8af2d", "patch": "@@ -1,11 +1,10 @@\n // @is \"$.index[*][?(@.name=='EnumStruct')].visibility\" \\\"public\\\"\n // @is \"$.index[*][?(@.name=='EnumStruct')].kind\" \\\"enum\\\"\n pub enum EnumStruct {\n-    // @is \"$.index[*][?(@.name=='VariantS')].inner.variant_kind\" \\\"struct\\\"\n     // @is \"$.index[*][?(@.name=='x')].kind\" \\\"struct_field\\\"\n+    // @set x = \"$.index[*][?(@.name=='x')].id\"\n     // @is \"$.index[*][?(@.name=='y')].kind\" \\\"struct_field\\\"\n-    VariantS {\n-        x: u32,\n-        y: String,\n-    },\n+    // @set y = \"$.index[*][?(@.name=='y')].id\"\n+    // @ismany \"$.index[*][?(@.name=='VariantS')].inner.kind.struct.fields[*]\" $x $y\n+    VariantS { x: u32, y: String },\n }"}, {"sha": "d1207bbfb18da6213394c8f8712c63affd83332a", "filename": "src/test/rustdoc-json/enums/variant_tuple_struct.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Ftest%2Frustdoc-json%2Fenums%2Fvariant_tuple_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Ftest%2Frustdoc-json%2Fenums%2Fvariant_tuple_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fvariant_tuple_struct.rs?ref=cca5d219e6801ebc2a62b455a12c657098a8af2d", "patch": "@@ -1,8 +1,10 @@\n // @is \"$.index[*][?(@.name=='EnumTupleStruct')].visibility\" \\\"public\\\"\n // @is \"$.index[*][?(@.name=='EnumTupleStruct')].kind\" \\\"enum\\\"\n pub enum EnumTupleStruct {\n-    // @is \"$.index[*][?(@.name=='VariantA')].inner.variant_kind\" \\\"tuple\\\"\n     // @is \"$.index[*][?(@.name=='0')].kind\" \\\"struct_field\\\"\n+    // @set f0 = \"$.index[*][?(@.name=='0')].id\"\n     // @is \"$.index[*][?(@.name=='1')].kind\" \\\"struct_field\\\"\n+    // @set f1 = \"$.index[*][?(@.name=='1')].id\"\n+    // @ismany \"$.index[*][?(@.name=='VariantA')].inner.kind.tuple[*]\" $f0 $f1\n     VariantA(u32, String),\n }"}, {"sha": "291d02d67bd626afa78205c86d432c6d41adc6c2", "filename": "src/tools/jsondoclint/src/validator.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cca5d219e6801ebc2a62b455a12c657098a8af2d/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs?ref=cca5d219e6801ebc2a62b455a12c657098a8af2d", "patch": "@@ -5,7 +5,7 @@ use rustdoc_json_types::{\n     Constant, Crate, DynTrait, Enum, FnDecl, Function, FunctionPointer, GenericArg, GenericArgs,\n     GenericBound, GenericParamDef, Generics, Id, Impl, Import, ItemEnum, Module, OpaqueTy, Path,\n     Primitive, ProcMacro, Static, Struct, StructKind, Term, Trait, TraitAlias, Type, TypeBinding,\n-    TypeBindingKind, Typedef, Union, Variant, WherePredicate,\n+    TypeBindingKind, Typedef, Union, Variant, VariantKind, WherePredicate,\n };\n \n use crate::{item_kind::Kind, Error, ErrorKind};\n@@ -140,24 +140,24 @@ impl<'a> Validator<'a> {\n     }\n \n     fn check_variant(&mut self, x: &'a Variant, id: &'a Id) {\n-        match x {\n-            Variant::Plain(discr) => {\n-                if let Some(discr) = discr {\n-                    if let (Err(_), Err(_)) =\n-                        (discr.value.parse::<i128>(), discr.value.parse::<u128>())\n-                    {\n-                        self.fail(\n-                            id,\n-                            ErrorKind::Custom(format!(\n-                                \"Failed to parse discriminant value `{}`\",\n-                                discr.value\n-                            )),\n-                        );\n-                    }\n-                }\n+        let Variant { kind, discriminant } = x;\n+\n+        if let Some(discr) = discriminant {\n+            if let (Err(_), Err(_)) = (discr.value.parse::<i128>(), discr.value.parse::<u128>()) {\n+                self.fail(\n+                    id,\n+                    ErrorKind::Custom(format!(\n+                        \"Failed to parse discriminant value `{}`\",\n+                        discr.value\n+                    )),\n+                );\n             }\n-            Variant::Tuple(tys) => tys.iter().flatten().for_each(|t| self.add_field_id(t)),\n-            Variant::Struct { fields, fields_stripped: _ } => {\n+        }\n+\n+        match kind {\n+            VariantKind::Plain => {}\n+            VariantKind::Tuple(tys) => tys.iter().flatten().for_each(|t| self.add_field_id(t)),\n+            VariantKind::Struct { fields, fields_stripped: _ } => {\n                 fields.iter().for_each(|f| self.add_field_id(f))\n             }\n         }"}]}