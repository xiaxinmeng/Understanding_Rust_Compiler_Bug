{"sha": "722905fda0bc7ef818bccc4b3f59641533269f36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMjkwNWZkYTBiYzdlZjgxOGJjY2M0YjNmNTk2NDE1MzMyNjlmMzY=", "commit": {"author": {"name": "Tamir Duberstein", "email": "tamird@gmail.com", "date": "2015-12-12T13:13:43Z"}, "committer": {"name": "Tamir Duberstein", "email": "tamird@gmail.com", "date": "2015-12-13T06:02:12Z"}, "message": "restore tests accidentally removed in #30182", "tree": {"sha": "005b082f036dad639468036bcce3932c5a086239", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/005b082f036dad639468036bcce3932c5a086239"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/722905fda0bc7ef818bccc4b3f59641533269f36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/722905fda0bc7ef818bccc4b3f59641533269f36", "html_url": "https://github.com/rust-lang/rust/commit/722905fda0bc7ef818bccc4b3f59641533269f36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/722905fda0bc7ef818bccc4b3f59641533269f36/comments", "author": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35b6461b6e7419ef5b81d02dfe53172219103764", "url": "https://api.github.com/repos/rust-lang/rust/commits/35b6461b6e7419ef5b81d02dfe53172219103764", "html_url": "https://github.com/rust-lang/rust/commit/35b6461b6e7419ef5b81d02dfe53172219103764"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "9aab6c93c821063c0c45eb73cf212dd8b04ba94d", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/722905fda0bc7ef818bccc4b3f59641533269f36/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/722905fda0bc7ef818bccc4b3f59641533269f36/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=722905fda0bc7ef818bccc4b3f59641533269f36", "patch": "@@ -110,6 +110,9 @@ pub use core::slice::{Iter, IterMut};\n pub use core::slice::{SplitMut, ChunksMut, Split};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::slice::{SplitN, RSplitN, SplitNMut, RSplitNMut};\n+#[unstable(feature = \"slice_bytes\", issue = \"27740\")]\n+#[allow(deprecated)]\n+pub use core::slice::bytes;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::slice::{from_raw_parts, from_raw_parts_mut};\n "}, {"sha": "80dcd48fbfaa9e953b84f104595d95f8c3ee271e", "filename": "src/libcollectionstest/slice.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/722905fda0bc7ef818bccc4b3f59641533269f36/src%2Flibcollectionstest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/722905fda0bc7ef818bccc4b3f59641533269f36/src%2Flibcollectionstest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fslice.rs?ref=722905fda0bc7ef818bccc4b3f59641533269f36", "patch": "@@ -866,6 +866,17 @@ fn test_vec_default() {\n     t!(Vec<i32>);\n }\n \n+#[test]\n+fn test_bytes_set_memory() {\n+    use std::slice::bytes::MutableByteVector;\n+\n+    let mut values = [1,2,3,4,5];\n+    values[0..5].set_memory(0xAB);\n+    assert!(values == [0xAB, 0xAB, 0xAB, 0xAB, 0xAB]);\n+    values[2..4].set_memory(0xFF);\n+    assert!(values == [0xAB, 0xAB, 0xFF, 0xFF, 0xAB]);\n+}\n+\n #[test]\n #[should_panic]\n fn test_overflow_does_not_cause_segfault() {"}, {"sha": "fba56db32bb4c65376be1a666cdfe03a2f56bd72", "filename": "src/libcoretest/num/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/722905fda0bc7ef818bccc4b3f59641533269f36/src%2Flibcoretest%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/722905fda0bc7ef818bccc4b3f59641533269f36/src%2Flibcoretest%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fmod.rs?ref=722905fda0bc7ef818bccc4b3f59641533269f36", "patch": "@@ -54,6 +54,14 @@ mod tests {\n     use core::option::Option::{Some, None};\n     use core::num::Float;\n \n+    #[test]\n+    fn from_str_issue7588() {\n+        let u : Option<u8> = u8::from_str_radix(\"1000\", 10).ok();\n+        assert_eq!(u, None);\n+        let s : Option<i16> = i16::from_str_radix(\"80000\", 10).ok();\n+        assert_eq!(s, None);\n+    }\n+\n     #[test]\n     fn test_int_from_str_overflow() {\n         let mut i8_val: i8 = 127;"}]}