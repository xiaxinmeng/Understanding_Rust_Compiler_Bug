{"sha": "b71ea80172136fe4b597aef1001ca72a8588fe15", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MWVhODAxNzIxMzZmZTRiNTk3YWVmMTAwMWNhNzJhODU4OGZlMTU=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-10-09T10:08:46Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-10-18T23:16:49Z"}, "message": "Don't ICE when evaluating writes to uninhabited enum variants", "tree": {"sha": "f7ed7b8b3f3c39de6895e763623dc8e708c34fb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7ed7b8b3f3c39de6895e763623dc8e708c34fb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b71ea80172136fe4b597aef1001ca72a8588fe15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b71ea80172136fe4b597aef1001ca72a8588fe15", "html_url": "https://github.com/rust-lang/rust/commit/b71ea80172136fe4b597aef1001ca72a8588fe15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b71ea80172136fe4b597aef1001ca72a8588fe15/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cf6c23d66ce4d80d6d76291c10cbbe6cab9cb00", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cf6c23d66ce4d80d6d76291c10cbbe6cab9cb00", "html_url": "https://github.com/rust-lang/rust/commit/8cf6c23d66ce4d80d6d76291c10cbbe6cab9cb00"}], "stats": {"total": 61, "additions": 48, "deletions": 13}, "files": [{"sha": "d918b9ee67347e8ef4be0409e75c1c35a78da0e4", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b71ea80172136fe4b597aef1001ca72a8588fe15/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71ea80172136fe4b597aef1001ca72a8588fe15/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=b71ea80172136fe4b597aef1001ca72a8588fe15", "patch": "@@ -363,6 +363,8 @@ pub enum UndefinedBehaviorInfo {\n     UbExperimental(String),\n     /// Unreachable code was executed.\n     Unreachable,\n+    /// An enum discriminant was set to a value which was outside the range of valid values.\n+    InvalidDiscriminant(ScalarMaybeUndef),\n }\n \n impl fmt::Debug for UndefinedBehaviorInfo {\n@@ -373,6 +375,8 @@ impl fmt::Debug for UndefinedBehaviorInfo {\n                 write!(f, \"{}\", msg),\n             Unreachable =>\n                 write!(f, \"entered unreachable code\"),\n+            InvalidDiscriminant(val) =>\n+                write!(f, \"encountered invalid enum discriminant {}\", val),\n         }\n     }\n }\n@@ -400,7 +404,6 @@ pub enum UnsupportedOpInfo<'tcx> {\n     InvalidMemoryAccess,\n     InvalidFunctionPointer,\n     InvalidBool,\n-    InvalidDiscriminant(ScalarMaybeUndef),\n     PointerOutOfBounds {\n         ptr: Pointer,\n         msg: CheckInAllocMsg,\n@@ -485,8 +488,6 @@ impl fmt::Debug for UnsupportedOpInfo<'tcx> {\n                 write!(f, \"incorrect alloc info: expected size {} and align {}, \\\n                            got size {} and align {}\",\n                     size.bytes(), align.bytes(), size2.bytes(), align2.bytes()),\n-            InvalidDiscriminant(val) =>\n-                write!(f, \"encountered invalid enum discriminant {}\", val),\n             InvalidMemoryAccess =>\n                 write!(f, \"tried to access memory through an invalid pointer\"),\n             DanglingPointerDeref =>"}, {"sha": "4d9be55945e0279ef3acfb4ec0ced2efd156f9b3", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b71ea80172136fe4b597aef1001ca72a8588fe15/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71ea80172136fe4b597aef1001ca72a8588fe15/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=b71ea80172136fe4b597aef1001ca72a8588fe15", "patch": "@@ -647,7 +647,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let bits_discr = raw_discr\n                     .not_undef()\n                     .and_then(|raw_discr| self.force_bits(raw_discr, discr_val.layout.size))\n-                    .map_err(|_| err_unsup!(InvalidDiscriminant(raw_discr.erase_tag())))?;\n+                    .map_err(|_| err_ub!(InvalidDiscriminant(raw_discr.erase_tag())))?;\n                 let real_discr = if discr_val.layout.ty.is_signed() {\n                     // going from layout tag type to typeck discriminant type\n                     // requires first sign extending with the discriminant layout\n@@ -677,7 +677,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     _ => bug!(\"tagged layout for non-adt non-generator\"),\n \n                 }.ok_or_else(\n-                    || err_unsup!(InvalidDiscriminant(raw_discr.erase_tag()))\n+                    || err_ub!(InvalidDiscriminant(raw_discr.erase_tag()))\n                 )?;\n                 (real_discr, index.0)\n             },\n@@ -689,15 +689,15 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let variants_start = niche_variants.start().as_u32();\n                 let variants_end = niche_variants.end().as_u32();\n                 let raw_discr = raw_discr.not_undef().map_err(|_| {\n-                    err_unsup!(InvalidDiscriminant(ScalarMaybeUndef::Undef))\n+                    err_ub!(InvalidDiscriminant(ScalarMaybeUndef::Undef))\n                 })?;\n                 match raw_discr.to_bits_or_ptr(discr_val.layout.size, self) {\n                     Err(ptr) => {\n                         // The niche must be just 0 (which an inbounds pointer value never is)\n                         let ptr_valid = niche_start == 0 && variants_start == variants_end &&\n                             !self.memory.ptr_may_be_null(ptr);\n                         if !ptr_valid {\n-                            throw_unsup!(InvalidDiscriminant(raw_discr.erase_tag().into()))\n+                            throw_ub!(InvalidDiscriminant(raw_discr.erase_tag().into()))\n                         }\n                         (dataful_variant.as_u32() as u128, dataful_variant)\n                     },"}, {"sha": "0289c52fd37446bbd7578bbc3865786618170369", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b71ea80172136fe4b597aef1001ca72a8588fe15/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71ea80172136fe4b597aef1001ca72a8588fe15/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=b71ea80172136fe4b597aef1001ca72a8588fe15", "patch": "@@ -1031,17 +1031,23 @@ where\n         variant_index: VariantIdx,\n         dest: PlaceTy<'tcx, M::PointerTag>,\n     ) -> InterpResult<'tcx> {\n+        let variant_scalar = Scalar::from_u32(variant_index.as_u32()).into();\n+\n         match dest.layout.variants {\n             layout::Variants::Single { index } => {\n-                assert_eq!(index, variant_index);\n+                if index != variant_index {\n+                    throw_ub!(InvalidDiscriminant(variant_scalar));\n+                }\n             }\n             layout::Variants::Multiple {\n                 discr_kind: layout::DiscriminantKind::Tag,\n                 discr: ref discr_layout,\n                 discr_index,\n                 ..\n             } => {\n-                assert!(dest.layout.ty.variant_range(*self.tcx).unwrap().contains(&variant_index));\n+                if !dest.layout.ty.variant_range(*self.tcx).unwrap().contains(&variant_index) {\n+                    throw_ub!(InvalidDiscriminant(variant_scalar));\n+                }\n                 let discr_val =\n                     dest.layout.ty.discriminant_for_variant(*self.tcx, variant_index).unwrap().val;\n \n@@ -1064,9 +1070,9 @@ where\n                 discr_index,\n                 ..\n             } => {\n-                assert!(\n-                    variant_index.as_usize() < dest.layout.ty.ty_adt_def().unwrap().variants.len(),\n-                );\n+                if !variant_index.as_usize() < dest.layout.ty.ty_adt_def().unwrap().variants.len() {\n+                    throw_ub!(InvalidDiscriminant(variant_scalar));\n+                }\n                 if variant_index != dataful_variant {\n                     let variants_start = niche_variants.start().as_u32();\n                     let variant_index_relative = variant_index.as_u32()"}, {"sha": "3444fb60f333b9d35fcf5c33cbe2f7bfbb265065", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b71ea80172136fe4b597aef1001ca72a8588fe15/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71ea80172136fe4b597aef1001ca72a8588fe15/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=b71ea80172136fe4b597aef1001ca72a8588fe15", "patch": "@@ -344,7 +344,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n         match self.walk_value(op) {\n             Ok(()) => Ok(()),\n             Err(err) => match err.kind {\n-                err_unsup!(InvalidDiscriminant(val)) =>\n+                err_ub!(InvalidDiscriminant(val)) =>\n                     throw_validation_failure!(\n                         val, self.path, \"a valid enum discriminant\"\n                     ),"}, {"sha": "cccb7879fc0fbe5c8d464b46cc3e91bbe7915a4d", "filename": "src/test/ui/consts/const-eval/write-to-uninhabited-enum-variant.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b71ea80172136fe4b597aef1001ca72a8588fe15/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fwrite-to-uninhabited-enum-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71ea80172136fe4b597aef1001ca72a8588fe15/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fwrite-to-uninhabited-enum-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fwrite-to-uninhabited-enum-variant.rs?ref=b71ea80172136fe4b597aef1001ca72a8588fe15", "patch": "@@ -0,0 +1,28 @@\n+// run-pass\n+\n+#![allow(dead_code)]\n+\n+enum Empty { }\n+enum Test1 {\n+    A(u8),\n+    B(Empty),\n+}\n+enum Test2 {\n+    A(u8),\n+    B(Empty),\n+    C,\n+}\n+\n+fn bar() -> Option<Empty> {\n+    None\n+}\n+\n+fn main() {\n+    if let Some(x) = bar() {\n+        Test1::B(x);\n+    }\n+\n+    if let Some(x) = bar() {\n+        Test2::B(x);\n+    }\n+}"}]}