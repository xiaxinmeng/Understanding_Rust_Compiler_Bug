{"sha": "e65594124197bd75716d372bec1d662b2ded03e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NTU5NDEyNDE5N2JkNzU3MTZkMzcyYmVjMWQ2NjJiMmRlZDAzZTc=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-02-03T16:38:05Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-02-24T23:35:16Z"}, "message": "Account for associated consts in the \"unstable assoc item name colission\" lint\n\nFix #81663.", "tree": {"sha": "cf55456d6d20a3abfa2084ce4ed104f01bd01324", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf55456d6d20a3abfa2084ce4ed104f01bd01324"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e65594124197bd75716d372bec1d662b2ded03e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e65594124197bd75716d372bec1d662b2ded03e7", "html_url": "https://github.com/rust-lang/rust/commit/e65594124197bd75716d372bec1d662b2ded03e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e65594124197bd75716d372bec1d662b2ded03e7/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b81f5811f96fe750ab28c15219d1b0dba6b1dc90", "url": "https://api.github.com/repos/rust-lang/rust/commits/b81f5811f96fe750ab28c15219d1b0dba6b1dc90", "html_url": "https://github.com/rust-lang/rust/commit/b81f5811f96fe750ab28c15219d1b0dba6b1dc90"}], "stats": {"total": 90, "additions": 67, "deletions": 23}, "files": [{"sha": "bb8b661ad5d742150dcb80884c24c0fee6049698", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e65594124197bd75716d372bec1d662b2ded03e7/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e65594124197bd75716d372bec1d662b2ded03e7/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=e65594124197bd75716d372bec1d662b2ded03e7", "patch": "@@ -345,12 +345,12 @@ pub fn struct_lint_level<'s, 'd>(\n                  it will become a hard error\";\n \n             let explanation = if lint_id == LintId::of(builtin::UNSTABLE_NAME_COLLISIONS) {\n-                \"once this method is added to the standard library, \\\n-                 the ambiguity may cause an error or change in behavior!\"\n+                \"once this associated item is added to the standard library, the ambiguity may \\\n+                 cause an error or change in behavior!\"\n                     .to_owned()\n             } else if lint_id == LintId::of(builtin::MUTABLE_BORROW_RESERVATION_CONFLICT) {\n-                \"this borrowing pattern was not meant to be accepted, \\\n-                 and may become a hard error in the future\"\n+                \"this borrowing pattern was not meant to be accepted, and may become a hard error \\\n+                 in the future\"\n                     .to_owned()\n             } else if let Some(edition) = future_incompatible.edition {\n                 format!(\"{} in the {} edition!\", STANDARD_MESSAGE, edition)"}, {"sha": "2bfd697e4cdca9111afea42465512275fcdf029a", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e65594124197bd75716d372bec1d662b2ded03e7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e65594124197bd75716d372bec1d662b2ded03e7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=e65594124197bd75716d372bec1d662b2ded03e7", "patch": "@@ -10,6 +10,7 @@ use crate::hir::def_id::DefId;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n+use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::Namespace;\n use rustc_infer::infer::canonical::OriginalQueryValues;\n@@ -1167,7 +1168,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                         //\n                         // We suppress warning if we're picking the method only because it is a\n                         // suggestion.\n-                        self.emit_unstable_name_collision_hint(p, &unstable_candidates);\n+                        self.emit_unstable_name_collision_hint(p, &unstable_candidates, self_ty);\n                     }\n                 }\n                 return Some(pick);\n@@ -1246,24 +1247,46 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         &self,\n         stable_pick: &Pick<'_>,\n         unstable_candidates: &[(&Candidate<'tcx>, Symbol)],\n+        self_ty: Ty<'tcx>,\n     ) {\n         self.tcx.struct_span_lint_hir(\n             lint::builtin::UNSTABLE_NAME_COLLISIONS,\n             self.fcx.body_id,\n             self.span,\n             |lint| {\n-                let mut diag = lint.build(\n-                    \"a method with this name may be added to the standard library in the future\",\n-                );\n-                // FIXME: This should be a `span_suggestion` instead of `help`\n-                // However `self.span` only\n-                // highlights the method name, so we can't use it. Also consider reusing the code from\n-                // `report_method_error()`.\n-                diag.help(&format!(\n-                    \"call with fully qualified syntax `{}(...)` to keep using the current method\",\n-                    self.tcx.def_path_str(stable_pick.item.def_id),\n+                let def_kind = stable_pick.item.kind.as_def_kind();\n+                let mut diag = lint.build(&format!(\n+                    \"{} {} with this name may be added to the standard library in the future\",\n+                    def_kind.article(),\n+                    def_kind.descr(stable_pick.item.def_id),\n                 ));\n-\n+                match (stable_pick.item.kind, stable_pick.item.container) {\n+                    (ty::AssocKind::Fn, _) => {\n+                        // FIXME: This should be a `span_suggestion` instead of `help`\n+                        // However `self.span` only\n+                        // highlights the method name, so we can't use it. Also consider reusing\n+                        // the code from `report_method_error()`.\n+                        diag.help(&format!(\n+                            \"call with fully qualified syntax `{}(...)` to keep using the current \\\n+                             method\",\n+                            self.tcx.def_path_str(stable_pick.item.def_id),\n+                        ));\n+                    }\n+                    (ty::AssocKind::Const, ty::AssocItemContainer::TraitContainer(def_id)) => {\n+                        diag.span_suggestion(\n+                            self.span,\n+                            \"use the fully qualified path to the associated const\",\n+                            format!(\n+                                \"<{} as {}>::{}\",\n+                                self_ty,\n+                                self.tcx.def_path_str(def_id),\n+                                stable_pick.item.ident\n+                            ),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    }\n+                    _ => {}\n+                }\n                 if self.tcx.sess.is_nightly_build() {\n                     for (candidate, feature) in unstable_candidates {\n                         diag.help(&format!("}, {"sha": "91fc398f7418396ea23c9f65f07cb039cba696d5", "filename": "src/test/ui/inference/auxiliary/inference_unstable_iterator.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e65594124197bd75716d372bec1d662b2ded03e7/src%2Ftest%2Fui%2Finference%2Fauxiliary%2Finference_unstable_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e65594124197bd75716d372bec1d662b2ded03e7/src%2Ftest%2Fui%2Finference%2Fauxiliary%2Finference_unstable_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fauxiliary%2Finference_unstable_iterator.rs?ref=e65594124197bd75716d372bec1d662b2ded03e7", "patch": "@@ -8,7 +8,11 @@ pub trait IpuIterator {\n     fn ipu_flatten(&self) -> u32 {\n         0\n     }\n+    #[unstable(feature = \"assoc_const_ipu_iter\", issue = \"99999\")]\n+    const C: i32;\n }\n \n #[stable(feature = \"ipu_iterator\", since = \"1.0.0\")]\n-impl IpuIterator for char {}\n+impl IpuIterator for char {\n+    const C: i32 = 42;\n+}"}, {"sha": "e00adda5c33820bbafd817097bc95c9610ad6343", "filename": "src/test/ui/inference/auxiliary/inference_unstable_itertools.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e65594124197bd75716d372bec1d662b2ded03e7/src%2Ftest%2Fui%2Finference%2Fauxiliary%2Finference_unstable_itertools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e65594124197bd75716d372bec1d662b2ded03e7/src%2Ftest%2Fui%2Finference%2Fauxiliary%2Finference_unstable_itertools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fauxiliary%2Finference_unstable_itertools.rs?ref=e65594124197bd75716d372bec1d662b2ded03e7", "patch": "@@ -2,6 +2,10 @@ pub trait IpuItertools {\n     fn ipu_flatten(&self) -> u32 {\n         1\n     }\n+\n+    const C: i32;\n }\n \n-impl IpuItertools for char {}\n+impl IpuItertools for char {\n+    const C: i32 = 1;\n+}"}, {"sha": "86bb62b8a5f64ad3b449b02349763bb2303bfb80", "filename": "src/test/ui/inference/inference_unstable.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e65594124197bd75716d372bec1d662b2ded03e7/src%2Ftest%2Fui%2Finference%2Finference_unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e65594124197bd75716d372bec1d662b2ded03e7/src%2Ftest%2Fui%2Finference%2Finference_unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Finference_unstable.rs?ref=e65594124197bd75716d372bec1d662b2ded03e7", "patch": "@@ -14,6 +14,9 @@ use inference_unstable_itertools::IpuItertools;\n \n fn main() {\n     assert_eq!('x'.ipu_flatten(), 1);\n-    //~^ WARN a method with this name may be added to the standard library in the future\n-    //~^^ WARN once this method is added to the standard library, the ambiguity may cause an error\n+//~^ WARN an associated function with this name may be added to the standard library in the future\n+//~| WARN once this associated item is added to the standard library, the ambiguity may cause an\n+    assert_eq!(char::C, 1);\n+//~^ WARN an associated constant with this name may be added to the standard library in the future\n+//~| WARN once this associated item is added to the standard library, the ambiguity may cause an\n }"}, {"sha": "2c282e610b29c6d426e5ca5644521aa47ec97cbb", "filename": "src/test/ui/inference/inference_unstable.stderr", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e65594124197bd75716d372bec1d662b2ded03e7/src%2Ftest%2Fui%2Finference%2Finference_unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e65594124197bd75716d372bec1d662b2ded03e7/src%2Ftest%2Fui%2Finference%2Finference_unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Finference_unstable.stderr?ref=e65594124197bd75716d372bec1d662b2ded03e7", "patch": "@@ -1,14 +1,24 @@\n-warning: a method with this name may be added to the standard library in the future\n+warning: an associated function with this name may be added to the standard library in the future\n   --> $DIR/inference_unstable.rs:16:20\n    |\n LL |     assert_eq!('x'.ipu_flatten(), 1);\n    |                    ^^^^^^^^^^^\n    |\n    = note: `#[warn(unstable_name_collisions)]` on by default\n-   = warning: once this method is added to the standard library, the ambiguity may cause an error or change in behavior!\n+   = warning: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\n    = note: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\n    = help: call with fully qualified syntax `inference_unstable_itertools::IpuItertools::ipu_flatten(...)` to keep using the current method\n    = help: add `#![feature(ipu_flatten)]` to the crate attributes to enable `inference_unstable_iterator::IpuIterator::ipu_flatten`\n \n-warning: 1 warning emitted\n+warning: an associated constant with this name may be added to the standard library in the future\n+  --> $DIR/inference_unstable.rs:19:16\n+   |\n+LL |     assert_eq!(char::C, 1);\n+   |                ^^^^^^^ help: use the fully qualified path to the associated const: `<char as IpuItertools>::C`\n+   |\n+   = warning: once this associated item is added to the standard library, the ambiguity may cause an error or change in behavior!\n+   = note: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\n+   = help: add `#![feature(assoc_const_ipu_iter)]` to the crate attributes to enable `inference_unstable_iterator::IpuIterator::C`\n+\n+warning: 2 warnings emitted\n "}]}