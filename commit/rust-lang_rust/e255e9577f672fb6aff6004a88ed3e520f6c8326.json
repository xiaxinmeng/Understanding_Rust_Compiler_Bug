{"sha": "e255e9577f672fb6aff6004a88ed3e520f6c8326", "node_id": "C_kwDOAAsO6NoAKGUyNTVlOTU3N2Y2NzJmYjZhZmY2MDA0YTg4ZWQzZTUyMGY2YzgzMjY", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-10T10:21:42Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-10T10:21:42Z"}, "message": "internal: move test", "tree": {"sha": "18838b5f4befd6e4fef2c6a47f93a93bba42725a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18838b5f4befd6e4fef2c6a47f93a93bba42725a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e255e9577f672fb6aff6004a88ed3e520f6c8326", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e255e9577f672fb6aff6004a88ed3e520f6c8326", "html_url": "https://github.com/rust-lang/rust/commit/e255e9577f672fb6aff6004a88ed3e520f6c8326", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e255e9577f672fb6aff6004a88ed3e520f6c8326/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8670e83cecea6a18d3de58d83a8f82c217470c08", "url": "https://api.github.com/repos/rust-lang/rust/commits/8670e83cecea6a18d3de58d83a8f82c217470c08", "html_url": "https://github.com/rust-lang/rust/commit/8670e83cecea6a18d3de58d83a8f82c217470c08"}], "stats": {"total": 204, "additions": 140, "deletions": 64}, "files": [{"sha": "f9527a41358d6986015b9dbcdc0f1bc96c16f4db", "filename": "crates/hir_def/src/macro_expansion_tests.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e255e9577f672fb6aff6004a88ed3e520f6c8326/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e255e9577f672fb6aff6004a88ed3e520f6c8326/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs?ref=e255e9577f672fb6aff6004a88ed3e520f6c8326", "patch": "@@ -20,7 +20,7 @@ use stdx::format_to;\n use syntax::{\n     ast::{self, edit::IndentLevel},\n     AstNode,\n-    SyntaxKind::{EOF, IDENT, LIFETIME_IDENT},\n+    SyntaxKind::{COMMENT, EOF, IDENT, LIFETIME_IDENT},\n     SyntaxNode, T,\n };\n \n@@ -60,21 +60,36 @@ fn check(ra_fixture: &str, mut expect: Expect) {\n \n     let mut expanded_text = source_file.to_string();\n     for (call, exp) in expansions.into_iter().rev() {\n+        let mut tree = false;\n+        let mut expect_errors = false;\n+        for comment in call.syntax().children_with_tokens().filter(|it| it.kind() == COMMENT) {\n+            tree |= comment.to_string().contains(\"+tree\");\n+            expect_errors |= comment.to_string().contains(\"+errors\");\n+        }\n+\n         let mut expn_text = String::new();\n         if let Some(err) = exp.err {\n             format_to!(expn_text, \"/* error: {} */\", err);\n         }\n         if let Some((parse, _token_map)) = exp.value {\n-            assert!(\n-                parse.errors().is_empty(),\n-                \"parse errors in expansion: \\n{:#?}\",\n-                parse.errors()\n-            );\n+            if expect_errors {\n+                assert!(!parse.errors().is_empty(), \"no parse errors in expansion\");\n+                for e in parse.errors() {\n+                    format_to!(expn_text, \"/* parse error: {} */\\n\", e);\n+                }\n+            } else {\n+                assert!(\n+                    parse.errors().is_empty(),\n+                    \"parse errors in expansion: \\n{:#?}\",\n+                    parse.errors()\n+                );\n+            }\n             let pp = pretty_print_macro_expansion(parse.syntax_node());\n             let indent = IndentLevel::from_node(call.syntax());\n             let pp = reindent(indent, pp);\n             format_to!(expn_text, \"{}\", pp);\n-            if call.to_string().contains(\"// +tree\") {\n+\n+            if tree {\n                 let tree = format!(\"{:#?}\", parse.syntax_node())\n                     .split_inclusive(\"\\n\")\n                     .map(|line| format!(\"// {}\", line))"}, {"sha": "7600b16ded75799e5650a92925ce622607551754", "filename": "crates/hir_def/src/macro_expansion_tests/mbe.rs", "status": "modified", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/e255e9577f672fb6aff6004a88ed3e520f6c8326/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e255e9577f672fb6aff6004a88ed3e520f6c8326/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs?ref=e255e9577f672fb6aff6004a88ed3e520f6c8326", "patch": "@@ -1310,3 +1310,120 @@ fn foo() {}\n \"#]],\n     );\n }\n+\n+#[test]\n+fn test_inner_macro_rules() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($a:ident, $b:ident, $c:tt) => {\n+        macro_rules! inner {\n+            ($bi:ident) => { fn $bi() -> u8 { $c } }\n+        }\n+\n+        inner!($a);\n+        fn $b() -> u8 { $c }\n+    }\n+}\n+m!(x, y, 1);\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    ($a:ident, $b:ident, $c:tt) => {\n+        macro_rules! inner {\n+            ($bi:ident) => { fn $bi() -> u8 { $c } }\n+        }\n+\n+        inner!($a);\n+        fn $b() -> u8 { $c }\n+    }\n+}\n+macro_rules !inner {\n+    ($bi: ident) = > {\n+        fn $bi()-> u8 {\n+            1\n+        }\n+    }\n+}\n+inner!(x);\n+fn y() -> u8 {\n+    1\n+}\n+\"#]],\n+    );\n+}\n+\n+#[test]\n+fn test_expr_after_path_colons() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($k:expr) => { fn f() { K::$k; } }\n+}\n+// +tree +errors\n+m!(C(\"0\"));\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    ($k:expr) => { fn f() { K::$k; } }\n+}\n+/* parse error: expected identifier */\n+/* parse error: expected SEMICOLON */\n+fn f() {\n+    K::C(\"0\");\n+}\n+// MACRO_ITEMS@0..17\n+//   FN@0..17\n+//     FN_KW@0..2 \"fn\"\n+//     NAME@2..3\n+//       IDENT@2..3 \"f\"\n+//     PARAM_LIST@3..5\n+//       L_PAREN@3..4 \"(\"\n+//       R_PAREN@4..5 \")\"\n+//     BLOCK_EXPR@5..17\n+//       STMT_LIST@5..17\n+//         L_CURLY@5..6 \"{\"\n+//         EXPR_STMT@6..9\n+//           PATH_EXPR@6..9\n+//             PATH@6..9\n+//               PATH@6..7\n+//                 PATH_SEGMENT@6..7\n+//                   NAME_REF@6..7\n+//                     IDENT@6..7 \"K\"\n+//               COLON2@7..9 \"::\"\n+//         EXPR_STMT@9..16\n+//           CALL_EXPR@9..15\n+//             PATH_EXPR@9..10\n+//               PATH@9..10\n+//                 PATH_SEGMENT@9..10\n+//                   NAME_REF@9..10\n+//                     IDENT@9..10 \"C\"\n+//             ARG_LIST@10..15\n+//               L_PAREN@10..11 \"(\"\n+//               LITERAL@11..14\n+//                 STRING@11..14 \"\\\"0\\\"\"\n+//               R_PAREN@14..15 \")\"\n+//           SEMICOLON@15..16 \";\"\n+//         R_CURLY@16..17 \"}\"\n+\n+\"#]],\n+    );\n+}\n+\n+#[test]\n+fn test_match_is_not_greedy() {\n+    check(\n+        r#\"\n+macro_rules! foo {\n+    ($($i:ident $(,)*),*) => {};\n+}\n+foo!(a,b);\n+\"#,\n+        expect![[r#\"\n+macro_rules! foo {\n+    ($($i:ident $(,)*),*) => {};\n+}\n+\n+\"#]],\n+    );\n+}"}, {"sha": "79f0824b59463350e6d3b1494e0e46d40455c2e2", "filename": "crates/mbe/src/tests/expand.rs", "status": "modified", "additions": 1, "deletions": 57, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e255e9577f672fb6aff6004a88ed3e520f6c8326/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e255e9577f672fb6aff6004a88ed3e520f6c8326/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs?ref=e255e9577f672fb6aff6004a88ed3e520f6c8326", "patch": "@@ -1,8 +1,5 @@\n use ::parser::ParserEntryPoint;\n-use syntax::{\n-    SyntaxKind::{ERROR, IDENT},\n-    T,\n-};\n+use syntax::{SyntaxKind::IDENT, T};\n use test_utils::assert_eq_text;\n \n use super::*;\n@@ -101,59 +98,6 @@ fn test_attr_to_token_tree() {\n     );\n }\n \n-#[test]\n-fn test_inner_macro_rules() {\n-    parse_macro(\n-        r#\"\n-macro_rules! foo {\n-    ($a:ident, $b:ident, $c:tt) => {\n-\n-        macro_rules! bar {\n-            ($bi:ident) => {\n-                fn $bi() -> u8 {$c}\n-            }\n-        }\n-\n-        bar!($a);\n-        fn $b() -> u8 {$c}\n-    }\n-}\n-\"#,\n-    ).\n-    assert_expand_items(\n-        r#\"foo!(x,y, 1);\"#,\n-        r#\"macro_rules ! bar {($ bi : ident) => {fn $ bi () -> u8 {1}}} bar ! (x) ; fn y () -> u8 {1}\"#,\n-    );\n-}\n-\n-#[test]\n-fn test_expr_after_path_colons() {\n-    assert!(parse_macro(\n-        r#\"\n-macro_rules! m {\n-    ($k:expr) => {\n-            f(K::$k);\n-       }\n-}\n-\"#,\n-    )\n-    .expand_statements(r#\"m!(C(\"0\"))\"#)\n-    .descendants()\n-    .any(|token| token.kind() == ERROR));\n-}\n-\n-#[test]\n-fn test_match_is_not_greedy() {\n-    parse_macro(\n-        r#\"\n-macro_rules! foo {\n-    ($($i:ident $(,)*),*) => {};\n-}\n-\"#,\n-    )\n-    .assert_expand_items(r#\"foo!(a,b);\"#, r#\"\"#);\n-}\n-\n // The following tests are based on real world situations\n #[test]\n fn test_vec() {"}]}