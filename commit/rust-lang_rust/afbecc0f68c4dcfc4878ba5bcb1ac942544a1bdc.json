{"sha": "afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc", "node_id": "C_kwDOAAsO6NoAKGFmYmVjYzBmNjhjNGRjZmM0ODc4YmE1YmNiMWFjOTQyNTQ0YTFiZGM", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-03-15T15:56:28Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-03-30T09:23:58Z"}, "message": "remove now unnecessary lang items", "tree": {"sha": "021654b1af9b3df00263b326e1ccc86d98f11e0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/021654b1af9b3df00263b326e1ccc86d98f11e0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc", "html_url": "https://github.com/rust-lang/rust/commit/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "983c12f7f6a51c10d41c825921e962b0b74e4bca", "url": "https://api.github.com/repos/rust-lang/rust/commits/983c12f7f6a51c10d41c825921e962b0b74e4bca", "html_url": "https://github.com/rust-lang/rust/commit/983c12f7f6a51c10d41c825921e962b0b74e4bca"}], "stats": {"total": 141, "additions": 51, "deletions": 90}, "files": [{"sha": "b8df163214435324fef6ad03b188dd3af2defe7a", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc", "patch": "@@ -166,36 +166,6 @@ pub fn extract(attrs: &[ast::Attribute]) -> Option<(Symbol, Span)> {\n \n language_item_table! {\n //  Variant name,            Name,                     Method name,                Target                  Generic requirements;\n-    Bool,                    sym::bool,                bool_impl,                  Target::Impl,           GenericRequirement::None;\n-    Char,                    sym::char,                char_impl,                  Target::Impl,           GenericRequirement::None;\n-    Str,                     sym::str,                 str_impl,                   Target::Impl,           GenericRequirement::None;\n-    Array,                   sym::array,               array_impl,                 Target::Impl,           GenericRequirement::None;\n-    Slice,                   sym::slice,               slice_impl,                 Target::Impl,           GenericRequirement::None;\n-    SliceU8,                 sym::slice_u8,            slice_u8_impl,              Target::Impl,           GenericRequirement::None;\n-    StrAlloc,                sym::str_alloc,           str_alloc_impl,             Target::Impl,           GenericRequirement::None;\n-    SliceAlloc,              sym::slice_alloc,         slice_alloc_impl,           Target::Impl,           GenericRequirement::None;\n-    SliceU8Alloc,            sym::slice_u8_alloc,      slice_u8_alloc_impl,        Target::Impl,           GenericRequirement::None;\n-    ConstPtr,                sym::const_ptr,           const_ptr_impl,             Target::Impl,           GenericRequirement::None;\n-    MutPtr,                  sym::mut_ptr,             mut_ptr_impl,               Target::Impl,           GenericRequirement::None;\n-    ConstSlicePtr,           sym::const_slice_ptr,     const_slice_ptr_impl,       Target::Impl,           GenericRequirement::None;\n-    MutSlicePtr,             sym::mut_slice_ptr,       mut_slice_ptr_impl,         Target::Impl,           GenericRequirement::None;\n-    I8,                      sym::i8,                  i8_impl,                    Target::Impl,           GenericRequirement::None;\n-    I16,                     sym::i16,                 i16_impl,                   Target::Impl,           GenericRequirement::None;\n-    I32,                     sym::i32,                 i32_impl,                   Target::Impl,           GenericRequirement::None;\n-    I64,                     sym::i64,                 i64_impl,                   Target::Impl,           GenericRequirement::None;\n-    I128,                    sym::i128,                i128_impl,                  Target::Impl,           GenericRequirement::None;\n-    Isize,                   sym::isize,               isize_impl,                 Target::Impl,           GenericRequirement::None;\n-    U8,                      sym::u8,                  u8_impl,                    Target::Impl,           GenericRequirement::None;\n-    U16,                     sym::u16,                 u16_impl,                   Target::Impl,           GenericRequirement::None;\n-    U32,                     sym::u32,                 u32_impl,                   Target::Impl,           GenericRequirement::None;\n-    U64,                     sym::u64,                 u64_impl,                   Target::Impl,           GenericRequirement::None;\n-    U128,                    sym::u128,                u128_impl,                  Target::Impl,           GenericRequirement::None;\n-    Usize,                   sym::usize,               usize_impl,                 Target::Impl,           GenericRequirement::None;\n-    F32,                     sym::f32,                 f32_impl,                   Target::Impl,           GenericRequirement::None;\n-    F64,                     sym::f64,                 f64_impl,                   Target::Impl,           GenericRequirement::None;\n-    F32Runtime,              sym::f32_runtime,         f32_runtime_impl,           Target::Impl,           GenericRequirement::None;\n-    F64Runtime,              sym::f64_runtime,         f64_runtime_impl,           Target::Impl,           GenericRequirement::None;\n-\n     Sized,                   sym::sized,               sized_trait,                Target::Trait,          GenericRequirement::Exact(0);\n     Unsize,                  sym::unsize,              unsize_trait,               Target::Trait,          GenericRequirement::Minimum(1);\n     /// Trait injected by `#[derive(PartialEq)]`, (i.e. \"Partial EQ\")."}, {"sha": "84dbad846dd29c445e4283fee48feedc7333f36e", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc", "patch": "@@ -494,11 +494,9 @@ symbols! {\n         const_panic,\n         const_panic_fmt,\n         const_precise_live_drops,\n-        const_ptr,\n         const_raw_ptr_deref,\n         const_raw_ptr_to_usize_cast,\n         const_refs_to_cell,\n-        const_slice_ptr,\n         const_trait_bound_opt_out,\n         const_trait_impl,\n         const_transmute,\n@@ -655,9 +653,7 @@ symbols! {\n         f,\n         f16c_target_feature,\n         f32,\n-        f32_runtime,\n         f64,\n-        f64_runtime,\n         fabsf32,\n         fabsf64,\n         fadd_fast,\n@@ -913,8 +909,6 @@ symbols! {\n         mul_with_overflow,\n         must_not_suspend,\n         must_use,\n-        mut_ptr,\n-        mut_slice_ptr,\n         naked,\n         naked_functions,\n         name,\n@@ -1314,11 +1308,8 @@ symbols! {\n         sized,\n         skip,\n         slice,\n-        slice_alloc,\n         slice_len_fn,\n         slice_patterns,\n-        slice_u8,\n-        slice_u8_alloc,\n         slicing_syntax,\n         soft,\n         specialization,\n@@ -1348,7 +1339,6 @@ symbols! {\n         stop_after_dataflow,\n         store,\n         str,\n-        str_alloc,\n         str_split_whitespace,\n         str_trim,\n         str_trim_end,"}, {"sha": "cc4707b6b72c64d7251207689be24753484096e7", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc", "patch": "@@ -281,25 +281,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // There are methods that are defined on the primitive types and won't be\n                     // found when exploring `all_traits`, but we also need them to be acurate on\n                     // our suggestions (#47759).\n-                    let fund_assoc = |opt_def_id: Option<DefId>| {\n-                        opt_def_id.and_then(|id| self.associated_value(id, item_name)).is_some()\n+                    let found_assoc = |ty: Ty<'tcx>| {\n+                        simplify_type(tcx, ty, TreatParams::AsPlaceholders).and_then(|simp| {\n+                            tcx.incoherent_impls(simp)\n+                            .iter()\n+                            .find_map(|&id| self.associated_value(id, item_name))\n+                        }).is_some()\n                     };\n-                    let lang_items = tcx.lang_items();\n                     let found_candidate = candidates.next().is_some()\n-                        || fund_assoc(lang_items.i8_impl())\n-                        || fund_assoc(lang_items.i16_impl())\n-                        || fund_assoc(lang_items.i32_impl())\n-                        || fund_assoc(lang_items.i64_impl())\n-                        || fund_assoc(lang_items.i128_impl())\n-                        || fund_assoc(lang_items.u8_impl())\n-                        || fund_assoc(lang_items.u16_impl())\n-                        || fund_assoc(lang_items.u32_impl())\n-                        || fund_assoc(lang_items.u64_impl())\n-                        || fund_assoc(lang_items.u128_impl())\n-                        || fund_assoc(lang_items.f32_impl())\n-                        || fund_assoc(lang_items.f32_runtime_impl())\n-                        || fund_assoc(lang_items.f64_impl())\n-                        || fund_assoc(lang_items.f64_runtime_impl());\n+                        || found_assoc(tcx.types.i8)\n+                        || found_assoc(tcx.types.i16)\n+                        || found_assoc(tcx.types.i32)\n+                        || found_assoc(tcx.types.i64)\n+                        || found_assoc(tcx.types.i128)\n+                        || found_assoc(tcx.types.u8)\n+                        || found_assoc(tcx.types.u16)\n+                        || found_assoc(tcx.types.u32)\n+                        || found_assoc(tcx.types.u64)\n+                        || found_assoc(tcx.types.u128)\n+                        || found_assoc(tcx.types.f32)\n+                        || found_assoc(tcx.types.f32);\n                     if let (true, false, SelfSource::MethodCall(expr), true) = (\n                         actual.is_numeric(),\n                         actual.has_concrete_skeleton(),"}, {"sha": "c61e9d85dd100978bf2c1810f08ae0fd7bab5b7a", "filename": "library/alloc/src/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Falloc%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Falloc%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice.rs?ref=afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc", "patch": "@@ -237,7 +237,7 @@ mod hack {\n     }\n }\n \n-#[lang = \"slice_alloc\"]\n+#[cfg_attr(bootstrap, lang = \"slice_alloc\")]\n #[cfg(not(test))]\n impl<T> [T] {\n     /// Sorts the slice.\n@@ -667,7 +667,7 @@ impl<T> [T] {\n     }\n }\n \n-#[lang = \"slice_u8_alloc\"]\n+#[cfg_attr(bootstrap, lang = \"slice_u8_alloc\")]\n #[cfg(not(test))]\n impl [u8] {\n     /// Returns a vector containing a copy of this slice where each byte"}, {"sha": "a3c17612c3a0b3211c8a24521b7a1df571b85419", "filename": "library/alloc/src/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Falloc%2Fsrc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Falloc%2Fsrc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstr.rs?ref=afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc", "patch": "@@ -235,7 +235,7 @@ impl ToOwned for str {\n }\n \n /// Methods for string slices.\n-#[lang = \"str_alloc\"]\n+#[cfg_attr(bootstrap, lang = \"str_alloc\")]\n #[cfg(not(test))]\n impl str {\n     /// Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating."}, {"sha": "9e42ab5923aa084dd15b7f7f63bb88b4f78dbbad", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc", "patch": "@@ -395,7 +395,7 @@ macro_rules! array_impl_default {\n \n array_impl_default! {32, T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T}\n \n-#[lang = \"array\"]\n+#[cfg_attr(bootstrap, lang = \"array\")]\n impl<T, const N: usize> [T; N] {\n     /// Returns an array of the same size as `self`, with function `f` applied to each element\n     /// in order."}, {"sha": "06aee3ccbaf9c891be10c0ebf5bbbc47714bf39a", "filename": "library/core/src/bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Fcore%2Fsrc%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Fcore%2Fsrc%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fbool.rs?ref=afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc", "patch": "@@ -2,7 +2,7 @@\n \n use crate::marker::Destruct;\n \n-#[lang = \"bool\"]\n+#[cfg_attr(bootstrap, lang = \"bool\")]\n impl bool {\n     /// Returns `Some(t)` if the `bool` is [`true`](../std/keyword.true.html),\n     /// or `None` otherwise."}, {"sha": "7deb3358c95d56b1d1b0d19e488089c3c9432ebb", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc", "patch": "@@ -7,7 +7,7 @@ use crate::unicode::{self, conversions};\n \n use super::*;\n \n-#[lang = \"char\"]\n+#[cfg_attr(bootstrap, lang = \"char\")]\n impl char {\n     /// The highest valid code point a `char` can have, `'\\u{10FFFF}'`.\n     ///"}, {"sha": "17ca85476854620f1ea9f1facc3a5a1157e35f3c", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc", "patch": "@@ -370,7 +370,7 @@ pub mod consts {\n     pub const LN_10: f32 = 2.30258509299404568401799145468436421_f32;\n }\n \n-#[lang = \"f32\"]\n+#[cfg_attr(bootstrap, lang = \"f32\")]\n #[cfg(not(test))]\n impl f32 {\n     /// The radix or base of the internal representation of `f32`."}, {"sha": "350d8529de57ab33b4005827bbf0b36540ecb507", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc", "patch": "@@ -370,7 +370,7 @@ pub mod consts {\n     pub const LN_10: f64 = 2.30258509299404568401799145468436421_f64;\n }\n \n-#[lang = \"f64\"]\n+#[cfg_attr(bootstrap, lang = \"f64\")]\n #[cfg(not(test))]\n impl f64 {\n     /// The radix or base of the internal representation of `f64`."}, {"sha": "f4f1d274d105b203b34d274f71abfcaebf48fa9d", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc", "patch": "@@ -193,34 +193,34 @@ macro_rules! widening_impl {\n     };\n }\n \n-#[lang = \"i8\"]\n+#[cfg_attr(bootstrap, lang = \"i8\")]\n impl i8 {\n     int_impl! { i8, i8, u8, 8, 7, -128, 127, 2, \"-0x7e\", \"0xa\", \"0x12\", \"0x12\", \"0x48\",\n     \"[0x12]\", \"[0x12]\", \"\", \"\" }\n }\n \n-#[lang = \"i16\"]\n+#[cfg_attr(bootstrap, lang = \"i16\")]\n impl i16 {\n     int_impl! { i16, i16, u16, 16, 15, -32768, 32767, 4, \"-0x5ffd\", \"0x3a\", \"0x1234\", \"0x3412\",\n     \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\" }\n }\n \n-#[lang = \"i32\"]\n+#[cfg_attr(bootstrap, lang = \"i32\")]\n impl i32 {\n     int_impl! { i32, i32, u32, 32, 31, -2147483648, 2147483647, 8, \"0x10000b3\", \"0xb301\",\n     \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\",\n     \"[0x12, 0x34, 0x56, 0x78]\", \"\", \"\" }\n }\n \n-#[lang = \"i64\"]\n+#[cfg_attr(bootstrap, lang = \"i64\")]\n impl i64 {\n     int_impl! { i64, i64, u64, 64, 63, -9223372036854775808, 9223372036854775807, 12,\n     \"0xaa00000000006e1\", \"0x6e10aa\", \"0x1234567890123456\", \"0x5634129078563412\",\n     \"0x6a2c48091e6a2c48\", \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n     \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\", \"\", \"\" }\n }\n \n-#[lang = \"i128\"]\n+#[cfg_attr(bootstrap, lang = \"i128\")]\n impl i128 {\n     int_impl! { i128, i128, u128, 128, 127, -170141183460469231731687303715884105728,\n     170141183460469231731687303715884105727, 16,\n@@ -233,15 +233,15 @@ impl i128 {\n }\n \n #[cfg(target_pointer_width = \"16\")]\n-#[lang = \"isize\"]\n+#[cfg_attr(bootstrap, lang = \"isize\")]\n impl isize {\n     int_impl! { isize, i16, usize, 16, 15, -32768, 32767, 4, \"-0x5ffd\", \"0x3a\", \"0x1234\",\n     \"0x3412\", \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\",\n     usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n }\n \n #[cfg(target_pointer_width = \"32\")]\n-#[lang = \"isize\"]\n+#[cfg_attr(bootstrap, lang = \"isize\")]\n impl isize {\n     int_impl! { isize, i32, usize, 32, 31, -2147483648, 2147483647, 8, \"0x10000b3\", \"0xb301\",\n     \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\",\n@@ -250,7 +250,7 @@ impl isize {\n }\n \n #[cfg(target_pointer_width = \"64\")]\n-#[lang = \"isize\"]\n+#[cfg_attr(bootstrap, lang = \"isize\")]\n impl isize {\n     int_impl! { isize, i64, usize, 64, 63, -9223372036854775808, 9223372036854775807,\n     12, \"0xaa00000000006e1\", \"0x6e10aa\",  \"0x1234567890123456\", \"0x5634129078563412\",\n@@ -262,7 +262,7 @@ impl isize {\n /// If 6th bit set ascii is upper case.\n const ASCII_CASE_MASK: u8 = 0b0010_0000;\n \n-#[lang = \"u8\"]\n+#[cfg_attr(bootstrap, lang = \"u8\")]\n impl u8 {\n     uint_impl! { u8, u8, i8, NonZeroU8, 8, 255, 2, \"0x82\", \"0xa\", \"0x12\", \"0x12\", \"0x48\", \"[0x12]\",\n     \"[0x12]\", \"\", \"\" }\n@@ -816,7 +816,7 @@ impl u8 {\n     }\n }\n \n-#[lang = \"u16\"]\n+#[cfg_attr(bootstrap, lang = \"u16\")]\n impl u16 {\n     uint_impl! { u16, u16, i16, NonZeroU16, 16, 65535, 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n     \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\" }\n@@ -848,14 +848,14 @@ impl u16 {\n     }\n }\n \n-#[lang = \"u32\"]\n+#[cfg_attr(bootstrap, lang = \"u32\")]\n impl u32 {\n     uint_impl! { u32, u32, i32, NonZeroU32, 32, 4294967295, 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n     \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\", \"\", \"\" }\n     widening_impl! { u32, u64, 32, unsigned }\n }\n \n-#[lang = \"u64\"]\n+#[cfg_attr(bootstrap, lang = \"u64\")]\n impl u64 {\n     uint_impl! { u64, u64, i64, NonZeroU64, 64, 18446744073709551615, 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n     \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\",\n@@ -865,7 +865,7 @@ impl u64 {\n     widening_impl! { u64, u128, 64, unsigned }\n }\n \n-#[lang = \"u128\"]\n+#[cfg_attr(bootstrap, lang = \"u128\")]\n impl u128 {\n     uint_impl! { u128, u128, i128, NonZeroU128, 128, 340282366920938463463374607431768211455, 16,\n     \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\", \"0x12345678901234567890123456789012\",\n@@ -878,15 +878,15 @@ impl u128 {\n }\n \n #[cfg(target_pointer_width = \"16\")]\n-#[lang = \"usize\"]\n+#[cfg_attr(bootstrap, lang = \"usize\")]\n impl usize {\n     uint_impl! { usize, u16, isize, NonZeroUsize, 16, 65535, 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n     \"[0x34, 0x12]\", \"[0x12, 0x34]\",\n     usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n     widening_impl! { usize, u32, 16, unsigned }\n }\n #[cfg(target_pointer_width = \"32\")]\n-#[lang = \"usize\"]\n+#[cfg_attr(bootstrap, lang = \"usize\")]\n impl usize {\n     uint_impl! { usize, u32, isize, NonZeroUsize, 32, 4294967295, 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n     \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\",\n@@ -895,7 +895,7 @@ impl usize {\n }\n \n #[cfg(target_pointer_width = \"64\")]\n-#[lang = \"usize\"]\n+#[cfg_attr(bootstrap, lang = \"usize\")]\n impl usize {\n     uint_impl! { usize, u64, isize, NonZeroUsize, 64, 18446744073709551615, 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n     \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\","}, {"sha": "ab2e6058d2f75c769ea9147171c6a0e60c0ab43f", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc", "patch": "@@ -4,7 +4,7 @@ use crate::intrinsics;\n use crate::mem;\n use crate::slice::{self, SliceIndex};\n \n-#[lang = \"const_ptr\"]\n+#[cfg_attr(bootstrap, lang = \"const_ptr\")]\n impl<T: ?Sized> *const T {\n     /// Returns `true` if the pointer is null.\n     ///\n@@ -969,7 +969,7 @@ impl<T: ?Sized> *const T {\n     }\n }\n \n-#[lang = \"const_slice_ptr\"]\n+#[cfg_attr(bootstrap, lang = \"const_slice_ptr\")]\n impl<T> *const [T] {\n     /// Returns the length of a raw slice.\n     ///"}, {"sha": "6a71815c3cf7bf905cc7b5358199f08b6fa2616c", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc", "patch": "@@ -3,7 +3,7 @@ use crate::cmp::Ordering::{self, Equal, Greater, Less};\n use crate::intrinsics;\n use crate::slice::{self, SliceIndex};\n \n-#[lang = \"mut_ptr\"]\n+#[cfg_attr(bootstrap, lang = \"mut_ptr\")]\n impl<T: ?Sized> *mut T {\n     /// Returns `true` if the pointer is null.\n     ///\n@@ -1240,7 +1240,7 @@ impl<T: ?Sized> *mut T {\n     }\n }\n \n-#[lang = \"mut_slice_ptr\"]\n+#[cfg_attr(bootstrap, lang = \"mut_slice_ptr\")]\n impl<T> *mut [T] {\n     /// Returns the length of a raw slice.\n     ///"}, {"sha": "1825ccda479756598e0fda8d70a31505a3a5562d", "filename": "library/core/src/slice/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs?ref=afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc", "patch": "@@ -6,7 +6,7 @@ use crate::iter;\n use crate::mem;\n use crate::ops;\n \n-#[lang = \"slice_u8\"]\n+#[cfg_attr(bootstrap, lang = \"slice_u8\")]\n #[cfg(not(test))]\n impl [u8] {\n     /// Checks if all bytes in this slice are within the ASCII range."}, {"sha": "77bf5f9dc34e31759ae64ff75eb849229fa30a04", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc", "patch": "@@ -109,7 +109,7 @@ enum Direction {\n     Back,\n }\n \n-#[lang = \"slice\"]\n+#[cfg_attr(bootstrap, lang = \"slice\")]\n #[cfg(not(test))]\n impl<T> [T] {\n     /// Returns the number of elements in the slice."}, {"sha": "6bfa6a5e01519985c954a215599b4e1bac1e5d86", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc", "patch": "@@ -130,7 +130,7 @@ fn slice_error_fail_rt(s: &str, begin: usize, end: usize) -> ! {\n     );\n }\n \n-#[lang = \"str\"]\n+#[cfg_attr(bootstrap, lang = \"str\")]\n #[cfg(not(test))]\n impl str {\n     /// Returns the length of `self`."}, {"sha": "70b5941c7c72b915a5b3e11c7195221f9a596597", "filename": "library/std/src/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Fstd%2Fsrc%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Fstd%2Fsrc%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32.rs?ref=afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc", "patch": "@@ -28,7 +28,7 @@ pub use core::f32::{\n };\n \n #[cfg(not(test))]\n-#[lang = \"f32_runtime\"]\n+#[cfg_attr(bootstrap, lang = \"f32_runtime\")]\n impl f32 {\n     /// Returns the largest integer less than or equal to a number.\n     ///"}, {"sha": "b90d068ec10d3ddeb7617bddd5d8036418edfcc8", "filename": "library/std/src/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Fstd%2Fsrc%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc/library%2Fstd%2Fsrc%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64.rs?ref=afbecc0f68c4dcfc4878ba5bcb1ac942544a1bdc", "patch": "@@ -28,7 +28,7 @@ pub use core::f64::{\n };\n \n #[cfg(not(test))]\n-#[lang = \"f64_runtime\"]\n+#[cfg_attr(bootstrap, lang = \"f64_runtime\")]\n impl f64 {\n     /// Returns the largest integer less than or equal to a number.\n     ///"}]}