{"sha": "88c2914e56fe54f2179c37914a7d61c7fe4a2605", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4YzI5MTRlNTZmZTU0ZjIxNzljMzc5MTRhN2Q2MWM3ZmU0YTI2MDU=", "commit": {"author": {"name": "Victor Berger", "email": "victor.berger@m4x.org", "date": "2015-07-31T08:22:13Z"}, "committer": {"name": "Victor Berger", "email": "victor.berger@m4x.org", "date": "2015-07-31T17:10:14Z"}, "message": "Remove unused resolve error message.\n\nThere is not situation where `foo` would be unresolved but not `foo::*`.", "tree": {"sha": "2cbadb5fe35ceb3ac76dc07eba635b9e02182713", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cbadb5fe35ceb3ac76dc07eba635b9e02182713"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88c2914e56fe54f2179c37914a7d61c7fe4a2605", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88c2914e56fe54f2179c37914a7d61c7fe4a2605", "html_url": "https://github.com/rust-lang/rust/commit/88c2914e56fe54f2179c37914a7d61c7fe4a2605", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88c2914e56fe54f2179c37914a7d61c7fe4a2605/comments", "author": {"login": "elinorbgr", "id": 3009227, "node_id": "MDQ6VXNlcjMwMDkyMjc=", "avatar_url": "https://avatars.githubusercontent.com/u/3009227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elinorbgr", "html_url": "https://github.com/elinorbgr", "followers_url": "https://api.github.com/users/elinorbgr/followers", "following_url": "https://api.github.com/users/elinorbgr/following{/other_user}", "gists_url": "https://api.github.com/users/elinorbgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/elinorbgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elinorbgr/subscriptions", "organizations_url": "https://api.github.com/users/elinorbgr/orgs", "repos_url": "https://api.github.com/users/elinorbgr/repos", "events_url": "https://api.github.com/users/elinorbgr/events{/privacy}", "received_events_url": "https://api.github.com/users/elinorbgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "elinorbgr", "id": 3009227, "node_id": "MDQ6VXNlcjMwMDkyMjc=", "avatar_url": "https://avatars.githubusercontent.com/u/3009227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elinorbgr", "html_url": "https://github.com/elinorbgr", "followers_url": "https://api.github.com/users/elinorbgr/followers", "following_url": "https://api.github.com/users/elinorbgr/following{/other_user}", "gists_url": "https://api.github.com/users/elinorbgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/elinorbgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elinorbgr/subscriptions", "organizations_url": "https://api.github.com/users/elinorbgr/orgs", "repos_url": "https://api.github.com/users/elinorbgr/repos", "events_url": "https://api.github.com/users/elinorbgr/events{/privacy}", "received_events_url": "https://api.github.com/users/elinorbgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0919f4ad862bc3ae771fc56a8fe9905bca299fe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0919f4ad862bc3ae771fc56a8fe9905bca299fe2", "html_url": "https://github.com/rust-lang/rust/commit/0919f4ad862bc3ae771fc56a8fe9905bca299fe2"}], "stats": {"total": 23, "additions": 6, "deletions": 17}, "files": [{"sha": "f66dfa83ff9489639d62581571a0ae22ed2fcad1", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/88c2914e56fe54f2179c37914a7d61c7fe4a2605/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c2914e56fe54f2179c37914a7d61c7fe4a2605/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=88c2914e56fe54f2179c37914a7d61c7fe4a2605", "patch": "@@ -176,7 +176,7 @@ pub enum ResolutionError<'a> {\n     /// error E0431: `self` import can only appear in an import list with a non-empty prefix\n     SelfImportOnlyInImportListWithNonEmptyPrefix,\n     /// error E0432: unresolved import\n-    UnresolvedImport(Option<(&'a str, Option<&'a str>)>),\n+    UnresolvedImport(Option<(&'a str, &'a str)>),\n     /// error E0433: failed to resolve\n     FailedToResolve(&'a str),\n     /// error E0434: can't capture dynamic environment in a fn item\n@@ -359,8 +359,7 @@ fn resolve_error<'b, 'a:'b, 'tcx:'a>(resolver: &'b Resolver<'a, 'tcx>, span: syn\n         }\n         ResolutionError::UnresolvedImport(name) => {\n             let msg = match name {\n-                Some((n, Some(p))) => format!(\"unresolved import `{}`{}\", n, p),\n-                Some((n, None)) => format!(\"unresolved import (maybe you meant `{}::*`?)\", n),\n+                Some((n, p)) => format!(\"unresolved import `{}`{}\", n, p),\n                 None => \"unresolved import\".to_owned()\n             };\n             span_err!(resolver.session, span, E0432, \"{}\", msg);\n@@ -1815,19 +1814,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         let imports = module_.imports.borrow();\n         let import_count = imports.len();\n         if index != import_count {\n-            let sn = self.session\n-                         .codemap()\n-                         .span_to_snippet((*imports)[index].span)\n-                         .unwrap();\n-            if sn.contains(\"::\") {\n-                resolve_error(self,\n-                              (*imports)[index].span,\n-                              ResolutionError::UnresolvedImport(None));\n-            } else {\n-                resolve_error(self,\n-                              (*imports)[index].span,\n-                              ResolutionError::UnresolvedImport(Some((&*sn, None))));\n-            }\n+            resolve_error(self,\n+                          (*imports)[index].span,\n+                          ResolutionError::UnresolvedImport(None));\n         }\n \n         // Descend into children and anonymous children."}, {"sha": "a9ad0cf137bb901eac9ff9c5156ebe4acd6e8bfb", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c2914e56fe54f2179c37914a7d61c7fe4a2605/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c2914e56fe54f2179c37914a7d61c7fe4a2605/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=88c2914e56fe54f2179c37914a7d61c7fe4a2605", "patch": "@@ -278,7 +278,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                                                 Some((&*import_path_to_string(\n                                                         &import_directive.module_path,\n                                                         import_directive.subclass),\n-                                                      Some(&*help))))\n+                                                      &*help)))\n                                    );\n                 }\n                 ResolveResult::Indeterminate => break, // Bail out. We'll come around next time."}]}