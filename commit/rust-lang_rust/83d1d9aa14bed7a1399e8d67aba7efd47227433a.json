{"sha": "83d1d9aa14bed7a1399e8d67aba7efd47227433a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZDFkOWFhMTRiZWQ3YTEzOTllOGQ2N2FiYTdlZmQ0NzIyNzQzM2E=", "commit": {"author": {"name": "Re\u0301my Rakic", "email": "remy.rakic@gmail.com", "date": "2018-11-05T17:24:36Z"}, "committer": {"name": "Re\u0301my Rakic", "email": "remy.rakic@gmail.com", "date": "2018-11-05T17:24:36Z"}, "message": "normalize_doc_attributes: remove leading whitespace from the doc comment opener\n\nRemove possible whitespace from the `CommentStyle::opener()` so that the literal itself has control over the comment's leading spaces.\n\nThis is most useful for tools, such as bindgen, to allow for example: machine-readable comments with precise syntax rules, or idempotently round-tripping between the proc-macro API and rustfmt.", "tree": {"sha": "1af597f49d5b9d9c271f87096f822a187190056f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1af597f49d5b9d9c271f87096f822a187190056f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83d1d9aa14bed7a1399e8d67aba7efd47227433a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83d1d9aa14bed7a1399e8d67aba7efd47227433a", "html_url": "https://github.com/rust-lang/rust/commit/83d1d9aa14bed7a1399e8d67aba7efd47227433a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83d1d9aa14bed7a1399e8d67aba7efd47227433a/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a34414b4753b5570cd76de2e8f408c6266e90de", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a34414b4753b5570cd76de2e8f408c6266e90de", "html_url": "https://github.com/rust-lang/rust/commit/2a34414b4753b5570cd76de2e8f408c6266e90de"}], "stats": {"total": 80, "additions": 70, "deletions": 10}, "files": [{"sha": "d7d1876b02d72e0c85363a98aa02e7792d45d3f4", "filename": "src/attr.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83d1d9aa14bed7a1399e8d67aba7efd47227433a/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d1d9aa14bed7a1399e8d67aba7efd47227433a/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=83d1d9aa14bed7a1399e8d67aba7efd47227433a", "patch": "@@ -326,7 +326,11 @@ impl Rewrite for ast::Attribute {\n                             ast::AttrStyle::Outer => CommentStyle::TripleSlash,\n                         };\n \n-                        let doc_comment = format!(\"{}{}\", comment_style.opener(), literal);\n+                        // Remove possible whitespace from the `CommentStyle::opener()` so that\n+                        // the literal itself has control over the comment's leading spaces.\n+                        let opener = comment_style.opener().trim_end();\n+\n+                        let doc_comment = format!(\"{}{}\", opener, literal);\n                         return rewrite_doc_comment(\n                             &doc_comment,\n                             shape.comment(context.config),"}, {"sha": "1fea6e361c2b343649ce6d66f7aaf0724d925015", "filename": "tests/source/doc-attrib.rs", "status": "modified", "additions": 37, "deletions": 9, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/83d1d9aa14bed7a1399e8d67aba7efd47227433a/tests%2Fsource%2Fdoc-attrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d1d9aa14bed7a1399e8d67aba7efd47227433a/tests%2Fsource%2Fdoc-attrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fdoc-attrib.rs?ref=83d1d9aa14bed7a1399e8d67aba7efd47227433a", "patch": "@@ -2,41 +2,42 @@\n // rustfmt-normalize_doc_attributes: true\n \n // Only doc = \"\" attributes should be normalized\n-#![doc = \"Example doc attribute comment\"]\n+#![doc = \" Example doc attribute comment\"]\n+#![doc = \"          Example doc attribute comment with 10 leading spaces\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"https://play.rust-lang.org/\", test(attr(deny(warnings))))]\n \n \n // Long `#[doc = \"...\"]`\n-struct A { #[doc = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"] b: i32 }\n+struct A { #[doc = \" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"] b: i32 }\n \n \n-#[doc = \"The `nodes` and `edges` method each return instantiations of `Cow<[T]>` to leave implementers the freedom to create entirely new vectors or to pass back slices into internally owned vectors.\"]\n+#[doc = \" The `nodes` and `edges` method each return instantiations of `Cow<[T]>` to leave implementers the freedom to create entirely new vectors or to pass back slices into internally owned vectors.\"]\n struct B { b: i32 }\n \n \n-#[doc = \"Level 1 comment\"]\n+#[doc = \" Level 1 comment\"]\n mod tests {\n-    #[doc = \"Level 2 comment\"]\n+    #[doc = \" Level 2 comment\"]\n     impl A {\n-        #[doc = \"Level 3 comment\"]\n+        #[doc = \" Level 3 comment\"]\n         fn f() {\n-            #[doc = \"Level 4 comment\"]\n+            #[doc = \" Level 4 comment\"]\n             fn g() {\n             }\n         }\n     }\n }\n \n struct C {\n-    #[doc = \"item doc attrib comment\"]\n+    #[doc = \" item doc attrib comment\"]\n     // regular item comment\n     b: i32,\n \n     // regular item comment\n-    #[doc = \"item doc attrib comment\"]\n+    #[doc = \" item doc attrib comment\"]\n     c: i32,\n }\n \n@@ -89,3 +90,30 @@ pub struct Params {\n                   all(target_arch = \"wasm32\", feature = \"wasm-bindgen\"),\n               ))))]\n type Os = NoSource;\n+\n+// use cases from bindgen needing precise control over leading spaces\n+#[doc = \" <div rustbindgen accessor></div>\"]\n+#[repr(C)]\n+#[derive(Debug, Default, Copy, Clone)]\n+pub struct ContradictAccessors {\n+    #[doc = \"<foo>no leading spaces here</foo>\"]\n+    pub mBothAccessors: ::std::os::raw::c_int,\n+    #[doc = \" <div rustbindgen accessor=\\\"false\\\"></div>\"]\n+    pub mNoAccessors: ::std::os::raw::c_int,\n+    #[doc = \" <div rustbindgen accessor=\\\"unsafe\\\"></div>\"]\n+    pub mUnsafeAccessors: ::std::os::raw::c_int,\n+    #[doc = \" <div rustbindgen accessor=\\\"immutable\\\"></div>\"]\n+    pub mImmutableAccessor: ::std::os::raw::c_int,\n+}\n+\n+#[doc = \" \\\\brief          MPI structure\"]\n+#[repr(C)]\n+#[derive(Debug, Copy, Clone)]\n+pub struct mbedtls_mpi {\n+    #[doc = \"<  integer sign\"]\n+    pub s: ::std::os::raw::c_int,\n+    #[doc = \"<  total # of limbs\"]\n+    pub n: ::std::os::raw::c_ulong,\n+    #[doc = \"<  pointer to limbs\"]\n+    pub p: *mut mbedtls_mpi_uint,\n+}"}, {"sha": "e85235afd0cd49d1346f9d5bc9b945ce4c36cccb", "filename": "tests/target/doc-attrib.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/83d1d9aa14bed7a1399e8d67aba7efd47227433a/tests%2Ftarget%2Fdoc-attrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d1d9aa14bed7a1399e8d67aba7efd47227433a/tests%2Ftarget%2Fdoc-attrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fdoc-attrib.rs?ref=83d1d9aa14bed7a1399e8d67aba7efd47227433a", "patch": "@@ -3,6 +3,7 @@\n \n // Only doc = \"\" attributes should be normalized\n //! Example doc attribute comment\n+//!          Example doc attribute comment with 10 leading spaces\n #![doc(\n     html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n     html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n@@ -103,3 +104,30 @@ mod issue_2620 {\n     )\n )))]\n type Os = NoSource;\n+\n+// use cases from bindgen needing precise control over leading spaces\n+/// <div rustbindgen accessor></div>\n+#[repr(C)]\n+#[derive(Debug, Default, Copy, Clone)]\n+pub struct ContradictAccessors {\n+    ///<foo>no leading spaces here</foo>\n+    pub mBothAccessors: ::std::os::raw::c_int,\n+    /// <div rustbindgen accessor=\"false\"></div>\n+    pub mNoAccessors: ::std::os::raw::c_int,\n+    /// <div rustbindgen accessor=\"unsafe\"></div>\n+    pub mUnsafeAccessors: ::std::os::raw::c_int,\n+    /// <div rustbindgen accessor=\"immutable\"></div>\n+    pub mImmutableAccessor: ::std::os::raw::c_int,\n+}\n+\n+/// \\brief          MPI structure\n+#[repr(C)]\n+#[derive(Debug, Copy, Clone)]\n+pub struct mbedtls_mpi {\n+    ///<  integer sign\n+    pub s: ::std::os::raw::c_int,\n+    ///<  total # of limbs\n+    pub n: ::std::os::raw::c_ulong,\n+    ///<  pointer to limbs\n+    pub p: *mut mbedtls_mpi_uint,\n+}"}]}