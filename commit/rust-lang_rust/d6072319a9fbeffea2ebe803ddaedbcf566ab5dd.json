{"sha": "d6072319a9fbeffea2ebe803ddaedbcf566ab5dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MDcyMzE5YTlmYmVmZmVhMmViZTgwM2RkYWVkYmNmNTY2YWI1ZGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-13T16:10:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-13T16:10:20Z"}, "message": "Auto merge of #69155 - chrissimpkins:llvm-globals, r=eddyb\n\nAdd support for LLVM globals corresponding to miri allocations should be named alloc123\n\nAdds support for this request from @eddyb in #69134:\n\n> That is, if -Zfewer-names is false (usually only because of --emit=llvm-ir), we should use the same name for LLVM globals we generate out of miri allocs as #67133 does in MIR output (allocN).\n>\n>This way, we can easily see the mapping between MIR and LLVM IR (and it shouldn't be any costlier for regular compilation, which would continue to use unnamed globals).\n\nr? @eddyb\ncc @oli-obk", "tree": {"sha": "06038cab8de17d002d67d7be037bc1486042b21e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06038cab8de17d002d67d7be037bc1486042b21e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6072319a9fbeffea2ebe803ddaedbcf566ab5dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6072319a9fbeffea2ebe803ddaedbcf566ab5dd", "html_url": "https://github.com/rust-lang/rust/commit/d6072319a9fbeffea2ebe803ddaedbcf566ab5dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6072319a9fbeffea2ebe803ddaedbcf566ab5dd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54b7d21f59a363e53eb1c31d76b40af2ff99321c", "url": "https://api.github.com/repos/rust-lang/rust/commits/54b7d21f59a363e53eb1c31d76b40af2ff99321c", "html_url": "https://github.com/rust-lang/rust/commit/54b7d21f59a363e53eb1c31d76b40af2ff99321c"}, {"sha": "cf929f77bffc9786fa7c15e75be7599cfc551225", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf929f77bffc9786fa7c15e75be7599cfc551225", "html_url": "https://github.com/rust-lang/rust/commit/cf929f77bffc9786fa7c15e75be7599cfc551225"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "7a33444b352f1240872e98de91420f6d9c483712", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d6072319a9fbeffea2ebe803ddaedbcf566ab5dd/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6072319a9fbeffea2ebe803ddaedbcf566ab5dd/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=d6072319a9fbeffea2ebe803ddaedbcf566ab5dd", "patch": "@@ -259,11 +259,14 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                 let base_addr = match alloc_kind {\n                     Some(GlobalAlloc::Memory(alloc)) => {\n                         let init = const_alloc_to_llvm(self, alloc);\n-                        if alloc.mutability == Mutability::Mut {\n-                            self.static_addr_of_mut(init, alloc.align, None)\n-                        } else {\n-                            self.static_addr_of(init, alloc.align, None)\n+                        let value = match alloc.mutability {\n+                            Mutability::Mut => self.static_addr_of_mut(init, alloc.align, None),\n+                            _ => self.static_addr_of(init, alloc.align, None),\n+                        };\n+                        if !self.sess().fewer_names() {\n+                            llvm::set_value_name(value, format!(\"{:?}\", ptr.alloc_id).as_bytes());\n                         }\n+                        value\n                     }\n                     Some(GlobalAlloc::Function(fn_instance)) => self.get_fn_addr(fn_instance),\n                     Some(GlobalAlloc::Static(def_id)) => {"}, {"sha": "e53e75b339beff8795602ec99269d0e427ff57b9", "filename": "src/test/codegen/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6072319a9fbeffea2ebe803ddaedbcf566ab5dd/src%2Ftest%2Fcodegen%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6072319a9fbeffea2ebe803ddaedbcf566ab5dd/src%2Ftest%2Fcodegen%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fconsts.rs?ref=d6072319a9fbeffea2ebe803ddaedbcf566ab5dd", "patch": "@@ -10,11 +10,11 @@\n // CHECK: @STATIC = {{.*}}, align 4\n \n // This checks the constants from inline_enum_const\n-// CHECK: @{{[0-9]+}} = {{.*}}, align 2\n+// CHECK: @alloc5 = {{.*}}, align 2\n \n // This checks the constants from {low,high}_align_const, they share the same\n // constant, but the alignment differs, so the higher one should be used\n-// CHECK: [[LOW_HIGH:@[0-9]+]] = {{.*}} getelementptr inbounds (<{ [8 x i8] }>, <{ [8 x i8] }>* @2, i32 0, i32 0, i32 0), {{.*}},\n+// CHECK: [[LOW_HIGH:@[0-9]+]] = {{.*}} getelementptr inbounds (<{ [8 x i8] }>, <{ [8 x i8] }>* @alloc15, i32 0, i32 0, i32 0), {{.*}}\n \n #[derive(Copy, Clone)]\n // repr(i16) is required for the {low,high}_align_const test"}, {"sha": "4724dc3c3e59331f3748f4a2ac94def7823eebd8", "filename": "src/test/codegen/remap_path_prefix/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6072319a9fbeffea2ebe803ddaedbcf566ab5dd/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6072319a9fbeffea2ebe803ddaedbcf566ab5dd/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs?ref=d6072319a9fbeffea2ebe803ddaedbcf566ab5dd", "patch": "@@ -12,7 +12,7 @@ mod aux_mod;\n include!(\"aux_mod.rs\");\n \n // Here we check that the expansion of the file!() macro is mapped.\n-// CHECK: @0 = private unnamed_addr constant <{ [34 x i8] }> <{ [34 x i8] c\"/the/src/remap_path_prefix/main.rs\" }>, align 1\n+// CHECK: @alloc1 = private unnamed_addr constant <{ [34 x i8] }> <{ [34 x i8] c\"/the/src/remap_path_prefix/main.rs\" }>, align 1\n pub static FILE_PATH: &'static str = file!();\n \n fn main() {"}]}