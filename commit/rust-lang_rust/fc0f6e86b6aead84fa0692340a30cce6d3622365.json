{"sha": "fc0f6e86b6aead84fa0692340a30cce6d3622365", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMGY2ZTg2YjZhZWFkODRmYTA2OTIzNDBhMzBjY2U2ZDM2MjIzNjU=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-02-18T13:43:43Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-02-18T13:45:35Z"}, "message": "Audit  `core::intrinsics` for `int`/`uint`: `size_of`/`align_of` use `usize`.\n\nLikewise, `fn offset` takes an `isize`.", "tree": {"sha": "ad66b78e05fa2068941d9e4dfd1ad56fecc16406", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad66b78e05fa2068941d9e4dfd1ad56fecc16406"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc0f6e86b6aead84fa0692340a30cce6d3622365", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc0f6e86b6aead84fa0692340a30cce6d3622365", "html_url": "https://github.com/rust-lang/rust/commit/fc0f6e86b6aead84fa0692340a30cce6d3622365", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc0f6e86b6aead84fa0692340a30cce6d3622365/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e240cb919b58975a0b647a613841da8819b672cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e240cb919b58975a0b647a613841da8819b672cf", "html_url": "https://github.com/rust-lang/rust/commit/e240cb919b58975a0b647a613841da8819b672cf"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "b2ee95963878edb13af4a4b99c9cf529377b13f4", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fc0f6e86b6aead84fa0692340a30cce6d3622365/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc0f6e86b6aead84fa0692340a30cce6d3622365/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=fc0f6e86b6aead84fa0692340a30cce6d3622365", "patch": "@@ -50,10 +50,10 @@ pub type GlueFn = extern \"Rust\" fn(*const i8);\n #[derive(Copy)]\n pub struct TyDesc {\n     // sizeof(T)\n-    pub size: uint,\n+    pub size: usize,\n \n     // alignof(T)\n-    pub align: uint,\n+    pub align: usize,\n \n     // Called when a value of type `T` is no longer needed\n     pub drop_glue: GlueFn,\n@@ -186,15 +186,15 @@ extern \"rust-intrinsic\" {\n     /// would *exactly* overwrite a value. When laid out in vectors\n     /// and structures there may be additional padding between\n     /// elements.\n-    pub fn size_of<T>() -> uint;\n+    pub fn size_of<T>() -> usize;\n \n     /// Move a value to an uninitialized memory location.\n     ///\n     /// Drop glue is not run on the destination.\n     pub fn move_val_init<T>(dst: &mut T, src: T);\n \n-    pub fn min_align_of<T>() -> uint;\n-    pub fn pref_align_of<T>() -> uint;\n+    pub fn min_align_of<T>() -> usize;\n+    pub fn pref_align_of<T>() -> usize;\n \n     /// Get a static pointer to a type descriptor.\n     pub fn get_tydesc<T: ?Sized>() -> *const TyDesc;\n@@ -253,7 +253,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// This is implemented as an intrinsic to avoid converting to and from an\n     /// integer, since the conversion would throw away aliasing information.\n-    pub fn offset<T>(dst: *const T, offset: int) -> *const T;\n+    pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n \n     /// Copies `count * size_of<T>` bytes from `src` to `dst`. The source\n     /// and destination may *not* overlap.\n@@ -294,7 +294,7 @@ extern \"rust-intrinsic\" {\n     /// }\n     /// ```\n     #[unstable(feature = \"core\")]\n-    pub fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: uint);\n+    pub fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: usize);\n \n     /// Copies `count * size_of<T>` bytes from `src` to `dst`. The source\n     /// and destination may overlap.\n@@ -324,33 +324,33 @@ extern \"rust-intrinsic\" {\n     /// ```\n     ///\n     #[unstable(feature = \"core\")]\n-    pub fn copy_memory<T>(dst: *mut T, src: *const T, count: uint);\n+    pub fn copy_memory<T>(dst: *mut T, src: *const T, count: usize);\n \n     /// Invokes memset on the specified pointer, setting `count * size_of::<T>()`\n     /// bytes of memory starting at `dst` to `c`.\n     #[unstable(feature = \"core\",\n                reason = \"uncertain about naming and semantics\")]\n-    pub fn set_memory<T>(dst: *mut T, val: u8, count: uint);\n+    pub fn set_memory<T>(dst: *mut T, val: u8, count: usize);\n \n     /// Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\n     /// a size of `count` * `size_of::<T>()` and an alignment of\n     /// `min_align_of::<T>()`\n     ///\n     /// The volatile parameter parameter is set to `true`, so it will not be optimized out.\n     pub fn volatile_copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T,\n-                                                  count: uint);\n+                                                  count: usize);\n     /// Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\n     /// a size of `count` * `size_of::<T>()` and an alignment of\n     /// `min_align_of::<T>()`\n     ///\n     /// The volatile parameter parameter is set to `true`, so it will not be optimized out.\n-    pub fn volatile_copy_memory<T>(dst: *mut T, src: *const T, count: uint);\n+    pub fn volatile_copy_memory<T>(dst: *mut T, src: *const T, count: usize);\n     /// Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\n     /// size of `count` * `size_of::<T>()` and an alignment of\n     /// `min_align_of::<T>()`.\n     ///\n     /// The volatile parameter parameter is set to `true`, so it will not be optimized out.\n-    pub fn volatile_set_memory<T>(dst: *mut T, val: u8, count: uint);\n+    pub fn volatile_set_memory<T>(dst: *mut T, val: u8, count: usize);\n \n     /// Perform a volatile load from the `src` pointer.\n     pub fn volatile_load<T>(src: *const T) -> T;"}]}