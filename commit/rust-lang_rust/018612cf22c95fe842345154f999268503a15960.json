{"sha": "018612cf22c95fe842345154f999268503a15960", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxODYxMmNmMjJjOTVmZTg0MjM0NTE1NGY5OTkyNjg1MDNhMTU5NjA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-08T07:49:42Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-08T07:49:42Z"}, "message": "Implement overflowing_* and *_with_overflowing", "tree": {"sha": "48e4602c5efe42f740fa411581a51cde8cd80075", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48e4602c5efe42f740fa411581a51cde8cd80075"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/018612cf22c95fe842345154f999268503a15960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/018612cf22c95fe842345154f999268503a15960", "html_url": "https://github.com/rust-lang/rust/commit/018612cf22c95fe842345154f999268503a15960", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/018612cf22c95fe842345154f999268503a15960/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f73b8fb4ce472d423260e43741becd6c331d044", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f73b8fb4ce472d423260e43741becd6c331d044", "html_url": "https://github.com/rust-lang/rust/commit/0f73b8fb4ce472d423260e43741becd6c331d044"}], "stats": {"total": 63, "additions": 62, "deletions": 1}, "files": [{"sha": "85c6ff1e0123bdd92724abaea49bfdddca3deb61", "filename": "src/abi.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/018612cf22c95fe842345154f999268503a15960/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018612cf22c95fe842345154f999268503a15960/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=018612cf22c95fe842345154f999268503a15960", "patch": "@@ -411,6 +411,66 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n                     };\n                     ret.write_cvalue(fx, res);\n                 }\n+                _ if intrinsic.ends_with(\"_with_overflow\") => {\n+                    assert_eq!(args.len(), 2);\n+                    assert_eq!(args[0].layout().ty, args[1].layout().ty);\n+                    let bin_op = match intrinsic {\n+                        \"add_with_overflow\" => BinOp::Add,\n+                        \"sub_with_overflow\" => BinOp::Sub,\n+                        \"mul_with_overflow\" => BinOp::Mul,\n+                        _ => unimplemented!(\"intrinsic {}\", intrinsic),\n+                    };\n+                    let res = match args[0].layout().ty.sty {\n+                        TypeVariants::TyUint(_) => crate::base::trans_checked_int_binop(\n+                            fx,\n+                            bin_op,\n+                            args[0],\n+                            args[1],\n+                            ret.layout().ty,\n+                            false,\n+                        ),\n+                        TypeVariants::TyInt(_) => crate::base::trans_checked_int_binop(\n+                            fx,\n+                            bin_op,\n+                            args[0],\n+                            args[1],\n+                            ret.layout().ty,\n+                            true,\n+                        ),\n+                        _ => panic!(),\n+                    };\n+                    ret.write_cvalue(fx, res);\n+                }\n+                _ if intrinsic.starts_with(\"overflowing_\") => {\n+                    assert_eq!(args.len(), 2);\n+                    assert_eq!(args[0].layout().ty, args[1].layout().ty);\n+                    let bin_op = match intrinsic {\n+                        \"overflowing_add\" => BinOp::Add,\n+                        \"overflowing_sub\" => BinOp::Sub,\n+                        \"overflowing_mul\" => BinOp::Mul,\n+                        _ => unimplemented!(\"intrinsic {}\", intrinsic),\n+                    };\n+                    let res = match args[0].layout().ty.sty {\n+                        TypeVariants::TyUint(_) => crate::base::trans_int_binop(\n+                            fx,\n+                            bin_op,\n+                            args[0],\n+                            args[1],\n+                            ret.layout().ty,\n+                            false,\n+                        ),\n+                        TypeVariants::TyInt(_) => crate::base::trans_int_binop(\n+                            fx,\n+                            bin_op,\n+                            args[0],\n+                            args[1],\n+                            ret.layout().ty,\n+                            true,\n+                        ),\n+                        _ => panic!(),\n+                    };\n+                    ret.write_cvalue(fx, res);\n+                }\n                 \"offset\" => {\n                     assert_eq!(args.len(), 2);\n                     let base = args[0].load_value(fx);"}, {"sha": "c61e5e39c6ed972228f2cd58387417f9cc83388f", "filename": "src/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/018612cf22c95fe842345154f999268503a15960/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018612cf22c95fe842345154f999268503a15960/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=018612cf22c95fe842345154f999268503a15960", "patch": "@@ -621,7 +621,7 @@ pub fn trans_int_binop<'a, 'tcx: 'a>(\n     }\n }\n \n-fn trans_checked_int_binop<'a, 'tcx: 'a>(\n+pub fn trans_checked_int_binop<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx>,\n     bin_op: BinOp,\n     lhs: CValue<'tcx>,\n@@ -661,6 +661,7 @@ fn trans_checked_int_binop<'a, 'tcx: 'a>(\n         Offset (_) bug;\n     };\n \n+    // TODO: check for overflow\n     let has_overflow = CValue::const_val(fx, fx.tcx.types.bool, 0);\n \n     let out_place = CPlace::temp(fx, out_ty);"}]}