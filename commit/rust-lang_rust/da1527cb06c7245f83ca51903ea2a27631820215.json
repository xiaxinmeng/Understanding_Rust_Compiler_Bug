{"sha": "da1527cb06c7245f83ca51903ea2a27631820215", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMTUyN2NiMDZjNzI0NWY4M2NhNTE5MDNlYTJhMjc2MzE4MjAyMTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-10T21:42:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-10T21:42:20Z"}, "message": "Auto merge of #56688 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #56491 (emit error with span for empty asserts)\n - #56633 (Fix right arrow size for crate filter)\n - #56641 (fix span for invalid number of parameters in trait method)\n - #56656 (Fix typo)\n - #56661 (Add regression test for ICE)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "70ec3fd00841fe2fa1ea298bd5f399ca5a98f602", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70ec3fd00841fe2fa1ea298bd5f399ca5a98f602"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da1527cb06c7245f83ca51903ea2a27631820215", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da1527cb06c7245f83ca51903ea2a27631820215", "html_url": "https://github.com/rust-lang/rust/commit/da1527cb06c7245f83ca51903ea2a27631820215", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da1527cb06c7245f83ca51903ea2a27631820215/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1137d29d5e551e377579c5a601fe7c444057d00c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1137d29d5e551e377579c5a601fe7c444057d00c", "html_url": "https://github.com/rust-lang/rust/commit/1137d29d5e551e377579c5a601fe7c444057d00c"}, {"sha": "a11de4171c1712a0c42d05207f4f01fb49c40d0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a11de4171c1712a0c42d05207f4f01fb49c40d0d", "html_url": "https://github.com/rust-lang/rust/commit/a11de4171c1712a0c42d05207f4f01fb49c40d0d"}], "stats": {"total": 143, "additions": 130, "deletions": 13}, "files": [{"sha": "4652c0e7efa706ef397ee419c3ae18b2c94a9a8e", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da1527cb06c7245f83ca51903ea2a27631820215/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da1527cb06c7245f83ca51903ea2a27631820215/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=da1527cb06c7245f83ca51903ea2a27631820215", "patch": "@@ -2169,7 +2169,7 @@ impl<T: fmt::Display + ?Sized> ToString for T {\n         use core::fmt::Write;\n         let mut buf = String::new();\n         buf.write_fmt(format_args!(\"{}\", self))\n-           .expect(\"a Display implementation return an error unexpectedly\");\n+           .expect(\"a Display implementation returned an error unexpectedly\");\n         buf.shrink_to_fit();\n         buf\n     }"}, {"sha": "984f1ca65ce44106a1766e5a466f155d73bfd48a", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/da1527cb06c7245f83ca51903ea2a27631820215/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da1527cb06c7245f83ca51903ea2a27631820215/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=da1527cb06c7245f83ca51903ea2a27631820215", "patch": "@@ -648,12 +648,19 @@ fn compare_number_of_method_arguments<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let trait_span = if let Some(trait_id) = trait_m_node_id {\n             match tcx.hir().expect_trait_item(trait_id).node {\n                 TraitItemKind::Method(ref trait_m_sig, _) => {\n-                    if let Some(arg) = trait_m_sig.decl.inputs.get(if trait_number_args > 0 {\n+                    let pos = if trait_number_args > 0 {\n                         trait_number_args - 1\n                     } else {\n                         0\n-                    }) {\n-                        Some(arg.span)\n+                    };\n+                    if let Some(arg) = trait_m_sig.decl.inputs.get(pos) {\n+                        Some(if pos == 0 {\n+                            arg.span\n+                        } else {\n+                            Span::new(trait_m_sig.decl.inputs[0].span.lo(),\n+                                      arg.span.hi(),\n+                                      arg.span.ctxt())\n+                        })\n                     } else {\n                         trait_item_span\n                     }\n@@ -666,12 +673,19 @@ fn compare_number_of_method_arguments<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let impl_m_node_id = tcx.hir().as_local_node_id(impl_m.def_id).unwrap();\n         let impl_span = match tcx.hir().expect_impl_item(impl_m_node_id).node {\n             ImplItemKind::Method(ref impl_m_sig, _) => {\n-                if let Some(arg) = impl_m_sig.decl.inputs.get(if impl_number_args > 0 {\n+                let pos = if impl_number_args > 0 {\n                     impl_number_args - 1\n                 } else {\n                     0\n-                }) {\n-                    arg.span\n+                };\n+                if let Some(arg) = impl_m_sig.decl.inputs.get(pos) {\n+                    if pos == 0 {\n+                        arg.span\n+                    } else {\n+                        Span::new(impl_m_sig.decl.inputs[0].span.lo(),\n+                                  arg.span.hi(),\n+                                  arg.span.ctxt())\n+                    }\n                 } else {\n                     impl_m_span\n                 }"}, {"sha": "cd5a8a739d16dfac78d3288c9dccb18f28e15bf9", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da1527cb06c7245f83ca51903ea2a27631820215/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/da1527cb06c7245f83ca51903ea2a27631820215/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=da1527cb06c7245f83ca51903ea2a27631820215", "patch": "@@ -641,7 +641,7 @@ a {\n \ttext-overflow: \"\";\n \tbackground-repeat: no-repeat;\n \tbackground-color: transparent;\n-\tbackground-size: 16%;\n+\tbackground-size: 20px;\n \tbackground-position: calc(100% - 1px) 56%;\n }\n .search-container > .top-button {"}, {"sha": "a2384b59048d54c7033ebf84667e2bd76139872a", "filename": "src/libsyntax_ext/assert.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da1527cb06c7245f83ca51903ea2a27631820215/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da1527cb06c7245f83ca51903ea2a27631820215/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=da1527cb06c7245f83ca51903ea2a27631820215", "patch": "@@ -24,6 +24,14 @@ pub fn expand_assert<'cx>(\n     tts: &[TokenTree],\n ) -> Box<dyn MacResult + 'cx> {\n     let mut parser = cx.new_parser_from_tts(tts);\n+\n+    if parser.token == token::Eof {\n+        cx.struct_span_err(sp, \"macro requires a boolean expression as an argument\")\n+            .span_label(sp, \"boolean expression required\")\n+            .emit();\n+        return DummyResult::expr(sp);\n+    }\n+\n     let cond_expr = panictry!(parser.parse_expr());\n     let custom_msg_args = if parser.eat(&token::Comma) {\n         let ts = parser.parse_tokens();"}, {"sha": "6c797e0073144b419b7af4b8855e54a84f1f4cc8", "filename": "src/test/ui/error-codes/E0050.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da1527cb06c7245f83ca51903ea2a27631820215/src%2Ftest%2Fui%2Ferror-codes%2FE0050.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da1527cb06c7245f83ca51903ea2a27631820215/src%2Ftest%2Fui%2Ferror-codes%2FE0050.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0050.stderr?ref=da1527cb06c7245f83ca51903ea2a27631820215", "patch": "@@ -2,7 +2,7 @@ error[E0050]: method `foo` has 1 parameter but the declaration in trait `Foo::fo\n   --> $DIR/E0050.rs:20:12\n    |\n LL |     fn foo(&self, x: u8) -> bool;\n-   |                      -- trait requires 2 parameters\n+   |            ------------ trait requires 2 parameters\n ...\n LL |     fn foo(&self) -> bool { true } //~ ERROR E0050\n    |            ^^^^^ expected 2 parameters, found 1\n@@ -11,19 +11,19 @@ error[E0050]: method `bar` has 1 parameter but the declaration in trait `Foo::ba\n   --> $DIR/E0050.rs:21:12\n    |\n LL |     fn bar(&self, x: u8, y: u8, z: u8);\n-   |                                    -- trait requires 4 parameters\n+   |            -------------------------- trait requires 4 parameters\n ...\n LL |     fn bar(&self) { } //~ ERROR E0050\n    |            ^^^^^ expected 4 parameters, found 1\n \n error[E0050]: method `less` has 4 parameters but the declaration in trait `Foo::less` has 1\n-  --> $DIR/E0050.rs:22:37\n+  --> $DIR/E0050.rs:22:13\n    |\n LL |     fn less(&self);\n    |             ----- trait requires 1 parameter\n ...\n LL |     fn less(&self, x: u8, y: u8, z: u8) { } //~ ERROR E0050\n-   |                                     ^^ expected 1 parameter, found 4\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 parameter, found 4\n \n error: aborting due to 3 previous errors\n "}, {"sha": "bd766752360a15faa69912f6a1493f7f2ff502f4", "filename": "src/test/ui/issue-55846.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/da1527cb06c7245f83ca51903ea2a27631820215/src%2Ftest%2Fui%2Fissue-55846.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da1527cb06c7245f83ca51903ea2a27631820215/src%2Ftest%2Fui%2Fissue-55846.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-55846.rs?ref=da1527cb06c7245f83ca51903ea2a27631820215", "patch": "@@ -0,0 +1,39 @@\n+// run-pass\n+\n+// Regression test for #55846, which once caused an ICE.\n+\n+use std::marker::PhantomData;\n+\n+struct Foo;\n+\n+struct Bar<A> {\n+    a: PhantomData<A>,\n+}\n+\n+impl Fooifier for Foo {\n+    type Assoc = Foo;\n+}\n+\n+trait Fooifier {\n+    type Assoc;\n+}\n+\n+trait Barifier<H> {\n+    fn barify();\n+}\n+\n+impl<H> Barifier<H> for Bar<H> {\n+    fn barify() {\n+        println!(\"All correct!\");\n+    }\n+}\n+\n+impl Bar<<Foo as Fooifier>::Assoc> {\n+    fn this_shouldnt_crash() {\n+        <Self as Barifier<<Foo as Fooifier>::Assoc>>::barify();\n+    }\n+}\n+\n+fn main() {\n+    Bar::<Foo>::this_shouldnt_crash();\n+}"}, {"sha": "8732cb58d74a68b5ca364669701f804b74a42adf", "filename": "src/test/ui/macros/assert.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da1527cb06c7245f83ca51903ea2a27631820215/src%2Ftest%2Fui%2Fmacros%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da1527cb06c7245f83ca51903ea2a27631820215/src%2Ftest%2Fui%2Fmacros%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert.rs?ref=da1527cb06c7245f83ca51903ea2a27631820215", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    assert!();  //~ ERROR requires a boolean expression\n+    debug_assert!(); //~ ERROR requires a boolean expression\n+}"}, {"sha": "89faba0cf63dd26bead3b79b6932bcbb37200f31", "filename": "src/test/ui/macros/assert.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/da1527cb06c7245f83ca51903ea2a27631820215/src%2Ftest%2Fui%2Fmacros%2Fassert.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da1527cb06c7245f83ca51903ea2a27631820215/src%2Ftest%2Fui%2Fmacros%2Fassert.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert.stderr?ref=da1527cb06c7245f83ca51903ea2a27631820215", "patch": "@@ -0,0 +1,16 @@\n+error: macro requires a boolean expression as an argument\n+  --> $DIR/assert.rs:2:5\n+   |\n+LL |     assert!();  //~ ERROR requires a boolean expression\n+   |     ^^^^^^^^^^ boolean expression required\n+\n+error: macro requires a boolean expression as an argument\n+  --> $DIR/assert.rs:3:5\n+   |\n+LL |     debug_assert!(); //~ ERROR requires a boolean expression\n+   |     ^^^^^^^^^^^^^^^^ boolean expression required\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "c2591e4bda6befa22fd8d2b5a3d2c47a76cac7bb", "filename": "src/test/ui/trait-method-number-parameters.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/da1527cb06c7245f83ca51903ea2a27631820215/src%2Ftest%2Fui%2Ftrait-method-number-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da1527cb06c7245f83ca51903ea2a27631820215/src%2Ftest%2Fui%2Ftrait-method-number-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-method-number-parameters.rs?ref=da1527cb06c7245f83ca51903ea2a27631820215", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+    fn foo(&mut self, x: i32, y: i32) -> i32;\n+}\n+\n+impl Foo for i32 {\n+    fn foo(\n+        &mut self, //~ ERROR\n+        x: i32,\n+    ) {\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "98a08d2474d8fc146308b765024f506f47037ee4", "filename": "src/test/ui/trait-method-number-parameters.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/da1527cb06c7245f83ca51903ea2a27631820215/src%2Ftest%2Fui%2Ftrait-method-number-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da1527cb06c7245f83ca51903ea2a27631820215/src%2Ftest%2Fui%2Ftrait-method-number-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-method-number-parameters.stderr?ref=da1527cb06c7245f83ca51903ea2a27631820215", "patch": "@@ -0,0 +1,13 @@\n+error[E0050]: method `foo` has 2 parameters but the declaration in trait `Foo::foo` has 3\n+  --> $DIR/trait-method-number-parameters.rs:17:9\n+   |\n+LL |       fn foo(&mut self, x: i32, y: i32) -> i32;\n+   |              ------------------------- trait requires 3 parameters\n+...\n+LL | /         &mut self, //~ ERROR\n+LL | |         x: i32,\n+   | |______________^ expected 3 parameters, found 2\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0050`."}, {"sha": "18024449d81eed0d8a5f943e73cf1698e5a3558b", "filename": "src/test/ui/traits/trait-impl-different-num-params.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da1527cb06c7245f83ca51903ea2a27631820215/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-different-num-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da1527cb06c7245f83ca51903ea2a27631820215/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-different-num-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-different-num-params.stderr?ref=da1527cb06c7245f83ca51903ea2a27631820215", "patch": "@@ -2,7 +2,7 @@ error[E0050]: method `bar` has 1 parameter but the declaration in trait `foo::ba\n   --> $DIR/trait-impl-different-num-params.rs:15:12\n    |\n LL |     fn bar(&self, x: usize) -> Self;\n-   |                      ----- trait requires 2 parameters\n+   |            --------------- trait requires 2 parameters\n ...\n LL |     fn bar(&self) -> isize {\n    |            ^^^^^ expected 2 parameters, found 1"}]}