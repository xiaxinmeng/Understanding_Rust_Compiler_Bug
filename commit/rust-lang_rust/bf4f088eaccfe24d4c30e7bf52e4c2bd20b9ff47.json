{"sha": "bf4f088eaccfe24d4c30e7bf52e4c2bd20b9ff47", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNGYwODhlYWNjZmUyNGQ0YzMwZTdiZjUyZTRjMmJkMjBiOWZmNDc=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-04-22T20:05:39Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-04-22T20:05:39Z"}, "message": "Added missing assert, did some formating", "tree": {"sha": "c6fbebdd2e60e7f8ce43036a5be1752c078377bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6fbebdd2e60e7f8ce43036a5be1752c078377bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf4f088eaccfe24d4c30e7bf52e4c2bd20b9ff47", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf4f088eaccfe24d4c30e7bf52e4c2bd20b9ff47", "html_url": "https://github.com/rust-lang/rust/commit/bf4f088eaccfe24d4c30e7bf52e4c2bd20b9ff47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf4f088eaccfe24d4c30e7bf52e4c2bd20b9ff47/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "582a05fc95c8adf6ecf6318ea09ed6cd5bbe5b33", "url": "https://api.github.com/repos/rust-lang/rust/commits/582a05fc95c8adf6ecf6318ea09ed6cd5bbe5b33", "html_url": "https://github.com/rust-lang/rust/commit/582a05fc95c8adf6ecf6318ea09ed6cd5bbe5b33"}], "stats": {"total": 13, "additions": 1, "deletions": 12}, "files": [{"sha": "339274ab47e4fc02dd4cc05da3bad2c399f0cd80", "filename": "src/libcore/str/ascii.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bf4f088eaccfe24d4c30e7bf52e4c2bd20b9ff47/src%2Flibcore%2Fstr%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf4f088eaccfe24d4c30e7bf52e4c2bd20b9ff47/src%2Flibcore%2Fstr%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fascii.rs?ref=bf4f088eaccfe24d4c30e7bf52e4c2bd20b9ff47", "patch": "@@ -74,7 +74,6 @@ impl<'self> AsciiCast<&'self[Ascii]> for &'self [u8] {\n     #[inline(always)]\n     fn to_ascii(&self) -> &'self[Ascii] {\n         assert!(self.is_ascii());\n-\n         unsafe{ cast::transmute(*self) }\n     }\n \n@@ -91,7 +90,6 @@ impl<'self> AsciiCast<&'self[Ascii]> for &'self str {\n     #[inline(always)]\n     fn to_ascii(&self) -> &'self[Ascii] {\n         assert!(self.is_ascii());\n-\n         let (p,len): (*u8, uint) = unsafe{ cast::transmute(*self) };\n         unsafe{ cast::transmute((p, len - 1))}\n     }\n@@ -119,7 +117,6 @@ impl AsciiCast<Ascii> for u8 {\n }\n \n impl AsciiCast<Ascii> for char {\n-\n     #[inline(always)]\n     fn to_ascii(&self) -> Ascii {\n         assert!(self.is_ascii());\n@@ -142,14 +139,14 @@ impl OwnedAsciiCast for ~[u8] {\n     #[inline(always)]\n     fn to_ascii_consume(self) -> ~[Ascii] {\n         assert!(self.is_ascii());\n-\n         unsafe {cast::transmute(self)}\n     }\n }\n \n impl OwnedAsciiCast for ~str {\n     #[inline(always)]\n     fn to_ascii_consume(self) -> ~[Ascii] {\n+        assert!(self.is_ascii());\n         let mut s = self;\n         unsafe {\n             str::raw::pop_byte(&mut s);\n@@ -269,11 +266,3 @@ mod tests {\n     #[test] #[should_fail]\n     fn test_ascii_fail_char_slice() { '\u03bb'.to_ascii(); }\n }\n-\n-\n-\n-\n-\n-\n-\n-"}]}