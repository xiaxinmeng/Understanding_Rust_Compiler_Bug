{"sha": "4fb57e0796cc61bec9d6a8a0392bbfe5855d693e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYjU3ZTA3OTZjYzYxYmVjOWQ2YThhMDM5MmJiZmU1ODU1ZDY5M2U=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-11-24T19:21:43Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-12-10T00:33:32Z"}, "message": "one-time diagnostic and suggestion for re\u00ebxporting private variant error\n\nWe issue just one message for an erroneous glob private variant re\u00ebxport\n(using the Session's one-time-diagnostics capability), but individual\n(non-glob) such erroneous re\u00ebxports still get their own messages. The\nsuggestion to make the enum public is also one-time.\n\nThe enum variant re\u00ebxport error didn't have an associated error code\n(and remedying this here is deemed out of the scope of this commit), so\nwe resort to the expediency of using 0 as the `DiagnosticMessageId`\nvalue.\n\nAdding Debug to NameResolution was helpful in development.\n\nThis resolves #46209.", "tree": {"sha": "c9f7685d30c078cd620a01107ab3157e98be82a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9f7685d30c078cd620a01107ab3157e98be82a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fb57e0796cc61bec9d6a8a0392bbfe5855d693e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fb57e0796cc61bec9d6a8a0392bbfe5855d693e", "html_url": "https://github.com/rust-lang/rust/commit/4fb57e0796cc61bec9d6a8a0392bbfe5855d693e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fb57e0796cc61bec9d6a8a0392bbfe5855d693e/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "883f5e5e657e714650d34cfb271abd8015210d08", "url": "https://api.github.com/repos/rust-lang/rust/commits/883f5e5e657e714650d34cfb271abd8015210d08", "html_url": "https://github.com/rust-lang/rust/commit/883f5e5e657e714650d34cfb271abd8015210d08"}], "stats": {"total": 119, "additions": 109, "deletions": 10}, "files": [{"sha": "d4a08d643ab6768dbd7a77df2594993777e9b305", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 54, "deletions": 6, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/4fb57e0796cc61bec9d6a8a0392bbfe5855d693e/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb57e0796cc61bec9d6a8a0392bbfe5855d693e/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=4fb57e0796cc61bec9d6a8a0392bbfe5855d693e", "patch": "@@ -21,6 +21,7 @@ use rustc::ty;\n use rustc::lint::builtin::PUB_USE_OF_PRIVATE_EXTERN_CRATE;\n use rustc::hir::def_id::DefId;\n use rustc::hir::def::*;\n+use rustc::session::DiagnosticMessageId;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n \n use syntax::ast::{Ident, Name, SpannedIdent, NodeId};\n@@ -72,7 +73,7 @@ impl<'a> ImportDirective<'a> {\n     }\n }\n \n-#[derive(Clone, Default)]\n+#[derive(Clone, Default, Debug)]\n /// Records information about the resolution of a name in a namespace of a module.\n pub struct NameResolution<'a> {\n     /// The single imports that define the name in the namespace.\n@@ -867,12 +868,59 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             }\n \n             match binding.kind {\n-                NameBindingKind::Import { binding: orig_binding, .. } => {\n+                NameBindingKind::Import { binding: orig_binding, directive, .. } => {\n                     if ns == TypeNS && orig_binding.is_variant() &&\n-                       !orig_binding.vis.is_at_least(binding.vis, &*self) {\n-                        let msg = format!(\"variant `{}` is private, and cannot be reexported, \\\n-                                           consider declaring its enum as `pub`\", ident);\n-                        self.session.span_err(binding.span, &msg);\n+                        !orig_binding.vis.is_at_least(binding.vis, &*self) {\n+                            let msg = match directive.subclass {\n+                                ImportDirectiveSubclass::SingleImport { .. } => {\n+                                    format!(\"variant `{}` is private and cannot be reexported\",\n+                                            ident)\n+                                },\n+                                ImportDirectiveSubclass::GlobImport { .. } => {\n+                                    let msg = \"enum is private and its variants \\\n+                                               cannot be reexported\".to_owned();\n+                                    let error_id = (DiagnosticMessageId::ErrorId(0), // no code?!\n+                                                    Some(binding.span),\n+                                                    msg.clone());\n+                                    let fresh = self.session.one_time_diagnostics\n+                                        .borrow_mut().insert(error_id);\n+                                    if !fresh {\n+                                        continue;\n+                                    }\n+                                    msg\n+                                },\n+                                ref s @ _ => bug!(\"unexpected import subclass {:?}\", s)\n+                            };\n+                            let mut err = self.session.struct_span_err(binding.span, &msg);\n+\n+                            let imported_module = directive.imported_module.get()\n+                                .expect(\"module should exist\");\n+                            let resolutions = imported_module.parent.expect(\"parent should exist\")\n+                                .resolutions.borrow();\n+                            let enum_path_segment_index = directive.module_path.len() - 1;\n+                            let enum_ident = directive.module_path[enum_path_segment_index].node;\n+\n+                            let enum_resolution = resolutions.get(&(enum_ident, TypeNS))\n+                                .expect(\"resolution should exist\");\n+                            let enum_span = enum_resolution.borrow()\n+                                .binding.expect(\"binding should exist\")\n+                                .span;\n+                            let enum_def_span = self.session.codemap().def_span(enum_span);\n+                            let enum_def_snippet = self.session.codemap()\n+                                .span_to_snippet(enum_def_span).expect(\"snippet should exist\");\n+                            // potentially need to strip extant `crate`/`pub(path)` for suggestion\n+                            let after_vis_index = enum_def_snippet.find(\"enum\")\n+                                .expect(\"`enum` keyword should exist in snippet\");\n+                            let suggestion = format!(\"pub {}\",\n+                                                     &enum_def_snippet[after_vis_index..]);\n+\n+                            self.session\n+                                .diag_span_suggestion_once(&mut err,\n+                                                           DiagnosticMessageId::ErrorId(0),\n+                                                           enum_def_span,\n+                                                           \"consider making the enum public\",\n+                                                           suggestion);\n+                            err.emit();\n                     }\n                 }\n                 NameBindingKind::Ambiguity { b1, b2, .. }"}, {"sha": "5b23e5e815053467be7ce0150b11917460e587a0", "filename": "src/test/compile-fail/issue-46209-private-enum-variant-reexport.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4fb57e0796cc61bec9d6a8a0392bbfe5855d693e/src%2Ftest%2Fcompile-fail%2Fissue-46209-private-enum-variant-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb57e0796cc61bec9d6a8a0392bbfe5855d693e/src%2Ftest%2Fcompile-fail%2Fissue-46209-private-enum-variant-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-46209-private-enum-variant-reexport.rs?ref=4fb57e0796cc61bec9d6a8a0392bbfe5855d693e", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(crate_visibility_modifier)]\n+\n+mod rank {\n+    pub use self::Professor::*;\n+    //~^ ERROR enum is private and its variants cannot be reexported\n+    pub use self::Lieutenant::{JuniorGrade, Full};\n+    //~^ ERROR variant `JuniorGrade` is private and cannot be reexported\n+    //~| ERROR variant `Full` is private and cannot be reexported\n+    pub use self::PettyOfficer::*;\n+    //~^ ERROR enum is private and its variants cannot be reexported\n+    pub use self::Crewman::*;\n+    //~^ ERROR enum is private and its variants cannot be reexported\n+\n+    enum Professor {\n+        Adjunct,\n+        Assistant,\n+        Associate,\n+        Full\n+    }\n+\n+    enum Lieutenant {\n+        JuniorGrade,\n+        Full,\n+    }\n+\n+    pub(in rank) enum PettyOfficer {\n+        SecondClass,\n+        FirstClass,\n+        Chief,\n+        MasterChief\n+    }\n+\n+    crate enum Crewman {\n+        Recruit,\n+        Apprentice,\n+        Full\n+    }\n+\n+}\n+\n+fn main() {}"}, {"sha": "1280aba3076abbb3654f79619cbeadff461c64a2", "filename": "src/test/compile-fail/private-variant-reexport.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fb57e0796cc61bec9d6a8a0392bbfe5855d693e/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb57e0796cc61bec9d6a8a0392bbfe5855d693e/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs?ref=4fb57e0796cc61bec9d6a8a0392bbfe5855d693e", "patch": "@@ -9,19 +9,19 @@\n // except according to those terms.\n \n mod m1 {\n-    pub use ::E::V; //~ ERROR variant `V` is private, and cannot be reexported\n+    pub use ::E::V; //~ ERROR variant `V` is private and cannot be reexported\n }\n \n mod m2 {\n-    pub use ::E::{V}; //~ ERROR variant `V` is private, and cannot be reexported\n+    pub use ::E::{V}; //~ ERROR variant `V` is private and cannot be reexported\n }\n \n mod m3 {\n-    pub use ::E::V::{self}; //~ ERROR variant `V` is private, and cannot be reexported\n+    pub use ::E::V::{self}; //~ ERROR variant `V` is private and cannot be reexported\n }\n \n mod m4 {\n-    pub use ::E::*; //~ ERROR variant `V` is private, and cannot be reexported\n+    pub use ::E::*; //~ ERROR enum is private and its variants cannot be reexported\n }\n \n enum E { V }"}]}