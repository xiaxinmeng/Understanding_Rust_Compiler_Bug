{"sha": "279f1c9d8c26a8d227ae8ab806d262bb784b251b", "node_id": "C_kwDOAAsO6NoAKDI3OWYxYzlkOGMyNmE4ZDIyN2FlOGFiODA2ZDI2MmJiNzg0YjI1MWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-13T05:04:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-13T05:04:48Z"}, "message": "Auto merge of #106004 - fee1-dead-contrib:const-closures, r=oli-obk\n\nConst closures\n\ncc https://github.com/rust-lang/rust/issues/106003", "tree": {"sha": "5df99150626d3bf61de660e12ab81cbc70bc009c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5df99150626d3bf61de660e12ab81cbc70bc009c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/279f1c9d8c26a8d227ae8ab806d262bb784b251b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/279f1c9d8c26a8d227ae8ab806d262bb784b251b", "html_url": "https://github.com/rust-lang/rust/commit/279f1c9d8c26a8d227ae8ab806d262bb784b251b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/279f1c9d8c26a8d227ae8ab806d262bb784b251b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfffe406fbcabb37b95779f2d252c4a277191e0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfffe406fbcabb37b95779f2d252c4a277191e0d", "html_url": "https://github.com/rust-lang/rust/commit/bfffe406fbcabb37b95779f2d252c4a277191e0d"}, {"sha": "42a50bac319c0fc4fedf295fb1e606f015c48bb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/42a50bac319c0fc4fedf295fb1e606f015c48bb6", "html_url": "https://github.com/rust-lang/rust/commit/42a50bac319c0fc4fedf295fb1e606f015c48bb6"}], "stats": {"total": 297, "additions": 249, "deletions": 48}, "files": [{"sha": "7de594719ddc44568872ea3ee2516da728a96ada", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -1307,6 +1307,7 @@ impl Expr {\n pub struct Closure {\n     pub binder: ClosureBinder,\n     pub capture_clause: CaptureBy,\n+    pub constness: Const,\n     pub asyncness: Async,\n     pub movability: Movability,\n     pub fn_decl: P<FnDecl>,"}, {"sha": "77f342d1eb322efe2a35deb211006e6408a243b5", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -1362,6 +1362,7 @@ pub fn noop_visit_expr<T: MutVisitor>(\n         ExprKind::Closure(box Closure {\n             binder,\n             capture_clause: _,\n+            constness,\n             asyncness,\n             movability: _,\n             fn_decl,\n@@ -1370,6 +1371,7 @@ pub fn noop_visit_expr<T: MutVisitor>(\n             fn_arg_span: _,\n         }) => {\n             vis.visit_closure_binder(binder);\n+            visit_constness(constness, vis);\n             vis.visit_asyncness(asyncness);\n             vis.visit_fn_decl(fn_decl);\n             vis.visit_expr(body);"}, {"sha": "e8823eff83afe1bab63061dd862a7ed40af53575", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -836,6 +836,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n             binder,\n             capture_clause: _,\n             asyncness: _,\n+            constness: _,\n             movability: _,\n             fn_decl,\n             body,"}, {"sha": "c3611b2f522babd789e589285b1e6359e1f11b18", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -209,6 +209,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ExprKind::Closure(box Closure {\n                     binder,\n                     capture_clause,\n+                    constness,\n                     asyncness,\n                     movability,\n                     fn_decl,\n@@ -233,6 +234,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             binder,\n                             *capture_clause,\n                             e.id,\n+                            *constness,\n                             *movability,\n                             fn_decl,\n                             body,\n@@ -651,6 +653,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 fn_decl_span: self.lower_span(span),\n                 fn_arg_span: None,\n                 movability: Some(hir::Movability::Static),\n+                constness: hir::Constness::NotConst,\n             });\n \n             hir::ExprKind::Closure(c)\n@@ -890,6 +893,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         binder: &ClosureBinder,\n         capture_clause: CaptureBy,\n         closure_id: NodeId,\n+        constness: Const,\n         movability: Movability,\n         decl: &FnDecl,\n         body: &Expr,\n@@ -927,6 +931,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             fn_decl_span: self.lower_span(fn_decl_span),\n             fn_arg_span: Some(self.lower_span(fn_arg_span)),\n             movability: generator_option,\n+            constness: self.lower_constness(constness),\n         });\n \n         hir::ExprKind::Closure(c)\n@@ -1041,6 +1046,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             fn_decl_span: self.lower_span(fn_decl_span),\n             fn_arg_span: Some(self.lower_span(fn_arg_span)),\n             movability: None,\n+            constness: hir::Constness::NotConst,\n         });\n         hir::ExprKind::Closure(c)\n     }"}, {"sha": "065779d0670c687b86454b1e90fea8a30f237f2c", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -1239,7 +1239,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         }\n     }\n \n-    fn lower_constness(&mut self, c: Const) -> hir::Constness {\n+    pub(super) fn lower_constness(&mut self, c: Const) -> hir::Constness {\n         match c {\n             Const::Yes(_) => hir::Constness::Const,\n             Const::No => hir::Constness::NotConst,"}, {"sha": "89ba6f936d14448b32d201026259d1e999fec6b7", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -385,6 +385,14 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::ExprKind::TryBlock(_) => {\n                 gate_feature_post!(&self, try_blocks, e.span, \"`try` expression is experimental\");\n             }\n+            ast::ExprKind::Closure(box ast::Closure { constness: ast::Const::Yes(_), .. }) => {\n+                gate_feature_post!(\n+                    &self,\n+                    const_closures,\n+                    e.span,\n+                    \"const closures are experimental\"\n+                );\n+            }\n             _ => {}\n         }\n         visit::walk_expr(self, e)"}, {"sha": "b125c6407d05040bb2ed2868332fc90415b1a5bf", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -399,6 +399,7 @@ impl<'a> State<'a> {\n             ast::ExprKind::Closure(box ast::Closure {\n                 binder,\n                 capture_clause,\n+                constness,\n                 asyncness,\n                 movability,\n                 fn_decl,\n@@ -407,6 +408,7 @@ impl<'a> State<'a> {\n                 fn_arg_span: _,\n             }) => {\n                 self.print_closure_binder(binder);\n+                self.print_constness(*constness);\n                 self.print_movability(*movability);\n                 self.print_asyncness(*asyncness);\n                 self.print_capture_clause(*capture_clause);"}, {"sha": "351c701305adc022b1c24dcf59ecf2e4ff2c8764", "filename": "compiler/rustc_const_eval/src/const_eval/fn_queries.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -41,6 +41,7 @@ fn constness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::Constness {\n             };\n             if is_const { hir::Constness::Const } else { hir::Constness::NotConst }\n         }\n+        hir::Node::Expr(e) if let hir::ExprKind::Closure(c) = e.kind => c.constness,\n         _ => {\n             if let Some(fn_kind) = node.fn_kind() {\n                 if fn_kind.constness() == hir::Constness::Const {"}, {"sha": "46e7b09a55e109c61f24eabb844437a13dcd1d1d", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -20,6 +20,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(trusted_step)]\n #![feature(try_blocks)]\n #![feature(yeet_expr)]\n+#![feature(if_let_guard)]\n #![feature(is_some_and)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "d4c75cd55ce1e4fe89170c96bffe7fcc8b7d88b8", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -242,7 +242,7 @@ impl<'mir, 'tcx> Checker<'mir, 'tcx> {\n             // impl trait is gone in MIR, so check the return type of a const fn by its signature\n             // instead of the type of the return place.\n             self.span = body.local_decls[RETURN_PLACE].source_info.span;\n-            let return_ty = tcx.fn_sig(def_id).output();\n+            let return_ty = self.ccx.fn_sig().output();\n             self.check_local_or_return_ty(return_ty.skip_binder(), RETURN_PLACE);\n         }\n \n@@ -730,6 +730,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                             substs,\n                             span: *fn_span,\n                             from_hir_call: *from_hir_call,\n+                            feature: Some(sym::const_trait_impl),\n                         });\n                         return;\n                     }\n@@ -782,6 +783,20 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                             );\n                             return;\n                         }\n+                        Ok(Some(ImplSource::Closure(data))) => {\n+                            if !tcx.is_const_fn_raw(data.closure_def_id) {\n+                                self.check_op(ops::FnCallNonConst {\n+                                    caller,\n+                                    callee,\n+                                    substs,\n+                                    span: *fn_span,\n+                                    from_hir_call: *from_hir_call,\n+                                    feature: None,\n+                                });\n+\n+                                return;\n+                            }\n+                        }\n                         Ok(Some(ImplSource::UserDefined(data))) => {\n                             let callee_name = tcx.item_name(callee);\n                             if let Some(&did) = tcx\n@@ -802,6 +817,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                                     substs,\n                                     span: *fn_span,\n                                     from_hir_call: *from_hir_call,\n+                                    feature: None,\n                                 });\n                                 return;\n                             }\n@@ -844,6 +860,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                                     substs,\n                                     span: *fn_span,\n                                     from_hir_call: *from_hir_call,\n+                                    feature: None,\n                                 });\n                                 return;\n                             }\n@@ -903,6 +920,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                             substs,\n                             span: *fn_span,\n                             from_hir_call: *from_hir_call,\n+                            feature: None,\n                         });\n                         return;\n                     }"}, {"sha": "54868e418c4b3f5bb5ff91c1851778598450a135", "filename": "compiler/rustc_const_eval/src/transform/check_consts/mod.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -8,7 +8,7 @@ use rustc_attr as attr;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::mir;\n-use rustc_middle::ty::{self, TyCtxt};\n+use rustc_middle::ty::{self, PolyFnSig, TyCtxt};\n use rustc_span::Symbol;\n \n pub use self::qualifs::Qualif;\n@@ -64,6 +64,17 @@ impl<'mir, 'tcx> ConstCx<'mir, 'tcx> {\n     fn is_async(&self) -> bool {\n         self.tcx.asyncness(self.def_id()).is_async()\n     }\n+\n+    pub fn fn_sig(&self) -> PolyFnSig<'tcx> {\n+        let did = self.def_id().to_def_id();\n+        if self.tcx.is_closure(did) {\n+            let ty = self.tcx.type_of(did);\n+            let ty::Closure(_, substs) = ty.kind() else { bug!(\"type_of closure not ty::Closure\") };\n+            substs.as_closure().sig()\n+        } else {\n+            self.tcx.fn_sig(did)\n+        }\n+    }\n }\n \n pub fn rustc_allow_const_fn_unstable("}, {"sha": "0cb5d2ff8c7193f21db958018b5732df9a26957c", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -111,6 +111,7 @@ pub struct FnCallNonConst<'tcx> {\n     pub substs: SubstsRef<'tcx>,\n     pub span: Span,\n     pub from_hir_call: bool,\n+    pub feature: Option<Symbol>,\n }\n \n impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n@@ -119,7 +120,7 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n         ccx: &ConstCx<'_, 'tcx>,\n         _: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        let FnCallNonConst { caller, callee, substs, span, from_hir_call } = *self;\n+        let FnCallNonConst { caller, callee, substs, span, from_hir_call, feature } = *self;\n         let ConstCx { tcx, param_env, .. } = *ccx;\n \n         let diag_trait = |err, self_ty: Ty<'_>, trait_id| {\n@@ -318,6 +319,13 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n             ccx.const_kind(),\n         ));\n \n+        if let Some(feature) = feature && ccx.tcx.sess.is_nightly_build() {\n+            err.help(&format!(\n+                \"add `#![feature({})]` to the crate attributes to enable\",\n+                feature,\n+            ));\n+        }\n+\n         if let ConstContext::Static(_) = ccx.const_kind() {\n             err.note(\"consider wrapping this expression in `Lazy::new(|| ...)` from the `once_cell` crate: https://crates.io/crates/once_cell\");\n         }"}, {"sha": "9b16e79d49a9e951042e6978f33e92d712195430", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -533,6 +533,7 @@ impl<'a> ExtCtxt<'a> {\n             ast::ExprKind::Closure(Box::new(ast::Closure {\n                 binder: ast::ClosureBinder::NotPresent,\n                 capture_clause: ast::CaptureBy::Ref,\n+                constness: ast::Const::No,\n                 asyncness: ast::Async::No,\n                 movability: ast::Movability::Movable,\n                 fn_decl,"}, {"sha": "196c31302a0d2a91d9c59aa153cb7e3d78ea2b5f", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -339,7 +339,9 @@ declare_features! (\n     (active, collapse_debuginfo, \"1.65.0\", Some(100758), None),\n     /// Allows `async {}` expressions in const contexts.\n     (active, const_async_blocks, \"1.53.0\", Some(85368), None),\n-    // Allows limiting the evaluation steps of const expressions\n+    /// Allows `const || {}` closures in const contexts.\n+    (incomplete, const_closures, \"CURRENT_RUSTC_VERSION\", Some(106003), None),\n+    /// Allows limiting the evaluation steps of const expressions\n     (active, const_eval_limit, \"1.43.0\", Some(67217), None),\n     /// Allows the definition of `const extern fn` and `const unsafe extern fn`.\n     (active, const_extern_fn, \"1.40.0\", Some(64926), None),"}, {"sha": "60f5b79de1033d13eb4fcfb56ba78324709eaddd", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -938,6 +938,7 @@ pub struct Crate<'hir> {\n pub struct Closure<'hir> {\n     pub def_id: LocalDefId,\n     pub binder: ClosureBinder,\n+    pub constness: Constness,\n     pub capture_clause: CaptureBy,\n     pub bound_generic_params: &'hir [GenericParam<'hir>],\n     pub fn_decl: &'hir FnDecl<'hir>,"}, {"sha": "02641b7cf8fb5e037599f4d46e4c63eb3dcb9d29", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -742,6 +742,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n             fn_decl_span: _,\n             fn_arg_span: _,\n             movability: _,\n+            constness: _,\n         }) => {\n             walk_list!(visitor, visit_generic_param, bound_generic_params);\n             visitor.visit_fn(FnKind::Closure, fn_decl, body, expression.span, expression.hir_id)"}, {"sha": "f74c551a45b66ef7778555b5e301a359dac2c049", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -1464,6 +1464,7 @@ impl<'a> State<'a> {\n             }\n             hir::ExprKind::Closure(&hir::Closure {\n                 binder,\n+                constness,\n                 capture_clause,\n                 bound_generic_params,\n                 fn_decl,\n@@ -1474,6 +1475,7 @@ impl<'a> State<'a> {\n                 def_id: _,\n             }) => {\n                 self.print_closure_binder(binder, bound_generic_params);\n+                self.print_constness(constness);\n                 self.print_capture_clause(capture_clause);\n \n                 self.print_closure_params(fn_decl, body);\n@@ -2272,10 +2274,7 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_fn_header_info(&mut self, header: hir::FnHeader) {\n-        match header.constness {\n-            hir::Constness::NotConst => {}\n-            hir::Constness::Const => self.word_nbsp(\"const\"),\n-        }\n+        self.print_constness(header.constness);\n \n         match header.asyncness {\n             hir::IsAsync::NotAsync => {}\n@@ -2292,6 +2291,13 @@ impl<'a> State<'a> {\n         self.word(\"fn\")\n     }\n \n+    pub fn print_constness(&mut self, s: hir::Constness) {\n+        match s {\n+            hir::Constness::NotConst => {}\n+            hir::Constness::Const => self.word_nbsp(\"const\"),\n+        }\n+    }\n+\n     pub fn print_unsafety(&mut self, s: hir::Unsafety) {\n         match s {\n             hir::Unsafety::Normal => {}"}, {"sha": "030328d1e26ff1f6b64feb983aba60d89a25eb50", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -1686,6 +1686,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             }\n \n             ty::Closure(_, substs) => {\n+                let constness = self.tcx.constness(def_id.to_def_id());\n+                self.tables.constness.set(def_id.to_def_id().index, constness);\n                 record!(self.tables.fn_sig[def_id.to_def_id()] <- substs.as_closure().sig());\n             }\n "}, {"sha": "48bae7a2d4e1ff2a6a5ebdb36f082657fbe44718", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -485,7 +485,9 @@ impl<'hir> Map<'hir> {\n             BodyOwnerKind::Static(mt) => ConstContext::Static(mt),\n \n             BodyOwnerKind::Fn if self.tcx.is_constructor(def_id.to_def_id()) => return None,\n-            BodyOwnerKind::Fn if self.tcx.is_const_fn_raw(def_id.to_def_id()) => {\n+            BodyOwnerKind::Fn | BodyOwnerKind::Closure\n+                if self.tcx.is_const_fn_raw(def_id.to_def_id()) =>\n+            {\n                 ConstContext::ConstFn\n             }\n             BodyOwnerKind::Fn if self.tcx.is_const_default_method(def_id.to_def_id()) => {"}, {"sha": "1cc9fd526b44f3133445f3bb781c333f7f01f5d0", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -131,7 +131,9 @@ pub enum SelectionCandidate<'tcx> {\n \n     /// Implementation of a `Fn`-family trait by one of the anonymous types\n     /// generated for an `||` expression.\n-    ClosureCandidate,\n+    ClosureCandidate {\n+        is_const: bool,\n+    },\n \n     /// Implementation of a `Generator` trait by one of the anonymous types\n     /// generated for a generator."}, {"sha": "993e95b351484a7d31cb40dfc13a1d7414175633", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -2465,8 +2465,10 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn is_const_fn_raw(self, def_id: DefId) -> bool {\n-        matches!(self.def_kind(def_id), DefKind::Fn | DefKind::AssocFn | DefKind::Ctor(..))\n-            && self.constness(def_id) == hir::Constness::Const\n+        matches!(\n+            self.def_kind(def_id),\n+            DefKind::Fn | DefKind::AssocFn | DefKind::Ctor(..) | DefKind::Closure\n+        ) && self.constness(def_id) == hir::Constness::Const\n     }\n \n     #[inline]"}, {"sha": "dd2b03988c3e8089536b1412b2cbba1e50203a3b", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -1325,7 +1325,10 @@ impl<'a> Parser<'a> {\n             self.parse_array_or_repeat_expr(Delimiter::Bracket)\n         } else if self.check_path() {\n             self.parse_path_start_expr()\n-        } else if self.check_keyword(kw::Move) || self.check_keyword(kw::Static) {\n+        } else if self.check_keyword(kw::Move)\n+            || self.check_keyword(kw::Static)\n+            || self.check_const_closure()\n+        {\n             self.parse_closure_expr()\n         } else if self.eat_keyword(kw::If) {\n             self.parse_if_expr()\n@@ -2065,6 +2068,8 @@ impl<'a> Parser<'a> {\n             ClosureBinder::NotPresent\n         };\n \n+        let constness = self.parse_constness(Case::Sensitive);\n+\n         let movability =\n             if self.eat_keyword(kw::Static) { Movability::Static } else { Movability::Movable };\n \n@@ -2111,6 +2116,7 @@ impl<'a> Parser<'a> {\n             ExprKind::Closure(Box::new(ast::Closure {\n                 binder,\n                 capture_clause,\n+                constness,\n                 asyncness,\n                 movability,\n                 fn_decl,"}, {"sha": "2fd2a4e5154f3a98e0bd014881158a45191a7d7d", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -736,6 +736,16 @@ impl<'a> Parser<'a> {\n         self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)\n     }\n \n+    fn check_const_closure(&self) -> bool {\n+        self.is_keyword_ahead(0, &[kw::Const])\n+            && self.look_ahead(1, |t| match &t.kind {\n+                token::Ident(kw::Move | kw::Static | kw::Async, _)\n+                | token::OrOr\n+                | token::BinOp(token::Or) => true,\n+                _ => false,\n+            })\n+    }\n+\n     fn check_inline_const(&self, dist: usize) -> bool {\n         self.is_keyword_ahead(dist, &[kw::Const])\n             && self.look_ahead(dist + 1, |t| match &t.kind {"}, {"sha": "706002f79b1fb98163ff6e2abe678f0fdabe443c", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -498,6 +498,7 @@ symbols! {\n         console,\n         const_allocate,\n         const_async_blocks,\n+        const_closures,\n         const_compare_raw_pointers,\n         const_constructor,\n         const_deallocate,"}, {"sha": "8c291d1595d960a1c5bcc473127ac6044c022e41", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -255,18 +255,19 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // touch bound regions, they just capture the in-scope\n         // type/region parameters\n         match *obligation.self_ty().skip_binder().kind() {\n-            ty::Closure(_, closure_substs) => {\n+            ty::Closure(def_id, closure_substs) => {\n+                let is_const = self.tcx().is_const_fn_raw(def_id);\n                 debug!(?kind, ?obligation, \"assemble_unboxed_candidates\");\n                 match self.infcx.closure_kind(closure_substs) {\n                     Some(closure_kind) => {\n                         debug!(?closure_kind, \"assemble_unboxed_candidates\");\n                         if closure_kind.extends(kind) {\n-                            candidates.vec.push(ClosureCandidate);\n+                            candidates.vec.push(ClosureCandidate { is_const });\n                         }\n                     }\n                     None => {\n                         debug!(\"assemble_unboxed_candidates: closure_kind not yet known\");\n-                        candidates.vec.push(ClosureCandidate);\n+                        candidates.vec.push(ClosureCandidate { is_const });\n                     }\n                 }\n             }"}, {"sha": "a41d10f104358ea57f8f6e4cb641e38455b63ad7", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -84,7 +84,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ImplSource::Object(data)\n             }\n \n-            ClosureCandidate => {\n+            ClosureCandidate { .. } => {\n                 let vtable_closure = self.confirm_closure_candidate(obligation)?;\n                 ImplSource::Closure(vtable_closure)\n             }"}, {"sha": "305902af7c8290469f4660d519398536c64e5cfe", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -1365,15 +1365,18 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     // const param\n                     ParamCandidate(trait_pred) if trait_pred.is_const_if_const() => {}\n                     // const projection\n-                    ProjectionCandidate(_, ty::BoundConstness::ConstIfConst) => {}\n+                    ProjectionCandidate(_, ty::BoundConstness::ConstIfConst)\n                     // auto trait impl\n-                    AutoImplCandidate => {}\n+                    | AutoImplCandidate\n                     // generator / future, this will raise error in other places\n                     // or ignore error with const_async_blocks feature\n-                    GeneratorCandidate => {}\n-                    FutureCandidate => {}\n+                    | GeneratorCandidate\n+                    | FutureCandidate\n                     // FnDef where the function is const\n-                    FnPointerCandidate { is_const: true } => {}\n+                    | FnPointerCandidate { is_const: true }\n+                    | ConstDestructCandidate(_)\n+                    | ClosureCandidate { is_const: true } => {}\n+\n                     FnPointerCandidate { is_const: false } => {\n                         if let ty::FnDef(def_id, _) = obligation.self_ty().skip_binder().kind() && tcx.trait_of_item(*def_id).is_some() {\n                             // Trait methods are not seen as const unless the trait is implemented as const.\n@@ -1382,7 +1385,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             continue\n                         }\n                     }\n-                    ConstDestructCandidate(_) => {}\n+\n                     _ => {\n                         // reject all other types of candidates\n                         continue;\n@@ -1844,7 +1847,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             (\n                 ParamCandidate(ref cand),\n                 ImplCandidate(..)\n-                | ClosureCandidate\n+                | ClosureCandidate { .. }\n                 | GeneratorCandidate\n                 | FutureCandidate\n                 | FnPointerCandidate { .. }\n@@ -1863,7 +1866,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n             (\n                 ImplCandidate(_)\n-                | ClosureCandidate\n+                | ClosureCandidate { .. }\n                 | GeneratorCandidate\n                 | FutureCandidate\n                 | FnPointerCandidate { .. }\n@@ -1894,7 +1897,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             (\n                 ObjectCandidate(_) | ProjectionCandidate(..),\n                 ImplCandidate(..)\n-                | ClosureCandidate\n+                | ClosureCandidate { .. }\n                 | GeneratorCandidate\n                 | FutureCandidate\n                 | FnPointerCandidate { .. }\n@@ -1907,7 +1910,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             (\n                 ImplCandidate(..)\n-                | ClosureCandidate\n+                | ClosureCandidate { .. }\n                 | GeneratorCandidate\n                 | FutureCandidate\n                 | FnPointerCandidate { .. }\n@@ -1989,7 +1992,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             // Everything else is ambiguous\n             (\n                 ImplCandidate(_)\n-                | ClosureCandidate\n+                | ClosureCandidate { .. }\n                 | GeneratorCandidate\n                 | FutureCandidate\n                 | FnPointerCandidate { .. }\n@@ -1999,7 +2002,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | BuiltinCandidate { has_nested: true }\n                 | TraitAliasCandidate,\n                 ImplCandidate(_)\n-                | ClosureCandidate\n+                | ClosureCandidate { .. }\n                 | GeneratorCandidate\n                 | FutureCandidate\n                 | FnPointerCandidate { .. }"}, {"sha": "a7d6fec7d3dc1354121ea6058cb766bedc7affbe", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -1234,17 +1234,23 @@ where\n     F: ~const Destruct,\n     K: ~const Destruct,\n {\n-    const fn imp<T, F: ~const FnMut(&T) -> K, K: ~const Ord>(\n-        f: &mut F,\n-        (v1, v2): (&T, &T),\n-    ) -> Ordering\n-    where\n-        T: ~const Destruct,\n-        K: ~const Destruct,\n-    {\n-        f(v1).cmp(&f(v2))\n+    cfg_if! {\n+        if #[cfg(bootstrap)] {\n+            const fn imp<T, F: ~const FnMut(&T) -> K, K: ~const Ord>(\n+                f: &mut F,\n+                (v1, v2): (&T, &T),\n+            ) -> Ordering\n+            where\n+                T: ~const Destruct,\n+                K: ~const Destruct,\n+            {\n+                f(v1).cmp(&f(v2))\n+            }\n+            min_by(v1, v2, ConstFnMutClosure::new(&mut f, imp))\n+        } else {\n+            min_by(v1, v2, const |v1, v2| f(v1).cmp(&f(v2)))\n+        }\n     }\n-    min_by(v1, v2, ConstFnMutClosure::new(&mut f, imp))\n }\n \n /// Compares and returns the maximum of two values."}, {"sha": "8790649abe6f1b90433171f95816072ecd05a4ca", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -191,6 +191,7 @@\n #![feature(cfg_sanitize)]\n #![feature(cfg_target_has_atomic)]\n #![feature(cfg_target_has_atomic_equal_alignment)]\n+#![cfg_attr(not(bootstrap), feature(const_closures))]\n #![feature(const_fn_floating_point_arithmetic)]\n #![feature(const_mut_refs)]\n #![feature(const_precise_live_drops)]"}, {"sha": "8fd0fcf8f5c2c83ca8668700b0ec121e38d7953f", "filename": "src/tools/rustfmt/src/closures.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -26,6 +26,7 @@ use crate::utils::{last_line_width, left_most_sub_expr, stmt_expr, NodeIdExt};\n \n pub(crate) fn rewrite_closure(\n     binder: &ast::ClosureBinder,\n+    constness: ast::Const,\n     capture: ast::CaptureBy,\n     is_async: &ast::Async,\n     movability: ast::Movability,\n@@ -38,7 +39,7 @@ pub(crate) fn rewrite_closure(\n     debug!(\"rewrite_closure {:?}\", body);\n \n     let (prefix, extra_offset) = rewrite_closure_fn_decl(\n-        binder, capture, is_async, movability, fn_decl, body, span, context, shape,\n+        binder, constness, capture, is_async, movability, fn_decl, body, span, context, shape,\n     )?;\n     // 1 = space between `|...|` and body.\n     let body_shape = shape.offset_left(extra_offset)?;\n@@ -230,6 +231,7 @@ fn rewrite_closure_block(\n // Return type is (prefix, extra_offset)\n fn rewrite_closure_fn_decl(\n     binder: &ast::ClosureBinder,\n+    constness: ast::Const,\n     capture: ast::CaptureBy,\n     asyncness: &ast::Async,\n     movability: ast::Movability,\n@@ -250,6 +252,12 @@ fn rewrite_closure_fn_decl(\n         ast::ClosureBinder::NotPresent => \"\".to_owned(),\n     };\n \n+    let const_ = if matches!(constness, ast::Const::Yes(_)) {\n+        \"const \"\n+    } else {\n+        \"\"\n+    };\n+\n     let immovable = if movability == ast::Movability::Static {\n         \"static \"\n     } else {\n@@ -264,7 +272,7 @@ fn rewrite_closure_fn_decl(\n     // 4 = \"|| {\".len(), which is overconservative when the closure consists of\n     // a single expression.\n     let nested_shape = shape\n-        .shrink_left(binder.len() + immovable.len() + is_async.len() + mover.len())?\n+        .shrink_left(binder.len() + const_.len() + immovable.len() + is_async.len() + mover.len())?\n         .sub_width(4)?;\n \n     // 1 = |\n@@ -302,7 +310,10 @@ fn rewrite_closure_fn_decl(\n         .tactic(tactic)\n         .preserve_newline(true);\n     let list_str = write_list(&item_vec, &fmt)?;\n-    let mut prefix = format!(\"{}{}{}{}|{}|\", binder, immovable, is_async, mover, list_str);\n+    let mut prefix = format!(\n+        \"{}{}{}{}{}|{}|\",\n+        binder, const_, immovable, is_async, mover, list_str\n+    );\n \n     if !ret_str.is_empty() {\n         if prefix.contains('\\n') {\n@@ -329,6 +340,7 @@ pub(crate) fn rewrite_last_closure(\n     if let ast::ExprKind::Closure(ref closure) = expr.kind {\n         let ast::Closure {\n             ref binder,\n+            constness,\n             capture_clause,\n             ref asyncness,\n             movability,\n@@ -349,6 +361,7 @@ pub(crate) fn rewrite_last_closure(\n         };\n         let (prefix, extra_offset) = rewrite_closure_fn_decl(\n             binder,\n+            constness,\n             capture_clause,\n             asyncness,\n             movability,"}, {"sha": "868ff045ab78b2a5705100947217e26c693938e2", "filename": "src/tools/rustfmt/src/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -205,6 +205,7 @@ pub(crate) fn format_expr(\n         }\n         ast::ExprKind::Closure(ref cl) => closures::rewrite_closure(\n             &cl.binder,\n+            cl.constness,\n             cl.capture_clause,\n             &cl.asyncness,\n             cl.movability,"}, {"sha": "7a91dcf0dad35b9808f64c5b61f5859fc78fb9a0", "filename": "tests/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -126,6 +126,7 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n                     g(ExprKind::Closure(Box::new(Closure {\n                         binder: ClosureBinder::NotPresent,\n                         capture_clause: CaptureBy::Value,\n+                        constness: Const::No,\n                         asyncness: Async::No,\n                         movability: Movability::Movable,\n                         fn_decl: decl.clone(),"}, {"sha": "49056678448e70dd939e0993f2adee73fb4a048c", "filename": "tests/ui/check-static-values-constraints.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fcheck-static-values-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fcheck-static-values-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcheck-static-values-constraints.stderr?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -22,6 +22,7 @@ LL |     field2: SafeEnum::Variant4(\"str\".to_string())\n    |                                      ^^^^^^^^^^^\n    |\n    = note: calls in statics are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n    = note: consider wrapping this expression in `Lazy::new(|| ...)` from the `once_cell` crate: https://crates.io/crates/once_cell\n \n error[E0010]: allocations are not allowed in statics"}, {"sha": "18370eea57149d6672b2d3e36d98e51b485d1766", "filename": "tests/ui/const-generics/issue-93647.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fconst-generics%2Fissue-93647.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fconst-generics%2Fissue-93647.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissue-93647.stderr?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -6,6 +6,7 @@ LL |     (||1usize)()\n    |\n    = note: closures need an RFC before allowed to be called in constants\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "f735b3d53ce43202b6b00c0a48b0769287e7d511", "filename": "tests/ui/consts/const-fn-error.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fconsts%2Fconst-fn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fconsts%2Fconst-fn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-fn-error.stderr?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -22,6 +22,7 @@ LL |     for i in 0..x {\n note: impl defined here, but it is not `const`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error[E0658]: mutable references are not allowed in constant functions\n   --> $DIR/const-fn-error.rs:5:14\n@@ -39,6 +40,7 @@ LL |     for i in 0..x {\n    |              ^^^^\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error: aborting due to 4 previous errors\n "}, {"sha": "3fb9787c0d868455fe8d88840560ee407d8cec19", "filename": "tests/ui/consts/const-for.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fconsts%2Fconst-for.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fconsts%2Fconst-for.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-for.stderr?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -7,6 +7,7 @@ LL |     for _ in 0..5 {}\n note: impl defined here, but it is not `const`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error[E0015]: cannot call non-const fn `<std::ops::Range<i32> as Iterator>::next` in constants\n   --> $DIR/const-for.rs:5:14\n@@ -15,6 +16,7 @@ LL |     for _ in 0..5 {}\n    |              ^^^^\n    |\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n "}, {"sha": "257ecd7f3cf7f49521934094a22897b26bbff0fb", "filename": "tests/ui/consts/invalid-inline-const-in-match-arm.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fconsts%2Finvalid-inline-const-in-match-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fconsts%2Finvalid-inline-const-in-match-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Finvalid-inline-const-in-match-arm.stderr?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -6,6 +6,7 @@ LL |         const { (|| {})() } => {}\n    |\n    = note: closures need an RFC before allowed to be called in constants\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "1294cc99bf736eb441eeb930cbdf6d964ad5bdee", "filename": "tests/ui/consts/issue-28113.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fconsts%2Fissue-28113.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fconsts%2Fissue-28113.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-28113.stderr?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -6,6 +6,7 @@ LL |     || -> u8 { 5 }()\n    |\n    = note: closures need an RFC before allowed to be called in constants\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "845b23d5d873d42fc08a68433b8f054b93dd3dae", "filename": "tests/ui/consts/issue-56164.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fconsts%2Fissue-56164.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fconsts%2Fissue-56164.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-56164.stderr?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -6,6 +6,7 @@ LL | const fn foo() { (||{})() }\n    |\n    = note: closures need an RFC before allowed to be called in constant functions\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error: function pointer calls are not allowed in constant functions\n   --> $DIR/issue-56164.rs:5:5"}, {"sha": "d23513ed7ffb9139fd147a827fd559756c6b241a", "filename": "tests/ui/consts/issue-68542-closure-in-array-len.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.stderr?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -6,6 +6,7 @@ LL |     a: [(); (|| { 0 })()]\n    |\n    = note: closures need an RFC before allowed to be called in constants\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "df44689efed775d161412b5b8ada9c0c4437c5dd", "filename": "tests/ui/consts/issue-90870.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fconsts%2Fissue-90870.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fconsts%2Fissue-90870.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-90870.fixed?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -8,19 +8,22 @@ const fn f(a: &u8, b: &u8) -> bool {\n     *a == *b\n     //~^ ERROR: cannot call non-const operator in constant functions [E0015]\n     //~| HELP: consider dereferencing here\n+    //~| HELP: add `#![feature(const_trait_impl)]`\n }\n \n const fn g(a: &&&&i64, b: &&&&i64) -> bool {\n     ****a == ****b\n     //~^ ERROR: cannot call non-const operator in constant functions [E0015]\n     //~| HELP: consider dereferencing here\n+    //~| HELP: add `#![feature(const_trait_impl)]`\n }\n \n const fn h(mut a: &[u8], mut b: &[u8]) -> bool {\n     while let ([l, at @ ..], [r, bt @ ..]) = (a, b) {\n         if *l == *r {\n         //~^ ERROR: cannot call non-const operator in constant functions [E0015]\n         //~| HELP: consider dereferencing here\n+        //~| HELP: add `#![feature(const_trait_impl)]`\n             a = at;\n             b = bt;\n         } else {"}, {"sha": "676ac73c64d93b3f2929e0acfe703b0f68b896da", "filename": "tests/ui/consts/issue-90870.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fconsts%2Fissue-90870.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fconsts%2Fissue-90870.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-90870.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -8,19 +8,22 @@ const fn f(a: &u8, b: &u8) -> bool {\n     a == b\n     //~^ ERROR: cannot call non-const operator in constant functions [E0015]\n     //~| HELP: consider dereferencing here\n+    //~| HELP: add `#![feature(const_trait_impl)]`\n }\n \n const fn g(a: &&&&i64, b: &&&&i64) -> bool {\n     a == b\n     //~^ ERROR: cannot call non-const operator in constant functions [E0015]\n     //~| HELP: consider dereferencing here\n+    //~| HELP: add `#![feature(const_trait_impl)]`\n }\n \n const fn h(mut a: &[u8], mut b: &[u8]) -> bool {\n     while let ([l, at @ ..], [r, bt @ ..]) = (a, b) {\n         if l == r {\n         //~^ ERROR: cannot call non-const operator in constant functions [E0015]\n         //~| HELP: consider dereferencing here\n+        //~| HELP: add `#![feature(const_trait_impl)]`\n             a = at;\n             b = bt;\n         } else {"}, {"sha": "8825efd1449d8559ad8708fdf43e45535f7c4b1c", "filename": "tests/ui/consts/issue-90870.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fconsts%2Fissue-90870.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fconsts%2Fissue-90870.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-90870.stderr?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -5,30 +5,33 @@ LL |     a == b\n    |     ^^^^^^\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n help: consider dereferencing here\n    |\n LL |     *a == *b\n    |     +     +\n \n error[E0015]: cannot call non-const operator in constant functions\n-  --> $DIR/issue-90870.rs:14:5\n+  --> $DIR/issue-90870.rs:15:5\n    |\n LL |     a == b\n    |     ^^^^^^\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n help: consider dereferencing here\n    |\n LL |     ****a == ****b\n    |     ++++     ++++\n \n error[E0015]: cannot call non-const operator in constant functions\n-  --> $DIR/issue-90870.rs:21:12\n+  --> $DIR/issue-90870.rs:23:12\n    |\n LL |         if l == r {\n    |            ^^^^^^\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n help: consider dereferencing here\n    |\n LL |         if *l == *r {"}, {"sha": "33b7a9185d0ebc662d414856ae590c3154f40fb7", "filename": "tests/ui/never_type/issue-52443.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fnever_type%2Fissue-52443.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fnever_type%2Fissue-52443.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Fissue-52443.stderr?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -47,6 +47,7 @@ LL |     [(); { for _ in 0usize.. {}; 0}];\n note: impl defined here, but it is not `const`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error[E0658]: mutable references are not allowed in constants\n   --> $DIR/issue-52443.rs:9:21\n@@ -64,6 +65,7 @@ LL |     [(); { for _ in 0usize.. {}; 0}];\n    |                     ^^^^^^^^\n    |\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error: aborting due to 6 previous errors; 1 warning emitted\n "}, {"sha": "df22f5e065c8fde7c1df84225b78d65e721c107a", "filename": "tests/ui/parser/recover-quantified-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fparser%2Frecover-quantified-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fparser%2Frecover-quantified-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Frecover-quantified-closure.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -7,6 +7,6 @@ fn main() {\n enum Foo { Bar }\n fn foo(x: impl Iterator<Item = Foo>) {\n     for <Foo>::Bar in x {}\n-    //~^ ERROR expected one of `move`, `static`, `|`\n+    //~^ ERROR expected one of `const`, `move`, `static`, `|`\n     //~^^ ERROR `for<...>` binders for closures are experimental\n }"}, {"sha": "9ec4d2c034d0fe35da4ae7597886ddc16bd4521b", "filename": "tests/ui/parser/recover-quantified-closure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fparser%2Frecover-quantified-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fparser%2Frecover-quantified-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Frecover-quantified-closure.stderr?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `move`, `static`, `|`, or `||`, found `::`\n+error: expected one of `const`, `move`, `static`, `|`, or `||`, found `::`\n   --> $DIR/recover-quantified-closure.rs:9:14\n    |\n LL |     for <Foo>::Bar in x {}\n-   |              ^^ expected one of `move`, `static`, `|`, or `||`\n+   |              ^^ expected one of `const`, `move`, `static`, `|`, or `||`\n \n error[E0658]: `for<...>` binders for closures are experimental\n   --> $DIR/recover-quantified-closure.rs:2:5"}, {"sha": "e9d8eb0835bdb580191c77a9bdb81d1a985c41ca", "filename": "tests/ui/resolve/issue-39559-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fresolve%2Fissue-39559-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Fresolve%2Fissue-39559-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-39559-2.stderr?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -5,6 +5,7 @@ LL |     let array: [usize; Dim3::dim()]\n    |                        ^^^^^^^^^^^\n    |\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error[E0015]: cannot call non-const fn `<Dim3 as Dim>::dim` in constants\n   --> $DIR/issue-39559-2.rs:16:15\n@@ -13,6 +14,7 @@ LL |         = [0; Dim3::dim()];\n    |               ^^^^^^^^^^^\n    |\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5f48c235373520320a7b3adf19e9f51d25d1dc92", "filename": "tests/ui/rfc-2632-const-trait-impl/call.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+\n+#![feature(const_closures, const_trait_impl)]\n+#![allow(incomplete_features)]\n+\n+pub const _: () = {\n+    assert!((const || true)());\n+};\n+\n+fn main() {}"}, {"sha": "96e0c78b9c7da1afe88156c033dfb8ed9436559b", "filename": "tests/ui/rfc-2632-const-trait-impl/const_derives/derive-const-non-const-type.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-non-const-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-non-const-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-non-const-type.stderr?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -7,6 +7,7 @@ LL | pub struct S(A);\n    |              ^\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "22f13a7416e92ec55080052bafb8228c8b366823", "filename": "tests/ui/rfc-2632-const-trait-impl/cross-crate.stock.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stock.stderr?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -5,6 +5,7 @@ LL |     Const.func();\n    |           ^^^^^^\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "f2cd26c91b64076da72c486b3acdd3819ee77f0d", "filename": "tests/ui/rfc-2632-const-trait-impl/gate.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Frfc-2632-const-trait-impl%2Fgate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Frfc-2632-const-trait-impl%2Fgate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fgate.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -0,0 +1,5 @@\n+// gate-test-const_closures\n+fn main() {\n+    (const || {})();\n+    //~^ ERROR: const closures are experimental\n+}"}, {"sha": "30edc4127e1f4662c1dc8bd25a4b25f87bd9bba0", "filename": "tests/ui/rfc-2632-const-trait-impl/gate.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Frfc-2632-const-trait-impl%2Fgate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Frfc-2632-const-trait-impl%2Fgate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fgate.stderr?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: const closures are experimental\n+  --> $DIR/gate.rs:3:6\n+   |\n+LL |     (const || {})();\n+   |      ^^^^^^^^^^^\n+   |\n+   = note: see issue #106003 <https://github.com/rust-lang/rust/issues/106003> for more information\n+   = help: add `#![feature(const_closures)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "cd8bb5963ada23f319a31aa1a6fb19b31b76b29c", "filename": "tests/ui/rfc-2632-const-trait-impl/non-const-op-const-closure-non-const-outer.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Frfc-2632-const-trait-impl%2Fnon-const-op-const-closure-non-const-outer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Frfc-2632-const-trait-impl%2Fnon-const-op-const-closure-non-const-outer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fnon-const-op-const-closure-non-const-outer.rs?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -0,0 +1,15 @@\n+#![feature(const_closures, const_trait_impl)]\n+#![allow(incomplete_features)]\n+\n+trait Foo {\n+    fn foo(&self);\n+}\n+\n+impl Foo for () {\n+    fn foo(&self) {}\n+}\n+\n+fn main() {\n+    (const || { (()).foo() })();\n+    //~^ ERROR: cannot call non-const fn\n+}"}, {"sha": "979d7febbcaf816a14949dc4ab52327427023fa3", "filename": "tests/ui/rfc-2632-const-trait-impl/non-const-op-const-closure-non-const-outer.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Frfc-2632-const-trait-impl%2Fnon-const-op-const-closure-non-const-outer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Frfc-2632-const-trait-impl%2Fnon-const-op-const-closure-non-const-outer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fnon-const-op-const-closure-non-const-outer.stderr?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -0,0 +1,11 @@\n+error[E0015]: cannot call non-const fn `<() as Foo>::foo` in constant functions\n+  --> $DIR/non-const-op-const-closure-non-const-outer.rs:13:22\n+   |\n+LL |     (const || { (()).foo() })();\n+   |                      ^^^^^\n+   |\n+   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "d7aa0d95cfc77a4b04b2e47043aef769317add73", "filename": "tests/ui/rfc-2632-const-trait-impl/staged-api-user-crate.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api-user-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api-user-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api-user-crate.stderr?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -5,6 +5,7 @@ LL |     Unstable::func();\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "6a3396401d2b90b1692341a5b802f2500c8e4b16", "filename": "tests/ui/rfc-2632-const-trait-impl/std-impl-gate.stock.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Frfc-2632-const-trait-impl%2Fstd-impl-gate.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/279f1c9d8c26a8d227ae8ab806d262bb784b251b/tests%2Fui%2Frfc-2632-const-trait-impl%2Fstd-impl-gate.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fstd-impl-gate.stock.stderr?ref=279f1c9d8c26a8d227ae8ab806d262bb784b251b", "patch": "@@ -5,6 +5,7 @@ LL |     Default::default()\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}]}