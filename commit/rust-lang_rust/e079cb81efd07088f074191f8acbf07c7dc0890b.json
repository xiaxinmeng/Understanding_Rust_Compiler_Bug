{"sha": "e079cb81efd07088f074191f8acbf07c7dc0890b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNzljYjgxZWZkMDcwODhmMDc0MTkxZjhhY2JmMDdjN2RjMDg5MGI=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-11-09T02:33:35Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-11-09T02:33:35Z"}, "message": "Remove 'Option<_>' from return type of 'take_while_with_pred()'", "tree": {"sha": "f55a08b17afe8d300b6b8d55f17fce27893508b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f55a08b17afe8d300b6b8d55f17fce27893508b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e079cb81efd07088f074191f8acbf07c7dc0890b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e079cb81efd07088f074191f8acbf07c7dc0890b", "html_url": "https://github.com/rust-lang/rust/commit/e079cb81efd07088f074191f8acbf07c7dc0890b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e079cb81efd07088f074191f8acbf07c7dc0890b/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61bca9c08361914c76ce23635f4c4993f433d58c", "url": "https://api.github.com/repos/rust-lang/rust/commits/61bca9c08361914c76ce23635f4c4993f433d58c", "html_url": "https://github.com/rust-lang/rust/commit/61bca9c08361914c76ce23635f4c4993f433d58c"}], "stats": {"total": 50, "additions": 23, "deletions": 27}, "files": [{"sha": "c613b3b8a551feeac8ddbcd1076214b9f4ea5346", "filename": "src/visitor.rs", "status": "modified", "additions": 23, "deletions": 27, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e079cb81efd07088f074191f8acbf07c7dc0890b/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e079cb81efd07088f074191f8acbf07c7dc0890b/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=e079cb81efd07088f074191f8acbf07c7dc0890b", "patch": "@@ -797,7 +797,7 @@ fn take_while_with_pred<'a, P>(\n     context: &RewriteContext,\n     attrs: &'a [ast::Attribute],\n     pred: P,\n-) -> Option<&'a [ast::Attribute]>\n+) -> &'a [ast::Attribute]\n where\n     P: Fn(&ast::Attribute) -> bool,\n {\n@@ -818,9 +818,9 @@ where\n         last_index = i;\n     }\n     if last_index == 0 {\n-        None\n+        &[]\n     } else {\n-        Some(&attrs[..last_index + 1])\n+        &attrs[..last_index + 1]\n     }\n }\n \n@@ -833,34 +833,30 @@ fn rewrite_first_group_attrs(\n         return Some((0, String::new()));\n     }\n     // Rewrite doc comments\n-    match take_while_with_pred(context, attrs, |a| a.is_sugared_doc) {\n-        Some(sugared_docs) if !sugared_docs.is_empty() => {\n-            let snippet = sugared_docs\n-                .iter()\n-                .map(|a| context.snippet(a.span))\n-                .collect::<Vec<_>>()\n-                .join(\"\\n\");\n-            return Some((\n-                sugared_docs.len(),\n-                rewrite_comment(&snippet, false, shape, context.config)?,\n-            ));\n-        }\n-        _ => (),\n+    let sugared_docs = take_while_with_pred(context, attrs, |a| a.is_sugared_doc);\n+    if !sugared_docs.is_empty() {\n+        let snippet = sugared_docs\n+            .iter()\n+            .map(|a| context.snippet(a.span))\n+            .collect::<Vec<_>>()\n+            .join(\"\\n\");\n+        return Some((\n+            sugared_docs.len(),\n+            rewrite_comment(&snippet, false, shape, context.config)?,\n+        ));\n     }\n     // Rewrite `#[derive(..)]`s.\n     if context.config.merge_derives() {\n-        match take_while_with_pred(context, attrs, is_derive) {\n-            Some(derives) if !derives.is_empty() => {\n-                let mut derive_args = vec![];\n-                for derive in derives {\n-                    derive_args.append(&mut get_derive_args(context, derive)?);\n-                }\n-                return Some((\n-                    derives.len(),\n-                    format_derive(context, &derive_args, shape)?,\n-                ));\n+        let derives = take_while_with_pred(context, attrs, is_derive);\n+        if !derives.is_empty() {\n+            let mut derive_args = vec![];\n+            for derive in derives {\n+                derive_args.append(&mut get_derive_args(context, derive)?);\n             }\n-            _ => (),\n+            return Some((\n+                derives.len(),\n+                format_derive(context, &derive_args, shape)?,\n+            ));\n         }\n     }\n     // Rewrite the first attribute."}]}