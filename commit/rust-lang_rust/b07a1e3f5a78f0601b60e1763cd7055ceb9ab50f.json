{"sha": "b07a1e3f5a78f0601b60e1763cd7055ceb9ab50f", "node_id": "C_kwDOAAsO6NoAKGIwN2ExZTNmNWE3OGYwNjAxYjYwZTE3NjNjZDcwNTVjZWI5YWI1MGY", "commit": {"author": {"name": "Albert Larsan", "email": "74931857+albertlarsan68@users.noreply.github.com", "date": "2022-12-19T13:48:01Z"}, "committer": {"name": "Albert Larsan", "email": "74931857+albertlarsan68@users.noreply.github.com", "date": "2022-12-27T13:54:38Z"}, "message": "Put final touches", "tree": {"sha": "6e36b606ac55fa208890065dde34425247ad09ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e36b606ac55fa208890065dde34425247ad09ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b07a1e3f5a78f0601b60e1763cd7055ceb9ab50f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQTou3NNtBmr78Wcak/5H7IMIOEwbAUCY6r5HgAKCRD5H7IMIOEw\nbCz7AQC5NxcjmkFw53PFnAlx32eOGoABeSxDJJzH6L6BW/KfIAEAw2SXd2i13uH4\n6fl9LUJpW5LhDslSSWLrR4nzUfqL9AA=\n=LXvh\n-----END PGP SIGNATURE-----", "payload": "tree 6e36b606ac55fa208890065dde34425247ad09ec\nparent 00b23e8d01cc5cc89b893c1d9072e0ebf1673ef4\nauthor Albert Larsan <74931857+albertlarsan68@users.noreply.github.com> 1671457681 +0100\ncommitter Albert Larsan <74931857+albertlarsan68@users.noreply.github.com> 1672149278 +0100\n\nPut final touches\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b07a1e3f5a78f0601b60e1763cd7055ceb9ab50f", "html_url": "https://github.com/rust-lang/rust/commit/b07a1e3f5a78f0601b60e1763cd7055ceb9ab50f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b07a1e3f5a78f0601b60e1763cd7055ceb9ab50f/comments", "author": {"login": "albertlarsan68", "id": 74931857, "node_id": "MDQ6VXNlcjc0OTMxODU3", "avatar_url": "https://avatars.githubusercontent.com/u/74931857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albertlarsan68", "html_url": "https://github.com/albertlarsan68", "followers_url": "https://api.github.com/users/albertlarsan68/followers", "following_url": "https://api.github.com/users/albertlarsan68/following{/other_user}", "gists_url": "https://api.github.com/users/albertlarsan68/gists{/gist_id}", "starred_url": "https://api.github.com/users/albertlarsan68/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albertlarsan68/subscriptions", "organizations_url": "https://api.github.com/users/albertlarsan68/orgs", "repos_url": "https://api.github.com/users/albertlarsan68/repos", "events_url": "https://api.github.com/users/albertlarsan68/events{/privacy}", "received_events_url": "https://api.github.com/users/albertlarsan68/received_events", "type": "User", "site_admin": false}, "committer": {"login": "albertlarsan68", "id": 74931857, "node_id": "MDQ6VXNlcjc0OTMxODU3", "avatar_url": "https://avatars.githubusercontent.com/u/74931857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albertlarsan68", "html_url": "https://github.com/albertlarsan68", "followers_url": "https://api.github.com/users/albertlarsan68/followers", "following_url": "https://api.github.com/users/albertlarsan68/following{/other_user}", "gists_url": "https://api.github.com/users/albertlarsan68/gists{/gist_id}", "starred_url": "https://api.github.com/users/albertlarsan68/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albertlarsan68/subscriptions", "organizations_url": "https://api.github.com/users/albertlarsan68/orgs", "repos_url": "https://api.github.com/users/albertlarsan68/repos", "events_url": "https://api.github.com/users/albertlarsan68/events{/privacy}", "received_events_url": "https://api.github.com/users/albertlarsan68/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00b23e8d01cc5cc89b893c1d9072e0ebf1673ef4", "url": "https://api.github.com/repos/rust-lang/rust/commits/00b23e8d01cc5cc89b893c1d9072e0ebf1673ef4", "html_url": "https://github.com/rust-lang/rust/commit/00b23e8d01cc5cc89b893c1d9072e0ebf1673ef4"}], "stats": {"total": 74, "additions": 34, "deletions": 40}, "files": [{"sha": "b49322e3c028fc07d5eb1a54702a08d97d7e59be", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 34, "deletions": 40, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/b07a1e3f5a78f0601b60e1763cd7055ceb9ab50f/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07a1e3f5a78f0601b60e1763cd7055ceb9ab50f/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=b07a1e3f5a78f0601b60e1763cd7055ceb9ab50f", "patch": "@@ -44,65 +44,58 @@ fn rustfmt(src: &Path, rustfmt: &Path, paths: &[PathBuf], check: bool) -> impl F\n     }\n }\n \n-fn verify_timestamp(build: &Builder<'_>) -> bool {\n-    let stamp_file = {\n-        let mut s = build.out.clone();\n-        s.push(\"rustfmt.stamp\");\n-        s\n-    };\n+fn get_rustfmt_version(build: &Builder<'_>) -> Option<(String, PathBuf)> {\n+    let stamp_file = build.out.join(\"rustfmt.stamp\");\n \n     let mut cmd = Command::new(match build.initial_rustfmt() {\n         Some(p) => p,\n-        None => return false,\n+        None => return None,\n     });\n     cmd.arg(\"--version\");\n     let output = match cmd.output() {\n         Ok(status) => status,\n-        Err(_) => return false,\n+        Err(_) => return None,\n     };\n     if !output.status.success() {\n-        return false;\n+        return None;\n     }\n-    let version = String::from_utf8(output.stdout).unwrap();\n-    !program_out_of_date(&stamp_file, &version)\n+    Some((String::from_utf8(output.stdout).unwrap(), stamp_file))\n }\n \n-fn update_timestamp(build: &Builder<'_>) {\n-    let stamp_file = {\n-        let mut s = build.out.clone();\n-        s.push(\"rustfmt.stamp\");\n-        s\n-    };\n-\n-    let mut cmd = Command::new(match build.initial_rustfmt() {\n-        Some(p) => p,\n-        None => return,\n-    });\n-    cmd.arg(\"--version\");\n-    let output = match cmd.output() {\n-        Ok(status) => status,\n-        Err(_) => return,\n-    };\n-    if !output.status.success() {\n-        return;\n-    }\n-    let version = String::from_utf8(output.stdout).unwrap();\n+/// Return whether the format cache can be reused.\n+fn verify_rustfmt_version(build: &Builder<'_>) -> bool {\n+    let Some((version, stamp_file)) = get_rustfmt_version(build) else {return false;};\n+    !program_out_of_date(&stamp_file, &version)\n+}\n \n+/// Updates the last rustfmt version used\n+fn update_rustfmt_version(build: &Builder<'_>) {\n+    let Some((version, stamp_file)) = get_rustfmt_version(build) else {return;};\n     t!(std::fs::write(stamp_file, version))\n }\n \n+/// Returns the files modified between the `merge-base` of HEAD and\n+/// rust-lang/master and what is now on the disk.\n+///\n+/// Returns `None` if all files should be formatted.\n fn get_modified_files(build: &Builder<'_>) -> Option<Vec<String>> {\n     let Ok(remote) = get_rust_lang_rust_remote() else {return None;};\n-    if !verify_timestamp(build) {\n+    if !verify_rustfmt_version(build) {\n         return None;\n     }\n-    let base =\n-        output(build.config.git().arg(\"merge-base\").arg(\"HEAD\").arg(format!(\"{remote}/master\")));\n     Some(\n-        output(build.config.git().arg(\"diff\").arg(\"--name-only\").arg(base.trim()))\n-            .lines()\n-            .map(|s| s.trim().to_owned())\n-            .collect(),\n+        output(\n+            build\n+                .config\n+                .git()\n+                .arg(\"diff-index\")\n+                .arg(\"--name-only\")\n+                .arg(\"--merge-base\")\n+                .arg(&format!(\"{remote}/master\")),\n+        )\n+        .lines()\n+        .map(|s| s.trim().to_owned())\n+        .collect(),\n     )\n }\n \n@@ -286,6 +279,7 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n     drop(tx);\n \n     thread.join().unwrap();\n-\n-    update_timestamp(build);\n+    if !check {\n+        update_rustfmt_version(build);\n+    }\n }"}]}