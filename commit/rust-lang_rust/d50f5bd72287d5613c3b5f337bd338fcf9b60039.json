{"sha": "d50f5bd72287d5613c3b5f337bd338fcf9b60039", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MGY1YmQ3MjI4N2Q1NjEzYzNiNWYzMzdiZDMzOGZjZjliNjAwMzk=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-21T12:25:16Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-21T14:08:57Z"}, "message": "getopts: remove all uses of `~[]`.\n\nAnd stop regressions with the lint.", "tree": {"sha": "93d5bfd59e2ae94768235e15b1043e6c1403c7d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93d5bfd59e2ae94768235e15b1043e6c1403c7d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d50f5bd72287d5613c3b5f337bd338fcf9b60039", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d50f5bd72287d5613c3b5f337bd338fcf9b60039", "html_url": "https://github.com/rust-lang/rust/commit/d50f5bd72287d5613c3b5f337bd338fcf9b60039", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d50f5bd72287d5613c3b5f337bd338fcf9b60039/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc3a10b9f9890ba2ddde4bdb1b734ec7685d91a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc3a10b9f9890ba2ddde4bdb1b734ec7685d91a6", "html_url": "https://github.com/rust-lang/rust/commit/bc3a10b9f9890ba2ddde4bdb1b734ec7685d91a6"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "4c6584a7d43d5d65190a3261408b9e9033c01d3f", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d50f5bd72287d5613c3b5f337bd338fcf9b60039/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d50f5bd72287d5613c3b5f337bd338fcf9b60039/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=d50f5bd72287d5613c3b5f337bd338fcf9b60039", "patch": "@@ -85,7 +85,7 @@\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n #[feature(globs, phase)];\n #[deny(missing_doc)];\n-#[allow(deprecated_owned_vector)]; // NOTE: remove after stage0\n+#[deny(deprecated_owned_vector)];\n \n #[cfg(test)] #[phase(syntax, link)] extern crate log;\n \n@@ -516,7 +516,7 @@ impl Fail_ {\n /// `opt_str`, etc. to interrogate results.  Returns `Err(Fail_)` on failure.\n /// Use `to_err_msg` to get an error message.\n pub fn getopts(args: &[~str], optgrps: &[OptGroup]) -> Result {\n-    let opts = optgrps.map(|x| x.long_to_short());\n+    let opts: Vec<Opt> = optgrps.iter().map(|x| x.long_to_short()).collect();\n     let n_opts = opts.len();\n \n     fn f(_x: uint) -> Vec<Optval> { return Vec::new(); }\n@@ -562,12 +562,12 @@ pub fn getopts(args: &[~str], optgrps: &[OptGroup]) -> Result {\n                        interpreted correctly\n                     */\n \n-                    match find_opt(opts, opt.clone()) {\n+                    match find_opt(opts.as_slice(), opt.clone()) {\n                       Some(id) => last_valid_opt_id = Some(id),\n                       None => {\n                         let arg_follows =\n                             last_valid_opt_id.is_some() &&\n-                            match opts[last_valid_opt_id.unwrap()]\n+                            match opts.get(last_valid_opt_id.unwrap())\n                               .hasarg {\n \n                               Yes | Maybe => true,\n@@ -588,11 +588,11 @@ pub fn getopts(args: &[~str], optgrps: &[OptGroup]) -> Result {\n             let mut name_pos = 0;\n             for nm in names.iter() {\n                 name_pos += 1;\n-                let optid = match find_opt(opts, (*nm).clone()) {\n+                let optid = match find_opt(opts.as_slice(), (*nm).clone()) {\n                   Some(id) => id,\n                   None => return Err(UnrecognizedOption(nm.to_str()))\n                 };\n-                match opts[optid].hasarg {\n+                match opts.get(optid).hasarg {\n                   No => {\n                     if !i_arg.is_none() {\n                         return Err(UnexpectedArgument(nm.to_str()));\n@@ -630,21 +630,21 @@ pub fn getopts(args: &[~str], optgrps: &[OptGroup]) -> Result {\n     i = 0u;\n     while i < n_opts {\n         let n = vals.get(i).len();\n-        let occ = opts[i].occur;\n+        let occ = opts.get(i).occur;\n         if occ == Req {\n             if n == 0 {\n-                return Err(OptionMissing(opts[i].name.to_str()));\n+                return Err(OptionMissing(opts.get(i).name.to_str()));\n             }\n         }\n         if occ != Multi {\n             if n > 1 {\n-                return Err(OptionDuplicated(opts[i].name.to_str()));\n+                return Err(OptionDuplicated(opts.get(i).name.to_str()));\n             }\n         }\n         i += 1;\n     }\n     Ok(Matches {\n-        opts: Vec::from_slice(opts),\n+        opts: opts,\n         vals: vals,\n         free: free\n     })\n@@ -772,7 +772,7 @@ fn format_option(opt: &OptGroup) -> ~str {\n /// Derive a short one-line usage summary from a set of long options.\n pub fn short_usage(program_name: &str, opts: &[OptGroup]) -> ~str {\n     let mut line = ~\"Usage: \" + program_name + \" \";\n-    line.push_str(opts.iter().map(format_option).to_owned_vec().connect(\" \"));\n+    line.push_str(opts.iter().map(format_option).collect::<Vec<~str>>().connect(\" \"));\n \n     line\n }"}]}