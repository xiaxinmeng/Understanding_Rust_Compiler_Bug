{"sha": "ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhOGNkYTJmYTJjOTllZDY2NDZmNGRmZTczYmY0ZWRhZDdlNDJhMmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-18T10:43:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-18T10:43:27Z"}, "message": "Auto merge of #87781 - est31:remove_box, r=oli-obk\n\nRemove box syntax from compiler and tools\n\nRemoves box syntax from the compiler and tools. In #49733, the future of box syntax is uncertain and the use in the compiler was listed as one of the reasons to keep it. Removal of box syntax [might affect the code generated](https://github.com/rust-lang/rust/pull/49646#issuecomment-379219615) and slow down the compiler so I'd recommend doing a perf run on this.", "tree": {"sha": "7adfa942c13a620d7ea6e0a9c0bb80e4eb5dd480", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7adfa942c13a620d7ea6e0a9c0bb80e4eb5dd480"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "html_url": "https://github.com/rust-lang/rust/commit/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "896f058f13d6c8021f7637817953a44d3a78be32", "url": "https://api.github.com/repos/rust-lang/rust/commits/896f058f13d6c8021f7637817953a44d3a78be32", "html_url": "https://github.com/rust-lang/rust/commit/896f058f13d6c8021f7637817953a44d3a78be32"}, {"sha": "0f081832b43db75073db2d8faecc84cf0ea7e271", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f081832b43db75073db2d8faecc84cf0ea7e271", "html_url": "https://github.com/rust-lang/rust/commit/0f081832b43db75073db2d8faecc84cf0ea7e271"}], "stats": {"total": 1054, "additions": 549, "deletions": 505}, "files": [{"sha": "502bd69e6a9af56eb4edb5fc51b6eeeef9ee8e61", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -8,7 +8,6 @@\n     html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\",\n     test(attr(deny(warnings)))\n )]\n-#![feature(box_syntax)]\n #![feature(box_patterns)]\n #![cfg_attr(bootstrap, feature(const_fn_transmute))]\n #![feature(crate_visibility_modifier)]"}, {"sha": "9fe87a0a637bdd8f965f2ada6940406362893e61", "filename": "compiler/rustc_ast/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_ast%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_ast%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fptr.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -37,7 +37,7 @@ pub struct P<T: ?Sized> {\n /// Construct a `P<T>` from a `T` value.\n #[allow(non_snake_case)]\n pub fn P<T: 'static>(value: T) -> P<T> {\n-    P { ptr: box value }\n+    P { ptr: Box::new(value) }\n }\n \n impl<T: 'static> P<T> {"}, {"sha": "61af4979e70142fe7dad2788f7106d6ceda8c764", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -527,12 +527,12 @@ impl<'a> TraitDef<'a> {\n                     tokens: None,\n                 },\n                 attrs: Vec::new(),\n-                kind: ast::AssocItemKind::TyAlias(box ast::TyAliasKind(\n+                kind: ast::AssocItemKind::TyAlias(Box::new(ast::TyAliasKind(\n                     ast::Defaultness::Final,\n                     Generics::default(),\n                     Vec::new(),\n                     Some(type_def.to_ty(cx, self.span, type_ident, generics)),\n-                )),\n+                ))),\n                 tokens: None,\n             })\n         });\n@@ -698,7 +698,7 @@ impl<'a> TraitDef<'a> {\n             self.span,\n             Ident::invalid(),\n             a,\n-            ast::ItemKind::Impl(box ast::ImplKind {\n+            ast::ItemKind::Impl(Box::new(ast::ImplKind {\n                 unsafety,\n                 polarity: ast::ImplPolarity::Positive,\n                 defaultness: ast::Defaultness::Final,\n@@ -707,7 +707,7 @@ impl<'a> TraitDef<'a> {\n                 of_trait: opt_trait_ref,\n                 self_ty: self_type,\n                 items: methods.into_iter().chain(associated_types).collect(),\n-            }),\n+            })),\n         )\n     }\n \n@@ -940,7 +940,12 @@ impl<'a> MethodDef<'a> {\n                 tokens: None,\n             },\n             ident: method_ident,\n-            kind: ast::AssocItemKind::Fn(box ast::FnKind(def, sig, fn_generics, Some(body_block))),\n+            kind: ast::AssocItemKind::Fn(Box::new(ast::FnKind(\n+                def,\n+                sig,\n+                fn_generics,\n+                Some(body_block),\n+            ))),\n             tokens: None,\n         })\n     }"}, {"sha": "572ec6e242e4b4d7fbe1b5410adab8d7a107319a", "filename": "compiler/rustc_builtin_macros/src/deriving/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -179,7 +179,7 @@ fn inject_impl_of_structural_trait(\n         span,\n         Ident::invalid(),\n         attrs,\n-        ItemKind::Impl(box ImplKind {\n+        ItemKind::Impl(Box::new(ImplKind {\n             unsafety: ast::Unsafe::No,\n             polarity: ast::ImplPolarity::Positive,\n             defaultness: ast::Defaultness::Final,\n@@ -188,7 +188,7 @@ fn inject_impl_of_structural_trait(\n             of_trait: Some(trait_ref),\n             self_ty: self_type,\n             items: Vec::new(),\n-        }),\n+        })),\n     );\n \n     push(Annotatable::Item(newitem));"}, {"sha": "3f71ee6f489a08fbbdd1d413f92905f9fe769417", "filename": "compiler/rustc_builtin_macros/src/global_allocator.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -85,8 +85,12 @@ impl AllocFnFactory<'_, '_> {\n         let header = FnHeader { unsafety: Unsafe::Yes(self.span), ..FnHeader::default() };\n         let sig = FnSig { decl, header, span: self.span };\n         let block = Some(self.cx.block_expr(output_expr));\n-        let kind =\n-            ItemKind::Fn(box FnKind(ast::Defaultness::Final, sig, Generics::default(), block));\n+        let kind = ItemKind::Fn(Box::new(FnKind(\n+            ast::Defaultness::Final,\n+            sig,\n+            Generics::default(),\n+            block,\n+        )));\n         let item = self.cx.item(\n             self.span,\n             Ident::from_str_and_span(&self.kind.fn_name(method.name), self.span),"}, {"sha": "d1d276930b90aa1c45912cede65d38c9821e72e7", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -3,7 +3,6 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]"}, {"sha": "be24b60294bfe52608e572b87bd89f39bdfd2f1d", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -315,8 +315,12 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n     let decl = ecx.fn_decl(vec![], ast::FnRetTy::Ty(main_ret_ty));\n     let sig = ast::FnSig { decl, header: ast::FnHeader::default(), span: sp };\n     let def = ast::Defaultness::Final;\n-    let main =\n-        ast::ItemKind::Fn(box ast::FnKind(def, sig, ast::Generics::default(), Some(main_body)));\n+    let main = ast::ItemKind::Fn(Box::new(ast::FnKind(\n+        def,\n+        sig,\n+        ast::Generics::default(),\n+        Some(main_body),\n+    )));\n \n     // Honor the reexport_test_harness_main attribute\n     let main_id = match cx.reexport_test_harness_main {"}, {"sha": "2a9f7e58e01c2f93db91629a11a21132188bbedf", "filename": "compiler/rustc_codegen_cranelift/example/alloc_example.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_codegen_cranelift%2Fexample%2Falloc_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_codegen_cranelift%2Fexample%2Falloc_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Falloc_example.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -1,4 +1,4 @@\n-#![feature(start, box_syntax, core_intrinsics, alloc_prelude, alloc_error_handler)]\n+#![feature(start, core_intrinsics, alloc_prelude, alloc_error_handler)]\n #![no_std]\n \n extern crate alloc;"}, {"sha": "6e13e4dcbfbffcb1084d4bb9b2c27e41c760c62e", "filename": "compiler/rustc_codegen_cranelift/example/mini_core_hello_world.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -1,4 +1,4 @@\n-#![feature(no_core, lang_items, box_syntax, never_type, linkage, extern_types, thread_local)]\n+#![feature(no_core, lang_items, never_type, linkage, extern_types, thread_local)]\n #![no_core]\n #![allow(dead_code, non_camel_case_types)]\n "}, {"sha": "e3e8a3c2d6ab0b80754ec36a5288317b9380585a", "filename": "compiler/rustc_codegen_cranelift/example/mod_bench.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmod_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmod_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmod_bench.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -1,4 +1,4 @@\n-#![feature(start, box_syntax, core_intrinsics, lang_items)]\n+#![feature(start, core_intrinsics, lang_items)]\n #![no_std]\n \n #[cfg_attr(unix, link(name = \"c\"))]"}, {"sha": "cbc735c98a65f943f2bf3b67ef4adeee1a43f629", "filename": "compiler/rustc_infer/src/infer/equate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -105,7 +105,7 @@ impl TypeRelation<'tcx> for Equate<'combine, 'infcx, 'tcx> {\n         b: ty::Region<'tcx>,\n     ) -> RelateResult<'tcx, ty::Region<'tcx>> {\n         debug!(\"{}.regions({:?}, {:?})\", self.tag(), a, b);\n-        let origin = Subtype(box self.fields.trace.clone());\n+        let origin = Subtype(Box::new(self.fields.trace.clone()));\n         self.fields\n             .infcx\n             .inner"}, {"sha": "d769667c2fb099854f50255b7a8d51890d4aa41d", "filename": "compiler/rustc_infer/src/infer/glb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -67,7 +67,7 @@ impl TypeRelation<'tcx> for Glb<'combine, 'infcx, 'tcx> {\n     ) -> RelateResult<'tcx, ty::Region<'tcx>> {\n         debug!(\"{}.regions({:?}, {:?})\", self.tag(), a, b);\n \n-        let origin = Subtype(box self.fields.trace.clone());\n+        let origin = Subtype(Box::new(self.fields.trace.clone()));\n         Ok(self.fields.infcx.inner.borrow_mut().unwrap_region_constraints().glb_regions(\n             self.tcx(),\n             origin,"}, {"sha": "cbad66397fd0d1ada97d12429264b774e8218437", "filename": "compiler/rustc_infer/src/infer/lub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -67,7 +67,7 @@ impl TypeRelation<'tcx> for Lub<'combine, 'infcx, 'tcx> {\n     ) -> RelateResult<'tcx, ty::Region<'tcx>> {\n         debug!(\"{}.regions({:?}, {:?})\", self.tag(), a, b);\n \n-        let origin = Subtype(box self.fields.trace.clone());\n+        let origin = Subtype(Box::new(self.fields.trace.clone()));\n         Ok(self.fields.infcx.inner.borrow_mut().unwrap_region_constraints().lub_regions(\n             self.tcx(),\n             origin,"}, {"sha": "2f126d8956905ddbe2a10224ef9fcfd0971263f2", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -142,7 +142,7 @@ impl TypeRelation<'tcx> for Sub<'combine, 'infcx, 'tcx> {\n         // FIXME -- we have more fine-grained information available\n         // from the \"cause\" field, we could perhaps give more tailored\n         // error messages.\n-        let origin = SubregionOrigin::Subtype(box self.fields.trace.clone());\n+        let origin = SubregionOrigin::Subtype(Box::new(self.fields.trace.clone()));\n         self.fields\n             .infcx\n             .inner"}, {"sha": "a4cfaddeeb96f40cce76d3b1cb6f9d098348edca", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -15,7 +15,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n #![feature(extend_one)]\n #![feature(iter_zip)]\n #![feature(never_type)]"}, {"sha": "0ffcd0154de923fc5898c1cd456871563cb2b196", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -29,7 +29,6 @@\n #![cfg_attr(test, feature(test))]\n #![feature(array_windows)]\n #![feature(bool_to_option)]\n-#![feature(box_syntax)]\n #![feature(box_patterns)]\n #![feature(crate_visibility_modifier)]\n #![feature(format_args_capture)]\n@@ -246,7 +245,7 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n     macro_rules! register_pass {\n         ($method:ident, $ty:ident, $constructor:expr) => {\n             store.register_lints(&$ty::get_lints());\n-            store.$method(|| box $constructor);\n+            store.$method(|| Box::new($constructor));\n         };\n     }\n \n@@ -478,13 +477,13 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n \n fn register_internals(store: &mut LintStore) {\n     store.register_lints(&LintPassImpl::get_lints());\n-    store.register_early_pass(|| box LintPassImpl);\n+    store.register_early_pass(|| Box::new(LintPassImpl));\n     store.register_lints(&DefaultHashTypes::get_lints());\n-    store.register_late_pass(|| box DefaultHashTypes);\n+    store.register_late_pass(|| Box::new(DefaultHashTypes));\n     store.register_lints(&ExistingDocKeyword::get_lints());\n-    store.register_late_pass(|| box ExistingDocKeyword);\n+    store.register_late_pass(|| Box::new(ExistingDocKeyword));\n     store.register_lints(&TyTyKind::get_lints());\n-    store.register_late_pass(|| box TyTyKind);\n+    store.register_late_pass(|| Box::new(TyTyKind));\n     store.register_group(\n         false,\n         \"rustc::internal\","}, {"sha": "0e72e916cc6acec3988d2dab011ebad5381c6d0c", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -29,7 +29,6 @@\n #![feature(backtrace)]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n #![feature(core_intrinsics)]\n #![feature(discriminant_kind)]\n #![feature(never_type)]"}, {"sha": "b66995afc6db66c5c57dd54f14eb2ade020a1146", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -2061,11 +2061,11 @@ impl<'tcx> Operand<'tcx> {\n         span: Span,\n     ) -> Self {\n         let ty = tcx.type_of(def_id).subst(tcx, substs);\n-        Operand::Constant(box Constant {\n+        Operand::Constant(Box::new(Constant {\n             span,\n             user_ty: None,\n             literal: ConstantKind::Ty(ty::Const::zero_sized(tcx, ty)),\n-        })\n+        }))\n     }\n \n     pub fn is_move(&self) -> bool {\n@@ -2092,11 +2092,11 @@ impl<'tcx> Operand<'tcx> {\n             };\n             scalar_size == type_size\n         });\n-        Operand::Constant(box Constant {\n+        Operand::Constant(Box::new(Constant {\n             span,\n             user_ty: None,\n             literal: ConstantKind::Val(ConstValue::Scalar(val), ty),\n-        })\n+        }))\n     }\n \n     pub fn to_copy(&self) -> Self {"}, {"sha": "b2d4a22194c628a25a4cf004e1a215b6a66b204b", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -182,10 +182,10 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n             Len(place) => Len(place.fold_with(folder)),\n             Cast(kind, op, ty) => Cast(kind, op.fold_with(folder), ty.fold_with(folder)),\n             BinaryOp(op, box (rhs, lhs)) => {\n-                BinaryOp(op, box (rhs.fold_with(folder), lhs.fold_with(folder)))\n+                BinaryOp(op, Box::new((rhs.fold_with(folder), lhs.fold_with(folder))))\n             }\n             CheckedBinaryOp(op, box (rhs, lhs)) => {\n-                CheckedBinaryOp(op, box (rhs.fold_with(folder), lhs.fold_with(folder)))\n+                CheckedBinaryOp(op, Box::new((rhs.fold_with(folder), lhs.fold_with(folder))))\n             }\n             UnaryOp(op, val) => UnaryOp(op, val.fold_with(folder)),\n             Discriminant(place) => Discriminant(place.fold_with(folder)),"}, {"sha": "9f7decad969004ef2e2b72c766e2d87cc8967f0a", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -464,12 +464,12 @@ fn do_mir_borrowck<'a, 'tcx>(\n \n     let body_with_facts = if return_body_with_facts {\n         let output_facts = mbcx.polonius_output.expect(\"Polonius output was not computed\");\n-        Some(box BodyWithBorrowckFacts {\n+        Some(Box::new(BodyWithBorrowckFacts {\n             body: body_owned,\n             input_facts: *polonius_input.expect(\"Polonius input facts were not generated\"),\n             output_facts,\n             location_table: location_table_owned,\n-        })\n+        }))\n     } else {\n         None\n     };"}, {"sha": "e439a247c7f6cbdd036dc0f66be9c4ca94f49b5a", "filename": "compiler/rustc_mir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Flib.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -11,7 +11,6 @@ Rust MIR: a lowered representation of Rust.\n #![cfg_attr(bootstrap, feature(bindings_after_at))]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n #![feature(exact_size_is_empty)]"}, {"sha": "8c3d828894c8ef4f105d35474a4d49991e46dbaf", "filename": "compiler/rustc_mir/src/shim.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fshim.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -174,7 +174,7 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n                 0,\n                 Statement {\n                     source_info,\n-                    kind: StatementKind::Retag(RetagKind::Raw, box (dropee_ptr)),\n+                    kind: StatementKind::Retag(RetagKind::Raw, Box::new(dropee_ptr)),\n                 },\n             );\n         }\n@@ -388,10 +388,10 @@ impl CloneShimBuilder<'tcx> {\n \n     fn copy_shim(&mut self) {\n         let rcvr = self.tcx.mk_place_deref(Place::from(Local::new(1 + 0)));\n-        let ret_statement = self.make_statement(StatementKind::Assign(box (\n+        let ret_statement = self.make_statement(StatementKind::Assign(Box::new((\n             Place::return_place(),\n             Rvalue::Use(Operand::Copy(rcvr)),\n-        )));\n+        ))));\n         self.block(vec![ret_statement], TerminatorKind::Return, false);\n     }\n \n@@ -418,22 +418,22 @@ impl CloneShimBuilder<'tcx> {\n \n         // `func == Clone::clone(&ty) -> ty`\n         let func_ty = tcx.mk_fn_def(self.def_id, substs);\n-        let func = Operand::Constant(box Constant {\n+        let func = Operand::Constant(Box::new(Constant {\n             span: self.span,\n             user_ty: None,\n             literal: ty::Const::zero_sized(tcx, func_ty).into(),\n-        });\n+        }));\n \n         let ref_loc = self.make_place(\n             Mutability::Not,\n             tcx.mk_ref(tcx.lifetimes.re_erased, ty::TypeAndMut { ty, mutbl: hir::Mutability::Not }),\n         );\n \n         // `let ref_loc: &ty = &src;`\n-        let statement = self.make_statement(StatementKind::Assign(box (\n+        let statement = self.make_statement(StatementKind::Assign(Box::new((\n             ref_loc,\n             Rvalue::Ref(tcx.lifetimes.re_erased, BorrowKind::Shared, src),\n-        )));\n+        ))));\n \n         // `let loc = Clone::clone(ref_loc);`\n         self.block(\n@@ -461,10 +461,10 @@ impl CloneShimBuilder<'tcx> {\n         let tcx = self.tcx;\n \n         let cond = self.make_place(Mutability::Mut, tcx.types.bool);\n-        let compute_cond = self.make_statement(StatementKind::Assign(box (\n+        let compute_cond = self.make_statement(StatementKind::Assign(Box::new((\n             cond,\n-            Rvalue::BinaryOp(BinOp::Ne, box (Operand::Copy(end), Operand::Copy(beg))),\n-        )));\n+            Rvalue::BinaryOp(BinOp::Ne, Box::new((Operand::Copy(end), Operand::Copy(beg)))),\n+        ))));\n \n         // `if end != beg { goto loop_body; } else { goto loop_end; }`\n         self.block(\n@@ -475,11 +475,11 @@ impl CloneShimBuilder<'tcx> {\n     }\n \n     fn make_usize(&self, value: u64) -> Box<Constant<'tcx>> {\n-        box Constant {\n+        Box::new(Constant {\n             span: self.span,\n             user_ty: None,\n             literal: ty::Const::from_usize(self.tcx, value).into(),\n-        }\n+        })\n     }\n \n     fn array_shim(\n@@ -500,18 +500,18 @@ impl CloneShimBuilder<'tcx> {\n         // `let end = len;`\n         // `goto #1;`\n         let inits = vec![\n-            self.make_statement(StatementKind::Assign(box (\n+            self.make_statement(StatementKind::Assign(Box::new((\n                 Place::from(beg),\n                 Rvalue::Use(Operand::Constant(self.make_usize(0))),\n-            ))),\n-            self.make_statement(StatementKind::Assign(box (\n+            )))),\n+            self.make_statement(StatementKind::Assign(Box::new((\n                 end,\n-                Rvalue::Use(Operand::Constant(box Constant {\n+                Rvalue::Use(Operand::Constant(Box::new(Constant {\n                     span: self.span,\n                     user_ty: None,\n                     literal: len.into(),\n-                })),\n-            ))),\n+                }))),\n+            )))),\n         ];\n         self.block(inits, TerminatorKind::Goto { target: BasicBlock::new(1) }, false);\n \n@@ -532,13 +532,13 @@ impl CloneShimBuilder<'tcx> {\n         // BB #3\n         // `beg = beg + 1;`\n         // `goto #1`;\n-        let statements = vec![self.make_statement(StatementKind::Assign(box (\n+        let statements = vec![self.make_statement(StatementKind::Assign(Box::new((\n             Place::from(beg),\n             Rvalue::BinaryOp(\n                 BinOp::Add,\n-                box (Operand::Copy(Place::from(beg)), Operand::Constant(self.make_usize(1))),\n+                Box::new((Operand::Copy(Place::from(beg)), Operand::Constant(self.make_usize(1)))),\n             ),\n-        )))];\n+        ))))];\n         self.block(statements, TerminatorKind::Goto { target: BasicBlock::new(1) }, false);\n \n         // BB #4\n@@ -551,10 +551,10 @@ impl CloneShimBuilder<'tcx> {\n         // goto #6;\n         let end = beg;\n         let beg = self.local_decls.push(LocalDecl::new(tcx.types.usize, span));\n-        let init = self.make_statement(StatementKind::Assign(box (\n+        let init = self.make_statement(StatementKind::Assign(Box::new((\n             Place::from(beg),\n             Rvalue::Use(Operand::Constant(self.make_usize(0))),\n-        )));\n+        ))));\n         self.block(vec![init], TerminatorKind::Goto { target: BasicBlock::new(6) }, true);\n \n         // BB #6 (cleanup): loop {\n@@ -585,13 +585,13 @@ impl CloneShimBuilder<'tcx> {\n         // BB #8 (cleanup)\n         // `beg = beg + 1;`\n         // `goto #6;`\n-        let statement = self.make_statement(StatementKind::Assign(box (\n+        let statement = self.make_statement(StatementKind::Assign(Box::new((\n             Place::from(beg),\n             Rvalue::BinaryOp(\n                 BinOp::Add,\n-                box (Operand::Copy(Place::from(beg)), Operand::Constant(self.make_usize(1))),\n+                Box::new((Operand::Copy(Place::from(beg)), Operand::Constant(self.make_usize(1)))),\n             ),\n-        )));\n+        ))));\n         self.block(vec![statement], TerminatorKind::Goto { target: BasicBlock::new(6) }, true);\n \n         // BB #9 (resume)\n@@ -748,10 +748,10 @@ fn build_call_shim<'tcx>(\n             let borrow_kind = BorrowKind::Mut { allow_two_phase_borrow: false };\n             statements.push(Statement {\n                 source_info,\n-                kind: StatementKind::Assign(box (\n+                kind: StatementKind::Assign(Box::new((\n                     Place::from(ref_rcvr),\n                     Rvalue::Ref(tcx.lifetimes.re_erased, borrow_kind, rcvr_place()),\n-                )),\n+                ))),\n             });\n             Operand::Move(Place::from(ref_rcvr))\n         }\n@@ -765,11 +765,11 @@ fn build_call_shim<'tcx>(\n         CallKind::Direct(def_id) => {\n             let ty = tcx.type_of(def_id);\n             (\n-                Operand::Constant(box Constant {\n+                Operand::Constant(Box::new(Constant {\n                     span,\n                     user_ty: None,\n                     literal: ty::Const::zero_sized(tcx, ty).into(),\n-                }),\n+                })),\n                 rcvr.into_iter().collect::<Vec<_>>(),\n             )\n         }"}, {"sha": "cb608819ea8acd5def7099ad8c6cc9bf06278ed4", "filename": "compiler/rustc_mir/src/transform/add_retag.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fadd_retag.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -105,7 +105,7 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n                 0..0,\n                 places.map(|place| Statement {\n                     source_info,\n-                    kind: StatementKind::Retag(RetagKind::FnEntry, box (place)),\n+                    kind: StatementKind::Retag(RetagKind::FnEntry, Box::new(place)),\n                 }),\n             );\n         }\n@@ -137,7 +137,7 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n                 0,\n                 Statement {\n                     source_info,\n-                    kind: StatementKind::Retag(RetagKind::Default, box (dest_place)),\n+                    kind: StatementKind::Retag(RetagKind::Default, Box::new(dest_place)),\n                 },\n             );\n         }\n@@ -175,7 +175,10 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n                 let source_info = block_data.statements[i].source_info;\n                 block_data.statements.insert(\n                     i + 1,\n-                    Statement { source_info, kind: StatementKind::Retag(retag_kind, box (place)) },\n+                    Statement {\n+                        source_info,\n+                        kind: StatementKind::Retag(retag_kind, Box::new(place)),\n+                    },\n                 );\n             }\n         }"}, {"sha": "d78ad6ce97fa23697cb768ba90ed40efecaa81df", "filename": "compiler/rustc_mir/src/transform/coverage/graph.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -491,15 +491,19 @@ fn bcb_filtered_successors<'a, 'tcx>(\n     term_kind: &'tcx TerminatorKind<'tcx>,\n ) -> Box<dyn Iterator<Item = &'a BasicBlock> + 'a> {\n     let mut successors = term_kind.successors();\n-    box match &term_kind {\n-        // SwitchInt successors are never unwind, and all of them should be traversed.\n-        TerminatorKind::SwitchInt { .. } => successors,\n-        // For all other kinds, return only the first successor, if any, and ignore unwinds.\n-        // NOTE: `chain(&[])` is required to coerce the `option::iter` (from\n-        // `next().into_iter()`) into the `mir::Successors` aliased type.\n-        _ => successors.next().into_iter().chain(&[]),\n-    }\n-    .filter(move |&&successor| body[successor].terminator().kind != TerminatorKind::Unreachable)\n+    Box::new(\n+        match &term_kind {\n+            // SwitchInt successors are never unwind, and all of them should be traversed.\n+            TerminatorKind::SwitchInt { .. } => successors,\n+            // For all other kinds, return only the first successor, if any, and ignore unwinds.\n+            // NOTE: `chain(&[])` is required to coerce the `option::iter` (from\n+            // `next().into_iter()`) into the `mir::Successors` aliased type.\n+            _ => successors.next().into_iter().chain(&[]),\n+        }\n+        .filter(move |&&successor| {\n+            body[successor].terminator().kind != TerminatorKind::Unreachable\n+        }),\n+    )\n }\n \n /// Maintains separate worklists for each loop in the BasicCoverageBlock CFG, plus one for the"}, {"sha": "406a8832d267b89c974d2b1a68f02045fc029b79", "filename": "compiler/rustc_mir/src/transform/coverage/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -478,10 +478,10 @@ fn inject_statement(\n     let source_info = data.terminator().source_info;\n     let statement = Statement {\n         source_info,\n-        kind: StatementKind::Coverage(box Coverage {\n+        kind: StatementKind::Coverage(Box::new(Coverage {\n             kind: counter_kind,\n             code_region: some_code_region,\n-        }),\n+        })),\n     };\n     data.statements.insert(0, statement);\n }\n@@ -495,7 +495,7 @@ fn inject_intermediate_expression(mir_body: &mut mir::Body<'tcx>, expression: Co\n     let source_info = data.terminator().source_info;\n     let statement = Statement {\n         source_info,\n-        kind: StatementKind::Coverage(box Coverage { kind: expression, code_region: None }),\n+        kind: StatementKind::Coverage(Box::new(Coverage { kind: expression, code_region: None })),\n     };\n     data.statements.push(statement);\n }"}, {"sha": "14dd0a8b9245bdd83f121f616d6b356443ed53ec", "filename": "compiler/rustc_mir/src/transform/coverage/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Ftests.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -44,11 +44,11 @@ const TEMP_BLOCK: BasicBlock = BasicBlock::MAX;\n \n fn dummy_ty() -> &'static TyS<'static> {\n     thread_local! {\n-        static DUMMY_TYS: &'static TyS<'static> = Box::leak(box TyS::make_for_test(\n+        static DUMMY_TYS: &'static TyS<'static> = Box::leak(Box::new(TyS::make_for_test(\n             ty::Bool,\n             TypeFlags::empty(),\n             DebruijnIndex::from_usize(0),\n-        ));\n+        )));\n     }\n \n     &DUMMY_TYS.with(|tys| *tys)"}, {"sha": "e507bcb0f812c94be1884433e8ad091795270916", "filename": "compiler/rustc_mir/src/transform/early_otherwise_branch.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -96,14 +96,14 @@ impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n                 opt_to_apply.infos[0].first_switch_info.discr_used_in_switch;\n             let not_equal_rvalue = Rvalue::BinaryOp(\n                 not_equal,\n-                box (\n+                Box::new((\n                     Operand::Copy(Place::from(second_discriminant_temp)),\n                     Operand::Copy(first_descriminant_place),\n-                ),\n+                )),\n             );\n             patch.add_statement(\n                 end_of_block_location,\n-                StatementKind::Assign(box (Place::from(not_equal_temp), not_equal_rvalue)),\n+                StatementKind::Assign(Box::new((Place::from(not_equal_temp), not_equal_rvalue))),\n             );\n \n             let new_targets = opt_to_apply"}, {"sha": "9b44af06b7dee5efa298f0b91c88134b9890fc82", "filename": "compiler/rustc_mir/src/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Felaborate_drops.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -409,7 +409,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n         assert!(!data.is_cleanup, \"DropAndReplace in unwind path not supported\");\n \n         let assign = Statement {\n-            kind: StatementKind::Assign(box (place, Rvalue::Use(value.clone()))),\n+            kind: StatementKind::Assign(Box::new((place, Rvalue::Use(value.clone())))),\n             source_info: terminator.source_info,\n         };\n "}, {"sha": "963f93a1acec1d32fd4bc9eace81795dba5f1005", "filename": "compiler/rustc_mir/src/transform/generator.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -274,7 +274,7 @@ impl TransformVisitor<'tcx> {\n         Statement {\n             source_info,\n             kind: StatementKind::SetDiscriminant {\n-                place: box self_place,\n+                place: Box::new(self_place),\n                 variant_index: state_disc,\n             },\n         }\n@@ -289,7 +289,7 @@ impl TransformVisitor<'tcx> {\n         let self_place = Place::from(SELF_ARG);\n         let assign = Statement {\n             source_info: SourceInfo::outermost(body.span),\n-            kind: StatementKind::Assign(box (temp, Rvalue::Discriminant(self_place))),\n+            kind: StatementKind::Assign(Box::new((temp, Rvalue::Discriminant(self_place)))),\n         };\n         (assign, temp)\n     }\n@@ -954,7 +954,7 @@ fn create_generator_drop_shim<'tcx>(\n             0,\n             Statement {\n                 source_info,\n-                kind: StatementKind::Retag(RetagKind::Raw, box Place::from(SELF_ARG)),\n+                kind: StatementKind::Retag(RetagKind::Raw, Box::new(Place::from(SELF_ARG))),\n             },\n         )\n     }\n@@ -984,11 +984,11 @@ fn insert_panic_block<'tcx>(\n ) -> BasicBlock {\n     let assert_block = BasicBlock::new(body.basic_blocks().len());\n     let term = TerminatorKind::Assert {\n-        cond: Operand::Constant(box Constant {\n+        cond: Operand::Constant(Box::new(Constant {\n             span: body.span,\n             user_ty: None,\n             literal: ty::Const::from_bool(tcx, false).into(),\n-        }),\n+        })),\n         expected: true,\n         msg: message,\n         target: assert_block,\n@@ -1207,10 +1207,10 @@ fn create_cases<'tcx>(\n                     let resume_arg = Local::new(2); // 0 = return, 1 = self\n                     statements.push(Statement {\n                         source_info,\n-                        kind: StatementKind::Assign(box (\n+                        kind: StatementKind::Assign(Box::new((\n                             point.resume_arg,\n                             Rvalue::Use(Operand::Move(resume_arg.into())),\n-                        )),\n+                        ))),\n                     });\n                 }\n \n@@ -1287,10 +1287,10 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n             0,\n             Statement {\n                 source_info,\n-                kind: StatementKind::Assign(box (\n+                kind: StatementKind::Assign(Box::new((\n                     new_resume_local.into(),\n                     Rvalue::Use(Operand::Move(resume_local.into())),\n-                )),\n+                ))),\n             },\n         );\n "}, {"sha": "c333667b3ad135490357a6fc74e15925409dc072", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -520,7 +520,7 @@ impl Inliner<'tcx> {\n                         let temp = Place::from(self.new_call_temp(caller_body, &callsite, dest_ty));\n                         caller_body[callsite.block].statements.push(Statement {\n                             source_info: callsite.source_info,\n-                            kind: StatementKind::Assign(box (temp, dest)),\n+                            kind: StatementKind::Assign(Box::new((temp, dest))),\n                         });\n                         self.tcx.mk_place_deref(temp)\n                     } else {\n@@ -729,7 +729,7 @@ impl Inliner<'tcx> {\n         let local = self.new_call_temp(caller_body, callsite, arg_ty);\n         caller_body[callsite.block].statements.push(Statement {\n             source_info: callsite.source_info,\n-            kind: StatementKind::Assign(box (Place::from(local), Rvalue::Use(arg))),\n+            kind: StatementKind::Assign(Box::new((Place::from(local), Rvalue::Use(arg)))),\n         });\n         local\n     }"}, {"sha": "805f546104caede090a29ee3b99d0d597a2dbaf6", "filename": "compiler/rustc_mir/src/transform/instcombine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -124,7 +124,7 @@ impl<'tcx, 'a> InstCombineContext<'tcx, 'a> {\n \n                 let constant =\n                     Constant { span: source_info.span, literal: len.into(), user_ty: None };\n-                *rvalue = Rvalue::Use(Operand::Constant(box constant));\n+                *rvalue = Rvalue::Use(Operand::Constant(Box::new(constant)));\n             }\n         }\n     }"}, {"sha": "e9f1d4f2ce827f7cb54437ba1ab943007de16b2a", "filename": "compiler/rustc_mir/src/transform/lower_intrinsics.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -29,14 +29,14 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                         if let Some((destination, target)) = *destination {\n                             block.statements.push(Statement {\n                                 source_info: terminator.source_info,\n-                                kind: StatementKind::Assign(box (\n+                                kind: StatementKind::Assign(Box::new((\n                                     destination,\n-                                    Rvalue::Use(Operand::Constant(box Constant {\n+                                    Rvalue::Use(Operand::Constant(Box::new(Constant {\n                                         span: terminator.source_info.span,\n                                         user_ty: None,\n                                         literal: ty::Const::zero_sized(tcx, tcx.types.unit).into(),\n-                                    })),\n-                                )),\n+                                    }))),\n+                                ))),\n                             });\n                             terminator.kind = TerminatorKind::Goto { target };\n                         }\n@@ -46,13 +46,13 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                         let mut args = args.drain(..);\n                         block.statements.push(Statement {\n                             source_info: terminator.source_info,\n-                            kind: StatementKind::CopyNonOverlapping(\n-                                box rustc_middle::mir::CopyNonOverlapping {\n+                            kind: StatementKind::CopyNonOverlapping(Box::new(\n+                                rustc_middle::mir::CopyNonOverlapping {\n                                     src: args.next().unwrap(),\n                                     dst: args.next().unwrap(),\n                                     count: args.next().unwrap(),\n                                 },\n-                            ),\n+                            )),\n                         });\n                         assert_eq!(\n                             args.next(),\n@@ -79,10 +79,10 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                             };\n                             block.statements.push(Statement {\n                                 source_info: terminator.source_info,\n-                                kind: StatementKind::Assign(box (\n+                                kind: StatementKind::Assign(Box::new((\n                                     destination,\n-                                    Rvalue::BinaryOp(bin_op, box (lhs, rhs)),\n-                                )),\n+                                    Rvalue::BinaryOp(bin_op, Box::new((lhs, rhs))),\n+                                ))),\n                             });\n                             terminator.kind = TerminatorKind::Goto { target };\n                         }\n@@ -97,10 +97,10 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                             let tp_ty = substs.type_at(0);\n                             block.statements.push(Statement {\n                                 source_info: terminator.source_info,\n-                                kind: StatementKind::Assign(box (\n+                                kind: StatementKind::Assign(Box::new((\n                                     destination,\n                                     Rvalue::NullaryOp(NullOp::SizeOf, tp_ty),\n-                                )),\n+                                ))),\n                             });\n                             terminator.kind = TerminatorKind::Goto { target };\n                         }\n@@ -112,10 +112,10 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                             let arg = tcx.mk_place_deref(arg);\n                             block.statements.push(Statement {\n                                 source_info: terminator.source_info,\n-                                kind: StatementKind::Assign(box (\n+                                kind: StatementKind::Assign(Box::new((\n                                     destination,\n                                     Rvalue::Discriminant(arg),\n-                                )),\n+                                ))),\n                             });\n                             terminator.kind = TerminatorKind::Goto { target };\n                         }"}, {"sha": "37a3fa50a52ddc6212b8bceacbaeff9907ba89b8", "filename": "compiler/rustc_mir/src/transform/match_branches.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -140,11 +140,11 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n                             let op = if f_b { BinOp::Eq } else { BinOp::Ne };\n                             let rhs = Rvalue::BinaryOp(\n                                 op,\n-                                box (Operand::Copy(Place::from(discr_local)), const_cmp),\n+                                Box::new((Operand::Copy(Place::from(discr_local)), const_cmp)),\n                             );\n                             Statement {\n                                 source_info: f.source_info,\n-                                kind: StatementKind::Assign(box (*lhs, rhs)),\n+                                kind: StatementKind::Assign(Box::new((*lhs, rhs))),\n                             }\n                         }\n                     }\n@@ -157,7 +157,10 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n                 .push(Statement { source_info, kind: StatementKind::StorageLive(discr_local) });\n             from.statements.push(Statement {\n                 source_info,\n-                kind: StatementKind::Assign(box (Place::from(discr_local), Rvalue::Use(discr))),\n+                kind: StatementKind::Assign(Box::new((\n+                    Place::from(discr_local),\n+                    Rvalue::Use(discr),\n+                ))),\n             });\n             from.statements.extend(new_stmts);\n             from.statements"}, {"sha": "822b422985cb3e009f9016f2cd619e11dc71849e", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -719,7 +719,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n         let data = &mut self.promoted[last];\n         data.statements.push(Statement {\n             source_info: SourceInfo::outermost(span),\n-            kind: StatementKind::Assign(box (Place::from(dest), rvalue)),\n+            kind: StatementKind::Assign(Box::new((Place::from(dest), rvalue))),\n         });\n     }\n \n@@ -774,11 +774,11 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                     if self.keep_original {\n                         rhs.clone()\n                     } else {\n-                        let unit = Rvalue::Use(Operand::Constant(box Constant {\n+                        let unit = Rvalue::Use(Operand::Constant(Box::new(Constant {\n                             span: statement.source_info.span,\n                             user_ty: None,\n                             literal: ty::Const::zero_sized(self.tcx, self.tcx.types.unit).into(),\n-                        }));\n+                        })));\n                         mem::replace(rhs, unit)\n                     },\n                     statement.source_info,"}, {"sha": "3ecb5133e3b482c90de66670b44f2d9617c2cddd", "filename": "compiler/rustc_mir/src/transform/simplify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -382,10 +382,10 @@ fn save_unreachable_coverage(\n     for (source_info, code_region) in dropped_coverage {\n         start_block.statements.push(Statement {\n             source_info,\n-            kind: StatementKind::Coverage(box Coverage {\n+            kind: StatementKind::Coverage(Box::new(Coverage {\n                 kind: CoverageKind::Unreachable,\n                 code_region: Some(code_region),\n-            }),\n+            })),\n         })\n     }\n }"}, {"sha": "7c35dab694f3cc6968120d66a0c136a08e07c936", "filename": "compiler/rustc_mir/src/transform/simplify_try.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -420,10 +420,10 @@ impl<'tcx> MirPass<'tcx> for SimplifyArmIdentity {\n \n                 let stmt = &mut bb.statements[opt_info.stmt_to_overwrite];\n                 stmt.source_info = opt_info.source_info;\n-                stmt.kind = StatementKind::Assign(box (\n+                stmt.kind = StatementKind::Assign(Box::new((\n                     opt_info.local_0.into(),\n                     Rvalue::Use(Operand::Move(opt_info.local_1.into())),\n-                ));\n+                )));\n \n                 bb.statements.retain(|stmt| stmt.kind != StatementKind::Nop);\n "}, {"sha": "4bc0357cab8047c65b2defe905c5ad78d86b29ea", "filename": "compiler/rustc_mir/src/util/aggregate.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Futil%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Futil%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Faggregate.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -25,7 +25,7 @@ pub fn expand_aggregate<'tcx>(\n         AggregateKind::Adt(adt_def, variant_index, _, _, active_field_index) => {\n             if adt_def.is_enum() {\n                 set_discriminant = Some(Statement {\n-                    kind: StatementKind::SetDiscriminant { place: box (lhs), variant_index },\n+                    kind: StatementKind::SetDiscriminant { place: Box::new(lhs), variant_index },\n                     source_info,\n                 });\n                 lhs = tcx.mk_place_downcast(lhs, adt_def, variant_index);\n@@ -37,7 +37,7 @@ pub fn expand_aggregate<'tcx>(\n             // variant 0 (Unresumed).\n             let variant_index = VariantIdx::new(0);\n             set_discriminant = Some(Statement {\n-                kind: StatementKind::SetDiscriminant { place: box (lhs), variant_index },\n+                kind: StatementKind::SetDiscriminant { place: Box::new(lhs), variant_index },\n                 source_info,\n             });\n \n@@ -66,7 +66,10 @@ pub fn expand_aggregate<'tcx>(\n                 let field = Field::new(active_field_index.unwrap_or(i));\n                 tcx.mk_place_field(lhs, field, ty)\n             };\n-            Statement { source_info, kind: StatementKind::Assign(box (lhs_field, Rvalue::Use(op))) }\n+            Statement {\n+                source_info,\n+                kind: StatementKind::Assign(Box::new((lhs_field, Rvalue::Use(op)))),\n+            }\n         })\n         .chain(set_discriminant)\n }"}, {"sha": "50756fc15fb85f3c38f0a0e722b06994895ee3a9", "filename": "compiler/rustc_mir/src/util/elaborate_drops.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Felaborate_drops.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -680,12 +680,12 @@ where\n         let (ptr_next, cur_next) = if ptr_based {\n             (\n                 Rvalue::Use(copy(cur.into())),\n-                Rvalue::BinaryOp(BinOp::Offset, box (move_(cur.into()), one)),\n+                Rvalue::BinaryOp(BinOp::Offset, Box::new((move_(cur.into()), one))),\n             )\n         } else {\n             (\n                 Rvalue::AddressOf(Mutability::Mut, tcx.mk_place_index(self.place, cur)),\n-                Rvalue::BinaryOp(BinOp::Add, box (move_(cur.into()), one)),\n+                Rvalue::BinaryOp(BinOp::Add, Box::new((move_(cur.into()), one))),\n             )\n         };\n \n@@ -703,7 +703,10 @@ where\n         let loop_block = BasicBlockData {\n             statements: vec![self.assign(\n                 can_go,\n-                Rvalue::BinaryOp(BinOp::Eq, box (copy(Place::from(cur)), copy(length_or_end))),\n+                Rvalue::BinaryOp(\n+                    BinOp::Eq,\n+                    Box::new((copy(Place::from(cur)), copy(length_or_end))),\n+                ),\n             )],\n             is_cleanup: unwind.is_cleanup(),\n             terminator: Some(Terminator {\n@@ -821,7 +824,7 @@ where\n                     length_or_end,\n                     Rvalue::BinaryOp(\n                         BinOp::Offset,\n-                        box (Operand::Copy(cur), Operand::Move(length)),\n+                        Box::new((Operand::Copy(cur), Operand::Move(length))),\n                     ),\n                 ),\n             ]\n@@ -1032,14 +1035,17 @@ where\n     }\n \n     fn constant_usize(&self, val: u16) -> Operand<'tcx> {\n-        Operand::Constant(box Constant {\n+        Operand::Constant(Box::new(Constant {\n             span: self.source_info.span,\n             user_ty: None,\n             literal: ty::Const::from_usize(self.tcx(), val.into()).into(),\n-        })\n+        }))\n     }\n \n     fn assign(&self, lhs: Place<'tcx>, rhs: Rvalue<'tcx>) -> Statement<'tcx> {\n-        Statement { source_info: self.source_info, kind: StatementKind::Assign(box (lhs, rhs)) }\n+        Statement {\n+            source_info: self.source_info,\n+            kind: StatementKind::Assign(Box::new((lhs, rhs))),\n+        }\n     }\n }"}, {"sha": "1f571a36441be101cd22eed473dd2bac343e488f", "filename": "compiler/rustc_mir/src/util/patch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpatch.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -112,7 +112,7 @@ impl<'tcx> MirPatch<'tcx> {\n     }\n \n     pub fn add_assign(&mut self, loc: Location, place: Place<'tcx>, rv: Rvalue<'tcx>) {\n-        self.add_statement(loc, StatementKind::Assign(box (place, rv)));\n+        self.add_statement(loc, StatementKind::Assign(Box::new((place, rv))));\n     }\n \n     pub fn apply(self, body: &mut Body<'tcx>) {"}, {"sha": "f08c6405af17f2d8fc12236c71b848e66576a3a3", "filename": "compiler/rustc_mir_build/src/build/cfg.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -40,7 +40,7 @@ impl<'tcx> CFG<'tcx> {\n     ) {\n         self.push(\n             block,\n-            Statement { source_info, kind: StatementKind::Assign(box (place, rvalue)) },\n+            Statement { source_info, kind: StatementKind::Assign(Box::new((place, rvalue))) },\n         );\n     }\n \n@@ -51,7 +51,12 @@ impl<'tcx> CFG<'tcx> {\n         temp: Place<'tcx>,\n         constant: Constant<'tcx>,\n     ) {\n-        self.push_assign(block, source_info, temp, Rvalue::Use(Operand::Constant(box constant)));\n+        self.push_assign(\n+            block,\n+            source_info,\n+            temp,\n+            Rvalue::Use(Operand::Constant(Box::new(constant))),\n+        );\n     }\n \n     crate fn push_assign_unit(\n@@ -65,11 +70,11 @@ impl<'tcx> CFG<'tcx> {\n             block,\n             source_info,\n             place,\n-            Rvalue::Use(Operand::Constant(box Constant {\n+            Rvalue::Use(Operand::Constant(Box::new(Constant {\n                 span: source_info.span,\n                 user_ty: None,\n                 literal: ty::Const::zero_sized(tcx, tcx.types.unit).into(),\n-            })),\n+            }))),\n         );\n     }\n \n@@ -80,7 +85,7 @@ impl<'tcx> CFG<'tcx> {\n         cause: FakeReadCause,\n         place: Place<'tcx>,\n     ) {\n-        let kind = StatementKind::FakeRead(box (cause, place));\n+        let kind = StatementKind::FakeRead(Box::new((cause, place)));\n         let stmt = Statement { source_info, kind };\n         self.push(block, stmt);\n     }"}, {"sha": "bbb2f89fda9399fd3cf3c7436b46160ec249a0be", "filename": "compiler/rustc_mir_build/src/build/expr/as_operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -111,7 +111,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         match category {\n             Category::Constant => {\n                 let constant = this.as_constant(expr);\n-                block.and(Operand::Constant(box constant))\n+                block.and(Operand::Constant(Box::new(constant)))\n             }\n             Category::Place | Category::Rvalue(..) => {\n                 let operand = unpack!(block = this.as_temp(block, scope, expr, Mutability::Mut));"}, {"sha": "05995ddcc00513398e1036cb0b7aa9ed0d8518e4", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -507,10 +507,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         Statement {\n                             source_info,\n                             kind: StatementKind::AscribeUserType(\n-                                box (\n+                                Box::new((\n                                     place,\n                                     UserTypeProjection { base: annotation_index, projs: vec![] },\n-                                ),\n+                                )),\n                                 Variance::Invariant,\n                             ),\n                         },\n@@ -534,10 +534,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         Statement {\n                             source_info,\n                             kind: StatementKind::AscribeUserType(\n-                                box (\n+                                Box::new((\n                                     Place::from(temp),\n                                     UserTypeProjection { base: annotation_index, projs: vec![] },\n-                                ),\n+                                )),\n                                 Variance::Invariant,\n                             ),\n                         },\n@@ -691,7 +691,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             lt,\n             Rvalue::BinaryOp(\n                 BinOp::Lt,\n-                box (Operand::Copy(Place::from(index)), Operand::Copy(len)),\n+                Box::new((Operand::Copy(Place::from(index)), Operand::Copy(len))),\n             ),\n         );\n         let msg = BoundsCheck { len: Operand::Move(len), index: Operand::Copy(Place::from(index)) };"}, {"sha": "68de1af613d9f20d7b2e1f18a5082ed8486f2a51", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -73,7 +73,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         block,\n                         source_info,\n                         is_min,\n-                        Rvalue::BinaryOp(BinOp::Eq, box (arg.to_copy(), minval)),\n+                        Rvalue::BinaryOp(BinOp::Eq, Box::new((arg.to_copy(), minval))),\n                     );\n \n                     block = this.assert(\n@@ -158,7 +158,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     .map(|f| unpack!(block = this.as_operand(block, scope, &this.thir[f])))\n                     .collect();\n \n-                block.and(Rvalue::Aggregate(box AggregateKind::Array(el_ty), fields))\n+                block.and(Rvalue::Aggregate(Box::new(AggregateKind::Array(el_ty)), fields))\n             }\n             ExprKind::Tuple { ref fields } => {\n                 // see (*) above\n@@ -169,7 +169,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     .map(|f| unpack!(block = this.as_operand(block, scope, &this.thir[f])))\n                     .collect();\n \n-                block.and(Rvalue::Aggregate(box AggregateKind::Tuple, fields))\n+                block.and(Rvalue::Aggregate(Box::new(AggregateKind::Tuple), fields))\n             }\n             ExprKind::Closure { closure_id, substs, ref upvars, movability, ref fake_reads } => {\n                 // Convert the closure fake reads, if any, from `ExprRef` to mir `Place`\n@@ -254,19 +254,21 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         // We implicitly set the discriminant to 0. See\n                         // librustc_mir/transform/deaggregator.rs for details.\n                         let movability = movability.unwrap();\n-                        box AggregateKind::Generator(closure_id, substs, movability)\n+                        Box::new(AggregateKind::Generator(closure_id, substs, movability))\n+                    }\n+                    UpvarSubsts::Closure(substs) => {\n+                        Box::new(AggregateKind::Closure(closure_id, substs))\n                     }\n-                    UpvarSubsts::Closure(substs) => box AggregateKind::Closure(closure_id, substs),\n                 };\n                 block.and(Rvalue::Aggregate(result, operands))\n             }\n             ExprKind::Assign { .. } | ExprKind::AssignOp { .. } => {\n                 block = unpack!(this.stmt_expr(block, expr, None));\n-                block.and(Rvalue::Use(Operand::Constant(box Constant {\n+                block.and(Rvalue::Use(Operand::Constant(Box::new(Constant {\n                     span: expr_span,\n                     user_ty: None,\n                     literal: ty::Const::zero_sized(this.tcx, this.tcx.types.unit).into(),\n-                })))\n+                }))))\n             }\n             ExprKind::Yield { .. }\n             | ExprKind::Literal { .. }\n@@ -327,7 +329,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 block,\n                 source_info,\n                 result_value,\n-                Rvalue::CheckedBinaryOp(op, box (lhs.to_copy(), rhs.to_copy())),\n+                Rvalue::CheckedBinaryOp(op, Box::new((lhs.to_copy(), rhs.to_copy()))),\n             );\n             let val_fld = Field::new(0);\n             let of_fld = Field::new(1);\n@@ -360,7 +362,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     block,\n                     source_info,\n                     is_zero,\n-                    Rvalue::BinaryOp(BinOp::Eq, box (rhs.to_copy(), zero)),\n+                    Rvalue::BinaryOp(BinOp::Eq, Box::new((rhs.to_copy(), zero))),\n                 );\n \n                 block = self.assert(block, Operand::Move(is_zero), false, zero_err, span);\n@@ -381,13 +383,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         block,\n                         source_info,\n                         is_neg_1,\n-                        Rvalue::BinaryOp(BinOp::Eq, box (rhs.to_copy(), neg_1)),\n+                        Rvalue::BinaryOp(BinOp::Eq, Box::new((rhs.to_copy(), neg_1))),\n                     );\n                     self.cfg.push_assign(\n                         block,\n                         source_info,\n                         is_min,\n-                        Rvalue::BinaryOp(BinOp::Eq, box (lhs.to_copy(), min)),\n+                        Rvalue::BinaryOp(BinOp::Eq, Box::new((lhs.to_copy(), min))),\n                     );\n \n                     let is_neg_1 = Operand::Move(is_neg_1);\n@@ -396,14 +398,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         block,\n                         source_info,\n                         of,\n-                        Rvalue::BinaryOp(BinOp::BitAnd, box (is_neg_1, is_min)),\n+                        Rvalue::BinaryOp(BinOp::BitAnd, Box::new((is_neg_1, is_min))),\n                     );\n \n                     block = self.assert(block, Operand::Move(of), false, overflow_err, span);\n                 }\n             }\n \n-            block.and(Rvalue::BinaryOp(op, box (lhs, rhs)))\n+            block.and(Rvalue::BinaryOp(op, Box::new((lhs, rhs))))\n         }\n     }\n "}, {"sha": "32373f1bef7b39aa09f6c33afeac5353a063ff2c", "filename": "compiler/rustc_mir_build/src/build/expr/as_temp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -62,16 +62,16 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     assert!(!this.tcx.is_thread_local_static(def_id));\n                     local_decl.internal = true;\n                     local_decl.local_info =\n-                        Some(box LocalInfo::StaticRef { def_id, is_thread_local: false });\n+                        Some(Box::new(LocalInfo::StaticRef { def_id, is_thread_local: false }));\n                 }\n                 ExprKind::ThreadLocalRef(def_id) => {\n                     assert!(this.tcx.is_thread_local_static(def_id));\n                     local_decl.internal = true;\n                     local_decl.local_info =\n-                        Some(box LocalInfo::StaticRef { def_id, is_thread_local: true });\n+                        Some(Box::new(LocalInfo::StaticRef { def_id, is_thread_local: true }));\n                 }\n                 ExprKind::Literal { const_id: Some(def_id), .. } => {\n-                    local_decl.local_info = Some(box LocalInfo::ConstRef { def_id });\n+                    local_decl.local_info = Some(Box::new(LocalInfo::ConstRef { def_id }));\n                 }\n                 _ => {}\n             }"}, {"sha": "b2e03f13479075b3324e660a51a26a470e69520c", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -346,13 +346,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         inferred_ty,\n                     })\n                 });\n-                let adt = box AggregateKind::Adt(\n+                let adt = Box::new(AggregateKind::Adt(\n                     adt_def,\n                     variant_index,\n                     substs,\n                     user_ty,\n                     active_field_index,\n-                );\n+                ));\n                 this.cfg.push_assign(\n                     block,\n                     source_info,\n@@ -403,11 +403,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         }\n                         thir::InlineAsmOperand::Const { value, span } => {\n                             mir::InlineAsmOperand::Const {\n-                                value: box Constant { span, user_ty: None, literal: value.into() },\n+                                value: Box::new(Constant {\n+                                    span,\n+                                    user_ty: None,\n+                                    literal: value.into(),\n+                                }),\n                             }\n                         }\n                         thir::InlineAsmOperand::SymFn { expr } => mir::InlineAsmOperand::SymFn {\n-                            value: box this.as_constant(&this.thir[expr]),\n+                            value: Box::new(this.as_constant(&this.thir[expr])),\n                         },\n                         thir::InlineAsmOperand::SymStatic { def_id } => {\n                             mir::InlineAsmOperand::SymStatic { def_id }"}, {"sha": "4245535450a27490e5de6fdaab206435b732ae3a", "filename": "compiler/rustc_mir_build/src/build/expr/stmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -123,11 +123,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     block,\n                     Statement {\n                         source_info,\n-                        kind: StatementKind::LlvmInlineAsm(box LlvmInlineAsm {\n+                        kind: StatementKind::LlvmInlineAsm(Box::new(LlvmInlineAsm {\n                             asm: asm.clone(),\n                             outputs,\n                             inputs,\n-                        }),\n+                        })),\n                     },\n                 );\n                 this.block_context.pop();"}, {"sha": "6e16ee94c50e04b78538f96ea1f4f3ca68d7804e", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -494,7 +494,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     Statement {\n                         source_info: ty_source_info,\n                         kind: StatementKind::AscribeUserType(\n-                            box (place, user_ty),\n+                            Box::new((place, user_ty)),\n                             // We always use invariant as the variance here. This is because the\n                             // variance field from the ascription refers to the variance to use\n                             // when applying the type to the value being matched, but this\n@@ -2004,7 +2004,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 Statement {\n                     source_info,\n                     kind: StatementKind::AscribeUserType(\n-                        box (ascription.source, user_ty),\n+                        Box::new((ascription.source, user_ty)),\n                         ascription.variance,\n                     ),\n                 },\n@@ -2133,11 +2133,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let local = LocalDecl::<'tcx> {\n             mutability,\n             ty: var_ty,\n-            user_ty: if user_ty.is_empty() { None } else { Some(box user_ty) },\n+            user_ty: if user_ty.is_empty() { None } else { Some(Box::new(user_ty)) },\n             source_info,\n             internal: false,\n             is_block_tail: None,\n-            local_info: Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n+            local_info: Some(Box::new(LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n                 VarBindingForm {\n                     binding_mode,\n                     // hypothetically, `visit_primary_bindings` could try to unzip\n@@ -2148,7 +2148,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     opt_match_place,\n                     pat_span,\n                 },\n-            )))),\n+            ))))),\n         };\n         let for_arm_body = self.local_decls.push(local);\n         self.var_debug_info.push(VarDebugInfo {\n@@ -2166,9 +2166,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 source_info,\n                 internal: false,\n                 is_block_tail: None,\n-                local_info: Some(box LocalInfo::User(ClearCrossCrate::Set(\n+                local_info: Some(Box::new(LocalInfo::User(ClearCrossCrate::Set(\n                     BindingForm::RefForGuard,\n-                ))),\n+                )))),\n             });\n             self.var_debug_info.push(VarDebugInfo {\n                 name,"}, {"sha": "42d062c93e9d2e79763f80a3293f86f97b700845", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -346,7 +346,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let result = self.temp(bool_ty, source_info.span);\n \n         // result = op(left, right)\n-        self.cfg.push_assign(block, source_info, result, Rvalue::BinaryOp(op, box (left, right)));\n+        self.cfg.push_assign(\n+            block,\n+            source_info,\n+            result,\n+            Rvalue::BinaryOp(op, Box::new((left, right))),\n+        );\n \n         // branch based on result\n         self.cfg.terminate(\n@@ -429,7 +434,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             block,\n             source_info,\n             TerminatorKind::Call {\n-                func: Operand::Constant(box Constant {\n+                func: Operand::Constant(Box::new(Constant {\n                     span: source_info.span,\n \n                     // FIXME(#54571): This constant comes from user input (a\n@@ -439,7 +444,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     user_ty: None,\n \n                     literal: method.into(),\n-                }),\n+                })),\n                 args: vec![val, expect],\n                 destination: Some((eq_result, eq_block)),\n                 cleanup: None,"}, {"sha": "78047daf0ad00f52770da2254b4d0645c503f4a1", "filename": "compiler/rustc_mir_build/src/build/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmisc.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -31,7 +31,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         literal: &'tcx ty::Const<'tcx>,\n     ) -> Operand<'tcx> {\n         let literal = literal.into();\n-        let constant = box Constant { span, user_ty: None, literal };\n+        let constant = Box::new(Constant { span, user_ty: None, literal });\n         Operand::Constant(constant)\n     }\n "}, {"sha": "988cc6254229b38e73f645bfcc04afc19af167c4", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -980,19 +980,19 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         self.local_decls[local].mutability = mutability;\n                         self.local_decls[local].source_info.scope = self.source_scope;\n                         self.local_decls[local].local_info = if let Some(kind) = self_binding {\n-                            Some(box LocalInfo::User(ClearCrossCrate::Set(\n+                            Some(Box::new(LocalInfo::User(ClearCrossCrate::Set(\n                                 BindingForm::ImplicitSelf(*kind),\n-                            )))\n+                            ))))\n                         } else {\n                             let binding_mode = ty::BindingMode::BindByValue(mutability);\n-                            Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n+                            Some(Box::new(LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n                                 VarBindingForm {\n                                     binding_mode,\n                                     opt_ty_info,\n                                     opt_match_place: Some((Some(place), span)),\n                                     pat_span: span,\n                                 },\n-                            ))))\n+                            )))))\n                         };\n                         self.var_indices.insert(var, LocalsForNode::One(local));\n                     }"}, {"sha": "02023c48a6c98d0371666340c32fff6bb2d1c21a", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -2,7 +2,6 @@\n //!\n //! This crate also contains the match exhaustiveness and usefulness checking.\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n #![feature(control_flow_enum)]\n #![feature(crate_visibility_modifier)]\n #![feature(bool_to_option)]"}, {"sha": "6bbf1faf4837fc2b03c0a68788484e8b2830dc62", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -132,7 +132,7 @@ impl<'tcx> Cx<'tcx> {\n                     },\n                 };\n \n-                let expr = box [self.thir.exprs.push(expr)];\n+                let expr = Box::new([self.thir.exprs.push(expr)]);\n \n                 self.overloaded_place(hir_expr, adjustment.target, Some(call), expr, deref.span)\n             }\n@@ -190,7 +190,7 @@ impl<'tcx> Cx<'tcx> {\n                     ExprKind::Call {\n                         ty: method.ty,\n                         fun: self.thir.exprs.push(method),\n-                        args: box [self.mirror_expr(fun), tupled_args],\n+                        args: Box::new([self.mirror_expr(fun), tupled_args]),\n                         from_hir_call: true,\n                         fn_span: expr.span,\n                     }\n@@ -266,7 +266,7 @@ impl<'tcx> Cx<'tcx> {\n                 if self.typeck_results().is_method_call(expr) {\n                     let lhs = self.mirror_expr(lhs);\n                     let rhs = self.mirror_expr(rhs);\n-                    self.overloaded_operator(expr, box [lhs, rhs])\n+                    self.overloaded_operator(expr, Box::new([lhs, rhs]))\n                 } else {\n                     ExprKind::AssignOp {\n                         op: bin_op(op.node),\n@@ -286,7 +286,7 @@ impl<'tcx> Cx<'tcx> {\n                 if self.typeck_results().is_method_call(expr) {\n                     let lhs = self.mirror_expr(lhs);\n                     let rhs = self.mirror_expr(rhs);\n-                    self.overloaded_operator(expr, box [lhs, rhs])\n+                    self.overloaded_operator(expr, Box::new([lhs, rhs]))\n                 } else {\n                     // FIXME overflow\n                     match op.node {\n@@ -317,7 +317,7 @@ impl<'tcx> Cx<'tcx> {\n                 if self.typeck_results().is_method_call(expr) {\n                     let lhs = self.mirror_expr(lhs);\n                     let index = self.mirror_expr(index);\n-                    self.overloaded_place(expr, expr_ty, None, box [lhs, index], expr.span)\n+                    self.overloaded_place(expr, expr_ty, None, Box::new([lhs, index]), expr.span)\n                 } else {\n                     ExprKind::Index { lhs: self.mirror_expr(lhs), index: self.mirror_expr(index) }\n                 }\n@@ -326,7 +326,7 @@ impl<'tcx> Cx<'tcx> {\n             hir::ExprKind::Unary(hir::UnOp::Deref, ref arg) => {\n                 if self.typeck_results().is_method_call(expr) {\n                     let arg = self.mirror_expr(arg);\n-                    self.overloaded_place(expr, expr_ty, None, box [arg], expr.span)\n+                    self.overloaded_place(expr, expr_ty, None, Box::new([arg]), expr.span)\n                 } else {\n                     ExprKind::Deref { arg: self.mirror_expr(arg) }\n                 }\n@@ -335,7 +335,7 @@ impl<'tcx> Cx<'tcx> {\n             hir::ExprKind::Unary(hir::UnOp::Not, ref arg) => {\n                 if self.typeck_results().is_method_call(expr) {\n                     let arg = self.mirror_expr(arg);\n-                    self.overloaded_operator(expr, box [arg])\n+                    self.overloaded_operator(expr, Box::new([arg]))\n                 } else {\n                     ExprKind::Unary { op: UnOp::Not, arg: self.mirror_expr(arg) }\n                 }\n@@ -344,7 +344,7 @@ impl<'tcx> Cx<'tcx> {\n             hir::ExprKind::Unary(hir::UnOp::Neg, ref arg) => {\n                 if self.typeck_results().is_method_call(expr) {\n                     let arg = self.mirror_expr(arg);\n-                    self.overloaded_operator(expr, box [arg])\n+                    self.overloaded_operator(expr, Box::new([arg]))\n                 } else if let hir::ExprKind::Lit(ref lit) = arg.kind {\n                     ExprKind::Literal {\n                         literal: self.const_eval_literal(&lit.node, expr_ty, lit.span, true),\n@@ -914,7 +914,7 @@ impl<'tcx> Cx<'tcx> {\n                         variant_index: adt_def.variant_index_with_ctor_id(def_id),\n                         substs,\n                         user_ty: user_provided_type,\n-                        fields: box [],\n+                        fields: Box::new([]),\n                         base: None,\n                     })),\n                     _ => bug!(\"unexpected ty: {:?}\", ty),"}, {"sha": "5221ced1078b37ec5752b11f70d55f5e8a868d3e", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -600,7 +600,7 @@ crate trait PatternFolder<'tcx>: Sized {\n impl<'tcx, T: PatternFoldable<'tcx>> PatternFoldable<'tcx> for Box<T> {\n     fn super_fold_with<F: PatternFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         let content: T = (**self).fold_with(folder);\n-        box content\n+        Box::new(content)\n     }\n }\n "}, {"sha": "611d72e61d01607759dca96cac45773c8ae0b433", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -3,7 +3,6 @@\n #![feature(array_windows)]\n #![feature(crate_visibility_modifier)]\n #![cfg_attr(bootstrap, feature(bindings_after_at))]\n-#![feature(box_syntax)]\n #![feature(box_patterns)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "e5537d43ebaa1ef7c5225dc3861cce7ac3b5932f", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -221,7 +221,7 @@ impl<'a> Parser<'a> {\n         } else if self.check_fn_front_matter(def_final) {\n             // FUNCTION ITEM\n             let (ident, sig, generics, body) = self.parse_fn(attrs, req_name, lo)?;\n-            (ident, ItemKind::Fn(box FnKind(def(), sig, generics, body)))\n+            (ident, ItemKind::Fn(Box::new(FnKind(def(), sig, generics, body))))\n         } else if self.eat_keyword(kw::Extern) {\n             if self.eat_keyword(kw::Crate) {\n                 // EXTERN CRATE\n@@ -548,7 +548,7 @@ impl<'a> Parser<'a> {\n                 };\n                 let trait_ref = TraitRef { path, ref_id: ty_first.id };\n \n-                ItemKind::Impl(box ImplKind {\n+                ItemKind::Impl(Box::new(ImplKind {\n                     unsafety,\n                     polarity,\n                     defaultness,\n@@ -557,11 +557,11 @@ impl<'a> Parser<'a> {\n                     of_trait: Some(trait_ref),\n                     self_ty: ty_second,\n                     items: impl_items,\n-                })\n+                }))\n             }\n             None => {\n                 // impl Type\n-                ItemKind::Impl(box ImplKind {\n+                ItemKind::Impl(Box::new(ImplKind {\n                     unsafety,\n                     polarity,\n                     defaultness,\n@@ -570,7 +570,7 @@ impl<'a> Parser<'a> {\n                     of_trait: None,\n                     self_ty: ty_first,\n                     items: impl_items,\n-                })\n+                }))\n             }\n         };\n \n@@ -710,7 +710,7 @@ impl<'a> Parser<'a> {\n             // It's a normal trait.\n             tps.where_clause = self.parse_where_clause()?;\n             let items = self.parse_item_list(attrs, |p| p.parse_trait_item(ForceCollect::No))?;\n-            Ok((ident, ItemKind::Trait(box TraitKind(is_auto, unsafety, tps, bounds, items))))\n+            Ok((ident, ItemKind::Trait(Box::new(TraitKind(is_auto, unsafety, tps, bounds, items)))))\n         }\n     }\n \n@@ -769,7 +769,7 @@ impl<'a> Parser<'a> {\n         let default = if self.eat(&token::Eq) { Some(self.parse_ty()?) } else { None };\n         self.expect_semi()?;\n \n-        Ok((ident, ItemKind::TyAlias(box TyAliasKind(def, generics, bounds, default))))\n+        Ok((ident, ItemKind::TyAlias(Box::new(TyAliasKind(def, generics, bounds, default)))))\n     }\n \n     /// Parses a `UseTree`."}, {"sha": "b31fbab20ac924c0bcd02afe86cd29bb54e206d0", "filename": "compiler/rustc_serialize/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Flib.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -9,7 +9,6 @@ Core encoding and decoding interfaces.\n     html_playground_url = \"https://play.rust-lang.org/\",\n     test(attr(allow(unused_variables), deny(warnings)))\n )]\n-#![feature(box_syntax)]\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(associated_type_bounds)]"}, {"sha": "4d9aaaecec8a8636da6fdfdf92035eeda17c53bd", "filename": "compiler/rustc_serialize/src/serialize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -679,6 +679,6 @@ impl<S: Encoder, T: ?Sized + Encodable<S>> Encodable<S> for Box<T> {\n }\n impl<D: Decoder, T: Decodable<D>> Decodable<D> for Box<T> {\n     fn decode(d: &mut D) -> Result<Box<T>, D::Error> {\n-        Ok(box Decodable::decode(d)?)\n+        Ok(Box::new(Decodable::decode(d)?))\n     }\n }"}, {"sha": "87fd8f1e03bb3b136e48a126dfc15154b6c77afb", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -108,7 +108,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 0 => (arm_span, ObligationCauseCode::BlockTailExpression(arm.body.hir_id)),\n                 _ => (\n                     expr.span,\n-                    ObligationCauseCode::MatchExpressionArm(box MatchExpressionArmCause {\n+                    ObligationCauseCode::MatchExpressionArm(Box::new(MatchExpressionArmCause {\n                         arm_span,\n                         scrut_span: scrut.span,\n                         semi_span,\n@@ -117,7 +117,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         last_ty: prior_arm_ty.unwrap(),\n                         scrut_hir_id: scrut.hir_id,\n                         opt_suggest_box_span,\n-                    }),\n+                    })),\n                 ),\n             };\n             let cause = self.cause(span, code);\n@@ -397,13 +397,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Finally construct the cause:\n         self.cause(\n             error_sp,\n-            ObligationCauseCode::IfExpression(box IfExpressionCause {\n+            ObligationCauseCode::IfExpression(Box::new(IfExpressionCause {\n                 then: then_sp,\n                 else_sp: error_sp,\n                 outer: outer_sp,\n                 semicolon: remove_semicolon,\n                 opt_suggest_box_span,\n-            }),\n+            })),\n         )\n     }\n "}, {"sha": "9ed2a965dbeab08c76f83cbf27793890bee2d5b2", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -58,7 +58,6 @@ This API is completely unstable and subject to change.\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![cfg_attr(bootstrap, feature(bindings_after_at))]\n #![feature(bool_to_option)]\n-#![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]\n #![feature(format_args_capture)]\n #![feature(in_band_lifetimes)]"}, {"sha": "8ad09a9edc01cb3e28712c2cbdb4c119056e7aac", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -114,7 +114,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             attrs: Default::default(),\n             visibility: Inherited,\n             def_id: ItemId::Auto { trait_: trait_def_id, for_: item_def_id },\n-            kind: box ImplItem(Impl {\n+            kind: Box::new(ImplItem(Impl {\n                 span: Span::dummy(),\n                 unsafety: hir::Unsafety::Normal,\n                 generics: new_generics,\n@@ -124,7 +124,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 negative_polarity,\n                 synthetic: true,\n                 blanket_impl: None,\n-            }),\n+            })),\n             cfg: None,\n         })\n     }"}, {"sha": "ff3641d6c9ab05adcf61bdca2a83228f468ef8d9", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -97,7 +97,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                     attrs: Default::default(),\n                     visibility: Inherited,\n                     def_id: ItemId::Blanket { impl_id: impl_def_id, for_: item_def_id },\n-                    kind: box ImplItem(Impl {\n+                    kind: Box::new(ImplItem(Impl {\n                         span: Span::new(self.cx.tcx.def_span(impl_def_id)),\n                         unsafety: hir::Unsafety::Normal,\n                         generics: (\n@@ -118,8 +118,8 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             .clean(self.cx),\n                         negative_polarity: false,\n                         synthetic: false,\n-                        blanket_impl: Some(box trait_ref.self_ty().clean(self.cx)),\n-                    }),\n+                        blanket_impl: Some(Box::new(trait_ref.self_ty().clean(self.cx))),\n+                    })),\n                     cfg: None,\n                 });\n             }"}, {"sha": "fa29b54264948c3554531e3473fa5f5baa442ccd", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -124,8 +124,14 @@ crate fn try_inline(\n \n     let (attrs, cfg) = merge_attrs(cx, Some(parent_module), load_attrs(cx, did), attrs_clone);\n     cx.inlined.insert(did.into());\n-    let mut item =\n-        clean::Item::from_def_id_and_attrs_and_parts(did, Some(name), kind, box attrs, cx, cfg);\n+    let mut item = clean::Item::from_def_id_and_attrs_and_parts(\n+        did,\n+        Some(name),\n+        kind,\n+        Box::new(attrs),\n+        cx,\n+        cfg,\n+    );\n     if let Some(import_def_id) = import_def_id {\n         // The visibility needs to reflect the one from the reexport and not from the \"source\" DefId.\n         item.visibility = cx.tcx.visibility(import_def_id).clean(cx);\n@@ -458,7 +464,7 @@ crate fn build_impl(\n             synthetic: false,\n             blanket_impl: None,\n         }),\n-        box merged_attrs,\n+        Box::new(merged_attrs),\n         cx,\n         cfg,\n     ));\n@@ -486,10 +492,10 @@ fn build_module(\n                 let prim_ty = clean::PrimitiveType::from(p);\n                 items.push(clean::Item {\n                     name: None,\n-                    attrs: box clean::Attributes::default(),\n+                    attrs: Box::new(clean::Attributes::default()),\n                     def_id: ItemId::Primitive(prim_ty, did.krate),\n                     visibility: clean::Public,\n-                    kind: box clean::ImportItem(clean::Import::new_simple(\n+                    kind: Box::new(clean::ImportItem(clean::Import::new_simple(\n                         item.ident.name,\n                         clean::ImportSource {\n                             path: clean::Path {\n@@ -506,7 +512,7 @@ fn build_module(\n                             did: None,\n                         },\n                         true,\n-                    )),\n+                    ))),\n                     cfg: None,\n                 });\n             } else if let Some(i) ="}, {"sha": "73b5ef0857d4fcb05fea16a6e3d07d56cf5ebc30", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -403,8 +403,8 @@ impl<'tcx> Clean<Type> for ty::ProjectionTy<'tcx> {\n         Type::QPath {\n             name: cx.tcx.associated_item(self.item_def_id).ident.name,\n             self_def_id: self_type.def_id(),\n-            self_type: box self_type,\n-            trait_: box trait_,\n+            self_type: Box::new(self_type),\n+            trait_: Box::new(trait_),\n         }\n     }\n }\n@@ -1305,8 +1305,8 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &mut DocContext<'_>) -> Type {\n             Type::QPath {\n                 name: p.segments.last().expect(\"segments were empty\").ident.name,\n                 self_def_id: Some(DefId::local(qself.hir_id.owner.local_def_index)),\n-                self_type: box qself.clean(cx),\n-                trait_: box resolve_type(cx, trait_path, hir_id),\n+                self_type: Box::new(qself.clean(cx)),\n+                trait_: Box::new(resolve_type(cx, trait_path, hir_id)),\n             }\n         }\n         hir::QPath::TypeRelative(ref qself, ref segment) => {\n@@ -1320,8 +1320,8 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &mut DocContext<'_>) -> Type {\n             Type::QPath {\n                 name: segment.ident.name,\n                 self_def_id: res.opt_def_id(),\n-                self_type: box qself.clean(cx),\n-                trait_: box resolve_type(cx, trait_path, hir_id),\n+                self_type: Box::new(qself.clean(cx)),\n+                trait_: Box::new(resolve_type(cx, trait_path, hir_id)),\n             }\n         }\n         hir::QPath::LangItem(..) => bug!(\"clean: requiring documentation of lang item\"),\n@@ -1334,7 +1334,7 @@ impl Clean<Type> for hir::Ty<'_> {\n \n         match self.kind {\n             TyKind::Never => Never,\n-            TyKind::Ptr(ref m) => RawPointer(m.mutbl, box m.ty.clean(cx)),\n+            TyKind::Ptr(ref m) => RawPointer(m.mutbl, Box::new(m.ty.clean(cx))),\n             TyKind::Rptr(ref l, ref m) => {\n                 // There are two times a `Fresh` lifetime can be created:\n                 // 1. For `&'_ x`, written by the user. This corresponds to `lower_lifetime` in `rustc_ast_lowering`.\n@@ -1346,9 +1346,9 @@ impl Clean<Type> for hir::Ty<'_> {\n                 let elided =\n                     l.is_elided() || matches!(l.name, LifetimeName::Param(ParamName::Fresh(_)));\n                 let lifetime = if elided { None } else { Some(l.clean(cx)) };\n-                BorrowedRef { lifetime, mutability: m.mutbl, type_: box m.ty.clean(cx) }\n+                BorrowedRef { lifetime, mutability: m.mutbl, type_: Box::new(m.ty.clean(cx)) }\n             }\n-            TyKind::Slice(ref ty) => Slice(box ty.clean(cx)),\n+            TyKind::Slice(ref ty) => Slice(Box::new(ty.clean(cx))),\n             TyKind::Array(ref ty, ref length) => {\n                 let def_id = cx.tcx.hir().local_def_id(length.hir_id);\n                 // NOTE(min_const_generics): We can't use `const_eval_poly` for constants\n@@ -1361,7 +1361,7 @@ impl Clean<Type> for hir::Ty<'_> {\n                 let ct = ty::Const::from_anon_const(cx.tcx, def_id);\n                 let param_env = cx.tcx.param_env(def_id);\n                 let length = print_const(cx, ct.eval(cx.tcx, param_env));\n-                Array(box ty.clean(cx), length)\n+                Array(Box::new(ty.clean(cx)), length)\n             }\n             TyKind::Tup(ref tys) => Tuple(tys.clean(cx)),\n             TyKind::OpaqueDef(item_id, _) => {\n@@ -1378,7 +1378,7 @@ impl Clean<Type> for hir::Ty<'_> {\n                 let lifetime = if !lifetime.is_elided() { Some(lifetime.clean(cx)) } else { None };\n                 DynTrait(bounds, lifetime)\n             }\n-            TyKind::BareFn(ref barefn) => BareFunction(box barefn.clean(cx)),\n+            TyKind::BareFn(ref barefn) => BareFunction(Box::new(barefn.clean(cx))),\n             TyKind::Infer | TyKind::Err => Infer,\n             TyKind::Typeof(..) => panic!(\"unimplemented type {:?}\", self.kind),\n         }\n@@ -1428,27 +1428,29 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n             ty::Uint(uint_ty) => Primitive(uint_ty.into()),\n             ty::Float(float_ty) => Primitive(float_ty.into()),\n             ty::Str => Primitive(PrimitiveType::Str),\n-            ty::Slice(ty) => Slice(box ty.clean(cx)),\n+            ty::Slice(ty) => Slice(Box::new(ty.clean(cx))),\n             ty::Array(ty, n) => {\n                 let mut n = cx.tcx.lift(n).expect(\"array lift failed\");\n                 n = n.eval(cx.tcx, ty::ParamEnv::reveal_all());\n                 let n = print_const(cx, n);\n-                Array(box ty.clean(cx), n)\n-            }\n-            ty::RawPtr(mt) => RawPointer(mt.mutbl, box mt.ty.clean(cx)),\n-            ty::Ref(r, ty, mutbl) => {\n-                BorrowedRef { lifetime: r.clean(cx), mutability: mutbl, type_: box ty.clean(cx) }\n+                Array(Box::new(ty.clean(cx)), n)\n             }\n+            ty::RawPtr(mt) => RawPointer(mt.mutbl, Box::new(mt.ty.clean(cx))),\n+            ty::Ref(r, ty, mutbl) => BorrowedRef {\n+                lifetime: r.clean(cx),\n+                mutability: mutbl,\n+                type_: Box::new(ty.clean(cx)),\n+            },\n             ty::FnDef(..) | ty::FnPtr(_) => {\n                 let ty = cx.tcx.lift(*self).expect(\"FnPtr lift failed\");\n                 let sig = ty.fn_sig(cx.tcx);\n                 let def_id = DefId::local(CRATE_DEF_INDEX);\n-                BareFunction(box BareFunctionDecl {\n+                BareFunction(Box::new(BareFunctionDecl {\n                     unsafety: sig.unsafety(),\n                     generic_params: Vec::new(),\n                     decl: (def_id, sig).clean(cx),\n                     abi: sig.abi(),\n-                })\n+                }))\n             }\n             ty::Adt(def, substs) => {\n                 let did = def.did;\n@@ -1988,10 +1990,10 @@ fn clean_extern_crate(\n     // FIXME: using `from_def_id_and_kind` breaks `rustdoc/masked` for some reason\n     vec![Item {\n         name: Some(name),\n-        attrs: box attrs.clean(cx),\n+        attrs: Box::new(attrs.clean(cx)),\n         def_id: crate_def_id.into(),\n         visibility: krate.vis.clean(cx),\n-        kind: box ExternCrateItem { src: orig_name },\n+        kind: Box::new(ExternCrateItem { src: orig_name }),\n         cfg: attrs.cfg(cx.sess()),\n     }]\n }"}, {"sha": "782ff8df17b581583276be828752b19bef3c6115", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -416,7 +416,7 @@ impl Item {\n             def_id,\n             name,\n             kind,\n-            box ast_attrs.clean(cx),\n+            Box::new(ast_attrs.clean(cx)),\n             cx,\n             ast_attrs.cfg(cx.sess()),\n         )\n@@ -434,7 +434,7 @@ impl Item {\n \n         Item {\n             def_id: def_id.into(),\n-            kind: box kind,\n+            kind: Box::new(kind),\n             name,\n             attrs,\n             visibility: cx.tcx.visibility(def_id).clean(cx),"}, {"sha": "512c4ed2d3cd6ff934009e26fa8f8b8b75fbfbe3", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -265,7 +265,7 @@ crate fn create_config(\n         stderr: None,\n         lint_caps,\n         parse_sess_created: None,\n-        register_lints: Some(box crate::lint::register_lints),\n+        register_lints: Some(Box::new(crate::lint::register_lints)),\n         override_queries: Some(|_sess, providers, _external_providers| {\n             // Most lints will require typechecking, so just don't run them.\n             providers.lint_mod = |_, _| {};"}, {"sha": "083d82cb414d85fca06758a4618e4144e8fbeb3d", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -99,7 +99,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n         stderr: None,\n         lint_caps,\n         parse_sess_created: None,\n-        register_lints: Some(box crate::lint::register_lints),\n+        register_lints: Some(Box::new(crate::lint::register_lints)),\n         override_queries: None,\n         make_codegen_backend: None,\n         registry: rustc_driver::diagnostics_registry(),\n@@ -549,10 +549,10 @@ crate fn make_test(\n                     .supports_color();\n \n             let emitter =\n-                EmitterWriter::new(box io::sink(), None, false, false, false, None, false);\n+                EmitterWriter::new(Box::new(io::sink()), None, false, false, false, None, false);\n \n             // FIXME(misdreavus): pass `-Z treat-err-as-bug` to the doctest parser\n-            let handler = Handler::with_emitter(false, None, box emitter);\n+            let handler = Handler::with_emitter(false, None, Box::new(emitter));\n             let sess = ParseSess::with_span_handler(handler, sm);\n \n             let mut found_main = false;\n@@ -962,7 +962,7 @@ impl Tester for Collector {\n                 no_run,\n                 test_type: test::TestType::DocTest,\n             },\n-            testfn: test::DynTestFn(box move || {\n+            testfn: test::DynTestFn(Box::new(move || {\n                 let report_unused_externs = |uext| {\n                     unused_externs.lock().unwrap().push(uext);\n                 };\n@@ -1042,9 +1042,9 @@ impl Tester for Collector {\n                         }\n                     }\n \n-                    panic::resume_unwind(box ());\n+                    panic::resume_unwind(Box::new(()));\n                 }\n-            }),\n+            })),\n         });\n     }\n "}, {"sha": "45aae71d2dc574e97d74200dae541747260458ee", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -2,7 +2,7 @@ use crate::clean::*;\n \n crate fn strip_item(mut item: Item) -> Item {\n     if !matches!(*item.kind, StrippedItem(..)) {\n-        item.kind = box StrippedItem(item.kind);\n+        item.kind = Box::new(StrippedItem(item.kind));\n     }\n     item\n }\n@@ -65,10 +65,10 @@ crate trait DocFolder: Sized {\n \n     /// don't override!\n     fn fold_item_recur(&mut self, mut item: Item) -> Item {\n-        item.kind = box match *item.kind {\n-            StrippedItem(box i) => StrippedItem(box self.fold_inner_recur(i)),\n+        item.kind = Box::new(match *item.kind {\n+            StrippedItem(box i) => StrippedItem(Box::new(self.fold_inner_recur(i))),\n             _ => self.fold_inner_recur(*item.kind),\n-        };\n+        });\n         item\n     }\n "}, {"sha": "e02d92b11b84472d74f92a653f6d0411283d968d", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -5,7 +5,6 @@\n #![feature(rustc_private)]\n #![feature(array_methods)]\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![feature(test)]"}, {"sha": "807872ae4fde361d722187706e2a8449845ec34d", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -61,7 +61,7 @@ enum ErrorKind<'a> {\n \n impl<'a> From<ResolutionFailure<'a>> for ErrorKind<'a> {\n     fn from(err: ResolutionFailure<'a>) -> Self {\n-        ErrorKind::Resolve(box err)\n+        ErrorKind::Resolve(Box::new(err))\n     }\n }\n "}, {"sha": "6f12d34e66b6eedaefad7da103120a03907e5804", "filename": "src/tools/clippy/clippy_lints/src/booleans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -116,7 +116,7 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n         // prevent folding of `cfg!` macros and the like\n         if !e.span.from_expansion() {\n             match &e.kind {\n-                ExprKind::Unary(UnOp::Not, inner) => return Ok(Bool::Not(box self.run(inner)?)),\n+                ExprKind::Unary(UnOp::Not, inner) => return Ok(Bool::Not(Box::new(self.run(inner)?))),\n                 ExprKind::Binary(binop, lhs, rhs) => match &binop.node {\n                     BinOpKind::Or => {\n                         return Ok(Bool::Or(self.extract(BinOpKind::Or, &[lhs, rhs], Vec::new())?));"}, {"sha": "cb2b7f5be70addb065d7efb2196ec96290275fd2", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -578,8 +578,8 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n                 let filename = FileName::anon_source_code(&code);\n \n                 let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-                let emitter = EmitterWriter::new(box io::sink(), None, false, false, false, None, false);\n-                let handler = Handler::with_emitter(false, None, box emitter);\n+                let emitter = EmitterWriter::new(Box::new(io::sink()), None, false, false, false, None, false);\n+                let handler = Handler::with_emitter(false, None, Box::new(emitter));\n                 let sess = ParseSess::with_span_handler(handler, sm);\n \n                 let mut parser = match maybe_new_parser_from_source_str(&sess, filename, code) {"}, {"sha": "19719502870bd0df3f2fe2fc70fbe7b3c45660e7", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 244, "deletions": 245, "changes": 489, "blob_url": "https://github.com/rust-lang/rust/blob/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=ba8cda2fa2c99ed6646f4dfe73bf4edad7e42a2d", "patch": "@@ -1,7 +1,6 @@\n // error-pattern:cargo-clippy\n \n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n #![feature(drain_filter)]\n #![feature(in_band_lifetimes)]\n #![feature(iter_zip)]\n@@ -393,9 +392,9 @@ use crate::utils::conf::TryConf;\n /// Used in `./src/driver.rs`.\n pub fn register_pre_expansion_lints(store: &mut rustc_lint::LintStore) {\n     // NOTE: Do not add any more pre-expansion passes. These should be removed eventually.\n-    store.register_pre_expansion_pass(|| box write::Write::default());\n-    store.register_pre_expansion_pass(|| box attrs::EarlyAttributes);\n-    store.register_pre_expansion_pass(|| box dbg_macro::DbgMacro);\n+    store.register_pre_expansion_pass(|| Box::new(write::Write::default()));\n+    store.register_pre_expansion_pass(|| Box::new(attrs::EarlyAttributes));\n+    store.register_pre_expansion_pass(|| Box::new(dbg_macro::DbgMacro));\n }\n \n #[doc(hidden)]\n@@ -1810,65 +1809,65 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     #[cfg(feature = \"metadata-collector-lint\")]\n     {\n         if std::env::var(\"ENABLE_METADATA_COLLECTION\").eq(&Ok(\"1\".to_string())) {\n-            store.register_late_pass(|| box utils::internal_lints::metadata_collector::MetadataCollector::new());\n+            store.register_late_pass(|| Box::new(utils::internal_lints::metadata_collector::MetadataCollector::new()));\n             return;\n         }\n     }\n \n     // all the internal lints\n     #[cfg(feature = \"internal-lints\")]\n     {\n-        store.register_early_pass(|| box utils::internal_lints::ClippyLintsInternal);\n-        store.register_early_pass(|| box utils::internal_lints::ProduceIce);\n-        store.register_late_pass(|| box utils::inspector::DeepCodeInspector);\n-        store.register_late_pass(|| box utils::internal_lints::CollapsibleCalls);\n-        store.register_late_pass(|| box utils::internal_lints::CompilerLintFunctions::new());\n-        store.register_late_pass(|| box utils::internal_lints::IfChainStyle);\n-        store.register_late_pass(|| box utils::internal_lints::InvalidPaths);\n-        store.register_late_pass(|| box utils::internal_lints::InterningDefinedSymbol::default());\n-        store.register_late_pass(|| box utils::internal_lints::LintWithoutLintPass::default());\n-        store.register_late_pass(|| box utils::internal_lints::MatchTypeOnDiagItem);\n-        store.register_late_pass(|| box utils::internal_lints::OuterExpnDataPass);\n+        store.register_early_pass(|| Box::new(utils::internal_lints::ClippyLintsInternal));\n+        store.register_early_pass(|| Box::new(utils::internal_lints::ProduceIce));\n+        store.register_late_pass(|| Box::new(utils::inspector::DeepCodeInspector));\n+        store.register_late_pass(|| Box::new(utils::internal_lints::CollapsibleCalls));\n+        store.register_late_pass(|| Box::new(utils::internal_lints::CompilerLintFunctions::new()));\n+        store.register_late_pass(|| Box::new(utils::internal_lints::IfChainStyle));\n+        store.register_late_pass(|| Box::new(utils::internal_lints::InvalidPaths));\n+        store.register_late_pass(|| Box::new(utils::internal_lints::InterningDefinedSymbol::default()));\n+        store.register_late_pass(|| Box::new(utils::internal_lints::LintWithoutLintPass::default()));\n+        store.register_late_pass(|| Box::new(utils::internal_lints::MatchTypeOnDiagItem));\n+        store.register_late_pass(|| Box::new(utils::internal_lints::OuterExpnDataPass));\n     }\n \n-    store.register_late_pass(|| box utils::author::Author);\n-    store.register_late_pass(|| box await_holding_invalid::AwaitHolding);\n-    store.register_late_pass(|| box serde_api::SerdeApi);\n+    store.register_late_pass(|| Box::new(utils::author::Author));\n+    store.register_late_pass(|| Box::new(await_holding_invalid::AwaitHolding));\n+    store.register_late_pass(|| Box::new(serde_api::SerdeApi));\n     let vec_box_size_threshold = conf.vec_box_size_threshold;\n     let type_complexity_threshold = conf.type_complexity_threshold;\n-    store.register_late_pass(move || box types::Types::new(vec_box_size_threshold, type_complexity_threshold));\n-    store.register_late_pass(|| box booleans::NonminimalBool);\n-    store.register_late_pass(|| box needless_bitwise_bool::NeedlessBitwiseBool);\n-    store.register_late_pass(|| box eq_op::EqOp);\n-    store.register_late_pass(|| box enum_clike::UnportableVariant);\n-    store.register_late_pass(|| box float_literal::FloatLiteral);\n+    store.register_late_pass(move || Box::new(types::Types::new(vec_box_size_threshold, type_complexity_threshold)));\n+    store.register_late_pass(|| Box::new(booleans::NonminimalBool));\n+    store.register_late_pass(|| Box::new(needless_bitwise_bool::NeedlessBitwiseBool));\n+    store.register_late_pass(|| Box::new(eq_op::EqOp));\n+    store.register_late_pass(|| Box::new(enum_clike::UnportableVariant));\n+    store.register_late_pass(|| Box::new(float_literal::FloatLiteral));\n     let verbose_bit_mask_threshold = conf.verbose_bit_mask_threshold;\n-    store.register_late_pass(move || box bit_mask::BitMask::new(verbose_bit_mask_threshold));\n-    store.register_late_pass(|| box ptr::Ptr);\n-    store.register_late_pass(|| box ptr_eq::PtrEq);\n-    store.register_late_pass(|| box needless_bool::NeedlessBool);\n-    store.register_late_pass(|| box needless_bool::BoolComparison);\n-    store.register_late_pass(|| box needless_for_each::NeedlessForEach);\n-    store.register_late_pass(|| box approx_const::ApproxConstant);\n-    store.register_late_pass(|| box misc::MiscLints);\n-    store.register_late_pass(|| box eta_reduction::EtaReduction);\n-    store.register_late_pass(|| box identity_op::IdentityOp);\n-    store.register_late_pass(|| box erasing_op::ErasingOp);\n-    store.register_late_pass(|| box mut_mut::MutMut);\n-    store.register_late_pass(|| box mut_reference::UnnecessaryMutPassed);\n-    store.register_late_pass(|| box len_zero::LenZero);\n-    store.register_late_pass(|| box attrs::Attributes);\n-    store.register_late_pass(|| box blocks_in_if_conditions::BlocksInIfConditions);\n-    store.register_late_pass(|| box collapsible_match::CollapsibleMatch);\n-    store.register_late_pass(|| box unicode::Unicode);\n-    store.register_late_pass(|| box unit_return_expecting_ord::UnitReturnExpectingOrd);\n-    store.register_late_pass(|| box strings::StringAdd);\n-    store.register_late_pass(|| box implicit_return::ImplicitReturn);\n-    store.register_late_pass(|| box implicit_saturating_sub::ImplicitSaturatingSub);\n-    store.register_late_pass(|| box default_numeric_fallback::DefaultNumericFallback);\n-    store.register_late_pass(|| box inconsistent_struct_constructor::InconsistentStructConstructor);\n-    store.register_late_pass(|| box non_octal_unix_permissions::NonOctalUnixPermissions);\n-    store.register_early_pass(|| box unnecessary_self_imports::UnnecessarySelfImports);\n+    store.register_late_pass(move || Box::new(bit_mask::BitMask::new(verbose_bit_mask_threshold)));\n+    store.register_late_pass(|| Box::new(ptr::Ptr));\n+    store.register_late_pass(|| Box::new(ptr_eq::PtrEq));\n+    store.register_late_pass(|| Box::new(needless_bool::NeedlessBool));\n+    store.register_late_pass(|| Box::new(needless_bool::BoolComparison));\n+    store.register_late_pass(|| Box::new(needless_for_each::NeedlessForEach));\n+    store.register_late_pass(|| Box::new(approx_const::ApproxConstant));\n+    store.register_late_pass(|| Box::new(misc::MiscLints));\n+    store.register_late_pass(|| Box::new(eta_reduction::EtaReduction));\n+    store.register_late_pass(|| Box::new(identity_op::IdentityOp));\n+    store.register_late_pass(|| Box::new(erasing_op::ErasingOp));\n+    store.register_late_pass(|| Box::new(mut_mut::MutMut));\n+    store.register_late_pass(|| Box::new(mut_reference::UnnecessaryMutPassed));\n+    store.register_late_pass(|| Box::new(len_zero::LenZero));\n+    store.register_late_pass(|| Box::new(attrs::Attributes));\n+    store.register_late_pass(|| Box::new(blocks_in_if_conditions::BlocksInIfConditions));\n+    store.register_late_pass(|| Box::new(collapsible_match::CollapsibleMatch));\n+    store.register_late_pass(|| Box::new(unicode::Unicode));\n+    store.register_late_pass(|| Box::new(unit_return_expecting_ord::UnitReturnExpectingOrd));\n+    store.register_late_pass(|| Box::new(strings::StringAdd));\n+    store.register_late_pass(|| Box::new(implicit_return::ImplicitReturn));\n+    store.register_late_pass(|| Box::new(implicit_saturating_sub::ImplicitSaturatingSub));\n+    store.register_late_pass(|| Box::new(default_numeric_fallback::DefaultNumericFallback));\n+    store.register_late_pass(|| Box::new(inconsistent_struct_constructor::InconsistentStructConstructor));\n+    store.register_late_pass(|| Box::new(non_octal_unix_permissions::NonOctalUnixPermissions));\n+    store.register_early_pass(|| Box::new(unnecessary_self_imports::UnnecessarySelfImports));\n \n     let msrv = conf.msrv.as_ref().and_then(|s| {\n         parse_msrv(s, None, None).or_else(|| {\n@@ -1878,231 +1877,231 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     });\n \n     let avoid_breaking_exported_api = conf.avoid_breaking_exported_api;\n-    store.register_late_pass(move || box methods::Methods::new(avoid_breaking_exported_api, msrv));\n-    store.register_late_pass(move || box matches::Matches::new(msrv));\n-    store.register_early_pass(move || box manual_non_exhaustive::ManualNonExhaustive::new(msrv));\n-    store.register_late_pass(move || box manual_strip::ManualStrip::new(msrv));\n-    store.register_early_pass(move || box redundant_static_lifetimes::RedundantStaticLifetimes::new(msrv));\n-    store.register_early_pass(move || box redundant_field_names::RedundantFieldNames::new(msrv));\n-    store.register_late_pass(move || box checked_conversions::CheckedConversions::new(msrv));\n-    store.register_late_pass(move || box mem_replace::MemReplace::new(msrv));\n-    store.register_late_pass(move || box ranges::Ranges::new(msrv));\n-    store.register_late_pass(move || box from_over_into::FromOverInto::new(msrv));\n-    store.register_late_pass(move || box use_self::UseSelf::new(msrv));\n-    store.register_late_pass(move || box missing_const_for_fn::MissingConstForFn::new(msrv));\n-    store.register_late_pass(move || box needless_question_mark::NeedlessQuestionMark);\n-    store.register_late_pass(move || box casts::Casts::new(msrv));\n-    store.register_early_pass(move || box unnested_or_patterns::UnnestedOrPatterns::new(msrv));\n+    store.register_late_pass(move || Box::new(methods::Methods::new(avoid_breaking_exported_api, msrv)));\n+    store.register_late_pass(move || Box::new(matches::Matches::new(msrv)));\n+    store.register_early_pass(move || Box::new(manual_non_exhaustive::ManualNonExhaustive::new(msrv)));\n+    store.register_late_pass(move || Box::new(manual_strip::ManualStrip::new(msrv)));\n+    store.register_early_pass(move || Box::new(redundant_static_lifetimes::RedundantStaticLifetimes::new(msrv)));\n+    store.register_early_pass(move || Box::new(redundant_field_names::RedundantFieldNames::new(msrv)));\n+    store.register_late_pass(move || Box::new(checked_conversions::CheckedConversions::new(msrv)));\n+    store.register_late_pass(move || Box::new(mem_replace::MemReplace::new(msrv)));\n+    store.register_late_pass(move || Box::new(ranges::Ranges::new(msrv)));\n+    store.register_late_pass(move || Box::new(from_over_into::FromOverInto::new(msrv)));\n+    store.register_late_pass(move || Box::new(use_self::UseSelf::new(msrv)));\n+    store.register_late_pass(move || Box::new(missing_const_for_fn::MissingConstForFn::new(msrv)));\n+    store.register_late_pass(move || Box::new(needless_question_mark::NeedlessQuestionMark));\n+    store.register_late_pass(move || Box::new(casts::Casts::new(msrv)));\n+    store.register_early_pass(move || Box::new(unnested_or_patterns::UnnestedOrPatterns::new(msrv)));\n \n-    store.register_late_pass(|| box size_of_in_element_count::SizeOfInElementCount);\n-    store.register_late_pass(|| box map_clone::MapClone);\n-    store.register_late_pass(|| box map_err_ignore::MapErrIgnore);\n-    store.register_late_pass(|| box shadow::Shadow);\n-    store.register_late_pass(|| box unit_types::UnitTypes);\n-    store.register_late_pass(|| box loops::Loops);\n-    store.register_late_pass(|| box main_recursion::MainRecursion::default());\n-    store.register_late_pass(|| box lifetimes::Lifetimes);\n-    store.register_late_pass(|| box entry::HashMapPass);\n-    store.register_late_pass(|| box minmax::MinMaxPass);\n-    store.register_late_pass(|| box open_options::OpenOptions);\n-    store.register_late_pass(|| box zero_div_zero::ZeroDiv);\n-    store.register_late_pass(|| box mutex_atomic::Mutex);\n-    store.register_late_pass(|| box needless_update::NeedlessUpdate);\n-    store.register_late_pass(|| box needless_borrow::NeedlessBorrow::default());\n-    store.register_late_pass(|| box needless_borrowed_ref::NeedlessBorrowedRef);\n-    store.register_late_pass(|| box no_effect::NoEffect);\n-    store.register_late_pass(|| box temporary_assignment::TemporaryAssignment);\n-    store.register_late_pass(|| box transmute::Transmute);\n+    store.register_late_pass(|| Box::new(size_of_in_element_count::SizeOfInElementCount));\n+    store.register_late_pass(|| Box::new(map_clone::MapClone));\n+    store.register_late_pass(|| Box::new(map_err_ignore::MapErrIgnore));\n+    store.register_late_pass(|| Box::new(shadow::Shadow));\n+    store.register_late_pass(|| Box::new(unit_types::UnitTypes));\n+    store.register_late_pass(|| Box::new(loops::Loops));\n+    store.register_late_pass(|| Box::new(main_recursion::MainRecursion::default()));\n+    store.register_late_pass(|| Box::new(lifetimes::Lifetimes));\n+    store.register_late_pass(|| Box::new(entry::HashMapPass));\n+    store.register_late_pass(|| Box::new(minmax::MinMaxPass));\n+    store.register_late_pass(|| Box::new(open_options::OpenOptions));\n+    store.register_late_pass(|| Box::new(zero_div_zero::ZeroDiv));\n+    store.register_late_pass(|| Box::new(mutex_atomic::Mutex));\n+    store.register_late_pass(|| Box::new(needless_update::NeedlessUpdate));\n+    store.register_late_pass(|| Box::new(needless_borrow::NeedlessBorrow::default()));\n+    store.register_late_pass(|| Box::new(needless_borrowed_ref::NeedlessBorrowedRef));\n+    store.register_late_pass(|| Box::new(no_effect::NoEffect));\n+    store.register_late_pass(|| Box::new(temporary_assignment::TemporaryAssignment));\n+    store.register_late_pass(|| Box::new(transmute::Transmute));\n     let cognitive_complexity_threshold = conf.cognitive_complexity_threshold;\n-    store.register_late_pass(move || box cognitive_complexity::CognitiveComplexity::new(cognitive_complexity_threshold));\n+    store.register_late_pass(move || Box::new(cognitive_complexity::CognitiveComplexity::new(cognitive_complexity_threshold)));\n     let too_large_for_stack = conf.too_large_for_stack;\n-    store.register_late_pass(move || box escape::BoxedLocal{too_large_for_stack});\n-    store.register_late_pass(move || box vec::UselessVec{too_large_for_stack});\n-    store.register_late_pass(|| box panic_unimplemented::PanicUnimplemented);\n-    store.register_late_pass(|| box strings::StringLitAsBytes);\n-    store.register_late_pass(|| box derive::Derive);\n-    store.register_late_pass(|| box get_last_with_len::GetLastWithLen);\n-    store.register_late_pass(|| box drop_forget_ref::DropForgetRef);\n-    store.register_late_pass(|| box empty_enum::EmptyEnum);\n-    store.register_late_pass(|| box absurd_extreme_comparisons::AbsurdExtremeComparisons);\n-    store.register_late_pass(|| box invalid_upcast_comparisons::InvalidUpcastComparisons);\n-    store.register_late_pass(|| box regex::Regex::default());\n-    store.register_late_pass(|| box copies::CopyAndPaste);\n-    store.register_late_pass(|| box copy_iterator::CopyIterator);\n-    store.register_late_pass(|| box format::UselessFormat);\n-    store.register_late_pass(|| box swap::Swap);\n-    store.register_late_pass(|| box overflow_check_conditional::OverflowCheckConditional);\n-    store.register_late_pass(|| box new_without_default::NewWithoutDefault::default());\n+    store.register_late_pass(move || Box::new(escape::BoxedLocal{too_large_for_stack}));\n+    store.register_late_pass(move || Box::new(vec::UselessVec{too_large_for_stack}));\n+    store.register_late_pass(|| Box::new(panic_unimplemented::PanicUnimplemented));\n+    store.register_late_pass(|| Box::new(strings::StringLitAsBytes));\n+    store.register_late_pass(|| Box::new(derive::Derive));\n+    store.register_late_pass(|| Box::new(get_last_with_len::GetLastWithLen));\n+    store.register_late_pass(|| Box::new(drop_forget_ref::DropForgetRef));\n+    store.register_late_pass(|| Box::new(empty_enum::EmptyEnum));\n+    store.register_late_pass(|| Box::new(absurd_extreme_comparisons::AbsurdExtremeComparisons));\n+    store.register_late_pass(|| Box::new(invalid_upcast_comparisons::InvalidUpcastComparisons));\n+    store.register_late_pass(|| Box::new(regex::Regex::default()));\n+    store.register_late_pass(|| Box::new(copies::CopyAndPaste));\n+    store.register_late_pass(|| Box::new(copy_iterator::CopyIterator));\n+    store.register_late_pass(|| Box::new(format::UselessFormat));\n+    store.register_late_pass(|| Box::new(swap::Swap));\n+    store.register_late_pass(|| Box::new(overflow_check_conditional::OverflowCheckConditional));\n+    store.register_late_pass(|| Box::new(new_without_default::NewWithoutDefault::default()));\n     let blacklisted_names = conf.blacklisted_names.iter().cloned().collect::<FxHashSet<_>>();\n-    store.register_late_pass(move || box blacklisted_name::BlacklistedName::new(blacklisted_names.clone()));\n+    store.register_late_pass(move || Box::new(blacklisted_name::BlacklistedName::new(blacklisted_names.clone())));\n     let too_many_arguments_threshold = conf.too_many_arguments_threshold;\n     let too_many_lines_threshold = conf.too_many_lines_threshold;\n-    store.register_late_pass(move || box functions::Functions::new(too_many_arguments_threshold, too_many_lines_threshold));\n+    store.register_late_pass(move || Box::new(functions::Functions::new(too_many_arguments_threshold, too_many_lines_threshold)));\n     let doc_valid_idents = conf.doc_valid_idents.iter().cloned().collect::<FxHashSet<_>>();\n-    store.register_late_pass(move || box doc::DocMarkdown::new(doc_valid_idents.clone()));\n-    store.register_late_pass(|| box neg_multiply::NegMultiply);\n-    store.register_late_pass(|| box mem_discriminant::MemDiscriminant);\n-    store.register_late_pass(|| box mem_forget::MemForget);\n-    store.register_late_pass(|| box arithmetic::Arithmetic::default());\n-    store.register_late_pass(|| box assign_ops::AssignOps);\n-    store.register_late_pass(|| box let_if_seq::LetIfSeq);\n-    store.register_late_pass(|| box eval_order_dependence::EvalOrderDependence);\n-    store.register_late_pass(|| box missing_doc::MissingDoc::new());\n-    store.register_late_pass(|| box missing_inline::MissingInline);\n-    store.register_late_pass(move || box exhaustive_items::ExhaustiveItems);\n-    store.register_late_pass(|| box if_let_some_result::OkIfLet);\n-    store.register_late_pass(|| box partialeq_ne_impl::PartialEqNeImpl);\n-    store.register_late_pass(|| box unused_io_amount::UnusedIoAmount);\n+    store.register_late_pass(move || Box::new(doc::DocMarkdown::new(doc_valid_idents.clone())));\n+    store.register_late_pass(|| Box::new(neg_multiply::NegMultiply));\n+    store.register_late_pass(|| Box::new(mem_discriminant::MemDiscriminant));\n+    store.register_late_pass(|| Box::new(mem_forget::MemForget));\n+    store.register_late_pass(|| Box::new(arithmetic::Arithmetic::default()));\n+    store.register_late_pass(|| Box::new(assign_ops::AssignOps));\n+    store.register_late_pass(|| Box::new(let_if_seq::LetIfSeq));\n+    store.register_late_pass(|| Box::new(eval_order_dependence::EvalOrderDependence));\n+    store.register_late_pass(|| Box::new(missing_doc::MissingDoc::new()));\n+    store.register_late_pass(|| Box::new(missing_inline::MissingInline));\n+    store.register_late_pass(move || Box::new(exhaustive_items::ExhaustiveItems));\n+    store.register_late_pass(|| Box::new(if_let_some_result::OkIfLet));\n+    store.register_late_pass(|| Box::new(partialeq_ne_impl::PartialEqNeImpl));\n+    store.register_late_pass(|| Box::new(unused_io_amount::UnusedIoAmount));\n     let enum_variant_size_threshold = conf.enum_variant_size_threshold;\n-    store.register_late_pass(move || box large_enum_variant::LargeEnumVariant::new(enum_variant_size_threshold));\n-    store.register_late_pass(|| box explicit_write::ExplicitWrite);\n-    store.register_late_pass(|| box needless_pass_by_value::NeedlessPassByValue);\n+    store.register_late_pass(move || Box::new(large_enum_variant::LargeEnumVariant::new(enum_variant_size_threshold)));\n+    store.register_late_pass(|| Box::new(explicit_write::ExplicitWrite));\n+    store.register_late_pass(|| Box::new(needless_pass_by_value::NeedlessPassByValue));\n     let pass_by_ref_or_value = pass_by_ref_or_value::PassByRefOrValue::new(\n         conf.trivial_copy_size_limit,\n         conf.pass_by_value_size_limit,\n         conf.avoid_breaking_exported_api,\n         &sess.target,\n     );\n-    store.register_late_pass(move || box pass_by_ref_or_value);\n-    store.register_late_pass(|| box ref_option_ref::RefOptionRef);\n-    store.register_late_pass(|| box try_err::TryErr);\n-    store.register_late_pass(|| box bytecount::ByteCount);\n-    store.register_late_pass(|| box infinite_iter::InfiniteIter);\n-    store.register_late_pass(|| box inline_fn_without_body::InlineFnWithoutBody);\n-    store.register_late_pass(|| box useless_conversion::UselessConversion::default());\n-    store.register_late_pass(|| box implicit_hasher::ImplicitHasher);\n-    store.register_late_pass(|| box fallible_impl_from::FallibleImplFrom);\n-    store.register_late_pass(|| box double_comparison::DoubleComparisons);\n-    store.register_late_pass(|| box question_mark::QuestionMark);\n-    store.register_early_pass(|| box suspicious_operation_groupings::SuspiciousOperationGroupings);\n-    store.register_late_pass(|| box suspicious_trait_impl::SuspiciousImpl);\n-    store.register_late_pass(|| box map_unit_fn::MapUnit);\n-    store.register_late_pass(|| box inherent_impl::MultipleInherentImpl);\n-    store.register_late_pass(|| box neg_cmp_op_on_partial_ord::NoNegCompOpForPartialOrd);\n-    store.register_late_pass(|| box unwrap::Unwrap);\n-    store.register_late_pass(|| box duration_subsec::DurationSubsec);\n-    store.register_late_pass(|| box indexing_slicing::IndexingSlicing);\n-    store.register_late_pass(|| box non_copy_const::NonCopyConst);\n-    store.register_late_pass(|| box ptr_offset_with_cast::PtrOffsetWithCast);\n-    store.register_late_pass(|| box redundant_clone::RedundantClone);\n-    store.register_late_pass(|| box slow_vector_initialization::SlowVectorInit);\n-    store.register_late_pass(|| box unnecessary_sort_by::UnnecessarySortBy);\n-    store.register_late_pass(move || box unnecessary_wraps::UnnecessaryWraps::new(avoid_breaking_exported_api));\n-    store.register_late_pass(|| box assertions_on_constants::AssertionsOnConstants);\n-    store.register_late_pass(|| box transmuting_null::TransmutingNull);\n-    store.register_late_pass(|| box path_buf_push_overwrite::PathBufPushOverwrite);\n-    store.register_late_pass(|| box integer_division::IntegerDivision);\n-    store.register_late_pass(|| box inherent_to_string::InherentToString);\n+    store.register_late_pass(move || Box::new(pass_by_ref_or_value));\n+    store.register_late_pass(|| Box::new(ref_option_ref::RefOptionRef));\n+    store.register_late_pass(|| Box::new(try_err::TryErr));\n+    store.register_late_pass(|| Box::new(bytecount::ByteCount));\n+    store.register_late_pass(|| Box::new(infinite_iter::InfiniteIter));\n+    store.register_late_pass(|| Box::new(inline_fn_without_body::InlineFnWithoutBody));\n+    store.register_late_pass(|| Box::new(useless_conversion::UselessConversion::default()));\n+    store.register_late_pass(|| Box::new(implicit_hasher::ImplicitHasher));\n+    store.register_late_pass(|| Box::new(fallible_impl_from::FallibleImplFrom));\n+    store.register_late_pass(|| Box::new(double_comparison::DoubleComparisons));\n+    store.register_late_pass(|| Box::new(question_mark::QuestionMark));\n+    store.register_early_pass(|| Box::new(suspicious_operation_groupings::SuspiciousOperationGroupings));\n+    store.register_late_pass(|| Box::new(suspicious_trait_impl::SuspiciousImpl));\n+    store.register_late_pass(|| Box::new(map_unit_fn::MapUnit));\n+    store.register_late_pass(|| Box::new(inherent_impl::MultipleInherentImpl));\n+    store.register_late_pass(|| Box::new(neg_cmp_op_on_partial_ord::NoNegCompOpForPartialOrd));\n+    store.register_late_pass(|| Box::new(unwrap::Unwrap));\n+    store.register_late_pass(|| Box::new(duration_subsec::DurationSubsec));\n+    store.register_late_pass(|| Box::new(indexing_slicing::IndexingSlicing));\n+    store.register_late_pass(|| Box::new(non_copy_const::NonCopyConst));\n+    store.register_late_pass(|| Box::new(ptr_offset_with_cast::PtrOffsetWithCast));\n+    store.register_late_pass(|| Box::new(redundant_clone::RedundantClone));\n+    store.register_late_pass(|| Box::new(slow_vector_initialization::SlowVectorInit));\n+    store.register_late_pass(|| Box::new(unnecessary_sort_by::UnnecessarySortBy));\n+    store.register_late_pass(move || Box::new(unnecessary_wraps::UnnecessaryWraps::new(avoid_breaking_exported_api)));\n+    store.register_late_pass(|| Box::new(assertions_on_constants::AssertionsOnConstants));\n+    store.register_late_pass(|| Box::new(transmuting_null::TransmutingNull));\n+    store.register_late_pass(|| Box::new(path_buf_push_overwrite::PathBufPushOverwrite));\n+    store.register_late_pass(|| Box::new(integer_division::IntegerDivision));\n+    store.register_late_pass(|| Box::new(inherent_to_string::InherentToString));\n     let max_trait_bounds = conf.max_trait_bounds;\n-    store.register_late_pass(move || box trait_bounds::TraitBounds::new(max_trait_bounds));\n-    store.register_late_pass(|| box comparison_chain::ComparisonChain);\n-    store.register_late_pass(|| box mut_key::MutableKeyType);\n-    store.register_late_pass(|| box modulo_arithmetic::ModuloArithmetic);\n-    store.register_early_pass(|| box reference::DerefAddrOf);\n-    store.register_early_pass(|| box reference::RefInDeref);\n-    store.register_early_pass(|| box double_parens::DoubleParens);\n-    store.register_late_pass(|| box to_string_in_display::ToStringInDisplay::new());\n-    store.register_early_pass(|| box unsafe_removed_from_name::UnsafeNameRemoval);\n-    store.register_early_pass(|| box if_not_else::IfNotElse);\n-    store.register_early_pass(|| box else_if_without_else::ElseIfWithoutElse);\n-    store.register_early_pass(|| box int_plus_one::IntPlusOne);\n-    store.register_early_pass(|| box formatting::Formatting);\n-    store.register_early_pass(|| box misc_early::MiscEarlyLints);\n-    store.register_early_pass(|| box redundant_closure_call::RedundantClosureCall);\n-    store.register_late_pass(|| box redundant_closure_call::RedundantClosureCall);\n-    store.register_early_pass(|| box unused_unit::UnusedUnit);\n-    store.register_late_pass(|| box returns::Return);\n-    store.register_early_pass(|| box collapsible_if::CollapsibleIf);\n-    store.register_early_pass(|| box items_after_statements::ItemsAfterStatements);\n-    store.register_early_pass(|| box precedence::Precedence);\n-    store.register_early_pass(|| box needless_continue::NeedlessContinue);\n-    store.register_early_pass(|| box redundant_else::RedundantElse);\n-    store.register_late_pass(|| box create_dir::CreateDir);\n-    store.register_early_pass(|| box needless_arbitrary_self_type::NeedlessArbitrarySelfType);\n+    store.register_late_pass(move || Box::new(trait_bounds::TraitBounds::new(max_trait_bounds)));\n+    store.register_late_pass(|| Box::new(comparison_chain::ComparisonChain));\n+    store.register_late_pass(|| Box::new(mut_key::MutableKeyType));\n+    store.register_late_pass(|| Box::new(modulo_arithmetic::ModuloArithmetic));\n+    store.register_early_pass(|| Box::new(reference::DerefAddrOf));\n+    store.register_early_pass(|| Box::new(reference::RefInDeref));\n+    store.register_early_pass(|| Box::new(double_parens::DoubleParens));\n+    store.register_late_pass(|| Box::new(to_string_in_display::ToStringInDisplay::new()));\n+    store.register_early_pass(|| Box::new(unsafe_removed_from_name::UnsafeNameRemoval));\n+    store.register_early_pass(|| Box::new(if_not_else::IfNotElse));\n+    store.register_early_pass(|| Box::new(else_if_without_else::ElseIfWithoutElse));\n+    store.register_early_pass(|| Box::new(int_plus_one::IntPlusOne));\n+    store.register_early_pass(|| Box::new(formatting::Formatting));\n+    store.register_early_pass(|| Box::new(misc_early::MiscEarlyLints));\n+    store.register_early_pass(|| Box::new(redundant_closure_call::RedundantClosureCall));\n+    store.register_late_pass(|| Box::new(redundant_closure_call::RedundantClosureCall));\n+    store.register_early_pass(|| Box::new(unused_unit::UnusedUnit));\n+    store.register_late_pass(|| Box::new(returns::Return));\n+    store.register_early_pass(|| Box::new(collapsible_if::CollapsibleIf));\n+    store.register_early_pass(|| Box::new(items_after_statements::ItemsAfterStatements));\n+    store.register_early_pass(|| Box::new(precedence::Precedence));\n+    store.register_early_pass(|| Box::new(needless_continue::NeedlessContinue));\n+    store.register_early_pass(|| Box::new(redundant_else::RedundantElse));\n+    store.register_late_pass(|| Box::new(create_dir::CreateDir));\n+    store.register_early_pass(|| Box::new(needless_arbitrary_self_type::NeedlessArbitrarySelfType));\n     let cargo_ignore_publish = conf.cargo_ignore_publish;\n-    store.register_late_pass(move || box cargo_common_metadata::CargoCommonMetadata::new(cargo_ignore_publish));\n-    store.register_late_pass(|| box multiple_crate_versions::MultipleCrateVersions);\n-    store.register_late_pass(|| box wildcard_dependencies::WildcardDependencies);\n+    store.register_late_pass(move || Box::new(cargo_common_metadata::CargoCommonMetadata::new(cargo_ignore_publish)));\n+    store.register_late_pass(|| Box::new(multiple_crate_versions::MultipleCrateVersions));\n+    store.register_late_pass(|| Box::new(wildcard_dependencies::WildcardDependencies));\n     let literal_representation_lint_fraction_readability = conf.unreadable_literal_lint_fractions;\n-    store.register_early_pass(move || box literal_representation::LiteralDigitGrouping::new(literal_representation_lint_fraction_readability));\n+    store.register_early_pass(move || Box::new(literal_representation::LiteralDigitGrouping::new(literal_representation_lint_fraction_readability)));\n     let literal_representation_threshold = conf.literal_representation_threshold;\n-    store.register_early_pass(move || box literal_representation::DecimalLiteralRepresentation::new(literal_representation_threshold));\n+    store.register_early_pass(move || Box::new(literal_representation::DecimalLiteralRepresentation::new(literal_representation_threshold)));\n     let enum_variant_name_threshold = conf.enum_variant_name_threshold;\n-    store.register_late_pass(move || box enum_variants::EnumVariantNames::new(enum_variant_name_threshold, avoid_breaking_exported_api));\n-    store.register_early_pass(|| box tabs_in_doc_comments::TabsInDocComments);\n+    store.register_late_pass(move || Box::new(enum_variants::EnumVariantNames::new(enum_variant_name_threshold, avoid_breaking_exported_api)));\n+    store.register_early_pass(|| Box::new(tabs_in_doc_comments::TabsInDocComments));\n     let upper_case_acronyms_aggressive = conf.upper_case_acronyms_aggressive;\n-    store.register_late_pass(move || box upper_case_acronyms::UpperCaseAcronyms::new(avoid_breaking_exported_api, upper_case_acronyms_aggressive));\n-    store.register_late_pass(|| box default::Default::default());\n-    store.register_late_pass(|| box unused_self::UnusedSelf);\n-    store.register_late_pass(|| box mutable_debug_assertion::DebugAssertWithMutCall);\n-    store.register_late_pass(|| box exit::Exit);\n-    store.register_late_pass(|| box to_digit_is_some::ToDigitIsSome);\n+    store.register_late_pass(move || Box::new(upper_case_acronyms::UpperCaseAcronyms::new(avoid_breaking_exported_api, upper_case_acronyms_aggressive)));\n+    store.register_late_pass(|| Box::new(default::Default::default()));\n+    store.register_late_pass(|| Box::new(unused_self::UnusedSelf));\n+    store.register_late_pass(|| Box::new(mutable_debug_assertion::DebugAssertWithMutCall));\n+    store.register_late_pass(|| Box::new(exit::Exit));\n+    store.register_late_pass(|| Box::new(to_digit_is_some::ToDigitIsSome));\n     let array_size_threshold = conf.array_size_threshold;\n-    store.register_late_pass(move || box large_stack_arrays::LargeStackArrays::new(array_size_threshold));\n-    store.register_late_pass(move || box large_const_arrays::LargeConstArrays::new(array_size_threshold));\n-    store.register_late_pass(|| box floating_point_arithmetic::FloatingPointArithmetic);\n-    store.register_early_pass(|| box as_conversions::AsConversions);\n-    store.register_late_pass(|| box let_underscore::LetUnderscore);\n-    store.register_early_pass(|| box single_component_path_imports::SingleComponentPathImports);\n+    store.register_late_pass(move || Box::new(large_stack_arrays::LargeStackArrays::new(array_size_threshold)));\n+    store.register_late_pass(move || Box::new(large_const_arrays::LargeConstArrays::new(array_size_threshold)));\n+    store.register_late_pass(|| Box::new(floating_point_arithmetic::FloatingPointArithmetic));\n+    store.register_early_pass(|| Box::new(as_conversions::AsConversions));\n+    store.register_late_pass(|| Box::new(let_underscore::LetUnderscore));\n+    store.register_early_pass(|| Box::new(single_component_path_imports::SingleComponentPathImports));\n     let max_fn_params_bools = conf.max_fn_params_bools;\n     let max_struct_bools = conf.max_struct_bools;\n-    store.register_early_pass(move || box excessive_bools::ExcessiveBools::new(max_struct_bools, max_fn_params_bools));\n-    store.register_early_pass(|| box option_env_unwrap::OptionEnvUnwrap);\n+    store.register_early_pass(move || Box::new(excessive_bools::ExcessiveBools::new(max_struct_bools, max_fn_params_bools)));\n+    store.register_early_pass(|| Box::new(option_env_unwrap::OptionEnvUnwrap));\n     let warn_on_all_wildcard_imports = conf.warn_on_all_wildcard_imports;\n-    store.register_late_pass(move || box wildcard_imports::WildcardImports::new(warn_on_all_wildcard_imports));\n-    store.register_late_pass(|| box verbose_file_reads::VerboseFileReads);\n-    store.register_late_pass(|| box redundant_pub_crate::RedundantPubCrate::default());\n-    store.register_late_pass(|| box unnamed_address::UnnamedAddress);\n-    store.register_late_pass(|| box dereference::Dereferencing::default());\n-    store.register_late_pass(|| box option_if_let_else::OptionIfLetElse);\n-    store.register_late_pass(|| box future_not_send::FutureNotSend);\n-    store.register_late_pass(|| box if_let_mutex::IfLetMutex);\n-    store.register_late_pass(|| box mut_mutex_lock::MutMutexLock);\n-    store.register_late_pass(|| box match_on_vec_items::MatchOnVecItems);\n-    store.register_late_pass(|| box manual_async_fn::ManualAsyncFn);\n-    store.register_late_pass(|| box vec_resize_to_zero::VecResizeToZero);\n-    store.register_late_pass(|| box panic_in_result_fn::PanicInResultFn);\n+    store.register_late_pass(move || Box::new(wildcard_imports::WildcardImports::new(warn_on_all_wildcard_imports)));\n+    store.register_late_pass(|| Box::new(verbose_file_reads::VerboseFileReads));\n+    store.register_late_pass(|| Box::new(redundant_pub_crate::RedundantPubCrate::default()));\n+    store.register_late_pass(|| Box::new(unnamed_address::UnnamedAddress));\n+    store.register_late_pass(|| Box::new(dereference::Dereferencing::default()));\n+    store.register_late_pass(|| Box::new(option_if_let_else::OptionIfLetElse));\n+    store.register_late_pass(|| Box::new(future_not_send::FutureNotSend));\n+    store.register_late_pass(|| Box::new(if_let_mutex::IfLetMutex));\n+    store.register_late_pass(|| Box::new(mut_mutex_lock::MutMutexLock));\n+    store.register_late_pass(|| Box::new(match_on_vec_items::MatchOnVecItems));\n+    store.register_late_pass(|| Box::new(manual_async_fn::ManualAsyncFn));\n+    store.register_late_pass(|| Box::new(vec_resize_to_zero::VecResizeToZero));\n+    store.register_late_pass(|| Box::new(panic_in_result_fn::PanicInResultFn));\n     let single_char_binding_names_threshold = conf.single_char_binding_names_threshold;\n-    store.register_early_pass(move || box non_expressive_names::NonExpressiveNames {\n+    store.register_early_pass(move || Box::new(non_expressive_names::NonExpressiveNames {\n         single_char_binding_names_threshold,\n-    });\n+    }));\n     let macro_matcher = conf.standard_macro_braces.iter().cloned().collect::<FxHashSet<_>>();\n-    store.register_early_pass(move || box nonstandard_macro_braces::MacroBraces::new(&macro_matcher));\n-    store.register_late_pass(|| box macro_use::MacroUseImports::default());\n-    store.register_late_pass(|| box pattern_type_mismatch::PatternTypeMismatch);\n-    store.register_late_pass(|| box stable_sort_primitive::StableSortPrimitive);\n-    store.register_late_pass(|| box repeat_once::RepeatOnce);\n-    store.register_late_pass(|| box unwrap_in_result::UnwrapInResult);\n-    store.register_late_pass(|| box self_assignment::SelfAssignment);\n-    store.register_late_pass(|| box manual_unwrap_or::ManualUnwrapOr);\n-    store.register_late_pass(|| box manual_ok_or::ManualOkOr);\n-    store.register_late_pass(|| box float_equality_without_abs::FloatEqualityWithoutAbs);\n-    store.register_late_pass(|| box semicolon_if_nothing_returned::SemicolonIfNothingReturned);\n-    store.register_late_pass(|| box async_yields_async::AsyncYieldsAsync);\n+    store.register_early_pass(move || Box::new(nonstandard_macro_braces::MacroBraces::new(&macro_matcher)));\n+    store.register_late_pass(|| Box::new(macro_use::MacroUseImports::default()));\n+    store.register_late_pass(|| Box::new(pattern_type_mismatch::PatternTypeMismatch));\n+    store.register_late_pass(|| Box::new(stable_sort_primitive::StableSortPrimitive));\n+    store.register_late_pass(|| Box::new(repeat_once::RepeatOnce));\n+    store.register_late_pass(|| Box::new(unwrap_in_result::UnwrapInResult));\n+    store.register_late_pass(|| Box::new(self_assignment::SelfAssignment));\n+    store.register_late_pass(|| Box::new(manual_unwrap_or::ManualUnwrapOr));\n+    store.register_late_pass(|| Box::new(manual_ok_or::ManualOkOr));\n+    store.register_late_pass(|| Box::new(float_equality_without_abs::FloatEqualityWithoutAbs));\n+    store.register_late_pass(|| Box::new(semicolon_if_nothing_returned::SemicolonIfNothingReturned));\n+    store.register_late_pass(|| Box::new(async_yields_async::AsyncYieldsAsync));\n     let disallowed_methods = conf.disallowed_methods.iter().cloned().collect::<FxHashSet<_>>();\n-    store.register_late_pass(move || box disallowed_method::DisallowedMethod::new(&disallowed_methods));\n-    store.register_early_pass(|| box asm_syntax::InlineAsmX86AttSyntax);\n-    store.register_early_pass(|| box asm_syntax::InlineAsmX86IntelSyntax);\n-    store.register_late_pass(|| box undropped_manually_drops::UndroppedManuallyDrops);\n-    store.register_late_pass(|| box strings::StrToString);\n-    store.register_late_pass(|| box strings::StringToString);\n-    store.register_late_pass(|| box zero_sized_map_values::ZeroSizedMapValues);\n-    store.register_late_pass(|| box vec_init_then_push::VecInitThenPush::default());\n-    store.register_late_pass(|| box case_sensitive_file_extension_comparisons::CaseSensitiveFileExtensionComparisons);\n-    store.register_late_pass(|| box redundant_slicing::RedundantSlicing);\n-    store.register_late_pass(|| box from_str_radix_10::FromStrRadix10);\n-    store.register_late_pass(|| box manual_map::ManualMap);\n-    store.register_late_pass(move || box if_then_some_else_none::IfThenSomeElseNone::new(msrv));\n-    store.register_early_pass(|| box bool_assert_comparison::BoolAssertComparison);\n-    store.register_late_pass(|| box unused_async::UnusedAsync);\n+    store.register_late_pass(move || Box::new(disallowed_method::DisallowedMethod::new(&disallowed_methods)));\n+    store.register_early_pass(|| Box::new(asm_syntax::InlineAsmX86AttSyntax));\n+    store.register_early_pass(|| Box::new(asm_syntax::InlineAsmX86IntelSyntax));\n+    store.register_late_pass(|| Box::new(undropped_manually_drops::UndroppedManuallyDrops));\n+    store.register_late_pass(|| Box::new(strings::StrToString));\n+    store.register_late_pass(|| Box::new(strings::StringToString));\n+    store.register_late_pass(|| Box::new(zero_sized_map_values::ZeroSizedMapValues));\n+    store.register_late_pass(|| Box::new(vec_init_then_push::VecInitThenPush::default()));\n+    store.register_late_pass(|| Box::new(case_sensitive_file_extension_comparisons::CaseSensitiveFileExtensionComparisons));\n+    store.register_late_pass(|| Box::new(redundant_slicing::RedundantSlicing));\n+    store.register_late_pass(|| Box::new(from_str_radix_10::FromStrRadix10));\n+    store.register_late_pass(|| Box::new(manual_map::ManualMap));\n+    store.register_late_pass(move || Box::new(if_then_some_else_none::IfThenSomeElseNone::new(msrv)));\n+    store.register_early_pass(|| Box::new(bool_assert_comparison::BoolAssertComparison));\n+    store.register_late_pass(|| Box::new(unused_async::UnusedAsync));\n     let disallowed_types = conf.disallowed_types.iter().cloned().collect::<FxHashSet<_>>();\n-    store.register_late_pass(move || box disallowed_type::DisallowedType::new(&disallowed_types));\n+    store.register_late_pass(move || Box::new(disallowed_type::DisallowedType::new(&disallowed_types)));\n     let import_renames = conf.enforced_import_renames.clone();\n-    store.register_late_pass(move || box missing_enforced_import_rename::ImportRename::new(import_renames.clone()));\n+    store.register_late_pass(move || Box::new(missing_enforced_import_rename::ImportRename::new(import_renames.clone())));\n     let scripts = conf.allowed_scripts.clone();\n-    store.register_early_pass(move || box disallowed_script_idents::DisallowedScriptIdents::new(&scripts));\n-    store.register_late_pass(|| box strlen_on_c_strings::StrlenOnCStrings);\n-    store.register_late_pass(move || box self_named_constructors::SelfNamedConstructors);\n+    store.register_early_pass(move || Box::new(disallowed_script_idents::DisallowedScriptIdents::new(&scripts)));\n+    store.register_late_pass(|| Box::new(strlen_on_c_strings::StrlenOnCStrings));\n+    store.register_late_pass(move || Box::new(self_named_constructors::SelfNamedConstructors));\n }\n \n #[rustfmt::skip]"}]}