{"sha": "c51472b4b09d22bdbb46027f08be54c4b285a725", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1MTQ3MmI0YjA5ZDIyYmRiYjQ2MDI3ZjA4YmU1NGM0YjI4NWE3MjU=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-05-06T20:43:19Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-05-26T21:53:13Z"}, "message": "Add clippy.toml to project and tests", "tree": {"sha": "f8a9afbd0a3602030dd1901dff876c0e39a66ee0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8a9afbd0a3602030dd1901dff876c0e39a66ee0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c51472b4b09d22bdbb46027f08be54c4b285a725", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c51472b4b09d22bdbb46027f08be54c4b285a725", "html_url": "https://github.com/rust-lang/rust/commit/c51472b4b09d22bdbb46027f08be54c4b285a725", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c51472b4b09d22bdbb46027f08be54c4b285a725/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55ccc7a8c6c353c3350332114c76b79f3108a9c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/55ccc7a8c6c353c3350332114c76b79f3108a9c2", "html_url": "https://github.com/rust-lang/rust/commit/55ccc7a8c6c353c3350332114c76b79f3108a9c2"}], "stats": {"total": 44, "additions": 34, "deletions": 10}, "files": [{"sha": "cda8d17eed44c7cdb9e9fc1609d90e71a146fdfa", "filename": "clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c51472b4b09d22bdbb46027f08be54c4b285a725/clippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c51472b4b09d22bdbb46027f08be54c4b285a725/clippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy.toml?ref=c51472b4b09d22bdbb46027f08be54c4b285a725", "patch": "@@ -0,0 +1 @@\n+avoid-breaking-exported-api = false"}, {"sha": "5eb7ac03541982f7f36a590b7c8f41df7d756108", "filename": "tests/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c51472b4b09d22bdbb46027f08be54c4b285a725/tests%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c51472b4b09d22bdbb46027f08be54c4b285a725/tests%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fclippy.toml?ref=c51472b4b09d22bdbb46027f08be54c4b285a725", "patch": "@@ -0,0 +1 @@\n+# default config for tests, overrides clippy.toml at the project root"}, {"sha": "7d266a36bb666387803a921db506712d073720b4", "filename": "tests/compile-test.rs", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c51472b4b09d22bdbb46027f08be54c4b285a725/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c51472b4b09d22bdbb46027f08be54c4b285a725/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=c51472b4b09d22bdbb46027f08be54c4b285a725", "patch": "@@ -4,8 +4,8 @@\n use compiletest_rs as compiletest;\n use compiletest_rs::common::Mode as TestMode;\n \n-use std::env::{self, set_var, var};\n-use std::ffi::OsStr;\n+use std::env::{self, remove_var, set_var, var_os};\n+use std::ffi::{OsStr, OsString};\n use std::fs;\n use std::io;\n use std::path::{Path, PathBuf};\n@@ -88,9 +88,11 @@ fn default_config() -> compiletest::Config {\n     config\n }\n \n-fn run_mode(cfg: &mut compiletest::Config) {\n+fn run_ui(cfg: &mut compiletest::Config) {\n     cfg.mode = TestMode::Ui;\n     cfg.src_base = Path::new(\"tests\").join(\"ui\");\n+    // use tests/clippy.toml\n+    let _g = VarGuard::set(\"CARGO_MANIFEST_DIR\", std::fs::canonicalize(\"tests\").unwrap());\n     compiletest::run_tests(cfg);\n }\n \n@@ -114,7 +116,7 @@ fn run_ui_toml(config: &mut compiletest::Config) {\n                 continue;\n             }\n             let dir_path = dir.path();\n-            set_var(\"CARGO_MANIFEST_DIR\", &dir_path);\n+            let _g = VarGuard::set(\"CARGO_MANIFEST_DIR\", &dir_path);\n             for file in fs::read_dir(&dir_path)? {\n                 let file = file?;\n                 let file_path = file.path();\n@@ -145,9 +147,7 @@ fn run_ui_toml(config: &mut compiletest::Config) {\n \n     let tests = compiletest::make_tests(config);\n \n-    let manifest_dir = var(\"CARGO_MANIFEST_DIR\").unwrap_or_default();\n     let res = run_tests(config, tests);\n-    set_var(\"CARGO_MANIFEST_DIR\", &manifest_dir);\n     match res {\n         Ok(true) => {},\n         Ok(false) => panic!(\"Some tests failed\"),\n@@ -208,7 +208,7 @@ fn run_ui_cargo(config: &mut compiletest::Config) {\n                         Some(\"main.rs\") => {},\n                         _ => continue,\n                     }\n-                    set_var(\"CLIPPY_CONF_DIR\", case.path());\n+                    let _g = VarGuard::set(\"CLIPPY_CONF_DIR\", case.path());\n                     let paths = compiletest::common::TestPaths {\n                         file: file_path,\n                         base: config.src_base.clone(),\n@@ -236,10 +236,8 @@ fn run_ui_cargo(config: &mut compiletest::Config) {\n     let tests = compiletest::make_tests(config);\n \n     let current_dir = env::current_dir().unwrap();\n-    let conf_dir = var(\"CLIPPY_CONF_DIR\").unwrap_or_default();\n     let res = run_tests(config, &config.filters, tests);\n     env::set_current_dir(current_dir).unwrap();\n-    set_var(\"CLIPPY_CONF_DIR\", conf_dir);\n \n     match res {\n         Ok(true) => {},\n@@ -260,8 +258,32 @@ fn prepare_env() {\n fn compile_test() {\n     prepare_env();\n     let mut config = default_config();\n-    run_mode(&mut config);\n+    run_ui(&mut config);\n     run_ui_toml(&mut config);\n     run_ui_cargo(&mut config);\n     run_internal_tests(&mut config);\n }\n+\n+/// Restores an env var on drop\n+#[must_use]\n+struct VarGuard {\n+    key: &'static str,\n+    value: Option<OsString>,\n+}\n+\n+impl VarGuard {\n+    fn set(key: &'static str, val: impl AsRef<OsStr>) -> Self {\n+        let value = var_os(key);\n+        set_var(key, val);\n+        Self { key, value }\n+    }\n+}\n+\n+impl Drop for VarGuard {\n+    fn drop(&mut self) {\n+        match self.value.as_deref() {\n+            None => remove_var(self.key),\n+            Some(value) => set_var(self.key, value),\n+        }\n+    }\n+}"}]}