{"sha": "6672f7be032e1fc392cb0e2a785563b82b095117", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NzJmN2JlMDMyZTFmYzM5MmNiMGUyYTc4NTU2M2I4MmIwOTUxMTc=", "commit": {"author": {"name": "Adam Reichold", "email": "adam.reichold@t-online.de", "date": "2020-08-01T12:29:42Z"}, "committer": {"name": "Adam Reichold", "email": "adam.reichold@t-online.de", "date": "2020-08-05T14:57:02Z"}, "message": "Memoize the I/O vector count limit\n\nKeep the I/O vector count limit in a `SyncOnceCell` to avoid the overhead of\nrepeatedly calling `sysconf` as these limits are guaranteed to not change during\nthe lifetime of a process by POSIX.", "tree": {"sha": "08dca229b01199c73fd8dac32927a5e187de980f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08dca229b01199c73fd8dac32927a5e187de980f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6672f7be032e1fc392cb0e2a785563b82b095117", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6672f7be032e1fc392cb0e2a785563b82b095117", "html_url": "https://github.com/rust-lang/rust/commit/6672f7be032e1fc392cb0e2a785563b82b095117", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6672f7be032e1fc392cb0e2a785563b82b095117/comments", "author": {"login": "adamreichold", "id": 12997846, "node_id": "MDQ6VXNlcjEyOTk3ODQ2", "avatar_url": "https://avatars.githubusercontent.com/u/12997846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamreichold", "html_url": "https://github.com/adamreichold", "followers_url": "https://api.github.com/users/adamreichold/followers", "following_url": "https://api.github.com/users/adamreichold/following{/other_user}", "gists_url": "https://api.github.com/users/adamreichold/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamreichold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamreichold/subscriptions", "organizations_url": "https://api.github.com/users/adamreichold/orgs", "repos_url": "https://api.github.com/users/adamreichold/repos", "events_url": "https://api.github.com/users/adamreichold/events{/privacy}", "received_events_url": "https://api.github.com/users/adamreichold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "adamreichold", "id": 12997846, "node_id": "MDQ6VXNlcjEyOTk3ODQ2", "avatar_url": "https://avatars.githubusercontent.com/u/12997846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamreichold", "html_url": "https://github.com/adamreichold", "followers_url": "https://api.github.com/users/adamreichold/followers", "following_url": "https://api.github.com/users/adamreichold/following{/other_user}", "gists_url": "https://api.github.com/users/adamreichold/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamreichold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamreichold/subscriptions", "organizations_url": "https://api.github.com/users/adamreichold/orgs", "repos_url": "https://api.github.com/users/adamreichold/repos", "events_url": "https://api.github.com/users/adamreichold/events{/privacy}", "received_events_url": "https://api.github.com/users/adamreichold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94687525815cb2138779e17a766e24c826819d7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/94687525815cb2138779e17a766e24c826819d7c", "html_url": "https://github.com/rust-lang/rust/commit/94687525815cb2138779e17a766e24c826819d7c"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "e294df98c6078ee1e68c87c516daae6b4ab63690", "filename": "library/std/src/sys/unix/fd.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6672f7be032e1fc392cb0e2a785563b82b095117/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6672f7be032e1fc392cb0e2a785563b82b095117/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs?ref=6672f7be032e1fc392cb0e2a785563b82b095117", "patch": "@@ -2,6 +2,7 @@\n \n use crate::cmp;\n use crate::io::{self, Initializer, IoSlice, IoSliceMut, Read};\n+use crate::lazy::SyncOnceCell;\n use crate::mem;\n use crate::sys::cvt;\n use crate::sys_common::AsInner;\n@@ -28,18 +29,22 @@ const READ_LIMIT: usize = libc::ssize_t::MAX as usize;\n \n #[cfg(any(target_os = \"linux\", target_os = \"macos\"))]\n fn max_iov() -> c_int {\n-    let ret = unsafe {\n-        libc::sysconf(\n-            #[cfg(target_os = \"linux\")]\n-            libc::_SC_IOV_MAX,\n-            #[cfg(target_os = \"macos\")]\n-            libc::_SC_UIO_MAXIOV,\n-        )\n-    };\n-\n-    // 1024 is the default value on modern Linux systems\n-    // and hopefully more useful than `c_int::MAX`.\n-    if ret > 0 { ret as c_int } else { 1024 }\n+    static LIM: SyncOnceCell<c_int> = SyncOnceCell::new();\n+\n+    *LIM.get_or_init(|| {\n+        let ret = unsafe {\n+            libc::sysconf(\n+                #[cfg(target_os = \"linux\")]\n+                libc::_SC_IOV_MAX,\n+                #[cfg(target_os = \"macos\")]\n+                libc::_SC_UIO_MAXIOV,\n+            )\n+        };\n+\n+        // 1024 is the default value on modern Linux systems\n+        // and hopefully more useful than `c_int::MAX`.\n+        if ret > 0 { ret as c_int } else { 1024 }\n+    })\n }\n \n #[cfg(not(any(target_os = \"linux\", target_os = \"macos\")))]"}]}