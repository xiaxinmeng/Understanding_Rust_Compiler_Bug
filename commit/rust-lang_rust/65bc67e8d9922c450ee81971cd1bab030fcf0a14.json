{"sha": "65bc67e8d9922c450ee81971cd1bab030fcf0a14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YmM2N2U4ZDk5MjJjNDUwZWU4MTk3MWNkMWJhYjAzMGZjZjBhMTQ=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-03T23:11:04Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-05T17:59:01Z"}, "message": "Make exhaustiveness error message more consistent for slice patterns\n\nThis improves error messages by indicating when slices above a certain\nlengths have not been matched. Previously, we would only report examples\nof such lengths, but of course never all of them.", "tree": {"sha": "9e6177cb39d02b12a0c47879eb57022232b23204", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e6177cb39d02b12a0c47879eb57022232b23204"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65bc67e8d9922c450ee81971cd1bab030fcf0a14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65bc67e8d9922c450ee81971cd1bab030fcf0a14", "html_url": "https://github.com/rust-lang/rust/commit/65bc67e8d9922c450ee81971cd1bab030fcf0a14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65bc67e8d9922c450ee81971cd1bab030fcf0a14/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b66973043e555f3a24a50a227db76b0a069ea037", "url": "https://api.github.com/repos/rust-lang/rust/commits/b66973043e555f3a24a50a227db76b0a069ea037", "html_url": "https://github.com/rust-lang/rust/commit/b66973043e555f3a24a50a227db76b0a069ea037"}], "stats": {"total": 44, "additions": 26, "deletions": 18}, "files": [{"sha": "c70a7ea1f37dda2e2260844306ccb450a372684b", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/65bc67e8d9922c450ee81971cd1bab030fcf0a14/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bc67e8d9922c450ee81971cd1bab030fcf0a14/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=65bc67e8d9922c450ee81971cd1bab030fcf0a14", "patch": "@@ -841,9 +841,17 @@ impl<'tcx> Constructor<'tcx> {\n \n             ty::Ref(..) => PatKind::Deref { subpattern: subpatterns.nth(0).unwrap() },\n \n-            ty::Slice(_) | ty::Array(..) => {\n-                PatKind::Slice { prefix: subpatterns.collect(), slice: None, suffix: vec![] }\n-            }\n+            ty::Slice(_) | ty::Array(..) => match self {\n+                FixedLenSlice(_) => {\n+                    PatKind::Slice { prefix: subpatterns.collect(), slice: None, suffix: vec![] }\n+                }\n+                VarLenSlice(_) => {\n+                    let prefix = subpatterns.collect();\n+                    let wild = Pat { ty, span: DUMMY_SP, kind: Box::new(PatKind::Wild) };\n+                    PatKind::Slice { prefix, slice: Some(wild), suffix: vec![] }\n+                }\n+                _ => bug!(\"bad slice pattern {:?} {:?}\", self, ty),\n+            },\n \n             _ => match *self {\n                 ConstantValue(value, _) => PatKind::Constant { value },"}, {"sha": "9acb4ad9cbbe5e4c3f8c4616de1b5546c5f8c11b", "filename": "src/test/ui/consts/const_let_refutable.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65bc67e8d9922c450ee81971cd1bab030fcf0a14/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65bc67e8d9922c450ee81971cd1bab030fcf0a14/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr?ref=65bc67e8d9922c450ee81971cd1bab030fcf0a14", "patch": "@@ -1,8 +1,8 @@\n-error[E0005]: refutable pattern in function argument: `&[]`, `&[_]` and `&[_, _, _]` not covered\n+error[E0005]: refutable pattern in function argument: `&[]`, `&[_]` and `&[_, _, _, ..]` not covered\n   --> $DIR/const_let_refutable.rs:3:16\n    |\n LL | const fn slice([a, b]: &[i32]) -> i32 {\n-   |                ^^^^^^ patterns `&[]`, `&[_]` and `&[_, _, _]` not covered\n+   |                ^^^^^^ patterns `&[]`, `&[_]` and `&[_, _, _, ..]` not covered\n \n error[E0723]: can only call other `const fn` within a `const fn`, but `const <&i32 as std::ops::Add>::add` is not stable as `const fn`\n   --> $DIR/const_let_refutable.rs:4:5"}, {"sha": "6e52072e3bfec7f91f6ec8f34307b0c09d289b08", "filename": "src/test/ui/pattern/usefulness/match-byte-array-patterns-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65bc67e8d9922c450ee81971cd1bab030fcf0a14/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65bc67e8d9922c450ee81971cd1bab030fcf0a14/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns-2.stderr?ref=65bc67e8d9922c450ee81971cd1bab030fcf0a14", "patch": "@@ -6,11 +6,11 @@ LL |     match buf {\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `&[]` not covered\n+error[E0004]: non-exhaustive patterns: `&[..]` not covered\n   --> $DIR/match-byte-array-patterns-2.rs:10:11\n    |\n LL |     match buf {\n-   |           ^^^ pattern `&[]` not covered\n+   |           ^^^ pattern `&[..]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n "}, {"sha": "bfca5352353a7c0c6ad724bc0bb3e8d438f5a391", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65bc67e8d9922c450ee81971cd1bab030fcf0a14/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bc67e8d9922c450ee81971cd1bab030fcf0a14/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.rs?ref=65bc67e8d9922c450ee81971cd1bab030fcf0a14", "patch": "@@ -44,7 +44,7 @@ fn main() {\n     }\n     let vec = vec![0.5f32];\n     let vec: &[f32] = &vec;\n-    match *vec { //~ ERROR non-exhaustive patterns: `[_, _, _, _]` not covered\n+    match *vec { //~ ERROR non-exhaustive patterns: `[_, _, _, _, ..]` not covered\n         [0.1, 0.2, 0.3] => (),\n         [0.1, 0.2] => (),\n         [0.1] => (),"}, {"sha": "577867e4e712294025aaff2a88e562aa05f35538", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65bc67e8d9922c450ee81971cd1bab030fcf0a14/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65bc67e8d9922c450ee81971cd1bab030fcf0a14/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr?ref=65bc67e8d9922c450ee81971cd1bab030fcf0a14", "patch": "@@ -66,11 +66,11 @@ LL |     match *vec {\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `[_, _, _, _]` not covered\n+error[E0004]: non-exhaustive patterns: `[_, _, _, _, ..]` not covered\n   --> $DIR/non-exhaustive-match.rs:47:11\n    |\n LL |     match *vec {\n-   |           ^^^^ pattern `[_, _, _, _]` not covered\n+   |           ^^^^ pattern `[_, _, _, _, ..]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n "}, {"sha": "97086c4d75ddc87c6d15b62e4498bc4cc4eb75dc", "filename": "src/test/ui/pattern/usefulness/slice-patterns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65bc67e8d9922c450ee81971cd1bab030fcf0a14/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bc67e8d9922c450ee81971cd1bab030fcf0a14/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns.rs?ref=65bc67e8d9922c450ee81971cd1bab030fcf0a14", "patch": "@@ -48,11 +48,11 @@ fn main() {\n         [true, .., true] => {}\n     }\n     match s {\n-    //~^ ERROR `&[_]` not covered\n+    //~^ ERROR `&[_, ..]` not covered\n         [] => {}\n     }\n     match s {\n-    //~^ ERROR `&[_, _]` not covered\n+    //~^ ERROR `&[_, _, ..]` not covered\n         [] => {}\n         [_] => {}\n     }"}, {"sha": "3cea068543ebdf7fd6ecf800989e990a23cfbfa4", "filename": "src/test/ui/pattern/usefulness/slice-patterns.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65bc67e8d9922c450ee81971cd1bab030fcf0a14/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65bc67e8d9922c450ee81971cd1bab030fcf0a14/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns.stderr?ref=65bc67e8d9922c450ee81971cd1bab030fcf0a14", "patch": "@@ -30,19 +30,19 @@ LL |     match s3 {\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `&[_]` not covered\n+error[E0004]: non-exhaustive patterns: `&[_, ..]` not covered\n   --> $DIR/slice-patterns.rs:50:11\n    |\n LL |     match s {\n-   |           ^ pattern `&[_]` not covered\n+   |           ^ pattern `&[_, ..]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `&[_, _]` not covered\n+error[E0004]: non-exhaustive patterns: `&[_, _, ..]` not covered\n   --> $DIR/slice-patterns.rs:54:11\n    |\n LL |     match s {\n-   |           ^ pattern `&[_, _]` not covered\n+   |           ^ pattern `&[_, _, ..]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n "}, {"sha": "7af6075262c6db9e75b3ec2ea39ef04d0ac86022", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65bc67e8d9922c450ee81971cd1bab030fcf0a14/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65bc67e8d9922c450ee81971cd1bab030fcf0a14/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr?ref=65bc67e8d9922c450ee81971cd1bab030fcf0a14", "patch": "@@ -30,11 +30,11 @@ LL |     let _ = match x {};\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `&[_]` not covered\n+error[E0004]: non-exhaustive patterns: `&[_, ..]` not covered\n   --> $DIR/uninhabited-matches-feature-gated.rs:21:19\n    |\n LL |     let _ = match x {\n-   |                   ^ pattern `&[_]` not covered\n+   |                   ^ pattern `&[_, ..]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n "}]}