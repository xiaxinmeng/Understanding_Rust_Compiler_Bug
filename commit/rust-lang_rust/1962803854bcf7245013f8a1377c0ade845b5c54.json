{"sha": "1962803854bcf7245013f8a1377c0ade845b5c54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NjI4MDM4NTRiY2Y3MjQ1MDEzZjhhMTM3N2MwYWRlODQ1YjVjNTQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-24T19:11:33Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-24T20:47:52Z"}, "message": "core: Warning police", "tree": {"sha": "f77abee271c3efa9e773d349bc97449d51724c6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f77abee271c3efa9e773d349bc97449d51724c6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1962803854bcf7245013f8a1377c0ade845b5c54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1962803854bcf7245013f8a1377c0ade845b5c54", "html_url": "https://github.com/rust-lang/rust/commit/1962803854bcf7245013f8a1377c0ade845b5c54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1962803854bcf7245013f8a1377c0ade845b5c54/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34f7255afa4aa80ade1f98b99f0f54cb424b129e", "url": "https://api.github.com/repos/rust-lang/rust/commits/34f7255afa4aa80ade1f98b99f0f54cb424b129e", "html_url": "https://github.com/rust-lang/rust/commit/34f7255afa4aa80ade1f98b99f0f54cb424b129e"}], "stats": {"total": 17, "additions": 5, "deletions": 12}, "files": [{"sha": "1240fe03dd54de78d3094c29c833c90904283e14", "filename": "src/libcore/condition.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1962803854bcf7245013f8a1377c0ade845b5c54/src%2Flibcore%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1962803854bcf7245013f8a1377c0ade845b5c54/src%2Flibcore%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcondition.rs?ref=1962803854bcf7245013f8a1377c0ade845b5c54", "patch": "@@ -206,10 +206,12 @@ mod test {\n             fn test_conditions_are_public() {\n                 let mut trapped = false;\n                 do sadness::cond.trap(|_| {\n+                    trapped = true;\n                     0\n                 }).in {\n                     sadness::cond.raise(0);\n                 }\n+                assert!(trapped);\n             }\n         }\n     }"}, {"sha": "85dc180452ffc71fd541e85b27bcf3a38f7b24d2", "filename": "src/libcore/rt/io/file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1962803854bcf7245013f8a1377c0ade845b5c54/src%2Flibcore%2Frt%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1962803854bcf7245013f8a1377c0ade845b5c54/src%2Flibcore%2Frt%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Ffile.rs?ref=1962803854bcf7245013f8a1377c0ade845b5c54", "patch": "@@ -11,7 +11,7 @@\n use prelude::*;\n use super::support::PathLike;\n use super::{Reader, Writer, Seek, Close};\n-use super::{IoError, SeekStyle};\n+use super::SeekStyle;\n \n /// # XXX\n /// * Ugh, this is ridiculous. What is the best way to represent these options?"}, {"sha": "c95b4344fe75d4ffe9531b12b8973278da77649b", "filename": "src/libcore/rt/io/net/tcp.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1962803854bcf7245013f8a1377c0ade845b5c54/src%2Flibcore%2Frt%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1962803854bcf7245013f8a1377c0ade845b5c54/src%2Flibcore%2Frt%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Fnet%2Ftcp.rs?ref=1962803854bcf7245013f8a1377c0ade845b5c54", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use prelude::*;\n-use super::*;\n use super::super::*;\n use super::ip::IpAddr;\n \n@@ -51,8 +50,6 @@ impl Listener<TcpStream> for TcpListener {\n \n #[cfg(test)]\n mod test {\n-    use super::*;\n-    use rt::test::*;\n \n     #[test] #[ignore]\n     fn smoke_test() {"}, {"sha": "0cb2978fb1a68a79223f1dfe6ecf7febf33ba065", "filename": "src/libcore/rt/io/net/udp.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1962803854bcf7245013f8a1377c0ade845b5c54/src%2Flibcore%2Frt%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1962803854bcf7245013f8a1377c0ade845b5c54/src%2Flibcore%2Frt%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Fnet%2Fudp.rs?ref=1962803854bcf7245013f8a1377c0ade845b5c54", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use prelude::*;\n-use super::*;\n use super::super::*;\n use super::ip::IpAddr;\n "}, {"sha": "262816beecc98450c2cacabb5cd9840960bc9551", "filename": "src/libcore/rt/io/net/unix.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1962803854bcf7245013f8a1377c0ade845b5c54/src%2Flibcore%2Frt%2Fio%2Fnet%2Funix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1962803854bcf7245013f8a1377c0ade845b5c54/src%2Flibcore%2Frt%2Fio%2Fnet%2Funix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Fnet%2Funix.rs?ref=1962803854bcf7245013f8a1377c0ade845b5c54", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use prelude::*;\n-use super::*;\n use super::super::*;\n use super::super::support::PathLike;\n "}, {"sha": "a03bc6c409f8b4092283ab442450896aa9fbccdf", "filename": "src/libcore/rt/local_services.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1962803854bcf7245013f8a1377c0ade845b5c54/src%2Flibcore%2Frt%2Flocal_services.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1962803854bcf7245013f8a1377c0ade845b5c54/src%2Flibcore%2Frt%2Flocal_services.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Flocal_services.rs?ref=1962803854bcf7245013f8a1377c0ade845b5c54", "patch": "@@ -21,7 +21,7 @@\n use prelude::*;\n use libc::{c_void, uintptr_t};\n use cast::transmute;\n-use super::sched::{Task, local_sched};\n+use super::sched::local_sched;\n use super::local_heap::LocalHeap;\n \n pub struct LocalServices {"}, {"sha": "63db705408800a26e4aa48a308e9f775a168de93", "filename": "src/libcore/rt/test.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1962803854bcf7245013f8a1377c0ade845b5c54/src%2Flibcore%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1962803854bcf7245013f8a1377c0ade845b5c54/src%2Flibcore%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Ftest.rs?ref=1962803854bcf7245013f8a1377c0ade845b5c54", "patch": "@@ -35,7 +35,6 @@ pub fn run_in_newsched_task(f: ~fn()) {\n \n /// Test tasks will abort on failure instead of unwinding\n pub fn spawntask(f: ~fn()) {\n-    use super::*;\n     use super::sched::*;\n \n     let mut sched = local_sched::take();\n@@ -51,7 +50,6 @@ pub fn spawntask(f: ~fn()) {\n \n /// Create a new task and run it right now. Aborts on failure\n pub fn spawntask_immediately(f: ~fn()) {\n-    use super::*;\n     use super::sched::*;\n \n     let mut sched = local_sched::take();"}, {"sha": "94f8c0bf707dd4c9aa225d84627e916a46419355", "filename": "src/libcore/rt/uvio.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1962803854bcf7245013f8a1377c0ade845b5c54/src%2Flibcore%2Frt%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1962803854bcf7245013f8a1377c0ade845b5c54/src%2Flibcore%2Frt%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuvio.rs?ref=1962803854bcf7245013f8a1377c0ade845b5c54", "patch": "@@ -11,7 +11,7 @@\n use option::*;\n use result::*;\n \n-use super::io::net::ip::{IpAddr, Ipv4}; // n.b. Ipv4 is used only in tests\n+use super::io::net::ip::IpAddr;\n use super::uv::*;\n use super::rtio::*;\n use ops::Drop;\n@@ -21,7 +21,6 @@ use super::sched::{Scheduler, local_sched};\n \n #[cfg(test)] use uint;\n #[cfg(test)] use unstable::run_in_bare_thread;\n-#[cfg(test)] use super::sched::Task;\n #[cfg(test)] use super::test::*;\n \n pub struct UvEventLoop {"}, {"sha": "dff5908c047962e788acdc20a9f744e17c95dab4", "filename": "src/libcore/task/local_data.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1962803854bcf7245013f8a1377c0ade845b5c54/src%2Flibcore%2Ftask%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1962803854bcf7245013f8a1377c0ade845b5c54/src%2Flibcore%2Ftask%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data.rs?ref=1962803854bcf7245013f8a1377c0ade845b5c54", "patch": "@@ -28,7 +28,6 @@ magic.\n \n use prelude::*;\n use task::local_data_priv::{local_get, local_pop, local_modify, local_set, Handle};\n-use task::rt;\n \n /**\n  * Indexes a task-local data slot. The function's code pointer is used for"}]}