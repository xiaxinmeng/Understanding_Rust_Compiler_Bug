{"sha": "b0c2eab66a4a59a66575e8afbfb9e707de2d7bd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwYzJlYWI2NmE0YTU5YTY2NTc1ZThhZmJmYjllNzA3ZGUyZDdiZDg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-21T13:30:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-21T13:30:41Z"}, "message": "Rollup merge of #76967 - fusion-engineering-forks:revert-atomic-from-mut, r=kodrAus\n\nRevert adding Atomic::from_mut.\n\nThis reverts #74532, which made too many assumptions about platforms, breaking some things.\n\nWill need to be added later with a better way of gating on proper alignment, without hardcoding cfg(target_arch)s.\n\n---\n\nTo be merged if fixing from_mut (#76965) takes too long.\n\nr? @ghost", "tree": {"sha": "be4be8df01df1e76fab62aebb03dd558b32a51d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be4be8df01df1e76fab62aebb03dd558b32a51d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0c2eab66a4a59a66575e8afbfb9e707de2d7bd8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfaKsBCRBK7hj4Ov3rIwAAdHIIABLfq7oZ167nh4hvopGctSTd\nmTtrEOYUVwAapUWMy7B2sj318OkhzXdA0nGD3jdhWBdf/6IBDicsyH0yIxowRw1c\nhtBqAbYvk5s/escfWgm1ndx4CTABh9nKg5z36m1tbALFmwto95YaHKtDHmZN69a5\nKkz0BbmKLGmIqlyE3Acl2nH2IQkwZszaVLSQraXFL/CNFcCUif/C5Jw58sMsTBKJ\n4kyWGDHVXGBygNJXZ4N9glHa2jwRN8WqP8O7VnQerdD+GsC/ZMhLMp8AQZx0xlnx\nMxFfHVDICWhbEDKqbL7YSRDlS+ci9ek29vzJZQkI3staa+QiS+fM2yUxlnklTDc=\n=M/jU\n-----END PGP SIGNATURE-----\n", "payload": "tree be4be8df01df1e76fab62aebb03dd558b32a51d5\nparent 982c4a9c25f0a4ae769580f8093aea209cb8b8c1\nparent 5ef1db3622c373883571868cbdafbfbd568cddcb\nauthor Ralf Jung <post@ralfj.de> 1600695041 +0200\ncommitter GitHub <noreply@github.com> 1600695041 +0200\n\nRollup merge of #76967 - fusion-engineering-forks:revert-atomic-from-mut, r=kodrAus\n\nRevert adding Atomic::from_mut.\n\nThis reverts #74532, which made too many assumptions about platforms, breaking some things.\n\nWill need to be added later with a better way of gating on proper alignment, without hardcoding cfg(target_arch)s.\n\n---\n\nTo be merged if fixing from_mut (#76965) takes too long.\n\nr? @ghost\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0c2eab66a4a59a66575e8afbfb9e707de2d7bd8", "html_url": "https://github.com/rust-lang/rust/commit/b0c2eab66a4a59a66575e8afbfb9e707de2d7bd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0c2eab66a4a59a66575e8afbfb9e707de2d7bd8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "982c4a9c25f0a4ae769580f8093aea209cb8b8c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/982c4a9c25f0a4ae769580f8093aea209cb8b8c1", "html_url": "https://github.com/rust-lang/rust/commit/982c4a9c25f0a4ae769580f8093aea209cb8b8c1"}, {"sha": "5ef1db3622c373883571868cbdafbfbd568cddcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ef1db3622c373883571868cbdafbfbd568cddcb", "html_url": "https://github.com/rust-lang/rust/commit/5ef1db3622c373883571868cbdafbfbd568cddcb"}], "stats": {"total": 90, "additions": 0, "deletions": 90}, "files": [{"sha": "7eec2c487fef42a935ff765e29e6d00bb5c39682", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 0, "deletions": 90, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/b0c2eab66a4a59a66575e8afbfb9e707de2d7bd8/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0c2eab66a4a59a66575e8afbfb9e707de2d7bd8/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=b0c2eab66a4a59a66575e8afbfb9e707de2d7bd8", "patch": "@@ -110,7 +110,6 @@ use self::Ordering::*;\n use crate::cell::UnsafeCell;\n use crate::fmt;\n use crate::intrinsics;\n-use crate::mem::align_of;\n \n use crate::hint::spin_loop;\n \n@@ -328,27 +327,6 @@ impl AtomicBool {\n         unsafe { &mut *(self.v.get() as *mut bool) }\n     }\n \n-    /// Get atomic access to a `&mut bool`.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(atomic_from_mut)]\n-    /// use std::sync::atomic::{AtomicBool, Ordering};\n-    ///\n-    /// let mut some_bool = true;\n-    /// let a = AtomicBool::from_mut(&mut some_bool);\n-    /// a.store(false, Ordering::Relaxed);\n-    /// assert_eq!(some_bool, false);\n-    /// ```\n-    #[inline]\n-    #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n-    pub fn from_mut(v: &mut bool) -> &Self {\n-        // SAFETY: the mutable reference guarantees unique ownership, and\n-        // alignment of both `bool` and `Self` is 1.\n-        unsafe { &*(v as *mut bool as *mut Self) }\n-    }\n-\n     /// Consumes the atomic and returns the contained value.\n     ///\n     /// This is safe because passing `self` by value guarantees that no other threads are\n@@ -841,30 +819,6 @@ impl<T> AtomicPtr<T> {\n         self.p.get_mut()\n     }\n \n-    /// Get atomic access to a pointer.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(atomic_from_mut)]\n-    /// use std::sync::atomic::{AtomicPtr, Ordering};\n-    ///\n-    /// let mut some_ptr = &mut 123 as *mut i32;\n-    /// let a = AtomicPtr::from_mut(&mut some_ptr);\n-    /// a.store(&mut 456, Ordering::Relaxed);\n-    /// assert_eq!(unsafe { *some_ptr }, 456);\n-    /// ```\n-    #[inline]\n-    #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n-    pub fn from_mut(v: &mut *mut T) -> &Self {\n-        let [] = [(); align_of::<AtomicPtr<()>>() - align_of::<*mut ()>()];\n-        // SAFETY:\n-        //  - the mutable reference guarantees unique ownership.\n-        //  - the alignment of `*mut T` and `Self` is the same on all platforms\n-        //    supported by rust, as verified above.\n-        unsafe { &*(v as *mut *mut T as *mut Self) }\n-    }\n-\n     /// Consumes the atomic and returns the contained value.\n     ///\n     /// This is safe because passing `self` by value guarantees that no other threads are\n@@ -1167,7 +1121,6 @@ macro_rules! atomic_int {\n      $stable_nand:meta,\n      $const_stable:meta,\n      $stable_init_const:meta,\n-     $(from_mut: cfg($from_mut_cfg:meta),)?\n      $s_int_type:literal, $int_ref:expr,\n      $extra_feature:expr,\n      $min_fn:ident, $max_fn:ident,\n@@ -1278,45 +1231,6 @@ assert_eq!(some_var.load(Ordering::SeqCst), 5);\n                 }\n             }\n \n-            doc_comment! {\n-                concat!(\"Get atomic access to a `&mut \", stringify!($int_type), \"`.\n-\n-\",\n-if_not_8_bit! {\n-    $int_type,\n-    concat!(\n-        \"**Note:** This function is only available on targets where `\",\n-        stringify!($int_type), \"` has an alignment of \", $align, \" bytes.\"\n-    )\n-},\n-\"\n-\n-# Examples\n-\n-```\n-#![feature(atomic_from_mut)]\n-\", $extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\n-\n-let mut some_int = 123;\n-let a = \", stringify!($atomic_type), \"::from_mut(&mut some_int);\n-a.store(100, Ordering::Relaxed);\n-assert_eq!(some_int, 100);\n-```\n-                \"),\n-                #[inline]\n-                $(#[cfg($from_mut_cfg)])?\n-                #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n-                pub fn from_mut(v: &mut $int_type) -> &Self {\n-                    let [] = [(); align_of::<Self>() - align_of::<$int_type>()];\n-                    // SAFETY:\n-                    //  - the mutable reference guarantees unique ownership.\n-                    //  - the alignment of `$int_type` and `Self` is the\n-                    //    same on all platforms enabled by `$from_mut_cfg`\n-                    //    as verified above.\n-                    unsafe { &*(v as *mut $int_type as *mut Self) }\n-                }\n-            }\n-\n             doc_comment! {\n                 concat!(\"Consumes the atomic and returns the contained value.\n \n@@ -2075,7 +1989,6 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    from_mut: cfg(not(target_arch = \"x86\")),\n     \"i64\", \"../../../std/primitive.i64.html\",\n     \"\",\n     atomic_min, atomic_max,\n@@ -2094,7 +2007,6 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    from_mut: cfg(not(target_arch = \"x86\")),\n     \"u64\", \"../../../std/primitive.u64.html\",\n     \"\",\n     atomic_umin, atomic_umax,\n@@ -2113,7 +2025,6 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    from_mut: cfg(not(target_arch = \"x86_64\")),\n     \"i128\", \"../../../std/primitive.i128.html\",\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_min, atomic_max,\n@@ -2132,7 +2043,6 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    from_mut: cfg(not(target_arch = \"x86_64\")),\n     \"u128\", \"../../../std/primitive.u128.html\",\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_umin, atomic_umax,"}]}