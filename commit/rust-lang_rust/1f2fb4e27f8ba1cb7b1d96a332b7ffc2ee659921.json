{"sha": "1f2fb4e27f8ba1cb7b1d96a332b7ffc2ee659921", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMmZiNGUyN2Y4YmExY2I3YjFkOTZhMzMyYjdmZmMyZWU2NTk5MjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-30T09:51:46Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-30T09:52:21Z"}, "message": "move", "tree": {"sha": "bd5c0a9b83c181fb3a906c41cbeb3ea7f63ae081", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd5c0a9b83c181fb3a906c41cbeb3ea7f63ae081"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f2fb4e27f8ba1cb7b1d96a332b7ffc2ee659921", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f2fb4e27f8ba1cb7b1d96a332b7ffc2ee659921", "html_url": "https://github.com/rust-lang/rust/commit/1f2fb4e27f8ba1cb7b1d96a332b7ffc2ee659921", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f2fb4e27f8ba1cb7b1d96a332b7ffc2ee659921/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d6d74e78ecb6d110de751c528e662fc61113e78", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d6d74e78ecb6d110de751c528e662fc61113e78", "html_url": "https://github.com/rust-lang/rust/commit/0d6d74e78ecb6d110de751c528e662fc61113e78"}], "stats": {"total": 197, "additions": 101, "deletions": 96}, "files": [{"sha": "53ef83aab78a54d0ccc5d749266fa8634cab146c", "filename": "code/src/extension.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f2fb4e27f8ba1cb7b1d96a332b7ffc2ee659921/code%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1f2fb4e27f8ba1cb7b1d96a332b7ffc2ee659921/code%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2Fsrc%2Fextension.ts?ref=1f2fb4e27f8ba1cb7b1d96a332b7ffc2ee659921", "patch": "@@ -395,7 +395,7 @@ async function applySourceChange(change: SourceChange) {\n         let uri = client.protocol2CodeConverter.asUri(toReveal.textDocument.uri)\n         let position = client.protocol2CodeConverter.asPosition(toReveal.position)\n         let editor = vscode.window.activeTextEditor;\n-        if (!editor || editor.document.uri != uri) return\n+        if (!editor || editor.document.uri.toString() != uri.toString()) return\n         if (!editor.selection.isEmpty) return\n         editor!.selection = new vscode.Selection(position, position)\n     }"}, {"sha": "ded88cd15fc7eb7c2bd2cedd1bfc6e587e07d6d1", "filename": "crates/libanalysis/src/api.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1f2fb4e27f8ba1cb7b1d96a332b7ffc2ee659921/crates%2Flibanalysis%2Fsrc%2Fapi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2fb4e27f8ba1cb7b1d96a332b7ffc2ee659921/crates%2Flibanalysis%2Fsrc%2Fapi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fapi.rs?ref=1f2fb4e27f8ba1cb7b1d96a332b7ffc2ee659921", "patch": "@@ -1,7 +1,7 @@\n-use relative_path::RelativePathBuf;\n+use relative_path::{RelativePath, RelativePathBuf};\n use libsyntax2::{File, TextRange, TextUnit, AtomEdit};\n use libeditor;\n-use {imp::AnalysisImpl, FileId, Query};\n+use {imp::{AnalysisImpl, AnalysisHostImpl}, Query};\n \n pub use libeditor::{\n     LocalEdit, StructureNode, LineIndex, FileSymbol,\n@@ -109,3 +109,34 @@ impl Analysis {\n         self.imp.diagnostics(file_id)\n     }\n }\n+\n+pub trait FileResolver: Send + Sync + 'static {\n+    fn file_stem(&self, id: FileId) -> String;\n+    fn resolve(&self, id: FileId, path: &RelativePath) -> Option<FileId>;\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+pub struct FileId(pub u32);\n+\n+#[derive(Debug)]\n+pub struct AnalysisHost {\n+    pub(crate) imp: AnalysisHostImpl\n+}\n+\n+impl AnalysisHost {\n+    pub fn new() -> AnalysisHost {\n+        AnalysisHost { imp: AnalysisHostImpl::new() }\n+    }\n+\n+    pub fn analysis(&self, file_resolver: impl FileResolver) -> Analysis {\n+        Analysis { imp: self.imp.analysis(file_resolver) }\n+    }\n+\n+    pub fn change_file(&mut self, file_id: FileId, text: Option<String>) {\n+        self.change_files(::std::iter::once((file_id, text)));\n+    }\n+\n+    pub fn change_files(&mut self, changes: impl Iterator<Item=(FileId, Option<String>)>) {\n+        self.imp.change_files(changes)\n+    }\n+}"}, {"sha": "06bbc7cf25b5936b4a8f37913fe105a003eb21de", "filename": "crates/libanalysis/src/imp.rs", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1f2fb4e27f8ba1cb7b1d96a332b7ffc2ee659921/crates%2Flibanalysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2fb4e27f8ba1cb7b1d96a332b7ffc2ee659921/crates%2Flibanalysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fimp.rs?ref=1f2fb4e27f8ba1cb7b1d96a332b7ffc2ee659921", "patch": "@@ -22,9 +22,65 @@ use {\n     FileId, FileResolver, Query, Diagnostic, SourceChange, SourceFileEdit, Position, FileSystemEdit,\n     module_map::Problem,\n     symbol_index::FileSymbols,\n-    module_map::ModuleMap,\n+    module_map::{ModuleMap, ChangeKind},\n };\n \n+#[derive(Debug)]\n+pub(crate) struct AnalysisHostImpl {\n+    data: Arc<WorldData>\n+}\n+\n+impl AnalysisHostImpl {\n+    pub fn new() -> AnalysisHostImpl {\n+        AnalysisHostImpl {\n+            data: Arc::new(WorldData::default()),\n+        }\n+    }\n+\n+    pub fn analysis(\n+        &self,\n+        file_resolver: impl FileResolver,\n+    ) -> AnalysisImpl {\n+        AnalysisImpl {\n+            needs_reindex: AtomicBool::new(false),\n+            file_resolver: Arc::new(file_resolver),\n+            data: self.data.clone()\n+        }\n+    }\n+\n+    pub fn change_files(&mut self, changes: impl Iterator<Item=(FileId, Option<String>)>) {\n+        let data = self.data_mut();\n+        for (file_id, text) in changes {\n+            let change_kind = if data.file_map.remove(&file_id).is_some() {\n+                if text.is_some() {\n+                    ChangeKind::Update\n+                } else {\n+                    ChangeKind::Delete\n+                }\n+            } else {\n+                ChangeKind::Insert\n+            };\n+            data.module_map.update_file(file_id, change_kind);\n+            data.file_map.remove(&file_id);\n+            if let Some(text) = text {\n+                let file_data = FileData::new(text);\n+                data.file_map.insert(file_id, Arc::new(file_data));\n+            } else {\n+                data.file_map.remove(&file_id);\n+            }\n+        }\n+    }\n+\n+    fn data_mut(&mut self) -> &mut WorldData {\n+        if Arc::get_mut(&mut self.data).is_none() {\n+            self.data = Arc::new(WorldData {\n+                file_map: self.data.file_map.clone(),\n+                module_map: self.data.module_map.clone(),\n+            });\n+        }\n+        Arc::get_mut(&mut self.data).unwrap()\n+    }\n+}\n \n pub(crate) struct AnalysisImpl {\n     pub(crate) needs_reindex: AtomicBool,"}, {"sha": "a39141941ff35bf2f87938164b39a26352e90658", "filename": "crates/libanalysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 84, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/1f2fb4e27f8ba1cb7b1d96a332b7ffc2ee659921/crates%2Flibanalysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2fb4e27f8ba1cb7b1d96a332b7ffc2ee659921/crates%2Flibanalysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Flib.rs?ref=1f2fb4e27f8ba1cb7b1d96a332b7ffc2ee659921", "patch": "@@ -14,92 +14,10 @@ mod module_map;\n mod api;\n mod imp;\n \n-use std::{\n-    sync::{\n-        Arc,\n-        atomic::{AtomicBool},\n-    },\n-};\n-\n-use relative_path::RelativePath;\n-\n-use self::{\n-    module_map::{ChangeKind},\n-    imp::{WorldData, FileData},\n-};\n pub use self::symbol_index::Query;\n pub use self::api::{\n-    Analysis, SourceChange, SourceFileEdit, FileSystemEdit, Position, Diagnostic, Runnable, RunnableKind\n+    AnalysisHost, Analysis, SourceChange, SourceFileEdit, FileSystemEdit, Position, Diagnostic, Runnable, RunnableKind,\n+    FileId, FileResolver,\n };\n \n pub type Result<T> = ::std::result::Result<T, ::failure::Error>;\n-\n-pub trait FileResolver: Send + Sync + 'static {\n-    fn file_stem(&self, id: FileId) -> String;\n-    fn resolve(&self, id: FileId, path: &RelativePath) -> Option<FileId>;\n-}\n-\n-#[derive(Debug)]\n-pub struct WorldState {\n-    data: Arc<WorldData>\n-}\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub struct FileId(pub u32);\n-\n-impl WorldState {\n-    pub fn new() -> WorldState {\n-        WorldState {\n-            data: Arc::new(WorldData::default()),\n-        }\n-    }\n-\n-    pub fn analysis(\n-        &self,\n-        file_resolver: impl FileResolver,\n-    ) -> Analysis {\n-        let imp = imp::AnalysisImpl {\n-            needs_reindex: AtomicBool::new(false),\n-            file_resolver: Arc::new(file_resolver),\n-            data: self.data.clone()\n-        };\n-        Analysis { imp }\n-    }\n-\n-    pub fn change_file(&mut self, file_id: FileId, text: Option<String>) {\n-        self.change_files(::std::iter::once((file_id, text)));\n-    }\n-\n-    pub fn change_files(&mut self, changes: impl Iterator<Item=(FileId, Option<String>)>) {\n-        let data = self.data_mut();\n-        for (file_id, text) in changes {\n-            let change_kind = if data.file_map.remove(&file_id).is_some() {\n-                if text.is_some() {\n-                    ChangeKind::Update\n-                } else {\n-                    ChangeKind::Delete\n-                }\n-            } else {\n-                ChangeKind::Insert\n-            };\n-            data.module_map.update_file(file_id, change_kind);\n-            data.file_map.remove(&file_id);\n-            if let Some(text) = text {\n-                let file_data = FileData::new(text);\n-                data.file_map.insert(file_id, Arc::new(file_data));\n-            } else {\n-                data.file_map.remove(&file_id);\n-            }\n-        }\n-    }\n-\n-    fn data_mut(&mut self) -> &mut WorldData {\n-        if Arc::get_mut(&mut self.data).is_none() {\n-            self.data = Arc::new(WorldData {\n-                file_map: self.data.file_map.clone(),\n-                module_map: self.data.module_map.clone(),\n-            });\n-        }\n-        Arc::get_mut(&mut self.data).unwrap()\n-    }\n-}"}, {"sha": "9ba7df0b8530c6615f80b3e3ae2f9317089b105a", "filename": "crates/server/src/server_world.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f2fb4e27f8ba1cb7b1d96a332b7ffc2ee659921/crates%2Fserver%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2fb4e27f8ba1cb7b1d96a332b7ffc2ee659921/crates%2Fserver%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fserver_world.rs?ref=1f2fb4e27f8ba1cb7b1d96a332b7ffc2ee659921", "patch": "@@ -5,7 +5,7 @@ use std::{\n };\n \n use languageserver_types::Url;\n-use libanalysis::{FileId, WorldState, Analysis};\n+use libanalysis::{FileId, AnalysisHost, Analysis};\n \n use {\n     Result,\n@@ -15,7 +15,7 @@ use {\n \n #[derive(Debug)]\n pub struct ServerWorldState {\n-    pub analysis: WorldState,\n+    pub analysis_host: AnalysisHost,\n     pub path_map: PathMap,\n     pub mem_map: HashMap<FileId, Option<String>>,\n }\n@@ -29,7 +29,7 @@ pub struct ServerWorld {\n impl ServerWorldState {\n     pub fn new() -> ServerWorldState {\n         ServerWorldState {\n-            analysis: WorldState::new(),\n+            analysis_host: AnalysisHost::new(),\n             path_map: PathMap::new(),\n             mem_map: HashMap::new(),\n         }\n@@ -58,20 +58,20 @@ impl ServerWorldState {\n                 }\n             });\n \n-        self.analysis.change_files(changes);\n+        self.analysis_host.change_files(changes);\n     }\n \n     pub fn add_mem_file(&mut self, path: PathBuf, text: String) {\n         let file_id = self.path_map.get_or_insert(path);\n         self.mem_map.insert(file_id, None);\n-        self.analysis.change_file(file_id, Some(text));\n+        self.analysis_host.change_file(file_id, Some(text));\n     }\n \n     pub fn change_mem_file(&mut self, path: &Path, text: String) -> Result<()> {\n         let file_id = self.path_map.get_id(path).ok_or_else(|| {\n             format_err!(\"change to unknown file: {}\", path.display())\n         })?;\n-        self.analysis.change_file(file_id, Some(text));\n+        self.analysis_host.change_file(file_id, Some(text));\n         Ok(())\n     }\n \n@@ -85,13 +85,13 @@ impl ServerWorldState {\n         };\n         // Do this via file watcher ideally.\n         let text = fs::read_to_string(path).ok();\n-        self.analysis.change_file(file_id, text);\n+        self.analysis_host.change_file(file_id, text);\n         Ok(())\n     }\n \n     pub fn snapshot(&self) -> ServerWorld {\n         ServerWorld {\n-            analysis: self.analysis.analysis(self.path_map.clone()),\n+            analysis: self.analysis_host.analysis(self.path_map.clone()),\n             path_map: self.path_map.clone()\n         }\n     }"}]}