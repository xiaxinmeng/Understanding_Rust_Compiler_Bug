{"sha": "333b920feeb136d35fac804d51310df1a35c399e", "node_id": "C_kwDOAAsO6NoAKDMzM2I5MjBmZWViMTM2ZDM1ZmFjODA0ZDUxMzEwZGYxYTM1YzM5OWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-06T11:24:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-06T11:24:37Z"}, "message": "Auto merge of #109421 - mhammerly:extern-force-option, r=petrochenkov\n\nAdd `force` option for `--extern` flag\n\nWhen `--extern force:foo=libfoo.so` is passed to `rustc` and `foo` is not actually used in the crate, ~inject an `extern crate foo;` statement into the AST~ force it to be resolved anyway in `CrateLoader::postprocess()`. This allows you to, for instance, inject a `#[panic_handler]` implementation into a `#![no_std]` crate without modifying its source so that it can be built as a `dylib`. It may also be useful for `#![panic_runtime]` or `#[global_allocator]`/`#![default_lib_allocator]` implementations.\n\nMy work previously involved integrating Rust into an existing C/C++ codebase which was built with Buck and shipped on, among other platforms, Android. When targeting Android, Buck builds all \"native\" code with shared linkage* so it can be loaded from Java/Kotlin. My project was not itself `#![no_std]`, but many of our dependencies were, and they would fail to build with shared linkage due to a lack of a panic handler. With this change, that project can add the new `force` option to the `std` dependency it already explicitly provides to every crate to solve this problem.\n\n*This is an oversimplification - Buck has a couple features for aggregating dependencies into larger shared libraries, but none that I think sustainably solve this problem.\n\n~The AST injection happens after macro expansion around where we similarly inject a test harness and proc-macro harness. The resolver's list of actually-used extern flags is populated during macro expansion, and if any of our `--extern` arguments have the `force` option and weren't already used, we inject an `extern crate` statement for them. The injection logic was added in `rustc_builtin_macros` as that's where similar injections for tests, proc-macros, and std/core already live.~\n\n(New contributor - grateful for feedback and guidance!)", "tree": {"sha": "f759f1a51dbf09a333ebe83e0864796e7f96287a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f759f1a51dbf09a333ebe83e0864796e7f96287a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/333b920feeb136d35fac804d51310df1a35c399e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/333b920feeb136d35fac804d51310df1a35c399e", "html_url": "https://github.com/rust-lang/rust/commit/333b920feeb136d35fac804d51310df1a35c399e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/333b920feeb136d35fac804d51310df1a35c399e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "151a070afe09c0c844e8d9af98a20fee56a5a7f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/151a070afe09c0c844e8d9af98a20fee56a5a7f2", "html_url": "https://github.com/rust-lang/rust/commit/151a070afe09c0c844e8d9af98a20fee56a5a7f2"}, {"sha": "812f2d75e11a1acd52a4bfb201247c34a76c8e49", "url": "https://api.github.com/repos/rust-lang/rust/commits/812f2d75e11a1acd52a4bfb201247c34a76c8e49", "html_url": "https://github.com/rust-lang/rust/commit/812f2d75e11a1acd52a4bfb201247c34a76c8e49"}], "stats": {"total": 80, "additions": 78, "deletions": 2}, "files": [{"sha": "1bae771e373d466e3bc1ca09ef7bd74d04049fa0", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/333b920feeb136d35fac804d51310df1a35c399e/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/333b920feeb136d35fac804d51310df1a35c399e/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=333b920feeb136d35fac804d51310df1a35c399e", "patch": "@@ -69,6 +69,7 @@ where\n         is_private_dep: false,\n         add_prelude: true,\n         nounused_dep: false,\n+        force: false,\n     }\n }\n "}, {"sha": "e6e7d25773e672c6d298d05612dda54a72f266fa", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/333b920feeb136d35fac804d51310df1a35c399e/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/333b920feeb136d35fac804d51310df1a35c399e/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=333b920feeb136d35fac804d51310df1a35c399e", "patch": "@@ -865,6 +865,17 @@ impl<'a, 'tcx> CrateLoader<'a, 'tcx> {\n         }\n     }\n \n+    fn inject_forced_externs(&mut self) {\n+        for (name, entry) in self.sess.opts.externs.iter() {\n+            if entry.force {\n+                let name_interned = Symbol::intern(name);\n+                if !self.used_extern_options.contains(&name_interned) {\n+                    self.resolve_crate(name_interned, DUMMY_SP, CrateDepKind::Explicit);\n+                }\n+            }\n+        }\n+    }\n+\n     fn inject_dependency_if(\n         &self,\n         krate: CrateNum,\n@@ -913,7 +924,7 @@ impl<'a, 'tcx> CrateLoader<'a, 'tcx> {\n                 // Don't worry about pathless `--extern foo` sysroot references\n                 continue;\n             }\n-            if entry.nounused_dep {\n+            if entry.nounused_dep || entry.force {\n                 // We're not worried about this one\n                 continue;\n             }\n@@ -942,6 +953,7 @@ impl<'a, 'tcx> CrateLoader<'a, 'tcx> {\n     }\n \n     pub fn postprocess(&mut self, krate: &ast::Crate) {\n+        self.inject_forced_externs();\n         self.inject_profiler_runtime(krate);\n         self.inject_allocator_crate(krate);\n         self.inject_panic_runtime(krate);"}, {"sha": "d80cc0aa043743981f1f2798c216c8abb2747296", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/333b920feeb136d35fac804d51310df1a35c399e/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/333b920feeb136d35fac804d51310df1a35c399e/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=333b920feeb136d35fac804d51310df1a35c399e", "patch": "@@ -518,6 +518,12 @@ pub struct ExternEntry {\n     /// `--extern nounused:std=/path/to/lib/libstd.rlib`. This is used to\n     /// suppress `unused-crate-dependencies` warnings.\n     pub nounused_dep: bool,\n+    /// If the extern entry is not referenced in the crate, force it to be resolved anyway.\n+    ///\n+    /// Allows a dependency satisfying, for instance, a missing panic handler to be injected\n+    /// without modifying source:\n+    /// `--extern force:extras=/path/to/lib/libstd.rlib`\n+    pub force: bool,\n }\n \n #[derive(Clone, Debug)]\n@@ -556,7 +562,13 @@ impl Externs {\n \n impl ExternEntry {\n     fn new(location: ExternLocation) -> ExternEntry {\n-        ExternEntry { location, is_private_dep: false, add_prelude: false, nounused_dep: false }\n+        ExternEntry {\n+            location,\n+            is_private_dep: false,\n+            add_prelude: false,\n+            nounused_dep: false,\n+            force: false,\n+        }\n     }\n \n     pub fn files(&self) -> Option<impl Iterator<Item = &CanonicalizedPath>> {\n@@ -2261,6 +2273,7 @@ pub fn parse_externs(\n         let mut is_private_dep = false;\n         let mut add_prelude = true;\n         let mut nounused_dep = false;\n+        let mut force = false;\n         if let Some(opts) = options {\n             if !is_unstable_enabled {\n                 early_error(\n@@ -2283,6 +2296,7 @@ pub fn parse_externs(\n                         }\n                     }\n                     \"nounused\" => nounused_dep = true,\n+                    \"force\" => force = true,\n                     _ => early_error(error_format, &format!(\"unknown --extern option `{opt}`\")),\n                 }\n             }\n@@ -2293,6 +2307,8 @@ pub fn parse_externs(\n         entry.is_private_dep |= is_private_dep;\n         // likewise `nounused`\n         entry.nounused_dep |= nounused_dep;\n+        // and `force`\n+        entry.force |= force;\n         // If any flag is missing `noprelude`, then add to the prelude.\n         entry.add_prelude |= add_prelude;\n     }"}, {"sha": "a625761a838a823e8b3cded5813415a76907b7ff", "filename": "tests/ui/extern-flag/auxiliary/panic_handler.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/333b920feeb136d35fac804d51310df1a35c399e/tests%2Fui%2Fextern-flag%2Fauxiliary%2Fpanic_handler.rs", "raw_url": "https://github.com/rust-lang/rust/raw/333b920feeb136d35fac804d51310df1a35c399e/tests%2Fui%2Fextern-flag%2Fauxiliary%2Fpanic_handler.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextern-flag%2Fauxiliary%2Fpanic_handler.rs?ref=333b920feeb136d35fac804d51310df1a35c399e", "patch": "@@ -0,0 +1,17 @@\n+#![feature(lang_items)]\n+#![no_std]\n+\n+// Since `rustc` generally passes `-nodefaultlibs` to the linker,\n+// Rust programs link necessary system libraries via `#[link()]`\n+// attributes in the `libc` crate. `libc` is a dependency of `std`,\n+// but as we are `#![no_std]`, we need to include it manually.\n+#![feature(rustc_private)]\n+extern crate libc;\n+\n+#[panic_handler]\n+pub fn begin_panic_handler(_info: &core::panic::PanicInfo<'_>) -> ! {\n+    loop {}\n+}\n+\n+#[lang = \"eh_personality\"]\n+extern \"C\" fn eh_personality() {}"}, {"sha": "f56b5378223f2f8b20712726c623740268cf747d", "filename": "tests/ui/extern-flag/force-extern.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/333b920feeb136d35fac804d51310df1a35c399e/tests%2Fui%2Fextern-flag%2Fforce-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/333b920feeb136d35fac804d51310df1a35c399e/tests%2Fui%2Fextern-flag%2Fforce-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextern-flag%2Fforce-extern.rs?ref=333b920feeb136d35fac804d51310df1a35c399e", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+// ignore-cross-compile (needs dylibs and compiletest doesn't have a more specific header)\n+// aux-crate:force:panic_handler=panic_handler.rs\n+// compile-flags: -Zunstable-options --crate-type dylib\n+// edition:2018\n+\n+#![no_std]\n+\n+fn foo() {}"}, {"sha": "ce9cbfe1cd27a95827fae7901dd313d5987569b7", "filename": "tests/ui/extern-flag/no-force-extern.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/333b920feeb136d35fac804d51310df1a35c399e/tests%2Fui%2Fextern-flag%2Fno-force-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/333b920feeb136d35fac804d51310df1a35c399e/tests%2Fui%2Fextern-flag%2Fno-force-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextern-flag%2Fno-force-extern.rs?ref=333b920feeb136d35fac804d51310df1a35c399e", "patch": "@@ -0,0 +1,10 @@\n+// aux-crate:panic_handler=panic_handler.rs\n+// ignore-cross-compile (needs dylibs and compiletest doesn't have a more specific header)\n+// compile_flags: -Zunstable-options --crate-type dylib\n+// error-pattern: `#[panic_handler]` function required, but not found\n+// dont-check-compiler-stderr\n+// edition: 2018\n+\n+#![no_std]\n+\n+fn foo() {}"}, {"sha": "a4091616dd5699d62ece88fffddf90f388cc3d49", "filename": "tests/ui/extern-flag/redundant-force-extern.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/333b920feeb136d35fac804d51310df1a35c399e/tests%2Fui%2Fextern-flag%2Fredundant-force-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/333b920feeb136d35fac804d51310df1a35c399e/tests%2Fui%2Fextern-flag%2Fredundant-force-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextern-flag%2Fredundant-force-extern.rs?ref=333b920feeb136d35fac804d51310df1a35c399e", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+// ignore-cross-compile (needs dylibs and compiletest doesn't have a more specific header)\n+// aux-crate:force:panic_handler=panic_handler.rs\n+// compile-flags: -Zunstable-options --crate-type dylib\n+// edition:2018\n+\n+#![no_std]\n+\n+extern crate panic_handler;\n+\n+fn foo() {}"}]}