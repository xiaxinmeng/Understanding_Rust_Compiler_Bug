{"sha": "cbafae6fa8e1292302d1ea0c04871fe24d174954", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiYWZhZTZmYThlMTI5MjMwMmQxZWEwYzA0ODcxZmUyNGQxNzQ5NTQ=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-06-09T19:45:35Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-06-09T19:45:35Z"}, "message": "Merge #1388\n\n1388: Remove NavigationTarget::node and fill docs and description in during construction r=matklad a=edwin0cheng\n\nRelated dissused:\r\n\r\n https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/MBE.20discussion/near/167105559\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "047b949be1ee4908d2e429bfffc545a4f859215f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/047b949be1ee4908d2e429bfffc545a4f859215f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbafae6fa8e1292302d1ea0c04871fe24d174954", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbafae6fa8e1292302d1ea0c04871fe24d174954", "html_url": "https://github.com/rust-lang/rust/commit/cbafae6fa8e1292302d1ea0c04871fe24d174954", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbafae6fa8e1292302d1ea0c04871fe24d174954/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "9c92c05ca614fcded456153b1bc6717d17f0dafb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c92c05ca614fcded456153b1bc6717d17f0dafb", "html_url": "https://github.com/rust-lang/rust/commit/9c92c05ca614fcded456153b1bc6717d17f0dafb"}, {"sha": "60938ff73ed80461982f52cb2b044572e7323a0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/60938ff73ed80461982f52cb2b044572e7323a0c", "html_url": "https://github.com/rust-lang/rust/commit/60938ff73ed80461982f52cb2b044572e7323a0c"}], "stats": {"total": 444, "additions": 323, "deletions": 121}, "files": [{"sha": "f11af0a0b65d630d27b1a89ce84fdaefa3593469", "filename": "crates/ra_ide_api/src/display.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cbafae6fa8e1292302d1ea0c04871fe24d174954/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbafae6fa8e1292302d1ea0c04871fe24d174954/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs?ref=cbafae6fa8e1292302d1ea0c04871fe24d174954", "patch": "@@ -4,14 +4,16 @@\n mod function_signature;\n mod navigation_target;\n mod structure;\n+mod short_label;\n \n-use crate::db::RootDatabase;\n use ra_syntax::{ast::{self, AstNode, TypeParamsOwner}, SyntaxKind::{ATTR, COMMENT}};\n \n pub use navigation_target::NavigationTarget;\n pub use structure::{StructureNode, file_structure};\n pub use function_signature::FunctionSignature;\n \n+pub(crate) use short_label::ShortLabel;\n+\n pub(crate) fn function_label(node: &ast::FnDef) -> String {\n     FunctionSignature::from(node).to_string()\n }\n@@ -73,10 +75,10 @@ where\n \n // FIXME: this should not really use navigation target. Rather, approximately\n // resolved symbol should return a `DefId`.\n-pub(crate) fn doc_text_for(db: &RootDatabase, nav: NavigationTarget) -> Option<String> {\n-    match (nav.description(db), nav.docs(db)) {\n+pub(crate) fn doc_text_for(nav: NavigationTarget) -> Option<String> {\n+    match (nav.description(), nav.docs()) {\n         (Some(desc), docs) => Some(rust_code_markup_with_doc(desc, docs)),\n-        (None, Some(docs)) => Some(docs),\n+        (None, Some(docs)) => Some(docs.to_string()),\n         _ => None,\n     }\n }"}, {"sha": "983ebe7883d2d6d4245c062d40817770aa936128", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 186, "deletions": 100, "changes": 286, "blob_url": "https://github.com/rust-lang/rust/blob/cbafae6fa8e1292302d1ea0c04871fe24d174954/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbafae6fa8e1292302d1ea0c04871fe24d174954/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=cbafae6fa8e1292302d1ea0c04871fe24d174954", "patch": "@@ -1,13 +1,14 @@\n use ra_db::{FileId, SourceDatabase};\n use ra_syntax::{\n-    SyntaxNode, AstNode, SmolStr, TextRange, TreeArc, AstPtr,\n+    SyntaxNode, AstNode, SmolStr, TextRange, AstPtr,\n     SyntaxKind::{self, NAME},\n-    ast::{self, NameOwner, VisibilityOwner, TypeAscriptionOwner},\n+    ast::{self, DocCommentsOwner},\n     algo::visit::{visitor, Visitor},\n };\n use hir::{ModuleSource, FieldSource, ImplItem};\n \n use crate::{FileSymbol, db::RootDatabase};\n+use super::short_label::ShortLabel;\n \n /// `NavigationTarget` represents and element in the editor's UI which you can\n /// click on to navigate to a particular piece of code.\n@@ -22,6 +23,8 @@ pub struct NavigationTarget {\n     full_range: TextRange,\n     focus_range: Option<TextRange>,\n     container_name: Option<SmolStr>,\n+    description: Option<String>,\n+    docs: Option<String>,\n }\n \n impl NavigationTarget {\n@@ -51,6 +54,14 @@ impl NavigationTarget {\n         self.full_range\n     }\n \n+    pub fn docs(&self) -> Option<&str> {\n+        self.docs.as_ref().map(String::as_str)\n+    }\n+\n+    pub fn description(&self) -> Option<&str> {\n+        self.description.as_ref().map(String::as_str)\n+    }\n+\n     /// A \"most interesting\" range withing the `full_range`.\n     ///\n     /// Typically, `full_range` is the whole syntax node,\n@@ -60,17 +71,19 @@ impl NavigationTarget {\n     }\n \n     pub(crate) fn from_bind_pat(file_id: FileId, pat: &ast::BindPat) -> NavigationTarget {\n-        NavigationTarget::from_named(file_id, pat)\n+        NavigationTarget::from_named(file_id, pat, None, None)\n     }\n \n-    pub(crate) fn from_symbol(symbol: FileSymbol) -> NavigationTarget {\n+    pub(crate) fn from_symbol(db: &RootDatabase, symbol: FileSymbol) -> NavigationTarget {\n         NavigationTarget {\n             file_id: symbol.file_id,\n             name: symbol.name.clone(),\n             kind: symbol.ptr.kind(),\n             full_range: symbol.ptr.range(),\n             focus_range: symbol.name_range,\n             container_name: symbol.container_name.clone(),\n+            description: description_from_symbol(db, &symbol),\n+            docs: docs_from_symbol(db, &symbol),\n         }\n     }\n \n@@ -84,13 +97,16 @@ impl NavigationTarget {\n             ast::PatKind::BindPat(pat) => return NavigationTarget::from_bind_pat(file_id, &pat),\n             _ => (\"_\".into(), pat.syntax_node_ptr().range()),\n         };\n+\n         NavigationTarget {\n             file_id,\n             name,\n             full_range,\n             focus_range: None,\n             kind: NAME,\n             container_name: None,\n+            description: None, //< No documentation for Description\n+            docs: None,        //< No documentation for Pattern\n         }\n     }\n \n@@ -99,13 +115,16 @@ impl NavigationTarget {\n         par: AstPtr<ast::SelfParam>,\n     ) -> NavigationTarget {\n         let (name, full_range) = (\"self\".into(), par.syntax_node_ptr().range());\n+\n         NavigationTarget {\n             file_id,\n             name,\n             full_range,\n             focus_range: None,\n             kind: NAME,\n             container_name: None,\n+            description: None, //< No document node for SelfParam\n+            docs: None,        //< No document node for SelfParam\n         }\n     }\n \n@@ -115,35 +134,54 @@ impl NavigationTarget {\n         let name = module.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n         match source {\n             ModuleSource::SourceFile(node) => {\n-                NavigationTarget::from_syntax(file_id, name, None, node.syntax())\n-            }\n-            ModuleSource::Module(node) => {\n-                NavigationTarget::from_syntax(file_id, name, None, node.syntax())\n+                NavigationTarget::from_syntax(file_id, name, None, node.syntax(), None, None)\n             }\n+            ModuleSource::Module(node) => NavigationTarget::from_syntax(\n+                file_id,\n+                name,\n+                None,\n+                node.syntax(),\n+                node.doc_comment_text(),\n+                node.short_label(),\n+            ),\n         }\n     }\n \n     pub(crate) fn from_module_to_decl(db: &RootDatabase, module: hir::Module) -> NavigationTarget {\n         let name = module.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n         if let Some((file_id, source)) = module.declaration_source(db) {\n             let file_id = file_id.as_original_file();\n-            return NavigationTarget::from_syntax(file_id, name, None, source.syntax());\n+            return NavigationTarget::from_syntax(\n+                file_id,\n+                name,\n+                None,\n+                source.syntax(),\n+                source.doc_comment_text(),\n+                source.short_label(),\n+            );\n         }\n         NavigationTarget::from_module(db, module)\n     }\n \n     pub(crate) fn from_function(db: &RootDatabase, func: hir::Function) -> NavigationTarget {\n         let (file_id, fn_def) = func.source(db);\n-        NavigationTarget::from_named(file_id.original_file(db), &*fn_def)\n+        NavigationTarget::from_named(\n+            file_id.original_file(db),\n+            &*fn_def,\n+            fn_def.doc_comment_text(),\n+            fn_def.short_label(),\n+        )\n     }\n \n     pub(crate) fn from_field(db: &RootDatabase, field: hir::StructField) -> NavigationTarget {\n         let (file_id, field) = field.source(db);\n         let file_id = file_id.original_file(db);\n         match field {\n-            FieldSource::Named(it) => NavigationTarget::from_named(file_id, &*it),\n+            FieldSource::Named(it) => {\n+                NavigationTarget::from_named(file_id, &*it, it.doc_comment_text(), it.short_label())\n+            }\n             FieldSource::Pos(it) => {\n-                NavigationTarget::from_syntax(file_id, \"\".into(), None, it.syntax())\n+                NavigationTarget::from_syntax(file_id, \"\".into(), None, it.syntax(), None, None)\n             }\n         }\n     }\n@@ -152,15 +190,30 @@ impl NavigationTarget {\n         match adt_def {\n             hir::AdtDef::Struct(s) => {\n                 let (file_id, node) = s.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+                NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                    node.doc_comment_text(),\n+                    node.short_label(),\n+                )\n             }\n             hir::AdtDef::Union(s) => {\n                 let (file_id, node) = s.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+                NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                    node.doc_comment_text(),\n+                    node.short_label(),\n+                )\n             }\n             hir::AdtDef::Enum(s) => {\n                 let (file_id, node) = s.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+                NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                    node.doc_comment_text(),\n+                    node.short_label(),\n+                )\n             }\n         }\n     }\n@@ -174,35 +227,75 @@ impl NavigationTarget {\n             hir::ModuleDef::Function(func) => NavigationTarget::from_function(db, func),\n             hir::ModuleDef::Struct(s) => {\n                 let (file_id, node) = s.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+                NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                    node.doc_comment_text(),\n+                    node.short_label(),\n+                )\n             }\n             hir::ModuleDef::Union(s) => {\n                 let (file_id, node) = s.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+                NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                    node.doc_comment_text(),\n+                    node.short_label(),\n+                )\n             }\n             hir::ModuleDef::Const(s) => {\n                 let (file_id, node) = s.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+                NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                    node.doc_comment_text(),\n+                    node.short_label(),\n+                )\n             }\n             hir::ModuleDef::Static(s) => {\n                 let (file_id, node) = s.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+                NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                    node.doc_comment_text(),\n+                    node.short_label(),\n+                )\n             }\n             hir::ModuleDef::Enum(e) => {\n                 let (file_id, node) = e.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+                NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                    node.doc_comment_text(),\n+                    node.short_label(),\n+                )\n             }\n             hir::ModuleDef::EnumVariant(var) => {\n                 let (file_id, node) = var.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+                NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                    node.doc_comment_text(),\n+                    node.short_label(),\n+                )\n             }\n             hir::ModuleDef::Trait(e) => {\n                 let (file_id, node) = e.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+                NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                    node.doc_comment_text(),\n+                    node.short_label(),\n+                )\n             }\n             hir::ModuleDef::TypeAlias(e) => {\n                 let (file_id, node) = e.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+                NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                    node.doc_comment_text(),\n+                    node.short_label(),\n+                )\n             }\n             hir::ModuleDef::BuiltinType(..) => {\n                 return None;\n@@ -221,6 +314,8 @@ impl NavigationTarget {\n             \"impl\".into(),\n             None,\n             node.syntax(),\n+            None,\n+            None,\n         )\n     }\n \n@@ -229,19 +324,34 @@ impl NavigationTarget {\n             ImplItem::Method(f) => NavigationTarget::from_function(db, f),\n             ImplItem::Const(c) => {\n                 let (file_id, node) = c.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+                NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                    node.doc_comment_text(),\n+                    node.short_label(),\n+                )\n             }\n             ImplItem::TypeAlias(a) => {\n                 let (file_id, node) = a.source(db);\n-                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+                NavigationTarget::from_named(\n+                    file_id.original_file(db),\n+                    &*node,\n+                    node.doc_comment_text(),\n+                    node.short_label(),\n+                )\n             }\n         }\n     }\n \n     pub(crate) fn from_macro_def(db: &RootDatabase, macro_call: hir::MacroDef) -> NavigationTarget {\n         let (file_id, node) = macro_call.source(db);\n         log::debug!(\"nav target {}\", node.syntax().debug_dump());\n-        NavigationTarget::from_named(file_id.original_file(db), &*node)\n+        NavigationTarget::from_named(\n+            file_id.original_file(db),\n+            &*node,\n+            node.doc_comment_text(),\n+            None,\n+        )\n     }\n \n     #[cfg(test)]\n@@ -269,18 +379,25 @@ impl NavigationTarget {\n     }\n \n     /// Allows `NavigationTarget` to be created from a `NameOwner`\n-    pub(crate) fn from_named(file_id: FileId, node: &impl ast::NameOwner) -> NavigationTarget {\n+    pub(crate) fn from_named(\n+        file_id: FileId,\n+        node: &impl ast::NameOwner,\n+        docs: Option<String>,\n+        description: Option<String>,\n+    ) -> NavigationTarget {\n         //FIXME: use `_` instead of empty string\n         let name = node.name().map(|it| it.text().clone()).unwrap_or_default();\n         let focus_range = node.name().map(|it| it.syntax().range());\n-        NavigationTarget::from_syntax(file_id, name, focus_range, node.syntax())\n+        NavigationTarget::from_syntax(file_id, name, focus_range, node.syntax(), docs, description)\n     }\n \n     fn from_syntax(\n         file_id: FileId,\n         name: SmolStr,\n         focus_range: Option<TextRange>,\n         node: &SyntaxNode,\n+        docs: Option<String>,\n+        description: Option<String>,\n     ) -> NavigationTarget {\n         NavigationTarget {\n             file_id,\n@@ -290,83 +407,52 @@ impl NavigationTarget {\n             focus_range,\n             // ptr: Some(LocalSyntaxPtr::new(node)),\n             container_name: None,\n+            description,\n+            docs,\n         }\n     }\n+}\n \n-    pub(crate) fn node(&self, db: &RootDatabase) -> Option<TreeArc<SyntaxNode>> {\n-        let source_file = db.parse(self.file_id()).tree;\n-        let source_file = source_file.syntax();\n-        let node = source_file\n-            .descendants()\n-            .find(|node| node.kind() == self.kind() && node.range() == self.full_range())?\n-            .to_owned();\n-        Some(node)\n-    }\n+fn docs_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option<String> {\n+    let file = db.parse(symbol.file_id).tree;\n+    let node = symbol.ptr.to_node(file.syntax()).to_owned();\n \n-    pub(crate) fn docs(&self, db: &RootDatabase) -> Option<String> {\n-        let node = self.node(db)?;\n-        fn doc_comments<N: ast::DocCommentsOwner>(node: &N) -> Option<String> {\n-            node.doc_comment_text()\n-        }\n-\n-        visitor()\n-            .visit(doc_comments::<ast::FnDef>)\n-            .visit(doc_comments::<ast::StructDef>)\n-            .visit(doc_comments::<ast::EnumDef>)\n-            .visit(doc_comments::<ast::TraitDef>)\n-            .visit(doc_comments::<ast::Module>)\n-            .visit(doc_comments::<ast::TypeAliasDef>)\n-            .visit(doc_comments::<ast::ConstDef>)\n-            .visit(doc_comments::<ast::StaticDef>)\n-            .visit(doc_comments::<ast::NamedFieldDef>)\n-            .visit(doc_comments::<ast::EnumVariant>)\n-            .visit(doc_comments::<ast::MacroCall>)\n-            .accept(&node)?\n+    fn doc_comments<N: ast::DocCommentsOwner>(node: &N) -> Option<String> {\n+        node.doc_comment_text()\n     }\n \n-    /// Get a description of this node.\n-    ///\n-    /// e.g. `struct Name`, `enum Name`, `fn Name`\n-    pub(crate) fn description(&self, db: &RootDatabase) -> Option<String> {\n-        // FIXME: After type inference is done, add type information to improve the output\n-        let node = self.node(db)?;\n-\n-        fn visit_ascribed_node<T>(node: &T, prefix: &str) -> Option<String>\n-        where\n-            T: NameOwner + VisibilityOwner + TypeAscriptionOwner,\n-        {\n-            let mut string = visit_node(node, prefix)?;\n-\n-            if let Some(type_ref) = node.ascribed_type() {\n-                string.push_str(\": \");\n-                type_ref.syntax().text().push_to(&mut string);\n-            }\n-\n-            Some(string)\n-        }\n-\n-        fn visit_node<T>(node: &T, label: &str) -> Option<String>\n-        where\n-            T: NameOwner + VisibilityOwner,\n-        {\n-            let mut string =\n-                node.visibility().map(|v| format!(\"{} \", v.syntax().text())).unwrap_or_default();\n-            string.push_str(label);\n-            string.push_str(node.name()?.text().as_str());\n-            Some(string)\n-        }\n+    visitor()\n+        .visit(doc_comments::<ast::FnDef>)\n+        .visit(doc_comments::<ast::StructDef>)\n+        .visit(doc_comments::<ast::EnumDef>)\n+        .visit(doc_comments::<ast::TraitDef>)\n+        .visit(doc_comments::<ast::Module>)\n+        .visit(doc_comments::<ast::TypeAliasDef>)\n+        .visit(doc_comments::<ast::ConstDef>)\n+        .visit(doc_comments::<ast::StaticDef>)\n+        .visit(doc_comments::<ast::NamedFieldDef>)\n+        .visit(doc_comments::<ast::EnumVariant>)\n+        .visit(doc_comments::<ast::MacroCall>)\n+        .accept(&node)?\n+}\n \n-        visitor()\n-            .visit(|node: &ast::FnDef| Some(crate::display::function_label(node)))\n-            .visit(|node: &ast::StructDef| visit_node(node, \"struct \"))\n-            .visit(|node: &ast::EnumDef| visit_node(node, \"enum \"))\n-            .visit(|node: &ast::TraitDef| visit_node(node, \"trait \"))\n-            .visit(|node: &ast::Module| visit_node(node, \"mod \"))\n-            .visit(|node: &ast::TypeAliasDef| visit_node(node, \"type \"))\n-            .visit(|node: &ast::ConstDef| visit_ascribed_node(node, \"const \"))\n-            .visit(|node: &ast::StaticDef| visit_ascribed_node(node, \"static \"))\n-            .visit(|node: &ast::NamedFieldDef| visit_ascribed_node(node, \"\"))\n-            .visit(|node: &ast::EnumVariant| Some(node.name()?.text().to_string()))\n-            .accept(&node)?\n-    }\n+/// Get a description of a symbol.\n+///\n+/// e.g. `struct Name`, `enum Name`, `fn Name`\n+fn description_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option<String> {\n+    let file = db.parse(symbol.file_id).tree;\n+    let node = symbol.ptr.to_node(file.syntax()).to_owned();\n+\n+    visitor()\n+        .visit(|node: &ast::FnDef| node.short_label())\n+        .visit(|node: &ast::StructDef| node.short_label())\n+        .visit(|node: &ast::EnumDef| node.short_label())\n+        .visit(|node: &ast::TraitDef| node.short_label())\n+        .visit(|node: &ast::Module| node.short_label())\n+        .visit(|node: &ast::TypeAliasDef| node.short_label())\n+        .visit(|node: &ast::ConstDef| node.short_label())\n+        .visit(|node: &ast::StaticDef| node.short_label())\n+        .visit(|node: &ast::NamedFieldDef| node.short_label())\n+        .visit(|node: &ast::EnumVariant| node.short_label())\n+        .accept(&node)?\n }"}, {"sha": "dc8245c341f7e434d80b2d9c5a021a93f69a274a", "filename": "crates/ra_ide_api/src/display/short_label.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/cbafae6fa8e1292302d1ea0c04871fe24d174954/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fshort_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbafae6fa8e1292302d1ea0c04871fe24d174954/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fshort_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fshort_label.rs?ref=cbafae6fa8e1292302d1ea0c04871fe24d174954", "patch": "@@ -0,0 +1,91 @@\n+use ra_syntax::{\n+    ast::{self, NameOwner, VisibilityOwner, TypeAscriptionOwner, AstNode},\n+};\n+\n+pub(crate) trait ShortLabel {\n+    fn short_label(&self) -> Option<String>;\n+}\n+\n+impl ShortLabel for ast::FnDef {\n+    fn short_label(&self) -> Option<String> {\n+        Some(crate::display::function_label(self))\n+    }\n+}\n+\n+impl ShortLabel for ast::StructDef {\n+    fn short_label(&self) -> Option<String> {\n+        short_label_from_node(self, \"struct \")\n+    }\n+}\n+\n+impl ShortLabel for ast::EnumDef {\n+    fn short_label(&self) -> Option<String> {\n+        short_label_from_node(self, \"enum \")\n+    }\n+}\n+\n+impl ShortLabel for ast::TraitDef {\n+    fn short_label(&self) -> Option<String> {\n+        short_label_from_node(self, \"trait \")\n+    }\n+}\n+\n+impl ShortLabel for ast::Module {\n+    fn short_label(&self) -> Option<String> {\n+        short_label_from_node(self, \"mod \")\n+    }\n+}\n+\n+impl ShortLabel for ast::TypeAliasDef {\n+    fn short_label(&self) -> Option<String> {\n+        short_label_from_node(self, \"type \")\n+    }\n+}\n+\n+impl ShortLabel for ast::ConstDef {\n+    fn short_label(&self) -> Option<String> {\n+        short_label_from_ascribed_node(self, \"const \")\n+    }\n+}\n+\n+impl ShortLabel for ast::StaticDef {\n+    fn short_label(&self) -> Option<String> {\n+        short_label_from_ascribed_node(self, \"static \")\n+    }\n+}\n+\n+impl ShortLabel for ast::NamedFieldDef {\n+    fn short_label(&self) -> Option<String> {\n+        short_label_from_ascribed_node(self, \"\")\n+    }\n+}\n+\n+impl ShortLabel for ast::EnumVariant {\n+    fn short_label(&self) -> Option<String> {\n+        Some(self.name()?.text().to_string())\n+    }\n+}\n+\n+fn short_label_from_ascribed_node<T>(node: &T, prefix: &str) -> Option<String>\n+where\n+    T: NameOwner + VisibilityOwner + TypeAscriptionOwner,\n+{\n+    let mut buf = short_label_from_node(node, prefix)?;\n+\n+    if let Some(type_ref) = node.ascribed_type() {\n+        buf.push_str(\": \");\n+        type_ref.syntax().text().push_to(&mut buf);\n+    }\n+\n+    Some(buf)\n+}\n+\n+fn short_label_from_node<T>(node: &T, label: &str) -> Option<String>\n+where\n+    T: NameOwner + VisibilityOwner,\n+{\n+    let mut buf = node.visibility().map(|v| format!(\"{} \", v.syntax().text())).unwrap_or_default();\n+    buf.push_str(label);\n+    buf.push_str(node.name()?.text().as_str());\n+    Some(buf)\n+}"}, {"sha": "325a5a4f3b1edc93e62b456ba12add0782103375", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 36, "deletions": 13, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/cbafae6fa8e1292302d1ea0c04871fe24d174954/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbafae6fa8e1292302d1ea0c04871fe24d174954/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=cbafae6fa8e1292302d1ea0c04871fe24d174954", "patch": "@@ -1,6 +1,6 @@\n use ra_db::{FileId, SourceDatabase};\n use ra_syntax::{\n-    AstNode, ast,\n+    AstNode, ast::{self, DocCommentsOwner},\n     algo::{\n         find_node_at_offset,\n         visit::{visitor, Visitor},\n@@ -13,6 +13,7 @@ use crate::{\n     db::RootDatabase,\n     RangeInfo,\n     name_ref_kind::{NameRefKind::*, classify_name_ref},\n+    display::ShortLabel,\n };\n \n pub(crate) fn goto_definition(\n@@ -82,7 +83,7 @@ pub(crate) fn reference_definition(\n     // Fallback index based approach:\n     let navs = crate::symbol_index::index_resolve(db, name_ref)\n         .into_iter()\n-        .map(NavigationTarget::from_symbol)\n+        .map(|s| NavigationTarget::from_symbol(db, s))\n         .collect();\n     Approximate(navs)\n }\n@@ -114,17 +115,39 @@ pub(crate) fn name_definition(\n \n fn named_target(file_id: FileId, node: &SyntaxNode) -> Option<NavigationTarget> {\n     visitor()\n-        .visit(|node: &ast::StructDef| NavigationTarget::from_named(file_id, node))\n-        .visit(|node: &ast::EnumDef| NavigationTarget::from_named(file_id, node))\n-        .visit(|node: &ast::EnumVariant| NavigationTarget::from_named(file_id, node))\n-        .visit(|node: &ast::FnDef| NavigationTarget::from_named(file_id, node))\n-        .visit(|node: &ast::TypeAliasDef| NavigationTarget::from_named(file_id, node))\n-        .visit(|node: &ast::ConstDef| NavigationTarget::from_named(file_id, node))\n-        .visit(|node: &ast::StaticDef| NavigationTarget::from_named(file_id, node))\n-        .visit(|node: &ast::TraitDef| NavigationTarget::from_named(file_id, node))\n-        .visit(|node: &ast::NamedFieldDef| NavigationTarget::from_named(file_id, node))\n-        .visit(|node: &ast::Module| NavigationTarget::from_named(file_id, node))\n-        .visit(|node: &ast::MacroCall| NavigationTarget::from_named(file_id, node))\n+        .visit(|node: &ast::StructDef| {\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.short_label())\n+        })\n+        .visit(|node: &ast::EnumDef| {\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.short_label())\n+        })\n+        .visit(|node: &ast::EnumVariant| {\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.short_label())\n+        })\n+        .visit(|node: &ast::FnDef| {\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.short_label())\n+        })\n+        .visit(|node: &ast::TypeAliasDef| {\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.short_label())\n+        })\n+        .visit(|node: &ast::ConstDef| {\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.short_label())\n+        })\n+        .visit(|node: &ast::StaticDef| {\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.short_label())\n+        })\n+        .visit(|node: &ast::TraitDef| {\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.short_label())\n+        })\n+        .visit(|node: &ast::NamedFieldDef| {\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.short_label())\n+        })\n+        .visit(|node: &ast::Module| {\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), node.short_label())\n+        })\n+        .visit(|node: &ast::MacroCall| {\n+            NavigationTarget::from_named(file_id, node, node.doc_comment_text(), None)\n+        })\n         .accept(node)\n }\n "}, {"sha": "cb676eb12aedce706251e964e522f52caaaa1bf7", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cbafae6fa8e1292302d1ea0c04871fe24d174954/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbafae6fa8e1292302d1ea0c04871fe24d174954/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=cbafae6fa8e1292302d1ea0c04871fe24d174954", "patch": "@@ -86,13 +86,13 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n         use crate::goto_definition::{ReferenceResult::*, reference_definition};\n         let ref_result = reference_definition(db, position.file_id, name_ref);\n         match ref_result {\n-            Exact(nav) => res.extend(doc_text_for(db, nav)),\n+            Exact(nav) => res.extend(doc_text_for(nav)),\n             Approximate(navs) => {\n                 // We are no longer exact\n                 res.exact = false;\n \n                 for nav in navs {\n-                    res.extend(doc_text_for(db, nav))\n+                    res.extend(doc_text_for(nav))\n                 }\n             }\n         }\n@@ -104,7 +104,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n \n         if let Some(navs) = navs {\n             for nav in navs {\n-                res.extend(doc_text_for(db, nav))\n+                res.extend(doc_text_for(nav))\n             }\n         }\n "}, {"sha": "dbebf50a6200579eb501627d85e258438af263eb", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbafae6fa8e1292302d1ea0c04871fe24d174954/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbafae6fa8e1292302d1ea0c04871fe24d174954/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=cbafae6fa8e1292302d1ea0c04871fe24d174954", "patch": "@@ -393,7 +393,7 @@ impl Analysis {\n         self.with_db(|db| {\n             symbol_index::world_symbols(db, query)\n                 .into_iter()\n-                .map(NavigationTarget::from_symbol)\n+                .map(|s| NavigationTarget::from_symbol(db, s))\n                 .collect::<Vec<_>>()\n         })\n     }"}]}