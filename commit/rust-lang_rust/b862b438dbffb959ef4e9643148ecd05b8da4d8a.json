{"sha": "b862b438dbffb959ef4e9643148ecd05b8da4d8a", "node_id": "C_kwDOAAsO6NoAKGI4NjJiNDM4ZGJmZmI5NTllZjRlOTY0MzE0OGVjZDA1YjhkYTRkOGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-11T04:09:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-11T04:09:45Z"}, "message": "Auto merge of #96888 - Aaron1011:fake-borrow-no-sort, r=petrochenkov\n\nUse `FxIndexSet` to avoid sorting fake borrows\n\nThis fixes #96449, but I haven't yet been able to\nmake the reproducer work using `#[cfg]` attributes,\nso we can't use the 'revision' infra to write a test\n\nThe previous implementation relied on sorting by `PlaceRef`.\nThis requires sorting by a `DefId`, which uses untracked state\n(see #93315)", "tree": {"sha": "41b95e1702a46117e8067953f5f9d920db064516", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41b95e1702a46117e8067953f5f9d920db064516"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b862b438dbffb959ef4e9643148ecd05b8da4d8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b862b438dbffb959ef4e9643148ecd05b8da4d8a", "html_url": "https://github.com/rust-lang/rust/commit/b862b438dbffb959ef4e9643148ecd05b8da4d8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b862b438dbffb959ef4e9643148ecd05b8da4d8a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "532be942ddf8f40d086e54d157453434b16e9647", "url": "https://api.github.com/repos/rust-lang/rust/commits/532be942ddf8f40d086e54d157453434b16e9647", "html_url": "https://github.com/rust-lang/rust/commit/532be942ddf8f40d086e54d157453434b16e9647"}, {"sha": "aa0cc9c1e24bc383996e65ef612f02ffa181bf39", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa0cc9c1e24bc383996e65ef612f02ffa181bf39", "html_url": "https://github.com/rust-lang/rust/commit/aa0cc9c1e24bc383996e65ef612f02ffa181bf39"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "05146077d3403174e2998ee90ba53ed676071607", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b862b438dbffb959ef4e9643148ecd05b8da4d8a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b862b438dbffb959ef4e9643148ecd05b8da4d8a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=b862b438dbffb959ef4e9643148ecd05b8da4d8a", "patch": "@@ -11,7 +11,7 @@ use crate::build::ForGuard::{self, OutsideGuard, RefWithinGuard};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::build::{GuardFrame, GuardFrameLocal, LocalsForNode};\n use rustc_data_structures::{\n-    fx::{FxHashSet, FxIndexMap},\n+    fx::{FxIndexMap, FxIndexSet},\n     stack::ensure_sufficient_stack,\n };\n use rustc_hir::HirId;\n@@ -264,7 +264,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // The set of places that we are creating fake borrows of. If there are\n         // no match guards then we don't need any fake borrows, so don't track\n         // them.\n-        let mut fake_borrows = match_has_guard.then(FxHashSet::default);\n+        let mut fake_borrows = match_has_guard.then(FxIndexSet::default);\n \n         let mut otherwise = None;\n \n@@ -1053,7 +1053,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         start_block: BasicBlock,\n         otherwise_block: &mut Option<BasicBlock>,\n         candidates: &mut [&mut Candidate<'pat, 'tcx>],\n-        fake_borrows: &mut Option<FxHashSet<Place<'tcx>>>,\n+        fake_borrows: &mut Option<FxIndexSet<Place<'tcx>>>,\n     ) {\n         debug!(\n             \"matched_candidate(span={:?}, candidates={:?}, start_block={:?}, otherwise_block={:?})\",\n@@ -1105,7 +1105,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         start_block: BasicBlock,\n         otherwise_block: &mut Option<BasicBlock>,\n         candidates: &mut [&mut Candidate<'_, 'tcx>],\n-        fake_borrows: &mut Option<FxHashSet<Place<'tcx>>>,\n+        fake_borrows: &mut Option<FxIndexSet<Place<'tcx>>>,\n     ) {\n         // The candidates are sorted by priority. Check to see whether the\n         // higher priority candidates (and hence at the front of the slice)\n@@ -1184,7 +1184,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         &mut self,\n         matched_candidates: &mut [&mut Candidate<'_, 'tcx>],\n         start_block: BasicBlock,\n-        fake_borrows: &mut Option<FxHashSet<Place<'tcx>>>,\n+        fake_borrows: &mut Option<FxIndexSet<Place<'tcx>>>,\n     ) -> Option<BasicBlock> {\n         debug_assert!(\n             !matched_candidates.is_empty(),\n@@ -1322,7 +1322,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         candidates: &mut [&mut Candidate<'_, 'tcx>],\n         block: BasicBlock,\n         otherwise_block: &mut Option<BasicBlock>,\n-        fake_borrows: &mut Option<FxHashSet<Place<'tcx>>>,\n+        fake_borrows: &mut Option<FxIndexSet<Place<'tcx>>>,\n     ) {\n         let (first_candidate, remaining_candidates) = candidates.split_first_mut().unwrap();\n \n@@ -1385,7 +1385,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         pats: &'pat [Pat<'tcx>],\n         or_span: Span,\n         place: PlaceBuilder<'tcx>,\n-        fake_borrows: &mut Option<FxHashSet<Place<'tcx>>>,\n+        fake_borrows: &mut Option<FxIndexSet<Place<'tcx>>>,\n     ) {\n         debug!(\"test_or_pattern:\\ncandidate={:#?}\\npats={:#?}\", candidate, pats);\n         let mut or_candidates: Vec<_> = pats\n@@ -1572,7 +1572,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         mut candidates: &'b mut [&'c mut Candidate<'pat, 'tcx>],\n         block: BasicBlock,\n         otherwise_block: &mut Option<BasicBlock>,\n-        fake_borrows: &mut Option<FxHashSet<Place<'tcx>>>,\n+        fake_borrows: &mut Option<FxIndexSet<Place<'tcx>>>,\n     ) {\n         // extract the match-pair from the highest priority candidate\n         let match_pair = &candidates.first().unwrap().match_pairs[0];\n@@ -1715,7 +1715,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     ///    by a MIR pass run after borrow checking.\n     fn calculate_fake_borrows<'b>(\n         &mut self,\n-        fake_borrows: &'b FxHashSet<Place<'tcx>>,\n+        fake_borrows: &'b FxIndexSet<Place<'tcx>>,\n         temp_span: Span,\n     ) -> Vec<(Place<'tcx>, Local)> {\n         let tcx = self.tcx;\n@@ -1741,8 +1741,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             all_fake_borrows.push(place.as_ref());\n         }\n \n-        // Deduplicate and ensure a deterministic order.\n-        all_fake_borrows.sort();\n         all_fake_borrows.dedup();\n \n         debug!(\"add_fake_borrows all_fake_borrows = {:?}\", all_fake_borrows);"}, {"sha": "7b6146d4bc14dda4073fc908a709b09c3440447a", "filename": "src/test/mir-opt/remove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b862b438dbffb959ef4e9643148ecd05b8da4d8a/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b862b438dbffb959ef4e9643148ecd05b8da4d8a/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff?ref=b862b438dbffb959ef4e9643148ecd05b8da4d8a", "patch": "@@ -7,8 +7,8 @@\n       let mut _0: i32;                     // return place in scope 0 at $DIR/remove_fake_borrows.rs:6:46: 6:49\n       let mut _3: isize;                   // in scope 0 at $DIR/remove_fake_borrows.rs:8:9: 8:16\n       let mut _4: &std::option::Option<&&i32>; // in scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n-      let mut _5: &&&i32;                  // in scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n-      let mut _6: &&i32;                   // in scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n+      let mut _5: &&i32;                   // in scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n+      let mut _6: &&&i32;                  // in scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n       let mut _7: &i32;                    // in scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n       let mut _8: bool;                    // in scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n   \n@@ -34,8 +34,8 @@\n   \n       bb4: {\n -         _4 = &shallow _1;                // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n--         _5 = &shallow ((_1 as Some).0: &&i32); // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n--         _6 = &shallow (*((_1 as Some).0: &&i32)); // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n+-         _5 = &shallow (*((_1 as Some).0: &&i32)); // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n+-         _6 = &shallow ((_1 as Some).0: &&i32); // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n -         _7 = &shallow (*(*((_1 as Some).0: &&i32))); // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n +         nop;                             // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n +         nop;                             // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12"}]}