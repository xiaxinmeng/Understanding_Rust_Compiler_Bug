{"sha": "0502815529e079676a2ed4c701de2fa0f39ffa51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MDI4MTU1MjllMDc5Njc2YTJlZDRjNzAxZGUyZmEwZjM5ZmZhNTE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-03-26T01:34:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-26T01:34:38Z"}, "message": "Rollup merge of #83055 - aDotInTheVoid:selective-strip-item-doc, r=jyn514\n\n[rustdoc] Don't document stripped items in JSON renderer.\n\nFixes #80664, see [my comment there](https://github.com/rust-lang/rust/issues/80664#issuecomment-797557948) for why\n\nNote that we already do something similar in `convert_item`:\n\nhttps://github.com/rust-lang/rust/blob/bb4cdf8ec034dca5c056ec9295f38062e5b7e871/src/librustdoc/json/conversions.rs#L28-L31\n\n``@rustbot`` modify labels: +T-rustdoc +A-rustdoc-json\n\nr? ``@jyn514``\ncc ``@CraftSpider``", "tree": {"sha": "15c1bdc10d6b22b64287e6eb49240810dabb0359", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15c1bdc10d6b22b64287e6eb49240810dabb0359"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0502815529e079676a2ed4c701de2fa0f39ffa51", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgXTouCRBK7hj4Ov3rIwAAdHIIAJyD+zKhu2TYPMuOW4chdsFw\nCdDTtzaXnNLRRtLdGm1ZmNgyaJyOWSAAitkPjptdTDdrKfC7JRo1kdWktR7U7mBY\nF69nFNQQzmNHnNbVK5g7fV8g5xMa+H04B2qr+YKo4leU2B0AqEVA7JgSWvReeFGg\ndh47Os8VtIL8oDArmQrcv6V7HETcSqeL3WUmGLhjr+eGrY1ScMK3M68ZrljXXVRw\npevTOxcJW/kKMw23+FwFosGxoUvXyjT3PUn62JgjMqBsN4TsEYDsyjbvVUMIHtcG\noBQAmt2WU5Yn2Yyx1pyZIN1/MwCxl95yDcB3yG+8G61eUFNJSQXNuVWXW3G7BdA=\n=Dgkl\n-----END PGP SIGNATURE-----\n", "payload": "tree 15c1bdc10d6b22b64287e6eb49240810dabb0359\nparent 3debe9acb8df363e0b5363f23f8218c2d7919904\nparent d9e2d8d6652fef745a5658178a6f85fc809f6453\nauthor Dylan DPC <dylan.dpc@gmail.com> 1616722478 +0100\ncommitter GitHub <noreply@github.com> 1616722478 +0100\n\nRollup merge of #83055 - aDotInTheVoid:selective-strip-item-doc, r=jyn514\n\n[rustdoc] Don't document stripped items in JSON renderer.\n\nFixes #80664, see [my comment there](https://github.com/rust-lang/rust/issues/80664#issuecomment-797557948) for why\n\nNote that we already do something similar in `convert_item`:\n\nhttps://github.com/rust-lang/rust/blob/bb4cdf8ec034dca5c056ec9295f38062e5b7e871/src/librustdoc/json/conversions.rs#L28-L31\n\n``@rustbot`` modify labels: +T-rustdoc +A-rustdoc-json\n\nr? ``@jyn514``\ncc ``@CraftSpider``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0502815529e079676a2ed4c701de2fa0f39ffa51", "html_url": "https://github.com/rust-lang/rust/commit/0502815529e079676a2ed4c701de2fa0f39ffa51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0502815529e079676a2ed4c701de2fa0f39ffa51/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3debe9acb8df363e0b5363f23f8218c2d7919904", "url": "https://api.github.com/repos/rust-lang/rust/commits/3debe9acb8df363e0b5363f23f8218c2d7919904", "html_url": "https://github.com/rust-lang/rust/commit/3debe9acb8df363e0b5363f23f8218c2d7919904"}, {"sha": "d9e2d8d6652fef745a5658178a6f85fc809f6453", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9e2d8d6652fef745a5658178a6f85fc809f6453", "html_url": "https://github.com/rust-lang/rust/commit/d9e2d8d6652fef745a5658178a6f85fc809f6453"}], "stats": {"total": 105, "additions": 98, "deletions": 7}, "files": [{"sha": "9b0f310e3ae44fe03949bc0c1b4ca81b51e25ec4", "filename": "Cargo.lock", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0502815529e079676a2ed4c701de2fa0f39ffa51/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0502815529e079676a2ed4c701de2fa0f39ffa51/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0502815529e079676a2ed4c701de2fa0f39ffa51", "patch": "@@ -1219,6 +1219,12 @@ dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n \n+[[package]]\n+name = \"fs-err\"\n+version = \"2.5.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bcd1163ae48bda72a20ae26d66a04d3094135cadab911cff418ae5e33f253431\"\n+\n [[package]]\n name = \"fs_extra\"\n version = \"1.1.0\"\n@@ -1748,6 +1754,7 @@ checksum = \"92c245af8786f6ac35f95ca14feca9119e71339aaab41e878e7cdd655c97e9e5\"\n name = \"jsondocck\"\n version = \"0.1.0\"\n dependencies = [\n+ \"fs-err\",\n  \"getopts\",\n  \"jsonpath_lib\",\n  \"lazy_static\","}, {"sha": "4e0f3a4e3c31737208e477adb5abdef1d86037c5", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0502815529e079676a2ed4c701de2fa0f39ffa51/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0502815529e079676a2ed4c701de2fa0f39ffa51/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=0502815529e079676a2ed4c701de2fa0f39ffa51", "patch": "@@ -13,6 +13,11 @@ crate trait FormatRenderer<'tcx>: Sized {\n     /// Gives a description of the renderer. Used for performance profiling.\n     fn descr() -> &'static str;\n \n+    /// Whether to call `item` recursivly for modules\n+    ///\n+    /// This is true for html, and false for json. See #80664\n+    const RUN_ON_MODULE: bool;\n+\n     /// Sets up any state required for the renderer. When this is called the cache has already been\n     /// populated.\n     fn init(\n@@ -68,7 +73,7 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n \n     let unknown = Symbol::intern(\"<unknown item>\");\n     while let Some((mut cx, item)) = work.pop() {\n-        if item.is_mod() {\n+        if item.is_mod() && T::RUN_ON_MODULE {\n             // modules are special because they add a namespace. We also need to\n             // recurse into the items of the module as well.\n             let name = item.name.as_ref().unwrap().to_string();"}, {"sha": "0ffb4d616da1a1f0ad76444eec83651a55e2daa9", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0502815529e079676a2ed4c701de2fa0f39ffa51/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0502815529e079676a2ed4c701de2fa0f39ffa51/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=0502815529e079676a2ed4c701de2fa0f39ffa51", "patch": "@@ -290,6 +290,8 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         \"html\"\n     }\n \n+    const RUN_ON_MODULE: bool = true;\n+\n     fn init(\n         mut krate: clean::Crate,\n         options: RenderOptions,"}, {"sha": "c470dc5700513b6f91902be0b9dc1b4c429e0158", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0502815529e079676a2ed4c701de2fa0f39ffa51/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0502815529e079676a2ed4c701de2fa0f39ffa51/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=0502815529e079676a2ed4c701de2fa0f39ffa51", "patch": "@@ -198,7 +198,8 @@ fn from_clean_item_kind(item: clean::ItemKind, tcx: TyCtxt<'_>, name: &Option<Sy\n             bounds: g.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n             default: t.map(|x| x.into_tcx(tcx)),\n         },\n-        StrippedItem(inner) => from_clean_item_kind(*inner, tcx, name),\n+        // `convert_item` early returns `None` for striped items\n+        StrippedItem(_) => unreachable!(),\n         PrimitiveItem(_) | KeywordItem(_) => {\n             panic!(\"{:?} is not supported for JSON output\", item)\n         }"}, {"sha": "db3a0c5ceb167cc0d684ead3c7c455d650de8a28", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0502815529e079676a2ed4c701de2fa0f39ffa51/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0502815529e079676a2ed4c701de2fa0f39ffa51/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=0502815529e079676a2ed4c701de2fa0f39ffa51", "patch": "@@ -129,6 +129,8 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n         \"json\"\n     }\n \n+    const RUN_ON_MODULE: bool = false;\n+\n     fn init(\n         krate: clean::Crate,\n         options: RenderOptions,\n@@ -169,8 +171,10 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                 e.impls = self.get_impls(id)\n             }\n             let removed = self.index.borrow_mut().insert(from_def_id(id), new_item.clone());\n+\n             // FIXME(adotinthevoid): Currently, the index is duplicated. This is a sanity check\n-            // to make sure the items are unique.\n+            // to make sure the items are unique. The main place this happens is when an item, is\n+            // reexported in more than one place. See `rustdoc-json/reexport/in_root_and_mod`\n             if let Some(old_item) = removed {\n                 assert_eq!(old_item, new_item);\n             }"}, {"sha": "e3cecbdd7ff2fbc3a9913a1200edbfe9c47e4356", "filename": "src/test/rustdoc-json/reexport/in_root_and_mod.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0502815529e079676a2ed4c701de2fa0f39ffa51/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0502815529e079676a2ed4c701de2fa0f39ffa51/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod.rs?ref=0502815529e079676a2ed4c701de2fa0f39ffa51", "patch": "@@ -0,0 +1,15 @@\n+#![feature(no_core)]\n+#![no_core]\n+\n+mod foo {\n+    // @set foo_id = in_root_and_mod.json \"$.index[*][?(@.name=='Foo')].id\"\n+    pub struct Foo;\n+}\n+\n+// @has - \"$.index[*][?(@.name=='in_root_and_mod')].inner.items[*]\" $foo_id\n+pub use foo::Foo;\n+\n+pub mod bar {\n+    // @has - \"$.index[*][?(@.name=='bar')].inner.items[*]\" $foo_id\n+    pub use crate::foo::Foo;\n+}"}, {"sha": "2daadf7620ca0b8e1ccce38e1d28930fc31a8436", "filename": "src/test/rustdoc-json/reexport/in_root_and_mod_pub.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0502815529e079676a2ed4c701de2fa0f39ffa51/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod_pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0502815529e079676a2ed4c701de2fa0f39ffa51/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod_pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod_pub.rs?ref=0502815529e079676a2ed4c701de2fa0f39ffa51", "patch": "@@ -0,0 +1,20 @@\n+#![feature(no_core)]\n+#![no_core]\n+\n+pub mod foo {\n+    // @set bar_id = in_root_and_mod_pub.json \"$.index[*][?(@.name=='Bar')].id\"\n+    // @has - \"$.index[*][?(@.name=='foo')].inner.items[*]\" $bar_id\n+    pub struct Bar;\n+}\n+\n+// @set root_import_id = - \"$.index[*][?(@.inner.source=='foo::Bar')].id\"\n+// @is - \"$.index[*][?(@.inner.source=='foo::Bar')].inner.id\" $bar_id\n+// @has - \"$.index[*][?(@.name=='in_root_and_mod_pub')].inner.items[*]\" $root_import_id\n+pub use foo::Bar;\n+\n+pub mod baz {\n+    // @set baz_import_id = - \"$.index[*][?(@.inner.source=='crate::foo::Bar')].id\"\n+    // @is - \"$.index[*][?(@.inner.source=='crate::foo::Bar')].inner.id\" $bar_id\n+    // @has - \"$.index[*][?(@.name=='baz')].inner.items[*]\" $baz_import_id\n+    pub use crate::foo::Bar;\n+}"}, {"sha": "fb8296f23374ae3bd20358c42ba36a3055ec8a1c", "filename": "src/test/rustdoc-json/reexport/rename_private.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0502815529e079676a2ed4c701de2fa0f39ffa51/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0502815529e079676a2ed4c701de2fa0f39ffa51/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_private.rs?ref=0502815529e079676a2ed4c701de2fa0f39ffa51", "patch": "@@ -0,0 +1,14 @@\n+// edition:2018\n+\n+#![no_core]\n+#![feature(no_core)]\n+// @!has rename_private.json \"$.index[*][?(@.name=='inner')]\"\n+mod inner {\n+    // @!has - \"$.index[*][?(@.name=='Public')]\"\n+    pub struct Public;\n+}\n+\n+// @set newname_id = - \"$.index[*][?(@.name=='NewName')].id\"\n+// @is - \"$.index[*][?(@.name=='NewName')].kind\" \\\"struct\\\"\n+// @has - \"$.index[*][?(@.name=='rename_private')].inner.items[*]\" $newname_id\n+pub use inner::Public as NewName;"}, {"sha": "a6efc4c9a6b5bbd8d28755076a3f05fbc095d29f", "filename": "src/tools/jsondocck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0502815529e079676a2ed4c701de2fa0f39ffa51/src%2Ftools%2Fjsondocck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0502815529e079676a2ed4c701de2fa0f39ffa51/src%2Ftools%2Fjsondocck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2FCargo.toml?ref=0502815529e079676a2ed4c701de2fa0f39ffa51", "patch": "@@ -12,3 +12,4 @@ lazy_static = \"1.4\"\n shlex = \"0.1\"\n serde = \"1.0\"\n serde_json = \"1.0\"\n+fs-err = \"2.5.0\""}, {"sha": "a188750c56ae307df54b08a0fe143d9a3bc74b1a", "filename": "src/tools/jsondocck/src/cache.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0502815529e079676a2ed4c701de2fa0f39ffa51/src%2Ftools%2Fjsondocck%2Fsrc%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0502815529e079676a2ed4c701de2fa0f39ffa51/src%2Ftools%2Fjsondocck%2Fsrc%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fcache.rs?ref=0502815529e079676a2ed4c701de2fa0f39ffa51", "patch": "@@ -1,8 +1,10 @@\n use crate::error::CkError;\n use serde_json::Value;\n use std::collections::HashMap;\n+use std::io;\n use std::path::{Path, PathBuf};\n-use std::{fs, io};\n+\n+use fs_err as fs;\n \n #[derive(Debug)]\n pub struct Cache {\n@@ -31,7 +33,11 @@ impl Cache {\n             self.last_path = Some(resolve.clone());\n             resolve\n         } else {\n-            self.last_path.as_ref().unwrap().clone()\n+            self.last_path\n+                .as_ref()\n+                // FIXME: Point to a line number\n+                .expect(\"No last path set. Make sure to specify a full path before using `-`\")\n+                .clone()\n         }\n     }\n "}, {"sha": "216890d59ad6c53ceddf76629618caa33fd7e541", "filename": "src/tools/jsondocck/src/main.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0502815529e079676a2ed4c701de2fa0f39ffa51/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0502815529e079676a2ed4c701de2fa0f39ffa51/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs?ref=0502815529e079676a2ed4c701de2fa0f39ffa51", "patch": "@@ -239,7 +239,20 @@ fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n             let val = cache.get_value(&command.args[0])?;\n             let results = select(&val, &command.args[1]).unwrap();\n             let pat = string_to_value(&command.args[2], cache);\n-            results.len() == 1 && results[0] == pat.as_ref()\n+            let is = results.len() == 1 && results[0] == pat.as_ref();\n+            if !command.negated && !is {\n+                return Err(CkError::FailedCheck(\n+                    format!(\n+                        \"{} matched to {:?}, but expected {:?}\",\n+                        &command.args[1],\n+                        results,\n+                        pat.as_ref()\n+                    ),\n+                    command,\n+                ));\n+            } else {\n+                is\n+            }\n         }\n         CommandKind::Set => {\n             // @set <name> = <path> <jsonpath>\n@@ -299,7 +312,10 @@ fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n \n fn string_to_value<'a>(s: &str, cache: &'a Cache) -> Cow<'a, Value> {\n     if s.starts_with(\"$\") {\n-        Cow::Borrowed(&cache.variables[&s[1..]])\n+        Cow::Borrowed(&cache.variables.get(&s[1..]).unwrap_or_else(|| {\n+            // FIXME(adotinthevoid): Show line number\n+            panic!(\"No variable: `{}`. Current state: `{:?}`\", &s[1..], cache.variables)\n+        }))\n     } else {\n         Cow::Owned(serde_json::from_str(s).unwrap())\n     }"}]}