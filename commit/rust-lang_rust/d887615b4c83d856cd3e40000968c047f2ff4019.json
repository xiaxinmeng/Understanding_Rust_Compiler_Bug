{"sha": "d887615b4c83d856cd3e40000968c047f2ff4019", "node_id": "C_kwDOAAsO6NoAKGQ4ODc2MTViNGM4M2Q4NTZjZDNlNDAwMDA5NjhjMDQ3ZjJmZjQwMTk", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-05T03:39:56Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-05T04:04:33Z"}, "message": "Parameterise `Parser::{recover_unclosed_char,handle_missing_lit}`.\n\nThese two methods both produce a `MetaItemLit`, and then some of the\ncall sites convert the `MetaItemLit` to a `token::Lit` with\n`as_token_lit`.\n\nThis commit parameterises these two methods with a `mk_lit_char`\nclosure, which can be used to produce either `MetaItemLit` or\n`token::Lit` directly as necessary.", "tree": {"sha": "5bc313564dcd33003f3087167ababad74b664189", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bc313564dcd33003f3087167ababad74b664189"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d887615b4c83d856cd3e40000968c047f2ff4019", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d887615b4c83d856cd3e40000968c047f2ff4019", "html_url": "https://github.com/rust-lang/rust/commit/d887615b4c83d856cd3e40000968c047f2ff4019", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d887615b4c83d856cd3e40000968c047f2ff4019/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ae956f600e72d62a6b17d95705148442841cef0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ae956f600e72d62a6b17d95705148442841cef0", "html_url": "https://github.com/rust-lang/rust/commit/4ae956f600e72d62a6b17d95705148442841cef0"}], "stats": {"total": 79, "additions": 49, "deletions": 30}, "files": [{"sha": "07f03e0d582cbb17d26cecdc69493fc56e01070d", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 36, "deletions": 21, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/d887615b4c83d856cd3e40000968c047f2ff4019/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d887615b4c83d856cd3e40000968c047f2ff4019/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=d887615b4c83d856cd3e40000968c047f2ff4019", "patch": "@@ -1543,15 +1543,16 @@ impl<'a> Parser<'a> {\n             && (matches!(self.token.kind, token::CloseDelim(_) | token::Comma)\n                 || self.token.is_op())\n         {\n-            let lit = self.recover_unclosed_char(label_.ident, |self_| {\n-                self_.sess.create_err(UnexpectedTokenAfterLabel {\n-                    span: self_.token.span,\n-                    remove_label: None,\n-                    enclose_in_block: None,\n-                })\n-            });\n+            let (lit, _) =\n+                self.recover_unclosed_char(label_.ident, Parser::mk_token_lit_char, |self_| {\n+                    self_.sess.create_err(UnexpectedTokenAfterLabel {\n+                        span: self_.token.span,\n+                        remove_label: None,\n+                        enclose_in_block: None,\n+                    })\n+                });\n             consume_colon = false;\n-            Ok(self.mk_expr(lo, ExprKind::Lit(lit.as_token_lit())))\n+            Ok(self.mk_expr(lo, ExprKind::Lit(lit)))\n         } else if !ate_colon\n             && (self.check_noexpect(&TokenKind::Comma) || self.check_noexpect(&TokenKind::Gt))\n         {\n@@ -1626,12 +1627,13 @@ impl<'a> Parser<'a> {\n         Ok(expr)\n     }\n \n-    /// Emit an error when a char is parsed as a lifetime because of a missing quote\n-    pub(super) fn recover_unclosed_char(\n+    /// Emit an error when a char is parsed as a lifetime because of a missing quote.\n+    pub(super) fn recover_unclosed_char<L>(\n         &self,\n         lifetime: Ident,\n+        mk_lit_char: impl FnOnce(Symbol, Span) -> L,\n         err: impl FnOnce(&Self) -> DiagnosticBuilder<'a, ErrorGuaranteed>,\n-    ) -> ast::MetaItemLit {\n+    ) -> L {\n         if let Some(mut diag) =\n             self.sess.span_diagnostic.steal_diagnostic(lifetime.span, StashKey::LifetimeIsChar)\n         {\n@@ -1653,12 +1655,7 @@ impl<'a> Parser<'a> {\n                 .emit();\n         }\n         let name = lifetime.without_first_quote().name;\n-        ast::MetaItemLit {\n-            symbol: name,\n-            suffix: None,\n-            kind: ast::LitKind::Char(name.as_str().chars().next().unwrap_or('_')),\n-            span: lifetime.span,\n-        }\n+        mk_lit_char(name, lifetime.span)\n     }\n \n     /// Recover on the syntax `do catch { ... }` suggesting `try { ... }` instead.\n@@ -1785,7 +1782,23 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    fn handle_missing_lit(&mut self) -> PResult<'a, MetaItemLit> {\n+    pub(crate) fn mk_token_lit_char(name: Symbol, span: Span) -> (token::Lit, Span) {\n+        (token::Lit { symbol: name, suffix: None, kind: token::Char }, span)\n+    }\n+\n+    fn mk_meta_item_lit_char(name: Symbol, span: Span) -> MetaItemLit {\n+        ast::MetaItemLit {\n+            symbol: name,\n+            suffix: None,\n+            kind: ast::LitKind::Char(name.as_str().chars().next().unwrap_or('_')),\n+            span,\n+        }\n+    }\n+\n+    fn handle_missing_lit<L>(\n+        &mut self,\n+        mk_lit_char: impl FnOnce(Symbol, Span) -> L,\n+    ) -> PResult<'a, L> {\n         if let token::Interpolated(inner) = &self.token.kind {\n             let expr = match inner.as_ref() {\n                 token::NtExpr(expr) => Some(expr),\n@@ -1809,7 +1822,7 @@ impl<'a> Parser<'a> {\n         // On an error path, eagerly consider a lifetime to be an unclosed character lit\n         if self.token.is_lifetime() {\n             let lt = self.expect_lifetime();\n-            Ok(self.recover_unclosed_char(lt.ident, err))\n+            Ok(self.recover_unclosed_char(lt.ident, mk_lit_char, err))\n         } else {\n             Err(err(self))\n         }\n@@ -1818,11 +1831,13 @@ impl<'a> Parser<'a> {\n     pub(super) fn parse_token_lit(&mut self) -> PResult<'a, (token::Lit, Span)> {\n         self.parse_opt_token_lit()\n             .ok_or(())\n-            .or_else(|()| self.handle_missing_lit().map(|lit| (lit.as_token_lit(), lit.span)))\n+            .or_else(|()| self.handle_missing_lit(Parser::mk_token_lit_char))\n     }\n \n     pub(super) fn parse_meta_item_lit(&mut self) -> PResult<'a, MetaItemLit> {\n-        self.parse_opt_meta_item_lit().ok_or(()).or_else(|()| self.handle_missing_lit())\n+        self.parse_opt_meta_item_lit()\n+            .ok_or(())\n+            .or_else(|()| self.handle_missing_lit(Parser::mk_meta_item_lit_char))\n     }\n \n     fn recover_after_dot(&mut self) -> Option<Token> {"}, {"sha": "a1981e11477753b4506a5f2770e71570e1eb2c57", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d887615b4c83d856cd3e40000968c047f2ff4019/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d887615b4c83d856cd3e40000968c047f2ff4019/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=d887615b4c83d856cd3e40000968c047f2ff4019", "patch": "@@ -411,16 +411,20 @@ impl<'a> Parser<'a> {\n         {\n             // Recover a `'a` as a `'a'` literal\n             let lt = self.expect_lifetime();\n-            let lit = self.recover_unclosed_char(lt.ident, |self_| {\n-                let expected = expected.unwrap_or(\"pattern\");\n-                let msg =\n-                    format!(\"expected {}, found {}\", expected, super::token_descr(&self_.token));\n+            let (lit, _) =\n+                self.recover_unclosed_char(lt.ident, Parser::mk_token_lit_char, |self_| {\n+                    let expected = expected.unwrap_or(\"pattern\");\n+                    let msg = format!(\n+                        \"expected {}, found {}\",\n+                        expected,\n+                        super::token_descr(&self_.token)\n+                    );\n \n-                let mut err = self_.struct_span_err(self_.token.span, &msg);\n-                err.span_label(self_.token.span, format!(\"expected {}\", expected));\n-                err\n-            });\n-            PatKind::Lit(self.mk_expr(lo, ExprKind::Lit(lit.as_token_lit())))\n+                    let mut err = self_.struct_span_err(self_.token.span, &msg);\n+                    err.span_label(self_.token.span, format!(\"expected {}\", expected));\n+                    err\n+                });\n+            PatKind::Lit(self.mk_expr(lo, ExprKind::Lit(lit)))\n         } else {\n             // Try to parse everything else as literal with optional minus\n             match self.parse_literal_maybe_minus() {"}]}