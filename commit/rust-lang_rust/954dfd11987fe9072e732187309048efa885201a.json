{"sha": "954dfd11987fe9072e732187309048efa885201a", "node_id": "C_kwDOAAsO6NoAKDk1NGRmZDExOTg3ZmU5MDcyZTczMjE4NzMwOTA0OGVmYTg4NTIwMWE", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-20T11:22:21Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-20T11:22:21Z"}, "message": "Sync from rust 56ee85274e5a3a4dda92f3bf73d1664c74ff9c15", "tree": {"sha": "d567f9ac756821af9239a8526bc439e42692c0dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d567f9ac756821af9239a8526bc439e42692c0dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/954dfd11987fe9072e732187309048efa885201a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/954dfd11987fe9072e732187309048efa885201a", "html_url": "https://github.com/rust-lang/rust/commit/954dfd11987fe9072e732187309048efa885201a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/954dfd11987fe9072e732187309048efa885201a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e87f13054fa3cd9103b1b5ad9a2ed499fc542d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e87f13054fa3cd9103b1b5ad9a2ed499fc542d5", "html_url": "https://github.com/rust-lang/rust/commit/4e87f13054fa3cd9103b1b5ad9a2ed499fc542d5"}, {"sha": "739938d7a8981e0b2852d5560b7da51eab66b452", "url": "https://api.github.com/repos/rust-lang/rust/commits/739938d7a8981e0b2852d5560b7da51eab66b452", "html_url": "https://github.com/rust-lang/rust/commit/739938d7a8981e0b2852d5560b7da51eab66b452"}], "stats": {"total": 114, "additions": 58, "deletions": 56}, "files": [{"sha": "81e287f1ddebf4301d5305c25b5acfaf048e675c", "filename": "scripts/test_rustc_tests.sh", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/954dfd11987fe9072e732187309048efa885201a/scripts%2Ftest_rustc_tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/954dfd11987fe9072e732187309048efa885201a/scripts%2Ftest_rustc_tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ftest_rustc_tests.sh?ref=954dfd11987fe9072e732187309048efa885201a", "patch": "@@ -10,103 +10,103 @@ pushd rust\n \n command -v rg >/dev/null 2>&1 || cargo install ripgrep\n \n-rm -r src/test/ui/{extern/,unsized-locals/,lto/,linkage*} || true\n-for test in $(rg --files-with-matches \"lto|// needs-asm-support|// needs-unwind\" src/test/{codegen-units,ui,incremental}); do\n+rm -r tests/ui/{extern/,unsized-locals/,lto/,linkage*} || true\n+for test in $(rg --files-with-matches \"lto|// needs-asm-support|// needs-unwind\" tests/{codegen-units,ui,incremental}); do\n   rm $test\n done\n \n-for test in $(rg -i --files-with-matches \"//(\\[\\w+\\])?~[^\\|]*\\s*ERR|// error-pattern:|// build-fail|// run-fail|-Cllvm-args\" src/test/ui); do\n+for test in $(rg -i --files-with-matches \"//(\\[\\w+\\])?~[^\\|]*\\s*ERR|// error-pattern:|// build-fail|// run-fail|-Cllvm-args\" tests/ui); do\n   rm $test\n done\n \n-git checkout -- src/test/ui/issues/auxiliary/issue-3136-a.rs # contains //~ERROR, but shouldn't be removed\n-git checkout -- src/test/ui/proc-macro/pretty-print-hack/\n+git checkout -- tests/ui/issues/auxiliary/issue-3136-a.rs # contains //~ERROR, but shouldn't be removed\n+git checkout -- tests/ui/proc-macro/pretty-print-hack/\n \n # missing features\n # ================\n \n # requires stack unwinding\n-rm src/test/incremental/change_crate_dep_kind.rs\n-rm src/test/incremental/issue-80691-bad-eval-cache.rs # -Cpanic=abort causes abort instead of exit(101)\n+rm tests/incremental/change_crate_dep_kind.rs\n+rm tests/incremental/issue-80691-bad-eval-cache.rs # -Cpanic=abort causes abort instead of exit(101)\n \n # requires compiling with -Cpanic=unwind\n-rm -r src/test/ui/macros/rfc-2011-nicer-assert-messages/\n-rm -r src/test/run-make/test-benches\n-rm src/test/ui/test-attrs/test-type.rs\n+rm -r tests/ui/macros/rfc-2011-nicer-assert-messages/\n+rm -r tests/run-make/test-benches\n+rm tests/ui/test-attrs/test-type.rs\n \n # vendor intrinsics\n-rm src/test/ui/sse2.rs # cpuid not supported, so sse2 not detected\n-rm src/test/ui/intrinsics/const-eval-select-x86_64.rs # requires x86_64 vendor intrinsics\n-rm src/test/ui/simd/array-type.rs # \"Index argument for `simd_insert` is not a constant\"\n-rm src/test/ui/simd/intrinsic/float-math-pass.rs # simd_fcos unimplemented\n+rm tests/ui/sse2.rs # cpuid not supported, so sse2 not detected\n+rm tests/ui/intrinsics/const-eval-select-x86_64.rs # requires x86_64 vendor intrinsics\n+rm tests/ui/simd/array-type.rs # \"Index argument for `simd_insert` is not a constant\"\n+rm tests/ui/simd/intrinsic/float-math-pass.rs # simd_fcos unimplemented\n \n # exotic linkages\n-rm src/test/ui/issues/issue-33992.rs # unsupported linkages\n-rm src/test/incremental/hashes/function_interfaces.rs # same\n-rm src/test/incremental/hashes/statics.rs # same\n+rm tests/ui/issues/issue-33992.rs # unsupported linkages\n+rm tests/incremental/hashes/function_interfaces.rs # same\n+rm tests/incremental/hashes/statics.rs # same\n \n # variadic arguments\n-rm src/test/ui/abi/mir/mir_codegen_calls_variadic.rs # requires float varargs\n-rm src/test/ui/abi/variadic-ffi.rs # requires callee side vararg support\n+rm tests/ui/abi/mir/mir_codegen_calls_variadic.rs # requires float varargs\n+rm tests/ui/abi/variadic-ffi.rs # requires callee side vararg support\n \n # unsized locals\n-rm -r src/test/run-pass-valgrind/unsized-locals\n+rm -r tests/run-pass-valgrind/unsized-locals\n \n # misc unimplemented things\n-rm src/test/ui/intrinsics/intrinsic-nearby.rs # unimplemented nearbyintf32 and nearbyintf64 intrinsics\n-rm src/test/ui/target-feature/missing-plusminus.rs # error not implemented\n-rm src/test/ui/fn/dyn-fn-alignment.rs # wants a 256 byte alignment\n-rm -r src/test/run-make/emit-named-files # requires full --emit support\n-rm -r src/test/run-make/repr128-dwarf # debuginfo test\n+rm tests/ui/intrinsics/intrinsic-nearby.rs # unimplemented nearbyintf32 and nearbyintf64 intrinsics\n+rm tests/ui/target-feature/missing-plusminus.rs # error not implemented\n+rm tests/ui/fn/dyn-fn-alignment.rs # wants a 256 byte alignment\n+rm -r tests/run-make/emit-named-files # requires full --emit support\n+rm -r tests/run-make/repr128-dwarf # debuginfo test\n \n # optimization tests\n # ==================\n-rm src/test/ui/codegen/issue-28950.rs # depends on stack size optimizations\n-rm src/test/ui/codegen/init-large-type.rs # same\n-rm src/test/ui/issues/issue-40883.rs # same\n-rm -r src/test/run-make/fmt-write-bloat/ # tests an optimization\n+rm tests/ui/codegen/issue-28950.rs # depends on stack size optimizations\n+rm tests/ui/codegen/init-large-type.rs # same\n+rm tests/ui/issues/issue-40883.rs # same\n+rm -r tests/run-make/fmt-write-bloat/ # tests an optimization\n \n # backend specific tests\n # ======================\n-rm src/test/incremental/thinlto/cgu_invalidated_when_import_{added,removed}.rs # requires LLVM\n-rm src/test/ui/abi/stack-protector.rs # requires stack protector support\n+rm tests/incremental/thinlto/cgu_invalidated_when_import_{added,removed}.rs # requires LLVM\n+rm tests/ui/abi/stack-protector.rs # requires stack protector support\n \n # giving different but possibly correct results\n # =============================================\n-rm src/test/ui/mir/mir_misc_casts.rs # depends on deduplication of constants\n-rm src/test/ui/mir/mir_raw_fat_ptr.rs # same\n-rm src/test/ui/consts/issue-33537.rs # same\n-rm src/test/ui/layout/valid_range_oob.rs # different ICE message\n+rm tests/ui/mir/mir_misc_casts.rs # depends on deduplication of constants\n+rm tests/ui/mir/mir_raw_fat_ptr.rs # same\n+rm tests/ui/consts/issue-33537.rs # same\n+rm tests/ui/layout/valid_range_oob.rs # different ICE message\n \n # doesn't work due to the way the rustc test suite is invoked.\n # should work when using ./x.py test the way it is intended\n # ============================================================\n-rm -r src/test/run-make/emit-shared-files # requires the rustdoc executable in dist/bin/\n-rm -r src/test/run-make/unstable-flag-required # same\n-rm -r src/test/run-make/rustdoc-* # same\n-rm -r src/test/run-make/issue-88756-default-output # same\n-rm -r src/test/run-make/remap-path-prefix-dwarf # requires llvm-dwarfdump\n-rm -r src/test/ui/consts/missing_span_in_backtrace.rs # expects sysroot source to be elsewhere\n+rm -r tests/run-make/emit-shared-files # requires the rustdoc executable in dist/bin/\n+rm -r tests/run-make/unstable-flag-required # same\n+rm -r tests/run-make/rustdoc-* # same\n+rm -r tests/run-make/issue-88756-default-output # same\n+rm -r tests/run-make/remap-path-prefix-dwarf # requires llvm-dwarfdump\n+rm -r tests/ui/consts/missing_span_in_backtrace.rs # expects sysroot source to be elsewhere\n \n # genuine bugs\n # ============\n-rm src/test/incremental/spike-neg1.rs # errors out for some reason\n-rm src/test/incremental/spike-neg2.rs # same\n+rm tests/incremental/spike-neg1.rs # errors out for some reason\n+rm tests/incremental/spike-neg2.rs # same\n \n-rm src/test/ui/simd/intrinsic/generic-reduction-pass.rs # simd_reduce_add_unordered doesn't accept an accumulator for integer vectors\n+rm tests/ui/simd/intrinsic/generic-reduction-pass.rs # simd_reduce_add_unordered doesn't accept an accumulator for integer vectors\n \n-rm src/test/ui/simd/intrinsic/generic-as.rs # crash when accessing vector type filed (#1318)\n-rm src/test/ui/simd/simd-bitmask.rs # crash\n+rm tests/ui/simd/intrinsic/generic-as.rs # crash when accessing vector type filed (#1318)\n+rm tests/ui/simd/simd-bitmask.rs # crash\n \n # bugs in the test suite\n # ======================\n-rm src/test/ui/backtrace.rs # TODO warning\n-rm src/test/ui/simple_global_asm.rs # TODO add needs-asm-support\n-rm src/test/ui/process/nofile-limit.rs # TODO some AArch64 linking issue\n-rm src/test/ui/dyn-star/dispatch-on-pin-mut.rs # TODO failed assertion in vtable::get_ptr_and_method_ref\n+rm tests/ui/backtrace.rs # TODO warning\n+rm tests/ui/simple_global_asm.rs # TODO add needs-asm-support\n+rm tests/ui/process/nofile-limit.rs # TODO some AArch64 linking issue\n+rm tests/ui/dyn-star/dispatch-on-pin-mut.rs # TODO failed assertion in vtable::get_ptr_and_method_ref\n \n-rm src/test/ui/stdio-is-blocking.rs # really slow with unoptimized libstd\n+rm tests/ui/stdio-is-blocking.rs # really slow with unoptimized libstd\n \n echo \"[TEST] rustc test suite\"\n-RUST_TEST_NOCAPTURE=1 COMPILETEST_FORCE_STAGE0=1 ./x.py test --stage 0 src/test/{codegen-units,run-make,run-pass-valgrind,ui,incremental}\n+RUST_TEST_NOCAPTURE=1 COMPILETEST_FORCE_STAGE0=1 ./x.py test --stage 0 tests/{codegen-units,run-make,run-pass-valgrind,ui,incremental}\n popd"}, {"sha": "51450897bfc11278afe11293a8c2e92de48ef52e", "filename": "src/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/954dfd11987fe9072e732187309048efa885201a/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/954dfd11987fe9072e732187309048efa885201a/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=954dfd11987fe9072e732187309048efa885201a", "patch": "@@ -304,7 +304,7 @@ fn data_id_for_static(\n \n         // Comment copied from https://github.com/rust-lang/rust/blob/45060c2a66dfd667f88bd8b94261b28a58d85bd5/src/librustc_codegen_llvm/consts.rs#L141\n         // Declare an internal global `extern_with_linkage_foo` which\n-        // is initialized with the address of `foo`.  If `foo` is\n+        // is initialized with the address of `foo`. If `foo` is\n         // discarded during linking (for example, if `foo` has weak\n         // linkage and there are no definitions), then\n         // `extern_with_linkage_foo` will instead be initialized to"}, {"sha": "3a7421d8b30d843354e3462d1fec296a7f957035", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/954dfd11987fe9072e732187309048efa885201a/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/954dfd11987fe9072e732187309048efa885201a/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=954dfd11987fe9072e732187309048efa885201a", "patch": "@@ -72,7 +72,7 @@ impl DebugContext {\n             .working_dir\n             .to_string_lossy(FileNameDisplayPreference::Remapped)\n             .into_owned();\n-        let (name, file_info) = match tcx.sess.local_crate_source_file.clone() {\n+        let (name, file_info) = match tcx.sess.local_crate_source_file() {\n             Some(path) => {\n                 let name = path.to_string_lossy().into_owned();\n                 (name, None)"}, {"sha": "9cce8e9b9cdc073315e3fd5fd29d34e8318d251e", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/954dfd11987fe9072e732187309048efa885201a/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/954dfd11987fe9072e732187309048efa885201a/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=954dfd11987fe9072e732187309048efa885201a", "patch": "@@ -643,7 +643,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             let res = CValue::by_val(res, arg.layout());\n             ret.write_cvalue(fx, res);\n         }\n-        sym::assert_inhabited | sym::assert_zero_valid | sym::assert_uninit_valid => {\n+        sym::assert_inhabited | sym::assert_zero_valid | sym::assert_mem_uninitialized_valid => {\n             intrinsic_args!(fx, args => (); intrinsic);\n \n             let layout = fx.layout_of(substs.type_at(0));\n@@ -672,7 +672,9 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 return;\n             }\n \n-            if intrinsic == sym::assert_uninit_valid && !fx.tcx.permits_uninit_init(layout) {\n+            if intrinsic == sym::assert_mem_uninitialized_valid\n+                && !fx.tcx.permits_uninit_init(layout)\n+            {\n                 with_no_trimmed_paths!({\n                     crate::base::codegen_panic(\n                         fx,"}]}