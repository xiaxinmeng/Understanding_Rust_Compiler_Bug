{"sha": "a780fa3f67dc6d1f4a450b4f367727a7e87a7867", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ODBmYTNmNjdkYzZkMWY0YTQ1MGI0ZjM2NzcyN2E3ZTg3YTc4Njc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-02-28T14:44:34Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-02-28T14:44:34Z"}, "message": "rewrite typeck bodies to iterate over the bodies vector", "tree": {"sha": "ea940c9d7b01524ba6769c6861fd4a0f0be0c6ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea940c9d7b01524ba6769c6861fd4a0f0be0c6ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a780fa3f67dc6d1f4a450b4f367727a7e87a7867", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a780fa3f67dc6d1f4a450b4f367727a7e87a7867", "html_url": "https://github.com/rust-lang/rust/commit/a780fa3f67dc6d1f4a450b4f367727a7e87a7867", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a780fa3f67dc6d1f4a450b4f367727a7e87a7867/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fab202c0a82ea14e6fa4cde9080c789732f1213b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fab202c0a82ea14e6fa4cde9080c789732f1213b", "html_url": "https://github.com/rust-lang/rust/commit/fab202c0a82ea14e6fa4cde9080c789732f1213b"}], "stats": {"total": 48, "additions": 7, "deletions": 41}, "files": [{"sha": "2e7bac67c5f5e84a1d66218dc23af2337dbbb7ed", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a780fa3f67dc6d1f4a450b4f367727a7e87a7867/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a780fa3f67dc6d1f4a450b4f367727a7e87a7867/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=a780fa3f67dc6d1f4a450b4f367727a7e87a7867", "patch": "@@ -115,6 +115,7 @@ pub enum DepNode<D: Clone + Debug> {\n     SizedConstraint(D),\n     AssociatedItemDefIds(D),\n     InherentImpls(D),\n+    TypeckBodiesKrate,\n     TypeckTables(D),\n     UsedTraitImports(D),\n     MonomorphicConstEval(D),\n@@ -211,6 +212,7 @@ impl<D: Clone + Debug> DepNode<D> {\n         match *self {\n             Krate => Some(Krate),\n             BorrowCheckKrate => Some(BorrowCheckKrate),\n+            TypeckBodiesKrate => Some(TypeckBodiesKrate),\n             CollectLanguageItems => Some(CollectLanguageItems),\n             CheckStaticRecursion => Some(CheckStaticRecursion),\n             ResolveLifetimes => Some(ResolveLifetimes),"}, {"sha": "3c2b44653e03346d7676866f1d24808e2694080f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 41, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a780fa3f67dc6d1f4a450b4f367727a7e87a7867/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a780fa3f67dc6d1f4a450b4f367727a7e87a7867/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a780fa3f67dc6d1f4a450b4f367727a7e87a7867", "patch": "@@ -118,7 +118,6 @@ use syntax::util::lev_distance::find_best_match_for_name;\n use syntax_pos::{self, BytePos, Span, DUMMY_SP};\n \n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n-use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::{self, PatKind};\n use rustc::middle::lang_items;\n use rustc_back::slice;\n@@ -515,7 +514,6 @@ impl<'a, 'gcx, 'tcx> Inherited<'a, 'gcx, 'tcx> {\n }\n \n struct CheckItemTypesVisitor<'a, 'tcx: 'a> { tcx: TyCtxt<'a, 'tcx, 'tcx> }\n-struct CheckItemBodiesVisitor<'a, 'tcx: 'a> { tcx: TyCtxt<'a, 'tcx, 'tcx> }\n \n impl<'a, 'tcx> Visitor<'tcx> for CheckItemTypesVisitor<'a, 'tcx> {\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n@@ -550,43 +548,6 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckItemTypesVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CheckItemBodiesVisitor<'a, 'tcx> {\n-    fn visit_item(&mut self, item: &'tcx hir::Item) {\n-        match item.node {\n-            hir::ItemFn(..) => {\n-                self.tcx.item_tables(self.tcx.hir.local_def_id(item.id));\n-            }\n-            _ => { }\n-        }\n-    }\n-\n-    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n-        match trait_item.node {\n-            hir::TraitItemKind::Const(_, Some(_)) |\n-            hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(_)) => {\n-                self.tcx.item_tables(self.tcx.hir.local_def_id(trait_item.id));\n-            }\n-            hir::TraitItemKind::Method(_, hir::TraitMethod::Required(_)) |\n-            hir::TraitItemKind::Const(_, None) |\n-            hir::TraitItemKind::Type(..) => {\n-                // Nothing to do.\n-            }\n-        }\n-    }\n-\n-    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n-        match impl_item.node {\n-            hir::ImplItemKind::Const(..) |\n-            hir::ImplItemKind::Method(..) => {\n-                self.tcx.item_tables(self.tcx.hir.local_def_id(impl_item.id));\n-            }\n-            hir::ImplItemKind::Type(_) => {\n-                // Nothing to do here.\n-            }\n-        }\n-    }\n-}\n-\n pub fn check_wf_new<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> CompileResult {\n     tcx.sess.track_errors(|| {\n         let mut visit = wfcheck::CheckTypeWellFormedVisitor::new(tcx);\n@@ -604,8 +565,11 @@ pub fn check_item_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> CompileResult\n \n pub fn check_item_bodies<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> CompileResult {\n     tcx.sess.track_errors(|| {\n-        let mut visit = CheckItemBodiesVisitor { tcx: tcx };\n-        tcx.visit_all_item_likes_in_krate(DepNode::TypeckTables, &mut visit);\n+        tcx.dep_graph.with_task(DepNode::TypeckBodiesKrate, || {\n+            tcx.visit_all_bodies_in_krate(|body_owner_def_id, _body_id| {\n+                tcx.item_tables(body_owner_def_id);\n+            });\n+        });\n     })\n }\n "}]}