{"sha": "9387927ae2c0d2a283f6c48b705f25d38bb6e692", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzODc5MjdhZTJjMGQyYTI4M2Y2YzQ4YjcwNWYyNWQzOGJiNmU2OTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-17T22:24:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-17T22:24:11Z"}, "message": "Auto merge of #60054 - Centril:rollup-o40xxaa, r=Centril\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #59908 (Re-export core::str::{EscapeDebug, EscapeDefault, EscapeUnicode} in std)\n - #59984 (Remove collection-specific `with_capacity` documentation from `std::collections`)\n - #60036 (Remove nrc from toolstate pings)\n - #60037 (Resolve inconsistency in error messages between \"parameter\" and \"variable\".)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "64cc8bae3fa87a8a581b6d73e3bbee7802167d4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64cc8bae3fa87a8a581b6d73e3bbee7802167d4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9387927ae2c0d2a283f6c48b705f25d38bb6e692", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9387927ae2c0d2a283f6c48b705f25d38bb6e692", "html_url": "https://github.com/rust-lang/rust/commit/9387927ae2c0d2a283f6c48b705f25d38bb6e692", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9387927ae2c0d2a283f6c48b705f25d38bb6e692/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c3d3c1777041200bb7ed7a65b6562d62899778c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c3d3c1777041200bb7ed7a65b6562d62899778c", "html_url": "https://github.com/rust-lang/rust/commit/3c3d3c1777041200bb7ed7a65b6562d62899778c"}, {"sha": "42b3cf107d8352d48de35f7caa76946a1b64e962", "url": "https://api.github.com/repos/rust-lang/rust/commits/42b3cf107d8352d48de35f7caa76946a1b64e962", "html_url": "https://github.com/rust-lang/rust/commit/42b3cf107d8352d48de35f7caa76946a1b64e962"}], "stats": {"total": 53, "additions": 27, "deletions": 26}, "files": [{"sha": "f10a01d44c8ee4207ea03935834bdc72c2c209e5", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=9387927ae2c0d2a283f6c48b705f25d38bb6e692", "patch": "@@ -68,6 +68,8 @@ pub use core::str::pattern;\n pub use core::str::EncodeUtf16;\n #[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]\n pub use core::str::SplitAsciiWhitespace;\n+#[stable(feature = \"str_escape\", since = \"1.34.0\")]\n+pub use core::str::{EscapeDebug, EscapeDefault, EscapeUnicode};\n \n #[unstable(feature = \"slice_concat_ext\",\n            reason = \"trait should not have to exist\","}, {"sha": "83416eaa06274dab59c9066bbea191f8cc35968e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=9387927ae2c0d2a283f6c48b705f25d38bb6e692", "patch": "@@ -234,12 +234,12 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver<'_>,\n                 },\n                 Def::TyParam(def_id) => {\n                     if let Some(span) = resolver.definitions.opt_span(def_id) {\n-                        err.span_label(span, \"type variable from outer function\");\n+                        err.span_label(span, \"type parameter from outer function\");\n                     }\n                 }\n                 Def::ConstParam(def_id) => {\n                     if let Some(span) = resolver.definitions.opt_span(def_id) {\n-                        err.span_label(span, \"const variable from outer function\");\n+                        err.span_label(span, \"const parameter from outer function\");\n                     }\n                 }\n                 _ => {"}, {"sha": "15c2532f8b4e0b839645ca6885acc5cfbe7c306c", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=9387927ae2c0d2a283f6c48b705f25d38bb6e692", "patch": "@@ -150,10 +150,9 @@\n //! Any `with_capacity` constructor will instruct the collection to allocate\n //! enough space for the specified number of elements. Ideally this will be for\n //! exactly that many elements, but some implementation details may prevent\n-//! this. [`Vec`] and [`VecDeque`] can be relied on to allocate exactly the\n-//! requested amount, though. Use `with_capacity` when you know exactly how many\n-//! elements will be inserted, or at least have a reasonable upper-bound on that\n-//! number.\n+//! this. See collection-specific documentation for details. In general, use\n+//! `with_capacity` when you know exactly how many elements will be inserted, or\n+//! at least have a reasonable upper-bound on that number.\n //!\n //! When anticipating a large influx of elements, the `reserve` family of\n //! methods can be used to hint to the collection how much room it should make"}, {"sha": "6f24c0d86997e3158fe54e2b24f33f484286ea70", "filename": "src/test/ui/bad/bad-type-env-capture.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Ftest%2Fui%2Fbad%2Fbad-type-env-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Ftest%2Fui%2Fbad%2Fbad-type-env-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-type-env-capture.stderr?ref=9387927ae2c0d2a283f6c48b705f25d38bb6e692", "patch": "@@ -2,7 +2,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/bad-type-env-capture.rs:2:15\n    |\n LL | fn foo<T>() {\n-   |        - type variable from outer function\n+   |        - type parameter from outer function\n LL |     fn bar(b: T) { }\n    |        ---    ^ use of generic parameter from outer function\n    |        |"}, {"sha": "f0b7562f62196ac5ba974425d6b5c9b4bc9398cf", "filename": "src/test/ui/const-generics/const-param-from-outer-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.stderr?ref=9387927ae2c0d2a283f6c48b705f25d38bb6e692", "patch": "@@ -8,7 +8,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/const-param-from-outer-fn.rs:6:9\n    |\n LL | fn foo<const X: u32>() {\n-   |              - const variable from outer function\n+   |              - const parameter from outer function\n LL |     fn bar() -> u32 {\n    |        --- try adding a local generic parameter in this method instead\n LL |         X"}, {"sha": "1d9dfe46722ecf88bc3b09943e8cb93230eb2862", "filename": "src/test/ui/error-codes/E0401.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr?ref=9387927ae2c0d2a283f6c48b705f25d38bb6e692", "patch": "@@ -2,7 +2,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/E0401.rs:4:39\n    |\n LL | fn foo<T>(x: T) {\n-   |        - type variable from outer function\n+   |        - type parameter from outer function\n LL |     fn bfnr<U, V: Baz<U>, W: Fn()>(y: T) {\n    |        ---------------------------    ^ use of generic parameter from outer function\n    |        |\n@@ -12,7 +12,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/E0401.rs:9:16\n    |\n LL | fn foo<T>(x: T) {\n-   |        - type variable from outer function\n+   |        - type parameter from outer function\n ...\n LL |     fn baz<U,\n    |        --- try adding a local generic parameter in this method instead"}, {"sha": "09f79105f6a0e5e41852f252ae0c030c5fcdcae9", "filename": "src/test/ui/inner-static-type-parameter.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Ftest%2Fui%2Finner-static-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Ftest%2Fui%2Finner-static-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finner-static-type-parameter.stderr?ref=9387927ae2c0d2a283f6c48b705f25d38bb6e692", "patch": "@@ -2,7 +2,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/inner-static-type-parameter.rs:6:19\n    |\n LL | fn foo<T>() {\n-   |    --- - type variable from outer function\n+   |    --- - type parameter from outer function\n    |    |\n    |    try adding a local generic parameter in this method instead\n LL |     static a: Bar<T> = Bar::What;"}, {"sha": "8764ac8a8563c428af4f76e277c24f94ccaa002c", "filename": "src/test/ui/issues/issue-3021-c.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Ftest%2Fui%2Fissues%2Fissue-3021-c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Ftest%2Fui%2Fissues%2Fissue-3021-c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3021-c.stderr?ref=9387927ae2c0d2a283f6c48b705f25d38bb6e692", "patch": "@@ -2,7 +2,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/issue-3021-c.rs:4:24\n    |\n LL | fn siphash<T>() {\n-   |            - type variable from outer function\n+   |            - type parameter from outer function\n ...\n LL |         fn g(&self, x: T) -> T;\n    |            -           ^ use of generic parameter from outer function\n@@ -13,7 +13,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/issue-3021-c.rs:4:30\n    |\n LL | fn siphash<T>() {\n-   |            - type variable from outer function\n+   |            - type parameter from outer function\n ...\n LL |         fn g(&self, x: T) -> T;\n    |            -                 ^ use of generic parameter from outer function"}, {"sha": "fa04ec12b741cdb122adafa36e0301bca8d24288", "filename": "src/test/ui/issues/issue-3214.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr?ref=9387927ae2c0d2a283f6c48b705f25d38bb6e692", "patch": "@@ -2,7 +2,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/issue-3214.rs:3:12\n    |\n LL | fn foo<T>() {\n-   |    --- - type variable from outer function\n+   |    --- - type parameter from outer function\n    |    |\n    |    try adding a local generic parameter in this method instead\n LL |     struct Foo {"}, {"sha": "1c58b9c3911046c960c47424d140b12560f6b162", "filename": "src/test/ui/issues/issue-5997-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Ftest%2Fui%2Fissues%2Fissue-5997-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Ftest%2Fui%2Fissues%2Fissue-5997-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5997-enum.stderr?ref=9387927ae2c0d2a283f6c48b705f25d38bb6e692", "patch": "@@ -2,7 +2,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/issue-5997-enum.rs:2:16\n    |\n LL | fn f<Z>() -> bool {\n-   |    - - type variable from outer function\n+   |    - - type parameter from outer function\n    |    |\n    |    try adding a local generic parameter in this method instead\n LL |     enum E { V(Z) }"}, {"sha": "5b388d16d75534865d6f29deb2c4dcdaee367c45", "filename": "src/test/ui/issues/issue-5997-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Ftest%2Fui%2Fissues%2Fissue-5997-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Ftest%2Fui%2Fissues%2Fissue-5997-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5997-struct.stderr?ref=9387927ae2c0d2a283f6c48b705f25d38bb6e692", "patch": "@@ -2,7 +2,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/issue-5997-struct.rs:2:14\n    |\n LL | fn f<T>() -> bool {\n-   |    - - type variable from outer function\n+   |    - - type parameter from outer function\n    |    |\n    |    try adding a local generic parameter in this method instead\n LL |     struct S(T);"}, {"sha": "f6741b5e5e82aca56ccd0bf026a30c3b2dbabe03", "filename": "src/test/ui/nested-ty-params.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Ftest%2Fui%2Fnested-ty-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Ftest%2Fui%2Fnested-ty-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnested-ty-params.stderr?ref=9387927ae2c0d2a283f6c48b705f25d38bb6e692", "patch": "@@ -2,7 +2,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/nested-ty-params.rs:3:16\n    |\n LL | fn hd<U>(v: Vec<U> ) -> U {\n-   |       - type variable from outer function\n+   |       - type parameter from outer function\n LL |     fn hd1(w: [U]) -> U { return w[0]; }\n    |        ---     ^ use of generic parameter from outer function\n    |        |\n@@ -12,7 +12,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/nested-ty-params.rs:3:23\n    |\n LL | fn hd<U>(v: Vec<U> ) -> U {\n-   |       - type variable from outer function\n+   |       - type parameter from outer function\n LL |     fn hd1(w: [U]) -> U { return w[0]; }\n    |        ---            ^ use of generic parameter from outer function\n    |        |"}, {"sha": "10a703ee09351033cdb4babe56fe368fdf4bbeb8", "filename": "src/test/ui/resolve/resolve-type-param-in-item-in-trait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Ftest%2Fui%2Fresolve%2Fresolve-type-param-in-item-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Ftest%2Fui%2Fresolve%2Fresolve-type-param-in-item-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-type-param-in-item-in-trait.stderr?ref=9387927ae2c0d2a283f6c48b705f25d38bb6e692", "patch": "@@ -2,7 +2,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/resolve-type-param-in-item-in-trait.rs:8:22\n    |\n LL | trait TraitA<A> {\n-   |              - type variable from outer function\n+   |              - type parameter from outer function\n LL |     fn outer(&self) {\n    |        ----- try adding a local generic parameter in this method instead\n LL |         enum Foo<B> {\n@@ -13,7 +13,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/resolve-type-param-in-item-in-trait.rs:16:23\n    |\n LL | trait TraitB<A> {\n-   |              - type variable from outer function\n+   |              - type parameter from outer function\n LL |     fn outer(&self) {\n    |        ----- try adding a local generic parameter in this method instead\n LL |         struct Foo<B>(A);\n@@ -23,7 +23,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/resolve-type-param-in-item-in-trait.rs:23:28\n    |\n LL | trait TraitC<A> {\n-   |              - type variable from outer function\n+   |              - type parameter from outer function\n LL |     fn outer(&self) {\n    |        ----- try adding a local generic parameter in this method instead\n LL |         struct Foo<B> { a: A }\n@@ -33,7 +33,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/resolve-type-param-in-item-in-trait.rs:30:22\n    |\n LL | trait TraitD<A> {\n-   |              - type variable from outer function\n+   |              - type parameter from outer function\n LL |     fn outer(&self) {\n LL |         fn foo<B>(a: A) { }\n    |            ------    ^ use of generic parameter from outer function"}, {"sha": "ea991069c08ddc1925103d692090a3f3ad107ebd", "filename": "src/test/ui/type/type-arg-out-of-scope.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Ftest%2Fui%2Ftype%2Ftype-arg-out-of-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Ftest%2Fui%2Ftype%2Ftype-arg-out-of-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-arg-out-of-scope.stderr?ref=9387927ae2c0d2a283f6c48b705f25d38bb6e692", "patch": "@@ -2,7 +2,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/type-arg-out-of-scope.rs:3:25\n    |\n LL | fn foo<T>(x: T) {\n-   |        - type variable from outer function\n+   |        - type parameter from outer function\n LL |     fn bar(f: Box<FnMut(T) -> T>) { }\n    |        ---              ^ use of generic parameter from outer function\n    |        |\n@@ -12,7 +12,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/type-arg-out-of-scope.rs:3:31\n    |\n LL | fn foo<T>(x: T) {\n-   |        - type variable from outer function\n+   |        - type parameter from outer function\n LL |     fn bar(f: Box<FnMut(T) -> T>) { }\n    |        ---                    ^ use of generic parameter from outer function\n    |        |"}, {"sha": "7d359fdcaca16eafc3ab6c3fa92c7d765ce07d15", "filename": "src/tools/publish_toolstate.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/9387927ae2c0d2a283f6c48b705f25d38bb6e692/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=9387927ae2c0d2a283f6c48b705f25d38bb6e692", "patch": "@@ -16,8 +16,8 @@\n MAINTAINERS = {\n     'miri': '@oli-obk @RalfJung @eddyb',\n     'clippy-driver': '@Manishearth @llogiq @mcarton @oli-obk @phansch',\n-    'rls': '@nrc @Xanewok',\n-    'rustfmt': '@nrc @topecongiro',\n+    'rls': '@Xanewok',\n+    'rustfmt': '@topecongiro',\n     'book': '@carols10cents @steveklabnik',\n     'nomicon': '@frewsxcv @Gankro',\n     'reference': '@steveklabnik @Havvy @matthewjasper @ehuss',"}]}