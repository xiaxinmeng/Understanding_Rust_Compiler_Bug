{"sha": "d0a1c2d3e0ac91849882693720cb81b5da533439", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYTFjMmQzZTBhYzkxODQ5ODgyNjkzNzIwY2I4MWI1ZGE1MzM0Mzk=", "commit": {"author": {"name": "Jethro Beekman", "email": "jethro@fortanix.com", "date": "2019-04-17T01:07:29Z"}, "committer": {"name": "Jethro Beekman", "email": "jethro@fortanix.com", "date": "2019-04-17T01:18:32Z"}, "message": "SGX target: change re-entry abort logic", "tree": {"sha": "64ab253d3307512911589b9f77848729e7d4ffdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64ab253d3307512911589b9f77848729e7d4ffdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0a1c2d3e0ac91849882693720cb81b5da533439", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0a1c2d3e0ac91849882693720cb81b5da533439", "html_url": "https://github.com/rust-lang/rust/commit/d0a1c2d3e0ac91849882693720cb81b5da533439", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0a1c2d3e0ac91849882693720cb81b5da533439/comments", "author": null, "committer": null, "parents": [{"sha": "c132c96a6daa86ba6b9e587a89dca1ce5c445dd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c132c96a6daa86ba6b9e587a89dca1ce5c445dd1", "html_url": "https://github.com/rust-lang/rust/commit/c132c96a6daa86ba6b9e587a89dca1ce5c445dd1"}], "stats": {"total": 30, "additions": 11, "deletions": 19}, "files": [{"sha": "c35e49b1dc6ea2453ca1f13fbec730963e76cb7b", "filename": "src/libstd/sys/sgx/abi/entry.S", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d0a1c2d3e0ac91849882693720cb81b5da533439/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S", "raw_url": "https://github.com/rust-lang/rust/raw/d0a1c2d3e0ac91849882693720cb81b5da533439/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S?ref=d0a1c2d3e0ac91849882693720cb81b5da533439", "patch": "@@ -65,10 +65,6 @@ IMAGE_BASE:\n     /*  The size in bytes of enclacve EH_FRM_HDR section */\n     globvar EH_FRM_HDR_SIZE 8\n \n-.Lreentry_panic_msg:\n-    .asciz \"Re-entered aborted enclave!\"\n-.Lreentry_panic_msg_end:\n-\n .org .Lxsave_clear+512\n .Lxsave_header:\n     .int 0, 0 /*  XSTATE_BV */\n@@ -210,10 +206,8 @@ sgx_entry:\n /*  end sgx_entry */\n \n .Lreentry_panic:\n-    lea .Lreentry_panic_msg(%rip),%rdi\n-    mov $.Lreentry_panic_msg_end-.Lreentry_panic_msg,%esi\n     orq $8,%rsp\n-    jmp panic_msg\n+    jmp abort_reentry\n \n /*  This *MUST* be called with 6 parameters, otherwise register information */\n /*  might leak! */\n@@ -279,10 +273,8 @@ usercall:\n /*\n The following functions need to be defined externally:\n ```\n-// Called by entry code when it needs to panic\n-extern \"C\" fn panic_msg(msg: &'static str) -> ! {\n-    panic!(msg)\n-}\n+// Called by entry code on re-entry after exit\n+extern \"C\" fn abort_reentry() -> !;\n \n // Called once when a TCS is first entered\n extern \"C\" fn tcs_init(secondary: bool);"}, {"sha": "0f107de83f062c76fbea80edeb6ede41429ee79f", "filename": "src/libstd/sys/sgx/abi/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0a1c2d3e0ac91849882693720cb81b5da533439/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a1c2d3e0ac91849882693720cb81b5da533439/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmod.rs?ref=d0a1c2d3e0ac91849882693720cb81b5da533439", "patch": "@@ -29,7 +29,7 @@ unsafe extern \"C\" fn tcs_init(secondary: bool) {\n     static RELOC_STATE: AtomicUsize = AtomicUsize::new(UNINIT);\n \n     if secondary && RELOC_STATE.load(Ordering::Relaxed) != DONE {\n-        panic::panic_msg(\"Entered secondary TCS before main TCS!\")\n+        rtabort!(\"Entered secondary TCS before main TCS!\")\n     }\n \n     // Try to atomically swap UNINIT with BUSY. The returned state can be:\n@@ -92,3 +92,9 @@ pub(super) fn exit_with_code(code: isize) -> ! {\n     }\n     usercalls::exit(code != 0);\n }\n+\n+#[cfg(not(test))]\n+#[no_mangle]\n+extern \"C\" fn abort_reentry() -> ! {\n+    usercalls::exit(false)\n+}"}, {"sha": "2401476716f4faf3dbef58d1cb0b50828b1f75ca", "filename": "src/libstd/sys/sgx/abi/panic.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0a1c2d3e0ac91849882693720cb81b5da533439/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a1c2d3e0ac91849882693720cb81b5da533439/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fpanic.rs?ref=d0a1c2d3e0ac91849882693720cb81b5da533439", "patch": "@@ -1,4 +1,4 @@\n-use super::usercalls::{alloc::UserRef, self};\n+use super::usercalls::alloc::UserRef;\n use crate::cmp;\n use crate::io::{self, Write};\n use crate::mem;\n@@ -48,9 +48,3 @@ impl Write for SgxPanicOutput {\n         Ok(())\n     }\n }\n-\n-#[cfg_attr(not(test), no_mangle)]\n-pub extern \"C\" fn panic_msg(msg: &str) -> ! {\n-    let _ = SgxPanicOutput::new().map(|mut out| out.write(msg.as_bytes()));\n-    usercalls::exit(true)\n-}"}]}