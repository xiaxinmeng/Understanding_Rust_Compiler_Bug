{"sha": "b5cedb7c4ea74234fbf6da6bdc2ab6efc447baad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1Y2VkYjdjNGVhNzQyMzRmYmY2ZGE2YmRjMmFiNmVmYzQ0N2JhYWQ=", "commit": {"author": {"name": "steveklabnik", "email": "steve@steveklabnik.com", "date": "2017-04-05T15:58:53Z"}, "committer": {"name": "steveklabnik", "email": "steve@steveklabnik.com", "date": "2017-04-05T15:58:53Z"}, "message": "tidy clean and small text fix", "tree": {"sha": "659bc72ce8397452f5e323a178ac53bec1fb9c0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/659bc72ce8397452f5e323a178ac53bec1fb9c0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5cedb7c4ea74234fbf6da6bdc2ab6efc447baad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5cedb7c4ea74234fbf6da6bdc2ab6efc447baad", "html_url": "https://github.com/rust-lang/rust/commit/b5cedb7c4ea74234fbf6da6bdc2ab6efc447baad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5cedb7c4ea74234fbf6da6bdc2ab6efc447baad/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "086627ecd24308d773a9e5a2765d0c1f19f0226e", "url": "https://api.github.com/repos/rust-lang/rust/commits/086627ecd24308d773a9e5a2765d0c1f19f0226e", "html_url": "https://github.com/rust-lang/rust/commit/086627ecd24308d773a9e5a2765d0c1f19f0226e"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "0806548b5aa0557be4b8175c3b246cd962272f6b", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b5cedb7c4ea74234fbf6da6bdc2ab6efc447baad/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5cedb7c4ea74234fbf6da6bdc2ab6efc447baad/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=b5cedb7c4ea74234fbf6da6bdc2ab6efc447baad", "patch": "@@ -155,18 +155,18 @@ extern \"rust-intrinsic\" {\n     /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n     /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n     /// as both the `success` and `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`][compare_exchange_weak].\n+    /// [`AtomicBool::compare_exchange_weak`][cew].\n     ///\n-    /// [compare_exchange_weak]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n+    /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n     /// as both the `success` and `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`][compare_exchange_weak].\n+    /// [`AtomicBool::compare_exchange_weak`][cew].\n     ///\n-    /// [compare_exchange_weak]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n+    /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_acq<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -175,9 +175,9 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`][compare_exchange_weak].\n+    /// [`AtomicBool::compare_exchange_weak`][cew].\n     ///\n-    /// [compare_exchange_weak]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n+    /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_rel<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -186,18 +186,18 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`][compare_exchange_weak].\n+    /// [`AtomicBool::compare_exchange_weak`][cew].\n     ///\n-    /// [compare_exchange_weak]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n+    /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_acqrel<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n     /// as both the `success` and `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`][compare_exchange_weak].\n+    /// [`AtomicBool::compare_exchange_weak`][cew].\n     ///\n-    /// [compare_exchange_weak]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n+    /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_relaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -206,9 +206,9 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`][compare_exchange_weak].\n+    /// [`AtomicBool::compare_exchange_weak`][cew].\n     ///\n-    /// [compare_exchange_weak]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n+    /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -217,9 +217,9 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`][compare_exchange_weak].\n+    /// [`AtomicBool::compare_exchange_weak`][cew].\n     ///\n-    /// [compare_exchange_weak]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n+    /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_failacq<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -228,9 +228,9 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`][compare_exchange_weak].\n+    /// [`AtomicBool::compare_exchange_weak`][cew].\n     ///\n-    /// [compare_exchange_weak]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n+    /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_acq_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     /// The stabilized version of this intrinsic is available on the\n@@ -239,9 +239,9 @@ extern \"rust-intrinsic\" {\n     /// as the `success` and\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`][compare_exchange_weak].\n+    /// [`AtomicBool::compare_exchange_weak`][cew].\n     ///\n-    /// [compare_exchange_weak]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n+    /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_acqrel_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n \n     /// Loads the current value of the pointer."}]}