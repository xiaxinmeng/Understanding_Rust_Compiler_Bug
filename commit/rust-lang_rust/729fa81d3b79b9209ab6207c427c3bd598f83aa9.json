{"sha": "729fa81d3b79b9209ab6207c427c3bd598f83aa9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyOWZhODFkM2I3OWI5MjA5YWI2MjA3YzQyN2MzYmQ1OThmODNhYTk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-13T01:47:26Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-13T01:47:26Z"}, "message": "Revert \"rustc: Remove some exterior vectors from ty.rs\"\n\nThis reverts commit 01ea0647bb9773f44a8100c461af30046c3293aa.", "tree": {"sha": "a5c67ef19fab014189d7173a9a1969530a00905b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5c67ef19fab014189d7173a9a1969530a00905b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/729fa81d3b79b9209ab6207c427c3bd598f83aa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/729fa81d3b79b9209ab6207c427c3bd598f83aa9", "html_url": "https://github.com/rust-lang/rust/commit/729fa81d3b79b9209ab6207c427c3bd598f83aa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/729fa81d3b79b9209ab6207c427c3bd598f83aa9/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6390c43dc465b7c89eb542855bdfe12103ee330f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6390c43dc465b7c89eb542855bdfe12103ee330f", "html_url": "https://github.com/rust-lang/rust/commit/6390c43dc465b7c89eb542855bdfe12103ee330f"}], "stats": {"total": 57, "additions": 42, "deletions": 15}, "files": [{"sha": "678821f0cdea4e7d6f2ea882b54efd95978b735a", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 42, "deletions": 15, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/729fa81d3b79b9209ab6207c427c3bd598f83aa9/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729fa81d3b79b9209ab6207c427c3bd598f83aa9/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=729fa81d3b79b9209ab6207c427c3bd598f83aa9", "patch": "@@ -3,6 +3,7 @@ import std::int;\n import std::ivec;\n import std::str;\n import std::uint;\n+import std::vec;\n import std::box;\n import std::ufindivec;\n import std::map;\n@@ -1038,16 +1039,24 @@ fn type_has_pointers(&ctxt cx, &t ty) -> bool {\n         case (ty_tag(?did, ?tps)) {\n             auto variants = tag_variants(cx, did);\n             for (variant_info variant in variants) {\n-                auto tup_ty = mk_imm_tup(cx, variant.args);\n+                // TODO: Remove this vec->ivec conversion.\n+                auto args = ~[];\n+                for (ty::t arg in variant.args) { args += ~[arg]; }\n \n+                auto tup_ty = mk_imm_tup(cx, args);\n                 // Perform any type parameter substitutions.\n+\n                 tup_ty = substitute_type_params(cx, tps, tup_ty);\n                 if (type_has_pointers(cx, tup_ty)) { result = true; }\n             }\n         }\n         case (ty_res(?did, ?inner, ?tps)) {\n-            result = type_has_pointers(cx,\n-                substitute_type_params(cx, tps, inner));\n+            // FIXME: Remove this vec->ivec conversion.\n+            auto tps_ivec = ~[];\n+            for (ty::t tp in tps) { tps_ivec += ~[tp]; }\n+\n+            result = type_has_pointers\n+                (cx, substitute_type_params(cx, tps_ivec, inner));\n         }\n         case (_) { result = true; }\n     }\n@@ -1212,7 +1221,11 @@ fn type_owns_heap_mem(&ctxt cx, &t ty) -> bool {\n         case (ty_tag(?did, ?tps)) {\n             auto variants = tag_variants(cx, did);\n             for (variant_info variant in variants) {\n-                auto tup_ty = mk_imm_tup(cx, variant.args);\n+                // TODO: Remove this vec->ivec conversion.\n+                auto args = ~[];\n+                for (ty::t arg in variant.args) { args += ~[arg]; }\n+\n+                auto tup_ty = mk_imm_tup(cx, args);\n \n                 // Perform any type parameter substitutions.\n                 tup_ty = substitute_type_params(cx, tps, tup_ty);\n@@ -1230,8 +1243,12 @@ fn type_owns_heap_mem(&ctxt cx, &t ty) -> bool {\n             }\n         }\n         case (ty_res(_, ?inner, ?tps)) {\n-            result = type_owns_heap_mem(cx,\n-                substitute_type_params(cx, tps, inner));\n+            // FIXME: Remove this vec->ivec conversion.\n+            auto tps_ivec = ~[];\n+            for (ty::t tp in tps) { tps_ivec += ~[tp]; }\n+\n+            result = type_owns_heap_mem\n+                (cx, substitute_type_params(cx, tps_ivec, inner));\n         }\n \n         case (ty_ptr(_)) { result = false; }\n@@ -1262,7 +1279,11 @@ fn type_autoderef(&ctxt cx, &ty::t t) -> ty::t {\n         alt (struct(cx, t1)) {\n             case (ty::ty_box(?mt)) { t1 = mt.ty; }\n             case (ty::ty_res(_, ?inner, ?tps)) {\n-                t1 = substitute_type_params(cx, tps, inner);\n+                // FIXME: Remove this vec->ivec conversion.\n+                auto tps_ivec = ~[];\n+                for (ty::t tp in tps) { tps_ivec += ~[tp]; }\n+\n+                t1 = substitute_type_params(cx, tps_ivec, inner);\n             }\n             case (ty::ty_tag(?did, ?tps)) {\n                 auto variants = tag_variants(cx, did);\n@@ -1742,7 +1763,13 @@ fn ty_param_substs_opt_and_ty_to_monotype(&ctxt cx,\n    t {\n     alt (tpot._0) {\n         case (none) { ret tpot._1; }\n-        case (some(?tps)) { ret substitute_type_params(cx, tps, tpot._1); }\n+        case (some(?tps)) {\n+            // FIXME: Remove this vec->ivec conversion.\n+            auto tps_ivec = ~[];\n+            for (ty::t tp in tps) { tps_ivec += ~[tp]; }\n+\n+            ret substitute_type_params(cx, tps_ivec, tpot._1);\n+        }\n     }\n }\n \n@@ -2952,13 +2979,13 @@ fn is_binopable(&ctxt cx, t ty, ast::binop op) -> bool {\n     /*.          add,     shift,   bit\n       .             sub,     rel,     logic\n       .                mult,    eq,         */\n-    auto tbl = ~[~[f, f, f, f, t, t, f, f], /*other*/\n-                 ~[f, f, f, f, t, t, t, t], /*bool*/\n-                 ~[t, t, t, t, t, t, t, f], /*int*/\n-                 ~[t, t, t, f, t, t, f, f], /*float*/\n-                 ~[t, f, f, f, t, t, f, f], /*str*/\n-                 ~[t, f, f, f, t, t, f, f], /*vec*/\n-                 ~[f, f, f, f, t, t, f, f]];/*struct*/\n+    auto tbl = [[f, f, f, f, t, t, f, f], /*other*/\n+                [f, f, f, f, t, t, t, t], /*bool*/\n+                [t, t, t, t, t, t, t, f], /*int*/\n+                [t, t, t, f, t, t, f, f], /*float*/\n+                [t, f, f, f, t, t, f, f], /*str*/\n+                [t, f, f, f, t, t, f, f], /*vec*/\n+                [f, f, f, f, t, t, f, f]];/*struct*/\n \n     ret tbl.(tycat(cx, ty)).(opcat(op));\n }"}]}