{"sha": "b2dd1377c7b2624391d82b0eee2c988e090dd311", "node_id": "C_kwDOAAsO6NoAKGIyZGQxMzc3YzdiMjYyNDM5MWQ4MmIwZWVlMmM5ODhlMDkwZGQzMTE", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-01-18T19:26:13Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-01-18T20:37:57Z"}, "message": "Use let_else in even more places", "tree": {"sha": "41d41ba13a5ca8a95d7ab95ae362d2bb3ac23f52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41d41ba13a5ca8a95d7ab95ae362d2bb3ac23f52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2dd1377c7b2624391d82b0eee2c988e090dd311", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2dd1377c7b2624391d82b0eee2c988e090dd311", "html_url": "https://github.com/rust-lang/rust/commit/b2dd1377c7b2624391d82b0eee2c988e090dd311", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2dd1377c7b2624391d82b0eee2c988e090dd311/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ad5d82f822b3cb67637f11be2e65c5662b66ec0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ad5d82f822b3cb67637f11be2e65c5662b66ec0", "html_url": "https://github.com/rust-lang/rust/commit/9ad5d82f822b3cb67637f11be2e65c5662b66ec0"}], "stats": {"total": 268, "additions": 131, "deletions": 137}, "files": [{"sha": "c90e43a4060f7e48895be1e8cfc39c213022746b", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd1377c7b2624391d82b0eee2c988e090dd311/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd1377c7b2624391d82b0eee2c988e090dd311/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=b2dd1377c7b2624391d82b0eee2c988e090dd311", "patch": "@@ -1493,7 +1493,7 @@ fn generator_layout_and_saved_local_names<'tcx>(\n \n     let state_arg = mir::Local::new(1);\n     for var in &body.var_debug_info {\n-        let place = if let mir::VarDebugInfoContents::Place(p) = var.value { p } else { continue };\n+        let mir::VarDebugInfoContents::Place(place) = &var.value else { continue };\n         if place.local != state_arg {\n             continue;\n         }"}, {"sha": "f0612eaba8089f314aa631ec3555b7468c286424", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd1377c7b2624391d82b0eee2c988e090dd311/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd1377c7b2624391d82b0eee2c988e090dd311/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=b2dd1377c7b2624391d82b0eee2c988e090dd311", "patch": "@@ -7,6 +7,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n+#![feature(let_else)]\n #![feature(extern_types)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]"}, {"sha": "b911b108a735d3c4974b11659e1a7e09e26bc096", "filename": "compiler/rustc_interface/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd1377c7b2624391d82b0eee2c988e090dd311/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd1377c7b2624391d82b0eee2c988e090dd311/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Flib.rs?ref=b2dd1377c7b2624391d82b0eee2c988e090dd311", "patch": "@@ -1,5 +1,6 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n+#![feature(let_else)]\n #![feature(internal_output_capture)]\n #![feature(thread_spawn_unchecked)]\n #![feature(nll)]"}, {"sha": "6d9183eda9d32e9a00c6fa0fbc6773b96640a7c0", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd1377c7b2624391d82b0eee2c988e090dd311/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd1377c7b2624391d82b0eee2c988e090dd311/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=b2dd1377c7b2624391d82b0eee2c988e090dd311", "patch": "@@ -717,57 +717,57 @@ impl<'a, 'b> ReplaceBodyWithLoop<'a, 'b> {\n     }\n \n     fn should_ignore_fn(ret_ty: &ast::FnRetTy) -> bool {\n-        if let ast::FnRetTy::Ty(ref ty) = ret_ty {\n-            fn involves_impl_trait(ty: &ast::Ty) -> bool {\n-                match ty.kind {\n-                    ast::TyKind::ImplTrait(..) => true,\n-                    ast::TyKind::Slice(ref subty)\n-                    | ast::TyKind::Array(ref subty, _)\n-                    | ast::TyKind::Ptr(ast::MutTy { ty: ref subty, .. })\n-                    | ast::TyKind::Rptr(_, ast::MutTy { ty: ref subty, .. })\n-                    | ast::TyKind::Paren(ref subty) => involves_impl_trait(subty),\n-                    ast::TyKind::Tup(ref tys) => any_involves_impl_trait(tys.iter()),\n-                    ast::TyKind::Path(_, ref path) => {\n-                        path.segments.iter().any(|seg| match seg.args.as_deref() {\n-                            None => false,\n-                            Some(&ast::GenericArgs::AngleBracketed(ref data)) => {\n-                                data.args.iter().any(|arg| match arg {\n-                                    ast::AngleBracketedArg::Arg(arg) => match arg {\n-                                        ast::GenericArg::Type(ty) => involves_impl_trait(ty),\n-                                        ast::GenericArg::Lifetime(_)\n-                                        | ast::GenericArg::Const(_) => false,\n-                                    },\n-                                    ast::AngleBracketedArg::Constraint(c) => match c.kind {\n-                                        ast::AssocConstraintKind::Bound { .. } => true,\n-                                        ast::AssocConstraintKind::Equality { ref term } => {\n-                                            match term {\n-                                                Term::Ty(ty) => involves_impl_trait(ty),\n-                                                // FIXME(...): This should check if the constant\n-                                                // involves a trait impl, but for now ignore.\n-                                                Term::Const(_) => false,\n-                                            }\n+        let ast::FnRetTy::Ty(ref ty) = ret_ty else {\n+            return false;\n+        };\n+        fn involves_impl_trait(ty: &ast::Ty) -> bool {\n+            match ty.kind {\n+                ast::TyKind::ImplTrait(..) => true,\n+                ast::TyKind::Slice(ref subty)\n+                | ast::TyKind::Array(ref subty, _)\n+                | ast::TyKind::Ptr(ast::MutTy { ty: ref subty, .. })\n+                | ast::TyKind::Rptr(_, ast::MutTy { ty: ref subty, .. })\n+                | ast::TyKind::Paren(ref subty) => involves_impl_trait(subty),\n+                ast::TyKind::Tup(ref tys) => any_involves_impl_trait(tys.iter()),\n+                ast::TyKind::Path(_, ref path) => {\n+                    path.segments.iter().any(|seg| match seg.args.as_deref() {\n+                        None => false,\n+                        Some(&ast::GenericArgs::AngleBracketed(ref data)) => {\n+                            data.args.iter().any(|arg| match arg {\n+                                ast::AngleBracketedArg::Arg(arg) => match arg {\n+                                    ast::GenericArg::Type(ty) => involves_impl_trait(ty),\n+                                    ast::GenericArg::Lifetime(_) | ast::GenericArg::Const(_) => {\n+                                        false\n+                                    }\n+                                },\n+                                ast::AngleBracketedArg::Constraint(c) => match c.kind {\n+                                    ast::AssocConstraintKind::Bound { .. } => true,\n+                                    ast::AssocConstraintKind::Equality { ref term } => {\n+                                        match term {\n+                                            Term::Ty(ty) => involves_impl_trait(ty),\n+                                            // FIXME(...): This should check if the constant\n+                                            // involves a trait impl, but for now ignore.\n+                                            Term::Const(_) => false,\n                                         }\n-                                    },\n-                                })\n-                            }\n-                            Some(&ast::GenericArgs::Parenthesized(ref data)) => {\n-                                any_involves_impl_trait(data.inputs.iter())\n-                                    || ReplaceBodyWithLoop::should_ignore_fn(&data.output)\n-                            }\n-                        })\n-                    }\n-                    _ => false,\n+                                    }\n+                                },\n+                            })\n+                        }\n+                        Some(&ast::GenericArgs::Parenthesized(ref data)) => {\n+                            any_involves_impl_trait(data.inputs.iter())\n+                                || ReplaceBodyWithLoop::should_ignore_fn(&data.output)\n+                        }\n+                    })\n                 }\n+                _ => false,\n             }\n+        }\n \n-            fn any_involves_impl_trait<'a, I: Iterator<Item = &'a P<ast::Ty>>>(mut it: I) -> bool {\n-                it.any(|subty| involves_impl_trait(subty))\n-            }\n-\n-            involves_impl_trait(ty)\n-        } else {\n-            false\n+        fn any_involves_impl_trait<'a, I: Iterator<Item = &'a P<ast::Ty>>>(mut it: I) -> bool {\n+            it.any(|subty| involves_impl_trait(subty))\n         }\n+\n+        involves_impl_trait(ty)\n     }\n \n     fn is_sig_const(sig: &ast::FnSig) -> bool {"}, {"sha": "e0b79ae4742c39f9be6bd6850b8eb8eac106f02d", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd1377c7b2624391d82b0eee2c988e090dd311/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd1377c7b2624391d82b0eee2c988e090dd311/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=b2dd1377c7b2624391d82b0eee2c988e090dd311", "patch": "@@ -1328,23 +1328,22 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n         let mut otherwise = None;\n         for match_pair in match_pairs {\n-            if let PatKind::Or { ref pats } = *match_pair.pattern.kind {\n-                let or_span = match_pair.pattern.span;\n-                let place = match_pair.place;\n-\n-                first_candidate.visit_leaves(|leaf_candidate| {\n-                    self.test_or_pattern(\n-                        leaf_candidate,\n-                        &mut otherwise,\n-                        pats,\n-                        or_span,\n-                        place.clone(),\n-                        fake_borrows,\n-                    );\n-                });\n-            } else {\n+            let PatKind::Or { ref pats } = &*match_pair.pattern.kind else {\n                 bug!(\"Or-patterns should have been sorted to the end\");\n-            }\n+            };\n+            let or_span = match_pair.pattern.span;\n+            let place = match_pair.place;\n+\n+            first_candidate.visit_leaves(|leaf_candidate| {\n+                self.test_or_pattern(\n+                    leaf_candidate,\n+                    &mut otherwise,\n+                    pats,\n+                    or_span,\n+                    place.clone(),\n+                    fake_borrows,\n+                );\n+            });\n         }\n \n         let remainder_start = otherwise.unwrap_or_else(|| self.cfg.start_new_block());"}, {"sha": "f4bf28bfa5ce294b2202608148810f263776c0ba", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd1377c7b2624391d82b0eee2c988e090dd311/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd1377c7b2624391d82b0eee2c988e090dd311/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=b2dd1377c7b2624391d82b0eee2c988e090dd311", "patch": "@@ -88,11 +88,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         switch_ty: Ty<'tcx>,\n         options: &mut FxIndexMap<&'tcx ty::Const<'tcx>, u128>,\n     ) -> bool {\n-        let match_pair = match candidate.match_pairs.iter().find(|mp| mp.place == *test_place) {\n-            Some(match_pair) => match_pair,\n-            _ => {\n-                return false;\n-            }\n+        let Some(match_pair) = candidate.match_pairs.iter().find(|mp| mp.place == *test_place) else {\n+            return false;\n         };\n \n         match *match_pair.pattern.kind {"}, {"sha": "5988d0664586cab6ca5f17c43bc265c132edfa1d", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd1377c7b2624391d82b0eee2c988e090dd311/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd1377c7b2624391d82b0eee2c988e090dd311/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=b2dd1377c7b2624391d82b0eee2c988e090dd311", "patch": "@@ -1162,9 +1162,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         ident: Symbol,\n         kind: &AssocItemKind,\n     ) -> Option<Symbol> {\n-        let module = if let Some((module, _)) = self.current_trait_ref {\n-            module\n-        } else {\n+        let Some((module, _)) = &self.current_trait_ref else {\n             return None;\n         };\n         if ident == kw::Underscore {"}, {"sha": "4c7bdb33fb87abbb9453f496758fef367fc3582c", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 37, "deletions": 38, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd1377c7b2624391d82b0eee2c988e090dd311/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd1377c7b2624391d82b0eee2c988e090dd311/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=b2dd1377c7b2624391d82b0eee2c988e090dd311", "patch": "@@ -1000,46 +1000,45 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 // `fn foo<'a>() -> MyAnonTy<'a> { ... }`\n                 //          ^                 ^this gets resolved in the current scope\n                 for lifetime in lifetimes {\n-                    if let hir::GenericArg::Lifetime(lifetime) = lifetime {\n-                        self.visit_lifetime(lifetime);\n+                    let hir::GenericArg::Lifetime(lifetime) = lifetime else {\n+                        continue\n+                    };\n+                    self.visit_lifetime(lifetime);\n+\n+                    // Check for predicates like `impl for<'a> Trait<impl OtherTrait<'a>>`\n+                    // and ban them. Type variables instantiated inside binders aren't\n+                    // well-supported at the moment, so this doesn't work.\n+                    // In the future, this should be fixed and this error should be removed.\n+                    let def = self.map.defs.get(&lifetime.hir_id).cloned();\n+                    let Some(Region::LateBound(_, _, def_id, _)) = def else {\n+                        continue\n+                    };\n+                    let Some(def_id) = def_id.as_local() else {\n+                        continue\n+                    };\n+                    let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n+                    // Ensure that the parent of the def is an item, not HRTB\n+                    let parent_id = self.tcx.hir().get_parent_node(hir_id);\n+                    // FIXME(cjgillot) Can this check be replaced by\n+                    // `let parent_is_item = parent_id.is_owner();`?\n+                    let parent_is_item = if let Some(parent_def_id) = parent_id.as_owner() {\n+                        matches!(self.tcx.hir().krate().owners.get(parent_def_id), Some(Some(_)),)\n+                    } else {\n+                        false\n+                    };\n \n-                        // Check for predicates like `impl for<'a> Trait<impl OtherTrait<'a>>`\n-                        // and ban them. Type variables instantiated inside binders aren't\n-                        // well-supported at the moment, so this doesn't work.\n-                        // In the future, this should be fixed and this error should be removed.\n-                        let def = self.map.defs.get(&lifetime.hir_id).cloned();\n-                        if let Some(Region::LateBound(_, _, def_id, _)) = def {\n-                            if let Some(def_id) = def_id.as_local() {\n-                                let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n-                                // Ensure that the parent of the def is an item, not HRTB\n-                                let parent_id = self.tcx.hir().get_parent_node(hir_id);\n-                                // FIXME(cjgillot) Can this check be replaced by\n-                                // `let parent_is_item = parent_id.is_owner();`?\n-                                let parent_is_item =\n-                                    if let Some(parent_def_id) = parent_id.as_owner() {\n-                                        matches!(\n-                                            self.tcx.hir().krate().owners.get(parent_def_id),\n-                                            Some(Some(_)),\n-                                        )\n-                                    } else {\n-                                        false\n-                                    };\n-\n-                                if !parent_is_item {\n-                                    if !self.trait_definition_only {\n-                                        struct_span_err!(\n-                                            self.tcx.sess,\n-                                            lifetime.span,\n-                                            E0657,\n-                                            \"`impl Trait` can only capture lifetimes \\\n-                                                bound at the fn or impl level\"\n-                                        )\n-                                        .emit();\n-                                    }\n-                                    self.uninsert_lifetime_on_error(lifetime, def.unwrap());\n-                                }\n-                            }\n+                    if !parent_is_item {\n+                        if !self.trait_definition_only {\n+                            struct_span_err!(\n+                                self.tcx.sess,\n+                                lifetime.span,\n+                                E0657,\n+                                \"`impl Trait` can only capture lifetimes \\\n+                                    bound at the fn or impl level\"\n+                            )\n+                            .emit();\n                         }\n+                        self.uninsert_lifetime_on_error(lifetime, def.unwrap());\n                     }\n                 }\n "}, {"sha": "f64c56487f24cb2209aeccca0db4355f3106163c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd1377c7b2624391d82b0eee2c988e090dd311/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd1377c7b2624391d82b0eee2c988e090dd311/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=b2dd1377c7b2624391d82b0eee2c988e090dd311", "patch": "@@ -840,39 +840,38 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             };\n \n             for refs_remaining in 0..refs_number {\n-                if let ty::Ref(_, inner_ty, _) = suggested_ty.kind() {\n-                    suggested_ty = inner_ty;\n+                let ty::Ref(_, inner_ty, _) = suggested_ty.kind() else {\n+                    break;\n+                };\n+                suggested_ty = inner_ty;\n \n-                    let new_obligation = self.mk_trait_obligation_with_new_self_ty(\n-                        obligation.param_env,\n-                        trait_ref,\n-                        suggested_ty,\n-                    );\n+                let new_obligation = self.mk_trait_obligation_with_new_self_ty(\n+                    obligation.param_env,\n+                    trait_ref,\n+                    suggested_ty,\n+                );\n \n-                    if self.predicate_may_hold(&new_obligation) {\n-                        let sp = self\n-                            .tcx\n-                            .sess\n-                            .source_map()\n-                            .span_take_while(span, |c| c.is_whitespace() || *c == '&');\n+                if self.predicate_may_hold(&new_obligation) {\n+                    let sp = self\n+                        .tcx\n+                        .sess\n+                        .source_map()\n+                        .span_take_while(span, |c| c.is_whitespace() || *c == '&');\n \n-                        let remove_refs = refs_remaining + 1;\n+                    let remove_refs = refs_remaining + 1;\n \n-                        let msg = if remove_refs == 1 {\n-                            \"consider removing the leading `&`-reference\".to_string()\n-                        } else {\n-                            format!(\"consider removing {} leading `&`-references\", remove_refs)\n-                        };\n+                    let msg = if remove_refs == 1 {\n+                        \"consider removing the leading `&`-reference\".to_string()\n+                    } else {\n+                        format!(\"consider removing {} leading `&`-references\", remove_refs)\n+                    };\n \n-                        err.span_suggestion_short(\n-                            sp,\n-                            &msg,\n-                            String::new(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                        break;\n-                    }\n-                } else {\n+                    err.span_suggestion_short(\n+                        sp,\n+                        &msg,\n+                        String::new(),\n+                        Applicability::MachineApplicable,\n+                    );\n                     break;\n                 }\n             }"}]}