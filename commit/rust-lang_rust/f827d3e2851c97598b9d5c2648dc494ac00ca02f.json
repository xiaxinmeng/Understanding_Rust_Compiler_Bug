{"sha": "f827d3e2851c97598b9d5c2648dc494ac00ca02f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MjdkM2UyODUxYzk3NTk4YjlkNWMyNjQ4ZGM0OTRhYzAwY2EwMmY=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-07-06T12:38:26Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-07-28T14:10:41Z"}, "message": "Make const panic!(\"..\") work in Rust 2021.\n\nDuring const eval, this replaces calls to core::panicking::panic_fmt and\nstd::panicking::being_panic_fmt with a call to a new const fn:\ncore::panicking::const_panic_fmt. That function uses\nfmt::Arguments::as_str() to get the str and calls panic_str with that\ninstead.\n\npanic!() invocations with formatting arguments are still not accepted,\nas the creation of such a fmt::Arguments cannot be done in constant\nfunctions right now.", "tree": {"sha": "b8e143ec231b79838d0e157fb342b26823f9b9c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8e143ec231b79838d0e157fb342b26823f9b9c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f827d3e2851c97598b9d5c2648dc494ac00ca02f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f827d3e2851c97598b9d5c2648dc494ac00ca02f", "html_url": "https://github.com/rust-lang/rust/commit/f827d3e2851c97598b9d5c2648dc494ac00ca02f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f827d3e2851c97598b9d5c2648dc494ac00ca02f/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eba3228b2a9875d268ff3990903d04e19f6cdb0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/eba3228b2a9875d268ff3990903d04e19f6cdb0c", "html_url": "https://github.com/rust-lang/rust/commit/eba3228b2a9875d268ff3990903d04e19f6cdb0c"}], "stats": {"total": 64, "additions": 53, "deletions": 11}, "files": [{"sha": "55000ae7e59d4d7b1e7b57b0c912488e7b72a316", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f827d3e2851c97598b9d5c2648dc494ac00ca02f/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f827d3e2851c97598b9d5c2648dc494ac00ca02f/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=f827d3e2851c97598b9d5c2648dc494ac00ca02f", "patch": "@@ -276,13 +276,16 @@ language_item_table! {\n     // is required to define it somewhere. Additionally, there are restrictions on crates that use\n     // a weak lang item, but do not have it defined.\n     Panic,                   sym::panic,               panic_fn,                   Target::Fn;\n+    PanicFmt,                sym::panic_fmt,           panic_fmt,                  Target::Fn;\n     PanicStr,                sym::panic_str,           panic_str,                  Target::Fn;\n+    ConstPanicFmt,           sym::const_panic_fmt,     const_panic_fmt,            Target::Fn;\n     PanicBoundsCheck,        sym::panic_bounds_check,  panic_bounds_check_fn,      Target::Fn;\n     PanicInfo,               sym::panic_info,          panic_info,                 Target::Struct;\n     PanicLocation,           sym::panic_location,      panic_location,             Target::Struct;\n     PanicImpl,               sym::panic_impl,          panic_impl,                 Target::Fn;\n     /// libstd panic entry point. Necessary for const eval to be able to catch it\n     BeginPanic,              sym::begin_panic,         begin_panic_fn,             Target::Fn;\n+    BeginPanicFmt,           sym::begin_panic_fmt,     begin_panic_fmt,            Target::Fn;\n \n     ExchangeMalloc,          sym::exchange_malloc,     exchange_malloc_fn,         Target::Fn;\n     BoxFree,                 sym::box_free,            box_free_fn,                Target::Fn;"}, {"sha": "40621f6d4bea6062ea7c04e7b4cad0aace26edf4", "filename": "compiler/rustc_mir/src/const_eval/machine.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f827d3e2851c97598b9d5c2648dc494ac00ca02f/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f827d3e2851c97598b9d5c2648dc494ac00ca02f/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=f827d3e2851c97598b9d5c2648dc494ac00ca02f", "patch": "@@ -30,7 +30,7 @@ impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>> {\n         &mut self,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx>],\n-    ) -> InterpResult<'tcx> {\n+    ) -> InterpResult<'tcx, Option<ty::Instance<'tcx>>> {\n         let def_id = instance.def_id();\n         if Some(def_id) == self.tcx.lang_items().panic_fn()\n             || Some(def_id) == self.tcx.lang_items().panic_str()\n@@ -43,10 +43,25 @@ impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>> {\n             let msg = Symbol::intern(self.read_str(&msg_place)?);\n             let span = self.find_closest_untracked_caller_location();\n             let (file, line, col) = self.location_triple_for_span(span);\n-            Err(ConstEvalErrKind::Panic { msg, file, line, col }.into())\n-        } else {\n-            Ok(())\n+            return Err(ConstEvalErrKind::Panic { msg, file, line, col }.into());\n+        } else if Some(def_id) == self.tcx.lang_items().panic_fmt()\n+            || Some(def_id) == self.tcx.lang_items().begin_panic_fmt()\n+        {\n+            // For panic_fmt, call const_panic_fmt instead.\n+            if let Some(const_panic_fmt) = self.tcx.lang_items().const_panic_fmt() {\n+                return Ok(Some(\n+                    ty::Instance::resolve(\n+                        *self.tcx,\n+                        ty::ParamEnv::reveal_all(),\n+                        const_panic_fmt,\n+                        self.tcx.intern_substs(&[]),\n+                    )\n+                    .unwrap()\n+                    .unwrap(),\n+                ));\n+            }\n         }\n+        Ok(None)\n     }\n }\n \n@@ -223,7 +238,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n \n     fn find_mir_or_eval_fn(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        instance: ty::Instance<'tcx>,\n+        mut instance: ty::Instance<'tcx>,\n         _abi: Abi,\n         args: &[OpTy<'tcx>],\n         _ret: Option<(&PlaceTy<'tcx>, mir::BasicBlock)>,\n@@ -241,10 +256,14 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                 if !ecx.tcx.has_attr(def.did, sym::default_method_body_is_const) {\n                     // Some functions we support even if they are non-const -- but avoid testing\n                     // that for const fn!\n-                    ecx.hook_panic_fn(instance, args)?;\n-                    // We certainly do *not* want to actually call the fn\n-                    // though, so be sure we return here.\n-                    throw_unsup_format!(\"calling non-const function `{}`\", instance)\n+                    if let Some(new_instance) = ecx.hook_panic_fn(instance, args)? {\n+                        // We call another const fn instead.\n+                        instance = new_instance;\n+                    } else {\n+                        // We certainly do *not* want to actually call the fn\n+                        // though, so be sure we return here.\n+                        throw_unsup_format!(\"calling non-const function `{}`\", instance)\n+                    }\n                 }\n             }\n         }"}, {"sha": "ba8189cf9a8fcb0e448c457e9858667beeeb885d", "filename": "compiler/rustc_mir/src/transform/check_consts/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f827d3e2851c97598b9d5c2648dc494ac00ca02f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f827d3e2851c97598b9d5c2648dc494ac00ca02f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=f827d3e2851c97598b9d5c2648dc494ac00ca02f", "patch": "@@ -77,6 +77,8 @@ pub fn is_lang_panic_fn(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n     Some(def_id) == tcx.lang_items().panic_fn()\n         || Some(def_id) == tcx.lang_items().panic_str()\n         || Some(def_id) == tcx.lang_items().begin_panic_fn()\n+        || Some(def_id) == tcx.lang_items().panic_fmt()\n+        || Some(def_id) == tcx.lang_items().begin_panic_fmt()\n }\n \n pub fn rustc_allow_const_fn_unstable("}, {"sha": "3b17d4ca3d23747362cb8edcd2375e745cd62228", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f827d3e2851c97598b9d5c2648dc494ac00ca02f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f827d3e2851c97598b9d5c2648dc494ac00ca02f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=f827d3e2851c97598b9d5c2648dc494ac00ca02f", "patch": "@@ -323,6 +323,7 @@ symbols! {\n         await_macro,\n         bang,\n         begin_panic,\n+        begin_panic_fmt,\n         bench,\n         bin,\n         bind_by_move_pattern_guards,\n@@ -420,6 +421,7 @@ symbols! {\n         const_loop,\n         const_mut_refs,\n         const_panic,\n+        const_panic_fmt,\n         const_precise_live_drops,\n         const_ptr,\n         const_raw_ptr_deref,\n@@ -586,6 +588,7 @@ symbols! {\n         fmaf32,\n         fmaf64,\n         fmt,\n+        fmt_as_str,\n         fmt_internals,\n         fmul_fast,\n         fn_align,\n@@ -881,6 +884,7 @@ symbols! {\n         panic_2021,\n         panic_abort,\n         panic_bounds_check,\n+        panic_fmt,\n         panic_handler,\n         panic_impl,\n         panic_implementation,"}, {"sha": "2494d60002089030feb02de1c1da48f1e22d5ca7", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f827d3e2851c97598b9d5c2648dc494ac00ca02f/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f827d3e2851c97598b9d5c2648dc494ac00ca02f/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=f827d3e2851c97598b9d5c2648dc494ac00ca02f", "patch": "@@ -337,7 +337,7 @@ impl<'a> Arguments<'a> {\n     #[doc(hidden)]\n     #[inline]\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n-    pub fn new_v1(pieces: &'a [&'static str], args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {\n+    pub const fn new_v1(pieces: &'a [&'static str], args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {\n         Arguments { pieces, fmt: None, args }\n     }\n \n@@ -350,7 +350,7 @@ impl<'a> Arguments<'a> {\n     #[doc(hidden)]\n     #[inline]\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n-    pub fn new_v1_formatted(\n+    pub const fn new_v1_formatted(\n         pieces: &'a [&'static str],\n         args: &'a [ArgumentV1<'a>],\n         fmt: &'a [rt::v1::Argument],"}, {"sha": "d3e66a854c9b57cea2598afc7bcf02eb7c9e0b86", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f827d3e2851c97598b9d5c2648dc494ac00ca02f/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f827d3e2851c97598b9d5c2648dc494ac00ca02f/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=f827d3e2851c97598b9d5c2648dc494ac00ca02f", "patch": "@@ -73,6 +73,7 @@\n #![feature(cfg_target_has_atomic)]\n #![feature(const_heap)]\n #![feature(const_alloc_layout)]\n+#![feature(const_arguments_as_str)]\n #![feature(const_assert_type)]\n #![feature(const_discriminant)]\n #![feature(const_cell_into_inner)]"}, {"sha": "03398869466c9c8303142996415b08d81464951d", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f827d3e2851c97598b9d5c2648dc494ac00ca02f/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f827d3e2851c97598b9d5c2648dc494ac00ca02f/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=f827d3e2851c97598b9d5c2648dc494ac00ca02f", "patch": "@@ -74,6 +74,7 @@ fn panic_bounds_check(index: usize, len: usize) -> ! {\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[track_caller]\n+#[cfg_attr(not(bootstrap), lang = \"panic_fmt\")] // needed for const-evaluated panics\n pub fn panic_fmt(fmt: fmt::Arguments<'_>) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n         super::intrinsics::abort()\n@@ -92,6 +93,17 @@ pub fn panic_fmt(fmt: fmt::Arguments<'_>) -> ! {\n     unsafe { panic_impl(&pi) }\n }\n \n+/// This function is used instead of panic_fmt in const eval.\n+#[cfg(not(bootstrap))]\n+#[lang = \"const_panic_fmt\"]\n+pub const fn const_panic_fmt(fmt: fmt::Arguments<'_>) -> ! {\n+    if let Some(msg) = fmt.as_str() {\n+        panic_str(msg);\n+    } else {\n+        panic_str(\"???\");\n+    }\n+}\n+\n #[derive(Debug)]\n #[doc(hidden)]\n pub enum AssertKind {"}, {"sha": "5f43393e585835d8d69299ce382d0d3e2ad4196e", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f827d3e2851c97598b9d5c2648dc494ac00ca02f/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f827d3e2851c97598b9d5c2648dc494ac00ca02f/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=f827d3e2851c97598b9d5c2648dc494ac00ca02f", "patch": "@@ -448,6 +448,7 @@ pub fn panicking() -> bool {\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), track_caller)]\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n+#[cfg_attr(all(not(bootstrap), not(test)), lang = \"begin_panic_fmt\")]\n pub fn begin_panic_fmt(msg: &fmt::Arguments<'_>) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n         intrinsics::abort()"}]}