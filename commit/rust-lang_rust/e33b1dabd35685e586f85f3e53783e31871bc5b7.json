{"sha": "e33b1dabd35685e586f85f3e53783e31871bc5b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzM2IxZGFiZDM1Njg1ZTU4NmY4NWYzZTUzNzgzZTMxODcxYmM1Yjc=", "commit": {"author": {"name": "Edward Z. Yang", "email": "ezyang@cs.stanford.edu", "date": "2013-12-10T06:14:43Z"}, "committer": {"name": "Adrien T\u00e9tar", "email": "adri-from-59@hotmail.fr", "date": "2014-01-17T18:44:51Z"}, "message": "Elaborate manual on matching (dereference patterns, lvalue/rvalue matching)\n\nSigned-off-by: Edward Z. Yang <ezyang@cs.stanford.edu>", "tree": {"sha": "6ff11f750ff264c54cc8c25f3cf04d1909bd9e85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ff11f750ff264c54cc8c25f3cf04d1909bd9e85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e33b1dabd35685e586f85f3e53783e31871bc5b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e33b1dabd35685e586f85f3e53783e31871bc5b7", "html_url": "https://github.com/rust-lang/rust/commit/e33b1dabd35685e586f85f3e53783e31871bc5b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e33b1dabd35685e586f85f3e53783e31871bc5b7/comments", "author": {"login": "ezyang", "id": 13564, "node_id": "MDQ6VXNlcjEzNTY0", "avatar_url": "https://avatars.githubusercontent.com/u/13564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ezyang", "html_url": "https://github.com/ezyang", "followers_url": "https://api.github.com/users/ezyang/followers", "following_url": "https://api.github.com/users/ezyang/following{/other_user}", "gists_url": "https://api.github.com/users/ezyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/ezyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ezyang/subscriptions", "organizations_url": "https://api.github.com/users/ezyang/orgs", "repos_url": "https://api.github.com/users/ezyang/repos", "events_url": "https://api.github.com/users/ezyang/events{/privacy}", "received_events_url": "https://api.github.com/users/ezyang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "adrientetar", "id": 1250894, "node_id": "MDQ6VXNlcjEyNTA4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1250894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adrientetar", "html_url": "https://github.com/adrientetar", "followers_url": "https://api.github.com/users/adrientetar/followers", "following_url": "https://api.github.com/users/adrientetar/following{/other_user}", "gists_url": "https://api.github.com/users/adrientetar/gists{/gist_id}", "starred_url": "https://api.github.com/users/adrientetar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adrientetar/subscriptions", "organizations_url": "https://api.github.com/users/adrientetar/orgs", "repos_url": "https://api.github.com/users/adrientetar/repos", "events_url": "https://api.github.com/users/adrientetar/events{/privacy}", "received_events_url": "https://api.github.com/users/adrientetar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2cac497e8989fb6d26c1f20441e8354950bbcc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2cac497e8989fb6d26c1f20441e8354950bbcc3", "html_url": "https://github.com/rust-lang/rust/commit/b2cac497e8989fb6d26c1f20441e8354950bbcc3"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "f955cbda9b83afefc93991a4a5fddbfa1657f181", "filename": "doc/rust.md", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e33b1dabd35685e586f85f3e53783e31871bc5b7/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/e33b1dabd35685e586f85f3e53783e31871bc5b7/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=e33b1dabd35685e586f85f3e53783e31871bc5b7", "patch": "@@ -2893,12 +2893,21 @@ tail value of `~Nil`. The second pattern matches _any_ list constructed with `Co\n ignoring the values of its arguments. The difference between `_` and `*` is that the pattern `C(_)` is only type-correct if\n `C` has exactly one argument, while the pattern `C(..)` is type-correct for any enum variant `C`, regardless of how many arguments `C` has.\n \n-To execute an `match` expression, first the head expression is evaluated, then\n-its value is sequentially compared to the patterns in the arms until a match\n+A `match` behaves differently depending on whether or not the head expression\n+is an [lvalue or an rvalue](#lvalues-rvalues-and-temporaries).\n+If the head expression is an rvalue, it is\n+first evaluated into a temporary location, and the resulting value\n+is sequentially compared to the patterns in the arms until a match\n is found. The first arm with a matching pattern is chosen as the branch target\n of the `match`, any variables bound by the pattern are assigned to local\n variables in the arm's block, and control enters the block.\n \n+When the head expression is an lvalue, the match does not allocate a\n+temporary location (however, a by-value binding may copy or move from\n+the lvalue).  When possible, it is preferable to match on lvalues, as the\n+lifetime of these matches inherits the lifetime of the lvalue, rather\n+than being restricted to the inside of the match.\n+\n An example of an `match` expression:\n \n ~~~~\n@@ -2932,6 +2941,15 @@ This can be changed to bind to a reference by\n using the ```ref``` keyword,\n or to a mutable reference using ```ref mut```.\n \n+Patterns can also dereference pointers by using the ``&``,\n+``~`` or ``@`` symbols, as appropriate.  For example, these two matches\n+on ``x: &int`` are equivalent:\n+\n+~~~~\n+match *x { 0 => \"zero\", _ => \"some\" }\n+match x { &0 => \"zero\", _ => \"some\" }\n+~~~~\n+\n A pattern that's just an identifier,\n like `Nil` in the previous answer,\n could either refer to an enum variant that's in scope,"}]}