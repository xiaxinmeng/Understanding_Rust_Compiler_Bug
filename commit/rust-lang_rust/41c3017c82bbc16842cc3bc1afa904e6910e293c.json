{"sha": "41c3017c82bbc16842cc3bc1afa904e6910e293c", "node_id": "C_kwDOAAsO6NoAKDQxYzMwMTdjODJiYmMxNjg0MmNjM2JjMWFmYTkwNGU2OTEwZTI5M2M", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-19T12:36:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-19T12:36:56Z"}, "message": "Auto merge of #92099 - matthiaskrgr:rollup-4gwv67m, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #91141 (Revert \"Temporarily rename int_roundings functions to avoid conflicts\")\n - #91984 (Remove `in_band_lifetimes` from `rustc_middle`)\n - #92028 (Sync portable-simd to fix libcore build for AVX-512 enabled targets)\n - #92042 (Enable `#[thread_local]` for all windows-msvc targets)\n - #92071 (Update example code for Vec::splice to change the length)\n - #92077 (rustdoc: Remove unused `collapsed` field)\n - #92081 (rustdoc: Remove unnecessary `need_backline` function)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "67f3463ab2db945a7600cb08431e6078110a8c37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67f3463ab2db945a7600cb08431e6078110a8c37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41c3017c82bbc16842cc3bc1afa904e6910e293c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41c3017c82bbc16842cc3bc1afa904e6910e293c", "html_url": "https://github.com/rust-lang/rust/commit/41c3017c82bbc16842cc3bc1afa904e6910e293c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41c3017c82bbc16842cc3bc1afa904e6910e293c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "html_url": "https://github.com/rust-lang/rust/commit/a41a6925badac7508d7a72cc1fc20f43dc6ad75e"}, {"sha": "33406668125875e84d443387aad53b4d6e7d34fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/33406668125875e84d443387aad53b4d6e7d34fb", "html_url": "https://github.com/rust-lang/rust/commit/33406668125875e84d443387aad53b4d6e7d34fb"}], "stats": {"total": 505, "additions": 228, "deletions": 277}, "files": [{"sha": "bc8213a18eaccd3fbd1e2f9b3a94e5fb87105117", "filename": "compiler/rustc_macros/src/type_foldable.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -1,10 +1,15 @@\n use quote::quote;\n+use syn::parse_quote;\n \n pub fn type_foldable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::TokenStream {\n     if let syn::Data::Union(_) = s.ast().data {\n         panic!(\"cannot derive on union\")\n     }\n \n+    if !s.ast().generics.lifetimes().any(|lt| lt.lifetime.ident == \"tcx\") {\n+        s.add_impl_generic(parse_quote! { 'tcx });\n+    }\n+\n     s.add_bounds(synstructure::AddBounds::Generics);\n     let body_visit = s.each(|bind| {\n         quote! {"}, {"sha": "5c7cdbe4c2bdb3ce93d1b1242cab705721272d80", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -201,7 +201,7 @@ crate fn make_compile_codegen_unit(tcx: TyCtxt<'_>, name: Symbol) -> DepNode {\n \n // WARNING: `construct` is generic and does not know that `CompileMonoItem` takes `MonoItem`s as keys.\n // Be very careful changing this type signature!\n-crate fn make_compile_mono_item(tcx: TyCtxt<'tcx>, mono_item: &MonoItem<'tcx>) -> DepNode {\n+crate fn make_compile_mono_item<'tcx>(tcx: TyCtxt<'tcx>, mono_item: &MonoItem<'tcx>) -> DepNode {\n     DepNode::construct(tcx, DepKind::CompileMonoItem, mono_item)\n }\n \n@@ -264,7 +264,7 @@ impl DepNodeExt for DepNode {\n     /// DepNode. Condition (2) might not be fulfilled if a DepNode\n     /// refers to something from the previous compilation session that\n     /// has been removed.\n-    fn extract_def_id(&self, tcx: TyCtxt<'tcx>) -> Option<DefId> {\n+    fn extract_def_id<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Option<DefId> {\n         if self.kind.fingerprint_style(tcx) == FingerprintStyle::DefPathHash {\n             Some(tcx.def_path_hash_to_def_id(DefPathHash(self.hash.into())))\n         } else {"}, {"sha": "605fff671db06dfca12e5f931d0f9b69a11c3aa4", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -75,7 +75,7 @@ pub struct OriginalQueryValues<'tcx> {\n     pub var_values: SmallVec<[GenericArg<'tcx>; 8]>,\n }\n \n-impl Default for OriginalQueryValues<'tcx> {\n+impl<'tcx> Default for OriginalQueryValues<'tcx> {\n     fn default() -> Self {\n         let mut universe_map = SmallVec::default();\n         universe_map.push(ty::UniverseIndex::ROOT);"}, {"sha": "dcc49a5357248f6844e2c1f85ba45d09395ab2e7", "filename": "compiler/rustc_middle/src/infer/unify_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -164,7 +164,7 @@ impl<'tcx> UnifyValue for ConstVarValue<'tcx> {\n \n impl<'tcx> EqUnifyValue for &'tcx ty::Const<'tcx> {}\n \n-pub fn replace_if_possible<V, L>(\n+pub fn replace_if_possible<'tcx, V, L>(\n     table: &mut UnificationTable<InPlace<ty::ConstVid<'tcx>, V, L>>,\n     c: &'tcx ty::Const<'tcx>,\n ) -> &'tcx ty::Const<'tcx>"}, {"sha": "e6dd4e484cc9ce7ff7d28fb58f00948eb747ec8d", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -44,7 +44,6 @@\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(trusted_len)]\n-#![feature(in_band_lifetimes)]\n #![feature(crate_visibility_modifier)]\n #![feature(associated_type_bounds)]\n #![feature(rustc_attrs)]"}, {"sha": "eef10356ed25e2fa3dcc367fb5dd211a24e03f91", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -212,7 +212,7 @@ pub fn struct_lint_level<'s, 'd>(\n ) {\n     // Avoid codegen bloat from monomorphization by immediately doing dyn dispatch of `decorate` to\n     // the \"real\" work.\n-    fn struct_lint_level_impl(\n+    fn struct_lint_level_impl<'s, 'd>(\n         sess: &'s Session,\n         lint: &'static Lint,\n         level: Level,"}, {"sha": "175d31d69d91629b7b168b5bb33ca53d31a095ec", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -228,7 +228,7 @@ pub fn deprecation_message_and_lint(\n     )\n }\n \n-pub fn early_report_deprecation(\n+pub fn early_report_deprecation<'a>(\n     lint_buffer: &'a mut LintBuffer,\n     message: &str,\n     suggestion: Option<Symbol>,"}, {"sha": "37ec2006172b699a9dd5ead7141c2677bb119c67", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -63,7 +63,7 @@ impl fmt::Display for InterpErrorInfo<'_> {\n     }\n }\n \n-impl InterpErrorInfo<'tcx> {\n+impl<'tcx> InterpErrorInfo<'tcx> {\n     pub fn print_backtrace(&self) {\n         if let Some(backtrace) = self.0.backtrace.as_ref() {\n             print_backtrace(backtrace);"}, {"sha": "b762a10da847a529197825a80c4465d343a4ff55", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -145,7 +145,7 @@ pub struct GlobalId<'tcx> {\n     pub promoted: Option<mir::Promoted>,\n }\n \n-impl GlobalId<'tcx> {\n+impl<'tcx> GlobalId<'tcx> {\n     pub fn display(self, tcx: TyCtxt<'tcx>) -> String {\n         let instance_name = with_no_trimmed_paths(|| tcx.def_path_str(self.instance.def.def_id()));\n         if let Some(promoted) = self.promoted {\n@@ -273,7 +273,7 @@ pub struct AllocDecodingSession<'s> {\n \n impl<'s> AllocDecodingSession<'s> {\n     /// Decodes an `AllocId` in a thread-safe way.\n-    pub fn decode_alloc_id<D>(&self, decoder: &mut D) -> Result<AllocId, D::Error>\n+    pub fn decode_alloc_id<'tcx, D>(&self, decoder: &mut D) -> Result<AllocId, D::Error>\n     where\n         D: TyDecoder<'tcx>,\n     {\n@@ -390,7 +390,7 @@ pub enum GlobalAlloc<'tcx> {\n     Memory(&'tcx Allocation),\n }\n \n-impl GlobalAlloc<'tcx> {\n+impl<'tcx> GlobalAlloc<'tcx> {\n     /// Panics if the `GlobalAlloc` does not refer to an `GlobalAlloc::Memory`\n     #[track_caller]\n     #[inline]"}, {"sha": "d2dd15aad1276c568c9e823cd3a8e83b91efd791", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -2033,7 +2033,7 @@ impl SourceScope {\n     /// Finds the original HirId this MIR item came from.\n     /// This is necessary after MIR optimizations, as otherwise we get a HirId\n     /// from the function that was inlined instead of the function call site.\n-    pub fn lint_root(\n+    pub fn lint_root<'tcx>(\n         self,\n         source_scopes: &IndexVec<SourceScope, SourceScopeData<'tcx>>,\n     ) -> Option<HirId> {\n@@ -2543,7 +2543,7 @@ pub enum ConstantKind<'tcx> {\n     Val(interpret::ConstValue<'tcx>, Ty<'tcx>),\n }\n \n-impl Constant<'tcx> {\n+impl<'tcx> Constant<'tcx> {\n     pub fn check_static_ptr(&self, tcx: TyCtxt<'_>) -> Option<DefId> {\n         match self.literal.const_for_ty()?.val.try_to_scalar() {\n             Some(Scalar::Ptr(ptr, _size)) => match tcx.global_alloc(ptr.provenance) {\n@@ -2562,14 +2562,14 @@ impl Constant<'tcx> {\n     }\n }\n \n-impl From<&'tcx ty::Const<'tcx>> for ConstantKind<'tcx> {\n+impl<'tcx> From<&'tcx ty::Const<'tcx>> for ConstantKind<'tcx> {\n     #[inline]\n     fn from(ct: &'tcx ty::Const<'tcx>) -> Self {\n         Self::Ty(ct)\n     }\n }\n \n-impl ConstantKind<'tcx> {\n+impl<'tcx> ConstantKind<'tcx> {\n     /// Returns `None` if the constant is not trivially safe for use in the type system.\n     pub fn const_for_ty(&self) -> Option<&'tcx ty::Const<'tcx>> {\n         match self {\n@@ -2851,7 +2851,7 @@ impl<'tcx> Display for ConstantKind<'tcx> {\n     }\n }\n \n-fn pretty_print_const(\n+fn pretty_print_const<'tcx>(\n     c: &ty::Const<'tcx>,\n     fmt: &mut Formatter<'_>,\n     print_types: bool,\n@@ -2866,7 +2866,7 @@ fn pretty_print_const(\n     })\n }\n \n-fn pretty_print_const_value(\n+fn pretty_print_const_value<'tcx>(\n     val: interpret::ConstValue<'tcx>,\n     ty: Ty<'tcx>,\n     fmt: &mut Formatter<'_>,\n@@ -2913,12 +2913,12 @@ impl<'a, 'b> graph::GraphSuccessors<'b> for Body<'a> {\n     type Iter = iter::Cloned<Successors<'b>>;\n }\n \n-impl graph::GraphPredecessors<'graph> for Body<'tcx> {\n+impl<'tcx, 'graph> graph::GraphPredecessors<'graph> for Body<'tcx> {\n     type Item = BasicBlock;\n     type Iter = std::iter::Copied<std::slice::Iter<'graph, BasicBlock>>;\n }\n \n-impl graph::WithPredecessors for Body<'tcx> {\n+impl<'tcx> graph::WithPredecessors for Body<'tcx> {\n     #[inline]\n     fn predecessors(&self, node: Self::Node) -> <Self as graph::GraphPredecessors<'_>>::Iter {\n         self.predecessors()[node].iter().copied()"}, {"sha": "fd8606e6929e206f13990e01456eb8124ebc32f2", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -431,7 +431,7 @@ pub struct CodegenUnitNameBuilder<'tcx> {\n     cache: FxHashMap<CrateNum, String>,\n }\n \n-impl CodegenUnitNameBuilder<'tcx> {\n+impl<'tcx> CodegenUnitNameBuilder<'tcx> {\n     pub fn new(tcx: TyCtxt<'tcx>) -> Self {\n         CodegenUnitNameBuilder { tcx, cache: Default::default() }\n     }"}, {"sha": "8cc705384b03e7bb8bdabf0c826bc087cb0b7c9a", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -167,8 +167,8 @@ fn dump_matched_mir_node<'tcx, F>(\n \n /// Returns the file basename portion (without extension) of a filename path\n /// where we should dump a MIR representation output files.\n-fn dump_file_basename(\n-    tcx: TyCtxt<'_>,\n+fn dump_file_basename<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n     pass_num: Option<&dyn Display>,\n     pass_name: &str,\n     disambiguator: &dyn Display,\n@@ -251,8 +251,8 @@ fn create_dump_file_with_basename(\n /// bit of MIR-related data. Used by `mir-dump`, but also by other\n /// bits of code (e.g., NLL inference) that dump graphviz data or\n /// other things, and hence takes the extension as an argument.\n-pub fn create_dump_file(\n-    tcx: TyCtxt<'_>,\n+pub fn create_dump_file<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n     extension: &str,\n     pass_num: Option<&dyn Display>,\n     pass_name: &str,\n@@ -419,15 +419,15 @@ struct ExtraComments<'tcx> {\n     comments: Vec<String>,\n }\n \n-impl ExtraComments<'tcx> {\n+impl<'tcx> ExtraComments<'tcx> {\n     fn push(&mut self, lines: &str) {\n         for line in lines.split('\\n') {\n             self.comments.push(line.to_string());\n         }\n     }\n }\n \n-fn use_verbose(ty: &&TyS<'tcx>, fn_def: bool) -> bool {\n+fn use_verbose<'tcx>(ty: &&TyS<'tcx>, fn_def: bool) -> bool {\n     match ty.kind() {\n         ty::Int(_) | ty::Uint(_) | ty::Bool | ty::Char | ty::Float(_) => false,\n         // Unit type\n@@ -439,7 +439,7 @@ fn use_verbose(ty: &&TyS<'tcx>, fn_def: bool) -> bool {\n     }\n }\n \n-impl Visitor<'tcx> for ExtraComments<'tcx> {\n+impl<'tcx> Visitor<'tcx> for ExtraComments<'tcx> {\n     fn visit_constant(&mut self, constant: &Constant<'tcx>, location: Location) {\n         self.super_constant(constant, location);\n         let Constant { span, user_ty, literal } = constant;\n@@ -762,7 +762,7 @@ pub fn write_allocations<'tcx>(\n /// After the hex dump, an ascii dump follows, replacing all unprintable characters (control\n /// characters or characters whose value is larger than 127) with a `.`\n /// This also prints relocations adequately.\n-pub fn display_allocation<Tag, Extra>(\n+pub fn display_allocation<'a, 'tcx, Tag, Extra>(\n     tcx: TyCtxt<'tcx>,\n     alloc: &'a Allocation<Tag, Extra>,\n ) -> RenderAllocation<'a, 'tcx, Tag, Extra> {\n@@ -775,7 +775,9 @@ pub struct RenderAllocation<'a, 'tcx, Tag, Extra> {\n     alloc: &'a Allocation<Tag, Extra>,\n }\n \n-impl<Tag: Provenance, Extra> std::fmt::Display for RenderAllocation<'a, 'tcx, Tag, Extra> {\n+impl<'a, 'tcx, Tag: Provenance, Extra> std::fmt::Display\n+    for RenderAllocation<'a, 'tcx, Tag, Extra>\n+{\n     fn fmt(&self, w: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         let RenderAllocation { tcx, alloc } = *self;\n         write!(w, \"size: {}, align: {})\", alloc.size().bytes(), alloc.align.bytes())?;\n@@ -818,7 +820,7 @@ fn write_allocation_newline(\n /// The `prefix` argument allows callers to add an arbitrary prefix before each line (even if there\n /// is only one line). Note that your prefix should contain a trailing space as the lines are\n /// printed directly after it.\n-fn write_allocation_bytes<Tag: Provenance, Extra>(\n+fn write_allocation_bytes<'tcx, Tag: Provenance, Extra>(\n     tcx: TyCtxt<'tcx>,\n     alloc: &Allocation<Tag, Extra>,\n     w: &mut dyn std::fmt::Write,"}, {"sha": "8c930fd161efbf4ce6e86e0779f69b2bc228da2d", "filename": "compiler/rustc_middle/src/mir/traversal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -300,7 +300,7 @@ pub fn reachable<'a, 'tcx>(\n }\n \n /// Returns a `BitSet` containing all basic blocks reachable from the `START_BLOCK`.\n-pub fn reachable_as_bitset(body: &Body<'tcx>) -> BitSet<BasicBlock> {\n+pub fn reachable_as_bitset<'tcx>(body: &Body<'tcx>) -> BitSet<BasicBlock> {\n     let mut iter = preorder(body);\n     (&mut iter).for_each(drop);\n     iter.visited"}, {"sha": "f301c68a7c091d4476139397a9189f85e7e2456b", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -965,7 +965,7 @@ macro_rules! visit_place_fns {\n             }\n         }\n \n-        fn process_projection(\n+        fn process_projection<'a>(\n             &mut self,\n             projection: &'a [PlaceElem<'tcx>],\n             location: Location,"}, {"sha": "3e6a6b3ba4222f699177b2288bdad0fccc3cc1e3", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -101,7 +101,7 @@ impl<'tcx> fmt::Debug for ObligationCause<'tcx> {\n     }\n }\n \n-impl Deref for ObligationCause<'tcx> {\n+impl<'tcx> Deref for ObligationCause<'tcx> {\n     type Target = ObligationCauseData<'tcx>;\n \n     #[inline(always)]"}, {"sha": "3e9cd6b46b211c4c207f848ec66f280d13875749", "filename": "compiler/rustc_middle/src/traits/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -216,7 +216,7 @@ impl<'tcx> Ancestors<'tcx> {\n ///\n /// Returns `Err` if an error was reported while building the specialization\n /// graph.\n-pub fn ancestors(\n+pub fn ancestors<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     trait_def_id: DefId,\n     start_from_impl: DefId,"}, {"sha": "aa2f37bd81ad8914341e79f6433dd987bdddc344", "filename": "compiler/rustc_middle/src/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -74,7 +74,7 @@ impl<N: fmt::Debug> fmt::Debug for traits::ImplSourceBuiltinData<N> {\n     }\n }\n \n-impl<N: fmt::Debug> fmt::Debug for traits::ImplSourceTraitUpcastingData<'tcx, N> {\n+impl<'tcx, N: fmt::Debug> fmt::Debug for traits::ImplSourceTraitUpcastingData<'tcx, N> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(\n             f,"}, {"sha": "e0e3febe6b3109b0c23cefe3b98f3cccffc95ca0", "filename": "compiler/rustc_middle/src/ty/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -23,13 +23,13 @@ pub struct Match<'tcx> {\n     param_env: ty::ParamEnv<'tcx>,\n }\n \n-impl Match<'tcx> {\n+impl<'tcx> Match<'tcx> {\n     pub fn new(tcx: TyCtxt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> Match<'tcx> {\n         Match { tcx, param_env }\n     }\n }\n \n-impl TypeRelation<'tcx> for Match<'tcx> {\n+impl<'tcx> TypeRelation<'tcx> for Match<'tcx> {\n     fn tag(&self) -> &'static str {\n         \"Match\"\n     }"}, {"sha": "2676b7ab521d83bfb2bc9f87493e59d94d494c10", "filename": "compiler/rustc_middle/src/ty/adjustment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -83,7 +83,7 @@ pub struct Adjustment<'tcx> {\n     pub target: Ty<'tcx>,\n }\n \n-impl Adjustment<'tcx> {\n+impl<'tcx> Adjustment<'tcx> {\n     pub fn is_region_borrow(&self) -> bool {\n         matches!(self.kind, Adjust::Borrow(AutoBorrow::Ref(..)))\n     }"}, {"sha": "bf5a3e68250a02e4aec066c0fb8c4159af062b92", "filename": "compiler/rustc_middle/src/ty/assoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -139,7 +139,7 @@ impl<'tcx> AssocItems<'tcx> {\n     /// Multiple items may have the same name if they are in different `Namespace`s. For example,\n     /// an associated type can have the same name as a method. Use one of the `find_by_name_and_*`\n     /// methods below if you know which item you are looking for.\n-    pub fn filter_by_name(\n+    pub fn filter_by_name<'a>(\n         &'a self,\n         tcx: TyCtxt<'a>,\n         ident: Ident,"}, {"sha": "771acc29649139d0e03d7caf993796c3c60fa4a2", "filename": "compiler/rustc_middle/src/ty/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -156,7 +156,7 @@ pub struct CapturedPlace<'tcx> {\n     pub mutability: hir::Mutability,\n }\n \n-impl CapturedPlace<'tcx> {\n+impl<'tcx> CapturedPlace<'tcx> {\n     pub fn to_string(&self, tcx: TyCtxt<'tcx>) -> String {\n         place_to_string_for_capture(tcx, &self.place)\n     }\n@@ -328,7 +328,7 @@ pub struct CaptureInfo<'tcx> {\n     pub capture_kind: UpvarCapture<'tcx>,\n }\n \n-pub fn place_to_string_for_capture(tcx: TyCtxt<'tcx>, place: &HirPlace<'tcx>) -> String {\n+pub fn place_to_string_for_capture<'tcx>(tcx: TyCtxt<'tcx>, place: &HirPlace<'tcx>) -> String {\n     let mut curr_string: String = match place.base {\n         HirPlaceBase::Upvar(upvar_id) => tcx.hir().name(upvar_id.var_path.hir_id).to_string(),\n         _ => bug!(\"Capture_information should only contain upvars\"),"}, {"sha": "f7601a18790b2f2c86b69608bfcc3ad6d463d414", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -76,7 +76,11 @@ pub trait RefDecodable<'tcx, D: TyDecoder<'tcx>> {\n }\n \n /// Encode the given value or a previously cached shorthand.\n-pub fn encode_with_shorthand<E, T, M>(encoder: &mut E, value: &T, cache: M) -> Result<(), E::Error>\n+pub fn encode_with_shorthand<'tcx, E, T, M>(\n+    encoder: &mut E,\n+    value: &T,\n+    cache: M,\n+) -> Result<(), E::Error>\n where\n     E: TyEncoder<'tcx>,\n     M: for<'b> Fn(&'b mut E) -> &'b mut FxHashMap<T, usize>,"}, {"sha": "1f4ebd036766f96869714f337d119b47d6368939", "filename": "compiler/rustc_middle/src/ty/consts/int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -234,7 +234,7 @@ impl ScalarInt {\n     }\n \n     #[inline]\n-    pub fn try_to_machine_usize(&self, tcx: TyCtxt<'tcx>) -> Result<u64, Size> {\n+    pub fn try_to_machine_usize<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Result<u64, Size> {\n         Ok(self.to_bits(tcx.data_layout.pointer_size)? as u64)\n     }\n }"}, {"sha": "fae22c28628f86f35ba023fce19625a4caeb5b88", "filename": "compiler/rustc_middle/src/ty/consts/valtree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -27,7 +27,7 @@ pub enum ValTree<'tcx> {\n     Branch(&'tcx [ValTree<'tcx>]),\n }\n \n-impl ValTree<'tcx> {\n+impl<'tcx> ValTree<'tcx> {\n     pub fn zst() -> Self {\n         Self::Branch(&[])\n     }"}, {"sha": "e220003e445d65b6e3d30c205b63432956cea2a0", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -824,7 +824,7 @@ pub struct CanonicalUserTypeAnnotation<'tcx> {\n /// Canonicalized user type annotation.\n pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;\n \n-impl CanonicalUserType<'tcx> {\n+impl<'tcx> CanonicalUserType<'tcx> {\n     /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,\n     /// i.e., each thing is mapped to a canonical variable with the same index.\n     pub fn is_identity(&self) -> bool {\n@@ -1893,7 +1893,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn debug_stats(self) -> impl std::fmt::Debug + 'tcx {\n         struct DebugStats<'tcx>(TyCtxt<'tcx>);\n \n-        impl std::fmt::Debug for DebugStats<'tcx> {\n+        impl<'tcx> std::fmt::Debug for DebugStats<'tcx> {\n             fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n                 sty_debug_print!(\n                     fmt,\n@@ -2711,7 +2711,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n }\n \n-impl TyCtxtAt<'tcx> {\n+impl<'tcx> TyCtxtAt<'tcx> {\n     /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.\n     #[track_caller]\n     pub fn ty_error(self) -> Ty<'tcx> {"}, {"sha": "0d290752e8fd81c130f4b06040ae3abbdd71800a", "filename": "compiler/rustc_middle/src/ty/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -37,7 +37,7 @@ struct RegionEraserVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl TypeFolder<'tcx> for RegionEraserVisitor<'tcx> {\n+impl<'tcx> TypeFolder<'tcx> for RegionEraserVisitor<'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n     }"}, {"sha": "617c522ac81971e27be38caa66622e34a1e361cc", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -22,7 +22,7 @@ impl FlagComputation {\n         result\n     }\n \n-    pub fn for_predicate(binder: ty::Binder<'tcx, ty::PredicateKind<'_>>) -> FlagComputation {\n+    pub fn for_predicate<'tcx>(binder: ty::Binder<'tcx, ty::PredicateKind<'_>>) -> FlagComputation {\n         let mut result = FlagComputation::new();\n         result.add_predicate(binder);\n         result\n@@ -216,7 +216,7 @@ impl FlagComputation {\n         }\n     }\n \n-    fn add_predicate(&mut self, binder: ty::Binder<'tcx, ty::PredicateKind<'_>>) {\n+    fn add_predicate(&mut self, binder: ty::Binder<'_, ty::PredicateKind<'_>>) {\n         self.bound_computation(binder, |computation, atom| computation.add_predicate_atom(atom));\n     }\n \n@@ -310,7 +310,7 @@ impl FlagComputation {\n         }\n     }\n \n-    fn add_unevaluated_const<P>(&mut self, ct: ty::Unevaluated<'tcx, P>) {\n+    fn add_unevaluated_const<P>(&mut self, ct: ty::Unevaluated<'_, P>) {\n         // The generic arguments of unevaluated consts are a bit special,\n         // see the `rustc-dev-guide` for more information.\n         //"}, {"sha": "f5be8b21e8acae5b7103553d4bec742fccfc66a3", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -199,7 +199,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     }\n }\n \n-impl TypeFoldable<'tcx> for hir::Constness {\n+impl<'tcx> TypeFoldable<'tcx> for hir::Constness {\n     fn try_super_fold_with<F: TypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n@@ -1060,13 +1060,13 @@ struct Shifter<'tcx> {\n     amount: u32,\n }\n \n-impl Shifter<'tcx> {\n+impl<'tcx> Shifter<'tcx> {\n     pub fn new(tcx: TyCtxt<'tcx>, amount: u32) -> Self {\n         Shifter { tcx, current_index: ty::INNERMOST, amount }\n     }\n }\n \n-impl TypeFolder<'tcx> for Shifter<'tcx> {\n+impl<'tcx> TypeFolder<'tcx> for Shifter<'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n@@ -1257,7 +1257,7 @@ struct HasTypeFlagsVisitor<'tcx> {\n     flags: ty::TypeFlags,\n }\n \n-impl std::fmt::Debug for HasTypeFlagsVisitor<'tcx> {\n+impl<'tcx> std::fmt::Debug for HasTypeFlagsVisitor<'tcx> {\n     fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         self.flags.fmt(fmt)\n     }\n@@ -1454,7 +1454,7 @@ struct LateBoundRegionsCollector<'tcx> {\n     just_constrained: bool,\n }\n \n-impl LateBoundRegionsCollector<'tcx> {\n+impl<'tcx> LateBoundRegionsCollector<'tcx> {\n     fn new(tcx: TyCtxt<'tcx>, just_constrained: bool) -> Self {\n         LateBoundRegionsCollector {\n             tcx,"}, {"sha": "f31c7dd743d8290da2f303b89f894a815cfa7f01", "filename": "compiler/rustc_middle/src/ty/inhabitedness/def_id_forest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fdef_id_forest.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -30,7 +30,7 @@ pub enum DefIdForest {\n \n /// Tests whether a slice of roots contains a given DefId.\n #[inline]\n-fn slice_contains(tcx: TyCtxt<'tcx>, slice: &[DefId], id: DefId) -> bool {\n+fn slice_contains<'tcx>(tcx: TyCtxt<'tcx>, slice: &[DefId], id: DefId) -> bool {\n     slice.iter().any(|root_id| tcx.is_descendant_of(id, *root_id))\n }\n "}, {"sha": "eaa7ee84b7b8d994a791a263f0282bb2d9d3f1af", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -635,7 +635,7 @@ fn polymorphize<'tcx>(\n         tcx: TyCtxt<'tcx>,\n     }\n \n-    impl ty::TypeFolder<'tcx> for PolymorphizationFolder<'tcx> {\n+    impl<'tcx> ty::TypeFolder<'tcx> for PolymorphizationFolder<'tcx> {\n         fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n             self.tcx\n         }"}, {"sha": "7ec6d3f3b2b2db859017b289bc6c7ea3a154b541", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -168,7 +168,7 @@ impl PrimitiveExt for Primitive {\n     /// Return an *integer* type matching this primitive.\n     /// Useful in particular when dealing with enum discriminants.\n     #[inline]\n-    fn to_int_ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n+    fn to_int_ty<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n         match *self {\n             Int(i, signed) => i.to_ty(tcx, signed),\n             Pointer => tcx.types.usize,\n@@ -2195,9 +2195,9 @@ pub trait LayoutOf<'tcx>: LayoutOfHelpers<'tcx> {\n     }\n }\n \n-impl<C: LayoutOfHelpers<'tcx>> LayoutOf<'tcx> for C {}\n+impl<'tcx, C: LayoutOfHelpers<'tcx>> LayoutOf<'tcx> for C {}\n \n-impl LayoutOfHelpers<'tcx> for LayoutCx<'tcx, TyCtxt<'tcx>> {\n+impl<'tcx> LayoutOfHelpers<'tcx> for LayoutCx<'tcx, TyCtxt<'tcx>> {\n     type LayoutOfResult = Result<TyAndLayout<'tcx>, LayoutError<'tcx>>;\n \n     #[inline]\n@@ -2206,7 +2206,7 @@ impl LayoutOfHelpers<'tcx> for LayoutCx<'tcx, TyCtxt<'tcx>> {\n     }\n }\n \n-impl LayoutOfHelpers<'tcx> for LayoutCx<'tcx, ty::query::TyCtxtAt<'tcx>> {\n+impl<'tcx> LayoutOfHelpers<'tcx> for LayoutCx<'tcx, ty::query::TyCtxtAt<'tcx>> {\n     type LayoutOfResult = Result<TyAndLayout<'tcx>, LayoutError<'tcx>>;\n \n     #[inline]\n@@ -2282,7 +2282,7 @@ where\n             TyAndLayout(TyAndLayout<'tcx>),\n         }\n \n-        fn field_ty_or_layout(\n+        fn field_ty_or_layout<'tcx>(\n             this: TyAndLayout<'tcx>,\n             cx: &(impl HasTyCtxt<'tcx> + HasParamEnv<'tcx>),\n             i: usize,\n@@ -2724,7 +2724,7 @@ impl<'tcx> ty::Instance<'tcx> {\n /// with `-Cpanic=abort` will look like they can't unwind when in fact they\n /// might (from a foreign exception or similar).\n #[inline]\n-pub fn fn_can_unwind(\n+pub fn fn_can_unwind<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     codegen_fn_attr_flags: CodegenFnAttrFlags,\n     abi: SpecAbi,\n@@ -2842,7 +2842,7 @@ pub enum FnAbiError<'tcx> {\n     AdjustForForeignAbi(call::AdjustForForeignAbiError),\n }\n \n-impl From<LayoutError<'tcx>> for FnAbiError<'tcx> {\n+impl<'tcx> From<LayoutError<'tcx>> for FnAbiError<'tcx> {\n     fn from(err: LayoutError<'tcx>) -> Self {\n         Self::Layout(err)\n     }\n@@ -2942,7 +2942,7 @@ pub trait FnAbiOf<'tcx>: FnAbiOfHelpers<'tcx> {\n     }\n }\n \n-impl<C: FnAbiOfHelpers<'tcx>> FnAbiOf<'tcx> for C {}\n+impl<'tcx, C: FnAbiOfHelpers<'tcx>> FnAbiOf<'tcx> for C {}\n \n fn fn_abi_of_fn_ptr<'tcx>(\n     tcx: TyCtxt<'tcx>,"}, {"sha": "70203ff2fb4c2ae3fe1085e45742711e229dc601", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -852,7 +852,7 @@ pub trait ToPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;\n }\n \n-impl ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {\n+impl<'tcx> ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {\n     #[inline(always)]\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         tcx.mk_predicate(self)\n@@ -1418,7 +1418,7 @@ impl<'tcx> ParamEnv<'tcx> {\n \n // FIXME(ecstaticmorse): Audit all occurrences of `without_const().to_predicate(tcx)` to ensure that\n // the constness of trait bounds is being propagated correctly.\n-impl PolyTraitRef<'tcx> {\n+impl<'tcx> PolyTraitRef<'tcx> {\n     #[inline]\n     pub fn with_constness(self, constness: BoundConstness) -> PolyTraitPredicate<'tcx> {\n         self.map_bound(|trait_ref| ty::TraitPredicate {"}, {"sha": "84ab42a760b933a785b9482949f539c9c7aa6c30", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -183,7 +183,7 @@ impl<'tcx> NormalizeAfterErasingRegionsFolder<'tcx> {\n     }\n }\n \n-impl TypeFolder<'tcx> for NormalizeAfterErasingRegionsFolder<'tcx> {\n+impl<'tcx> TypeFolder<'tcx> for NormalizeAfterErasingRegionsFolder<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n@@ -228,15 +228,15 @@ impl<'tcx> TryNormalizeAfterErasingRegionsFolder<'tcx> {\n     }\n }\n \n-impl TypeFolder<'tcx> for TryNormalizeAfterErasingRegionsFolder<'tcx> {\n+impl<'tcx> TypeFolder<'tcx> for TryNormalizeAfterErasingRegionsFolder<'tcx> {\n     type Error = NormalizationError<'tcx>;\n \n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n }\n \n-impl FallibleTypeFolder<'tcx> for TryNormalizeAfterErasingRegionsFolder<'tcx> {\n+impl<'tcx> FallibleTypeFolder<'tcx> for TryNormalizeAfterErasingRegionsFolder<'tcx> {\n     fn try_fold_ty(&mut self, ty: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {\n         match self.try_normalize_generic_arg_after_erasing_regions(ty.into()) {\n             Ok(t) => Ok(t.expect_ty()),"}, {"sha": "94127a144dfef5e55e3faf7a3597c744249b3169", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -37,7 +37,7 @@ pub trait Printer<'tcx>: Sized {\n     type DynExistential;\n     type Const;\n \n-    fn tcx(&'a self) -> TyCtxt<'tcx>;\n+    fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;\n \n     fn print_def_path(\n         self,"}, {"sha": "3faedf242860e55ac2ce703224cf957d2090bbaa", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -1513,7 +1513,7 @@ pub struct FmtPrinterData<'a, 'tcx, F> {\n     pub name_resolver: Option<Box<&'a dyn Fn(ty::TyVid) -> Option<String>>>,\n }\n \n-impl<F> Deref for FmtPrinter<'a, 'tcx, F> {\n+impl<'a, 'tcx, F> Deref for FmtPrinter<'a, 'tcx, F> {\n     type Target = FmtPrinterData<'a, 'tcx, F>;\n     fn deref(&self) -> &Self::Target {\n         &self.0\n@@ -1526,7 +1526,7 @@ impl<F> DerefMut for FmtPrinter<'_, '_, F> {\n     }\n }\n \n-impl<F> FmtPrinter<'a, 'tcx, F> {\n+impl<'a, 'tcx, F> FmtPrinter<'a, 'tcx, F> {\n     pub fn new(tcx: TyCtxt<'tcx>, fmt: F, ns: Namespace) -> Self {\n         FmtPrinter(Box::new(FmtPrinterData {\n             tcx,\n@@ -1563,7 +1563,7 @@ fn guess_def_namespace(tcx: TyCtxt<'_>, def_id: DefId) -> Namespace {\n     }\n }\n \n-impl TyCtxt<'t> {\n+impl<'t> TyCtxt<'t> {\n     /// Returns a string identifying this `DefId`. This string is\n     /// suitable for user output.\n     pub fn def_path_str(self, def_id: DefId) -> String {\n@@ -1585,7 +1585,7 @@ impl<F: fmt::Write> fmt::Write for FmtPrinter<'_, '_, F> {\n     }\n }\n \n-impl<F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n+impl<'tcx, F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n     type Error = fmt::Error;\n \n     type Path = Self;\n@@ -1594,7 +1594,7 @@ impl<F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n     type DynExistential = Self;\n     type Const = Self;\n \n-    fn tcx(&'a self) -> TyCtxt<'tcx> {\n+    fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -1792,7 +1792,7 @@ impl<F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n     }\n }\n \n-impl<F: fmt::Write> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx, F> {\n+impl<'tcx, F: fmt::Write> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx, F> {\n     fn infer_ty_name(&self, id: ty::TyVid) -> Option<String> {\n         self.0.name_resolver.as_ref().and_then(|func| func(id))\n     }\n@@ -2058,7 +2058,7 @@ impl<'a, 'tcx> ty::TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n \n // HACK(eddyb) limited to `FmtPrinter` because of `binder_depth`,\n // `region_index` and `used_region_names`.\n-impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n+impl<'tcx, F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n     pub fn name_all_regions<T>(\n         mut self,\n         value: &ty::Binder<'tcx, T>,\n@@ -2312,7 +2312,8 @@ where\n \n macro_rules! forward_display_to_print {\n     ($($ty:ty),+) => {\n-        $(impl fmt::Display for $ty {\n+        // Some of the $ty arguments may not actually use 'tcx\n+        $(#[allow(unused_lifetimes)] impl<'tcx> fmt::Display for $ty {\n             fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 ty::tls::with(|tcx| {\n                     tcx.lift(*self)\n@@ -2360,7 +2361,7 @@ impl fmt::Display for ty::RegionKind {\n #[derive(Copy, Clone, TypeFoldable, Lift)]\n pub struct TraitRefPrintOnlyTraitPath<'tcx>(ty::TraitRef<'tcx>);\n \n-impl fmt::Debug for TraitRefPrintOnlyTraitPath<'tcx> {\n+impl<'tcx> fmt::Debug for TraitRefPrintOnlyTraitPath<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(self, f)\n     }\n@@ -2372,13 +2373,13 @@ impl fmt::Debug for TraitRefPrintOnlyTraitPath<'tcx> {\n #[derive(Copy, Clone, TypeFoldable, Lift)]\n pub struct TraitRefPrintOnlyTraitName<'tcx>(ty::TraitRef<'tcx>);\n \n-impl fmt::Debug for TraitRefPrintOnlyTraitName<'tcx> {\n+impl<'tcx> fmt::Debug for TraitRefPrintOnlyTraitName<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(self, f)\n     }\n }\n \n-impl ty::TraitRef<'tcx> {\n+impl<'tcx> ty::TraitRef<'tcx> {\n     pub fn print_only_trait_path(self) -> TraitRefPrintOnlyTraitPath<'tcx> {\n         TraitRefPrintOnlyTraitPath(self)\n     }\n@@ -2388,7 +2389,7 @@ impl ty::TraitRef<'tcx> {\n     }\n }\n \n-impl ty::Binder<'tcx, ty::TraitRef<'tcx>> {\n+impl<'tcx> ty::Binder<'tcx, ty::TraitRef<'tcx>> {\n     pub fn print_only_trait_path(self) -> ty::Binder<'tcx, TraitRefPrintOnlyTraitPath<'tcx>> {\n         self.map_bound(|tr| tr.print_only_trait_path())\n     }"}, {"sha": "2f91503afdfaf378ca4f84f5279136c7ef536ffe", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -69,7 +69,7 @@ pub struct TyCtxtAt<'tcx> {\n     pub span: Span,\n }\n \n-impl Deref for TyCtxtAt<'tcx> {\n+impl<'tcx> Deref for TyCtxtAt<'tcx> {\n     type Target = TyCtxt<'tcx>;\n     #[inline(always)]\n     fn deref(&self) -> &Self::Target {\n@@ -82,7 +82,7 @@ pub struct TyCtxtEnsure<'tcx> {\n     pub tcx: TyCtxt<'tcx>,\n }\n \n-impl TyCtxt<'tcx> {\n+impl<'tcx> TyCtxt<'tcx> {\n     /// Returns a transparent wrapper for `TyCtxt`, which ensures queries\n     /// are executed instead of just returning their results.\n     #[inline(always)]\n@@ -207,7 +207,7 @@ macro_rules! define_callbacks {\n             $($(#[$attr])* pub $name: QueryCacheStore<query_storage::$name<$tcx>>,)*\n         }\n \n-        impl TyCtxtEnsure<$tcx> {\n+        impl<$tcx> TyCtxtEnsure<$tcx> {\n             $($(#[$attr])*\n             #[inline(always)]\n             pub fn $name(self, key: query_helper_param_ty!($($K)*)) {\n@@ -225,7 +225,7 @@ macro_rules! define_callbacks {\n             })*\n         }\n \n-        impl TyCtxt<$tcx> {\n+        impl<$tcx> TyCtxt<$tcx> {\n             $($(#[$attr])*\n             #[inline(always)]\n             #[must_use]\n@@ -235,7 +235,7 @@ macro_rules! define_callbacks {\n             })*\n         }\n \n-        impl TyCtxtAt<$tcx> {\n+        impl<$tcx> TyCtxtAt<$tcx> {\n             $($(#[$attr])*\n             #[inline(always)]\n             pub fn $name(self, key: query_helper_param_ty!($($K)*)) -> query_stored::$name<$tcx>\n@@ -357,15 +357,15 @@ mod sealed {\n \n use sealed::IntoQueryParam;\n \n-impl TyCtxt<'tcx> {\n+impl<'tcx> TyCtxt<'tcx> {\n     pub fn def_kind(self, def_id: impl IntoQueryParam<DefId>) -> DefKind {\n         let def_id = def_id.into_query_param();\n         self.opt_def_kind(def_id)\n             .unwrap_or_else(|| bug!(\"def_kind: unsupported node: {:?}\", def_id))\n     }\n }\n \n-impl TyCtxtAt<'tcx> {\n+impl<'tcx> TyCtxtAt<'tcx> {\n     pub fn def_kind(self, def_id: impl IntoQueryParam<DefId>) -> DefKind {\n         let def_id = def_id.into_query_param();\n         self.opt_def_kind(def_id)"}, {"sha": "905a5c47d2b3d750f6e75f93045ac0179c6d2017", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -132,7 +132,7 @@ pub fn relate_type_and_mut<'tcx, R: TypeRelation<'tcx>>(\n     }\n }\n \n-pub fn relate_substs<R: TypeRelation<'tcx>>(\n+pub fn relate_substs<'tcx, R: TypeRelation<'tcx>>(\n     relation: &mut R,\n     variances: Option<&[ty::Variance]>,\n     a_subst: SubstsRef<'tcx>,\n@@ -353,7 +353,7 @@ impl<'tcx> Relate<'tcx> for Ty<'tcx> {\n /// The main \"type relation\" routine. Note that this does not handle\n /// inference artifacts, so you should filter those out before calling\n /// it.\n-pub fn super_relate_tys<R: TypeRelation<'tcx>>(\n+pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n     relation: &mut R,\n     a: Ty<'tcx>,\n     b: Ty<'tcx>,\n@@ -526,7 +526,7 @@ pub fn super_relate_tys<R: TypeRelation<'tcx>>(\n /// The main \"const relation\" routine. Note that this does not handle\n /// inference artifacts, so you should filter those out before calling\n /// it.\n-pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n+pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n     relation: &mut R,\n     a: &'tcx ty::Const<'tcx>,\n     b: &'tcx ty::Const<'tcx>,\n@@ -599,7 +599,7 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n     if is_match { Ok(a) } else { Err(TypeError::ConstMismatch(expected_found(relation, a, b))) }\n }\n \n-fn check_const_value_eq<R: TypeRelation<'tcx>>(\n+fn check_const_value_eq<'tcx, R: TypeRelation<'tcx>>(\n     relation: &mut R,\n     a_val: ConstValue<'tcx>,\n     b_val: ConstValue<'tcx>,\n@@ -832,7 +832,7 @@ impl<'tcx> Relate<'tcx> for ty::ProjectionPredicate<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // Error handling\n \n-pub fn expected_found<R, T>(relation: &mut R, a: T, b: T) -> ExpectedFound<T>\n+pub fn expected_found<'tcx, R, T>(relation: &mut R, a: T, b: T) -> ExpectedFound<T>\n where\n     R: TypeRelation<'tcx>,\n {"}, {"sha": "98b1a8b4d7631f84d22f8b5863280c456a314a51", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -47,19 +47,19 @@ impl fmt::Debug for ty::UpvarId {\n     }\n }\n \n-impl fmt::Debug for ty::UpvarBorrow<'tcx> {\n+impl<'tcx> fmt::Debug for ty::UpvarBorrow<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"UpvarBorrow({:?}, {:?})\", self.kind, self.region)\n     }\n }\n \n-impl fmt::Debug for ty::ExistentialTraitRef<'tcx> {\n+impl<'tcx> fmt::Debug for ty::ExistentialTraitRef<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         with_no_trimmed_paths(|| fmt::Display::fmt(self, f))\n     }\n }\n \n-impl fmt::Debug for ty::adjustment::Adjustment<'tcx> {\n+impl<'tcx> fmt::Debug for ty::adjustment::Adjustment<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{:?} -> {}\", self.kind, self.target)\n     }\n@@ -111,7 +111,7 @@ impl fmt::Debug for ty::FreeRegion {\n     }\n }\n \n-impl fmt::Debug for ty::FnSig<'tcx> {\n+impl<'tcx> fmt::Debug for ty::FnSig<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"({:?}; c_variadic: {})->{:?}\", self.inputs(), self.c_variadic, self.output())\n     }\n@@ -129,13 +129,13 @@ impl fmt::Debug for ty::RegionVid {\n     }\n }\n \n-impl fmt::Debug for ty::TraitRef<'tcx> {\n+impl<'tcx> fmt::Debug for ty::TraitRef<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         with_no_trimmed_paths(|| fmt::Display::fmt(self, f))\n     }\n }\n \n-impl fmt::Debug for Ty<'tcx> {\n+impl<'tcx> fmt::Debug for Ty<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         with_no_trimmed_paths(|| fmt::Display::fmt(self, f))\n     }\n@@ -153,7 +153,7 @@ impl fmt::Debug for ty::ParamConst {\n     }\n }\n \n-impl fmt::Debug for ty::TraitPredicate<'tcx> {\n+impl<'tcx> fmt::Debug for ty::TraitPredicate<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         if let ty::BoundConstness::ConstIfConst = self.constness {\n             write!(f, \"~const \")?;\n@@ -162,19 +162,19 @@ impl fmt::Debug for ty::TraitPredicate<'tcx> {\n     }\n }\n \n-impl fmt::Debug for ty::ProjectionPredicate<'tcx> {\n+impl<'tcx> fmt::Debug for ty::ProjectionPredicate<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"ProjectionPredicate({:?}, {:?})\", self.projection_ty, self.ty)\n     }\n }\n \n-impl fmt::Debug for ty::Predicate<'tcx> {\n+impl<'tcx> fmt::Debug for ty::Predicate<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{:?}\", self.kind())\n     }\n }\n \n-impl fmt::Debug for ty::PredicateKind<'tcx> {\n+impl<'tcx> fmt::Debug for ty::PredicateKind<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             ty::PredicateKind::Trait(ref a) => a.fmt(f),"}, {"sha": "8706661b25021221256d386d072b073a8354271e", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -198,7 +198,7 @@ pub enum TyKind<'tcx> {\n     Error(DelaySpanBugEmitted),\n }\n \n-impl TyKind<'tcx> {\n+impl<'tcx> TyKind<'tcx> {\n     #[inline]\n     pub fn is_primitive(&self) -> bool {\n         matches!(self, Bool | Char | Int(_) | Uint(_) | Float(_))"}, {"sha": "a71181149149d648b9a9bd45f95069d74aa62366", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -67,7 +67,7 @@ impl<'tcx> GenericArgKind<'tcx> {\n     }\n }\n \n-impl fmt::Debug for GenericArg<'tcx> {\n+impl<'tcx> fmt::Debug for GenericArg<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.unpack() {\n             GenericArgKind::Lifetime(lt) => lt.fmt(f),"}, {"sha": "669065598f1498041fd6664b86d980203a9051c9", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -981,7 +981,7 @@ impl<'tcx> ExplicitSelf<'tcx> {\n /// Returns a list of types such that the given type needs drop if and only if\n /// *any* of the returned types need drop. Returns `Err(AlwaysRequiresDrop)` if\n /// this type always needs drop.\n-pub fn needs_drop_components(\n+pub fn needs_drop_components<'tcx>(\n     ty: Ty<'tcx>,\n     target_layout: &TargetDataLayout,\n ) -> Result<SmallVec<[Ty<'tcx>; 2]>, AlwaysRequiresDrop> {\n@@ -1083,7 +1083,7 @@ pub struct AlwaysRequiresDrop;\n \n /// Normalizes all opaque types in the given value, replacing them\n /// with their underlying types.\n-pub fn normalize_opaque_types(\n+pub fn normalize_opaque_types<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     val: &'tcx List<ty::Predicate<'tcx>>,\n ) -> &'tcx List<ty::Predicate<'tcx>> {"}, {"sha": "ba5775fd773762ebe87ba0f9aabdf22fc7291989", "filename": "compiler/rustc_middle/src/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -69,7 +69,7 @@ impl<'tcx> Iterator for TypeWalker<'tcx> {\n     }\n }\n \n-impl GenericArg<'tcx> {\n+impl<'tcx> GenericArg<'tcx> {\n     /// Iterator that walks `self` and any types reachable from\n     /// `self`, in depth-first order. Note that just walks the types\n     /// that appear in `self`, it does not descend into the fields of"}, {"sha": "de5ff231d6171659d562374cbb9285458b24f3eb", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -880,7 +880,7 @@ fn default_configuration(sess: &Session) -> CrateConfig {\n     ret.insert((sym::target_env, Some(Symbol::intern(env))));\n     ret.insert((sym::target_abi, Some(Symbol::intern(abi))));\n     ret.insert((sym::target_vendor, Some(Symbol::intern(vendor))));\n-    if sess.target.has_elf_tls {\n+    if sess.target.has_thread_local {\n         ret.insert((sym::target_thread_local, None));\n     }\n     for (i, align) in ["}, {"sha": "a9a0977e70285c9c5eed6174a2df26a7071277ba", "filename": "compiler/rustc_target/src/spec/aarch64_pc_windows_msvc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_msvc.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -3,7 +3,6 @@ use crate::spec::Target;\n pub fn target() -> Target {\n     let mut base = super::windows_msvc_base::opts();\n     base.max_atomic_width = Some(64);\n-    base.has_elf_tls = true;\n     base.features = \"+neon,+fp-armv8\".to_string();\n \n     Target {"}, {"sha": "db4eb204e0b127307cfcaba2979b297e3bcba752", "filename": "compiler/rustc_target/src/spec/aarch64_uwp_windows_msvc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_uwp_windows_msvc.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -3,7 +3,6 @@ use crate::spec::Target;\n pub fn target() -> Target {\n     let mut base = super::windows_uwp_msvc_base::opts();\n     base.max_atomic_width = Some(64);\n-    base.has_elf_tls = true;\n \n     Target {\n         llvm_target: \"aarch64-pc-windows-msvc\".to_string(),"}, {"sha": "e982b3565b56c521a5607f1d6ec5a8725922a892", "filename": "compiler/rustc_target/src/spec/android_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -11,7 +11,7 @@ pub fn opts() -> TargetOptions {\n         .push(\"-Wl,--allow-multiple-definition\".to_string());\n     base.dwarf_version = Some(2);\n     base.position_independent_executables = true;\n-    base.has_elf_tls = false;\n+    base.has_thread_local = false;\n     // This is for backward compatibility, see https://github.com/rust-lang/rust/issues/49867\n     // for context. (At that time, there was no `-C force-unwind-tables`, so the only solution\n     // was to always emit `uwtable`)."}, {"sha": "a4488f695f2103bcbf498c33b079d476ca3d9929", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -16,7 +16,7 @@ pub fn opts(os: &str) -> TargetOptions {\n     // TLS is flagged as enabled if it looks to be supported. The architecture\n     // only matters for default deployment target which is 11.0 for ARM64 and\n     // 10.7 for everything else.\n-    let has_elf_tls = macos_deployment_target(\"x86_64\") >= (10, 7);\n+    let has_thread_local = macos_deployment_target(\"x86_64\") >= (10, 7);\n \n     TargetOptions {\n         os: os.to_string(),\n@@ -33,7 +33,7 @@ pub fn opts(os: &str) -> TargetOptions {\n         has_rpath: true,\n         dll_suffix: \".dylib\".to_string(),\n         archive_format: \"darwin\".to_string(),\n-        has_elf_tls,\n+        has_thread_local,\n         abi_return_struct_as_int: true,\n         emit_debug_gdb_scripts: false,\n         eh_frame_header: false,"}, {"sha": "874e9b56aaa1ef8841de8a792bc48d43ee72cad9", "filename": "compiler/rustc_target/src/spec/apple_sdk_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -53,7 +53,7 @@ pub fn opts(os: &str, arch: Arch) -> TargetOptions {\n         dynamic_linking: false,\n         executables: true,\n         link_env_remove: link_env_remove(arch),\n-        has_elf_tls: false,\n+        has_thread_local: false,\n         ..super::apple_base::opts(os)\n     }\n }"}, {"sha": "4a7686ae1a1e477e2dd91b6d47aed1e24bc16741", "filename": "compiler/rustc_target/src/spec/fuchsia_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -35,7 +35,7 @@ pub fn opts() -> TargetOptions {\n             (LinkOutputKind::StaticPicExe, &[\"Scrt1.o\"]),\n         ]),\n         position_independent_executables: true,\n-        has_elf_tls: true,\n+        has_thread_local: true,\n         ..Default::default()\n     }\n }"}, {"sha": "b0b1d80ab37fc009f8f13269532f0fbfc53f858b", "filename": "compiler/rustc_target/src/spec/hermit_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -12,7 +12,7 @@ pub fn opts() -> TargetOptions {\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".to_owned()),\n         executables: true,\n-        has_elf_tls: true,\n+        has_thread_local: true,\n         pre_link_args,\n         panic_strategy: PanicStrategy::Abort,\n         position_independent_executables: true,"}, {"sha": "05f204c56044612c2ee9825d86ccee642206275a", "filename": "compiler/rustc_target/src/spec/i686_uwp_windows_msvc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_msvc.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -4,7 +4,6 @@ pub fn target() -> Target {\n     let mut base = super::windows_uwp_msvc_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.has_elf_tls = true;\n \n     Target {\n         llvm_target: \"i686-pc-windows-msvc\".to_string(),"}, {"sha": "aeb40f7712ee3dc4fd8569c69a9ac03740c6f61d", "filename": "compiler/rustc_target/src/spec/illumos_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -45,7 +45,7 @@ pub fn opts() -> TargetOptions {\n         // (see src/libstd/sys/unix/fast_thread_local.rs) that is currently\n         // missing in illumos.  For now at least, we must fallback to using\n         // pthread_{get,set}specific.\n-        //has_elf_tls: true,\n+        //has_thread_local: true,\n \n         // FIXME: Currently, rust is invoking cc to link, which ends up\n         // causing these to get included twice.  We should eventually transition"}, {"sha": "e53d465e20dfdb88e054b65a99f258c8bb39cc9f", "filename": "compiler/rustc_target/src/spec/linux_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -9,7 +9,7 @@ pub fn opts() -> TargetOptions {\n         has_rpath: true,\n         position_independent_executables: true,\n         relro_level: RelroLevel::Full,\n-        has_elf_tls: true,\n+        has_thread_local: true,\n         crt_static_respected: true,\n         ..Default::default()\n     }"}, {"sha": "43913183694e0c41d6ef80f1bf05683ab6c36ea8", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -1279,9 +1279,8 @@ pub struct TargetOptions {\n     /// `argc` and `argv` values.\n     pub main_needs_argc_argv: bool,\n \n-    /// Flag indicating whether ELF TLS (e.g., #[thread_local]) is available for\n-    /// this target.\n-    pub has_elf_tls: bool,\n+    /// Flag indicating whether #[thread_local] is available for this target.\n+    pub has_thread_local: bool,\n     // This is mainly for easy compatibility with emscripten.\n     // If we give emcc .o files that are actually .bc files it\n     // will 'just work'.\n@@ -1487,7 +1486,7 @@ impl Default for TargetOptions {\n             archive_format: \"gnu\".to_string(),\n             main_needs_argc_argv: true,\n             allow_asm: true,\n-            has_elf_tls: false,\n+            has_thread_local: false,\n             obj_is_bitcode: false,\n             forces_embed_bitcode: false,\n             bitcode_llvm_cmdline: String::new(),\n@@ -2074,7 +2073,7 @@ impl Target {\n         key!(archive_format);\n         key!(allow_asm, bool);\n         key!(main_needs_argc_argv, bool);\n-        key!(has_elf_tls, bool);\n+        key!(has_thread_local, bool);\n         key!(obj_is_bitcode, bool);\n         key!(forces_embed_bitcode, bool);\n         key!(bitcode_llvm_cmdline);\n@@ -2315,7 +2314,7 @@ impl ToJson for Target {\n         target_option_val!(archive_format);\n         target_option_val!(allow_asm);\n         target_option_val!(main_needs_argc_argv);\n-        target_option_val!(has_elf_tls);\n+        target_option_val!(has_thread_local);\n         target_option_val!(obj_is_bitcode);\n         target_option_val!(forces_embed_bitcode);\n         target_option_val!(bitcode_llvm_cmdline);"}, {"sha": "bcb536b37a17e35f5314e7575f971905f23181ab", "filename": "compiler/rustc_target/src/spec/redox_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -10,7 +10,7 @@ pub fn opts() -> TargetOptions {\n         has_rpath: true,\n         position_independent_executables: true,\n         relro_level: RelroLevel::Full,\n-        has_elf_tls: true,\n+        has_thread_local: true,\n         crt_static_default: true,\n         crt_static_respected: true,\n         ..Default::default()"}, {"sha": "421cfc401127de66b94e25b417fb76662c7fe0d8", "filename": "compiler/rustc_target/src/spec/solid_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolid_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolid_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolid_base.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -6,7 +6,7 @@ pub fn opts(kernel: &str) -> TargetOptions {\n         os: format!(\"solid_{}\", kernel),\n         vendor: \"kmc\".to_string(),\n         frame_pointer: FramePointer::NonLeaf,\n-        has_elf_tls: true,\n+        has_thread_local: true,\n         ..Default::default()\n     }\n }"}, {"sha": "72d39ef9a95ac1085c347c5d860dd662fde9c5ba", "filename": "compiler/rustc_target/src/spec/thumbv7a_uwp_windows_msvc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -9,7 +9,6 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             features: \"+vfp3,+neon\".to_string(),\n             max_atomic_width: Some(64),\n-            has_elf_tls: true,\n             // FIXME(jordanrh): use PanicStrategy::Unwind when SEH is\n             // implemented for windows/arm in LLVM\n             panic_strategy: PanicStrategy::Abort,"}, {"sha": "3f709e7023469c6db4c3c98ba1e0839649268333", "filename": "compiler/rustc_target/src/spec/vxworks_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -11,7 +11,7 @@ pub fn opts() -> TargetOptions {\n         executables: true,\n         families: vec![\"unix\".to_string()],\n         has_rpath: true,\n-        has_elf_tls: true,\n+        has_thread_local: true,\n         crt_static_default: true,\n         crt_static_respected: true,\n         crt_static_allows_dylibs: true,"}, {"sha": "71aa279144bb943433a09154351071b0e4f58c0b", "filename": "compiler/rustc_target/src/spec/wasm_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -120,9 +120,9 @@ pub fn options() -> TargetOptions {\n         // When the atomics feature is activated then these two keys matter,\n         // otherwise they're basically ignored by the standard library. In this\n         // mode, however, the `#[thread_local]` attribute works (i.e.\n-        // `has_elf_tls`) and we need to get it to work by specifying\n+        // `has_thread_local`) and we need to get it to work by specifying\n         // `local-exec` as that's all that's implemented in LLVM today for wasm.\n-        has_elf_tls: true,\n+        has_thread_local: true,\n         tls_model: TlsModel::LocalExec,\n \n         // gdb scripts don't work on wasm blobs"}, {"sha": "063b6538d95eef091133ad09d27df1e178e04b60", "filename": "compiler/rustc_target/src/spec/windows_msvc_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -27,6 +27,7 @@ pub fn opts() -> TargetOptions {\n         // linking some libraries which require a specific agreement, so it may\n         // not ever be possible for us to pass this flag.\n         no_default_libraries: false,\n+        has_thread_local: true,\n \n         ..base\n     }"}, {"sha": "1c4ccebb488c52a56c26d3ffd210369410b2de7e", "filename": "compiler/rustc_target/src/spec/x86_64_pc_windows_msvc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_msvc.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -4,7 +4,6 @@ pub fn target() -> Target {\n     let mut base = super::windows_msvc_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.has_elf_tls = true;\n \n     Target {\n         llvm_target: \"x86_64-pc-windows-msvc\".to_string(),"}, {"sha": "109f86d3a410ab6f47d453e25384543758743ee0", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_gnux32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -8,7 +8,7 @@ pub fn target() -> Target {\n     base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-mx32\".to_string());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n-    base.has_elf_tls = false;\n+    base.has_thread_local = false;\n     // BUG(GabrielMajeri): disabling the PLT on x86_64 Linux with x32 ABI\n     // breaks code gen. See LLVM bug 36743\n     base.needs_plt = true;"}, {"sha": "06ccc272300d65c12c8d6a476fff78f268eed758", "filename": "compiler/rustc_target/src/spec/x86_64_uwp_windows_msvc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_msvc.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -4,7 +4,6 @@ pub fn target() -> Target {\n     let mut base = super::windows_uwp_msvc_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.has_elf_tls = true;\n \n     Target {\n         llvm_target: \"x86_64-pc-windows-msvc\".to_string(),"}, {"sha": "7185f3de18ade3b6ed9f7f4be7c159d0e6822e91", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -2683,11 +2683,11 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// let mut v = vec![1, 2, 3];\n-    /// let new = [7, 8];\n-    /// let u: Vec<_> = v.splice(..2, new).collect();\n-    /// assert_eq!(v, &[7, 8, 3]);\n-    /// assert_eq!(u, &[1, 2]);\n+    /// let mut v = vec![1, 2, 3, 4];\n+    /// let new = [7, 8, 9];\n+    /// let u: Vec<_> = v.splice(1..3, new).collect();\n+    /// assert_eq!(v, &[1, 7, 8, 9, 4]);\n+    /// assert_eq!(u, &[2, 3]);\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[inline]"}, {"sha": "e6ae4afd7c192b7aa111d32983e2aac24821b3e5", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -2025,17 +2025,17 @@ macro_rules! int_impl {\n         #[doc = concat!(\"let a: \", stringify!($SelfT),\" = 8;\")]\n         /// let b = 3;\n         ///\n-        /// assert_eq!(a.unstable_div_floor(b), 2);\n-        /// assert_eq!(a.unstable_div_floor(-b), -3);\n-        /// assert_eq!((-a).unstable_div_floor(b), -3);\n-        /// assert_eq!((-a).unstable_div_floor(-b), 2);\n+        /// assert_eq!(a.div_floor(b), 2);\n+        /// assert_eq!(a.div_floor(-b), -3);\n+        /// assert_eq!((-a).div_floor(b), -3);\n+        /// assert_eq!((-a).div_floor(-b), 2);\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n-        pub const fn unstable_div_floor(self, rhs: Self) -> Self {\n+        pub const fn div_floor(self, rhs: Self) -> Self {\n             let d = self / rhs;\n             let r = self % rhs;\n             if (r > 0 && rhs < 0) || (r < 0 && rhs > 0) {\n@@ -2060,17 +2060,17 @@ macro_rules! int_impl {\n         #[doc = concat!(\"let a: \", stringify!($SelfT),\" = 8;\")]\n         /// let b = 3;\n         ///\n-        /// assert_eq!(a.unstable_div_ceil(b), 3);\n-        /// assert_eq!(a.unstable_div_ceil(-b), -2);\n-        /// assert_eq!((-a).unstable_div_ceil(b), -2);\n-        /// assert_eq!((-a).unstable_div_ceil(-b), 3);\n+        /// assert_eq!(a.div_ceil(b), 3);\n+        /// assert_eq!(a.div_ceil(-b), -2);\n+        /// assert_eq!((-a).div_ceil(b), -2);\n+        /// assert_eq!((-a).div_ceil(-b), 3);\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n-        pub const fn unstable_div_ceil(self, rhs: Self) -> Self {\n+        pub const fn div_ceil(self, rhs: Self) -> Self {\n             let d = self / rhs;\n             let r = self % rhs;\n             if (r > 0 && rhs > 0) || (r < 0 && rhs < 0) {\n@@ -2095,21 +2095,21 @@ macro_rules! int_impl {\n         ///\n         /// ```\n         /// #![feature(int_roundings)]\n-        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".unstable_next_multiple_of(8), 16);\")]\n-        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".unstable_next_multiple_of(8), 24);\")]\n-        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".unstable_next_multiple_of(-8), 16);\")]\n-        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".unstable_next_multiple_of(-8), 16);\")]\n-        #[doc = concat!(\"assert_eq!((-16_\", stringify!($SelfT), \").unstable_next_multiple_of(8), -16);\")]\n-        #[doc = concat!(\"assert_eq!((-23_\", stringify!($SelfT), \").unstable_next_multiple_of(8), -16);\")]\n-        #[doc = concat!(\"assert_eq!((-16_\", stringify!($SelfT), \").unstable_next_multiple_of(-8), -16);\")]\n-        #[doc = concat!(\"assert_eq!((-23_\", stringify!($SelfT), \").unstable_next_multiple_of(-8), -24);\")]\n+        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".next_multiple_of(8), 16);\")]\n+        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".next_multiple_of(8), 24);\")]\n+        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".next_multiple_of(-8), 16);\")]\n+        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".next_multiple_of(-8), 16);\")]\n+        #[doc = concat!(\"assert_eq!((-16_\", stringify!($SelfT), \").next_multiple_of(8), -16);\")]\n+        #[doc = concat!(\"assert_eq!((-23_\", stringify!($SelfT), \").next_multiple_of(8), -16);\")]\n+        #[doc = concat!(\"assert_eq!((-16_\", stringify!($SelfT), \").next_multiple_of(-8), -16);\")]\n+        #[doc = concat!(\"assert_eq!((-23_\", stringify!($SelfT), \").next_multiple_of(-8), -24);\")]\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n-        pub const fn unstable_next_multiple_of(self, rhs: Self) -> Self {\n+        pub const fn next_multiple_of(self, rhs: Self) -> Self {\n             // This would otherwise fail when calculating `r` when self == T::MIN.\n             if rhs == -1 {\n                 return self;"}, {"sha": "3cc454baf35d79aea0994510008064099600a74a", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -2024,14 +2024,14 @@ macro_rules! uint_impl {\n         ///\n         /// ```\n         /// #![feature(int_roundings)]\n-        #[doc = concat!(\"assert_eq!(7_\", stringify!($SelfT), \".unstable_div_floor(4), 1);\")]\n+        #[doc = concat!(\"assert_eq!(7_\", stringify!($SelfT), \".div_floor(4), 1);\")]\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline(always)]\n         #[rustc_inherit_overflow_checks]\n-        pub const fn unstable_div_floor(self, rhs: Self) -> Self {\n+        pub const fn div_floor(self, rhs: Self) -> Self {\n             self / rhs\n         }\n \n@@ -2047,14 +2047,14 @@ macro_rules! uint_impl {\n         ///\n         /// ```\n         /// #![feature(int_roundings)]\n-        #[doc = concat!(\"assert_eq!(7_\", stringify!($SelfT), \".unstable_div_ceil(4), 2);\")]\n+        #[doc = concat!(\"assert_eq!(7_\", stringify!($SelfT), \".div_ceil(4), 2);\")]\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n-        pub const fn unstable_div_ceil(self, rhs: Self) -> Self {\n+        pub const fn div_ceil(self, rhs: Self) -> Self {\n             let d = self / rhs;\n             let r = self % rhs;\n             if r > 0 && rhs > 0 {\n@@ -2077,15 +2077,15 @@ macro_rules! uint_impl {\n         ///\n         /// ```\n         /// #![feature(int_roundings)]\n-        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".unstable_next_multiple_of(8), 16);\")]\n-        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".unstable_next_multiple_of(8), 24);\")]\n+        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".next_multiple_of(8), 16);\")]\n+        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".next_multiple_of(8), 24);\")]\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n-        pub const fn unstable_next_multiple_of(self, rhs: Self) -> Self {\n+        pub const fn next_multiple_of(self, rhs: Self) -> Self {\n             match self % rhs {\n                 0 => self,\n                 r => self + (rhs - r)"}, {"sha": "d2d655ea2c75015959b518a695d6b4dd8f63240a", "filename": "library/core/tests/num/int_macros.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -294,33 +294,33 @@ macro_rules! int_module {\n             fn test_div_floor() {\n                 let a: $T = 8;\n                 let b = 3;\n-                assert_eq!(a.unstable_div_floor(b), 2);\n-                assert_eq!(a.unstable_div_floor(-b), -3);\n-                assert_eq!((-a).unstable_div_floor(b), -3);\n-                assert_eq!((-a).unstable_div_floor(-b), 2);\n+                assert_eq!(a.div_floor(b), 2);\n+                assert_eq!(a.div_floor(-b), -3);\n+                assert_eq!((-a).div_floor(b), -3);\n+                assert_eq!((-a).div_floor(-b), 2);\n             }\n \n             #[test]\n             fn test_div_ceil() {\n                 let a: $T = 8;\n                 let b = 3;\n-                assert_eq!(a.unstable_div_ceil(b), 3);\n-                assert_eq!(a.unstable_div_ceil(-b), -2);\n-                assert_eq!((-a).unstable_div_ceil(b), -2);\n-                assert_eq!((-a).unstable_div_ceil(-b), 3);\n+                assert_eq!(a.div_ceil(b), 3);\n+                assert_eq!(a.div_ceil(-b), -2);\n+                assert_eq!((-a).div_ceil(b), -2);\n+                assert_eq!((-a).div_ceil(-b), 3);\n             }\n \n             #[test]\n             fn test_next_multiple_of() {\n-                assert_eq!((16 as $T).unstable_next_multiple_of(8), 16);\n-                assert_eq!((23 as $T).unstable_next_multiple_of(8), 24);\n-                assert_eq!((16 as $T).unstable_next_multiple_of(-8), 16);\n-                assert_eq!((23 as $T).unstable_next_multiple_of(-8), 16);\n-                assert_eq!((-16 as $T).unstable_next_multiple_of(8), -16);\n-                assert_eq!((-23 as $T).unstable_next_multiple_of(8), -16);\n-                assert_eq!((-16 as $T).unstable_next_multiple_of(-8), -16);\n-                assert_eq!((-23 as $T).unstable_next_multiple_of(-8), -24);\n-                assert_eq!(MIN.unstable_next_multiple_of(-1), MIN);\n+                assert_eq!((16 as $T).next_multiple_of(8), 16);\n+                assert_eq!((23 as $T).next_multiple_of(8), 24);\n+                assert_eq!((16 as $T).next_multiple_of(-8), 16);\n+                assert_eq!((23 as $T).next_multiple_of(-8), 16);\n+                assert_eq!((-16 as $T).next_multiple_of(8), -16);\n+                assert_eq!((-23 as $T).next_multiple_of(8), -16);\n+                assert_eq!((-16 as $T).next_multiple_of(-8), -16);\n+                assert_eq!((-23 as $T).next_multiple_of(-8), -24);\n+                assert_eq!(MIN.next_multiple_of(-1), MIN);\n             }\n \n             #[test]"}, {"sha": "49f8f1f13fad46ffc0a79fd228b5e4f8bbf0f5e2", "filename": "library/core/tests/num/uint_macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/library%2Fcore%2Ftests%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/library%2Fcore%2Ftests%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fuint_macros.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -208,19 +208,19 @@ macro_rules! uint_module {\n \n             #[test]\n             fn test_div_floor() {\n-                assert_eq!((8 as $T).unstable_div_floor(3), 2);\n+                assert_eq!((8 as $T).div_floor(3), 2);\n             }\n \n             #[test]\n             fn test_div_ceil() {\n-                assert_eq!((8 as $T).unstable_div_ceil(3), 3);\n+                assert_eq!((8 as $T).div_ceil(3), 3);\n             }\n \n             #[test]\n             fn test_next_multiple_of() {\n-                assert_eq!((16 as $T).unstable_next_multiple_of(8), 16);\n-                assert_eq!((23 as $T).unstable_next_multiple_of(8), 24);\n-                assert_eq!(MAX.unstable_next_multiple_of(1), MAX);\n+                assert_eq!((16 as $T).next_multiple_of(8), 16);\n+                assert_eq!((23 as $T).next_multiple_of(8), 24);\n+                assert_eq!(MAX.next_multiple_of(1), MAX);\n             }\n \n             #[test]"}, {"sha": "b4217dc87ba9c209e3e07c57fe7120dc20bcb922", "filename": "library/portable-simd/crates/core_simd/src/masks/bitmask.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -105,18 +105,14 @@ where\n     #[must_use = \"method returns a new vector and does not mutate the original value\"]\n     pub fn to_int(self) -> Simd<T, LANES> {\n         unsafe {\n-            crate::intrinsics::simd_select_bitmask(\n-                self.0,\n-                Simd::splat(T::TRUE),\n-                Simd::splat(T::FALSE),\n-            )\n+            intrinsics::simd_select_bitmask(self.0, Simd::splat(T::TRUE), Simd::splat(T::FALSE))\n         }\n     }\n \n     #[inline]\n     #[must_use = \"method returns a new mask and does not mutate the original value\"]\n     pub unsafe fn from_int_unchecked(value: Simd<T, LANES>) -> Self {\n-        unsafe { Self(crate::intrinsics::simd_bitmask(value), PhantomData) }\n+        unsafe { Self(intrinsics::simd_bitmask(value), PhantomData) }\n     }\n \n     #[cfg(feature = \"generic_const_exprs\")]"}, {"sha": "e5bb784bb910f4b40da0746f3f7ad7604d25b285", "filename": "library/portable-simd/crates/core_simd/src/masks/full_masks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -115,7 +115,7 @@ where\n     pub fn to_bitmask(self) -> [u8; LaneCount::<LANES>::BITMASK_LEN] {\n         unsafe {\n             let mut bitmask: [u8; LaneCount::<LANES>::BITMASK_LEN] =\n-                crate::intrinsics::simd_bitmask(self.0);\n+                intrinsics::simd_bitmask(self.0);\n \n             // There is a bug where LLVM appears to implement this operation with the wrong\n             // bit order.\n@@ -144,7 +144,7 @@ where\n                 }\n             }\n \n-            Self::from_int_unchecked(crate::intrinsics::simd_select_bitmask(\n+            Self::from_int_unchecked(intrinsics::simd_select_bitmask(\n                 bitmask,\n                 Self::splat(true).to_int(),\n                 Self::splat(false).to_int(),"}, {"sha": "85026265956a2092545c00a1e3ffa24e543aa672", "filename": "library/portable-simd/crates/core_simd/src/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmod.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -27,7 +27,6 @@ pub mod simd {\n \n     pub use crate::core_simd::lane_count::{LaneCount, SupportedLaneCount};\n     pub use crate::core_simd::masks::*;\n-    pub use crate::core_simd::select::Select;\n     pub use crate::core_simd::swizzle::*;\n     pub use crate::core_simd::vector::*;\n }"}, {"sha": "8d521057fbd3ed7a9da2bc540af546f7d2cf9ee2", "filename": "library/portable-simd/crates/core_simd/src/select.rs", "status": "modified", "additions": 21, "deletions": 53, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fselect.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -1,54 +1,6 @@\n use crate::simd::intrinsics;\n use crate::simd::{LaneCount, Mask, MaskElement, Simd, SimdElement, SupportedLaneCount};\n \n-mod sealed {\n-    pub trait Sealed<Mask> {\n-        fn select(mask: Mask, true_values: Self, false_values: Self) -> Self;\n-    }\n-}\n-use sealed::Sealed;\n-\n-/// Supporting trait for vector `select` function\n-pub trait Select<Mask>: Sealed<Mask> {}\n-\n-impl<T, const LANES: usize> Sealed<Mask<T::Mask, LANES>> for Simd<T, LANES>\n-where\n-    T: SimdElement,\n-    LaneCount<LANES>: SupportedLaneCount,\n-{\n-    #[inline]\n-    #[must_use = \"method returns a new vector and does not mutate the original inputs\"]\n-    fn select(mask: Mask<T::Mask, LANES>, true_values: Self, false_values: Self) -> Self {\n-        unsafe { intrinsics::simd_select(mask.to_int(), true_values, false_values) }\n-    }\n-}\n-\n-impl<T, const LANES: usize> Select<Mask<T::Mask, LANES>> for Simd<T, LANES>\n-where\n-    T: SimdElement,\n-    LaneCount<LANES>: SupportedLaneCount,\n-{\n-}\n-\n-impl<T, const LANES: usize> Sealed<Self> for Mask<T, LANES>\n-where\n-    T: MaskElement,\n-    LaneCount<LANES>: SupportedLaneCount,\n-{\n-    #[inline]\n-    #[must_use = \"method returns a new vector and does not mutate the original inputs\"]\n-    fn select(mask: Self, true_values: Self, false_values: Self) -> Self {\n-        mask & true_values | !mask & false_values\n-    }\n-}\n-\n-impl<T, const LANES: usize> Select<Self> for Mask<T, LANES>\n-where\n-    T: MaskElement,\n-    LaneCount<LANES>: SupportedLaneCount,\n-{\n-}\n-\n impl<T, const LANES: usize> Mask<T, LANES>\n where\n     T: MaskElement,\n@@ -69,21 +21,37 @@ where\n     /// let c = mask.select(a, b);\n     /// assert_eq!(c.to_array(), [0, 5, 6, 3]);\n     /// ```\n+    #[inline]\n+    #[must_use = \"method returns a new vector and does not mutate the original inputs\"]\n+    pub fn select<U>(\n+        self,\n+        true_values: Simd<U, LANES>,\n+        false_values: Simd<U, LANES>,\n+    ) -> Simd<U, LANES>\n+    where\n+        U: SimdElement<Mask = T>,\n+    {\n+        unsafe { intrinsics::simd_select(self.to_int(), true_values, false_values) }\n+    }\n+\n+    /// Choose lanes from two masks.\n+    ///\n+    /// For each lane in the mask, choose the corresponding lane from `true_values` if\n+    /// that lane mask is true, and `false_values` if that lane mask is false.\n     ///\n-    /// `select` can also be used on masks:\n     /// ```\n     /// # #![feature(portable_simd)]\n     /// # #[cfg(feature = \"std\")] use core_simd::Mask;\n     /// # #[cfg(not(feature = \"std\"))] use core::simd::Mask;\n     /// let a = Mask::<i32, 4>::from_array([true, true, false, false]);\n     /// let b = Mask::<i32, 4>::from_array([false, false, true, true]);\n     /// let mask = Mask::<i32, 4>::from_array([true, false, false, true]);\n-    /// let c = mask.select(a, b);\n+    /// let c = mask.select_mask(a, b);\n     /// assert_eq!(c.to_array(), [true, false, true, false]);\n     /// ```\n     #[inline]\n-    #[must_use = \"method returns a new vector and does not mutate the original inputs\"]\n-    pub fn select<S: Select<Self>>(self, true_values: S, false_values: S) -> S {\n-        S::select(self, true_values, false_values)\n+    #[must_use = \"method returns a new mask and does not mutate the original inputs\"]\n+    pub fn select_mask(self, true_values: Self, false_values: Self) -> Self {\n+        self & true_values | !self & false_values\n     }\n }"}, {"sha": "24e18bb3a51f4516359146e6a97e1ecc9215bb00", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -122,12 +122,11 @@ crate struct Crate {\n     crate primitives: ThinVec<(DefId, PrimitiveType)>,\n     /// Only here so that they can be filtered through the rustdoc passes.\n     crate external_traits: Rc<RefCell<FxHashMap<DefId, TraitWithExtraInfo>>>,\n-    crate collapsed: bool,\n }\n \n // `Crate` is frequently moved by-value. Make sure it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(Crate, 80);\n+rustc_data_structures::static_assert_size!(Crate, 72);\n \n impl Crate {\n     crate fn name(&self, tcx: TyCtxt<'_>) -> Symbol {\n@@ -1030,12 +1029,6 @@ impl Attributes {\n     ) -> Attributes {\n         let mut doc_strings: Vec<DocFragment> = vec![];\n \n-        fn update_need_backline(doc_strings: &mut Vec<DocFragment>) {\n-            if let Some(prev) = doc_strings.last_mut() {\n-                prev.need_backline = true;\n-            }\n-        }\n-\n         let clean_attr = |(attr, parent_module): (&ast::Attribute, Option<DefId>)| {\n             if let Some(value) = attr.doc_str() {\n                 trace!(\"got doc_str={:?}\", value);\n@@ -1055,7 +1048,9 @@ impl Attributes {\n                     indent: 0,\n                 };\n \n-                update_need_backline(&mut doc_strings);\n+                if let Some(prev) = doc_strings.last_mut() {\n+                    prev.need_backline = true;\n+                }\n \n                 doc_strings.push(frag);\n "}, {"sha": "7d5e2e36bd1903a20afa7c370dc2c83972212581", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -72,7 +72,7 @@ crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n         }));\n     }\n \n-    Crate { module, primitives, external_traits: cx.external_traits.clone(), collapsed: false }\n+    Crate { module, primitives, external_traits: cx.external_traits.clone() }\n }\n \n fn external_generic_args("}, {"sha": "1b67a4c144c1ea616d23277d548bdf30ee139bcb", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -510,9 +510,6 @@ crate fn run_global_ctxt(\n \n     krate = tcx.sess.time(\"create_format_cache\", || Cache::populate(&mut ctxt, krate));\n \n-    // The main crate doc comments are always collapsed.\n-    krate.collapsed = true;\n-\n     (krate, ctxt.render_options, ctxt.cache)\n }\n "}, {"sha": "9c849b7789af7d4cd5e15b00a1e42629ced3e720", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -88,8 +88,6 @@ crate struct SharedContext<'tcx> {\n     crate local_sources: FxHashMap<PathBuf, String>,\n     /// Show the memory layout of types in the docs.\n     pub(super) show_type_layout: bool,\n-    /// Whether the collapsed pass ran\n-    collapsed: bool,\n     /// The base-URL of the issue tracker for when an item has been tagged with\n     /// an issue number.\n     pub(super) issue_tracker_base_url: Option<String>,\n@@ -142,12 +140,6 @@ impl SharedContext<'_> {\n         Ok(())\n     }\n \n-    /// Returns the `collapsed_doc_value` of the given item if this is the main crate, otherwise\n-    /// returns the `doc_value`.\n-    crate fn maybe_collapsed_doc_value<'a>(&self, item: &'a clean::Item) -> Option<String> {\n-        if self.collapsed { item.collapsed_doc_value() } else { item.doc_value() }\n-    }\n-\n     crate fn edition(&self) -> Edition {\n         self.tcx.sess.edition()\n     }\n@@ -472,7 +464,6 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         let (sender, receiver) = channel();\n         let mut scx = SharedContext {\n             tcx,\n-            collapsed: krate.collapsed,\n             src_root,\n             local_sources,\n             issue_tracker_base_url,"}, {"sha": "eb606178d244d3127f50cf53fe2de931a200d0d6", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41c3017c82bbc16842cc3bc1afa904e6910e293c/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41c3017c82bbc16842cc3bc1afa904e6910e293c/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=41c3017c82bbc16842cc3bc1afa904e6910e293c", "patch": "@@ -567,7 +567,7 @@ fn document_full_inner(\n     is_collapsible: bool,\n     heading_offset: HeadingOffset,\n ) {\n-    if let Some(s) = cx.shared.maybe_collapsed_doc_value(item) {\n+    if let Some(s) = item.collapsed_doc_value() {\n         debug!(\"Doc block: =====\\n{}\\n=====\", s);\n         if is_collapsible {\n             w.write_str(\n@@ -1612,7 +1612,7 @@ fn render_impl(\n             write!(w, \"</summary>\")\n         }\n \n-        if let Some(ref dox) = cx.shared.maybe_collapsed_doc_value(&i.impl_item) {\n+        if let Some(ref dox) = i.impl_item.collapsed_doc_value() {\n             let mut ids = cx.id_map.borrow_mut();\n             write!(\n                 w,"}]}