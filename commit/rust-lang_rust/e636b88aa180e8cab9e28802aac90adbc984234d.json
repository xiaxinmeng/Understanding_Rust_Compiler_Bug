{"sha": "e636b88aa180e8cab9e28802aac90adbc984234d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2MzZiODhhYTE4MGU4Y2FiOWUyODgwMmFhYzkwYWRiYzk4NDIzNGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-23T18:35:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-23T18:35:08Z"}, "message": "Auto merge of #6044 - rschoon:rc-buffer, r=yaahc\n\nAdd `rc_buffer` lint for checking Rc<String> and friends\n\nFixes #2623\n\nThis is a bit different from the original PR attempting to implement this type of lint.   Rather than linting against converting into the unwanted types, this PR lints against declaring the unwanted type in a struct or function definition.\n\nI'm reasonably happy with what I have here, although I used the fully qualified type names for the Path and OsString suggestions, and I'm not sure if I should have just used the short versions instead, even if they might not have been declared via use.\n\nAlso, I don't know if \"buffer type\" is the best way to put it or not.  Alternatively I could call it a \"growable type\" or \"growable buffer type\", but I was thinking of PathBuf when I started making the lint.\n\nchangelog: Add `rc_buffer` lint", "tree": {"sha": "b6dfdadeedb1340c378114b97655a9e9791f7d21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6dfdadeedb1340c378114b97655a9e9791f7d21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e636b88aa180e8cab9e28802aac90adbc984234d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e636b88aa180e8cab9e28802aac90adbc984234d", "html_url": "https://github.com/rust-lang/rust/commit/e636b88aa180e8cab9e28802aac90adbc984234d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e636b88aa180e8cab9e28802aac90adbc984234d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29b12f22fc55da265f58b1bdf851bd69f60bf9a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/29b12f22fc55da265f58b1bdf851bd69f60bf9a5", "html_url": "https://github.com/rust-lang/rust/commit/29b12f22fc55da265f58b1bdf851bd69f60bf9a5"}, {"sha": "6c056d346562eebf8535e2a4415c353a911b6280", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c056d346562eebf8535e2a4415c353a911b6280", "html_url": "https://github.com/rust-lang/rust/commit/6c056d346562eebf8535e2a4415c353a911b6280"}], "stats": {"total": 307, "additions": 304, "deletions": 3}, "files": [{"sha": "d1dfe36ffd825d2c7828bb7b55369873d15f1c60", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e636b88aa180e8cab9e28802aac90adbc984234d/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/e636b88aa180e8cab9e28802aac90adbc984234d/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=e636b88aa180e8cab9e28802aac90adbc984234d", "patch": "@@ -1777,6 +1777,7 @@ Released 2018-09-13\n [`range_plus_one`]: https://rust-lang.github.io/rust-clippy/master/index.html#range_plus_one\n [`range_step_by_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#range_step_by_zero\n [`range_zip_with_len`]: https://rust-lang.github.io/rust-clippy/master/index.html#range_zip_with_len\n+[`rc_buffer`]: https://rust-lang.github.io/rust-clippy/master/index.html#rc_buffer\n [`redundant_allocation`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_allocation\n [`redundant_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone\n [`redundant_closure`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure"}, {"sha": "0000d39263ed388013927885c1004db3dce5673b", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e636b88aa180e8cab9e28802aac90adbc984234d/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e636b88aa180e8cab9e28802aac90adbc984234d/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=e636b88aa180e8cab9e28802aac90adbc984234d", "patch": "@@ -21,7 +21,7 @@ pub enum Constant {\n     /// A `String` (e.g., \"abc\").\n     Str(String),\n     /// A binary string (e.g., `b\"abc\"`).\n-    Binary(Lrc<Vec<u8>>),\n+    Binary(Lrc<[u8]>),\n     /// A single `char` (e.g., `'a'`).\n     Char(char),\n     /// An integer's bit representation.\n@@ -155,7 +155,7 @@ pub fn lit_to_constant(lit: &LitKind, ty: Option<Ty<'_>>) -> Constant {\n     match *lit {\n         LitKind::Str(ref is, _) => Constant::Str(is.to_string()),\n         LitKind::Byte(b) => Constant::Int(u128::from(b)),\n-        LitKind::ByteStr(ref s) => Constant::Binary(Lrc::clone(s)),\n+        LitKind::ByteStr(ref s) => Constant::Binary(Lrc::from(s.as_slice())),\n         LitKind::Char(c) => Constant::Char(c),\n         LitKind::Int(n, _) => Constant::Int(n),\n         LitKind::Float(ref is, LitFloatType::Suffixed(fty)) => match fty {"}, {"sha": "58112ac8da5f12e024bea6581579e3fa3a0e851f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e636b88aa180e8cab9e28802aac90adbc984234d/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e636b88aa180e8cab9e28802aac90adbc984234d/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=e636b88aa180e8cab9e28802aac90adbc984234d", "patch": "@@ -841,6 +841,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &types::LET_UNIT_VALUE,\n         &types::LINKEDLIST,\n         &types::OPTION_OPTION,\n+        &types::RC_BUFFER,\n         &types::REDUNDANT_ALLOCATION,\n         &types::TYPE_COMPLEXITY,\n         &types::UNIT_ARG,\n@@ -1490,6 +1491,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::CHAR_LIT_AS_U8),\n         LintId::of(&types::FN_TO_NUMERIC_CAST),\n         LintId::of(&types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n+        LintId::of(&types::RC_BUFFER),\n         LintId::of(&types::REDUNDANT_ALLOCATION),\n         LintId::of(&types::TYPE_COMPLEXITY),\n         LintId::of(&types::UNIT_ARG),\n@@ -1791,6 +1793,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n         LintId::of(&stable_sort_primitive::STABLE_SORT_PRIMITIVE),\n         LintId::of(&types::BOX_VEC),\n+        LintId::of(&types::RC_BUFFER),\n         LintId::of(&types::REDUNDANT_ALLOCATION),\n         LintId::of(&vec::USELESS_VEC),\n     ]);"}, {"sha": "a29a199b8c3aa52f0cec527d2baeae3b5304da4f", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 123, "deletions": 1, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/e636b88aa180e8cab9e28802aac90adbc984234d/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e636b88aa180e8cab9e28802aac90adbc984234d/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=e636b88aa180e8cab9e28802aac90adbc984234d", "patch": "@@ -215,11 +215,41 @@ declare_clippy_lint! {\n     \"redundant allocation\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for Rc<T> and Arc<T> when T is a mutable buffer type such as String or Vec\n+    ///\n+    /// **Why is this bad?** Expressions such as Rc<String> have no advantage over Rc<str>, since\n+    /// it is larger and involves an extra level of indirection, and doesn't implement Borrow<str>.\n+    ///\n+    /// While mutating a buffer type would still be possible with Rc::get_mut(), it only\n+    /// works if there are no additional references yet, which defeats the purpose of\n+    /// enclosing it in a shared ownership type. Instead, additionally wrapping the inner\n+    /// type with an interior mutable container (such as RefCell or Mutex) would normally\n+    /// be used.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust,ignore\n+    /// # use std::rc::Rc;\n+    /// fn foo(interned: Rc<String>) { ... }\n+    /// ```\n+    ///\n+    /// Better:\n+    ///\n+    /// ```rust,ignore\n+    /// fn foo(interned: Rc<str>) { ... }\n+    /// ```\n+    pub RC_BUFFER,\n+    perf,\n+    \"shared ownership of a buffer type\"\n+}\n+\n pub struct Types {\n     vec_box_size_threshold: u64,\n }\n \n-impl_lint_pass!(Types => [BOX_VEC, VEC_BOX, OPTION_OPTION, LINKEDLIST, BORROWED_BOX, REDUNDANT_ALLOCATION]);\n+impl_lint_pass!(Types => [BOX_VEC, VEC_BOX, OPTION_OPTION, LINKEDLIST, BORROWED_BOX, REDUNDANT_ALLOCATION, RC_BUFFER]);\n \n impl<'tcx> LateLintPass<'tcx> for Types {\n     fn check_fn(&mut self, cx: &LateContext<'_>, _: FnKind<'_>, decl: &FnDecl<'_>, _: &Body<'_>, _: Span, id: HirId) {\n@@ -272,6 +302,19 @@ fn match_type_parameter(cx: &LateContext<'_>, qpath: &QPath<'_>, path: &[&str])\n     None\n }\n \n+fn match_buffer_type(cx: &LateContext<'_>, qpath: &QPath<'_>) -> Option<&'static str> {\n+    if match_type_parameter(cx, qpath, &paths::STRING).is_some() {\n+        return Some(\"str\");\n+    }\n+    if match_type_parameter(cx, qpath, &paths::OS_STRING).is_some() {\n+        return Some(\"std::ffi::OsStr\");\n+    }\n+    if match_type_parameter(cx, qpath, &paths::PATH_BUF).is_some() {\n+        return Some(\"std::path::Path\");\n+    }\n+    None\n+}\n+\n fn match_borrows_parameter(_cx: &LateContext<'_>, qpath: &QPath<'_>) -> Option<Span> {\n     let last = last_path_segment(qpath);\n     if_chain! {\n@@ -385,6 +428,45 @@ impl Types {\n                             );\n                             return; // don't recurse into the type\n                         }\n+                        if let Some(alternate) = match_buffer_type(cx, qpath) {\n+                            span_lint_and_sugg(\n+                                cx,\n+                                RC_BUFFER,\n+                                hir_ty.span,\n+                                \"usage of `Rc<T>` when T is a buffer type\",\n+                                \"try\",\n+                                format!(\"Rc<{}>\", alternate),\n+                                Applicability::MachineApplicable,\n+                            );\n+                            return; // don't recurse into the type\n+                        }\n+                        if match_type_parameter(cx, qpath, &paths::VEC).is_some() {\n+                            let vec_ty = match &last_path_segment(qpath).args.unwrap().args[0] {\n+                                GenericArg::Type(ty) => match &ty.kind {\n+                                    TyKind::Path(qpath) => qpath,\n+                                    _ => return,\n+                                },\n+                                _ => return,\n+                            };\n+                            let inner_span = match &last_path_segment(&vec_ty).args.unwrap().args[0] {\n+                                GenericArg::Type(ty) => ty.span,\n+                                _ => return,\n+                            };\n+                            let mut applicability = Applicability::MachineApplicable;\n+                            span_lint_and_sugg(\n+                                cx,\n+                                RC_BUFFER,\n+                                hir_ty.span,\n+                                \"usage of `Rc<T>` when T is a buffer type\",\n+                                \"try\",\n+                                format!(\n+                                    \"Rc<[{}]>\",\n+                                    snippet_with_applicability(cx, inner_span, \"..\", &mut applicability)\n+                                ),\n+                                Applicability::MachineApplicable,\n+                            );\n+                            return; // don't recurse into the type\n+                        }\n                         if let Some(span) = match_borrows_parameter(cx, qpath) {\n                             let mut applicability = Applicability::MachineApplicable;\n                             span_lint_and_sugg(\n@@ -398,6 +480,46 @@ impl Types {\n                             );\n                             return; // don't recurse into the type\n                         }\n+                    } else if cx.tcx.is_diagnostic_item(sym::Arc, def_id) {\n+                        if let Some(alternate) = match_buffer_type(cx, qpath) {\n+                            span_lint_and_sugg(\n+                                cx,\n+                                RC_BUFFER,\n+                                hir_ty.span,\n+                                \"usage of `Arc<T>` when T is a buffer type\",\n+                                \"try\",\n+                                format!(\"Arc<{}>\", alternate),\n+                                Applicability::MachineApplicable,\n+                            );\n+                            return; // don't recurse into the type\n+                        }\n+                        if match_type_parameter(cx, qpath, &paths::VEC).is_some() {\n+                            let vec_ty = match &last_path_segment(qpath).args.unwrap().args[0] {\n+                                GenericArg::Type(ty) => match &ty.kind {\n+                                    TyKind::Path(qpath) => qpath,\n+                                    _ => return,\n+                                },\n+                                _ => return,\n+                            };\n+                            let inner_span = match &last_path_segment(&vec_ty).args.unwrap().args[0] {\n+                                GenericArg::Type(ty) => ty.span,\n+                                _ => return,\n+                            };\n+                            let mut applicability = Applicability::MachineApplicable;\n+                            span_lint_and_sugg(\n+                                cx,\n+                                RC_BUFFER,\n+                                hir_ty.span,\n+                                \"usage of `Arc<T>` when T is a buffer type\",\n+                                \"try\",\n+                                format!(\n+                                    \"Arc<[{}]>\",\n+                                    snippet_with_applicability(cx, inner_span, \"..\", &mut applicability)\n+                                ),\n+                                Applicability::MachineApplicable,\n+                            );\n+                            return; // don't recurse into the type\n+                        }\n                     } else if cx.tcx.is_diagnostic_item(sym!(vec_type), def_id) {\n                         if_chain! {\n                             // Get the _ part of Vec<_>"}, {"sha": "1583afad208ab2c19167e20d46a997e4f5512716", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e636b88aa180e8cab9e28802aac90adbc984234d/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e636b88aa180e8cab9e28802aac90adbc984234d/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=e636b88aa180e8cab9e28802aac90adbc984234d", "patch": "@@ -113,6 +113,7 @@ pub const STD_CONVERT_IDENTITY: [&str; 3] = [\"std\", \"convert\", \"identity\"];\n pub const STD_FS_CREATE_DIR: [&str; 3] = [\"std\", \"fs\", \"create_dir\"];\n pub const STD_MEM_TRANSMUTE: [&str; 3] = [\"std\", \"mem\", \"transmute\"];\n pub const STD_PTR_NULL: [&str; 3] = [\"std\", \"ptr\", \"null\"];\n+pub const STRING: [&str; 3] = [\"alloc\", \"string\", \"String\"];\n pub const STRING_AS_MUT_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"as_mut_str\"];\n pub const STRING_AS_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"as_str\"];\n pub const STR_ENDS_WITH: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"ends_with\"];"}, {"sha": "9603023ed067150bcebad70d50cb1435f583b308", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e636b88aa180e8cab9e28802aac90adbc984234d/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e636b88aa180e8cab9e28802aac90adbc984234d/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=e636b88aa180e8cab9e28802aac90adbc984234d", "patch": "@@ -1865,6 +1865,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"ranges\",\n     },\n+    Lint {\n+        name: \"rc_buffer\",\n+        group: \"perf\",\n+        desc: \"shared ownership of a buffer type\",\n+        deprecation: None,\n+        module: \"types\",\n+    },\n     Lint {\n         name: \"redundant_allocation\",\n         group: \"perf\","}, {"sha": "1fa986439368782b94c053be0a0b850e2e4fac9a", "filename": "tests/ui/rc_buffer.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e636b88aa180e8cab9e28802aac90adbc984234d/tests%2Fui%2Frc_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e636b88aa180e8cab9e28802aac90adbc984234d/tests%2Fui%2Frc_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_buffer.rs?ref=e636b88aa180e8cab9e28802aac90adbc984234d", "patch": "@@ -0,0 +1,26 @@\n+#![warn(clippy::rc_buffer)]\n+\n+use std::cell::RefCell;\n+use std::ffi::OsString;\n+use std::path::PathBuf;\n+use std::rc::Rc;\n+\n+struct S {\n+    // triggers lint\n+    bad1: Rc<String>,\n+    bad2: Rc<PathBuf>,\n+    bad3: Rc<Vec<u8>>,\n+    bad4: Rc<OsString>,\n+    // does not trigger lint\n+    good1: Rc<RefCell<String>>,\n+}\n+\n+// triggers lint\n+fn func_bad1(_: Rc<String>) {}\n+fn func_bad2(_: Rc<PathBuf>) {}\n+fn func_bad3(_: Rc<Vec<u8>>) {}\n+fn func_bad4(_: Rc<OsString>) {}\n+// does not trigger lint\n+fn func_good1(_: Rc<RefCell<String>>) {}\n+\n+fn main() {}"}, {"sha": "e4cc169af07b96f0dbbbf1490e153881d77526ca", "filename": "tests/ui/rc_buffer.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e636b88aa180e8cab9e28802aac90adbc984234d/tests%2Fui%2Frc_buffer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e636b88aa180e8cab9e28802aac90adbc984234d/tests%2Fui%2Frc_buffer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_buffer.stderr?ref=e636b88aa180e8cab9e28802aac90adbc984234d", "patch": "@@ -0,0 +1,52 @@\n+error: usage of `Rc<T>` when T is a buffer type\n+  --> $DIR/rc_buffer.rs:10:11\n+   |\n+LL |     bad1: Rc<String>,\n+   |           ^^^^^^^^^^ help: try: `Rc<str>`\n+   |\n+   = note: `-D clippy::rc-buffer` implied by `-D warnings`\n+\n+error: usage of `Rc<T>` when T is a buffer type\n+  --> $DIR/rc_buffer.rs:11:11\n+   |\n+LL |     bad2: Rc<PathBuf>,\n+   |           ^^^^^^^^^^^ help: try: `Rc<std::path::Path>`\n+\n+error: usage of `Rc<T>` when T is a buffer type\n+  --> $DIR/rc_buffer.rs:12:11\n+   |\n+LL |     bad3: Rc<Vec<u8>>,\n+   |           ^^^^^^^^^^^ help: try: `Rc<[u8]>`\n+\n+error: usage of `Rc<T>` when T is a buffer type\n+  --> $DIR/rc_buffer.rs:13:11\n+   |\n+LL |     bad4: Rc<OsString>,\n+   |           ^^^^^^^^^^^^ help: try: `Rc<std::ffi::OsStr>`\n+\n+error: usage of `Rc<T>` when T is a buffer type\n+  --> $DIR/rc_buffer.rs:19:17\n+   |\n+LL | fn func_bad1(_: Rc<String>) {}\n+   |                 ^^^^^^^^^^ help: try: `Rc<str>`\n+\n+error: usage of `Rc<T>` when T is a buffer type\n+  --> $DIR/rc_buffer.rs:20:17\n+   |\n+LL | fn func_bad2(_: Rc<PathBuf>) {}\n+   |                 ^^^^^^^^^^^ help: try: `Rc<std::path::Path>`\n+\n+error: usage of `Rc<T>` when T is a buffer type\n+  --> $DIR/rc_buffer.rs:21:17\n+   |\n+LL | fn func_bad3(_: Rc<Vec<u8>>) {}\n+   |                 ^^^^^^^^^^^ help: try: `Rc<[u8]>`\n+\n+error: usage of `Rc<T>` when T is a buffer type\n+  --> $DIR/rc_buffer.rs:22:17\n+   |\n+LL | fn func_bad4(_: Rc<OsString>) {}\n+   |                 ^^^^^^^^^^^^ help: try: `Rc<std::ffi::OsStr>`\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "5d586584817bd26d70e7e6f75a90750242ba17b1", "filename": "tests/ui/rc_buffer_arc.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e636b88aa180e8cab9e28802aac90adbc984234d/tests%2Fui%2Frc_buffer_arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e636b88aa180e8cab9e28802aac90adbc984234d/tests%2Fui%2Frc_buffer_arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_buffer_arc.rs?ref=e636b88aa180e8cab9e28802aac90adbc984234d", "patch": "@@ -0,0 +1,25 @@\n+#![warn(clippy::rc_buffer)]\n+\n+use std::ffi::OsString;\n+use std::path::PathBuf;\n+use std::sync::{Arc, Mutex};\n+\n+struct S {\n+    // triggers lint\n+    bad1: Arc<String>,\n+    bad2: Arc<PathBuf>,\n+    bad3: Arc<Vec<u8>>,\n+    bad4: Arc<OsString>,\n+    // does not trigger lint\n+    good1: Arc<Mutex<String>>,\n+}\n+\n+// triggers lint\n+fn func_bad1(_: Arc<String>) {}\n+fn func_bad2(_: Arc<PathBuf>) {}\n+fn func_bad3(_: Arc<Vec<u8>>) {}\n+fn func_bad4(_: Arc<OsString>) {}\n+// does not trigger lint\n+fn func_good1(_: Arc<Mutex<String>>) {}\n+\n+fn main() {}"}, {"sha": "8252270d2ac7491ba1a7653e85388eb0ce432eea", "filename": "tests/ui/rc_buffer_arc.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e636b88aa180e8cab9e28802aac90adbc984234d/tests%2Fui%2Frc_buffer_arc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e636b88aa180e8cab9e28802aac90adbc984234d/tests%2Fui%2Frc_buffer_arc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_buffer_arc.stderr?ref=e636b88aa180e8cab9e28802aac90adbc984234d", "patch": "@@ -0,0 +1,52 @@\n+error: usage of `Arc<T>` when T is a buffer type\n+  --> $DIR/rc_buffer_arc.rs:9:11\n+   |\n+LL |     bad1: Arc<String>,\n+   |           ^^^^^^^^^^^ help: try: `Arc<str>`\n+   |\n+   = note: `-D clippy::rc-buffer` implied by `-D warnings`\n+\n+error: usage of `Arc<T>` when T is a buffer type\n+  --> $DIR/rc_buffer_arc.rs:10:11\n+   |\n+LL |     bad2: Arc<PathBuf>,\n+   |           ^^^^^^^^^^^^ help: try: `Arc<std::path::Path>`\n+\n+error: usage of `Arc<T>` when T is a buffer type\n+  --> $DIR/rc_buffer_arc.rs:11:11\n+   |\n+LL |     bad3: Arc<Vec<u8>>,\n+   |           ^^^^^^^^^^^^ help: try: `Arc<[u8]>`\n+\n+error: usage of `Arc<T>` when T is a buffer type\n+  --> $DIR/rc_buffer_arc.rs:12:11\n+   |\n+LL |     bad4: Arc<OsString>,\n+   |           ^^^^^^^^^^^^^ help: try: `Arc<std::ffi::OsStr>`\n+\n+error: usage of `Arc<T>` when T is a buffer type\n+  --> $DIR/rc_buffer_arc.rs:18:17\n+   |\n+LL | fn func_bad1(_: Arc<String>) {}\n+   |                 ^^^^^^^^^^^ help: try: `Arc<str>`\n+\n+error: usage of `Arc<T>` when T is a buffer type\n+  --> $DIR/rc_buffer_arc.rs:19:17\n+   |\n+LL | fn func_bad2(_: Arc<PathBuf>) {}\n+   |                 ^^^^^^^^^^^^ help: try: `Arc<std::path::Path>`\n+\n+error: usage of `Arc<T>` when T is a buffer type\n+  --> $DIR/rc_buffer_arc.rs:20:17\n+   |\n+LL | fn func_bad3(_: Arc<Vec<u8>>) {}\n+   |                 ^^^^^^^^^^^^ help: try: `Arc<[u8]>`\n+\n+error: usage of `Arc<T>` when T is a buffer type\n+  --> $DIR/rc_buffer_arc.rs:21:17\n+   |\n+LL | fn func_bad4(_: Arc<OsString>) {}\n+   |                 ^^^^^^^^^^^^^ help: try: `Arc<std::ffi::OsStr>`\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "5d31a848cf72c0166b889f4ffe83b00a14cd36b1", "filename": "tests/ui/rc_buffer_redefined_string.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e636b88aa180e8cab9e28802aac90adbc984234d/tests%2Fui%2Frc_buffer_redefined_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e636b88aa180e8cab9e28802aac90adbc984234d/tests%2Fui%2Frc_buffer_redefined_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_buffer_redefined_string.rs?ref=e636b88aa180e8cab9e28802aac90adbc984234d", "patch": "@@ -0,0 +1,12 @@\n+#![warn(clippy::rc_buffer)]\n+\n+use std::rc::Rc;\n+\n+struct String;\n+\n+struct S {\n+    // does not trigger lint\n+    good1: Rc<String>,\n+}\n+\n+fn main() {}"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/rc_buffer_redefined_string.stderr", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e636b88aa180e8cab9e28802aac90adbc984234d/tests%2Fui%2Frc_buffer_redefined_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e636b88aa180e8cab9e28802aac90adbc984234d/tests%2Fui%2Frc_buffer_redefined_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_buffer_redefined_string.stderr?ref=e636b88aa180e8cab9e28802aac90adbc984234d"}]}