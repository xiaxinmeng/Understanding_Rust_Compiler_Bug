{"sha": "cae6ab1c458ade22b4c228fcd4195917c96e2465", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhZTZhYjFjNDU4YWRlMjJiNGMyMjhmY2Q0MTk1OTE3Yzk2ZTI0NjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-05T11:32:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-05T11:32:04Z"}, "message": "Auto merge of #37470 - arthurprs:sip-smaller, r=alexcrichton\n\nDon't reuse RandomState seeds\n\ncc #36481", "tree": {"sha": "1bcb9eae7f22e64609f0a3f4abd2fccf41f203f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bcb9eae7f22e64609f0a3f4abd2fccf41f203f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cae6ab1c458ade22b4c228fcd4195917c96e2465", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cae6ab1c458ade22b4c228fcd4195917c96e2465", "html_url": "https://github.com/rust-lang/rust/commit/cae6ab1c458ade22b4c228fcd4195917c96e2465", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cae6ab1c458ade22b4c228fcd4195917c96e2465/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08839965f96ea9947afe936f13a66a0f4f93db73", "url": "https://api.github.com/repos/rust-lang/rust/commits/08839965f96ea9947afe936f13a66a0f4f93db73", "html_url": "https://github.com/rust-lang/rust/commit/08839965f96ea9947afe936f13a66a0f4f93db73"}, {"sha": "eba93c3a0f7cf8a0b7447ab22081ccd20824d9e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/eba93c3a0f7cf8a0b7447ab22081ccd20824d9e6", "html_url": "https://github.com/rust-lang/rust/commit/eba93c3a0f7cf8a0b7447ab22081ccd20824d9e6"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "ece51d6d82616753a762bc1c7c36705efe872d4f", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cae6ab1c458ade22b4c228fcd4195917c96e2465/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae6ab1c458ade22b4c228fcd4195917c96e2465/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=cae6ab1c458ade22b4c228fcd4195917c96e2465", "patch": "@@ -11,6 +11,7 @@\n use self::Entry::*;\n use self::VacantEntryState::*;\n \n+use cell::Cell;\n use borrow::Borrow;\n use cmp::max;\n use fmt::{self, Debug};\n@@ -2049,24 +2050,21 @@ impl RandomState {\n         // many hash maps are created on a thread. To solve this performance\n         // trap we cache the first set of randomly generated keys per-thread.\n         //\n-        // In doing this, however, we lose the property that all hash maps have\n-        // nondeterministic iteration order as all of those created on the same\n-        // thread would have the same hash keys. This property has been nice in\n-        // the past as it allows for maximal flexibility in the implementation\n-        // of `HashMap` itself.\n-        //\n-        // The constraint here (if there even is one) is just that maps created\n-        // on the same thread have the same iteration order, and that *may* be\n-        // relied upon even though it is not a documented guarantee at all of\n-        // the `HashMap` type. In any case we've decided that this is reasonable\n-        // for now, so caching keys thread-locally seems fine.\n-        thread_local!(static KEYS: (u64, u64) = {\n+        // Later in #36481 it was discovered that exposing a deterministic\n+        // iteration order allows a form of DOS attack. To counter that we\n+        // increment one of the seeds on every RandomState creation, giving\n+        // every corresponding HashMap a different iteration order.\n+        thread_local!(static KEYS: Cell<(u64, u64)> = {\n             let r = rand::OsRng::new();\n             let mut r = r.expect(\"failed to create an OS RNG\");\n-            (r.gen(), r.gen())\n+            Cell::new((r.gen(), r.gen()))\n         });\n \n-        KEYS.with(|&(k0, k1)| RandomState { k0: k0, k1: k1 })\n+        KEYS.with(|keys| {\n+            let (k0, k1) = keys.get();\n+            keys.set((k0.wrapping_add(1), k1));\n+            RandomState { k0: k0, k1: k1 }\n+        })\n     }\n }\n "}]}