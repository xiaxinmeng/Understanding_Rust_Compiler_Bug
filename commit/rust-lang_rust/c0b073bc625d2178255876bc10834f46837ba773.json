{"sha": "c0b073bc625d2178255876bc10834f46837ba773", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYjA3M2JjNjI1ZDIxNzgyNTU4NzZiYzEwODM0ZjQ2ODM3YmE3NzM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-07T11:54:31Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-10T07:35:23Z"}, "message": "simplify & improve parse_ty_tuple_or_parens", "tree": {"sha": "18ddee471baefd4c62a711b23d368df6b3b4aa41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18ddee471baefd4c62a711b23d368df6b3b4aa41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0b073bc625d2178255876bc10834f46837ba773", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0b073bc625d2178255876bc10834f46837ba773", "html_url": "https://github.com/rust-lang/rust/commit/c0b073bc625d2178255876bc10834f46837ba773", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0b073bc625d2178255876bc10834f46837ba773/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25cd01b863ce783e5f3300deecc12b22ae4e5336", "url": "https://api.github.com/repos/rust-lang/rust/commits/25cd01b863ce783e5f3300deecc12b22ae4e5336", "html_url": "https://github.com/rust-lang/rust/commit/25cd01b863ce783e5f3300deecc12b22ae4e5336"}], "stats": {"total": 169, "additions": 107, "deletions": 62}, "files": [{"sha": "08168cf7df988a53cdfb0f577681f1a20abc55bb", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c0b073bc625d2178255876bc10834f46837ba773/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b073bc625d2178255876bc10834f46837ba773/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=c0b073bc625d2178255876bc10834f46837ba773", "patch": "@@ -142,7 +142,7 @@ impl<'a> Parser<'a> {\n             } else {\n                 let path = self.parse_path(PathStyle::Type)?;\n                 let parse_plus = allow_plus == AllowPlus::Yes && self.check_plus();\n-                self.parse_remaining_bounds(lifetime_defs, path, lo, parse_plus)?\n+                self.parse_remaining_bounds_path(lifetime_defs, path, lo, parse_plus)?\n             }\n         } else if self.eat_keyword(kw::Impl) {\n             self.parse_impl_ty(&mut impl_dyn_multi)?\n@@ -203,21 +203,12 @@ impl<'a> Parser<'a> {\n             match ty.kind {\n                 // `(TY_BOUND_NOPAREN) + BOUND + ...`.\n                 TyKind::Path(None, path) if maybe_bounds => {\n-                    self.parse_remaining_bounds(Vec::new(), path, lo, true)\n+                    self.parse_remaining_bounds_path(Vec::new(), path, lo, true)\n                 }\n-                TyKind::TraitObject(mut bounds, TraitObjectSyntax::None)\n+                TyKind::TraitObject(bounds, TraitObjectSyntax::None)\n                     if maybe_bounds && bounds.len() == 1 && !trailing_plus =>\n                 {\n-                    let path = match bounds.remove(0) {\n-                        GenericBound::Trait(pt, ..) => pt.trait_ref.path,\n-                        GenericBound::Outlives(..) => {\n-                            return Err(self.struct_span_err(\n-                                ty.span,\n-                                \"expected trait bound, not lifetime bound\",\n-                            ));\n-                        }\n-                    };\n-                    self.parse_remaining_bounds(Vec::new(), path, lo, true)\n+                    self.parse_remaining_bounds(bounds, true)\n                 }\n                 // `(TYPE)`\n                 _ => Ok(TyKind::Paren(P(ty))),\n@@ -227,18 +218,26 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    fn parse_remaining_bounds(\n+    fn parse_remaining_bounds_path(\n         &mut self,\n         generic_params: Vec<GenericParam>,\n         path: ast::Path,\n         lo: Span,\n         parse_plus: bool,\n     ) -> PResult<'a, TyKind> {\n-        assert_ne!(self.token, token::Question);\n-\n         let poly_trait_ref = PolyTraitRef::new(generic_params, path, lo.to(self.prev_token.span));\n-        let mut bounds = vec![GenericBound::Trait(poly_trait_ref, TraitBoundModifier::None)];\n-        if parse_plus {\n+        let bounds = vec![GenericBound::Trait(poly_trait_ref, TraitBoundModifier::None)];\n+        self.parse_remaining_bounds(bounds, parse_plus)\n+    }\n+\n+    /// Parse the remainder of a bare trait object type given an already parsed list.\n+    fn parse_remaining_bounds(\n+        &mut self,\n+        mut bounds: GenericBounds,\n+        plus: bool,\n+    ) -> PResult<'a, TyKind> {\n+        assert_ne!(self.token, token::Question);\n+        if plus {\n             self.eat_plus(); // `+`, or `+=` gets split and `+` is discarded\n             bounds.append(&mut self.parse_generic_bounds(Some(self.prev_token.span))?);\n         }\n@@ -358,7 +357,7 @@ impl<'a> Parser<'a> {\n             }))\n         } else if allow_plus == AllowPlus::Yes && self.check_plus() {\n             // `Trait1 + Trait2 + 'a`\n-            self.parse_remaining_bounds(Vec::new(), path, lo, true)\n+            self.parse_remaining_bounds_path(Vec::new(), path, lo, true)\n         } else {\n             // Just a type path.\n             Ok(TyKind::Path(None, path))"}, {"sha": "ae02246046880e48ddfd4c9ce46310f74fee1e92", "filename": "src/test/ui/parser/issue-68890-2.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c0b073bc625d2178255876bc10834f46837ba773/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b073bc625d2178255876bc10834f46837ba773/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.rs?ref=c0b073bc625d2178255876bc10834f46837ba773", "patch": "@@ -1,3 +1,6 @@\n-type X = (?'a) +;\n+fn main() {}\n+\n+type X<'a> = (?'a) +;\n //~^ ERROR `?` may only modify trait bounds, not lifetime bounds\n-//~| ERROR expected trait bound, not lifetime bound\n+//~| ERROR at least one trait is required for an object type\n+//~| WARN trait objects without an explicit `dyn` are deprecated"}, {"sha": "d475c79cb27b4522a6ccbd33383a1c6e0ae5b23e", "filename": "src/test/ui/parser/issue-68890-2.stderr", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c0b073bc625d2178255876bc10834f46837ba773/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b073bc625d2178255876bc10834f46837ba773/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.stderr?ref=c0b073bc625d2178255876bc10834f46837ba773", "patch": "@@ -1,14 +1,22 @@\n error: `?` may only modify trait bounds, not lifetime bounds\n-  --> $DIR/issue-68890-2.rs:1:11\n+  --> $DIR/issue-68890-2.rs:3:15\n    |\n-LL | type X = (?'a) +;\n-   |           ^\n+LL | type X<'a> = (?'a) +;\n+   |               ^\n \n-error: expected trait bound, not lifetime bound\n-  --> $DIR/issue-68890-2.rs:1:11\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/issue-68890-2.rs:3:14\n    |\n-LL | type X = (?'a) +;\n-   |           ^^^\n+LL | type X<'a> = (?'a) +;\n+   |              ^^^^^^^ help: use `dyn`: `dyn (?'a) +`\n+   |\n+   = note: `#[warn(bare_trait_objects)]` on by default\n+\n+error[E0224]: at least one trait is required for an object type\n+  --> $DIR/issue-68890-2.rs:3:14\n+   |\n+LL | type X<'a> = (?'a) +;\n+   |              ^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bab4ed7f800c5d7dcf32f2c344542703016cb4c7", "filename": "src/test/ui/parser/issue-68890.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0b073bc625d2178255876bc10834f46837ba773/src%2Ftest%2Fui%2Fparser%2Fissue-68890.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b073bc625d2178255876bc10834f46837ba773/src%2Ftest%2Fui%2Fparser%2Fissue-68890.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-68890.rs?ref=c0b073bc625d2178255876bc10834f46837ba773", "patch": "@@ -1,4 +1,4 @@\n enum e{A((?'a a+?+l))}\n //~^ ERROR `?` may only modify trait bounds, not lifetime bounds\n //~| ERROR expected one of `)`, `+`, or `,`\n-//~| ERROR expected trait bound, not lifetime bound\n+//~| ERROR expected item, found `)`"}, {"sha": "2a3bf6b41f02ea7c363eebc582786a62d4f7559a", "filename": "src/test/ui/parser/issue-68890.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0b073bc625d2178255876bc10834f46837ba773/src%2Ftest%2Fui%2Fparser%2Fissue-68890.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b073bc625d2178255876bc10834f46837ba773/src%2Ftest%2Fui%2Fparser%2Fissue-68890.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-68890.stderr?ref=c0b073bc625d2178255876bc10834f46837ba773", "patch": "@@ -10,11 +10,11 @@ error: expected one of `)`, `+`, or `,`, found `a`\n LL | enum e{A((?'a a+?+l))}\n    |               ^ expected one of `)`, `+`, or `,`\n \n-error: expected trait bound, not lifetime bound\n-  --> $DIR/issue-68890.rs:1:11\n+error: expected item, found `)`\n+  --> $DIR/issue-68890.rs:1:21\n    |\n LL | enum e{A((?'a a+?+l))}\n-   |           ^^^\n+   |                     ^ expected item\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9fbc938c4dce81e290668ffab3ebddfc3e993db3", "filename": "src/test/ui/parser/trait-object-trait-parens.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c0b073bc625d2178255876bc10834f46837ba773/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0b073bc625d2178255876bc10834f46837ba773/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.rs?ref=c0b073bc625d2178255876bc10834f46837ba773", "patch": "@@ -1,15 +1,20 @@\n trait Trait<'a> {}\n \n+trait Obj {}\n+\n fn f<T: (Copy) + (?Sized) + (for<'a> Trait<'a>)>() {}\n \n fn main() {\n-    let _: Box<(Copy) + (?Sized) + (for<'a> Trait<'a>)>;\n+    let _: Box<(Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n+    //~^ ERROR `?Trait` is not permitted in trait object types\n+    //~| ERROR only auto traits can be used as additional traits\n+    //~| WARN trait objects without an explicit `dyn` are deprecated\n+    let _: Box<(?Sized) + (for<'a> Trait<'a>) + (Obj)>;\n     //~^ ERROR `?Trait` is not permitted in trait object types\n+    //~| ERROR only auto traits can be used as additional traits\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n-    let _: Box<(?Sized) + (for<'a> Trait<'a>) + (Copy)>;\n-    //~^ WARN trait objects without an explicit `dyn` are deprecated\n-    let _: Box<(for<'a> Trait<'a>) + (Copy) + (?Sized)>;\n-    //~^ ERROR use of undeclared lifetime name `'a`\n-    //~| ERROR `?Trait` is not permitted in trait object types\n+    let _: Box<(for<'a> Trait<'a>) + (Obj) + (?Sized)>;\n+    //~^ ERROR `?Trait` is not permitted in trait object types\n+    //~| ERROR only auto traits can be used as additional traits\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n }"}, {"sha": "7022a66ca1a17be179961799c2bba804dbaa4cc8", "filename": "src/test/ui/parser/trait-object-trait-parens.stderr", "status": "modified", "additions": 54, "deletions": 24, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/c0b073bc625d2178255876bc10834f46837ba773/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0b073bc625d2178255876bc10834f46837ba773/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr?ref=c0b073bc625d2178255876bc10834f46837ba773", "patch": "@@ -1,44 +1,74 @@\n error: `?Trait` is not permitted in trait object types\n-  --> $DIR/trait-object-trait-parens.rs:6:25\n+  --> $DIR/trait-object-trait-parens.rs:8:24\n    |\n-LL |     let _: Box<(Copy) + (?Sized) + (for<'a> Trait<'a>)>;\n-   |                         ^^^^^^^^\n+LL |     let _: Box<(Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n+   |                        ^^^^^^^^\n \n error: `?Trait` is not permitted in trait object types\n-  --> $DIR/trait-object-trait-parens.rs:11:47\n+  --> $DIR/trait-object-trait-parens.rs:12:17\n    |\n-LL |     let _: Box<(for<'a> Trait<'a>) + (Copy) + (?Sized)>;\n-   |                                               ^^^^^^^^\n+LL |     let _: Box<(?Sized) + (for<'a> Trait<'a>) + (Obj)>;\n+   |                 ^^^^^^\n+\n+error: `?Trait` is not permitted in trait object types\n+  --> $DIR/trait-object-trait-parens.rs:16:46\n+   |\n+LL |     let _: Box<(for<'a> Trait<'a>) + (Obj) + (?Sized)>;\n+   |                                              ^^^^^^^^\n \n warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/trait-object-trait-parens.rs:6:16\n+  --> $DIR/trait-object-trait-parens.rs:8:16\n    |\n-LL |     let _: Box<(Copy) + (?Sized) + (for<'a> Trait<'a>)>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn (Copy) + (?Sized) + (for<'a> Trait<'a>)`\n+LL |     let _: Box<(Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn (Obj) + (?Sized) + (for<'a> Trait<'a>)`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n \n warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/trait-object-trait-parens.rs:9:16\n+  --> $DIR/trait-object-trait-parens.rs:12:16\n    |\n-LL |     let _: Box<(?Sized) + (for<'a> Trait<'a>) + (Copy)>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn (?Sized) + (for<'a> Trait<'a>) + (Copy)`\n+LL |     let _: Box<(?Sized) + (for<'a> Trait<'a>) + (Obj)>;\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn (?Sized) + (for<'a> Trait<'a>) + (Obj)`\n \n warning: trait objects without an explicit `dyn` are deprecated\n-  --> $DIR/trait-object-trait-parens.rs:11:16\n+  --> $DIR/trait-object-trait-parens.rs:16:16\n+   |\n+LL |     let _: Box<(for<'a> Trait<'a>) + (Obj) + (?Sized)>;\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn (for<'a> Trait<'a>) + (Obj) + (?Sized)`\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-object-trait-parens.rs:8:35\n+   |\n+LL |     let _: Box<(Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n+   |                -----              ^^^^^^^^^^^^^^^^^^^\n+   |                |                  |\n+   |                |                  additional non-auto trait\n+   |                |                  trait alias used in trait object type (additional use)\n+   |                first non-auto trait\n+   |                trait alias used in trait object type (first use)\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-object-trait-parens.rs:12:49\n    |\n-LL |     let _: Box<(for<'a> Trait<'a>) + (Copy) + (?Sized)>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn (for<'a> Trait<'a>) + (Copy) + (?Sized)`\n+LL |     let _: Box<(?Sized) + (for<'a> Trait<'a>) + (Obj)>;\n+   |                           -------------------   ^^^^^\n+   |                           |                     |\n+   |                           |                     additional non-auto trait\n+   |                           |                     trait alias used in trait object type (additional use)\n+   |                           first non-auto trait\n+   |                           trait alias used in trait object type (first use)\n \n-error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/trait-object-trait-parens.rs:11:31\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-object-trait-parens.rs:16:38\n    |\n-LL | fn main() {\n-   |        - help: consider introducing lifetime `'a` here: `<'a>`\n-...\n-LL |     let _: Box<(for<'a> Trait<'a>) + (Copy) + (?Sized)>;\n-   |                               ^^ undeclared lifetime\n+LL |     let _: Box<(for<'a> Trait<'a>) + (Obj) + (?Sized)>;\n+   |                 -----------------    ^^^^^\n+   |                 |                    |\n+   |                 |                    additional non-auto trait\n+   |                 |                    trait alias used in trait object type (additional use)\n+   |                 first non-auto trait\n+   |                 trait alias used in trait object type (first use)\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0261`.\n+For more information about this error, try `rustc --explain E0225`."}]}