{"sha": "99e39f4927408d25c8b9033f33738b672d870bb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZTM5ZjQ5Mjc0MDhkMjVjOGI5MDMzZjMzNzM4YjY3MmQ4NzBiYjY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-15T11:07:36Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-16T06:19:09Z"}, "message": "Clean up visit_attribute in feature_gate.rs\n\n - We shouldn't be using `check_name` here at all\n - `contains_name(ref_slice(foo), bar)` is redundant, `contains_name` just iterates over its first arg and calls `check_name`\n - match would be better than a bunch of ifs", "tree": {"sha": "876c42bb7bcbbc6bcd51e6b367059608f5f5cd26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/876c42bb7bcbbc6bcd51e6b367059608f5f5cd26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99e39f4927408d25c8b9033f33738b672d870bb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99e39f4927408d25c8b9033f33738b672d870bb6", "html_url": "https://github.com/rust-lang/rust/commit/99e39f4927408d25c8b9033f33738b672d870bb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99e39f4927408d25c8b9033f33738b672d870bb6/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38542cca29a0ed6f62b18d543386852e5a544adc", "url": "https://api.github.com/repos/rust-lang/rust/commits/38542cca29a0ed6f62b18d543386852e5a544adc", "html_url": "https://github.com/rust-lang/rust/commit/38542cca29a0ed6f62b18d543386852e5a544adc"}], "stats": {"total": 63, "additions": 26, "deletions": 37}, "files": [{"sha": "62eb5badb77a6e8f28941f6c2728084c385d3d36", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 26, "deletions": 37, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/99e39f4927408d25c8b9033f33738b672d870bb6/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e39f4927408d25c8b9033f33738b672d870bb6/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=99e39f4927408d25c8b9033f33738b672d870bb6", "patch": "@@ -36,7 +36,6 @@ use visit;\n use visit::Visitor;\n use parse::token::{self, InternedString};\n \n-use std::slice;\n use std::ascii::AsciiExt;\n \n // If you change this list without updating src/doc/reference.md, @cmr will be sad\n@@ -574,42 +573,32 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n     }\n \n     fn visit_attribute(&mut self, attr: &ast::Attribute) {\n-        if attr.check_name(\"staged_api\") {\n-            self.gate_feature(\"staged_api\", attr.span,\n-                              \"staged_api is for use by rustc only\");\n-        } else if attr.check_name(\"plugin\") {\n-            self.gate_feature(\"plugin\", attr.span,\n-                              \"compiler plugins are experimental \\\n-                               and possibly buggy\");\n-        }\n-\n-        if attr::contains_name(slice::ref_slice(attr), \"lang\") {\n-            self.gate_feature(\"lang_items\",\n-                              attr.span,\n-                              \"language items are subject to change\");\n-        }\n-\n-        if attr.check_name(\"no_std\") {\n-            self.gate_feature(\"no_std\", attr.span,\n-                              \"no_std is experimental\");\n-        }\n-\n-        if attr.check_name(\"unsafe_no_drop_flag\") {\n-            self.gate_feature(\"unsafe_no_drop_flag\", attr.span,\n-                              \"unsafe_no_drop_flag has unstable semantics \\\n-                               and may be removed in the future\");\n-        }\n-\n-        // Custom attribute check\n-        let name = attr.name();\n-\n-        if KNOWN_ATTRIBUTES.iter().all(|&(n, _)| n != name) {\n-            self.gate_feature(\"custom_attribute\", attr.span,\n-                       format!(\"The attribute `{}` is currently \\\n-                                unknown to the the compiler and \\\n-                                may have meaning \\\n-                                added to it in the future\",\n-                                attr.name()).as_slice());\n+        match &*attr.name() {\n+            \"staged_api\" => self.gate_feature(\"staged_api\", attr.span,\n+                                              \"staged_api is for use by rustc only\"),\n+            \"plugin\" => self.gate_feature(\"plugin\", attr.span,\n+                                          \"compiler plugins are experimental \\\n+                                           and possibly buggy\"),\n+            \"no_std\" => self.gate_feature(\"no_std\", attr.span,\n+                                          \"no_std is experimental\"),\n+            \"unsafe_no_drop_flag\" => self.gate_feature(\"unsafe_no_drop_flag\", attr.span,\n+                                                       \"unsafe_no_drop_flag has unstable \\\n+                                                        semantics and may be removed \\\n+                                                        in the future\"),\n+            \"lang\" => self.gate_feature(\"lang_items\",\n+                                        attr.span,\n+                                        \"language items are subject to change\"),\n+            name => {\n+                // Custom attribute check\n+                if KNOWN_ATTRIBUTES.iter().all(|&(n, _)| n != name) {\n+                    self.gate_feature(\"custom_attribute\", attr.span,\n+                               format!(\"The attribute `{}` is currently \\\n+                                        unknown to the the compiler and \\\n+                                        may have meaning \\\n+                                        added to it in the future\",\n+                                        attr.name()).as_slice());\n+                }\n+            }\n         }\n     }\n "}]}