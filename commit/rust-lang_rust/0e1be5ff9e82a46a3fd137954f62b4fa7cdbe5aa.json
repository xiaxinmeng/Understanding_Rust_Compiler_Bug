{"sha": "0e1be5ff9e82a46a3fd137954f62b4fa7cdbe5aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMWJlNWZmOWU4MmE0NmEzZmQxMzc5NTRmNjJiNGZhN2NkYmU1YWE=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-16T01:28:37Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-20T09:08:58Z"}, "message": "Fix linked failure tests to block forever instead of looping around yield.", "tree": {"sha": "c35342ee84f18c4943894a070ffcc2a618ba49f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c35342ee84f18c4943894a070ffcc2a618ba49f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e1be5ff9e82a46a3fd137954f62b4fa7cdbe5aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e1be5ff9e82a46a3fd137954f62b4fa7cdbe5aa", "html_url": "https://github.com/rust-lang/rust/commit/0e1be5ff9e82a46a3fd137954f62b4fa7cdbe5aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e1be5ff9e82a46a3fd137954f62b4fa7cdbe5aa/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "728edb5af6917956596bd19f4298137df97c44f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/728edb5af6917956596bd19f4298137df97c44f3", "html_url": "https://github.com/rust-lang/rust/commit/728edb5af6917956596bd19f4298137df97c44f3"}], "stats": {"total": 42, "additions": 13, "deletions": 29}, "files": [{"sha": "04ce24724484aaf54d7cffd4ebe22c990b768eb6", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 13, "deletions": 29, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0e1be5ff9e82a46a3fd137954f62b4fa7cdbe5aa/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e1be5ff9e82a46a3fd137954f62b4fa7cdbe5aa/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=0e1be5ff9e82a46a3fd137954f62b4fa7cdbe5aa", "patch": "@@ -683,6 +683,9 @@ fn test_cant_dup_task_builder() {\n // !!! These tests are dangerous. If Something is buggy, they will hang, !!!\n // !!! instead of exiting cleanly. This might wedge the buildbots.       !!!\n \n+#[cfg(test)]\n+fn block_forever() { let (po, _ch) = stream::<()>(); po.recv(); }\n+\n #[test] #[ignore(cfg(windows))]\n fn test_spawn_unlinked_unsup_no_fail_down() { // grandchild sends on a port\n     let (po, ch) = stream();\n@@ -710,14 +713,12 @@ fn test_spawn_unlinked_sup_no_fail_up() { // child unlinked fails\n }\n #[test] #[should_fail] #[ignore(cfg(windows))]\n fn test_spawn_unlinked_sup_fail_down() {\n-    do spawn_supervised { loop { task::yield(); } }\n+    do spawn_supervised { block_forever(); }\n     fail!(); // Shouldn't leave a child hanging around.\n }\n \n #[test] #[should_fail] #[ignore(cfg(windows))]\n fn test_spawn_linked_sup_fail_up() { // child fails; parent fails\n-    let (po, _ch) = stream::<()>();\n-\n     // Unidirectional \"parenting\" shouldn't override bidirectional linked.\n     // We have to cheat with opts - the interface doesn't support them because\n     // they don't make sense (redundant with task().supervised()).\n@@ -728,7 +729,7 @@ fn test_spawn_linked_sup_fail_up() { // child fails; parent fails\n     do b0.spawn {\n         fail!();\n     }\n-    po.recv(); // We should get punted awake\n+    block_forever(); // We should get punted awake\n }\n #[test] #[should_fail] #[ignore(cfg(windows))]\n fn test_spawn_linked_sup_fail_down() { // parent fails; child fails\n@@ -737,36 +738,27 @@ fn test_spawn_linked_sup_fail_down() { // parent fails; child fails\n     let mut b0 = task();\n     b0.opts.linked = true;\n     b0.opts.supervised = true;\n-    do b0.spawn {\n-        loop {\n-            task::yield();\n-        }\n-    }\n+    do b0.spawn { block_forever(); }\n     fail!(); // *both* mechanisms would be wrong if this didn't kill the child\n }\n #[test] #[should_fail] #[ignore(cfg(windows))]\n fn test_spawn_linked_unsup_fail_up() { // child fails; parent fails\n-    let (po, _ch) = stream::<()>();\n     // Default options are to spawn linked & unsupervised.\n     do spawn { fail!(); }\n-    po.recv(); // We should get punted awake\n+    block_forever(); // We should get punted awake\n }\n #[test] #[should_fail] #[ignore(cfg(windows))]\n fn test_spawn_linked_unsup_fail_down() { // parent fails; child fails\n     // Default options are to spawn linked & unsupervised.\n-    do spawn { loop { task::yield(); } }\n+    do spawn { block_forever(); }\n     fail!();\n }\n #[test] #[should_fail] #[ignore(cfg(windows))]\n fn test_spawn_linked_unsup_default_opts() { // parent fails; child fails\n     // Make sure the above test is the same as this one.\n     let mut builder = task();\n     builder.linked();\n-    do builder.spawn {\n-        loop {\n-            task::yield();\n-        }\n-    }\n+    do builder.spawn { block_forever(); }\n     fail!();\n }\n \n@@ -777,9 +769,7 @@ fn test_spawn_linked_unsup_default_opts() { // parent fails; child fails\n fn test_spawn_failure_propagate_grandchild() {\n     // Middle task exits; does grandparent's failure propagate across the gap?\n     do spawn_supervised {\n-        do spawn_supervised {\n-            loop { task::yield(); }\n-        }\n+        do spawn_supervised { block_forever(); }\n     }\n     for 16.times { task::yield(); }\n     fail!();\n@@ -789,9 +779,7 @@ fn test_spawn_failure_propagate_grandchild() {\n fn test_spawn_failure_propagate_secondborn() {\n     // First-born child exits; does parent's failure propagate to sibling?\n     do spawn_supervised {\n-        do spawn { // linked\n-            loop { task::yield(); }\n-        }\n+        do spawn { block_forever(); } // linked\n     }\n     for 16.times { task::yield(); }\n     fail!();\n@@ -801,9 +789,7 @@ fn test_spawn_failure_propagate_secondborn() {\n fn test_spawn_failure_propagate_nephew_or_niece() {\n     // Our sibling exits; does our failure propagate to sibling's child?\n     do spawn { // linked\n-        do spawn_supervised {\n-            loop { task::yield(); }\n-        }\n+        do spawn_supervised { block_forever(); }\n     }\n     for 16.times { task::yield(); }\n     fail!();\n@@ -813,9 +799,7 @@ fn test_spawn_failure_propagate_nephew_or_niece() {\n fn test_spawn_linked_sup_propagate_sibling() {\n     // Middle sibling exits - does eldest's failure propagate to youngest?\n     do spawn { // linked\n-        do spawn { // linked\n-            loop { task::yield(); }\n-        }\n+        do spawn { block_forever(); } // linked\n     }\n     for 16.times { task::yield(); }\n     fail!();"}]}