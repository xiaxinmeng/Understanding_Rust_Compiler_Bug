{"sha": "6952470095180e74d59ae372d06a75818368000b", "node_id": "C_kwDOAAsO6NoAKDY5NTI0NzAwOTUxODBlNzRkNTlhZTM3MmQwNmE3NTgxODM2ODAwMGI", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2021-12-01T12:14:19Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2021-12-01T12:15:59Z"}, "message": "rebase", "tree": {"sha": "a3a198a8bdf76ea3cce8b24b161fa12611c85a7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3a198a8bdf76ea3cce8b24b161fa12611c85a7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6952470095180e74d59ae372d06a75818368000b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6952470095180e74d59ae372d06a75818368000b", "html_url": "https://github.com/rust-lang/rust/commit/6952470095180e74d59ae372d06a75818368000b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6952470095180e74d59ae372d06a75818368000b/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d9a0bf21b5429c9e3d08b4a735c40d60114ba5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d9a0bf21b5429c9e3d08b4a735c40d60114ba5f", "html_url": "https://github.com/rust-lang/rust/commit/4d9a0bf21b5429c9e3d08b4a735c40d60114ba5f"}], "stats": {"total": 50, "additions": 19, "deletions": 31}, "files": [{"sha": "fce7cbfbb3d1e58f3e8d6e254eb64b1287cc3d58", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 19, "deletions": 31, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6952470095180e74d59ae372d06a75818368000b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6952470095180e74d59ae372d06a75818368000b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=6952470095180e74d59ae372d06a75818368000b", "patch": "@@ -90,12 +90,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             Ok(value)\n         } else {\n             let mut folder = TryNormalizeAfterErasingRegionsFolder::new(self, param_env);\n-            let result = value.fold_with(&mut folder);\n-\n-            match folder.found_normalization_error() {\n-                Some(e) => Err(e),\n-                None => Ok(result),\n-            }\n+            value.fold_with(&mut folder)\n         }\n     }\n \n@@ -191,12 +186,11 @@ impl TypeFolder<'tcx> for NormalizeAfterErasingRegionsFolder<'tcx> {\n struct TryNormalizeAfterErasingRegionsFolder<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    normalization_error: Option<NormalizationError<'tcx>>,\n }\n \n impl<'tcx> TryNormalizeAfterErasingRegionsFolder<'tcx> {\n     fn new(tcx: TyCtxt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> Self {\n-        TryNormalizeAfterErasingRegionsFolder { tcx, param_env, normalization_error: None }\n+        TryNormalizeAfterErasingRegionsFolder { tcx, param_env }\n     }\n \n     #[instrument(skip(self), level = \"debug\")]\n@@ -209,47 +203,41 @@ impl<'tcx> TryNormalizeAfterErasingRegionsFolder<'tcx> {\n \n         self.tcx.try_normalize_generic_arg_after_erasing_regions(arg)\n     }\n-\n-    pub fn found_normalization_error(&self) -> Option<NormalizationError<'tcx>> {\n-        self.normalization_error\n-    }\n }\n \n impl TypeFolder<'tcx> for TryNormalizeAfterErasingRegionsFolder<'tcx> {\n+    type Error = NormalizationError<'tcx>;\n+\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n-    fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n+    fn fold_ty(&mut self, ty: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {\n         match self.try_normalize_generic_arg_after_erasing_regions(ty.into()) {\n-            Ok(t) => t.expect_ty(),\n-            Err(_) => {\n-                self.normalization_error = Some(NormalizationError::Type(ty));\n-                ty\n-            }\n+            Ok(t) => Ok(t.expect_ty()),\n+            Err(_) => Err(NormalizationError::Type(ty)),\n         }\n     }\n \n-    fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n+    fn fold_const(\n+        &mut self,\n+        c: &'tcx ty::Const<'tcx>,\n+    ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {\n         match self.try_normalize_generic_arg_after_erasing_regions(c.into()) {\n-            Ok(t) => t.expect_const(),\n-            Err(_) => {\n-                self.normalization_error = Some(NormalizationError::Const(*c));\n-                c\n-            }\n+            Ok(t) => Ok(t.expect_const()),\n+            Err(_) => Err(NormalizationError::Const(*c)),\n         }\n     }\n \n-    #[inline]\n-    fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {\n+    fn fold_mir_const(\n+        &mut self,\n+        c: mir::ConstantKind<'tcx>,\n+    ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {\n         // FIXME: This *probably* needs canonicalization too!\n         let arg = self.param_env.and(c);\n         match self.tcx.try_normalize_mir_const_after_erasing_regions(arg) {\n-            Ok(c) => c,\n-            Err(_) => {\n-                self.normalization_error = Some(NormalizationError::ConstantKind(c));\n-                c\n-            }\n+            Ok(c) => Ok(c),\n+            Err(_) => Err(NormalizationError::ConstantKind(c)),\n         }\n     }\n }"}]}