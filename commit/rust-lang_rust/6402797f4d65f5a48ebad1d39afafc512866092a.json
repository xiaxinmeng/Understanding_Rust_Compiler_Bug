{"sha": "6402797f4d65f5a48ebad1d39afafc512866092a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MDI3OTdmNGQ2NWY1YTQ4ZWJhZDFkMzlhZmFmYzUxMjg2NjA5MmE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-10-25T19:02:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-25T19:02:50Z"}, "message": "Rollup merge of #45398 - integer32llc:reassignment, r=arielb1\n\nCorrect misspelling in error text: re-assignment => reassignment\n\n[reassignment is the correct spelling](https://www.thefreedictionary.com/reassignment) rather than re-assignment; this error message looks silly in the book next to text trying to be grammatically correct :-/\n\nWill this cause any stability/backcompat type issues?", "tree": {"sha": "ad46debbd6719e73503161274f102e45f1393ea8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad46debbd6719e73503161274f102e45f1393ea8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6402797f4d65f5a48ebad1d39afafc512866092a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6402797f4d65f5a48ebad1d39afafc512866092a", "html_url": "https://github.com/rust-lang/rust/commit/6402797f4d65f5a48ebad1d39afafc512866092a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6402797f4d65f5a48ebad1d39afafc512866092a/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc48893845980f4b9c1ce019dac09e3b81ba8c53", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc48893845980f4b9c1ce019dac09e3b81ba8c53", "html_url": "https://github.com/rust-lang/rust/commit/fc48893845980f4b9c1ce019dac09e3b81ba8c53"}, {"sha": "0e46cf4db4fdb8b2fd8cc0dde2425a16d478d8ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e46cf4db4fdb8b2fd8cc0dde2425a16d478d8ed", "html_url": "https://github.com/rust-lang/rust/commit/0e46cf4db4fdb8b2fd8cc0dde2425a16d478d8ed"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "add128cc2cf6a16633cbe13ef75c0412dc36cc3c", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6402797f4d65f5a48ebad1d39afafc512866092a/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6402797f4d65f5a48ebad1d39afafc512866092a/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=6402797f4d65f5a48ebad1d39afafc512866092a", "patch": "@@ -744,7 +744,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         let mut err = self.cannot_reassign_immutable(span,\n                                                      &self.loan_path_to_string(lp),\n                                                      Origin::Ast);\n-        err.span_label(span, \"re-assignment of immutable variable\");\n+        err.span_label(span, \"cannot assign twice to immutable variable\");\n         if span != assign.span {\n             err.span_label(assign.span, format!(\"first assignment to `{}`\",\n                                               self.loan_path_to_string(lp)));"}, {"sha": "ee2ef00be57b6d1751ca4592c67592ea5bf465e7", "filename": "src/librustc_mir/borrow_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6402797f4d65f5a48ebad1d39afafc512866092a/src%2Flibrustc_mir%2Fborrow_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6402797f4d65f5a48ebad1d39afafc512866092a/src%2Flibrustc_mir%2Fborrow_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check.rs?ref=6402797f4d65f5a48ebad1d39afafc512866092a", "patch": "@@ -1161,7 +1161,7 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n         self.tcx.cannot_reassign_immutable(span,\n                                            &self.describe_lvalue(lvalue),\n                                            Origin::Mir)\n-                .span_label(span, \"re-assignment of immutable variable\")\n+                .span_label(span, \"cannot assign twice to immutable variable\")\n                 .span_label(assigned_span, format!(\"first assignment to `{}`\",\n                                                    self.describe_lvalue(lvalue)))\n                 .emit();"}, {"sha": "5451da2148e7ddc5dfd96c83597634371f108041", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6402797f4d65f5a48ebad1d39afafc512866092a/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6402797f4d65f5a48ebad1d39afafc512866092a/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=6402797f4d65f5a48ebad1d39afafc512866092a", "patch": "@@ -232,7 +232,7 @@ pub trait BorrowckErrors {\n                                  -> DiagnosticBuilder\n     {\n         struct_span_err!(self, span, E0384,\n-                         \"re-assignment of immutable variable `{}`{OGN}\",\n+                         \"cannot assign twice to immutable variable `{}`{OGN}\",\n                          desc, OGN=o)\n     }\n "}, {"sha": "f2629fa52ffddc6ff1ff1b8a48159e1e5363f140", "filename": "src/test/compile-fail/asm-out-assign-imm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6402797f4d65f5a48ebad1d39afafc512866092a/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6402797f4d65f5a48ebad1d39afafc512866092a/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs?ref=6402797f4d65f5a48ebad1d39afafc512866092a", "patch": "@@ -27,8 +27,8 @@ pub fn main() {\n     foo(x);\n     unsafe {\n         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5));\n-        //~^ ERROR re-assignment of immutable variable `x`\n-        //~| NOTE re-assignment of immutable\n+        //~^ ERROR cannot assign twice to immutable variable `x`\n+        //~| NOTE cannot assign twice to immutable\n     }\n     foo(x);\n }"}, {"sha": "5b3b7d44bd2b9d7f3956336a56feafa1a35ba1ba", "filename": "src/test/compile-fail/assign-imm-local-twice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6402797f4d65f5a48ebad1d39afafc512866092a/src%2Ftest%2Fcompile-fail%2Fassign-imm-local-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6402797f4d65f5a48ebad1d39afafc512866092a/src%2Ftest%2Fcompile-fail%2Fassign-imm-local-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-imm-local-twice.rs?ref=6402797f4d65f5a48ebad1d39afafc512866092a", "patch": "@@ -12,8 +12,8 @@ fn test() {\n     let v: isize;\n     v = 1; //~ NOTE first assignment\n     println!(\"v={}\", v);\n-    v = 2; //~ ERROR re-assignment of immutable variable\n-           //~| NOTE re-assignment of immutable\n+    v = 2; //~ ERROR cannot assign twice to immutable variable\n+           //~| NOTE cannot assign twice to immutable\n     println!(\"v={}\", v);\n }\n "}, {"sha": "ea30911b3cc797434b2d03c78142bc4300f9c697", "filename": "src/test/compile-fail/borrowck/borrowck-match-binding-is-assignment.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6402797f4d65f5a48ebad1d39afafc512866092a/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-match-binding-is-assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6402797f4d65f5a48ebad1d39afafc512866092a/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-match-binding-is-assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-match-binding-is-assignment.rs?ref=6402797f4d65f5a48ebad1d39afafc512866092a", "patch": "@@ -26,39 +26,39 @@ struct S {\n pub fn main() {\n     match 1 {\n         x => {\n-            x += 1; //[ast]~ ERROR re-assignment of immutable variable `x`\n+            x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n                     //[mir]~^ ERROR (Mir) [E0384]\n                     //[mir]~| ERROR (Ast) [E0384]\n         }\n     }\n \n     match E::Foo(1) {\n         E::Foo(x) => {\n-            x += 1; //[ast]~ ERROR re-assignment of immutable variable `x`\n+            x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n                     //[mir]~^ ERROR (Mir) [E0384]\n                     //[mir]~| ERROR (Ast) [E0384]\n         }\n     }\n \n     match (S { bar: 1 }) {\n         S { bar: x } => {\n-            x += 1; //[ast]~ ERROR re-assignment of immutable variable `x`\n+            x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n                     //[mir]~^ ERROR (Mir) [E0384]\n                     //[mir]~| ERROR (Ast) [E0384]\n         }\n     }\n \n     match (1,) {\n         (x,) => {\n-            x += 1; //[ast]~ ERROR re-assignment of immutable variable `x`\n+            x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n                     //[mir]~^ ERROR (Mir) [E0384]\n                     //[mir]~| ERROR (Ast) [E0384]\n         }\n     }\n \n     match [1,2,3] {\n         [x,_,_] => {\n-            x += 1; //[ast]~ ERROR re-assignment of immutable variable `x`\n+            x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n                     //[mir]~^ ERROR (Mir) [E0384]\n                     //[mir]~| ERROR (Ast) [E0384]\n         }"}, {"sha": "fa8f264eb5a5f6abd2ef265629b1fbb96c0f2f30", "filename": "src/test/compile-fail/liveness-assign-imm-local-in-loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6402797f4d65f5a48ebad1d39afafc512866092a/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6402797f4d65f5a48ebad1d39afafc512866092a/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-in-loop.rs?ref=6402797f4d65f5a48ebad1d39afafc512866092a", "patch": "@@ -11,8 +11,8 @@\n fn test() {\n     let v: isize;\n     loop {\n-        v = 1; //~ ERROR re-assignment of immutable variable\n-        //~^ NOTE re-assignment of immutable variable\n+        v = 1; //~ ERROR cannot assign twice to immutable variable\n+        //~^ NOTE cannot assign twice to immutable variable\n         v.clone(); // just to prevent liveness warnings\n     }\n }"}, {"sha": "bfdd4347de74e5416368968b354ed18ee5a87c77", "filename": "src/test/compile-fail/liveness-assign-imm-local-in-op-eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6402797f4d65f5a48ebad1d39afafc512866092a/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-in-op-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6402797f4d65f5a48ebad1d39afafc512866092a/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-in-op-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-in-op-eq.rs?ref=6402797f4d65f5a48ebad1d39afafc512866092a", "patch": "@@ -11,8 +11,8 @@\n fn test() {\n     let v: isize;\n     v = 2;  //~ NOTE first assignment\n-    v += 1; //~ ERROR re-assignment of immutable variable\n-            //~| NOTE re-assignment of immutable\n+    v += 1; //~ ERROR cannot assign twice to immutable variable\n+            //~| NOTE cannot assign twice to immutable\n     v.clone();\n }\n "}, {"sha": "f35c1c69acdf89e45b31d4953e9923f1c94d3f98", "filename": "src/test/compile-fail/liveness-assign-imm-local-with-init.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6402797f4d65f5a48ebad1d39afafc512866092a/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-with-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6402797f4d65f5a48ebad1d39afafc512866092a/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-with-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-assign-imm-local-with-init.rs?ref=6402797f4d65f5a48ebad1d39afafc512866092a", "patch": "@@ -11,8 +11,8 @@\n fn test() {\n     let v: isize = 1; //~ NOTE first assignment\n     v.clone();\n-    v = 2; //~ ERROR re-assignment of immutable variable\n-           //~| NOTE re-assignment of immutable\n+    v = 2; //~ ERROR cannot assign twice to immutable variable\n+           //~| NOTE cannot assign twice to immutable\n     v.clone();\n }\n "}, {"sha": "1c7bc9d73037cff87dd97b559d2ba5790fb3554d", "filename": "src/test/compile-fail/mut-pattern-internal-mutability.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6402797f4d65f5a48ebad1d39afafc512866092a/src%2Ftest%2Fcompile-fail%2Fmut-pattern-internal-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6402797f4d65f5a48ebad1d39afafc512866092a/src%2Ftest%2Fcompile-fail%2Fmut-pattern-internal-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-pattern-internal-mutability.rs?ref=6402797f4d65f5a48ebad1d39afafc512866092a", "patch": "@@ -15,9 +15,9 @@ fn main() {\n     let foo = &mut 1;\n \n     let &mut x = foo;\n-    x += 1; //[ast]~ ERROR re-assignment of immutable variable\n-            //[mir]~^ ERROR re-assignment of immutable variable `x` (Ast)\n-            //[mir]~| ERROR re-assignment of immutable variable `x` (Mir)\n+    x += 1; //[ast]~ ERROR cannot assign twice to immutable variable\n+            //[mir]~^ ERROR cannot assign twice to immutable variable `x` (Ast)\n+            //[mir]~| ERROR cannot assign twice to immutable variable `x` (Mir)\n \n     // explicitly mut-ify internals\n     let &mut mut x = foo;"}]}