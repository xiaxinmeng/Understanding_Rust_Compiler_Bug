{"sha": "260a840543faa2b380485a7dd101de62811e9a0d", "node_id": "C_kwDOAAsO6NoAKDI2MGE4NDA1NDNmYWEyYjM4MDQ4NWE3ZGQxMDFkZTYyODExZTlhMGQ", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-31T13:53:47Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-31T13:53:47Z"}, "message": "Refactor wrap suggestion code (just a bit)", "tree": {"sha": "878fb7eaa98ed847e050adcd92f3c9b0247f86f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/878fb7eaa98ed847e050adcd92f3c9b0247f86f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/260a840543faa2b380485a7dd101de62811e9a0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/260a840543faa2b380485a7dd101de62811e9a0d", "html_url": "https://github.com/rust-lang/rust/commit/260a840543faa2b380485a7dd101de62811e9a0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/260a840543faa2b380485a7dd101de62811e9a0d/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "506c98f29160524fea86b07acc1fc37ee22318b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/506c98f29160524fea86b07acc1fc37ee22318b6", "html_url": "https://github.com/rust-lang/rust/commit/506c98f29160524fea86b07acc1fc37ee22318b6"}], "stats": {"total": 40, "additions": 17, "deletions": 23}, "files": [{"sha": "8ed0faddf9e1514f4954bad0f6213c2b1a1d039c", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/260a840543faa2b380485a7dd101de62811e9a0d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/260a840543faa2b380485a7dd101de62811e9a0d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=260a840543faa2b380485a7dd101de62811e9a0d", "patch": "@@ -400,37 +400,36 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 })\n                 .collect();\n \n-            let prefix = match self.maybe_get_struct_pattern_shorthand_field(expr) {\n-                Some(ident) => format!(\"{ident}: \"),\n-                None => String::new(),\n-            };\n+            let suggestions_for = |variant: &_, ctor, field_name| {\n+                let prefix = match self.maybe_get_struct_pattern_shorthand_field(expr) {\n+                    Some(ident) => format!(\"{ident}: \"),\n+                    None => String::new(),\n+                };\n \n-            fn brackets_for(\n-                ctor: hir::def::CtorKind,\n-                field_name: Symbol,\n-            ) -> (String, &'static str) {\n-                match ctor {\n+                let (open, close) = match ctor {\n                     hir::def::CtorKind::Fn => (\"(\".to_owned(), \")\"),\n                     hir::def::CtorKind::Fictive => (format!(\" {{ {field_name}: \"), \" }\"),\n+\n+                    // unit variants don't have fields\n                     hir::def::CtorKind::Const => unreachable!(),\n-                }\n-            }\n+                };\n+\n+                vec![\n+                    (expr.span.shrink_to_lo(), format!(\"{prefix}{variant}{open}\")),\n+                    (expr.span.shrink_to_hi(), close.to_owned()),\n+                ]\n+            };\n \n             match &compatible_variants[..] {\n                 [] => { /* No variants to format */ }\n                 [(variant, ctor_kind, field_name, note)] => {\n-                    let (open, close) = brackets_for(*ctor_kind, *field_name);\n-\n                     // Just a single matching variant.\n                     err.multipart_suggestion_verbose(\n                         &format!(\n                             \"try wrapping the expression in `{variant}`{note}\",\n                             note = note.as_deref().unwrap_or(\"\")\n                         ),\n-                        vec![\n-                            (expr.span.shrink_to_lo(), format!(\"{prefix}{variant}{open}\")),\n-                            (expr.span.shrink_to_hi(), close.to_owned()),\n-                        ],\n+                        suggestions_for(&**variant, *ctor_kind, *field_name),\n                         Applicability::MaybeIncorrect,\n                     );\n                 }\n@@ -443,12 +442,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         ),\n                         compatible_variants.into_iter().map(\n                             |(variant, ctor_kind, field_name, _)| {\n-                                let (open, close) = brackets_for(ctor_kind, field_name);\n-\n-                                vec![\n-                                    (expr.span.shrink_to_lo(), format!(\"{prefix}{variant}{open}\")),\n-                                    (expr.span.shrink_to_hi(), close.to_owned()),\n-                                ]\n+                                suggestions_for(&variant, ctor_kind, field_name)\n                             },\n                         ),\n                         Applicability::MaybeIncorrect,"}]}