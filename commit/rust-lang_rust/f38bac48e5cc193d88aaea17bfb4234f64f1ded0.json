{"sha": "f38bac48e5cc193d88aaea17bfb4234f64f1ded0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzOGJhYzQ4ZTVjYzE5M2Q4OGFhZWExN2JmYjQyMzRmNjRmMWRlZDA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-26T16:08:15Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-26T16:17:15Z"}, "message": "More type safety for highlighting", "tree": {"sha": "edd6cef6d68d06efebbcd667074af262e099940b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edd6cef6d68d06efebbcd667074af262e099940b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f38bac48e5cc193d88aaea17bfb4234f64f1ded0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f38bac48e5cc193d88aaea17bfb4234f64f1ded0", "html_url": "https://github.com/rust-lang/rust/commit/f38bac48e5cc193d88aaea17bfb4234f64f1ded0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f38bac48e5cc193d88aaea17bfb4234f64f1ded0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "640ede4ade02e6caae57532506409370c5ca63c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/640ede4ade02e6caae57532506409370c5ca63c9", "html_url": "https://github.com/rust-lang/rust/commit/640ede4ade02e6caae57532506409370c5ca63c9"}], "stats": {"total": 204, "additions": 111, "deletions": 93}, "files": [{"sha": "d74d32453480f09e49500b7c59d087478d9241c3", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f38bac48e5cc193d88aaea17bfb4234f64f1ded0/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38bac48e5cc193d88aaea17bfb4234f64f1ded0/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=f38bac48e5cc193d88aaea17bfb4234f64f1ded0", "patch": "@@ -74,7 +74,7 @@ pub use crate::{\n     runnables::{Runnable, RunnableKind, TestId},\n     source_change::{FileSystemEdit, SourceChange, SourceFileEdit},\n     ssr::SsrError,\n-    syntax_highlighting::{tags, HighlightedRange},\n+    syntax_highlighting::{HighlightTag, HighlightedRange},\n };\n \n pub use hir::Documentation;"}, {"sha": "d422930bfa389965d18999685db8c0533ec4c48d", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 41, "deletions": 66, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/f38bac48e5cc193d88aaea17bfb4234f64f1ded0/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38bac48e5cc193d88aaea17bfb4234f64f1ded0/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=f38bac48e5cc193d88aaea17bfb4234f64f1ded0", "patch": "@@ -1,5 +1,7 @@\n //! FIXME: write short doc here\n \n+mod highlight_tag;\n+\n use hir::{Name, Semantics};\n use ra_db::SourceDatabase;\n use ra_ide_db::{\n@@ -15,39 +17,12 @@ use rustc_hash::FxHashMap;\n \n use crate::{references::classify_name_ref, FileId};\n \n-pub mod tags {\n-    pub const FIELD: &str = \"field\";\n-    pub const FUNCTION: &str = \"function\";\n-    pub const MODULE: &str = \"module\";\n-    pub const CONSTANT: &str = \"constant\";\n-    pub const MACRO: &str = \"macro\";\n-\n-    pub const VARIABLE: &str = \"variable\";\n-    pub const VARIABLE_MUT: &str = \"variable.mut\";\n-\n-    pub const TYPE: &str = \"type\";\n-    pub const TYPE_BUILTIN: &str = \"type.builtin\";\n-    pub const TYPE_SELF: &str = \"type.self\";\n-    pub const TYPE_PARAM: &str = \"type.param\";\n-    pub const TYPE_LIFETIME: &str = \"type.lifetime\";\n-\n-    pub const LITERAL_BYTE: &str = \"literal.byte\";\n-    pub const LITERAL_NUMERIC: &str = \"literal.numeric\";\n-    pub const LITERAL_CHAR: &str = \"literal.char\";\n-\n-    pub const LITERAL_COMMENT: &str = \"comment\";\n-    pub const LITERAL_STRING: &str = \"string\";\n-    pub const LITERAL_ATTRIBUTE: &str = \"attribute\";\n-\n-    pub const KEYWORD: &str = \"keyword\";\n-    pub const KEYWORD_UNSAFE: &str = \"keyword.unsafe\";\n-    pub const KEYWORD_CONTROL: &str = \"keyword.control\";\n-}\n+pub use highlight_tag::HighlightTag;\n \n #[derive(Debug)]\n pub struct HighlightedRange {\n     pub range: TextRange,\n-    pub tag: &'static str,\n+    pub tag: HighlightTag,\n     pub binding_hash: Option<u64>,\n }\n \n@@ -104,7 +79,7 @@ pub(crate) fn highlight(\n                         if let Some(range) = highlight_macro(node) {\n                             res.push(HighlightedRange {\n                                 range,\n-                                tag: tags::MACRO,\n+                                tag: HighlightTag::MACRO,\n                                 binding_hash: None,\n                             });\n                         }\n@@ -175,7 +150,7 @@ fn highlight_token_tree(\n     sema: &Semantics<RootDatabase>,\n     bindings_shadow_count: &mut FxHashMap<Name, u32>,\n     token: SyntaxToken,\n-) -> Option<(&'static str, Option<u64>)> {\n+) -> Option<(HighlightTag, Option<u64>)> {\n     if token.parent().kind() != TOKEN_TREE {\n         return None;\n     }\n@@ -196,19 +171,19 @@ fn highlight_node(\n     sema: &Semantics<RootDatabase>,\n     bindings_shadow_count: &mut FxHashMap<Name, u32>,\n     node: SyntaxElement,\n-) -> Option<(&'static str, Option<u64>)> {\n+) -> Option<(HighlightTag, Option<u64>)> {\n     let db = sema.db;\n     let mut binding_hash = None;\n     let tag = match node.kind() {\n         FN_DEF => {\n             bindings_shadow_count.clear();\n             return None;\n         }\n-        COMMENT => tags::LITERAL_COMMENT,\n-        STRING | RAW_STRING | RAW_BYTE_STRING | BYTE_STRING => tags::LITERAL_STRING,\n-        ATTR => tags::LITERAL_ATTRIBUTE,\n+        COMMENT => HighlightTag::LITERAL_COMMENT,\n+        STRING | RAW_STRING | RAW_BYTE_STRING | BYTE_STRING => HighlightTag::LITERAL_STRING,\n+        ATTR => HighlightTag::LITERAL_ATTRIBUTE,\n         // Special-case field init shorthand\n-        NAME_REF if node.parent().and_then(ast::RecordField::cast).is_some() => tags::FIELD,\n+        NAME_REF if node.parent().and_then(ast::RecordField::cast).is_some() => HighlightTag::FIELD,\n         NAME_REF if node.ancestors().any(|it| it.kind() == ATTR) => return None,\n         NAME_REF => {\n             let name_ref = node.as_node().cloned().and_then(ast::NameRef::cast).unwrap();\n@@ -242,21 +217,21 @@ fn highlight_node(\n \n             match name_kind {\n                 Some(name_kind) => highlight_name(db, name_kind),\n-                None => name.syntax().parent().map_or(tags::FUNCTION, |x| match x.kind() {\n-                    STRUCT_DEF | ENUM_DEF | TRAIT_DEF | TYPE_ALIAS_DEF => tags::TYPE,\n-                    TYPE_PARAM => tags::TYPE_PARAM,\n-                    RECORD_FIELD_DEF => tags::FIELD,\n-                    _ => tags::FUNCTION,\n+                None => name.syntax().parent().map_or(HighlightTag::FUNCTION, |x| match x.kind() {\n+                    STRUCT_DEF | ENUM_DEF | TRAIT_DEF | TYPE_ALIAS_DEF => HighlightTag::TYPE,\n+                    TYPE_PARAM => HighlightTag::TYPE_PARAM,\n+                    RECORD_FIELD_DEF => HighlightTag::FIELD,\n+                    _ => HighlightTag::FUNCTION,\n                 }),\n             }\n         }\n-        INT_NUMBER | FLOAT_NUMBER => tags::LITERAL_NUMERIC,\n-        BYTE => tags::LITERAL_BYTE,\n-        CHAR => tags::LITERAL_CHAR,\n-        LIFETIME => tags::TYPE_LIFETIME,\n-        T![unsafe] => tags::KEYWORD_UNSAFE,\n-        k if is_control_keyword(k) => tags::KEYWORD_CONTROL,\n-        k if k.is_keyword() => tags::KEYWORD,\n+        INT_NUMBER | FLOAT_NUMBER => HighlightTag::LITERAL_NUMERIC,\n+        BYTE => HighlightTag::LITERAL_BYTE,\n+        CHAR => HighlightTag::LITERAL_CHAR,\n+        LIFETIME => HighlightTag::TYPE_LIFETIME,\n+        T![unsafe] => HighlightTag::KEYWORD_UNSAFE,\n+        k if is_control_keyword(k) => HighlightTag::KEYWORD_CONTROL,\n+        k if k.is_keyword() => HighlightTag::KEYWORD,\n \n         _ => return None,\n     };\n@@ -318,7 +293,7 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n         if ranges.is_empty() {\n             buf.push_str(&text);\n         } else {\n-            let classes = ranges.iter().map(|x| x.tag).collect::<Vec<_>>().join(\" \");\n+            let classes = ranges.iter().map(|x| x.tag.to_string()).collect::<Vec<_>>().join(\" \");\n             let binding_hash = ranges.first().and_then(|x| x.binding_hash);\n             let color = match (rainbow, binding_hash) {\n                 (true, Some(hash)) => format!(\n@@ -335,26 +310,26 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n     buf\n }\n \n-fn highlight_name(db: &RootDatabase, def: NameDefinition) -> &'static str {\n+fn highlight_name(db: &RootDatabase, def: NameDefinition) -> HighlightTag {\n     match def {\n-        NameDefinition::Macro(_) => tags::MACRO,\n-        NameDefinition::StructField(_) => tags::FIELD,\n-        NameDefinition::ModuleDef(hir::ModuleDef::Module(_)) => tags::MODULE,\n-        NameDefinition::ModuleDef(hir::ModuleDef::Function(_)) => tags::FUNCTION,\n-        NameDefinition::ModuleDef(hir::ModuleDef::Adt(_)) => tags::TYPE,\n-        NameDefinition::ModuleDef(hir::ModuleDef::EnumVariant(_)) => tags::CONSTANT,\n-        NameDefinition::ModuleDef(hir::ModuleDef::Const(_)) => tags::CONSTANT,\n-        NameDefinition::ModuleDef(hir::ModuleDef::Static(_)) => tags::CONSTANT,\n-        NameDefinition::ModuleDef(hir::ModuleDef::Trait(_)) => tags::TYPE,\n-        NameDefinition::ModuleDef(hir::ModuleDef::TypeAlias(_)) => tags::TYPE,\n-        NameDefinition::ModuleDef(hir::ModuleDef::BuiltinType(_)) => tags::TYPE_BUILTIN,\n-        NameDefinition::SelfType(_) => tags::TYPE_SELF,\n-        NameDefinition::TypeParam(_) => tags::TYPE_PARAM,\n+        NameDefinition::Macro(_) => HighlightTag::MACRO,\n+        NameDefinition::StructField(_) => HighlightTag::FIELD,\n+        NameDefinition::ModuleDef(hir::ModuleDef::Module(_)) => HighlightTag::MODULE,\n+        NameDefinition::ModuleDef(hir::ModuleDef::Function(_)) => HighlightTag::FUNCTION,\n+        NameDefinition::ModuleDef(hir::ModuleDef::Adt(_)) => HighlightTag::TYPE,\n+        NameDefinition::ModuleDef(hir::ModuleDef::EnumVariant(_)) => HighlightTag::CONSTANT,\n+        NameDefinition::ModuleDef(hir::ModuleDef::Const(_)) => HighlightTag::CONSTANT,\n+        NameDefinition::ModuleDef(hir::ModuleDef::Static(_)) => HighlightTag::CONSTANT,\n+        NameDefinition::ModuleDef(hir::ModuleDef::Trait(_)) => HighlightTag::TYPE,\n+        NameDefinition::ModuleDef(hir::ModuleDef::TypeAlias(_)) => HighlightTag::TYPE,\n+        NameDefinition::ModuleDef(hir::ModuleDef::BuiltinType(_)) => HighlightTag::TYPE_BUILTIN,\n+        NameDefinition::SelfType(_) => HighlightTag::TYPE_SELF,\n+        NameDefinition::TypeParam(_) => HighlightTag::TYPE_PARAM,\n         NameDefinition::Local(local) => {\n             if local.is_mut(db) || local.ty(db).is_mutable_reference() {\n-                tags::VARIABLE_MUT\n+                HighlightTag::VARIABLE_MUT\n             } else {\n-                tags::VARIABLE\n+                HighlightTag::VARIABLE\n             }\n         }\n     }\n@@ -523,6 +498,6 @@ fn bar() {\n             })\n             .unwrap();\n \n-        assert_eq!(highlights[0].tag, \"field\");\n+        assert_eq!(&highlights[0].tag.to_string(), \"field\");\n     }\n }"}, {"sha": "af1ac07b3d8e1c4056f3d0ffbfd43a297f7f4afa", "filename": "crates/ra_ide/src/syntax_highlighting/highlight_tag.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f38bac48e5cc193d88aaea17bfb4234f64f1ded0/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhighlight_tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38bac48e5cc193d88aaea17bfb4234f64f1ded0/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhighlight_tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhighlight_tag.rs?ref=f38bac48e5cc193d88aaea17bfb4234f64f1ded0", "patch": "@@ -0,0 +1,43 @@\n+//! Defines token tags we use for syntax highlighting.\n+//! A tag is not unlike a CSS class.\n+\n+use std::fmt;\n+\n+#[derive(Debug, PartialEq, Eq, Clone, Copy)]\n+pub struct HighlightTag(&'static str);\n+\n+impl fmt::Display for HighlightTag {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::Display::fmt(self.0, f)\n+    }\n+}\n+\n+#[rustfmt::skip]\n+impl HighlightTag {\n+    pub const FIELD: HighlightTag              = HighlightTag(\"field\");\n+    pub const FUNCTION: HighlightTag           = HighlightTag(\"function\");\n+    pub const MODULE: HighlightTag             = HighlightTag(\"module\");\n+    pub const CONSTANT: HighlightTag           = HighlightTag(\"constant\");\n+    pub const MACRO: HighlightTag              = HighlightTag(\"macro\");\n+\n+    pub const VARIABLE: HighlightTag           = HighlightTag(\"variable\");\n+    pub const VARIABLE_MUT: HighlightTag       = HighlightTag(\"variable.mut\");\n+\n+    pub const TYPE: HighlightTag               = HighlightTag(\"type\");\n+    pub const TYPE_BUILTIN: HighlightTag       = HighlightTag(\"type.builtin\");\n+    pub const TYPE_SELF: HighlightTag          = HighlightTag(\"type.self\");\n+    pub const TYPE_PARAM: HighlightTag         = HighlightTag(\"type.param\");\n+    pub const TYPE_LIFETIME: HighlightTag      = HighlightTag(\"type.lifetime\");\n+\n+    pub const LITERAL_BYTE: HighlightTag       = HighlightTag(\"literal.byte\");\n+    pub const LITERAL_NUMERIC: HighlightTag    = HighlightTag(\"literal.numeric\");\n+    pub const LITERAL_CHAR: HighlightTag       = HighlightTag(\"literal.char\");\n+\n+    pub const LITERAL_COMMENT: HighlightTag    = HighlightTag(\"comment\");\n+    pub const LITERAL_STRING: HighlightTag     = HighlightTag(\"string\");\n+    pub const LITERAL_ATTRIBUTE: HighlightTag  = HighlightTag(\"attribute\");\n+\n+    pub const KEYWORD: HighlightTag            = HighlightTag(\"keyword\");\n+    pub const KEYWORD_UNSAFE: HighlightTag     = HighlightTag(\"keyword.unsafe\");\n+    pub const KEYWORD_CONTROL: HighlightTag    = HighlightTag(\"keyword.control\");\n+}"}, {"sha": "5e5610a1e021d5b0a7b07807861dd3caf4248fe1", "filename": "crates/rust-analyzer/src/conv.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f38bac48e5cc193d88aaea17bfb4234f64f1ded0/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38bac48e5cc193d88aaea17bfb4234f64f1ded0/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconv.rs?ref=f38bac48e5cc193d88aaea17bfb4234f64f1ded0", "patch": "@@ -9,8 +9,8 @@ use lsp_types::{\n     WorkspaceEdit,\n };\n use ra_ide::{\n-    tags, translate_offset_with_edit, CompletionItem, CompletionItemKind, FileId, FilePosition,\n-    FileRange, FileSystemEdit, Fold, FoldKind, InsertTextFormat, LineCol, LineIndex,\n+    translate_offset_with_edit, CompletionItem, CompletionItemKind, FileId, FilePosition,\n+    FileRange, FileSystemEdit, Fold, FoldKind, HighlightTag, InsertTextFormat, LineCol, LineIndex,\n     NavigationTarget, RangeInfo, ReferenceAccess, Severity, SourceChange, SourceFileEdit,\n };\n use ra_syntax::{SyntaxKind, TextRange, TextUnit};\n@@ -303,51 +303,51 @@ impl ConvWith<&FoldConvCtx<'_>> for Fold {\n     }\n }\n \n-impl Conv for &'static str {\n+impl Conv for HighlightTag {\n     type Output = (SemanticTokenType, Vec<SemanticTokenModifier>);\n \n     fn conv(self) -> (SemanticTokenType, Vec<SemanticTokenModifier>) {\n         let token_type: SemanticTokenType = match self {\n-            tags::FIELD => SemanticTokenType::MEMBER,\n-            tags::FUNCTION => SemanticTokenType::FUNCTION,\n-            tags::MODULE => SemanticTokenType::NAMESPACE,\n-            tags::CONSTANT => {\n+            HighlightTag::FIELD => SemanticTokenType::MEMBER,\n+            HighlightTag::FUNCTION => SemanticTokenType::FUNCTION,\n+            HighlightTag::MODULE => SemanticTokenType::NAMESPACE,\n+            HighlightTag::CONSTANT => {\n                 return (\n                     SemanticTokenType::VARIABLE,\n                     vec![SemanticTokenModifier::STATIC, SemanticTokenModifier::READONLY],\n                 )\n             }\n-            tags::MACRO => SemanticTokenType::MACRO,\n+            HighlightTag::MACRO => SemanticTokenType::MACRO,\n \n-            tags::VARIABLE => {\n+            HighlightTag::VARIABLE => {\n                 return (SemanticTokenType::VARIABLE, vec![SemanticTokenModifier::READONLY])\n             }\n-            tags::VARIABLE_MUT => SemanticTokenType::VARIABLE,\n+            HighlightTag::VARIABLE_MUT => SemanticTokenType::VARIABLE,\n \n-            tags::TYPE => SemanticTokenType::TYPE,\n-            tags::TYPE_BUILTIN => SemanticTokenType::TYPE,\n-            tags::TYPE_SELF => {\n+            HighlightTag::TYPE => SemanticTokenType::TYPE,\n+            HighlightTag::TYPE_BUILTIN => SemanticTokenType::TYPE,\n+            HighlightTag::TYPE_SELF => {\n                 return (SemanticTokenType::TYPE, vec![SemanticTokenModifier::REFERENCE])\n             }\n-            tags::TYPE_PARAM => SemanticTokenType::TYPE_PARAMETER,\n-            tags::TYPE_LIFETIME => {\n+            HighlightTag::TYPE_PARAM => SemanticTokenType::TYPE_PARAMETER,\n+            HighlightTag::TYPE_LIFETIME => {\n                 return (SemanticTokenType::LABEL, vec![SemanticTokenModifier::REFERENCE])\n             }\n \n-            tags::LITERAL_BYTE => SemanticTokenType::NUMBER,\n-            tags::LITERAL_NUMERIC => SemanticTokenType::NUMBER,\n-            tags::LITERAL_CHAR => SemanticTokenType::NUMBER,\n+            HighlightTag::LITERAL_BYTE => SemanticTokenType::NUMBER,\n+            HighlightTag::LITERAL_NUMERIC => SemanticTokenType::NUMBER,\n+            HighlightTag::LITERAL_CHAR => SemanticTokenType::NUMBER,\n \n-            tags::LITERAL_COMMENT => {\n+            HighlightTag::LITERAL_COMMENT => {\n                 return (SemanticTokenType::COMMENT, vec![SemanticTokenModifier::DOCUMENTATION])\n             }\n \n-            tags::LITERAL_STRING => SemanticTokenType::STRING,\n-            tags::LITERAL_ATTRIBUTE => SemanticTokenType::KEYWORD,\n+            HighlightTag::LITERAL_STRING => SemanticTokenType::STRING,\n+            HighlightTag::LITERAL_ATTRIBUTE => SemanticTokenType::KEYWORD,\n \n-            tags::KEYWORD => SemanticTokenType::KEYWORD,\n-            tags::KEYWORD_UNSAFE => SemanticTokenType::KEYWORD,\n-            tags::KEYWORD_CONTROL => SemanticTokenType::KEYWORD,\n+            HighlightTag::KEYWORD => SemanticTokenType::KEYWORD,\n+            HighlightTag::KEYWORD_UNSAFE => SemanticTokenType::KEYWORD,\n+            HighlightTag::KEYWORD_CONTROL => SemanticTokenType::KEYWORD,\n             unknown => panic!(\"Unknown semantic token: {}\", unknown),\n         };\n "}, {"sha": "e9f1c4f4b50454b3bbe21b579c8bf6c1507d7b60", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f38bac48e5cc193d88aaea17bfb4234f64f1ded0/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38bac48e5cc193d88aaea17bfb4234f64f1ded0/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=f38bac48e5cc193d88aaea17bfb4234f64f1ded0", "patch": "@@ -954,7 +954,7 @@ fn highlight(world: &WorldSnapshot, file_id: FileId) -> Result<Vec<Decoration>>\n         .into_iter()\n         .map(|h| Decoration {\n             range: h.range.conv_with(&line_index),\n-            tag: h.tag,\n+            tag: h.tag.to_string(),\n             binding_hash: h.binding_hash.map(|x| x.to_string()),\n         })\n         .collect();"}, {"sha": "fd6aef5971968831a6a01d171fb2ac6706536138", "filename": "crates/rust-analyzer/src/req.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f38bac48e5cc193d88aaea17bfb4234f64f1ded0/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38bac48e5cc193d88aaea17bfb4234f64f1ded0/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freq.rs?ref=f38bac48e5cc193d88aaea17bfb4234f64f1ded0", "patch": "@@ -112,7 +112,7 @@ pub struct PublishDecorationsParams {\n #[serde(rename_all = \"camelCase\")]\n pub struct Decoration {\n     pub range: Range,\n-    pub tag: &'static str,\n+    pub tag: String,\n     pub binding_hash: Option<String>,\n }\n "}]}