{"sha": "ad15dc2a6fcbacb17f55d90a2489869fb4690076", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMTVkYzJhNmZjYmFjYjE3ZjU1ZDkwYTI0ODk4NjlmYjQ2OTAwNzY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-08-22T00:14:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-22T00:14:50Z"}, "message": "Rollup merge of #75769 - matklad:flatten, r=petrochenkov\n\nMinor, remove double nesting of a test module", "tree": {"sha": "e44866aefa047554f7c89e73f5653534ad00753f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e44866aefa047554f7c89e73f5653534ad00753f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad15dc2a6fcbacb17f55d90a2489869fb4690076", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfQGN7CRBK7hj4Ov3rIwAAdHIIAFt9ZgBsBhzlNXI5uR44Swnm\nQPZqBXiMpR7UNJMPpyUgaBRSEOcnY/ATV+vhmDtJW26UMM4o3sZnleHNPjhjbDNg\nShVtblXu8AjMAF5w9yoT/3e0F+PF+IwxtcfXtQGfGIH8f2VuwNHyH4zaOPFl3uD9\nb2OR1GQQIvk5pmeSyXUQYiFh91USMDVwQy3E+wdZ9Bj29InXzzcG0zCE+tCRlWOj\n6fZd4P9qRX6t4q3fScL8fa0anO5pYFwYd2x5I2vk/wUvIJUOGU60x/T88Io42QXO\nVsUB68BHv1PE7bU6IrOgItKZ/zxT3lu/R4m3lg/TSxCqj1th4O5VVK1DTKQNekQ=\n=SH1m\n-----END PGP SIGNATURE-----\n", "payload": "tree e44866aefa047554f7c89e73f5653534ad00753f\nparent cc1e5c0509e2eee607f4c234b21e2441fe15c40f\nparent 35994db6d3426e3f4545e0061cb5046a7979265f\nauthor Dylan DPC <dylan.dpc@gmail.com> 1598055290 +0200\ncommitter GitHub <noreply@github.com> 1598055290 +0200\n\nRollup merge of #75769 - matklad:flatten, r=petrochenkov\n\nMinor, remove double nesting of a test module\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad15dc2a6fcbacb17f55d90a2489869fb4690076", "html_url": "https://github.com/rust-lang/rust/commit/ad15dc2a6fcbacb17f55d90a2489869fb4690076", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad15dc2a6fcbacb17f55d90a2489869fb4690076/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc1e5c0509e2eee607f4c234b21e2441fe15c40f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc1e5c0509e2eee607f4c234b21e2441fe15c40f", "html_url": "https://github.com/rust-lang/rust/commit/cc1e5c0509e2eee607f4c234b21e2441fe15c40f"}, {"sha": "35994db6d3426e3f4545e0061cb5046a7979265f", "url": "https://api.github.com/repos/rust-lang/rust/commits/35994db6d3426e3f4545e0061cb5046a7979265f", "html_url": "https://github.com/rust-lang/rust/commit/35994db6d3426e3f4545e0061cb5046a7979265f"}], "stats": {"total": 257, "additions": 121, "deletions": 136}, "files": [{"sha": "b0209ac2899d616fd7e0fab082ea4b2915e5ed1c", "filename": "src/librustc_lexer/src/tests.rs", "status": "modified", "additions": 121, "deletions": 136, "changes": 257, "blob_url": "https://github.com/rust-lang/rust/blob/ad15dc2a6fcbacb17f55d90a2489869fb4690076/src%2Flibrustc_lexer%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad15dc2a6fcbacb17f55d90a2489869fb4690076/src%2Flibrustc_lexer%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Ftests.rs?ref=ad15dc2a6fcbacb17f55d90a2489869fb4690076", "patch": "@@ -1,137 +1,122 @@\n-#[cfg(test)]\n-mod tests {\n-    use crate::*;\n-\n-    fn check_raw_str(s: &str, expected_hashes: u16, expected_err: Option<RawStrError>) {\n-        let s = &format!(\"r{}\", s);\n-        let mut cursor = Cursor::new(s);\n-        cursor.bump();\n-        let (n_hashes, err) = cursor.raw_double_quoted_string(0);\n-        assert_eq!(n_hashes, expected_hashes);\n-        assert_eq!(err, expected_err);\n-    }\n-\n-    #[test]\n-    fn test_naked_raw_str() {\n-        check_raw_str(r#\"\"abc\"\"#, 0, None);\n-    }\n-\n-    #[test]\n-    fn test_raw_no_start() {\n-        check_raw_str(r##\"\"abc\"#\"##, 0, None);\n-    }\n-\n-    #[test]\n-    fn test_too_many_terminators() {\n-        // this error is handled in the parser later\n-        check_raw_str(r###\"#\"abc\"##\"###, 1, None);\n-    }\n-\n-    #[test]\n-    fn test_unterminated() {\n-        check_raw_str(\n-            r#\"#\"abc\"#,\n-            1,\n-            Some(RawStrError::NoTerminator {\n-                expected: 1,\n-                found: 0,\n-                possible_terminator_offset: None,\n-            }),\n-        );\n-        check_raw_str(\n-            r###\"##\"abc\"#\"###,\n-            2,\n-            Some(RawStrError::NoTerminator {\n-                expected: 2,\n-                found: 1,\n-                possible_terminator_offset: Some(7),\n-            }),\n-        );\n-        // We're looking for \"# not just any #\n-        check_raw_str(\n-            r###\"##\"abc#\"###,\n-            2,\n-            Some(RawStrError::NoTerminator {\n-                expected: 2,\n-                found: 0,\n-                possible_terminator_offset: None,\n-            }),\n-        )\n-    }\n-\n-    #[test]\n-    fn test_invalid_start() {\n-        check_raw_str(r##\"#~\"abc\"#\"##, 1, Some(RawStrError::InvalidStarter { bad_char: '~' }));\n-    }\n-\n-    #[test]\n-    fn test_unterminated_no_pound() {\n-        // https://github.com/rust-lang/rust/issues/70677\n-        check_raw_str(\n-            r#\"\"\"#,\n-            0,\n-            Some(RawStrError::NoTerminator {\n-                expected: 0,\n-                found: 0,\n-                possible_terminator_offset: None,\n-            }),\n-        );\n-    }\n-\n-    #[test]\n-    fn test_valid_shebang() {\n-        // https://github.com/rust-lang/rust/issues/70528\n-        let input = \"#!/usr/bin/rustrun\\nlet x = 5;\";\n-        assert_eq!(strip_shebang(input), Some(18));\n-    }\n-\n-    #[test]\n-    fn test_invalid_shebang_valid_rust_syntax() {\n-        // https://github.com/rust-lang/rust/issues/70528\n-        let input = \"#!    [bad_attribute]\";\n-        assert_eq!(strip_shebang(input), None);\n-    }\n-\n-    #[test]\n-    fn test_shebang_second_line() {\n-        // Because shebangs are interpreted by the kernel, they must be on the first line\n-        let input = \"\\n#!/bin/bash\";\n-        assert_eq!(strip_shebang(input), None);\n-    }\n-\n-    #[test]\n-    fn test_shebang_space() {\n-        let input = \"#!    /bin/bash\";\n-        assert_eq!(strip_shebang(input), Some(input.len()));\n-    }\n-\n-    #[test]\n-    fn test_shebang_empty_shebang() {\n-        let input = \"#!    \\n[attribute(foo)]\";\n-        assert_eq!(strip_shebang(input), None);\n-    }\n-\n-    #[test]\n-    fn test_invalid_shebang_comment() {\n-        let input = \"#!//bin/ami/a/comment\\n[\";\n-        assert_eq!(strip_shebang(input), None)\n-    }\n-\n-    #[test]\n-    fn test_invalid_shebang_another_comment() {\n-        let input = \"#!/*bin/ami/a/comment*/\\n[attribute\";\n-        assert_eq!(strip_shebang(input), None)\n-    }\n-\n-    #[test]\n-    fn test_shebang_valid_rust_after() {\n-        let input = \"#!/*bin/ami/a/comment*/\\npub fn main() {}\";\n-        assert_eq!(strip_shebang(input), Some(23))\n-    }\n-\n-    #[test]\n-    fn test_shebang_followed_by_attrib() {\n-        let input = \"#!/bin/rust-scripts\\n#![allow_unused(true)]\";\n-        assert_eq!(strip_shebang(input), Some(19));\n-    }\n+use super::*;\n+\n+fn check_raw_str(s: &str, expected_hashes: u16, expected_err: Option<RawStrError>) {\n+    let s = &format!(\"r{}\", s);\n+    let mut cursor = Cursor::new(s);\n+    cursor.bump();\n+    let (n_hashes, err) = cursor.raw_double_quoted_string(0);\n+    assert_eq!(n_hashes, expected_hashes);\n+    assert_eq!(err, expected_err);\n+}\n+\n+#[test]\n+fn test_naked_raw_str() {\n+    check_raw_str(r#\"\"abc\"\"#, 0, None);\n+}\n+\n+#[test]\n+fn test_raw_no_start() {\n+    check_raw_str(r##\"\"abc\"#\"##, 0, None);\n+}\n+\n+#[test]\n+fn test_too_many_terminators() {\n+    // this error is handled in the parser later\n+    check_raw_str(r###\"#\"abc\"##\"###, 1, None);\n+}\n+\n+#[test]\n+fn test_unterminated() {\n+    check_raw_str(\n+        r#\"#\"abc\"#,\n+        1,\n+        Some(RawStrError::NoTerminator { expected: 1, found: 0, possible_terminator_offset: None }),\n+    );\n+    check_raw_str(\n+        r###\"##\"abc\"#\"###,\n+        2,\n+        Some(RawStrError::NoTerminator {\n+            expected: 2,\n+            found: 1,\n+            possible_terminator_offset: Some(7),\n+        }),\n+    );\n+    // We're looking for \"# not just any #\n+    check_raw_str(\n+        r###\"##\"abc#\"###,\n+        2,\n+        Some(RawStrError::NoTerminator { expected: 2, found: 0, possible_terminator_offset: None }),\n+    )\n+}\n+\n+#[test]\n+fn test_invalid_start() {\n+    check_raw_str(r##\"#~\"abc\"#\"##, 1, Some(RawStrError::InvalidStarter { bad_char: '~' }));\n+}\n+\n+#[test]\n+fn test_unterminated_no_pound() {\n+    // https://github.com/rust-lang/rust/issues/70677\n+    check_raw_str(\n+        r#\"\"\"#,\n+        0,\n+        Some(RawStrError::NoTerminator { expected: 0, found: 0, possible_terminator_offset: None }),\n+    );\n+}\n+\n+#[test]\n+fn test_valid_shebang() {\n+    // https://github.com/rust-lang/rust/issues/70528\n+    let input = \"#!/usr/bin/rustrun\\nlet x = 5;\";\n+    assert_eq!(strip_shebang(input), Some(18));\n+}\n+\n+#[test]\n+fn test_invalid_shebang_valid_rust_syntax() {\n+    // https://github.com/rust-lang/rust/issues/70528\n+    let input = \"#!    [bad_attribute]\";\n+    assert_eq!(strip_shebang(input), None);\n+}\n+\n+#[test]\n+fn test_shebang_second_line() {\n+    // Because shebangs are interpreted by the kernel, they must be on the first line\n+    let input = \"\\n#!/bin/bash\";\n+    assert_eq!(strip_shebang(input), None);\n+}\n+\n+#[test]\n+fn test_shebang_space() {\n+    let input = \"#!    /bin/bash\";\n+    assert_eq!(strip_shebang(input), Some(input.len()));\n+}\n+\n+#[test]\n+fn test_shebang_empty_shebang() {\n+    let input = \"#!    \\n[attribute(foo)]\";\n+    assert_eq!(strip_shebang(input), None);\n+}\n+\n+#[test]\n+fn test_invalid_shebang_comment() {\n+    let input = \"#!//bin/ami/a/comment\\n[\";\n+    assert_eq!(strip_shebang(input), None)\n+}\n+\n+#[test]\n+fn test_invalid_shebang_another_comment() {\n+    let input = \"#!/*bin/ami/a/comment*/\\n[attribute\";\n+    assert_eq!(strip_shebang(input), None)\n+}\n+\n+#[test]\n+fn test_shebang_valid_rust_after() {\n+    let input = \"#!/*bin/ami/a/comment*/\\npub fn main() {}\";\n+    assert_eq!(strip_shebang(input), Some(23))\n+}\n+\n+#[test]\n+fn test_shebang_followed_by_attrib() {\n+    let input = \"#!/bin/rust-scripts\\n#![allow_unused(true)]\";\n+    assert_eq!(strip_shebang(input), Some(19));\n }"}]}