{"sha": "95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1YjNjNDI3ZDRjZjc0MGViYjM2MDJjMDRkYzU3MTdhZWIyZWE0ZWU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-17T18:55:17Z"}, "committer": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2020-04-24T18:44:07Z"}, "message": "Remove `Option` from the return type of `def_kind`.", "tree": {"sha": "ad677eab8a90049dcde01b6d27f41bd6ec84d525", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad677eab8a90049dcde01b6d27f41bd6ec84d525"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee", "html_url": "https://github.com/rust-lang/rust/commit/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1db782dffc085cc24a9024b31d6b83862b02d8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1db782dffc085cc24a9024b31d6b83862b02d8a", "html_url": "https://github.com/rust-lang/rust/commit/d1db782dffc085cc24a9024b31d6b83862b02d8a"}], "stats": {"total": 169, "additions": 69, "deletions": 100}, "files": [{"sha": "d3bd0763ff1718c0dcd84c47aadc4aa9018b9f0c", "filename": "src/librustc_infer/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee", "patch": "@@ -192,12 +192,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         .get_opt_name()\n                         .map(|parent_symbol| parent_symbol.to_string());\n \n-                    let type_parent_desc = self\n-                        .tcx\n-                        .def_kind(parent_def_id)\n-                        .map(|parent_def_kind| parent_def_kind.descr(parent_def_id));\n-\n-                    (parent_name, type_parent_desc)\n+                    (parent_name, Some(self.tcx.def_kind(parent_def_id).descr(parent_def_id)))\n                 } else {\n                     (None, None)\n                 };"}, {"sha": "ecf3825dadb2d8fd77fc174a6d7dce07e1e8f44c", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee", "patch": "@@ -127,7 +127,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     is_foreign_item => { cdata.is_foreign_item(def_id.index) }\n     static_mutability => { cdata.static_mutability(def_id.index) }\n     generator_kind => { cdata.generator_kind(def_id.index) }\n-    def_kind => { Some(cdata.def_kind(def_id.index)) }\n+    def_kind => { cdata.def_kind(def_id.index) }\n     def_span => { cdata.get_span(def_id.index, &tcx.sess) }\n     lookup_stability => {\n         cdata.get_stability(def_id.index).map(|s| tcx.intern_stability(s))"}, {"sha": "1c71fc57bea5a23effe7bd60521ebb80572456c0", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee", "patch": "@@ -227,15 +227,14 @@ impl<'hir> Map<'hir> {\n         self.tcx.definitions.opt_local_def_id_to_hir_id(def_id)\n     }\n \n-    pub fn def_kind(&self, local_def_id: LocalDefId) -> Option<DefKind> {\n+    pub fn def_kind(&self, local_def_id: LocalDefId) -> DefKind {\n+        // FIXME(eddyb) support `find` on the crate root.\n         if local_def_id.to_def_id().index == CRATE_DEF_INDEX {\n-            return Some(DefKind::Mod);\n+            return DefKind::Mod;\n         }\n \n         let hir_id = self.local_def_id_to_hir_id(local_def_id);\n-        let node = self.find(hir_id)?;\n-\n-        Some(match node {\n+        match self.get(hir_id) {\n             Node::Item(item) => match item.kind {\n                 ItemKind::Static(..) => DefKind::Static,\n                 ItemKind::Const(..) => DefKind::Const,\n@@ -273,7 +272,7 @@ impl<'hir> Map<'hir> {\n             Node::Variant(_) => DefKind::Variant,\n             Node::Ctor(variant_data) => {\n                 // FIXME(eddyb) is this even possible, if we have a `Node::Ctor`?\n-                variant_data.ctor_hir_id()?;\n+                assert_ne!(variant_data.ctor_hir_id(), None);\n \n                 let ctor_of = match self.find(self.get_parent_node(hir_id)) {\n                     Some(Node::Item(..)) => def::CtorOf::Struct,\n@@ -308,7 +307,7 @@ impl<'hir> Map<'hir> {\n             | Node::Visibility(_)\n             | Node::Block(_)\n             | Node::Crate(_) => bug!(\"def_kind: unsupported node: {}\", self.node_to_string(hir_id)),\n-        })\n+        }\n     }\n \n     fn find_entry(&self, id: HirId) -> Option<Entry<'hir>> {"}, {"sha": "54c05bca3bd2bbfac04dbc72c1b0e5422e55ef80", "filename": "src/librustc_middle/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_middle%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_middle%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmiddle%2Fstability.rs?ref=95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee", "patch": "@@ -246,7 +246,7 @@ pub enum EvalResult {\n fn skip_stability_check_due_to_privacy(tcx: TyCtxt<'_>, mut def_id: DefId) -> bool {\n     // Check if `def_id` is a trait method.\n     match tcx.def_kind(def_id) {\n-        Some(DefKind::AssocFn) | Some(DefKind::AssocTy) | Some(DefKind::AssocConst) => {\n+        DefKind::AssocFn | DefKind::AssocTy | DefKind::AssocConst => {\n             if let ty::TraitContainer(trait_def_id) = tcx.associated_item(def_id).container {\n                 // Trait methods do not declare visibility (even\n                 // for visibility info in cstore). Use containing"}, {"sha": "8b0509e314ce6eb2e2e5c7da5d8d95ef18f73ad1", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee", "patch": "@@ -620,7 +620,7 @@ rustc_queries! {\n             cache_on_disk_if { true }\n         }\n \n-        query def_kind(_: DefId) -> Option<DefKind> {}\n+        query def_kind(_: DefId) -> DefKind {}\n         query def_span(_: DefId) -> Span {\n             // FIXME(mw): DefSpans are not really inputs since they are derived from\n             // HIR. But at the moment HIR hashing still contains some hacks that allow"}, {"sha": "eae4055877b2a8f9fe4c036e84744b7a6951841a", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee", "patch": "@@ -48,7 +48,7 @@ use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, LocalDefId, LOCAL_CRATE};\n-use rustc_hir::definitions::{DefPathData, DefPathHash, Definitions};\n+use rustc_hir::definitions::{DefPathHash, Definitions};\n use rustc_hir::lang_items;\n use rustc_hir::lang_items::PanicLocationLangItem;\n use rustc_hir::{HirId, Node, TraitCandidate};\n@@ -1492,21 +1492,13 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Returns a displayable description and article for the given `def_id` (e.g. `(\"a\", \"struct\")`).\n     pub fn article_and_description(&self, def_id: DefId) -> (&'static str, &'static str) {\n-        self.def_kind(def_id)\n-            .map(|def_kind| (def_kind.article(), def_kind.descr(def_id)))\n-            .unwrap_or_else(|| match self.def_key(def_id).disambiguated_data.data {\n-                DefPathData::ClosureExpr => match self.generator_kind(def_id) {\n-                    None => (\"a\", \"closure\"),\n-                    Some(rustc_hir::GeneratorKind::Async(..)) => (\"an\", \"async closure\"),\n-                    Some(rustc_hir::GeneratorKind::Gen) => (\"a\", \"generator\"),\n-                },\n-                DefPathData::LifetimeNs(..) => (\"a\", \"lifetime\"),\n-                DefPathData::Impl => (\"an\", \"implementation\"),\n-                DefPathData::TypeNs(..) | DefPathData::ValueNs(..) | DefPathData::MacroNs(..) => {\n-                    unreachable!()\n-                }\n-                _ => bug!(\"article_and_description called on def_id {:?}\", def_id),\n-            })\n+        match self.def_kind(def_id) {\n+            DefKind::Generator => match self.generator_kind(def_id).unwrap() {\n+                rustc_hir::GeneratorKind::Async(..) => (\"an\", \"async closure\"),\n+                rustc_hir::GeneratorKind::Gen => (\"a\", \"generator\"),\n+            },\n+            def_kind => (def_kind.article(), def_kind.descr(def_id)),\n+        }\n     }\n }\n "}, {"sha": "d6c8ccf5ea62a98ededf5498ee8b0f5a7c813c1c", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee", "patch": "@@ -2680,7 +2680,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             }\n         } else {\n             match self.def_kind(def_id) {\n-                Some(DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy) => true,\n+                DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy => true,\n                 _ => false,\n             }\n         };"}, {"sha": "f8209cddd2bd23e1bea15054ee04b6ed1240bf9a", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee", "patch": "@@ -891,7 +891,7 @@ pub trait PrettyPrinter<'tcx>:\n                     p!(write(\"::{:?}\", promoted));\n                 } else {\n                     match self.tcx().def_kind(did) {\n-                        Some(DefKind::Static | DefKind::Const | DefKind::AssocConst) => {\n+                        DefKind::Static | DefKind::Const | DefKind::AssocConst => {\n                             p!(print_value_path(did, substs))\n                         }\n                         _ => {"}, {"sha": "b46caf7985208472e21f7deb67b4f83b4d26b2b5", "filename": "src/librustc_middle/ty/util.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_middle%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_middle%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Futil.rs?ref=95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee", "patch": "@@ -16,7 +16,6 @@ use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::definitions::DefPathData;\n use rustc_macros::HashStable;\n use rustc_span::Span;\n use rustc_target::abi::{Integer, Size, TargetDataLayout};\n@@ -446,24 +445,24 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// those are not yet phased out). The parent of the closure's\n     /// `DefId` will also be the context where it appears.\n     pub fn is_closure(self, def_id: DefId) -> bool {\n-        self.def_key(def_id).disambiguated_data.data == DefPathData::ClosureExpr\n+        matches!(self.def_kind(def_id), DefKind::Closure | DefKind::Generator)\n     }\n \n     /// Returns `true` if `def_id` refers to a trait (i.e., `trait Foo { ... }`).\n     pub fn is_trait(self, def_id: DefId) -> bool {\n-        self.def_kind(def_id) == Some(DefKind::Trait)\n+        self.def_kind(def_id) == DefKind::Trait\n     }\n \n     /// Returns `true` if `def_id` refers to a trait alias (i.e., `trait Foo = ...;`),\n     /// and `false` otherwise.\n     pub fn is_trait_alias(self, def_id: DefId) -> bool {\n-        self.def_kind(def_id) == Some(DefKind::TraitAlias)\n+        self.def_kind(def_id) == DefKind::TraitAlias\n     }\n \n     /// Returns `true` if this `DefId` refers to the implicit constructor for\n     /// a tuple struct like `struct Foo(u32)`, and `false` otherwise.\n     pub fn is_constructor(self, def_id: DefId) -> bool {\n-        self.def_key(def_id).disambiguated_data.data == DefPathData::Ctor\n+        matches!(self.def_kind(def_id), DefKind::Ctor(..))\n     }\n \n     /// Given the def-ID of a fn or closure, returns the def-ID of"}, {"sha": "b6d10d1e3701da886b68a6f82af30ef380e0e8f1", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee", "patch": "@@ -341,7 +341,7 @@ pub fn const_eval_raw_provider<'tcx>(\n                     // because any code that existed before validation could not have failed\n                     // validation thus preventing such a hard error from being a backwards\n                     // compatibility hazard\n-                    Some(DefKind::Const | DefKind::AssocConst) => {\n+                    DefKind::Const | DefKind::AssocConst => {\n                         let hir_id = tcx.hir().as_local_hir_id(def_id.expect_local());\n                         err.report_as_lint(\n                             tcx.at(tcx.def_span(def_id)),"}, {"sha": "a497a6784ff6bc1bd143a06078c48dc506fa8599", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee", "patch": "@@ -632,7 +632,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // FIXME: The above is likely untrue. See\n             // <https://github.com/rust-lang/rust/pull/70004#issuecomment-602022110>. Is it\n             // okay to ignore `StorageDead`/`StorageLive` annotations during CTFE?\n-            Some(DefKind::Static | DefKind::Const | DefKind::AssocConst) => {}\n+            DefKind::Static | DefKind::Const | DefKind::AssocConst => {}\n             _ => {\n                 // Mark locals that use `Storage*` annotations as dead on function entry.\n                 let always_live = AlwaysLiveLocals::new(self.body());"}, {"sha": "db1ea72c0a53101af30755e93ef5934c80d82947", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee", "patch": "@@ -779,7 +779,7 @@ fn compute_codegen_unit_name(\n                 cgu_def_id = Some(DefId { krate: def_id.krate, index: CRATE_DEF_INDEX });\n             }\n             break;\n-        } else if tcx.def_kind(current_def_id) == Some(DefKind::Mod) {\n+        } else if tcx.def_kind(current_def_id) == DefKind::Mod {\n             if cgu_def_id.is_none() {\n                 cgu_def_id = Some(current_def_id);\n             }"}, {"sha": "4493ae2fef3b277ae0102d909f8215167221f543", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee", "patch": "@@ -69,10 +69,7 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n         let hir_id = tcx.hir().as_local_hir_id(source.def_id().expect_local());\n \n         let is_fn_like = FnLikeNode::from_node(tcx.hir().get(hir_id)).is_some();\n-        let is_assoc_const = match tcx.def_kind(source.def_id()) {\n-            Some(DefKind::AssocConst) => true,\n-            _ => false,\n-        };\n+        let is_assoc_const = tcx.def_kind(source.def_id()) == DefKind::AssocConst;\n \n         // Only run const prop on functions, methods, closures and associated constants\n         if !is_fn_like && !is_assoc_const {"}, {"sha": "8829b10d5dd79c3d09f049ebc0b789c1e817e9bb", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee", "patch": "@@ -807,17 +807,17 @@ fn write_mir_sig(\n     trace!(\"write_mir_sig: {:?}\", src.instance);\n     let kind = tcx.def_kind(src.def_id());\n     let is_function = match kind {\n-        Some(DefKind::Fn | DefKind::AssocFn | DefKind::Ctor(..)) => true,\n+        DefKind::Fn | DefKind::AssocFn | DefKind::Ctor(..) => true,\n         _ => tcx.is_closure(src.def_id()),\n     };\n     match (kind, src.promoted) {\n         (_, Some(i)) => write!(w, \"{:?} in \", i)?,\n-        (Some(DefKind::Const | DefKind::AssocConst), _) => write!(w, \"const \")?,\n-        (Some(DefKind::Static), _) => {\n+        (DefKind::Const | DefKind::AssocConst, _) => write!(w, \"const \")?,\n+        (DefKind::Static, _) => {\n             write!(w, \"static {}\", if tcx.is_mutable_static(src.def_id()) { \"mut \" } else { \"\" })?\n         }\n         (_, _) if is_function => write!(w, \"fn \")?,\n-        (Some(DefKind::AnonConst), _) | (None, _) => {} // things like anon const, not an item\n+        (DefKind::AnonConst, _) => {} // things like anon const, not an item\n         _ => bug!(\"Unexpected def kind {:?}\", kind),\n     }\n "}, {"sha": "e4501b5c3b562d1a0d0047769b732793bc902867", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee", "patch": "@@ -538,11 +538,10 @@ impl EmbargoVisitor<'tcx> {\n         for item_id in module.item_ids {\n             let hir_id = item_id.id;\n             let item_def_id = self.tcx.hir().local_def_id(hir_id);\n-            if let Some(def_kind) = self.tcx.def_kind(item_def_id) {\n-                let item = self.tcx.hir().expect_item(hir_id);\n-                let vis = ty::Visibility::from_hir(&item.vis, hir_id, self.tcx);\n-                self.update_macro_reachable_def(hir_id, def_kind, vis, defining_mod);\n-            }\n+            let def_kind = self.tcx.def_kind(item_def_id);\n+            let item = self.tcx.hir().expect_item(hir_id);\n+            let vis = ty::Visibility::from_hir(&item.vis, hir_id, self.tcx);\n+            self.update_macro_reachable_def(hir_id, def_kind, vis, defining_mod);\n         }\n         if let Some(exports) = self.tcx.module_exports(module_def_id) {\n             for export in exports {"}, {"sha": "bd484fc7a90cf1c569279331b8221dda6830cfe8", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee", "patch": "@@ -917,7 +917,8 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 | DefKind::LifetimeParam\n                 | DefKind::GlobalAsm\n                 | DefKind::Closure\n-                | DefKind::Impl,\n+                | DefKind::Impl\n+                | DefKind::Generator,\n                 _,\n             )\n             | Res::Local(..)"}, {"sha": "19260f4d573ac446a42af6dacfe6c61a8560f266", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee", "patch": "@@ -1487,7 +1487,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 // ```\n                 debug!(\"parent_def_kind: {:?}\", self.tcx.def_kind(parent_did));\n                 let is_raw_borrow_inside_fn_like_call = match self.tcx.def_kind(parent_did) {\n-                    Some(DefKind::Fn | DefKind::Ctor(..)) => target_ty.is_unsafe_ptr(),\n+                    DefKind::Fn | DefKind::Ctor(..) => target_ty.is_unsafe_ptr(),\n                     _ => false,\n                 };\n "}, {"sha": "19765c36ae26a7166a4233b292a65803df84cbba", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee", "patch": "@@ -150,24 +150,22 @@ crate fn program_clauses_for(tcx: TyCtxt<'_>, def_id: DefId) -> Clauses<'_> {\n     // FIXME(eddyb) this should only be using `def_kind`.\n     match tcx.def_key(def_id).disambiguated_data.data {\n         DefPathData::TypeNs(..) => match tcx.def_kind(def_id) {\n-            Some(DefKind::Trait | DefKind::TraitAlias) => program_clauses_for_trait(tcx, def_id),\n+            DefKind::Trait | DefKind::TraitAlias => program_clauses_for_trait(tcx, def_id),\n             // FIXME(eddyb) deduplicate this `associated_item` call with\n             // `program_clauses_for_associated_type_{value,def}`.\n-            Some(DefKind::AssocTy) => match tcx.associated_item(def_id).container {\n+            DefKind::AssocTy => match tcx.associated_item(def_id).container {\n                 ty::AssocItemContainer::ImplContainer(_) => {\n                     program_clauses_for_associated_type_value(tcx, def_id)\n                 }\n                 ty::AssocItemContainer::TraitContainer(_) => {\n                     program_clauses_for_associated_type_def(tcx, def_id)\n                 }\n             },\n-            Some(\n-                DefKind::Struct\n-                | DefKind::Enum\n-                | DefKind::TyAlias\n-                | DefKind::Union\n-                | DefKind::OpaqueTy,\n-            ) => program_clauses_for_type_def(tcx, def_id),\n+            DefKind::Struct\n+            | DefKind::Enum\n+            | DefKind::TyAlias\n+            | DefKind::Union\n+            | DefKind::OpaqueTy => program_clauses_for_type_def(tcx, def_id),\n             _ => List::empty(),\n         },\n         DefPathData::Impl => program_clauses_for_impl(tcx, def_id),"}, {"sha": "478a848cf09ddab28f40af8cc6f82699b3a86e53", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee", "patch": "@@ -94,10 +94,7 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n             }\n             Err(_) => {\n                 let item_span = tcx.def_span(self_type_did);\n-                let self_descr = tcx\n-                    .def_kind(self_type_did)\n-                    .map(|kind| kind.descr(self_type_did))\n-                    .unwrap_or(\"type\");\n+                let self_descr = tcx.def_kind(self_type_did).descr(self_type_did);\n                 struct_span_err!(\n                     tcx.sess,\n                     drop_impl_span,\n@@ -244,10 +241,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n \n         if !assumptions_in_impl_context.iter().any(predicate_matches_closure) {\n             let item_span = tcx.hir().span(self_type_hir_id);\n-            let self_descr = tcx\n-                .def_kind(self_type_did)\n-                .map(|kind| kind.descr(self_type_did.to_def_id()))\n-                .unwrap_or(\"type\");\n+            let self_descr = tcx.def_kind(self_type_did).descr(self_type_did.to_def_id());\n             struct_span_err!(\n                 tcx.sess,\n                 *predicate_sp,"}, {"sha": "d287589789e2d0103e812f7990bda22a32f0b2de", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee", "patch": "@@ -1564,10 +1564,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         base_did: DefId,\n     ) {\n         let struct_path = self.tcx().def_path_str(base_did);\n-        let kind_name = match self.tcx().def_kind(base_did) {\n-            Some(def_kind) => def_kind.descr(base_did),\n-            _ => \" \",\n-        };\n+        let kind_name = self.tcx().def_kind(base_did).descr(base_did);\n         let mut err = struct_span_err!(\n             self.tcx().sess,\n             field.span,"}, {"sha": "b18546cf321b623de24c554b0f5c2688392ef7b6", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee", "patch": "@@ -831,18 +831,22 @@ fn primary_body_of(\n }\n \n fn has_typeck_tables(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n+    // FIXME(#71104) some `LocalDefId` do not seem to have a corresponding `HirId`.\n+    if let Some(def_id) = def_id.as_local() {\n+        if tcx.hir().opt_local_def_id_to_hir_id(def_id).is_none() {\n+            return false;\n+        }\n+    }\n+\n     // Closures' tables come from their outermost function,\n     // as they are part of the same \"inference environment\".\n     let outer_def_id = tcx.closure_base_def_id(def_id);\n     if outer_def_id != def_id {\n         return tcx.has_typeck_tables(outer_def_id);\n     }\n \n-    // FIXME(#71104) Should really be using just `as_local_hir_id` but\n-    // some `LocalDefId` do not seem to have a corresponding HirId.\n-    if let Some(id) =\n-        def_id.as_local().and_then(|def_id| tcx.hir().opt_local_def_id_to_hir_id(def_id))\n-    {\n+    if let Some(def_id) = def_id.as_local() {\n+        let id = tcx.hir().local_def_id_to_hir_id(def_id);\n         primary_body_of(tcx, id).is_some()\n     } else {\n         false\n@@ -4972,12 +4976,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     sugg_call = fields.iter().map(|_| \"_\").collect::<Vec<_>>().join(\", \");\n                     match def_id\n                         .as_local()\n-                        .and_then(|def_id| hir.def_kind(def_id))\n+                        .map(|def_id| hir.def_kind(def_id))\n                     {\n-                        Some(hir::def::DefKind::Ctor(hir::def::CtorOf::Variant, _)) => {\n+                        Some(DefKind::Ctor(hir::def::CtorOf::Variant, _)) => {\n                             msg = \"instantiate this tuple variant\";\n                         }\n-                        Some(hir::def::DefKind::Ctor(hir::def::CtorOf::Struct, _)) => {\n+                        Some(DefKind::Ctor(CtorOf::Struct, _)) => {\n                             msg = \"instantiate this tuple struct\";\n                         }\n                         _ => {}"}, {"sha": "cd098936ed6a519c260e16f30e2a12e4dbfa4d49", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee", "patch": "@@ -278,7 +278,7 @@ fn build_type_alias_type(cx: &DocContext<'_>, did: DefId) -> Option<clean::Type>\n }\n \n pub fn build_ty(cx: &DocContext, did: DefId) -> Option<clean::Type> {\n-    match cx.tcx.def_kind(did)? {\n+    match cx.tcx.def_kind(did) {\n         DefKind::Struct | DefKind::Union | DefKind::Enum | DefKind::Const | DefKind::Static => {\n             Some(cx.tcx.type_of(did).clean(cx))\n         }"}, {"sha": "9849000e91c6e40d65311a1bc3550acee01f1a13", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee", "patch": "@@ -2134,7 +2134,7 @@ impl Clean<Vec<Item>> for doctree::Impl<'_> {\n \n         let for_ = self.for_.clean(cx);\n         let type_alias = for_.def_id().and_then(|did| match cx.tcx.def_kind(did) {\n-            Some(DefKind::TyAlias) => Some(cx.tcx.type_of(did).clean(cx)),\n+            DefKind::TyAlias => Some(cx.tcx.type_of(did).clean(cx)),\n             _ => None,\n         });\n         let make_item = |trait_: Option<Type>, for_: Type, items: Vec<Item>| Item {"}, {"sha": "c4e4802db6c0716f85d731689289ee37e9327c51", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=95b3c427d4cf740ebb3602c04dc5717aeb2ea4ee", "patch": "@@ -209,7 +209,7 @@ pub fn get_real_types(\n                                 res.extend(adds);\n                             } else if !ty.is_full_generic() {\n                                 if let Some(kind) =\n-                                    ty.def_id().and_then(|did| cx.tcx.def_kind(did).clean(cx))\n+                                    ty.def_id().map(|did| cx.tcx.def_kind(did).clean(cx))\n                                 {\n                                     res.insert((ty, kind));\n                                 }\n@@ -226,17 +226,15 @@ pub fn get_real_types(\n                     if !adds.is_empty() {\n                         res.extend(adds);\n                     } else if !ty.is_full_generic() {\n-                        if let Some(kind) =\n-                            ty.def_id().and_then(|did| cx.tcx.def_kind(did).clean(cx))\n-                        {\n+                        if let Some(kind) = ty.def_id().map(|did| cx.tcx.def_kind(did).clean(cx)) {\n                             res.insert((ty.clone(), kind));\n                         }\n                     }\n                 }\n             }\n         }\n     } else {\n-        if let Some(kind) = arg.def_id().and_then(|did| cx.tcx.def_kind(did).clean(cx)) {\n+        if let Some(kind) = arg.def_id().map(|did| cx.tcx.def_kind(did).clean(cx)) {\n             res.insert((arg.clone(), kind));\n         }\n         if let Some(gens) = arg.generics() {\n@@ -246,9 +244,7 @@ pub fn get_real_types(\n                     if !adds.is_empty() {\n                         res.extend(adds);\n                     }\n-                } else if let Some(kind) =\n-                    gen.def_id().and_then(|did| cx.tcx.def_kind(did).clean(cx))\n-                {\n+                } else if let Some(kind) = gen.def_id().map(|did| cx.tcx.def_kind(did).clean(cx)) {\n                     res.insert((gen.clone(), kind));\n                 }\n             }\n@@ -275,7 +271,7 @@ pub fn get_all_types(\n         if !args.is_empty() {\n             all_types.extend(args);\n         } else {\n-            if let Some(kind) = arg.type_.def_id().and_then(|did| cx.tcx.def_kind(did).clean(cx)) {\n+            if let Some(kind) = arg.type_.def_id().map(|did| cx.tcx.def_kind(did).clean(cx)) {\n                 all_types.insert((arg.type_.clone(), kind));\n             }\n         }\n@@ -285,9 +281,7 @@ pub fn get_all_types(\n         FnRetTy::Return(ref return_type) => {\n             let mut ret = get_real_types(generics, &return_type, cx, 0);\n             if ret.is_empty() {\n-                if let Some(kind) =\n-                    return_type.def_id().and_then(|did| cx.tcx.def_kind(did).clean(cx))\n-                {\n+                if let Some(kind) = return_type.def_id().map(|did| cx.tcx.def_kind(did).clean(cx)) {\n                     ret.insert((return_type.clone(), kind));\n                 }\n             }"}]}