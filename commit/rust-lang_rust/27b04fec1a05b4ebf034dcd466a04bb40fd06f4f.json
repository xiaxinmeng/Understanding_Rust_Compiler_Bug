{"sha": "27b04fec1a05b4ebf034dcd466a04bb40fd06f4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YjA0ZmVjMWEwNWI0ZWJmMDM0ZGNkNDY2YTA0YmI0MGZkMDZmNGY=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-13T09:36:31Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-13T09:36:31Z"}, "message": "Sort items within import alphabetically in groups\n\nWe group items in snake_case, CamelCase and SCREAMING_SNAKE_CASE", "tree": {"sha": "572e523e3b33763e0ddab44d9624d17f45e21b74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/572e523e3b33763e0ddab44d9624d17f45e21b74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27b04fec1a05b4ebf034dcd466a04bb40fd06f4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27b04fec1a05b4ebf034dcd466a04bb40fd06f4f", "html_url": "https://github.com/rust-lang/rust/commit/27b04fec1a05b4ebf034dcd466a04bb40fd06f4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27b04fec1a05b4ebf034dcd466a04bb40fd06f4f/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b37e2664a636d753d2ccb961cf596e4c83d8a03a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b37e2664a636d753d2ccb961cf596e4c83d8a03a", "html_url": "https://github.com/rust-lang/rust/commit/b37e2664a636d753d2ccb961cf596e4c83d8a03a"}], "stats": {"total": 78, "additions": 77, "deletions": 1}, "files": [{"sha": "8c38f37f2630ff367dc585aedfddb1d3fc0e2099", "filename": "src/imports.rs", "status": "modified", "additions": 77, "deletions": 1, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/27b04fec1a05b4ebf034dcd466a04bb40fd06f4f/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27b04fec1a05b4ebf034dcd466a04bb40fd06f4f/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=27b04fec1a05b4ebf034dcd466a04bb40fd06f4f", "patch": "@@ -310,6 +310,78 @@ fn append_alias(path_item_str: String, vpi: &ast::PathListItem) -> String {\n     }\n }\n \n+#[derive(Eq, PartialEq)]\n+enum ImportItem<'a> {\n+    // `self` or `self as a`\n+    SelfImport(&'a str),\n+    // name_one, name_two, ...\n+    SnakeCase(&'a str),\n+    // NameOne, NameTwo, ...\n+    CamelCase(&'a str),\n+    // NAME_ONE, NAME_TWO, ...\n+    AllCaps(&'a str),\n+    // Failed to format the import item\n+    Invalid,\n+}\n+\n+impl<'a> ImportItem<'a> {\n+    fn from_str(s: &str) -> ImportItem {\n+        if s == \"self\" || s.starts_with(\"self as\") {\n+            ImportItem::SelfImport(s)\n+        } else if s.chars().all(|c| c.is_lowercase() || c == '_' || c == ' ') {\n+            ImportItem::SnakeCase(s)\n+        } else if s.chars().all(|c| c.is_uppercase() || c == '_' || c == ' ') {\n+            ImportItem::AllCaps(s)\n+        } else {\n+            ImportItem::CamelCase(s)\n+        }\n+    }\n+\n+    fn from_opt_str(s: Option<&String>) -> ImportItem {\n+        s.map_or(ImportItem::Invalid, |s| ImportItem::from_str(s))\n+    }\n+\n+    fn to_str(&self) -> Option<&str> {\n+        match *self {\n+            ImportItem::SelfImport(s) |\n+            ImportItem::SnakeCase(s) |\n+            ImportItem::CamelCase(s) |\n+            ImportItem::AllCaps(s) => Some(s),\n+            ImportItem::Invalid => None,\n+        }\n+    }\n+\n+    fn to_u32(&self) -> u32 {\n+        match *self {\n+            ImportItem::SelfImport(..) => 0,\n+            ImportItem::SnakeCase(..) => 1,\n+            ImportItem::CamelCase(..) => 2,\n+            ImportItem::AllCaps(..) => 3,\n+            ImportItem::Invalid => 4,\n+        }\n+    }\n+}\n+\n+impl<'a> PartialOrd for ImportItem<'a> {\n+    fn partial_cmp(&self, other: &ImportItem<'a>) -> Option<Ordering> {\n+        Some(self.cmp(other))\n+    }\n+}\n+\n+impl<'a> Ord for ImportItem<'a> {\n+    fn cmp(&self, other: &ImportItem<'a>) -> Ordering {\n+        let res = self.to_u32().cmp(&other.to_u32());\n+        if res != Ordering::Equal {\n+            return res;\n+        }\n+        self.to_str().map_or(Ordering::Greater, |self_str| {\n+            other\n+                .to_str()\n+                .map_or(Ordering::Less, |other_str| self_str.cmp(other_str))\n+        })\n+    }\n+}\n+\n // Pretty prints a multi-item import.\n // Assumes that path_list.len() > 0.\n pub fn rewrite_use_list(\n@@ -366,7 +438,11 @@ pub fn rewrite_use_list(\n     let first_index = if has_self { 0 } else { 1 };\n \n     if context.config.reorder_imported_names() {\n-        items[1..].sort_by(|a, b| a.item.cmp(&b.item));\n+        items[1..].sort_by(|a, b| {\n+            let a = ImportItem::from_opt_str(a.item.as_ref());\n+            let b = ImportItem::from_opt_str(b.item.as_ref());\n+            a.cmp(&b)\n+        });\n     }\n \n "}]}