{"sha": "428358925c40fe1e15bf0b67bbf007c54b510920", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyODM1ODkyNWM0MGZlMWUxNWJmMGI2N2JiZjAwN2M1NGI1MTA5MjA=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-12-20T16:12:31Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-12-20T16:16:47Z"}, "message": "Remove the index resolution from hover\n\nWe are reasonably precise now to do this.", "tree": {"sha": "bb75488e1d2f454917ff1b65b487634c54f803cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb75488e1d2f454917ff1b65b487634c54f803cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/428358925c40fe1e15bf0b67bbf007c54b510920", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/428358925c40fe1e15bf0b67bbf007c54b510920", "html_url": "https://github.com/rust-lang/rust/commit/428358925c40fe1e15bf0b67bbf007c54b510920", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/428358925c40fe1e15bf0b67bbf007c54b510920/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af5e2abe15c2bf182b871e26a680507a51526176", "url": "https://api.github.com/repos/rust-lang/rust/commits/af5e2abe15c2bf182b871e26a680507a51526176", "html_url": "https://github.com/rust-lang/rust/commit/af5e2abe15c2bf182b871e26a680507a51526176"}], "stats": {"total": 80, "additions": 22, "deletions": 58}, "files": [{"sha": "35e39f965241f5c24b56c0d20083d9ec6d1ad97b", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 22, "deletions": 58, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/428358925c40fe1e15bf0b67bbf007c54b510920/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428358925c40fe1e15bf0b67bbf007c54b510920/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=428358925c40fe1e15bf0b67bbf007c54b510920", "patch": "@@ -12,10 +12,7 @@ use ra_syntax::{\n \n use crate::{\n     db::RootDatabase,\n-    display::{\n-        description_from_symbol, docs_from_symbol, macro_label, rust_code_markup,\n-        rust_code_markup_with_doc, ShortLabel,\n-    },\n+    display::{macro_label, rust_code_markup, rust_code_markup_with_doc, ShortLabel},\n     expand::descend_into_macros,\n     references::{classify_name, classify_name_ref, NameKind, NameKind::*},\n     FilePosition, FileRange, RangeInfo,\n@@ -95,11 +92,7 @@ fn hover_text(docs: Option<String>, desc: Option<String>) -> Option<String> {\n     }\n }\n \n-fn hover_text_from_name_kind(\n-    db: &RootDatabase,\n-    name_kind: NameKind,\n-    no_fallback: &mut bool,\n-) -> Option<String> {\n+fn hover_text_from_name_kind(db: &RootDatabase, name_kind: NameKind) -> Option<String> {\n     return match name_kind {\n         Macro(it) => {\n             let src = it.source(db);\n@@ -135,11 +128,7 @@ fn hover_text_from_name_kind(\n             hir::ModuleDef::TypeAlias(it) => from_def_source(db, it),\n             hir::ModuleDef::BuiltinType(it) => Some(it.to_string()),\n         },\n-        Local(_) => {\n-            // Hover for these shows type names\n-            *no_fallback = true;\n-            None\n-        }\n+        Local(_) => None,\n         TypeParam(_) | SelfType(_) => {\n             // FIXME: Hover for generic param\n             None\n@@ -163,60 +152,35 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n \n     let mut res = HoverResult::new();\n \n-    let mut range = match_ast! {\n+    if let Some((range, name_kind)) = match_ast! {\n         match (token.value.parent()) {\n             ast::NameRef(name_ref) => {\n-                let mut no_fallback = false;\n-                if let Some(name_kind) =\n-                    classify_name_ref(db, token.with_value(&name_ref)).map(|d| d.kind)\n-                {\n-                    res.extend(hover_text_from_name_kind(db, name_kind, &mut no_fallback))\n-                }\n-\n-                if res.is_empty() && !no_fallback {\n-                    // Fallback index based approach:\n-                    let symbols = crate::symbol_index::index_resolve(db, &name_ref);\n-                    for sym in symbols {\n-                        let docs = docs_from_symbol(db, &sym);\n-                        let desc = description_from_symbol(db, &sym);\n-                        res.extend(hover_text(docs, desc));\n-                    }\n-                }\n-\n-                if !res.is_empty() {\n-                    Some(name_ref.syntax().text_range())\n-                } else {\n-                    None\n-                }\n+                classify_name_ref(db, token.with_value(&name_ref)).map(|d| (name_ref.syntax().text_range(), d.kind))\n             },\n             ast::Name(name) => {\n-                if let Some(name_kind) = classify_name(db, token.with_value(&name)).map(|d| d.kind) {\n-                    res.extend(hover_text_from_name_kind(db, name_kind, &mut true));\n-                }\n-\n-                if !res.is_empty() {\n-                    Some(name.syntax().text_range())\n-                } else {\n-                    None\n-                }\n+                classify_name(db, token.with_value(&name)).map(|d| (name.syntax().text_range(), d.kind))\n             },\n             _ => None,\n         }\n-    };\n+    } {\n+        res.extend(hover_text_from_name_kind(db, name_kind));\n \n-    if range.is_none() {\n-        let node = token.value.ancestors().find(|n| {\n-            ast::Expr::cast(n.clone()).is_some() || ast::Pat::cast(n.clone()).is_some()\n-        })?;\n-        let frange = FileRange { file_id: position.file_id, range: node.text_range() };\n-        res.extend(type_of(db, frange).map(rust_code_markup));\n-        range = Some(node.text_range());\n-    };\n+        if !res.is_empty() {\n+            return Some(RangeInfo::new(range, res));\n+        }\n+    }\n \n-    let range = range?;\n+    let node = token\n+        .value\n+        .ancestors()\n+        .find(|n| ast::Expr::cast(n.clone()).is_some() || ast::Pat::cast(n.clone()).is_some())?;\n+    let frange = FileRange { file_id: position.file_id, range: node.text_range() };\n+    res.extend(type_of(db, frange).map(rust_code_markup));\n     if res.is_empty() {\n         return None;\n     }\n+    let range = node.text_range();\n+\n     Some(RangeInfo::new(range, res))\n }\n \n@@ -314,7 +278,7 @@ mod tests {\n             &[\"pub fn foo() -> u32\"],\n         );\n \n-        // Multiple results\n+        // Multiple candidates but results are ambiguous.\n         check_hover_result(\n             r#\"\n             //- /a.rs\n@@ -335,7 +299,7 @@ mod tests {\n                 let foo_test = fo<|>o();\n             }\n         \"#,\n-            &[\"pub fn foo() -> &str\", \"pub fn foo() -> u32\", \"pub fn foo(a: u32, b: u32)\"],\n+            &[\"{unknown}\"],\n         );\n     }\n "}]}