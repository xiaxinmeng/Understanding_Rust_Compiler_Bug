{"sha": "efdc3facdfe931108146587b2f9d22b7dfd217c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZGMzZmFjZGZlOTMxMTA4MTQ2NTg3YjJmOWQyMmI3ZGZkMjE3YzU=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-28T05:31:33Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-09-05T17:56:57Z"}, "message": "Give a much better error message when an item has a macro disambiguator\n\nPreviously, this called `check_full_res` for values and types, but not\nmacros. This would result in not showing when there was a partial\nresolution for a parent of the item.\n\nThis now calls `check_full_res`. Additionally, it checks if there was a\ndisambiguator, and if so, says that specific kind wasn't found instead\nof saying generically 'associated item'.", "tree": {"sha": "a54e0fbd163b40a8188b336746030ba8c95dbcf8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a54e0fbd163b40a8188b336746030ba8c95dbcf8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efdc3facdfe931108146587b2f9d22b7dfd217c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efdc3facdfe931108146587b2f9d22b7dfd217c5", "html_url": "https://github.com/rust-lang/rust/commit/efdc3facdfe931108146587b2f9d22b7dfd217c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efdc3facdfe931108146587b2f9d22b7dfd217c5/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee683ef8532034a4bee01e9aa8fd92dbe38ac6f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee683ef8532034a4bee01e9aa8fd92dbe38ac6f1", "html_url": "https://github.com/rust-lang/rust/commit/ee683ef8532034a4bee01e9aa8fd92dbe38ac6f1"}], "stats": {"total": 91, "additions": 59, "deletions": 32}, "files": [{"sha": "df8ecf26a412eb18556e53ce2094f0dc3c09ea79", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 57, "deletions": 30, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/efdc3facdfe931108146587b2f9d22b7dfd217c5/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdc3facdfe931108146587b2f9d22b7dfd217c5/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=efdc3facdfe931108146587b2f9d22b7dfd217c5", "patch": "@@ -262,11 +262,11 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 false,\n             ) {\n                 if let SyntaxExtensionKind::LegacyBang { .. } = ext.kind {\n-                    return Ok(res.map_id(|_| panic!(\"unexpected id\")));\n+                    return Some(Ok(res.map_id(|_| panic!(\"unexpected id\"))));\n                 }\n             }\n             if let Some(res) = resolver.all_macros().get(&Symbol::intern(path_str)) {\n-                return Ok(res.map_id(|_| panic!(\"unexpected id\")));\n+                return Some(Ok(res.map_id(|_| panic!(\"unexpected id\"))));\n             }\n             if let Some(module_id) = parent_id {\n                 debug!(\"resolving {} as a macro in the module {:?}\", path_str, module_id);\n@@ -276,14 +276,32 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                     // don't resolve builtins like `#[derive]`\n                     if let Res::Def(..) = res {\n                         let res = res.map_id(|_| panic!(\"unexpected node_id\"));\n-                        return Ok(res);\n+                        return Some(Ok(res));\n                     }\n                 }\n             } else {\n                 debug!(\"attempting to resolve item without parent module: {}\", path_str);\n-                return Err(ResolutionFailure::NoParentItem);\n+                return Some(Err(ResolutionFailure::NoParentItem));\n             }\n-            return Err(ResolutionFailure::NotInScope(path_str.into()));\n+            None\n+        })\n+        // This weird control flow is so we don't borrow the resolver more than once at a time\n+        .unwrap_or_else(|| {\n+            let mut split = path_str.rsplitn(2, \"::\");\n+            if let Some((parent, base)) = split.next().and_then(|x| Some((split.next()?, x))) {\n+                if let Some(res) = self.check_full_res(TypeNS, parent, parent_id, &None, &None) {\n+                    return Err(if matches!(res, Res::PrimTy(_)) {\n+                        ResolutionFailure::NoPrimitiveAssocItem {\n+                            res,\n+                            prim_name: parent,\n+                            assoc_item: Symbol::intern(base),\n+                        }\n+                    } else {\n+                        ResolutionFailure::NoAssocItem(res, Symbol::intern(base))\n+                    });\n+                }\n+            }\n+            Err(ResolutionFailure::NotInScope(path_str.into()))\n         })\n     }\n     /// Resolves a string as a path within a particular namespace. Also returns an optional\n@@ -981,6 +999,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                                     cx,\n                                     &item,\n                                     path_str,\n+                                    disambiguator,\n                                     &dox,\n                                     link_range,\n                                     smallvec![kind],\n@@ -1060,6 +1079,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                                 cx,\n                                 &item,\n                                 path_str,\n+                                disambiguator,\n                                 &dox,\n                                 link_range,\n                                 candidates.into_iter().filter_map(|res| res.err()).collect(),\n@@ -1114,6 +1134,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                                     cx,\n                                     &item,\n                                     path_str,\n+                                    disambiguator,\n                                     &dox,\n                                     link_range,\n                                     smallvec![kind],\n@@ -1489,6 +1510,7 @@ fn resolution_failure(\n     cx: &DocContext<'_>,\n     item: &Item,\n     path_str: &str,\n+    disambiguator: Option<Disambiguator>,\n     dox: &str,\n     link_range: Option<Range<usize>>,\n     kinds: SmallVec<[ResolutionFailure<'_>; 3]>,\n@@ -1581,34 +1603,39 @@ fn resolution_failure(\n \n                         let (kind, def_id) = match res {\n                             Res::Def(kind, def_id) => (kind, def_id),\n-                            _ => unreachable!(\n-                                \"primitives are covered above and other `Res` variants aren't possible at module scope\"\n+                            x => unreachable!(\n+                                \"primitives are covered above and other `Res` variants aren't possible at module scope: {:?}\",\n+                                x,\n                             ),\n                         };\n                         let name = cx.tcx.item_name(def_id);\n-                        let path_description = match kind {\n-                            Mod | ForeignMod => \"inner item\",\n-                            Struct => \"field or associated item\",\n-                            Enum | Union => \"variant or associated item\",\n-                            Variant\n-                            | Field\n-                            | Closure\n-                            | Generator\n-                            | AssocTy\n-                            | AssocConst\n-                            | AssocFn\n-                            | Fn\n-                            | Macro(_)\n-                            | Const\n-                            | ConstParam\n-                            | ExternCrate\n-                            | Use\n-                            | LifetimeParam\n-                            | Ctor(_, _)\n-                            | AnonConst => return assoc_item_not_allowed(res, diag),\n-                            Trait | TyAlias | ForeignTy | OpaqueTy | TraitAlias | TyParam\n-                            | Static => \"associated item\",\n-                            Impl | GlobalAsm => unreachable!(\"not a path\"),\n+                        let path_description = if let Some(disambiguator) = disambiguator {\n+                            disambiguator.descr()\n+                        } else {\n+                            match kind {\n+                                Mod | ForeignMod => \"inner item\",\n+                                Struct => \"field or associated item\",\n+                                Enum | Union => \"variant or associated item\",\n+                                Variant\n+                                | Field\n+                                | Closure\n+                                | Generator\n+                                | AssocTy\n+                                | AssocConst\n+                                | AssocFn\n+                                | Fn\n+                                | Macro(_)\n+                                | Const\n+                                | ConstParam\n+                                | ExternCrate\n+                                | Use\n+                                | LifetimeParam\n+                                | Ctor(_, _)\n+                                | AnonConst => return assoc_item_not_allowed(res, diag),\n+                                Trait | TyAlias | ForeignTy | OpaqueTy | TraitAlias | TyParam\n+                                | Static => \"associated item\",\n+                                Impl | GlobalAsm => unreachable!(\"not a path\"),\n+                            }\n                         };\n                         let note = format!(\n                             \"the {} `{}` has no {} named `{}`\","}, {"sha": "ae89f418984d2bc49d3f07af9479aec5bb57f18b", "filename": "src/test/rustdoc-ui/intra-link-errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efdc3facdfe931108146587b2f9d22b7dfd217c5/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdc3facdfe931108146587b2f9d22b7dfd217c5/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.rs?ref=efdc3facdfe931108146587b2f9d22b7dfd217c5", "patch": "@@ -65,7 +65,7 @@ impl S {\n \n /// [T::h!]\n //~^ ERROR unresolved link\n-//~| NOTE no item named `T::h`\n+//~| NOTE `T` has no macro named `h`\n pub trait T {\n     fn g() {}\n }"}, {"sha": "68941d64c7a2ca2e8fad70e68bc6c0a2c054fedd", "filename": "src/test/rustdoc-ui/intra-link-errors.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efdc3facdfe931108146587b2f9d22b7dfd217c5/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efdc3facdfe931108146587b2f9d22b7dfd217c5/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.stderr?ref=efdc3facdfe931108146587b2f9d22b7dfd217c5", "patch": "@@ -97,7 +97,7 @@ error: unresolved link to `T::h`\n LL | /// [T::h!]\n    |      ^^^^^\n    |\n-   = note: no item named `T::h` is in scope\n+   = note: the trait `T` has no macro named `h`\n \n error: unresolved link to `S::h`\n   --> $DIR/intra-link-errors.rs:54:6"}]}