{"sha": "f2eb9f85b9b52e6538c3c7fc160725963272d471", "node_id": "C_kwDOAAsO6NoAKGYyZWI5Zjg1YjliNTJlNjUzOGMzYzdmYzE2MDcyNTk2MzI3MmQ0NzE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-30T16:54:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-30T16:54:16Z"}, "message": "Auto merge of #111017 - matthiaskrgr:rollup-yy9updi, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #110118 (download-rustc: Give a better error message if artifacts can't be dowloaded)\n - #110631 (rustdoc: catch and don't blow up on impl Trait cycles)\n - #110732 (Make ConstProp some tests unit.)\n - #110996 (bootstrap: Fix compile error: unused-mut)\n - #110999 (Output some bootstrap messages on stderr)\n - #111000 (Remove unneeded function call in `core::option`.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "1c3ccdbb1a1f0c98d4cec6cdc6d52e7113b4f455", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c3ccdbb1a1f0c98d4cec6cdc6d52e7113b4f455"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2eb9f85b9b52e6538c3c7fc160725963272d471", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2eb9f85b9b52e6538c3c7fc160725963272d471", "html_url": "https://github.com/rust-lang/rust/commit/f2eb9f85b9b52e6538c3c7fc160725963272d471", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2eb9f85b9b52e6538c3c7fc160725963272d471/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "831c9298c8e6542e3ab395216e98aec21f60b470", "url": "https://api.github.com/repos/rust-lang/rust/commits/831c9298c8e6542e3ab395216e98aec21f60b470", "html_url": "https://github.com/rust-lang/rust/commit/831c9298c8e6542e3ab395216e98aec21f60b470"}, {"sha": "d8d24d498f5404e29e83e564ffb095953740e467", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8d24d498f5404e29e83e564ffb095953740e467", "html_url": "https://github.com/rust-lang/rust/commit/d8d24d498f5404e29e83e564ffb095953740e467"}], "stats": {"total": 407, "additions": 268, "deletions": 139}, "files": [{"sha": "c38c68e1d586735406c1bef97ed00cf8863bd555", "filename": "library/core/src/option.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2eb9f85b9b52e6538c3c7fc160725963272d471/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eb9f85b9b52e6538c3c7fc160725963272d471/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=f2eb9f85b9b52e6538c3c7fc160725963272d471", "patch": "@@ -1007,7 +1007,7 @@ impl<T> Option<T> {\n     {\n         match self {\n             Some(x) => x,\n-            None => Default::default(),\n+            None => T::default(),\n         }\n     }\n \n@@ -1615,11 +1615,7 @@ impl<T> Option<T> {\n     where\n         T: Default,\n     {\n-        fn default<T: Default>() -> T {\n-            T::default()\n-        }\n-\n-        self.get_or_insert_with(default)\n+        self.get_or_insert_with(T::default)\n     }\n \n     /// Inserts a value computed from `f` into the option if it is [`None`],"}, {"sha": "bb3e6dd91d9b37e5ae84086906606c3991be6a13", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 43, "deletions": 33, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/f2eb9f85b9b52e6538c3c7fc160725963272d471/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/f2eb9f85b9b52e6538c3c7fc160725963272d471/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=f2eb9f85b9b52e6538c3c7fc160725963272d471", "patch": "@@ -42,23 +42,23 @@ def get(base, url, path, checksums, verbose=False):\n         if os.path.exists(path):\n             if verify(path, sha256, False):\n                 if verbose:\n-                    print(\"using already-download file\", path)\n+                    print(\"using already-download file\", path, file=sys.stderr)\n                 return\n             else:\n                 if verbose:\n                     print(\"ignoring already-download file\",\n-                        path, \"due to failed verification\")\n+                        path, \"due to failed verification\", file=sys.stderr)\n                 os.unlink(path)\n         download(temp_path, \"{}/{}\".format(base, url), True, verbose)\n         if not verify(temp_path, sha256, verbose):\n             raise RuntimeError(\"failed verification\")\n         if verbose:\n-            print(\"moving {} to {}\".format(temp_path, path))\n+            print(\"moving {} to {}\".format(temp_path, path), file=sys.stderr)\n         shutil.move(temp_path, path)\n     finally:\n         if os.path.isfile(temp_path):\n             if verbose:\n-                print(\"removing\", temp_path)\n+                print(\"removing\", temp_path, file=sys.stderr)\n             os.unlink(temp_path)\n \n \n@@ -68,7 +68,7 @@ def download(path, url, probably_big, verbose):\n             _download(path, url, probably_big, verbose, True)\n             return\n         except RuntimeError:\n-            print(\"\\nspurious failure, trying again\")\n+            print(\"\\nspurious failure, trying again\", file=sys.stderr)\n     _download(path, url, probably_big, verbose, False)\n \n \n@@ -79,7 +79,7 @@ def _download(path, url, probably_big, verbose, exception):\n     #  - If we are on win32 fallback to powershell\n     #  - Otherwise raise the error if appropriate\n     if probably_big or verbose:\n-        print(\"downloading {}\".format(url))\n+        print(\"downloading {}\".format(url), file=sys.stderr)\n \n     try:\n         if probably_big or verbose:\n@@ -115,20 +115,20 @@ def _download(path, url, probably_big, verbose, exception):\n def verify(path, expected, verbose):\n     \"\"\"Check if the sha256 sum of the given path is valid\"\"\"\n     if verbose:\n-        print(\"verifying\", path)\n+        print(\"verifying\", path, file=sys.stderr)\n     with open(path, \"rb\") as source:\n         found = hashlib.sha256(source.read()).hexdigest()\n     verified = found == expected\n     if not verified:\n         print(\"invalid checksum:\\n\"\n               \"    found:    {}\\n\"\n-              \"    expected: {}\".format(found, expected))\n+              \"    expected: {}\".format(found, expected), file=sys.stderr)\n     return verified\n \n \n def unpack(tarball, tarball_suffix, dst, verbose=False, match=None):\n     \"\"\"Unpack the given tarball file\"\"\"\n-    print(\"extracting\", tarball)\n+    print(\"extracting\", tarball, file=sys.stderr)\n     fname = os.path.basename(tarball).replace(tarball_suffix, \"\")\n     with contextlib.closing(tarfile.open(tarball)) as tar:\n         for member in tar.getnames():\n@@ -141,7 +141,7 @@ def unpack(tarball, tarball_suffix, dst, verbose=False, match=None):\n \n             dst_path = os.path.join(dst, name)\n             if verbose:\n-                print(\"  extracting\", member)\n+                print(\"  extracting\", member, file=sys.stderr)\n             tar.extract(member, dst)\n             src_path = os.path.join(dst, member)\n             if os.path.isdir(src_path) and os.path.exists(dst_path):\n@@ -153,7 +153,7 @@ def unpack(tarball, tarball_suffix, dst, verbose=False, match=None):\n def run(args, verbose=False, exception=False, is_bootstrap=False, **kwargs):\n     \"\"\"Run a child program in a new process\"\"\"\n     if verbose:\n-        print(\"running: \" + ' '.join(args))\n+        print(\"running: \" + ' '.join(args), file=sys.stderr)\n     sys.stdout.flush()\n     # Ensure that the .exe is used on Windows just in case a Linux ELF has been\n     # compiled in the same directory.\n@@ -193,8 +193,8 @@ def require(cmd, exit=True, exception=False):\n         if exception:\n             raise\n         elif exit:\n-            print(\"error: unable to run `{}`: {}\".format(' '.join(cmd), exc))\n-            print(\"Please make sure it's installed and in the path.\")\n+            print(\"error: unable to run `{}`: {}\".format(' '.join(cmd), exc), file=sys.stderr)\n+            print(\"Please make sure it's installed and in the path.\", file=sys.stderr)\n             sys.exit(1)\n         return None\n \n@@ -218,8 +218,8 @@ def default_build_triple(verbose):\n \n     if sys.platform == 'darwin':\n         if verbose:\n-            print(\"not using rustc detection as it is unreliable on macOS\")\n-            print(\"falling back to auto-detect\")\n+            print(\"not using rustc detection as it is unreliable on macOS\", file=sys.stderr)\n+            print(\"falling back to auto-detect\", file=sys.stderr)\n     else:\n         try:\n             version = subprocess.check_output([\"rustc\", \"--version\", \"--verbose\"],\n@@ -228,12 +228,14 @@ def default_build_triple(verbose):\n             host = next(x for x in version.split('\\n') if x.startswith(\"host: \"))\n             triple = host.split(\"host: \")[1]\n             if verbose:\n-                print(\"detected default triple {} from pre-installed rustc\".format(triple))\n+                print(\"detected default triple {} from pre-installed rustc\".format(triple),\n+                    file=sys.stderr)\n             return triple\n         except Exception as e:\n             if verbose:\n-                print(\"pre-installed rustc not detected: {}\".format(e))\n-                print(\"falling back to auto-detect\")\n+                print(\"pre-installed rustc not detected: {}\".format(e),\n+                    file=sys.stderr)\n+                print(\"falling back to auto-detect\", file=sys.stderr)\n \n     required = not platform_is_win32()\n     ostype = require([\"uname\", \"-s\"], exit=required)\n@@ -545,7 +547,7 @@ def get_answer():\n \n         answer = self._should_fix_bins_and_dylibs = get_answer()\n         if answer:\n-            print(\"info: You seem to be using Nix.\")\n+            print(\"info: You seem to be using Nix.\", file=sys.stderr)\n         return answer\n \n     def fix_bin_or_dylib(self, fname):\n@@ -558,7 +560,7 @@ def fix_bin_or_dylib(self, fname):\n         Please see https://nixos.org/patchelf.html for more information\n         \"\"\"\n         assert self._should_fix_bins_and_dylibs is True\n-        print(\"attempting to patch\", fname)\n+        print(\"attempting to patch\", fname, file=sys.stderr)\n \n         # Only build `.nix-deps` once.\n         nix_deps_dir = self.nix_deps_dir\n@@ -591,7 +593,7 @@ def fix_bin_or_dylib(self, fname):\n                     \"nix-build\", \"-E\", nix_expr, \"-o\", nix_deps_dir,\n                 ])\n             except subprocess.CalledProcessError as reason:\n-                print(\"warning: failed to call nix-build:\", reason)\n+                print(\"warning: failed to call nix-build:\", reason, file=sys.stderr)\n                 return\n             self.nix_deps_dir = nix_deps_dir\n \n@@ -611,7 +613,7 @@ def fix_bin_or_dylib(self, fname):\n         try:\n             subprocess.check_output([patchelf] + patchelf_args + [fname])\n         except subprocess.CalledProcessError as reason:\n-            print(\"warning: failed to call patchelf:\", reason)\n+            print(\"warning: failed to call patchelf:\", reason, file=sys.stderr)\n             return\n \n     def rustc_stamp(self):\n@@ -755,7 +757,7 @@ def build_bootstrap(self, color, verbose_count):\n         if \"GITHUB_ACTIONS\" in env:\n             print(\"::group::Building bootstrap\")\n         else:\n-            print(\"Building bootstrap\")\n+            print(\"Building bootstrap\", file=sys.stderr)\n         build_dir = os.path.join(self.build_dir, \"bootstrap\")\n         if self.clean and os.path.exists(build_dir):\n             shutil.rmtree(build_dir)\n@@ -849,9 +851,12 @@ def check_vendored_status(self):\n         if 'SUDO_USER' in os.environ and not self.use_vendored_sources:\n             if os.getuid() == 0:\n                 self.use_vendored_sources = True\n-                print('info: looks like you\\'re trying to run this command as root')\n-                print('      and so in order to preserve your $HOME this will now')\n-                print('      use vendored sources by default.')\n+                print('info: looks like you\\'re trying to run this command as root',\n+                    file=sys.stderr)\n+                print('      and so in order to preserve your $HOME this will now',\n+                    file=sys.stderr)\n+                print('      use vendored sources by default.',\n+                    file=sys.stderr)\n \n         cargo_dir = os.path.join(self.rust_root, '.cargo')\n         if self.use_vendored_sources:\n@@ -861,14 +866,18 @@ def check_vendored_status(self):\n                             \"--sync ./src/tools/rust-analyzer/Cargo.toml \" \\\n                             \"--sync ./compiler/rustc_codegen_cranelift/Cargo.toml \" \\\n                             \"--sync ./src/bootstrap/Cargo.toml \"\n-                print('error: vendoring required, but vendor directory does not exist.')\n+                print('error: vendoring required, but vendor directory does not exist.',\n+                    file=sys.stderr)\n                 print('       Run `cargo vendor {}` to initialize the '\n-                      'vendor directory.'.format(sync_dirs))\n-                print('Alternatively, use the pre-vendored `rustc-src` dist component.')\n+                      'vendor directory.'.format(sync_dirs),\n+                      file=sys.stderr)\n+                print('Alternatively, use the pre-vendored `rustc-src` dist component.',\n+                    file=sys.stderr)\n                 raise Exception(\"{} not found\".format(vendor_dir))\n \n             if not os.path.exists(cargo_dir):\n-                print('error: vendoring required, but .cargo/config does not exist.')\n+                print('error: vendoring required, but .cargo/config does not exist.',\n+                    file=sys.stderr)\n                 raise Exception(\"{} not found\".format(cargo_dir))\n         else:\n             if os.path.exists(cargo_dir):\n@@ -978,7 +987,7 @@ def main():\n         print(\n             \"info: Downloading and building bootstrap before processing --help command.\\n\"\n             \"      See src/bootstrap/README.md for help with common commands.\"\n-        )\n+        , file=sys.stderr)\n \n     exit_code = 0\n     success_word = \"successfully\"\n@@ -989,11 +998,12 @@ def main():\n             exit_code = error.code\n         else:\n             exit_code = 1\n-            print(error)\n+            print(error, file=sys.stderr)\n         success_word = \"unsuccessfully\"\n \n     if not help_triggered:\n-        print(\"Build completed\", success_word, \"in\", format_build_time(time() - start_time))\n+        print(\"Build completed\", success_word, \"in\", format_build_time(time() - start_time),\n+            file=sys.stderr)\n     sys.exit(exit_code)\n \n "}, {"sha": "4ef95b3370ff80aff68c26376ae26701a417dfcd", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2eb9f85b9b52e6538c3c7fc160725963272d471/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eb9f85b9b52e6538c3c7fc160725963272d471/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=f2eb9f85b9b52e6538c3c7fc160725963272d471", "patch": "@@ -1309,7 +1309,7 @@ impl Config {\n         if config.llvm_from_ci {\n             let triple = &config.build.triple;\n             let ci_llvm_bin = config.ci_llvm_root().join(\"bin\");\n-            let mut build_target = config\n+            let build_target = config\n                 .target_config\n                 .entry(config.build)\n                 .or_insert_with(|| Target::from_triple(&triple));"}, {"sha": "c1cf9b93fb3563c2877fff547d7c06811d483c2f", "filename": "src/bootstrap/download.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f2eb9f85b9b52e6538c3c7fc160725963272d471/src%2Fbootstrap%2Fdownload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eb9f85b9b52e6538c3c7fc160725963272d471/src%2Fbootstrap%2Fdownload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload.rs?ref=f2eb9f85b9b52e6538c3c7fc160725963272d471", "patch": "@@ -112,7 +112,7 @@ impl Config {\n             is_nixos && !Path::new(\"/lib\").exists()\n         });\n         if val {\n-            println!(\"info: You seem to be using Nix.\");\n+            eprintln!(\"info: You seem to be using Nix.\");\n         }\n         val\n     }\n@@ -226,7 +226,7 @@ impl Config {\n         curl.stdout(Stdio::from(f));\n         if !self.check_run(&mut curl) {\n             if self.build.contains(\"windows-msvc\") {\n-                println!(\"Fallback to PowerShell\");\n+                eprintln!(\"Fallback to PowerShell\");\n                 for _ in 0..3 {\n                     if self.try_run(Command::new(\"PowerShell.exe\").args(&[\n                         \"/nologo\",\n@@ -239,7 +239,7 @@ impl Config {\n                     ])) {\n                         return;\n                     }\n-                    println!(\"\\nspurious failure, trying again\");\n+                    eprintln!(\"\\nspurious failure, trying again\");\n                 }\n             }\n             if !help_on_error.is_empty() {\n@@ -250,7 +250,7 @@ impl Config {\n     }\n \n     fn unpack(&self, tarball: &Path, dst: &Path, pattern: &str) {\n-        println!(\"extracting {} to {}\", tarball.display(), dst.display());\n+        eprintln!(\"extracting {} to {}\", tarball.display(), dst.display());\n         if !dst.exists() {\n             t!(fs::create_dir_all(dst));\n         }\n@@ -541,7 +541,18 @@ impl Config {\n             None\n         };\n \n-        self.download_file(&format!(\"{base_url}/{url}\"), &tarball, \"\");\n+        let mut help_on_error = \"\";\n+        if destination == \"ci-rustc\" {\n+            help_on_error = \"error: failed to download pre-built rustc from CI\n+\n+note: old builds get deleted after a certain time\n+help: if trying to compile an old commit of rustc, disable `download-rustc` in config.toml:\n+\n+[rust]\n+download-rustc = false\n+\";\n+        }\n+        self.download_file(&format!(\"{base_url}/{url}\"), &tarball, help_on_error);\n         if let Some(sha256) = checksum {\n             if !self.verify(&tarball, sha256) {\n                 panic!(\"failed to verify {}\", tarball.display());"}, {"sha": "1531e7fc7b91df3ff5db420f1edd3215a051e452", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 41, "deletions": 18, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/f2eb9f85b9b52e6538c3c7fc160725963272d471/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eb9f85b9b52e6538c3c7fc160725963272d471/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f2eb9f85b9b52e6538c3c7fc160725963272d471", "patch": "@@ -1529,7 +1529,9 @@ fn maybe_expand_private_type_alias<'tcx>(\n     let Res::Def(DefKind::TyAlias, def_id) = path.res else { return None };\n     // Substitute private type aliases\n     let def_id = def_id.as_local()?;\n-    let alias = if !cx.cache.effective_visibilities.is_exported(cx.tcx, def_id.to_def_id()) {\n+    let alias = if !cx.cache.effective_visibilities.is_exported(cx.tcx, def_id.to_def_id())\n+        && !cx.current_type_aliases.contains_key(&def_id.to_def_id())\n+    {\n         &cx.tcx.hir().expect_item(def_id).kind\n     } else {\n         return None;\n@@ -1609,7 +1611,7 @@ fn maybe_expand_private_type_alias<'tcx>(\n         }\n     }\n \n-    Some(cx.enter_alias(substs, |cx| clean_ty(ty, cx)))\n+    Some(cx.enter_alias(substs, def_id.to_def_id(), |cx| clean_ty(ty, cx)))\n }\n \n pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> Type {\n@@ -1700,7 +1702,7 @@ fn normalize<'tcx>(\n pub(crate) fn clean_middle_ty<'tcx>(\n     bound_ty: ty::Binder<'tcx, Ty<'tcx>>,\n     cx: &mut DocContext<'tcx>,\n-    def_id: Option<DefId>,\n+    parent_def_id: Option<DefId>,\n ) -> Type {\n     let bound_ty = normalize(cx, bound_ty).unwrap_or(bound_ty);\n     match *bound_ty.skip_binder().kind() {\n@@ -1830,7 +1832,9 @@ pub(crate) fn clean_middle_ty<'tcx>(\n             Tuple(t.iter().map(|t| clean_middle_ty(bound_ty.rebind(t), cx, None)).collect())\n         }\n \n-        ty::Alias(ty::Projection, ref data) => clean_projection(bound_ty.rebind(*data), cx, def_id),\n+        ty::Alias(ty::Projection, ref data) => {\n+            clean_projection(bound_ty.rebind(*data), cx, parent_def_id)\n+        }\n \n         ty::Param(ref p) => {\n             if let Some(bounds) = cx.impl_trait_bounds.remove(&p.index.into()) {\n@@ -1841,15 +1845,30 @@ pub(crate) fn clean_middle_ty<'tcx>(\n         }\n \n         ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n-            // Grab the \"TraitA + TraitB\" from `impl TraitA + TraitB`,\n-            // by looking up the bounds associated with the def_id.\n-            let bounds = cx\n-                .tcx\n-                .explicit_item_bounds(def_id)\n-                .subst_iter_copied(cx.tcx, substs)\n-                .map(|(bound, _)| bound)\n-                .collect::<Vec<_>>();\n-            clean_middle_opaque_bounds(cx, bounds)\n+            // If it's already in the same alias, don't get an infinite loop.\n+            if cx.current_type_aliases.contains_key(&def_id) {\n+                let path =\n+                    external_path(cx, def_id, false, ThinVec::new(), bound_ty.rebind(substs));\n+                Type::Path { path }\n+            } else {\n+                *cx.current_type_aliases.entry(def_id).or_insert(0) += 1;\n+                // Grab the \"TraitA + TraitB\" from `impl TraitA + TraitB`,\n+                // by looking up the bounds associated with the def_id.\n+                let bounds = cx\n+                    .tcx\n+                    .explicit_item_bounds(def_id)\n+                    .subst_iter_copied(cx.tcx, substs)\n+                    .map(|(bound, _)| bound)\n+                    .collect::<Vec<_>>();\n+                let ty = clean_middle_opaque_bounds(cx, bounds);\n+                if let Some(count) = cx.current_type_aliases.get_mut(&def_id) {\n+                    *count -= 1;\n+                    if *count == 0 {\n+                        cx.current_type_aliases.remove(&def_id);\n+                    }\n+                }\n+                ty\n+            }\n         }\n \n         ty::Closure(..) => panic!(\"Closure\"),\n@@ -2229,13 +2248,17 @@ fn clean_maybe_renamed_item<'tcx>(\n                 generics: clean_generics(ty.generics, cx),\n             }),\n             ItemKind::TyAlias(hir_ty, generics) => {\n+                *cx.current_type_aliases.entry(def_id).or_insert(0) += 1;\n                 let rustdoc_ty = clean_ty(hir_ty, cx);\n                 let ty = clean_middle_ty(ty::Binder::dummy(hir_ty_to_ty(cx.tcx, hir_ty)), cx, None);\n-                TypedefItem(Box::new(Typedef {\n-                    type_: rustdoc_ty,\n-                    generics: clean_generics(generics, cx),\n-                    item_type: Some(ty),\n-                }))\n+                let generics = clean_generics(generics, cx);\n+                if let Some(count) = cx.current_type_aliases.get_mut(&def_id) {\n+                    *count -= 1;\n+                    if *count == 0 {\n+                        cx.current_type_aliases.remove(&def_id);\n+                    }\n+                }\n+                TypedefItem(Box::new(Typedef { type_: rustdoc_ty, generics, item_type: Some(ty) }))\n             }\n             ItemKind::Enum(ref def, generics) => EnumItem(Enum {\n                 variants: def.variants.iter().map(|v| clean_variant(v, cx)).collect(),"}, {"sha": "3a0c2ab02975ac018c252f976ea01f7da4ea677f", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f2eb9f85b9b52e6538c3c7fc160725963272d471/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eb9f85b9b52e6538c3c7fc160725963272d471/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=f2eb9f85b9b52e6538c3c7fc160725963272d471", "patch": "@@ -46,6 +46,7 @@ pub(crate) struct DocContext<'tcx> {\n     // for expanding type aliases at the HIR level:\n     /// Table `DefId` of type, lifetime, or const parameter -> substituted type, lifetime, or const\n     pub(crate) substs: DefIdMap<clean::SubstParam>,\n+    pub(crate) current_type_aliases: DefIdMap<usize>,\n     /// Table synthetic type parameter for `impl Trait` in argument position -> bounds\n     pub(crate) impl_trait_bounds: FxHashMap<ImplTraitParam, Vec<clean::GenericBound>>,\n     /// Auto-trait or blanket impls processed so far, as `(self_ty, trait_def_id)`.\n@@ -82,13 +83,25 @@ impl<'tcx> DocContext<'tcx> {\n \n     /// Call the closure with the given parameters set as\n     /// the substitutions for a type alias' RHS.\n-    pub(crate) fn enter_alias<F, R>(&mut self, substs: DefIdMap<clean::SubstParam>, f: F) -> R\n+    pub(crate) fn enter_alias<F, R>(\n+        &mut self,\n+        substs: DefIdMap<clean::SubstParam>,\n+        def_id: DefId,\n+        f: F,\n+    ) -> R\n     where\n         F: FnOnce(&mut Self) -> R,\n     {\n         let old_substs = mem::replace(&mut self.substs, substs);\n+        *self.current_type_aliases.entry(def_id).or_insert(0) += 1;\n         let r = f(self);\n         self.substs = old_substs;\n+        if let Some(count) = self.current_type_aliases.get_mut(&def_id) {\n+            *count -= 1;\n+            if *count == 0 {\n+                self.current_type_aliases.remove(&def_id);\n+            }\n+        }\n         r\n     }\n \n@@ -327,6 +340,7 @@ pub(crate) fn run_global_ctxt(\n         external_traits: Default::default(),\n         active_extern_traits: Default::default(),\n         substs: Default::default(),\n+        current_type_aliases: Default::default(),\n         impl_trait_bounds: Default::default(),\n         generated_synthetics: Default::default(),\n         auto_traits,"}, {"sha": "7bd30975a738c0e05cf5087b19f6c0f509a5c06e", "filename": "tests/mir-opt/const_prop/mult_by_zero.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fmult_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fmult_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmult_by_zero.rs?ref=f2eb9f85b9b52e6538c3c7fc160725963272d471", "patch": "@@ -1,5 +1,4 @@\n-// unit-test\n-// compile-flags: -O -Zmir-opt-level=4\n+// unit-test: ConstProp\n \n // EMIT_MIR mult_by_zero.test.ConstProp.diff\n fn test(x : i32) -> i32 {"}, {"sha": "629c8e60148fdbd8fdf465cedaa593b51e1643b3", "filename": "tests/mir-opt/const_prop/mult_by_zero.test.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fmult_by_zero.test.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fmult_by_zero.test.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmult_by_zero.test.ConstProp.diff?ref=f2eb9f85b9b52e6538c3c7fc160725963272d471", "patch": "@@ -7,8 +7,11 @@\n       let mut _2: i32;                     // in scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:4\n   \n       bb0: {\n--         _0 = Mul(_1, const 0_i32);       // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:8\n+          StorageLive(_2);                 // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:4\n+          _2 = _1;                         // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:4\n+-         _0 = Mul(move _2, const 0_i32);  // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:8\n +         _0 = const 0_i32;                // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:8\n+          StorageDead(_2);                 // scope 0 at $DIR/mult_by_zero.rs:+1:7: +1:8\n           return;                          // scope 0 at $DIR/mult_by_zero.rs:+2:2: +2:2\n       }\n   }"}, {"sha": "bd010e7b16080be502478b7be1c308ff6fa3f14d", "filename": "tests/mir-opt/const_prop/mutable_variable.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable.main.ConstProp.diff?ref=f2eb9f85b9b52e6538c3c7fc160725963272d471", "patch": "@@ -19,6 +19,7 @@\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable.rs:+3:9: +3:10\n -         _2 = _1;                         // scope 1 at $DIR/mutable_variable.rs:+3:13: +3:14\n +         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable.rs:+3:13: +3:14\n+          _0 = const ();                   // scope 0 at $DIR/mutable_variable.rs:+0:11: +4:2\n           StorageDead(_2);                 // scope 1 at $DIR/mutable_variable.rs:+4:1: +4:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable.rs:+4:1: +4:2\n           return;                          // scope 0 at $DIR/mutable_variable.rs:+4:2: +4:2"}, {"sha": "95987ef7fa9fa848809d84b86d1b42cafce8f785", "filename": "tests/mir-opt/const_prop/mutable_variable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable.rs?ref=f2eb9f85b9b52e6538c3c7fc160725963272d471", "patch": "@@ -1,5 +1,4 @@\n-// unit-test\n-// compile-flags: -O\n+// unit-test: ConstProp\n \n // EMIT_MIR mutable_variable.main.ConstProp.diff\n fn main() {"}, {"sha": "539f6dd94b926e917d1b0b1bdc8a25c421b40ea4", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate.main.ConstProp.diff", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff?ref=f2eb9f85b9b52e6538c3c7fc160725963272d471", "patch": "@@ -3,27 +3,26 @@\n   \n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_aggregate.rs:+0:11: +0:11\n-      let mut _3: i32;                     // in scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n-      let mut _4: i32;                     // in scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n+      let mut _1: (i32, i32);              // in scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n       scope 1 {\n-          debug x => (i32, i32){ .0 => _3, .1 => _4, }; // in scope 1 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n-          let _1: i32;                     // in scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n-          let _2: i32;                     // in scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n+          debug x => _1;                   // in scope 1 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n+          let _2: (i32, i32);              // in scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n           scope 2 {\n-              debug y => (i32, i32){ .0 => _3, .1 => _2, }; // in scope 2 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n+              debug y => _2;               // in scope 2 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_4);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n-          _3 = const 42_i32;               // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n-          _4 = const 43_i32;               // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n-          _4 = const 99_i32;               // scope 1 at $DIR/mutable_variable_aggregate.rs:+2:5: +2:13\n+          StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n+-         _1 = (const 42_i32, const 43_i32); // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n++         _1 = const (42_i32, 43_i32);     // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n+          (_1.1: i32) = const 99_i32;      // scope 1 at $DIR/mutable_variable_aggregate.rs:+2:5: +2:13\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n--         _2 = _4;                         // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n-+         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n+-         _2 = _1;                         // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n++         _2 = const (42_i32, 99_i32);     // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n+          _0 = const ();                   // scope 0 at $DIR/mutable_variable_aggregate.rs:+0:11: +4:2\n           StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:+4:1: +4:2\n-          StorageDead(_4);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:+4:1: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:+4:1: +4:2\n           return;                          // scope 0 at $DIR/mutable_variable_aggregate.rs:+4:2: +4:2\n       }\n   }"}, {"sha": "a145c0354380c773032a03caf62737afed2818d2", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.rs?ref=f2eb9f85b9b52e6538c3c7fc160725963272d471", "patch": "@@ -1,5 +1,4 @@\n-// unit-test\n-// compile-flags: -O\n+// unit-test: ConstProp\n \n // EMIT_MIR mutable_variable_aggregate.main.ConstProp.diff\n fn main() {"}, {"sha": "bec641ecfae896caed442a7b7f178a7d6bd77f96", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate_mut_ref.main.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff?ref=f2eb9f85b9b52e6538c3c7fc160725963272d471", "patch": "@@ -9,10 +9,9 @@\n           let _2: &mut (i32, i32);         // in scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:9: +2:10\n           scope 2 {\n               debug z => _2;               // in scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:9: +2:10\n-              let _3: i32;                 // in scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n-              let _4: i32;                 // in scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n+              let _3: (i32, i32);          // in scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n               scope 3 {\n-                  debug y => (i32, i32){ .0 => _3, .1 => _4, }; // in scope 3 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n+                  debug y => _3;           // in scope 3 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n               }\n           }\n       }\n@@ -24,11 +23,9 @@\n           _2 = &mut _1;                    // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:13: +2:19\n           ((*_2).1: i32) = const 99_i32;   // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+3:5: +3:13\n           StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n-          StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n-          _3 = (_1.0: i32);                // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:13: +4:14\n-          _4 = (_1.1: i32);                // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:13: +4:14\n+          _3 = _1;                         // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:13: +4:14\n+          _0 = const ();                   // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+0:11: +5:2\n           StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n-          StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n           StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n           return;                          // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:2: +5:2"}, {"sha": "3099e659f3fbb11d7d682c43c749ef6b7f145ae6", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate_mut_ref.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.rs?ref=f2eb9f85b9b52e6538c3c7fc160725963272d471", "patch": "@@ -1,5 +1,4 @@\n-// unit-test\n-// compile-flags: -O\n+// unit-test: ConstProp\n \n // EMIT_MIR mutable_variable_aggregate_mut_ref.main.ConstProp.diff\n fn main() {"}, {"sha": "374151057acdab36c74c43feeffb0269aedd0952", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate_partial_read.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.diff?ref=f2eb9f85b9b52e6538c3c7fc160725963272d471", "patch": "@@ -16,7 +16,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:9: +1:14\n           _1 = foo() -> bb1;               // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+1:29: +1:34\n                                            // mir::Constant\n-                                           // + span: $DIR/mutable_variable_aggregate_partial_read.rs:7:29: 7:32\n+                                           // + span: $DIR/mutable_variable_aggregate_partial_read.rs:6:29: 6:32\n                                            // + literal: Const { ty: fn() -> (i32, i32) {foo}, val: Value(<ZST>) }\n       }\n   \n@@ -26,6 +26,7 @@\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:9: +4:10\n -         _2 = (_1.1: i32);                // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:13: +4:16\n +         _2 = const 99_i32;               // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+4:13: +4:16\n+          _0 = const ();                   // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+0:11: +5:2\n           StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_partial_read.rs:+5:1: +5:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+5:1: +5:2\n           return;                          // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:+5:2: +5:2"}, {"sha": "0e823e9dc0845a754faede0f86ae93d161abc689", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate_partial_read.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.rs?ref=f2eb9f85b9b52e6538c3c7fc160725963272d471", "patch": "@@ -1,6 +1,5 @@\n // ignore-wasm32 compiled with panic=abort by default\n-// unit-test\n-// compile-flags: -O\n+// unit-test: ConstProp\n \n // EMIT_MIR mutable_variable_aggregate_partial_read.main.ConstProp.diff\n fn main() {"}, {"sha": "fab81063028aa028a5130d84277ad01921cf0f3a", "filename": "tests/mir-opt/const_prop/mutable_variable_no_prop.main.ConstProp.diff", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff?ref=f2eb9f85b9b52e6538c3c7fc160725963272d471", "patch": "@@ -4,34 +4,39 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_no_prop.rs:+0:11: +0:11\n       let mut _1: u32;                     // in scope 0 at $DIR/mutable_variable_no_prop.rs:+1:9: +1:14\n-      let mut _2: u32;                     // in scope 0 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n-      let mut _3: *mut u32;                // in scope 0 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n+      let _2: ();                          // in scope 0 at $DIR/mutable_variable_no_prop.rs:+2:5: +4:6\n+      let mut _3: u32;                     // in scope 0 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n+      let mut _4: *mut u32;                // in scope 0 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/mutable_variable_no_prop.rs:+1:9: +1:14\n-          let _4: u32;                     // in scope 1 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n+          let _5: u32;                     // in scope 1 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n           scope 2 {\n           }\n           scope 3 {\n-              debug y => _4;               // in scope 3 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n+              debug y => _5;               // in scope 3 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n           }\n       }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_no_prop.rs:+1:9: +1:14\n           _1 = const 42_u32;               // scope 0 at $DIR/mutable_variable_no_prop.rs:+1:17: +1:19\n-          StorageLive(_2);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n+          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+2:5: +4:6\n           StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n-          _3 = const {alloc1: *mut u32};   // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n+          StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n+          _4 = const {alloc1: *mut u32};   // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n                                            // mir::Constant\n-                                           // + span: $DIR/mutable_variable_no_prop.rs:10:13: 10:19\n+                                           // + span: $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n                                            // + literal: Const { ty: *mut u32, val: Value(Scalar(alloc1)) }\n-          _2 = (*_3);                      // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n-          _1 = move _2;                    // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:9: +3:19\n-          StorageDead(_2);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:18: +3:19\n-          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:19: +3:20\n-          StorageLive(_4);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n-          _4 = _1;                         // scope 1 at $DIR/mutable_variable_no_prop.rs:+5:13: +5:14\n-          StorageDead(_4);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+6:1: +6:2\n+          _3 = (*_4);                      // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:13: +3:19\n+          _1 = move _3;                    // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:9: +3:19\n+          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:18: +3:19\n+          StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:+3:19: +3:20\n+          _2 = const ();                   // scope 2 at $DIR/mutable_variable_no_prop.rs:+2:5: +4:6\n+          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+4:5: +4:6\n+          StorageLive(_5);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+5:9: +5:10\n+          _5 = _1;                         // scope 1 at $DIR/mutable_variable_no_prop.rs:+5:13: +5:14\n+          _0 = const ();                   // scope 0 at $DIR/mutable_variable_no_prop.rs:+0:11: +6:2\n+          StorageDead(_5);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:+6:1: +6:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_no_prop.rs:+6:1: +6:2\n           return;                          // scope 0 at $DIR/mutable_variable_no_prop.rs:+6:2: +6:2\n       }"}, {"sha": "e51c6223555d5344863f8eb68d170b15b0f990d1", "filename": "tests/mir-opt/const_prop/mutable_variable_no_prop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.rs?ref=f2eb9f85b9b52e6538c3c7fc160725963272d471", "patch": "@@ -1,5 +1,4 @@\n-// unit-test\n-// compile-flags: -O\n+// unit-test: ConstProp\n \n static mut STATIC: u32 = 0x42424242;\n "}, {"sha": "3048122d8fff752dad09c88fef9dc0cd6ae3e880", "filename": "tests/mir-opt/const_prop/mutable_variable_unprop_assign.main.ConstProp.diff", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff?ref=f2eb9f85b9b52e6538c3c7fc160725963272d471", "patch": "@@ -4,17 +4,16 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+0:11: +0:11\n       let _1: i32;                         // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n-      let mut _2: i32;                     // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+      let mut _3: i32;                     // in scope 0 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n       scope 1 {\n           debug a => _1;                   // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n-          let mut _5: i32;                 // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n-          let mut _6: i32;                 // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+          let mut _2: (i32, i32);          // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n           scope 2 {\n-              debug x => (i32, i32){ .0 => _5, .1 => _6, }; // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n-              let _3: i32;                 // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n+              debug x => _2;               // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+              let _4: i32;                 // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n               scope 3 {\n-                  debug y => _3;           // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n-                  let _4: i32;             // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n+                  debug y => _4;           // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n+                  let _5: i32;             // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n                   scope 4 {\n                       debug z => _5;       // in scope 4 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n                   }\n@@ -26,22 +25,27 @@\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n           _1 = foo() -> bb1;               // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+1:13: +1:18\n                                            // mir::Constant\n-                                           // + span: $DIR/mutable_variable_unprop_assign.rs:7:13: 7:16\n+                                           // + span: $DIR/mutable_variable_unprop_assign.rs:6:13: 6:16\n                                            // + literal: Const { ty: fn() -> i32 {foo}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageLive(_6);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n-          _5 = const 1_i32;                // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n-          _6 = const 2_i32;                // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n-          StorageLive(_2);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-          _2 = _1;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-          _6 = move _2;                    // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:5: +3:12\n-          StorageDead(_2);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n-          _3 = _6;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:13: +4:16\n-          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n-          StorageDead(_6);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+-         _2 = (const 1_i32, const 2_i32); // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n++         _2 = const (1_i32, 2_i32);       // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n+          StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+          _3 = _1;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+          (_2.1: i32) = move _3;           // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:5: +3:12\n+          StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n+          StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n+          _4 = (_2.1: i32);                // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:13: +4:16\n+          StorageLive(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n+-         _5 = (_2.0: i32);                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n++         _5 = const 1_i32;                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n+          _0 = const ();                   // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+0:11: +6:2\n+          StorageDead(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n           return;                          // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+6:2: +6:2\n       }"}, {"sha": "5577f78a963632f14d170ee58ebf47182eab6a70", "filename": "tests/mir-opt/const_prop/mutable_variable_unprop_assign.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.rs?ref=f2eb9f85b9b52e6538c3c7fc160725963272d471", "patch": "@@ -1,6 +1,5 @@\n // ignore-wasm32 compiled with panic=abort by default\n-// unit-test\n-// compile-flags: -O\n+// unit-test: ConstProp\n \n // EMIT_MIR mutable_variable_unprop_assign.main.ConstProp.diff\n fn main() {"}, {"sha": "e768a47a96d14ffbcdb6fe66abdb3729b72c1dc3", "filename": "tests/mir-opt/const_prop/offset_of.concrete.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.concrete.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.concrete.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.concrete.ConstProp.diff?ref=f2eb9f85b9b52e6538c3c7fc160725963272d471", "patch": "@@ -33,6 +33,7 @@\n           StorageLive(_4);                 // scope 3 at $DIR/offset_of.rs:+4:9: +4:11\n -         _4 = OffsetOf(Alpha, [2, 1]);    // scope 3 at $DIR/offset_of.rs:+4:14: +4:36\n +         _4 = const 3_usize;              // scope 3 at $DIR/offset_of.rs:+4:14: +4:36\n+          _0 = const ();                   // scope 0 at $DIR/offset_of.rs:+0:15: +5:2\n           StorageDead(_4);                 // scope 3 at $DIR/offset_of.rs:+5:1: +5:2\n           StorageDead(_3);                 // scope 2 at $DIR/offset_of.rs:+5:1: +5:2\n           StorageDead(_2);                 // scope 1 at $DIR/offset_of.rs:+5:1: +5:2"}, {"sha": "e40fdbd79d84ed5e5acaa35a62d5be4e1c52659d", "filename": "tests/mir-opt/const_prop/offset_of.generic.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.generic.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.generic.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.generic.ConstProp.diff?ref=f2eb9f85b9b52e6538c3c7fc160725963272d471", "patch": "@@ -29,6 +29,7 @@\n           _3 = OffsetOf(Delta<T>, [1]);    // scope 2 at $DIR/offset_of.rs:+3:14: +3:37\n           StorageLive(_4);                 // scope 3 at $DIR/offset_of.rs:+4:9: +4:11\n           _4 = OffsetOf(Delta<T>, [2]);    // scope 3 at $DIR/offset_of.rs:+4:14: +4:37\n+          _0 = const ();                   // scope 0 at $DIR/offset_of.rs:+0:17: +5:2\n           StorageDead(_4);                 // scope 3 at $DIR/offset_of.rs:+5:1: +5:2\n           StorageDead(_3);                 // scope 2 at $DIR/offset_of.rs:+5:1: +5:2\n           StorageDead(_2);                 // scope 1 at $DIR/offset_of.rs:+5:1: +5:2"}, {"sha": "4cdcd28eeb2928728d8d045f883ddd03c973f05d", "filename": "tests/mir-opt/const_prop/offset_of.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.rs?ref=f2eb9f85b9b52e6538c3c7fc160725963272d471", "patch": "@@ -1,5 +1,4 @@\n-// unit-test\n-// compile-flags: -O\n+// unit-test: ConstProp\n \n #![feature(offset_of)]\n "}, {"sha": "c290fba563a22bd210a8a6bf33be78744a508365", "filename": "tests/mir-opt/const_prop/read_immutable_static.main.ConstProp.diff", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff?ref=f2eb9f85b9b52e6538c3c7fc160725963272d471", "patch": "@@ -18,15 +18,15 @@\n           StorageLive(_3);                 // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n           _3 = const {alloc1: &u8};        // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n                                            // mir::Constant\n-                                           // + span: $DIR/read_immutable_static.rs:8:13: 8:16\n+                                           // + span: $DIR/read_immutable_static.rs:7:13: 7:16\n                                            // + literal: Const { ty: &u8, val: Value(Scalar(alloc1)) }\n -         _2 = (*_3);                      // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n +         _2 = const 2_u8;                 // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:16\n           StorageLive(_4);                 // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n           StorageLive(_5);                 // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n           _5 = const {alloc1: &u8};        // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n                                            // mir::Constant\n-                                           // + span: $DIR/read_immutable_static.rs:8:19: 8:22\n+                                           // + span: $DIR/read_immutable_static.rs:7:19: 7:22\n                                            // + literal: Const { ty: &u8, val: Value(Scalar(alloc1)) }\n -         _4 = (*_5);                      // scope 0 at $DIR/read_immutable_static.rs:+1:19: +1:22\n -         _1 = Add(move _2, move _4);      // scope 0 at $DIR/read_immutable_static.rs:+1:13: +1:22\n@@ -36,6 +36,7 @@\n           StorageDead(_2);                 // scope 0 at $DIR/read_immutable_static.rs:+1:21: +1:22\n           StorageDead(_5);                 // scope 0 at $DIR/read_immutable_static.rs:+1:22: +1:23\n           StorageDead(_3);                 // scope 0 at $DIR/read_immutable_static.rs:+1:22: +1:23\n+          _0 = const ();                   // scope 0 at $DIR/read_immutable_static.rs:+0:11: +2:2\n           StorageDead(_1);                 // scope 0 at $DIR/read_immutable_static.rs:+2:1: +2:2\n           return;                          // scope 0 at $DIR/read_immutable_static.rs:+2:2: +2:2\n       }"}, {"sha": "fb8f9fe996a6df79304220c9beff5f3232e8450c", "filename": "tests/mir-opt/const_prop/read_immutable_static.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.rs?ref=f2eb9f85b9b52e6538c3c7fc160725963272d471", "patch": "@@ -1,5 +1,4 @@\n-// unit-test\n-// compile-flags: -O\n+// unit-test: ConstProp\n \n static FOO: u8 = 2;\n "}, {"sha": "c920a815fda756d80955d3e111b95cc4e99b9d9a", "filename": "tests/rustdoc-ui/issue-110629-private-type-cycle-dyn.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Frustdoc-ui%2Fissue-110629-private-type-cycle-dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Frustdoc-ui%2Fissue-110629-private-type-cycle-dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissue-110629-private-type-cycle-dyn.rs?ref=f2eb9f85b9b52e6538c3c7fc160725963272d471", "patch": "@@ -0,0 +1,12 @@\n+type Bar<'a, 'b> = Box<dyn PartialEq<Bar<'a, 'b>>>;\n+//~^ ERROR cycle detected when expanding type alias\n+\n+fn bar<'a, 'b>(i: &'a i32) -> Bar<'a, 'b> {\n+    Box::new(i)\n+}\n+\n+fn main() {\n+    let meh = 42;\n+    let muh = 42;\n+    assert!(bar(&meh) == bar(&muh));\n+}"}, {"sha": "79e1b753112b843b71cfae486e35541eae35ec42", "filename": "tests/rustdoc-ui/issue-110629-private-type-cycle-dyn.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Frustdoc-ui%2Fissue-110629-private-type-cycle-dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Frustdoc-ui%2Fissue-110629-private-type-cycle-dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissue-110629-private-type-cycle-dyn.stderr?ref=f2eb9f85b9b52e6538c3c7fc160725963272d471", "patch": "@@ -0,0 +1,25 @@\n+error[E0391]: cycle detected when expanding type alias `Bar`\n+  --> $DIR/issue-110629-private-type-cycle-dyn.rs:1:38\n+   |\n+LL | type Bar<'a, 'b> = Box<dyn PartialEq<Bar<'a, 'b>>>;\n+   |                                      ^^^^^^^^^^^\n+   |\n+   = note: ...which immediately requires expanding type alias `Bar` again\n+   = note: type aliases cannot be recursive\n+   = help: consider using a struct, enum, or union instead to break the cycle\n+   = help: see <https://doc.rust-lang.org/reference/types.html#recursive-types> for more information\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/issue-110629-private-type-cycle-dyn.rs:1:1\n+   |\n+LL | / type Bar<'a, 'b> = Box<dyn PartialEq<Bar<'a, 'b>>>;\n+LL | |\n+LL | |\n+LL | | fn bar<'a, 'b>(i: &'a i32) -> Bar<'a, 'b> {\n+...  |\n+LL | |     assert!(bar(&meh) == bar(&muh));\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0391`."}, {"sha": "2d46ddbfa6e5296799353981ad48c3b78135089d", "filename": "tests/rustdoc-ui/issue-110629-private-type-cycle.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Frustdoc-ui%2Fissue-110629-private-type-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Frustdoc-ui%2Fissue-110629-private-type-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissue-110629-private-type-cycle.rs?ref=f2eb9f85b9b52e6538c3c7fc160725963272d471", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+\n+type Bar<'a, 'b> = impl PartialEq<Bar<'a, 'b>> + std::fmt::Debug;\n+\n+fn bar<'a, 'b>(i: &'a i32) -> Bar<'a, 'b> {\n+    i\n+}\n+\n+fn main() {\n+    let meh = 42;\n+    let muh = 42;\n+    assert_eq!(bar(&meh), bar(&muh));\n+}"}, {"sha": "a4efbb098f74e222fb59a5ecff875b7f8fce738d", "filename": "tests/rustdoc/issue-110629-private-type-cycle.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Frustdoc%2Fissue-110629-private-type-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2eb9f85b9b52e6538c3c7fc160725963272d471/tests%2Frustdoc%2Fissue-110629-private-type-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-110629-private-type-cycle.rs?ref=f2eb9f85b9b52e6538c3c7fc160725963272d471", "patch": "@@ -0,0 +1,19 @@\n+// compile-flags: --document-private-items\n+\n+#![feature(type_alias_impl_trait)]\n+\n+type Bar<'a, 'b> = impl PartialEq<Bar<'a, 'b>> + std::fmt::Debug;\n+\n+// @has issue_110629_private_type_cycle/type.Bar.html\n+// @has - '//pre[@class=\"rust item-decl\"]' \\\n+//     \"pub(crate) type Bar<'a, 'b> = impl PartialEq<Bar<'a, 'b>> + Debug;\"\n+\n+fn bar<'a, 'b>(i: &'a i32) -> Bar<'a, 'b> {\n+    i\n+}\n+\n+fn main() {\n+    let meh = 42;\n+    let muh = 42;\n+    assert_eq!(bar(&meh), bar(&muh));\n+}"}]}