{"sha": "4f8f3393bc3dd9a480319a1b9d66c0778ab30b1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmOGYzMzkzYmMzZGQ5YTQ4MDMxOWExYjlkNjZjMDc3OGFiMzBiMWU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-21T13:00:57Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-21T13:00:57Z"}, "message": "Reduce visibility", "tree": {"sha": "febb796faacbc0146ad1d0bd98ef817fce74dfd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/febb796faacbc0146ad1d0bd98ef817fce74dfd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f8f3393bc3dd9a480319a1b9d66c0778ab30b1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f8f3393bc3dd9a480319a1b9d66c0778ab30b1e", "html_url": "https://github.com/rust-lang/rust/commit/4f8f3393bc3dd9a480319a1b9d66c0778ab30b1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f8f3393bc3dd9a480319a1b9d66c0778ab30b1e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36758f2767f173863039963c44791ac6c4080ab2", "url": "https://api.github.com/repos/rust-lang/rust/commits/36758f2767f173863039963c44791ac6c4080ab2", "html_url": "https://github.com/rust-lang/rust/commit/36758f2767f173863039963c44791ac6c4080ab2"}], "stats": {"total": 78, "additions": 37, "deletions": 41}, "files": [{"sha": "7b5c3ec0618267a597c44a83c52049d48dde0757", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 37, "deletions": 41, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/4f8f3393bc3dd9a480319a1b9d66c0778ab30b1e/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8f3393bc3dd9a480319a1b9d66c0778ab30b1e/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=4f8f3393bc3dd9a480319a1b9d66c0778ab30b1e", "patch": "@@ -369,47 +369,6 @@ impl Resolver {\n     }\n }\n \n-impl Resolver {\n-    pub(crate) fn push_scope(mut self, scope: Scope) -> Resolver {\n-        self.scopes.push(scope);\n-        self\n-    }\n-\n-    pub(crate) fn push_generic_params_scope(\n-        self,\n-        db: &impl DefDatabase2,\n-        def: GenericDefId,\n-    ) -> Resolver {\n-        let params = db.generic_params(def);\n-        if params.params.is_empty() {\n-            self\n-        } else {\n-            self.push_scope(Scope::GenericParams { def, params })\n-        }\n-    }\n-\n-    pub(crate) fn push_impl_block_scope(self, impl_block: ImplId) -> Resolver {\n-        self.push_scope(Scope::ImplBlockScope(impl_block))\n-    }\n-\n-    pub(crate) fn push_module_scope(\n-        self,\n-        crate_def_map: Arc<CrateDefMap>,\n-        module_id: CrateModuleId,\n-    ) -> Resolver {\n-        self.push_scope(Scope::ModuleScope(ModuleItemMap { crate_def_map, module_id }))\n-    }\n-\n-    pub(crate) fn push_expr_scope(\n-        self,\n-        owner: DefWithBodyId,\n-        expr_scopes: Arc<ExprScopes>,\n-        scope_id: ScopeId,\n-    ) -> Resolver {\n-        self.push_scope(Scope::ExprScope(ExprScope { owner, expr_scopes, scope_id }))\n-    }\n-}\n-\n pub enum ScopeDef {\n     PerNs(PerNs),\n     ImplSelfType(ImplId),\n@@ -489,6 +448,43 @@ pub fn resolver_for_scope(\n     r\n }\n \n+impl Resolver {\n+    fn push_scope(mut self, scope: Scope) -> Resolver {\n+        self.scopes.push(scope);\n+        self\n+    }\n+\n+    fn push_generic_params_scope(self, db: &impl DefDatabase2, def: GenericDefId) -> Resolver {\n+        let params = db.generic_params(def);\n+        if params.params.is_empty() {\n+            self\n+        } else {\n+            self.push_scope(Scope::GenericParams { def, params })\n+        }\n+    }\n+\n+    fn push_impl_block_scope(self, impl_block: ImplId) -> Resolver {\n+        self.push_scope(Scope::ImplBlockScope(impl_block))\n+    }\n+\n+    fn push_module_scope(\n+        self,\n+        crate_def_map: Arc<CrateDefMap>,\n+        module_id: CrateModuleId,\n+    ) -> Resolver {\n+        self.push_scope(Scope::ModuleScope(ModuleItemMap { crate_def_map, module_id }))\n+    }\n+\n+    fn push_expr_scope(\n+        self,\n+        owner: DefWithBodyId,\n+        expr_scopes: Arc<ExprScopes>,\n+        scope_id: ScopeId,\n+    ) -> Resolver {\n+        self.push_scope(Scope::ExprScope(ExprScope { owner, expr_scopes, scope_id }))\n+    }\n+}\n+\n pub trait HasResolver {\n     /// Builds a resolver for type references inside this def.\n     fn resolver(self, db: &impl DefDatabase2) -> Resolver;"}]}