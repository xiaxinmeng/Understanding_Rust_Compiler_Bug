{"sha": "73667af4445b4f86216c717f4d38ac980aa67903", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNjY3YWY0NDQ1YjRmODYyMTZjNzE3ZjRkMzhhYzk4MGFhNjc5MDM=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-01-05T19:52:34Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-01-07T17:03:53Z"}, "message": "Move ty::wf to traits.", "tree": {"sha": "4a6583629b939796564389f286c54bc2cae53d3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a6583629b939796564389f286c54bc2cae53d3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73667af4445b4f86216c717f4d38ac980aa67903", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73667af4445b4f86216c717f4d38ac980aa67903", "html_url": "https://github.com/rust-lang/rust/commit/73667af4445b4f86216c717f4d38ac980aa67903", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73667af4445b4f86216c717f4d38ac980aa67903/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "787cd5493a1078a12587d1ce83b2ff85ac667990", "url": "https://api.github.com/repos/rust-lang/rust/commits/787cd5493a1078a12587d1ce83b2ff85ac667990", "html_url": "https://github.com/rust-lang/rust/commit/787cd5493a1078a12587d1ce83b2ff85ac667990"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "b0b6994945c5f21a4a4df54e74567ae03057d337", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73667af4445b4f86216c717f4d38ac980aa67903/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73667af4445b4f86216c717f4d38ac980aa67903/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=73667af4445b4f86216c717f4d38ac980aa67903", "patch": "@@ -9,6 +9,7 @@ use std::marker::PhantomData;\n use super::engine::{TraitEngine, TraitEngineExt};\n use super::project;\n use super::select::SelectionContext;\n+use super::wf;\n use super::CodeAmbiguity;\n use super::CodeProjectionError;\n use super::CodeSelectionError;\n@@ -461,7 +462,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n             }\n \n             ty::Predicate::WellFormed(ty) => {\n-                match ty::wf::obligations(\n+                match wf::obligations(\n                     self.selcx.infcx(),\n                     obligation.param_env,\n                     obligation.cause.body_id,"}, {"sha": "18653df14b618669871b3caaa299978f9bc25ce3", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/73667af4445b4f86216c717f4d38ac980aa67903/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73667af4445b4f86216c717f4d38ac980aa67903/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=73667af4445b4f86216c717f4d38ac980aa67903", "patch": "@@ -18,6 +18,7 @@ mod select;\n mod specialize;\n mod structural_impls;\n mod util;\n+pub mod wf;\n \n use crate::infer::outlives::env::OutlivesEnvironment;\n use crate::infer::{InferCtxt, SuppressRegionErrors};"}, {"sha": "1b1cb1b36e09a5fb1646ee33cf6206f65bd584f1", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/73667af4445b4f86216c717f4d38ac980aa67903/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73667af4445b4f86216c717f4d38ac980aa67903/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=73667af4445b4f86216c717f4d38ac980aa67903", "patch": "@@ -12,6 +12,7 @@ use super::project;\n use super::project::{normalize_with_depth, Normalized, ProjectionCacheKey};\n use super::util;\n use super::util::{closure_trait_ref_and_return_type, predicate_for_trait_def};\n+use super::wf;\n use super::DerivedObligationCause;\n use super::Selection;\n use super::SelectionResult;\n@@ -738,7 +739,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             }\n \n-            ty::Predicate::WellFormed(ty) => match ty::wf::obligations(\n+            ty::Predicate::WellFormed(ty) => match wf::obligations(\n                 self.infcx,\n                 obligation.param_env,\n                 obligation.cause.body_id,\n@@ -1154,7 +1155,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// to have a *lower* recursion_depth than the obligation used to create it.\n     /// Projection sub-obligations may be returned from the projection cache,\n     /// which results in obligations with an 'old' `recursion_depth`.\n-    /// Additionally, methods like `ty::wf::obligations` and\n+    /// Additionally, methods like `wf::obligations` and\n     /// `InferCtxt.subtype_predicate` produce subobligations without\n     /// taking in a 'parent' depth, causing the generated subobligations\n     /// to have a `recursion_depth` of `0`."}, {"sha": "d033ab60f15dbf2a09460c546f2d567afcfb45a0", "filename": "src/librustc/traits/wf.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73667af4445b4f86216c717f4d38ac980aa67903/src%2Flibrustc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73667af4445b4f86216c717f4d38ac980aa67903/src%2Flibrustc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fwf.rs?ref=73667af4445b4f86216c717f4d38ac980aa67903", "patch": "@@ -514,7 +514,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     // of whatever returned this exact `impl Trait`.\n \n                     // for named opaque `impl Trait` types we still need to check them\n-                    if super::is_impl_trait_defn(self.infcx.tcx, did).is_none() {\n+                    if ty::is_impl_trait_defn(self.infcx.tcx, did).is_none() {\n                         let obligations = self.nominal_obligations(did, substs);\n                         self.out.extend(obligations);\n                     }", "previous_filename": "src/librustc/ty/wf.rs"}, {"sha": "858535cf4a47b1ab104413c8a3ee986c33fc58e2", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/73667af4445b4f86216c717f4d38ac980aa67903/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73667af4445b4f86216c717f4d38ac980aa67903/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=73667af4445b4f86216c717f4d38ac980aa67903", "patch": "@@ -119,7 +119,6 @@ pub mod subst;\n pub mod trait_def;\n pub mod util;\n pub mod walk;\n-pub mod wf;\n \n mod context;\n mod diagnostics;"}, {"sha": "40f821c29d366f2c215556270fb5dd5a76c87b0a", "filename": "src/librustc_traits/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73667af4445b4f86216c717f4d38ac980aa67903/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73667af4445b4f86216c717f4d38ac980aa67903/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs?ref=73667af4445b4f86216c717f4d38ac980aa67903", "patch": "@@ -5,11 +5,11 @@ use rustc::infer::canonical::{self, Canonical};\n use rustc::infer::InferCtxt;\n use rustc::traits::query::outlives_bounds::OutlivesBound;\n use rustc::traits::query::{CanonicalTyGoal, Fallible, NoSolution};\n+use rustc::traits::wf;\n use rustc::traits::FulfillmentContext;\n use rustc::traits::{TraitEngine, TraitEngineExt};\n use rustc::ty::outlives::Component;\n use rustc::ty::query::Providers;\n-use rustc::ty::wf;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_hir as hir;\n use rustc_span::source_map::DUMMY_SP;"}, {"sha": "5acaede2ee02e89fb7ccb0d2dfb78191718cbd08", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73667af4445b4f86216c717f4d38ac980aa67903/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73667af4445b4f86216c717f4d38ac980aa67903/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=73667af4445b4f86216c717f4d38ac980aa67903", "patch": "@@ -15,8 +15,8 @@ use rustc::lint::builtin::AMBIGUOUS_ASSOCIATED_ITEMS;\n use rustc::traits;\n use rustc::traits::astconv_object_safety_violations;\n use rustc::traits::error_reporting::report_object_safety_error;\n+use rustc::traits::wf::object_region_bounds;\n use rustc::ty::subst::{self, InternalSubsts, Subst, SubstsRef};\n-use rustc::ty::wf::object_region_bounds;\n use rustc::ty::{self, Const, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc::ty::{GenericParamDef, GenericParamDefKind};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};"}, {"sha": "f3a51fa33faa0174c00f4c05ef29476a54256bbf", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73667af4445b4f86216c717f4d38ac980aa67903/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73667af4445b4f86216c717f4d38ac980aa67903/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=73667af4445b4f86216c717f4d38ac980aa67903", "patch": "@@ -417,7 +417,7 @@ fn check_impl<'tcx>(\n                 let trait_ref = fcx.tcx.impl_trait_ref(item_def_id).unwrap();\n                 let trait_ref =\n                     fcx.normalize_associated_types_in(ast_trait_ref.path.span, &trait_ref);\n-                let obligations = ty::wf::trait_obligations(\n+                let obligations = traits::wf::trait_obligations(\n                     fcx,\n                     fcx.param_env,\n                     fcx.body_id,\n@@ -596,7 +596,7 @@ fn check_where_clauses<'tcx, 'fcx>(\n     let wf_obligations = predicates\n         .predicates\n         .iter()\n-        .flat_map(|p| ty::wf::predicate_obligations(fcx, fcx.param_env, fcx.body_id, p, span));\n+        .flat_map(|p| traits::wf::predicate_obligations(fcx, fcx.param_env, fcx.body_id, p, span));\n \n     for obligation in wf_obligations.chain(default_obligations) {\n         debug!(\"next obligation cause: {:?}\", obligation.cause);"}]}