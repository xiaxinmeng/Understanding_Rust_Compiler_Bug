{"sha": "167b70692ba2a97521237d36b487fbfccd3fb72b", "node_id": "C_kwDOAAsO6NoAKDE2N2I3MDY5MmJhMmE5NzUyMTIzN2QzNmI0ODdmYmZjY2QzZmI3MmI", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2023-04-07T01:26:38Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2023-04-07T03:01:38Z"}, "message": "Remove expect_anon and expect_anon_placeholder in favor of var", "tree": {"sha": "cc20ab34ab1b6d63cff827cac33ba58b93b78b24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc20ab34ab1b6d63cff827cac33ba58b93b78b24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/167b70692ba2a97521237d36b487fbfccd3fb72b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/167b70692ba2a97521237d36b487fbfccd3fb72b", "html_url": "https://github.com/rust-lang/rust/commit/167b70692ba2a97521237d36b487fbfccd3fb72b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/167b70692ba2a97521237d36b487fbfccd3fb72b/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4646b3df6ad09f5cda12742ee98309b659006039", "url": "https://api.github.com/repos/rust-lang/rust/commits/4646b3df6ad09f5cda12742ee98309b659006039", "html_url": "https://github.com/rust-lang/rust/commit/4646b3df6ad09f5cda12742ee98309b659006039"}], "stats": {"total": 46, "additions": 12, "deletions": 34}, "files": [{"sha": "6bbf9690bf649f2057a65200997af2c0ab8d1455", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/167b70692ba2a97521237d36b487fbfccd3fb72b/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/167b70692ba2a97521237d36b487fbfccd3fb72b/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=167b70692ba2a97521237d36b487fbfccd3fb72b", "patch": "@@ -149,17 +149,15 @@ impl<'tcx> CanonicalVarInfo<'tcx> {\n         }\n     }\n \n-    pub fn expect_anon_placeholder(self) -> u32 {\n+    pub fn expect_placeholder_index(self) -> usize {\n         match self.kind {\n             CanonicalVarKind::Ty(_)\n             | CanonicalVarKind::Region(_)\n             | CanonicalVarKind::Const(_, _) => bug!(\"expected placeholder: {self:?}\"),\n \n-            CanonicalVarKind::PlaceholderRegion(placeholder) => {\n-                placeholder.bound.kind.expect_anon()\n-            }\n-            CanonicalVarKind::PlaceholderTy(placeholder) => placeholder.bound.kind.expect_anon(),\n-            CanonicalVarKind::PlaceholderConst(placeholder, _) => placeholder.bound.as_u32(),\n+            CanonicalVarKind::PlaceholderRegion(placeholder) => placeholder.bound.var.as_usize(),\n+            CanonicalVarKind::PlaceholderTy(placeholder) => placeholder.bound.var.as_usize(),\n+            CanonicalVarKind::PlaceholderConst(placeholder, _) => placeholder.bound.as_usize(),\n         }\n     }\n }"}, {"sha": "76194f350f5caa542602364668ab73b9063d7dc1", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/167b70692ba2a97521237d36b487fbfccd3fb72b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/167b70692ba2a97521237d36b487fbfccd3fb72b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=167b70692ba2a97521237d36b487fbfccd3fb72b", "patch": "@@ -107,15 +107,6 @@ impl BoundRegionKind {\n             _ => None,\n         }\n     }\n-\n-    pub fn expect_anon(&self) -> u32 {\n-        match *self {\n-            BoundRegionKind::BrNamed(_, _) | BoundRegionKind::BrEnv => {\n-                bug!(\"expected anon region: {self:?}\")\n-            }\n-            BoundRegionKind::BrAnon(idx, _) => idx,\n-        }\n-    }\n }\n \n pub trait Article {\n@@ -1537,15 +1528,6 @@ pub enum BoundTyKind {\n     Param(DefId, Symbol),\n }\n \n-impl BoundTyKind {\n-    pub fn expect_anon(self) -> u32 {\n-        match self {\n-            BoundTyKind::Anon(i) => i,\n-            _ => bug!(),\n-        }\n-    }\n-}\n-\n impl From<BoundVar> for BoundTy {\n     fn from(var: BoundVar) -> Self {\n         BoundTy { var, kind: BoundTyKind::Anon(var.as_u32()) }"}, {"sha": "714b6dfb7176143d439185e8d95eacca437927d1", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt/canonical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/167b70692ba2a97521237d36b487fbfccd3fb72b/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/167b70692ba2a97521237d36b487fbfccd3fb72b/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs?ref=167b70692ba2a97521237d36b487fbfccd3fb72b", "patch": "@@ -188,7 +188,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n                 } else {\n                     // For placeholders which were already part of the input, we simply map this\n                     // universal bound variable back the placeholder of the input.\n-                    original_values[info.expect_anon_placeholder() as usize]\n+                    original_values[info.expect_placeholder_index()]\n                 }\n             },\n         ));"}, {"sha": "c59e496eb0ac20ec60bab867a608c7970812dff7", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/167b70692ba2a97521237d36b487fbfccd3fb72b/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/167b70692ba2a97521237d36b487fbfccd3fb72b/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=167b70692ba2a97521237d36b487fbfccd3fb72b", "patch": "@@ -1168,13 +1168,12 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ReverseParamsSubstitutor<'tcx> {\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         match *t.kind() {\n-            ty::Placeholder(ty::PlaceholderType {\n-                universe: ty::UniverseIndex::ROOT,\n-                bound: ty::BoundTy { kind: name, .. },\n-            }) => match self.params.get(&name.expect_anon()) {\n-                Some(&ty::ParamTy { index, name }) => self.tcx.mk_ty_param(index, name),\n-                None => t,\n-            },\n+            ty::Placeholder(ty::PlaceholderType { universe: ty::UniverseIndex::ROOT, bound }) => {\n+                match self.params.get(&bound.var.as_u32()) {\n+                    Some(&ty::ParamTy { index, name }) => self.tcx.mk_ty_param(index, name),\n+                    None => t,\n+                }\n+            }\n \n             _ => t.super_fold_with(self),\n         }\n@@ -1202,8 +1201,7 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for PlaceholdersCollector {\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match t.kind() {\n             ty::Placeholder(p) if p.universe == self.universe_index => {\n-                self.next_ty_placeholder =\n-                    self.next_ty_placeholder.max(p.bound.kind.expect_anon() as usize + 1);\n+                self.next_ty_placeholder = self.next_ty_placeholder.max(p.bound.var.as_usize() + 1);\n             }\n \n             _ => (),"}]}