{"sha": "ba82f54b04f429d29b0d7c5aebbae2addd5669fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhODJmNTRiMDRmNDI5ZDI5YjBkN2M1YWViYmFlMmFkZGQ1NjY5ZmQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-06T15:16:27Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-19T21:42:46Z"}, "message": "use RawConst in miri", "tree": {"sha": "0c78ea550c8eb39ebd277dcbdb2495c0a0d08276", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c78ea550c8eb39ebd277dcbdb2495c0a0d08276"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba82f54b04f429d29b0d7c5aebbae2addd5669fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba82f54b04f429d29b0d7c5aebbae2addd5669fd", "html_url": "https://github.com/rust-lang/rust/commit/ba82f54b04f429d29b0d7c5aebbae2addd5669fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba82f54b04f429d29b0d7c5aebbae2addd5669fd/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b50c1b243e09284b7bbfb81c1819d358d024168d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b50c1b243e09284b7bbfb81c1819d358d024168d", "html_url": "https://github.com/rust-lang/rust/commit/b50c1b243e09284b7bbfb81c1819d358d024168d"}], "stats": {"total": 72, "additions": 32, "deletions": 40}, "files": [{"sha": "3b32fe21adf8377c051f011e91b967e25bb153da", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ba82f54b04f429d29b0d7c5aebbae2addd5669fd/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba82f54b04f429d29b0d7c5aebbae2addd5669fd/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=ba82f54b04f429d29b0d7c5aebbae2addd5669fd", "patch": "@@ -99,8 +99,7 @@ pub(crate) fn eval_promoted<'a, 'mir, 'tcx>(\n     eval_body_using_ecx(&mut ecx, cid, Some(mir), param_env)\n }\n \n-// FIXME: This thing is a bad hack. We should get rid of it.  Ideally constants are always\n-// in an allocation.\n+// FIXME: These two conversion functions are bad hacks.  We should just always use allocations.\n pub fn op_to_const<'tcx>(\n     ecx: &CompileTimeEvalContext<'_, '_, 'tcx>,\n     op: OpTy<'tcx>,\n@@ -146,6 +145,13 @@ pub fn op_to_const<'tcx>(\n     };\n     Ok(ty::Const::from_const_value(ecx.tcx.tcx, val, op.layout.ty))\n }\n+pub fn const_to_op<'tcx>(\n+    ecx: &CompileTimeEvalContext<'_, '_, 'tcx>,\n+    cnst: &ty::Const<'tcx>,\n+) -> EvalResult<'tcx, OpTy<'tcx>> {\n+    let op = ecx.const_value_to_op(cnst.val)?;\n+    Ok(OpTy { op, layout: ecx.layout_of(cnst.ty)? })\n+}\n \n fn eval_body_and_ecx<'a, 'mir, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -496,7 +502,7 @@ pub fn const_field<'a, 'tcx>(\n     let ecx = mk_eval_cx(tcx, instance, param_env).unwrap();\n     let result = (|| {\n         // get the operand again\n-        let op = ecx.const_to_op(value)?;\n+        let op = const_to_op(&ecx, value)?;\n         // downcast\n         let down = match variant {\n             None => op,\n@@ -523,7 +529,7 @@ pub fn const_variant_index<'a, 'tcx>(\n ) -> EvalResult<'tcx, VariantIdx> {\n     trace!(\"const_variant_index: {:?}, {:?}\", instance, val);\n     let ecx = mk_eval_cx(tcx, instance, param_env).unwrap();\n-    let op = ecx.const_to_op(val)?;\n+    let op = const_to_op(&ecx, val)?;\n     Ok(ecx.read_discriminant(op)?.1)\n }\n "}, {"sha": "1d7eae50e71863eaecc6de415de53544fa263cad", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ba82f54b04f429d29b0d7c5aebbae2addd5669fd/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba82f54b04f429d29b0d7c5aebbae2addd5669fd/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=ba82f54b04f429d29b0d7c5aebbae2addd5669fd", "patch": "@@ -588,18 +588,22 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         Ok(())\n     }\n \n-    pub fn const_eval(&self, gid: GlobalId<'tcx>) -> EvalResult<'tcx, &'tcx ty::Const<'tcx>> {\n+    pub fn const_eval_raw(\n+        &self,\n+        gid: GlobalId<'tcx>,\n+    ) -> EvalResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n         let param_env = if self.tcx.is_static(gid.instance.def_id()).is_some() {\n             ty::ParamEnv::reveal_all()\n         } else {\n             self.param_env\n         };\n-        self.tcx.const_eval(param_env.and(gid)).map_err(|err| {\n+        let val = self.tcx.const_eval_raw(param_env.and(gid)).map_err(|err| {\n             match err {\n-                ErrorHandled::Reported => EvalErrorKind::ReferencedConstant.into(),\n-                ErrorHandled::TooGeneric => EvalErrorKind::TooGeneric.into(),\n+                ErrorHandled::Reported => EvalErrorKind::ReferencedConstant,\n+                ErrorHandled::TooGeneric => EvalErrorKind::TooGeneric,\n             }\n-        })\n+        })?;\n+        self.raw_const_to_mplace(val)\n     }\n \n     pub fn dump_place(&self, place: Place<M::PointerTag>) {"}, {"sha": "5d993cfee084cc2c3aef5defcd4af0408d09c9e3", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ba82f54b04f429d29b0d7c5aebbae2addd5669fd/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba82f54b04f429d29b0d7c5aebbae2addd5669fd/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=ba82f54b04f429d29b0d7c5aebbae2addd5669fd", "patch": "@@ -13,7 +13,7 @@\n \n use std::convert::TryInto;\n \n-use rustc::{mir, ty};\n+use rustc::mir;\n use rustc::ty::layout::{self, Size, LayoutOf, TyLayout, HasDataLayout, IntegerExt, VariantIdx};\n \n use rustc::mir::interpret::{\n@@ -535,20 +535,21 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             .collect()\n     }\n \n-    // Also used e.g. when miri runs into a constant.\n-    // FIXME: Can we avoid converting with ConstValue and Const?  We should be using RawConst.\n-    fn const_value_to_op(\n+    // Used when miri runs into a constant, and by CTFE.\n+    // FIXME: CTFE should use allocations, then we can make this private (embed it into\n+    // `eval_operand`, ideally).\n+    pub(crate) fn const_value_to_op(\n         &self,\n         val: ConstValue<'tcx>,\n     ) -> EvalResult<'tcx, Operand<M::PointerTag>> {\n         trace!(\"const_value_to_op: {:?}\", val);\n         match val {\n             ConstValue::Unevaluated(def_id, substs) => {\n                 let instance = self.resolve(def_id, substs)?;\n-                self.global_to_op(GlobalId {\n+                Ok(*OpTy::from(self.const_eval_raw(GlobalId {\n                     instance,\n                     promoted: None,\n-                })\n+                })?))\n             }\n             ConstValue::ByRef(id, alloc, offset) => {\n                 // We rely on mutability being set correctly in that allocation to prevent writes\n@@ -566,21 +567,6 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                 Ok(Operand::Immediate(Immediate::Scalar(x.into())).with_default_tag()),\n         }\n     }\n-    pub fn const_to_op(\n-        &self,\n-        cnst: &ty::Const<'tcx>,\n-    ) -> EvalResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n-        let op = self.const_value_to_op(cnst.val)?;\n-        Ok(OpTy { op, layout: self.layout_of(cnst.ty)? })\n-    }\n-\n-    pub(super) fn global_to_op(\n-        &self,\n-        gid: GlobalId<'tcx>\n-    ) -> EvalResult<'tcx, Operand<M::PointerTag>> {\n-        let cv = self.const_eval(gid)?;\n-        self.const_value_to_op(cv.val)\n-    }\n \n     /// Read discriminant, return the runtime value as well as the variant index.\n     pub fn read_discriminant("}, {"sha": "9f248d46350740a4203504d32f0a96444ed5fc11", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ba82f54b04f429d29b0d7c5aebbae2addd5669fd/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba82f54b04f429d29b0d7c5aebbae2addd5669fd/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=ba82f54b04f429d29b0d7c5aebbae2addd5669fd", "patch": "@@ -553,16 +553,10 @@ where\n         Ok(match *mir_place {\n             Promoted(ref promoted) => {\n                 let instance = self.frame().instance;\n-                let op = self.global_to_op(GlobalId {\n+                self.const_eval_raw(GlobalId {\n                     instance,\n                     promoted: Some(promoted.0),\n-                })?;\n-                let mplace = op.to_mem_place(); // these are always in memory\n-                let ty = self.monomorphize(promoted.1, self.substs());\n-                MPlaceTy {\n-                    mplace,\n-                    layout: self.layout_of(ty)?,\n-                }\n+                })?\n             }\n \n             Static(ref static_) => {"}, {"sha": "661ca4773b4a91939d0d3eade2d3ab2f3e9a9fa4", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba82f54b04f429d29b0d7c5aebbae2addd5669fd/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba82f54b04f429d29b0d7c5aebbae2addd5669fd/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=ba82f54b04f429d29b0d7c5aebbae2addd5669fd", "patch": "@@ -29,7 +29,9 @@ use rustc::ty::layout::{\n };\n \n use interpret::{self, EvalContext, ScalarMaybeUndef, Immediate, OpTy, MemoryKind};\n-use const_eval::{CompileTimeInterpreter, error_to_const_error, eval_promoted, mk_borrowck_eval_cx};\n+use const_eval::{\n+    CompileTimeInterpreter, const_to_op, error_to_const_error, eval_promoted, mk_borrowck_eval_cx\n+};\n use transform::{MirPass, MirSource};\n \n pub struct ConstProp;\n@@ -262,7 +264,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n         source_info: SourceInfo,\n     ) -> Option<Const<'tcx>> {\n         self.ecx.tcx.span = source_info.span;\n-        match self.ecx.const_to_op(c.literal) {\n+        match const_to_op(&self.ecx, c.literal) {\n             Ok(op) => {\n                 Some((op, c.span))\n             },"}]}