{"sha": "da257b8fecacdb577592032dcaa9e4b5900cab2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMjU3YjhmZWNhY2RiNTc3NTkyMDMyZGNhYTllNGI1OTAwY2FiMmM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-03-12T21:42:23Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-03-12T21:42:23Z"}, "message": "Add missing examples", "tree": {"sha": "273314e95bfb6af87eac2beac8d43013ecc52b82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/273314e95bfb6af87eac2beac8d43013ecc52b82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da257b8fecacdb577592032dcaa9e4b5900cab2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da257b8fecacdb577592032dcaa9e4b5900cab2c", "html_url": "https://github.com/rust-lang/rust/commit/da257b8fecacdb577592032dcaa9e4b5900cab2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da257b8fecacdb577592032dcaa9e4b5900cab2c/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fedce67cd21dc08ece5a484fe1a060346acac98a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fedce67cd21dc08ece5a484fe1a060346acac98a", "html_url": "https://github.com/rust-lang/rust/commit/fedce67cd21dc08ece5a484fe1a060346acac98a"}], "stats": {"total": 136, "additions": 134, "deletions": 2}, "files": [{"sha": "02a1b9e6a9689c2d128219fa4369518d6ac74785", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 134, "deletions": 2, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/da257b8fecacdb577592032dcaa9e4b5900cab2c/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da257b8fecacdb577592032dcaa9e4b5900cab2c/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=da257b8fecacdb577592032dcaa9e4b5900cab2c", "patch": "@@ -1375,27 +1375,159 @@ impl<'a> Formatter<'a> {\n         }\n     }\n \n-    /// Optionally specified integer width that the output should be\n+    /// Optionally specified integer width that the output should be.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(i32);\n+    ///\n+    /// impl fmt::Display for Foo {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///         if let Some(width) = formatter.width() {\n+    ///             // If we received a width, we use it\n+    ///             write!(formatter, \"{:width$}\", &format!(\"Foo({})\", self.0), width = width)\n+    ///         } else {\n+    ///             // Otherwise we do nothing special\n+    ///             write!(formatter, \"Foo({})\", self.0)\n+    ///         }\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(&format!(\"{:10}\", Foo(23)), \"Foo(23)   \");\n+    /// assert_eq!(&format!(\"{}\", Foo(23)), \"Foo(23)\");\n+    /// ```\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn width(&self) -> Option<usize> { self.width }\n \n-    /// Optionally specified precision for numeric types\n+    /// Optionally specified precision for numeric types.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(f32);\n+    ///\n+    /// impl fmt::Display for Foo {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///         if let Some(precision) = formatter.precision() {\n+    ///             // If we received a precision, we use it.\n+    ///             write!(formatter, \"Foo({1:.*})\", precision, self.0)\n+    ///         } else {\n+    ///             // Otherwise we default to 2.\n+    ///             write!(formatter, \"Foo({:.2})\", self.0)\n+    ///         }\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(&format!(\"{:.4}\", Foo(23.2)), \"Foo(23.2000)\");\n+    /// assert_eq!(&format!(\"{}\", Foo(23.2)), \"Foo(23.20)\");\n+    /// ```\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn precision(&self) -> Option<usize> { self.precision }\n \n     /// Determines if the `+` flag was specified.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(i32);\n+    ///\n+    /// impl fmt::Display for Foo {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///         if formatter.sign_plus() {\n+    ///             write!(formatter,\n+    ///                    \"Foo({}{})\",\n+    ///                    if self.0 < 0 { '-' } else { '+' },\n+    ///                    self.0)\n+    ///         } else {\n+    ///             write!(formatter, \"Foo({})\", self.0)\n+    ///         }\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(&format!(\"{:+}\", Foo(23)), \"Foo(+23)\");\n+    /// assert_eq!(&format!(\"{}\", Foo(23)), \"Foo(23)\");\n+    /// ```\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn sign_plus(&self) -> bool { self.flags & (1 << FlagV1::SignPlus as u32) != 0 }\n \n     /// Determines if the `-` flag was specified.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(i32);\n+    ///\n+    /// impl fmt::Display for Foo {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///         if formatter.sign_minus() {\n+    ///             // You want a minus sign? Have one!\n+    ///             write!(formatter, \"-Foo({})\", self.0)\n+    ///         } else {\n+    ///             write!(formatter, \"Foo({})\", self.0)\n+    ///         }\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(&format!(\"{:-}\", Foo(23)), \"-Foo(23)\");\n+    /// assert_eq!(&format!(\"{}\", Foo(23)), \"Foo(23)\");\n+    /// ```\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn sign_minus(&self) -> bool { self.flags & (1 << FlagV1::SignMinus as u32) != 0 }\n \n     /// Determines if the `#` flag was specified.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(i32);\n+    ///\n+    /// impl fmt::Display for Foo {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///         if formatter.alternate() {\n+    ///             write!(formatter, \"Foo({})\", self.0)\n+    ///         } else {\n+    ///             write!(formatter, \"{}\", self.0)\n+    ///         }\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(&format!(\"{:#}\", Foo(23)), \"Foo(23)\");\n+    /// assert_eq!(&format!(\"{}\", Foo(23)), \"23\");\n+    /// ```\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn alternate(&self) -> bool { self.flags & (1 << FlagV1::Alternate as u32) != 0 }\n \n     /// Determines if the `0` flag was specified.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(i32);\n+    ///\n+    /// impl fmt::Display for Foo {\n+    ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    ///         assert!(formatter.sign_aware_zero_pad());\n+    ///         assert_eq!(formatter.width(), Some(4));\n+    ///         // We ignore the formatter's options.\n+    ///         write!(formatter, \"{}\", self.0)\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(&format!(\"{:04}\", Foo(23)), \"23\");\n+    /// ```\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n     pub fn sign_aware_zero_pad(&self) -> bool {\n         self.flags & (1 << FlagV1::SignAwareZeroPad as u32) != 0"}]}