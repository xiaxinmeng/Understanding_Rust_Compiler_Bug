{"sha": "febe6a46f65cf46b42a53e65940e2b989b102678", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlYmU2YTQ2ZjY1Y2Y0NmI0MmE1M2U2NTk0MGUyYjk4OWIxMDI2Nzg=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-24T11:38:39Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-14T07:39:33Z"}, "message": "Refactor away field `ctxt` of `ast::Mac_`", "tree": {"sha": "3bb364c7c12f758241441099f20fab650259ccfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bb364c7c12f758241441099f20fab650259ccfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/febe6a46f65cf46b42a53e65940e2b989b102678", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/febe6a46f65cf46b42a53e65940e2b989b102678", "html_url": "https://github.com/rust-lang/rust/commit/febe6a46f65cf46b42a53e65940e2b989b102678", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/febe6a46f65cf46b42a53e65940e2b989b102678/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01a0877a738224e97d03f76d86f54d9cfe9b3cf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/01a0877a738224e97d03f76d86f54d9cfe9b3cf7", "html_url": "https://github.com/rust-lang/rust/commit/01a0877a738224e97d03f76d86f54d9cfe9b3cf7"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "68b22c5bdded634d58d2c418183d7438b575d56a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/febe6a46f65cf46b42a53e65940e2b989b102678/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/febe6a46f65cf46b42a53e65940e2b989b102678/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=febe6a46f65cf46b42a53e65940e2b989b102678", "patch": "@@ -1278,7 +1278,6 @@ pub type Mac = Spanned<Mac_>;\n pub struct Mac_ {\n     pub path: Path,\n     pub tts: Vec<TokenTree>,\n-    pub ctxt: SyntaxContext,\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]"}, {"sha": "46aa7539b4f9ceaa0329cf5841801facc0f6f1f2", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/febe6a46f65cf46b42a53e65940e2b989b102678/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/febe6a46f65cf46b42a53e65940e2b989b102678/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=febe6a46f65cf46b42a53e65940e2b989b102678", "patch": "@@ -1191,7 +1191,6 @@ impl Folder for Marker {\n             node: Mac_ {\n                 path: self.fold_path(node.path),\n                 tts: self.fold_tts(&node.tts),\n-                ctxt: mtwt::apply_mark(self.mark, node.ctxt),\n             },\n             span: self.new_span(span),\n         }"}, {"sha": "45c030d8e1f56b58e59b0882a8e315ef4e9d80d1", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/febe6a46f65cf46b42a53e65940e2b989b102678/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/febe6a46f65cf46b42a53e65940e2b989b102678/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=febe6a46f65cf46b42a53e65940e2b989b102678", "patch": "@@ -520,7 +520,6 @@ pub fn noop_fold_mac<T: Folder>(Spanned {node, span}: Mac, fld: &mut T) -> Mac {\n         node: Mac_ {\n             path: fld.fold_path(node.path),\n             tts: fld.fold_tts(&node.tts),\n-            ctxt: node.ctxt,\n         },\n         span: fld.new_span(span)\n     }"}, {"sha": "0a6b57818877318407dfa0f89e592f7a7ff50d89", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/febe6a46f65cf46b42a53e65940e2b989b102678/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/febe6a46f65cf46b42a53e65940e2b989b102678/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=febe6a46f65cf46b42a53e65940e2b989b102678", "patch": "@@ -17,7 +17,7 @@ use ast::Block;\n use ast::{BlockCheckMode, CaptureBy};\n use ast::{Constness, Crate, CrateConfig};\n use ast::{Decl, DeclKind, Defaultness};\n-use ast::{EMPTY_CTXT, EnumDef};\n+use ast::EnumDef;\n use ast::{Expr, ExprKind, RangeLimits};\n use ast::{Field, FnDecl};\n use ast::{ForeignItem, ForeignItemKind, FunctionRetTy};\n@@ -1467,7 +1467,7 @@ impl<'a> Parser<'a> {\n                                                 SeqSep::none(),\n                                                 |p| p.parse_token_tree())?;\n                 let hi = self.span.hi;\n-                TyKind::Mac(spanned(lo, hi, Mac_ { path: path, tts: tts, ctxt: EMPTY_CTXT }))\n+                TyKind::Mac(spanned(lo, hi, Mac_ { path: path, tts: tts }))\n             } else {\n                 // NAMED TYPE\n                 TyKind::Path(None, path)\n@@ -2348,7 +2348,7 @@ impl<'a> Parser<'a> {\n \n                         return Ok(self.mk_mac_expr(lo,\n                                                    hi,\n-                                                   Mac_ { path: pth, tts: tts, ctxt: EMPTY_CTXT },\n+                                                   Mac_ { path: pth, tts: tts },\n                                                    attrs));\n                     }\n                     if self.check(&token::OpenDelim(token::Brace)) {\n@@ -3661,7 +3661,7 @@ impl<'a> Parser<'a> {\n                         let tts = self.parse_seq_to_end(\n                             &token::CloseDelim(delim),\n                             SeqSep::none(), |p| p.parse_token_tree())?;\n-                        let mac = Mac_ { path: path, tts: tts, ctxt: EMPTY_CTXT };\n+                        let mac = Mac_ { path: path, tts: tts };\n                         pat = PatKind::Mac(codemap::Spanned {node: mac,\n                                                        span: mk_sp(lo, self.last_span.hi)});\n                     } else {\n@@ -3979,7 +3979,7 @@ impl<'a> Parser<'a> {\n             };\n \n             if id.name == keywords::Invalid.name() {\n-                let mac = P(spanned(lo, hi, Mac_ { path: pth, tts: tts, ctxt: EMPTY_CTXT }));\n+                let mac = P(spanned(lo, hi, Mac_ { path: pth, tts: tts }));\n                 let stmt = StmtKind::Mac(mac, style, attrs.into_thin_attrs());\n                 spanned(lo, hi, stmt)\n             } else {\n@@ -4000,7 +4000,7 @@ impl<'a> Parser<'a> {\n                         self.mk_item(\n                             lo, hi, id /*id is good here*/,\n                             ItemKind::Mac(spanned(lo, hi,\n-                                            Mac_ { path: pth, tts: tts, ctxt: EMPTY_CTXT })),\n+                                            Mac_ { path: pth, tts: tts })),\n                             Visibility::Inherited, attrs)))),\n                     ast::DUMMY_NODE_ID))\n             }\n@@ -4913,7 +4913,7 @@ impl<'a> Parser<'a> {\n             let tts = self.parse_seq_to_end(&token::CloseDelim(delim),\n                                             SeqSep::none(),\n                                             |p| p.parse_token_tree())?;\n-            let m_ = Mac_ { path: pth, tts: tts, ctxt: EMPTY_CTXT };\n+            let m_ = Mac_ { path: pth, tts: tts };\n             let m: ast::Mac = codemap::Spanned { node: m_,\n                                                 span: mk_sp(lo,\n                                                             self.last_span.hi) };\n@@ -6002,7 +6002,7 @@ impl<'a> Parser<'a> {\n                                             SeqSep::none(),\n                                             |p| p.parse_token_tree())?;\n             // single-variant-enum... :\n-            let m = Mac_ { path: pth, tts: tts, ctxt: EMPTY_CTXT };\n+            let m = Mac_ { path: pth, tts: tts };\n             let m: ast::Mac = codemap::Spanned { node: m,\n                                              span: mk_sp(mac_lo,\n                                                          self.last_span.hi) };"}]}