{"sha": "e9bd650cad7c519e3f39b8bbed5afeac94daff05", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5YmQ2NTBjYWQ3YzUxOWUzZjM5YjhiYmVkNWFmZWFjOTRkYWZmMDU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-09-01T04:14:56Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-09-02T20:29:33Z"}, "message": "Schedule cleanup for &* on fat owned pointers\n\nFor example `let _x: &Trait = &*(box Foo as Box<Trait>);`. There was a bug where no cleanup would be scheduled by the deref.\n\nNo test because cleanup-auto-borrow-obj.rs is a test for this once we remove trait cross-borrowing (done on another branch).", "tree": {"sha": "0d22115081fa8919e4279d942eb689e9f80ab7b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d22115081fa8919e4279d942eb689e9f80ab7b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9bd650cad7c519e3f39b8bbed5afeac94daff05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9bd650cad7c519e3f39b8bbed5afeac94daff05", "html_url": "https://github.com/rust-lang/rust/commit/e9bd650cad7c519e3f39b8bbed5afeac94daff05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9bd650cad7c519e3f39b8bbed5afeac94daff05/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfbd4669cd0ce6298b5cee7d4b5e1585d8228daa", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfbd4669cd0ce6298b5cee7d4b5e1585d8228daa", "html_url": "https://github.com/rust-lang/rust/commit/dfbd4669cd0ce6298b5cee7d4b5e1585d8228daa"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "74093d26fea552341c25b77b59857113644179c9", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9bd650cad7c519e3f39b8bbed5afeac94daff05/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9bd650cad7c519e3f39b8bbed5afeac94daff05/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=e9bd650cad7c519e3f39b8bbed5afeac94daff05", "patch": "@@ -451,6 +451,8 @@ impl Datum<Expr> {\n                                name: &str,\n                                expr_id: ast::NodeId)\n                                -> DatumBlock<'a, Lvalue> {\n+        debug!(\"to_lvalue_datum self: {}\", self.to_string(bcx.ccx()));\n+\n         assert!(ty::lltype_is_sized(bcx.tcx(), self.ty),\n                 \"Trying to convert unsized value to lval\");\n         self.match_kind("}, {"sha": "1f91c255ddd801ac3d86fc8cd1bbcc8cd102cbfd", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e9bd650cad7c519e3f39b8bbed5afeac94daff05/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9bd650cad7c519e3f39b8bbed5afeac94daff05/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=e9bd650cad7c519e3f39b8bbed5afeac94daff05", "patch": "@@ -2061,11 +2061,17 @@ fn deref_once<'a>(bcx: &'a Block<'a>,\n             if ty::type_is_sized(bcx.tcx(), content_ty) {\n                 deref_owned_pointer(bcx, expr, datum, content_ty)\n             } else {\n-                // A fat pointer and an opened DST value have the same represenation\n-                // just different types.\n-                DatumBlock::new(bcx, Datum::new(datum.val,\n-                                                ty::mk_open(bcx.tcx(), content_ty),\n-                                                datum.kind))\n+                // A fat pointer and an opened DST value have the same\n+                // represenation just different types. Since there is no\n+                // temporary for `*e` here (because it is unsized), we cannot\n+                // emulate the sized object code path for running drop glue and\n+                // free. Instead, we schedule cleanup for `e`, turning it into\n+                // an lvalue.\n+                let datum = unpack_datum!(\n+                    bcx, datum.to_lvalue_datum(bcx, \"deref\", expr.id));\n+\n+                let datum = Datum::new(datum.val, ty::mk_open(bcx.tcx(), content_ty), LvalueExpr);\n+                DatumBlock::new(bcx, datum)\n             }\n         }\n \n@@ -2094,7 +2100,7 @@ fn deref_once<'a>(bcx: &'a Block<'a>,\n                 // just different types.\n                 DatumBlock::new(bcx, Datum::new(datum.val,\n                                                 ty::mk_open(bcx.tcx(), content_ty),\n-                                                datum.kind))\n+                                                LvalueExpr))\n             }\n         }\n "}]}