{"sha": "ffa0bd24ed33f90bb7a6a04b66107aa3396acbe0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmYTBiZDI0ZWQzM2Y5MGJiN2E2YTA0YjY2MTA3YWEzMzk2YWNiZTA=", "commit": {"author": {"name": "Dan Gohman", "email": "sunfish@mozilla.com", "date": "2017-08-30T23:45:36Z"}, "committer": {"name": "Dan Gohman", "email": "sunfish@mozilla.com", "date": "2017-09-05T17:55:08Z"}, "message": "Add a testcase demonstrating how precedence interacts with the lossless-cast lint.", "tree": {"sha": "15099c903954cf228381e247937940e9f02b5b74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15099c903954cf228381e247937940e9f02b5b74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffa0bd24ed33f90bb7a6a04b66107aa3396acbe0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffa0bd24ed33f90bb7a6a04b66107aa3396acbe0", "html_url": "https://github.com/rust-lang/rust/commit/ffa0bd24ed33f90bb7a6a04b66107aa3396acbe0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffa0bd24ed33f90bb7a6a04b66107aa3396acbe0/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35cf2715dcaa887bc72973ea3d220054dbf0c98a", "url": "https://api.github.com/repos/rust-lang/rust/commits/35cf2715dcaa887bc72973ea3d220054dbf0c98a", "html_url": "https://github.com/rust-lang/rust/commit/35cf2715dcaa887bc72973ea3d220054dbf0c98a"}], "stats": {"total": 105, "additions": 56, "deletions": 49}, "files": [{"sha": "54012923df4fbed24c7b9293452cd226e71bbae5", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0bd24ed33f90bb7a6a04b66107aa3396acbe0/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0bd24ed33f90bb7a6a04b66107aa3396acbe0/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=ffa0bd24ed33f90bb7a6a04b66107aa3396acbe0", "patch": "@@ -59,6 +59,7 @@ fn main() {\n     1.0f32 as f64;\n     // Test cast_lossless with an expression wrapped in parens\n     (1u8 + 1u8) as u16;\n+    (1u16) + (1u8) as u16;\n     // Test cast_sign_loss\n     1i32 as u32;\n     1isize as usize;"}, {"sha": "93c5aad0c59c079a85ae01e1434c5fe45cedf737", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 55, "deletions": 49, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/ffa0bd24ed33f90bb7a6a04b66107aa3396acbe0/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffa0bd24ed33f90bb7a6a04b66107aa3396acbe0/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=ffa0bd24ed33f90bb7a6a04b66107aa3396acbe0", "patch": "@@ -314,151 +314,157 @@ error: casting u8 to u16 may become silently lossy if types change\n 61 |     (1u8 + 1u8) as u16;\n    |     ^^^^^^^^^^^^^^^^^^ help: try: `u16::from(1u8 + 1u8)`\n \n+error: casting u8 to u16 may become silently lossy if types change\n+  --> $DIR/cast.rs:62:14\n+   |\n+62 |     (1u16) + (1u8) as u16;\n+   |              ^^^^^^^^^^^^ help: try: `u16::from(1u8)`\n+\n error: casting i32 to u32 may lose the sign of the value\n-  --> $DIR/cast.rs:63:5\n+  --> $DIR/cast.rs:64:5\n    |\n-63 |     1i32 as u32;\n+64 |     1i32 as u32;\n    |     ^^^^^^^^^^^\n \n error: casting isize to usize may lose the sign of the value\n-  --> $DIR/cast.rs:64:5\n+  --> $DIR/cast.rs:65:5\n    |\n-64 |     1isize as usize;\n+65 |     1isize as usize;\n    |     ^^^^^^^^^^^^^^^\n \n error: casting isize to i8 may truncate the value\n-  --> $DIR/cast.rs:67:5\n+  --> $DIR/cast.rs:68:5\n    |\n-67 |     1isize as i8;\n+68 |     1isize as i8;\n    |     ^^^^^^^^^^^^\n \n error: casting isize to f64 causes a loss of precision on targets with 64-bit wide pointers (isize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n-  --> $DIR/cast.rs:68:5\n+  --> $DIR/cast.rs:69:5\n    |\n-68 |     1isize as f64;\n+69 |     1isize as f64;\n    |     ^^^^^^^^^^^^^\n \n error: casting usize to f64 causes a loss of precision on targets with 64-bit wide pointers (usize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n-  --> $DIR/cast.rs:69:5\n+  --> $DIR/cast.rs:70:5\n    |\n-69 |     1usize as f64;\n+70 |     1usize as f64;\n    |     ^^^^^^^^^^^^^\n \n error: casting isize to f32 causes a loss of precision (isize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n-  --> $DIR/cast.rs:70:5\n+  --> $DIR/cast.rs:71:5\n    |\n-70 |     1isize as f32;\n+71 |     1isize as f32;\n    |     ^^^^^^^^^^^^^\n \n error: casting usize to f32 causes a loss of precision (usize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n-  --> $DIR/cast.rs:71:5\n+  --> $DIR/cast.rs:72:5\n    |\n-71 |     1usize as f32;\n+72 |     1usize as f32;\n    |     ^^^^^^^^^^^^^\n \n error: casting isize to i32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:72:5\n+  --> $DIR/cast.rs:73:5\n    |\n-72 |     1isize as i32;\n+73 |     1isize as i32;\n    |     ^^^^^^^^^^^^^\n \n error: casting isize to u32 may lose the sign of the value\n-  --> $DIR/cast.rs:73:5\n+  --> $DIR/cast.rs:74:5\n    |\n-73 |     1isize as u32;\n+74 |     1isize as u32;\n    |     ^^^^^^^^^^^^^\n \n error: casting isize to u32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:73:5\n+  --> $DIR/cast.rs:74:5\n    |\n-73 |     1isize as u32;\n+74 |     1isize as u32;\n    |     ^^^^^^^^^^^^^\n \n error: casting usize to u32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:74:5\n+  --> $DIR/cast.rs:75:5\n    |\n-74 |     1usize as u32;\n+75 |     1usize as u32;\n    |     ^^^^^^^^^^^^^\n \n error: casting usize to i32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:75:5\n+  --> $DIR/cast.rs:76:5\n    |\n-75 |     1usize as i32;\n+76 |     1usize as i32;\n    |     ^^^^^^^^^^^^^\n \n error: casting usize to i32 may wrap around the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:75:5\n+  --> $DIR/cast.rs:76:5\n    |\n-75 |     1usize as i32;\n+76 |     1usize as i32;\n    |     ^^^^^^^^^^^^^\n \n error: casting i64 to isize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:77:5\n+  --> $DIR/cast.rs:78:5\n    |\n-77 |     1i64 as isize;\n+78 |     1i64 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting i64 to usize may lose the sign of the value\n-  --> $DIR/cast.rs:78:5\n+  --> $DIR/cast.rs:79:5\n    |\n-78 |     1i64 as usize;\n+79 |     1i64 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting i64 to usize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:78:5\n+  --> $DIR/cast.rs:79:5\n    |\n-78 |     1i64 as usize;\n+79 |     1i64 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u64 to isize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:79:5\n+  --> $DIR/cast.rs:80:5\n    |\n-79 |     1u64 as isize;\n+80 |     1u64 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u64 to isize may wrap around the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:79:5\n+  --> $DIR/cast.rs:80:5\n    |\n-79 |     1u64 as isize;\n+80 |     1u64 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u64 to usize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:80:5\n+  --> $DIR/cast.rs:81:5\n    |\n-80 |     1u64 as usize;\n+81 |     1u64 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u32 to isize may wrap around the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:81:5\n+  --> $DIR/cast.rs:82:5\n    |\n-81 |     1u32 as isize;\n+82 |     1u32 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting i32 to usize may lose the sign of the value\n-  --> $DIR/cast.rs:84:5\n+  --> $DIR/cast.rs:85:5\n    |\n-84 |     1i32 as usize;\n+85 |     1i32 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting to the same type is unnecessary (`i32` -> `i32`)\n-  --> $DIR/cast.rs:86:5\n+  --> $DIR/cast.rs:87:5\n    |\n-86 |     1i32 as i32;\n+87 |     1i32 as i32;\n    |     ^^^^^^^^^^^\n    |\n    = note: `-D unnecessary-cast` implied by `-D warnings`\n \n error: casting to the same type is unnecessary (`f32` -> `f32`)\n-  --> $DIR/cast.rs:87:5\n+  --> $DIR/cast.rs:88:5\n    |\n-87 |     1f32 as f32;\n+88 |     1f32 as f32;\n    |     ^^^^^^^^^^^\n \n error: casting to the same type is unnecessary (`bool` -> `bool`)\n-  --> $DIR/cast.rs:88:5\n+  --> $DIR/cast.rs:89:5\n    |\n-88 |     false as bool;\n+89 |     false as bool;\n    |     ^^^^^^^^^^^^^\n \n-error: aborting due to 75 previous errors\n+error: aborting due to 76 previous errors\n "}]}