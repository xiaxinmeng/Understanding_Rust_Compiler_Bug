{"sha": "9621156fc3814edaef6acafc06827e5aa87c9bdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MjExNTZmYzM4MTRlZGFlZjZhY2FmYzA2ODI3ZTVhYTg3YzliZGQ=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2013-09-18T08:58:52Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2013-09-18T20:51:27Z"}, "message": "librustc/libstd: No longer pass crate_map to start.", "tree": {"sha": "9acfbcc61bc1bf5e51d9391c72eab32825c41b0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9acfbcc61bc1bf5e51d9391c72eab32825c41b0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9621156fc3814edaef6acafc06827e5aa87c9bdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9621156fc3814edaef6acafc06827e5aa87c9bdd", "html_url": "https://github.com/rust-lang/rust/commit/9621156fc3814edaef6acafc06827e5aa87c9bdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9621156fc3814edaef6acafc06827e5aa87c9bdd/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2b0b11aebfe3167bf41f7c6c31cf7b1e396efe7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2b0b11aebfe3167bf41f7c6c31cf7b1e396efe7", "html_url": "https://github.com/rust-lang/rust/commit/d2b0b11aebfe3167bf41f7c6c31cf7b1e396efe7"}], "stats": {"total": 92, "additions": 79, "deletions": 13}, "files": [{"sha": "7cc38835ebc3dad93237421b2677897b070a2eb7", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9621156fc3814edaef6acafc06827e5aa87c9bdd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9621156fc3814edaef6acafc06827e5aa87c9bdd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=9621156fc3814edaef6acafc06827e5aa87c9bdd", "patch": "@@ -2442,11 +2442,6 @@ pub fn create_entry_wrapper(ccx: @mut CrateContext,\n         unsafe {\n             llvm::LLVMPositionBuilderAtEnd(bld, llbb);\n \n-            let crate_map = ccx.crate_map;\n-            let opaque_crate_map = do \"crate_map\".with_c_str |buf| {\n-                llvm::LLVMBuildPointerCast(bld, crate_map, Type::i8p().to_ref(), buf)\n-            };\n-\n             let (start_fn, args) = if use_start_lang_item {\n                 let start_def_id = match ccx.tcx.lang_items.require(StartFnLangItem) {\n                     Ok(id) => id,\n@@ -2469,8 +2464,7 @@ pub fn create_entry_wrapper(ccx: @mut CrateContext,\n                         C_null(Type::opaque_box(ccx).ptr_to()),\n                         opaque_rust_main,\n                         llvm::LLVMGetParam(llfn, 0),\n-                        llvm::LLVMGetParam(llfn, 1),\n-                        opaque_crate_map\n+                        llvm::LLVMGetParam(llfn, 1)\n                      ]\n                 };\n                 (start_fn, args)\n@@ -2479,8 +2473,7 @@ pub fn create_entry_wrapper(ccx: @mut CrateContext,\n                 let args = ~[\n                     C_null(Type::opaque_box(ccx).ptr_to()),\n                     llvm::LLVMGetParam(llfn, 0 as c_uint),\n-                    llvm::LLVMGetParam(llfn, 1 as c_uint),\n-                    opaque_crate_map\n+                    llvm::LLVMGetParam(llfn, 1 as c_uint)\n                 ];\n \n                 (rust_main, args)\n@@ -2659,6 +2652,8 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::NodeId) -> ValueRef {\n                             let path = vec::append((*pth).clone(), [path_name(ni.ident)]);\n                             foreign::register_foreign_item_fn(ccx, abis, &path, ni)\n                         }\n+                        ast::foreign_item_static(*) if attr::contains_name(ni.attrs, \"crate_map\")\n+                            => ccx.crate_map,\n                         ast::foreign_item_static(*) => {\n                             let ident = foreign::link_name(ccx, ni);\n                             let g = do ident.with_c_str |buf| {"}, {"sha": "45a65f954a3a91e824948e1d3e5bebdfae705065", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9621156fc3814edaef6acafc06827e5aa87c9bdd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9621156fc3814edaef6acafc06827e5aa87c9bdd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=9621156fc3814edaef6acafc06827e5aa87c9bdd", "patch": "@@ -402,8 +402,7 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n                     bound_lifetime_names: opt_vec::Empty,\n                     inputs: ~[\n                         ty::mk_int(),\n-                        ty::mk_imm_ptr(tcx, ty::mk_imm_ptr(tcx, ty::mk_u8())),\n-                        ty::mk_imm_ptr(tcx, ty::mk_u8())\n+                        ty::mk_imm_ptr(tcx, ty::mk_imm_ptr(tcx, ty::mk_u8()))\n                     ],\n                     output: ty::mk_int()\n                 }"}, {"sha": "ee89df2bd9659dee83a7b53213592c711a787a3c", "filename": "src/libstd/rt/crate_map.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9621156fc3814edaef6acafc06827e5aa87c9bdd/src%2Flibstd%2Frt%2Fcrate_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9621156fc3814edaef6acafc06827e5aa87c9bdd/src%2Flibstd%2Frt%2Fcrate_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcrate_map.rs?ref=9621156fc3814edaef6acafc06827e5aa87c9bdd", "patch": "@@ -16,7 +16,13 @@ use vec;\n use hashmap::HashSet;\n use container::MutableSet;\n \n-pub struct ModEntry{\n+extern {\n+    #[cfg(not(stage0))]\n+    #[crate_map]\n+    static CRATE_MAP: CrateMap;\n+}\n+\n+pub struct ModEntry {\n     name: *c_char,\n     log_level: *mut u32\n }\n@@ -34,6 +40,11 @@ struct CrateMap {\n     children: [*CrateMap, ..1]\n }\n \n+#[cfg(not(stage0))]\n+pub fn get_crate_map() -> *CrateMap {\n+    &'static CRATE_MAP as *CrateMap\n+}\n+\n unsafe fn version(crate_map: *CrateMap) -> i32 {\n     match (*crate_map).version {\n         1 => return 1,"}, {"sha": "26072079bcc18e1c6270d54b16a4a6aeccf1e14b", "filename": "src/libstd/rt/logging.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9621156fc3814edaef6acafc06827e5aa87c9bdd/src%2Flibstd%2Frt%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9621156fc3814edaef6acafc06827e5aa87c9bdd/src%2Flibstd%2Frt%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flogging.rs?ref=9621156fc3814edaef6acafc06827e5aa87c9bdd", "patch": "@@ -12,6 +12,7 @@ use libc::{uintptr_t, exit, STDERR_FILENO};\n use option::{Some, None, Option};\n use rt::util::dumb_println;\n use rt::crate_map::{ModEntry, iter_crate_map};\n+#[cfg(not(stage0))] use rt::crate_map::get_crate_map;\n use str::StrSlice;\n use str::raw::from_c_str;\n use u32;\n@@ -211,6 +212,7 @@ impl Logger for StdErrLogger {\n /// Configure logging by traversing the crate map and setting the\n /// per-module global logging flags based on the logging spec\n #[fixed_stack_segment] #[inline(never)]\n+#[cfg(stage0)]\n pub fn init(crate_map: *u8) {\n     use os;\n \n@@ -224,6 +226,22 @@ pub fn init(crate_map: *u8) {\n         }\n     }\n }\n+#[cfg(not(stage0))]\n+pub fn init() {\n+    use os;\n+\n+    let crate_map = get_crate_map() as *u8;\n+\n+    let log_spec = os::getenv(\"RUST_LOG\");\n+    match log_spec {\n+        Some(spec) => {\n+            update_log_settings(crate_map, spec);\n+        }\n+        None => {\n+            update_log_settings(crate_map, ~\"\");\n+        }\n+    }\n+}\n \n #[fixed_stack_segment] #[inline(never)]\n pub fn console_on() { unsafe { rust_log_console_on() } }"}, {"sha": "1ad258c3edf6c461bcccf21ce43df58d6d43400e", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9621156fc3814edaef6acafc06827e5aa87c9bdd/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9621156fc3814edaef6acafc06827e5aa87c9bdd/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=9621156fc3814edaef6acafc06827e5aa87c9bdd", "patch": "@@ -171,11 +171,11 @@ pub mod borrowck;\n ///\n /// * `argc` & `argv` - The argument vector. On Unix this information is used\n ///   by os::args.\n-/// * `crate_map` - Runtime information about the executing crate, mostly for logging\n ///\n /// # Return value\n ///\n /// The return value is used as the process return code. 0 on success, 101 on error.\n+#[cfg(stage0)]\n pub fn start(argc: int, argv: **u8, crate_map: *u8, main: ~fn()) -> int {\n \n     init(argc, argv, crate_map);\n@@ -184,25 +184,44 @@ pub fn start(argc: int, argv: **u8, crate_map: *u8, main: ~fn()) -> int {\n \n     return exit_code;\n }\n+#[cfg(not(stage0))]\n+pub fn start(argc: int, argv: **u8, main: ~fn()) -> int {\n+\n+    init(argc, argv);\n+    let exit_code = run(main);\n+    cleanup();\n+\n+    return exit_code;\n+}\n \n /// Like `start` but creates an additional scheduler on the current thread,\n /// which in most cases will be the 'main' thread, and pins the main task to it.\n ///\n /// This is appropriate for running code that must execute on the main thread,\n /// such as the platform event loop and GUI.\n+#[cfg(stage0)]\n pub fn start_on_main_thread(argc: int, argv: **u8, crate_map: *u8, main: ~fn()) -> int {\n     init(argc, argv, crate_map);\n     let exit_code = run_on_main_thread(main);\n     cleanup();\n \n     return exit_code;\n }\n+#[cfg(not(stage0))]\n+pub fn start_on_main_thread(argc: int, argv: **u8, main: ~fn()) -> int {\n+    init(argc, argv);\n+    let exit_code = run_on_main_thread(main);\n+    cleanup();\n+\n+    return exit_code;\n+}\n \n /// One-time runtime initialization.\n ///\n /// Initializes global state, including frobbing\n /// the crate's logging flags, registering GC\n /// metadata, and storing the process arguments.\n+#[cfg(stage0)]\n pub fn init(argc: int, argv: **u8, crate_map: *u8) {\n     // XXX: Derefing these pointers is not safe.\n     // Need to propagate the unsafety to `start`.\n@@ -212,6 +231,16 @@ pub fn init(argc: int, argv: **u8, crate_map: *u8) {\n         logging::init(crate_map);\n     }\n }\n+#[cfg(not(stage0))]\n+pub fn init(argc: int, argv: **u8) {\n+    // XXX: Derefing these pointers is not safe.\n+    // Need to propagate the unsafety to `start`.\n+    unsafe {\n+        args::init(argc, argv);\n+        env::init();\n+        logging::init();\n+    }\n+}\n \n /// One-time runtime cleanup.\n pub fn cleanup() {"}, {"sha": "baa705514894bf69daa1ee806dbd342a56ccb061", "filename": "src/libstd/unstable/lang.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9621156fc3814edaef6acafc06827e5aa87c9bdd/src%2Flibstd%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9621156fc3814edaef6acafc06827e5aa87c9bdd/src%2Flibstd%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Flang.rs?ref=9621156fc3814edaef6acafc06827e5aa87c9bdd", "patch": "@@ -93,6 +93,7 @@ pub unsafe fn check_not_borrowed(a: *u8,\n     borrowck::check_not_borrowed(a, file, line)\n }\n \n+#[cfg(stage0)]\n #[lang=\"start\"]\n pub fn start(main: *u8, argc: int, argv: **c_char,\n              crate_map: *u8) -> int {\n@@ -105,3 +106,16 @@ pub fn start(main: *u8, argc: int, argv: **c_char,\n         };\n     }\n }\n+\n+#[cfg(not(stage0))]\n+#[lang=\"start\"]\n+pub fn start(main: *u8, argc: int, argv: **c_char) -> int {\n+    use rt;\n+\n+    unsafe {\n+        return do rt::start(argc, argv as **u8) {\n+            let main: extern \"Rust\" fn() = transmute(main);\n+            main();\n+        };\n+    }\n+}"}]}