{"sha": "95f1866a4df85e815886901a7b64d8dd64709872", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZjE4NjZhNGRmODVlODE1ODg2OTAxYTdiNjRkOGRkNjQ3MDk4NzI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-14T11:23:46Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-20T11:23:46Z"}, "message": "Make GenericBound explicit", "tree": {"sha": "bdbf856debaa41d7b8efd222db486fc09a4e93fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdbf856debaa41d7b8efd222db486fc09a4e93fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95f1866a4df85e815886901a7b64d8dd64709872", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95f1866a4df85e815886901a7b64d8dd64709872", "html_url": "https://github.com/rust-lang/rust/commit/95f1866a4df85e815886901a7b64d8dd64709872", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95f1866a4df85e815886901a7b64d8dd64709872/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a", "html_url": "https://github.com/rust-lang/rust/commit/c5f16e0e180f4f76187e55aecb5913a1cf7fab2a"}], "stats": {"total": 109, "additions": 53, "deletions": 56}, "files": [{"sha": "7628504ba0dc1d2d5840182a5dff54df93dd1490", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95f1866a4df85e815886901a7b64d8dd64709872/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f1866a4df85e815886901a7b64d8dd64709872/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=95f1866a4df85e815886901a7b64d8dd64709872", "patch": "@@ -1109,11 +1109,11 @@ impl<'a> LoweringContext<'a> {\n                 let bounds = bounds\n                     .iter()\n                     .filter_map(|bound| match *bound {\n-                        Trait(ref ty, TraitBoundModifier::None) => {\n+                        GenericBound::Trait(ref ty, TraitBoundModifier::None) => {\n                             Some(self.lower_poly_trait_ref(ty, itctx))\n                         }\n-                        Trait(_, TraitBoundModifier::Maybe) => None,\n-                        Outlives(ref lifetime) => {\n+                        GenericBound::Trait(_, TraitBoundModifier::Maybe) => None,\n+                        GenericBound::Outlives(ref lifetime) => {\n                             if lifetime_bound.is_none() {\n                                 lifetime_bound = Some(self.lower_lifetime(lifetime));\n                             }"}, {"sha": "fc54d323b0f9600726d930b4203415067ea23548", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95f1866a4df85e815886901a7b64d8dd64709872/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f1866a4df85e815886901a7b64d8dd64709872/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=95f1866a4df85e815886901a7b64d8dd64709872", "patch": "@@ -101,7 +101,7 @@ impl<'a> AstValidator<'a> {\n \n     fn no_questions_in_bounds(&self, bounds: &GenericBounds, where_: &str, is_trait: bool) {\n         for bound in bounds {\n-            if let Trait(ref poly, TraitBoundModifier::Maybe) = *bound {\n+            if let GenericBound::Trait(ref poly, TraitBoundModifier::Maybe) = *bound {\n                 let mut err = self.err_handler().struct_span_err(poly.span,\n                                     &format!(\"`?Trait` is not permitted in {}\", where_));\n                 if is_trait {\n@@ -190,7 +190,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             TyKind::TraitObject(ref bounds, ..) => {\n                 let mut any_lifetime_bounds = false;\n                 for bound in bounds {\n-                    if let Outlives(ref lifetime) = *bound {\n+                    if let GenericBound::Outlives(ref lifetime) = *bound {\n                         if any_lifetime_bounds {\n                             span_err!(self.session, lifetime.ident.span, E0226,\n                                       \"only a single explicit lifetime bound is permitted\");\n@@ -203,7 +203,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             }\n             TyKind::ImplTrait(ref bounds) => {\n                 if !bounds.iter()\n-                          .any(|b| if let Trait(..) = *b { true } else { false }) {\n+                          .any(|b| if let GenericBound::Trait(..) = *b { true } else { false }) {\n                     self.err_handler().span_err(ty.span, \"at least one trait must be specified\");\n                 }\n             }"}, {"sha": "7da5b1668b3d824585af1c0ecdc2afd7b35291c4", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95f1866a4df85e815886901a7b64d8dd64709872/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f1866a4df85e815886901a7b64d8dd64709872/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=95f1866a4df85e815886901a7b64d8dd64709872", "patch": "@@ -761,10 +761,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         // super-traits\n         for super_bound in trait_refs.iter() {\n             let trait_ref = match *super_bound {\n-                ast::Trait(ref trait_ref, _) => trait_ref,\n-                ast::Outlives(..) => {\n-                    continue;\n-                }\n+                ast::GenericBound::Trait(ref trait_ref, _) => trait_ref,\n+                ast::GenericBound::Outlives(..) => continue,\n             };\n \n             let trait_ref = &trait_ref.trait_ref;\n@@ -1489,7 +1487,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n             ast::GenericParamKind::Lifetime { .. } => {}\n             ast::GenericParamKind::Type { ref default, .. } => {\n                 for bound in &param.bounds {\n-                    if let ast::Trait(ref trait_ref, _) = *bound {\n+                    if let ast::GenericBound::Trait(ref trait_ref, _) = *bound {\n                         self.process_path(trait_ref.trait_ref.ref_id, &trait_ref.trait_ref.path)\n                     }\n                 }"}, {"sha": "114cb0e455d9aa057a7e950cce502b0a658123db", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/95f1866a4df85e815886901a7b64d8dd64709872/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f1866a4df85e815886901a7b64d8dd64709872/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=95f1866a4df85e815886901a7b64d8dd64709872", "patch": "@@ -374,8 +374,8 @@ pub fn build_impl(cx: &DocContext, did: DefId, ret: &mut Vec<clean::Item>) {\n     let polarity = tcx.impl_polarity(did);\n     let trait_ = associated_trait.clean(cx).map(|bound| {\n         match bound {\n-            clean::TraitBound(polyt, _) => polyt.trait_,\n-            clean::Outlives(..) => unreachable!(),\n+            clean::GenericBound::TraitBound(polyt, _) => polyt.trait_,\n+            clean::GenericBound::Outlives(..) => unreachable!(),\n         }\n     });\n     if trait_.def_id() == tcx.lang_items().deref_trait() {\n@@ -387,9 +387,9 @@ pub fn build_impl(cx: &DocContext, did: DefId, ret: &mut Vec<clean::Item>) {\n \n     let provided = trait_.def_id().map(|did| {\n         tcx.provided_trait_methods(did)\n-            .into_iter()\n-            .map(|meth| meth.name.to_string())\n-            .collect()\n+           .into_iter()\n+           .map(|meth| meth.name.to_string())\n+           .collect()\n     }).unwrap_or(FxHashSet());\n \n     ret.push(clean::Item {"}, {"sha": "0979c3d85587d2ed2852f7a8b804ef8b550b78f8", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/95f1866a4df85e815886901a7b64d8dd64709872/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f1866a4df85e815886901a7b64d8dd64709872/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=95f1866a4df85e815886901a7b64d8dd64709872", "patch": "@@ -14,7 +14,6 @@\n pub use self::Type::*;\n pub use self::Mutability::*;\n pub use self::ItemEnum::*;\n-pub use self::GenericBound::*;\n pub use self::SelfTy::*;\n pub use self::FunctionRetTy::*;\n pub use self::Visibility::{Public, Inherited};\n@@ -1470,7 +1469,7 @@ impl GenericBound {\n         let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n             Some(did), false, vec![], empty);\n         inline::record_extern_fqn(cx, did, TypeKind::Trait);\n-        TraitBound(PolyTrait {\n+        GenericBound::TraitBound(PolyTrait {\n             trait_: ResolvedPath {\n                 path,\n                 typarams: None,\n@@ -1510,8 +1509,10 @@ impl GenericBound {\n impl Clean<GenericBound> for hir::GenericBound {\n     fn clean(&self, cx: &DocContext) -> GenericBound {\n         match *self {\n-            hir::GenericBound::Outlives(lt) => Outlives(lt.clean(cx)),\n-            hir::GenericBound::Trait(ref t, modifier) => TraitBound(t.clean(cx), modifier),\n+            hir::GenericBound::Outlives(lt) => GenericBound::Outlives(lt.clean(cx)),\n+            hir::GenericBound::Trait(ref t, modifier) => {\n+                GenericBound::TraitBound(t.clean(cx), modifier)\n+            }\n         }\n     }\n }\n@@ -1599,7 +1600,7 @@ impl<'a, 'tcx> Clean<GenericBound> for (&'a ty::TraitRef<'tcx>, Vec<TypeBinding>\n             }\n         }\n \n-        TraitBound(\n+        GenericBound::TraitBound(\n             PolyTrait {\n                 trait_: ResolvedPath {\n                     path,\n@@ -1623,9 +1624,8 @@ impl<'tcx> Clean<GenericBound> for ty::TraitRef<'tcx> {\n impl<'tcx> Clean<Option<Vec<GenericBound>>> for Substs<'tcx> {\n     fn clean(&self, cx: &DocContext) -> Option<Vec<GenericBound>> {\n         let mut v = Vec::new();\n-        v.extend(self.regions().filter_map(|r| r.clean(cx))\n-                     .map(GenericBound::Outlives));\n-        v.extend(self.types().map(|t| TraitBound(PolyTrait {\n+        v.extend(self.regions().filter_map(|r| r.clean(cx)).map(GenericBound::Outlives));\n+        v.extend(self.types().map(|t| GenericBound::TraitBound(PolyTrait {\n             trait_: t.clean(cx),\n             generic_params: Vec::new(),\n         }, hir::TraitBoundModifier::None)));\n@@ -2978,10 +2978,11 @@ impl Clean<Type> for hir::Ty {\n                 match bounds[0].clean(cx).trait_ {\n                     ResolvedPath { path, typarams: None, did, is_generic } => {\n                         let mut bounds: Vec<self::GenericBound> = bounds[1..].iter().map(|bound| {\n-                            TraitBound(bound.clean(cx), hir::TraitBoundModifier::None)\n+                            self::GenericBound::TraitBound(bound.clean(cx),\n+                                                           hir::TraitBoundModifier::None)\n                         }).collect();\n                         if !lifetime.is_elided() {\n-                            bounds.push(self::Outlives(lifetime.clean(cx)));\n+                            bounds.push(self::GenericBound::Outlives(lifetime.clean(cx)));\n                         }\n                         ResolvedPath { path, typarams: Some(bounds), did, is_generic, }\n                     }\n@@ -3086,7 +3087,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                         let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n                             Some(did), false, vec![], empty);\n                         inline::record_extern_fqn(cx, did, TypeKind::Trait);\n-                        let bound = TraitBound(PolyTrait {\n+                        let bound = GenericBound::TraitBound(PolyTrait {\n                             trait_: ResolvedPath {\n                                 path,\n                                 typarams: None,"}, {"sha": "30a55bf0d18092f112df492ec5356e51f01bf1bb", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95f1866a4df85e815886901a7b64d8dd64709872/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f1866a4df85e815886901a7b64d8dd64709872/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=95f1866a4df85e815886901a7b64d8dd64709872", "patch": "@@ -83,8 +83,8 @@ pub fn where_clauses(cx: &DocContext, clauses: Vec<WP>) -> Vec<WP> {\n         };\n         !bounds.iter_mut().any(|b| {\n             let trait_ref = match *b {\n-                clean::TraitBound(ref mut tr, _) => tr,\n-                clean::Outlives(..) => return false,\n+                clean::GenericBound::TraitBound(ref mut tr, _) => tr,\n+                clean::GenericBound::Outlives(..) => return false,\n             };\n             let (did, path) = match trait_ref.trait_ {\n                 clean::ResolvedPath { did, ref mut path, ..} => (did, path),"}, {"sha": "3d360f2f344b614c369eb1649ff73cb90d245788", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95f1866a4df85e815886901a7b64d8dd64709872/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f1866a4df85e815886901a7b64d8dd64709872/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=95f1866a4df85e815886901a7b64d8dd64709872", "patch": "@@ -270,10 +270,10 @@ impl fmt::Display for clean::PolyTrait {\n impl fmt::Display for clean::GenericBound {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            clean::Outlives(ref lt) => {\n+            clean::GenericBound::Outlives(ref lt) => {\n                 write!(f, \"{}\", *lt)\n             }\n-            clean::TraitBound(ref ty, modifier) => {\n+            clean::GenericBound::TraitBound(ref ty, modifier) => {\n                 let modifier_str = match modifier {\n                     hir::TraitBoundModifier::None => \"\",\n                     hir::TraitBoundModifier::Maybe => \"?\","}, {"sha": "76d19ce0ac5b2b4f030c572fce99132c2621f813", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/95f1866a4df85e815886901a7b64d8dd64709872/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f1866a4df85e815886901a7b64d8dd64709872/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=95f1866a4df85e815886901a7b64d8dd64709872", "patch": "@@ -10,7 +10,6 @@\n \n // The Rust abstract syntax tree.\n \n-pub use self::GenericBound::*;\n pub use self::UnsafeSource::*;\n pub use self::GenericArgs::*;\n pub use symbol::{Ident, Symbol as Name};\n@@ -290,8 +289,8 @@ pub enum GenericBound {\n impl GenericBound {\n     pub fn span(&self) -> Span {\n         match self {\n-            &Trait(ref t, ..) => t.span,\n-            &Outlives(ref l) => l.ident.span,\n+            &GenericBound::Trait(ref t, ..) => t.span,\n+            &GenericBound::Outlives(ref l) => l.ident.span,\n         }\n     }\n }\n@@ -930,8 +929,8 @@ impl Expr {\n     fn to_bound(&self) -> Option<GenericBound> {\n         match &self.node {\n             ExprKind::Path(None, path) =>\n-                Some(Trait(PolyTraitRef::new(Vec::new(), path.clone(), self.span),\n-                                       TraitBoundModifier::None)),\n+                Some(GenericBound::Trait(PolyTraitRef::new(Vec::new(), path.clone(), self.span),\n+                                         TraitBoundModifier::None)),\n             _ => None,\n         }\n     }"}, {"sha": "40d453061497a1bf9940fc25ce61b0836de15f7f", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95f1866a4df85e815886901a7b64d8dd64709872/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f1866a4df85e815886901a7b64d8dd64709872/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=95f1866a4df85e815886901a7b64d8dd64709872", "patch": "@@ -465,7 +465,8 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn ty_param_bound(&self, path: ast::Path) -> ast::GenericBound {\n-        ast::Trait(self.poly_trait_ref(path.span, path), ast::TraitBoundModifier::None)\n+        ast::GenericBound::Trait(self.poly_trait_ref(path.span, path),\n+                                 ast::TraitBoundModifier::None)\n     }\n \n     fn lifetime(&self, span: Span, ident: ast::Ident) -> ast::Lifetime {"}, {"sha": "03668cc279a2cb0afd54d08124527de70fd63d10", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95f1866a4df85e815886901a7b64d8dd64709872/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f1866a4df85e815886901a7b64d8dd64709872/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=95f1866a4df85e815886901a7b64d8dd64709872", "patch": "@@ -678,10 +678,12 @@ pub fn noop_fold_fn_decl<T: Folder>(decl: P<FnDecl>, fld: &mut T) -> P<FnDecl> {\n \n pub fn noop_fold_param_bound<T>(pb: GenericBound, fld: &mut T) -> GenericBound where T: Folder {\n     match pb {\n-        Trait(ty, modifier) => {\n-            Trait(fld.fold_poly_trait_ref(ty), modifier)\n+        GenericBound::Trait(ty, modifier) => {\n+            GenericBound::Trait(fld.fold_poly_trait_ref(ty), modifier)\n+        }\n+        GenericBound::Outlives(lifetime) => {\n+            GenericBound::Outlives(noop_fold_lifetime(lifetime, fld))\n         }\n-        Outlives(lifetime) => Outlives(noop_fold_lifetime(lifetime, fld)),\n     }\n }\n "}, {"sha": "675849c8a5c4db3eec9379d2d1a0d7882bad264a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/95f1866a4df85e815886901a7b64d8dd64709872/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f1866a4df85e815886901a7b64d8dd64709872/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=95f1866a4df85e815886901a7b64d8dd64709872", "patch": "@@ -10,7 +10,7 @@\n \n use rustc_target::spec::abi::{self, Abi};\n use ast::{AngleBracketedArgs, ParenthesizedArgData, AttrStyle, BareFnTy};\n-use ast::{Outlives, Trait, TraitBoundModifier};\n+use ast::{GenericBound, TraitBoundModifier};\n use ast::Unsafety;\n use ast::{Mod, AnonConst, Arg, Arm, Attribute, BindingMode, TraitItemKind};\n use ast::Block;\n@@ -1444,7 +1444,7 @@ impl<'a> Parser<'a> {\n                     TyKind::TraitObject(ref bounds, TraitObjectSyntax::None)\n                             if maybe_bounds && bounds.len() == 1 && !trailing_plus => {\n                         let path = match bounds[0] {\n-                            Trait(ref pt, ..) => pt.trait_ref.path.clone(),\n+                            GenericBound::Trait(ref pt, ..) => pt.trait_ref.path.clone(),\n                             _ => self.bug(\"unexpected lifetime bound\"),\n                         };\n                         self.parse_remaining_bounds(Vec::new(), path, lo, true)?\n@@ -1566,7 +1566,7 @@ impl<'a> Parser<'a> {\n     fn parse_remaining_bounds(&mut self, generic_params: Vec<GenericParam>, path: ast::Path,\n                               lo: Span, parse_plus: bool) -> PResult<'a, TyKind> {\n         let poly_trait_ref = PolyTraitRef::new(generic_params, path, lo.to(self.prev_span));\n-        let mut bounds = vec![Trait(poly_trait_ref, TraitBoundModifier::None)];\n+        let mut bounds = vec![GenericBound::Trait(poly_trait_ref, TraitBoundModifier::None)];\n         if parse_plus {\n             self.eat_plus(); // `+`, or `+=` gets split and `+` is discarded\n             bounds.append(&mut self.parse_ty_param_bounds()?);\n@@ -4752,7 +4752,7 @@ impl<'a> Parser<'a> {\n                         self.span_err(question_span,\n                                       \"`?` may only modify trait bounds, not lifetime bounds\");\n                     }\n-                    bounds.push(Outlives(self.expect_lifetime()));\n+                    bounds.push(GenericBound::Outlives(self.expect_lifetime()));\n                     if has_parens {\n                         self.expect(&token::CloseDelim(token::Paren))?;\n                         self.span_err(self.prev_span,\n@@ -4770,7 +4770,7 @@ impl<'a> Parser<'a> {\n                     } else {\n                         TraitBoundModifier::None\n                     };\n-                    bounds.push(Trait(poly_trait, modifier));\n+                    bounds.push(GenericBound::Trait(poly_trait, modifier));\n                 }\n             } else {\n                 break"}, {"sha": "7a55919f422b88c70adc2b49f3e1bc2e2eb1f92a", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/95f1866a4df85e815886901a7b64d8dd64709872/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f1866a4df85e815886901a7b64d8dd64709872/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=95f1866a4df85e815886901a7b64d8dd64709872", "patch": "@@ -12,7 +12,7 @@ pub use self::AnnNode::*;\n \n use rustc_target::spec::abi::{self, Abi};\n use ast::{self, BlockCheckMode, PatKind, RangeEnd, RangeSyntax};\n-use ast::{SelfKind, Outlives, Trait, TraitBoundModifier};\n+use ast::{SelfKind, GenericBound, TraitBoundModifier};\n use ast::{Attribute, MacDelimiter, GenericArg};\n use util::parser::{self, AssocOp, Fixity};\n use attr;\n@@ -1364,7 +1364,7 @@ impl<'a> State<'a> {\n                 self.print_generic_params(&generics.params)?;\n                 let mut real_bounds = Vec::with_capacity(bounds.len());\n                 for b in bounds.iter() {\n-                    if let Trait(ref ptr, ast::TraitBoundModifier::Maybe) = *b {\n+                    if let GenericBound::Trait(ref ptr, ast::TraitBoundModifier::Maybe) = *b {\n                         self.s.space()?;\n                         self.word_space(\"for ?\")?;\n                         self.print_trait_ref(&ptr.trait_ref)?;\n@@ -1390,7 +1390,7 @@ impl<'a> State<'a> {\n                 let mut real_bounds = Vec::with_capacity(bounds.len());\n                 // FIXME(durka) this seems to be some quite outdated syntax\n                 for b in bounds.iter() {\n-                    if let Trait(ref ptr, ast::TraitBoundModifier::Maybe) = *b {\n+                    if let GenericBound::Trait(ref ptr, ast::TraitBoundModifier::Maybe) = *b {\n                         self.s.space()?;\n                         self.word_space(\"for ?\")?;\n                         self.print_trait_ref(&ptr.trait_ref)?;\n@@ -2826,13 +2826,13 @@ impl<'a> State<'a> {\n                 }\n \n                 match bound {\n-                    Trait(tref, modifier) => {\n+                    GenericBound::Trait(tref, modifier) => {\n                         if modifier == &TraitBoundModifier::Maybe {\n                             self.s.word(\"?\")?;\n                         }\n                         self.print_poly_trait_ref(tref)?;\n                     }\n-                    Outlives(lt) => self.print_lifetime(*lt)?,\n+                    GenericBound::Outlives(lt) => self.print_lifetime(*lt)?,\n                 }\n             }\n         }"}, {"sha": "5476a3f0d2a7235a69adb3f5043287e474fdec3c", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/95f1866a4df85e815886901a7b64d8dd64709872/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f1866a4df85e815886901a7b64d8dd64709872/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=95f1866a4df85e815886901a7b64d8dd64709872", "patch": "@@ -481,12 +481,8 @@ pub fn walk_global_asm<'a, V: Visitor<'a>>(_: &mut V, _: &'a GlobalAsm) {\n \n pub fn walk_param_bound<'a, V: Visitor<'a>>(visitor: &mut V, bound: &'a GenericBound) {\n     match *bound {\n-        Trait(ref typ, ref modifier) => {\n-            visitor.visit_poly_trait_ref(typ, modifier);\n-        }\n-        Outlives(ref lifetime) => {\n-            visitor.visit_lifetime(lifetime);\n-        }\n+        GenericBound::Trait(ref typ, ref modifier) => visitor.visit_poly_trait_ref(typ, modifier),\n+        GenericBound::Outlives(ref lifetime) => visitor.visit_lifetime(lifetime),\n     }\n }\n "}]}