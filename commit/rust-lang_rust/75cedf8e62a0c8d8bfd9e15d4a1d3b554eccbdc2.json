{"sha": "75cedf8e62a0c8d8bfd9e15d4a1d3b554eccbdc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1Y2VkZjhlNjJhMGM4ZDhiZmQ5ZTE1ZDRhMWQzYjU1NGVjY2JkYzI=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-10-17T01:36:41Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-10-17T01:36:41Z"}, "message": "uuid: serialize test and documentations", "tree": {"sha": "495db5b60f4e933c2f2b319a948a13d3e8fbed9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/495db5b60f4e933c2f2b319a948a13d3e8fbed9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75cedf8e62a0c8d8bfd9e15d4a1d3b554eccbdc2", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75cedf8e62a0c8d8bfd9e15d4a1d3b554eccbdc2", "html_url": "https://github.com/rust-lang/rust/commit/75cedf8e62a0c8d8bfd9e15d4a1d3b554eccbdc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75cedf8e62a0c8d8bfd9e15d4a1d3b554eccbdc2/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "023466cccaf2230b6f2beb3e9e9802e6be1f29d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/023466cccaf2230b6f2beb3e9e9802e6be1f29d9", "html_url": "https://github.com/rust-lang/rust/commit/023466cccaf2230b6f2beb3e9e9802e6be1f29d9"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "345cf64f1281aa856d707b9f0a6f560029c27c63", "filename": "src/libextra/uuid.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/75cedf8e62a0c8d8bfd9e15d4a1d3b554eccbdc2/src%2Flibextra%2Fuuid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75cedf8e62a0c8d8bfd9e15d4a1d3b554eccbdc2/src%2Flibextra%2Fuuid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuuid.rs?ref=75cedf8e62a0c8d8bfd9e15d4a1d3b554eccbdc2", "patch": "@@ -488,14 +488,16 @@ impl TotalEq for Uuid {\n     }\n }\n \n-// FIXME #9845: Test these\n+// FIXME #9845: Test these more thoroughly\n impl<T: Encoder> Encodable<T> for Uuid {\n+    /// Encode a UUID as a hypenated string\n     fn encode(&self, e: &mut T) {\n         e.emit_str(self.to_hyphenated_str());\n     }\n }\n \n impl<T: Decoder> Decodable<T> for Uuid {\n+    /// Decode a UUID from a string\n     fn decode(d: &mut T) -> Uuid {\n         from_str(d.read_str()).unwrap()\n     }\n@@ -785,6 +787,20 @@ mod test {\n         assert!(ub.len() == 16);\n         assert!(! ub.iter().all(|&b| b == 0));\n     }\n+\n+    #[test]\n+    fn test_serialize_round_trip() {\n+        use std;\n+        use ebml;\n+        use serialize::{Encodable, Decodable};\n+\n+        let u = Uuid::new_v4();\n+        let bytes = do std::io::with_bytes_writer |wr| {\n+            u.encode(&mut ebml::writer::Encoder(wr));\n+        };\n+        let u2 = Decodable::decode(&mut ebml::reader::Decoder(ebml::reader::Doc(@bytes)));\n+        assert_eq!(u, u2);\n+    }\n }\n \n #[cfg(test)]"}]}