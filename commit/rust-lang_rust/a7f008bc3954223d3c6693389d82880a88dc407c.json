{"sha": "a7f008bc3954223d3c6693389d82880a88dc407c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZjAwOGJjMzk1NDIyM2QzYzY2OTMzODlkODI4ODBhODhkYzQwN2M=", "commit": {"author": {"name": "Jordi Boggiano", "email": "j.boggiano@seld.be", "date": "2013-08-05T12:34:58Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-08-08T02:41:13Z"}, "message": "Add missing getopts::groups::optflagmulti function", "tree": {"sha": "a138b8fa1d821c82bb222ea3a94e4b08a2bd4894", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a138b8fa1d821c82bb222ea3a94e4b08a2bd4894"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7f008bc3954223d3c6693389d82880a88dc407c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7f008bc3954223d3c6693389d82880a88dc407c", "html_url": "https://github.com/rust-lang/rust/commit/a7f008bc3954223d3c6693389d82880a88dc407c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7f008bc3954223d3c6693389d82880a88dc407c/comments", "author": {"login": "Seldaek", "id": 183678, "node_id": "MDQ6VXNlcjE4MzY3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/183678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Seldaek", "html_url": "https://github.com/Seldaek", "followers_url": "https://api.github.com/users/Seldaek/followers", "following_url": "https://api.github.com/users/Seldaek/following{/other_user}", "gists_url": "https://api.github.com/users/Seldaek/gists{/gist_id}", "starred_url": "https://api.github.com/users/Seldaek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Seldaek/subscriptions", "organizations_url": "https://api.github.com/users/Seldaek/orgs", "repos_url": "https://api.github.com/users/Seldaek/repos", "events_url": "https://api.github.com/users/Seldaek/events{/privacy}", "received_events_url": "https://api.github.com/users/Seldaek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e99eff172a11816f335153147dd0800fc4877bee", "url": "https://api.github.com/repos/rust-lang/rust/commits/e99eff172a11816f335153147dd0800fc4877bee", "html_url": "https://github.com/rust-lang/rust/commit/e99eff172a11816f335153147dd0800fc4877bee"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "5ec6713509ec02b35f57a7df7ebdaa4b2bca77c5", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a7f008bc3954223d3c6693389d82880a88dc407c/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7f008bc3954223d3c6693389d82880a88dc407c/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=a7f008bc3954223d3c6693389d82880a88dc407c", "patch": "@@ -542,6 +542,20 @@ pub mod groups {\n                 occur: Optional};\n     }\n \n+    /// Create a long option that can occur more than once and does not\n+    /// take an argument\n+    pub fn optflagmulti(short_name: &str, long_name: &str,\n+                   desc: &str) -> OptGroup {\n+        let len = short_name.len();\n+        assert!(len == 1 || len == 0);\n+        return OptGroup {short_name: short_name.to_owned(),\n+                long_name: long_name.to_owned(),\n+                hint: ~\"\",\n+                desc: desc.to_owned(),\n+                hasarg: No,\n+                occur: Multi};\n+    }\n+\n     /// Create a long option that is optional and takes an optional argument\n     pub fn optflagopt(short_name: &str, long_name: &str,\n                       desc: &str, hint: &str) -> OptGroup {"}]}