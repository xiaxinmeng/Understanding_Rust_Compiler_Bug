{"sha": "aac7429c17aa558fbd9fb0be093e7bd9ccc73972", "node_id": "C_kwDOAAsO6NoAKGFhYzc0MjljMTdhYTU1OGZiZDlmYjBiZTA5M2U3YmQ5Y2NjNzM5NzI", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-09-26T17:06:48Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-09-26T17:06:48Z"}, "message": " Rustdoc-Json: List impls for primitives\n\n Closes #101695", "tree": {"sha": "691aa8b7f006fb606e76ecc810691bc1289d0e0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/691aa8b7f006fb606e76ecc810691bc1289d0e0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aac7429c17aa558fbd9fb0be093e7bd9ccc73972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aac7429c17aa558fbd9fb0be093e7bd9ccc73972", "html_url": "https://github.com/rust-lang/rust/commit/aac7429c17aa558fbd9fb0be093e7bd9ccc73972", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aac7429c17aa558fbd9fb0be093e7bd9ccc73972/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84946fe2412194418b838c34815b79d36b22d4f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/84946fe2412194418b838c34815b79d36b22d4f8", "html_url": "https://github.com/rust-lang/rust/commit/84946fe2412194418b838c34815b79d36b22d4f8"}], "stats": {"total": 73, "additions": 60, "deletions": 13}, "files": [{"sha": "4170412caef871db344dcea97ca644dd1e5d5dcc", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aac7429c17aa558fbd9fb0be093e7bd9ccc73972/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac7429c17aa558fbd9fb0be093e7bd9ccc73972/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=aac7429c17aa558fbd9fb0be093e7bd9ccc73972", "patch": "@@ -272,7 +272,12 @@ fn from_clean_item(item: clean::Item, tcx: TyCtxt<'_>) -> ItemEnum {\n         ConstantItem(c) => ItemEnum::Constant(c.into_tcx(tcx)),\n         MacroItem(m) => ItemEnum::Macro(m.source),\n         ProcMacroItem(m) => ItemEnum::ProcMacro(m.into_tcx(tcx)),\n-        PrimitiveItem(p) => ItemEnum::PrimitiveType(p.as_sym().to_string()),\n+        PrimitiveItem(p) => {\n+            ItemEnum::Primitive(Primitive {\n+                name: p.as_sym().to_string(),\n+                impls: Vec::new(), // Added in JsonRenderer::item\n+            })\n+        }\n         TyAssocConstItem(ty) => ItemEnum::AssocConst { type_: ty.into_tcx(tcx), default: None },\n         AssocConstItem(ty, default) => {\n             ItemEnum::AssocConst { type_: ty.into_tcx(tcx), default: Some(default.expr(tcx)) }"}, {"sha": "8d6450838c1d033357c6534ec59633b237ee5534", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aac7429c17aa558fbd9fb0be093e7bd9ccc73972/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac7429c17aa558fbd9fb0be093e7bd9ccc73972/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=aac7429c17aa558fbd9fb0be093e7bd9ccc73972", "patch": "@@ -219,12 +219,15 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                     u.impls = self.get_impls(item_id.expect_def_id());\n                     false\n                 }\n+                types::ItemEnum::Primitive(ref mut p) => {\n+                    p.impls = self.get_impls(item_id.expect_def_id());\n+                    false\n+                }\n \n                 types::ItemEnum::Method(_)\n                 | types::ItemEnum::Module(_)\n                 | types::ItemEnum::AssocConst { .. }\n-                | types::ItemEnum::AssocType { .. }\n-                | types::ItemEnum::PrimitiveType(_) => true,\n+                | types::ItemEnum::AssocType { .. } => true,\n                 types::ItemEnum::ExternCrate { .. }\n                 | types::ItemEnum::Import(_)\n                 | types::ItemEnum::StructField(_)"}, {"sha": "7379b04ad167709dbd16face56ccf7a04037a624", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aac7429c17aa558fbd9fb0be093e7bd9ccc73972/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac7429c17aa558fbd9fb0be093e7bd9ccc73972/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=aac7429c17aa558fbd9fb0be093e7bd9ccc73972", "patch": "@@ -9,7 +9,7 @@ use std::path::PathBuf;\n use serde::{Deserialize, Serialize};\n \n /// rustdoc format-version.\n-pub const FORMAT_VERSION: u32 = 21;\n+pub const FORMAT_VERSION: u32 = 22;\n \n /// A `Crate` is the root of the emitted JSON blob. It contains all type/documentation information\n /// about the language items in the local crate, as well as info about external items to allow\n@@ -254,7 +254,7 @@ pub enum ItemEnum {\n     Macro(String),\n     ProcMacro(ProcMacro),\n \n-    PrimitiveType(String),\n+    Primitive(Primitive),\n \n     AssocConst {\n         #[serde(rename = \"type\")]\n@@ -709,5 +709,11 @@ pub struct Static {\n     pub expr: String,\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n+pub struct Primitive {\n+    pub name: String,\n+    pub impls: Vec<Id>,\n+}\n+\n #[cfg(test)]\n mod tests;"}, {"sha": "1fc9374065f66452602084cc5866a006d5cba324", "filename": "src/test/rustdoc-json/primitives/primitive_impls.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/aac7429c17aa558fbd9fb0be093e7bd9ccc73972/src%2Ftest%2Frustdoc-json%2Fprimitives%2Fprimitive_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac7429c17aa558fbd9fb0be093e7bd9ccc73972/src%2Ftest%2Frustdoc-json%2Fprimitives%2Fprimitive_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fprimitives%2Fprimitive_impls.rs?ref=aac7429c17aa558fbd9fb0be093e7bd9ccc73972", "patch": "@@ -0,0 +1,34 @@\n+#![feature(no_core)]\n+#![feature(rustc_attrs)]\n+#![feature(rustdoc_internals)]\n+#![no_core]\n+#![rustc_coherence_is_core]\n+\n+// @set impl_i32 = \"$.index[*][?(@.docs=='Only core can do this')].id\"\n+\n+/// Only core can do this\n+impl i32 {\n+    // @set identity = \"$.index[*][?(@.docs=='Do Nothing')].id\"\n+\n+    /// Do Nothing\n+    pub fn identity(self) -> Self {\n+        self\n+    }\n+\n+    // @is \"$.index[*][?(@.docs=='Only core can do this')].inner.items[*]\" $identity\n+}\n+\n+// @set Trait = \"$.index[*][?(@.name=='Trait')].id\"\n+pub trait Trait {}\n+// @set impl_trait_for_i32 = \"$.index[*][?(@.docs=='impl Trait for i32')].id\"\n+/// impl Trait for i32\n+impl Trait for i32 {}\n+\n+/// i32\n+#[doc(primitive = \"i32\")]\n+mod prim_i32 {}\n+\n+// @set i32 = \"$.index[*][?(@.docs=='i32')].id\"\n+// @is \"$.index[*][?(@.docs=='i32')].name\" '\"i32\"'\n+// @is \"$.index[*][?(@.docs=='i32')].inner.name\" '\"i32\"'\n+// @ismany \"$.index[*][?(@.docs=='i32')].inner.impls[*]\" $impl_i32 $impl_trait_for_i32"}, {"sha": "56b35cd14c0f2677b23d1dcfda5b4d8ccc839f49", "filename": "src/test/rustdoc-json/primitives/primitive_overloading.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/aac7429c17aa558fbd9fb0be093e7bd9ccc73972/src%2Ftest%2Frustdoc-json%2Fprimitives%2Fprimitive_overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac7429c17aa558fbd9fb0be093e7bd9ccc73972/src%2Ftest%2Frustdoc-json%2Fprimitives%2Fprimitive_overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fprimitives%2Fprimitive_overloading.rs?ref=aac7429c17aa558fbd9fb0be093e7bd9ccc73972", "previous_filename": "src/test/rustdoc-json/primitive_overloading.rs"}, {"sha": "8024044bc05ab3993b836da2045dce5876401734", "filename": "src/test/rustdoc-json/primitives/primitive_type.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/aac7429c17aa558fbd9fb0be093e7bd9ccc73972/src%2Ftest%2Frustdoc-json%2Fprimitives%2Fprimitive_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac7429c17aa558fbd9fb0be093e7bd9ccc73972/src%2Ftest%2Frustdoc-json%2Fprimitives%2Fprimitive_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fprimitives%2Fprimitive_type.rs?ref=aac7429c17aa558fbd9fb0be093e7bd9ccc73972", "previous_filename": "src/test/rustdoc-json/primitives.rs"}, {"sha": "e22927374621ffbdc15b357b3e756a8c5e513ecd", "filename": "src/test/rustdoc-json/primitives/use_primitive.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aac7429c17aa558fbd9fb0be093e7bd9ccc73972/src%2Ftest%2Frustdoc-json%2Fprimitives%2Fuse_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac7429c17aa558fbd9fb0be093e7bd9ccc73972/src%2Ftest%2Frustdoc-json%2Fprimitives%2Fuse_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fprimitives%2Fuse_primitive.rs?ref=aac7429c17aa558fbd9fb0be093e7bd9ccc73972", "patch": "@@ -5,7 +5,7 @@\n #[doc(primitive = \"usize\")]\n mod usize {}\n \n-// @set local_crate_id = \"$.index[*][?(@.name=='primitive')].crate_id\"\n+// @set local_crate_id = \"$.index[*][?(@.name=='use_primitive')].crate_id\"\n \n // @has \"$.index[*][?(@.name=='ilog10')]\"\n // @!is \"$.index[*][?(@.name=='ilog10')].crate_id\" $local_crate_id", "previous_filename": "src/test/rustdoc-json/primitive.rs"}, {"sha": "6d986e57501a3324075a977e2e89ed64265842ad", "filename": "src/tools/jsondoclint/src/item_kind.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aac7429c17aa558fbd9fb0be093e7bd9ccc73972/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac7429c17aa558fbd9fb0be093e7bd9ccc73972/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs?ref=aac7429c17aa558fbd9fb0be093e7bd9ccc73972", "patch": "@@ -142,8 +142,7 @@ impl Kind {\n             ItemEnum::Static(_) => Static,\n             ItemEnum::Macro(_) => Macro,\n             ItemEnum::ProcMacro(_) => ProcMacro,\n-            // https://github.com/rust-lang/rust/issues/100961\n-            ItemEnum::PrimitiveType(_) => Primitive,\n+            ItemEnum::Primitive(_) => Primitive,\n             ItemEnum::ForeignType => ForeignType,\n             ItemEnum::ExternCrate { .. } => ExternCrate,\n             ItemEnum::AssocConst { .. } => AssocConst,"}, {"sha": "94af4c5e9e16dfe50274b3bc73a621089adbda36", "filename": "src/tools/jsondoclint/src/validator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aac7429c17aa558fbd9fb0be093e7bd9ccc73972/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac7429c17aa558fbd9fb0be093e7bd9ccc73972/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs?ref=aac7429c17aa558fbd9fb0be093e7bd9ccc73972", "patch": "@@ -4,8 +4,8 @@ use std::hash::Hash;\n use rustdoc_json_types::{\n     Constant, Crate, DynTrait, Enum, FnDecl, Function, FunctionPointer, GenericArg, GenericArgs,\n     GenericBound, GenericParamDef, Generics, Id, Impl, Import, ItemEnum, Method, Module, OpaqueTy,\n-    Path, ProcMacro, Static, Struct, StructKind, Term, Trait, TraitAlias, Type, TypeBinding,\n-    TypeBindingKind, Typedef, Union, Variant, WherePredicate,\n+    Path, Primitive, ProcMacro, Static, Struct, StructKind, Term, Trait, TraitAlias, Type,\n+    TypeBinding, TypeBindingKind, Typedef, Union, Variant, WherePredicate,\n };\n \n use crate::{item_kind::Kind, Error, ErrorKind};\n@@ -76,7 +76,7 @@ impl<'a> Validator<'a> {\n                 ItemEnum::ForeignType => {} // nop\n                 ItemEnum::Macro(x) => self.check_macro(x),\n                 ItemEnum::ProcMacro(x) => self.check_proc_macro(x),\n-                ItemEnum::PrimitiveType(x) => self.check_primitive_type(x),\n+                ItemEnum::Primitive(x) => self.check_primitive_type(x),\n                 ItemEnum::Module(x) => self.check_module(x),\n                 // FIXME: Why don't these have their own structs?\n                 ItemEnum::ExternCrate { .. } => {}\n@@ -219,8 +219,8 @@ impl<'a> Validator<'a> {\n         // nop\n     }\n \n-    fn check_primitive_type(&mut self, _: &'a str) {\n-        // nop\n+    fn check_primitive_type(&mut self, x: &'a Primitive) {\n+        x.impls.iter().for_each(|i| self.add_impl_id(i));\n     }\n \n     fn check_generics(&mut self, x: &'a Generics) {"}]}