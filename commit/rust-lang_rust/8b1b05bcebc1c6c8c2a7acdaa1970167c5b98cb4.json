{"sha": "8b1b05bcebc1c6c8c2a7acdaa1970167c5b98cb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMWIwNWJjZWJjMWM2YzhjMmE3YWNkYWExOTcwMTY3YzViOThjYjQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-06-07T12:21:55Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-06-09T09:27:56Z"}, "message": "rustc: track the current ty::ParamEnv in lint::LateContext.", "tree": {"sha": "cc03b3870ce8fc531c476239d48127b3acd061b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc03b3870ce8fc531c476239d48127b3acd061b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b1b05bcebc1c6c8c2a7acdaa1970167c5b98cb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b1b05bcebc1c6c8c2a7acdaa1970167c5b98cb4", "html_url": "https://github.com/rust-lang/rust/commit/8b1b05bcebc1c6c8c2a7acdaa1970167c5b98cb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b1b05bcebc1c6c8c2a7acdaa1970167c5b98cb4/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76a50706a8e19ecc253bb2a5749b1a3f4f5dc89d", "url": "https://api.github.com/repos/rust-lang/rust/commits/76a50706a8e19ecc253bb2a5749b1a3f4f5dc89d", "html_url": "https://github.com/rust-lang/rust/commit/76a50706a8e19ecc253bb2a5749b1a3f4f5dc89d"}], "stats": {"total": 69, "additions": 45, "deletions": 24}, "files": [{"sha": "40734469718baea8057890212683e2470206fdcc", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8b1b05bcebc1c6c8c2a7acdaa1970167c5b98cb4/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b1b05bcebc1c6c8c2a7acdaa1970167c5b98cb4/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=8b1b05bcebc1c6c8c2a7acdaa1970167c5b98cb4", "patch": "@@ -27,6 +27,7 @@ use self::TargetLint::*;\n \n use dep_graph::DepNode;\n use middle::privacy::AccessLevels;\n+use traits::Reveal;\n use ty::{self, TyCtxt};\n use session::{config, early_error, Session};\n use lint::{Level, LevelSource, Lint, LintId, LintPass, LintSource};\n@@ -411,6 +412,9 @@ pub struct LateContext<'a, 'tcx: 'a> {\n     /// Side-tables for the body we are in.\n     pub tables: &'a ty::TypeckTables<'tcx>,\n \n+    /// Parameter environment for the item we are in.\n+    pub param_env: ty::ParamEnv<'tcx>,\n+\n     /// Items accessible from the crate being checked.\n     pub access_levels: &'a AccessLevels,\n \n@@ -866,6 +870,17 @@ impl<'a> LintContext<'a> for EarlyContext<'a> {\n     }\n }\n \n+impl<'a, 'tcx> LateContext<'a, 'tcx> {\n+    fn with_param_env<F>(&mut self, id: ast::NodeId, f: F)\n+        where F: FnOnce(&mut Self),\n+    {\n+        let old_param_env = self.param_env;\n+        self.param_env = self.tcx.param_env(self.tcx.hir.local_def_id(id));\n+        f(self);\n+        self.param_env = old_param_env;\n+    }\n+}\n+\n impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n     /// Because lints are scoped lexically, we want to walk nested\n     /// items in the context of the outer item, so enable\n@@ -899,17 +914,21 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n \n     fn visit_item(&mut self, it: &'tcx hir::Item) {\n         self.with_lint_attrs(&it.attrs, |cx| {\n-            run_lints!(cx, check_item, late_passes, it);\n-            hir_visit::walk_item(cx, it);\n-            run_lints!(cx, check_item_post, late_passes, it);\n+            cx.with_param_env(it.id, |cx| {\n+                run_lints!(cx, check_item, late_passes, it);\n+                hir_visit::walk_item(cx, it);\n+                run_lints!(cx, check_item_post, late_passes, it);\n+            });\n         })\n     }\n \n     fn visit_foreign_item(&mut self, it: &'tcx hir::ForeignItem) {\n         self.with_lint_attrs(&it.attrs, |cx| {\n-            run_lints!(cx, check_foreign_item, late_passes, it);\n-            hir_visit::walk_foreign_item(cx, it);\n-            run_lints!(cx, check_foreign_item_post, late_passes, it);\n+            cx.with_param_env(it.id, |cx| {\n+                run_lints!(cx, check_foreign_item, late_passes, it);\n+                hir_visit::walk_foreign_item(cx, it);\n+                run_lints!(cx, check_foreign_item_post, late_passes, it);\n+            });\n         })\n     }\n \n@@ -1023,17 +1042,21 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n \n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n         self.with_lint_attrs(&trait_item.attrs, |cx| {\n-            run_lints!(cx, check_trait_item, late_passes, trait_item);\n-            hir_visit::walk_trait_item(cx, trait_item);\n-            run_lints!(cx, check_trait_item_post, late_passes, trait_item);\n+            cx.with_param_env(trait_item.id, |cx| {\n+                run_lints!(cx, check_trait_item, late_passes, trait_item);\n+                hir_visit::walk_trait_item(cx, trait_item);\n+                run_lints!(cx, check_trait_item_post, late_passes, trait_item);\n+            });\n         });\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n         self.with_lint_attrs(&impl_item.attrs, |cx| {\n-            run_lints!(cx, check_impl_item, late_passes, impl_item);\n-            hir_visit::walk_impl_item(cx, impl_item);\n-            run_lints!(cx, check_impl_item_post, late_passes, impl_item);\n+            cx.with_param_env(impl_item.id, |cx| {\n+                run_lints!(cx, check_impl_item, late_passes, impl_item);\n+                hir_visit::walk_impl_item(cx, impl_item);\n+                run_lints!(cx, check_impl_item_post, late_passes, impl_item);\n+            });\n         });\n     }\n \n@@ -1327,6 +1350,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut cx = LateContext {\n         tcx: tcx,\n         tables: &ty::TypeckTables::empty(),\n+        param_env: ty::ParamEnv::empty(Reveal::UserFacing),\n         access_levels: access_levels,\n         lint_sess: LintSession::new(&tcx.sess.lint_store),\n     };"}, {"sha": "bccdac91423cdc3d9650adfd5f283ea405175f9f", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8b1b05bcebc1c6c8c2a7acdaa1970167c5b98cb4/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b1b05bcebc1c6c8c2a7acdaa1970167c5b98cb4/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=8b1b05bcebc1c6c8c2a7acdaa1970167c5b98cb4", "patch": "@@ -32,7 +32,7 @@ use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n use rustc::cfg;\n use rustc::ty::subst::Substs;\n-use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::{self, Ty};\n use rustc::traits::{self, Reveal};\n use rustc::hir::map as hir_map;\n use util::nodemap::NodeSet;\n@@ -893,7 +893,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnconditionalRecursion {\n             for adjustment in cx.tables.expr_adjustments(expr) {\n                 if let Adjust::Deref(Some(deref)) = adjustment.kind {\n                     let (def_id, substs) = deref.method_call(cx.tcx, source);\n-                    if method_call_refers_to_method(cx.tcx, method, def_id, substs, id) {\n+                    if method_call_refers_to_method(cx, method, def_id, substs, id) {\n                         return true;\n                     }\n                 }\n@@ -904,7 +904,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnconditionalRecursion {\n             if cx.tables.is_method_call(expr) {\n                 let def_id = cx.tables.type_dependent_defs[&id].def_id();\n                 let substs = cx.tables.node_substs(id);\n-                if method_call_refers_to_method(cx.tcx, method, def_id, substs, id) {\n+                if method_call_refers_to_method(cx, method, def_id, substs, id) {\n                     return true;\n                 }\n             }\n@@ -920,8 +920,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnconditionalRecursion {\n                     match def {\n                         Def::Method(def_id) => {\n                             let substs = cx.tables.node_substs(callee.id);\n-                            method_call_refers_to_method(\n-                                cx.tcx, method, def_id, substs, id)\n+                            method_call_refers_to_method(cx, method, def_id, substs, id)\n                         }\n                         _ => false,\n                     }\n@@ -932,12 +931,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnconditionalRecursion {\n \n         // Check if the method call to the method with the ID `callee_id`\n         // and instantiated with `callee_substs` refers to method `method`.\n-        fn method_call_refers_to_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        fn method_call_refers_to_method<'a, 'tcx>(cx: &LateContext<'a, 'tcx>,\n                                                   method: &ty::AssociatedItem,\n                                                   callee_id: DefId,\n                                                   callee_substs: &Substs<'tcx>,\n                                                   expr_id: ast::NodeId)\n                                                   -> bool {\n+            let tcx = cx.tcx;\n             let callee_item = tcx.associated_item(callee_id);\n \n             match callee_item.container {\n@@ -951,10 +951,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnconditionalRecursion {\n                     let trait_ref = ty::TraitRef::from_method(tcx, trait_def_id, callee_substs);\n                     let trait_ref = ty::Binder(trait_ref);\n                     let span = tcx.hir.span(expr_id);\n-                    let param_env = tcx.param_env(method.def_id);\n                     let obligation =\n                         traits::Obligation::new(traits::ObligationCause::misc(span, expr_id),\n-                                                param_env,\n+                                                cx.param_env,\n                                                 trait_ref.to_poly_trait_predicate());\n \n                     tcx.infer_ctxt(()).enter(|infcx| {\n@@ -1224,11 +1223,9 @@ impl LintPass for UnionsWithDropFields {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnionsWithDropFields {\n     fn check_item(&mut self, ctx: &LateContext, item: &hir::Item) {\n         if let hir::ItemUnion(ref vdata, _) = item.node {\n-            let item_def_id = ctx.tcx.hir.local_def_id(item.id);\n-            let param_env = ctx.tcx.param_env(item_def_id);\n             for field in vdata.fields() {\n                 let field_ty = ctx.tcx.type_of(ctx.tcx.hir.local_def_id(field.id));\n-                if field_ty.needs_drop(ctx.tcx, param_env) {\n+                if field_ty.needs_drop(ctx.tcx, ctx.param_env) {\n                     ctx.span_lint(UNIONS_WITH_DROP_FIELDS,\n                                   field.span,\n                                   \"union contains a field with possibly non-trivial drop code, \\"}, {"sha": "32bde42b5261f64b4d6c25ffa0317698bb3d235c", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b1b05bcebc1c6c8c2a7acdaa1970167c5b98cb4/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b1b05bcebc1c6c8c2a7acdaa1970167c5b98cb4/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=8b1b05bcebc1c6c8c2a7acdaa1970167c5b98cb4", "patch": "@@ -725,7 +725,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for VariantSizeDifferences {\n                 // sizes only make sense for non-generic types\n                 let item_def_id = cx.tcx.hir.local_def_id(it.id);\n                 let t = cx.tcx.type_of(item_def_id);\n-                let param_env = cx.tcx.param_env(item_def_id).reveal_all();\n+                let param_env = cx.param_env.reveal_all();\n                 let ty = cx.tcx.erase_regions(&t);\n                 let layout = ty.layout(cx.tcx, param_env).unwrap_or_else(|e| {\n                     bug!(\"failed to get layout for `{}`: {}\", t, e)"}]}