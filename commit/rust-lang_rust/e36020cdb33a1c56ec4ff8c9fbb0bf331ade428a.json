{"sha": "e36020cdb33a1c56ec4ff8c9fbb0bf331ade428a", "node_id": "C_kwDOAAsO6NoAKGUzNjAyMGNkYjMzYTFjNTZlYzRmZjhjOWZiYjBiZjMzMWFkZTQyOGE", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-05-01T18:51:00Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-05-25T15:14:29Z"}, "message": "rustc_metadata: inherit dependency privacy flag", "tree": {"sha": "eace0d832c16622532658fdbd29891b0fb569eeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eace0d832c16622532658fdbd29891b0fb569eeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e36020cdb33a1c56ec4ff8c9fbb0bf331ade428a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e36020cdb33a1c56ec4ff8c9fbb0bf331ade428a", "html_url": "https://github.com/rust-lang/rust/commit/e36020cdb33a1c56ec4ff8c9fbb0bf331ade428a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e36020cdb33a1c56ec4ff8c9fbb0bf331ade428a/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64025bb168f3ae37428387ca37ba89eb80be6544", "url": "https://api.github.com/repos/rust-lang/rust/commits/64025bb168f3ae37428387ca37ba89eb80be6544", "html_url": "https://github.com/rust-lang/rust/commit/64025bb168f3ae37428387ca37ba89eb80be6544"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "8bd96906f8b4b6146fa3b2a84de81715b82ccfa4", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e36020cdb33a1c56ec4ff8c9fbb0bf331ade428a/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36020cdb33a1c56ec4ff8c9fbb0bf331ade428a/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=e36020cdb33a1c56ec4ff8c9fbb0bf331ade428a", "patch": "@@ -365,6 +365,7 @@ impl<'a, 'tcx> CrateLoader<'a, 'tcx> {\n         lib: Library,\n         dep_kind: CrateDepKind,\n         name: Symbol,\n+        private_dep: bool,\n     ) -> Result<CrateNum, CrateError> {\n         let _prof_timer = self.sess.prof.generic_activity(\"metadata_register_crate\");\n \n@@ -518,15 +519,16 @@ impl<'a, 'tcx> CrateLoader<'a, 'tcx> {\n         if !name.as_str().is_ascii() {\n             return Err(CrateError::NonAsciiName(name));\n         }\n-        let (root, hash, host_hash, extra_filename, path_kind) = match dep {\n+        let (root, hash, host_hash, extra_filename, path_kind, private_dep) = match dep {\n             Some((root, dep)) => (\n                 Some(root),\n                 Some(dep.hash),\n                 dep.host_hash,\n                 Some(&dep.extra_filename[..]),\n                 PathKind::Dependency,\n+                dep.is_private,\n             ),\n-            None => (None, None, None, None, PathKind::Crate),\n+            None => (None, None, None, None, PathKind::Crate, false),\n         };\n         let result = if let Some(cnum) = self.existing_match(name, hash, path_kind) {\n             (LoadResult::Previous(cnum), None)\n@@ -562,10 +564,11 @@ impl<'a, 'tcx> CrateLoader<'a, 'tcx> {\n                     dep_kind = CrateDepKind::MacrosOnly;\n                 }\n                 data.update_dep_kind(|data_dep_kind| cmp::max(data_dep_kind, dep_kind));\n+                data.update_private_dep(|private_dep| private_dep && private_dep);\n                 Ok(cnum)\n             }\n             (LoadResult::Loaded(library), host_library) => {\n-                self.register_crate(host_library, root, library, dep_kind, name)\n+                self.register_crate(host_library, root, library, dep_kind, name, private_dep)\n             }\n             _ => panic!(),\n         }"}, {"sha": "46d469f0703c0e53731a386e50dd30ad02f21e47", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e36020cdb33a1c56ec4ff8c9fbb0bf331ade428a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36020cdb33a1c56ec4ff8c9fbb0bf331ade428a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=e36020cdb33a1c56ec4ff8c9fbb0bf331ade428a", "patch": "@@ -113,7 +113,7 @@ pub(crate) struct CrateMetadata {\n     source: Lrc<CrateSource>,\n     /// Whether or not this crate should be consider a private dependency\n     /// for purposes of the 'exported_private_dependencies' lint\n-    private_dep: bool,\n+    private_dep: Lock<bool>,\n     /// The hash for the host proc macro. Used to support `-Z dual-proc-macro`.\n     host_hash: Option<Svh>,\n \n@@ -690,12 +690,13 @@ impl MetadataBlob {\n         writeln!(out, \"=External Dependencies=\")?;\n \n         for (i, dep) in root.crate_deps.decode(self).enumerate() {\n-            let CrateDep { name, extra_filename, hash, host_hash, kind } = dep;\n+            let CrateDep { name, extra_filename, hash, host_hash, kind, is_private } = dep;\n             let number = i + 1;\n \n             writeln!(\n                 out,\n-                \"{number} {name}{extra_filename} hash {hash} host_hash {host_hash:?} kind {kind:?}\"\n+                \"{number} {name}{extra_filename} hash {hash} host_hash {host_hash:?} kind {kind:?} {privacy}\",\n+                privacy = if is_private { \"private\" } else { \"public\" }\n             )?;\n         }\n         write!(out, \"\\n\")?;\n@@ -1617,7 +1618,7 @@ impl CrateMetadata {\n             dependencies,\n             dep_kind: Lock::new(dep_kind),\n             source: Lrc::new(source),\n-            private_dep,\n+            private_dep: Lock::new(private_dep),\n             host_hash,\n             extern_crate: Lock::new(None),\n             hygiene_context: Default::default(),\n@@ -1665,6 +1666,10 @@ impl CrateMetadata {\n         self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))\n     }\n \n+    pub(crate) fn update_private_dep(&self, f: impl FnOnce(bool) -> bool) {\n+        self.private_dep.with_lock(|private_dep| *private_dep = f(*private_dep))\n+    }\n+\n     pub(crate) fn required_panic_strategy(&self) -> Option<PanicStrategy> {\n         self.root.required_panic_strategy\n     }"}, {"sha": "9bc25e3e0b7a81613a9fbd07803bb371f7273698", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e36020cdb33a1c56ec4ff8c9fbb0bf331ade428a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36020cdb33a1c56ec4ff8c9fbb0bf331ade428a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=e36020cdb33a1c56ec4ff8c9fbb0bf331ade428a", "patch": "@@ -285,7 +285,10 @@ provide! { tcx, def_id, other, cdata,\n     is_ctfe_mir_available => { cdata.is_ctfe_mir_available(def_id.index) }\n \n     dylib_dependency_formats => { cdata.get_dylib_dependency_formats(tcx) }\n-    is_private_dep => { cdata.private_dep }\n+    is_private_dep => {\n+        let r = *cdata.private_dep.lock();\n+        r\n+    }\n     is_panic_runtime => { cdata.root.panic_runtime }\n     is_compiler_builtins => { cdata.root.compiler_builtins }\n     has_global_allocator => { cdata.root.has_global_allocator }"}, {"sha": "59ca0ac6e28fab138d21f967afcd31828e5741f7", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e36020cdb33a1c56ec4ff8c9fbb0bf331ade428a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36020cdb33a1c56ec4ff8c9fbb0bf331ade428a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=e36020cdb33a1c56ec4ff8c9fbb0bf331ade428a", "patch": "@@ -1880,6 +1880,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     host_hash: self.tcx.crate_host_hash(cnum),\n                     kind: self.tcx.dep_kind(cnum),\n                     extra_filename: self.tcx.extra_filename(cnum).clone(),\n+                    is_private: self.tcx.is_private_dep(cnum),\n                 };\n                 (cnum, dep)\n             })"}, {"sha": "34ccf00a1e3d92cb0fe7d951be50a712230edbb7", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e36020cdb33a1c56ec4ff8c9fbb0bf331ade428a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36020cdb33a1c56ec4ff8c9fbb0bf331ade428a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=e36020cdb33a1c56ec4ff8c9fbb0bf331ade428a", "patch": "@@ -302,6 +302,7 @@ pub(crate) struct CrateDep {\n     pub host_hash: Option<Svh>,\n     pub kind: CrateDepKind,\n     pub extra_filename: String,\n+    pub is_private: bool,\n }\n \n #[derive(MetadataEncodable, MetadataDecodable)]"}]}