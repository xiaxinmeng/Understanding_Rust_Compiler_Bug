{"sha": "39a5d3f409b4e9b610129e02625b45124e1e55a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5YTVkM2Y0MDliNGU5YjYxMDEyOWUwMjYyNWI0NTEyNGUxZTU1YTA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-06-28T20:31:30Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-06-30T00:01:10Z"}, "message": "rustbuild: Implement testing for Android\n\nThis commit enhances the rustbuild support for testing Android to the same level\nof parity as the makefiles. This involved:\n\n* A new step to copy the standard library and other shared objects to the\n  emulator. This is injected as a dependency of all test suites for Android.\n* Appropriate arguments are now passed through to compiletest to ensure that it\n  can run tests.\n* When testing the standard library the test executables are probed for and\n  shipped to the emulator to run for each test.\n* Fixing compilation of compiler-rt a bit\n\nAll support added here is modeled after what's found in the makefiles, just\ntranslating one strategy to another. As an added bonus this commit adds support\nfor the \"check\" step to automatically run tests for all targets, and the\n\"check-target\" step now runs all tests for a particular target, automatically\nfiltering the tests if the target is detected as a cross-compile.\n\nNote that we don't (and probably won't) have a bot which is actually going to\nexercise any of this just yet, but all tests have passed locally for me at\nleast.", "tree": {"sha": "10f565093c66850291ace22453e41563a2750c81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10f565093c66850291ace22453e41563a2750c81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39a5d3f409b4e9b610129e02625b45124e1e55a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39a5d3f409b4e9b610129e02625b45124e1e55a0", "html_url": "https://github.com/rust-lang/rust/commit/39a5d3f409b4e9b610129e02625b45124e1e55a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39a5d3f409b4e9b610129e02625b45124e1e55a0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "366de839ae9794411419c5b579c829e18adde613", "url": "https://api.github.com/repos/rust-lang/rust/commits/366de839ae9794411419c5b579c829e18adde613", "html_url": "https://github.com/rust-lang/rust/commit/366de839ae9794411419c5b579c829e18adde613"}], "stats": {"total": 279, "additions": 227, "deletions": 52}, "files": [{"sha": "ff0941a97dce1e3fcbfde7bdf64e79dca66ffc33", "filename": "src/bootstrap/build/cc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39a5d3f409b4e9b610129e02625b45124e1e55a0/src%2Fbootstrap%2Fbuild%2Fcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a5d3f409b4e9b610129e02625b45124e1e55a0/src%2Fbootstrap%2Fbuild%2Fcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fcc.rs?ref=39a5d3f409b4e9b610129e02625b45124e1e55a0", "patch": "@@ -90,6 +90,7 @@ fn set_compiler(cfg: &mut gcc::Config,\n         // compiler already takes into account the triple in question.\n         t if t.contains(\"android\") => {\n             if let Some(ndk) = config.and_then(|c| c.ndk.as_ref()) {\n+                let target = target.replace(\"armv7\", \"arm\");\n                 let compiler = format!(\"{}-{}\", target, gnu_compiler);\n                 cfg.compiler(ndk.join(\"bin\").join(compiler));\n             }"}, {"sha": "0a096f8e4de417aea9560ad28f3e5c3f6a3503c4", "filename": "src/bootstrap/build/check.rs", "status": "modified", "additions": 117, "deletions": 11, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/39a5d3f409b4e9b610129e02625b45124e1e55a0/src%2Fbootstrap%2Fbuild%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a5d3f409b4e9b610129e02625b45124e1e55a0/src%2Fbootstrap%2Fbuild%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fcheck.rs?ref=39a5d3f409b4e9b610129e02625b45124e1e55a0", "patch": "@@ -23,6 +23,9 @@ use build_helper::output;\n use bootstrap::{dylib_path, dylib_path_var};\n \n use build::{Build, Compiler, Mode};\n+use build::util;\n+\n+const ADB_TEST_DIR: &'static str = \"/data/tmp\";\n \n /// Runs the `linkchecker` tool as compiled in `stage` by the `host` compiler.\n ///\n@@ -88,6 +91,7 @@ pub fn compiletest(build: &Build,\n                    target: &str,\n                    mode: &str,\n                    suite: &str) {\n+    println!(\"Check compiletest {} ({} -> {})\", suite, compiler.host, target);\n     let mut cmd = build.tool_cmd(compiler, \"compiletest\");\n \n     // compiletest currently has... a lot of arguments, so let's just pass all\n@@ -105,21 +109,23 @@ pub fn compiletest(build: &Build,\n     cmd.arg(\"--host\").arg(compiler.host);\n     cmd.arg(\"--llvm-filecheck\").arg(build.llvm_filecheck(&build.config.build));\n \n-    let mut flags = format!(\"-Crpath\");\n+    let mut flags = vec![\"-Crpath\".to_string()];\n     if build.config.rust_optimize_tests {\n-        flags.push_str(\" -O\");\n+        flags.push(\"-O\".to_string());\n     }\n     if build.config.rust_debuginfo_tests {\n-        flags.push_str(\" -g\");\n+        flags.push(\"-g\".to_string());\n     }\n \n-    cmd.arg(\"--host-rustcflags\").arg(&flags);\n-\n-    let linkflag = format!(\"-Lnative={}\", build.test_helpers_out(target).display());\n-    cmd.arg(\"--target-rustcflags\").arg(format!(\"{} {}\", flags, linkflag));\n+    let mut hostflags = build.rustc_flags(&compiler.host);\n+    hostflags.extend(flags.clone());\n+    cmd.arg(\"--host-rustcflags\").arg(hostflags.join(\" \"));\n \n-    // FIXME: needs android support\n-    cmd.arg(\"--android-cross-path\").arg(\"\");\n+    let mut targetflags = build.rustc_flags(&target);\n+    targetflags.extend(flags);\n+    targetflags.push(format!(\"-Lnative={}\",\n+                             build.test_helpers_out(target).display()));\n+    cmd.arg(\"--target-rustcflags\").arg(targetflags.join(\" \"));\n \n     // FIXME: CFG_PYTHON should probably be detected more robustly elsewhere\n     let python_default = \"python\";\n@@ -180,6 +186,16 @@ pub fn compiletest(build: &Build,\n     }\n     build.add_bootstrap_key(compiler, &mut cmd);\n \n+    cmd.arg(\"--adb-path\").arg(\"adb\");\n+    cmd.arg(\"--adb-test-dir\").arg(ADB_TEST_DIR);\n+    if target.contains(\"android\") {\n+        // Assume that cc for this target comes from the android sysroot\n+        cmd.arg(\"--android-cross-path\")\n+           .arg(build.cc(target).parent().unwrap().parent().unwrap());\n+    } else {\n+        cmd.arg(\"--android-cross-path\").arg(\"\");\n+    }\n+\n     build.run(&mut cmd);\n }\n \n@@ -302,7 +318,97 @@ pub fn krate(build: &Build,\n     let mut dylib_path = dylib_path();\n     dylib_path.insert(0, build.sysroot_libdir(compiler, target));\n     cargo.env(dylib_path_var(), env::join_paths(&dylib_path).unwrap());\n-    cargo.args(&build.flags.args);\n \n-    build.run(&mut cargo);\n+    if target.contains(\"android\") {\n+        build.run(cargo.arg(\"--no-run\"));\n+        krate_android(build, compiler, target, mode);\n+    } else {\n+        cargo.args(&build.flags.args);\n+        build.run(&mut cargo);\n+    }\n+}\n+\n+fn krate_android(build: &Build,\n+                 compiler: &Compiler,\n+                 target: &str,\n+                 mode: Mode) {\n+    let mut tests = Vec::new();\n+    let out_dir = build.cargo_out(compiler, mode, target);\n+    find_tests(&out_dir, target, &mut tests);\n+    find_tests(&out_dir.join(\"deps\"), target, &mut tests);\n+\n+    for test in tests {\n+        build.run(Command::new(\"adb\").arg(\"push\").arg(&test).arg(ADB_TEST_DIR));\n+\n+        let test_file_name = test.file_name().unwrap().to_string_lossy();\n+        let log = format!(\"{}/check-stage{}-T-{}-H-{}-{}.log\",\n+                          ADB_TEST_DIR,\n+                          compiler.stage,\n+                          target,\n+                          compiler.host,\n+                          test_file_name);\n+        let program = format!(\"(cd {dir}; \\\n+                                LD_LIBRARY_PATH=./{target} ./{test} \\\n+                                    --logfile {log} \\\n+                                    {args})\",\n+                              dir = ADB_TEST_DIR,\n+                              target = target,\n+                              test = test_file_name,\n+                              log = log,\n+                              args = build.flags.args.join(\" \"));\n+\n+        let output = output(Command::new(\"adb\").arg(\"shell\").arg(&program));\n+        println!(\"{}\", output);\n+        build.run(Command::new(\"adb\")\n+                          .arg(\"pull\")\n+                          .arg(&log)\n+                          .arg(build.out.join(\"tmp\")));\n+        build.run(Command::new(\"adb\").arg(\"shell\").arg(\"rm\").arg(&log));\n+        if !output.contains(\"result: ok\") {\n+            panic!(\"some tests failed\");\n+        }\n+    }\n+}\n+\n+fn find_tests(dir: &Path,\n+              target: &str,\n+              dst: &mut Vec<PathBuf>) {\n+    for e in t!(dir.read_dir()).map(|e| t!(e)) {\n+        let file_type = t!(e.file_type());\n+        if !file_type.is_file() {\n+            continue\n+        }\n+        let filename = e.file_name().into_string().unwrap();\n+        if (target.contains(\"windows\") && filename.ends_with(\".exe\")) ||\n+           (!target.contains(\"windows\") && !filename.contains(\".\")) {\n+            dst.push(e.path());\n+        }\n+    }\n+}\n+\n+pub fn android_copy_libs(build: &Build,\n+                         compiler: &Compiler,\n+                         target: &str) {\n+    println!(\"Android copy libs to emulator ({})\", target);\n+    build.run(Command::new(\"adb\").arg(\"remount\"));\n+    build.run(Command::new(\"adb\").args(&[\"shell\", \"rm\", \"-r\", ADB_TEST_DIR]));\n+    build.run(Command::new(\"adb\").args(&[\"shell\", \"mkdir\", ADB_TEST_DIR]));\n+    build.run(Command::new(\"adb\")\n+                      .arg(\"push\")\n+                      .arg(build.src.join(\"src/etc/adb_run_wrapper.sh\"))\n+                      .arg(ADB_TEST_DIR));\n+\n+    let target_dir = format!(\"{}/{}\", ADB_TEST_DIR, target);\n+    build.run(Command::new(\"adb\").args(&[\"shell\", \"mkdir\", &target_dir[..]]));\n+\n+    for f in t!(build.sysroot_libdir(compiler, target).read_dir()) {\n+        let f = t!(f);\n+        let name = f.file_name().into_string().unwrap();\n+        if util::is_dylib(&name) {\n+            build.run(Command::new(\"adb\")\n+                              .arg(\"push\")\n+                              .arg(f.path())\n+                              .arg(&target_dir));\n+        }\n+    }\n }"}, {"sha": "498196e9b6dfc12454274e75cd695c2ad2a04b65", "filename": "src/bootstrap/build/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39a5d3f409b4e9b610129e02625b45124e1e55a0/src%2Fbootstrap%2Fbuild%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a5d3f409b4e9b610129e02625b45124e1e55a0/src%2Fbootstrap%2Fbuild%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fconfig.rs?ref=39a5d3f409b4e9b610129e02625b45124e1e55a0", "patch": "@@ -368,13 +368,13 @@ impl Config {\n                     target.ndk = Some(PathBuf::from(value));\n                 }\n                 \"CFG_I686_LINUX_ANDROID_NDK\" if value.len() > 0 => {\n-                    let target = \"i686-linux-androideabi\".to_string();\n+                    let target = \"i686-linux-android\".to_string();\n                     let target = self.target_config.entry(target)\n                                      .or_insert(Target::default());\n                     target.ndk = Some(PathBuf::from(value));\n                 }\n                 \"CFG_AARCH64_LINUX_ANDROID_NDK\" if value.len() > 0 => {\n-                    let target = \"aarch64-linux-androideabi\".to_string();\n+                    let target = \"aarch64-linux-android\".to_string();\n                     let target = self.target_config.entry(target)\n                                      .or_insert(Target::default());\n                     target.ndk = Some(PathBuf::from(value));"}, {"sha": "6eed7eaf206f4631f584604a5aefa11d70329041", "filename": "src/bootstrap/build/dist.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39a5d3f409b4e9b610129e02625b45124e1e55a0/src%2Fbootstrap%2Fbuild%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a5d3f409b4e9b610129e02625b45124e1e55a0/src%2Fbootstrap%2Fbuild%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fdist.rs?ref=39a5d3f409b4e9b610129e02625b45124e1e55a0", "patch": "@@ -135,7 +135,6 @@ pub fn rustc(build: &Build, stage: u32, host: &str) {\n \n     // Prepare the overlay which is part of the tarball but won't actually be\n     // installed\n-    t!(fs::create_dir_all(&overlay));\n     let cp = |file: &str| {\n         install(&build.src.join(file), &overlay, 0o644);\n     };\n@@ -199,7 +198,6 @@ pub fn rustc(build: &Build, stage: u32, host: &str) {\n \n         // Copy runtime DLLs needed by the compiler\n         if libdir != \"bin\" {\n-            t!(fs::create_dir_all(image.join(libdir)));\n             for entry in t!(src.join(libdir).read_dir()).map(|e| t!(e)) {\n                 let name = entry.file_name();\n                 if let Some(s) = name.to_str() {\n@@ -221,7 +219,6 @@ pub fn rustc(build: &Build, stage: u32, host: &str) {\n         let cp = |file: &str| {\n             install(&build.src.join(file), &image.join(\"share/doc/rust\"), 0o644);\n         };\n-        t!(fs::create_dir_all(&image.join(\"share/doc/rust\")));\n         cp(\"COPYRIGHT\");\n         cp(\"LICENSE-APACHE\");\n         cp(\"LICENSE-MIT\");\n@@ -289,6 +286,7 @@ pub fn std(build: &Build, compiler: &Compiler, target: &str) {\n \n fn install(src: &Path, dstdir: &Path, perms: u32) {\n     let dst = dstdir.join(src.file_name().unwrap());\n+    t!(fs::create_dir_all(dstdir));\n     t!(fs::copy(src, &dst));\n     chmod(&dst, perms);\n }"}, {"sha": "195d1bc90c655fb191f832aeaa46c6bf8e3eb45a", "filename": "src/bootstrap/build/mod.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/39a5d3f409b4e9b610129e02625b45124e1e55a0/src%2Fbootstrap%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a5d3f409b4e9b610129e02625b45124e1e55a0/src%2Fbootstrap%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fmod.rs?ref=39a5d3f409b4e9b610129e02625b45124e1e55a0", "patch": "@@ -128,6 +128,7 @@ pub struct Build {\n ///\n /// These entries currently correspond to the various output directories of the\n /// build system, with each mod generating output in a different directory.\n+#[derive(Clone, Copy)]\n pub enum Mode {\n     /// This cargo is going to build the standard library, placing output in the\n     /// \"stageN-std\" directory.\n@@ -383,8 +384,7 @@ impl Build {\n                                        \"ui\", \"ui\");\n                 }\n                 CheckDebuginfo { compiler } => {\n-                    if target.target.contains(\"msvc\") ||\n-                       target.target.contains(\"android\") {\n+                    if target.target.contains(\"msvc\") {\n                         // nothing to do\n                     } else if target.target.contains(\"apple\") {\n                         check::compiletest(self, &compiler, target.target,\n@@ -434,8 +434,14 @@ impl Build {\n                                            target.target);\n                 }\n \n+                AndroidCopyLibs { compiler } => {\n+                    check::android_copy_libs(self, &compiler, target.target);\n+                }\n+\n+                // pseudo-steps\n                 Dist { .. } |\n-                Doc { .. } | // pseudo-steps\n+                Doc { .. } |\n+                CheckTarget { .. } |\n                 Check { .. } => {}\n             }\n         }"}, {"sha": "a01eb0d1a6bcb535296b46d48c03571604bac110", "filename": "src/bootstrap/build/native.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39a5d3f409b4e9b610129e02625b45124e1e55a0/src%2Fbootstrap%2Fbuild%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a5d3f409b4e9b610129e02625b45124e1e55a0/src%2Fbootstrap%2Fbuild%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fnative.rs?ref=39a5d3f409b4e9b610129e02625b45124e1e55a0", "patch": "@@ -49,6 +49,8 @@ pub fn llvm(build: &Build, target: &str) {\n         return\n     }\n \n+    println!(\"Building LLVM for {}\", target);\n+\n     let _ = fs::remove_dir_all(&dst.join(\"build\"));\n     t!(fs::create_dir_all(&dst.join(\"build\")));\n     let assertions = if build.config.llvm_assertions {\"ON\"} else {\"OFF\"};\n@@ -165,8 +167,10 @@ pub fn compiler_rt(build: &Build, target: &str) {\n             \"arm\" if target.contains(\"eabihf\") => \"armhf\",\n             _ => arch,\n         };\n-        let target = format!(\"clang_rt.builtins-{}{}\", builtins_arch, os_extra);\n-        (\"linux\".to_string(), target.clone(), target)\n+        let target = format!(\"clang_rt.builtins-{}\", builtins_arch);\n+        (\"linux\".to_string(),\n+         target.clone(),\n+         format!(\"{}{}\", target, os_extra))\n     } else if target.contains(\"apple-darwin\") {\n         let builtins_arch = match arch {\n             \"i686\" => \"i386\","}, {"sha": "5eced00e13973e35109cb32856aa732b16cd9696", "filename": "src/bootstrap/build/sanity.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39a5d3f409b4e9b610129e02625b45124e1e55a0/src%2Fbootstrap%2Fbuild%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a5d3f409b4e9b610129e02625b45124e1e55a0/src%2Fbootstrap%2Fbuild%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fsanity.rs?ref=39a5d3f409b4e9b610129e02625b45124e1e55a0", "patch": "@@ -139,6 +139,10 @@ $ pacman -R cmake && pacman -S mingw-w64-x86_64-cmake\n \");\n             }\n         }\n+\n+        if target.contains(\"arm-linux-android\") {\n+            need_cmd(\"adb\".as_ref());\n+        }\n     }\n \n     for host in build.flags.host.iter() {"}, {"sha": "7cbbd6740a2657a5cbbfda23eea3a572fb30d936", "filename": "src/bootstrap/build/step.rs", "status": "modified", "additions": 87, "deletions": 31, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/39a5d3f409b4e9b610129e02625b45124e1e55a0/src%2Fbootstrap%2Fbuild%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a5d3f409b4e9b610129e02625b45124e1e55a0/src%2Fbootstrap%2Fbuild%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fstep.rs?ref=39a5d3f409b4e9b610129e02625b45124e1e55a0", "patch": "@@ -102,6 +102,7 @@ macro_rules! targets {\n             // Steps for running tests. The 'check' target is just a pseudo\n             // target to depend on a bunch of others.\n             (check, Check { stage: u32, compiler: Compiler<'a> }),\n+            (check_target, CheckTarget { stage: u32, compiler: Compiler<'a> }),\n             (check_linkcheck, CheckLinkcheck { stage: u32 }),\n             (check_cargotest, CheckCargoTest { stage: u32 }),\n             (check_tidy, CheckTidy { stage: u32 }),\n@@ -138,6 +139,9 @@ macro_rules! targets {\n             (dist_mingw, DistMingw { _dummy: () }),\n             (dist_rustc, DistRustc { stage: u32 }),\n             (dist_std, DistStd { compiler: Compiler<'a> }),\n+\n+            // Misc targets\n+            (android_copy_libs, AndroidCopyLibs { compiler: Compiler<'a> }),\n         }\n     }\n }\n@@ -382,37 +386,80 @@ impl<'a> Step<'a> {\n                      self.doc_error_index(stage)]\n             }\n             Source::Check { stage, compiler } => {\n-                vec![\n+                // Check is just a pseudo step which means check all targets,\n+                // so just depend on checking all targets.\n+                build.config.target.iter().map(|t| {\n+                    self.target(t).check_target(stage, compiler)\n+                }).collect()\n+            }\n+            Source::CheckTarget { stage, compiler } => {\n+                // CheckTarget here means run all possible test suites for this\n+                // target. Most of the time, however, we can't actually run\n+                // anything if we're not the build triple as we could be cross\n+                // compiling.\n+                //\n+                // As a result, the base set of targets here is quite stripped\n+                // down from the standard set of targets. These suites have\n+                // their own internal logic to run in cross-compiled situations\n+                // if they'll run at all. For example compiletest knows that\n+                // when testing Android targets we ship artifacts to the\n+                // emulator.\n+                //\n+                // When in doubt the rule of thumb for adding to this list is\n+                // \"should this test suite run on the android bot?\"\n+                let mut base = vec![\n                     self.check_rpass(compiler),\n-                    self.check_rpass_full(compiler),\n                     self.check_rfail(compiler),\n-                    self.check_rfail_full(compiler),\n-                    self.check_cfail(compiler),\n-                    self.check_cfail_full(compiler),\n-                    self.check_pfail(compiler),\n-                    self.check_incremental(compiler),\n-                    self.check_ui(compiler),\n                     self.check_crate_std(compiler),\n                     self.check_crate_test(compiler),\n-                    self.check_crate_rustc(compiler),\n-                    self.check_codegen(compiler),\n-                    self.check_codegen_units(compiler),\n                     self.check_debuginfo(compiler),\n-                    self.check_rustdoc(compiler),\n-                    self.check_pretty(compiler),\n-                    self.check_pretty_rpass(compiler),\n-                    self.check_pretty_rpass_full(compiler),\n-                    self.check_pretty_rfail(compiler),\n-                    self.check_pretty_rfail_full(compiler),\n-                    self.check_pretty_rpass_valgrind(compiler),\n-                    self.check_rpass_valgrind(compiler),\n-                    self.check_error_index(compiler),\n-                    self.check_docs(compiler),\n-                    self.check_rmake(compiler),\n-                    self.check_linkcheck(stage),\n-                    self.check_tidy(stage),\n                     self.dist(stage),\n-                ]\n+                ];\n+\n+                // If we're testing the build triple, then we know we can\n+                // actually run binaries and such, so we run all possible tests\n+                // that we know about.\n+                if self.target == build.config.build {\n+                    base.extend(vec![\n+                        // docs-related\n+                        self.check_docs(compiler),\n+                        self.check_error_index(compiler),\n+                        self.check_rustdoc(compiler),\n+\n+                        // UI-related\n+                        self.check_cfail(compiler),\n+                        self.check_pfail(compiler),\n+                        self.check_ui(compiler),\n+\n+                        // codegen-related\n+                        self.check_incremental(compiler),\n+                        self.check_codegen(compiler),\n+                        self.check_codegen_units(compiler),\n+\n+                        // misc compiletest-test suites\n+                        self.check_rpass_full(compiler),\n+                        self.check_rfail_full(compiler),\n+                        self.check_cfail_full(compiler),\n+                        self.check_pretty_rpass_full(compiler),\n+                        self.check_pretty_rfail_full(compiler),\n+                        self.check_rpass_valgrind(compiler),\n+                        self.check_rmake(compiler),\n+\n+                        // crates\n+                        self.check_crate_rustc(compiler),\n+\n+                        // pretty\n+                        self.check_pretty(compiler),\n+                        self.check_pretty_rpass(compiler),\n+                        self.check_pretty_rfail(compiler),\n+                        self.check_pretty_rpass_valgrind(compiler),\n+\n+                        // misc\n+                        self.check_linkcheck(stage),\n+                        self.check_tidy(stage),\n+                    ]);\n+                }\n+                return base\n             }\n             Source::CheckLinkcheck { stage } => {\n                 vec![self.tool_linkchecker(stage), self.doc(stage)]\n@@ -437,16 +484,20 @@ impl<'a> Step<'a> {\n             Source::CheckCFail { compiler } |\n             Source::CheckRPassValgrind { compiler } |\n             Source::CheckRPass { compiler } => {\n-                vec![\n+                let mut base = vec![\n                     self.libtest(compiler),\n-                    self.tool_compiletest(compiler.stage),\n+                    self.target(compiler.host).tool_compiletest(compiler.stage),\n                     self.test_helpers(()),\n-                ]\n+                ];\n+                if self.target.contains(\"android\") {\n+                    base.push(self.android_copy_libs(compiler));\n+                }\n+                base\n             }\n             Source::CheckDebuginfo { compiler } => {\n                 vec![\n                     self.libtest(compiler),\n-                    self.tool_compiletest(compiler.stage),\n+                    self.target(compiler.host).tool_compiletest(compiler.stage),\n                     self.test_helpers(()),\n                     self.debugger_scripts(compiler.stage),\n                 ]\n@@ -459,13 +510,14 @@ impl<'a> Step<'a> {\n             Source::CheckPrettyRPassValgrind { compiler } |\n             Source::CheckRMake { compiler } => {\n                 vec![self.librustc(compiler),\n-                     self.tool_compiletest(compiler.stage)]\n+                     self.target(compiler.host).tool_compiletest(compiler.stage)]\n             }\n             Source::CheckDocs { compiler } => {\n                 vec![self.libstd(compiler)]\n             }\n             Source::CheckErrorIndex { compiler } => {\n-                vec![self.libstd(compiler), self.tool_error_index(compiler.stage)]\n+                vec![self.libstd(compiler),\n+                     self.target(compiler.host).tool_error_index(compiler.stage)]\n             }\n             Source::CheckCrateStd { compiler } => {\n                 vec![self.libtest(compiler)]\n@@ -529,6 +581,10 @@ impl<'a> Step<'a> {\n                 }\n                 return base\n             }\n+\n+            Source::AndroidCopyLibs { compiler } => {\n+                vec![self.libtest(compiler)]\n+            }\n         }\n     }\n }"}]}