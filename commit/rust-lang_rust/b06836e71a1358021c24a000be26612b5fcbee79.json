{"sha": "b06836e71a1358021c24a000be26612b5fcbee79", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNjgzNmU3MWExMzU4MDIxYzI0YTAwMGJlMjY2MTJiNWZjYmVlNzk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-13T10:53:29Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T12:40:16Z"}, "message": "[eddyb/rebase cleanup] move type_{needs_drop,is_sized,is_freeze} to rustc_codegen_utils", "tree": {"sha": "d8bb7a50887309adfb9c3aa7f244644f6352f971", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8bb7a50887309adfb9c3aa7f244644f6352f971"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b06836e71a1358021c24a000be26612b5fcbee79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b06836e71a1358021c24a000be26612b5fcbee79", "html_url": "https://github.com/rust-lang/rust/commit/b06836e71a1358021c24a000be26612b5fcbee79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b06836e71a1358021c24a000be26612b5fcbee79/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35b40f51fb3fbe177745f251e2f58d928227a89a", "url": "https://api.github.com/repos/rust-lang/rust/commits/35b40f51fb3fbe177745f251e2f58d928227a89a", "html_url": "https://github.com/rust-lang/rust/commit/35b40f51fb3fbe177745f251e2f58d928227a89a"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "56dac0175e581da0ed76cb5f4aaa50b18af1acbe", "filename": "src/librustc_codegen_llvm/type_.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b06836e71a1358021c24a000be26612b5fcbee79/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06836e71a1358021c24a000be26612b5fcbee79/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_.rs?ref=b06836e71a1358021c24a000be26612b5fcbee79", "patch": "@@ -27,6 +27,7 @@ use rustc::ty::layout::TyLayout;\n use rustc_target::abi::call::{CastTarget, FnType, Reg};\n use rustc_data_structures::small_c_str::SmallCStr;\n use common;\n+use rustc_codegen_utils;\n use rustc_codegen_utils::common::TypeKind;\n use type_of::LayoutLlvmExt;\n use abi::{LlvmType, FnTypeExt};\n@@ -363,15 +364,15 @@ impl DerivedTypeMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     }\n \n     fn type_needs_drop(&self, ty: Ty<'tcx>) -> bool {\n-        common::type_needs_drop(self.tcx(), ty)\n+        rustc_codegen_utils::common::type_needs_drop(self.tcx(), ty)\n     }\n \n     fn type_is_sized(&self, ty: Ty<'tcx>) -> bool {\n-        common::type_is_sized(self.tcx(), ty)\n+        rustc_codegen_utils::common::type_is_sized(self.tcx(), ty)\n     }\n \n     fn type_is_freeze(&self, ty: Ty<'tcx>) -> bool {\n-        common::type_is_freeze(self.tcx(), ty)\n+        rustc_codegen_utils::common::type_is_freeze(self.tcx(), ty)\n     }\n \n     fn type_has_metadata(&self, ty: Ty<'tcx>) -> bool {"}, {"sha": "c274fa4345ab5d7a65f4f299a9c2406b6aa3a614", "filename": "src/librustc_codegen_utils/common.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b06836e71a1358021c24a000be26612b5fcbee79/src%2Flibrustc_codegen_utils%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06836e71a1358021c24a000be26612b5fcbee79/src%2Flibrustc_codegen_utils%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcommon.rs?ref=b06836e71a1358021c24a000be26612b5fcbee79", "patch": "@@ -7,9 +7,24 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n #![allow(non_camel_case_types, non_snake_case)]\n \n+use rustc::ty::{self, Ty, TyCtxt};\n+use syntax_pos::DUMMY_SP;\n+\n+\n+pub fn type_needs_drop<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> bool {\n+    ty.needs_drop(tcx, ty::ParamEnv::reveal_all())\n+}\n+\n+pub fn type_is_sized<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> bool {\n+    ty.is_sized(tcx.at(DUMMY_SP), ty::ParamEnv::reveal_all())\n+}\n+\n+pub fn type_is_freeze<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> bool {\n+    ty.is_freeze(tcx, ty::ParamEnv::reveal_all(), DUMMY_SP)\n+}\n+\n pub enum IntPredicate {\n     IntEQ,\n     IntNE,"}]}