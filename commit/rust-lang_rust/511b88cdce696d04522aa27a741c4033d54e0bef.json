{"sha": "511b88cdce696d04522aa27a741c4033d54e0bef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxMWI4OGNkY2U2OTZkMDQ1MjJhYTI3YTc0MWM0MDMzZDU0ZTBiZWY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-20T22:27:03Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-30T08:11:59Z"}, "message": "only emit Suspend validation for mutable paths", "tree": {"sha": "88a7306c30bad4b8d800c258d993fe2e7dc02e2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88a7306c30bad4b8d800c258d993fe2e7dc02e2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/511b88cdce696d04522aa27a741c4033d54e0bef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/511b88cdce696d04522aa27a741c4033d54e0bef", "html_url": "https://github.com/rust-lang/rust/commit/511b88cdce696d04522aa27a741c4033d54e0bef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/511b88cdce696d04522aa27a741c4033d54e0bef/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24a2ac9e468a18913e5238475db57f7404a37bc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/24a2ac9e468a18913e5238475db57f7404a37bc5", "html_url": "https://github.com/rust-lang/rust/commit/24a2ac9e468a18913e5238475db57f7404a37bc5"}], "stats": {"total": 53, "additions": 41, "deletions": 12}, "files": [{"sha": "b79c1a2d6fdb2674340a918e918bce75214a057a", "filename": "src/librustc_mir/transform/add_validation.rs", "status": "modified", "additions": 41, "deletions": 12, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/511b88cdce696d04522aa27a741c4033d54e0bef/src%2Flibrustc_mir%2Ftransform%2Fadd_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/511b88cdce696d04522aa27a741c4033d54e0bef/src%2Flibrustc_mir%2Ftransform%2Fadd_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_validation.rs?ref=511b88cdce696d04522aa27a741c4033d54e0bef", "patch": "@@ -20,6 +20,33 @@ use rustc::mir::transform::{MirPass, MirSource};\n \n pub struct AddValidation;\n \n+\n+fn is_lvalue_shared<'a, 'tcx, D>(lval: &Lvalue<'tcx>, local_decls: &D, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> bool\n+    where D: HasLocalDecls<'tcx>\n+{\n+    use rustc::mir::Lvalue::*;\n+\n+    match *lval {\n+        Local { .. } => false,\n+        Static(_) => true,\n+        Projection(ref proj) => {\n+            // If the base is shared, things stay shared\n+            if is_lvalue_shared(&proj.base, local_decls, tcx) {\n+                return true;\n+            }\n+            // A Deref projection may make things shared\n+            match proj.elem {\n+                ProjectionElem::Deref => {\n+                    // Computing the inside the recursion makes this quadratic.  We don't expect deep paths though.\n+                    let ty = proj.base.ty(local_decls, tcx).to_ty(tcx);\n+                    !ty.is_mutable_pointer()\n+                }\n+                _ => false,\n+            }\n+        }\n+    }\n+}\n+\n impl MirPass for AddValidation {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -117,18 +144,20 @@ impl MirPass for AddValidation {\n                 };\n                 block_data.statements.insert(i+1, acquire_stmt);\n \n-                // The source is released until the region of the borrow ends.\n-                let src_ty = src_lval.ty(&local_decls, tcx).to_ty(tcx);\n-                let op = match re {\n-                    &RegionKind::ReScope(ce) => ValidationOp::Suspend(ce),\n-                    &RegionKind::ReErased => bug!(\"AddValidation pass must be run before erasing lifetimes\"),\n-                    _ => ValidationOp::Release,\n-                };\n-                let release_stmt = Statement {\n-                    source_info: block_data.statements[i].source_info,\n-                    kind: StatementKind::Validate(op, vec![(src_ty, src_lval)]),\n-                };\n-                block_data.statements.insert(i, release_stmt);\n+                // The source is released until the region of the borrow ends -- but not if it is shared.\n+                if !is_lvalue_shared(&src_lval, &local_decls, tcx) {\n+                    let src_ty = src_lval.ty(&local_decls, tcx).to_ty(tcx);\n+                    let op = match re {\n+                        &RegionKind::ReScope(ce) => ValidationOp::Suspend(ce),\n+                        &RegionKind::ReErased => bug!(\"AddValidation pass must be run before erasing lifetimes\"),\n+                        _ => ValidationOp::Release,\n+                    };\n+                    let release_stmt = Statement {\n+                        source_info: block_data.statements[i].source_info,\n+                        kind: StatementKind::Validate(op, vec![(src_ty, src_lval)]),\n+                    };\n+                    block_data.statements.insert(i, release_stmt);\n+                }\n             }\n         }\n     }"}]}