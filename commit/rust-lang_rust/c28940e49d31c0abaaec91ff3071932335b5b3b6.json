{"sha": "c28940e49d31c0abaaec91ff3071932335b5b3b6", "node_id": "C_kwDOAAsO6NoAKGMyODk0MGU0OWQzMWMwYWJhYWVjOTFmZjMwNzE5MzIzMzViNWIzYjY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-19T05:45:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-19T05:45:32Z"}, "message": "Rollup merge of #94006 - pierwill:upvar-field, r=nikomatsakis\n\nUse a `Field` in `ConstraintCategory::ClosureUpvar`\n\nAs part of #90317, we do not want `HirId` to implement `Ord`, `PartialOrd`. This line of code has made that difficult\n\nhttps://github.com/rust-lang/rust/blob/1b27144afc77031ba9c05d86c06c64485589775a/compiler/rustc_borrowck/src/region_infer/mod.rs#L2184\n\nsince it sorts a [`ConstraintCategory::ClosureUpvar(HirId)`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/enum.ConstraintCategory.html#variant.ClosureUpvar).\n\nThis PR makes that variant take a [`Field`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/struct.Field.html) instead.\n\nr? `@nikomatsakis`", "tree": {"sha": "e7115cc028ce8027b28a2a286e0d9bd3b2ef28c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7115cc028ce8027b28a2a286e0d9bd3b2ef28c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c28940e49d31c0abaaec91ff3071932335b5b3b6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiEIP9CRBK7hj4Ov3rIwAAr9oIAKgl9WP2rFofLFdh+WLBrYHm\n+J+Zhv1AOoZWwFCZ8eK7yM00mhnX9/lWDV6mCGptJAGg/ABFThHEd3yyJzA38lD0\nFf4GIJOqDTu5MqO5cj8skpFyw3HetVDzE476a3UbUlMg6cbJABoKaFDjInsmMm/s\n0bkEgVlKlhZJ4ELJJt+yZslhzs6RvyXaNeJDbcrTHP+IJ92PIuRh64dDPwqPv3qn\nyMaZGBbtaaJcNGHjpH+nP26tgOZsNMhZM/6O2OihnCFw5cqgNk8sa+oDg2FBHOrA\nN7Cnp8QRpNkz50k0h1RyaYGQKDzZbX1/20ivefWv/wOrhWGSQYuJuNFtJsOOEK8=\n=xZUX\n-----END PGP SIGNATURE-----\n", "payload": "tree e7115cc028ce8027b28a2a286e0d9bd3b2ef28c7\nparent 78e4456e1f08a7ebf2b40017fd3de835ceb2b669\nparent f41722a2ad1b941c73c77133ba2c87f83d10620d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645249532 +0100\ncommitter GitHub <noreply@github.com> 1645249532 +0100\n\nRollup merge of #94006 - pierwill:upvar-field, r=nikomatsakis\n\nUse a `Field` in `ConstraintCategory::ClosureUpvar`\n\nAs part of #90317, we do not want `HirId` to implement `Ord`, `PartialOrd`. This line of code has made that difficult\n\nhttps://github.com/rust-lang/rust/blob/1b27144afc77031ba9c05d86c06c64485589775a/compiler/rustc_borrowck/src/region_infer/mod.rs#L2184\n\nsince it sorts a [`ConstraintCategory::ClosureUpvar(HirId)`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/enum.ConstraintCategory.html#variant.ClosureUpvar).\n\nThis PR makes that variant take a [`Field`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/struct.Field.html) instead.\n\nr? `@nikomatsakis`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c28940e49d31c0abaaec91ff3071932335b5b3b6", "html_url": "https://github.com/rust-lang/rust/commit/c28940e49d31c0abaaec91ff3071932335b5b3b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c28940e49d31c0abaaec91ff3071932335b5b3b6/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78e4456e1f08a7ebf2b40017fd3de835ceb2b669", "url": "https://api.github.com/repos/rust-lang/rust/commits/78e4456e1f08a7ebf2b40017fd3de835ceb2b669", "html_url": "https://github.com/rust-lang/rust/commit/78e4456e1f08a7ebf2b40017fd3de835ceb2b669"}, {"sha": "f41722a2ad1b941c73c77133ba2c87f83d10620d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f41722a2ad1b941c73c77133ba2c87f83d10620d", "html_url": "https://github.com/rust-lang/rust/commit/f41722a2ad1b941c73c77133ba2c87f83d10620d"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "e6a323d676e14c0c349b8cbec1d0afcb0e8b296d", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c28940e49d31c0abaaec91ff3071932335b5b3b6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28940e49d31c0abaaec91ff3071932335b5b3b6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=c28940e49d31c0abaaec91ff3071932335b5b3b6", "patch": "@@ -5,6 +5,7 @@ use rustc_infer::infer::{\n     error_reporting::nice_region_error::NiceRegionError,\n     error_reporting::unexpected_hidden_region_diagnostic, NllRegionVariableOrigin,\n };\n+use rustc_middle::hir::place::PlaceBase;\n use rustc_middle::mir::{ConstraintCategory, ReturnConstraint};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{self, RegionVid, Ty};\n@@ -421,17 +422,26 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n         diag.span_label(*span, message);\n \n-        // FIXME(project-rfc-2229#48): This should store a captured_place not a hir id\n-        if let ReturnConstraint::ClosureUpvar(upvar) = kind {\n+        if let ReturnConstraint::ClosureUpvar(upvar_field) = kind {\n             let def_id = match self.regioncx.universal_regions().defining_ty {\n                 DefiningTy::Closure(def_id, _) => def_id,\n                 ty => bug!(\"unexpected DefiningTy {:?}\", ty),\n             };\n \n-            let upvar_def_span = self.infcx.tcx.hir().span(upvar);\n-            let upvar_span = self.infcx.tcx.upvars_mentioned(def_id).unwrap()[&upvar].span;\n-            diag.span_label(upvar_def_span, \"variable defined here\");\n-            diag.span_label(upvar_span, \"variable captured here\");\n+            let captured_place = &self.upvars[upvar_field.index()].place;\n+            let defined_hir = match captured_place.place.base {\n+                PlaceBase::Local(hirid) => Some(hirid),\n+                PlaceBase::Upvar(upvar) => Some(upvar.var_path.hir_id),\n+                _ => None,\n+            };\n+\n+            if defined_hir.is_some() {\n+                let upvars_map = self.infcx.tcx.upvars_mentioned(def_id).unwrap();\n+                let upvar_def_span = self.infcx.tcx.hir().span(defined_hir.unwrap());\n+                let upvar_span = upvars_map.get(&defined_hir.unwrap()).unwrap().span;\n+                diag.span_label(upvar_def_span, \"variable defined here\");\n+                diag.span_label(upvar_span, \"variable captured here\");\n+            }\n         }\n \n         if let Some(fr_span) = self.give_region_a_name(*outlived_fr).unwrap().span() {"}, {"sha": "a58240900969e5ee8b04291bbbb9173d7a9a849b", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c28940e49d31c0abaaec91ff3071932335b5b3b6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28940e49d31c0abaaec91ff3071932335b5b3b6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=c28940e49d31c0abaaec91ff3071932335b5b3b6", "patch": "@@ -2530,9 +2530,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             body,\n         );\n         let category = if let Some(field) = field {\n-            let var_hir_id = self.borrowck_context.upvars[field.index()].place.get_root_variable();\n-            // FIXME(project-rfc-2229#8): Use Place for better diagnostics\n-            ConstraintCategory::ClosureUpvar(var_hir_id)\n+            ConstraintCategory::ClosureUpvar(field)\n         } else {\n             ConstraintCategory::Boring\n         };"}, {"sha": "fbd5a2d08a5dcd8bee27eedfcf231928863af097", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c28940e49d31c0abaaec91ff3071932335b5b3b6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28940e49d31c0abaaec91ff3071932335b5b3b6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=c28940e49d31c0abaaec91ff3071932335b5b3b6", "patch": "@@ -341,7 +341,7 @@ pub enum ConstraintCategory {\n     /// like `Foo { field: my_val }`)\n     Usage,\n     OpaqueType,\n-    ClosureUpvar(hir::HirId),\n+    ClosureUpvar(Field),\n \n     /// A constraint from a user-written predicate\n     /// with the provided span, written on the item\n@@ -363,7 +363,7 @@ pub enum ConstraintCategory {\n #[derive(TyEncodable, TyDecodable, HashStable)]\n pub enum ReturnConstraint {\n     Normal,\n-    ClosureUpvar(hir::HirId),\n+    ClosureUpvar(Field),\n }\n \n /// The subject of a `ClosureOutlivesRequirement` -- that is, the thing"}]}