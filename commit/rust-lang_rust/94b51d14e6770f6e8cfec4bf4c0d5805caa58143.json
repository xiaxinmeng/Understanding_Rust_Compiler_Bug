{"sha": "94b51d14e6770f6e8cfec4bf4c0d5805caa58143", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YjUxZDE0ZTY3NzBmNmU4Y2ZlYzRiZjRjMGQ1ODA1Y2FhNTgxNDM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-27T16:32:41Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-27T16:32:41Z"}, "message": "Make all compiler-builtins symbols hidden\n\nThis matches cg_llvm\n\nFixes #1152", "tree": {"sha": "0825a701f7f5fc78b163e55603bdec7c7728071e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0825a701f7f5fc78b163e55603bdec7c7728071e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94b51d14e6770f6e8cfec4bf4c0d5805caa58143", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94b51d14e6770f6e8cfec4bf4c0d5805caa58143", "html_url": "https://github.com/rust-lang/rust/commit/94b51d14e6770f6e8cfec4bf4c0d5805caa58143", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94b51d14e6770f6e8cfec4bf4c0d5805caa58143/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3e8f6dc0834134de85157c801d414e764ed6fef", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3e8f6dc0834134de85157c801d414e764ed6fef", "html_url": "https://github.com/rust-lang/rust/commit/f3e8f6dc0834134de85157c801d414e764ed6fef"}], "stats": {"total": 76, "additions": 59, "deletions": 17}, "files": [{"sha": "b34a29c25b92e7a56b1259bd23eca71b5ff33485", "filename": "src/base.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94b51d14e6770f6e8cfec4bf4c0d5805caa58143/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b51d14e6770f6e8cfec4bf4c0d5805caa58143/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=94b51d14e6770f6e8cfec4bf4c0d5805caa58143", "patch": "@@ -8,11 +8,7 @@ use rustc_target::abi::call::FnAbi;\n \n use crate::prelude::*;\n \n-pub(crate) fn codegen_fn<'tcx>(\n-    cx: &mut crate::CodegenCx<'_, 'tcx>,\n-    instance: Instance<'tcx>,\n-    linkage: Linkage,\n-) {\n+pub(crate) fn codegen_fn<'tcx>(cx: &mut crate::CodegenCx<'_, 'tcx>, instance: Instance<'tcx>) {\n     let tcx = cx.tcx;\n \n     let _inst_guard =\n@@ -24,7 +20,7 @@ pub(crate) fn codegen_fn<'tcx>(\n     // Declare function\n     let name = tcx.symbol_name(instance).name.to_string();\n     let sig = get_function_sig(tcx, cx.module.isa().triple(), instance);\n-    let func_id = cx.module.declare_function(&name, linkage, &sig).unwrap();\n+    let func_id = cx.module.declare_function(&name, Linkage::Local, &sig).unwrap();\n \n     cx.cached_context.clear();\n "}, {"sha": "177f850afb398ef6c90e8d1e161920ec56d846e0", "filename": "src/compiler_builtins.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/94b51d14e6770f6e8cfec4bf4c0d5805caa58143/src%2Fcompiler_builtins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b51d14e6770f6e8cfec4bf4c0d5805caa58143/src%2Fcompiler_builtins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiler_builtins.rs?ref=94b51d14e6770f6e8cfec4bf4c0d5805caa58143", "patch": "@@ -0,0 +1,41 @@\n+macro builtin_functions($register:ident; $(fn $name:ident($($arg_name:ident: $arg_ty:ty),*) -> $ret_ty:ty;)*) {\n+    #[cfg(feature = \"jit\")]\n+    #[allow(improper_ctypes)]\n+    extern \"C\" {\n+        $(fn $name($($arg_name: $arg_ty),*) -> $ret_ty;)*\n+    }\n+\n+    #[cfg(feature = \"jit\")]\n+    pub(crate) fn $register(builder: &mut cranelift_jit::JITBuilder) {\n+        for &(name, val) in &[$((stringify!($name), $name as *const u8)),*] {\n+            builder.symbol(name, val);\n+        }\n+    }\n+}\n+\n+builtin_functions! {\n+    register_functions_for_jit;\n+\n+    // integers\n+    fn __multi3(a: i128, b: i128) -> i128;\n+    fn __udivti3(n: u128, d: u128) -> u128;\n+    fn __divti3(n: i128, d: i128) -> i128;\n+    fn __umodti3(n: u128, d: u128) -> u128;\n+    fn __modti3(n: i128, d: i128) -> i128;\n+    fn __rust_u128_addo(a: u128, b: u128) -> (u128, bool);\n+    fn __rust_i128_addo(a: i128, b: i128) -> (i128, bool);\n+    fn __rust_u128_subo(a: u128, b: u128) -> (u128, bool);\n+    fn __rust_i128_subo(a: i128, b: i128) -> (i128, bool);\n+    fn __rust_u128_mulo(a: u128, b: u128) -> (u128, bool);\n+    fn __rust_i128_mulo(a: i128, b: i128) -> (i128, bool);\n+\n+    // floats\n+    fn __floattisf(i: i128) -> f32;\n+    fn __floattidf(i: i128) -> f64;\n+    fn __floatuntisf(i: u128) -> f32;\n+    fn __floatuntidf(i: u128) -> f64;\n+    fn __fixsfti(f: f32) -> i128;\n+    fn __fixdfti(f: f64) -> i128;\n+    fn __fixunssfti(f: f32) -> u128;\n+    fn __fixunsdfti(f: f64) -> u128;\n+}"}, {"sha": "ed3bdedddced505b5d47c1b2c678bdda14bbe7d0", "filename": "src/driver/aot.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94b51d14e6770f6e8cfec4bf4c0d5805caa58143/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b51d14e6770f6e8cfec4bf4c0d5805caa58143/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=94b51d14e6770f6e8cfec4bf4c0d5805caa58143", "patch": "@@ -119,11 +119,10 @@ fn module_codegen(\n         tcx.sess.opts.debuginfo != DebugInfo::None,\n     );\n     super::predefine_mono_items(&mut cx, &mono_items);\n-    for (mono_item, (linkage, visibility)) in mono_items {\n-        let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n+    for (mono_item, _) in mono_items {\n         match mono_item {\n             MonoItem::Fn(inst) => {\n-                cx.tcx.sess.time(\"codegen fn\", || crate::base::codegen_fn(&mut cx, inst, linkage));\n+                cx.tcx.sess.time(\"codegen fn\", || crate::base::codegen_fn(&mut cx, inst));\n             }\n             MonoItem::Static(def_id) => {\n                 crate::constant::codegen_static(&mut cx.constants_cx, def_id)"}, {"sha": "dbe1ff083f0db24d12f9846c5cdf7147a4866bd1", "filename": "src/driver/jit.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/94b51d14e6770f6e8cfec4bf4c0d5805caa58143/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b51d14e6770f6e8cfec4bf4c0d5805caa58143/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=94b51d14e6770f6e8cfec4bf4c0d5805caa58143", "patch": "@@ -30,6 +30,7 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n     let mut jit_builder =\n         JITBuilder::with_isa(crate::build_isa(tcx.sess), cranelift_module::default_libcall_names());\n     jit_builder.hotswap(matches!(backend_config.codegen_mode, CodegenMode::JitLazy));\n+    crate::compiler_builtins::register_functions_for_jit(&mut jit_builder);\n     jit_builder.symbols(imported_symbols);\n     let mut jit_module = JITModule::new(jit_builder);\n     assert_eq!(pointer_ty(tcx), jit_module.target_config().pointer_type());\n@@ -47,15 +48,12 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n \n     super::time(tcx, \"codegen mono items\", || {\n         super::predefine_mono_items(&mut cx, &mono_items);\n-        for (mono_item, (linkage, visibility)) in mono_items {\n-            let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n+        for (mono_item, _) in mono_items {\n             match mono_item {\n                 MonoItem::Fn(inst) => match backend_config.codegen_mode {\n                     CodegenMode::Aot => unreachable!(),\n                     CodegenMode::Jit => {\n-                        cx.tcx\n-                            .sess\n-                            .time(\"codegen fn\", || crate::base::codegen_fn(&mut cx, inst, linkage));\n+                        cx.tcx.sess.time(\"codegen fn\", || crate::base::codegen_fn(&mut cx, inst));\n                     }\n                     CodegenMode::JitLazy => codegen_shim(&mut cx, inst),\n                 },\n@@ -175,8 +173,7 @@ extern \"C\" fn __clif_jit_fn(instance_ptr: *const Instance<'static>) -> *const u8\n             jit_module.prepare_for_function_redefine(func_id).unwrap();\n \n             let mut cx = crate::CodegenCx::new(tcx, backend_config, jit_module, false);\n-            tcx.sess\n-                .time(\"codegen fn\", || crate::base::codegen_fn(&mut cx, instance, Linkage::Export));\n+            tcx.sess.time(\"codegen fn\", || crate::base::codegen_fn(&mut cx, instance));\n \n             let (global_asm, _debug_context, unwind_context) = cx.finalize();\n             assert!(global_asm.is_empty());"}, {"sha": "d49182a07b79e5d6074d7e1d6e016c3498a9544d", "filename": "src/driver/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94b51d14e6770f6e8cfec4bf4c0d5805caa58143/src%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b51d14e6770f6e8cfec4bf4c0d5805caa58143/src%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fmod.rs?ref=94b51d14e6770f6e8cfec4bf4c0d5805caa58143", "patch": "@@ -44,13 +44,19 @@ fn predefine_mono_items<'tcx>(\n     mono_items: &[(MonoItem<'tcx>, (RLinkage, Visibility))],\n ) {\n     cx.tcx.sess.time(\"predefine functions\", || {\n+        let is_compiler_builtins = cx.tcx.is_compiler_builtins(LOCAL_CRATE);\n         for &(mono_item, (linkage, visibility)) in mono_items {\n             match mono_item {\n                 MonoItem::Fn(instance) => {\n                     let name = cx.tcx.symbol_name(instance).name.to_string();\n                     let _inst_guard = crate::PrintOnPanic(|| format!(\"{:?} {}\", instance, name));\n                     let sig = get_function_sig(cx.tcx, cx.module.isa().triple(), instance);\n-                    let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n+                    let linkage = crate::linkage::get_clif_linkage(\n+                        mono_item,\n+                        linkage,\n+                        visibility,\n+                        is_compiler_builtins,\n+                    );\n                     cx.module.declare_function(&name, linkage, &sig).unwrap();\n                 }\n                 MonoItem::Static(_) | MonoItem::GlobalAsm(_) => {}"}, {"sha": "720d2a1253445e07b2fac3f48b31d89af64a1b6c", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94b51d14e6770f6e8cfec4bf4c0d5805caa58143/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b51d14e6770f6e8cfec4bf4c0d5805caa58143/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=94b51d14e6770f6e8cfec4bf4c0d5805caa58143", "patch": "@@ -48,6 +48,7 @@ mod base;\n mod cast;\n mod codegen_i128;\n mod common;\n+mod compiler_builtins;\n mod constant;\n mod debuginfo;\n mod discriminant;"}, {"sha": "a564a59f7251061cd8a9363136db637220f6afbf", "filename": "src/linkage.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b51d14e6770f6e8cfec4bf4c0d5805caa58143/src%2Flinkage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b51d14e6770f6e8cfec4bf4c0d5805caa58143/src%2Flinkage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flinkage.rs?ref=94b51d14e6770f6e8cfec4bf4c0d5805caa58143", "patch": "@@ -6,8 +6,10 @@ pub(crate) fn get_clif_linkage(\n     mono_item: MonoItem<'_>,\n     linkage: RLinkage,\n     visibility: Visibility,\n+    is_compiler_builtins: bool,\n ) -> Linkage {\n     match (linkage, visibility) {\n+        (RLinkage::External, Visibility::Default) if is_compiler_builtins => Linkage::Hidden,\n         (RLinkage::External, Visibility::Default) => Linkage::Export,\n         (RLinkage::Internal, Visibility::Default) => Linkage::Local,\n         (RLinkage::External, Visibility::Hidden) => Linkage::Hidden,"}]}