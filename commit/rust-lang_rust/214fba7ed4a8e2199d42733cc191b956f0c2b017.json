{"sha": "214fba7ed4a8e2199d42733cc191b956f0c2b017", "node_id": "C_kwDOAAsO6NoAKDIxNGZiYTdlZDRhOGUyMTk5ZDQyNzMzY2MxOTFiOTU2ZjBjMmIwMTc", "commit": {"author": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2022-04-12T13:27:28Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2022-04-12T13:27:28Z"}, "message": "Prevent infinite (exponential) recursion in only_used_in_recursion\n\nThis simplifies the visitor code a bit and prevents checking expressions\nmultiple times. I still think this lint should be removed for now,\nbecause its code isn't really tested.", "tree": {"sha": "552a89b560b28f81f48837df93039d29370bebab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/552a89b560b28f81f48837df93039d29370bebab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/214fba7ed4a8e2199d42733cc191b956f0c2b017", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmJVfsIACgkQHKDfKvWd\naKXjqhAAmPYw8wChKpFXtNKt7crt1oUH0TPftUvzL8M/PUdjkNvoLCUj5Qg3SgKX\nXDE36kfuFMesgX2FVWaBw9Ye+WCACCzoeQwp23KN6eLFT+X3KuBTg2L0fhPDie9s\nOLJT1Ne40DvPt5bsW0hfVLksFQfSFbHT4UHfhqhR3wpheuOG0uzHWg9Kf5Yft22z\nfZMet+pWAfQ/6SZAGNjoorJEjoBaMZ435XN/vNRJ3BTC5VFIh5IZBpk96eLeH1B/\nrHVL3fSt54gdcJRbW/Ij5p3i8oTfPSnVKopIYm78pyhY3cRc+Iwf1R7BfJLaC+ju\nFNNEuSxYLjpZjT3xxp8x+w6vSQck8w+iDrGAVGuqnNZzbe8L4mu3+keVW2X0KypI\nQ2ivtWGCzBZfIlGyr13fQCx/Ip49dO0FvED4aEXhO8xFH4arHPAVcJEvWeys01y/\n9m9F3V/zUzoh5kAZpMx/BzQKmavfGQ/ubySv/lXZCT2nMdptZlYj85mw+ouu0PXN\nr0cOibbVZ5BUlN1agopwMuw6FtFap9cpi6rSMFLsYp2RkkZ2P8/HNKwSEDYpDcu3\n71ljHtku8IN8GYw8EbyxsofXEuh9FsznC+Zvz0xdDyl//xoBXSaiCbxw3jADJOBH\nhm0QfZDuNr/LSyFtyJC592n7P3sMyrG6AKCSL0pR4C0UjZvFmXU=\n=YiUW\n-----END PGP SIGNATURE-----", "payload": "tree 552a89b560b28f81f48837df93039d29370bebab\nparent abc59bb9144a97ec23d187dcb2cb28dd88271297\nauthor flip1995 <philipp.krones@embecosm.com> 1649770048 +0200\ncommitter flip1995 <philipp.krones@embecosm.com> 1649770048 +0200\n\nPrevent infinite (exponential) recursion in only_used_in_recursion\n\nThis simplifies the visitor code a bit and prevents checking expressions\nmultiple times. I still think this lint should be removed for now,\nbecause its code isn't really tested.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/214fba7ed4a8e2199d42733cc191b956f0c2b017", "html_url": "https://github.com/rust-lang/rust/commit/214fba7ed4a8e2199d42733cc191b956f0c2b017", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/214fba7ed4a8e2199d42733cc191b956f0c2b017/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abc59bb9144a97ec23d187dcb2cb28dd88271297", "url": "https://api.github.com/repos/rust-lang/rust/commits/abc59bb9144a97ec23d187dcb2cb28dd88271297", "html_url": "https://github.com/rust-lang/rust/commit/abc59bb9144a97ec23d187dcb2cb28dd88271297"}], "stats": {"total": 47, "additions": 16, "deletions": 31}, "files": [{"sha": "f946fc11192817a7edbc1056b5c9af01454dbd02", "filename": "clippy_lints/src/only_used_in_recursion.rs", "status": "modified", "additions": 16, "deletions": 31, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/214fba7ed4a8e2199d42733cc191b956f0c2b017/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214fba7ed4a8e2199d42733cc191b956f0c2b017/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs?ref=214fba7ed4a8e2199d42733cc191b956f0c2b017", "patch": "@@ -8,7 +8,7 @@ use rustc_errors::Applicability;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n-use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n+use rustc_hir::intravisit::{walk_expr, walk_stmt, FnKind, Visitor};\n use rustc_hir::{\n     Arm, Block, Body, Expr, ExprKind, Guard, HirId, ImplicitSelfKind, Let, Local, Pat, PatKind, Path, PathSegment,\n     QPath, Stmt, StmtKind, TyKind, UnOp,\n@@ -145,7 +145,8 @@ impl<'tcx> LateLintPass<'tcx> for OnlyUsedInRecursion {\n                 is_method: matches!(kind, FnKind::Method(..)),\n                 has_self,\n                 ty_res,\n-                ty_ctx: cx.tcx,\n+                tcx: cx.tcx,\n+                visited_exprs: FxHashSet::default(),\n             };\n \n             visitor.visit_expr(&body.value);\n@@ -206,19 +207,13 @@ impl<'tcx> LateLintPass<'tcx> for OnlyUsedInRecursion {\n }\n \n pub fn is_primitive(ty: Ty<'_>) -> bool {\n-    match ty.kind() {\n-        ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Str => true,\n-        ty::Ref(_, t, _) => is_primitive(*t),\n-        _ => false,\n-    }\n+    let ty = ty.peel_refs();\n+    ty.is_primitive() || ty.is_str()\n }\n \n pub fn is_array(ty: Ty<'_>) -> bool {\n-    match ty.kind() {\n-        ty::Array(..) | ty::Slice(..) => true,\n-        ty::Ref(_, t, _) => is_array(*t),\n-        _ => false,\n-    }\n+    let ty = ty.peel_refs();\n+    ty.is_array() || ty.is_array_slice()\n }\n \n /// This builds the graph of side effect.\n@@ -250,40 +245,30 @@ pub struct SideEffectVisit<'tcx> {\n     is_method: bool,\n     has_self: bool,\n     ty_res: &'tcx TypeckResults<'tcx>,\n-    ty_ctx: TyCtxt<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n+    visited_exprs: FxHashSet<HirId>,\n }\n \n impl<'tcx> Visitor<'tcx> for SideEffectVisit<'tcx> {\n-    fn visit_block(&mut self, b: &'tcx Block<'tcx>) {\n-        b.stmts.iter().for_each(|stmt| {\n-            self.visit_stmt(stmt);\n-            self.ret_vars.clear();\n-        });\n-        walk_list!(self, visit_expr, b.expr);\n-    }\n-\n     fn visit_stmt(&mut self, s: &'tcx Stmt<'tcx>) {\n         match s.kind {\n             StmtKind::Local(Local {\n                 pat, init: Some(init), ..\n             }) => {\n                 self.visit_pat_expr(pat, init, false);\n-                self.ret_vars.clear();\n             },\n-            StmtKind::Item(i) => {\n-                let item = self.ty_ctx.hir().item(i);\n-                self.visit_item(item);\n-                self.ret_vars.clear();\n-            },\n-            StmtKind::Expr(e) | StmtKind::Semi(e) => {\n-                self.visit_expr(e);\n-                self.ret_vars.clear();\n+            StmtKind::Item(_) | StmtKind::Expr(_) | StmtKind::Semi(_) => {\n+                walk_stmt(self, s);\n             },\n             StmtKind::Local(_) => {},\n         }\n+        self.ret_vars.clear();\n     }\n \n     fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {\n+        if !self.visited_exprs.insert(ex.hir_id) {\n+            return;\n+        }\n         match ex.kind {\n             ExprKind::Array(exprs) | ExprKind::Tup(exprs) => {\n                 self.ret_vars = exprs\n@@ -307,7 +292,7 @@ impl<'tcx> Visitor<'tcx> for SideEffectVisit<'tcx> {\n             ExprKind::Match(expr, arms, _) => self.visit_match(expr, arms),\n             // since analysing the closure is not easy, just set all variables in it to side-effect\n             ExprKind::Closure(_, _, body_id, _, _) => {\n-                let body = self.ty_ctx.hir().body(body_id);\n+                let body = self.tcx.hir().body(body_id);\n                 self.visit_body(body);\n                 let vars = std::mem::take(&mut self.ret_vars);\n                 self.add_side_effect(vars);"}]}