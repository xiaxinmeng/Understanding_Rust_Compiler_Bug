{"sha": "fbe36ad68a226f389bf64f67ea60449b8d41efbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZTM2YWQ2OGEyMjZmMzg5YmY2NGY2N2VhNjA0NDliOGQ0MWVmYmY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-02-03T20:36:36Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-02-03T20:36:36Z"}, "message": "Revert \"Use CachingSourceMapView::byte_pos_to_line_and_col instead of SourceMap::lookup_char_pos\"\n\nThis reverts commit eb4fc45310c70513d73d893616cd6735465680ca.\n\nIt caused a panic while compiling simple-raytracer", "tree": {"sha": "f60c0a09ea82e26cd1ec7d85d541774654f37cae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f60c0a09ea82e26cd1ec7d85d541774654f37cae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbe36ad68a226f389bf64f67ea60449b8d41efbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe36ad68a226f389bf64f67ea60449b8d41efbf", "html_url": "https://github.com/rust-lang/rust/commit/fbe36ad68a226f389bf64f67ea60449b8d41efbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbe36ad68a226f389bf64f67ea60449b8d41efbf/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb4fc45310c70513d73d893616cd6735465680ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb4fc45310c70513d73d893616cd6735465680ca", "html_url": "https://github.com/rust-lang/rust/commit/eb4fc45310c70513d73d893616cd6735465680ca"}], "stats": {"total": 29, "additions": 11, "deletions": 18}, "files": [{"sha": "3152e4812f75839045039478a0afb36f487581be", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fbe36ad68a226f389bf64f67ea60449b8d41efbf/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe36ad68a226f389bf64f67ea60449b8d41efbf/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=fbe36ad68a226f389bf64f67ea60449b8d41efbf", "patch": "@@ -3,7 +3,7 @@ use std::path::{Component, Path};\n \n use crate::prelude::*;\n \n-use rustc_span::{CachingSourceMapView, FileName};\n+use rustc_span::FileName;\n \n use cranelift_codegen::binemit::CodeOffset;\n \n@@ -74,12 +74,12 @@ fn line_program_add_file(\n \n impl<'tcx> DebugContext<'tcx> {\n     pub(super) fn emit_location(&mut self, entry_id: UnitEntryId, span: Span) {\n-        let (file, line, col) = self.source_map.byte_pos_to_line_and_col(span.lo()).unwrap();\n+        let loc = self.tcx.sess.source_map().lookup_char_pos(span.lo());\n \n         let file_id = line_program_add_file(\n             &mut self.dwarf.unit.line_program,\n             &mut self.dwarf.line_strings,\n-            &file.name,\n+            &loc.file.name,\n         );\n \n         let entry = self.dwarf.unit.get_mut(entry_id);\n@@ -90,12 +90,12 @@ impl<'tcx> DebugContext<'tcx> {\n         );\n         entry.set(\n             gimli::DW_AT_decl_line,\n-            AttributeValue::Udata(line as u64),\n+            AttributeValue::Udata(loc.line as u64),\n         );\n         // FIXME: probably omit this\n         entry.set(\n             gimli::DW_AT_decl_column,\n-            AttributeValue::Udata(col.to_usize() as u64),\n+            AttributeValue::Udata(loc.col.to_usize() as u64),\n         );\n     }\n }\n@@ -108,7 +108,6 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n         source_info_set: &indexmap::IndexSet<SourceInfo>,\n     ) -> CodeOffset {\n         let tcx = self.debug_context.tcx;\n-        let mut source_map = CachingSourceMapView::new(tcx.sess.source_map());\n \n         let line_program = &mut self.debug_context.dwarf.unit.line_program;\n \n@@ -125,25 +124,25 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n         let line_strings = &mut self.debug_context.dwarf.line_strings;\n         let mut last_file = None;\n         let mut create_row_for_span = |line_program: &mut LineProgram, span: Span| {\n-            let (file, line, col) = source_map.byte_pos_to_line_and_col(span.lo()).unwrap();\n+            let loc = tcx.sess.source_map().lookup_char_pos(span.lo());\n \n             // line_program_add_file is very slow.\n             // Optimize for the common case of the current file not being changed.\n             let current_file_changed = if let Some(last_file) = &mut last_file {\n                 // If the allocations are not equal, then the files may still be equal, but that\n                 // is not a problem, as this is just an optimization.\n-                !Lrc::ptr_eq(last_file, &file)\n+                !Lrc::ptr_eq(last_file, &loc.file)\n             } else {\n                 true\n             };\n             if current_file_changed {\n-                let file_id = line_program_add_file(line_program, line_strings, &file.name);\n+                let file_id = line_program_add_file(line_program, line_strings, &loc.file.name);\n                 line_program.row().file = file_id;\n-                last_file = Some(file.clone());\n+                last_file = Some(loc.file.clone());\n             }\n \n-            line_program.row().line = line as u64;\n-            line_program.row().column = col.to_u32() as u64 + 1;\n+            line_program.row().line = loc.line as u64;\n+            line_program.row().column = loc.col.to_u32() as u64 + 1;\n             line_program.generate_row();\n         };\n "}, {"sha": "d4be26885a042a195666846d906501e874547290", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fbe36ad68a226f389bf64f67ea60449b8d41efbf/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe36ad68a226f389bf64f67ea60449b8d41efbf/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=fbe36ad68a226f389bf64f67ea60449b8d41efbf", "patch": "@@ -3,8 +3,6 @@ mod line_info;\n \n use crate::prelude::*;\n \n-use rustc_span::CachingSourceMapView;\n-\n use cranelift_codegen::ir::{StackSlots, ValueLabel, ValueLoc};\n use cranelift_codegen::isa::RegUnit;\n use cranelift_codegen::ValueLocRange;\n@@ -36,8 +34,6 @@ pub struct DebugContext<'tcx> {\n     unit_range_list: RangeList,\n \n     types: HashMap<Ty<'tcx>, UnitEntryId>,\n-\n-    source_map: CachingSourceMapView<'tcx>,\n }\n \n impl<'tcx> DebugContext<'tcx> {\n@@ -102,8 +98,6 @@ impl<'tcx> DebugContext<'tcx> {\n             unit_range_list: RangeList(Vec::new()),\n \n             types: HashMap::new(),\n-\n-            source_map: CachingSourceMapView::new(tcx.sess.source_map()),\n         }\n     }\n "}]}