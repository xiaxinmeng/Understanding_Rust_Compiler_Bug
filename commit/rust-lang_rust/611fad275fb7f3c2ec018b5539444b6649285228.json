{"sha": "611fad275fb7f3c2ec018b5539444b6649285228", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMWZhZDI3NWZiN2YzYzJlYzAxOGI1NTM5NDQ0YjY2NDkyODUyMjg=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-07-02T19:08:33Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-07-03T11:23:51Z"}, "message": "code linting", "tree": {"sha": "91db561285e13bf85e070805a7c729b18992a49e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91db561285e13bf85e070805a7c729b18992a49e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/611fad275fb7f3c2ec018b5539444b6649285228", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/611fad275fb7f3c2ec018b5539444b6649285228", "html_url": "https://github.com/rust-lang/rust/commit/611fad275fb7f3c2ec018b5539444b6649285228", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/611fad275fb7f3c2ec018b5539444b6649285228/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "271abb7bc43f11c9b9e9c1353b162d9d267b1d21", "url": "https://api.github.com/repos/rust-lang/rust/commits/271abb7bc43f11c9b9e9c1353b162d9d267b1d21", "html_url": "https://github.com/rust-lang/rust/commit/271abb7bc43f11c9b9e9c1353b162d9d267b1d21"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "23975c72616c75a665a287239bc082fc4e12aca9", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/611fad275fb7f3c2ec018b5539444b6649285228/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/611fad275fb7f3c2ec018b5539444b6649285228/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=611fad275fb7f3c2ec018b5539444b6649285228", "patch": "@@ -5,7 +5,7 @@ export type UpdatesChannel = \"stable\" | \"nightly\";\n \n export const NIGHTLY_TAG = \"nightly\";\n \n-export type RunnableEnvCfg = undefined | Record<string, string> | { mask?: string, env: Record<string, string>; }[];\n+export type RunnableEnvCfg = undefined | Record<string, string> | { mask?: string; env: Record<string, string> }[];\n \n export class Config {\n     readonly extensionId = \"matklad.rust-analyzer\";"}, {"sha": "c0995461417bc7a22d8911acc7570c8d62064943", "filename": "editors/code/src/run.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/611fad275fb7f3c2ec018b5539444b6649285228/editors%2Fcode%2Fsrc%2Frun.ts", "raw_url": "https://github.com/rust-lang/rust/raw/611fad275fb7f3c2ec018b5539444b6649285228/editors%2Fcode%2Fsrc%2Frun.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frun.ts?ref=611fad275fb7f3c2ec018b5539444b6649285228", "patch": "@@ -111,7 +111,7 @@ export function prepareEnv(runnable: ra.Runnable, runnableEnvCfg: RunnableEnvCfg\n                 }\n             }\n         } else {\n-            Object.assign(env, runnableEnvCfg as Record<string, string>);\n+            Object.assign(env, runnableEnvCfg);\n         }\n     }\n "}, {"sha": "f2f53e91ad92f98fa2dcacc75935fea5a9cfa4a8", "filename": "editors/code/tests/unit/runnable_env.test.ts", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/611fad275fb7f3c2ec018b5539444b6649285228/editors%2Fcode%2Ftests%2Funit%2Frunnable_env.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/611fad275fb7f3c2ec018b5539444b6649285228/editors%2Fcode%2Ftests%2Funit%2Frunnable_env.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Ftests%2Funit%2Frunnable_env.test.ts?ref=611fad275fb7f3c2ec018b5539444b6649285228", "patch": "@@ -3,29 +3,29 @@ import { prepareEnv } from '../../src/run';\n import { RunnableEnvCfg } from '../../src/config';\n import * as ra from '../../src/lsp_ext';\n \n-function make_runnable(label: string): ra.Runnable {\n+function makeRunnable(label: string): ra.Runnable {\n     return {\n         label,\n         kind: \"cargo\",\n         args: {\n             cargoArgs: [],\n             executableArgs: []\n         }\n-    }\n+    };\n }\n \n-function fakePrepareEnv(runnable_name: string, config: RunnableEnvCfg) : Record<string, string> {\n-    const runnable = make_runnable(runnable_name);\n+function fakePrepareEnv(runnableName: string, config: RunnableEnvCfg): Record<string, string> {\n+    const runnable = makeRunnable(runnableName);\n     return prepareEnv(runnable, config);\n }\n \n suite('Runnable env', () => {\n     test('Global config works', () => {\n-        const bin_env = fakePrepareEnv(\"run project_name\", {\"GLOBAL\": \"g\"});\n-        assert.equal(bin_env[\"GLOBAL\"], \"g\");\n+        const binEnv = fakePrepareEnv(\"run project_name\", { \"GLOBAL\": \"g\" });\n+        assert.equal(binEnv[\"GLOBAL\"], \"g\");\n \n-        const test_env = fakePrepareEnv(\"test some::mod::test_name\", {\"GLOBAL\": \"g\"});\n-        assert.equal(test_env[\"GLOBAL\"], \"g\");\n+        const testEnv = fakePrepareEnv(\"test some::mod::test_name\", { \"GLOBAL\": \"g\" });\n+        assert.equal(testEnv[\"GLOBAL\"], \"g\");\n     });\n \n     test('null mask works', () => {\n@@ -34,11 +34,11 @@ suite('Runnable env', () => {\n                 env: { DATA: \"data\" }\n             }\n         ];\n-        const bin_env = fakePrepareEnv(\"run project_name\", config);\n-        assert.equal(bin_env[\"DATA\"], \"data\");\n+        const binEnv = fakePrepareEnv(\"run project_name\", config);\n+        assert.equal(binEnv[\"DATA\"], \"data\");\n \n-        const test_env = fakePrepareEnv(\"test some::mod::test_name\", config);\n-        assert.equal(test_env[\"DATA\"], \"data\");\n+        const testEnv = fakePrepareEnv(\"test some::mod::test_name\", config);\n+        assert.equal(testEnv[\"DATA\"], \"data\");\n     });\n \n     test('order works', () => {\n@@ -50,11 +50,11 @@ suite('Runnable env', () => {\n                 env: { DATA: \"newdata\" }\n             }\n         ];\n-        const bin_env = fakePrepareEnv(\"run project_name\", config);\n-        assert.equal(bin_env[\"DATA\"], \"newdata\");\n+        const binEnv = fakePrepareEnv(\"run project_name\", config);\n+        assert.equal(binEnv[\"DATA\"], \"newdata\");\n \n-        const test_env = fakePrepareEnv(\"test some::mod::test_name\", config);\n-        assert.equal(test_env[\"DATA\"], \"newdata\");\n+        const testEnv = fakePrepareEnv(\"test some::mod::test_name\", config);\n+        assert.equal(testEnv[\"DATA\"], \"newdata\");\n     });\n \n     test('mask works', () => {\n@@ -71,14 +71,14 @@ suite('Runnable env', () => {\n                 env: { DATA: \"special_test\" }\n             }\n         ];\n-        const bin_env = fakePrepareEnv(\"run project_name\", config);\n-        assert.equal(bin_env[\"DATA\"], \"rundata\");\n+        const binEnv = fakePrepareEnv(\"run project_name\", config);\n+        assert.equal(binEnv[\"DATA\"], \"rundata\");\n \n-        const test_env = fakePrepareEnv(\"test some::mod::test_name\", config);\n-        assert.equal(test_env[\"DATA\"], \"data\");\n+        const testEnv = fakePrepareEnv(\"test some::mod::test_name\", config);\n+        assert.equal(testEnv[\"DATA\"], \"data\");\n \n-        const special_test_env = fakePrepareEnv(\"test some::mod::special_test\", config);\n-        assert.equal(special_test_env[\"DATA\"], \"special_test\");\n+        const specialTestEnv = fakePrepareEnv(\"test some::mod::special_test\", config);\n+        assert.equal(specialTestEnv[\"DATA\"], \"special_test\");\n     });\n \n     test('exact test name works', () => {\n@@ -91,11 +91,11 @@ suite('Runnable env', () => {\n                 env: { DATA: \"test special\" }\n             }\n         ];\n-        const test_env = fakePrepareEnv(\"test some::mod::test_name\", config);\n-        assert.equal(test_env[\"DATA\"], \"test special\");\n+        const testEnv = fakePrepareEnv(\"test some::mod::test_name\", config);\n+        assert.equal(testEnv[\"DATA\"], \"test special\");\n \n-        const special_test_env = fakePrepareEnv(\"test some::mod::another_test\", config);\n-        assert.equal(special_test_env[\"DATA\"], \"data\");\n+        const specialTestEnv = fakePrepareEnv(\"test some::mod::another_test\", config);\n+        assert.equal(specialTestEnv[\"DATA\"], \"data\");\n     });\n \n     test('test mod name works', () => {\n@@ -108,11 +108,11 @@ suite('Runnable env', () => {\n                 env: { DATA: \"mod special\" }\n             }\n         ];\n-        const test_env = fakePrepareEnv(\"test some::mod::test_name\", config);\n-        assert.equal(test_env[\"DATA\"], \"mod special\");\n+        const testEnv = fakePrepareEnv(\"test some::mod::test_name\", config);\n+        assert.equal(testEnv[\"DATA\"], \"mod special\");\n \n-        const special_test_env = fakePrepareEnv(\"test some::mod::another_test\", config);\n-        assert.equal(special_test_env[\"DATA\"], \"mod special\");\n+        const specialTestEnv = fakePrepareEnv(\"test some::mod::another_test\", config);\n+        assert.equal(specialTestEnv[\"DATA\"], \"mod special\");\n     });\n \n });"}]}