{"sha": "5cfaf87627fcd9d22b74da7efd485223da225893", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZmFmODc2MjdmY2Q5ZDIyYjc0ZGE3ZWZkNDg1MjIzZGEyMjU4OTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-01-27T21:24:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-27T21:24:24Z"}, "message": "Merge #2872\n\n2872: Upgrade Chalk r=matklad a=flodiebold\n\nThis is just keeping track of the changes required to upgrade Chalk; currently we can't really merge it since it breaks opaque types.\r\n\r\nNow also makes use of the newly introduced `solve_limited` to implement fuel.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "51f72f5b75d78f7b42ff69fcd1d709901b41c04c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51f72f5b75d78f7b42ff69fcd1d709901b41c04c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cfaf87627fcd9d22b74da7efd485223da225893", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeL1UICRBK7hj4Ov3rIwAAdHIIAJ03VsoSmliP+AsU5EcQ1zLL\nIj3LwDWonPSXKu0qISMmoX95IoCrR3suZKfed5hMmY9EPvQLnpBtJNmiuGEdgorO\n7NaI/FqQLegOTL/EpvjzFQPSj6bDTusl7zUNaTnssBOKPOcqeai1m8czVttzoH9m\nLlOpeLDgVtyI/peDx7MizEzatxAuEJ+Gx/IYj2L4grr8TM52fy+TiNLuDMLcJGQ0\nDv11ppG7Cr5PGSMhklOZsZ4bMhRqzzWlqe16wR8hTUtg3TkK+lv0YBihw4fyQki+\nZOCAsWstuv9AibCaWxzsoc6VbeeIWc8IXnQKcueYDFtbzcGBmT6s8C5v9XlL9FI=\n=ks2k\n-----END PGP SIGNATURE-----\n", "payload": "tree 51f72f5b75d78f7b42ff69fcd1d709901b41c04c\nparent 1916a78c6a31219a8aaa73f2b443282441671539\nparent 339a11c33c834ac0148ebaad2484d58322025c30\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1580160264 +0000\ncommitter GitHub <noreply@github.com> 1580160264 +0000\n\nMerge #2872\n\n2872: Upgrade Chalk r=matklad a=flodiebold\n\nThis is just keeping track of the changes required to upgrade Chalk; currently we can't really merge it since it breaks opaque types.\r\n\r\nNow also makes use of the newly introduced `solve_limited` to implement fuel.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cfaf87627fcd9d22b74da7efd485223da225893", "html_url": "https://github.com/rust-lang/rust/commit/5cfaf87627fcd9d22b74da7efd485223da225893", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cfaf87627fcd9d22b74da7efd485223da225893/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1916a78c6a31219a8aaa73f2b443282441671539", "url": "https://api.github.com/repos/rust-lang/rust/commits/1916a78c6a31219a8aaa73f2b443282441671539", "html_url": "https://github.com/rust-lang/rust/commit/1916a78c6a31219a8aaa73f2b443282441671539"}, {"sha": "339a11c33c834ac0148ebaad2484d58322025c30", "url": "https://api.github.com/repos/rust-lang/rust/commits/339a11c33c834ac0148ebaad2484d58322025c30", "html_url": "https://github.com/rust-lang/rust/commit/339a11c33c834ac0148ebaad2484d58322025c30"}], "stats": {"total": 191, "additions": 101, "deletions": 90}, "files": [{"sha": "01e86ab0e60fa4049d00bfe341f1db489a687bdf", "filename": "Cargo.lock", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/5cfaf87627fcd9d22b74da7efd485223da225893/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5cfaf87627fcd9d22b74da7efd485223da225893/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5cfaf87627fcd9d22b74da7efd485223da225893", "patch": "@@ -131,7 +131,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n [[package]]\n name = \"chalk-derive\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5#ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75#af48f302a1f571b3ca418f7c5aa639a144a34f75\"\n dependencies = [\n  \"proc-macro2 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -141,52 +141,52 @@ dependencies = [\n [[package]]\n name = \"chalk-engine\"\n version = \"0.9.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5#ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75#af48f302a1f571b3ca418f7c5aa639a144a34f75\"\n dependencies = [\n- \"chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n+ \"chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"chalk-ir\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5#ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75#af48f302a1f571b3ca418f7c5aa639a144a34f75\"\n dependencies = [\n- \"chalk-derive 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n- \"chalk-engine 0.9.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n- \"chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n+ \"chalk-derive 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75)\",\n+ \"chalk-engine 0.9.0 (git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75)\",\n+ \"chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75)\",\n  \"lalrpop-intern 0.15.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"chalk-macros\"\n version = \"0.1.1\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5#ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75#af48f302a1f571b3ca418f7c5aa639a144a34f75\"\n dependencies = [\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"chalk-rust-ir\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5#ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75#af48f302a1f571b3ca418f7c5aa639a144a34f75\"\n dependencies = [\n- \"chalk-derive 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n- \"chalk-engine 0.9.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n- \"chalk-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n- \"chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n+ \"chalk-derive 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75)\",\n+ \"chalk-engine 0.9.0 (git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75)\",\n+ \"chalk-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75)\",\n+ \"chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75)\",\n ]\n \n [[package]]\n name = \"chalk-solve\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5#ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5\"\n+source = \"git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75#af48f302a1f571b3ca418f7c5aa639a144a34f75\"\n dependencies = [\n- \"chalk-derive 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n- \"chalk-engine 0.9.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n- \"chalk-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n- \"chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n- \"chalk-rust-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n+ \"chalk-derive 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75)\",\n+ \"chalk-engine 0.9.0 (git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75)\",\n+ \"chalk-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75)\",\n+ \"chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75)\",\n+ \"chalk-rust-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75)\",\n  \"ena 0.13.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"petgraph 0.4.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1004,9 +1004,9 @@ name = \"ra_hir_ty\"\n version = \"0.1.0\"\n dependencies = [\n  \"arrayvec 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"chalk-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n- \"chalk-rust-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n- \"chalk-solve 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\",\n+ \"chalk-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75)\",\n+ \"chalk-rust-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75)\",\n+ \"chalk-solve 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75)\",\n  \"ena 0.13.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"insta 0.13.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lalrpop-intern 0.15.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1775,12 +1775,12 @@ dependencies = [\n \"checksum cargo_metadata 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"46e3374c604fb39d1a2f35ed5e4a4e30e60d01fab49446e08f1b3e9a90aef202\"\n \"checksum cc 1.0.50 (registry+https://github.com/rust-lang/crates.io-index)\" = \"95e28fa049fda1c330bcf9d723be7663a899c4679724b34c81e9f5a326aab8cd\"\n \"checksum cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n-\"checksum chalk-derive 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\" = \"<none>\"\n-\"checksum chalk-engine 0.9.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\" = \"<none>\"\n-\"checksum chalk-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\" = \"<none>\"\n-\"checksum chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\" = \"<none>\"\n-\"checksum chalk-rust-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\" = \"<none>\"\n-\"checksum chalk-solve 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5)\" = \"<none>\"\n+\"checksum chalk-derive 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75)\" = \"<none>\"\n+\"checksum chalk-engine 0.9.0 (git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75)\" = \"<none>\"\n+\"checksum chalk-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75)\" = \"<none>\"\n+\"checksum chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75)\" = \"<none>\"\n+\"checksum chalk-rust-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75)\" = \"<none>\"\n+\"checksum chalk-solve 0.1.0 (git+https://github.com/rust-lang/chalk.git?rev=af48f302a1f571b3ca418f7c5aa639a144a34f75)\" = \"<none>\"\n \"checksum clicolors-control 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90082ee5dcdd64dc4e9e0d37fbf3ee325419e39c0092191e0393df65518f741e\"\n \"checksum cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\"\n \"checksum console 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"45e0f3986890b3acbc782009e2629dfe2baa430ac091519ce3be26164a2ae6c0\""}, {"sha": "f5484bf70a4c6c24c2618e3bd99b366af4ca0e9d", "filename": "crates/ra_hir_ty/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5cfaf87627fcd9d22b74da7efd485223da225893/crates%2Fra_hir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5cfaf87627fcd9d22b74da7efd485223da225893/crates%2Fra_hir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2FCargo.toml?ref=5cfaf87627fcd9d22b74da7efd485223da225893", "patch": "@@ -21,9 +21,9 @@ ra_prof = { path = \"../ra_prof\" }\n ra_syntax = { path = \"../ra_syntax\" }\n test_utils = { path = \"../test_utils\" }\n \n-chalk-solve =   { git = \"https://github.com/rust-lang/chalk.git\", rev = \"ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5\" }\n-chalk-rust-ir = { git = \"https://github.com/rust-lang/chalk.git\", rev = \"ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5\" }\n-chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"ff65b5ac9860f3c36bd892c865ab23d5ff0bbae5\" }\n+chalk-solve =   { git = \"https://github.com/rust-lang/chalk.git\", rev = \"af48f302a1f571b3ca418f7c5aa639a144a34f75\" }\n+chalk-rust-ir = { git = \"https://github.com/rust-lang/chalk.git\", rev = \"af48f302a1f571b3ca418f7c5aa639a144a34f75\" }\n+chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"af48f302a1f571b3ca418f7c5aa639a144a34f75\" }\n \n lalrpop-intern = \"0.15.1\"\n "}, {"sha": "bc20a49ccaa9016975a5fb983155a23e30583a0b", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cfaf87627fcd9d22b74da7efd485223da225893/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cfaf87627fcd9d22b74da7efd485223da225893/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=5cfaf87627fcd9d22b74da7efd485223da225893", "patch": "@@ -850,6 +850,7 @@ fn test<T: ApplyL>(t: T) {\n }\n \n #[test]\n+#[ignore]\n fn impl_trait() {\n     assert_snapshot!(\n         infer(r#\"\n@@ -1021,6 +1022,7 @@ fn test() {\n }\n \n #[test]\n+#[ignore]\n fn error_bound_chalk() {\n     let t = type_at(\n         r#\""}, {"sha": "88af61e87a17637799eca646752fa1ec2d9b5c90", "filename": "crates/ra_hir_ty/src/traits.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5cfaf87627fcd9d22b74da7efd485223da225893/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cfaf87627fcd9d22b74da7efd485223da225893/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs?ref=5cfaf87627fcd9d22b74da7efd485223da225893", "patch": "@@ -50,10 +50,19 @@ impl TraitSolver {\n             Err(_) => ra_db::Canceled::throw(),\n         };\n \n+        let fuel = std::cell::Cell::new(CHALK_SOLVER_FUEL);\n+\n         let solution = panic::catch_unwind({\n             let solver = panic::AssertUnwindSafe(&mut solver);\n             let context = panic::AssertUnwindSafe(&context);\n-            move || solver.0.solve(context.0, goal)\n+            move || {\n+                solver.0.solve_limited(context.0, goal, || {\n+                    context.0.db.check_canceled();\n+                    let remaining = fuel.get();\n+                    fuel.set(remaining - 1);\n+                    remaining > 0\n+                })\n+            }\n         });\n \n         let solution = match solution {\n@@ -78,7 +87,9 @@ impl TraitSolver {\n /// This controls the maximum size of types Chalk considers. If we set this too\n /// high, we can run into slow edge cases; if we set it too low, Chalk won't\n /// find some solutions.\n-const CHALK_SOLVER_MAX_SIZE: usize = 4;\n+const CHALK_SOLVER_MAX_SIZE: usize = 10;\n+/// This controls how much 'time' we give the Chalk solver before giving up.\n+const CHALK_SOLVER_FUEL: i32 = 100;\n \n #[derive(Debug, Copy, Clone)]\n struct ChalkContext<'a, DB> {\n@@ -97,7 +108,8 @@ pub(crate) fn trait_solver_query(\n }\n \n fn create_chalk_solver() -> chalk_solve::Solver<TypeFamily> {\n-    let solver_choice = chalk_solve::SolverChoice::SLG { max_size: CHALK_SOLVER_MAX_SIZE };\n+    let solver_choice =\n+        chalk_solve::SolverChoice::SLG { max_size: CHALK_SOLVER_MAX_SIZE, expected_answers: None };\n     solver_choice.into_solver()\n }\n \n@@ -232,7 +244,6 @@ fn solution_from_chalk(\n     let convert_subst = |subst: chalk_ir::Canonical<chalk_ir::Substitution<TypeFamily>>| {\n         let value = subst\n             .value\n-            .parameters\n             .into_iter()\n             .map(|p| {\n                 let ty = match p.ty() {"}, {"sha": "fe9cb556cf63132e578d8ee6ed604fda070d68e9", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 53, "deletions": 55, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/5cfaf87627fcd9d22b74da7efd485223da225893/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cfaf87627fcd9d22b74da7efd485223da225893/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=5cfaf87627fcd9d22b74da7efd485223da225893", "patch": "@@ -3,7 +3,7 @@ use std::{fmt, sync::Arc};\n \n use log::debug;\n \n-use chalk_ir::{cast::Cast, Parameter, PlaceholderIndex, TypeName, UniverseIndex};\n+use chalk_ir::{cast::Cast, GoalData, Parameter, PlaceholderIndex, TypeName, UniverseIndex};\n \n use hir_def::{AssocContainerId, AssocItemId, GenericDefId, HasModule, Lookup, TypeAliasId};\n use ra_db::{\n@@ -24,6 +24,8 @@ impl chalk_ir::family::TypeFamily for TypeFamily {\n     type InternedType = Box<chalk_ir::TyData<Self>>;\n     type InternedLifetime = chalk_ir::LifetimeData<Self>;\n     type InternedParameter = chalk_ir::ParameterData<Self>;\n+    type InternedGoal = Arc<GoalData<Self>>;\n+    type InternedSubstitution = Vec<Parameter<Self>>;\n     type DefId = InternId;\n \n     // FIXME: implement these\n@@ -48,8 +50,8 @@ impl chalk_ir::family::TypeFamily for TypeFamily {\n         None\n     }\n \n-    fn debug_projection(\n-        _projection: &chalk_ir::ProjectionTy<Self>,\n+    fn debug_alias(\n+        _projection: &chalk_ir::AliasTy<Self>,\n         _fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n         None\n@@ -78,6 +80,24 @@ impl chalk_ir::family::TypeFamily for TypeFamily {\n     fn parameter_data(parameter: &chalk_ir::ParameterData<Self>) -> &chalk_ir::ParameterData<Self> {\n         parameter\n     }\n+\n+    fn intern_goal(goal: GoalData<Self>) -> Arc<GoalData<Self>> {\n+        Arc::new(goal)\n+    }\n+\n+    fn goal_data(goal: &Arc<GoalData<Self>>) -> &GoalData<Self> {\n+        goal\n+    }\n+\n+    fn intern_substitution<E>(\n+        data: impl IntoIterator<Item = Result<Parameter<Self>, E>>,\n+    ) -> Result<Vec<Parameter<Self>>, E> {\n+        data.into_iter().collect()\n+    }\n+\n+    fn substitution_data(substitution: &Vec<Parameter<Self>>) -> &[Parameter<Self>] {\n+        substitution\n+    }\n }\n \n impl chalk_ir::family::HasTypeFamily for TypeFamily {\n@@ -114,13 +134,13 @@ impl ToChalk for Ty {\n         match self {\n             Ty::Apply(apply_ty) => {\n                 let name = apply_ty.ctor.to_chalk(db);\n-                let parameters = apply_ty.parameters.to_chalk(db);\n-                chalk_ir::ApplicationTy { name, parameters }.cast().intern()\n+                let substitution = apply_ty.parameters.to_chalk(db);\n+                chalk_ir::ApplicationTy { name, substitution }.cast().intern()\n             }\n             Ty::Projection(proj_ty) => {\n                 let associated_ty_id = proj_ty.associated_ty.to_chalk(db);\n-                let parameters = proj_ty.parameters.to_chalk(db);\n-                chalk_ir::ProjectionTy { associated_ty_id, parameters }.cast().intern()\n+                let substitution = proj_ty.parameters.to_chalk(db);\n+                chalk_ir::AliasTy { associated_ty_id, substitution }.cast().intern()\n             }\n             Ty::Param { idx, .. } => {\n                 PlaceholderIndex { ui: UniverseIndex::ROOT, idx: idx as usize }\n@@ -135,23 +155,13 @@ impl ToChalk for Ty {\n                     .cloned()\n                     .map(|p| p.to_chalk(db))\n                     .collect();\n-                let bounded_ty = chalk_ir::BoundedTy { bounds: make_binders(where_clauses, 1) };\n+                let bounded_ty = chalk_ir::DynTy { bounds: make_binders(where_clauses, 1) };\n                 chalk_ir::TyData::Dyn(bounded_ty).intern()\n             }\n-            Ty::Opaque(predicates) => {\n-                let where_clauses = predicates\n-                    .iter()\n-                    .filter(|p| !p.is_error())\n-                    .cloned()\n-                    .map(|p| p.to_chalk(db))\n-                    .collect();\n-                let bounded_ty = chalk_ir::BoundedTy { bounds: make_binders(where_clauses, 1) };\n-                chalk_ir::TyData::Opaque(bounded_ty).intern()\n-            }\n-            Ty::Unknown => {\n-                let parameters = Vec::new();\n+            Ty::Opaque(_) | Ty::Unknown => {\n+                let substitution = chalk_ir::Substitution::empty();\n                 let name = TypeName::Error;\n-                chalk_ir::ApplicationTy { name, parameters }.cast().intern()\n+                chalk_ir::ApplicationTy { name, substitution }.cast().intern()\n             }\n         }\n     }\n@@ -161,20 +171,20 @@ impl ToChalk for Ty {\n                 TypeName::Error => Ty::Unknown,\n                 _ => {\n                     let ctor = from_chalk(db, apply_ty.name);\n-                    let parameters = from_chalk(db, apply_ty.parameters);\n+                    let parameters = from_chalk(db, apply_ty.substitution);\n                     Ty::Apply(ApplicationTy { ctor, parameters })\n                 }\n             },\n             chalk_ir::TyData::Placeholder(idx) => {\n                 assert_eq!(idx.ui, UniverseIndex::ROOT);\n                 Ty::Param { idx: idx.idx as u32, name: crate::Name::missing() }\n             }\n-            chalk_ir::TyData::Projection(proj) => {\n+            chalk_ir::TyData::Alias(proj) => {\n                 let associated_ty = from_chalk(db, proj.associated_ty_id);\n-                let parameters = from_chalk(db, proj.parameters);\n+                let parameters = from_chalk(db, proj.substitution);\n                 Ty::Projection(ProjectionTy { associated_ty, parameters })\n             }\n-            chalk_ir::TyData::ForAll(_) => unimplemented!(),\n+            chalk_ir::TyData::Function(_) => unimplemented!(),\n             chalk_ir::TyData::BoundVar(idx) => Ty::Bound(idx as u32),\n             chalk_ir::TyData::InferenceVar(_iv) => Ty::Unknown,\n             chalk_ir::TyData::Dyn(where_clauses) => {\n@@ -183,27 +193,18 @@ impl ToChalk for Ty {\n                     where_clauses.bounds.value.into_iter().map(|c| from_chalk(db, c)).collect();\n                 Ty::Dyn(predicates)\n             }\n-            chalk_ir::TyData::Opaque(where_clauses) => {\n-                assert_eq!(where_clauses.bounds.binders.len(), 1);\n-                let predicates =\n-                    where_clauses.bounds.value.into_iter().map(|c| from_chalk(db, c)).collect();\n-                Ty::Opaque(predicates)\n-            }\n         }\n     }\n }\n \n impl ToChalk for Substs {\n-    type Chalk = Vec<chalk_ir::Parameter<TypeFamily>>;\n+    type Chalk = chalk_ir::Substitution<TypeFamily>;\n \n-    fn to_chalk(self, db: &impl HirDatabase) -> Vec<Parameter<TypeFamily>> {\n-        self.iter().map(|ty| ty.clone().to_chalk(db).cast()).collect()\n+    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::Substitution<TypeFamily> {\n+        chalk_ir::Substitution::from(self.iter().map(|ty| ty.clone().to_chalk(db)))\n     }\n \n-    fn from_chalk(\n-        db: &impl HirDatabase,\n-        parameters: Vec<chalk_ir::Parameter<TypeFamily>>,\n-    ) -> Substs {\n+    fn from_chalk(db: &impl HirDatabase, parameters: chalk_ir::Substitution<TypeFamily>) -> Substs {\n         let tys = parameters\n             .into_iter()\n             .map(|p| match p.ty() {\n@@ -220,13 +221,13 @@ impl ToChalk for TraitRef {\n \n     fn to_chalk(self: TraitRef, db: &impl HirDatabase) -> chalk_ir::TraitRef<TypeFamily> {\n         let trait_id = self.trait_.to_chalk(db);\n-        let parameters = self.substs.to_chalk(db);\n-        chalk_ir::TraitRef { trait_id, parameters }\n+        let substitution = self.substs.to_chalk(db);\n+        chalk_ir::TraitRef { trait_id, substitution }\n     }\n \n     fn from_chalk(db: &impl HirDatabase, trait_ref: chalk_ir::TraitRef<TypeFamily>) -> Self {\n         let trait_ = from_chalk(db, trait_ref.trait_id);\n-        let substs = from_chalk(db, trait_ref.parameters);\n+        let substs = from_chalk(db, trait_ref.substitution);\n         TraitRef { trait_, substs }\n     }\n }\n@@ -317,8 +318,8 @@ impl ToChalk for GenericPredicate {\n                 make_binders(chalk_ir::WhereClause::Implemented(trait_ref.to_chalk(db)), 0)\n             }\n             GenericPredicate::Projection(projection_pred) => make_binders(\n-                chalk_ir::WhereClause::ProjectionEq(chalk_ir::ProjectionEq {\n-                    projection: projection_pred.projection_ty.to_chalk(db),\n+                chalk_ir::WhereClause::AliasEq(chalk_ir::AliasEq {\n+                    alias: projection_pred.projection_ty.to_chalk(db),\n                     ty: projection_pred.ty.to_chalk(db),\n                 }),\n                 0,\n@@ -335,8 +336,8 @@ impl ToChalk for GenericPredicate {\n             chalk_ir::WhereClause::Implemented(tr) => {\n                 GenericPredicate::Implemented(from_chalk(db, tr))\n             }\n-            chalk_ir::WhereClause::ProjectionEq(projection_eq) => {\n-                let projection_ty = from_chalk(db, projection_eq.projection);\n+            chalk_ir::WhereClause::AliasEq(projection_eq) => {\n+                let projection_ty = from_chalk(db, projection_eq.alias);\n                 let ty = from_chalk(db, projection_eq.ty);\n                 GenericPredicate::Projection(super::ProjectionPredicate { projection_ty, ty })\n             }\n@@ -345,22 +346,22 @@ impl ToChalk for GenericPredicate {\n }\n \n impl ToChalk for ProjectionTy {\n-    type Chalk = chalk_ir::ProjectionTy<TypeFamily>;\n+    type Chalk = chalk_ir::AliasTy<TypeFamily>;\n \n-    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::ProjectionTy<TypeFamily> {\n-        chalk_ir::ProjectionTy {\n+    fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::AliasTy<TypeFamily> {\n+        chalk_ir::AliasTy {\n             associated_ty_id: self.associated_ty.to_chalk(db),\n-            parameters: self.parameters.to_chalk(db),\n+            substitution: self.parameters.to_chalk(db),\n         }\n     }\n \n     fn from_chalk(\n         db: &impl HirDatabase,\n-        projection_ty: chalk_ir::ProjectionTy<TypeFamily>,\n+        projection_ty: chalk_ir::AliasTy<TypeFamily>,\n     ) -> ProjectionTy {\n         ProjectionTy {\n             associated_ty: from_chalk(db, projection_ty.associated_ty_id),\n-            parameters: from_chalk(db, projection_ty.parameters),\n+            parameters: from_chalk(db, projection_ty.substitution),\n         }\n     }\n }\n@@ -369,10 +370,7 @@ impl ToChalk for super::ProjectionPredicate {\n     type Chalk = chalk_ir::Normalize<TypeFamily>;\n \n     fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::Normalize<TypeFamily> {\n-        chalk_ir::Normalize {\n-            projection: self.projection_ty.to_chalk(db),\n-            ty: self.ty.to_chalk(db),\n-        }\n+        chalk_ir::Normalize { alias: self.projection_ty.to_chalk(db), ty: self.ty.to_chalk(db) }\n     }\n \n     fn from_chalk(_db: &impl HirDatabase, _normalize: chalk_ir::Normalize<TypeFamily>) -> Self {"}]}