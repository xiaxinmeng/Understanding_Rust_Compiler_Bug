{"sha": "a936f78d987debe7cb46a9ec13377cef76645cda", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MzZmNzhkOTg3ZGViZTdjYjQ2YTllYzEzMzc3Y2VmNzY2NDVjZGE=", "commit": {"author": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2011-11-21T15:36:11Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-22T21:41:17Z"}, "message": "rustc: Allow trailing comma in record fields", "tree": {"sha": "2cb78e1bd4868826b810db189c3cae60810d794c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cb78e1bd4868826b810db189c3cae60810d794c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a936f78d987debe7cb46a9ec13377cef76645cda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a936f78d987debe7cb46a9ec13377cef76645cda", "html_url": "https://github.com/rust-lang/rust/commit/a936f78d987debe7cb46a9ec13377cef76645cda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a936f78d987debe7cb46a9ec13377cef76645cda/comments", "author": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "901b9adb69fd55f72e0f71de7725f8aba3b7acb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/901b9adb69fd55f72e0f71de7725f8aba3b7acb2", "html_url": "https://github.com/rust-lang/rust/commit/901b9adb69fd55f72e0f71de7725f8aba3b7acb2"}], "stats": {"total": 88, "additions": 58, "deletions": 30}, "files": [{"sha": "02d907aba8c84a5802814bc8a8b4999583d79484", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 48, "deletions": 28, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/a936f78d987debe7cb46a9ec13377cef76645cda/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a936f78d987debe7cb46a9ec13377cef76645cda/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=a936f78d987debe7cb46a9ec13377cef76645cda", "patch": "@@ -290,7 +290,7 @@ fn parse_ty_fn(proto: ast::proto, p: parser) -> ast::ty_ {\n         ret spanned(lo, t.span.hi, {mode: mode, ty: t});\n     }\n     let inputs =\n-        parse_seq(token::LPAREN, token::RPAREN, some(token::COMMA),\n+        parse_seq(token::LPAREN, token::RPAREN, seq_sep(token::COMMA),\n                   parse_fn_input_ty, p);\n     // FIXME: there's no syntax for this right now anyway\n     //  auto constrs = parse_constrs(~[], p);\n@@ -319,7 +319,8 @@ fn parse_ty_obj(p: parser) -> ast::ty_ {\n         }\n     }\n     let meths =\n-        parse_seq(token::LBRACE, token::RBRACE, none, parse_method_sig, p);\n+        parse_seq(token::LBRACE, token::RBRACE, seq_sep_none(),\n+                  parse_method_sig, p);\n     ret ast::ty_obj(meths.node);\n }\n \n@@ -376,7 +377,7 @@ fn parse_ty_constr(fn_args: [ast::arg], p: parser) -> @ast::constr {\n     let lo = p.get_lo_pos();\n     let path = parse_path(p);\n     let args: {node: [@ast::constr_arg], span: span} =\n-        parse_seq(token::LPAREN, token::RPAREN, some(token::COMMA),\n+        parse_seq(token::LPAREN, token::RPAREN, seq_sep(token::COMMA),\n                   {|p| parse_constr_arg(fn_args, p)}, p);\n     ret @spanned(lo, args.span.hi,\n                  {path: path, args: args.node, id: p.get_id()});\n@@ -386,7 +387,7 @@ fn parse_constr_in_type(p: parser) -> @ast::ty_constr {\n     let lo = p.get_lo_pos();\n     let path = parse_path(p);\n     let args: [@ast::ty_constr_arg] =\n-        parse_seq(token::LPAREN, token::RPAREN, some(token::COMMA),\n+        parse_seq(token::LPAREN, token::RPAREN, seq_sep(token::COMMA),\n                   parse_type_constr_arg, p).node;\n     let hi = p.get_lo_pos();\n     let tc: ast::ty_constr_ = {path: path, args: args, id: p.get_id()};\n@@ -540,7 +541,7 @@ fn parse_ty(p: parser, colons_before_params: bool) -> @ast::ty {\n         t = ast::ty_ptr(parse_mt(p));\n     } else if p.peek() == token::LBRACE {\n         let elems =\n-            parse_seq(token::LBRACE, token::RBRACE, some(token::COMMA),\n+            parse_seq(token::LBRACE, token::RBRACE, seq_sep_opt(token::COMMA),\n                       parse_ty_field, p);\n         let hi = elems.span.hi;\n         t = ast::ty_rec(elems.node);\n@@ -631,31 +632,47 @@ fn parse_seq_lt_gt<copy T>(sep: option::t<token::token>,\n     ret spanned(lo, hi, result);\n }\n \n-fn parse_seq_to_end<copy T>(ket: token::token, sep: option::t<token::token>,\n+fn parse_seq_to_end<copy T>(ket: token::token, sep: seq_sep,\n                             f: block(parser) -> T, p: parser) -> [T] {\n     let val = parse_seq_to_before_end(ket, sep, f, p);\n     p.bump();\n     ret val;\n }\n \n+type seq_sep = {\n+    sep: option::t<token::token>,\n+    trailing_opt: bool   // is trailing separator optional?\n+};\n+\n+fn seq_sep(t: token::token) -> seq_sep {\n+    ret {sep: option::some(t), trailing_opt: false};\n+}\n+fn seq_sep_opt(t: token::token) -> seq_sep {\n+    ret {sep: option::some(t), trailing_opt: true};\n+}\n+fn seq_sep_none() -> seq_sep {\n+    ret {sep: option::none, trailing_opt: false};\n+}\n+\n fn parse_seq_to_before_end<copy T>(ket: token::token,\n-                                   sep: option::t<token::token>,\n+                                   sep: seq_sep,\n                                    f: block(parser) -> T, p: parser) -> [T] {\n     let first: bool = true;\n     let v: [T] = [];\n     while p.peek() != ket {\n-        alt sep {\n+        alt sep.sep {\n           some(t) { if first { first = false; } else { expect(p, t); } }\n           _ { }\n         }\n+        if sep.trailing_opt && p.peek() == ket { break; }\n         v += [f(p)];\n     }\n     ret v;\n }\n \n \n fn parse_seq<copy T>(bra: token::token, ket: token::token,\n-                     sep: option::t<token::token>, f: block(parser) -> T,\n+                     sep: seq_sep, f: block(parser) -> T,\n                      p: parser) -> spanned<[T]> {\n     let lo = p.get_lo_pos();\n     expect(p, bra);\n@@ -810,6 +827,10 @@ fn parse_bottom_expr(p: parser) -> @ast::expr {\n             while p.peek() != token::RBRACE {\n                 if eat_word(p, \"with\") { base = some(parse_expr(p)); break; }\n                 expect(p, token::COMMA);\n+                if p.peek() == token::RBRACE {\n+                    // record ends by an optional trailing comma\n+                    break;\n+                }\n                 fields += [parse_field(p, token::COLON)];\n             }\n             hi = p.get_hi_pos();\n@@ -850,8 +871,8 @@ fn parse_bottom_expr(p: parser) -> @ast::expr {\n         p.bump();\n         let mut = parse_mutability(p);\n         let es =\n-            parse_seq_to_end(token::RBRACKET, some(token::COMMA), parse_expr,\n-                             p);\n+            parse_seq_to_end(token::RBRACKET, seq_sep(token::COMMA),\n+                             parse_expr, p);\n         ex = ast::expr_vec(es, mut);\n     } else if p.peek() == token::POUND_LT {\n         p.bump();\n@@ -876,7 +897,7 @@ fn parse_bottom_expr(p: parser) -> @ast::expr {\n         if p.peek() == token::LPAREN {\n             p.bump();\n             fields =\n-                some(parse_seq_to_end(token::RPAREN, some(token::COMMA),\n+                some(parse_seq_to_end(token::RPAREN, seq_sep(token::COMMA),\n                                       parse_anon_obj_field, p));\n         }\n         let meths: [@ast::method] = [];\n@@ -906,7 +927,7 @@ fn parse_bottom_expr(p: parser) -> @ast::expr {\n             }\n         }\n         let es =\n-            parse_seq(token::LPAREN, token::RPAREN, some(token::COMMA),\n+            parse_seq(token::LPAREN, token::RPAREN, seq_sep(token::COMMA),\n                       parse_expr_opt, p);\n         hi = es.span.hi;\n         ex = ast::expr_bind(e, es.node);\n@@ -977,7 +998,7 @@ fn parse_bottom_expr(p: parser) -> @ast::expr {\n         // The rest is a call expression.\n         let f: @ast::expr = parse_self_method(p);\n         let es =\n-            parse_seq(token::LPAREN, token::RPAREN, some(token::COMMA),\n+            parse_seq(token::LPAREN, token::RPAREN, seq_sep(token::COMMA),\n                       parse_expr, p);\n         hi = es.span.hi;\n         ex = ast::expr_call(f, es.node, false);\n@@ -1016,13 +1037,12 @@ fn parse_syntax_ext_naked(p: parser, lo: uint) -> @ast::expr {\n         p.fatal(\"expected a syntax expander name\");\n     }\n     //temporary for a backwards-compatible cycle:\n+    let sep = seq_sep(token::COMMA);\n     let es =\n         if p.peek() == token::LPAREN {\n-            parse_seq(token::LPAREN, token::RPAREN, some(token::COMMA),\n-                      parse_expr, p)\n+            parse_seq(token::LPAREN, token::RPAREN, sep, parse_expr, p)\n         } else {\n-            parse_seq(token::LBRACKET, token::RBRACKET, some(token::COMMA),\n-                      parse_expr, p)\n+            parse_seq(token::LBRACKET, token::RBRACKET, sep, parse_expr, p)\n         };\n     let hi = es.span.hi;\n     let e = mk_expr(p, es.span.lo, hi, ast::expr_vec(es.node, ast::imm));\n@@ -1053,7 +1073,7 @@ fn parse_dot_or_call_expr_with(p: parser, e: @ast::expr) -> @ast::expr {\n             } else {\n                 // Call expr.\n                 let es = parse_seq(token::LPAREN, token::RPAREN,\n-                                   some(token::COMMA), parse_expr, p);\n+                                   seq_sep(token::COMMA), parse_expr, p);\n                 hi = es.span.hi;\n                 let nd = ast::expr_call(e, es.node, false);\n                 e = mk_expr(p, lo, hi, nd);\n@@ -1508,7 +1528,7 @@ fn parse_pat(p: parser) -> @ast::pat {\n               token::LPAREN. {\n                 let a =\n                     parse_seq(token::LPAREN, token::RPAREN,\n-                              some(token::COMMA), parse_pat, p);\n+                              seq_sep(token::COMMA), parse_pat, p);\n                 args = a.node;\n                 hi = a.span.hi;\n               }\n@@ -1761,8 +1781,8 @@ fn parse_ty_params(p: parser) -> [ast::ty_param] {\n fn parse_fn_decl(p: parser, purity: ast::purity, il: ast::inlineness) ->\n    ast::fn_decl {\n     let inputs: ast::spanned<[ast::arg]> =\n-        parse_seq(token::LPAREN, token::RPAREN, some(token::COMMA), parse_arg,\n-                  p);\n+        parse_seq(token::LPAREN, token::RPAREN, seq_sep(token::COMMA),\n+                  parse_arg, p);\n     // Use the args list to translate each bound variable\n     // mentioned in a constraint to an arg index.\n     // Seems weird to do this in the parser, but I'm not sure how else to.\n@@ -1787,7 +1807,7 @@ fn parse_fn_block_decl(p: parser) -> ast::fn_decl {\n             []\n         } else {\n             parse_seq(token::BINOP(token::OR), token::BINOP(token::OR),\n-                      some(token::COMMA), parse_fn_block_arg, p).node\n+                      seq_sep(token::COMMA), parse_fn_block_arg, p).node\n         };\n     ret {inputs: inputs,\n          output: @spanned(p.get_lo_pos(), p.get_hi_pos(), ast::ty_infer),\n@@ -1861,7 +1881,7 @@ fn parse_item_obj(p: parser, attrs: [ast::attribute]) -> @ast::item {\n     let ident = parse_value_ident(p);\n     let ty_params = parse_ty_params(p);\n     let fields: ast::spanned<[ast::obj_field]> =\n-        parse_seq(token::LPAREN, token::RPAREN, some(token::COMMA),\n+        parse_seq(token::LPAREN, token::RPAREN, seq_sep(token::COMMA),\n                   parse_obj_field, p);\n     let meths: [@ast::method] = [];\n     expect(p, token::LBRACE);\n@@ -2066,7 +2086,7 @@ fn parse_item_tag(p: parser, attrs: [ast::attribute]) -> @ast::item {\n             alt p.peek() {\n               token::LPAREN. {\n                 let arg_tys = parse_seq(token::LPAREN, token::RPAREN,\n-                                        some(token::COMMA),\n+                                        seq_sep(token::COMMA),\n                                         {|p| parse_ty(p, false)}, p);\n                 for ty: @ast::ty in arg_tys.node {\n                     args += [{ty: ty, id: p.get_id()}];\n@@ -2258,7 +2278,7 @@ fn parse_meta_item(p: parser) -> @ast::meta_item {\n }\n \n fn parse_meta_seq(p: parser) -> [@ast::meta_item] {\n-    ret parse_seq(token::LPAREN, token::RPAREN, some(token::COMMA),\n+    ret parse_seq(token::LPAREN, token::RPAREN, seq_sep(token::COMMA),\n                   parse_meta_item, p).node;\n }\n \n@@ -2315,7 +2335,7 @@ fn parse_rest_import_name(p: parser, first: ast::ident,\n                 ret spanned(lo, hi, {name: ident, id: p.get_id()});\n             }\n             let from_idents_ =\n-                parse_seq(token::LBRACE, token::RBRACE, some(token::COMMA),\n+                parse_seq(token::LBRACE, token::RBRACE, seq_sep(token::COMMA),\n                           parse_import_ident, p).node;\n             if vec::is_empty(from_idents_) {\n                 p.fatal(\"at least one import is required\");\n@@ -2385,7 +2405,7 @@ fn parse_import(p: parser) -> ast::view_item_ {\n \n fn parse_export(p: parser) -> ast::view_item_ {\n     let ids =\n-        parse_seq_to_before_end(token::SEMI, option::some(token::COMMA),\n+        parse_seq_to_before_end(token::SEMI, seq_sep(token::COMMA),\n                                 parse_ident, p);\n     ret ast::view_item_export(ids, p.get_id());\n }"}, {"sha": "7da57be491037cfc2143a4d58366987de2c7ff50", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a936f78d987debe7cb46a9ec13377cef76645cda/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a936f78d987debe7cb46a9ec13377cef76645cda/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=a936f78d987debe7cb46a9ec13377cef76645cda", "patch": "@@ -294,7 +294,7 @@ fn print_type(s: ps, &&ty: @ast::ty) {\n         }\n         fn get_span(f: ast::ty_field) -> codemap::span { ret f.span; }\n         commasep_cmnt(s, consistent, fields, print_field, get_span);\n-        word(s.s, \"}\");\n+        word(s.s, \",}\");\n       }\n       ast::ty_tup(elts) {\n         popen(s);\n@@ -693,7 +693,7 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n             print_expr(s, expr);\n             end(s);\n           }\n-          _ { }\n+          _ { word(s.s, \",\"); }\n         }\n         word(s.s, \"}\");\n       }"}, {"sha": "a60d72988e6e615db0fb5028f82b46f8341c6fb7", "filename": "src/test/pretty/record-trailing-comma.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a936f78d987debe7cb46a9ec13377cef76645cda/src%2Ftest%2Fpretty%2Frecord-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a936f78d987debe7cb46a9ec13377cef76645cda/src%2Ftest%2Fpretty%2Frecord-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Frecord-trailing-comma.rs?ref=a936f78d987debe7cb46a9ec13377cef76645cda", "patch": "@@ -0,0 +1,8 @@\n+// pp-exact\n+type thing = {x: int, y: int,};\n+\n+fn main() {\n+    let sth = {x: 0, y: 1,};\n+    let sth2 = {y: 9 with sth};\n+    assert (sth.x + sth2.y == 9);\n+}"}]}