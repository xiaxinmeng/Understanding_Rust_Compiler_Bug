{"sha": "770b2fea06f96714b4602d54c0681dce8ad315b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MGIyZmVhMDZmOTY3MTRiNDYwMmQ1NGMwNjgxZGNlOGFkMzE1YjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-13T11:06:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-13T11:06:53Z"}, "message": "auto merge of #13468 : alexcrichton/rust/issue-13467, r=thestinger\n\nPreviously, all slices derived from a vector whose values were of size 0 had a\r\nnull pointer as the 'data' pointer on the slice. This caused first pointer to be\r\nyielded during iteration to always be the null pointer. Due to the null pointer\r\noptimization, this meant that the first return value was None, instead of\r\nSome(&T).\r\n\r\nThis commit changes slice construction from a Vec instance to use a base pointer\r\nof 1 if the values have zero size. This means that the iterator will never\r\nreturn null, and the iteration will proceed appropriately.\r\n\r\nCloses #13467", "tree": {"sha": "9faa52b8edee9f56f88425d3ed2a5d6ba6a98566", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9faa52b8edee9f56f88425d3ed2a5d6ba6a98566"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/770b2fea06f96714b4602d54c0681dce8ad315b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/770b2fea06f96714b4602d54c0681dce8ad315b1", "html_url": "https://github.com/rust-lang/rust/commit/770b2fea06f96714b4602d54c0681dce8ad315b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/770b2fea06f96714b4602d54c0681dce8ad315b1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f790546504f869788f3c0e9585b51470773332f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f790546504f869788f3c0e9585b51470773332f", "html_url": "https://github.com/rust-lang/rust/commit/2f790546504f869788f3c0e9585b51470773332f"}, {"sha": "7a82d478a3c9301eda4453ec222842f750e13630", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a82d478a3c9301eda4453ec222842f750e13630", "html_url": "https://github.com/rust-lang/rust/commit/7a82d478a3c9301eda4453ec222842f750e13630"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "a69120de00f7d6dfc60c3660074c1d08143490aa", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/770b2fea06f96714b4602d54c0681dce8ad315b1/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770b2fea06f96714b4602d54c0681dce8ad315b1/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=770b2fea06f96714b4602d54c0681dce8ad315b1", "patch": "@@ -598,7 +598,12 @@ impl<T> Vec<T> {\n     /// ```\n     #[inline]\n     pub fn as_mut_slice<'a>(&'a mut self) -> &'a mut [T] {\n-        let slice = Slice { data: self.ptr as *T, len: self.len };\n+        // See the comment in as_slice() for what's going on here.\n+        let slice = if mem::size_of::<T>() == 0 {\n+            Slice { data: 1 as *T, len: self.len }\n+        } else {\n+            Slice { data: self.ptr as *T, len: self.len }\n+        };\n         unsafe { transmute(slice) }\n     }\n \n@@ -1335,7 +1340,15 @@ impl<T> Vector<T> for Vec<T> {\n     /// ```\n     #[inline]\n     fn as_slice<'a>(&'a self) -> &'a [T] {\n-        let slice = Slice { data: self.ptr as *T, len: self.len };\n+        // If we have a 0-sized vector, then the base pointer should not be NULL\n+        // because an iterator over the slice will attempt to yield the base\n+        // pointer as the first element in the vector, but this will end up\n+        // being Some(NULL) which is optimized to None.\n+        let slice = if mem::size_of::<T>() == 0 {\n+            Slice { data: 1 as *T, len: self.len }\n+        } else {\n+            Slice { data: self.ptr as *T, len: self.len }\n+        };\n         unsafe { transmute(slice) }\n     }\n }\n@@ -1588,4 +1601,35 @@ mod tests {\n         vec.retain(|x| x%2 == 0);\n         assert!(vec == Vec::from_slice([2u, 4]));\n     }\n+\n+    #[test]\n+    fn zero_sized_values() {\n+        let mut v = Vec::new();\n+        assert_eq!(v.len(), 0);\n+        v.push(());\n+        assert_eq!(v.len(), 1);\n+        v.push(());\n+        assert_eq!(v.len(), 2);\n+        assert_eq!(v.pop(), Some(()));\n+        assert_eq!(v.pop(), Some(()));\n+        assert_eq!(v.pop(), None);\n+\n+        assert_eq!(v.iter().len(), 0);\n+        v.push(());\n+        assert_eq!(v.iter().len(), 1);\n+        v.push(());\n+        assert_eq!(v.iter().len(), 2);\n+\n+        for &() in v.iter() {}\n+\n+        assert_eq!(v.mut_iter().len(), 2);\n+        v.push(());\n+        assert_eq!(v.mut_iter().len(), 3);\n+        v.push(());\n+        assert_eq!(v.mut_iter().len(), 4);\n+\n+        for &() in v.mut_iter() {}\n+        unsafe { v.set_len(0); }\n+        assert_eq!(v.mut_iter().len(), 0);\n+    }\n }"}]}