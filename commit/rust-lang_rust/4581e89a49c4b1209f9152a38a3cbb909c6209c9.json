{"sha": "4581e89a49c4b1209f9152a38a3cbb909c6209c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ODFlODlhNDljNGIxMjA5ZjkxNTJhMzhhM2NiYjkwOWM2MjA5Yzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-16T05:43:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-16T05:43:38Z"}, "message": "Auto merge of #42690 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 5 pull requests\n\n- Successful merges: #42616, #42651, #42654, #42656, #42685\n- Failed merges:", "tree": {"sha": "cb0739dacc1efacd7c6529a08a56873ccf881a8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb0739dacc1efacd7c6529a08a56873ccf881a8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4581e89a49c4b1209f9152a38a3cbb909c6209c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4581e89a49c4b1209f9152a38a3cbb909c6209c9", "html_url": "https://github.com/rust-lang/rust/commit/4581e89a49c4b1209f9152a38a3cbb909c6209c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4581e89a49c4b1209f9152a38a3cbb909c6209c9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44eeb2109b249e7496ca0897ce509ced2e3b6c81", "url": "https://api.github.com/repos/rust-lang/rust/commits/44eeb2109b249e7496ca0897ce509ced2e3b6c81", "html_url": "https://github.com/rust-lang/rust/commit/44eeb2109b249e7496ca0897ce509ced2e3b6c81"}, {"sha": "f5f74a22c94a7053d33c88d135f9fdc44fa2ea5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5f74a22c94a7053d33c88d135f9fdc44fa2ea5b", "html_url": "https://github.com/rust-lang/rust/commit/f5f74a22c94a7053d33c88d135f9fdc44fa2ea5b"}], "stats": {"total": 196, "additions": 125, "deletions": 71}, "files": [{"sha": "8c3662002671b26aa3f5e10182268e000e1b0cc1", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4581e89a49c4b1209f9152a38a3cbb909c6209c9/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581e89a49c4b1209f9152a38a3cbb909c6209c9/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=4581e89a49c4b1209f9152a38a3cbb909c6209c9", "patch": "@@ -463,7 +463,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     rules.test(\"check-linkchecker\", \"src/tools/linkchecker\")\n          .dep(|s| s.name(\"tool-linkchecker\").stage(0))\n          .dep(|s| s.name(\"default:doc\"))\n-         .default(true)\n+         .default(build.config.docs)\n          .host(true)\n          .run(move |s| check::linkcheck(build, s.target));\n     rules.test(\"check-cargotest\", \"src/tools/cargotest\")\n@@ -1407,13 +1407,20 @@ mod tests {\n     fn build(args: &[&str],\n              extra_host: &[&str],\n              extra_target: &[&str]) -> Build {\n+        build_(args, extra_host, extra_target, true)\n+    }\n+\n+    fn build_(args: &[&str],\n+              extra_host: &[&str],\n+              extra_target: &[&str],\n+              docs: bool) -> Build {\n         let mut args = args.iter().map(|s| s.to_string()).collect::<Vec<_>>();\n         args.push(\"--build\".to_string());\n         args.push(\"A\".to_string());\n         let flags = Flags::parse(&args);\n \n         let mut config = Config::default();\n-        config.docs = true;\n+        config.docs = docs;\n         config.build = \"A\".to_string();\n         config.host = vec![config.build.clone()];\n         config.host.extend(extra_host.iter().map(|s| s.to_string()));\n@@ -1768,4 +1775,22 @@ mod tests {\n         assert!(!plan.iter().any(|s| s.name.contains(\"tidy\")));\n         assert!(plan.iter().any(|s| s.name.contains(\"valgrind\")));\n     }\n+\n+    #[test]\n+    fn test_disable_docs() {\n+        let build = build_(&[\"test\"], &[], &[], false);\n+        let rules = super::build_rules(&build);\n+        let plan = rules.plan();\n+        println!(\"rules: {:#?}\", plan);\n+        assert!(!plan.iter().any(|s| {\n+            s.name.contains(\"doc-\") || s.name.contains(\"default:doc\")\n+        }));\n+        // none of the dependencies should be a doc rule either\n+        assert!(!plan.iter().any(|s| {\n+            rules.rules[s.name].deps.iter().any(|dep| {\n+                let dep = dep(&rules.sbuild.name(s.name));\n+                dep.name.contains(\"doc-\") || dep.name.contains(\"default:doc\")\n+            })\n+        }));\n+    }\n }"}, {"sha": "d8f742735a8d5ac4d5507535501801c849a81e2d", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4581e89a49c4b1209f9152a38a3cbb909c6209c9/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/4581e89a49c4b1209f9152a38a3cbb909c6209c9/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=4581e89a49c4b1209f9152a38a3cbb909c6209c9", "patch": "@@ -87,7 +87,6 @@\n     - [start](language-features/start.md)\n     - [static_nobundle](language-features/static-nobundle.md)\n     - [stmt_expr_attributes](language-features/stmt-expr-attributes.md)\n-    - [struct_field_attributes](language-features/struct-field-attributes.md)\n     - [structural_match](language-features/structural-match.md)\n     - [target_feature](language-features/target-feature.md)\n     - [thread_local](language-features/thread-local.md)"}, {"sha": "1a94562968d192a11db9be21bda24c6f2e7f081e", "filename": "src/doc/unstable-book/src/language-features/struct-field-attributes.md", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/44eeb2109b249e7496ca0897ce509ced2e3b6c81/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstruct-field-attributes.md", "raw_url": "https://github.com/rust-lang/rust/raw/44eeb2109b249e7496ca0897ce509ced2e3b6c81/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstruct-field-attributes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fstruct-field-attributes.md?ref=44eeb2109b249e7496ca0897ce509ced2e3b6c81", "patch": "@@ -1,10 +0,0 @@\n-# `struct_field_attributes`\n-\n-The tracking issue for this feature is: [#38814]\n-\n-[#38814]: https://github.com/rust-lang/rust/issues/38814\n-\n-------------------------\n-\n-\n-"}, {"sha": "cc0e5dec266db868ed0b4032dded7e59635bca31", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4581e89a49c4b1209f9152a38a3cbb909c6209c9/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581e89a49c4b1209f9152a38a3cbb909c6209c9/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=4581e89a49c4b1209f9152a38a3cbb909c6209c9", "patch": "@@ -36,11 +36,11 @@\n #![feature(discriminant_value)]\n #![feature(specialization)]\n #![feature(manually_drop)]\n-#![feature(struct_field_attributes)]\n \n #![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n #![cfg_attr(stage0, feature(rustc_private))]\n #![cfg_attr(stage0, feature(staged_api))]\n+#![cfg_attr(stage0, feature(struct_field_attributes))]\n \n #![cfg_attr(unix, feature(libc))]\n #![cfg_attr(test, feature(test))]"}, {"sha": "aa0fae508fde10a38ad792dc960973c25b2eb8d1", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4581e89a49c4b1209f9152a38a3cbb909c6209c9/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581e89a49c4b1209f9152a38a3cbb909c6209c9/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=4581e89a49c4b1209f9152a38a3cbb909c6209c9", "patch": "@@ -445,8 +445,11 @@ impl EmitterWriter {\n                             && next.has_label())     // multiline start/end, move it to a new line\n                         || (annotation.has_label()   // so as not to overlap the orizontal lines.\n                             && next.takes_space())\n-                        || (annotation.takes_space()\n-                            && next.takes_space())\n+                        || (annotation.takes_space() && next.takes_space())\n+                        || (overlaps(next, annotation, l)\n+                            && next.end_col <= annotation.end_col\n+                            && next.has_label()\n+                            && p == 0)  // Avoid #42595.\n                     {\n                         // This annotation needs a new line in the output.\n                         p += 1;"}, {"sha": "385ed7eb0e3842c750999ba88f79f1e0614103ae", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4581e89a49c4b1209f9152a38a3cbb909c6209c9/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581e89a49c4b1209f9152a38a3cbb909c6209c9/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=4581e89a49c4b1209f9152a38a3cbb909c6209c9", "patch": "@@ -15,7 +15,7 @@ use super::method::MethodCallee;\n use hir::def::Def;\n use hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::{infer, traits};\n-use rustc::ty::{self, TyCtxt, LvaluePreference, Ty};\n+use rustc::ty::{self, TyCtxt, TypeFoldable, LvaluePreference, Ty};\n use rustc::ty::subst::Subst;\n use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow};\n use syntax::abi;\n@@ -209,17 +209,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         }\n                     }\n                 }\n-                let mut err = if let Some(path) = unit_variant {\n-                    let mut err = self.type_error_struct(call_expr.span, |_| {\n-                        format!(\"`{}` is being called, but it is not a function\", path)\n-                    }, callee_ty);\n+                let mut err = type_error_struct!(self.tcx.sess, call_expr.span, callee_ty, E0618,\n+                                                 \"expected function, found `{}`\",\n+                                                 if let Some(ref path) = unit_variant {\n+                                                     path.to_string()\n+                                                 } else {\n+                                                     callee_ty.to_string()\n+                                                 });\n+                if let Some(path) = unit_variant {\n                     err.help(&format!(\"did you mean to write `{}`?\", path));\n-                    err\n-                } else {\n-                    self.type_error_struct(call_expr.span, |actual| {\n-                        format!(\"expected function, found `{}`\", actual)\n-                    }, callee_ty)\n-                };\n+                }\n \n                 if let hir::ExprCall(ref expr, _) = call_expr.node {\n                     let def = if let hir::ExprPath(ref qpath) = expr.node {"}, {"sha": "f72af2084f02201dbbc023a86ba3193124f18929", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4581e89a49c4b1209f9152a38a3cbb909c6209c9/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581e89a49c4b1209f9152a38a3cbb909c6209c9/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=4581e89a49c4b1209f9152a38a3cbb909c6209c9", "patch": "@@ -4195,6 +4195,34 @@ as possible. For better explanations, see The Rust Book:\n https://doc.rust-lang.org/book/\n \"##,\n \n+E0618: r##\"\n+Attempted to call something which isn't a function nor a method.\n+\n+Erroneous code examples:\n+\n+```compile_fail,E0618\n+enum X {\n+    Entry,\n+}\n+\n+X::Entry(); // error: expected function, found `X::Entry`\n+\n+// Or even simpler:\n+let x = 0i32;\n+x(); // error: expected function, found `i32`\n+```\n+\n+Only functions and methods can be called using `()`. Example:\n+\n+```\n+// We declare a function:\n+fn i_am_a_function() {}\n+\n+// And we call it:\n+i_am_a_function();\n+```\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "3f859c45c28cda43a9f9711182bea104905c099c", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4581e89a49c4b1209f9152a38a3cbb909c6209c9/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581e89a49c4b1209f9152a38a3cbb909c6209c9/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=4581e89a49c4b1209f9152a38a3cbb909c6209c9", "patch": "@@ -389,7 +389,7 @@ fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize>\n \n /// The `Read` trait allows for reading bytes from a source.\n ///\n-/// Implementors of the `Read` trait are sometimes called 'readers'.\n+/// Implementors of the `Read` trait are called 'readers'.\n ///\n /// Readers are defined by one required method, `read()`. Each call to `read`\n /// will attempt to pull bytes from this source into a provided buffer. A"}, {"sha": "54e6dde41e6d48cacd63c1187cf55e1a91f74a57", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4581e89a49c4b1209f9152a38a3cbb909c6209c9/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581e89a49c4b1209f9152a38a3cbb909c6209c9/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=4581e89a49c4b1209f9152a38a3cbb909c6209c9", "patch": "@@ -223,7 +223,6 @@ impl<'a> StripUnconfigured<'a> {\n             ast::ExprKind::Struct(path, fields, base) => {\n                 let fields = fields.into_iter()\n                     .filter_map(|field| {\n-                        self.visit_struct_field_attrs(field.attrs());\n                         self.configure(field)\n                     })\n                     .collect();\n@@ -256,17 +255,6 @@ impl<'a> StripUnconfigured<'a> {\n     }\n \n     pub fn configure_struct_expr_field(&mut self, field: ast::Field) -> Option<ast::Field> {\n-        if !self.features.map(|features| features.struct_field_attributes).unwrap_or(true) {\n-            if !field.attrs.is_empty() {\n-                let mut err = feature_err(self.sess,\n-                                          \"struct_field_attributes\",\n-                                          field.span,\n-                                          GateIssue::Language,\n-                                          \"attributes on struct literal fields are unstable\");\n-                err.emit();\n-            }\n-        }\n-\n         self.configure(field)\n     }\n \n@@ -275,7 +263,6 @@ impl<'a> StripUnconfigured<'a> {\n             if let ast::PatKind::Struct(path, fields, etc) = pattern.node {\n                 let fields = fields.into_iter()\n                     .filter_map(|field| {\n-                        self.visit_struct_field_attrs(field.attrs());\n                         self.configure(field)\n                     })\n                     .collect();\n@@ -284,21 +271,6 @@ impl<'a> StripUnconfigured<'a> {\n             pattern\n         })\n     }\n-\n-    fn visit_struct_field_attrs(&mut self, attrs: &[ast::Attribute]) {\n-        // flag the offending attributes\n-        for attr in attrs.iter() {\n-            if !self.features.map(|features| features.struct_field_attributes).unwrap_or(true) {\n-                let mut err = feature_err(\n-                    self.sess,\n-                    \"struct_field_attributes\",\n-                    attr.span,\n-                    GateIssue::Language,\n-                    \"attributes on struct pattern or literal fields are unstable\");\n-                err.emit();\n-            }\n-        }\n-    }\n }\n \n impl<'a> fold::Folder for StripUnconfigured<'a> {"}, {"sha": "4543378789dfea8782e25f833ca1ee0a151c9779", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4581e89a49c4b1209f9152a38a3cbb909c6209c9/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581e89a49c4b1209f9152a38a3cbb909c6209c9/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=4581e89a49c4b1209f9152a38a3cbb909c6209c9", "patch": "@@ -312,9 +312,6 @@ declare_features! (\n     // Declarative macros 2.0 (`macro`).\n     (active, decl_macro, \"1.17.0\", Some(39412)),\n \n-    // Allows attributes on struct literal fields.\n-    (active, struct_field_attributes, \"1.16.0\", Some(38814)),\n-\n     // Allows #[link(kind=\"static-nobundle\"...]\n     (active, static_nobundle, \"1.16.0\", Some(37403)),\n \n@@ -430,6 +427,8 @@ declare_features! (\n     (accepted, relaxed_adts, \"1.19.0\", Some(35626)),\n     // Coerces non capturing closures to function pointers\n     (accepted, closure_to_fn_coercion, \"1.19.0\", Some(39817)),\n+    // Allows attributes on struct literal fields.\n+    (accepted, struct_field_attributes, \"1.20.0\", Some(38814)),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must"}, {"sha": "4fae2ff9814fda9b00d6647b66d705a294628a78", "filename": "src/libsyntax/test_snippet.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4581e89a49c4b1209f9152a38a3cbb909c6209c9/src%2Flibsyntax%2Ftest_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581e89a49c4b1209f9152a38a3cbb909c6209c9/src%2Flibsyntax%2Ftest_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest_snippet.rs?ref=4581e89a49c4b1209f9152a38a3cbb909c6209c9", "patch": "@@ -735,6 +735,49 @@ error: foo\n \"#);\n }\n \n+#[test]\n+fn multiple_labels_secondary_without_message_3() {\n+    test_harness(r#\"\n+fn foo() {\n+  a  bc  d\n+}\n+\"#,\n+    vec![\n+        SpanLabel {\n+            start: Position {\n+                string: \"a\",\n+                count: 1,\n+            },\n+            end: Position {\n+                string: \"b\",\n+                count: 1,\n+            },\n+            label: \"`a` is a good letter\",\n+        },\n+        SpanLabel {\n+            start: Position {\n+                string: \"c\",\n+                count: 1,\n+            },\n+            end: Position {\n+                string: \"d\",\n+                count: 1,\n+            },\n+            label: \"\",\n+        },\n+    ],\n+    r#\"\n+error: foo\n+ --> test.rs:3:3\n+  |\n+3 |   a  bc  d\n+  |   ^^^^----\n+  |   |\n+  |   `a` is a good letter\n+\n+\"#);\n+}\n+\n #[test]\n fn multiple_labels_without_message() {\n     test_harness(r#\""}, {"sha": "1ba2e8e2e56139ace7fa9a53369e63feae8a16de", "filename": "src/test/compile-fail/E0618.rs", "status": "renamed", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4581e89a49c4b1209f9152a38a3cbb909c6209c9/src%2Ftest%2Fcompile-fail%2FE0618.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581e89a49c4b1209f9152a38a3cbb909c6209c9/src%2Ftest%2Fcompile-fail%2FE0618.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0618.rs?ref=4581e89a49c4b1209f9152a38a3cbb909c6209c9", "patch": "@@ -8,15 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-struct_field_attributes\n-\n-struct Foo {\n-    present: (),\n+enum X {\n+    Entry,\n }\n \n fn main() {\n-    let foo = Foo { #[cfg(all())] present: () };\n-    //~^ ERROR attributes on struct pattern or literal fields are unstable\n-    let Foo { #[cfg(all())] present: () } = foo;\n-    //~^ ERROR attributes on struct pattern or literal fields are unstable\n+    X::Entry(); //~ ERROR expected function, found `X::Entry` [E0618]\n+                //~| HELP did you mean to write `X::Entry`?\n+    let x = 0i32;\n+    x(); //~ ERROR expected function, found `i32` [E0618]\n }", "previous_filename": "src/test/compile-fail/struct-field-attr-feature-gate.rs"}, {"sha": "9655007604de6e79d8c81644af01708e618335f1", "filename": "src/test/compile-fail/empty-struct-unit-expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4581e89a49c4b1209f9152a38a3cbb909c6209c9/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581e89a49c4b1209f9152a38a3cbb909c6209c9/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-expr.rs?ref=4581e89a49c4b1209f9152a38a3cbb909c6209c9", "patch": "@@ -24,10 +24,10 @@ enum E {\n fn main() {\n     let e2 = Empty2(); //~ ERROR expected function, found `Empty2`\n     let e4 = E::Empty4();\n-    //~^ ERROR `E::Empty4` is being called, but it is not a function\n+    //~^ ERROR expected function, found `E::Empty4` [E0618]\n     //~| HELP did you mean to write `E::Empty4`?\n     let xe2 = XEmpty2(); //~ ERROR expected function, found `empty_struct::XEmpty2`\n     let xe4 = XE::XEmpty4();\n-    //~^ ERROR `XE::XEmpty4` is being called, but it is not a function\n+    //~^ ERROR expected function, found `XE::XEmpty4` [E0618]\n     //~| HELP did you mean to write `XE::XEmpty4`?\n }"}, {"sha": "974d500d9cbdbdcfe9f56aaebc9ca5434cb45d73", "filename": "src/test/compile-fail/struct-field-cfg.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4581e89a49c4b1209f9152a38a3cbb909c6209c9/src%2Ftest%2Fcompile-fail%2Fstruct-field-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581e89a49c4b1209f9152a38a3cbb909c6209c9/src%2Ftest%2Fcompile-fail%2Fstruct-field-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-field-cfg.rs?ref=4581e89a49c4b1209f9152a38a3cbb909c6209c9", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(struct_field_attributes)]\n-\n struct Foo {\n     present: (),\n }"}]}