{"sha": "92b3f69934efb61433223fc10888746e0c705afe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyYjNmNjk5MzRlZmI2MTQzMzIyM2ZjMTA4ODg3NDZlMGM3MDVhZmU=", "commit": {"author": {"name": "cassiersg", "email": "cassiersg@users.noreply.github.com", "date": "2015-07-20T19:33:23Z"}, "committer": {"name": "Ga\u00ebtan Cassiers", "email": "gaetan.cassiers@gmail.com", "date": "2015-07-25T17:00:38Z"}, "message": "Add a helper method to format imports", "tree": {"sha": "d258a4871d88868cf3328281f0867772782c7bdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d258a4871d88868cf3328281f0867772782c7bdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92b3f69934efb61433223fc10888746e0c705afe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92b3f69934efb61433223fc10888746e0c705afe", "html_url": "https://github.com/rust-lang/rust/commit/92b3f69934efb61433223fc10888746e0c705afe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92b3f69934efb61433223fc10888746e0c705afe/comments", "author": {"login": "cassiersg", "id": 9348542, "node_id": "MDQ6VXNlcjkzNDg1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9348542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cassiersg", "html_url": "https://github.com/cassiersg", "followers_url": "https://api.github.com/users/cassiersg/followers", "following_url": "https://api.github.com/users/cassiersg/following{/other_user}", "gists_url": "https://api.github.com/users/cassiersg/gists{/gist_id}", "starred_url": "https://api.github.com/users/cassiersg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cassiersg/subscriptions", "organizations_url": "https://api.github.com/users/cassiersg/orgs", "repos_url": "https://api.github.com/users/cassiersg/repos", "events_url": "https://api.github.com/users/cassiersg/events{/privacy}", "received_events_url": "https://api.github.com/users/cassiersg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cassiersg", "id": 9348542, "node_id": "MDQ6VXNlcjkzNDg1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9348542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cassiersg", "html_url": "https://github.com/cassiersg", "followers_url": "https://api.github.com/users/cassiersg/followers", "following_url": "https://api.github.com/users/cassiersg/following{/other_user}", "gists_url": "https://api.github.com/users/cassiersg/gists{/gist_id}", "starred_url": "https://api.github.com/users/cassiersg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cassiersg/subscriptions", "organizations_url": "https://api.github.com/users/cassiersg/orgs", "repos_url": "https://api.github.com/users/cassiersg/repos", "events_url": "https://api.github.com/users/cassiersg/events{/privacy}", "received_events_url": "https://api.github.com/users/cassiersg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5168d7458a6fc532a3fcb672246898d696867264", "url": "https://api.github.com/repos/rust-lang/rust/commits/5168d7458a6fc532a3fcb672246898d696867264", "html_url": "https://github.com/rust-lang/rust/commit/5168d7458a6fc532a3fcb672246898d696867264"}], "stats": {"total": 62, "additions": 34, "deletions": 28}, "files": [{"sha": "6e550c2f3301ef1733e5a373769dec0d8b3d1e7f", "filename": "src/visitor.rs", "status": "modified", "additions": 34, "deletions": 28, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/92b3f69934efb61433223fc10888746e0c705afe/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92b3f69934efb61433223fc10888746e0c705afe/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=92b3f69934efb61433223fc10888746e0c705afe", "patch": "@@ -164,33 +164,7 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n \n         match item.node {\n             ast::Item_::ItemUse(ref vp) => {\n-                let vis = utils::format_visibility(item.vis);\n-                let offset = self.block_indent + vis.len() + \"use \".len();\n-                let context = RewriteContext {\n-                    codemap: self.codemap, config: self.config, block_indent: self.block_indent };\n-                // 1 = \";\"\n-                match vp.rewrite(&context, self.config.max_width - offset - 1, offset) {\n-                    Some(ref s) if s.len() == 0 => {\n-                        // Format up to last newline\n-                        let span = codemap::mk_sp(self.last_pos, item.span.lo);\n-                        let span_end = match self.snippet(span).rfind('\\n') {\n-                            Some(offset) => self.last_pos + BytePos(offset as u32),\n-                            None => item.span.lo\n-                        };\n-                        self.format_missing(span_end);\n-                        self.last_pos = item.span.hi;\n-                    }\n-                    Some(ref s) => {\n-                        let s = format!(\"{}use {};\", vis, s);\n-                        self.format_missing_with_indent(item.span.lo);\n-                        self.changes.push_str_span(item.span, &s);\n-                        self.last_pos = item.span.hi;\n-                    }\n-                    None => {\n-                        self.format_missing_with_indent(item.span.lo);\n-                    }\n-                }\n-                visit::walk_item(self, item);\n+                self.format_import(item.vis, vp, item.span);\n             }\n             ast::Item_::ItemImpl(..) |\n             ast::Item_::ItemTrait(..) => {\n@@ -211,7 +185,6 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                                   def,\n                                   generics,\n                                   item.span);\n-                self.last_pos = item.span.hi;\n             }\n             ast::Item_::ItemEnum(ref def, ref generics) => {\n                 self.format_missing_with_indent(item.span.lo);\n@@ -408,4 +381,37 @@ impl<'a> FmtVisitor<'a> {\n         self.last_pos = last_pos;\n         self.block_indent = block_indent;\n     }\n+\n+    fn format_import(&mut self, vis: ast::Visibility, vp: &ast::ViewPath, span: Span) {\n+        let vis = utils::format_visibility(vis);\n+        let offset = self.block_indent + vis.len() + \"use \".len();\n+        let context = RewriteContext {\n+            codemap: self.codemap,\n+            config: self.config,\n+            block_indent: self.block_indent,\n+        };\n+        // 1 = \";\"\n+        match vp.rewrite(&context, self.config.max_width - offset - 1, offset) {\n+            Some(ref s) if s.len() == 0 => {\n+                // Format up to last newline\n+                let prev_span = codemap::mk_sp(self.last_pos, span.lo);\n+                let span_end = match self.snippet(prev_span).rfind('\\n') {\n+                    Some(offset) => self.last_pos + BytePos(offset as u32),\n+                    None => span.lo\n+                };\n+                self.format_missing(span_end);\n+                self.last_pos = span.hi;\n+            }\n+            Some(ref s) => {\n+                let s = format!(\"{}use {};\", vis, s);\n+                self.format_missing_with_indent(span.lo);\n+                self.changes.push_str_span(span, &s);\n+                self.last_pos = span.hi;\n+            }\n+            None => {\n+                self.format_missing_with_indent(span.lo);\n+                self.format_missing(span.hi);\n+            }\n+        }\n+    }\n }"}]}