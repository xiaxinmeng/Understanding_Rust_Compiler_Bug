{"sha": "881d71a48941b716c9887c1335de58dc0e1fbe6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MWQ3MWE0ODk0MWI3MTZjOTg4N2MxMzM1ZGU1OGRjMGUxZmJlNmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-22T10:32:00Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-22T10:32:00Z"}, "message": "internal: reduce crate interdependence\n\nI don't think there's anything wrong with project_model depending on\nproc_macro_api directly -- fundamentally, both are about gluing our pure\ndata model to the messy outside world.\n\nHowever, it's easy enough to avoid the dependency, so why not.\n\nAs an additional consideration, `proc_macro_api` now pulls in `base_db`.\nproject_model should definitely not depend on that!", "tree": {"sha": "ad9f7f013fe9f6ecc4f79ed64e55651d329e5646", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad9f7f013fe9f6ecc4f79ed64e55651d329e5646"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/881d71a48941b716c9887c1335de58dc0e1fbe6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/881d71a48941b716c9887c1335de58dc0e1fbe6b", "html_url": "https://github.com/rust-lang/rust/commit/881d71a48941b716c9887c1335de58dc0e1fbe6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/881d71a48941b716c9887c1335de58dc0e1fbe6b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cef007bff78d5c8f36b16dccae1e7785bed8e49", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cef007bff78d5c8f36b16dccae1e7785bed8e49", "html_url": "https://github.com/rust-lang/rust/commit/5cef007bff78d5c8f36b16dccae1e7785bed8e49"}], "stats": {"total": 83, "additions": 43, "deletions": 40}, "files": [{"sha": "67119b892d90ce60d6ff20f8b2a3e56d59ca5cd5", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/881d71a48941b716c9887c1335de58dc0e1fbe6b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/881d71a48941b716c9887c1335de58dc0e1fbe6b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=881d71a48941b716c9887c1335de58dc0e1fbe6b", "patch": "@@ -1192,7 +1192,6 @@ dependencies = [\n  \"la-arena\",\n  \"log\",\n  \"paths\",\n- \"proc_macro_api\",\n  \"profile\",\n  \"rustc-hash\",\n  \"semver\",\n@@ -1329,6 +1328,7 @@ dependencies = [\n  \"mimalloc\",\n  \"oorandom\",\n  \"parking_lot\",\n+ \"proc_macro_api\",\n  \"proc_macro_srv\",\n  \"profile\",\n  \"project_model\","}, {"sha": "732e4952fa23eb5496f35c92315d4e7f17331f3b", "filename": "crates/project_model/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/881d71a48941b716c9887c1335de58dc0e1fbe6b/crates%2Fproject_model%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/881d71a48941b716c9887c1335de58dc0e1fbe6b/crates%2Fproject_model%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2FCargo.toml?ref=881d71a48941b716c9887c1335de58dc0e1fbe6b", "patch": "@@ -22,7 +22,6 @@ la-arena = { version = \"0.2.0\", path = \"../../lib/arena\" }\n cfg = { path = \"../cfg\", version = \"0.0.0\" }\n base_db = { path = \"../base_db\", version = \"0.0.0\" }\n toolchain = { path = \"../toolchain\", version = \"0.0.0\" }\n-proc_macro_api = { path = \"../proc_macro_api\", version = \"0.0.0\" }\n paths = { path = \"../paths\", version = \"0.0.0\" }\n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n profile = { path = \"../profile\", version = \"0.0.0\" }"}, {"sha": "e0fd75fcdcaead83e803aa9d03c36c3715f287ee", "filename": "crates/project_model/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/881d71a48941b716c9887c1335de58dc0e1fbe6b/crates%2Fproject_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881d71a48941b716c9887c1335de58dc0e1fbe6b/crates%2Fproject_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Flib.rs?ref=881d71a48941b716c9887c1335de58dc0e1fbe6b", "patch": "@@ -50,8 +50,6 @@ pub use crate::{\n     workspace::{CfgOverrides, PackageRoot, ProjectWorkspace},\n };\n \n-pub use proc_macro_api::ProcMacroClient;\n-\n #[derive(Debug, Clone, PartialEq, Eq, Hash, Ord, PartialOrd)]\n pub enum ProjectManifest {\n     ProjectJson(ManifestPath),"}, {"sha": "f2c998308f3e481ccb22b4b24cdbbc05587425c3", "filename": "crates/project_model/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/881d71a48941b716c9887c1335de58dc0e1fbe6b/crates%2Fproject_model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881d71a48941b716c9887c1335de58dc0e1fbe6b/crates%2Fproject_model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Ftests.rs?ref=881d71a48941b716c9887c1335de58dc0e1fbe6b", "patch": "@@ -84,9 +84,9 @@ fn rooted_project_json(data: ProjectJsonData) -> ProjectJson {\n }\n \n fn to_crate_graph(project_workspace: ProjectWorkspace) -> CrateGraph {\n-    project_workspace.to_crate_graph(None, {\n+    project_workspace.to_crate_graph(&mut |_| Vec::new(), &mut {\n         let mut counter = 0;\n-        &mut move |_path| {\n+        move |_path| {\n             counter += 1;\n             Some(FileId(counter))\n         }"}, {"sha": "d911209b075b6818ad9cd525cc17d39fabc5adc4", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/881d71a48941b716c9887c1335de58dc0e1fbe6b/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881d71a48941b716c9887c1335de58dc0e1fbe6b/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=881d71a48941b716c9887c1335de58dc0e1fbe6b", "patch": "@@ -8,7 +8,6 @@ use anyhow::{format_err, Context, Result};\n use base_db::{CrateDisplayName, CrateGraph, CrateId, CrateName, Edition, Env, FileId, ProcMacro};\n use cfg::{CfgDiff, CfgOptions};\n use paths::{AbsPath, AbsPathBuf};\n-use proc_macro_api::ProcMacroClient;\n use rustc_hash::{FxHashMap, FxHashSet};\n use stdx::always;\n \n@@ -350,19 +349,15 @@ impl ProjectWorkspace {\n \n     pub fn to_crate_graph(\n         &self,\n-        proc_macro_client: Option<&ProcMacroClient>,\n+        load_proc_macro: &mut dyn FnMut(&AbsPath) -> Vec<ProcMacro>,\n         load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     ) -> CrateGraph {\n         let _p = profile::span(\"ProjectWorkspace::to_crate_graph\");\n-        let proc_macro_loader = &mut |path: &AbsPath| match proc_macro_client {\n-            Some(client) => client.by_dylib_path(path),\n-            None => Vec::new(),\n-        };\n \n         let mut crate_graph = match self {\n             ProjectWorkspace::Json { project, sysroot, rustc_cfg } => project_json_to_crate_graph(\n                 rustc_cfg.clone(),\n-                proc_macro_loader,\n+                load_proc_macro,\n                 load,\n                 project,\n                 sysroot,\n@@ -377,7 +372,7 @@ impl ProjectWorkspace {\n             } => cargo_to_crate_graph(\n                 rustc_cfg.clone(),\n                 cfg_overrides,\n-                proc_macro_loader,\n+                load_proc_macro,\n                 load,\n                 cargo,\n                 build_scripts,\n@@ -399,7 +394,7 @@ impl ProjectWorkspace {\n \n fn project_json_to_crate_graph(\n     rustc_cfg: Vec<CfgFlag>,\n-    proc_macro_loader: &mut dyn FnMut(&AbsPath) -> Vec<ProcMacro>,\n+    load_proc_macro: &mut dyn FnMut(&AbsPath) -> Vec<ProcMacro>,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     project: &ProjectJson,\n     sysroot: &Option<Sysroot>,\n@@ -419,7 +414,7 @@ fn project_json_to_crate_graph(\n         })\n         .map(|(crate_id, krate, file_id)| {\n             let env = krate.env.clone().into_iter().collect();\n-            let proc_macro = krate.proc_macro_dylib_path.clone().map(|it| proc_macro_loader(&it));\n+            let proc_macro = krate.proc_macro_dylib_path.clone().map(|it| load_proc_macro(&it));\n \n             let target_cfgs = match krate.target.as_deref() {\n                 Some(target) => {\n@@ -476,7 +471,7 @@ fn project_json_to_crate_graph(\n fn cargo_to_crate_graph(\n     rustc_cfg: Vec<CfgFlag>,\n     override_cfg: &CfgOverrides,\n-    proc_macro_loader: &mut dyn FnMut(&AbsPath) -> Vec<ProcMacro>,\n+    load_proc_macro: &mut dyn FnMut(&AbsPath) -> Vec<ProcMacro>,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     cargo: &CargoWorkspace,\n     build_scripts: &WorkspaceBuildScripts,\n@@ -528,7 +523,7 @@ fn cargo_to_crate_graph(\n                     &cargo[pkg],\n                     build_scripts.outputs.get(pkg),\n                     &cfg_options,\n-                    proc_macro_loader,\n+                    load_proc_macro,\n                     file_id,\n                     &cargo[tgt].name,\n                 );\n@@ -599,7 +594,7 @@ fn cargo_to_crate_graph(\n                 load,\n                 &mut crate_graph,\n                 &cfg_options,\n-                proc_macro_loader,\n+                load_proc_macro,\n                 &mut pkg_to_lib_crate,\n                 &public_deps,\n                 cargo,\n@@ -658,7 +653,7 @@ fn handle_rustc_crates(\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     crate_graph: &mut CrateGraph,\n     cfg_options: &CfgOptions,\n-    proc_macro_loader: &mut dyn FnMut(&AbsPath) -> Vec<ProcMacro>,\n+    load_proc_macro: &mut dyn FnMut(&AbsPath) -> Vec<ProcMacro>,\n     pkg_to_lib_crate: &mut FxHashMap<la_arena::Idx<crate::PackageData>, CrateId>,\n     public_deps: &[(CrateName, CrateId)],\n     cargo: &CargoWorkspace,\n@@ -694,7 +689,7 @@ fn handle_rustc_crates(\n                         &rustc_workspace[pkg],\n                         None,\n                         cfg_options,\n-                        proc_macro_loader,\n+                        load_proc_macro,\n                         file_id,\n                         &rustc_workspace[tgt].name,\n                     );\n@@ -750,7 +745,7 @@ fn add_target_crate_root(\n     pkg: &PackageData,\n     build_data: Option<&BuildScriptOutput>,\n     cfg_options: &CfgOptions,\n-    proc_macro_loader: &mut dyn FnMut(&AbsPath) -> Vec<ProcMacro>,\n+    load_proc_macro: &mut dyn FnMut(&AbsPath) -> Vec<ProcMacro>,\n     file_id: FileId,\n     cargo_name: &str,\n ) -> CrateId {\n@@ -778,7 +773,7 @@ fn add_target_crate_root(\n     let proc_macro = build_data\n         .as_ref()\n         .and_then(|it| it.proc_macro_dylib_path.as_ref())\n-        .map(|it| proc_macro_loader(it))\n+        .map(|it| load_proc_macro(it))\n         .unwrap_or_default();\n \n     let display_name = CrateDisplayName::from_canonical_name(cargo_name.to_string());"}, {"sha": "3c9e052a69fd224769b68e6bb906570d3c2890f8", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/881d71a48941b716c9887c1335de58dc0e1fbe6b/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/881d71a48941b716c9887c1335de58dc0e1fbe6b/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=881d71a48941b716c9887c1335de58dc0e1fbe6b", "patch": "@@ -39,6 +39,7 @@ tracing = \"0.1\"\n tracing-subscriber = { version = \"0.2\", default-features = false, features = [\"env-filter\", \"registry\"] }\n tracing-tree = { version = \"0.1.4\" }\n always-assert = \"0.1\"\n+\n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n flycheck = { path = \"../flycheck\", version = \"0.0.0\" }\n ide = { path = \"../ide\", version = \"0.0.0\" }\n@@ -51,6 +52,7 @@ vfs = { path = \"../vfs\", version = \"0.0.0\" }\n vfs-notify = { path = \"../vfs-notify\", version = \"0.0.0\" }\n cfg = { path = \"../cfg\", version = \"0.0.0\" }\n toolchain = { path = \"../toolchain\", version = \"0.0.0\" }\n+proc_macro_api = { path = \"../proc_macro_api\", version = \"0.0.0\" }\n \n # This should only be used in CLI\n ide_ssr = { path = \"../ide_ssr\", version = \"0.0.0\" }"}, {"sha": "9fe81cc8f6b30e85351699ad49120cd8ffb99a99", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/881d71a48941b716c9887c1335de58dc0e1fbe6b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881d71a48941b716c9887c1335de58dc0e1fbe6b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=881d71a48941b716c9887c1335de58dc0e1fbe6b", "patch": "@@ -7,9 +7,8 @@ use crossbeam_channel::{unbounded, Receiver};\n use hir::db::DefDatabase;\n use ide::{AnalysisHost, Change};\n use ide_db::base_db::CrateGraph;\n-use project_model::{\n-    CargoConfig, ProcMacroClient, ProjectManifest, ProjectWorkspace, WorkspaceBuildScripts,\n-};\n+use proc_macro_api::ProcMacroClient;\n+use project_model::{CargoConfig, ProjectManifest, ProjectWorkspace, WorkspaceBuildScripts};\n use vfs::{loader::Handle, AbsPath, AbsPathBuf};\n \n use crate::reload::{ProjectFolders, SourceRootConfig};\n@@ -69,12 +68,17 @@ pub fn load_workspace(\n         WorkspaceBuildScripts::default()\n     });\n \n-    let crate_graph = ws.to_crate_graph(proc_macro_client.as_ref(), &mut |path: &AbsPath| {\n-        let contents = loader.load_sync(path);\n-        let path = vfs::VfsPath::from(path.to_path_buf());\n-        vfs.set_file_contents(path.clone(), contents);\n-        vfs.file_id(&path)\n-    });\n+    let crate_graph = ws.to_crate_graph(\n+        &mut |path: &AbsPath| {\n+            proc_macro_client.as_ref().map(|it| it.by_dylib_path(path)).unwrap_or_default()\n+        },\n+        &mut |path: &AbsPath| {\n+            let contents = loader.load_sync(path);\n+            let path = vfs::VfsPath::from(path.to_path_buf());\n+            vfs.set_file_contents(path.clone(), contents);\n+            vfs.file_id(&path)\n+        },\n+    );\n \n     let project_folders = ProjectFolders::new(&[ws], &[]);\n     loader.set_config(vfs::loader::Config {"}, {"sha": "da224ed588dfa4485d59c209e6167eed22b49d79", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/881d71a48941b716c9887c1335de58dc0e1fbe6b/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881d71a48941b716c9887c1335de58dc0e1fbe6b/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=881d71a48941b716c9887c1335de58dc0e1fbe6b", "patch": "@@ -11,9 +11,8 @@ use ide::{Analysis, AnalysisHost, Cancellable, Change, FileId};\n use ide_db::base_db::CrateId;\n use lsp_types::{SemanticTokens, Url};\n use parking_lot::{Mutex, RwLock};\n-use project_model::{\n-    CargoWorkspace, ProcMacroClient, ProjectWorkspace, Target, WorkspaceBuildScripts,\n-};\n+use proc_macro_api::ProcMacroClient;\n+use project_model::{CargoWorkspace, ProjectWorkspace, Target, WorkspaceBuildScripts};\n use rustc_hash::FxHashMap;\n use vfs::AnchoredPathBuf;\n "}, {"sha": "f8c770ccf4031fdbb5c8e3ca59be5bc2b2266c2e", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/881d71a48941b716c9887c1335de58dc0e1fbe6b/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881d71a48941b716c9887c1335de58dc0e1fbe6b/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=881d71a48941b716c9887c1335de58dc0e1fbe6b", "patch": "@@ -5,7 +5,8 @@ use flycheck::{FlycheckConfig, FlycheckHandle};\n use hir::db::DefDatabase;\n use ide::Change;\n use ide_db::base_db::{CrateGraph, SourceRoot, VfsPath};\n-use project_model::{ProcMacroClient, ProjectWorkspace, WorkspaceBuildScripts};\n+use proc_macro_api::ProcMacroClient;\n+use project_model::{ProjectWorkspace, WorkspaceBuildScripts};\n use vfs::{file_set::FileSetConfig, AbsPath, AbsPathBuf, ChangeKind};\n \n use crate::{\n@@ -396,11 +397,15 @@ impl GlobalState {\n \n         // Create crate graph from all the workspaces\n         let crate_graph = {\n-            let mut crate_graph = CrateGraph::default();\n+            let proc_macro_client = self.proc_macro_client.as_ref();\n+            let mut load_proc_macro = move |path: &AbsPath| {\n+                proc_macro_client.map(|it| it.by_dylib_path(path)).unwrap_or_default()\n+            };\n+\n             let vfs = &mut self.vfs.write().0;\n             let loader = &mut self.loader;\n             let mem_docs = &self.mem_docs;\n-            let mut load = |path: &AbsPath| {\n+            let mut load = move |path: &AbsPath| {\n                 let _p = profile::span(\"GlobalState::load\");\n                 let vfs_path = vfs::VfsPath::from(path.to_path_buf());\n                 if !mem_docs.contains(&vfs_path) {\n@@ -413,10 +418,11 @@ impl GlobalState {\n                 }\n                 res\n             };\n+\n+            let mut crate_graph = CrateGraph::default();\n             for ws in self.workspaces.iter() {\n-                crate_graph.extend(ws.to_crate_graph(self.proc_macro_client.as_ref(), &mut load));\n+                crate_graph.extend(ws.to_crate_graph(&mut load_proc_macro, &mut load));\n             }\n-\n             crate_graph\n         };\n         change.set_crate_graph(crate_graph);"}]}