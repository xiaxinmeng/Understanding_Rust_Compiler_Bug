{"sha": "12ec2f0e34e230a5d95d7ef06c6de92efcdcbedf", "node_id": "C_kwDOAAsO6NoAKDEyZWMyZjBlMzRlMjMwYTVkOTVkN2VmMDZjNmRlOTJlZmNkY2JlZGY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-29T03:24:30Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-09-12T23:55:59Z"}, "message": "Construct dyn* during const interp", "tree": {"sha": "9473b38dfac7be6716b52e839d3182dacf72cb04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9473b38dfac7be6716b52e839d3182dacf72cb04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12ec2f0e34e230a5d95d7ef06c6de92efcdcbedf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12ec2f0e34e230a5d95d7ef06c6de92efcdcbedf", "html_url": "https://github.com/rust-lang/rust/commit/12ec2f0e34e230a5d95d7ef06c6de92efcdcbedf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12ec2f0e34e230a5d95d7ef06c6de92efcdcbedf/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12353c11ca2848c15511d3b3d400fca412daff7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/12353c11ca2848c15511d3b3d400fca412daff7b", "html_url": "https://github.com/rust-lang/rust/commit/12353c11ca2848c15511d3b3d400fca412daff7b"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "0c7cd43eb27d64ab715dd9008c51bce26ae0d4ae", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ec2f0e34e230a5d95d7ef06c6de92efcdcbedf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ec2f0e34e230a5d95d7ef06c6de92efcdcbedf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=12ec2f0e34e230a5d95d7ef06c6de92efcdcbedf", "patch": "@@ -907,7 +907,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         llargs.push(data_ptr);\n                         continue;\n                     }\n-                    _ => span_bug!(span, \"can't codegen a virtual call on {:?}\", op),\n+                    _ => span_bug!(span, \"can't codegen a virtual call on {:#?}\", op),\n                 }\n             }\n "}, {"sha": "6831e53d0141287457331188bd4d458c332a3efa", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/12ec2f0e34e230a5d95d7ef06c6de92efcdcbedf/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ec2f0e34e230a5d95d7ef06c6de92efcdcbedf/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=12ec2f0e34e230a5d95d7ef06c6de92efcdcbedf", "patch": "@@ -110,7 +110,18 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             DynStar => {\n-                unimplemented!()\n+                if let ty::Dynamic(data, _, ty::TraitObjectRepresentation::Sized) = cast_ty.kind() {\n+                    // Initial cast from sized to dyn trait\n+                    let vtable = self.get_vtable_ptr(src.layout.ty, data.principal())?;\n+                    let ptr = self.read_immediate(src)?.to_scalar();\n+                    // FIXME(dyn-star): This should not use new_dyn_trait, but\n+                    // it does exactly the same thing (makes a scalar pair)...\n+                    // so maybe we should just duplicate/rename the function.\n+                    let val = Immediate::new_dyn_trait(ptr, vtable, &*self.tcx);\n+                    self.write_immediate(val, dest)?;\n+                } else {\n+                    bug!()\n+                }\n             }\n         }\n         Ok(())"}, {"sha": "c0d21250c3030803bc75021ee8a5e8dad0fbb82a", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12ec2f0e34e230a5d95d7ef06c6de92efcdcbedf/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ec2f0e34e230a5d95d7ef06c6de92efcdcbedf/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=12ec2f0e34e230a5d95d7ef06c6de92efcdcbedf", "patch": "@@ -2545,15 +2545,9 @@ where\n                     }\n                 }\n \n-                // dyn*\n+                // dyn* (both fields are usize-sized)\n                 ty::Dynamic(_, _, TraitObjectRepresentation::Sized) => {\n-                    TyMaybeWithLayout::TyAndLayout(\n-                        tcx.layout_of(\n-                            ty::ParamEnv::reveal_all()\n-                                .and(tcx.mk_tup([tcx.types.usize, tcx.types.usize].into_iter())),\n-                        )\n-                        .unwrap(),\n-                    )\n+                    TyMaybeWithLayout::Ty(tcx.types.usize)\n                 }\n \n                 ty::Projection(_)"}, {"sha": "315bc1a27412fa5c9d3585ae23e10f8a96157709", "filename": "src/test/ui/async-await/dyn-star-trait-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ec2f0e34e230a5d95d7ef06c6de92efcdcbedf/src%2Ftest%2Fui%2Fasync-await%2Fdyn-star-trait-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ec2f0e34e230a5d95d7ef06c6de92efcdcbedf/src%2Ftest%2Fui%2Fasync-await%2Fdyn-star-trait-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdyn-star-trait-const.rs?ref=12ec2f0e34e230a5d95d7ef06c6de92efcdcbedf", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n-// ignore-test\n #![feature(async_fn_in_traits)]\n+#![allow(unused)]\n \n use std::fmt::Debug;\n "}]}