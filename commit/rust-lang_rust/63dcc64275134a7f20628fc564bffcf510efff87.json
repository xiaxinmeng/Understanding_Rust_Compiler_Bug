{"sha": "63dcc64275134a7f20628fc564bffcf510efff87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzZGNjNjQyNzUxMzRhN2YyMDYyOGZjNTY0YmZmY2Y1MTBlZmZmODc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-16T21:53:17Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-17T05:12:34Z"}, "message": "rustdoc: Change fndoc's arg list to a vec from map", "tree": {"sha": "ce2ef381f4438d1bebe3c0d8c8075bb40479fca0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce2ef381f4438d1bebe3c0d8c8075bb40479fca0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63dcc64275134a7f20628fc564bffcf510efff87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63dcc64275134a7f20628fc564bffcf510efff87", "html_url": "https://github.com/rust-lang/rust/commit/63dcc64275134a7f20628fc564bffcf510efff87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63dcc64275134a7f20628fc564bffcf510efff87/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6ad840c18e9753582ffcef87735297ee35e0885", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6ad840c18e9753582ffcef87735297ee35e0885", "html_url": "https://github.com/rust-lang/rust/commit/b6ad840c18e9753582ffcef87735297ee35e0885"}], "stats": {"total": 38, "additions": 14, "deletions": 24}, "files": [{"sha": "cf29791fd5f9984bc0f4cb652176710fbd2820ad", "filename": "src/rustdoc/attr_parser.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/63dcc64275134a7f20628fc564bffcf510efff87/src%2Frustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63dcc64275134a7f20628fc564bffcf510efff87/src%2Frustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_parser.rs?ref=63dcc64275134a7f20628fc564bffcf510efff87", "patch": "@@ -1,4 +1,3 @@\n-import std::map;\n import rustc::syntax::ast;\n \n export parse_fn;\n@@ -8,7 +7,6 @@ fn parse_fn(\n     id: ast::node_id,\n     attrs: [ast::attribute]\n ) -> doc::fndoc {\n-    let noargdocs = map::new_str_hash::<str>();\n     let _fndoc = none;\n     for attr: ast::attribute in attrs {\n         alt attr.node.value.node {\n@@ -20,7 +18,7 @@ fn parse_fn(\n                     brief: value,\n                     desc: none,\n                     return: none,\n-                    args: noargdocs\n+                    args: []\n                 });\n             }\n             ast::meta_list(\"doc\", docs) {\n@@ -39,7 +37,7 @@ fn parse_fn(\n               brief: \"_undocumented_\",\n               desc: none,\n               return: none,\n-              args: noargdocs\n+              args: []\n           }\n         }\n     };\n@@ -67,7 +65,7 @@ fn parse_fn_(\n     let brief = none;\n     let desc = none;\n     let return = none;\n-    let argdocs = map::new_str_hash::<str>();\n+    let argdocs = [];\n     let argdocsfound = none;\n     for item: @ast::meta_item in items {\n         alt item.node {\n@@ -95,10 +93,10 @@ fn parse_fn_(\n         some(ds) {\n             for d: @ast::meta_item in ds {\n                 alt d.node {\n-                    ast::meta_name_value(key, {node: ast::lit_str(value),\n-                                               span: _}) {\n-                        argdocs.insert(key, value);\n-                    }\n+                  ast::meta_name_value(key, {node: ast::lit_str(value),\n+                                             span: _}) {\n+                    argdocs += [(key, value)];\n+                  }\n                 }\n             }\n         }\n@@ -146,7 +144,7 @@ mod tests {\n         assert doc.brief == \"_undocumented_\";\n         assert doc.desc == none;\n         assert doc.return == none;\n-        assert doc.args.size() == 0u;\n+        assert vec::len(doc.args) == 0u;\n     }\n \n     #[test]\n@@ -186,8 +184,8 @@ mod tests {\n         let source = \"#[doc(args(a = \\\"arg a\\\", b = \\\"arg b\\\"))]\";\n         let attrs = parse_attributes(source);\n         let doc = parse_fn(\"f\", 0, attrs);\n-        assert doc.args.get(\"a\") == \"arg a\";\n-        assert doc.args.get(\"b\") == \"arg b\";\n+        assert doc.args[0] == (\"a\", \"arg a\");\n+        assert doc.args[1] == (\"b\", \"arg b\");\n     }\n \n     #[test]"}, {"sha": "a527dbb452172bfd7e93d9a52d8de87b9af915f3", "filename": "src/rustdoc/doc.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63dcc64275134a7f20628fc564bffcf510efff87/src%2Frustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63dcc64275134a7f20628fc564bffcf510efff87/src%2Frustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdoc.rs?ref=63dcc64275134a7f20628fc564bffcf510efff87", "patch": "@@ -1,5 +1,3 @@\n-import std::map;\n-\n type ast_id = int;\n \n type cratedoc = ~{\n@@ -18,7 +16,7 @@ type fndoc = ~{\n     brief: str,\n     desc: option::t<str>,\n     return: option::t<str>,\n-    args: map::hashmap<str, str>\n+    args: [(str, str)]\n };\n \n // Just to break the structural recursive types"}, {"sha": "a4e899fce8f5bfb8281029e29eeccccab6bbf4ec", "filename": "src/rustdoc/gen.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/63dcc64275134a7f20628fc564bffcf510efff87/src%2Frustdoc%2Fgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63dcc64275134a7f20628fc564bffcf510efff87/src%2Frustdoc%2Fgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fgen.rs?ref=63dcc64275134a7f20628fc564bffcf510efff87", "patch": "@@ -98,15 +98,9 @@ fn write_fndoc(ctxt: ctxt, ident: str, doc: doc::fndoc, decl: ast::fn_decl) {\n         }\n         none. { }\n     }\n-    for arg: ast::arg in decl.inputs {\n-        ctxt.w.write_str(\"### Argument `\" + arg.ident + \"`: \");\n-        ctxt.w.write_line(\"`\" + pprust::ty_to_str(arg.ty) + \"`\");\n-        alt doc.args.find(arg.ident) {\n-            some(_d) {\n-                ctxt.w.write_line(_d);\n-            }\n-            none. { }\n-        };\n+    for (arg, desc) in doc.args {\n+        ctxt.w.write_str(\"### Argument `\" + arg + \"`: \");\n+        ctxt.w.write_str(desc);\n     }\n     ctxt.w.write_line(\"### Returns `\" + pprust::ty_to_str(decl.output) + \"`\");\n     alt doc.return {"}]}