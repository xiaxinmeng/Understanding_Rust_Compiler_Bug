{"sha": "90843b6f58a042cd1548555064a80034a608c02b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwODQzYjZmNThhMDQyY2QxNTQ4NTU1MDY0YTgwMDM0YTYwOGMwMmI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-06-20T19:15:16Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-07-08T17:53:44Z"}, "message": "extra: Patch up code that was using irrefutable patterns incorrectly.", "tree": {"sha": "e1072733da00d7066e05203a48665375e453caef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1072733da00d7066e05203a48665375e453caef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90843b6f58a042cd1548555064a80034a608c02b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90843b6f58a042cd1548555064a80034a608c02b", "html_url": "https://github.com/rust-lang/rust/commit/90843b6f58a042cd1548555064a80034a608c02b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90843b6f58a042cd1548555064a80034a608c02b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "366a233dbda597192b5ad027fe79f58331bc1bed", "url": "https://api.github.com/repos/rust-lang/rust/commits/366a233dbda597192b5ad027fe79f58331bc1bed", "html_url": "https://github.com/rust-lang/rust/commit/366a233dbda597192b5ad027fe79f58331bc1bed"}], "stats": {"total": 47, "additions": 24, "deletions": 23}, "files": [{"sha": "de6edd540948d48bf67e279499be3e36da3b8c1e", "filename": "src/libextra/fileinput.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/90843b6f58a042cd1548555064a80034a608c02b/src%2Flibextra%2Ffileinput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90843b6f58a042cd1548555064a80034a608c02b/src%2Flibextra%2Ffileinput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffileinput.rs?ref=90843b6f58a042cd1548555064a80034a608c02b", "patch": "@@ -419,7 +419,7 @@ mod test {\n         let file = io::file_writer(path, [io::Create, io::Truncate]).get();\n \n         for contents.iter().advance |&str| {\n-            file.write_str(str);\n+            file.write_str(*str);\n             file.write_char('\\n');\n         }\n     }\n@@ -445,7 +445,7 @@ mod test {\n             |i| fmt!(\"tmp/lib-fileinput-test-fileinput-read-byte-%u.tmp\", i)), true);\n \n         // 3 files containing 0\\n, 1\\n, and 2\\n respectively\n-        for filenames.iter().enumerate().advance |(i, &filename)| {\n+        for filenames.iter().enumerate().advance |(i, filename)| {\n             make_file(filename.get_ref(), [fmt!(\"%u\", i)]);\n         }\n \n@@ -475,7 +475,7 @@ mod test {\n             |i| fmt!(\"tmp/lib-fileinput-test-fileinput-read-%u.tmp\", i)), true);\n \n         // 3 files containing 1\\n, 2\\n, and 3\\n respectively\n-        for filenames.iter().enumerate().advance |(i, &filename)| {\n+        for filenames.iter().enumerate().advance |(i, filename)| {\n             make_file(filename.get_ref(), [fmt!(\"%u\", i)]);\n         }\n \n@@ -495,10 +495,11 @@ mod test {\n             3,\n             |i| fmt!(\"tmp/lib-fileinput-test-input-vec-%u.tmp\", i)), true);\n \n-        for filenames.iter().enumerate().advance |(i, &filename)| {\n+        for filenames.iter().enumerate().advance |(i, filename)| {\n             let contents =\n                 vec::from_fn(3, |j| fmt!(\"%u %u\", i, j));\n             make_file(filename.get_ref(), contents);\n+            debug!(\"contents=%?\", contents);\n             all_lines.push_all(contents);\n         }\n \n@@ -515,7 +516,7 @@ mod test {\n             3,\n             |i| fmt!(\"tmp/lib-fileinput-test-input-vec-state-%u.tmp\", i)),true);\n \n-        for filenames.iter().enumerate().advance |(i, &filename)| {\n+        for filenames.iter().enumerate().advance |(i, filename)| {\n             let contents =\n                 vec::from_fn(3, |j| fmt!(\"%u %u\", i, j + 1));\n             make_file(filename.get_ref(), contents);\n@@ -579,10 +580,10 @@ mod test {\n             3,\n             |i| fmt!(\"tmp/lib-fileinput-test-next-file-%u.tmp\", i)),true);\n \n-        for filenames.iter().enumerate().advance |(i, &filename)| {\n+        for filenames.iter().enumerate().advance |(i, filename)| {\n             let contents =\n                 vec::from_fn(3, |j| fmt!(\"%u %u\", i, j + 1));\n-            make_file(&filename.get(), contents);\n+            make_file(filename.get_ref(), contents);\n         }\n \n         let in = FileInput::from_vec(filenames);"}, {"sha": "918424748990a281f473bb6c7f1e7b6702005c09", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/90843b6f58a042cd1548555064a80034a608c02b/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90843b6f58a042cd1548555064a80034a608c02b/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=90843b6f58a042cd1548555064a80034a608c02b", "patch": "@@ -1571,10 +1571,10 @@ mod biguint_tests {\n     fn test_to_str_radix() {\n         let r = to_str_pairs();\n         for r.iter().advance |num_pair| {\n-            let &(n, rs) = num_pair;\n+            let &(ref n, ref rs) = num_pair;\n             for rs.iter().advance |str_pair| {\n-                let &(radix, str) = str_pair;\n-                assert_eq!(n.to_str_radix(radix), str);\n+                let &(ref radix, ref str) = str_pair;\n+                assert_eq!(&n.to_str_radix(*radix), str);\n             }\n         }\n     }\n@@ -1583,10 +1583,10 @@ mod biguint_tests {\n     fn test_from_str_radix() {\n         let r = to_str_pairs();\n         for r.iter().advance |num_pair| {\n-            let &(n, rs) = num_pair;\n+            let &(ref n, ref rs) = num_pair;\n             for rs.iter().advance |str_pair| {\n-                let &(radix, str) = str_pair;\n-                assert_eq!(&n, &FromStrRadix::from_str_radix(str, radix).get());\n+                let &(ref radix, ref str) = str_pair;\n+                assert_eq!(&n, &FromStrRadix::from_str_radix(*str, *radix).get());\n             }\n         }\n "}, {"sha": "7cc8bca891077a08925be70420a1cad21c8cad33", "filename": "src/libextra/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90843b6f58a042cd1548555064a80034a608c02b/src%2Flibextra%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90843b6f58a042cd1548555064a80034a608c02b/src%2Flibextra%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frc.rs?ref=90843b6f58a042cd1548555064a80034a608c02b", "patch": "@@ -73,7 +73,7 @@ impl<T> Drop for Rc<T> {\n             if self.ptr.is_not_null() {\n                 (*self.ptr).count -= 1;\n                 if (*self.ptr).count == 0 {\n-                    ptr::replace_ptr(self.ptr, intrinsics::uninit());\n+                    ptr::read_ptr(self.ptr);\n                     free(self.ptr as *c_void)\n                 }\n             }"}, {"sha": "f25d192cc0a9fd8d57176751dc77221bcb49122c", "filename": "src/libextra/terminfo/parm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90843b6f58a042cd1548555064a80034a608c02b/src%2Flibextra%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90843b6f58a042cd1548555064a80034a608c02b/src%2Flibextra%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fparm.rs?ref=90843b6f58a042cd1548555064a80034a608c02b", "patch": "@@ -81,8 +81,8 @@ pub fn expand(cap: &[u8], params: &[Param], vars: &mut Variables)\n \n     // Copy parameters into a local vector for mutability\n     let mut mparams = [Number(0), ..9];\n-    for mparams.mut_iter().zip(params.iter()).advance |(dst, &src)| {\n-        *dst = src;\n+    for mparams.mut_iter().zip(params.iter()).advance |(dst, src)| {\n+        *dst = copy *src;\n     }\n \n     for cap.iter().transform(|&x| x).advance |c| {"}, {"sha": "f2dea8b9bbaf30ccfc1b8b9f89d9a1327276c682", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/90843b6f58a042cd1548555064a80034a608c02b/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90843b6f58a042cd1548555064a80034a608c02b/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=90843b6f58a042cd1548555064a80034a608c02b", "patch": "@@ -773,15 +773,15 @@ mod test_treemap {\n                                             map: &TreeMap<K, V>) {\n         assert_eq!(ctrl.is_empty(), map.is_empty());\n         for ctrl.iter().advance |x| {\n-            let &(k, v) = x;\n-            assert!(map.find(&k).unwrap() == &v)\n+            let &(ref k, ref v) = x;\n+            assert!(map.find(k).unwrap() == v)\n         }\n         for map.iter().advance |(map_k, map_v)| {\n             let mut found = false;\n             for ctrl.iter().advance |x| {\n-                let &(ctrl_k, ctrl_v) = x;\n-                if *map_k == ctrl_k {\n-                    assert!(*map_v == ctrl_v);\n+                let &(ref ctrl_k, ref ctrl_v) = x;\n+                if *map_k == *ctrl_k {\n+                    assert!(*map_v == *ctrl_v);\n                     found = true;\n                     break;\n                 }"}, {"sha": "e7bec2fbd8d1cc2e60b44762f924fed1a102a8da", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90843b6f58a042cd1548555064a80034a608c02b/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90843b6f58a042cd1548555064a80034a608c02b/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=90843b6f58a042cd1548555064a80034a608c02b", "patch": "@@ -157,8 +157,8 @@ impl<D:Decoder> Decodable<D> for WorkMap {\n     fn decode(d: &mut D) -> WorkMap {\n         let v : ~[(WorkKey,~str)] = Decodable::decode(d);\n         let mut w = WorkMap::new();\n-        for v.iter().advance |&(k, v)| {\n-            w.insert(copy k, copy v);\n+        for v.iter().advance |pair| {\n+            w.insert(pair.first(), pair.second());\n         }\n         w\n     }"}]}