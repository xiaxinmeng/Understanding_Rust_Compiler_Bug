{"sha": "42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "node_id": "C_kwDOAAsO6NoAKDQyZmE4YWM3MjM2ZjRmNzhhODJhZWVhNTQzYmRkNDQ1YTU5ZjAyZTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-26T13:05:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-26T13:05:57Z"}, "message": "Auto merge of #101037 - GuillaumeGomez:rollup-opn6kj1, r=GuillaumeGomez\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #95005 (BTree: evaluate static type-related check at compile time)\n - #99742 (Add comments about stdout locking)\n - #100128 (Document that `RawWakerVTable` functions must be thread-safe.)\n - #100956 (Reduce right-side DOM size)\n - #101006 (Fix doc cfg on reexports)\n - #101012 (rustdoc: remove unused CSS for `.variants_table`)\n - #101023 (rustdoc: remove `type=\"text/css\"` from stylesheet links)\n - #101031 (Remove unused build dependency)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "189b78de701b449ef471283a77352ca27b9d11de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/189b78de701b449ef471283a77352ca27b9d11de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "html_url": "https://github.com/rust-lang/rust/commit/42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a13871b69924b74cfa1d737f2894068b37ea7ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a13871b69924b74cfa1d737f2894068b37ea7ea", "html_url": "https://github.com/rust-lang/rust/commit/8a13871b69924b74cfa1d737f2894068b37ea7ea"}, {"sha": "c391ba0b108fffb162beb4f7047d4a88a9161fe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c391ba0b108fffb162beb4f7047d4a88a9161fe5", "html_url": "https://github.com/rust-lang/rust/commit/c391ba0b108fffb162beb4f7047d4a88a9161fe5"}], "stats": {"total": 466, "additions": 363, "deletions": 103}, "files": [{"sha": "be5ceeb5f1341e7277dda9a95cc039f33c2443a8", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "patch": "@@ -1280,7 +1280,6 @@ name = \"error_index_generator\"\n version = \"0.0.0\"\n dependencies = [\n  \"rustdoc\",\n- \"walkdir\",\n ]\n \n [[package]]"}, {"sha": "f1d2d3b30d9e244c3771859365d871e1f2a0b5b2", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "patch": "@@ -318,7 +318,7 @@ impl<BorrowType: marker::BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type>\n     pub fn ascend(\n         self,\n     ) -> Result<Handle<NodeRef<BorrowType, K, V, marker::Internal>, marker::Edge>, Self> {\n-        assert!(BorrowType::PERMITS_TRAVERSAL);\n+        let _ = BorrowType::TRAVERSAL_PERMIT;\n         // We need to use raw pointers to nodes because, if BorrowType is marker::ValMut,\n         // there might be outstanding mutable references to values that we must not invalidate.\n         let leaf_ptr: *const _ = Self::as_leaf_ptr(&self);\n@@ -1003,7 +1003,7 @@ impl<BorrowType: marker::BorrowType, K, V>\n     /// `edge.descend().ascend().unwrap()` and `node.ascend().unwrap().descend()` should\n     /// both, upon success, do nothing.\n     pub fn descend(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n-        assert!(BorrowType::PERMITS_TRAVERSAL);\n+        let _ = BorrowType::TRAVERSAL_PERMIT;\n         // We need to use raw pointers to nodes because, if BorrowType is\n         // marker::ValMut, there might be outstanding mutable references to\n         // values that we must not invalidate. There's no worry accessing the\n@@ -1666,15 +1666,17 @@ pub mod marker {\n     pub struct ValMut<'a>(PhantomData<&'a mut ()>);\n \n     pub trait BorrowType {\n-        // Whether node references of this borrow type allow traversing\n-        // to other nodes in the tree.\n-        const PERMITS_TRAVERSAL: bool = true;\n+        // If node references of this borrow type allow traversing to other\n+        // nodes in the tree, this constant can be evaluated. Thus reading it\n+        // serves as a compile-time assertion.\n+        const TRAVERSAL_PERMIT: () = ();\n     }\n     impl BorrowType for Owned {\n-        // Traversal isn't needed, it happens using the result of `borrow_mut`.\n+        // Reject evaluation, because traversal isn't needed. Instead traversal\n+        // happens using the result of `borrow_mut`.\n         // By disabling traversal, and only creating new references to roots,\n         // we know that every reference of the `Owned` type is to a root node.\n-        const PERMITS_TRAVERSAL: bool = false;\n+        const TRAVERSAL_PERMIT: () = panic!();\n     }\n     impl BorrowType for Dying {}\n     impl<'a> BorrowType for Immut<'a> {}"}, {"sha": "60ecc9c0bdb1cbdc5d395627eee4d9935d0c0ecf", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 38, "deletions": 12, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "patch": "@@ -71,6 +71,12 @@ impl RawWaker {\n /// pointer of a properly constructed [`RawWaker`] object from inside the\n /// [`RawWaker`] implementation. Calling one of the contained functions using\n /// any other `data` pointer will cause undefined behavior.\n+///\n+/// These functions must all be thread-safe (even though [`RawWaker`] is\n+/// <code>\\![Send] + \\![Sync]</code>)\n+/// because [`Waker`] is <code>[Send] + [Sync]</code>, and thus wakers may be moved to\n+/// arbitrary threads or invoked by `&` reference. For example, this means that if the\n+/// `clone` and `drop` functions manage a reference count, they must do so atomically.\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n #[derive(PartialEq, Copy, Clone, Debug)]\n pub struct RawWakerVTable {\n@@ -110,6 +116,12 @@ impl RawWakerVTable {\n     /// Creates a new `RawWakerVTable` from the provided `clone`, `wake`,\n     /// `wake_by_ref`, and `drop` functions.\n     ///\n+    /// These functions must all be thread-safe (even though [`RawWaker`] is\n+    /// <code>\\![Send] + \\![Sync]</code>)\n+    /// because [`Waker`] is <code>[Send] + [Sync]</code>, and thus wakers may be moved to\n+    /// arbitrary threads or invoked by `&` reference. For example, this means that if the\n+    /// `clone` and `drop` functions manage a reference count, they must do so atomically.\n+    ///\n     /// # `clone`\n     ///\n     /// This function will be called when the [`RawWaker`] gets cloned, e.g. when\n@@ -157,9 +169,9 @@ impl RawWakerVTable {\n     }\n }\n \n-/// The `Context` of an asynchronous task.\n+/// The context of an asynchronous task.\n ///\n-/// Currently, `Context` only serves to provide access to a `&Waker`\n+/// Currently, `Context` only serves to provide access to a [`&Waker`](Waker)\n /// which can be used to wake the current task.\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub struct Context<'a> {\n@@ -172,15 +184,15 @@ pub struct Context<'a> {\n }\n \n impl<'a> Context<'a> {\n-    /// Create a new `Context` from a `&Waker`.\n+    /// Create a new `Context` from a [`&Waker`](Waker).\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     #[must_use]\n     #[inline]\n     pub fn from_waker(waker: &'a Waker) -> Self {\n         Context { waker, _marker: PhantomData }\n     }\n \n-    /// Returns a reference to the `Waker` for the current task.\n+    /// Returns a reference to the [`Waker`] for the current task.\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     #[must_use]\n     #[inline]\n@@ -202,7 +214,18 @@ impl fmt::Debug for Context<'_> {\n /// This handle encapsulates a [`RawWaker`] instance, which defines the\n /// executor-specific wakeup behavior.\n ///\n-/// Implements [`Clone`], [`Send`], and [`Sync`].\n+/// The typical life of a `Waker` is that it is constructed by an executor, wrapped in a\n+/// [`Context`], then passed to [`Future::poll()`]. Then, if the future chooses to return\n+/// [`Poll::Pending`], it must also store the waker somehow and call [`Waker::wake()`] when\n+/// the future should be polled again.\n+///\n+/// Implements [`Clone`], [`Send`], and [`Sync`]; therefore, a waker may be invoked\n+/// from any thread, including ones not in any way managed by the executor. For example,\n+/// this might be done to wake a future when a blocking function call completes on another\n+/// thread.\n+///\n+/// [`Future::poll()`]: core::future::Future::poll\n+/// [`Poll::Pending`]: core::task::Poll::Pending\n #[repr(transparent)]\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub struct Waker {\n@@ -219,18 +242,21 @@ unsafe impl Sync for Waker {}\n impl Waker {\n     /// Wake up the task associated with this `Waker`.\n     ///\n-    /// As long as the runtime keeps running and the task is not finished, it is\n-    /// guaranteed that each invocation of `wake` (or `wake_by_ref`) will be followed\n-    /// by at least one `poll` of the task to which this `Waker` belongs. This makes\n+    /// As long as the executor keeps running and the task is not finished, it is\n+    /// guaranteed that each invocation of [`wake()`](Self::wake) (or\n+    /// [`wake_by_ref()`](Self::wake_by_ref)) will be followed by at least one\n+    /// [`poll()`] of the task to which this `Waker` belongs. This makes\n     /// it possible to temporarily yield to other tasks while running potentially\n     /// unbounded processing loops.\n     ///\n     /// Note that the above implies that multiple wake-ups may be coalesced into a\n-    /// single `poll` invocation by the runtime.\n+    /// single [`poll()`] invocation by the runtime.\n     ///\n     /// Also note that yielding to competing tasks is not guaranteed: it is the\n     /// executor\u2019s choice which task to run and the executor may choose to run the\n     /// current task again.\n+    ///\n+    /// [`poll()`]: crate::future::Future::poll\n     #[inline]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub fn wake(self) {\n@@ -250,8 +276,8 @@ impl Waker {\n \n     /// Wake up the task associated with this `Waker` without consuming the `Waker`.\n     ///\n-    /// This is similar to `wake`, but may be slightly less efficient in the case\n-    /// where an owned `Waker` is available. This method should be preferred to\n+    /// This is similar to [`wake()`](Self::wake), but may be slightly less efficient in\n+    /// the case where an owned `Waker` is available. This method should be preferred to\n     /// calling `waker.clone().wake()`.\n     #[inline]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n@@ -263,7 +289,7 @@ impl Waker {\n         unsafe { (self.waker.vtable.wake_by_ref)(self.waker.data) }\n     }\n \n-    /// Returns `true` if this `Waker` and another `Waker` have awoken the same task.\n+    /// Returns `true` if this `Waker` and another `Waker` would awake the same task.\n     ///\n     /// This function works on a best-effort basis, and may return false even\n     /// when the `Waker`s would awaken the same task. However, if this function"}, {"sha": "a5003c66fcad72224b5ebc007c60d95c0ff0ba5e", "filename": "library/std/src/macros.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/library%2Fstd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/library%2Fstd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fmacros.rs?ref=42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "patch": "@@ -27,12 +27,23 @@ macro_rules! panic {\n /// necessary to use [`io::stdout().flush()`][flush] to ensure the output is emitted\n /// immediately.\n ///\n+/// The `print!` macro will lock the standard output on each call. If you call\n+/// `print!` within a hot loop, this behavior may be the bottleneck of the loop.\n+/// To avoid this, lock stdout with [`io::stdout().lock()`][lock]:\n+/// ```\n+/// use std::io::{stdout, Write};\n+///\n+/// let mut lock = stdout().lock();\n+/// write!(lock, \"hello world\").unwrap();\n+/// ```\n+///\n /// Use `print!` only for the primary output of your program. Use\n /// [`eprint!`] instead to print error and progress messages.\n ///\n /// [flush]: crate::io::Write::flush\n /// [`println!`]: crate::println\n /// [`eprint!`]: crate::eprint\n+/// [lock]: crate::io::Stdout\n ///\n /// # Panics\n ///\n@@ -75,11 +86,22 @@ macro_rules! print {\n /// This macro uses the same syntax as [`format!`], but writes to the standard output instead.\n /// See [`std::fmt`] for more information.\n ///\n+/// The `println!` macro will lock the standard output on each call. If you call\n+/// `println!` within a hot loop, this behavior may be the bottleneck of the loop.\n+/// To avoid this, lock stdout with [`io::stdout().lock()`][lock]:\n+/// ```\n+/// use std::io::{stdout, Write};\n+///\n+/// let mut lock = stdout().lock();\n+/// writeln!(lock, \"hello world\").unwrap();\n+/// ```\n+///\n /// Use `println!` only for the primary output of your program. Use\n /// [`eprintln!`] instead to print error and progress messages.\n ///\n /// [`std::fmt`]: crate::fmt\n /// [`eprintln!`]: crate::eprintln\n+/// [lock]: crate::io::Stdout\n ///\n /// # Panics\n ///"}, {"sha": "f367edcbf5a81eed12d6f1437586f9d73f4befac", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "patch": "@@ -300,7 +300,7 @@ pub(crate) fn build_impls(\n }\n \n /// `parent_module` refers to the parent of the re-export, not the original item\n-fn merge_attrs(\n+pub(crate) fn merge_attrs(\n     cx: &mut DocContext<'_>,\n     parent_module: Option<DefId>,\n     old_attrs: Attrs<'_>,"}, {"sha": "909a47d07b1666f92ecf4f44e7478066b3655b09", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "patch": "@@ -482,7 +482,7 @@ impl Item {\n         cx: &mut DocContext<'_>,\n         cfg: Option<Arc<Cfg>>,\n     ) -> Item {\n-        trace!(\"name={:?}, def_id={:?}\", name, def_id);\n+        trace!(\"name={:?}, def_id={:?} cfg={:?}\", name, def_id, cfg);\n \n         // Primitives and Keywords are written in the source code as private modules.\n         // The modules need to be private so that nobody actually uses them, but the\n@@ -801,6 +801,31 @@ impl ItemKind {\n             | KeywordItem => [].iter(),\n         }\n     }\n+\n+    /// Returns `true` if this item does not appear inside an impl block.\n+    pub(crate) fn is_non_assoc(&self) -> bool {\n+        matches!(\n+            self,\n+            StructItem(_)\n+                | UnionItem(_)\n+                | EnumItem(_)\n+                | TraitItem(_)\n+                | ModuleItem(_)\n+                | ExternCrateItem { .. }\n+                | FunctionItem(_)\n+                | TypedefItem(_)\n+                | OpaqueTyItem(_)\n+                | StaticItem(_)\n+                | ConstantItem(_)\n+                | TraitAliasItem(_)\n+                | ForeignFunctionItem(_)\n+                | ForeignStaticItem(_)\n+                | ForeignTypeItem\n+                | MacroItem(_)\n+                | ProcMacroItem(_)\n+                | PrimitiveItem(_)\n+        )\n+    }\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "6272f47f460cac99f3ed07e57a4cce06f29a38c4", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 42, "deletions": 16, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "patch": "@@ -191,12 +191,6 @@ impl StylePath {\n     }\n }\n \n-fn write_srclink(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer) {\n-    if let Some(l) = cx.src_href(item) {\n-        write!(buf, \"<a class=\\\"srclink\\\" href=\\\"{}\\\">source</a>\", l)\n-    }\n-}\n-\n #[derive(Debug, Eq, PartialEq, Hash)]\n struct ItemEntry {\n     url: String,\n@@ -522,7 +516,14 @@ fn portability(item: &clean::Item, parent: Option<&clean::Item>) -> Option<Strin\n         (cfg, _) => cfg.as_deref().cloned(),\n     };\n \n-    debug!(\"Portability {:?} - {:?} = {:?}\", item.cfg, parent.and_then(|p| p.cfg.as_ref()), cfg);\n+    debug!(\n+        \"Portability {:?} {:?} (parent: {:?}) - {:?} = {:?}\",\n+        item.name,\n+        item.cfg,\n+        parent,\n+        parent.and_then(|p| p.cfg.as_ref()),\n+        cfg\n+    );\n \n     Some(format!(\"<div class=\\\"stab portability\\\">{}</div>\", cfg?.render_long_html()))\n }\n@@ -840,12 +841,13 @@ fn assoc_method(\n /// Note that it is possible for an unstable function to be const-stable. In that case, the span\n /// will include the const-stable version, but no stable version will be emitted, as a natural\n /// consequence of the above rules.\n-fn render_stability_since_raw(\n+fn render_stability_since_raw_with_extra(\n     w: &mut Buffer,\n     ver: Option<Symbol>,\n     const_stability: Option<ConstStability>,\n     containing_ver: Option<Symbol>,\n     containing_const_ver: Option<Symbol>,\n+    extra_class: &str,\n ) -> bool {\n     let stable_version = ver.filter(|inner| !inner.is_empty() && Some(*inner) != containing_ver);\n \n@@ -893,12 +895,30 @@ fn render_stability_since_raw(\n     }\n \n     if !stability.is_empty() {\n-        write!(w, r#\"<span class=\"since\" title=\"{}\">{}</span>\"#, title, stability);\n+        write!(w, r#\"<span class=\"since{extra_class}\" title=\"{title}\">{stability}</span>\"#);\n     }\n \n     !stability.is_empty()\n }\n \n+#[inline]\n+fn render_stability_since_raw(\n+    w: &mut Buffer,\n+    ver: Option<Symbol>,\n+    const_stability: Option<ConstStability>,\n+    containing_ver: Option<Symbol>,\n+    containing_const_ver: Option<Symbol>,\n+) -> bool {\n+    render_stability_since_raw_with_extra(\n+        w,\n+        ver,\n+        const_stability,\n+        containing_ver,\n+        containing_const_ver,\n+        \"\",\n+    )\n+}\n+\n fn render_assoc_item(\n     w: &mut Buffer,\n     item: &clean::Item,\n@@ -1681,23 +1701,29 @@ fn render_rightside(\n         RenderMode::Normal => (item.const_stability(tcx), containing_item.const_stable_since(tcx)),\n         RenderMode::ForDeref { .. } => (None, None),\n     };\n+    let src_href = cx.src_href(item);\n+    let has_src_ref = src_href.is_some();\n \n     let mut rightside = Buffer::new();\n-    let has_stability = render_stability_since_raw(\n+    let has_stability = render_stability_since_raw_with_extra(\n         &mut rightside,\n         item.stable_since(tcx),\n         const_stability,\n         containing_item.stable_since(tcx),\n         const_stable_since,\n+        if has_src_ref { \"\" } else { \" rightside\" },\n     );\n-    let mut srclink = Buffer::empty_from(w);\n-    write_srclink(cx, item, &mut srclink);\n-    if has_stability && !srclink.is_empty() {\n-        rightside.write_str(\" \u00b7 \");\n+    if let Some(l) = src_href {\n+        if has_stability {\n+            write!(rightside, \" \u00b7 <a class=\\\"srclink\\\" href=\\\"{}\\\">source</a>\", l)\n+        } else {\n+            write!(rightside, \"<a class=\\\"srclink rightside\\\" href=\\\"{}\\\">source</a>\", l)\n+        }\n     }\n-    rightside.push_buffer(srclink);\n-    if !rightside.is_empty() {\n+    if has_stability && has_src_ref {\n         write!(w, \"<span class=\\\"rightside\\\">{}</span>\", rightside.into_inner());\n+    } else {\n+        w.push_buffer(rightside);\n     }\n }\n "}, {"sha": "912601dda20b127846984710d19428c264bbc4db", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 10, "deletions": 26, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "patch": "@@ -18,7 +18,7 @@ use std::rc::Rc;\n use super::{\n     collect_paths_for_type, document, ensure_trailing_slash, item_ty_to_section,\n     notable_traits_decl, render_assoc_item, render_assoc_items, render_attributes_in_code,\n-    render_attributes_in_pre, render_impl, render_stability_since_raw, write_srclink,\n+    render_attributes_in_pre, render_impl, render_rightside, render_stability_since_raw,\n     AssocItemLink, Context, ImplRenderingParameters,\n };\n use crate::clean;\n@@ -477,7 +477,7 @@ fn extra_info_tags(item: &clean::Item, parent: &clean::Item, tcx: TyCtxt<'_>) ->\n         (cfg, _) => cfg.as_deref().cloned(),\n     };\n \n-    debug!(\"Portability {:?} - {:?} = {:?}\", item.cfg, parent.cfg, cfg);\n+    debug!(\"Portability name={:?} {:?} - {:?} = {:?}\", item.name, item.cfg, parent.cfg, cfg);\n     if let Some(ref cfg) = cfg {\n         tags += &tag_html(\"portability\", &cfg.render_long_plain(), &cfg.render_short_html());\n     }\n@@ -709,14 +709,7 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n             write!(w, \"<details class=\\\"rustdoc-toggle\\\" open><summary>\");\n         }\n         write!(w, \"<div id=\\\"{}\\\" class=\\\"method has-srclink\\\">\", id);\n-        write!(w, \"<div class=\\\"rightside\\\">\");\n-\n-        let has_stability = render_stability_since(w, m, t, cx.tcx());\n-        if has_stability {\n-            w.write_str(\" \u00b7 \");\n-        }\n-        write_srclink(cx, m, w);\n-        write!(w, \"</div>\");\n+        render_rightside(w, cx, m, t, RenderMode::Normal);\n         write!(w, \"<h4 class=\\\"code-header\\\">\");\n         render_assoc_item(\n             w,\n@@ -1260,7 +1253,13 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n                 w.write_str(\")\");\n             }\n             w.write_str(\"</code>\");\n-            render_stability_since(w, variant, it, cx.tcx());\n+            render_stability_since_raw(\n+                w,\n+                variant.stable_since(cx.tcx()),\n+                variant.const_stability(cx.tcx()),\n+                it.stable_since(cx.tcx()),\n+                it.const_stable_since(cx.tcx()),\n+            );\n             w.write_str(\"</h3>\");\n \n             use crate::clean::Variant;\n@@ -1591,21 +1590,6 @@ where\n     w.write_str(\"</code></pre>\");\n }\n \n-fn render_stability_since(\n-    w: &mut Buffer,\n-    item: &clean::Item,\n-    containing_item: &clean::Item,\n-    tcx: TyCtxt<'_>,\n-) -> bool {\n-    render_stability_since_raw(\n-        w,\n-        item.stable_since(tcx),\n-        item.const_stability(tcx),\n-        containing_item.stable_since(tcx),\n-        containing_item.const_stable_since(tcx),\n-    )\n-}\n-\n fn compare_impl<'a, 'b>(lhs: &'a &&Impl, rhs: &'b &&Impl, cx: &Context<'_>) -> Ordering {\n     let lhss = format!(\"{}\", lhs.inner_impl().print(false, cx));\n     let rhss = format!(\"{}\", rhs.inner_impl().print(false, cx));"}, {"sha": "38cdcd61e88cbe5ec9ef326bfff3a42045a11280", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "patch": "@@ -1200,14 +1200,6 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \tfloat: right;\n }\n \n-.variants_table {\n-\twidth: 100%;\n-}\n-\n-.variants_table tbody tr td:first-child {\n-\twidth: 1%; /* make the variant name as small as possible */\n-}\n-\n td.summary-column {\n \twidth: 100%;\n }"}, {"sha": "8591f22d6de608987b54f1f21a035402da8d8649", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "patch": "@@ -199,7 +199,7 @@ details.rustdoc-toggle > summary::before {\n \tbackground: none;\n }\n \n-.rightside,\n+.rightside:not(a),\n .out-of-band {\n \tcolor: grey;\n }"}, {"sha": "d5cd47c3e19d5f00c5c4245c7bd1195e4ea937a3", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "patch": "@@ -165,7 +165,7 @@ details.rustdoc-toggle > summary::before {\n \tbackground: none;\n }\n \n-.rightside,\n+.rightside:not(a),\n .out-of-band {\n \tcolor: grey;\n }"}, {"sha": "cff70268144f35852468925b80424e7c1fdcc47d", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "patch": "@@ -148,7 +148,7 @@ details.rustdoc-toggle > summary::before {\n .stab { background: #FFF5D6; border-color: #FFC600; }\n .stab.portability > code { background: none; }\n \n-.rightside,\n+.rightside:not(a),\n .out-of-band {\n \tcolor: grey;\n }"}, {"sha": "7caffeae3d61010b9d4dde7ee2d7c71f3717a1e2", "filename": "src/librustdoc/html/templates/page.html", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "raw_url": "https://github.com/rust-lang/rust/raw/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html?ref=42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "patch": "@@ -13,13 +13,13 @@\n     <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"{{static_root_path|safe}}SourceCodePro-Regular.ttf.woff2\"> {#- -#}\n     <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"{{static_root_path|safe}}SourceSerif4-Bold.ttf.woff2\"> {#- -#}\n     <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"{{static_root_path|safe}}SourceCodePro-Semibold.ttf.woff2\"> {#- -#}\n-    <link rel=\"stylesheet\" type=\"text/css\" {# -#}\n+    <link rel=\"stylesheet\" {# -#}\n           href=\"{{static_root_path|safe}}normalize{{page.resource_suffix}}.css\"> {#- -#}\n-    <link rel=\"stylesheet\" type=\"text/css\" {# -#}\n+    <link rel=\"stylesheet\" {# -#}\n           href=\"{{static_root_path|safe}}rustdoc{{page.resource_suffix}}.css\" {# -#}\n           id=\"mainThemeStyle\"> {#- -#}\n     {%- for theme in themes -%}\n-        <link rel=\"stylesheet\" type=\"text/css\" {# -#}\n+        <link rel=\"stylesheet\" {# -#}\n             href=\"{{static_root_path|safe}}{{theme}}{{page.resource_suffix}}.css\" {# -#}\n         {%- if theme == \"light\" -%}\n             id=\"themeStyle\"\n@@ -51,7 +51,7 @@\n            href=\"{{static_root_path|safe}}noscript{{page.resource_suffix}}.css\"> {#- -#}\n     </noscript> {#- -#}\n     {%- if layout.css_file_extension.is_some() -%}\n-        <link rel=\"stylesheet\" type=\"text/css\" {# -#}\n+        <link rel=\"stylesheet\" {# -#}\n             href=\"{{static_root_path|safe}}theme{{page.resource_suffix}}.css\"> {#- -#}\n     {%- endif -%}\n     {%- if !layout.favicon.is_empty() -%}"}, {"sha": "21d295bb1f88e9fa761e661023f8b2d9c73b5824", "filename": "src/librustdoc/passes/propagate_doc_cfg.rs", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs?ref=42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "patch": "@@ -2,29 +2,53 @@\n use std::sync::Arc;\n \n use crate::clean::cfg::Cfg;\n+use crate::clean::inline::{load_attrs, merge_attrs};\n use crate::clean::{Crate, Item};\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n use crate::passes::Pass;\n \n+use rustc_hir::def_id::LocalDefId;\n+\n pub(crate) const PROPAGATE_DOC_CFG: Pass = Pass {\n     name: \"propagate-doc-cfg\",\n     run: propagate_doc_cfg,\n     description: \"propagates `#[doc(cfg(...))]` to child items\",\n };\n \n-pub(crate) fn propagate_doc_cfg(cr: Crate, _: &mut DocContext<'_>) -> Crate {\n-    CfgPropagator { parent_cfg: None }.fold_crate(cr)\n+pub(crate) fn propagate_doc_cfg(cr: Crate, cx: &mut DocContext<'_>) -> Crate {\n+    CfgPropagator { parent_cfg: None, parent: None, cx }.fold_crate(cr)\n }\n \n-struct CfgPropagator {\n+struct CfgPropagator<'a, 'tcx> {\n     parent_cfg: Option<Arc<Cfg>>,\n+    parent: Option<LocalDefId>,\n+    cx: &'a mut DocContext<'tcx>,\n }\n \n-impl DocFolder for CfgPropagator {\n+impl<'a, 'tcx> DocFolder for CfgPropagator<'a, 'tcx> {\n     fn fold_item(&mut self, mut item: Item) -> Option<Item> {\n         let old_parent_cfg = self.parent_cfg.clone();\n \n+        if item.kind.is_non_assoc() &&\n+            let Some(def_id) = item.item_id.as_def_id().and_then(|def_id| def_id.as_local()) {\n+            let hir = self.cx.tcx.hir();\n+            let hir_id = hir.local_def_id_to_hir_id(def_id);\n+            let expected_parent = hir.get_parent_item(hir_id);\n+\n+            // If parents are different, it means that `item` is a reexport and we need to compute\n+            // the actual `cfg` by iterating through its \"real\" parents.\n+            if self.parent != Some(expected_parent) {\n+                let mut attrs = Vec::new();\n+                for (parent_hir_id, _) in hir.parent_iter(hir_id) {\n+                    let def_id = hir.local_def_id(parent_hir_id).to_def_id();\n+                    attrs.extend_from_slice(load_attrs(self.cx, def_id));\n+                }\n+                let (_, cfg) =\n+                    merge_attrs(self.cx, None, item.attrs.other_attrs.as_slice(), Some(&attrs));\n+                item.cfg = cfg;\n+            }\n+        }\n         let new_cfg = match (self.parent_cfg.take(), item.cfg.take()) {\n             (None, None) => None,\n             (Some(rc), None) | (None, Some(rc)) => Some(rc),\n@@ -37,8 +61,15 @@ impl DocFolder for CfgPropagator {\n         self.parent_cfg = new_cfg.clone();\n         item.cfg = new_cfg;\n \n+        let old_parent =\n+            if let Some(def_id) = item.item_id.as_def_id().and_then(|def_id| def_id.as_local()) {\n+                self.parent.replace(def_id)\n+            } else {\n+                self.parent.take()\n+            };\n         let result = self.fold_item_recur(item);\n         self.parent_cfg = old_parent_cfg;\n+        self.parent = old_parent;\n \n         Some(result)\n     }"}, {"sha": "3ad62c721b4b83768cb40efbc6fbdddb037855d3", "filename": "src/test/rustdoc-gui/anchors.goml", "status": "modified", "additions": 124, "deletions": 4, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftest%2Frustdoc-gui%2Fanchors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftest%2Frustdoc-gui%2Fanchors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fanchors.goml?ref=42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "patch": "@@ -1,6 +1,5 @@\n // This test is to ensure that the anchors (`\u00a7`) have the expected color and position.\n-goto: file://|DOC_PATH|/test_docs/struct.HeavilyDocumentedStruct.html\n-show-text: true\n+goto: file://|DOC_PATH|/staged_api/struct.Foo.html\n \n // This is needed to ensure that the text color is computed.\n show-text: true\n@@ -13,10 +12,31 @@ reload:\n assert-css: (\"#toggle-all-docs\", {\"color\": \"rgb(0, 0, 0)\"})\n assert-css: (\".fqn .in-band a:nth-of-type(1)\", {\"color\": \"rgb(0, 0, 0)\"})\n assert-css: (\".fqn .in-band a:nth-of-type(2)\", {\"color\": \"rgb(173, 55, 138)\"})\n-assert-css: (\".srclink\", {\"color\": \"rgb(56, 115, 173)\"})\n+assert-css: (\n+    \".rightside .srclink\",\n+    {\"color\": \"rgb(56, 115, 173)\", \"text-decoration\": \"none solid rgb(56, 115, 173)\"},\n+    ALL,\n+)\n+compare-elements-css: (\".rightside .srclink\", \".rightside.srclink\", [\"color\", \"text-decoration\"])\n+compare-elements-css: (\".main-heading .srclink\", \".rightside.srclink\", [\"color\", \"text-decoration\"])\n \n move-cursor-to: \".main-heading .srclink\"\n-assert-css: (\".srclink\", {\"text-decoration\": \"underline solid rgb(56, 115, 173)\"})\n+assert-css: (\n+    \".main-heading .srclink\",\n+    {\"color\": \"rgb(56, 115, 173)\", \"text-decoration\": \"underline solid rgb(56, 115, 173)\"},\n+)\n+move-cursor-to: \".impl-items .rightside .srclink\"\n+assert-css: (\n+    \".impl-items .rightside .srclink\",\n+    {\"color\": \"rgb(56, 115, 173)\", \"text-decoration\": \"none solid rgb(56, 115, 173)\"},\n+)\n+move-cursor-to: \".impl-items .rightside.srclink\"\n+assert-css: (\n+    \".impl-items .rightside.srclink\",\n+    {\"color\": \"rgb(56, 115, 173)\", \"text-decoration\": \"none solid rgb(56, 115, 173)\"},\n+)\n+\n+goto: file://|DOC_PATH|/test_docs/struct.HeavilyDocumentedStruct.html\n \n assert-css: (\"#top-doc-prose-title\", {\"color\": \"rgb(0, 0, 0)\"})\n \n@@ -32,3 +52,103 @@ move-cursor-to: \"#impl-HeavilyDocumentedStruct\"\n assert-css: (\"#impl-HeavilyDocumentedStruct a.anchor\", {\"color\": \"rgb(0, 0, 0)\"})\n \n assert-css: (\"#title-for-struct-impl-item-doc\", {\"margin-left\": \"0px\"})\n+\n+//\n+// We do the same checks with the dark theme now.\n+//\n+local-storage: {\"rustdoc-theme\": \"dark\", \"rustdoc-use-system-theme\": \"false\"}\n+goto: file://|DOC_PATH|/staged_api/struct.Foo.html\n+\n+assert-css: (\"#toggle-all-docs\", {\"color\": \"rgb(221, 221, 221)\"})\n+assert-css: (\".fqn .in-band a:nth-of-type(1)\", {\"color\": \"rgb(221, 221, 221)\"})\n+assert-css: (\".fqn .in-band a:nth-of-type(2)\", {\"color\": \"rgb(45, 191, 184)\"})\n+assert-css: (\n+    \".rightside .srclink\",\n+    {\"color\": \"rgb(210, 153, 29)\", \"text-decoration\": \"none solid rgb(210, 153, 29)\"},\n+    ALL,\n+)\n+compare-elements-css: (\".rightside .srclink\", \".rightside.srclink\", [\"color\", \"text-decoration\"])\n+compare-elements-css: (\".main-heading .srclink\", \".rightside.srclink\", [\"color\", \"text-decoration\"])\n+\n+move-cursor-to: \".main-heading .srclink\"\n+assert-css: (\n+    \".main-heading .srclink\",\n+    {\"color\": \"rgb(210, 153, 29)\", \"text-decoration\": \"underline solid rgb(210, 153, 29)\"},\n+)\n+move-cursor-to: \".impl-items .rightside .srclink\"\n+assert-css: (\n+    \".impl-items .rightside .srclink\",\n+    {\"color\": \"rgb(210, 153, 29)\", \"text-decoration\": \"none solid rgb(210, 153, 29)\"},\n+)\n+move-cursor-to: \".impl-items .rightside.srclink\"\n+assert-css: (\n+    \".impl-items .rightside.srclink\",\n+    {\"color\": \"rgb(210, 153, 29)\", \"text-decoration\": \"none solid rgb(210, 153, 29)\"},\n+)\n+\n+goto: file://|DOC_PATH|/test_docs/struct.HeavilyDocumentedStruct.html\n+\n+assert-css: (\"#top-doc-prose-title\", {\"color\": \"rgb(221, 221, 221)\"})\n+\n+assert-css: (\".sidebar a\", {\"color\": \"rgb(253, 191, 53)\"})\n+assert-css: (\".in-band a\", {\"color\": \"rgb(221, 221, 221)\"})\n+\n+// We move the cursor over the \"Implementations\" title so the anchor is displayed.\n+move-cursor-to: \"h2#implementations\"\n+assert-css: (\"h2#implementations a.anchor\", {\"color\": \"rgb(221, 221, 221)\"})\n+\n+// Same thing with the impl block title.\n+move-cursor-to: \"#impl-HeavilyDocumentedStruct\"\n+assert-css: (\"#impl-HeavilyDocumentedStruct a.anchor\", {\"color\": \"rgb(221, 221, 221)\"})\n+\n+assert-css: (\"#title-for-struct-impl-item-doc\", {\"margin-left\": \"0px\"})\n+\n+//\n+// We do the same checks with the ayu theme now.\n+//\n+local-storage: {\"rustdoc-theme\": \"ayu\", \"rustdoc-use-system-theme\": \"false\"}\n+goto: file://|DOC_PATH|/staged_api/struct.Foo.html\n+\n+assert-css: (\"#toggle-all-docs\", {\"color\": \"rgb(197, 197, 197)\"})\n+assert-css: (\".fqn .in-band a:nth-of-type(1)\", {\"color\": \"rgb(255, 255, 255)\"})\n+assert-css: (\".fqn .in-band a:nth-of-type(2)\", {\"color\": \"rgb(255, 160, 165)\"})\n+assert-css: (\n+    \".rightside .srclink\",\n+    {\"color\": \"rgb(57, 175, 215)\", \"text-decoration\": \"none solid rgb(57, 175, 215)\"},\n+    ALL,\n+)\n+compare-elements-css: (\".rightside .srclink\", \".rightside.srclink\", [\"color\", \"text-decoration\"])\n+compare-elements-css: (\".main-heading .srclink\", \".rightside.srclink\", [\"color\", \"text-decoration\"])\n+\n+move-cursor-to: \".main-heading .srclink\"\n+assert-css: (\n+    \".main-heading .srclink\",\n+    {\"color\": \"rgb(57, 175, 215)\", \"text-decoration\": \"underline solid rgb(57, 175, 215)\"},\n+)\n+move-cursor-to: \".impl-items .rightside .srclink\"\n+assert-css: (\n+    \".impl-items .rightside .srclink\",\n+    {\"color\": \"rgb(57, 175, 215)\", \"text-decoration\": \"none solid rgb(57, 175, 215)\"},\n+)\n+move-cursor-to: \".impl-items .rightside.srclink\"\n+assert-css: (\n+    \".impl-items .rightside.srclink\",\n+    {\"color\": \"rgb(57, 175, 215)\", \"text-decoration\": \"none solid rgb(57, 175, 215)\"},\n+)\n+\n+goto: file://|DOC_PATH|/test_docs/struct.HeavilyDocumentedStruct.html\n+\n+assert-css: (\"#top-doc-prose-title\", {\"color\": \"rgb(255, 255, 255)\"})\n+\n+assert-css: (\".sidebar a\", {\"color\": \"rgb(83, 177, 219)\"})\n+assert-css: (\".in-band a\", {\"color\": \"rgb(255, 255, 255)\"})\n+\n+// We move the cursor over the \"Implementations\" title so the anchor is displayed.\n+move-cursor-to: \"h2#implementations\"\n+assert-css: (\"h2#implementations a.anchor\", {\"color\": \"rgb(197, 197, 197)\"})\n+\n+// Same thing with the impl block title.\n+move-cursor-to: \"#impl-HeavilyDocumentedStruct\"\n+assert-css: (\"#impl-HeavilyDocumentedStruct a.anchor\", {\"color\": \"rgb(197, 197, 197)\"})\n+\n+assert-css: (\"#title-for-struct-impl-item-doc\", {\"margin-left\": \"0px\"})"}, {"sha": "ed07e777b1880991054783102d85f78ae585c842", "filename": "src/test/rustdoc-gui/headings.goml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftest%2Frustdoc-gui%2Fheadings.goml", "raw_url": "https://github.com/rust-lang/rust/raw/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftest%2Frustdoc-gui%2Fheadings.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fheadings.goml?ref=42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "patch": "@@ -247,12 +247,12 @@ assert-css: (\n \n local-storage: {\"rustdoc-theme\": \"light\"}\n goto: file://|DOC_PATH|/staged_api/struct.Foo.html\n-assert-css: (\".since\", {\"color\": \"rgb(128, 128, 128)\"})\n+assert-css: (\".since\", {\"color\": \"rgb(128, 128, 128)\"}, ALL)\n \n local-storage: {\"rustdoc-theme\": \"dark\"}\n reload:\n-assert-css: (\".since\", {\"color\": \"rgb(128, 128, 128)\"})\n+assert-css: (\".since\", {\"color\": \"rgb(128, 128, 128)\"}, ALL)\n \n local-storage: {\"rustdoc-theme\": \"ayu\"}\n reload:\n-assert-css: (\".since\", {\"color\": \"rgb(128, 128, 128)\"})\n+assert-css: (\".since\", {\"color\": \"rgb(128, 128, 128)\"}, ALL)"}, {"sha": "b231be6eee902f049ccc85f1d5379b8b84272c30", "filename": "src/test/rustdoc-gui/src/staged_api/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fstaged_api%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fstaged_api%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fstaged_api%2FCargo.toml?ref=42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "patch": "@@ -7,5 +7,6 @@ edition = \"2021\"\n path = \"lib.rs\"\n \n [features]\n-default = [\"some_feature\"]\n+default = [\"some_feature\", \"some_other_feature\"]\n some_feature = []\n+some_other_feature = []"}, {"sha": "5934593a8999b94c6e711a41d8e14b2573dd17af", "filename": "src/test/rustdoc-gui/src/staged_api/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fstaged_api%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fstaged_api%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Fstaged_api%2Flib.rs?ref=42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "patch": "@@ -7,4 +7,6 @@ pub struct Foo {}\n impl Foo {\n     #[stable(feature = \"some_feature\", since = \"1.3.5\")]\n     pub fn bar() {}\n+    #[stable(feature = \"some_other_feature\", since = \"1.3.6\")]\n+    pub fn yo() {}\n }"}, {"sha": "4da1ffead2a4c61a39971d02496f74c38827e07a", "filename": "src/test/rustdoc/anchors.no_const_anchor.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftest%2Frustdoc%2Fanchors.no_const_anchor.html", "raw_url": "https://github.com/rust-lang/rust/raw/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftest%2Frustdoc%2Fanchors.no_const_anchor.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fanchors.no_const_anchor.html?ref=42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "patch": "@@ -1 +1 @@\n-<div id=\"associatedconstant.YOLO\" class=\"method has-srclink\"><div class=\"rightside\"><a class=\"srclink\" href=\"../src/foo/anchors.rs.html#16\">source</a></div><h4 class=\"code-header\">const <a href=\"#associatedconstant.YOLO\" class=\"constant\">YOLO</a>: <a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a></h4></div>\n+<div id=\"associatedconstant.YOLO\" class=\"method has-srclink\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#16\">source</a><h4 class=\"code-header\">const <a href=\"#associatedconstant.YOLO\" class=\"constant\">YOLO</a>: <a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a></h4></div>\n\\ No newline at end of file"}, {"sha": "c002519760242a4ce4d216f3918c1735d8e725cd", "filename": "src/test/rustdoc/anchors.no_const_anchor2.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftest%2Frustdoc%2Fanchors.no_const_anchor2.html", "raw_url": "https://github.com/rust-lang/rust/raw/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftest%2Frustdoc%2Fanchors.no_const_anchor2.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fanchors.no_const_anchor2.html?ref=42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "patch": "@@ -1 +1 @@\n-<section id=\"associatedconstant.X\" class=\"associatedconstant has-srclink\"><span class=\"rightside\"><a class=\"srclink\" href=\"../src/foo/anchors.rs.html#42\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.X\" class=\"constant\">X</a>: <a class=\"primitive\" href=\"{{channel}}/std/primitive.i32.html\">i32</a> = 0i32</h4></section>\n+<section id=\"associatedconstant.X\" class=\"associatedconstant has-srclink\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#42\">source</a><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.X\" class=\"constant\">X</a>: <a class=\"primitive\" href=\"{{channel}}/std/primitive.i32.html\">i32</a> = 0i32</h4></section>\n\\ No newline at end of file"}, {"sha": "521fdcb7877a707c061af17dbc5ac9b52c9253e6", "filename": "src/test/rustdoc/anchors.no_method_anchor.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftest%2Frustdoc%2Fanchors.no_method_anchor.html", "raw_url": "https://github.com/rust-lang/rust/raw/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftest%2Frustdoc%2Fanchors.no_method_anchor.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fanchors.no_method_anchor.html?ref=42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "patch": "@@ -1 +1 @@\n-<section id=\"method.new\" class=\"method has-srclink\"><span class=\"rightside\"><a class=\"srclink\" href=\"../src/foo/anchors.rs.html#48\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.new\" class=\"fnname\">new</a>() -&gt; Self</h4></section>\n\\ No newline at end of file\n+<section id=\"method.new\" class=\"method has-srclink\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#48\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.new\" class=\"fnname\">new</a>() -&gt; Self</h4></section>\n\\ No newline at end of file"}, {"sha": "6b78c7c811a068caeb9f993bac0282411fcabe97", "filename": "src/test/rustdoc/anchors.no_trait_method_anchor.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftest%2Frustdoc%2Fanchors.no_trait_method_anchor.html", "raw_url": "https://github.com/rust-lang/rust/raw/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftest%2Frustdoc%2Fanchors.no_trait_method_anchor.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fanchors.no_trait_method_anchor.html?ref=42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "patch": "@@ -1 +1 @@\n-<div id=\"method.bar\" class=\"method has-srclink\"><div class=\"rightside\"><a class=\"srclink\" href=\"../src/foo/anchors.rs.html#23\">source</a></div><h4 class=\"code-header\">fn <a href=\"#method.bar\" class=\"fnname\">bar</a>()</h4></div>\n\\ No newline at end of file\n+<div id=\"method.bar\" class=\"method has-srclink\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#23\">source</a><h4 class=\"code-header\">fn <a href=\"#method.bar\" class=\"fnname\">bar</a>()</h4></div>\n\\ No newline at end of file"}, {"sha": "c08f4427cf697309c56499ed992eeef9b0d2c193", "filename": "src/test/rustdoc/anchors.no_tymethod_anchor.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftest%2Frustdoc%2Fanchors.no_tymethod_anchor.html", "raw_url": "https://github.com/rust-lang/rust/raw/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftest%2Frustdoc%2Fanchors.no_tymethod_anchor.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fanchors.no_tymethod_anchor.html?ref=42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "patch": "@@ -1 +1 @@\n-<div id=\"tymethod.foo\" class=\"method has-srclink\"><div class=\"rightside\"><a class=\"srclink\" href=\"../src/foo/anchors.rs.html#20\">source</a></div><h4 class=\"code-header\">fn <a href=\"#tymethod.foo\" class=\"fnname\">foo</a>()</h4></div>\n\\ No newline at end of file\n+<div id=\"tymethod.foo\" class=\"method has-srclink\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#20\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.foo\" class=\"fnname\">foo</a>()</h4></div>\n\\ No newline at end of file"}, {"sha": "ba8e65443ec8132241f4d098a5c728ad7ab7663f", "filename": "src/test/rustdoc/anchors.no_type_anchor.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftest%2Frustdoc%2Fanchors.no_type_anchor.html", "raw_url": "https://github.com/rust-lang/rust/raw/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftest%2Frustdoc%2Fanchors.no_type_anchor.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fanchors.no_type_anchor.html?ref=42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "patch": "@@ -1 +1 @@\n-<div id=\"associatedtype.T\" class=\"method has-srclink\"><div class=\"rightside\"><a class=\"srclink\" href=\"../src/foo/anchors.rs.html#13\">source</a></div><h4 class=\"code-header\">type <a href=\"#associatedtype.T\" class=\"associatedtype\">T</a></h4></div>\n\\ No newline at end of file\n+<div id=\"associatedtype.T\" class=\"method has-srclink\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#13\">source</a><h4 class=\"code-header\">type <a href=\"#associatedtype.T\" class=\"associatedtype\">T</a></h4></div>\n\\ No newline at end of file"}, {"sha": "addb6709db1da8a25fe823eda5029fa7a057e8d5", "filename": "src/test/rustdoc/cfg_doc_reexport.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftest%2Frustdoc%2Fcfg_doc_reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftest%2Frustdoc%2Fcfg_doc_reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fcfg_doc_reexport.rs?ref=42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "patch": "@@ -0,0 +1,33 @@\n+#![feature(doc_cfg)]\n+#![feature(no_core)]\n+\n+#![crate_name = \"foo\"]\n+#![no_core]\n+\n+// @has 'foo/index.html'\n+// @has - '//*[@class=\"item-left module-item\"]/*[@class=\"stab portability\"]' 'foobar'\n+// @has - '//*[@class=\"item-left module-item\"]/*[@class=\"stab portability\"]' 'bar'\n+\n+#[doc(cfg(feature = \"foobar\"))]\n+mod imp_priv {\n+    // @has 'foo/struct.BarPriv.html'\n+    // @has - '//*[@id=\"main-content\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n+    //    'Available on crate feature foobar only.'\n+    pub struct BarPriv {}\n+    impl BarPriv {\n+        pub fn test() {}\n+    }\n+}\n+#[doc(cfg(feature = \"foobar\"))]\n+pub use crate::imp_priv::*;\n+\n+pub mod bar {\n+    // @has 'foo/bar/struct.Bar.html'\n+    // @has - '//*[@id=\"main-content\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n+    //    'Available on crate feature bar only.'\n+    #[doc(cfg(feature = \"bar\"))]\n+    pub struct Bar;\n+}\n+\n+#[doc(cfg(feature = \"bar\"))]\n+pub use bar::Bar;"}, {"sha": "c65387080f11b3f34611cca9a4c171135e6a9590", "filename": "src/test/rustdoc/ensure-src-link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftest%2Frustdoc%2Fensure-src-link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftest%2Frustdoc%2Fensure-src-link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fensure-src-link.rs?ref=42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "patch": "@@ -2,5 +2,5 @@\n \n // This test ensures that the [src] link is present on traits items.\n \n-// @has foo/trait.Iterator.html '//*[@id=\"method.zip\"]//a[@class=\"srclink\"]' \"source\"\n+// @has foo/trait.Iterator.html '//*[@id=\"method.zip\"]//a[@class=\"srclink rightside\"]' \"source\"\n pub use std::iter::Iterator;"}, {"sha": "313a4b1189334c7f04bf4f2477907fb2d55aba89", "filename": "src/test/rustdoc/src-links-auto-impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsrc-links-auto-impls.rs?ref=42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "patch": "@@ -6,7 +6,7 @@\n // @has - '//*[@id=\"impl-Sync-for-Unsized\"]/h3[@class=\"code-header in-band\"]' 'impl Sync for Unsized'\n // @!has - '//*[@id=\"impl-Sync-for-Unsized\"]//a[@class=\"srclink\"]' 'source'\n // @has - '//*[@id=\"impl-Any-for-Unsized\"]/h3[@class=\"code-header in-band\"]' 'impl<T> Any for T'\n-// @has - '//*[@id=\"impl-Any-for-Unsized\"]//a[@class=\"srclink\"]' 'source'\n+// @has - '//*[@id=\"impl-Any-for-Unsized\"]//a[@class=\"srclink rightside\"]' 'source'\n pub struct Unsized {\n     data: [u8],\n }"}, {"sha": "04ea46a7f3a01a3cfbf85dc7e9ba7a41794bce0c", "filename": "src/test/rustdoc/version-separator-without-source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftest%2Frustdoc%2Fversion-separator-without-source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftest%2Frustdoc%2Fversion-separator-without-source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fversion-separator-without-source.rs?ref=42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "patch": "@@ -16,7 +16,7 @@ pub fn foo() {}\n pub struct Bar;\n \n impl Bar {\n-    // @has - '//*[@id=\"method.bar\"]/*[@class=\"rightside\"]' '2.0'\n+    // @has - '//*[@id=\"method.bar\"]/*[@class=\"since rightside\"]' '2.0'\n     // @!has - '//*[@id=\"method.bar\"]/*[@class=\"rightside\"]' '2.0 \u00b7'\n     #[stable(feature = \"foobar\", since = \"2.0\")]\n     pub fn bar() {}"}, {"sha": "b9fd852f742cf81360c0cb167683acde754b63eb", "filename": "src/tools/error_index_generator/Cargo.toml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftools%2Ferror_index_generator%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/42fa8ac7236f4f78a82aeea543bdd445a59f02e0/src%2Ftools%2Ferror_index_generator%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2FCargo.toml?ref=42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "patch": "@@ -6,9 +6,6 @@ edition = \"2021\"\n [dependencies]\n rustdoc = { path = \"../../librustdoc\" }\n \n-[build-dependencies]\n-walkdir = \"2\"\n-\n [[bin]]\n name = \"error_index_generator\"\n path = \"main.rs\""}]}