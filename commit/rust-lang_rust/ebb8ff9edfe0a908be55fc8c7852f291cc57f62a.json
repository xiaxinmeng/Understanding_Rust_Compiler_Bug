{"sha": "ebb8ff9edfe0a908be55fc8c7852f291cc57f62a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViYjhmZjllZGZlMGE5MDhiZTU1ZmM4Yzc4NTJmMjkxY2M1N2Y2MmE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-11-23T12:42:06Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-09-17T16:47:48Z"}, "message": "remove diverging type variables from fn check\n\nThe comment seems incorrect. Testing revealed that the examples in\nquestion still work (as well as some variants) even without the\nspecial casing here.", "tree": {"sha": "0f580300c716a120d77f2bba9b95fa588e260166", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f580300c716a120d77f2bba9b95fa588e260166"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebb8ff9edfe0a908be55fc8c7852f291cc57f62a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebb8ff9edfe0a908be55fc8c7852f291cc57f62a", "html_url": "https://github.com/rust-lang/rust/commit/ebb8ff9edfe0a908be55fc8c7852f291cc57f62a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebb8ff9edfe0a908be55fc8c7852f291cc57f62a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ee89144e21c10a95b411ff72235da6e29c04a94", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ee89144e21c10a95b411ff72235da6e29c04a94", "html_url": "https://github.com/rust-lang/rust/commit/2ee89144e21c10a95b411ff72235da6e29c04a94"}], "stats": {"total": 38, "additions": 13, "deletions": 25}, "files": [{"sha": "071cf6e1ea4b7325ff87c88e455129019c0a6163", "filename": "compiler/rustc_infer/src/infer/type_variable.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ebb8ff9edfe0a908be55fc8c7852f291cc57f62a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebb8ff9edfe0a908be55fc8c7852f291cc57f62a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs?ref=ebb8ff9edfe0a908be55fc8c7852f291cc57f62a", "patch": "@@ -129,7 +129,11 @@ pub enum TypeVariableOriginKind {\n     SubstitutionPlaceholder,\n     AutoDeref,\n     AdjustmentType,\n-    DivergingFn,\n+\n+    /// In type check, when we are type checking a function that\n+    /// returns `-> dyn Foo`, we substitute a type variable for the\n+    /// return type for diagnostic purposes.\n+    DynReturnFn,\n     LatticeVariable,\n }\n "}, {"sha": "3b9047318d42a197af043e8c5b319beed66815fb", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 8, "deletions": 24, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ebb8ff9edfe0a908be55fc8c7852f291cc57f62a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebb8ff9edfe0a908be55fc8c7852f291cc57f62a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=ebb8ff9edfe0a908be55fc8c7852f291cc57f62a", "patch": "@@ -241,32 +241,16 @@ pub(super) fn check_fn<'a, 'tcx>(\n     // we saw and assigning it to the expected return type. This isn't\n     // really expected to fail, since the coercions would have failed\n     // earlier when trying to find a LUB.\n-    //\n-    // However, the behavior around `!` is sort of complex. In the\n-    // event that the `actual_return_ty` comes back as `!`, that\n-    // indicates that the fn either does not return or \"returns\" only\n-    // values of type `!`. In this case, if there is an expected\n-    // return type that is *not* `!`, that should be ok. But if the\n-    // return type is being inferred, we want to \"fallback\" to `!`:\n-    //\n-    //     let x = move || panic!();\n-    //\n-    // To allow for that, I am creating a type variable with diverging\n-    // fallback. This was deemed ever so slightly better than unifying\n-    // the return value with `!` because it allows for the caller to\n-    // make more assumptions about the return type (e.g., they could do\n-    //\n-    //     let y: Option<u32> = Some(x());\n-    //\n-    // which would then cause this return type to become `u32`, not\n-    // `!`).\n     let coercion = fcx.ret_coercion.take().unwrap().into_inner();\n     let mut actual_return_ty = coercion.complete(&fcx);\n-    if actual_return_ty.is_never() {\n-        actual_return_ty = fcx.next_diverging_ty_var(TypeVariableOrigin {\n-            kind: TypeVariableOriginKind::DivergingFn,\n-            span,\n-        });\n+    debug!(\"actual_return_ty = {:?}\", actual_return_ty);\n+    if let ty::Dynamic(..) = declared_ret_ty.kind() {\n+        // We have special-cased the case where the function is declared\n+        // `-> dyn Foo` and we don't actually relate it to the\n+        // `fcx.ret_coercion`, so just substitute a type variable.\n+        actual_return_ty =\n+            fcx.next_ty_var(TypeVariableOrigin { kind: TypeVariableOriginKind::DynReturnFn, span });\n+        debug!(\"actual_return_ty replaced with {:?}\", actual_return_ty);\n     }\n     fcx.demand_suptype(span, revealed_ret_ty, actual_return_ty);\n "}]}