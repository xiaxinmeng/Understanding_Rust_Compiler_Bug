{"sha": "8dbe4d9ba4c5cd30e12179bc51c03fafd551914a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkYmU0ZDliYTRjNWNkMzBlMTIxNzliYzUxYzAzZmFmZDU1MTkxNGE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-05-17T22:52:34Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-05-20T18:57:16Z"}, "message": "Eliminate some `Option<NativeLibKind>`s", "tree": {"sha": "18fa2c4430ed9b57e41ecb0022990b0ac1896dce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18fa2c4430ed9b57e41ecb0022990b0ac1896dce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dbe4d9ba4c5cd30e12179bc51c03fafd551914a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dbe4d9ba4c5cd30e12179bc51c03fafd551914a", "html_url": "https://github.com/rust-lang/rust/commit/8dbe4d9ba4c5cd30e12179bc51c03fafd551914a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dbe4d9ba4c5cd30e12179bc51c03fafd551914a/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "529d488f1a8a009fc2dca911b25c82269fadc1d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/529d488f1a8a009fc2dca911b25c82269fadc1d6", "html_url": "https://github.com/rust-lang/rust/commit/529d488f1a8a009fc2dca911b25c82269fadc1d6"}], "stats": {"total": 67, "additions": 33, "deletions": 34}, "files": [{"sha": "0394821d095696c84ff8a5942e9be3ca4d1413af", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8dbe4d9ba4c5cd30e12179bc51c03fafd551914a/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dbe4d9ba4c5cd30e12179bc51c03fafd551914a/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=8dbe4d9ba4c5cd30e12179bc51c03fafd551914a", "patch": "@@ -300,30 +300,30 @@ fn test_native_libs_tracking_hash_different_values() {\n \n     // Reference\n     v1.libs = vec![\n-        (String::from(\"a\"), None, Some(NativeLibKind::StaticBundle)),\n-        (String::from(\"b\"), None, Some(NativeLibKind::Framework)),\n-        (String::from(\"c\"), None, Some(NativeLibKind::Unspecified)),\n+        (String::from(\"a\"), None, NativeLibKind::StaticBundle),\n+        (String::from(\"b\"), None, NativeLibKind::Framework),\n+        (String::from(\"c\"), None, NativeLibKind::Unspecified),\n     ];\n \n     // Change label\n     v2.libs = vec![\n-        (String::from(\"a\"), None, Some(NativeLibKind::StaticBundle)),\n-        (String::from(\"X\"), None, Some(NativeLibKind::Framework)),\n-        (String::from(\"c\"), None, Some(NativeLibKind::Unspecified)),\n+        (String::from(\"a\"), None, NativeLibKind::StaticBundle),\n+        (String::from(\"X\"), None, NativeLibKind::Framework),\n+        (String::from(\"c\"), None, NativeLibKind::Unspecified),\n     ];\n \n     // Change kind\n     v3.libs = vec![\n-        (String::from(\"a\"), None, Some(NativeLibKind::StaticBundle)),\n-        (String::from(\"b\"), None, Some(NativeLibKind::StaticBundle)),\n-        (String::from(\"c\"), None, Some(NativeLibKind::Unspecified)),\n+        (String::from(\"a\"), None, NativeLibKind::StaticBundle),\n+        (String::from(\"b\"), None, NativeLibKind::StaticBundle),\n+        (String::from(\"c\"), None, NativeLibKind::Unspecified),\n     ];\n \n     // Change new-name\n     v4.libs = vec![\n-        (String::from(\"a\"), None, Some(NativeLibKind::StaticBundle)),\n-        (String::from(\"b\"), Some(String::from(\"X\")), Some(NativeLibKind::Framework)),\n-        (String::from(\"c\"), None, Some(NativeLibKind::Unspecified)),\n+        (String::from(\"a\"), None, NativeLibKind::StaticBundle),\n+        (String::from(\"b\"), Some(String::from(\"X\")), NativeLibKind::Framework),\n+        (String::from(\"c\"), None, NativeLibKind::Unspecified),\n     ];\n \n     assert!(v1.dep_tracking_hash() != v2.dep_tracking_hash());\n@@ -345,21 +345,21 @@ fn test_native_libs_tracking_hash_different_order() {\n \n     // Reference\n     v1.libs = vec![\n-        (String::from(\"a\"), None, Some(NativeLibKind::StaticBundle)),\n-        (String::from(\"b\"), None, Some(NativeLibKind::Framework)),\n-        (String::from(\"c\"), None, Some(NativeLibKind::Unspecified)),\n+        (String::from(\"a\"), None, NativeLibKind::StaticBundle),\n+        (String::from(\"b\"), None, NativeLibKind::Framework),\n+        (String::from(\"c\"), None, NativeLibKind::Unspecified),\n     ];\n \n     v2.libs = vec![\n-        (String::from(\"b\"), None, Some(NativeLibKind::Framework)),\n-        (String::from(\"a\"), None, Some(NativeLibKind::StaticBundle)),\n-        (String::from(\"c\"), None, Some(NativeLibKind::Unspecified)),\n+        (String::from(\"b\"), None, NativeLibKind::Framework),\n+        (String::from(\"a\"), None, NativeLibKind::StaticBundle),\n+        (String::from(\"c\"), None, NativeLibKind::Unspecified),\n     ];\n \n     v3.libs = vec![\n-        (String::from(\"c\"), None, Some(NativeLibKind::Unspecified)),\n-        (String::from(\"a\"), None, Some(NativeLibKind::StaticBundle)),\n-        (String::from(\"b\"), None, Some(NativeLibKind::Framework)),\n+        (String::from(\"c\"), None, NativeLibKind::Unspecified),\n+        (String::from(\"a\"), None, NativeLibKind::StaticBundle),\n+        (String::from(\"b\"), None, NativeLibKind::Framework),\n     ];\n \n     assert!(v1.dep_tracking_hash() == v2.dep_tracking_hash());"}, {"sha": "fc4235a3eda098c652ecf0b7764d1ef8d848b712", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8dbe4d9ba4c5cd30e12179bc51c03fafd551914a/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dbe4d9ba4c5cd30e12179bc51c03fafd551914a/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=8dbe4d9ba4c5cd30e12179bc51c03fafd551914a", "patch": "@@ -241,8 +241,8 @@ impl Collector<'tcx> {\n                 .drain_filter(|lib| {\n                     if let Some(lib_name) = lib.name {\n                         if lib_name.as_str() == *name {\n-                            if let Some(k) = kind {\n-                                lib.kind = k;\n+                            if kind != NativeLibKind::Unspecified {\n+                                lib.kind = kind;\n                             }\n                             if let &Some(ref new_name) = new_name {\n                                 lib.name = Some(Symbol::intern(new_name));\n@@ -258,7 +258,7 @@ impl Collector<'tcx> {\n                 let new_name = new_name.as_ref().map(|s| &**s); // &Option<String> -> Option<&str>\n                 let lib = NativeLib {\n                     name: Some(Symbol::intern(new_name.unwrap_or(name))),\n-                    kind: if let Some(k) = kind { k } else { NativeLibKind::Unspecified },\n+                    kind,\n                     cfg: None,\n                     foreign_module: None,\n                     wasm_import_module: None,"}, {"sha": "5bdd7b67723b8d284cbc43070e37a5559a5287eb", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8dbe4d9ba4c5cd30e12179bc51c03fafd551914a/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dbe4d9ba4c5cd30e12179bc51c03fafd551914a/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=8dbe4d9ba4c5cd30e12179bc51c03fafd551914a", "patch": "@@ -1452,7 +1452,7 @@ fn select_debuginfo(\n fn parse_libs(\n     matches: &getopts::Matches,\n     error_format: ErrorOutputType,\n-) -> Vec<(String, Option<String>, Option<NativeLibKind>)> {\n+) -> Vec<(String, Option<String>, NativeLibKind)> {\n     matches\n         .opt_strs(\"l\")\n         .into_iter()\n@@ -1462,11 +1462,11 @@ fn parse_libs(\n             let mut parts = s.splitn(2, '=');\n             let kind = parts.next().unwrap();\n             let (name, kind) = match (parts.next(), kind) {\n-                (None, name) => (name, None),\n-                (Some(name), \"dylib\") => (name, Some(NativeLibKind::Dylib)),\n-                (Some(name), \"framework\") => (name, Some(NativeLibKind::Framework)),\n-                (Some(name), \"static\") => (name, Some(NativeLibKind::StaticBundle)),\n-                (Some(name), \"static-nobundle\") => (name, Some(NativeLibKind::StaticNoBundle)),\n+                (None, name) => (name, NativeLibKind::Unspecified),\n+                (Some(name), \"dylib\") => (name, NativeLibKind::Dylib),\n+                (Some(name), \"framework\") => (name, NativeLibKind::Framework),\n+                (Some(name), \"static\") => (name, NativeLibKind::StaticBundle),\n+                (Some(name), \"static-nobundle\") => (name, NativeLibKind::StaticNoBundle),\n                 (_, s) => {\n                     early_error(\n                         error_format,\n@@ -1478,7 +1478,7 @@ fn parse_libs(\n                     );\n                 }\n             };\n-            if kind == Some(NativeLibKind::StaticNoBundle) && !nightly_options::is_nightly_build() {\n+            if kind == NativeLibKind::StaticNoBundle && !nightly_options::is_nightly_build() {\n                 early_error(\n                     error_format,\n                     \"the library kind 'static-nobundle' is only \\\n@@ -2058,7 +2058,6 @@ crate mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Option<RelroLevel>);\n     impl_dep_tracking_hash_via_hash!(Option<lint::Level>);\n     impl_dep_tracking_hash_via_hash!(Option<PathBuf>);\n-    impl_dep_tracking_hash_via_hash!(Option<NativeLibKind>);\n     impl_dep_tracking_hash_via_hash!(CrateType);\n     impl_dep_tracking_hash_via_hash!(MergeFunctions);\n     impl_dep_tracking_hash_via_hash!(PanicStrategy);\n@@ -2084,7 +2083,7 @@ crate mod dep_tracking {\n     impl_dep_tracking_hash_for_sortable_vec_of!(PathBuf);\n     impl_dep_tracking_hash_for_sortable_vec_of!(CrateType);\n     impl_dep_tracking_hash_for_sortable_vec_of!((String, lint::Level));\n-    impl_dep_tracking_hash_for_sortable_vec_of!((String, Option<String>, Option<NativeLibKind>));\n+    impl_dep_tracking_hash_for_sortable_vec_of!((String, Option<String>, NativeLibKind));\n     impl_dep_tracking_hash_for_sortable_vec_of!((String, u64));\n     impl_dep_tracking_hash_for_sortable_vec_of!(Sanitizer);\n "}, {"sha": "3b6c21e7de0083e38b6310b495eb01f5c26d1322", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dbe4d9ba4c5cd30e12179bc51c03fafd551914a/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dbe4d9ba4c5cd30e12179bc51c03fafd551914a/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=8dbe4d9ba4c5cd30e12179bc51c03fafd551914a", "patch": "@@ -93,7 +93,7 @@ top_level_options!(\n         describe_lints: bool [UNTRACKED],\n         output_types: OutputTypes [TRACKED],\n         search_paths: Vec<SearchPath> [UNTRACKED],\n-        libs: Vec<(String, Option<String>, Option<NativeLibKind>)> [TRACKED],\n+        libs: Vec<(String, Option<String>, NativeLibKind)> [TRACKED],\n         maybe_sysroot: Option<PathBuf> [UNTRACKED],\n \n         target_triple: TargetTriple [TRACKED],"}]}