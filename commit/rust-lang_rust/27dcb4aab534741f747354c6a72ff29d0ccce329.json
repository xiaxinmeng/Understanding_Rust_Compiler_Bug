{"sha": "27dcb4aab534741f747354c6a72ff29d0ccce329", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ZGNiNGFhYjUzNDc0MWY3NDczNTRjNmE3MmZmMjlkMGNjY2UzMjk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-10T07:33:10Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-10T08:04:38Z"}, "message": "Avoid collisions between traits and their derive macros", "tree": {"sha": "f93cfed6336090aa896c70b8f4731896ff7bd6ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f93cfed6336090aa896c70b8f4731896ff7bd6ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27dcb4aab534741f747354c6a72ff29d0ccce329", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27dcb4aab534741f747354c6a72ff29d0ccce329", "html_url": "https://github.com/rust-lang/rust/commit/27dcb4aab534741f747354c6a72ff29d0ccce329", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27dcb4aab534741f747354c6a72ff29d0ccce329/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e003c3ea059e20a0e04cc953d0d128e0ea69acd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e003c3ea059e20a0e04cc953d0d128e0ea69acd8", "html_url": "https://github.com/rust-lang/rust/commit/e003c3ea059e20a0e04cc953d0d128e0ea69acd8"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "ab4dbb87425db5b25e38d717a61bd4ac4667e467", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/27dcb4aab534741f747354c6a72ff29d0ccce329/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27dcb4aab534741f747354c6a72ff29d0ccce329/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=27dcb4aab534741f747354c6a72ff29d0ccce329", "patch": "@@ -12,6 +12,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::ty;\n use rustc_resolve::ParentScope;\n use rustc_session::lint;\n+use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::Ident;\n use rustc_span::symbol::Symbol;\n use rustc_span::DUMMY_SP;\n@@ -407,6 +408,22 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n     }\n }\n \n+/// Check for resolve collisions between a trait and its derive\n+///\n+/// These are common and we should just resolve to the trait in that case\n+fn is_derive_trait_collision<T>(ns: &PerNS<Option<(Res, T)>>) -> bool {\n+    if let PerNS {\n+        type_ns: Some((Res::Def(DefKind::Trait, _), _)),\n+        macro_ns: Some((Res::Def(DefKind::Macro(MacroKind::Derive), _), _)),\n+        ..\n+    } = *ns\n+    {\n+        true\n+    } else {\n+        false\n+    }\n+}\n+\n impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n     fn fold_item(&mut self, mut item: Item) -> Option<Item> {\n         let item_hir_id = if item.is_mod() {\n@@ -650,7 +667,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                     }\n                     None => {\n                         // Try everything!\n-                        let candidates = PerNS {\n+                        let mut candidates = PerNS {\n                             macro_ns: self\n                                 .macro_resolve(path_str, base_node)\n                                 .map(|res| (res, extra_fragment.clone())),\n@@ -705,10 +722,16 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                             continue;\n                         }\n \n-                        let is_unambiguous = candidates.clone().present_items().count() == 1;\n-                        if is_unambiguous {\n+                        let len = candidates.clone().present_items().count();\n+\n+                        if len == 1 {\n                             candidates.present_items().next().unwrap()\n+                        } else if len == 2 && is_derive_trait_collision(&candidates) {\n+                            candidates.type_ns.unwrap()\n                         } else {\n+                            if is_derive_trait_collision(&candidates) {\n+                                candidates.macro_ns = None;\n+                            }\n                             ambiguity_error(\n                                 cx,\n                                 &item,"}, {"sha": "04a431d99026e8f7c4478af244d3042042450c0e", "filename": "src/test/rustdoc/auxiliary/intra-link-proc-macro-macro.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/27dcb4aab534741f747354c6a72ff29d0ccce329/src%2Ftest%2Frustdoc%2Fauxiliary%2Fintra-link-proc-macro-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27dcb4aab534741f747354c6a72ff29d0ccce329/src%2Ftest%2Frustdoc%2Fauxiliary%2Fintra-link-proc-macro-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fintra-link-proc-macro-macro.rs?ref=27dcb4aab534741f747354c6a72ff29d0ccce329", "patch": "@@ -19,6 +19,11 @@ pub fn b_derive(input: TokenStream) -> TokenStream {\n     input\n }\n \n+#[proc_macro_derive(DeriveTrait)]\n+pub fn trait_derive(input: TokenStream) -> TokenStream {\n+    input\n+}\n+\n #[proc_macro_attribute]\n pub fn attr_a(input: TokenStream, _args: TokenStream) -> TokenStream {\n     input"}, {"sha": "405e08d4c07c39f0617c098ea0611b11efc83de7", "filename": "src/test/rustdoc/intra-link-proc-macro.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27dcb4aab534741f747354c6a72ff29d0ccce329/src%2Ftest%2Frustdoc%2Fintra-link-proc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27dcb4aab534741f747354c6a72ff29d0ccce329/src%2Ftest%2Frustdoc%2Fintra-link-proc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-proc-macro.rs?ref=27dcb4aab534741f747354c6a72ff29d0ccce329", "patch": "@@ -11,7 +11,11 @@ use intra_link_proc_macro_macro::{DeriveB, attr_b};\n \n // @has - '//a/@href' '../intra_link_proc_macro/derive.DeriveA.html'\n // @has - '//a/@href' '../intra_link_proc_macro/attr.attr_a.html'\n+// @has - '//a/@href' '../intra_link_proc_macro/trait.DeriveTrait.html'\n // @has - '//a/@href' '../intra_link_proc_macro_macro/derive.DeriveB.html'\n // @has - '//a/@href' '../intra_link_proc_macro_macro/attr.attr_b.html'\n-/// Link to [DeriveA], [attr_a], [DeriveB], [attr_b]\n+/// Link to [DeriveA], [attr_a], [DeriveB], [attr_b], [DeriveTrait]\n pub struct Foo;\n+\n+// this should not cause ambiguity errors\n+pub trait DeriveTrait {}"}]}