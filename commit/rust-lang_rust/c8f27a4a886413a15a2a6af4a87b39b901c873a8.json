{"sha": "c8f27a4a886413a15a2a6af4a87b39b901c873a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZjI3YTRhODg2NDEzYTE1YTJhNmFmNGE4N2IzOWI5MDFjODczYTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-30T23:54:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-30T23:54:54Z"}, "message": "Generate features docs from source", "tree": {"sha": "ae4f7c31fa30581ef09b3c29d2673dee922e5845", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae4f7c31fa30581ef09b3c29d2673dee922e5845"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8f27a4a886413a15a2a6af4a87b39b901c873a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8f27a4a886413a15a2a6af4a87b39b901c873a8", "html_url": "https://github.com/rust-lang/rust/commit/c8f27a4a886413a15a2a6af4a87b39b901c873a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8f27a4a886413a15a2a6af4a87b39b901c873a8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "383247a9ae8202f20ce6f01d1429c1cd2a11d516", "url": "https://api.github.com/repos/rust-lang/rust/commits/383247a9ae8202f20ce6f01d1429c1cd2a11d516", "html_url": "https://github.com/rust-lang/rust/commit/383247a9ae8202f20ce6f01d1429c1cd2a11d516"}], "stats": {"total": 316, "additions": 258, "deletions": 58}, "files": [{"sha": "3f59b89bb42ef67210303c8096aaa2b646b0c731", "filename": "crates/ra_ide/src/display/structure.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c8f27a4a886413a15a2a6af4a87b39b901c873a8/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fstructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8f27a4a886413a15a2a6af4a87b39b901c873a8/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fstructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fstructure.rs?ref=c8f27a4a886413a15a2a6af4a87b39b901c873a8", "patch": "@@ -18,6 +18,19 @@ pub struct StructureNode {\n     pub deprecated: bool,\n }\n \n+// Feature: File Structure\n+//\n+// Provides a tree of the symbols defined in the file. Can be used to\n+//\n+// * fuzzy search symbol in a file (super useful)\n+// * draw breadcrumbs to describe the context around the cursor\n+// * draw outline of the file\n+//\n+// |===\n+// | Editor  | Shortcut\n+//\n+// | VS Code | kbd:[Ctrl+Shift+O]\n+// |===\n pub fn file_structure(file: &SourceFile) -> Vec<StructureNode> {\n     let mut res = Vec::new();\n     let mut stack = Vec::new();"}, {"sha": "cee0a19e191d1d5ae9f2f71b196a35c64ef6038d", "filename": "crates/ra_ide/src/extend_selection.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c8f27a4a886413a15a2a6af4a87b39b901c873a8/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8f27a4a886413a15a2a6af4a87b39b901c873a8/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs?ref=c8f27a4a886413a15a2a6af4a87b39b901c873a8", "patch": "@@ -14,6 +14,16 @@ use ra_syntax::{\n \n use crate::FileRange;\n \n+// Feature: Extend Selection\n+//\n+// Extends the current selection to the encompassing syntactic construct\n+// (expression, statement, item, module, etc). It works with multiple cursors.\n+//\n+// |===\n+// | Editor  | Shortcut\n+//\n+// | VS Code | kbd:[Ctrl+Shift+\u2192]\n+// |===\n pub(crate) fn extend_selection(db: &RootDatabase, frange: FileRange) -> TextRange {\n     let sema = Semantics::new(db);\n     let src = sema.parse(frange.file_id);"}, {"sha": "83ea5092c81bf4a06fadbac104ad6d78709101a5", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c8f27a4a886413a15a2a6af4a87b39b901c873a8/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8f27a4a886413a15a2a6af4a87b39b901c873a8/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=c8f27a4a886413a15a2a6af4a87b39b901c873a8", "patch": "@@ -17,6 +17,15 @@ use crate::{\n     FilePosition, NavigationTarget, RangeInfo,\n };\n \n+// Feature: Go To Definition\n+//\n+// Navigates to the definition of an identifier.\n+//\n+// |===\n+// | Editor  | Shortcut\n+//\n+// | VS Code | kbd:[F12]\n+// |===\n pub(crate) fn goto_definition(\n     db: &RootDatabase,\n     position: FilePosition,"}, {"sha": "a5a296d228b9aad685e99502a8d843a3ee330e43", "filename": "crates/ra_ide/src/goto_implementation.rs", "status": "renamed", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c8f27a4a886413a15a2a6af4a87b39b901c873a8/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8f27a4a886413a15a2a6af4a87b39b901c873a8/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs?ref=c8f27a4a886413a15a2a6af4a87b39b901c873a8", "patch": "@@ -6,6 +6,15 @@ use ra_syntax::{algo::find_node_at_offset, ast, AstNode};\n \n use crate::{display::ToNav, FilePosition, NavigationTarget, RangeInfo};\n \n+// Feature: Go To Implementation\n+//\n+// Navigates to the impl block of structs, enums or traits. Also implemented as a code lens.\n+//\n+// |===\n+// | Editor  | Shortcut\n+//\n+// | VS Code | kbd:[Ctrl+F12]\n+// |===\n pub(crate) fn goto_implementation(\n     db: &RootDatabase,\n     position: FilePosition,", "previous_filename": "crates/ra_ide/src/impls.rs"}, {"sha": "eeadfa9ee702d767c49be0485b2abecd1f6b0105", "filename": "crates/ra_ide/src/goto_type_definition.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c8f27a4a886413a15a2a6af4a87b39b901c873a8/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8f27a4a886413a15a2a6af4a87b39b901c873a8/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs?ref=c8f27a4a886413a15a2a6af4a87b39b901c873a8", "patch": "@@ -5,6 +5,9 @@ use ra_syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxToken, TokenAtOffs\n \n use crate::{display::ToNav, FilePosition, NavigationTarget, RangeInfo};\n \n+// Feature: Go To Type Definition\n+//\n+// Navigates to the type of an identifier.\n pub(crate) fn goto_type_definition(\n     db: &RootDatabase,\n     position: FilePosition,"}, {"sha": "12d5716e83598ac3c02ef74c70040de4ff1b0cbc", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8f27a4a886413a15a2a6af4a87b39b901c873a8/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8f27a4a886413a15a2a6af4a87b39b901c873a8/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=c8f27a4a886413a15a2a6af4a87b39b901c873a8", "patch": "@@ -23,14 +23,14 @@ mod completion;\n mod runnables;\n mod goto_definition;\n mod goto_type_definition;\n+mod goto_implementation;\n mod extend_selection;\n mod hover;\n mod call_hierarchy;\n mod call_info;\n mod syntax_highlighting;\n mod parent_module;\n mod references;\n-mod impls;\n mod diagnostics;\n mod syntax_tree;\n mod folding_ranges;\n@@ -373,7 +373,7 @@ impl Analysis {\n         &self,\n         position: FilePosition,\n     ) -> Cancelable<Option<RangeInfo<Vec<NavigationTarget>>>> {\n-        self.with_db(|db| impls::goto_implementation(db, position))\n+        self.with_db(|db| goto_implementation::goto_implementation(db, position))\n     }\n \n     /// Returns the type definitions for the symbol at `position`."}, {"sha": "67e2c33a000ed95ba9f28855923e37ee7cadfe11", "filename": "crates/ra_ide/src/typing.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c8f27a4a886413a15a2a6af4a87b39b901c873a8/crates%2Fra_ide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8f27a4a886413a15a2a6af4a87b39b901c873a8/crates%2Fra_ide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftyping.rs?ref=c8f27a4a886413a15a2a6af4a87b39b901c873a8", "patch": "@@ -32,6 +32,13 @@ pub(crate) use on_enter::on_enter;\n \n pub(crate) const TRIGGER_CHARS: &str = \".=>\";\n \n+// Feature: On Typing Assists\n+//\n+// Some features trigger on typing certain characters:\n+//\n+// - typing `let =` tries to smartly add `;` if `=` is followed by an existing expression\n+// - Enter inside comments automatically inserts `///`\n+// - typing `.` in a chain method call auto-indents\n pub(crate) fn on_char_typed(\n     db: &RootDatabase,\n     position: FilePosition,"}, {"sha": "acc31fe3b51bd2b1b538e308cbf1124148a1b8ff", "filename": "crates/ra_ide_db/src/symbol_index.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c8f27a4a886413a15a2a6af4a87b39b901c873a8/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8f27a4a886413a15a2a6af4a87b39b901c873a8/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs?ref=c8f27a4a886413a15a2a6af4a87b39b901c873a8", "patch": "@@ -110,6 +110,27 @@ fn file_symbols(db: &impl SymbolsDatabase, file_id: FileId) -> Arc<SymbolIndex>\n     Arc::new(SymbolIndex::new(symbols))\n }\n \n+// Feature: Workspace Symbol\n+//\n+// Uses fuzzy-search to find types, modules and functions by name across your\n+// project and dependencies. This is **the** most useful feature, which improves code\n+// navigation tremendously. It mostly works on top of the built-in LSP\n+// functionality, however `#` and `*` symbols can be used to narrow down the\n+// search. Specifically,\n+//\n+// - `Foo` searches for `Foo` type in the current workspace\n+// - `foo#` searches for `foo` function in the current workspace\n+// - `Foo*` searches for `Foo` type among dependencies, including `stdlib`\n+// - `foo#*` searches for `foo` function among dependencies\n+//\n+// That is, `#` switches from \"types\" to all symbols, `*` switches from the current\n+// workspace to dependencies.\n+//\n+// |===\n+// | Editor  | Shortcut\n+//\n+// | VS Code | kbd:[Ctrl+T]\n+// |===\n pub fn world_symbols(db: &RootDatabase, query: Query) -> Vec<FileSymbol> {\n     /// Need to wrap Snapshot to provide `Clone` impl for `map_with`\n     struct Snap(salsa::Snapshot<RootDatabase>);"}, {"sha": "4d940225249b8c6d3ceee8f3a2d65567c1267568", "filename": "docs/user/features.md", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c8f27a4a886413a15a2a6af4a87b39b901c873a8/docs%2Fuser%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/c8f27a4a886413a15a2a6af4a87b39b901c873a8/docs%2Fuser%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Ffeatures.md?ref=c8f27a4a886413a15a2a6af4a87b39b901c873a8", "patch": "@@ -2,58 +2,6 @@ This document is an index of features that the rust-analyzer language server\n provides. Shortcuts are for the default VS Code layout. If there's no shortcut,\n you can use <kbd>Ctrl+Shift+P</kbd> to search for the corresponding action.\n \n-### Workspace Symbol <kbd>ctrl+t</kbd>\n-\n-Uses fuzzy-search to find types, modules and functions by name across your\n-project and dependencies. This is **the** most useful feature, which improves code\n-navigation tremendously. It mostly works on top of the built-in LSP\n-functionality, however `#` and `*` symbols can be used to narrow down the\n-search. Specifically,\n-\n-- `Foo` searches for `Foo` type in the current workspace\n-- `foo#` searches for `foo` function in the current workspace\n-- `Foo*` searches for `Foo` type among dependencies, including `stdlib`\n-- `foo#*` searches for `foo` function among dependencies\n-\n-That is, `#` switches from \"types\" to all symbols, `*` switches from the current\n-workspace to dependencies.\n-\n-### Document Symbol <kbd>ctrl+shift+o</kbd>\n-\n-Provides a tree of the symbols defined in the file. Can be used to\n-\n-* fuzzy search symbol in a file (super useful)\n-* draw breadcrumbs to describe the context around the cursor\n-* draw outline of the file\n-\n-### On Typing Assists\n-\n-Some features trigger on typing certain characters:\n-\n-- typing `let =` tries to smartly add `;` if `=` is followed by an existing expression\n-- Enter inside comments automatically inserts `///`\n-- typing `.` in a chain method call auto-indents\n-\n-### Extend Selection\n-\n-Extends the current selection to the encompassing syntactic construct\n-(expression, statement, item, module, etc). It works with multiple cursors. This\n-is a relatively new feature of LSP:\n-https://github.com/Microsoft/language-server-protocol/issues/613, check your\n-editor's LSP library to see if this feature is supported.\n-\n-### Go to Definition\n-\n-Navigates to the definition of an identifier.\n-\n-### Go to Implementation\n-\n-Navigates to the impl block of structs, enums or traits. Also implemented as a code lens.\n-\n-### Go to Type Defintion\n-\n-Navigates to the type of an identifier.\n-\n ### Commands <kbd>ctrl+shift+p</kbd>\n \n #### Run"}, {"sha": "e1eb5d88a8f667e20d99d1545b4579b923787f84", "filename": "docs/user/generated_features.adoc", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/c8f27a4a886413a15a2a6af4a87b39b901c873a8/docs%2Fuser%2Fgenerated_features.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/c8f27a4a886413a15a2a6af4a87b39b901c873a8/docs%2Fuser%2Fgenerated_features.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_features.adoc?ref=c8f27a4a886413a15a2a6af4a87b39b901c873a8", "patch": "@@ -0,0 +1,98 @@\n+=== Extend Selection\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/extend_selection.rs[extend_selection.rs]\n+\n+\n+Extends the current selection to the encompassing syntactic construct\n+(expression, statement, item, module, etc). It works with multiple cursors.\n+\n+|===\n+| Editor  | Shortcut\n+\n+| VS Code | kbd:[Ctrl+Shift+\u2192]\n+|===\n+\n+\n+=== File Structure\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/display/structure.rs[structure.rs]\n+\n+\n+Provides a tree of the symbols defined in the file. Can be used to\n+\n+* fuzzy search symbol in a file (super useful)\n+* draw breadcrumbs to describe the context around the cursor\n+* draw outline of the file\n+\n+|===\n+| Editor  | Shortcut\n+\n+| VS Code | kbd:[Ctrl+Shift+O]\n+|===\n+\n+\n+=== Go To Definition\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/goto_definition.rs[goto_definition.rs]\n+\n+\n+Navigates to the definition of an identifier.\n+\n+|===\n+| Editor  | Shortcut\n+\n+| VS Code | kbd:[F12]\n+|===\n+\n+\n+=== Go To Implementation\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/goto_implementation.rs[goto_implementation.rs]\n+\n+\n+Navigates to the impl block of structs, enums or traits. Also implemented as a code lens.\n+\n+|===\n+| Editor  | Shortcut\n+\n+| VS Code | kbd:[Ctrl+F12]\n+|===\n+\n+\n+=== Go To Type Definition\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/goto_type_definition.rs[goto_type_definition.rs]\n+\n+\n+Navigates to the type of an identifier.\n+\n+\n+=== On Typing Assists\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/typing.rs[typing.rs]\n+\n+\n+Some features trigger on typing certain characters:\n+\n+- typing `let =` tries to smartly add `;` if `=` is followed by an existing expression\n+- Enter inside comments automatically inserts `///`\n+- typing `.` in a chain method call auto-indents\n+\n+\n+=== Workspace Symbol\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide_db/src/symbol_index.rs[symbol_index.rs]\n+\n+\n+Uses fuzzy-search to find types, modules and functions by name across your\n+project and dependencies. This is **the** most useful feature, which improves code\n+navigation tremendously. It mostly works on top of the built-in LSP\n+functionality, however `#` and `*` symbols can be used to narrow down the\n+search. Specifically,\n+\n+- `Foo` searches for `Foo` type in the current workspace\n+- `foo#` searches for `foo` function in the current workspace\n+- `Foo*` searches for `Foo` type among dependencies, including `stdlib`\n+- `foo#*` searches for `foo` function among dependencies\n+\n+That is, `#` switches from \"types\" to all symbols, `*` switches from the current\n+workspace to dependencies.\n+\n+|===\n+| Editor  | Shortcut\n+\n+| VS Code | kbd:[Ctrl+T]\n+|==="}, {"sha": "7b159bfc6b7fc3cfe2f65f6106760759ed7adc11", "filename": "docs/user/readme.adoc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c8f27a4a886413a15a2a6af4a87b39b901c873a8/docs%2Fuser%2Freadme.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/c8f27a4a886413a15a2a6af4a87b39b901c873a8/docs%2Fuser%2Freadme.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Freadme.adoc?ref=c8f27a4a886413a15a2a6af4a87b39b901c873a8", "patch": "@@ -8,6 +8,7 @@\n :important-caption: :heavy_exclamation_mark:\n :caution-caption: :fire:\n :warning-caption: :warning:\n+:experimental:\n \n // Master copy of this document lives in the https://github.com/rust-analyzer/rust-analyzer repository\n \n@@ -268,6 +269,6 @@ Gnome Builder currently has support for RLS, and there's no way to configure the\n 1. Rename, symlink or copy the `rust-analyzer` binary to `rls` and place it somewhere Builder can find (in `PATH`, or under `~/.cargo/bin`).\n 2. Enable the Rust Builder plugin.\n \n-== Usage\n+== Features\n \n-See https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/features.md[features.md].\n+include::./generated_features.adoc[]"}, {"sha": "3e2a66979d9d70e958ac2275a7989f7845da9c7b", "filename": "xtask/src/codegen.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c8f27a4a886413a15a2a6af4a87b39b901c873a8/xtask%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8f27a4a886413a15a2a6af4a87b39b901c873a8/xtask%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen.rs?ref=c8f27a4a886413a15a2a6af4a87b39b901c873a8", "patch": "@@ -8,14 +8,15 @@\n mod gen_syntax;\n mod gen_parser_tests;\n mod gen_assists_docs;\n+mod gen_feature_docs;\n \n use std::{mem, path::Path};\n \n use crate::{not_bash::fs2, Result};\n \n pub use self::{\n-    gen_assists_docs::generate_assists_docs, gen_parser_tests::generate_parser_tests,\n-    gen_syntax::generate_syntax,\n+    gen_assists_docs::generate_assists_docs, gen_feature_docs::generate_feature_docs,\n+    gen_parser_tests::generate_parser_tests, gen_syntax::generate_syntax,\n };\n \n const GRAMMAR_DIR: &str = \"crates/ra_parser/src/grammar\";"}, {"sha": "58318564872e88cc459e8b73917186b767ec0846", "filename": "xtask/src/codegen/gen_feature_docs.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/c8f27a4a886413a15a2a6af4a87b39b901c873a8/xtask%2Fsrc%2Fcodegen%2Fgen_feature_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8f27a4a886413a15a2a6af4a87b39b901c873a8/xtask%2Fsrc%2Fcodegen%2Fgen_feature_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_feature_docs.rs?ref=c8f27a4a886413a15a2a6af4a87b39b901c873a8", "patch": "@@ -0,0 +1,72 @@\n+//! Generates `assists.md` documentation.\n+\n+use std::{fmt, fs, path::PathBuf};\n+\n+use crate::{\n+    codegen::{self, extract_comment_blocks_with_empty_lines, Mode},\n+    project_root, rust_files, Result,\n+};\n+\n+pub fn generate_feature_docs(mode: Mode) -> Result<()> {\n+    let features = Feature::collect()?;\n+    let contents = features.into_iter().map(|it| it.to_string()).collect::<Vec<_>>().join(\"\\n\\n\");\n+\n+    let dst = project_root().join(\"docs/user/generated_features.adoc\");\n+    codegen::update(&dst, &contents, mode)?;\n+    Ok(())\n+}\n+\n+#[derive(Debug)]\n+struct Feature {\n+    id: String,\n+    path: PathBuf,\n+    doc: String,\n+}\n+\n+impl Feature {\n+    fn collect() -> Result<Vec<Feature>> {\n+        let mut res = Vec::new();\n+        for path in rust_files(&project_root()) {\n+            collect_file(&mut res, path)?;\n+        }\n+        res.sort_by(|lhs, rhs| lhs.id.cmp(&rhs.id));\n+        return Ok(res);\n+\n+        fn collect_file(acc: &mut Vec<Feature>, path: PathBuf) -> Result<()> {\n+            let text = fs::read_to_string(&path)?;\n+            let comment_blocks = extract_comment_blocks_with_empty_lines(\"Feature\", &text);\n+\n+            for block in comment_blocks {\n+                let id = block.id;\n+                assert!(\n+                    id.split_ascii_whitespace().all(|it| it.starts_with(char::is_uppercase)),\n+                    \"bad feature: {}\",\n+                    id\n+                );\n+                let doc = block.contents.join(\"\\n\");\n+                acc.push(Feature { id, path: path.clone(), doc })\n+            }\n+\n+            Ok(())\n+        }\n+    }\n+}\n+\n+impl fmt::Display for Feature {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        writeln!(f, \"=== {}\", self.id)?;\n+        let path = self.path.strip_prefix(&project_root()).unwrap();\n+        let name = self.path.file_name().unwrap();\n+\n+        //FIXME: generate line number as well\n+        writeln!(\n+            f,\n+            \"**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/{}[{}]\",\n+            path.display(),\n+            name.to_str().unwrap(),\n+        )?;\n+\n+        writeln!(f, \"\\n{}\", self.doc)?;\n+        Ok(())\n+    }\n+}"}, {"sha": "9d7cdd1145ae1e29094cc8dc6392e17bac8d9312", "filename": "xtask/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8f27a4a886413a15a2a6af4a87b39b901c873a8/xtask%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8f27a4a886413a15a2a6af4a87b39b901c873a8/xtask%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmain.rs?ref=c8f27a4a886413a15a2a6af4a87b39b901c873a8", "patch": "@@ -75,6 +75,7 @@ FLAGS:\n             codegen::generate_syntax(Mode::Overwrite)?;\n             codegen::generate_parser_tests(Mode::Overwrite)?;\n             codegen::generate_assists_docs(Mode::Overwrite)?;\n+            codegen::generate_feature_docs(Mode::Overwrite)?;\n             Ok(())\n         }\n         \"format\" => {"}, {"sha": "06ff45d994bc79a1dce1db4f19373727dfbc5110", "filename": "xtask/tests/tidy.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c8f27a4a886413a15a2a6af4a87b39b901c873a8/xtask%2Ftests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8f27a4a886413a15a2a6af4a87b39b901c873a8/xtask%2Ftests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy.rs?ref=c8f27a4a886413a15a2a6af4a87b39b901c873a8", "patch": "@@ -30,6 +30,13 @@ fn generated_assists_are_fresh() {\n     }\n }\n \n+#[test]\n+fn generated_features_are_fresh() {\n+    if let Err(error) = codegen::generate_feature_docs(Mode::Verify) {\n+        panic!(\"{}. Please update features by running `cargo xtask codegen`\", error);\n+    }\n+}\n+\n #[test]\n fn check_code_formatting() {\n     if let Err(error) = run_rustfmt(Mode::Verify) {"}]}