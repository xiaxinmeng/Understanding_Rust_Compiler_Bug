{"sha": "ebb4d29d694f60f746a2b7b43980ba89cc9dc807", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViYjRkMjlkNjk0ZjYwZjc0NmEyYjdiNDM5ODBiYTg5Y2M5ZGM4MDc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-14T12:58:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-14T12:58:34Z"}, "message": "Merge #5371\n\n5371: Allow multiline annotations r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "152c05466cc8541efa920688ac4e2197cc6e96c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/152c05466cc8541efa920688ac4e2197cc6e96c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebb4d29d694f60f746a2b7b43980ba89cc9dc807", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfDav6CRBK7hj4Ov3rIwAAdHIIAJNvKfi7o26W11BIpdwYJk5R\nPAglv5qKEQgcDl5mV//eoBvquT9rlvV4BDVnrWpO95JQL2CrMG9MGfO6+1eH8xqy\nRGz4BaAeVPvxodCut3KopKLMMAMmqZhhgAFFNlyK+qI2Ws8xp2MSpZo37RUv9sEh\ndB8BV+MpWMCLAapihytQU9ejj4MTjz1JdfR9ecEVlJVGyIi2LufoZgOMiDqoTRCK\n+W1ICLPbfl1MmVJYviJx80D6KobpuLTOsUQRBFVYMsclY7G5m8cGwLt7W577Exoa\nFUOf1gRDjsZofFm4fW2sHOFZBTv7CPnI3/R5NSoORTwEei5x6eZ1ivfd0aAunmg=\n=+aKX\n-----END PGP SIGNATURE-----\n", "payload": "tree 152c05466cc8541efa920688ac4e2197cc6e96c1\nparent 92c5036a7cf9dc32fccdf3c831af05b74550a3e1\nparent abeb003df47de4a1b7aa36a7c4d7987d8cf40ace\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1594731514 +0000\ncommitter GitHub <noreply@github.com> 1594731514 +0000\n\nMerge #5371\n\n5371: Allow multiline annotations r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebb4d29d694f60f746a2b7b43980ba89cc9dc807", "html_url": "https://github.com/rust-lang/rust/commit/ebb4d29d694f60f746a2b7b43980ba89cc9dc807", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebb4d29d694f60f746a2b7b43980ba89cc9dc807/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92c5036a7cf9dc32fccdf3c831af05b74550a3e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/92c5036a7cf9dc32fccdf3c831af05b74550a3e1", "html_url": "https://github.com/rust-lang/rust/commit/92c5036a7cf9dc32fccdf3c831af05b74550a3e1"}, {"sha": "abeb003df47de4a1b7aa36a7c4d7987d8cf40ace", "url": "https://api.github.com/repos/rust-lang/rust/commits/abeb003df47de4a1b7aa36a7c4d7987d8cf40ace", "html_url": "https://github.com/rust-lang/rust/commit/abeb003df47de4a1b7aa36a7c4d7987d8cf40ace"}], "stats": {"total": 82, "additions": 68, "deletions": 14}, "files": [{"sha": "3870c6d9c3f433b5866dea1985b358ab470f3adc", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ebb4d29d694f60f746a2b7b43980ba89cc9dc807/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebb4d29d694f60f746a2b7b43980ba89cc9dc807/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=ebb4d29d694f60f746a2b7b43980ba89cc9dc807", "patch": "@@ -261,8 +261,7 @@ fn check_diagnostics(ra_fixture: &str) {\n         // FXIME: macros...\n         let file_id = d.source().file_id.original_file(&db);\n         let range = d.syntax_node(&db).text_range();\n-        // FIXME: support multi-line messages in annotations\n-        let message = d.message().lines().next().unwrap().to_owned();\n+        let message = d.message().to_owned();\n         actual.entry(file_id).or_default().push((range, message));\n     });\n     actual.values_mut().for_each(|diags| diags.sort_by_key(|it| it.0.start()));"}, {"sha": "95f272811fcec06411299cb287e92f2ce0350c68", "filename": "crates/ra_hir_ty/src/diagnostics/match_check.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebb4d29d694f60f746a2b7b43980ba89cc9dc807/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebb4d29d694f60f746a2b7b43980ba89cc9dc807/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs?ref=ebb4d29d694f60f746a2b7b43980ba89cc9dc807", "patch": "@@ -1162,12 +1162,14 @@ fn main() {\n     match a {\n         Either::A { } => (),\n                 //^^^ Missing structure fields:\n+                //  | - foo\n         Either::B => (),\n     }\n     match a {\n         //^ Missing match arm\n         Either::A { } => (),\n     }           //^^^ Missing structure fields:\n+                //  | - foo\n \n     match a {\n         Either::A { foo: true } => (),"}, {"sha": "ad586c882bec6c60cf28ea82cc961a286caae5f7", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 65, "deletions": 12, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/ebb4d29d694f60f746a2b7b43980ba89cc9dc807/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebb4d29d694f60f746a2b7b43980ba89cc9dc807/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=ebb4d29d694f60f746a2b7b43980ba89cc9dc807", "patch": "@@ -179,31 +179,80 @@ pub fn extract_annotations(text: &str) -> Vec<(TextRange, String)> {\n     let mut res = Vec::new();\n     let mut prev_line_start: Option<TextSize> = None;\n     let mut line_start: TextSize = 0.into();\n+    let mut prev_line_annotations: Vec<(TextSize, usize)> = Vec::new();\n     for line in lines_with_ends(text) {\n-        if let Some(idx) = line.find(\"//^\") {\n-            let offset = prev_line_start.unwrap() + TextSize::of(&line[..idx + \"//\".len()]);\n-            for (line_range, text) in extract_line_annotations(&line[idx + \"//\".len()..]) {\n-                res.push((line_range + offset, text))\n+        let mut this_line_annotations = Vec::new();\n+        if let Some(idx) = line.find(\"//\") {\n+            let annotation_offset = TextSize::of(&line[..idx + \"//\".len()]);\n+            for annotation in extract_line_annotations(&line[idx + \"//\".len()..]) {\n+                match annotation {\n+                    LineAnnotation::Annotation { mut range, content } => {\n+                        range += annotation_offset;\n+                        this_line_annotations.push((range.end(), res.len()));\n+                        res.push((range + prev_line_start.unwrap(), content))\n+                    }\n+                    LineAnnotation::Continuation { mut offset, content } => {\n+                        offset += annotation_offset;\n+                        let &(_, idx) = prev_line_annotations\n+                            .iter()\n+                            .find(|&&(off, _idx)| off == offset)\n+                            .unwrap();\n+                        res[idx].1.push('\\n');\n+                        res[idx].1.push_str(&content);\n+                        res[idx].1.push('\\n');\n+                    }\n+                }\n             }\n         }\n+\n         prev_line_start = Some(line_start);\n         line_start += TextSize::of(line);\n+\n+        prev_line_annotations = this_line_annotations;\n     }\n     res\n }\n \n-fn extract_line_annotations(mut line: &str) -> Vec<(TextRange, String)> {\n+enum LineAnnotation {\n+    Annotation { range: TextRange, content: String },\n+    Continuation { offset: TextSize, content: String },\n+}\n+\n+fn extract_line_annotations(mut line: &str) -> Vec<LineAnnotation> {\n     let mut res = Vec::new();\n     let mut offset: TextSize = 0.into();\n-    while !line.is_empty() {\n-        let len = line.chars().take_while(|&it| it == '^').count();\n-        assert!(len > 0);\n+    let marker: fn(char) -> bool = if line.contains('^') { |c| c == '^' } else { |c| c == '|' };\n+    loop {\n+        match line.find(marker) {\n+            Some(idx) => {\n+                offset += TextSize::try_from(idx).unwrap();\n+                line = &line[idx..];\n+            }\n+            None => break,\n+        };\n+\n+        let mut len = line.chars().take_while(|&it| it == '^').count();\n+        let mut continuation = false;\n+        if len == 0 {\n+            assert!(line.starts_with('|'));\n+            continuation = true;\n+            len = 1;\n+        }\n         let range = TextRange::at(offset, len.try_into().unwrap());\n-        let next = line[len..].find('^').map_or(line.len(), |it| it + len);\n-        res.push((range, line[len..][..next - len].trim().to_string()));\n+        let next = line[len..].find(marker).map_or(line.len(), |it| it + len);\n+        let content = line[len..][..next - len].trim().to_string();\n+\n+        let annotation = if continuation {\n+            LineAnnotation::Continuation { offset: range.end(), content }\n+        } else {\n+            LineAnnotation::Annotation { range, content }\n+        };\n+        res.push(annotation);\n+\n         line = &line[next..];\n         offset += TextSize::try_from(next).unwrap();\n     }\n+\n     res\n }\n \n@@ -215,14 +264,18 @@ fn main() {\n     let (x,     y) = (9, 2);\n        //^ def  ^ def\n     zoo + 1\n-} //^^^ i32\n+} //^^^ type:\n+  //  | i32\n     \"#,\n     );\n     let res = extract_annotations(&text)\n         .into_iter()\n         .map(|(range, ann)| (&text[range], ann))\n         .collect::<Vec<_>>();\n-    assert_eq!(res, vec![(\"x\", \"def\".into()), (\"y\", \"def\".into()), (\"zoo\", \"i32\".into()),]);\n+    assert_eq!(\n+        res,\n+        vec![(\"x\", \"def\".into()), (\"y\", \"def\".into()), (\"zoo\", \"type:\\ni32\\n\".into()),]\n+    );\n }\n \n // Comparison functionality borrowed from cargo:"}]}