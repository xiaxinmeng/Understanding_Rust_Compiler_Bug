{"sha": "87e6b621a29351be64c6d2066ce7a5177c6e0ff8", "node_id": "C_kwDOAAsO6NoAKDg3ZTZiNjIxYTI5MzUxYmU2NGM2ZDIwNjZjZTdhNTE3N2M2ZTBmZjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-01T01:55:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-01T01:55:16Z"}, "message": "Auto merge of #109721 - QuinnPainter:armv4t-lld, r=petrochenkov\n\nSwitch to LLD as default linker for {arm,thumb}v4t-none-eabi\n\nThe LLVM 16 update brought ARMv4t support to LLD. We should use it by default so users don't need to install an external linker.\n\ncc `@Lokathor`", "tree": {"sha": "f473ebab3400e7415833a98b38699c5e82e7106f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f473ebab3400e7415833a98b38699c5e82e7106f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87e6b621a29351be64c6d2066ce7a5177c6e0ff8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87e6b621a29351be64c6d2066ce7a5177c6e0ff8", "html_url": "https://github.com/rust-lang/rust/commit/87e6b621a29351be64c6d2066ce7a5177c6e0ff8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87e6b621a29351be64c6d2066ce7a5177c6e0ff8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fadf164d8dc41116f936fb9b151b8083939a4a7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fadf164d8dc41116f936fb9b151b8083939a4a7d", "html_url": "https://github.com/rust-lang/rust/commit/fadf164d8dc41116f936fb9b151b8083939a4a7d"}, {"sha": "3811275f0902517cef24e86890737f09d082cff2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3811275f0902517cef24e86890737f09d082cff2", "html_url": "https://github.com/rust-lang/rust/commit/3811275f0902517cef24e86890737f09d082cff2"}], "stats": {"total": 29, "additions": 3, "deletions": 26}, "files": [{"sha": "d0f988b278ff8ef50586403b920167001df5381c", "filename": "compiler/rustc_target/src/spec/armv4t_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/87e6b621a29351be64c6d2066ce7a5177c6e0ff8/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e6b621a29351be64c6d2066ce7a5177c6e0ff8/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_none_eabi.rs?ref=87e6b621a29351be64c6d2066ce7a5177c6e0ff8", "patch": "@@ -4,13 +4,6 @@\n //!\n //! Please ping @Lokathor if changes are needed.\n //!\n-//! This target profile assumes that you have the ARM binutils in your path\n-//! (specifically the linker, `arm-none-eabi-ld`). They can be obtained for free\n-//! for all major OSes from the ARM developer's website, and they may also be\n-//! available in your system's package manager. Unfortunately, the standard\n-//! linker that Rust uses (`lld`) only supports as far back as `ARMv5TE`, so we\n-//! must use the GNU `ld` linker.\n-//!\n //! **Important:** This target profile **does not** specify a linker script. You\n //! just get the default link script when you build a binary for this target.\n //! The default link script is very likely wrong, so you should use\n@@ -35,8 +28,8 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n         options: TargetOptions {\n             abi: \"eabi\".into(),\n-            linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::No),\n-            linker: Some(\"arm-none-eabi-ld\".into()),\n+            linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n+            linker: Some(\"rust-lld\".into()),\n             asm_args: cvs![\"-mthumb-interwork\", \"-march=armv4t\", \"-mlittle-endian\",],\n             // Force-enable 32-bit atomics, which allows the use of atomic load/store only.\n             // The resulting atomics are ABI incompatible with atomics backed by libatomic."}, {"sha": "9c59bb9114ecb222f4e48dbddd715f4e9dd130ff", "filename": "compiler/rustc_target/src/spec/thumbv4t_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/87e6b621a29351be64c6d2066ce7a5177c6e0ff8/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e6b621a29351be64c6d2066ce7a5177c6e0ff8/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs?ref=87e6b621a29351be64c6d2066ce7a5177c6e0ff8", "patch": "@@ -4,19 +4,12 @@\n //!\n //! Please ping @Lokathor if changes are needed.\n //!\n-//! This target profile assumes that you have the ARM binutils in your path\n-//! (specifically the linker, `arm-none-eabi-ld`). They can be obtained for free\n-//! for all major OSes from the ARM developer's website, and they may also be\n-//! available in your system's package manager. Unfortunately, the standard\n-//! linker that Rust uses (`lld`) only supports as far back as `ARMv5TE`, so we\n-//! must use the GNU `ld` linker.\n-//!\n //! **Important:** This target profile **does not** specify a linker script. You\n //! just get the default link script when you build a binary for this target.\n //! The default link script is very likely wrong, so you should use\n //! `-Clink-arg=-Tmy_script.ld` to override that with a correct linker script.\n \n-use crate::spec::{cvs, Cc, FramePointer, LinkerFlavor, Lld};\n+use crate::spec::{cvs, FramePointer};\n use crate::spec::{PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -36,8 +29,6 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n         options: TargetOptions {\n             abi: \"eabi\".into(),\n-            linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::No),\n-            linker: Some(\"arm-none-eabi-ld\".into()),\n \n             // extra args passed to the external assembler (assuming `arm-none-eabi-as`):\n             // * activate t32/a32 interworking"}, {"sha": "a230eba6bf95cec5dd7e8b7be6bc1c1f01c8d374", "filename": "src/doc/rustc/src/platform-support/armv4t-none-eabi.md", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/87e6b621a29351be64c6d2066ce7a5177c6e0ff8/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv4t-none-eabi.md", "raw_url": "https://github.com/rust-lang/rust/raw/87e6b621a29351be64c6d2066ce7a5177c6e0ff8/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv4t-none-eabi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv4t-none-eabi.md?ref=87e6b621a29351be64c6d2066ce7a5177c6e0ff8", "patch": "@@ -17,13 +17,6 @@ specific with this target, so any ARMv4T device should work fine.\n \n The target is cross-compiled, and uses static linking.\n \n-The linker that comes with rustc cannot link for this platform (the platform is\n-too old). You will need the `arm-none-eabi-ld` linker from a GNU Binutils\n-targeting ARM. This can be obtained for Windows/Mac/Linux from the [ARM\n-Developer Website][arm-dev], or possibly from your OS's package manager.\n-\n-[arm-dev]: https://developer.arm.com/Tools%20and%20Software/GNU%20Toolchain\n-\n This target doesn't provide a linker script, you'll need to bring your own\n according to the specific device you want to target. Pass\n `-Clink-arg=-Tyour_script.ld` as a rustc argument to make the linker use"}]}