{"sha": "2dd7175d60e070c7ee2b4609bdb17eae16e381f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZDcxNzVkNjBlMDcwYzdlZTJiNDYwOWJkYjE3ZWFlMTZlMzgxZjA=", "commit": {"author": {"name": "Robin Schoonover", "email": "robin@cornhooves.org", "date": "2020-09-14T04:17:10Z"}, "committer": {"name": "Robin Schoonover", "email": "robin@cornhooves.org", "date": "2020-09-14T23:08:14Z"}, "message": "Apply rc_buffer lint to Arc<T>", "tree": {"sha": "971026c5ecb8f4f1bd40613201bac1a511aac05f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/971026c5ecb8f4f1bd40613201bac1a511aac05f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dd7175d60e070c7ee2b4609bdb17eae16e381f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dd7175d60e070c7ee2b4609bdb17eae16e381f0", "html_url": "https://github.com/rust-lang/rust/commit/2dd7175d60e070c7ee2b4609bdb17eae16e381f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dd7175d60e070c7ee2b4609bdb17eae16e381f0/comments", "author": {"login": "rschoon", "id": 507274, "node_id": "MDQ6VXNlcjUwNzI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/507274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rschoon", "html_url": "https://github.com/rschoon", "followers_url": "https://api.github.com/users/rschoon/followers", "following_url": "https://api.github.com/users/rschoon/following{/other_user}", "gists_url": "https://api.github.com/users/rschoon/gists{/gist_id}", "starred_url": "https://api.github.com/users/rschoon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rschoon/subscriptions", "organizations_url": "https://api.github.com/users/rschoon/orgs", "repos_url": "https://api.github.com/users/rschoon/repos", "events_url": "https://api.github.com/users/rschoon/events{/privacy}", "received_events_url": "https://api.github.com/users/rschoon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rschoon", "id": 507274, "node_id": "MDQ6VXNlcjUwNzI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/507274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rschoon", "html_url": "https://github.com/rschoon", "followers_url": "https://api.github.com/users/rschoon/followers", "following_url": "https://api.github.com/users/rschoon/following{/other_user}", "gists_url": "https://api.github.com/users/rschoon/gists{/gist_id}", "starred_url": "https://api.github.com/users/rschoon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rschoon/subscriptions", "organizations_url": "https://api.github.com/users/rschoon/orgs", "repos_url": "https://api.github.com/users/rschoon/repos", "events_url": "https://api.github.com/users/rschoon/events{/privacy}", "received_events_url": "https://api.github.com/users/rschoon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b5317f68b2b55803d5051e9945f9a33817fccef", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b5317f68b2b55803d5051e9945f9a33817fccef", "html_url": "https://github.com/rust-lang/rust/commit/1b5317f68b2b55803d5051e9945f9a33817fccef"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "da04d07885b9fa791a20f9f50555b398adfa1bc9", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2dd7175d60e070c7ee2b4609bdb17eae16e381f0/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd7175d60e070c7ee2b4609bdb17eae16e381f0/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=2dd7175d60e070c7ee2b4609bdb17eae16e381f0", "patch": "@@ -480,6 +480,46 @@ impl Types {\n                             );\n                             return; // don't recurse into the type\n                         }\n+                    } else if cx.tcx.is_diagnostic_item(sym::Arc, def_id) {\n+                        if let Some(alternate) = match_buffer_type(cx, qpath) {\n+                            span_lint_and_sugg(\n+                                cx,\n+                                RC_BUFFER,\n+                                hir_ty.span,\n+                                \"usage of `Arc<T>` when T is a buffer type\",\n+                                \"try\",\n+                                format!(\"Arc<{}>\", alternate),\n+                                Applicability::MachineApplicable,\n+                            );\n+                            return; // don't recurse into the type\n+                        }\n+                        if match_type_parameter(cx, qpath, &paths::VEC).is_some() {\n+                            let vec_ty = match &last_path_segment(qpath).args.unwrap().args[0] {\n+                                GenericArg::Type(ty) => match &ty.kind {\n+                                    TyKind::Path(qpath) => qpath,\n+                                    _ => return,\n+                                },\n+                                _ => return,\n+                            };\n+                            let inner_span = match &last_path_segment(&vec_ty).args.unwrap().args[0] {\n+                                GenericArg::Type(ty) => ty.span,\n+                                _ => return,\n+                            };\n+                            let mut applicability = Applicability::MachineApplicable;\n+                            span_lint_and_sugg(\n+                                cx,\n+                                RC_BUFFER,\n+                                hir_ty.span,\n+                                \"usage of `Arc<T>` when T is a buffer type\",\n+                                \"try\",\n+                                format!(\n+                                    \"Arc<[{}]>\",\n+                                    snippet_with_applicability(cx, inner_span, \"..\", &mut applicability)\n+                                ),\n+                                Applicability::MachineApplicable,\n+                            );\n+                            return; // don't recurse into the type\n+                        }\n                     } else if cx.tcx.is_diagnostic_item(sym!(vec_type), def_id) {\n                         if_chain! {\n                             // Get the _ part of Vec<_>"}, {"sha": "a878b0ab3365dabe95590ff0efdaa8b66c585d64", "filename": "tests/ui/rc_buffer_arc.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2dd7175d60e070c7ee2b4609bdb17eae16e381f0/tests%2Fui%2Frc_buffer_arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd7175d60e070c7ee2b4609bdb17eae16e381f0/tests%2Fui%2Frc_buffer_arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_buffer_arc.rs?ref=2dd7175d60e070c7ee2b4609bdb17eae16e381f0", "patch": "@@ -0,0 +1,13 @@\n+use std::ffi::OsString;\n+use std::path::PathBuf;\n+use std::sync::Arc;\n+\n+#[warn(clippy::rc_buffer)]\n+struct S {\n+    a: Arc<String>,\n+    b: Arc<PathBuf>,\n+    c: Arc<Vec<u8>>,\n+    d: Arc<OsString>,\n+}\n+\n+fn main() {}"}, {"sha": "c4b016210469b23f68d4eb996bc7940278fc071a", "filename": "tests/ui/rc_buffer_arc.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2dd7175d60e070c7ee2b4609bdb17eae16e381f0/tests%2Fui%2Frc_buffer_arc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd7175d60e070c7ee2b4609bdb17eae16e381f0/tests%2Fui%2Frc_buffer_arc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_buffer_arc.stderr?ref=2dd7175d60e070c7ee2b4609bdb17eae16e381f0", "patch": "@@ -0,0 +1,28 @@\n+error: usage of `Arc<T>` when T is a buffer type\n+  --> $DIR/rc_buffer_arc.rs:7:8\n+   |\n+LL |     a: Arc<String>,\n+   |        ^^^^^^^^^^^ help: try: `Arc<str>`\n+   |\n+   = note: `-D clippy::rc-buffer` implied by `-D warnings`\n+\n+error: usage of `Arc<T>` when T is a buffer type\n+  --> $DIR/rc_buffer_arc.rs:8:8\n+   |\n+LL |     b: Arc<PathBuf>,\n+   |        ^^^^^^^^^^^^ help: try: `Arc<std::path::Path>`\n+\n+error: usage of `Arc<T>` when T is a buffer type\n+  --> $DIR/rc_buffer_arc.rs:9:8\n+   |\n+LL |     c: Arc<Vec<u8>>,\n+   |        ^^^^^^^^^^^^ help: try: `Arc<[u8]>`\n+\n+error: usage of `Arc<T>` when T is a buffer type\n+  --> $DIR/rc_buffer_arc.rs:10:8\n+   |\n+LL |     d: Arc<OsString>,\n+   |        ^^^^^^^^^^^^^ help: try: `Arc<std::ffi::OsStr>`\n+\n+error: aborting due to 4 previous errors\n+"}]}