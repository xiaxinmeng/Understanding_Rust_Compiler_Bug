{"sha": "027c8d998e30a362319b54b80aaf8cf8ff5bc39d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyN2M4ZDk5OGUzMGEzNjIzMTliNTRiODBhYWY4Y2Y4ZmY1YmMzOWQ=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-03-14T12:41:38Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-03-19T14:22:55Z"}, "message": "Use `assert_ignored` when encoding metadata", "tree": {"sha": "a485f93fa08630f559083455c2fdf92eef13bd81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a485f93fa08630f559083455c2fdf92eef13bd81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/027c8d998e30a362319b54b80aaf8cf8ff5bc39d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/027c8d998e30a362319b54b80aaf8cf8ff5bc39d", "html_url": "https://github.com/rust-lang/rust/commit/027c8d998e30a362319b54b80aaf8cf8ff5bc39d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/027c8d998e30a362319b54b80aaf8cf8ff5bc39d/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "801e4420b6149654885851b6e3e7a9d7837b18de", "url": "https://api.github.com/repos/rust-lang/rust/commits/801e4420b6149654885851b6e3e7a9d7837b18de", "html_url": "https://github.com/rust-lang/rust/commit/801e4420b6149654885851b6e3e7a9d7837b18de"}], "stats": {"total": 75, "additions": 37, "deletions": 38}, "files": [{"sha": "5963047fc760d7fd678849926a0873f4ade3bb68", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 37, "deletions": 38, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/027c8d998e30a362319b54b80aaf8cf8ff5bc39d/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/027c8d998e30a362319b54b80aaf8cf8ff5bc39d/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=027c8d998e30a362319b54b80aaf8cf8ff5bc39d", "patch": "@@ -1794,6 +1794,10 @@ impl<'tcx, 'v> ParItemLikeVisitor<'v> for PrefetchVisitor<'tcx> {\n // generated regardless of trailing bytes that end up in it.\n \n pub(super) fn encode_metadata(tcx: TyCtxt<'_>) -> EncodedMetadata {\n+    // Since encoding metadata is not in a query, and nothing is cached,\n+    // there's no need to do dep-graph tracking for any of it.\n+    tcx.dep_graph.assert_ignored();\n+\n     join(\n         || encode_metadata_impl(tcx),\n         || {\n@@ -1803,21 +1807,19 @@ pub(super) fn encode_metadata(tcx: TyCtxt<'_>) -> EncodedMetadata {\n             // Prefetch some queries used by metadata encoding.\n             // This is not necessary for correctness, but is only done for performance reasons.\n             // It can be removed if it turns out to cause trouble or be detrimental to performance.\n-            tcx.dep_graph.with_ignore(|| {\n-                join(\n-                    || {\n-                        if !tcx.sess.opts.output_types.should_codegen() {\n-                            // We won't emit MIR, so don't prefetch it.\n-                            return;\n-                        }\n-                        tcx.hir().krate().par_visit_all_item_likes(&PrefetchVisitor {\n-                            tcx,\n-                            mir_keys: tcx.mir_keys(LOCAL_CRATE),\n-                        });\n-                    },\n-                    || tcx.exported_symbols(LOCAL_CRATE),\n-                );\n-            })\n+            join(\n+                || {\n+                    if !tcx.sess.opts.output_types.should_codegen() {\n+                        // We won't emit MIR, so don't prefetch it.\n+                        return;\n+                    }\n+                    tcx.hir().krate().par_visit_all_item_likes(&PrefetchVisitor {\n+                        tcx,\n+                        mir_keys: tcx.mir_keys(LOCAL_CRATE),\n+                    });\n+                },\n+                || tcx.exported_symbols(LOCAL_CRATE),\n+            );\n         },\n     )\n     .0\n@@ -1830,29 +1832,26 @@ fn encode_metadata_impl(tcx: TyCtxt<'_>) -> EncodedMetadata {\n     // Will be filled with the root position after encoding everything.\n     encoder.emit_raw_bytes(&[0, 0, 0, 0]);\n \n-    // Since encoding metadata is not in a query, and nothing is cached,\n-    // there's no need to do dep-graph tracking for any of it.\n-    let (root, mut result) = tcx.dep_graph.with_ignore(move || {\n-        let mut ecx = EncodeContext {\n-            opaque: encoder,\n-            tcx,\n-            per_def: Default::default(),\n-            lazy_state: LazyState::NoNode,\n-            type_shorthands: Default::default(),\n-            predicate_shorthands: Default::default(),\n-            source_file_cache: tcx.sess.source_map().files()[0].clone(),\n-            interpret_allocs: Default::default(),\n-            interpret_allocs_inverse: Default::default(),\n-        };\n-\n-        // Encode the rustc version string in a predictable location.\n-        rustc_version().encode(&mut ecx).unwrap();\n-\n-        // Encode all the entries and extra information in the crate,\n-        // culminating in the `CrateRoot` which points to all of it.\n-        let root = ecx.encode_crate_root();\n-        (root, ecx.opaque.into_inner())\n-    });\n+    let mut ecx = EncodeContext {\n+        opaque: encoder,\n+        tcx,\n+        per_def: Default::default(),\n+        lazy_state: LazyState::NoNode,\n+        type_shorthands: Default::default(),\n+        predicate_shorthands: Default::default(),\n+        source_file_cache: tcx.sess.source_map().files()[0].clone(),\n+        interpret_allocs: Default::default(),\n+        interpret_allocs_inverse: Default::default(),\n+    };\n+\n+    // Encode the rustc version string in a predictable location.\n+    rustc_version().encode(&mut ecx).unwrap();\n+\n+    // Encode all the entries and extra information in the crate,\n+    // culminating in the `CrateRoot` which points to all of it.\n+    let root = ecx.encode_crate_root();\n+\n+    let mut result = ecx.opaque.into_inner();\n \n     // Encode the root position.\n     let header = METADATA_HEADER.len();"}]}