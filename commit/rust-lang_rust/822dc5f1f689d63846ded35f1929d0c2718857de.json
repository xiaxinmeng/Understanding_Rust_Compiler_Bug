{"sha": "822dc5f1f689d63846ded35f1929d0c2718857de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMmRjNWYxZjY4OWQ2Mzg0NmRlZDM1ZjE5MjlkMGMyNzE4ODU3ZGU=", "commit": {"author": {"name": "Fedor Indutny", "email": "fedor.indutny@gmail.com", "date": "2013-06-25T16:51:47Z"}, "committer": {"name": "Fedor Indutny", "email": "fedor.indutny@gmail.com", "date": "2013-07-08T06:36:43Z"}, "message": "libc: VirtualAlloc and FileMapping bindings", "tree": {"sha": "3f2104ea8579d267bc92e8c554815f30d0aea1f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f2104ea8579d267bc92e8c554815f30d0aea1f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/822dc5f1f689d63846ded35f1929d0c2718857de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/822dc5f1f689d63846ded35f1929d0c2718857de", "html_url": "https://github.com/rust-lang/rust/commit/822dc5f1f689d63846ded35f1929d0c2718857de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/822dc5f1f689d63846ded35f1929d0c2718857de/comments", "author": {"login": "indutny", "id": 238531, "node_id": "MDQ6VXNlcjIzODUzMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/238531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/indutny", "html_url": "https://github.com/indutny", "followers_url": "https://api.github.com/users/indutny/followers", "following_url": "https://api.github.com/users/indutny/following{/other_user}", "gists_url": "https://api.github.com/users/indutny/gists{/gist_id}", "starred_url": "https://api.github.com/users/indutny/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/indutny/subscriptions", "organizations_url": "https://api.github.com/users/indutny/orgs", "repos_url": "https://api.github.com/users/indutny/repos", "events_url": "https://api.github.com/users/indutny/events{/privacy}", "received_events_url": "https://api.github.com/users/indutny/received_events", "type": "User", "site_admin": false}, "committer": {"login": "indutny", "id": 238531, "node_id": "MDQ6VXNlcjIzODUzMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/238531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/indutny", "html_url": "https://github.com/indutny", "followers_url": "https://api.github.com/users/indutny/followers", "following_url": "https://api.github.com/users/indutny/following{/other_user}", "gists_url": "https://api.github.com/users/indutny/gists{/gist_id}", "starred_url": "https://api.github.com/users/indutny/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/indutny/subscriptions", "organizations_url": "https://api.github.com/users/indutny/orgs", "repos_url": "https://api.github.com/users/indutny/repos", "events_url": "https://api.github.com/users/indutny/events{/privacy}", "received_events_url": "https://api.github.com/users/indutny/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c56046d51645735781d5170ec87195bab779d68", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c56046d51645735781d5170ec87195bab779d68", "html_url": "https://github.com/rust-lang/rust/commit/1c56046d51645735781d5170ec87195bab779d68"}], "stats": {"total": 136, "additions": 132, "deletions": 4}, "files": [{"sha": "357801b5405b65402a353e17d30e1e599e382b73", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 132, "deletions": 4, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/822dc5f1f689d63846ded35f1929d0c2718857de/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/822dc5f1f689d63846ded35f1929d0c2718857de/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=822dc5f1f689d63846ded35f1929d0c2718857de", "patch": "@@ -633,8 +633,9 @@ pub mod types {\n             pub mod bsd44 {\n             }\n             pub mod extra {\n+                use ptr;\n                 use libc::types::common::c95::c_void;\n-                use libc::types::os::arch::c95::{c_char, c_int, c_uint};\n+                use libc::types::os::arch::c95::{c_char, c_int, c_uint, size_t};\n                 use libc::types::os::arch::c95::{c_long, c_ulong};\n                 use libc::types::os::arch::c95::{wchar_t};\n                 use libc::types::os::arch::c99::{c_ulonglong};\n@@ -665,6 +666,7 @@ pub mod types {\n                 pub type LPSECURITY_ATTRIBUTES = LPVOID;\n \n                 pub type LPVOID = *mut c_void;\n+                pub type LPCVOID = *c_void;\n                 pub type LPBYTE = *mut BYTE;\n                 pub type LPWORD = *mut WORD;\n                 pub type LPDWORD = *mut DWORD;\n@@ -674,6 +676,7 @@ pub mod types {\n                 pub type PBOOL = *mut BOOL;\n                 pub type WCHAR = wchar_t;\n                 pub type WORD = u16;\n+                pub type SIZE_T = size_t;\n \n                 pub type time64_t = i64;\n                 pub type int64 = i64;\n@@ -707,6 +710,50 @@ pub mod types {\n                     dwThreadId: DWORD\n                 }\n                 pub type LPPROCESS_INFORMATION = *mut PROCESS_INFORMATION;\n+\n+                pub struct SYSTEM_INFO {\n+                    wProcessorArchitecture: WORD,\n+                    wReserved: WORD,\n+                    dwPageSize: DWORD,\n+                    lpMinimumApplicationAddress: LPVOID,\n+                    lpMaximumApplicationAddress: LPVOID,\n+                    dwActiveProcessorMask: DWORD,\n+                    dwNumberOfProcessors: DWORD,\n+                    dwProcessorType: DWORD,\n+                    dwAllocationGranularity: DWORD,\n+                    wProcessorLevel: WORD,\n+                    wProcessorRevision: WORD\n+                }\n+                pub type LPSYSTEM_INFO = *mut SYSTEM_INFO;\n+\n+                impl SYSTEM_INFO {\n+                    pub fn new() -> SYSTEM_INFO {\n+                        SYSTEM_INFO {\n+                            wProcessorArchitecture: 0,\n+                            wReserved: 0,\n+                            dwPageSize: 0,\n+                            lpMinimumApplicationAddress: ptr::null(),\n+                            lpMaximumApplicationAddress: ptr::null(),\n+                            dwActiveProcessorMask: 0,\n+                            dwNumberOfProcessors: 0,\n+                            dwProcessorType: 0,\n+                            dwAllocationGranularity: 0,\n+                            wProcessorLevel: 0,\n+                            wProcessorRevision: 0\n+                        }\n+                    }\n+                }\n+\n+                pub struct MEMORY_BASIC_INFORMATION {\n+                    BaseAddress: LPVOID,\n+                    AllocationBase: LPVOID,\n+                    AllocationProtect: DWORD,\n+                    RegionSize: SIZE_T,\n+                    State: DWORD,\n+                    Protect: DWORD,\n+                    Type: DWORD\n+                }\n+                pub type LPMEMORY_BASIC_INFORMATION = *mut MEMORY_BASIC_INFORMATION;\n             }\n         }\n     }\n@@ -974,7 +1021,12 @@ pub mod consts {\n             pub static O_NOINHERIT: c_int = 128;\n \n             pub static ERROR_SUCCESS : c_int = 0;\n+            pub static ERROR_INVALID_HANDLE : c_int = 6;\n+            pub static ERROR_DISK_FULL : c_int = 112;\n             pub static ERROR_INSUFFICIENT_BUFFER : c_int = 122;\n+            pub static ERROR_ALREADY_EXISTS : c_int = 183;\n+            pub static ERROR_INVALID_ADDRESS : c_int = 487;\n+            pub static ERROR_FILE_INVALID : c_int = 1006;\n             pub static INVALID_HANDLE_VALUE: c_int = -1;\n \n             pub static DELETE : DWORD = 0x00010000;\n@@ -1020,6 +1072,49 @@ pub mod consts {\n \n             pub static INFINITE : DWORD = -1;\n             pub static STILL_ACTIVE : DWORD = 259;\n+\n+            pub static MEM_COMMIT : DWORD = 0x00001000;\n+            pub static MEM_RESERVE : DWORD = 0x00002000;\n+            pub static MEM_DECOMMIT : DWORD = 0x00004000;\n+            pub static MEM_RELEASE : DWORD = 0x00008000;\n+            pub static MEM_RESET : DWORD = 0x00080000;\n+            pub static MEM_RESET_UNDO : DWORD = 0x1000000;\n+            pub static MEM_LARGE_PAGES : DWORD = 0x20000000;\n+            pub static MEM_PHYSICAL : DWORD = 0x00400000;\n+            pub static MEM_TOP_DOWN : DWORD = 0x00100000;\n+            pub static MEM_WRITE_WATCH : DWORD = 0x00200000;\n+\n+            pub static PAGE_EXECUTE : DWORD = 0x10;\n+            pub static PAGE_EXECUTE_READ : DWORD = 0x20;\n+            pub static PAGE_EXECUTE_READWRITE : DWORD = 0x40;\n+            pub static PAGE_EXECUTE_WRITECOPY : DWORD = 0x80;\n+            pub static PAGE_NOACCESS : DWORD = 0x01;\n+            pub static PAGE_READONLY : DWORD = 0x02;\n+            pub static PAGE_READWRITE : DWORD = 0x04;\n+            pub static PAGE_WRITECOPY : DWORD = 0x08;\n+            pub static PAGE_GUARD : DWORD = 0x100;\n+            pub static PAGE_NOCACHE : DWORD = 0x200;\n+            pub static PAGE_WRITECOMBINE : DWORD = 0x400;\n+\n+            pub static SEC_COMMIT : DWORD = 0x8000000;\n+            pub static SEC_IMAGE : DWORD = 0x1000000;\n+            pub static SEC_IMAGE_NO_EXECUTE : DWORD = 0x11000000;\n+            pub static SEC_LARGE_PAGES : DWORD = 0x80000000;\n+            pub static SEC_NOCACHE : DWORD = 0x10000000;\n+            pub static SEC_RESERVE : DWORD = 0x4000000;\n+            pub static SEC_WRITECOMBINE : DWORD = 0x40000000;\n+\n+            pub static FILE_MAP_ALL_ACCESS : DWORD = 0xf001f;\n+            pub static FILE_MAP_READ : DWORD = 0x4;\n+            pub static FILE_MAP_WRITE : DWORD = 0x2;\n+            pub static FILE_MAP_COPY : DWORD = 0x1;\n+            pub static FILE_MAP_EXECUTE : DWORD = 0x20;\n+\n+            pub static PROCESSOR_ARCHITECTURE_INTEL : WORD = 0;\n+            pub static PROCESSOR_ARCHITECTURE_ARM : WORD = 5;\n+            pub static PROCESSOR_ARCHITECTURE_IA64 : WORD = 6;\n+            pub static PROCESSOR_ARCHITECTURE_AMD64 : WORD = 9;\n+            pub static PROCESSOR_ARCHITECTURE_UNKNOWN : WORD = 0xffff;\n         }\n     }\n \n@@ -2620,11 +2715,13 @@ pub mod funcs {\n \n         pub mod kernel32 {\n             use libc::types::os::arch::c95::{c_uint};\n-            use libc::types::os::arch::extra::{BOOL, DWORD, HMODULE};\n+            use libc::types::os::arch::extra::{BOOL, DWORD, SIZE_T, HMODULE};\n             use libc::types::os::arch::extra::{LPCWSTR, LPWSTR, LPCTSTR,\n-                                               LPTSTR, LPTCH, LPDWORD, LPVOID};\n+                                               LPTSTR, LPTCH, LPDWORD, LPVOID,\n+                                               LPCVOID};\n             use libc::types::os::arch::extra::{LPSECURITY_ATTRIBUTES, LPSTARTUPINFO,\n-                                               LPPROCESS_INFORMATION};\n+                                               LPPROCESS_INFORMATION,\n+                                               LPMEMORY_BASIC_INFORMATION};\n             use libc::types::os::arch::extra::{HANDLE, LPHANDLE};\n \n             #[abi = \"stdcall\"]\n@@ -2687,6 +2784,37 @@ pub mod funcs {\n                 unsafe fn WaitForSingleObject(hHandle: HANDLE, dwMilliseconds: DWORD) -> DWORD;\n                 unsafe fn TerminateProcess(hProcess: HANDLE, uExitCode: c_uint) -> BOOL;\n                 unsafe fn GetExitCodeProcess(hProcess: HANDLE, lpExitCode: LPDWORD) -> BOOL;\n+\n+                unsafe fn GetSystemInfo(lpSystemInfo: LPSYSTEM_INFO);\n+                unsafe fn VirtualAlloc(lpAddress: LPVOID,\n+                                       dwSize: SIZE_T,\n+                                       flAllocationType: DWORD,\n+                                       flProtect: DWORD) -> LPVOID;\n+                unsafe fn VirtualFree(lpAddress: LPVOID,\n+                                      dwSize: SIZE_T,\n+                                      dwFreeType: DWORD) -> BOOL;\n+                unsafe fn VirtualLock(lpAddress: LPVOID, dwSize: SIZE_T) -> BOOL;\n+                unsafe fn VirtualUnlock(lpAddress: LPVOID, dwSize: SIZE_T) -> BOOL;\n+                unsafe fn VirtualProtect(lpAddress: LPVOID,\n+                                         dwSize: SIZE_T,\n+                                         flNewProtect: DWORD,\n+                                         lpflOldProtect: LPDWORD) -> BOOL;\n+                unsafe fn VirtualQuery(lpAddress: LPCVOID,\n+                                       lpBuffer: LPMEMORY_BASIC_INFORMATION,\n+                                       dwLength: SIZE_T) -> SIZE_T;\n+\n+                unsafe fn CreateFileMappingW(hFile: HANDLE,\n+                                             lpAttributes: LPSECURITY_ATTRIBUTES,\n+                                             flProtect: DWORD,\n+                                             dwMaximumSizeHigh: DWORD,\n+                                             dwMaximumSizeLow: DWORD,\n+                                             lpName: LPCTSTR) -> HANDLE;\n+                unsafe fn MapViewOfFile(hFileMappingObject: HANDLE,\n+                                        dwDesiredAccess: DWORD,\n+                                        dwFileOffsetHigh: DWORD,\n+                                        dwFileOffsetLow: DWORD,\n+                                        dwNumberOfBytesToMap: SIZE_T) -> LPVOID;\n+                unsafe fn UnmapViewOfFile(lpBaseAddress: LPCVOID) -> BOOL;\n             }\n         }\n "}]}