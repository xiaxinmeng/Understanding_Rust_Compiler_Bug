{"sha": "22ea00d5ff2a993735702ec8e28fecfcbf4ffc4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZWEwMGQ1ZmYyYTk5MzczNTcwMmVjOGUyOGZlY2ZjYmY0ZmZjNGY=", "commit": {"author": {"name": "gfreezy", "email": "gfreezy@gmail.com", "date": "2019-01-01T14:45:53Z"}, "committer": {"name": "gfreezy", "email": "gfreezy@gmail.com", "date": "2019-01-01T14:45:53Z"}, "message": "complete \"self\" and \"super\"", "tree": {"sha": "673ab5897a62d6c8772cff50651f6cabd5c5be3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/673ab5897a62d6c8772cff50651f6cabd5c5be3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22ea00d5ff2a993735702ec8e28fecfcbf4ffc4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22ea00d5ff2a993735702ec8e28fecfcbf4ffc4f", "html_url": "https://github.com/rust-lang/rust/commit/22ea00d5ff2a993735702ec8e28fecfcbf4ffc4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22ea00d5ff2a993735702ec8e28fecfcbf4ffc4f/comments", "author": {"login": "gfreezy", "id": 510012, "node_id": "MDQ6VXNlcjUxMDAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/510012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gfreezy", "html_url": "https://github.com/gfreezy", "followers_url": "https://api.github.com/users/gfreezy/followers", "following_url": "https://api.github.com/users/gfreezy/following{/other_user}", "gists_url": "https://api.github.com/users/gfreezy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gfreezy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gfreezy/subscriptions", "organizations_url": "https://api.github.com/users/gfreezy/orgs", "repos_url": "https://api.github.com/users/gfreezy/repos", "events_url": "https://api.github.com/users/gfreezy/events{/privacy}", "received_events_url": "https://api.github.com/users/gfreezy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gfreezy", "id": 510012, "node_id": "MDQ6VXNlcjUxMDAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/510012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gfreezy", "html_url": "https://github.com/gfreezy", "followers_url": "https://api.github.com/users/gfreezy/followers", "following_url": "https://api.github.com/users/gfreezy/following{/other_user}", "gists_url": "https://api.github.com/users/gfreezy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gfreezy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gfreezy/subscriptions", "organizations_url": "https://api.github.com/users/gfreezy/orgs", "repos_url": "https://api.github.com/users/gfreezy/repos", "events_url": "https://api.github.com/users/gfreezy/events{/privacy}", "received_events_url": "https://api.github.com/users/gfreezy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f408b1caa3acdaf7b05498963e70da7f662bf2e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f408b1caa3acdaf7b05498963e70da7f662bf2e3", "html_url": "https://github.com/rust-lang/rust/commit/f408b1caa3acdaf7b05498963e70da7f662bf2e3"}], "stats": {"total": 64, "additions": 44, "deletions": 20}, "files": [{"sha": "dd81fc008357c3d81c7f0ce89a9e316762d810b1", "filename": "crates/ra_analysis/src/completion/complete_keyword.rs", "status": "modified", "additions": 44, "deletions": 20, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/22ea00d5ff2a993735702ec8e28fecfcbf4ffc4f/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22ea00d5ff2a993735702ec8e28fecfcbf4ffc4f/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=22ea00d5ff2a993735702ec8e28fecfcbf4ffc4f", "patch": "@@ -15,28 +15,38 @@ fn keyword(kw: &str, snippet: &str) -> CompletionItem {\n }\n \n pub(super) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !ctx.is_trivial_path {\n-        return;\n-    }\n-\n     // complete keyword \"crate\" in use stmt\n-    if let (Some(use_item), None) = (&ctx.use_item_syntax, &ctx.path_prefix) {\n-        let mut complete_crate = false;\n-        let use_tree = use_item.use_tree();\n-        if let Some(use_tree) = use_tree {\n-            let tree_str = use_tree.syntax().text().to_string();\n-            if tree_str != \"crate\" && \"crate\".starts_with(&tree_str) {\n-                complete_crate = true;\n-            }\n-        } else {\n-            complete_crate = true;\n-        }\n-        if complete_crate {\n+    match (ctx.use_item_syntax.as_ref(), ctx.path_prefix.as_ref()) {\n+        (Some(_), None) => {\n             CompletionItem::new(CompletionKind::Keyword, \"crate\")\n                 .kind(CompletionItemKind::Keyword)\n                 .lookup_by(\"crate\")\n+                .snippet(\"crate::\")\n+                .add_to(acc);\n+            CompletionItem::new(CompletionKind::Keyword, \"self\")\n+                .kind(CompletionItemKind::Keyword)\n+                .lookup_by(\"self\")\n+                .add_to(acc);\n+            CompletionItem::new(CompletionKind::Keyword, \"super\")\n+                .kind(CompletionItemKind::Keyword)\n+                .lookup_by(\"super\")\n                 .add_to(acc);\n         }\n+        (Some(_), Some(_)) => {\n+            CompletionItem::new(CompletionKind::Keyword, \"self\")\n+                .kind(CompletionItemKind::Keyword)\n+                .lookup_by(\"self\")\n+                .add_to(acc);\n+            CompletionItem::new(CompletionKind::Keyword, \"super\")\n+                .kind(CompletionItemKind::Keyword)\n+                .lookup_by(\"super\")\n+                .add_to(acc);\n+        }\n+        _ => {}\n+    }\n+\n+    if !ctx.is_trivial_path {\n+        return;\n     }\n \n     let fn_def = match ctx.function_syntax {\n@@ -292,21 +302,35 @@ mod tests {\n     }\n \n     #[test]\n-    fn completes_crate_in_use_stmt() {\n+    fn completes_keywords_in_use_stmt() {\n         check_keyword_completion(\n             r\"\n             use <|>\n             \",\n             r#\"\n-            crate \"crate\"\n+            crate \"crate\" \"crate::\"\n+            self \"self\"\n+            super \"super\"\n             \"#,\n         );\n-        // No completion: lambda isolates control flow\n+\n+        check_keyword_completion(\n+            r\"\n+            use a::<|>\n+            \",\n+            r#\"\n+            self \"self\"\n+            super \"super\"\n+            \"#,\n+        );\n+\n         check_keyword_completion(\n             r\"\n-            use a<|>\n+            use a::{b, <|>}\n             \",\n             r#\"\n+            self \"self\"\n+            super \"super\"\n             \"#,\n         );\n     }"}]}