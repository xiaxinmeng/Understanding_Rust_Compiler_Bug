{"sha": "30a9978c6c8eb257a17e562f23690291ba1fc979", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwYTk5NzhjNmM4ZWIyNTdhMTdlNTYyZjIzNjkwMjkxYmExZmM5Nzk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-26T17:55:03Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-29T23:36:51Z"}, "message": "rustc: move MIR source_scope_local_data's ClearCrossCrate to be around elements.", "tree": {"sha": "ff1a80190e08327c76f717599f8bcea4059d7d4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff1a80190e08327c76f717599f8bcea4059d7d4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30a9978c6c8eb257a17e562f23690291ba1fc979", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30a9978c6c8eb257a17e562f23690291ba1fc979", "html_url": "https://github.com/rust-lang/rust/commit/30a9978c6c8eb257a17e562f23690291ba1fc979", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30a9978c6c8eb257a17e562f23690291ba1fc979/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25d8a9494ca6d77361e47c1505ecf640b168819e", "url": "https://api.github.com/repos/rust-lang/rust/commits/25d8a9494ca6d77361e47c1505ecf640b168819e", "html_url": "https://github.com/rust-lang/rust/commit/25d8a9494ca6d77361e47c1505ecf640b168819e"}], "stats": {"total": 203, "additions": 88, "deletions": 115}, "files": [{"sha": "5f820f5b788aefc65e809651db64743bbd210e77", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/30a9978c6c8eb257a17e562f23690291ba1fc979/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a9978c6c8eb257a17e562f23690291ba1fc979/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=30a9978c6c8eb257a17e562f23690291ba1fc979", "patch": "@@ -106,7 +106,7 @@ pub struct Body<'tcx> {\n \n     /// Crate-local information for each source scope, that can't (and\n     /// needn't) be tracked across crates.\n-    pub source_scope_local_data: ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>>,\n+    pub source_scope_local_data: IndexVec<SourceScope, ClearCrossCrate<SourceScopeLocalData>>,\n \n     /// The yield type of the function, if it is a generator.\n     pub yield_ty: Option<Ty<'tcx>>,\n@@ -167,7 +167,7 @@ impl<'tcx> Body<'tcx> {\n     pub fn new(\n         basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n         source_scopes: IndexVec<SourceScope, SourceScopeData>,\n-        source_scope_local_data: ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>>,\n+        source_scope_local_data: IndexVec<SourceScope, ClearCrossCrate<SourceScopeLocalData>>,\n         local_decls: LocalDecls<'tcx>,\n         user_type_annotations: CanonicalUserTypeAnnotations<'tcx>,\n         arg_count: usize,\n@@ -435,6 +435,13 @@ pub enum ClearCrossCrate<T> {\n }\n \n impl<T> ClearCrossCrate<T> {\n+    pub fn as_ref(&'a self) -> ClearCrossCrate<&'a T> {\n+        match self {\n+            ClearCrossCrate::Clear => ClearCrossCrate::Clear,\n+            ClearCrossCrate::Set(v) => ClearCrossCrate::Set(v),\n+        }\n+    }\n+\n     pub fn assert_crate_local(self) -> T {\n         match self {\n             ClearCrossCrate::Clear => bug!(\"unwrapping cross-crate data\"),"}, {"sha": "c5236407d135f2e480cd1b5614cffeba07ad5935", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 34, "deletions": 33, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/30a9978c6c8eb257a17e562f23690291ba1fc979/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a9978c6c8eb257a17e562f23690291ba1fc979/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=30a9978c6c8eb257a17e562f23690291ba1fc979", "patch": "@@ -300,11 +300,10 @@ fn do_mir_borrowck<'a, 'tcx>(\n         let mut initial_diag =\n             mbcx.report_conflicting_borrow(location, (&place, span), bk, &borrow);\n \n-        let lint_root = if let ClearCrossCrate::Set(ref vsi) = mbcx.body.source_scope_local_data {\n-            let scope = mbcx.body.source_info(location).scope;\n-            vsi[scope].lint_root\n-        } else {\n-            id\n+        let scope = mbcx.body.source_info(location).scope;\n+        let lint_root = match &mbcx.body.source_scope_local_data[scope] {\n+            ClearCrossCrate::Set(data) => data.lint_root,\n+            _ => id,\n         };\n \n         // Span and message don't matter; we overwrite them below anyway\n@@ -338,38 +337,40 @@ fn do_mir_borrowck<'a, 'tcx>(\n     debug!(\"mbcx.used_mut: {:?}\", mbcx.used_mut);\n     let used_mut = mbcx.used_mut;\n     for local in mbcx.body.mut_vars_and_args_iter().filter(|local| !used_mut.contains(local)) {\n-        if let ClearCrossCrate::Set(ref vsi) = mbcx.body.source_scope_local_data {\n-            let local_decl = &mbcx.body.local_decls[local];\n-\n-            // Skip over locals that begin with an underscore or have no name\n-            match mbcx.local_names[local] {\n-                Some(name) => if name.as_str().starts_with(\"_\") {\n-                    continue;\n-                },\n-                None => continue,\n-            }\n+        let local_decl = &mbcx.body.local_decls[local];\n+        let lint_root = match &mbcx.body.source_scope_local_data[local_decl.source_info.scope] {\n+            ClearCrossCrate::Set(data) => data.lint_root,\n+            _ => continue,\n+        };\n \n-            let span = local_decl.source_info.span;\n-            if span.desugaring_kind().is_some() {\n-                // If the `mut` arises as part of a desugaring, we should ignore it.\n+        // Skip over locals that begin with an underscore or have no name\n+        match mbcx.local_names[local] {\n+            Some(name) => if name.as_str().starts_with(\"_\") {\n                 continue;\n-            }\n+            },\n+            None => continue,\n+        }\n \n-            let mut_span = tcx.sess.source_map().span_until_non_whitespace(span);\n-            tcx.struct_span_lint_hir(\n-                UNUSED_MUT,\n-                vsi[local_decl.source_info.scope].lint_root,\n-                span,\n-                \"variable does not need to be mutable\",\n-            )\n-            .span_suggestion_short(\n-                mut_span,\n-                \"remove this `mut`\",\n-                String::new(),\n-                Applicability::MachineApplicable,\n-            )\n-            .emit();\n+        let span = local_decl.source_info.span;\n+        if span.desugaring_kind().is_some() {\n+            // If the `mut` arises as part of a desugaring, we should ignore it.\n+            continue;\n         }\n+\n+        let mut_span = tcx.sess.source_map().span_until_non_whitespace(span);\n+        tcx.struct_span_lint_hir(\n+            UNUSED_MUT,\n+            lint_root,\n+            span,\n+            \"variable does not need to be mutable\",\n+        )\n+        .span_suggestion_short(\n+            mut_span,\n+            \"remove this `mut`\",\n+            String::new(),\n+            Applicability::MachineApplicable,\n+        )\n+        .emit();\n     }\n \n     // Buffer any move errors that we collected and de-duplicated."}, {"sha": "716e57dc4fba0473340de6cd11d6c5eaf4e5b1fb", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/30a9978c6c8eb257a17e562f23690291ba1fc979/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a9978c6c8eb257a17e562f23690291ba1fc979/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=30a9978c6c8eb257a17e562f23690291ba1fc979", "patch": "@@ -309,7 +309,7 @@ struct Builder<'a, 'tcx> {\n     /// The vector of all scopes that we have created thus far;\n     /// we track this for debuginfo later.\n     source_scopes: IndexVec<SourceScope, SourceScopeData>,\n-    source_scope_local_data: IndexVec<SourceScope, SourceScopeLocalData>,\n+    source_scope_local_data: IndexVec<SourceScope, ClearCrossCrate<SourceScopeLocalData>>,\n     source_scope: SourceScope,\n \n     /// The guard-context: each time we build the guard expression for\n@@ -741,7 +741,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         Body::new(\n             self.cfg.basic_blocks,\n             self.source_scopes,\n-            ClearCrossCrate::Set(self.source_scope_local_data),\n+            self.source_scope_local_data,\n             self.local_decls,\n             self.canonical_user_type_annotations,\n             self.arg_count,\n@@ -942,7 +942,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             self.hir.root_lint_level\n         );\n         let parent_root = tcx.maybe_lint_level_root_bounded(\n-            self.source_scope_local_data[original_source_scope].lint_root,\n+            self.source_scope_local_data[original_source_scope]\n+                .as_ref()\n+                .assert_crate_local()\n+                .lint_root,\n             self.hir.root_lint_level,\n         );\n         if current_root != parent_root {"}, {"sha": "d756a22a0002c0e41de92d2559b2ae2a2934ef39", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/30a9978c6c8eb257a17e562f23690291ba1fc979/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a9978c6c8eb257a17e562f23690291ba1fc979/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=30a9978c6c8eb257a17e562f23690291ba1fc979", "patch": "@@ -436,7 +436,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             // We estimate the true lint roots here to avoid creating a lot of source scopes.\n \n             let parent_root = tcx.maybe_lint_level_root_bounded(\n-                self.source_scope_local_data[source_scope].lint_root,\n+                self.source_scope_local_data[source_scope]\n+                    .as_ref()\n+                    .assert_crate_local()\n+                    .lint_root,\n                 self.hir.root_lint_level,\n             );\n             let current_root = tcx.maybe_lint_level_root_bounded(\n@@ -663,13 +666,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             lint_root: if let LintLevel::Explicit(lint_root) = lint_level {\n                 lint_root\n             } else {\n-                self.source_scope_local_data[parent].lint_root\n+                self.source_scope_local_data[parent].as_ref().assert_crate_local().lint_root\n             },\n             safety: safety.unwrap_or_else(|| {\n-                self.source_scope_local_data[parent].safety\n+                self.source_scope_local_data[parent].as_ref().assert_crate_local().safety\n             })\n         };\n-        self.source_scope_local_data.push(scope_local_data);\n+        self.source_scope_local_data.push(ClearCrossCrate::Set(scope_local_data));\n         scope\n     }\n "}, {"sha": "4b07f217ab3f5387204341daf52ace9517b59caf", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30a9978c6c8eb257a17e562f23690291ba1fc979/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a9978c6c8eb257a17e562f23690291ba1fc979/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=30a9978c6c8eb257a17e562f23690291ba1fc979", "patch": "@@ -849,8 +849,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 } else {\n                     block.terminator().source_info\n                 };\n-                match body.source_scope_local_data {\n-                    mir::ClearCrossCrate::Set(ref ivs) => Some(ivs[source_info.scope].lint_root),\n+                match &body.source_scope_local_data[source_info.scope] {\n+                    mir::ClearCrossCrate::Set(data) => Some(data.lint_root),\n                     mir::ClearCrossCrate::Clear => None,\n                 }\n             });"}, {"sha": "e2466c6d07a4309f1ade91ac28c59c3cf51e8675", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/30a9978c6c8eb257a17e562f23690291ba1fc979/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a9978c6c8eb257a17e562f23690291ba1fc979/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=30a9978c6c8eb257a17e562f23690291ba1fc979", "patch": "@@ -198,9 +198,6 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n \n     let mut body = new_body(\n         blocks,\n-        IndexVec::from_elem_n(\n-            SourceScopeData { span, parent_scope: None }, 1\n-        ),\n         local_decls_for_sig(&sig, span),\n         sig.inputs().len(),\n         span);\n@@ -244,15 +241,18 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n \n fn new_body<'tcx>(\n     basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n-    source_scopes: IndexVec<SourceScope, SourceScopeData>,\n     local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n     arg_count: usize,\n     span: Span,\n ) -> Body<'tcx> {\n     Body::new(\n         basic_blocks,\n-        source_scopes,\n-        ClearCrossCrate::Clear,\n+        IndexVec::from_elem_n(\n+            SourceScopeData { span, parent_scope: None }, 1\n+        ),\n+        IndexVec::from_elem_n(\n+            ClearCrossCrate::Clear, 1\n+        ),\n         local_decls,\n         IndexVec::new(),\n         arg_count,\n@@ -380,9 +380,6 @@ impl CloneShimBuilder<'tcx> {\n     fn into_mir(self) -> Body<'tcx> {\n         new_body(\n             self.blocks,\n-            IndexVec::from_elem_n(\n-                SourceScopeData { span: self.span, parent_scope: None }, 1\n-            ),\n             self.local_decls,\n             self.sig.inputs().len(),\n             self.span,\n@@ -836,9 +833,6 @@ fn build_call_shim<'tcx>(\n \n     let mut body = new_body(\n         blocks,\n-        IndexVec::from_elem_n(\n-            SourceScopeData { span, parent_scope: None }, 1\n-        ),\n         local_decls,\n         sig.inputs().len(),\n         span,\n@@ -919,9 +913,6 @@ pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> &Body<'_> {\n \n     let body = new_body(\n         IndexVec::from_elem_n(start_block, 1),\n-        IndexVec::from_elem_n(\n-            SourceScopeData { span, parent_scope: None }, 1\n-        ),\n         local_decls,\n         sig.inputs().len(),\n         span,"}, {"sha": "b1c4101dbc7599275a431927957d947393019246", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/30a9978c6c8eb257a17e562f23690291ba1fc979/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a9978c6c8eb257a17e562f23690291ba1fc979/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=30a9978c6c8eb257a17e562f23690291ba1fc979", "patch": "@@ -1,6 +1,4 @@\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_index::vec::IndexVec;\n-use rustc_data_structures::sync::Lrc;\n \n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt};\n@@ -24,7 +22,6 @@ pub struct UnsafetyChecker<'a, 'tcx> {\n     body: &'a Body<'tcx>,\n     const_context: bool,\n     min_const_fn: bool,\n-    source_scope_local_data: &'a IndexVec<SourceScope, SourceScopeLocalData>,\n     violations: Vec<UnsafetyViolation>,\n     source_info: SourceInfo,\n     tcx: TyCtxt<'tcx>,\n@@ -39,7 +36,6 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n         const_context: bool,\n         min_const_fn: bool,\n         body: &'a Body<'tcx>,\n-        source_scope_local_data: &'a IndexVec<SourceScope, SourceScopeLocalData>,\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Self {\n@@ -51,7 +47,6 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n             body,\n             const_context,\n             min_const_fn,\n-            source_scope_local_data,\n             violations: vec![],\n             source_info: SourceInfo {\n                 span: body.span,\n@@ -219,8 +214,10 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             if context.is_borrow() {\n                 if util::is_disaligned(self.tcx, self.body, self.param_env, place) {\n                     let source_info = self.source_info;\n-                    let lint_root =\n-                        self.source_scope_local_data[source_info.scope].lint_root;\n+                    let lint_root = self.body.source_scope_local_data[source_info.scope]\n+                        .as_ref()\n+                        .assert_crate_local()\n+                        .lint_root;\n                     self.register_violations(&[UnsafetyViolation {\n                         source_info,\n                         description: Symbol::intern(\"borrow of packed field\"),\n@@ -346,7 +343,10 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     fn register_violations(&mut self,\n                            violations: &[UnsafetyViolation],\n                            unsafe_blocks: &[(hir::HirId, bool)]) {\n-        let safety = self.source_scope_local_data[self.source_info.scope].safety;\n+        let safety = self.body.source_scope_local_data[self.source_info.scope]\n+            .as_ref()\n+            .assert_crate_local()\n+            .safety;\n         let within_unsafe = match safety {\n             // `unsafe` blocks are required in safe code\n             Safety::Safe => {\n@@ -516,17 +516,6 @@ fn unsafety_check_result(tcx: TyCtxt<'_>, def_id: DefId) -> UnsafetyCheckResult\n     // `mir_built` force this.\n     let body = &tcx.mir_built(def_id).borrow();\n \n-    let source_scope_local_data = match body.source_scope_local_data {\n-        ClearCrossCrate::Set(ref data) => data,\n-        ClearCrossCrate::Clear => {\n-            debug!(\"unsafety_violations: {:?} - remote, skipping\", def_id);\n-            return UnsafetyCheckResult {\n-                violations: Lrc::new([]),\n-                unsafe_blocks: Lrc::new([])\n-            }\n-        }\n-    };\n-\n     let param_env = tcx.param_env(def_id);\n \n     let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n@@ -536,9 +525,7 @@ fn unsafety_check_result(tcx: TyCtxt<'_>, def_id: DefId) -> UnsafetyCheckResult\n         hir::BodyOwnerKind::Const |\n         hir::BodyOwnerKind::Static(_) => (true, false),\n     };\n-    let mut checker = UnsafetyChecker::new(\n-        const_context, min_const_fn,\n-        body, source_scope_local_data, tcx, param_env);\n+    let mut checker = UnsafetyChecker::new(const_context, min_const_fn, body, tcx, param_env);\n     checker.visit_body(body);\n \n     check_unused_unsafe(tcx, def_id, &checker.used_unsafe, &mut checker.inherited_blocks);"}, {"sha": "705006fabbe42884cda321a9be52aee18ad64bdf", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 15, "deletions": 34, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/30a9978c6c8eb257a17e562f23690291ba1fc979/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a9978c6c8eb257a17e562f23690291ba1fc979/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=30a9978c6c8eb257a17e562f23690291ba1fc979", "patch": "@@ -74,17 +74,11 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n \n         trace!(\"ConstProp starting for {:?}\", source.def_id());\n \n-        // Steal some data we need from `body`.\n-        let source_scope_local_data = std::mem::replace(\n-            &mut body.source_scope_local_data,\n-            ClearCrossCrate::Clear\n-        );\n-\n         let dummy_body =\n             &Body::new(\n                 body.basic_blocks().clone(),\n                 Default::default(),\n-                ClearCrossCrate::Clear,\n+                body.source_scope_local_data.clone(),\n                 body.local_decls.clone(),\n                 Default::default(),\n                 body.arg_count,\n@@ -101,19 +95,11 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n         let mut optimization_finder = ConstPropagator::new(\n             body,\n             dummy_body,\n-            source_scope_local_data,\n             tcx,\n             source\n         );\n         optimization_finder.visit_body(body);\n \n-        // put back the data we stole from `mir`\n-        let source_scope_local_data = optimization_finder.release_stolen_data();\n-        std::mem::replace(\n-            &mut body.source_scope_local_data,\n-            source_scope_local_data\n-        );\n-\n         trace!(\"ConstProp done for {:?}\", source.def_id());\n     }\n }\n@@ -266,7 +252,9 @@ struct ConstPropagator<'mir, 'tcx> {\n     source: MirSource<'tcx>,\n     can_const_prop: IndexVec<Local, bool>,\n     param_env: ParamEnv<'tcx>,\n-    source_scope_local_data: ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>>,\n+    // FIXME(eddyb) avoid cloning these two fields more than once,\n+    // by accessing them through `ecx` instead.\n+    source_scope_local_data: IndexVec<SourceScope, ClearCrossCrate<SourceScopeLocalData>>,\n     local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n     ret: Option<OpTy<'tcx, ()>>,\n }\n@@ -298,7 +286,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     fn new(\n         body: &Body<'tcx>,\n         dummy_body: &'mir Body<'tcx>,\n-        source_scope_local_data: ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>>,\n         tcx: TyCtxt<'tcx>,\n         source: MirSource<'tcx>,\n     ) -> ConstPropagator<'mir, 'tcx> {\n@@ -336,17 +323,15 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             source,\n             param_env,\n             can_const_prop,\n-            source_scope_local_data,\n+            // FIXME(eddyb) avoid cloning these two fields more than once,\n+            // by accessing them through `ecx` instead.\n+            source_scope_local_data: body.source_scope_local_data.clone(),\n             //FIXME(wesleywiser) we can't steal this because `Visitor::super_visit_body()` needs it\n             local_decls: body.local_decls.clone(),\n             ret: ret.map(Into::into),\n         }\n     }\n \n-    fn release_stolen_data(self) -> ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>> {\n-        self.source_scope_local_data\n-    }\n-\n     fn get_const(&self, local: Local) -> Option<Const<'tcx>> {\n         if local == RETURN_PLACE {\n             // Try to read the return place as an immediate so that if it is representable as a\n@@ -376,14 +361,11 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         F: FnOnce(&mut Self) -> InterpResult<'tcx, T>,\n     {\n         self.ecx.tcx.span = source_info.span;\n-        let lint_root = match self.source_scope_local_data {\n-            ClearCrossCrate::Set(ref ivs) => {\n-                //FIXME(#51314): remove this check\n-                if source_info.scope.index() >= ivs.len() {\n-                    return None;\n-                }\n-                ivs[source_info.scope].lint_root\n-            },\n+        // FIXME(eddyb) move this to the `Panic(_)` error case, so that\n+        // `f(self)` is always called, and that the only difference when\n+        // `source_scope_local_data` is missing, is that the lint isn't emitted.\n+        let lint_root = match &self.source_scope_local_data[source_info.scope] {\n+            ClearCrossCrate::Set(data) => data.lint_root,\n             ClearCrossCrate::Clear => return None,\n         };\n         let r = match f(self) {\n@@ -507,19 +489,18 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                     let right_size = r.layout.size;\n                     let r_bits = r.to_scalar().and_then(|r| r.to_bits(right_size));\n                     if r_bits.ok().map_or(false, |b| b >= left_bits as u128) {\n-                        let source_scope_local_data = match self.source_scope_local_data {\n-                            ClearCrossCrate::Set(ref data) => data,\n+                        let lint_root = match &self.source_scope_local_data[source_info.scope] {\n+                            ClearCrossCrate::Set(data) => data.lint_root,\n                             ClearCrossCrate::Clear => return None,\n                         };\n                         let dir = if *op == BinOp::Shr {\n                             \"right\"\n                         } else {\n                             \"left\"\n                         };\n-                        let hir_id = source_scope_local_data[source_info.scope].lint_root;\n                         self.tcx.lint_hir(\n                             ::rustc::lint::builtin::EXCEEDING_BITSHIFTS,\n-                            hir_id,\n+                            lint_root,\n                             span,\n                             &format!(\"attempt to shift {} with overflow\", dir));\n                         return None;"}]}