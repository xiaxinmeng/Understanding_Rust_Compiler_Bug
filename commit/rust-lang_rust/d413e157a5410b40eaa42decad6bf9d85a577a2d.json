{"sha": "d413e157a5410b40eaa42decad6bf9d85a577a2d", "node_id": "C_kwDOAAsO6NoAKGQ0MTNlMTU3YTU0MTBiNDBlYWE0MmRlY2FkNmJmOWQ4NWE1NzdhMmQ", "commit": {"author": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-09-28T20:42:27Z"}, "committer": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-10-01T18:04:20Z"}, "message": "Look into tuple, array, ADT args in raw pointer heuristic", "tree": {"sha": "f6670f3788ad150a6423807154422f455b528faa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6670f3788ad150a6423807154422f455b528faa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d413e157a5410b40eaa42decad6bf9d85a577a2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d413e157a5410b40eaa42decad6bf9d85a577a2d", "html_url": "https://github.com/rust-lang/rust/commit/d413e157a5410b40eaa42decad6bf9d85a577a2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d413e157a5410b40eaa42decad6bf9d85a577a2d/comments", "author": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee74574876e74a00eeae9c36f662d20fd6c61c0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee74574876e74a00eeae9c36f662d20fd6c61c0a", "html_url": "https://github.com/rust-lang/rust/commit/ee74574876e74a00eeae9c36f662d20fd6c61c0a"}], "stats": {"total": 93, "additions": 74, "deletions": 19}, "files": [{"sha": "f800d3ff7e154935d032e64417b0ba6384c144c5", "filename": "clippy_lints/src/non_send_field_in_send_ty.rs", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d413e157a5410b40eaa42decad6bf9d85a577a2d/clippy_lints%2Fsrc%2Fnon_send_field_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d413e157a5410b40eaa42decad6bf9d85a577a2d/clippy_lints%2Fsrc%2Fnon_send_field_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_send_field_in_send_ty.rs?ref=d413e157a5410b40eaa42decad6bf9d85a577a2d", "patch": "@@ -121,7 +121,7 @@ impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n                                 };\n                             }\n                         },\n-                    )\n+                    );\n                 }\n             }\n         }\n@@ -145,6 +145,8 @@ impl<'tcx> NonSendField<'tcx> {\n     }\n }\n \n+/// Given a type, collect all of its generic parameters.\n+/// Example: MyStruct<P, Box<Q, R>> => vec![P, Q, R]\n fn collect_generic_params<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Vec<Ty<'tcx>> {\n     ty.walk(cx.tcx)\n         .filter_map(|inner| match inner.unpack() {\n@@ -155,14 +157,47 @@ fn collect_generic_params<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Vec<Ty<\n         .collect()\n }\n \n-fn ty_allowed_in_send<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, send_trait: DefId) -> bool {\n-    raw_pointer_in_ty_def(cx, ty) || implements_trait(cx, ty, send_trait, &[]) || is_copy(cx, ty)\n+/// Determine if the given type is allowed in an ADT that implements `Send`\n+fn ty_allowed_in_send(cx: &LateContext<'tcx>, ty: Ty<'tcx>, send_trait: DefId) -> bool {\n+    // TODO: check configuration and call `ty_implements_send_or_copy()` or\n+    // `ty_allowed_with_raw_pointer_heuristic()`\n+    ty_allowed_with_raw_pointer_heuristic(cx, ty, send_trait)\n }\n \n-/// Returns `true` if the type itself is a raw pointer or has a raw pointer as a\n-/// generic parameter, e.g., `Vec<*const u8>`.\n-/// Note that it does not look into enum variants or struct fields.\n-fn raw_pointer_in_ty_def<'tcx>(cx: &LateContext<'tcx>, target_ty: Ty<'tcx>) -> bool {\n+/// Determine if the given type is `Send` or `Copy`\n+fn ty_implements_send_or_copy(cx: &LateContext<'tcx>, ty: Ty<'tcx>, send_trait: DefId) -> bool {\n+    implements_trait(cx, ty, send_trait, &[]) || is_copy(cx, ty)\n+}\n+\n+/// Heuristic to allow cases like `Vec<*const u8>`\n+fn ty_allowed_with_raw_pointer_heuristic<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, send_trait: DefId) -> bool {\n+    if ty_implements_send_or_copy(cx, ty, send_trait) {\n+        true\n+    } else {\n+        // The type is known to be `!Send` and `!Copy`\n+        match ty.kind() {\n+            ty::Tuple(_) => ty\n+                .tuple_fields()\n+                .all(|ty| ty_allowed_with_raw_pointer_heuristic(cx, ty, send_trait)),\n+            ty::Array(ty, _) | ty::Slice(ty) => ty_allowed_with_raw_pointer_heuristic(cx, ty, send_trait),\n+            ty::Adt(_, substs) => {\n+                if contains_raw_pointer(cx, ty) {\n+                    // descends only if ADT contains any raw pointers\n+                    substs.iter().all(|generic_arg| match generic_arg.unpack() {\n+                        GenericArgKind::Type(ty) => ty_allowed_with_raw_pointer_heuristic(cx, ty, send_trait),\n+                        GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => true,\n+                    })\n+                } else {\n+                    false\n+                }\n+            },\n+            ty::RawPtr(_) => true,\n+            _ => false,\n+        }\n+    }\n+}\n+\n+fn contains_raw_pointer<'tcx>(cx: &LateContext<'tcx>, target_ty: Ty<'tcx>) -> bool {\n     for ty_node in target_ty.walk(cx.tcx) {\n         if_chain! {\n             if let GenericArgKind::Type(inner_ty) = ty_node.unpack();"}, {"sha": "f5e7abdecd1dcf9b99e978103ac2f5c86f63f1a7", "filename": "tests/ui/non_send_field_in_send_ty.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d413e157a5410b40eaa42decad6bf9d85a577a2d/tests%2Fui%2Fnon_send_field_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d413e157a5410b40eaa42decad6bf9d85a577a2d/tests%2Fui%2Fnon_send_field_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_send_field_in_send_ty.rs?ref=d413e157a5410b40eaa42decad6bf9d85a577a2d", "patch": "@@ -76,16 +76,23 @@ pub struct MultiParam<A, B> {\n \n unsafe impl<A, B> Send for MultiParam<A, B> {}\n \n-// Raw pointers are allowed\n+// Tests for raw pointer heuristic\n extern \"C\" {\n-    type SomeFfiType;\n+    type NonSend;\n }\n \n-pub struct FpTest {\n-    vec: Vec<*const SomeFfiType>,\n+pub struct HeuristicTest {\n+    // raw pointers are allowed\n+    field1: Vec<*const NonSend>,\n+    field2: [*const NonSend; 3],\n+    field3: (*const NonSend, *const NonSend, *const NonSend),\n+    // not allowed when it contains concrete `!Send` field\n+    field4: (*const NonSend, Rc<u8>),\n+    // nested raw pointer is also allowed\n+    field5: Vec<Vec<*const NonSend>>,\n }\n \n-unsafe impl Send for FpTest {}\n+unsafe impl Send for HeuristicTest {}\n \n // Test attributes\n #[allow(clippy::non_send_field_in_send_ty)]"}, {"sha": "327ef9fc2d66c9b698e5d95a33add220e79ede86", "filename": "tests/ui/non_send_field_in_send_ty.stderr", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d413e157a5410b40eaa42decad6bf9d85a577a2d/tests%2Fui%2Fnon_send_field_in_send_ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d413e157a5410b40eaa42decad6bf9d85a577a2d/tests%2Fui%2Fnon_send_field_in_send_ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_send_field_in_send_ty.stderr?ref=d413e157a5410b40eaa42decad6bf9d85a577a2d", "patch": "@@ -115,44 +115,57 @@ LL |     vec: Vec<(A, B)>,\n    |     ^^^^^^^^^^^^^^^^\n    = help: add bounds on type parameters `A, B` that satisfy `std::vec::Vec<(A, B)>: Send`\n \n+error: this implementation is unsound, as some fields in `HeuristicTest` are `!Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:95:1\n+   |\n+LL | unsafe impl Send for HeuristicTest {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the field `field4` has type `(*const NonSend, std::rc::Rc<u8>)` which is not `Send`\n+  --> $DIR/non_send_field_in_send_ty.rs:90:5\n+   |\n+LL |     field4: (*const NonSend, Rc<u8>),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use a thread-safe type that implements `Send`\n+\n error: this implementation is unsound, as some fields in `AttrTest3<T>` are `!Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:107:1\n+  --> $DIR/non_send_field_in_send_ty.rs:114:1\n    |\n LL | unsafe impl<T> Send for AttrTest3<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the field `0` has type `T` which is not `Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:102:11\n+  --> $DIR/non_send_field_in_send_ty.rs:109:11\n    |\n LL |     Enum2(T),\n    |           ^\n    = help: add `T: Send` bound in `Send` impl\n \n error: this implementation is unsound, as some fields in `Complex<P, u32>` are `!Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:115:1\n+  --> $DIR/non_send_field_in_send_ty.rs:122:1\n    |\n LL | unsafe impl<P> Send for Complex<P, u32> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the field `field1` has type `P` which is not `Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:111:5\n+  --> $DIR/non_send_field_in_send_ty.rs:118:5\n    |\n LL |     field1: A,\n    |     ^^^^^^^^^\n    = help: add `P: Send` bound in `Send` impl\n \n error: this implementation is unsound, as some fields in `Complex<Q, std::sync::MutexGuard<'static, bool>>` are `!Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:118:1\n+  --> $DIR/non_send_field_in_send_ty.rs:125:1\n    |\n LL | unsafe impl<Q: Send> Send for Complex<Q, MutexGuard<'static, bool>> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the field `field2` has type `std::sync::MutexGuard<'static, bool>` which is not `Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:112:5\n+  --> $DIR/non_send_field_in_send_ty.rs:119:5\n    |\n LL |     field2: B,\n    |     ^^^^^^^^^\n    = help: use a thread-safe type that implements `Send`\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 12 previous errors\n "}]}