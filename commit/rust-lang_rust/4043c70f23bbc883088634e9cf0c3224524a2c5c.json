{"sha": "4043c70f23bbc883088634e9cf0c3224524a2c5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNDNjNzBmMjNiYmM4ODMwODg2MzRlOWNmMGMzMjI0NTI0YTJjNWM=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-18T11:57:34Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-19T09:19:59Z"}, "message": "std::str: Small fix for slice", "tree": {"sha": "5c210d0232d7b0b0ddf87b6c61c4a3f57a5d4491", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c210d0232d7b0b0ddf87b6c61c4a3f57a5d4491"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4043c70f23bbc883088634e9cf0c3224524a2c5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4043c70f23bbc883088634e9cf0c3224524a2c5c", "html_url": "https://github.com/rust-lang/rust/commit/4043c70f23bbc883088634e9cf0c3224524a2c5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4043c70f23bbc883088634e9cf0c3224524a2c5c/comments", "author": null, "committer": null, "parents": [{"sha": "548bdbaa29e0855a87ac5eec073d83babb72d8f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/548bdbaa29e0855a87ac5eec073d83babb72d8f2", "html_url": "https://github.com/rust-lang/rust/commit/548bdbaa29e0855a87ac5eec073d83babb72d8f2"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "07006ba8c15b9748297d914233dff4199f2ac8e2", "filename": "src/libstd/str.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4043c70f23bbc883088634e9cf0c3224524a2c5c/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4043c70f23bbc883088634e9cf0c3224524a2c5c/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=4043c70f23bbc883088634e9cf0c3224524a2c5c", "patch": "@@ -1366,8 +1366,7 @@ impl<'self> StrSlice<'self> for &'self str {\n     /// beyond the last character of the string\n     #[inline]\n     fn slice(&self, begin: uint, end: uint) -> &'self str {\n-        assert!(self.is_char_boundary(begin));\n-        assert!(self.is_char_boundary(end));\n+        assert!(self.is_char_boundary(begin) && self.is_char_boundary(end));\n         unsafe { raw::slice_bytes(*self, begin, end) }\n     }\n \n@@ -1609,6 +1608,7 @@ impl<'self> StrSlice<'self> for &'self str {\n \n     /// Returns false if the index points into the middle of a multi-byte\n     /// character sequence.\n+    #[inline]\n     fn is_char_boundary(&self, index: uint) -> bool {\n         if index == self.len() { return true; }\n         let b = self[index];\n@@ -1694,6 +1694,7 @@ impl<'self> StrSlice<'self> for &'self str {\n     /// This function can be used to iterate over a unicode string in reverse.\n     ///\n     /// Returns 0 for next index if called on start index 0.\n+    #[inline]\n     fn char_range_at_reverse(&self, start: uint) -> CharRange {\n         let mut prev = start;\n "}]}