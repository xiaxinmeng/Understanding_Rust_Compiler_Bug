{"sha": "f672282bf25db5670f5809f78b1cd701037cc2dc", "node_id": "C_kwDOAAsO6NoAKGY2NzIyODJiZjI1ZGI1NjcwZjU4MDlmNzhiMWNkNzAxMDM3Y2MyZGM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-01T23:15:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-01T23:15:39Z"}, "message": "factor SIMD bool handling into helper functions", "tree": {"sha": "4d44d2101f2a7996505945049642b22e21dfd332", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d44d2101f2a7996505945049642b22e21dfd332"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f672282bf25db5670f5809f78b1cd701037cc2dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f672282bf25db5670f5809f78b1cd701037cc2dc", "html_url": "https://github.com/rust-lang/rust/commit/f672282bf25db5670f5809f78b1cd701037cc2dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f672282bf25db5670f5809f78b1cd701037cc2dc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e05a543f74dbdd0580b2bd35ddb7f8e144d9edda", "url": "https://api.github.com/repos/rust-lang/rust/commits/e05a543f74dbdd0580b2bd35ddb7f8e144d9edda", "html_url": "https://github.com/rust-lang/rust/commit/e05a543f74dbdd0580b2bd35ddb7f8e144d9edda"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "2f1c74a0587ec07ba0a5aefc3836dfa7b2d020e3", "filename": "src/helpers.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f672282bf25db5670f5809f78b1cd701037cc2dc/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f672282bf25db5670f5809f78b1cd701037cc2dc/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=f672282bf25db5670f5809f78b1cd701037cc2dc", "patch": "@@ -758,3 +758,18 @@ pub fn immty_from_uint_checked<'tcx>(\n         err_unsup_format!(\"unsigned value {:#x} does not fit in {} bits\", int, layout.size.bits())\n     })?)\n }\n+\n+pub fn bool_to_simd_element(b: bool, size: Size) -> Scalar<Tag> {\n+    // SIMD uses all-1 as pattern for \"true\"\n+    let val = if b { -1 } else { 0 };\n+    Scalar::from_int(val, size)\n+}\n+\n+pub fn simd_element_to_bool<'tcx>(elem: ImmTy<'tcx, Tag>) -> InterpResult<'tcx, bool> {\n+    let val = elem.to_scalar()?.to_int(elem.layout.size)?;\n+    Ok(match val {\n+        0 => false,\n+        -1 => true,\n+        _ => throw_ub_format!(\"each element of a SIMD mask must be all-0-bits or all-1-bits\"),\n+    })\n+}"}, {"sha": "74914963f74c291d3b328bcd9c20e801907ebf84", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f672282bf25db5670f5809f78b1cd701037cc2dc/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f672282bf25db5670f5809f78b1cd701037cc2dc/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=f672282bf25db5670f5809f78b1cd701037cc2dc", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::{mir, mir::BinOp, ty, ty::FloatTy};\n use rustc_target::abi::{Align, Integer};\n \n use crate::*;\n-use helpers::check_arg_count;\n+use helpers::{bool_to_simd_element, check_arg_count, simd_element_to_bool};\n \n pub enum AtomicOp {\n     MirOp(mir::BinOp, bool),\n@@ -365,8 +365,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         // Special handling for boolean-returning operations\n                         assert_eq!(ty, this.tcx.types.bool);\n                         let val = val.to_bool().unwrap();\n-                        let val = if val { -1 } else { 0 }; // SIMD uses all-1 as pattern for \"true\"\n-                        let val = Scalar::from_int(val, dest.layout.size);\n+                        let val = bool_to_simd_element(val, dest.layout.size);\n                         this.write_scalar(val, &dest.into())?;\n                     } else {\n                         assert_eq!(ty, dest.layout.ty);\n@@ -381,16 +380,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let mut res = false; // the neutral element\n                 for i in 0..arg_len {\n                     let op = this.read_immediate(&this.mplace_index(&arg, i)?.into())?;\n-                    // We convert it to a *signed* integer and expect either 0 or -1 (the latter means all bits were set).\n-                    let val = op.to_scalar()?.to_int(op.layout.size)?;\n-                    let val = match val {\n-                        0 => false,\n-                        -1 => true,\n-                        _ =>\n-                            throw_ub_format!(\n-                                \"each element of a simd_reduce_any operand must be all-0-bits or all-1-bits\"\n-                            ),\n-                    };\n+                    let val = simd_element_to_bool(op)?;\n                     res = res | val;\n                 }\n "}]}