{"sha": "237652299ec5fa3529ac7bd1bfddc52b7526bb82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNzY1MjI5OWVjNWZhMzUyOWFjN2JkMWJmZGRjNTJiNzUyNmJiODI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-03T07:40:27Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-06T03:39:55Z"}, "message": "rt: Protect cond and cond_name with the state_lock", "tree": {"sha": "005becc9376cdc71633bba87edbe78c8912efcc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/005becc9376cdc71633bba87edbe78c8912efcc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/237652299ec5fa3529ac7bd1bfddc52b7526bb82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/237652299ec5fa3529ac7bd1bfddc52b7526bb82", "html_url": "https://github.com/rust-lang/rust/commit/237652299ec5fa3529ac7bd1bfddc52b7526bb82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/237652299ec5fa3529ac7bd1bfddc52b7526bb82/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0432030c2727183f3cbda0263de2ca2b90c37353", "url": "https://api.github.com/repos/rust-lang/rust/commits/0432030c2727183f3cbda0263de2ca2b90c37353", "html_url": "https://github.com/rust-lang/rust/commit/0432030c2727183f3cbda0263de2ca2b90c37353"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "3c375f0b4c3bd4904f9e9de7216a117760cdbc4d", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/237652299ec5fa3529ac7bd1bfddc52b7526bb82/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/237652299ec5fa3529ac7bd1bfddc52b7526bb82/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=237652299ec5fa3529ac7bd1bfddc52b7526bb82", "patch": "@@ -74,8 +74,6 @@ rust_task::rust_task(rust_task_thread *thread, rust_task_list *state,\n     cache(NULL),\n     kernel(thread->kernel),\n     name(name),\n-    cond(NULL),\n-    cond_name(\"none\"),\n     list_index(-1),\n     next_port_id(0),\n     rendezvous_ptr(0),\n@@ -87,6 +85,8 @@ rust_task::rust_task(rust_task_thread *thread, rust_task_list *state,\n     cc_counter(0),\n     total_stack_sz(0),\n     state(state),\n+    cond(NULL),\n+    cond_name(\"none\"),\n     killed(false),\n     reentered_rust_stack(false),\n     c_stack(NULL),\n@@ -242,7 +242,7 @@ rust_task::start(spawn_fn spawnee_fn,\n \n void rust_task::start()\n {\n-    transition(&thread->newborn_tasks, &thread->running_tasks);\n+    transition(&thread->newborn_tasks, &thread->running_tasks, NULL, \"none\");\n }\n \n bool\n@@ -369,7 +369,8 @@ rust_task::blocked()\n bool\n rust_task::blocked_on(rust_cond *on)\n {\n-    return blocked() && cond == on;\n+    scoped_lock with(state_lock);\n+    return cond == on;\n }\n \n bool\n@@ -398,7 +399,8 @@ rust_task::free(void *p)\n }\n \n void\n-rust_task::transition(rust_task_list *src, rust_task_list *dst) {\n+rust_task::transition(rust_task_list *src, rust_task_list *dst,\n+                      rust_cond *cond, const char* cond_name) {\n     bool unlock = false;\n     if(!thread->lock.lock_held_by_current_thread()) {\n         unlock = true;\n@@ -413,6 +415,8 @@ rust_task::transition(rust_task_list *src, rust_task_list *dst) {\n     {\n         scoped_lock with(state_lock);\n         state = dst;\n+        this->cond = cond;\n+        this->cond_name = cond_name;\n     }\n     thread->lock.signal();\n     if(unlock)\n@@ -426,9 +430,7 @@ rust_task::block(rust_cond *on, const char* name) {\n     A(thread, cond == NULL, \"Cannot block an already blocked task.\");\n     A(thread, on != NULL, \"Cannot block on a NULL object.\");\n \n-    transition(&thread->running_tasks, &thread->blocked_tasks);\n-    cond = on;\n-    cond_name = name;\n+    transition(&thread->running_tasks, &thread->blocked_tasks, on, name);\n }\n \n void\n@@ -438,14 +440,12 @@ rust_task::wakeup(rust_cond *from) {\n                         (uintptr_t) cond, (uintptr_t) from);\n     A(thread, cond == from, \"Cannot wake up blocked task on wrong condition.\");\n \n-    cond = NULL;\n-    cond_name = \"none\";\n-    transition(&thread->blocked_tasks, &thread->running_tasks);\n+    transition(&thread->blocked_tasks, &thread->running_tasks, NULL, \"none\");\n }\n \n void\n rust_task::die() {\n-    transition(&thread->running_tasks, &thread->dead_tasks);\n+    transition(&thread->running_tasks, &thread->dead_tasks, NULL, \"none\");\n }\n \n void"}, {"sha": "a940b6299ac9c10cdf2b735021ba53d9941ab427", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/237652299ec5fa3529ac7bd1bfddc52b7526bb82/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/237652299ec5fa3529ac7bd1bfddc52b7526bb82/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=237652299ec5fa3529ac7bd1bfddc52b7526bb82", "patch": "@@ -68,8 +68,6 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     // Fields known only to the runtime.\n     rust_kernel *kernel;\n     const char *const name;\n-    rust_cond *cond;\n-    const char *cond_name;\n     int32_t list_index;\n \n     rust_port_id next_port_id;\n@@ -106,8 +104,11 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n \n private:\n \n+    // Protects state, cond, cond_name\n     lock_and_signal state_lock;\n     rust_task_list *state;\n+    rust_cond *cond;\n+    const char *cond_name;\n \n     // Protects the killed flag\n     lock_and_signal kill_lock;\n@@ -162,7 +163,8 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     void *realloc(void *data, size_t sz);\n     void free(void *p);\n \n-    void transition(rust_task_list *src, rust_task_list *dst);\n+    void transition(rust_task_list *src, rust_task_list *dst,\n+                    rust_cond *cond, const char* cond_name);\n \n     void block(rust_cond *on, const char* name);\n     void wakeup(rust_cond *from);\n@@ -222,6 +224,8 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     rust_port_selector *get_port_selector() { return &port_selector; }\n \n     rust_task_list *get_state() { return state; }\n+    rust_cond *get_cond() { return cond; }\n+    const char *get_cond_name() { return cond_name; }\n };\n \n // This stuff is on the stack-switching fast path"}, {"sha": "472b58f16711a18fdd04d8d11e67806d8225da39", "filename": "src/rt/rust_task_thread.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/237652299ec5fa3529ac7bd1bfddc52b7526bb82/src%2Frt%2Frust_task_thread.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/237652299ec5fa3529ac7bd1bfddc52b7526bb82/src%2Frt%2Frust_task_thread.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task_thread.cpp?ref=237652299ec5fa3529ac7bd1bfddc52b7526bb82", "patch": "@@ -209,7 +209,8 @@ rust_task_thread::log_state() {\n             log(NULL, log_debug, \"\\t task: %s @0x%\" PRIxPTR \", blocked on: 0x%\"\n                 PRIxPTR \" '%s'\",\n                 blocked_tasks[i]->name, blocked_tasks[i],\n-                blocked_tasks[i]->cond, blocked_tasks[i]->cond_name);\n+                blocked_tasks[i]->get_cond(),\n+                blocked_tasks[i]->get_cond_name());\n         }\n     }\n "}]}