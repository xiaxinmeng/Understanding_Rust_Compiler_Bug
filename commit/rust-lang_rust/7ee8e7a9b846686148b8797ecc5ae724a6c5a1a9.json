{"sha": "7ee8e7a9b846686148b8797ecc5ae724a6c5a1a9", "node_id": "C_kwDOAAsO6NoAKDdlZThlN2E5Yjg0NjY4NjE0OGI4Nzk3ZWNjNWFlNzI0YTZjNWExYTk", "commit": {"author": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-15T23:16:27Z"}, "committer": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-18T10:05:18Z"}, "message": "Implement detecting trailing zero-sized array", "tree": {"sha": "b8085f5437b9cf2fca3635b14cb156e760a8494c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8085f5437b9cf2fca3635b14cb156e760a8494c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ee8e7a9b846686148b8797ecc5ae724a6c5a1a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ee8e7a9b846686148b8797ecc5ae724a6c5a1a9", "html_url": "https://github.com/rust-lang/rust/commit/7ee8e7a9b846686148b8797ecc5ae724a6c5a1a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ee8e7a9b846686148b8797ecc5ae724a6c5a1a9/comments", "author": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92d3b775bd05c363b69b91ed66c20904c7fbfbe7", "url": "https://api.github.com/repos/rust-lang/rust/commits/92d3b775bd05c363b69b91ed66c20904c7fbfbe7", "html_url": "https://github.com/rust-lang/rust/commit/92d3b775bd05c363b69b91ed66c20904c7fbfbe7"}], "stats": {"total": 92, "additions": 69, "deletions": 23}, "files": [{"sha": "d494892c3b4c68b24163f63bb1ba8fabdeec1761", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ee8e7a9b846686148b8797ecc5ae724a6c5a1a9/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee8e7a9b846686148b8797ecc5ae724a6c5a1a9/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=7ee8e7a9b846686148b8797ecc5ae724a6c5a1a9", "patch": "@@ -30,7 +30,6 @@ extern crate rustc_index;\n extern crate rustc_infer;\n extern crate rustc_lexer;\n extern crate rustc_lint;\n-extern crate rustc_lint_defs;\n extern crate rustc_middle;\n extern crate rustc_mir_dataflow;\n extern crate rustc_parse;\n@@ -488,7 +487,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         store.register_late_pass(|| Box::new(utils::internal_lints::OuterExpnDataPass));\n     }\n \n-    store.register_early_pass(||        Box::new(trailing_zero_sized_array_without_repr_c::TrailingZeroSizedArrayWithoutReprC));\n     store.register_late_pass(|| Box::new(utils::author::Author));\n     store.register_late_pass(|| Box::new(await_holding_invalid::AwaitHolding));\n     store.register_late_pass(|| Box::new(serde_api::SerdeApi));\n@@ -780,6 +778,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(undocumented_unsafe_blocks::UndocumentedUnsafeBlocks::default()));\n     store.register_late_pass(|| Box::new(match_str_case_mismatch::MatchStrCaseMismatch));\n     store.register_late_pass(move || Box::new(format_args::FormatArgs));\n+    store.register_late_pass(|| Box::new(trailing_zero_sized_array_without_repr_c::TrailingZeroSizedArrayWithoutReprC));\n+\n }\n \n #[rustfmt::skip]"}, {"sha": "6ca382d16795944522520ddc3dc0f0f48a7c4c3a", "filename": "clippy_lints/src/trailing_zero_sized_array_without_repr_c.rs", "status": "modified", "additions": 41, "deletions": 21, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/7ee8e7a9b846686148b8797ecc5ae724a6c5a1a9/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee8e7a9b846686148b8797ecc5ae724a6c5a1a9/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs?ref=7ee8e7a9b846686148b8797ecc5ae724a6c5a1a9", "patch": "@@ -1,6 +1,9 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n-use rustc_lint_defs::Applicability;\n+// use clippy_utils::is_integer_const;\n+use clippy_utils::consts::{miri_to_const, Constant};\n+use rustc_errors::Applicability;\n+use rustc_hir::{Item, ItemKind, TyKind, VariantData};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -36,38 +39,55 @@ declare_lint_pass!(TrailingZeroSizedArrayWithoutReprC => [TRAILING_ZERO_SIZED_AR\n // TODO: Register the lint pass in `clippy_lints/src/lib.rs`,\n //       e.g. store.register_early_pass(||\n // Box::new(trailing_zero_sized_array_without_repr_c::TrailingZeroSizedArrayWithoutReprC));\n+// DONE!\n \n-impl EarlyLintPass for TrailingZeroSizedArrayWithoutReprC {\n-    fn check_struct_def(&mut self, cx: &EarlyContext<'_>, data: &rustc_ast::VariantData) {\n-        if is_struct_with_trailing_zero_sized_array(cx, data) && !has_repr_c(cx, data) {\n-            span_lint_and_sugg(\n-                cx,\n-                todo!(),\n-                todo!(),\n-                todo!(),\n-                \"try\",\n-                \"`#[repr(C)]`\".to_string(),\n-                Applicability::MachineApplicable,\n-            )\n+impl<'tcx> LateLintPass<'tcx> for TrailingZeroSizedArrayWithoutReprC {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n+        if is_struct_with_trailing_zero_sized_array(cx, item)\n+        /* && !has_repr_c(cx, item) */\n+        {\n+            // span_lint_and_sugg(\n+            //     cx,\n+            //     todo!(),\n+            //     todo!(),\n+            //     todo!(),\n+            //     \"try\",\n+            //     \"`#[repr(C)]`\".to_string(),\n+            //     Applicability::MachineApplicable,\n+            // );\n+            // println!(\"consider yourself linted \ud83d\ude0e\");\n         }\n     }\n }\n \n-fn is_struct_with_trailing_zero_sized_array(cx: &EarlyContext<'_>, data: &rustc_ast::VariantData) -> bool {\n+fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) -> bool {\n+    dbg!(item.ident);\n     if_chain! {\n-        if let rustc_ast::ast::VariantData::Struct(field_defs, some_bool_huh) = data;\n+        if let ItemKind::Struct(data, _generics) = &item.kind;\n+        if let VariantData::Struct(field_defs, _) = data;\n         if let Some(last_field) = field_defs.last();\n-        if let rustc_ast::ast::TyKind::Array(_, aconst) = &last_field.ty.kind;\n-        // TODO: if array is zero-sized;\n+        if let TyKind::Array(_, aconst) = last_field.ty.kind;\n+        let aconst_def_id = cx.tcx.hir().body_owner_def_id(aconst.body).to_def_id();\n+        let ty = cx.tcx.type_of(aconst_def_id);\n+        let constant = cx\n+            .tcx\n+            .const_eval_poly(aconst_def_id) // NOTE: maybe const_eval_resolve? seems especially cursed to be using a const expr which resolves to 0 to create a zero-sized array, tho\n+            .ok()\n+            .map(|val| rustc_middle::ty::Const::from_value(cx.tcx, val, ty));\n+        if let Some(Constant::Int(val)) = constant.and_then(miri_to_const);\n+        if val == 0;\n         then {\n-            dbg!(aconst);\n+            eprintln!(\"true\");\n             true\n         } else {\n+            // dbg!(aconst);\n+            eprintln!(\"false\");\n             false\n         }\n     }\n }\n \n-fn has_repr_c(cx: &EarlyContext<'_>, data: &rustc_ast::VariantData) -> bool {\n-    todo!()\n+fn has_repr_c(cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) -> bool {\n+    // todo!()\n+    true\n }"}, {"sha": "5f844f16ba1034d2c97d88c683eba4bf77744fe9", "filename": "tests/ui/trailing_zero_sized_array_without_repr_c.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7ee8e7a9b846686148b8797ecc5ae724a6c5a1a9/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee8e7a9b846686148b8797ecc5ae724a6c5a1a9/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.rs?ref=7ee8e7a9b846686148b8797ecc5ae724a6c5a1a9", "patch": "@@ -20,4 +20,30 @@ struct GenericArrayType<T> {\n     last: [T; 0],\n }\n \n+struct SizedArray {\n+    field: i32,\n+    last: [usize; 1],\n+}\n+\n+const ZERO: usize = 0;\n+struct ZeroSizedFromExternalConst {\n+    field: i32,\n+    last: [usize; ZERO],\n+}\n+\n+const ONE: usize = 1;\n+struct NonZeroSizedFromExternalConst {\n+    field: i32,\n+    last: [usize; ONE],\n+}\n+\n+#[allow(clippy::eq_op)] // lmao im impressed\n+const fn compute_zero() -> usize {\n+    (4 + 6) - (2 * 5)\n+}\n+struct UsingFunction {\n+    field: i32,\n+    last: [usize; compute_zero()],\n+}\n+\n fn main() {}"}]}