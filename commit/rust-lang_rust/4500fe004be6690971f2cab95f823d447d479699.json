{"sha": "4500fe004be6690971f2cab95f823d447d479699", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MDBmZTAwNGJlNjY5MDk3MWYyY2FiOTVmODIzZDQ0N2Q0Nzk2OTk=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-05-29T17:22:01Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-05-29T17:22:01Z"}, "message": "Refactored DFS to be much cleaner. Added continue after noting that borrow is out of scope at location.", "tree": {"sha": "c965d70f0c622baeb9c6b959c7ec6e28c39262f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c965d70f0c622baeb9c6b959c7ec6e28c39262f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4500fe004be6690971f2cab95f823d447d479699", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlsNjDkACgkQAXYLT59T\n8VTjzQ//bCtxOznpouKAkNUMfbzKT5DqICclrv6AU1qlHYCsCJVrWh/M07X94Y7C\n4iR8WFzMuxji2zEWs9BNOKNEqVc1IrxHPEwDnxmlfzwV0SVnQ4Pf8NZfk37kkVSM\nXaqnpYIeNwAjmzj+qSSWLU5rz+/bCrUzq7t/1fhC4A0yOU4Zh0AvCjSSsuUEkY/k\nPgDe/WubPPF8KkuTcGOjkIWv8rJ8Va/ncHtHjVhZZKz0hywWGj1jYpfkirRbBqvU\ngMUsS+zzwgPzcYByZPeDuVbtWnJsQXmwrYeHMm05kw5Bep+LC9BnFyqCmau76bUL\notakGIV5KEKGSxwoUYsILfObsmkDV5aaf+gvBkClauRqUZyNhrLplOzlkwMEQSPK\nMyyk3zInPmhiEfoB/ZEVDMaxG3ntZcT9SpHkrRXfJcDw5vPpR5xSvF1SmoePmHAo\nkWrGkoUXNxsLZXmwxLnaGMiFkl2XDBNT+88v9oCa0yc/wksl4AK1XjD22gQGJtLr\naZ78LpXt3+UmDzn0KQuxvSuJyePfS/CaQESptmorQtEKPK/8t+t33tLlFSdIKwFe\n2roouCoPtZYBEig2HQlWzWhTQJBbJgNDG4DG5wCq1S/JB+Bd3bit/jW7PypcvMhn\nD48VtDgChuVEqbhZQZbQiFfUdpZkP7RnJoYrPrf3rJi594ahLzs=\n=vbyW\n-----END PGP SIGNATURE-----", "payload": "tree c965d70f0c622baeb9c6b959c7ec6e28c39262f5\nparent 24ee5069134e6ee6b88487f229cd05e383e1a314\nauthor David Wood <david@davidtw.co> 1527614521 +0100\ncommitter David Wood <david@davidtw.co> 1527614521 +0100\n\nRefactored DFS to be much cleaner. Added continue after noting that borrow is out of scope at location.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4500fe004be6690971f2cab95f823d447d479699", "html_url": "https://github.com/rust-lang/rust/commit/4500fe004be6690971f2cab95f823d447d479699", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4500fe004be6690971f2cab95f823d447d479699/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24ee5069134e6ee6b88487f229cd05e383e1a314", "url": "https://api.github.com/repos/rust-lang/rust/commits/24ee5069134e6ee6b88487f229cd05e383e1a314", "html_url": "https://github.com/rust-lang/rust/commit/24ee5069134e6ee6b88487f229cd05e383e1a314"}], "stats": {"total": 126, "additions": 27, "deletions": 99}, "files": [{"sha": "af6eb517b1e5858f1b1592269364ff44fe7d0af6", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 27, "deletions": 99, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/4500fe004be6690971f2cab95f823d447d479699/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4500fe004be6690971f2cab95f823d447d479699/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=4500fe004be6690971f2cab95f823d447d479699", "patch": "@@ -15,13 +15,13 @@ use rustc;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::middle::region;\n-use rustc::mir::{self, Location, Place, Mir, TerminatorKind};\n+use rustc::mir::{self, Location, Place, Mir};\n use rustc::ty::TyCtxt;\n use rustc::ty::{RegionKind, RegionVid};\n use rustc::ty::RegionKind::ReScope;\n \n use rustc_data_structures::bitslice::BitwiseOperator;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_set::IdxSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::sync::Lrc;\n@@ -60,104 +60,33 @@ fn precompute_borrows_out_of_scope<'a, 'tcx>(\n     borrow_index: BorrowIndex,\n     borrow_region: RegionVid,\n     location: Location,\n-    visited_locations: &mut Vec<Location>\n ) {\n-    // Check if we have already visited this location and skip\n-    // it if we have - avoids infinite loops.\n-    if visited_locations.contains(&location) { return; }\n-    visited_locations.push(location.clone());\n-\n-    // Next, add the borrow index to the current location's vector if the region does\n-    // not contain the point at that location (or create a new vector if required).\n-    if !regioncx.region_contains_point(borrow_region, location) {\n-        borrows_out_of_scope_at_location\n-            .entry(location.clone())\n-            .and_modify(|m| m.push(borrow_index))\n-            .or_insert(vec![ borrow_index ]);\n-    }\n+    // Keep track of places we've locations to check and locations that we have checked.\n+    let mut stack = vec![ location ];\n+    let mut visited = FxHashSet();\n+    visited.insert(location);\n+\n+    while let Some(location) = stack.pop() {\n+        // If region does not contain a point at the location, then add to list and skip\n+        // successor locations.\n+        if !regioncx.region_contains_point(borrow_region, location) {\n+            borrows_out_of_scope_at_location\n+                .entry(location)\n+                .or_insert(vec![])\n+                .push(borrow_index);\n+            continue;\n+        }\n \n-    let bb_data = &mir[location.block];\n-    // If we are past the last statement, then check the terminator\n-    // to determine which location to proceed to.\n-    if location.statement_index == bb_data.statements.len() {\n+        // Add successors to locations to visit, if not visited before.\n+        let bb_data = &mir[location.block];\n         if let Some(ref terminator) = bb_data.terminator {\n-            match terminator.kind {\n-                TerminatorKind::Goto { target } |\n-                TerminatorKind::FalseEdges { real_target: target, .. } |\n-                TerminatorKind::FalseUnwind { real_target: target, .. } => {\n-                    precompute_borrows_out_of_scope(\n-                        mir, regioncx, borrows_out_of_scope_at_location,\n-                        borrow_index, borrow_region, target.start_location(),\n-                        visited_locations\n-                    );\n-                },\n-                TerminatorKind::SwitchInt { ref targets, .. } => {\n-                    for block in targets {\n-                        precompute_borrows_out_of_scope(\n-                            mir, regioncx, borrows_out_of_scope_at_location,\n-                            borrow_index, borrow_region, block.start_location(),\n-                            visited_locations\n-                        );\n-                    }\n-                },\n-                TerminatorKind::Drop { target, unwind, .. } |\n-                TerminatorKind::DropAndReplace { target, unwind, .. } => {\n-                    precompute_borrows_out_of_scope(\n-                        mir, regioncx, borrows_out_of_scope_at_location,\n-                        borrow_index, borrow_region, target.start_location(),\n-                        visited_locations\n-                    );\n-\n-                    if let Some(unwind_block) = unwind {\n-                        precompute_borrows_out_of_scope(\n-                            mir, regioncx, borrows_out_of_scope_at_location,\n-                            borrow_index, borrow_region, unwind_block.start_location(),\n-                            visited_locations\n-                        );\n-                    }\n-                },\n-                TerminatorKind::Call { ref destination, cleanup, .. } => {\n-                    if let Some((_, block)) = destination  {\n-                        precompute_borrows_out_of_scope(\n-                            mir, regioncx, borrows_out_of_scope_at_location,\n-                            borrow_index, borrow_region, block.start_location(),\n-                            visited_locations\n-                        );\n-                    }\n-\n-                    if let Some(block) = cleanup  {\n-                        precompute_borrows_out_of_scope(\n-                            mir, regioncx, borrows_out_of_scope_at_location,\n-                            borrow_index, borrow_region, block.start_location(),\n-                            visited_locations\n-                        );\n-                    }\n-                },\n-                TerminatorKind::Assert { target, cleanup, .. } |\n-                TerminatorKind::Yield { resume: target, drop: cleanup, .. } => {\n-                    precompute_borrows_out_of_scope(\n-                        mir, regioncx, borrows_out_of_scope_at_location,\n-                        borrow_index, borrow_region, target.start_location(),\n-                        visited_locations\n-                    );\n-\n-                    if let Some(block) = cleanup  {\n-                        precompute_borrows_out_of_scope(\n-                            mir, regioncx, borrows_out_of_scope_at_location,\n-                            borrow_index, borrow_region, block.start_location(),\n-                            visited_locations\n-                        );\n-                    }\n-                },\n-                _ => {},\n-            };\n-        };\n-    // If we're not on the last statement, then go to the next\n-    // statement in this block.\n-    } else {\n-        precompute_borrows_out_of_scope(mir, regioncx, borrows_out_of_scope_at_location,\n-                                        borrow_index, borrow_region,\n-                                        location.successor_within_block(), visited_locations);\n+            for block in terminator.successors() {\n+                let loc = block.start_location();\n+                if visited.insert(loc) {\n+                    stack.push(loc);\n+                }\n+            }\n+        }\n     }\n }\n \n@@ -182,8 +111,7 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n \n             precompute_borrows_out_of_scope(mir, &nonlexical_regioncx,\n                                             &mut borrows_out_of_scope_at_location,\n-                                            borrow_index, borrow_region, location,\n-                                            &mut Vec::new());\n+                                            borrow_index, borrow_region, location);\n         }\n \n         Borrows {"}]}