{"sha": "a3dc5f95aa06b26a056f67cdc5e8438e80e8394c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzZGM1Zjk1YWEwNmIyNmEwNTZmNjdjZGM1ZTg0MzhlODBlODM5NGM=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-08-26T20:50:24Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-08-29T18:27:40Z"}, "message": "incr.comp.: Make path's of session directories slightly shorter.\n\nBy using \"s-\" instead of \"sess-\" as a prefix and encoding numbers as base36 instead of base16.", "tree": {"sha": "0b970d0e2249a669a9ddf50f8a28b99c0c0a54be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b970d0e2249a669a9ddf50f8a28b99c0c0a54be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3dc5f95aa06b26a056f67cdc5e8438e80e8394c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3dc5f95aa06b26a056f67cdc5e8438e80e8394c", "html_url": "https://github.com/rust-lang/rust/commit/a3dc5f95aa06b26a056f67cdc5e8438e80e8394c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3dc5f95aa06b26a056f67cdc5e8438e80e8394c/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b67f57afdd80e75c93c4ae49e12b8bb16d209916", "url": "https://api.github.com/repos/rust-lang/rust/commits/b67f57afdd80e75c93c4ae49e12b8bb16d209916", "html_url": "https://github.com/rust-lang/rust/commit/b67f57afdd80e75c93c4ae49e12b8bb16d209916"}], "stats": {"total": 113, "additions": 75, "deletions": 38}, "files": [{"sha": "809e1324c1efe53fc63544e01c3be071300bb58d", "filename": "src/librustc_incremental/persist/fs.rs", "status": "modified", "additions": 75, "deletions": 38, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/a3dc5f95aa06b26a056f67cdc5e8438e80e8394c/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3dc5f95aa06b26a056f67cdc5e8438e80e8394c/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs?ref=a3dc5f95aa06b26a056f67cdc5e8438e80e8394c", "patch": "@@ -45,7 +45,7 @@\n //!    that are consistent with the state of the source code it was compiled\n //!    from, with no need to change them ever again. At this point, the compiler\n //!    finalizes and \"publishes\" its private session directory by renaming it\n-//!    from \"sess-{timestamp}-{random}-working\" to \"sess-{timestamp}-{SVH}\".\n+//!    from \"s-{timestamp}-{random}-working\" to \"s-{timestamp}-{SVH}\".\n //! 6. At this point the \"old\" session directory that we copied our data from\n //!    at the beginning of the session has become obsolete because we have just\n //!    published a more current version. Thus the compiler will delete it.\n@@ -201,7 +201,7 @@ pub fn prepare_session_directory(tcx: TyCtxt) -> Result<bool, ()> {\n     loop {\n         // Generate a session directory of the form:\n         //\n-        // {incr-comp-dir}/{crate-name-and-disambiguator}/sess-{timestamp}-{random}-working\n+        // {incr-comp-dir}/{crate-name-and-disambiguator}/s-{timestamp}-{random}-working\n         let session_dir = generate_session_dir_path(&crate_dir);\n         debug!(\"session-dir: {}\", session_dir.display());\n \n@@ -265,7 +265,7 @@ pub fn prepare_session_directory(tcx: TyCtxt) -> Result<bool, ()> {\n \n \n /// This function finalizes and thus 'publishes' the session directory by\n-/// renaming it to `sess-{timestamp}-{svh}` and releasing the file lock.\n+/// renaming it to `s-{timestamp}-{svh}` and releasing the file lock.\n /// If there have been compilation errors, however, this function will just\n /// delete the presumably invalid session directory.\n pub fn finalize_session_directory(sess: &Session, svh: Svh) {\n@@ -302,7 +302,7 @@ pub fn finalize_session_directory(sess: &Session, svh: Svh) {\n                                                 .to_string_lossy();\n     assert_no_characters_lost(&old_sub_dir_name);\n \n-    // Keep the 'sess-{timestamp}-{random-number}' prefix, but replace the\n+    // Keep the 's-{timestamp}-{random-number}' prefix, but replace the\n     // '-working' part with the SVH of the crate\n     let dash_indices: Vec<_> = old_sub_dir_name.match_indices(\"-\")\n                                                .map(|(idx, _)| idx)\n@@ -313,11 +313,11 @@ pub fn finalize_session_directory(sess: &Session, svh: Svh) {\n              incr_comp_session_dir.display())\n     }\n \n-    // State: \"sess-{timestamp}-{random-number}-\"\n+    // State: \"s-{timestamp}-{random-number}-\"\n     let mut new_sub_dir_name = String::from(&old_sub_dir_name[.. dash_indices[2] + 1]);\n \n     // Append the svh\n-    new_sub_dir_name.push_str(&svh.to_string());\n+    new_sub_dir_name.push_str(&encode_base_36(svh.as_u64()));\n \n     // Create the full path\n     let new_path = incr_comp_session_dir.parent().unwrap().join(new_sub_dir_name);\n@@ -405,14 +405,16 @@ fn copy_files(target_dir: &Path,\n }\n \n /// Generate unique directory path of the form:\n-/// {crate_dir}/sess-{timestamp}-{random-number}-working\n+/// {crate_dir}/s-{timestamp}-{random-number}-working\n fn generate_session_dir_path(crate_dir: &Path) -> PathBuf {\n     let timestamp = timestamp_to_string(SystemTime::now());\n     debug!(\"generate_session_dir_path: timestamp = {}\", timestamp);\n     let random_number = thread_rng().next_u32();\n     debug!(\"generate_session_dir_path: random_number = {}\", random_number);\n \n-    let directory_name = format!(\"sess-{}-{:x}-working\", timestamp, random_number);\n+    let directory_name = format!(\"s-{}-{}-working\", \n+                                  timestamp,\n+                                  encode_base_36(random_number as u64));\n     debug!(\"generate_session_dir_path: directory_name = {}\", directory_name);\n     let directory_path = crate_dir.join(directory_name);\n     debug!(\"generate_session_dir_path: directory_path = {}\", directory_path.display());\n@@ -517,12 +519,12 @@ fn is_finalized(directory_name: &str) -> bool {\n }\n \n fn is_session_directory(directory_name: &str) -> bool {\n-    directory_name.starts_with(\"sess-\") &&\n+    directory_name.starts_with(\"s-\") &&\n     !directory_name.ends_with(LOCK_FILE_EXT)\n }\n \n fn is_session_directory_lock_file(file_name: &str) -> bool {\n-    file_name.starts_with(\"sess-\") && file_name.ends_with(LOCK_FILE_EXT)\n+    file_name.starts_with(\"s-\") && file_name.ends_with(LOCK_FILE_EXT)\n }\n \n fn extract_timestamp_from_session_dir(directory_name: &str)\n@@ -541,15 +543,31 @@ fn extract_timestamp_from_session_dir(directory_name: &str)\n     string_to_timestamp(&directory_name[dash_indices[0]+1 .. dash_indices[1]])\n }\n \n+const BASE_36: &'static [u8] = b\"0123456789abcdefghijklmnopqrstuvwxyz\";\n+\n+fn encode_base_36(mut n: u64) -> String {\n+    let mut s = Vec::with_capacity(13);\n+    loop {\n+        s.push(BASE_36[(n % 36) as usize]);\n+        n /= 36;\n+\n+        if n == 0 {\n+            break;\n+        }\n+    }\n+    s.reverse();\n+    String::from_utf8(s).unwrap()\n+}\n+\n fn timestamp_to_string(timestamp: SystemTime) -> String {\n     let duration = timestamp.duration_since(UNIX_EPOCH).unwrap();\n     let micros = duration.as_secs() * 1_000_000 +\n                 (duration.subsec_nanos() as u64) / 1000;\n-    format!(\"{:x}\", micros)\n+    encode_base_36(micros)\n }\n \n fn string_to_timestamp(s: &str) -> Result<SystemTime, ()> {\n-    let micros_since_unix_epoch = u64::from_str_radix(s, 16);\n+    let micros_since_unix_epoch = u64::from_str_radix(s, 36);\n \n     if micros_since_unix_epoch.is_err() {\n         return Err(())\n@@ -591,7 +609,8 @@ pub fn find_metadata_hashes_for(tcx: TyCtxt, cnum: ast::CrateNum) -> Option<Path\n         }\n     };\n \n-    let target_svh = tcx.sess.cstore.crate_hash(cnum).to_string();\n+    let target_svh = tcx.sess.cstore.crate_hash(cnum);\n+    let target_svh = encode_base_36(target_svh.as_u64());\n \n     let sub_dir = find_metadata_hashes_iter(&target_svh, dir_entries.filter_map(|e| {\n         e.ok().map(|e| e.file_name().to_string_lossy().into_owned())\n@@ -638,7 +657,7 @@ fn crate_path(sess: &Session,\n     let mut hasher = SipHasher::new();\n     crate_disambiguator.hash(&mut hasher);\n \n-    let crate_name = format!(\"{}-{:x}\", crate_name, hasher.finish());\n+    let crate_name = format!(\"{}-{}\", crate_name, encode_base_36(hasher.finish()));\n     incr_dir.join(crate_name)\n }\n \n@@ -914,27 +933,27 @@ fn test_find_source_directory_in_iter() {\n \n     // Find newest\n     assert_eq!(find_source_directory_in_iter(\n-        vec![PathBuf::from(\"crate-dir/sess-3234-0000-svh\"),\n-             PathBuf::from(\"crate-dir/sess-2234-0000-svh\"),\n-             PathBuf::from(\"crate-dir/sess-1234-0000-svh\")].into_iter(), &already_visited),\n-        Some(PathBuf::from(\"crate-dir/sess-3234-0000-svh\")));\n+        vec![PathBuf::from(\"crate-dir/s-3234-0000-svh\"),\n+             PathBuf::from(\"crate-dir/s-2234-0000-svh\"),\n+             PathBuf::from(\"crate-dir/s-1234-0000-svh\")].into_iter(), &already_visited),\n+        Some(PathBuf::from(\"crate-dir/s-3234-0000-svh\")));\n \n     // Filter out \"-working\"\n     assert_eq!(find_source_directory_in_iter(\n-        vec![PathBuf::from(\"crate-dir/sess-3234-0000-working\"),\n-             PathBuf::from(\"crate-dir/sess-2234-0000-svh\"),\n-             PathBuf::from(\"crate-dir/sess-1234-0000-svh\")].into_iter(), &already_visited),\n-        Some(PathBuf::from(\"crate-dir/sess-2234-0000-svh\")));\n+        vec![PathBuf::from(\"crate-dir/s-3234-0000-working\"),\n+             PathBuf::from(\"crate-dir/s-2234-0000-svh\"),\n+             PathBuf::from(\"crate-dir/s-1234-0000-svh\")].into_iter(), &already_visited),\n+        Some(PathBuf::from(\"crate-dir/s-2234-0000-svh\")));\n \n     // Handle empty\n     assert_eq!(find_source_directory_in_iter(vec![].into_iter(), &already_visited),\n                None);\n \n     // Handle only working\n     assert_eq!(find_source_directory_in_iter(\n-        vec![PathBuf::from(\"crate-dir/sess-3234-0000-working\"),\n-             PathBuf::from(\"crate-dir/sess-2234-0000-working\"),\n-             PathBuf::from(\"crate-dir/sess-1234-0000-working\")].into_iter(), &already_visited),\n+        vec![PathBuf::from(\"crate-dir/s-3234-0000-working\"),\n+             PathBuf::from(\"crate-dir/s-2234-0000-working\"),\n+             PathBuf::from(\"crate-dir/s-1234-0000-working\")].into_iter(), &already_visited),\n         None);\n }\n \n@@ -943,36 +962,36 @@ fn test_find_metadata_hashes_iter()\n {\n     assert_eq!(find_metadata_hashes_iter(\"testsvh2\",\n         vec![\n-            String::from(\"sess-timestamp1-testsvh1\"),\n-            String::from(\"sess-timestamp2-testsvh2\"),\n-            String::from(\"sess-timestamp3-testsvh3\"),\n+            String::from(\"s-timestamp1-testsvh1\"),\n+            String::from(\"s-timestamp2-testsvh2\"),\n+            String::from(\"s-timestamp3-testsvh3\"),\n         ].into_iter()),\n-        Some(OsString::from(\"sess-timestamp2-testsvh2\"))\n+        Some(OsString::from(\"s-timestamp2-testsvh2\"))\n     );\n \n     assert_eq!(find_metadata_hashes_iter(\"testsvh2\",\n         vec![\n-            String::from(\"sess-timestamp1-testsvh1\"),\n-            String::from(\"sess-timestamp2-testsvh2\"),\n+            String::from(\"s-timestamp1-testsvh1\"),\n+            String::from(\"s-timestamp2-testsvh2\"),\n             String::from(\"invalid-name\"),\n         ].into_iter()),\n-        Some(OsString::from(\"sess-timestamp2-testsvh2\"))\n+        Some(OsString::from(\"s-timestamp2-testsvh2\"))\n     );\n \n     assert_eq!(find_metadata_hashes_iter(\"testsvh2\",\n         vec![\n-            String::from(\"sess-timestamp1-testsvh1\"),\n-            String::from(\"sess-timestamp2-testsvh2-working\"),\n-            String::from(\"sess-timestamp3-testsvh3\"),\n+            String::from(\"s-timestamp1-testsvh1\"),\n+            String::from(\"s-timestamp2-testsvh2-working\"),\n+            String::from(\"s-timestamp3-testsvh3\"),\n         ].into_iter()),\n         None\n     );\n \n     assert_eq!(find_metadata_hashes_iter(\"testsvh1\",\n         vec![\n-            String::from(\"sess-timestamp1-random1-working\"),\n-            String::from(\"sess-timestamp2-random2-working\"),\n-            String::from(\"sess-timestamp3-random3-working\"),\n+            String::from(\"s-timestamp1-random1-working\"),\n+            String::from(\"s-timestamp2-random2-working\"),\n+            String::from(\"s-timestamp3-random3-working\"),\n         ].into_iter()),\n         None\n     );\n@@ -986,3 +1005,21 @@ fn test_find_metadata_hashes_iter()\n         None\n     );\n }\n+ \n+#[test]\n+fn test_encode_base_36() {\n+    fn test(n: u64) {\n+        assert_eq!(Ok(n), u64::from_str_radix(&encode_base_36(n)[..], 36));\n+    }\n+\n+    test(0);\n+    test(1);\n+    test(35);\n+    test(36);\n+    test(37);\n+    test(u64::max_value());\n+\n+    for i in 0 .. 1_000 {\n+        test(i * 983);\n+    }\n+}"}]}