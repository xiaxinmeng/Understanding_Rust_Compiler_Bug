{"sha": "115447a65dd421728d02478b9132d4a2ac3578c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNTQ0N2E2NWRkNDIxNzI4ZDAyNDc4YjkxMzJkNGEyYWMzNTc4YzA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-07-10T20:56:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-10T20:56:39Z"}, "message": "Rollup merge of #52149 - willmo:transparent-atomics, r=cramertj\n\nAdd #[repr(transparent)] to Atomic* types\n\nThis allows them to be used in `#[repr(C)]` structs without warnings. Since rust-lang/rfcs#1649 and rust-lang/rust#35603 they are already documented to have \"the same in-memory representation as\" their corresponding primitive types. This just makes that explicit.\n\nThis was briefly part of #51395, but was controversial and therefore dropped. But it turns out that it's essentially already documented (which I had forgotten).", "tree": {"sha": "2f7758f7ea45462389d28a11c68db22130386178", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f7758f7ea45462389d28a11c68db22130386178"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/115447a65dd421728d02478b9132d4a2ac3578c0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbRR2HCRBK7hj4Ov3rIwAAdHIIAIu5Iv8ngW6Tqgdi3C32IcPY\nvxwsKxsHMvl/T0cVGg4U6OWKeou1XdDNqQVNtcChRh+fOcsMpl7Nbj+N+S96pBYS\nQeibZLWpIsywse7kky4lFvKR9mNccQC7GP969d9n3x7VhY2xiREqu9aVwdXkrm93\nN0CixA9Y+9Z5Citro8TPjnv8/3gacBvKa7gTZjliRhFvhztVtgAsV0F7D4kTWNiQ\nJm+K1FfllXM7vx01TuCyO4NMImadEw0AlMP4HAqgFxLc/r/AeuA6SGHWaMSWWPHd\nVH+Wa85iVsuTTWl0DhHdCdy0ZGTMFNQwM9SO8dEh3zVIu6ze5Omn4L7ze+z96Ag=\n=LKhF\n-----END PGP SIGNATURE-----\n", "payload": "tree 2f7758f7ea45462389d28a11c68db22130386178\nparent bfac782b691e61c20168aa473708dd16aa4a5eda\nparent e769deca998479c7b78931af45a26c6c822c74f7\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1531256199 +0200\ncommitter GitHub <noreply@github.com> 1531256199 +0200\n\nRollup merge of #52149 - willmo:transparent-atomics, r=cramertj\n\nAdd #[repr(transparent)] to Atomic* types\n\nThis allows them to be used in `#[repr(C)]` structs without warnings. Since rust-lang/rfcs#1649 and rust-lang/rust#35603 they are already documented to have \"the same in-memory representation as\" their corresponding primitive types. This just makes that explicit.\n\nThis was briefly part of #51395, but was controversial and therefore dropped. But it turns out that it's essentially already documented (which I had forgotten).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/115447a65dd421728d02478b9132d4a2ac3578c0", "html_url": "https://github.com/rust-lang/rust/commit/115447a65dd421728d02478b9132d4a2ac3578c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/115447a65dd421728d02478b9132d4a2ac3578c0/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfac782b691e61c20168aa473708dd16aa4a5eda", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfac782b691e61c20168aa473708dd16aa4a5eda", "html_url": "https://github.com/rust-lang/rust/commit/bfac782b691e61c20168aa473708dd16aa4a5eda"}, {"sha": "e769deca998479c7b78931af45a26c6c822c74f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e769deca998479c7b78931af45a26c6c822c74f7", "html_url": "https://github.com/rust-lang/rust/commit/e769deca998479c7b78931af45a26c6c822c74f7"}], "stats": {"total": 3, "additions": 3, "deletions": 0}, "files": [{"sha": "1e2b18bf9b038fc83fa0485474db7aecaca1e232", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/115447a65dd421728d02478b9132d4a2ac3578c0/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/115447a65dd421728d02478b9132d4a2ac3578c0/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=115447a65dd421728d02478b9132d4a2ac3578c0", "patch": "@@ -124,6 +124,7 @@ pub fn spin_loop_hint() {\n /// [`bool`]: ../../../std/primitive.bool.html\n #[cfg(target_has_atomic = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[repr(transparent)]\n pub struct AtomicBool {\n     v: UnsafeCell<u8>,\n }\n@@ -147,6 +148,7 @@ unsafe impl Sync for AtomicBool {}\n /// This type has the same in-memory representation as a `*mut T`.\n #[cfg(target_has_atomic = \"ptr\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[repr(transparent)]\n pub struct AtomicPtr<T> {\n     p: UnsafeCell<*mut T>,\n }\n@@ -976,6 +978,7 @@ macro_rules! atomic_int {\n         ///\n         /// [module-level documentation]: index.html\n         #[$stable]\n+        #[repr(transparent)]\n         pub struct $atomic_type {\n             v: UnsafeCell<$int_type>,\n         }"}]}