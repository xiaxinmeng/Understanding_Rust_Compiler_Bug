{"sha": "922310d60fcd2c84c2f2b10ca465538cb160d25d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMjMxMGQ2MGZjZDJjODRjMmYyYjEwY2E0NjU1MzhjYjE2MGQyNWQ=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-30T15:51:26Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-12-04T16:43:21Z"}, "message": "Add tests", "tree": {"sha": "d93f0e14d01b04f924d7dd6ea95c39d0e7f6bd8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d93f0e14d01b04f924d7dd6ea95c39d0e7f6bd8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/922310d60fcd2c84c2f2b10ca465538cb160d25d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/922310d60fcd2c84c2f2b10ca465538cb160d25d", "html_url": "https://github.com/rust-lang/rust/commit/922310d60fcd2c84c2f2b10ca465538cb160d25d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/922310d60fcd2c84c2f2b10ca465538cb160d25d/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "063d74f5d9b4a08b103137405baa076c55df9eae", "url": "https://api.github.com/repos/rust-lang/rust/commits/063d74f5d9b4a08b103137405baa076c55df9eae", "html_url": "https://github.com/rust-lang/rust/commit/063d74f5d9b4a08b103137405baa076c55df9eae"}], "stats": {"total": 346, "additions": 343, "deletions": 3}, "files": [{"sha": "0a8194253a3c099e61b8a6f79c858c4c2f50e328", "filename": "src/test/ui/pattern/usefulness/match-empty-exhaustive_patterns.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/922310d60fcd2c84c2f2b10ca465538cb160d25d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922310d60fcd2c84c2f2b10ca465538cb160d25d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.rs?ref=922310d60fcd2c84c2f2b10ca465538cb160d25d", "patch": "@@ -0,0 +1,46 @@\n+#![feature(never_type)]\n+#![feature(exhaustive_patterns)]\n+#![deny(unreachable_patterns)]\n+enum Foo {}\n+\n+struct NonEmptyStruct(bool);\n+enum NonEmptyEnum1 {\n+    Foo(bool),\n+}\n+enum NonEmptyEnum2 {\n+    Foo(bool),\n+    Bar,\n+}\n+enum NonEmptyEnum5 {\n+    V1, V2, V3, V4, V5,\n+}\n+\n+fn foo(x: Foo) {\n+    match x {} // ok\n+    match x {\n+        _ => {}, //~ ERROR unreachable pattern\n+    }\n+}\n+\n+fn main() {\n+    // `exhaustive_patterns` is not on, so uninhabited branches are not detected as unreachable.\n+    match None::<!> {\n+        None => {}\n+        Some(_) => {} //~ ERROR unreachable pattern\n+    }\n+    match None::<Foo> {\n+        None => {}\n+        Some(_) => {} //~ ERROR unreachable pattern\n+    }\n+\n+    match 0u8 {}\n+    //~^ ERROR type `u8` is non-empty\n+    match NonEmptyStruct(true) {}\n+    //~^ ERROR type `NonEmptyStruct` is non-empty\n+    match NonEmptyEnum1::Foo(true) {}\n+    //~^ ERROR type `NonEmptyEnum1` is non-empty\n+    match NonEmptyEnum2::Foo(true) {}\n+    //~^ ERROR type `NonEmptyEnum2` is non-empty\n+    match NonEmptyEnum5::V1 {}\n+    //~^ ERROR type `NonEmptyEnum5` is non-empty\n+}"}, {"sha": "8d143494026d4863e666ffd27830706739a673e6", "filename": "src/test/ui/pattern/usefulness/match-empty-exhaustive_patterns.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/922310d60fcd2c84c2f2b10ca465538cb160d25d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/922310d60fcd2c84c2f2b10ca465538cb160d25d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty-exhaustive_patterns.stderr?ref=922310d60fcd2c84c2f2b10ca465538cb160d25d", "patch": "@@ -0,0 +1,67 @@\n+error: unreachable pattern\n+  --> $DIR/match-empty-exhaustive_patterns.rs:21:9\n+   |\n+LL |         _ => {},\n+   |         ^\n+   |\n+note: lint level defined here\n+  --> $DIR/match-empty-exhaustive_patterns.rs:3:9\n+   |\n+LL | #![deny(unreachable_patterns)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/match-empty-exhaustive_patterns.rs:29:9\n+   |\n+LL |         Some(_) => {}\n+   |         ^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/match-empty-exhaustive_patterns.rs:33:9\n+   |\n+LL |         Some(_) => {}\n+   |         ^^^^^^^\n+\n+error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n+  --> $DIR/match-empty-exhaustive_patterns.rs:36:11\n+   |\n+LL |     match 0u8 {}\n+   |           ^^^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: type `NonEmptyStruct` is non-empty\n+  --> $DIR/match-empty-exhaustive_patterns.rs:38:11\n+   |\n+LL |     match NonEmptyStruct(true) {}\n+   |           ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: type `NonEmptyEnum1` is non-empty\n+  --> $DIR/match-empty-exhaustive_patterns.rs:40:11\n+   |\n+LL |     match NonEmptyEnum1::Foo(true) {}\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: type `NonEmptyEnum2` is non-empty\n+  --> $DIR/match-empty-exhaustive_patterns.rs:42:11\n+   |\n+LL |     match NonEmptyEnum2::Foo(true) {}\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: type `NonEmptyEnum5` is non-empty\n+  --> $DIR/match-empty-exhaustive_patterns.rs:44:11\n+   |\n+LL |     match NonEmptyEnum5::V1 {}\n+   |           ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "28ebde6c4c173c6d36f0b5e0c605fbc354c7885a", "filename": "src/test/ui/pattern/usefulness/match-empty.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/922310d60fcd2c84c2f2b10ca465538cb160d25d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922310d60fcd2c84c2f2b10ca465538cb160d25d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.rs?ref=922310d60fcd2c84c2f2b10ca465538cb160d25d", "patch": "@@ -0,0 +1,48 @@\n+#![feature(never_type)]\n+#![deny(unreachable_patterns)]\n+enum Foo {}\n+\n+struct NonEmptyStruct(bool); //~ `NonEmptyStruct` defined here\n+enum NonEmptyEnum1 { //~ `NonEmptyEnum1` defined here\n+    Foo(bool), //~ variant not covered\n+}\n+enum NonEmptyEnum2 { //~ `NonEmptyEnum2` defined here\n+    Foo(bool), //~ variant not covered\n+    Bar, //~ variant not covered\n+}\n+enum NonEmptyEnum5 { //~ `NonEmptyEnum5` defined here\n+    V1, V2, V3, V4, V5,\n+}\n+\n+fn foo1(x: Foo) {\n+    match x {} // ok\n+}\n+\n+fn foo2(x: Foo) {\n+    match x {\n+        _ => {}, // FIXME: should be unreachable\n+    }\n+}\n+\n+fn main() {\n+    // `exhaustive_patterns` is not on, so uninhabited branches are not detected as unreachable.\n+    match None::<!> {\n+        None => {}\n+        Some(_) => {}\n+    }\n+    match None::<Foo> {\n+        None => {}\n+        Some(_) => {}\n+    }\n+\n+    match 0u8 {}\n+    //~^ ERROR type `u8` is non-empty\n+    match NonEmptyStruct(true) {}\n+    //~^ ERROR pattern `NonEmptyStruct` of type `NonEmptyStruct` is not handled\n+    match NonEmptyEnum1::Foo(true) {}\n+    //~^ ERROR pattern `Foo` of type `NonEmptyEnum1` is not handled\n+    match NonEmptyEnum2::Foo(true) {}\n+    //~^ ERROR multiple patterns of type `NonEmptyEnum2` are not handled\n+    match NonEmptyEnum5::V1 {}\n+    //~^ ERROR type `NonEmptyEnum5` is non-empty\n+}"}, {"sha": "eb6cfaa61df824a2d5dfe328082060e135db3ae3", "filename": "src/test/ui/pattern/usefulness/match-empty.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/922310d60fcd2c84c2f2b10ca465538cb160d25d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/922310d60fcd2c84c2f2b10ca465538cb160d25d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-empty.stderr?ref=922310d60fcd2c84c2f2b10ca465538cb160d25d", "patch": "@@ -0,0 +1,68 @@\n+error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n+  --> $DIR/match-empty.rs:38:11\n+   |\n+LL |     match 0u8 {}\n+   |           ^^^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: pattern `NonEmptyStruct` of type `NonEmptyStruct` is not handled\n+  --> $DIR/match-empty.rs:40:11\n+   |\n+LL | struct NonEmptyStruct(bool);\n+   | ----------------------------\n+   | |      |\n+   | |      variant not covered\n+   | `NonEmptyStruct` defined here\n+...\n+LL |     match NonEmptyStruct(true) {}\n+   |           ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: pattern `Foo` of type `NonEmptyEnum1` is not handled\n+  --> $DIR/match-empty.rs:42:11\n+   |\n+LL | / enum NonEmptyEnum1 {\n+LL | |     Foo(bool),\n+   | |     --- variant not covered\n+LL | | }\n+   | |_- `NonEmptyEnum1` defined here\n+...\n+LL |       match NonEmptyEnum1::Foo(true) {}\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: multiple patterns of type `NonEmptyEnum2` are not handled\n+  --> $DIR/match-empty.rs:44:11\n+   |\n+LL | / enum NonEmptyEnum2 {\n+LL | |     Foo(bool),\n+   | |     --- variant not covered\n+LL | |     Bar,\n+   | |     --- variant not covered\n+LL | | }\n+   | |_- `NonEmptyEnum2` defined here\n+...\n+LL |       match NonEmptyEnum2::Foo(true) {}\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: type `NonEmptyEnum5` is non-empty\n+  --> $DIR/match-empty.rs:46:11\n+   |\n+LL | / enum NonEmptyEnum5 {\n+LL | |     V1, V2, V3, V4, V5,\n+LL | | }\n+   | |_- `NonEmptyEnum5` defined here\n+...\n+LL |       match NonEmptyEnum5::V1 {}\n+   |             ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "8516bafef9bd9e9f45f03e5cb34da55bc92fd71e", "filename": "src/test/ui/rfc-2008-non-exhaustive/auxiliary/enums.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/922310d60fcd2c84c2f2b10ca465538cb160d25d/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fenums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922310d60fcd2c84c2f2b10ca465538cb160d25d/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fenums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fenums.rs?ref=922310d60fcd2c84c2f2b10ca465538cb160d25d", "patch": "@@ -6,3 +6,6 @@ pub enum NonExhaustiveEnum {\n     Tuple(u32),\n     Struct { field: u32 }\n }\n+\n+#[non_exhaustive]\n+pub enum EmptyNonExhaustiveEnum {}"}, {"sha": "67fa21ab0bc5d50ee1d371bcefbccbfd97f64f2f", "filename": "src/test/ui/rfc-2008-non-exhaustive/enum.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/922310d60fcd2c84c2f2b10ca465538cb160d25d/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922310d60fcd2c84c2f2b10ca465538cb160d25d/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum.rs?ref=922310d60fcd2c84c2f2b10ca465538cb160d25d", "patch": "@@ -1,7 +1,14 @@\n // aux-build:enums.rs\n extern crate enums;\n \n-use enums::NonExhaustiveEnum;\n+use enums::{EmptyNonExhaustiveEnum, NonExhaustiveEnum};\n+\n+fn empty(x: EmptyNonExhaustiveEnum) {\n+    match x {} //~ ERROR type `enums::EmptyNonExhaustiveEnum` is non-empty\n+    match x {\n+        _ => {}, // ok\n+    }\n+}\n \n fn main() {\n     let enum_unit = NonExhaustiveEnum::Unit;\n@@ -13,6 +20,9 @@ fn main() {\n         NonExhaustiveEnum::Struct { .. } => \"third\"\n     };\n \n+    match enum_unit {};\n+    //~^ ERROR non-exhaustive patterns: multiple patterns of type `enums::NonExhaustiveEnum` are not handled [E0004]\n+\n     // Everything below this is expected to compile successfully.\n \n     let enum_unit = NonExhaustiveEnum::Unit;"}, {"sha": "6db1eb16eb4e6fe25c7d21b28859fea9ea30eec6", "filename": "src/test/ui/rfc-2008-non-exhaustive/enum.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/922310d60fcd2c84c2f2b10ca465538cb160d25d/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/922310d60fcd2c84c2f2b10ca465538cb160d25d/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum.stderr?ref=922310d60fcd2c84c2f2b10ca465538cb160d25d", "patch": "@@ -1,11 +1,27 @@\n+error[E0004]: non-exhaustive patterns: type `enums::EmptyNonExhaustiveEnum` is non-empty\n+  --> $DIR/enum.rs:7:11\n+   |\n+LL |     match x {}\n+   |           ^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/enum.rs:9:11\n+  --> $DIR/enum.rs:16:11\n    |\n LL |     match enum_unit {\n    |           ^^^^^^^^^ pattern `_` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error: aborting due to previous error\n+error[E0004]: non-exhaustive patterns: multiple patterns of type `enums::NonExhaustiveEnum` are not handled\n+  --> $DIR/enum.rs:23:11\n+   |\n+LL |     match enum_unit {};\n+   |           ^^^^^^^^^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0004`."}, {"sha": "f605464949448e87e6d97b56a140bcc9950f31e2", "filename": "src/test/ui/rfc-2008-non-exhaustive/enum_same_crate_empty_match.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/922310d60fcd2c84c2f2b10ca465538cb160d25d/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum_same_crate_empty_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922310d60fcd2c84c2f2b10ca465538cb160d25d/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum_same_crate_empty_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum_same_crate_empty_match.rs?ref=922310d60fcd2c84c2f2b10ca465538cb160d25d", "patch": "@@ -0,0 +1,37 @@\n+#![deny(unreachable_patterns)]\n+\n+#[non_exhaustive]\n+pub enum NonExhaustiveEnum {\n+    Unit,\n+    //~^ variant not covered\n+    Tuple(u32),\n+    //~^ variant not covered\n+    Struct { field: u32 }\n+    //~^ variant not covered\n+}\n+\n+pub enum NormalEnum {\n+    Unit,\n+    //~^ variant not covered\n+    Tuple(u32),\n+    //~^ variant not covered\n+    Struct { field: u32 }\n+    //~^ variant not covered\n+}\n+\n+#[non_exhaustive]\n+pub enum EmptyNonExhaustiveEnum {}\n+\n+fn empty_non_exhaustive(x: EmptyNonExhaustiveEnum) {\n+    match x {}\n+    match x {\n+        _ => {} // FIXME: should be unreachable\n+    }\n+}\n+\n+fn main() {\n+    match NonExhaustiveEnum::Unit {}\n+    //~^ ERROR multiple patterns of type `NonExhaustiveEnum` are not handled [E0004]\n+    match NormalEnum::Unit {}\n+    //~^ ERROR multiple patterns of type `NormalEnum` are not handled [E0004]\n+}"}, {"sha": "ac6c23e6d64db03b540419dee5bc9066dad84def", "filename": "src/test/ui/rfc-2008-non-exhaustive/enum_same_crate_empty_match.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/922310d60fcd2c84c2f2b10ca465538cb160d25d/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum_same_crate_empty_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/922310d60fcd2c84c2f2b10ca465538cb160d25d/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum_same_crate_empty_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum_same_crate_empty_match.stderr?ref=922310d60fcd2c84c2f2b10ca465538cb160d25d", "patch": "@@ -0,0 +1,45 @@\n+error[E0004]: non-exhaustive patterns: multiple patterns of type `NonExhaustiveEnum` are not handled\n+  --> $DIR/enum_same_crate_empty_match.rs:33:11\n+   |\n+LL | / pub enum NonExhaustiveEnum {\n+LL | |     Unit,\n+   | |     ---- variant not covered\n+LL | |\n+LL | |     Tuple(u32),\n+   | |     ----- variant not covered\n+LL | |\n+LL | |     Struct { field: u32 }\n+   | |     ------ variant not covered\n+LL | |\n+LL | | }\n+   | |_- `NonExhaustiveEnum` defined here\n+...\n+LL |       match NonExhaustiveEnum::Unit {}\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: multiple patterns of type `NormalEnum` are not handled\n+  --> $DIR/enum_same_crate_empty_match.rs:35:11\n+   |\n+LL | / pub enum NormalEnum {\n+LL | |     Unit,\n+   | |     ---- variant not covered\n+LL | |\n+LL | |     Tuple(u32),\n+   | |     ----- variant not covered\n+LL | |\n+LL | |     Struct { field: u32 }\n+   | |     ------ variant not covered\n+LL | |\n+LL | | }\n+   | |_- `NormalEnum` defined here\n+...\n+LL |       match NormalEnum::Unit {}\n+   |             ^^^^^^^^^^^^^^^^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0004`."}]}