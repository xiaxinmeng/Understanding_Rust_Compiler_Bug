{"sha": "555492e427035caf4a0849580b16130ede6dcf5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NTQ5MmU0MjcwMzVjYWY0YTA4NDk1ODBiMTYxMzBlZGU2ZGNmNWI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-25T15:17:06Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-30T18:26:15Z"}, "message": "port alt to dvec", "tree": {"sha": "90007fc18a444eb1dc81ddbc0a2430fec8cdc500", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90007fc18a444eb1dc81ddbc0a2430fec8cdc500"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/555492e427035caf4a0849580b16130ede6dcf5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/555492e427035caf4a0849580b16130ede6dcf5b", "html_url": "https://github.com/rust-lang/rust/commit/555492e427035caf4a0849580b16130ede6dcf5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/555492e427035caf4a0849580b16130ede6dcf5b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79b3dedac3f50ec22d9fcab887f29d03ceec9406", "url": "https://api.github.com/repos/rust-lang/rust/commits/79b3dedac3f50ec22d9fcab887f29d03ceec9406", "html_url": "https://github.com/rust-lang/rust/commit/79b3dedac3f50ec22d9fcab887f29d03ceec9406"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "cee2032ed0d502defa9e4a56872655566a600bc8", "filename": "src/librustsyntax/ast_util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/555492e427035caf4a0849580b16130ede6dcf5b/src%2Flibrustsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555492e427035caf4a0849580b16130ede6dcf5b/src%2Flibrustsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fast_util.rs?ref=555492e427035caf4a0849580b16130ede6dcf5b", "patch": "@@ -1,25 +1,25 @@\n import codemap::span;\n import ast::*;\n \n-fn spanned<T: copy>(lo: uint, hi: uint, t: T) -> spanned<T> {\n+pure fn spanned<T: copy>(lo: uint, hi: uint, t: T) -> spanned<T> {\n     respan(mk_sp(lo, hi), t)\n }\n \n-fn respan<T: copy>(sp: span, t: T) -> spanned<T> {\n+pure fn respan<T: copy>(sp: span, t: T) -> spanned<T> {\n     {node: t, span: sp}\n }\n \n-fn dummy_spanned<T: copy>(t: T) -> spanned<T> {\n+pure fn dummy_spanned<T: copy>(t: T) -> spanned<T> {\n     respan(dummy_sp(), t)\n }\n \n /* assuming that we're not in macro expansion */\n-fn mk_sp(lo: uint, hi: uint) -> span {\n+pure fn mk_sp(lo: uint, hi: uint) -> span {\n     {lo: lo, hi: hi, expn_info: none}\n }\n \n // make this a const, once the compiler supports it\n-fn dummy_sp() -> span { ret mk_sp(0u, 0u); }\n+pure fn dummy_sp() -> span { ret mk_sp(0u, 0u); }\n \n fn path_name(p: @path) -> str { path_name_i(p.idents) }\n "}, {"sha": "3cac9f3685ec6888da786ea70f80523c6b6d656a", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/555492e427035caf4a0849580b16130ede6dcf5b/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555492e427035caf4a0849580b16130ede6dcf5b/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=555492e427035caf4a0849580b16130ede6dcf5b", "patch": "@@ -13,6 +13,7 @@ import syntax::print::pprust::pat_to_str;\n import back::abi;\n import resolve::def_map;\n import std::map::hashmap;\n+import dvec::{dvec, extensions};\n \n import common::*;\n \n@@ -236,12 +237,12 @@ fn enter_uniq(dm: def_map, m: match, col: uint, val: ValueRef) -> match {\n }\n \n fn get_options(ccx: @crate_ctxt, m: match, col: uint) -> [opt] {\n-    fn add_to_set(tcx: ty::ctxt, &set: [opt], val: opt) {\n-        for vec::each(set) {|l| if opt_eq(tcx, l, val) { ret; } }\n-        set += [val];\n+    fn add_to_set(tcx: ty::ctxt, &&set: dvec<opt>, val: opt) {\n+        if set.any({|l| opt_eq(tcx, l, val)}) {ret;}\n+        set.push(val);\n     }\n \n-    let mut found = [];\n+    let found = dvec();\n     for vec::each(m) {|br|\n         let cur = br.pats[col];\n         if pat_is_variant(ccx.tcx.def_map, cur) {\n@@ -256,7 +257,7 @@ fn get_options(ccx: @crate_ctxt, m: match, col: uint) -> [opt] {\n             }\n         }\n     }\n-    ret found;\n+    ret vec::from_mut(dvec::unwrap(found));\n }\n \n fn extract_variant_args(bcx: block, pat_id: ast::node_id,"}]}