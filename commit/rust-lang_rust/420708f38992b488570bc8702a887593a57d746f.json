{"sha": "420708f38992b488570bc8702a887593a57d746f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMDcwOGYzODk5MmI0ODg1NzBiYzg3MDJhODg3NTkzYTU3ZDc0NmY=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-11T09:34:06Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-11T17:54:53Z"}, "message": "sync::deque: port to the new allocator API", "tree": {"sha": "1c770fc1391000678a3e13d371132b5ac916a6f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c770fc1391000678a3e13d371132b5ac916a6f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/420708f38992b488570bc8702a887593a57d746f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/420708f38992b488570bc8702a887593a57d746f", "html_url": "https://github.com/rust-lang/rust/commit/420708f38992b488570bc8702a887593a57d746f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/420708f38992b488570bc8702a887593a57d746f/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7da24ea1a9466ef3af3e86da65fcccd8f17f1ae5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7da24ea1a9466ef3af3e86da65fcccd8f17f1ae5", "html_url": "https://github.com/rust-lang/rust/commit/7da24ea1a9466ef3af3e86da65fcccd8f17f1ae5"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "30b95ffb34f69f42875dc1cb267db775562f1f58", "filename": "src/libstd/sync/deque.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/420708f38992b488570bc8702a887593a57d746f/src%2Flibstd%2Fsync%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/420708f38992b488570bc8702a887593a57d746f/src%2Flibstd%2Fsync%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fdeque.rs?ref=420708f38992b488570bc8702a887593a57d746f", "patch": "@@ -51,8 +51,7 @@\n use clone::Clone;\n use iter::{range, Iterator};\n use kinds::Send;\n-use libc;\n-use mem;\n+use mem::{forget, min_align_of, size_of, transmute};\n use ops::Drop;\n use option::{Option, Some, None};\n use owned::Box;\n@@ -62,6 +61,7 @@ use slice::ImmutableVector;\n use sync::arc::UnsafeArc;\n use sync::atomics::{AtomicInt, AtomicPtr, SeqCst};\n use unstable::sync::Exclusive;\n+use rt::heap::{allocate, deallocate};\n use vec::Vec;\n \n // Once the queue is less than 1/K full, then it will be downsized. Note that\n@@ -229,7 +229,7 @@ impl<T: Send> Deque<T> {\n         Deque {\n             bottom: AtomicInt::new(0),\n             top: AtomicInt::new(0),\n-            array: AtomicPtr::new(unsafe { mem::transmute(buf) }),\n+            array: AtomicPtr::new(unsafe { transmute(buf) }),\n             pool: pool,\n         }\n     }\n@@ -271,7 +271,7 @@ impl<T: Send> Deque<T> {\n             return Some(data);\n         } else {\n             self.bottom.store(t + 1, SeqCst);\n-            mem::forget(data); // someone else stole this value\n+            forget(data); // someone else stole this value\n             return None;\n         }\n     }\n@@ -293,7 +293,7 @@ impl<T: Send> Deque<T> {\n         if self.top.compare_and_swap(t, t + 1, SeqCst) == t {\n             Data(data)\n         } else {\n-            mem::forget(data); // someone else stole this value\n+            forget(data); // someone else stole this value\n             Abort\n         }\n     }\n@@ -314,15 +314,15 @@ impl<T: Send> Deque<T> {\n     // continue to be read after we flag this buffer for reclamation.\n     unsafe fn swap_buffer(&mut self, b: int, old: *mut Buffer<T>,\n                           buf: Buffer<T>) -> *mut Buffer<T> {\n-        let newbuf: *mut Buffer<T> = mem::transmute(box buf);\n+        let newbuf: *mut Buffer<T> = transmute(box buf);\n         self.array.store(newbuf, SeqCst);\n         let ss = (*newbuf).size();\n         self.bottom.store(b + ss, SeqCst);\n         let t = self.top.load(SeqCst);\n         if self.top.compare_and_swap(t, t + ss, SeqCst) != t {\n             self.bottom.store(b, SeqCst);\n         }\n-        self.pool.free(mem::transmute(old));\n+        self.pool.free(transmute(old));\n         return newbuf;\n     }\n }\n@@ -339,15 +339,19 @@ impl<T: Send> Drop for Deque<T> {\n         for i in range(t, b) {\n             let _: T = unsafe { (*a).get(i) };\n         }\n-        self.pool.free(unsafe { mem::transmute(a) });\n+        self.pool.free(unsafe { transmute(a) });\n     }\n }\n \n+#[inline]\n+fn buffer_alloc_size<T>(log_size: int) -> uint {\n+    (1 << log_size) * size_of::<T>()\n+}\n+\n impl<T: Send> Buffer<T> {\n     unsafe fn new(log_size: int) -> Buffer<T> {\n-        let size = (1 << log_size) * mem::size_of::<T>();\n-        let buffer = libc::malloc(size as libc::size_t);\n-        assert!(!buffer.is_null());\n+        let size = buffer_alloc_size::<T>(log_size);\n+        let buffer = allocate(size, min_align_of::<T>());\n         Buffer {\n             storage: buffer as *T,\n             log_size: log_size,\n@@ -372,7 +376,7 @@ impl<T: Send> Buffer<T> {\n     unsafe fn put(&mut self, i: int, t: T) {\n         let ptr = self.storage.offset(i & self.mask());\n         ptr::copy_nonoverlapping_memory(ptr as *mut T, &t as *T, 1);\n-        mem::forget(t);\n+        forget(t);\n     }\n \n     // Again, unsafe because this has incredibly dubious ownership violations.\n@@ -390,7 +394,8 @@ impl<T: Send> Buffer<T> {\n impl<T: Send> Drop for Buffer<T> {\n     fn drop(&mut self) {\n         // It is assumed that all buffers are empty on drop.\n-        unsafe { libc::free(self.storage as *mut libc::c_void) }\n+        let size = buffer_alloc_size::<T>(self.log_size);\n+        unsafe { deallocate(self.storage as *mut u8, size, min_align_of::<T>()) }\n     }\n }\n \n@@ -606,8 +611,7 @@ mod tests {\n             let s = s.clone();\n             let unique_box = box AtomicUint::new(0);\n             let thread_box = unsafe {\n-                *mem::transmute::<&Box<AtomicUint>,\n-                                   **mut AtomicUint>(&unique_box)\n+                *mem::transmute::<&Box<AtomicUint>, **mut AtomicUint>(&unique_box)\n             };\n             (Thread::start(proc() {\n                 unsafe {"}]}