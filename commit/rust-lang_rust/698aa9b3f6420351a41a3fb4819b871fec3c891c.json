{"sha": "698aa9b3f6420351a41a3fb4819b871fec3c891c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5OGFhOWIzZjY0MjAzNTFhNDFhM2ZiNDgxOWI4NzFmZWMzYzg5MWM=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-04T10:50:40Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-04T10:50:40Z"}, "message": "Merge #924\n\n924: Improve show syntax tree r=matklad a=vipentti\n\nThis implements some of the features discussed in #820. \r\n\r\nYou can now select a range of syntax in a file and then use \"Show Syntax Tree\" to show its syntax. In addition you can select a range of syntax that is inside a string (typically test cases) and show its syntax as well.\r\n\r\nPrevious behavior is still available, simply use \"Show Syntax Tree\" without a selection, and you get the live updating syntax tree. Additionally now the live updating tree will update when the active file is changed. Previously you had to type something in the new file to get the syntax tree to update.\n\nCo-authored-by: Ville Penttinen <villem.penttinen@gmail.com>", "tree": {"sha": "c782b2b62dcfaa253b8ed55824772ea7bf8fa16d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c782b2b62dcfaa253b8ed55824772ea7bf8fa16d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/698aa9b3f6420351a41a3fb4819b871fec3c891c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/698aa9b3f6420351a41a3fb4819b871fec3c891c", "html_url": "https://github.com/rust-lang/rust/commit/698aa9b3f6420351a41a3fb4819b871fec3c891c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/698aa9b3f6420351a41a3fb4819b871fec3c891c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "17aaece6b39c2fb525be0eccce4626fc622e8236", "url": "https://api.github.com/repos/rust-lang/rust/commits/17aaece6b39c2fb525be0eccce4626fc622e8236", "html_url": "https://github.com/rust-lang/rust/commit/17aaece6b39c2fb525be0eccce4626fc622e8236"}, {"sha": "1ef2c0613134633ef0fe0d515f7d416e482f07fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ef2c0613134633ef0fe0d515f7d416e482f07fb", "html_url": "https://github.com/rust-lang/rust/commit/1ef2c0613134633ef0fe0d515f7d416e482f07fb"}], "stats": {"total": 466, "additions": 423, "deletions": 43}, "files": [{"sha": "b8a4adbceb0d2d777dc28cace933a469b926fec5", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/698aa9b3f6420351a41a3fb4819b871fec3c891c/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698aa9b3f6420351a41a3fb4819b871fec3c891c/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=698aa9b3f6420351a41a3fb4819b871fec3c891c", "patch": "@@ -32,13 +32,14 @@ mod references;\n mod impls;\n mod assists;\n mod diagnostics;\n+mod syntax_tree;\n \n #[cfg(test)]\n mod marks;\n \n use std::sync::Arc;\n \n-use ra_syntax::{SourceFile, TreeArc, TextRange, TextUnit, AstNode};\n+use ra_syntax::{SourceFile, TreeArc, TextRange, TextUnit};\n use ra_text_edit::TextEdit;\n use ra_db::{\n     SourceDatabase, CheckCanceled,\n@@ -245,8 +246,8 @@ impl Analysis {\n \n     /// Returns a syntax tree represented as `String`, for debug purposes.\n     // FIXME: use a better name here.\n-    pub fn syntax_tree(&self, file_id: FileId) -> String {\n-        self.db.parse(file_id).syntax().debug_dump()\n+    pub fn syntax_tree(&self, file_id: FileId, text_range: Option<TextRange>) -> String {\n+        syntax_tree::syntax_tree(&self.db, file_id, text_range)\n     }\n \n     /// Returns an edit to remove all newlines in the range, cleaning up minor"}, {"sha": "bbe9222b42f1be3605c04e0e9d18dd866794d836", "filename": "crates/ra_ide_api/src/syntax_tree.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/698aa9b3f6420351a41a3fb4819b871fec3c891c/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698aa9b3f6420351a41a3fb4819b871fec3c891c/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs?ref=698aa9b3f6420351a41a3fb4819b871fec3c891c", "patch": "@@ -0,0 +1,87 @@\n+use ra_db::SourceDatabase;\r\n+use crate::db::RootDatabase;\r\n+use ra_syntax::{\r\n+    SourceFile, SyntaxNode, TextRange, AstNode,\r\n+    algo::{self, visit::{visitor, Visitor}}, ast::{self, AstToken}\r\n+};\r\n+\r\n+pub use ra_db::FileId;\r\n+\r\n+pub(crate) fn syntax_tree(\r\n+    db: &RootDatabase,\r\n+    file_id: FileId,\r\n+    text_range: Option<TextRange>,\r\n+) -> String {\r\n+    if let Some(text_range) = text_range {\r\n+        let file = db.parse(file_id);\r\n+        let node = algo::find_covering_node(file.syntax(), text_range);\r\n+\r\n+        if let Some(tree) = syntax_tree_for_string(node, text_range) {\r\n+            return tree;\r\n+        }\r\n+\r\n+        node.debug_dump()\r\n+    } else {\r\n+        db.parse(file_id).syntax().debug_dump()\r\n+    }\r\n+}\r\n+\r\n+/// Attempts parsing the selected contents of a string literal\r\n+/// as rust syntax and returns its syntax tree\r\n+fn syntax_tree_for_string(node: &SyntaxNode, text_range: TextRange) -> Option<String> {\r\n+    // When the range is inside a string\r\n+    // we'll attempt parsing it as rust syntax\r\n+    // to provide the syntax tree of the contents of the string\r\n+    visitor()\r\n+        .visit(|node: &ast::String| syntax_tree_for_token(node, text_range))\r\n+        .visit(|node: &ast::RawString| syntax_tree_for_token(node, text_range))\r\n+        .accept(node)?\r\n+}\r\n+\r\n+fn syntax_tree_for_token<T: AstToken>(node: &T, text_range: TextRange) -> Option<String> {\r\n+    // Range of the full node\r\n+    let node_range = node.syntax().range();\r\n+    let text = node.text().to_string();\r\n+\r\n+    // We start at some point inside the node\r\n+    // Either we have selected the whole string\r\n+    // or our selection is inside it\r\n+    let start = text_range.start() - node_range.start();\r\n+\r\n+    // how many characters we have selected\r\n+    let len = text_range.len().to_usize();\r\n+\r\n+    let node_len = node_range.len().to_usize();\r\n+\r\n+    let start = start.to_usize();\r\n+\r\n+    // We want to cap our length\r\n+    let len = len.min(node_len);\r\n+\r\n+    // Ensure our slice is inside the actual string\r\n+    let end = if start + len < text.len() { start + len } else { text.len() - start };\r\n+\r\n+    let text = &text[start..end];\r\n+\r\n+    // Remove possible extra string quotes from the start\r\n+    // and the end of the string\r\n+    let text = text\r\n+        .trim_start_matches('r')\r\n+        .trim_start_matches('#')\r\n+        .trim_start_matches('\"')\r\n+        .trim_end_matches('#')\r\n+        .trim_end_matches('\"')\r\n+        .trim()\r\n+        // Remove custom markers\r\n+        .replace(\"<|>\", \"\");\r\n+\r\n+    let parsed = SourceFile::parse(&text);\r\n+\r\n+    // If the \"file\" parsed without errors,\r\n+    // return its syntax\r\n+    if parsed.errors().is_empty() {\r\n+        return Some(parsed.syntax().debug_dump());\r\n+    }\r\n+\r\n+    None\r\n+}\r"}, {"sha": "0f0766f621408e5bab834843ad710ae116c38c4e", "filename": "crates/ra_ide_api/tests/test/main.rs", "status": "modified", "additions": 253, "deletions": 1, "changes": 254, "blob_url": "https://github.com/rust-lang/rust/blob/698aa9b3f6420351a41a3fb4819b871fec3c891c/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698aa9b3f6420351a41a3fb4819b871fec3c891c/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs?ref=698aa9b3f6420351a41a3fb4819b871fec3c891c", "patch": "@@ -1,6 +1,6 @@\n use insta::assert_debug_snapshot_matches;\n use ra_ide_api::{\n-    mock_analysis::{single_file, single_file_with_position, MockAnalysis},\n+    mock_analysis::{single_file, single_file_with_position, single_file_with_range, MockAnalysis},\n     AnalysisChange, CrateGraph, Edition::Edition2018, Query, NavigationTarget,\n     ReferenceSearchResult,\n };\n@@ -138,3 +138,255 @@ mod foo {\n     assert_eq!(s.name(), \"FooInner\");\n     assert_eq!(s.container_name(), Some(&SmolStr::new(\"foo\")));\n }\n+\n+#[test]\n+fn test_syntax_tree_without_range() {\n+    // Basic syntax\n+    let (analysis, file_id) = single_file(r#\"fn foo() {}\"#);\n+    let syn = analysis.syntax_tree(file_id, None);\n+\n+    assert_eq!(\n+        syn.trim(),\n+        r#\"\n+SOURCE_FILE@[0; 11)\n+  FN_DEF@[0; 11)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 8)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+    WHITESPACE@[8; 9)\n+    BLOCK@[9; 11)\n+      L_CURLY@[9; 10)\n+      R_CURLY@[10; 11)\n+    \"#\n+        .trim()\n+    );\n+\n+    let (analysis, file_id) = single_file(\n+        r#\"\n+fn test() {\n+    assert!(\"\n+    fn foo() {\n+    }\n+    \", \"\");\n+}\"#\n+        .trim(),\n+    );\n+    let syn = analysis.syntax_tree(file_id, None);\n+\n+    assert_eq!(\n+        syn.trim(),\n+        r#\"\n+SOURCE_FILE@[0; 60)\n+  FN_DEF@[0; 60)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 7)\n+      IDENT@[3; 7) \"test\"\n+    PARAM_LIST@[7; 9)\n+      L_PAREN@[7; 8)\n+      R_PAREN@[8; 9)\n+    WHITESPACE@[9; 10)\n+    BLOCK@[10; 60)\n+      L_CURLY@[10; 11)\n+      WHITESPACE@[11; 16)\n+      EXPR_STMT@[16; 58)\n+        MACRO_CALL@[16; 57)\n+          PATH@[16; 22)\n+            PATH_SEGMENT@[16; 22)\n+              NAME_REF@[16; 22)\n+                IDENT@[16; 22) \"assert\"\n+          EXCL@[22; 23)\n+          TOKEN_TREE@[23; 57)\n+            L_PAREN@[23; 24)\n+            STRING@[24; 52)\n+            COMMA@[52; 53)\n+            WHITESPACE@[53; 54)\n+            STRING@[54; 56)\n+            R_PAREN@[56; 57)\n+        SEMI@[57; 58)\n+      WHITESPACE@[58; 59)\n+      R_CURLY@[59; 60)\n+    \"#\n+        .trim()\n+    );\n+}\n+\n+#[test]\n+fn test_syntax_tree_with_range() {\n+    let (analysis, range) = single_file_with_range(r#\"<|>fn foo() {}<|>\"#.trim());\n+    let syn = analysis.syntax_tree(range.file_id, Some(range.range));\n+\n+    assert_eq!(\n+        syn.trim(),\n+        r#\"\n+FN_DEF@[0; 11)\n+  FN_KW@[0; 2)\n+  WHITESPACE@[2; 3)\n+  NAME@[3; 6)\n+    IDENT@[3; 6) \"foo\"\n+  PARAM_LIST@[6; 8)\n+    L_PAREN@[6; 7)\n+    R_PAREN@[7; 8)\n+  WHITESPACE@[8; 9)\n+  BLOCK@[9; 11)\n+    L_CURLY@[9; 10)\n+    R_CURLY@[10; 11)\n+    \"#\n+        .trim()\n+    );\n+\n+    let (analysis, range) = single_file_with_range(\n+        r#\"fn test() {\n+    <|>assert!(\"\n+    fn foo() {\n+    }\n+    \", \"\");<|>\n+}\"#\n+        .trim(),\n+    );\n+    let syn = analysis.syntax_tree(range.file_id, Some(range.range));\n+\n+    assert_eq!(\n+        syn.trim(),\n+        r#\"\n+EXPR_STMT@[16; 58)\n+  MACRO_CALL@[16; 57)\n+    PATH@[16; 22)\n+      PATH_SEGMENT@[16; 22)\n+        NAME_REF@[16; 22)\n+          IDENT@[16; 22) \"assert\"\n+    EXCL@[22; 23)\n+    TOKEN_TREE@[23; 57)\n+      L_PAREN@[23; 24)\n+      STRING@[24; 52)\n+      COMMA@[52; 53)\n+      WHITESPACE@[53; 54)\n+      STRING@[54; 56)\n+      R_PAREN@[56; 57)\n+  SEMI@[57; 58)\n+    \"#\n+        .trim()\n+    );\n+}\n+\n+#[test]\n+fn test_syntax_tree_inside_string() {\n+    let (analysis, range) = single_file_with_range(\n+        r#\"fn test() {\n+    assert!(\"\n+<|>fn foo() {\n+}<|>\n+fn bar() {\n+}\n+    \", \"\");\n+}\"#\n+        .trim(),\n+    );\n+    let syn = analysis.syntax_tree(range.file_id, Some(range.range));\n+    assert_eq!(\n+        syn.trim(),\n+        r#\"\n+SOURCE_FILE@[0; 12)\n+  FN_DEF@[0; 12)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 8)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+    WHITESPACE@[8; 9)\n+    BLOCK@[9; 12)\n+      L_CURLY@[9; 10)\n+      WHITESPACE@[10; 11)\n+      R_CURLY@[11; 12)\n+\"#\n+        .trim()\n+    );\n+\n+    // With a raw string\n+    let (analysis, range) = single_file_with_range(\n+        r###\"fn test() {\n+    assert!(r#\"\n+<|>fn foo() {\n+}<|>\n+fn bar() {\n+}\n+    \"#, \"\");\n+}\"###\n+            .trim(),\n+    );\n+    let syn = analysis.syntax_tree(range.file_id, Some(range.range));\n+    assert_eq!(\n+        syn.trim(),\n+        r#\"\n+SOURCE_FILE@[0; 12)\n+  FN_DEF@[0; 12)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 8)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+    WHITESPACE@[8; 9)\n+    BLOCK@[9; 12)\n+      L_CURLY@[9; 10)\n+      WHITESPACE@[10; 11)\n+      R_CURLY@[11; 12)\n+\"#\n+        .trim()\n+    );\n+\n+    // With a raw string\n+    let (analysis, range) = single_file_with_range(\n+        r###\"fn test() {\n+    assert!(r<|>#\"\n+fn foo() {\n+}\n+fn bar() {\n+}\"<|>#, \"\");\n+}\"###\n+            .trim(),\n+    );\n+    let syn = analysis.syntax_tree(range.file_id, Some(range.range));\n+    assert_eq!(\n+        syn.trim(),\n+        r#\"\n+SOURCE_FILE@[0; 25)\n+  FN_DEF@[0; 12)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 8)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+    WHITESPACE@[8; 9)\n+    BLOCK@[9; 12)\n+      L_CURLY@[9; 10)\n+      WHITESPACE@[10; 11)\n+      R_CURLY@[11; 12)\n+  WHITESPACE@[12; 13)\n+  FN_DEF@[13; 25)\n+    FN_KW@[13; 15)\n+    WHITESPACE@[15; 16)\n+    NAME@[16; 19)\n+      IDENT@[16; 19) \"bar\"\n+    PARAM_LIST@[19; 21)\n+      L_PAREN@[19; 20)\n+      R_PAREN@[20; 21)\n+    WHITESPACE@[21; 22)\n+    BLOCK@[22; 25)\n+      L_CURLY@[22; 23)\n+      WHITESPACE@[23; 24)\n+      R_CURLY@[24; 25)\n+\n+\"#\n+        .trim()\n+    );\n+}"}, {"sha": "89e96a33af59210660910a9b842a05a9d08b66f9", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/698aa9b3f6420351a41a3fb4819b871fec3c891c/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698aa9b3f6420351a41a3fb4819b871fec3c891c/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=698aa9b3f6420351a41a3fb4819b871fec3c891c", "patch": "@@ -32,7 +32,9 @@ pub fn handle_analyzer_status(world: ServerWorld, _: ()) -> Result<String> {\n \n pub fn handle_syntax_tree(world: ServerWorld, params: req::SyntaxTreeParams) -> Result<String> {\n     let id = params.text_document.try_conv_with(&world)?;\n-    let res = world.analysis().syntax_tree(id);\n+    let line_index = world.analysis().file_line_index(id);\n+    let text_range = params.range.map(|p| p.conv_with(&line_index));\n+    let res = world.analysis().syntax_tree(id, text_range);\n     Ok(res)\n }\n "}, {"sha": "5c589f9691f6ca317ecd24a1025d6fc7ea26e146", "filename": "crates/ra_lsp_server/src/req.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/698aa9b3f6420351a41a3fb4819b871fec3c891c/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698aa9b3f6420351a41a3fb4819b871fec3c891c/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Freq.rs?ref=698aa9b3f6420351a41a3fb4819b871fec3c891c", "patch": "@@ -39,6 +39,7 @@ impl Request for SyntaxTree {\n #[serde(rename_all = \"camelCase\")]\n pub struct SyntaxTreeParams {\n     pub text_document: TextDocumentIdentifier,\n+    pub range: Option<Range>,\n }\n \n pub enum ExtendSelection {}"}, {"sha": "fda411810a361dc27f4176d0bc325d591d53f09e", "filename": "editors/code/package.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/698aa9b3f6420351a41a3fb4819b871fec3c891c/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/698aa9b3f6420351a41a3fb4819b871fec3c891c/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=698aa9b3f6420351a41a3fb4819b871fec3c891c", "patch": "@@ -75,7 +75,7 @@\n         \"commands\": [\n             {\n                 \"command\": \"rust-analyzer.syntaxTree\",\n-                \"title\": \"Show syntax tree for current file\",\n+                \"title\": \"Show Syntax Tree\",\n                 \"category\": \"Rust Analyzer\"\n             },\n             {"}, {"sha": "2f50fe14b3b7fdf075caf36114c0d9802f0abcb7", "filename": "editors/code/src/commands/syntaxTree.ts", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/698aa9b3f6420351a41a3fb4819b871fec3c891c/editors%2Fcode%2Fsrc%2Fcommands%2FsyntaxTree.ts", "raw_url": "https://github.com/rust-lang/rust/raw/698aa9b3f6420351a41a3fb4819b871fec3c891c/editors%2Fcode%2Fsrc%2Fcommands%2FsyntaxTree.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2FsyntaxTree.ts?ref=698aa9b3f6420351a41a3fb4819b871fec3c891c", "patch": "@@ -1,11 +1,11 @@\n import * as vscode from 'vscode';\n-import { TextDocumentIdentifier } from 'vscode-languageclient';\n+import { Range, TextDocumentIdentifier } from 'vscode-languageclient';\n \n import { Server } from '../server';\n \n export const syntaxTreeUri = vscode.Uri.parse('rust-analyzer://syntaxtree');\n \n-export class TextDocumentContentProvider\n+export class SyntaxTreeContentProvider\n     implements vscode.TextDocumentContentProvider {\n     public eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n     public syntaxTree: string = 'Not available';\n@@ -17,8 +17,21 @@ export class TextDocumentContentProvider\n         if (editor == null) {\n             return '';\n         }\n+\n+        let range: Range | undefined;\n+\n+        // When the range based query is enabled we take the range of the selection\n+        if (uri.query === 'range=true') {\n+            range = editor.selection.isEmpty\n+                ? undefined\n+                : Server.client.code2ProtocolConverter.asRange(\n+                      editor.selection\n+                  );\n+        }\n+\n         const request: SyntaxTreeParams = {\n-            textDocument: { uri: editor.document.uri.toString() }\n+            textDocument: { uri: editor.document.uri.toString() },\n+            range\n         };\n         return Server.client.sendRequest<SyntaxTreeResult>(\n             'rust-analyzer/syntaxTree',\n@@ -33,18 +46,31 @@ export class TextDocumentContentProvider\n \n interface SyntaxTreeParams {\n     textDocument: TextDocumentIdentifier;\n+    range?: Range;\n }\n \n type SyntaxTreeResult = string;\n \n // Opens the virtual file that will show the syntax tree\n //\n // The contents of the file come from the `TextDocumentContentProvider`\n-export async function handle() {\n-    const document = await vscode.workspace.openTextDocument(syntaxTreeUri);\n-    return vscode.window.showTextDocument(\n-        document,\n-        vscode.ViewColumn.Two,\n-        true\n-    );\n+export function createHandle(provider: SyntaxTreeContentProvider) {\n+    return async () => {\n+        const editor = vscode.window.activeTextEditor;\n+        const rangeEnabled = !!(editor && !editor.selection.isEmpty);\n+\n+        const uri = rangeEnabled\n+            ? vscode.Uri.parse(`${syntaxTreeUri.toString()}?range=true`)\n+            : syntaxTreeUri;\n+\n+        const document = await vscode.workspace.openTextDocument(uri);\n+\n+        provider.eventEmitter.fire(uri);\n+\n+        return vscode.window.showTextDocument(\n+            document,\n+            vscode.ViewColumn.Two,\n+            true\n+        );\n+    };\n }"}, {"sha": "64be562250e18fb2bb40eb5b70b48b9d0b445c46", "filename": "editors/code/src/events/change_active_text_editor.ts", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/698aa9b3f6420351a41a3fb4819b871fec3c891c/editors%2Fcode%2Fsrc%2Fevents%2Fchange_active_text_editor.ts", "raw_url": "https://github.com/rust-lang/rust/raw/698aa9b3f6420351a41a3fb4819b871fec3c891c/editors%2Fcode%2Fsrc%2Fevents%2Fchange_active_text_editor.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fevents%2Fchange_active_text_editor.ts?ref=698aa9b3f6420351a41a3fb4819b871fec3c891c", "patch": "@@ -1,23 +1,32 @@\n import { TextEditor } from 'vscode';\n import { TextDocumentIdentifier } from 'vscode-languageclient';\n \n+import {\n+    SyntaxTreeContentProvider,\n+    syntaxTreeUri\n+} from '../commands/syntaxTree';\n import { Decoration } from '../highlighting';\n import { Server } from '../server';\n \n-export async function handle(editor: TextEditor | undefined) {\n-    if (\n-        !Server.config.highlightingOn ||\n-        !editor ||\n-        editor.document.languageId !== 'rust'\n-    ) {\n-        return;\n-    }\n-    const params: TextDocumentIdentifier = {\n-        uri: editor.document.uri.toString()\n+export function makeHandler(syntaxTreeProvider: SyntaxTreeContentProvider) {\n+    return async function handle(editor: TextEditor | undefined) {\n+        if (!editor || editor.document.languageId !== 'rust') {\n+            return;\n+        }\n+\n+        syntaxTreeProvider.eventEmitter.fire(syntaxTreeUri);\n+\n+        if (!Server.config.highlightingOn) {\n+            return;\n+        }\n+\n+        const params: TextDocumentIdentifier = {\n+            uri: editor.document.uri.toString()\n+        };\n+        const decorations = await Server.client.sendRequest<Decoration[]>(\n+            'rust-analyzer/decorationsRequest',\n+            params\n+        );\n+        Server.highlighter.setHighlights(editor, decorations);\n     };\n-    const decorations = await Server.client.sendRequest<Decoration[]>(\n-        'rust-analyzer/decorationsRequest',\n-        params\n-    );\n-    Server.highlighter.setHighlights(editor, decorations);\n }"}, {"sha": "89488bc61ef0912f6cf3afb1699fca59b2a2fe50", "filename": "editors/code/src/events/change_text_document.ts", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/698aa9b3f6420351a41a3fb4819b871fec3c891c/editors%2Fcode%2Fsrc%2Fevents%2Fchange_text_document.ts", "raw_url": "https://github.com/rust-lang/rust/raw/698aa9b3f6420351a41a3fb4819b871fec3c891c/editors%2Fcode%2Fsrc%2Fevents%2Fchange_text_document.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fevents%2Fchange_text_document.ts?ref=698aa9b3f6420351a41a3fb4819b871fec3c891c", "patch": "@@ -1,20 +1,18 @@\n import * as vscode from 'vscode';\n \n import {\n-    syntaxTreeUri,\n-    TextDocumentContentProvider\n+    SyntaxTreeContentProvider,\n+    syntaxTreeUri\n } from '../commands/syntaxTree';\n \n-export function createHandler(\n-    textDocumentContentProvider: TextDocumentContentProvider\n-) {\n+export function createHandler(syntaxTreeProvider: SyntaxTreeContentProvider) {\n     return (event: vscode.TextDocumentChangeEvent) => {\n         const doc = event.document;\n         if (doc.languageId !== 'rust') {\n             return;\n         }\n         afterLs(() => {\n-            textDocumentContentProvider.eventEmitter.fire(syntaxTreeUri);\n+            syntaxTreeProvider.eventEmitter.fire(syntaxTreeUri);\n         });\n     };\n }"}, {"sha": "941beba180733704e450cf9b62e60c9e5d39d9fe", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/698aa9b3f6420351a41a3fb4819b871fec3c891c/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/698aa9b3f6420351a41a3fb4819b871fec3c891c/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=698aa9b3f6420351a41a3fb4819b871fec3c891c", "patch": "@@ -2,7 +2,7 @@ import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n \n import * as commands from './commands';\n-import { TextDocumentContentProvider } from './commands/syntaxTree';\n+import { SyntaxTreeContentProvider } from './commands/syntaxTree';\n import * as events from './events';\n import * as notifications from './notifications';\n import { Server } from './server';\n@@ -52,7 +52,6 @@ export function activate(context: vscode.ExtensionContext) {\n     registerCommand('rust-analyzer.collectGarbage', () =>\n         Server.client.sendRequest<null>('rust-analyzer/collectGarbage', null)\n     );\n-    registerCommand('rust-analyzer.syntaxTree', commands.syntaxTree.handle);\n     registerCommand(\n         'rust-analyzer.extendSelection',\n         commands.extendSelection.handle\n@@ -95,22 +94,27 @@ export function activate(context: vscode.ExtensionContext) {\n             notifications.publishDecorations.handle\n         ]\n     ];\n+    const syntaxTreeContentProvider = new SyntaxTreeContentProvider();\n \n     // The events below are plain old javascript events, triggered and handled by vscode\n     vscode.window.onDidChangeActiveTextEditor(\n-        events.changeActiveTextEditor.handle\n+        events.changeActiveTextEditor.makeHandler(syntaxTreeContentProvider)\n     );\n \n-    const textDocumentContentProvider = new TextDocumentContentProvider();\n     disposeOnDeactivation(\n         vscode.workspace.registerTextDocumentContentProvider(\n             'rust-analyzer',\n-            textDocumentContentProvider\n+            syntaxTreeContentProvider\n         )\n     );\n \n+    registerCommand(\n+        'rust-analyzer.syntaxTree',\n+        commands.syntaxTree.createHandle(syntaxTreeContentProvider)\n+    );\n+\n     vscode.workspace.onDidChangeTextDocument(\n-        events.changeTextDocument.createHandler(textDocumentContentProvider),\n+        events.changeTextDocument.createHandler(syntaxTreeContentProvider),\n         null,\n         context.subscriptions\n     );"}]}