{"sha": "01f0814a2a7db7d93b4cb90b74242b082861e674", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZjA4MTRhMmE3ZGI3ZDkzYjRjYjkwYjc0MjQyYjA4Mjg2MWU2NzQ=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-02-01T21:55:20Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-02-05T09:23:40Z"}, "message": "Stabilize use_nested_groups", "tree": {"sha": "ea9d2141f3faa3f1092cdf67bcbf2096a37e0f40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea9d2141f3faa3f1092cdf67bcbf2096a37e0f40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01f0814a2a7db7d93b4cb90b74242b082861e674", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCAAGBQJaeCKdAAoJEOjBBC3RYkUZdl0H/2H70XY/bdoeiwm5jdUrA1BK\nuWF/UB0Ou1kCfx0rR1vwt6QoayrIwRph8CDtd1R3E3Pq9qokpj9GJPTi/DQM/sPc\nOc8JztcaUmAL0M1zgXD0vWLbmsiAavKLLTs/K75lbojJ80v+FV7wWXoQJm0yLvk0\nKD43lkJ/ET6wdqmP82d/9COoU0htb6fUR3gynrkIa/FTeaOWBldQmytXcbSdzL6j\nw2WWafFOwDL6UgYvHspalK54n55+mX5dB0OzHp2BIzQYDT3gRIWu3UqHF3f6ms9c\nK6BnuB87UHyrrgof2+qPdyVWNG2voT4t9zdlzE3oyPFuTolEReH5fr5+JTNj5hk=\n=3UmG\n-----END PGP SIGNATURE-----", "payload": "tree ea9d2141f3faa3f1092cdf67bcbf2096a37e0f40\nparent 07ea2604075d6f896addce0e6949c7cf25dd3715\nauthor Pietro Albini <pietro@pietroalbini.org> 1517522120 +0100\ncommitter Pietro Albini <pietro@pietroalbini.org> 1517822620 +0100\n\nStabilize use_nested_groups\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01f0814a2a7db7d93b4cb90b74242b082861e674", "html_url": "https://github.com/rust-lang/rust/commit/01f0814a2a7db7d93b4cb90b74242b082861e674", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01f0814a2a7db7d93b4cb90b74242b082861e674/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07ea2604075d6f896addce0e6949c7cf25dd3715", "url": "https://api.github.com/repos/rust-lang/rust/commits/07ea2604075d6f896addce0e6949c7cf25dd3715", "html_url": "https://github.com/rust-lang/rust/commit/07ea2604075d6f896addce0e6949c7cf25dd3715"}], "stats": {"total": 185, "additions": 4, "deletions": 181}, "files": [{"sha": "47b635bad736ff80af85b7ce71f0cef7b748c7e6", "filename": "src/doc/unstable-book/src/language-features/use-nested-groups.md", "status": "removed", "additions": 0, "deletions": 90, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/07ea2604075d6f896addce0e6949c7cf25dd3715/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fuse-nested-groups.md", "raw_url": "https://github.com/rust-lang/rust/raw/07ea2604075d6f896addce0e6949c7cf25dd3715/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fuse-nested-groups.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fuse-nested-groups.md?ref=07ea2604075d6f896addce0e6949c7cf25dd3715", "patch": "@@ -1,90 +0,0 @@\n-# `use_nested_groups`\n-\n-The tracking issue for this feature is: [#44494]\n-\n-[#44494]: https://github.com/rust-lang/rust/issues/44494\n-\n-------------------------\n-\n-The `use_nested_groups` feature allows you to import multiple items from a\n-complex module tree easily, by nesting different imports in the same\n-declaration. For example:\n-\n-```rust\n-#![feature(use_nested_groups)]\n-# #![allow(unused_imports, dead_code)]\n-#\n-# mod foo {\n-#     pub mod bar {\n-#         pub type Foo = ();\n-#     }\n-#     pub mod baz {\n-#         pub mod quux {\n-#             pub type Bar = ();\n-#         }\n-#     }\n-# }\n-\n-use foo::{\n-    bar::{self, Foo},\n-    baz::{*, quux::Bar},\n-};\n-#\n-# fn main() {}\n-```\n-\n-## Snippet for the book's new features appendix\n-\n-When stabilizing, add this to\n-`src/doc/book/second-edition/src/appendix-07-newest-features.md`:\n-\n-### Nested groups in `use` declarations\n-\n-If you have a complex module tree with many different submodules and you need\n-to import a few items from each one, it might be useful to group all the\n-imports in the same declaration to keep your code clean and avoid repeating the\n-base modules' name.\n-\n-The `use` declaration supports nesting to help you in those cases, both with\n-simple imports and glob ones. For example this snippets imports `bar`, `Foo`,\n-all the items in `baz` and `Bar`:\n-\n-```rust\n-# #![feature(use_nested_groups)]\n-# #![allow(unused_imports, dead_code)]\n-#\n-# mod foo {\n-#     pub mod bar {\n-#         pub type Foo = ();\n-#     }\n-#     pub mod baz {\n-#         pub mod quux {\n-#             pub type Bar = ();\n-#         }\n-#     }\n-# }\n-#\n-use foo::{\n-    bar::{self, Foo},\n-    baz::{*, quux::Bar},\n-};\n-#\n-# fn main() {}\n-```\n-\n-## Updated reference\n-\n-When stabilizing, replace the shortcut list in\n-`src/doc/reference/src/items/use-declarations.md` with this updated one:\n-\n-* Simultaneously binding a list of paths with a common prefix, using the\n-  glob-like brace syntax `use a::b::{c, d, e::f, g::h::i};`\n-* Simultaneously binding a list of paths with a common prefix and their common\n-  parent module, using the `self` keyword, such as `use a::b::{self, c, d::e};`\n-* Rebinding the target name as a new local name, using the syntax `use p::q::r\n-  as x;`. This can also be used with the last two features:\n-  `use a::b::{self as ab, c as abc}`.\n-* Binding all paths matching a given prefix, using the asterisk wildcard syntax\n-  `use a::b::*;`.\n-* Nesting groups of the previous features multiple times, such as\n-  `use a::b::{self as ab, c d::{*, e::f}};`"}, {"sha": "9c6520cd874a8ec87bdc2a3af0bd44b160adef4e", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/01f0814a2a7db7d93b4cb90b74242b082861e674/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f0814a2a7db7d93b4cb90b74242b082861e674/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=01f0814a2a7db7d93b4cb90b74242b082861e674", "patch": "@@ -423,9 +423,6 @@ declare_features! (\n     // In-band lifetime bindings (e.g. `fn foo(x: &'a u8) -> &'a u8`)\n     (active, in_band_lifetimes, \"1.23.0\", Some(44524)),\n \n-    // Nested groups in `use` (RFC 2128)\n-    (active, use_nested_groups, \"1.23.0\", Some(44494)),\n-\n     // generic associated types (RFC 1598)\n     (active, generic_associated_types, \"1.23.0\", Some(44265)),\n \n@@ -544,6 +541,8 @@ declare_features! (\n     (accepted, repr_align, \"1.24.0\", Some(33626)),\n     // allow '|' at beginning of match arms (RFC 1925)\n     (accepted, match_beginning_vert, \"1.25.0\", Some(44101)),\n+    // Nested groups in `use` (RFC 2128)\n+    (accepted, use_nested_groups, \"1.25.0\", Some(44494)),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must\n@@ -1805,29 +1804,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         visit::walk_path(self, path);\n     }\n \n-    fn visit_use_tree(&mut self, use_tree: &'a ast::UseTree, id: NodeId, nested: bool) {\n-        if nested {\n-            match use_tree.kind {\n-                ast::UseTreeKind::Simple(_) => {\n-                    if use_tree.prefix.segments.len() != 1 {\n-                        gate_feature_post!(&self, use_nested_groups, use_tree.span,\n-                                           \"paths in `use` groups are experimental\");\n-                    }\n-                }\n-                ast::UseTreeKind::Glob => {\n-                    gate_feature_post!(&self, use_nested_groups, use_tree.span,\n-                                       \"glob imports in `use` groups are experimental\");\n-                }\n-                ast::UseTreeKind::Nested(_) => {\n-                    gate_feature_post!(&self, use_nested_groups, use_tree.span,\n-                                       \"nested groups in `use` are experimental\");\n-                }\n-            }\n-        }\n-\n-        visit::walk_use_tree(self, use_tree, id);\n-    }\n-\n     fn visit_vis(&mut self, vis: &'a ast::Visibility) {\n         if let ast::Visibility::Crate(span, ast::CrateSugar::JustCrate) = *vis {\n             gate_feature_post!(&self, crate_visibility_modifier, span,"}, {"sha": "fe052f2f47ffda103b01b199ac3f6a1b3e044bac", "filename": "src/test/compile-fail/absolute-paths-in-nested-use-groups.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01f0814a2a7db7d93b4cb90b74242b082861e674/src%2Ftest%2Fcompile-fail%2Fabsolute-paths-in-nested-use-groups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f0814a2a7db7d93b4cb90b74242b082861e674/src%2Ftest%2Fcompile-fail%2Fabsolute-paths-in-nested-use-groups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fabsolute-paths-in-nested-use-groups.rs?ref=01f0814a2a7db7d93b4cb90b74242b082861e674", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(use_nested_groups)]\n #![allow(unused_imports)]\n \n mod foo {}"}, {"sha": "22f7f169e298840e9ef7ffb0bdc6e3bd75a9e72d", "filename": "src/test/run-pass/issue-47673.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01f0814a2a7db7d93b4cb90b74242b082861e674/src%2Ftest%2Frun-pass%2Fissue-47673.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f0814a2a7db7d93b4cb90b74242b082861e674/src%2Ftest%2Frun-pass%2Fissue-47673.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-47673.rs?ref=01f0814a2a7db7d93b4cb90b74242b082861e674", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(use_nested_groups)]\n #![allow(unused_import)]\n \n use {{}, {}};"}, {"sha": "be06e463e3b37fac7c475e3840c3e9d12bcf481f", "filename": "src/test/run-pass/use-nested-groups.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01f0814a2a7db7d93b4cb90b74242b082861e674/src%2Ftest%2Frun-pass%2Fuse-nested-groups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f0814a2a7db7d93b4cb90b74242b082861e674/src%2Ftest%2Frun-pass%2Fuse-nested-groups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-nested-groups.rs?ref=01f0814a2a7db7d93b4cb90b74242b082861e674", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(use_nested_groups)]\n-\n mod a {\n     pub enum B {}\n "}, {"sha": "56413a999d7f78e23894ed0d0fa9aa1665660b3a", "filename": "src/test/ui/feature-gate-use_nested_groups.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/07ea2604075d6f896addce0e6949c7cf25dd3715/src%2Ftest%2Fui%2Ffeature-gate-use_nested_groups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ea2604075d6f896addce0e6949c7cf25dd3715/src%2Ftest%2Fui%2Ffeature-gate-use_nested_groups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-use_nested_groups.rs?ref=07ea2604075d6f896addce0e6949c7cf25dd3715", "patch": "@@ -1,31 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(unused_imports, dead_code)]\n-\n-mod a {\n-    pub enum B {}\n-    pub enum C {}\n-\n-    pub mod d {\n-        pub enum E {}\n-        pub enum F {}\n-\n-        pub mod g {\n-            pub enum H {}\n-        }\n-    }\n-}\n-\n-use a::{B, d::{*, g::H}};  //~ ERROR glob imports in `use` groups are experimental\n-                           //~^ ERROR nested groups in `use` are experimental\n-                           //~^^ ERROR paths in `use` groups are experimental\n-\n-fn main() {}"}, {"sha": "6ae691c384be8a4a945f6d3535a337554968594a", "filename": "src/test/ui/feature-gate-use_nested_groups.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/07ea2604075d6f896addce0e6949c7cf25dd3715/src%2Ftest%2Fui%2Ffeature-gate-use_nested_groups.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07ea2604075d6f896addce0e6949c7cf25dd3715/src%2Ftest%2Fui%2Ffeature-gate-use_nested_groups.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-use_nested_groups.stderr?ref=07ea2604075d6f896addce0e6949c7cf25dd3715", "patch": "@@ -1,26 +0,0 @@\n-error[E0658]: nested groups in `use` are experimental (see issue #44494)\n-  --> $DIR/feature-gate-use_nested_groups.rs:27:12\n-   |\n-27 | use a::{B, d::{*, g::H}};  //~ ERROR glob imports in `use` groups are experimental\n-   |            ^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(use_nested_groups)] to the crate attributes to enable\n-\n-error[E0658]: glob imports in `use` groups are experimental (see issue #44494)\n-  --> $DIR/feature-gate-use_nested_groups.rs:27:16\n-   |\n-27 | use a::{B, d::{*, g::H}};  //~ ERROR glob imports in `use` groups are experimental\n-   |                ^\n-   |\n-   = help: add #![feature(use_nested_groups)] to the crate attributes to enable\n-\n-error[E0658]: paths in `use` groups are experimental (see issue #44494)\n-  --> $DIR/feature-gate-use_nested_groups.rs:27:19\n-   |\n-27 | use a::{B, d::{*, g::H}};  //~ ERROR glob imports in `use` groups are experimental\n-   |                   ^^^^\n-   |\n-   = help: add #![feature(use_nested_groups)] to the crate attributes to enable\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "0a68d34ade9faf2d1e85d5bf27226c46c15ef707", "filename": "src/test/ui/use-nested-groups-error.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01f0814a2a7db7d93b4cb90b74242b082861e674/src%2Ftest%2Fui%2Fuse-nested-groups-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f0814a2a7db7d93b4cb90b74242b082861e674/src%2Ftest%2Fui%2Fuse-nested-groups-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse-nested-groups-error.rs?ref=01f0814a2a7db7d93b4cb90b74242b082861e674", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(use_nested_groups)]\n-\n mod a {\n     pub mod b1 {\n         pub enum C2 {}"}, {"sha": "c4edb626be0bb488c08b2144998de9598b60a144", "filename": "src/test/ui/use-nested-groups-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01f0814a2a7db7d93b4cb90b74242b082861e674/src%2Ftest%2Fui%2Fuse-nested-groups-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01f0814a2a7db7d93b4cb90b74242b082861e674/src%2Ftest%2Fui%2Fuse-nested-groups-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse-nested-groups-error.stderr?ref=01f0814a2a7db7d93b4cb90b74242b082861e674", "patch": "@@ -1,7 +1,7 @@\n error[E0432]: unresolved import `a::b1::C1`\n-  --> $DIR/use-nested-groups-error.rs:21:14\n+  --> $DIR/use-nested-groups-error.rs:19:14\n    |\n-21 | use a::{b1::{C1, C2}, B2};\n+19 | use a::{b1::{C1, C2}, B2};\n    |              ^^ no `C1` in `a::b1`. Did you mean to use `C2`?\n \n error: aborting due to previous error"}]}