{"sha": "a76244fcef9e1ae83b6a7631f33c409c156ad3d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NjI0NGZjZWY5ZTFhZTgzYjZhNzYzMWYzM2M0MDljMTU2YWQzZDk=", "commit": {"author": {"name": "Lee Jeffery", "email": "leejeffery@gmail.com", "date": "2015-05-08T19:33:58Z"}, "committer": {"name": "Lee Jeffery", "email": "leejeffery@gmail.com", "date": "2015-05-08T19:33:58Z"}, "message": "Fix CRLF line-ending parsing for comments.", "tree": {"sha": "6c7bdee487f54089e9b6f28c21d3a734eccf97d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c7bdee487f54089e9b6f28c21d3a734eccf97d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a76244fcef9e1ae83b6a7631f33c409c156ad3d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a76244fcef9e1ae83b6a7631f33c409c156ad3d9", "html_url": "https://github.com/rust-lang/rust/commit/a76244fcef9e1ae83b6a7631f33c409c156ad3d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a76244fcef9e1ae83b6a7631f33c409c156ad3d9/comments", "author": null, "committer": null, "parents": [{"sha": "b402c43f088882db8a03bfcbb5eb8429ef7def0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b402c43f088882db8a03bfcbb5eb8429ef7def0e", "html_url": "https://github.com/rust-lang/rust/commit/b402c43f088882db8a03bfcbb5eb8429ef7def0e"}], "stats": {"total": 50, "additions": 26, "deletions": 24}, "files": [{"sha": "1a772783c9d3e62c7ae84487d439fcf7018fc1f9", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a76244fcef9e1ae83b6a7631f33c409c156ad3d9/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76244fcef9e1ae83b6a7631f33c409c156ad3d9/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=a76244fcef9e1ae83b6a7631f33c409c156ad3d9", "patch": "@@ -403,45 +403,47 @@ impl<'a> StringReader<'a> {\n                 Some('/') => {\n                     self.bump();\n                     self.bump();\n+\n                     // line comments starting with \"///\" or \"//!\" are doc-comments\n-                    if self.curr_is('/') || self.curr_is('!') {\n-                        let start_bpos = self.pos - BytePos(3);\n-                        while !self.is_eof() {\n-                            match self.curr.unwrap() {\n-                                '\\n' => break,\n-                                '\\r' => {\n-                                    if self.nextch_is('\\n') {\n-                                        // CRLF\n-                                        break\n-                                    } else {\n-                                        self.err_span_(self.last_pos, self.pos,\n-                                                       \"bare CR not allowed in doc-comment\");\n-                                    }\n+                    let doc_comment = self.curr_is('/') || self.curr_is('!');\n+                    let start_bpos = self.pos - BytePos(3);\n+\n+                    while !self.is_eof() {\n+                        match self.curr.unwrap() {\n+                            '\\n' => break,\n+                            '\\r' => {\n+                                if self.nextch_is('\\n') {\n+                                    // CRLF\n+                                    break\n+                                } else {\n+                                    self.err_span_(self.last_pos, self.pos,\n+                                                   \"bare CR not allowed in comment\");\n                                 }\n-                                _ => ()\n                             }\n-                            self.bump();\n+                            _ => ()\n                         }\n-                        return self.with_str_from(start_bpos, |string| {\n-                            // but comments with only more \"/\"s are not\n+                        self.bump();\n+                    }\n+\n+                    return if doc_comment {\n+                        self.with_str_from(start_bpos, |string| {\n+                            // comments with only more \"/\"s are not doc comments\n                             let tok = if is_doc_comment(string) {\n                                 token::DocComment(token::intern(string))\n                             } else {\n                                 token::Comment\n                             };\n \n-                            return Some(TokenAndSpan{\n+                            Some(TokenAndSpan {\n                                 tok: tok,\n                                 sp: codemap::mk_sp(start_bpos, self.last_pos)\n-                            });\n-                        });\n+                            })\n+                        })\n                     } else {\n-                        let start_bpos = self.last_pos - BytePos(2);\n-                        while !self.curr_is('\\n') && !self.is_eof() { self.bump(); }\n-                        return Some(TokenAndSpan {\n+                        Some(TokenAndSpan {\n                             tok: token::Comment,\n                             sp: codemap::mk_sp(start_bpos, self.last_pos)\n-                        });\n+                        })\n                     }\n                 }\n                 Some('*') => {"}]}