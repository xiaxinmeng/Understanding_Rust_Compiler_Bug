{"sha": "1c1f16c3e3222d9e8d0b17285244e6155fc69db3", "node_id": "C_kwDOAAsO6NoAKDFjMWYxNmMzZTMyMjJkOWU4ZDBiMTcyODUyNDRlNjE1NWZjNjlkYjM", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-05-13T13:04:48Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-05-15T11:49:25Z"}, "message": "Move cgu_reuse a bit earlier\n\nThere is no reason it needs to be lazily computed at the first iteration\nof the cgu loop.", "tree": {"sha": "16f105dad9c0d11a9135ed28bab2240033837a66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16f105dad9c0d11a9135ed28bab2240033837a66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c1f16c3e3222d9e8d0b17285244e6155fc69db3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c1f16c3e3222d9e8d0b17285244e6155fc69db3", "html_url": "https://github.com/rust-lang/rust/commit/1c1f16c3e3222d9e8d0b17285244e6155fc69db3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c1f16c3e3222d9e8d0b17285244e6155fc69db3/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97d48bec2d2ac7e1aac807e1fe3e8341189db7da", "url": "https://api.github.com/repos/rust-lang/rust/commits/97d48bec2d2ac7e1aac807e1fe3e8341189db7da", "html_url": "https://github.com/rust-lang/rust/commit/97d48bec2d2ac7e1aac807e1fe3e8341189db7da"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "4bee27490167352446a0b11f6574680dfa4617b9", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1c1f16c3e3222d9e8d0b17285244e6155fc69db3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1f16c3e3222d9e8d0b17285244e6155fc69db3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=1c1f16c3e3222d9e8d0b17285244e6155fc69db3", "patch": "@@ -607,6 +607,11 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n         second_half.iter().rev().interleave(first_half).copied().collect()\n     };\n \n+    // Calculate the CGU reuse\n+    let cgu_reuse = tcx.sess.time(\"find_cgu_reuse\", || {\n+        codegen_units.iter().map(|cgu| determine_cgu_reuse(tcx, &cgu)).collect::<Vec<_>>()\n+    });\n+\n     // The non-parallel compiler can only translate codegen units to LLVM IR\n     // on a single thread, leading to a staircase effect where the N LLVM\n     // threads have to wait on the single codegen threads to generate work\n@@ -618,7 +623,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     // non-parallel compiler anymore, we can compile CGUs end-to-end in\n     // parallel and get rid of the complicated scheduling logic.\n     #[cfg(parallel_compiler)]\n-    let pre_compile_cgus = |cgu_reuse: &[CguReuse]| {\n+    let pre_compile_cgus = || {\n         tcx.sess.time(\"compile_first_CGU_batch\", || {\n             // Try to find one CGU to compile per thread.\n             let cgus: Vec<_> = cgu_reuse\n@@ -643,9 +648,8 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     };\n \n     #[cfg(not(parallel_compiler))]\n-    let pre_compile_cgus = |_: &[CguReuse]| (FxHashMap::default(), Duration::new(0, 0));\n+    let pre_compile_cgus = || (FxHashMap::default(), Duration::new(0, 0));\n \n-    let mut cgu_reuse = Vec::new();\n     let mut pre_compiled_cgus: Option<FxHashMap<usize, _>> = None;\n     let mut total_codegen_time = Duration::new(0, 0);\n     let start_rss = tcx.sess.time_passes().then(|| get_resident_set_size());\n@@ -656,12 +660,8 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n \n         // Do some setup work in the first iteration\n         if pre_compiled_cgus.is_none() {\n-            // Calculate the CGU reuse\n-            cgu_reuse = tcx.sess.time(\"find_cgu_reuse\", || {\n-                codegen_units.iter().map(|cgu| determine_cgu_reuse(tcx, &cgu)).collect()\n-            });\n             // Pre compile some CGUs\n-            let (compiled_cgus, codegen_time) = pre_compile_cgus(&cgu_reuse);\n+            let (compiled_cgus, codegen_time) = pre_compile_cgus();\n             pre_compiled_cgus = Some(compiled_cgus);\n             total_codegen_time += codegen_time;\n         }"}]}