{"sha": "64d2f8af8e44423edc94f0ac3eb186c66966541b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZDJmOGFmOGU0NDQyM2VkYzk0ZjBhYzNlYjE4NmM2Njk2NjU0MWI=", "commit": {"author": {"name": "Bood Qian", "email": "bood@glowing.com", "date": "2017-02-11T13:42:42Z"}, "committer": {"name": "Bood Qian", "email": "bood@glowing.com", "date": "2017-02-11T13:42:42Z"}, "message": "Lint on `panic!` only", "tree": {"sha": "e800c6eca93724f763ddac3cd2bb9a8ed205a8a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e800c6eca93724f763ddac3cd2bb9a8ed205a8a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64d2f8af8e44423edc94f0ac3eb186c66966541b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64d2f8af8e44423edc94f0ac3eb186c66966541b", "html_url": "https://github.com/rust-lang/rust/commit/64d2f8af8e44423edc94f0ac3eb186c66966541b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64d2f8af8e44423edc94f0ac3eb186c66966541b/comments", "author": null, "committer": null, "parents": [{"sha": "a2d752807a017f70f28a70b7f16dc6a20cd566ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2d752807a017f70f28a70b7f16dc6a20cd566ee", "html_url": "https://github.com/rust-lang/rust/commit/a2d752807a017f70f28a70b7f16dc6a20cd566ee"}], "stats": {"total": 71, "additions": 44, "deletions": 27}, "files": [{"sha": "57216ad8d41a8b617465c8c5b61a0f9d99d45af5", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/64d2f8af8e44423edc94f0ac3eb186c66966541b/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64d2f8af8e44423edc94f0ac3eb186c66966541b/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=64d2f8af8e44423edc94f0ac3eb186c66966541b", "patch": "@@ -121,9 +121,11 @@ declare_lint! {\n     \"a match with overlapping arms\"\n }\n \n-/// **What it does:** Checks for arm matches all errors with `Err(_)`.\n+/// **What it does:** Checks for arm which matches all errors with `Err(_)`\n+/// and take drastic actions like `panic!`.\n ///\n-/// **Why is this bad?** It is a bad practice to catch all errors the same way\n+/// **Why is this bad?** It is generally a bad practice, just like\n+/// catching all exceptions in java with `catch(Exception)`\n ///\n /// **Known problems:** None.\n ///\n@@ -132,13 +134,13 @@ declare_lint! {\n /// let x : Result(i32, &str) = Ok(3);\n /// match x {\n ///     Ok(_) => println!(\"ok\"),\n-///     Err(_) => println!(\"err\"),\n+///     Err(_) => panic!(\"err\"),\n /// }\n /// ```\n declare_lint! {\n     pub MATCH_WILD_ERR_ARM,\n     Warn,\n-    \"a match with `Err(_)` arm\"\n+    \"a match with `Err(_)` arm and take drastic actions\"\n }\n \n #[allow(missing_copy_implementations)]\n@@ -353,32 +355,28 @@ fn check_wild_err_arm(cx: &LateContext, ex: &Expr, arms: &[Arm]) {\n                 if inner.iter().any(|pat| pat.node == PatKind::Wild) &&\n                     path_str == \"Err\" {\n                         // `Err(_)` arm found\n-                        let mut need_lint = true;\n-                        if let ExprBlock(ref block) = arm.body.node {\n-                            if is_unreachable_block(cx, block) {\n-                                need_lint = false;\n-                            }\n-                        }\n-\n-                        if need_lint {\n+                        if_let_chain! {[\n+                            let ExprBlock(ref block) = arm.body.node,\n+                            is_panic_block(cx, block)\n+                        ], {\n                             span_note_and_lint(cx,\n                                                MATCH_WILD_ERR_ARM,\n                                                arm.pats[0].span,\n                                                \"Err(_) will match all errors, maybe not a good idea\",\n                                                arm.pats[0].span,\n                                                \"to remove this warning, match each error seperately or use unreachable macro\");\n-                        }\n+                        }}\n                 }\n             }\n         }\n     }\n }\n \n-// If the block contains only a `unreachable!` macro (as expression or statement)\n-fn is_unreachable_block(cx: &LateContext, block: &Block) -> bool {\n+// If the block contains only a `panic!` macro (as expression or statement)\n+fn is_panic_block(cx: &LateContext, block: &Block) -> bool {\n     match (&block.expr, block.stmts.len(), block.stmts.first()) {\n-        (&Some(ref exp), 0, _) => is_expn_of(cx, exp.span, \"unreachable\").is_some(),\n-        (&None, 1, Some(ref stmt)) => is_expn_of(cx, stmt.span, \"unreachable\").is_some(),\n+        (&Some(ref exp), 0, _) => is_expn_of(cx, exp.span, \"panic\").is_some() && is_expn_of(cx, exp.span, \"unreachable\").is_none(),\n+        (&None, 1, Some(ref stmt)) => is_expn_of(cx, stmt.span, \"panic\").is_some() && is_expn_of(cx, stmt.span, \"unreachable\").is_none(),\n         _ => false\n     }\n }"}, {"sha": "46a99293a354442eab9c1b3fb1156b62fbba9c32", "filename": "tests/ui/matches.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/64d2f8af8e44423edc94f0ac3eb186c66966541b/tests%2Fui%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64d2f8af8e44423edc94f0ac3eb186c66966541b/tests%2Fui%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.rs?ref=64d2f8af8e44423edc94f0ac3eb186c66966541b", "patch": "@@ -289,31 +289,41 @@ fn match_wild_err_arm() {\n     match x {\n         Ok(3) => println!(\"ok\"),\n         Ok(_) => println!(\"ok\"),\n-        Err(_) => println!(\"err\")\n+        Err(_) => panic!(\"err\")\n     }\n \n     match x {\n         Ok(3) => println!(\"ok\"),\n         Ok(_) => println!(\"ok\"),\n-        Err(_) => {\n-            println!(\"err\");\n-            unreachable!()\n-        }\n+        Err(_) => {panic!()}\n     }\n \n-    // allowed when using with unreachable as the only statement/expression\n     match x {\n         Ok(3) => println!(\"ok\"),\n         Ok(_) => println!(\"ok\"),\n-        Err(_) => unreachable!()\n+        Err(_) => {panic!();}\n     }\n \n+    // allowed when not with `panic!` block\n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => println!(\"err\")\n+    }\n+\n+    // allowed when used with `unreachable!`\n     match x {\n         Ok(3) => println!(\"ok\"),\n         Ok(_) => println!(\"ok\"),\n         Err(_) => {unreachable!()}\n     }\n \n+    match x {\n+        Ok(3) => println!(\"ok\"),\n+        Ok(_) => println!(\"ok\"),\n+        Err(_) => unreachable!()\n+    }\n+\n     match x {\n         Ok(3) => println!(\"ok\"),\n         Ok(_) => println!(\"ok\"),"}, {"sha": "bc8584b858722d2510f6ea8c2431e2e3e0ffd335", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/64d2f8af8e44423edc94f0ac3eb186c66966541b/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64d2f8af8e44423edc94f0ac3eb186c66966541b/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=64d2f8af8e44423edc94f0ac3eb186c66966541b", "patch": "@@ -391,7 +391,7 @@ note: overlaps with this\n error: Err(_) will match all errors, maybe not a good idea\n    --> $DIR/matches.rs:292:9\n     |\n-292 |         Err(_) => println!(\"err\")\n+292 |         Err(_) => panic!(\"err\")\n     |         ^^^^^^\n     |\n     = note: #[deny(match_wild_err_arm)] implied by #[deny(clippy)]\n@@ -405,11 +405,20 @@ note: lint level defined here\n error: Err(_) will match all errors, maybe not a good idea\n    --> $DIR/matches.rs:298:9\n     |\n-298 |         Err(_) => {\n+298 |         Err(_) => {panic!()}\n     |         ^^^^^^\n     |\n     = note: #[deny(match_wild_err_arm)] implied by #[deny(clippy)]\n     = note: to remove this warning, match each error seperately or use unreachable macro\n \n-error: aborting due to 25 previous errors\n+error: Err(_) will match all errors, maybe not a good idea\n+   --> $DIR/matches.rs:304:9\n+    |\n+304 |         Err(_) => {panic!();}\n+    |         ^^^^^^\n+    |\n+    = note: #[deny(match_wild_err_arm)] implied by #[deny(clippy)]\n+    = note: to remove this warning, match each error seperately or use unreachable macro\n+\n+error: aborting due to 26 previous errors\n "}]}