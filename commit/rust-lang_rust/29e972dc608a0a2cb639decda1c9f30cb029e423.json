{"sha": "29e972dc608a0a2cb639decda1c9f30cb029e423", "node_id": "C_kwDOAAsO6NoAKDI5ZTk3MmRjNjA4YTBhMmNiNjM5ZGVjZGExYzlmMzBjYjAyOWU0MjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-15T18:52:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-15T18:52:28Z"}, "message": "Auto merge of #97063 - Dylan-DPC:rollup-u5el7hb, r=Dylan-DPC\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #96947 (Add rustc_nonnull_optimization_guaranteed to Owned/Borrowed Fd/Socket)\n - #97021 (Added note in documentation)\n - #97042 (Add new eslint rule about brace style)\n - #97060 (Fix use of SetHandleInformation on UWP)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e2ac285c7564d7d7d6c46e23d3ca906830f266ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2ac285c7564d7d7d6c46e23d3ca906830f266ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29e972dc608a0a2cb639decda1c9f30cb029e423", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29e972dc608a0a2cb639decda1c9f30cb029e423", "html_url": "https://github.com/rust-lang/rust/commit/29e972dc608a0a2cb639decda1c9f30cb029e423", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29e972dc608a0a2cb639decda1c9f30cb029e423/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f202d22c5e759062de276cbf0c27ed69794cb65", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f202d22c5e759062de276cbf0c27ed69794cb65", "html_url": "https://github.com/rust-lang/rust/commit/0f202d22c5e759062de276cbf0c27ed69794cb65"}, {"sha": "d56c59efdcb394c863c70a79bfbbe8ddfc1ece0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d56c59efdcb394c863c70a79bfbbe8ddfc1ece0a", "html_url": "https://github.com/rust-lang/rust/commit/d56c59efdcb394c863c70a79bfbbe8ddfc1ece0a"}], "stats": {"total": 158, "additions": 123, "deletions": 35}, "files": [{"sha": "53433823fbd3bce4ca837cf328432682e7b2f9d9", "filename": "library/std/src/os/fd/owned.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29e972dc608a0a2cb639decda1c9f30cb029e423/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e972dc608a0a2cb639decda1c9f30cb029e423/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs?ref=29e972dc608a0a2cb639decda1c9f30cb029e423", "patch": "@@ -32,6 +32,7 @@ use crate::sys_common::{AsInner, FromInner, IntoInner};\n // 32-bit c_int. Below is -2, in two's complement, but that only works out\n // because c_int is 32 bits.\n #[rustc_layout_scalar_valid_range_end(0xFF_FF_FF_FE)]\n+#[rustc_nonnull_optimization_guaranteed]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n pub struct BorrowedFd<'fd> {\n     fd: RawFd,\n@@ -52,6 +53,7 @@ pub struct BorrowedFd<'fd> {\n // 32-bit c_int. Below is -2, in two's complement, but that only works out\n // because c_int is 32 bits.\n #[rustc_layout_scalar_valid_range_end(0xFF_FF_FF_FE)]\n+#[rustc_nonnull_optimization_guaranteed]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n pub struct OwnedFd {\n     fd: RawFd,"}, {"sha": "b39863644f1161e85ecb91045b8c0a10aee97c1e", "filename": "library/std/src/os/fd/tests.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/29e972dc608a0a2cb639decda1c9f30cb029e423/library%2Fstd%2Fsrc%2Fos%2Ffd%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e972dc608a0a2cb639decda1c9f30cb029e423/library%2Fstd%2Fsrc%2Fos%2Ffd%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Ftests.rs?ref=29e972dc608a0a2cb639decda1c9f30cb029e423", "patch": "@@ -32,3 +32,22 @@ fn test_fd() {\n     assert_eq!(stdin_as_file.as_fd().as_raw_fd(), raw_fd);\n     assert_eq!(Into::<OwnedFd>::into(stdin_as_file).into_raw_fd(), raw_fd);\n }\n+\n+#[cfg(any(unix, target_os = \"wasi\"))]\n+#[test]\n+fn test_niche_optimizations() {\n+    use crate::mem::size_of;\n+    #[cfg(unix)]\n+    use crate::os::unix::io::{BorrowedFd, FromRawFd, IntoRawFd, OwnedFd, RawFd};\n+    #[cfg(target_os = \"wasi\")]\n+    use crate::os::wasi::io::{BorrowedFd, FromRawFd, IntoRawFd, OwnedFd, RawFd};\n+\n+    assert_eq!(size_of::<Option<OwnedFd>>(), size_of::<RawFd>());\n+    assert_eq!(size_of::<Option<BorrowedFd<'static>>>(), size_of::<RawFd>());\n+    unsafe {\n+        assert_eq!(OwnedFd::from_raw_fd(RawFd::MIN).into_raw_fd(), RawFd::MIN);\n+        assert_eq!(OwnedFd::from_raw_fd(RawFd::MAX).into_raw_fd(), RawFd::MAX);\n+        assert_eq!(Some(OwnedFd::from_raw_fd(RawFd::MIN)).unwrap().into_raw_fd(), RawFd::MIN);\n+        assert_eq!(Some(OwnedFd::from_raw_fd(RawFd::MAX)).unwrap().into_raw_fd(), RawFd::MAX);\n+    }\n+}"}, {"sha": "0ecac6b447570503f17951036dc032077824f97d", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29e972dc608a0a2cb639decda1c9f30cb029e423/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e972dc608a0a2cb639decda1c9f30cb029e423/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=29e972dc608a0a2cb639decda1c9f30cb029e423", "patch": "@@ -206,6 +206,7 @@ impl OwnedHandle {\n     }\n \n     /// Allow child processes to inherit the handle.\n+    #[cfg(not(target_vendor = \"uwp\"))]\n     pub(crate) fn set_inheritable(&self) -> io::Result<()> {\n         cvt(unsafe {\n             c::SetHandleInformation("}, {"sha": "3325688e661ef7e25c12695b327becdddbee3009", "filename": "library/std/src/os/windows/io/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29e972dc608a0a2cb639decda1c9f30cb029e423/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e972dc608a0a2cb639decda1c9f30cb029e423/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fmod.rs?ref=29e972dc608a0a2cb639decda1c9f30cb029e423", "patch": "@@ -54,3 +54,6 @@ pub use handle::*;\n pub use raw::*;\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n pub use socket::*;\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "e23e1cf8ceed6b8c0c055de94af998be00135cf5", "filename": "library/std/src/os/windows/io/socket.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29e972dc608a0a2cb639decda1c9f30cb029e423/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e972dc608a0a2cb639decda1c9f30cb029e423/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs?ref=29e972dc608a0a2cb639decda1c9f30cb029e423", "patch": "@@ -10,6 +10,7 @@ use crate::mem;\n use crate::mem::forget;\n use crate::sys;\n use crate::sys::c;\n+#[cfg(not(target_vendor = \"uwp\"))]\n use crate::sys::cvt;\n \n /// A borrowed socket.\n@@ -34,6 +35,7 @@ use crate::sys::cvt;\n     target_pointer_width = \"64\",\n     rustc_layout_scalar_valid_range_end(0xFF_FF_FF_FF_FF_FF_FF_FE)\n )]\n+#[rustc_nonnull_optimization_guaranteed]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n pub struct BorrowedSocket<'socket> {\n     socket: RawSocket,\n@@ -56,6 +58,7 @@ pub struct BorrowedSocket<'socket> {\n     target_pointer_width = \"64\",\n     rustc_layout_scalar_valid_range_end(0xFF_FF_FF_FF_FF_FF_FF_FE)\n )]\n+#[rustc_nonnull_optimization_guaranteed]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n pub struct OwnedSocket {\n     socket: RawSocket,"}, {"sha": "41734e52e8ccee05e6db9f7e99d2f23264c2fec8", "filename": "library/std/src/os/windows/io/tests.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/29e972dc608a0a2cb639decda1c9f30cb029e423/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e972dc608a0a2cb639decda1c9f30cb029e423/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Ftests.rs?ref=29e972dc608a0a2cb639decda1c9f30cb029e423", "patch": "@@ -0,0 +1,21 @@\n+#[test]\n+fn test_niche_optimizations_socket() {\n+    use crate::mem::size_of;\n+    use crate::os::windows::io::{\n+        BorrowedSocket, FromRawSocket, IntoRawSocket, OwnedSocket, RawSocket,\n+    };\n+\n+    assert_eq!(size_of::<Option<OwnedSocket>>(), size_of::<RawSocket>());\n+    assert_eq!(size_of::<Option<BorrowedSocket<'static>>>(), size_of::<RawSocket>(),);\n+    unsafe {\n+        #[cfg(target_pointer_width = \"32\")]\n+        let (min, max) = (i32::MIN as u32, i32::MAX as u32);\n+        #[cfg(target_pointer_width = \"64\")]\n+        let (min, max) = (i64::MIN as u64, i64::MAX as u64);\n+\n+        assert_eq!(OwnedSocket::from_raw_socket(min).into_raw_socket(), min);\n+        assert_eq!(OwnedSocket::from_raw_socket(max).into_raw_socket(), max);\n+        assert_eq!(Some(OwnedSocket::from_raw_socket(min)).unwrap().into_raw_socket(), min);\n+        assert_eq!(Some(OwnedSocket::from_raw_socket(max)).unwrap().into_raw_socket(), max);\n+    }\n+}"}, {"sha": "c319cb28630f553ee956fe5f570e289edc98cf07", "filename": "library/std/src/sys/windows/handle.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29e972dc608a0a2cb639decda1c9f30cb029e423/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e972dc608a0a2cb639decda1c9f30cb029e423/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs?ref=29e972dc608a0a2cb639decda1c9f30cb029e423", "patch": "@@ -221,6 +221,7 @@ impl Handle {\n         Ok(Self(self.0.duplicate(access, inherit, options)?))\n     }\n \n+    #[cfg(not(target_vendor = \"uwp\"))]\n     pub(crate) fn set_inheritable(&self) -> io::Result<()> {\n         self.0.set_inheritable()\n     }"}, {"sha": "2c586f1abe4335977286efbcbd5363f9f425a6d3", "filename": "library/std/src/sys/windows/pipe.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/29e972dc608a0a2cb639decda1c9f30cb029e423/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e972dc608a0a2cb639decda1c9f30cb029e423/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs?ref=29e972dc608a0a2cb639decda1c9f30cb029e423", "patch": "@@ -57,10 +57,21 @@ impl Pipes {\n             } else {\n                 let (ours, theirs) = if ours_readable { (read, write) } else { (write, read) };\n                 let ours = Handle::from_raw_handle(ours);\n+                #[cfg(not(target_vendor = \"uwp\"))]\n                 let theirs = Handle::from_raw_handle(theirs);\n+                #[cfg(target_vendor = \"uwp\")]\n+                let mut theirs = Handle::from_raw_handle(theirs);\n \n                 if their_handle_inheritable {\n-                    theirs.set_inheritable()?;\n+                    #[cfg(not(target_vendor = \"uwp\"))]\n+                    {\n+                        theirs.set_inheritable()?;\n+                    }\n+\n+                    #[cfg(target_vendor = \"uwp\")]\n+                    {\n+                        theirs = theirs.duplicate(0, true, c::DUPLICATE_SAME_ACCESS)?;\n+                    }\n                 }\n \n                 Ok(Pipes { ours: AnonPipe::Sync(ours), theirs: AnonPipe::Sync(theirs) })"}, {"sha": "e83c4d98cc7a4cad6edd2bfb4b4d5e442e03c391", "filename": "src/doc/unstable-book/src/compiler-flags/sanitizer.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29e972dc608a0a2cb639decda1c9f30cb029e423/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/29e972dc608a0a2cb639decda1c9f30cb029e423/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md?ref=29e972dc608a0a2cb639decda1c9f30cb029e423", "patch": "@@ -22,7 +22,10 @@ This feature allows for use of one of following sanitizers:\n \n To enable a sanitizer compile with `-Zsanitizer=address`,`-Zsanitizer=cfi`,\n `-Zsanitizer=hwaddress`, `-Zsanitizer=leak`, `-Zsanitizer=memory`,\n-`-Zsanitizer=memtag`, or `-Zsanitizer=thread`.\n+`-Zsanitizer=memtag`, or `-Zsanitizer=thread`. You might also need the `--target` and `build-std` flags. Example:\n+```shell\n+$ RUSTFLAGS=-Zsanitizer=address cargo build -Zbuild-std --target x86_64-unknown-linux-gnu\n+```\n \n # AddressSanitizer\n "}, {"sha": "7634a15b9bd19ed6993f84e0c985424747fd42fa", "filename": "src/librustdoc/html/static/.eslintrc.js", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29e972dc608a0a2cb639decda1c9f30cb029e423/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js", "raw_url": "https://github.com/rust-lang/rust/raw/29e972dc608a0a2cb639decda1c9f30cb029e423/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js?ref=29e972dc608a0a2cb639decda1c9f30cb029e423", "patch": "@@ -29,5 +29,10 @@ module.exports = {\n         \"no-var\": [\"error\"],\n         \"prefer-const\": [\"error\"],\n         \"prefer-arrow-callback\": [\"error\"],\n+        \"brace-style\": [\n+            \"error\",\n+            \"1tbs\",\n+            { \"allowSingleLine\": false }\n+        ],\n     }\n };"}, {"sha": "454c7f557b9bcf8512590bdb5d83ad760407f374", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29e972dc608a0a2cb639decda1c9f30cb029e423/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/29e972dc608a0a2cb639decda1c9f30cb029e423/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=29e972dc608a0a2cb639decda1c9f30cb029e423", "patch": "@@ -709,8 +709,8 @@ function loadCss(cssFileName) {\n             onEachLazy(document.getElementsByClassName(\"rustdoc-toggle\"), e => {\n                 if (e.parentNode.id !== \"implementations-list\" ||\n                     (!hasClass(e, \"implementors-toggle\") &&\n-                     !hasClass(e, \"type-contents-toggle\")))\n-                {\n+                     !hasClass(e, \"type-contents-toggle\"))\n+                ) {\n                     e.open = false;\n                 }\n             });"}, {"sha": "7b9d86a851b1983039b8166979c64a0afb616319", "filename": "src/librustdoc/html/static/js/scrape-examples.js", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29e972dc608a0a2cb639decda1c9f30cb029e423/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js", "raw_url": "https://github.com/rust-lang/rust/raw/29e972dc608a0a2cb639decda1c9f30cb029e423/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js?ref=29e972dc608a0a2cb639decda1c9f30cb029e423", "patch": "@@ -98,7 +98,9 @@\n             // visible. This is necessary since updateScrapedExample calls scrollToLoc which\n             // depends on offsetHeight, a property that requires an element to be visible to\n             // compute correctly.\n-            setTimeout(() => { onEachLazy(moreExamples, updateScrapedExample); });\n+            setTimeout(() => {\n+                onEachLazy(moreExamples, updateScrapedExample);\n+            });\n         }, {once: true});\n     });\n })();"}, {"sha": "0be70d77d06e4e75b27e2a4e7e7acfdf3f9c5520", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 45, "deletions": 28, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/29e972dc608a0a2cb639decda1c9f30cb029e423/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/29e972dc608a0a2cb639decda1c9f30cb029e423/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=29e972dc608a0a2cb639decda1c9f30cb029e423", "patch": "@@ -320,8 +320,8 @@ window.initSearch = rawSearchIndex => {\n                     if (foundExclamation) {\n                         throw new Error(\"Cannot have more than one `!` in an ident\");\n                     } else if (parserState.pos + 1 < parserState.length &&\n-                        isIdentCharacter(parserState.userQuery[parserState.pos + 1]))\n-                    {\n+                        isIdentCharacter(parserState.userQuery[parserState.pos + 1])\n+                    ) {\n                         throw new Error(\"`!` can only be at the end of an ident\");\n                     }\n                     foundExclamation = true;\n@@ -330,12 +330,10 @@ window.initSearch = rawSearchIndex => {\n                 } else if (\n                     isStopCharacter(c) ||\n                     isSpecialStartCharacter(c) ||\n-                    isSeparatorCharacter(c))\n-                {\n+                    isSeparatorCharacter(c)\n+                ) {\n                     break;\n-                }\n-                // If we allow paths (\"str::string\" for example).\n-                else if (c === \":\") {\n+                } else if (c === \":\") { // If we allow paths (\"str::string\" for example).\n                     if (!isPathStart(parserState)) {\n                         break;\n                     }\n@@ -372,8 +370,8 @@ window.initSearch = rawSearchIndex => {\n             end = getIdentEndPosition(parserState);\n         }\n         if (parserState.pos < parserState.length &&\n-            parserState.userQuery[parserState.pos] === \"<\")\n-        {\n+            parserState.userQuery[parserState.pos] === \"<\"\n+        ) {\n             if (isInGenerics) {\n                 throw new Error(\"Unexpected `<` after `<`\");\n             } else if (start >= end) {\n@@ -592,8 +590,8 @@ window.initSearch = rawSearchIndex => {\n \n         if (elem &&\n             elem.value !== \"All crates\" &&\n-            hasOwnPropertyRustdoc(rawSearchIndex, elem.value))\n-        {\n+            hasOwnPropertyRustdoc(rawSearchIndex, elem.value)\n+        ) {\n             return elem.value;\n         }\n         return null;\n@@ -786,37 +784,51 @@ window.initSearch = rawSearchIndex => {\n                 // sort by exact match with regard to the last word (mismatch goes later)\n                 a = (aaa.word !== userQuery);\n                 b = (bbb.word !== userQuery);\n-                if (a !== b) { return a - b; }\n+                if (a !== b) {\n+                    return a - b;\n+                }\n \n                 // Sort by non levenshtein results and then levenshtein results by the distance\n                 // (less changes required to match means higher rankings)\n                 a = (aaa.lev);\n                 b = (bbb.lev);\n-                if (a !== b) { return a - b; }\n+                if (a !== b) {\n+                    return a - b;\n+                }\n \n                 // sort by crate (non-current crate goes later)\n                 a = (aaa.item.crate !== window.currentCrate);\n                 b = (bbb.item.crate !== window.currentCrate);\n-                if (a !== b) { return a - b; }\n+                if (a !== b) {\n+                    return a - b;\n+                }\n \n                 // sort by item name length (longer goes later)\n                 a = aaa.word.length;\n                 b = bbb.word.length;\n-                if (a !== b) { return a - b; }\n+                if (a !== b) {\n+                    return a - b;\n+                }\n \n                 // sort by item name (lexicographically larger goes later)\n                 a = aaa.word;\n                 b = bbb.word;\n-                if (a !== b) { return (a > b ? +1 : -1); }\n+                if (a !== b) {\n+                    return (a > b ? +1 : -1);\n+                }\n \n                 // sort by index of keyword in item name (no literal occurrence goes later)\n                 a = (aaa.index < 0);\n                 b = (bbb.index < 0);\n-                if (a !== b) { return a - b; }\n+                if (a !== b) {\n+                    return a - b;\n+                }\n                 // (later literal occurrence, if any, goes later)\n                 a = aaa.index;\n                 b = bbb.index;\n-                if (a !== b) { return a - b; }\n+                if (a !== b) {\n+                    return a - b;\n+                }\n \n                 // special precedence for primitive and keyword pages\n                 if ((aaa.item.ty === TY_PRIMITIVE && bbb.item.ty !== TY_KEYWORD) ||\n@@ -831,17 +843,23 @@ window.initSearch = rawSearchIndex => {\n                 // sort by description (no description goes later)\n                 a = (aaa.item.desc === \"\");\n                 b = (bbb.item.desc === \"\");\n-                if (a !== b) { return a - b; }\n+                if (a !== b) {\n+                    return a - b;\n+                }\n \n                 // sort by type (later occurrence in `itemTypes` goes later)\n                 a = aaa.item.ty;\n                 b = bbb.item.ty;\n-                if (a !== b) { return a - b; }\n+                if (a !== b) {\n+                    return a - b;\n+                }\n \n                 // sort by path (lexicographically larger goes later)\n                 a = aaa.item.path;\n                 b = bbb.item.path;\n-                if (a !== b) { return (a > b ? +1 : -1); }\n+                if (a !== b) {\n+                    return (a > b ? +1 : -1);\n+                }\n \n                 // que sera, sera\n                 return 0;\n@@ -1315,16 +1333,15 @@ window.initSearch = rawSearchIndex => {\n             }\n \n             if (searchWord.indexOf(elem.pathLast) > -1 ||\n-                row.normalizedName.indexOf(elem.pathLast) > -1)\n-            {\n+                row.normalizedName.indexOf(elem.pathLast) > -1\n+            ) {\n                 // filter type: ... queries\n                 if (!results_others[fullId] !== undefined) {\n                     index = row.normalizedName.indexOf(elem.pathLast);\n                 }\n             }\n             lev = levenshtein(searchWord, elem.pathLast);\n-            if (lev > 0 && elem.pathLast.length > 2 && searchWord.indexOf(elem.pathLast) > -1)\n-            {\n+            if (lev > 0 && elem.pathLast.length > 2 && searchWord.indexOf(elem.pathLast) > -1) {\n                 if (elem.pathLast.length < 6) {\n                     lev = 1;\n                 } else {\n@@ -1670,8 +1687,8 @@ window.initSearch = rawSearchIndex => {\n             // By default, the search DOM element is \"empty\" (meaning it has no children not\n             // text content). Once a search has been run, it won't be empty, even if you press\n             // ESC or empty the search input (which also \"cancels\" the search).\n-            && (!search.firstChild || search.firstChild.innerText !== searchState.loadingText)))\n-        {\n+            && (!search.firstChild || search.firstChild.innerText !== searchState.loadingText))\n+        ) {\n             const elem = document.createElement(\"a\");\n             elem.href = results.others[0].href;\n             removeClass(elem, \"active\");\n@@ -1766,7 +1783,7 @@ window.initSearch = rawSearchIndex => {\n         let i = 0;\n         for (const elem of elems) {\n             const j = i;\n-            elem.onclick = () => { printTab(j); };\n+            elem.onclick = () => printTab(j);\n             searchState.focusedByTab.push(null);\n             i += 1;\n         }"}, {"sha": "2e2305029cdddb723021748d5cd48624f57ad49c", "filename": "src/librustdoc/html/static/js/settings.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29e972dc608a0a2cb639decda1c9f30cb029e423/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/29e972dc608a0a2cb639decda1c9f30cb029e423/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js?ref=29e972dc608a0a2cb639decda1c9f30cb029e423", "patch": "@@ -254,8 +254,8 @@\n     function blurHandler(event) {\n         const settingsButton = getSettingsButton();\n         if (!elemIsInParent(document.activeElement, settingsButton) &&\n-            !elemIsInParent(event.relatedTarget, settingsButton))\n-        {\n+            !elemIsInParent(event.relatedTarget, settingsButton)\n+        ) {\n             window.hideSettings();\n         }\n     }"}]}