{"sha": "fba5af2a7d5efa2a324b52fd80648a04d6fabb3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiYTVhZjJhN2Q1ZWZhMmEzMjRiNTJmZDgwNjQ4YTA0ZDZmYWJiM2Q=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-05-01T03:48:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-01T03:48:53Z"}, "message": "Merge pull request #1469 from topecongiro/bug/chains\n\nRemove a bug when calculating the length of the chain", "tree": {"sha": "2501011a3d42eb6a1c1341ef9438cf8cf97a7f95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2501011a3d42eb6a1c1341ef9438cf8cf97a7f95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fba5af2a7d5efa2a324b52fd80648a04d6fabb3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fba5af2a7d5efa2a324b52fd80648a04d6fabb3d", "html_url": "https://github.com/rust-lang/rust/commit/fba5af2a7d5efa2a324b52fd80648a04d6fabb3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fba5af2a7d5efa2a324b52fd80648a04d6fabb3d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8fbfdb4a3f3c0917e2d6a2dade42ec3f1580ca2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8fbfdb4a3f3c0917e2d6a2dade42ec3f1580ca2", "html_url": "https://github.com/rust-lang/rust/commit/a8fbfdb4a3f3c0917e2d6a2dade42ec3f1580ca2"}, {"sha": "02cf515be63600c1a2f59ba4ce77695e1ef60ceb", "url": "https://api.github.com/repos/rust-lang/rust/commits/02cf515be63600c1a2f59ba4ce77695e1ef60ceb", "html_url": "https://github.com/rust-lang/rust/commit/02cf515be63600c1a2f59ba4ce77695e1ef60ceb"}], "stats": {"total": 113, "additions": 26, "deletions": 87}, "files": [{"sha": "1460c44635249d4e5a5f95fa81b659316e8850d2", "filename": "src/chains.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fba5af2a7d5efa2a324b52fd80648a04d6fabb3d/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba5af2a7d5efa2a324b52fd80648a04d6fabb3d/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=fba5af2a7d5efa2a324b52fd80648a04d6fabb3d", "patch": "@@ -169,7 +169,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n     let almost_total = rewrites[..rewrites.len() - 1]\n         .iter()\n         .fold(0, |a, b| a + first_line_width(b)) + parent_rewrite.len();\n-    let one_line_len = rewrites.iter().fold(0, |a, r| a + r.len() + 1) + parent_rewrite.len();\n+    let one_line_len = rewrites.iter().fold(0, |a, r| a + r.len()) + parent_rewrite.len();\n \n     let veto_single_line = if one_line_len > context.config.chain_one_line_max - 1 &&\n                               rewrites.len() > 1 {\n@@ -424,10 +424,8 @@ fn rewrite_method_call(method_name: ast::Ident,\n     let (lo, type_str) = if types.is_empty() {\n         (args[0].span.hi, String::new())\n     } else {\n-        let type_list: Vec<_> = try_opt!(types\n-                                             .iter()\n-                                             .map(|ty| ty.rewrite(context, shape))\n-                                             .collect());\n+        let type_list: Vec<_> =\n+            try_opt!(types.iter().map(|ty| ty.rewrite(context, shape)).collect());\n \n         let type_str = if context.config.spaces_within_angle_brackets && type_list.len() > 0 {\n             format!(\"::< {} >\", type_list.join(\", \"))"}, {"sha": "9df303c86b246b8b05e5f2d5bfb7c54f01bba595", "filename": "src/comment.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fba5af2a7d5efa2a324b52fd80648a04d6fabb3d/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba5af2a7d5efa2a324b52fd80648a04d6fabb3d/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=fba5af2a7d5efa2a324b52fd80648a04d6fabb3d", "patch": "@@ -99,10 +99,7 @@ pub fn rewrite_comment(orig: &str,\n         config: config,\n     };\n \n-    let line_breaks = orig.trim_right()\n-        .chars()\n-        .filter(|&c| c == '\\n')\n-        .count();\n+    let line_breaks = orig.trim_right().chars().filter(|&c| c == '\\n').count();\n     let lines = orig.lines()\n         .enumerate()\n         .map(|(i, mut line)| {"}, {"sha": "fa12ad8b1701788cd8fced06a79cdca27572a2e7", "filename": "src/expr.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fba5af2a7d5efa2a324b52fd80648a04d6fabb3d/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba5af2a7d5efa2a324b52fd80648a04d6fabb3d/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=fba5af2a7d5efa2a324b52fd80648a04d6fabb3d", "patch": "@@ -600,9 +600,7 @@ fn and_one_line(x: Option<String>) -> Option<String> {\n fn nop_block_collapse(block_str: Option<String>, budget: usize) -> Option<String> {\n     debug!(\"nop_block_collapse {:?} {}\", block_str, budget);\n     block_str.map(|block_str| if block_str.starts_with('{') && budget >= 2 &&\n-                                 (block_str[1..]\n-                                      .find(|c: char| !c.is_whitespace())\n-                                      .unwrap() ==\n+                                 (block_str[1..].find(|c: char| !c.is_whitespace()).unwrap() ==\n                                   block_str.len() - 2) {\n                       \"{}\".to_owned()\n                   } else {\n@@ -933,16 +931,12 @@ impl<'a> Rewrite for ControlFlow<'a> {\n \n         // for event in event\n         let between_kwd_cond =\n-            mk_sp(context\n-                      .codemap\n-                      .span_after(self.span, self.keyword.trim()),\n+            mk_sp(context.codemap.span_after(self.span, self.keyword.trim()),\n                   self.pat\n                       .map_or(cond_span.lo, |p| if self.matcher.is_empty() {\n                 p.span.lo\n             } else {\n-                context\n-                    .codemap\n-                    .span_before(self.span, self.matcher.trim())\n+                context.codemap.span_before(self.span, self.matcher.trim())\n             }));\n \n         let between_kwd_cond_comment = extract_comment(between_kwd_cond, context, shape);\n@@ -1137,10 +1131,7 @@ fn rewrite_match_arm_comment(context: &RewriteContext,\n     let first = missed_str\n         .find(|c: char| !c.is_whitespace())\n         .unwrap_or(missed_str.len());\n-    if missed_str[..first]\n-           .chars()\n-           .filter(|c| c == &'\\n')\n-           .count() >= 2 {\n+    if missed_str[..first].chars().filter(|c| c == &'\\n').count() >= 2 {\n         // Excessive vertical whitespace before comment should be preserved\n         // FIXME handle vertical whitespace better\n         result.push('\\n');"}, {"sha": "50c7b4dc938fb857cfe6035a38651d4675c05a93", "filename": "src/imports.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fba5af2a7d5efa2a324b52fd80648a04d6fabb3d/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba5af2a7d5efa2a324b52fd80648a04d6fabb3d/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=fba5af2a7d5efa2a324b52fd80648a04d6fabb3d", "patch": "@@ -29,10 +29,7 @@ fn path_of(a: &ast::ViewPath_) -> &ast::Path {\n }\n \n fn compare_path_segments(a: &ast::PathSegment, b: &ast::PathSegment) -> Ordering {\n-    a.identifier\n-        .name\n-        .as_str()\n-        .cmp(&b.identifier.name.as_str())\n+    a.identifier.name.as_str().cmp(&b.identifier.name.as_str())\n }\n \n fn compare_paths(a: &ast::Path, b: &ast::Path) -> Ordering {"}, {"sha": "9ab551ddcccaf4d0944cbf23c61def1f7bf83375", "filename": "src/items.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fba5af2a7d5efa2a324b52fd80648a04d6fabb3d/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba5af2a7d5efa2a324b52fd80648a04d6fabb3d/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=fba5af2a7d5efa2a324b52fd80648a04d6fabb3d", "patch": "@@ -242,9 +242,7 @@ impl<'a> FmtVisitor<'a> {\n         let context = self.get_context();\n \n         let block_snippet = self.snippet(codemap::mk_sp(block.span.lo, block.span.hi));\n-        let has_body = !block_snippet[1..block_snippet.len() - 1]\n-                            .trim()\n-                            .is_empty() ||\n+        let has_body = !block_snippet[1..block_snippet.len() - 1].trim().is_empty() ||\n                        !context.config.fn_empty_single_line;\n \n         let (mut result, force_newline_brace) = try_opt!(rewrite_fn_base(&context,\n@@ -1227,10 +1225,7 @@ impl Rewrite for ast::StructField {\n \n         let type_offset = shape.indent.block_indent(context.config);\n         let rewrite_type_in_next_line = || {\n-            let budget = try_opt!(context\n-                                      .config\n-                                      .max_width\n-                                      .checked_sub(type_offset.width()));\n+            let budget = try_opt!(context.config.max_width.checked_sub(type_offset.width()));\n             self.ty\n                 .rewrite(context, Shape::legacy(budget, type_offset))\n         };\n@@ -1624,9 +1619,7 @@ fn rewrite_fn_base(context: &RewriteContext,\n         .ty_params\n         .last()\n         .map_or(span.lo, |tp| end_typaram(tp));\n-    let args_span = mk_sp(context\n-                              .codemap\n-                              .span_after(mk_sp(args_start, span.hi), \"(\"),\n+    let args_span = mk_sp(context.codemap.span_after(mk_sp(args_start, span.hi), \"(\"),\n                           span_for_return(&fd.output).lo);\n     let arg_str = try_opt!(rewrite_args(context,\n                                         &fd.inputs,\n@@ -1767,10 +1760,7 @@ fn rewrite_fn_base(context: &RewriteContext,\n         }\n     }\n \n-    let budget = try_opt!(context\n-                              .config\n-                              .max_width\n-                              .checked_sub(indent.block_indent));\n+    let budget = try_opt!(context.config.max_width.checked_sub(indent.block_indent));\n     let where_clause_str = try_opt!(rewrite_where_clause(context,\n                                                          where_clause,\n                                                          context.config.fn_brace_style,"}, {"sha": "7933ebab807e373611ab36b0999a1a00fdcdc404", "filename": "src/lists.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fba5af2a7d5efa2a324b52fd80648a04d6fabb3d/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba5af2a7d5efa2a324b52fd80648a04d6fabb3d/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=fba5af2a7d5efa2a324b52fd80648a04d6fabb3d", "patch": "@@ -172,9 +172,7 @@ pub fn definitive_tactic<I, T>(items: I, tactic: ListTactic, width: usize) -> De\n     let real_total = total_width + total_sep_len;\n \n     if real_total <= limit && !pre_line_comments &&\n-       !items\n-            .into_iter()\n-            .any(|item| item.as_ref().is_multiline()) {\n+       !items.into_iter().any(|item| item.as_ref().is_multiline()) {\n         DefinitiveListTactic::Horizontal\n     } else {\n         DefinitiveListTactic::Vertical\n@@ -536,10 +534,7 @@ pub fn struct_lit_shape(shape: Shape,\n         IndentStyle::Block => {\n             let shape = shape.block_indent(context.config.tab_spaces);\n             Shape {\n-                width: try_opt!(context\n-                                    .config\n-                                    .max_width\n-                                    .checked_sub(shape.indent.width())),\n+                width: try_opt!(context.config.max_width.checked_sub(shape.indent.width())),\n                 ..shape\n             }\n         }\n@@ -556,12 +551,7 @@ pub fn struct_lit_tactic(h_shape: Option<Shape>,\n     if let Some(h_shape) = h_shape {\n         let mut prelim_tactic = match (context.config.struct_lit_style, items.len()) {\n             (IndentStyle::Visual, 1) => ListTactic::HorizontalVertical,\n-            _ => {\n-                context\n-                    .config\n-                    .struct_lit_multiline_style\n-                    .to_list_tactic()\n-            }\n+            _ => context.config.struct_lit_multiline_style.to_list_tactic(),\n         };\n \n         if prelim_tactic == ListTactic::HorizontalVertical && items.len() > 1 {"}, {"sha": "f7f6eb197279f6dce5750d541c5bba36c6876ca0", "filename": "src/macros.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fba5af2a7d5efa2a324b52fd80648a04d6fabb3d/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba5af2a7d5efa2a324b52fd80648a04d6fabb3d/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=fba5af2a7d5efa2a324b52fd80648a04d6fabb3d", "patch": "@@ -196,15 +196,9 @@ pub fn convert_try_mac(mac: &ast::Mac, context: &RewriteContext) -> Option<ast::\n \n fn macro_style(mac: &ast::Mac, context: &RewriteContext) -> MacroStyle {\n     let snippet = context.snippet(mac.span);\n-    let paren_pos = snippet\n-        .find_uncommented(\"(\")\n-        .unwrap_or(usize::max_value());\n-    let bracket_pos = snippet\n-        .find_uncommented(\"[\")\n-        .unwrap_or(usize::max_value());\n-    let brace_pos = snippet\n-        .find_uncommented(\"{\")\n-        .unwrap_or(usize::max_value());\n+    let paren_pos = snippet.find_uncommented(\"(\").unwrap_or(usize::max_value());\n+    let bracket_pos = snippet.find_uncommented(\"[\").unwrap_or(usize::max_value());\n+    let brace_pos = snippet.find_uncommented(\"{\").unwrap_or(usize::max_value());\n \n     if paren_pos < bracket_pos && paren_pos < brace_pos {\n         MacroStyle::Parens"}, {"sha": "a50fee040d66dfdf47f09d0023755c0975898636", "filename": "src/patterns.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fba5af2a7d5efa2a324b52fd80648a04d6fabb3d/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba5af2a7d5efa2a324b52fd80648a04d6fabb3d/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=fba5af2a7d5efa2a324b52fd80648a04d6fabb3d", "patch": "@@ -102,10 +102,8 @@ impl Rewrite for Pat {\n                 let suffix = suffix.iter().map(|p| p.rewrite(context, shape));\n \n                 // Munge them together.\n-                let pats: Option<Vec<String>> = prefix\n-                    .chain(slice_pat.into_iter())\n-                    .chain(suffix)\n-                    .collect();\n+                let pats: Option<Vec<String>> =\n+                    prefix.chain(slice_pat.into_iter()).chain(suffix).collect();\n \n                 // Check that all the rewrites succeeded, and if not return None.\n                 let pats = try_opt!(pats);\n@@ -244,9 +242,7 @@ fn rewrite_tuple_pat(pats: &[ptr::P<ast::Pat>],\n                      context: &RewriteContext,\n                      shape: Shape)\n                      -> Option<String> {\n-    let mut pat_vec: Vec<_> = pats.into_iter()\n-        .map(|x| TuplePatField::Pat(x))\n-        .collect();\n+    let mut pat_vec: Vec<_> = pats.into_iter().map(|x| TuplePatField::Pat(x)).collect();\n \n     if let Some(pos) = dotdot_pos {\n         let prev = if pos == 0 {"}, {"sha": "5b128aa6b359c515c12feea895720e698eae4a24", "filename": "tests/system.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fba5af2a7d5efa2a324b52fd80648a04d6fabb3d/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba5af2a7d5efa2a324b52fd80648a04d6fabb3d/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=fba5af2a7d5efa2a324b52fd80648a04d6fabb3d", "patch": "@@ -28,9 +28,7 @@ const DIFF_CONTEXT_SIZE: usize = 3;\n fn get_path_string(dir_entry: io::Result<fs::DirEntry>) -> String {\n     let path = dir_entry.expect(\"Couldn't get DirEntry\").path();\n \n-    path.to_str()\n-        .expect(\"Couldn't stringify path\")\n-        .to_owned()\n+    path.to_str().expect(\"Couldn't stringify path\").to_owned()\n }\n \n // Integration tests. The files in the tests/source are formatted and compared\n@@ -337,8 +335,7 @@ fn handle_result(result: HashMap<String, String>,\n         let mut f = fs::File::open(&target).expect(\"Couldn't open target\");\n \n         let mut text = String::new();\n-        f.read_to_string(&mut text)\n-            .expect(\"Failed reading target\");\n+        f.read_to_string(&mut text).expect(\"Failed reading target\");\n \n         if fmt_text != text {\n             let diff = make_diff(&text, &fmt_text, DIFF_CONTEXT_SIZE);"}, {"sha": "2b14ec147d4e34342f7f88ae6443c3e1c5b15f8d", "filename": "tests/target/chains.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fba5af2a7d5efa2a324b52fd80648a04d6fabb3d/tests%2Ftarget%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba5af2a7d5efa2a324b52fd80648a04d6fabb3d/tests%2Ftarget%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains.rs?ref=fba5af2a7d5efa2a324b52fd80648a04d6fabb3d", "patch": "@@ -137,16 +137,7 @@ fn try_shorthand() {\n     let y = expr.kaas()?.test();\n     let loooooooooooooooooooooooooooooooooooooooooong =\n         does_this?.look?.good?.should_we_break?.after_the_first_question_mark?;\n-    let yyyy = expr?\n-        .another?\n-        .another?\n-        .another?\n-        .another?\n-        .another?\n-        .another?\n-        .another?\n-        .another?\n-        .test();\n+    let yyyy = expr?.another?.another?.another?.another?.another?.another?.another?.another?.test();\n     let zzzz = expr?.another?.another?.another?.another?;\n     let aaa = x??????????????????????????????????????????????????????????????????????????;\n "}, {"sha": "349d2c2f639ba3d9dfed1e0fea17f635939924d8", "filename": "tests/target/long_field_access.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fba5af2a7d5efa2a324b52fd80648a04d6fabb3d/tests%2Ftarget%2Flong_field_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba5af2a7d5efa2a324b52fd80648a04d6fabb3d/tests%2Ftarget%2Flong_field_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Flong_field_access.rs?ref=fba5af2a7d5efa2a324b52fd80648a04d6fabb3d", "patch": "@@ -1,6 +1,4 @@\n fn f() {\n-    block_flow\n-        .base\n-        .stacking_relative_position_of_display_port =\n+    block_flow.base.stacking_relative_position_of_display_port =\n         self.base.stacking_relative_position_of_display_port;\n }"}]}