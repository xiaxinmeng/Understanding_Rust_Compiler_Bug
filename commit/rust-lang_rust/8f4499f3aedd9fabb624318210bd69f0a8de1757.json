{"sha": "8f4499f3aedd9fabb624318210bd69f0a8de1757", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNDQ5OWYzYWVkZDlmYWJiNjI0MzE4MjEwYmQ2OWYwYThkZTE3NTc=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-19T04:54:20Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-19T06:11:00Z"}, "message": "new lint: comparing unit types (fixes #201)", "tree": {"sha": "2911f912e31e60dca9f2aef7b10c33757697a54c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2911f912e31e60dca9f2aef7b10c33757697a54c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f4499f3aedd9fabb624318210bd69f0a8de1757", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f4499f3aedd9fabb624318210bd69f0a8de1757", "html_url": "https://github.com/rust-lang/rust/commit/8f4499f3aedd9fabb624318210bd69f0a8de1757", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f4499f3aedd9fabb624318210bd69f0a8de1757/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ddc402127549acf398e174de00eba67bef98ec2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ddc402127549acf398e174de00eba67bef98ec2", "html_url": "https://github.com/rust-lang/rust/commit/7ddc402127549acf398e174de00eba67bef98ec2"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "e6a4d1be5145e70fdd1a66ba3165f59a3c12566f", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f4499f3aedd9fabb624318210bd69f0a8de1757/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/8f4499f3aedd9fabb624318210bd69f0a8de1757/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=8f4499f3aedd9fabb624318210bd69f0a8de1757", "patch": "@@ -45,6 +45,7 @@ string_add           | allow   | using `x + ..` where x is a `String`; suggests\n string_add_assign    | allow   | using `x = x + ..` where x is a `String`; suggests using `push_str()` instead\n string_to_string     | warn    | calling `String.to_string()` which is a no-op\n toplevel_ref_arg     | warn    | a function argument is declared `ref` (i.e. `fn foo(ref x: u8)`, but not `fn foo((ref x, ref y): (u8, u8))`)\n+unit_cmp             | warn    | comparing unit values (which is always `true` or `false`, respectively)\n zero_width_space     | deny    | using a zero-width space in a string literal, which is confusing\n \n To use, add the following lines to your Cargo.toml:"}, {"sha": "50ebbd6d9fdc99a42eeaf9a0e05244d34800dc37", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f4499f3aedd9fabb624318210bd69f0a8de1757/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f4499f3aedd9fabb624318210bd69f0a8de1757/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=8f4499f3aedd9fabb624318210bd69f0a8de1757", "patch": "@@ -64,6 +64,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box returns::ReturnPass as LintPassObject);\n     reg.register_lint_pass(box methods::MethodsPass as LintPassObject);\n     reg.register_lint_pass(box types::LetPass as LintPassObject);\n+    reg.register_lint_pass(box types::UnitCmp as LintPassObject);\n     reg.register_lint_pass(box loops::LoopsPass as LintPassObject);\n     reg.register_lint_pass(box lifetimes::LifetimePass as LintPassObject);\n     reg.register_lint_pass(box ranges::StepByZero as LintPassObject);\n@@ -105,6 +106,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         types::BOX_VEC,\n         types::LET_UNIT_VALUE,\n         types::LINKEDLIST,\n+        types::UNIT_CMP,\n         unicode::NON_ASCII_LITERAL,\n         unicode::ZERO_WIDTH_SPACE,\n     ]);"}, {"sha": "617c51fd961ee5f99f24c79568435c0afb6808d2", "filename": "src/types.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8f4499f3aedd9fabb624318210bd69f0a8de1757/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f4499f3aedd9fabb624318210bd69f0a8de1757/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=8f4499f3aedd9fabb624318210bd69f0a8de1757", "patch": "@@ -1,6 +1,7 @@\n use rustc::lint::*;\n use syntax::ast;\n use syntax::ast::*;\n+use syntax::ast_util::{is_comparison_binop, binop_to_string};\n use syntax::ptr::P;\n use rustc::middle::ty;\n use syntax::codemap::ExpnInfo;\n@@ -107,3 +108,31 @@ impl LintPass for LetPass {\n             |info| check_let_unit(cx, decl, info));\n     }\n }\n+\n+declare_lint!(pub UNIT_CMP, Warn,\n+              \"comparing unit values (which is always `true` or `false`, respectively)\");\n+\n+#[allow(missing_copy_implementations)]\n+pub struct UnitCmp;\n+\n+impl LintPass for UnitCmp {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(UNIT_CMP)\n+    }\n+\n+    fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n+        if let ExprBinary(ref cmp, ref left, _) = expr.node {\n+            let op = cmp.node;\n+            let sty = &cx.tcx.expr_ty(left).sty;\n+            if *sty == ty::TyTuple(vec![]) && is_comparison_binop(op) {\n+                let result = match op {\n+                    BiEq | BiLe | BiGe => \"true\",\n+                    _ => \"false\"\n+                };\n+                span_lint(cx, UNIT_CMP, expr.span, &format!(\n+                    \"{}-comparison of unit values detected. This will always be {}\",\n+                    binop_to_string(op), result));\n+            }\n+        }\n+    }\n+}"}, {"sha": "e246d9f390919a035a481b13afd0d4bde1463053", "filename": "tests/compile-fail/unit_cmp.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8f4499f3aedd9fabb624318210bd69f0a8de1757/tests%2Fcompile-fail%2Funit_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f4499f3aedd9fabb624318210bd69f0a8de1757/tests%2Fcompile-fail%2Funit_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funit_cmp.rs?ref=8f4499f3aedd9fabb624318210bd69f0a8de1757", "patch": "@@ -0,0 +1,17 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(unit_cmp)]\n+\n+fn main() {\n+    // this is fine\n+    if true == false {\n+    }\n+\n+    // this warns\n+    if { true; } == { false; } {  //~ERROR ==-comparison of unit values detected. This will always be true\n+    }\n+\n+    if { true; } > { false; } {  //~ERROR >-comparison of unit values detected. This will always be false\n+    }\n+}"}]}