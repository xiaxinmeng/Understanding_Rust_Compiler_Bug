{"sha": "802a826a57eb84ac24dccc936d6398890efbcab8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwMmE4MjZhNTdlYjg0YWMyNGRjY2M5MzZkNjM5ODg5MGVmYmNhYjg=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertaylorj@gmail.com", "date": "2017-02-22T07:41:04Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertaylorj@gmail.com", "date": "2017-02-22T07:41:04Z"}, "message": "Stabilize static_recursion", "tree": {"sha": "6965ca995695de7142bbc8e8ba26c623fa9866db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6965ca995695de7142bbc8e8ba26c623fa9866db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/802a826a57eb84ac24dccc936d6398890efbcab8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/802a826a57eb84ac24dccc936d6398890efbcab8", "html_url": "https://github.com/rust-lang/rust/commit/802a826a57eb84ac24dccc936d6398890efbcab8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/802a826a57eb84ac24dccc936d6398890efbcab8/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc6f092c21a7a7249a9f8860f3cd10160aa36c02", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc6f092c21a7a7249a9f8860f3cd10160aa36c02", "html_url": "https://github.com/rust-lang/rust/commit/fc6f092c21a7a7249a9f8860f3cd10160aa36c02"}], "stats": {"total": 102, "additions": 8, "deletions": 94}, "files": [{"sha": "fc05471ead30b02040f85d148369f7b2f5169d9e", "filename": "src/librustc_passes/static_recursion.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/802a826a57eb84ac24dccc936d6398890efbcab8/src%2Flibrustc_passes%2Fstatic_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802a826a57eb84ac24dccc936d6398890efbcab8/src%2Flibrustc_passes%2Fstatic_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstatic_recursion.rs?ref=802a826a57eb84ac24dccc936d6398890efbcab8", "patch": "@@ -18,7 +18,6 @@ use rustc::hir::def::{Def, CtorKind};\n use rustc::util::nodemap::{NodeMap, NodeSet};\n \n use syntax::ast;\n-use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax_pos::Span;\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir;\n@@ -43,7 +42,7 @@ impl<'a, 'hir: 'a> Visitor<'hir> for CheckCrateVisitor<'a, 'hir> {\n         match it.node {\n             hir::ItemStatic(..) |\n             hir::ItemConst(..) => {\n-                let mut recursion_visitor = CheckItemRecursionVisitor::new(self, &it.span);\n+                let mut recursion_visitor = CheckItemRecursionVisitor::new(self);\n                 recursion_visitor.visit_item(it);\n             }\n             hir::ItemEnum(ref enum_def, ref generics) => {\n@@ -52,8 +51,7 @@ impl<'a, 'hir: 'a> Visitor<'hir> for CheckCrateVisitor<'a, 'hir> {\n                 // less redundant output.\n                 for variant in &enum_def.variants {\n                     if let Some(_) = variant.node.disr_expr {\n-                        let mut recursion_visitor = CheckItemRecursionVisitor::new(self,\n-                                                                                   &variant.span);\n+                        let mut recursion_visitor = CheckItemRecursionVisitor::new(self);\n                         recursion_visitor.populate_enum_discriminants(enum_def);\n                         recursion_visitor.visit_variant(variant, generics, it.id);\n                     }\n@@ -68,7 +66,7 @@ impl<'a, 'hir: 'a> Visitor<'hir> for CheckCrateVisitor<'a, 'hir> {\n         match ti.node {\n             hir::TraitItemKind::Const(_, ref default) => {\n                 if let Some(_) = *default {\n-                    let mut recursion_visitor = CheckItemRecursionVisitor::new(self, &ti.span);\n+                    let mut recursion_visitor = CheckItemRecursionVisitor::new(self);\n                     recursion_visitor.visit_trait_item(ti);\n                 }\n             }\n@@ -80,7 +78,7 @@ impl<'a, 'hir: 'a> Visitor<'hir> for CheckCrateVisitor<'a, 'hir> {\n     fn visit_impl_item(&mut self, ii: &'hir hir::ImplItem) {\n         match ii.node {\n             hir::ImplItemKind::Const(..) => {\n-                let mut recursion_visitor = CheckItemRecursionVisitor::new(self, &ii.span);\n+                let mut recursion_visitor = CheckItemRecursionVisitor::new(self);\n                 recursion_visitor.visit_impl_item(ii);\n             }\n             _ => {}\n@@ -105,7 +103,6 @@ pub fn check_crate<'hir>(sess: &Session, hir_map: &hir_map::Map<'hir>) -> Compil\n }\n \n struct CheckItemRecursionVisitor<'a, 'b: 'a, 'hir: 'b> {\n-    root_span: &'b Span,\n     sess: &'b Session,\n     hir_map: &'b hir_map::Map<'hir>,\n     discriminant_map: &'a mut NodeMap<Option<hir::BodyId>>,\n@@ -114,9 +111,8 @@ struct CheckItemRecursionVisitor<'a, 'b: 'a, 'hir: 'b> {\n }\n \n impl<'a, 'b: 'a, 'hir: 'b> CheckItemRecursionVisitor<'a, 'b, 'hir> {\n-    fn new(v: &'a mut CheckCrateVisitor<'b, 'hir>, span: &'b Span) -> Self {\n+    fn new(v: &'a mut CheckCrateVisitor<'b, 'hir>) -> Self {\n         CheckItemRecursionVisitor {\n-            root_span: span,\n             sess: v.sess,\n             hir_map: v.hir_map,\n             discriminant_map: &mut v.discriminant_map,\n@@ -143,15 +139,7 @@ impl<'a, 'b: 'a, 'hir: 'b> CheckItemRecursionVisitor<'a, 'b, 'hir> {\n                     false\n                 }\n             });\n-            if any_static {\n-                if !self.sess.features.borrow().static_recursion {\n-                    emit_feature_err(&self.sess.parse_sess,\n-                                     \"static_recursion\",\n-                                     *self.root_span,\n-                                     GateIssue::Language,\n-                                     \"recursive static\");\n-                }\n-            } else {\n+            if !any_static {\n                 struct_span_err!(self.sess, span, E0265, \"recursive constant\")\n                     .span_label(span, &format!(\"recursion not allowed in constant\"))\n                     .emit();"}, {"sha": "e3d3c089739e03a0d18b53e3b784b9c41ab67918", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/802a826a57eb84ac24dccc936d6398890efbcab8/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802a826a57eb84ac24dccc936d6398890efbcab8/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=802a826a57eb84ac24dccc936d6398890efbcab8", "patch": "@@ -197,9 +197,6 @@ declare_features! (\n     // rustc internal\n     (active, prelude_import, \"1.2.0\", None),\n \n-    // Allows the definition recursive static items.\n-    (active, static_recursion, \"1.3.0\", Some(29719)),\n-\n     // Allows default type parameters to influence type inference.\n     (active, default_type_parameter_fallback, \"1.3.0\", Some(27336)),\n \n@@ -384,6 +381,8 @@ declare_features! (\n     (accepted, static_in_const, \"1.17.0\", Some(35897)),\n     // Allows field shorthands (`x` meaning `x: x`) in struct literal expressions.\n     (accepted, field_init_shorthand, \"1.17.0\", Some(37340)),\n+    // Allows the definition recursive static items.\n+    (accepted, static_recursion, \"1.17.0\", Some(29719)),\n );\n // (changing above list without updating src/doc/reference.md makes @cmr sad)\n "}, {"sha": "bd20c891d8ed3f2a01a7b8fad162ceba0a5e8b14", "filename": "src/test/compile-fail/feature-gate-static_recursion.rs", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/fc6f092c21a7a7249a9f8860f3cd10160aa36c02/src%2Ftest%2Fcompile-fail%2Ffeature-gate-static_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6f092c21a7a7249a9f8860f3cd10160aa36c02/src%2Ftest%2Fcompile-fail%2Ffeature-gate-static_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-static_recursion.rs?ref=fc6f092c21a7a7249a9f8860f3cd10160aa36c02", "patch": "@@ -1,49 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-static mut S: *const u8 = unsafe { &S as *const *const u8 as *const u8 };\n-//~^ ERROR recursive static (see issue #29719)\n-\n-struct StaticDoubleLinked {\n-    prev: &'static StaticDoubleLinked,\n-    next: &'static StaticDoubleLinked,\n-    data: i32,\n-    head: bool,\n-}\n-\n-static L1: StaticDoubleLinked = StaticDoubleLinked{prev: &L3, next: &L2, data: 1, head: true};\n-//~^ ERROR recursive static (see issue #29719)\n-//~^^ ERROR recursive static (see issue #29719)\n-//~^^^ ERROR recursive static (see issue #29719)\n-static L2: StaticDoubleLinked = StaticDoubleLinked{prev: &L1, next: &L3, data: 2, head: false};\n-static L3: StaticDoubleLinked = StaticDoubleLinked{prev: &L2, next: &L1, data: 3, head: false};\n-\n-\n-pub fn main() {\n-    unsafe { assert_eq!(S, *(S as *const *const u8)); }\n-\n-    let mut test_vec = Vec::new();\n-    let mut cur = &L1;\n-    loop {\n-        test_vec.push(cur.data);\n-        cur = cur.next;\n-        if cur.head { break }\n-    }\n-    assert_eq!(&test_vec, &[1,2,3]);\n-\n-    let mut test_vec = Vec::new();\n-    let mut cur = &L1;\n-    loop {\n-        cur = cur.prev;\n-        test_vec.push(cur.data);\n-        if cur.head { break }\n-    }\n-    assert_eq!(&test_vec, &[3,2,1]);\n-}"}, {"sha": "3bc8413cbca73b1a16a9ca3137e576bfdebb6e9b", "filename": "src/test/compile-fail/issue-3008-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/802a826a57eb84ac24dccc936d6398890efbcab8/src%2Ftest%2Fcompile-fail%2Fissue-3008-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802a826a57eb84ac24dccc936d6398890efbcab8/src%2Ftest%2Fcompile-fail%2Fissue-3008-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3008-2.rs?ref=802a826a57eb84ac24dccc936d6398890efbcab8", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(static_recursion)]\n-\n enum foo { foo_(bar) }\n struct bar { x: bar }\n //~^ ERROR E0072"}, {"sha": "29b5689fa93fdcf12d51dd553fc4e7ab7fcedc6e", "filename": "src/test/compile-fail/static-recursion-gate.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fc6f092c21a7a7249a9f8860f3cd10160aa36c02/src%2Ftest%2Fcompile-fail%2Fstatic-recursion-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6f092c21a7a7249a9f8860f3cd10160aa36c02/src%2Ftest%2Fcompile-fail%2Fstatic-recursion-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-recursion-gate.rs?ref=fc6f092c21a7a7249a9f8860f3cd10160aa36c02", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-static mut S: *const u8 = unsafe { &S as *const *const u8 as *const u8 };\n-//~^ ERROR recursive static\n-\n-pub fn main() {\n-    unsafe { assert_eq!(S, *(S as *const *const u8)); }\n-}"}, {"sha": "c3a0dc67e83edf189a810ef6a053d3fe02cc42a8", "filename": "src/test/run-pass/issue-2063-resource.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/802a826a57eb84ac24dccc936d6398890efbcab8/src%2Ftest%2Frun-pass%2Fissue-2063-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802a826a57eb84ac24dccc936d6398890efbcab8/src%2Ftest%2Frun-pass%2Fissue-2063-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2063-resource.rs?ref=802a826a57eb84ac24dccc936d6398890efbcab8", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(static_recursion)]\n-\n // test that autoderef of a type like this does not\n // cause compiler to loop.  Note that no instances\n // of such a type could ever be constructed."}, {"sha": "5be4f8e8e73848813eeb780607f25fb646dec75d", "filename": "src/test/run-pass/issue-2063.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/802a826a57eb84ac24dccc936d6398890efbcab8/src%2Ftest%2Frun-pass%2Fissue-2063.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802a826a57eb84ac24dccc936d6398890efbcab8/src%2Ftest%2Frun-pass%2Fissue-2063.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2063.rs?ref=802a826a57eb84ac24dccc936d6398890efbcab8", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(static_recursion)]\n-\n // test that autoderef of a type like this does not\n // cause compiler to loop.  Note that no instances\n // of such a type could ever be constructed."}, {"sha": "4a6ba984eef0a085ecb5f4d33a76d9fd4db8392e", "filename": "src/test/run-pass/static-recursive.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/802a826a57eb84ac24dccc936d6398890efbcab8/src%2Ftest%2Frun-pass%2Fstatic-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802a826a57eb84ac24dccc936d6398890efbcab8/src%2Ftest%2Frun-pass%2Fstatic-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-recursive.rs?ref=802a826a57eb84ac24dccc936d6398890efbcab8", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(static_recursion)]\n-\n static mut S: *const u8 = unsafe { &S as *const *const u8 as *const u8 };\n \n struct StaticDoubleLinked {"}]}