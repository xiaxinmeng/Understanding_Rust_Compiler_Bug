{"sha": "cfd89c407598673bf55ea11525b1398c53cd3725", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmZDg5YzQwNzU5ODY3M2JmNTVlYTExNTI1YjEzOThjNTNjZDM3MjU=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-06-30T15:25:16Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-07-23T23:56:22Z"}, "message": "std: remove os::as_c_charp", "tree": {"sha": "f2d68b46ee968a5088e99ca4bc940f513bd28ff6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2d68b46ee968a5088e99ca4bc940f513bd28ff6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfd89c407598673bf55ea11525b1398c53cd3725", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfd89c407598673bf55ea11525b1398c53cd3725", "html_url": "https://github.com/rust-lang/rust/commit/cfd89c407598673bf55ea11525b1398c53cd3725", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfd89c407598673bf55ea11525b1398c53cd3725/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ad815e063e8c7785cc10ea1afac55a19ea4e51a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ad815e063e8c7785cc10ea1afac55a19ea4e51a", "html_url": "https://github.com/rust-lang/rust/commit/9ad815e063e8c7785cc10ea1afac55a19ea4e51a"}], "stats": {"total": 83, "additions": 39, "deletions": 44}, "files": [{"sha": "6335588db503c8eebce57e0ccf5bb860292b933e", "filename": "src/libstd/io.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cfd89c407598673bf55ea11525b1398c53cd3725/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd89c407598673bf55ea11525b1398c53cd3725/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=cfd89c407598673bf55ea11525b1398c53cd3725", "patch": "@@ -63,7 +63,7 @@ use iterator::IteratorUtil;\n use ptr;\n use result;\n use str;\n-use str::StrSlice;\n+use str::{StrSlice, OwnedStr, StrUtil};\n use to_str::ToStr;\n use uint;\n use vec;\n@@ -1031,17 +1031,16 @@ pub fn stdin() -> @Reader {\n }\n \n pub fn file_reader(path: &Path) -> Result<@Reader, ~str> {\n-    unsafe {\n-        let f = os::as_c_charp(path.to_str(), |pathbuf| {\n-            os::as_c_charp(\"r\", |modebuf|\n-                libc::fopen(pathbuf, modebuf)\n-            )\n-        });\n-        return if f as uint == 0u { result::Err(~\"error opening \"\n-                                                + path.to_str()) }\n-        else {\n-            result::Ok(FILE_reader(f, true))\n+    let f = do path.to_str().as_c_str |pathbuf| {\n+        do \"r\".as_c_str |modebuf| {\n+            unsafe { libc::fopen(pathbuf, modebuf as *libc::c_char) }\n         }\n+    };\n+\n+    if f as uint == 0u {\n+        result::Err(~\"error opening \" + path.to_str())\n+    } else {\n+        result::Ok(FILE_reader(f, true))\n     }\n }\n \n@@ -1282,7 +1281,7 @@ pub fn mk_file_writer(path: &Path, flags: &[FileFlag])\n         }\n     }\n     let fd = unsafe {\n-        do os::as_c_charp(path.to_str()) |pathbuf| {\n+        do path.to_str().as_c_str |pathbuf| {\n             libc::open(pathbuf, fflags,\n                        (S_IRUSR | S_IWUSR) as c_int)\n         }\n@@ -1567,8 +1566,8 @@ pub fn file_writer(path: &Path, flags: &[FileFlag]) -> Result<@Writer, ~str> {\n // FIXME: fileflags // #2004\n pub fn buffered_file_writer(path: &Path) -> Result<@Writer, ~str> {\n     unsafe {\n-        let f = do os::as_c_charp(path.to_str()) |pathbuf| {\n-            do os::as_c_charp(\"w\") |modebuf| {\n+        let f = do path.to_str().as_c_str |pathbuf| {\n+            do \"w\".as_c_str |modebuf| {\n                 libc::fopen(pathbuf, modebuf)\n             }\n         };"}, {"sha": "2c3ce86ef78c448c1649a8c9186b15fc7a004edc", "filename": "src/libstd/os.rs", "status": "modified", "additions": 26, "deletions": 30, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/cfd89c407598673bf55ea11525b1398c53cd3725/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd89c407598673bf55ea11525b1398c53cd3725/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=cfd89c407598673bf55ea11525b1398c53cd3725", "patch": "@@ -87,10 +87,6 @@ pub fn getcwd() -> Path {\n \n // FIXME: move these to str perhaps? #2620\n \n-pub fn as_c_charp<T>(s: &str, f: &fn(*c_char) -> T) -> T {\n-    str::as_c_str(s, |b| f(b as *c_char))\n-}\n-\n pub fn fill_charp_buf(f: &fn(*mut c_char, size_t) -> bool)\n     -> Option<~str> {\n     let mut buf = vec::from_elem(TMPBUF_SZ, 0u8 as c_char);\n@@ -335,10 +331,10 @@ pub fn unsetenv(n: &str) {\n }\n \n pub fn fdopen(fd: c_int) -> *FILE {\n-    unsafe {\n-        return do as_c_charp(\"r\") |modebuf| {\n+    do \"r\".as_c_str |modebuf| {\n+        unsafe {\n             libc::fdopen(fd, modebuf)\n-        };\n+        }\n     }\n }\n \n@@ -471,7 +467,7 @@ pub fn self_exe_path() -> Option<Path> {\n             let mut path_str = str::with_capacity(TMPBUF_SZ);\n             let len = do str::as_c_str(path_str) |buf| {\n                 let buf = buf as *mut c_char;\n-                do as_c_charp(\"/proc/self/exe\") |proc_self_buf| {\n+                do \"/proc/self/exe\".as_c_str |proc_self_buf| {\n                     readlink(proc_self_buf, buf, TMPBUF_SZ as size_t)\n                 }\n             };\n@@ -654,9 +650,9 @@ pub fn make_dir(p: &Path, mode: c_int) -> bool {\n \n     #[cfg(unix)]\n     fn mkdir(p: &Path, mode: c_int) -> bool {\n-        unsafe {\n-            do as_c_charp(p.to_str()) |c| {\n-                libc::mkdir(c, mode as libc::mode_t) == (0 as c_int)\n+        do p.to_str().as_c_str |buf| {\n+            unsafe {\n+                libc::mkdir(buf, mode as libc::mode_t) == (0 as c_int)\n             }\n         }\n     }\n@@ -830,10 +826,10 @@ pub fn remove_dir(p: &Path) -> bool {\n \n     #[cfg(unix)]\n     fn rmdir(p: &Path) -> bool {\n-        unsafe {\n-            return do as_c_charp(p.to_str()) |buf| {\n+        do p.to_str().as_c_str |buf| {\n+            unsafe {\n                 libc::rmdir(buf) == (0 as c_int)\n-            };\n+            }\n         }\n     }\n }\n@@ -855,10 +851,10 @@ pub fn change_dir(p: &Path) -> bool {\n \n     #[cfg(unix)]\n     fn chdir(p: &Path) -> bool {\n-        unsafe {\n-            return do as_c_charp(p.to_str()) |buf| {\n+        do p.to_str().as_c_str |buf| {\n+            unsafe {\n                 libc::chdir(buf) == (0 as c_int)\n-            };\n+            }\n         }\n     }\n }\n@@ -883,8 +879,8 @@ pub fn copy_file(from: &Path, to: &Path) -> bool {\n     #[cfg(unix)]\n     fn do_copy_file(from: &Path, to: &Path) -> bool {\n         unsafe {\n-            let istream = do as_c_charp(from.to_str()) |fromp| {\n-                do as_c_charp(\"rb\") |modebuf| {\n+            let istream = do from.to_str().as_c_str |fromp| {\n+                do \"rb\".as_c_str |modebuf| {\n                     libc::fopen(fromp, modebuf)\n                 }\n             };\n@@ -895,8 +891,8 @@ pub fn copy_file(from: &Path, to: &Path) -> bool {\n             let from_mode = from.get_mode().expect(\"copy_file: couldn't get permissions \\\n                                                     for source file\");\n \n-            let ostream = do as_c_charp(to.to_str()) |top| {\n-                do as_c_charp(\"w+b\") |modebuf| {\n+            let ostream = do to.to_str().as_c_str |top| {\n+                do \"w+b\".as_c_str |modebuf| {\n                     libc::fopen(top, modebuf)\n                 }\n             };\n@@ -955,9 +951,9 @@ pub fn remove_file(p: &Path) -> bool {\n     #[cfg(unix)]\n     fn unlink(p: &Path) -> bool {\n         unsafe {\n-            return do as_c_charp(p.to_str()) |buf| {\n+            do p.to_str().as_c_str |buf| {\n                 libc::unlink(buf) == (0 as c_int)\n-            };\n+            }\n         }\n     }\n }\n@@ -1703,7 +1699,7 @@ mod tests {\n     use libc;\n     use option::Some;\n     use option;\n-    use os::{as_c_charp, env, getcwd, getenv, make_absolute, real_args};\n+    use os::{env, getcwd, getenv, make_absolute, real_args};\n     use os::{remove_file, setenv, unsetenv};\n     use os;\n     use path::Path;\n@@ -1941,8 +1937,8 @@ mod tests {\n           let out = tempdir.push(\"out.txt\");\n \n           /* Write the temp input file */\n-            let ostream = do as_c_charp(in.to_str()) |fromp| {\n-                do as_c_charp(\"w+b\") |modebuf| {\n+            let ostream = do in.to_str().as_c_str |fromp| {\n+                do \"w+b\".as_c_str |modebuf| {\n                     libc::fopen(fromp, modebuf)\n                 }\n           };\n@@ -2020,16 +2016,16 @@ mod tests {\n            }\n         }\n \n-        let p = tmpdir().push(\"mmap_file.tmp\");\n+        let path = tmpdir().push(\"mmap_file.tmp\");\n         let size = page_size() * 2;\n-        remove_file(&p);\n+        remove_file(&path);\n \n         let fd = unsafe {\n-            let fd = do as_c_charp(p.to_str()) |path| {\n+            let fd = do path.to_str().as_c_str |path| {\n                 open(path, O_CREAT | O_RDWR | O_TRUNC, S_IRUSR | S_IWUSR)\n             };\n             lseek_(fd, size);\n-            do as_c_charp(\"x\") |x| {\n+            do \"x\".as_c_str |x| {\n                 assert!(write(fd, x as *c_void, 1) == 1);\n             }\n             fd"}]}