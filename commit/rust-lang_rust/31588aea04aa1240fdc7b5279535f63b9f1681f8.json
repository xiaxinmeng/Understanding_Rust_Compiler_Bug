{"sha": "31588aea04aa1240fdc7b5279535f63b9f1681f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNTg4YWVhMDRhYTEyNDBmZGM3YjUyNzk1MzVmNjNiOWYxNjgxZjg=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-29T15:17:08Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-29T15:17:08Z"}, "message": "Remove fragment kind knowledge from builtin macros", "tree": {"sha": "21c155b7d95fd393765238aa09b99a895341854a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21c155b7d95fd393765238aa09b99a895341854a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31588aea04aa1240fdc7b5279535f63b9f1681f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31588aea04aa1240fdc7b5279535f63b9f1681f8", "html_url": "https://github.com/rust-lang/rust/commit/31588aea04aa1240fdc7b5279535f63b9f1681f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31588aea04aa1240fdc7b5279535f63b9f1681f8/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "247faf271b9098624cb0b09dd4914da66497dd5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/247faf271b9098624cb0b09dd4914da66497dd5a", "html_url": "https://github.com/rust-lang/rust/commit/247faf271b9098624cb0b09dd4914da66497dd5a"}], "stats": {"total": 58, "additions": 35, "deletions": 23}, "files": [{"sha": "0b310ba2fc106de5f47358d90a0b03906f0b7256", "filename": "crates/hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/31588aea04aa1240fdc7b5279535f63b9f1681f8/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31588aea04aa1240fdc7b5279535f63b9f1681f8/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=31588aea04aa1240fdc7b5279535f63b9f1681f8", "patch": "@@ -8,7 +8,6 @@ use base_db::{AnchoredPath, Edition, FileId};\n use cfg::CfgExpr;\n use either::Either;\n use mbe::{parse_exprs_with_sep, parse_to_token_tree, ExpandResult};\n-use parser::FragmentKind;\n use syntax::ast::{self, AstToken};\n \n macro_rules! register_builtin {\n@@ -47,7 +46,7 @@ macro_rules! register_builtin {\n                 let expander = match *self {\n                     $( EagerExpander::$e_kind => $e_expand, )*\n                 };\n-                expander(db,arg_id,tt)\n+                expander(db, arg_id, tt)\n             }\n         }\n \n@@ -64,14 +63,13 @@ macro_rules! register_builtin {\n #[derive(Debug)]\n pub struct ExpandedEager {\n     pub(crate) subtree: tt::Subtree,\n-    pub(crate) fragment: FragmentKind,\n     /// The included file ID of the include macro.\n     pub(crate) included_file: Option<FileId>,\n }\n \n impl ExpandedEager {\n-    fn new(subtree: tt::Subtree, fragment: FragmentKind) -> Self {\n-        ExpandedEager { subtree, fragment, included_file: None }\n+    fn new(subtree: tt::Subtree) -> Self {\n+        ExpandedEager { subtree, included_file: None }\n     }\n }\n \n@@ -340,7 +338,7 @@ fn compile_error_expand(\n         _ => mbe::ExpandError::BindingError(\"`compile_error!` argument must be a string\".into()),\n     };\n \n-    ExpandResult { value: Some(ExpandedEager::new(quote! {}, FragmentKind::Items)), err: Some(err) }\n+    ExpandResult { value: Some(ExpandedEager::new(quote! {})), err: Some(err) }\n }\n \n fn concat_expand(\n@@ -371,7 +369,7 @@ fn concat_expand(\n             }\n         }\n     }\n-    ExpandResult { value: Some(ExpandedEager::new(quote!(#text), FragmentKind::Expr)), err }\n+    ExpandResult { value: Some(ExpandedEager::new(quote!(#text))), err }\n }\n \n fn concat_idents_expand(\n@@ -393,7 +391,7 @@ fn concat_idents_expand(\n         }\n     }\n     let ident = tt::Ident { text: ident.into(), id: tt::TokenId::unspecified() };\n-    ExpandResult { value: Some(ExpandedEager::new(quote!(#ident), FragmentKind::Expr)), err }\n+    ExpandResult { value: Some(ExpandedEager::new(quote!(#ident))), err }\n }\n \n fn relative_file(\n@@ -442,14 +440,7 @@ fn include_expand(\n \n     match res {\n         Ok((subtree, file_id)) => {\n-            // FIXME:\n-            // Handle include as expression\n-\n-            ExpandResult::ok(Some(ExpandedEager {\n-                subtree,\n-                fragment: FragmentKind::Items,\n-                included_file: Some(file_id),\n-            }))\n+            ExpandResult::ok(Some(ExpandedEager { subtree, included_file: Some(file_id) }))\n         }\n         Err(e) => ExpandResult::only_err(e),\n     }\n@@ -472,7 +463,7 @@ fn include_bytes_expand(\n             id: tt::TokenId::unspecified(),\n         }))],\n     };\n-    ExpandResult::ok(Some(ExpandedEager::new(res, FragmentKind::Expr)))\n+    ExpandResult::ok(Some(ExpandedEager::new(res)))\n }\n \n fn include_str_expand(\n@@ -492,14 +483,14 @@ fn include_str_expand(\n     let file_id = match relative_file(db, arg_id.into(), &path, true) {\n         Ok(file_id) => file_id,\n         Err(_) => {\n-            return ExpandResult::ok(Some(ExpandedEager::new(quote!(\"\"), FragmentKind::Expr)));\n+            return ExpandResult::ok(Some(ExpandedEager::new(quote!(\"\"))));\n         }\n     };\n \n     let text = db.file_text(file_id);\n     let text = &*text;\n \n-    ExpandResult::ok(Some(ExpandedEager::new(quote!(#text), FragmentKind::Expr)))\n+    ExpandResult::ok(Some(ExpandedEager::new(quote!(#text))))\n }\n \n fn get_env_inner(db: &dyn AstDatabase, arg_id: MacroCallId, key: &str) -> Option<String> {\n@@ -535,7 +526,7 @@ fn env_expand(\n     });\n     let expanded = quote! { #s };\n \n-    ExpandResult { value: Some(ExpandedEager::new(expanded, FragmentKind::Expr)), err }\n+    ExpandResult { value: Some(ExpandedEager::new(expanded)), err }\n }\n \n fn option_env_expand(\n@@ -553,7 +544,7 @@ fn option_env_expand(\n         Some(s) => quote! { std::option::Some(#s) },\n     };\n \n-    ExpandResult::ok(Some(ExpandedEager::new(expanded, FragmentKind::Expr)))\n+    ExpandResult::ok(Some(ExpandedEager::new(expanded)))\n }\n \n #[cfg(test)]\n@@ -565,6 +556,7 @@ mod tests {\n     };\n     use base_db::{fixture::WithFixture, SourceDatabase};\n     use expect_test::{expect, Expect};\n+    use parser::FragmentKind;\n     use std::sync::Arc;\n     use syntax::ast::NameOwner;\n \n@@ -617,6 +609,7 @@ mod tests {\n                     local_inner: false,\n                 };\n \n+                let fragment = crate::to_fragment_kind(&macro_call);\n                 let args = macro_call.token_tree().unwrap();\n                 let parsed_args = mbe::ast_to_token_tree(&args).0;\n                 let call_id = AstId::new(file_id.into(), ast_id_map.ast_id(&macro_call));\n@@ -639,7 +632,7 @@ mod tests {\n                         arg_or_expansion: Arc::new(expanded.subtree),\n                         included_file: expanded.included_file,\n                     }),\n-                    kind: MacroCallKind::FnLike { ast_id: call_id, fragment: expanded.fragment },\n+                    kind: MacroCallKind::FnLike { ast_id: call_id, fragment },\n                 };\n \n                 let id: MacroCallId = db.intern_macro(loc).into();"}, {"sha": "14af628a1fa729e44b4f577591cffdc82e46572d", "filename": "crates/hir_expand/src/eager.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31588aea04aa1240fdc7b5279535f63b9f1681f8/crates%2Fhir_expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31588aea04aa1240fdc7b5279535f63b9f1681f8/crates%2Fhir_expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Feager.rs?ref=31588aea04aa1240fdc7b5279535f63b9f1681f8", "patch": "@@ -113,6 +113,7 @@ pub fn expand_eager_macro(\n \n     let ast_map = db.ast_id_map(macro_call.file_id);\n     let call_id = InFile::new(macro_call.file_id, ast_map.ast_id(&macro_call.value));\n+    let fragment = crate::to_fragment_kind(&macro_call.value);\n \n     // Note:\n     // When `lazy_expand` is called, its *parent* file must be already exists.\n@@ -152,7 +153,7 @@ pub fn expand_eager_macro(\n                 arg_or_expansion: Arc::new(expanded.subtree),\n                 included_file: expanded.included_file,\n             }),\n-            kind: MacroCallKind::FnLike { ast_id: call_id, fragment: expanded.fragment },\n+            kind: MacroCallKind::FnLike { ast_id: call_id, fragment },\n         };\n \n         Ok(db.intern_macro(loc))"}, {"sha": "7647bb08b71cfed86cbde177619aab5e5bccc557", "filename": "crates/hir_ty/src/tests/macros.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/31588aea04aa1240fdc7b5279535f63b9f1681f8/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31588aea04aa1240fdc7b5279535f63b9f1681f8/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=31588aea04aa1240fdc7b5279535f63b9f1681f8", "patch": "@@ -751,6 +751,24 @@ fn bar() -> u32 {0}\n     );\n }\n \n+#[test]\n+fn infer_builtin_macros_include_expression() {\n+    check_types(\n+        r#\"\n+//- /main.rs\n+#[rustc_builtin_macro]\n+macro_rules! include {() => {}}\n+fn main() {\n+    let i = include!(\"bla.rs\");\n+    i;\n+  //^ i32\n+}\n+//- /bla.rs\n+0\n+        \"#,\n+    )\n+}\n+\n #[test]\n fn infer_builtin_macros_include_child_mod() {\n     check_types("}]}