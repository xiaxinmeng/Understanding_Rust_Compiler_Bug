{"sha": "d8c9c9dd4f49fbb78f82c7407daff5e403b6f274", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4YzljOWRkNGY0OWZiYjc4ZjgyYzc0MDdkYWZmNWU0MDNiNmYyNzQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-23T13:21:15Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-23T13:21:15Z"}, "message": "update README for some tracing being available on nightlies", "tree": {"sha": "89e7d2488fbf16158ca677804018d99c33e19263", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89e7d2488fbf16158ca677804018d99c33e19263"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8c9c9dd4f49fbb78f82c7407daff5e403b6f274", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8c9c9dd4f49fbb78f82c7407daff5e403b6f274", "html_url": "https://github.com/rust-lang/rust/commit/d8c9c9dd4f49fbb78f82c7407daff5e403b6f274", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8c9c9dd4f49fbb78f82c7407daff5e403b6f274/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f659ed507761563748e1ee286adc2aea685923c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f659ed507761563748e1ee286adc2aea685923c", "html_url": "https://github.com/rust-lang/rust/commit/4f659ed507761563748e1ee286adc2aea685923c"}], "stats": {"total": 45, "additions": 24, "deletions": 21}, "files": [{"sha": "879d27dc97e079c896ed0569cbf2fbd3d88c3eff", "filename": "README.md", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d8c9c9dd4f49fbb78f82c7407daff5e403b6f274/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/d8c9c9dd4f49fbb78f82c7407daff5e403b6f274/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=d8c9c9dd4f49fbb78f82c7407daff5e403b6f274", "patch": "@@ -90,15 +90,15 @@ things (like adding support for a new intrinsic) can be done by working just on\n the miri side.\n \n To prepare, make sure you are using a nightly Rust compiler.  You also need to\n-set up a libstd that enables execution with miri:\n+set up a libstd that enables execution with Miri:\n \n ```sh\n rustup override set nightly # or the nightly in `rust-version`\n cargo run --bin cargo-miri -- miri setup\n ```\n \n The last command should end in printing the directory where the libstd was\n-built.  Set that as your MIRI_SYSROOT environment variable:\n+built.  Set that as your `MIRI_SYSROOT` environment variable:\n \n ```sh\n export MIRI_SYSROOT=~/.cache/miri/HOST # or whatever the previous command said\n@@ -109,7 +109,7 @@ export MIRI_SYSROOT=~/.cache/miri/HOST # or whatever the previous command said\n Now you can run Miri directly, without going through `cargo miri`:\n \n ```sh\n-cargo run tests/run-pass-fullmir/format.rs # or whatever test you like\n+cargo run tests/run-pass/format.rs # or whatever test you like\n ```\n \n You can also run the test suite with `cargo test --release`.  `cargo test\n@@ -120,14 +120,33 @@ less time.\n \n Now you are set up!  You can write a failing test case, and tweak miri until it\n fails no more.\n+You can get a trace of which MIR statements are being executed by setting the\n+`MIRI_LOG` environment variable.  For example:\n+\n+```sh\n+MIRI_LOG=info cargo run tests/run-pass/vecs.rs\n+```\n+\n+Setting `MIRI_LOG` like this will configure logging for miri itself as well as\n+the `rustc::mir::interpret` and `rustc_mir::interpret` modules in rustc.  You\n+can also do more targeted configuration, e.g. to debug the stacked borrows\n+implementation:\n+```sh\n+MIRI_LOG=rustc_mir::interpret=info,miri::stacked_borrows cargo run tests/run-pass/vecs.rs\n+```\n+\n+In addition, you can set `MIRI_BACKTRACE=1` to get a backtrace of where an\n+evaluation error was originally created.\n+\n \n ### Using a locally built rustc\n \n Since the heart of Miri (the main interpreter engine) lives in rustc, working on\n Miri will often require using a locally built rustc.  The bug you want to fix\n may actually be on the rustc side, or you just need to get more detailed trace\n-of the execution -- in both cases, you should develop miri against a rustc you\n-compiled yourself, with debug assertions (and hence tracing) enabled.\n+of the execution than what is possible with release builds -- in both cases, you\n+should develop miri against a rustc you compiled yourself, with debug assertions\n+(and hence tracing) enabled.\n \n The setup for a local rustc works as follows:\n ```sh\n@@ -149,22 +168,6 @@ rustup override set custom\n With this, you should now have a working development setup!  See\n [\"Testing Miri\"](#testing-miri) above for how to proceed.\n \n-Moreover, you can now run Miri with a trace of all execution steps:\n-```sh\n-MIRI_LOG=debug cargo run tests/run-pass/vecs.rs\n-```\n-\n-Setting `MIRI_LOG` like this will configure logging for miri itself as well as\n-the `rustc::mir::interpret` and `rustc_mir::interpret` modules in rustc.  You\n-can also do more targeted configuration, e.g. to debug the stacked borrows\n-implementation:\n-```sh\n-MIRI_LOG=rustc_mir::interpret=debug,miri::stacked_borrows cargo run tests/run-pass/vecs.rs\n-```\n-\n-In addition, you can set `MIRI_BACKTRACE=1` to get a backtrace of where an\n-evaluation error was originally created.\n-\n ### Miri `-Z` flags and environment variables\n \n Several `-Z` flags are relevant for Miri:"}]}