{"sha": "70ecd8ed38d5bedbeb281d78c3da44477764236a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZWNkOGVkMzhkNWJlZGJlYjI4MWQ3OGMzZGE0NDQ3Nzc2NDIzNmE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-04T00:39:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-04T05:30:32Z"}, "message": "Test fixes and rebase conflicts", "tree": {"sha": "a9e08bd10dc4cb6cb0d489e120001c3445e89b00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9e08bd10dc4cb6cb0d489e120001c3445e89b00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70ecd8ed38d5bedbeb281d78c3da44477764236a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70ecd8ed38d5bedbeb281d78c3da44477764236a", "html_url": "https://github.com/rust-lang/rust/commit/70ecd8ed38d5bedbeb281d78c3da44477764236a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70ecd8ed38d5bedbeb281d78c3da44477764236a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0029a47c274a2ce97641b80ba34cf6fbfa2d73e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0029a47c274a2ce97641b80ba34cf6fbfa2d73e", "html_url": "https://github.com/rust-lang/rust/commit/d0029a47c274a2ce97641b80ba34cf6fbfa2d73e"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "3f4f1ec4c0db5f4afe33e516bf98a4ba02630952", "filename": "src/libstd/path.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/70ecd8ed38d5bedbeb281d78c3da44477764236a/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70ecd8ed38d5bedbeb281d78c3da44477764236a/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=70ecd8ed38d5bedbeb281d78c3da44477764236a", "patch": "@@ -156,7 +156,7 @@ mod platform {\n         None\n     }\n \n-    #[derive(Copy, Clone, Show, Hash, PartialEq, Eq)]\n+    #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n     pub struct Prefix<'a>;\n \n     impl<'a> Prefix<'a> {\n@@ -177,9 +177,10 @@ mod platform {\n mod platform {\n     use core::prelude::*;\n \n-    use super::{Path, os_str_as_u8_slice, u8_slice_as_os_str};\n-    use ffi::OsStr;\n+    use char::CharExt as UnicodeCharExt;\n+    use super::{os_str_as_u8_slice, u8_slice_as_os_str};\n     use ascii::*;\n+    use ffi::OsStr;\n \n     #[inline]\n     pub fn is_sep(b: u8) -> bool {\n@@ -299,7 +300,7 @@ mod platform {\n         pub fn len(&self) -> usize {\n             use self::Prefix::*;\n             fn os_str_len(s: &OsStr) -> usize {\n-                unsafe { os_str_as_u8_slice(s).len() }\n+                os_str_as_u8_slice(s).len()\n             }\n             match *self {\n                 Verbatim(x) => 4 + os_str_len(x),\n@@ -339,12 +340,12 @@ mod platform {\n         }\n     }\n \n-    impl<'a> ops::PartialEq for Prefix<'a> {\n+    impl<'a> PartialEq for Prefix<'a> {\n         fn eq(&self, other: &Prefix<'a>) -> bool {\n             use self::Prefix::*;\n             match (*self, *other) {\n                 (Verbatim(x), Verbatim(y)) => x == y,\n-                (VerbatimUNC(x1, x2), Verbatim(y1, y2)) => x1 == y1 && x2 == y2,\n+                (VerbatimUNC(x1, x2), VerbatimUNC(y1, y2)) => x1 == y1 && x2 == y2,\n                 (VerbatimDisk(x), VerbatimDisk(y)) =>\n                     os_str_as_u8_slice(x).eq_ignore_ascii_case(os_str_as_u8_slice(y)),\n                 (DeviceNS(x), DeviceNS(y)) => x == y,\n@@ -457,7 +458,7 @@ fn split_file_at_dot(file: &OsStr) -> (Option<&OsStr>, Option<&OsStr>) {\n /// Going front to back, a path is made up of a prefix, a root component, a body\n /// (of normal components), and a suffix/emptycomponent (normalized `.` or ``\n /// for a path ending with the separator)\n-#[derive(Copy, Clone, PartialEq, PartialOrd, Show)]\n+#[derive(Copy, Clone, PartialEq, PartialOrd, Debug)]\n enum State {\n     Prefix = 0,         // c:\n     Root = 1,           // /\n@@ -470,7 +471,7 @@ enum State {\n ///\n /// See the module documentation for an in-depth explanation of components and\n /// their role in the API.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Show)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n pub enum Component<'a> {\n     /// A Windows path prefix, e.g. `C:` or `\\server\\share`\n     Prefix(&'a OsStr),\n@@ -2434,12 +2435,21 @@ mod tests {\n         tfn!(\"foo\", \"bar\", \"bar\");\n         tfn!(\"foo\", \"\", \"\");\n         tfn!(\"\", \"foo\", \"foo\");\n-        tfn!(\".\", \"foo\", \"./foo\");\n-        tfn!(\"foo/\", \"bar\", \"foo/bar\");\n-        tfn!(\"foo/.\", \"bar\", \"foo/./bar\");\n-        tfn!(\"..\", \"foo\", \"../foo\");\n-        tfn!(\"foo/..\", \"bar\", \"foo/../bar\");\n-        tfn!(\"/\", \"foo\", \"/foo\");\n+        if cfg!(unix) {\n+            tfn!(\".\", \"foo\", \"./foo\");\n+            tfn!(\"foo/\", \"bar\", \"foo/bar\");\n+            tfn!(\"foo/.\", \"bar\", \"foo/./bar\");\n+            tfn!(\"..\", \"foo\", \"../foo\");\n+            tfn!(\"foo/..\", \"bar\", \"foo/../bar\");\n+            tfn!(\"/\", \"foo\", \"/foo\");\n+        } else {\n+            tfn!(\".\", \"foo\", r\".\\foo\");\n+            tfn!(r\"foo\\\", \"bar\", r\"foo\\bar\");\n+            tfn!(r\"foo\\.\", \"bar\", r\"foo\\.\\bar\");\n+            tfn!(\"..\", \"foo\", r\"..\\foo\");\n+            tfn!(r\"foo\\..\", \"bar\", r\"foo\\..\\bar\");\n+            tfn!(r\"\\\", \"foo\", r\"\\foo\");\n+        }\n     }\n \n     #[test]"}]}