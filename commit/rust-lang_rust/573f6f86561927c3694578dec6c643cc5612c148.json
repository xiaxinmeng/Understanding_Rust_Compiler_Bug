{"sha": "573f6f86561927c3694578dec6c643cc5612c148", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3M2Y2Zjg2NTYxOTI3YzM2OTQ1NzhkZWM2YzY0M2NjNTYxMmMxNDg=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-01-13T19:26:14Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-01-19T13:48:07Z"}, "message": "Refactor/simplify path resolution", "tree": {"sha": "82ee83a50c4834419009e79a83a7187d7d7618a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82ee83a50c4834419009e79a83a7187d7d7618a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/573f6f86561927c3694578dec6c643cc5612c148", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/573f6f86561927c3694578dec6c643cc5612c148", "html_url": "https://github.com/rust-lang/rust/commit/573f6f86561927c3694578dec6c643cc5612c148", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/573f6f86561927c3694578dec6c643cc5612c148/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa43ef30f4f96fc8e4ea1f9c4492bcb07b3335ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa43ef30f4f96fc8e4ea1f9c4492bcb07b3335ca", "html_url": "https://github.com/rust-lang/rust/commit/fa43ef30f4f96fc8e4ea1f9c4492bcb07b3335ca"}], "stats": {"total": 64, "additions": 33, "deletions": 31}, "files": [{"sha": "7215236f9c91d58aa437854539d9d6bf761e31e5", "filename": "crates/ra_hir/src/code_model_impl/module.rs", "status": "modified", "additions": 33, "deletions": 31, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/573f6f86561927c3694578dec6c643cc5612c148/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/573f6f86561927c3694578dec6c643cc5612c148/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs?ref=573f6f86561927c3694578dec6c643cc5612c148", "patch": "@@ -147,41 +147,43 @@ impl Module {\n             .def_id,\n         );\n \n-        let segments = &path.segments;\n-        for (idx, name) in segments.iter().enumerate() {\n-            let curr = if let Some(r) = curr_per_ns.as_ref().take_types() {\n-                r\n-            } else {\n-                return PerNs::none();\n+        for name in path.segments.iter() {\n+            let curr = match curr_per_ns.as_ref().take_types() {\n+                Some(r) => r,\n+                None => {\n+                    // we still have path segments left, but the path so far\n+                    // didn't resolve in the types namespace => no resolution\n+                    // (don't break here because curr_per_ns might contain\n+                    // something in the value namespace, and it would be wrong\n+                    // to return that)\n+                    return PerNs::none();\n+                }\n             };\n-            let module = match curr.resolve(db) {\n-                Def::Module(it) => it,\n+            // resolve segment in curr\n+            curr_per_ns = match curr.resolve(db) {\n+                Def::Module(m) => {\n+                    let scope = m.scope(db);\n+                    match scope.get(&name) {\n+                        Some(r) => r.def_id,\n+                        None => PerNs::none(),\n+                    }\n+                }\n                 Def::Enum(e) => {\n-                    if segments.len() == idx + 1 {\n-                        // enum variant\n-                        let matching_variant =\n-                            e.variants(db).into_iter().find(|(n, _variant)| n == name);\n-\n-                        if let Some((_n, variant)) = matching_variant {\n-                            return PerNs::both(variant.def_id(), e.def_id());\n-                        } else {\n-                            return PerNs::none();\n-                        }\n-                    } else if segments.len() == idx {\n-                        // enum\n-                        return PerNs::types(e.def_id());\n-                    } else {\n-                        // malformed enum?\n-                        return PerNs::none();\n+                    // enum variant\n+                    let matching_variant =\n+                        e.variants(db).into_iter().find(|(n, _variant)| n == name);\n+\n+                    match matching_variant {\n+                        Some((_n, variant)) => PerNs::both(variant.def_id(), e.def_id()),\n+                        None => PerNs::none(),\n                     }\n                 }\n-                _ => return PerNs::none(),\n-            };\n-            let scope = module.scope(db);\n-            curr_per_ns = if let Some(r) = scope.get(&name) {\n-                r.def_id\n-            } else {\n-                return PerNs::none();\n+                _ => {\n+                    // could be an inherent method call in UFCS form\n+                    // (`Struct::method`), or some other kind of associated\n+                    // item... Which we currently don't handle (TODO)\n+                    PerNs::none()\n+                }\n             };\n         }\n         curr_per_ns"}]}