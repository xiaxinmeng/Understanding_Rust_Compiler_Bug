{"sha": "f1afc933530a87bd0cc7b25726c9a7fff3f3e007", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxYWZjOTMzNTMwYTg3YmQwY2M3YjI1NzI2YzlhN2ZmZjNmM2UwMDc=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-09T18:07:35Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-09T20:37:30Z"}, "message": "Fix handling of literal patterns\n\nWrap them in a LiteralPat node so they can be distinguished from literal\nexpressions.", "tree": {"sha": "cfa9a55a6d9df93129502be655d6c26dee1bc5c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfa9a55a6d9df93129502be655d6c26dee1bc5c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1afc933530a87bd0cc7b25726c9a7fff3f3e007", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1afc933530a87bd0cc7b25726c9a7fff3f3e007", "html_url": "https://github.com/rust-lang/rust/commit/f1afc933530a87bd0cc7b25726c9a7fff3f3e007", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1afc933530a87bd0cc7b25726c9a7fff3f3e007/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ebde241c00cd9eb816b1aa7cb212a946afb0d3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ebde241c00cd9eb816b1aa7cb212a946afb0d3e", "html_url": "https://github.com/rust-lang/rust/commit/7ebde241c00cd9eb816b1aa7cb212a946afb0d3e"}], "stats": {"total": 174, "additions": 133, "deletions": 41}, "files": [{"sha": "bf423d3d882227993ecf0125347f4bd9f69698f2", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1afc933530a87bd0cc7b25726c9a7fff3f3e007/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1afc933530a87bd0cc7b25726c9a7fff3f3e007/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=f1afc933530a87bd0cc7b25726c9a7fff3f3e007", "patch": "@@ -850,6 +850,7 @@ impl ExprCollector {\n             }\n \n             // TODO: implement\n+            ast::PatKind::LiteralPat(_) => Pat::Missing,\n             ast::PatKind::SlicePat(_) | ast::PatKind::RangePat(_) => Pat::Missing,\n         };\n         let syntax_ptr = SyntaxNodePtr::new(pat.syntax());"}, {"sha": "d15b77e171e376b35cf64b403842590b02a72459", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_std_crash_3.snap", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f1afc933530a87bd0cc7b25726c9a7fff3f3e007/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_3.snap", "raw_url": "https://github.com/rust-lang/rust/raw/f1afc933530a87bd0cc7b25726c9a7fff3f3e007/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_3.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_std_crash_3.snap?ref=f1afc933530a87bd0cc7b25726c9a7fff3f3e007", "patch": "@@ -0,0 +1,13 @@\n+---\n+created: \"2019-02-09T18:02:37.377591660Z\"\n+creator: insta@0.6.1\n+source: crates/ra_hir/src/ty/tests.rs\n+expression: \"&result\"\n+---\n+[18; 102) '{     ...   } }': ()\n+[24; 100) 'match ...     }': ()\n+[42; 88) 'SizeSk...tail }': [unknown]\n+[76; 80) 'true': [unknown]\n+[82; 86) 'tail': [unknown]\n+[92; 94) '{}': ()\n+"}, {"sha": "e0b5a64717c51597ba7ebb6f75a4501062089ff3", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f1afc933530a87bd0cc7b25726c9a7fff3f3e007/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1afc933530a87bd0cc7b25726c9a7fff3f3e007/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=f1afc933530a87bd0cc7b25726c9a7fff3f3e007", "patch": "@@ -663,6 +663,21 @@ fn test_line_buffer() {\n     );\n }\n \n+#[test]\n+fn infer_std_crash_3() {\n+    // taken from rustc\n+    check_inference(\n+        \"infer_std_crash_3\",\n+        r#\"\n+pub fn compute() {\n+    match _ {\n+        SizeSkeleton::Pointer { non_zero: true, tail } => {}\n+    }\n+}\n+\"#,\n+    );\n+}\n+\n fn infer(content: &str) -> String {\n     let (db, _, file_id) = MockDatabase::with_single_file(content);\n     let source_file = db.parse(file_id);"}, {"sha": "256277609f65cb067bdf8631412db2c99821ffbb", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f1afc933530a87bd0cc7b25726c9a7fff3f3e007/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1afc933530a87bd0cc7b25726c9a7fff3f3e007/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=f1afc933530a87bd0cc7b25726c9a7fff3f3e007", "patch": "@@ -1821,6 +1821,38 @@ impl LiteralExpr {\n \n impl LiteralExpr {}\n \n+// LiteralPat\n+#[derive(Debug, PartialEq, Eq, Hash)]\n+#[repr(transparent)]\n+pub struct LiteralPat {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+unsafe impl TransparentNewType for LiteralPat {\n+    type Repr = rowan::SyntaxNode<RaTypes>;\n+}\n+\n+impl AstNode for LiteralPat {\n+    fn cast(syntax: &SyntaxNode) -> Option<&Self> {\n+        match syntax.kind() {\n+            LITERAL_PAT => Some(LiteralPat::from_repr(syntax.into_repr())),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for LiteralPat {\n+    type Owned = TreeArc<LiteralPat>;\n+    fn to_owned(&self) -> TreeArc<LiteralPat> { TreeArc::cast(self.syntax.to_owned()) }\n+}\n+\n+\n+impl LiteralPat {\n+    pub fn literal(&self) -> Option<&Literal> {\n+        super::child_opt(self)\n+    }\n+}\n+\n // LoopExpr\n #[derive(Debug, PartialEq, Eq, Hash)]\n #[repr(transparent)]\n@@ -2594,6 +2626,7 @@ pub enum PatKind<'a> {\n     TuplePat(&'a TuplePat),\n     SlicePat(&'a SlicePat),\n     RangePat(&'a RangePat),\n+    LiteralPat(&'a LiteralPat),\n }\n \n impl AstNode for Pat {\n@@ -2607,7 +2640,8 @@ impl AstNode for Pat {\n             | TUPLE_STRUCT_PAT\n             | TUPLE_PAT\n             | SLICE_PAT\n-            | RANGE_PAT => Some(Pat::from_repr(syntax.into_repr())),\n+            | RANGE_PAT\n+            | LITERAL_PAT => Some(Pat::from_repr(syntax.into_repr())),\n             _ => None,\n         }\n     }\n@@ -2631,6 +2665,7 @@ impl Pat {\n             TUPLE_PAT => PatKind::TuplePat(TuplePat::cast(&self.syntax).unwrap()),\n             SLICE_PAT => PatKind::SlicePat(SlicePat::cast(&self.syntax).unwrap()),\n             RANGE_PAT => PatKind::RangePat(RangePat::cast(&self.syntax).unwrap()),\n+            LITERAL_PAT => PatKind::LiteralPat(LiteralPat::cast(&self.syntax).unwrap()),\n             _ => unreachable!(),\n         }\n     }"}, {"sha": "d428bc5955d9e969b8b4c8876f42c40f87f7cbec", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1afc933530a87bd0cc7b25726c9a7fff3f3e007/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/f1afc933530a87bd0cc7b25726c9a7fff3f3e007/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=f1afc933530a87bd0cc7b25726c9a7fff3f3e007", "patch": "@@ -161,6 +161,7 @@ Grammar(\n         \"TUPLE_PAT\",\n         \"SLICE_PAT\",\n         \"RANGE_PAT\",\n+        \"LITERAL_PAT\",\n \n         // atoms\n         \"TUPLE_EXPR\",\n@@ -524,6 +525,7 @@ Grammar(\n         \"TuplePat\": ( collections: [[\"args\", \"Pat\"]] ),\n         \"SlicePat\": (),\n         \"RangePat\": (),\n+        \"LiteralPat\": (options: [\"Literal\"]),\n \n         \"Pat\": (\n             enum: [\n@@ -536,6 +538,7 @@ Grammar(\n                 \"TuplePat\",\n                 \"SlicePat\",\n                 \"RangePat\",\n+                \"LiteralPat\",\n             ],\n         ),\n "}, {"sha": "9d7da639d5e812828fd18428bc48c3b4d78ca11c", "filename": "crates/ra_syntax/src/grammar/patterns.rs", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f1afc933530a87bd0cc7b25726c9a7fff3f3e007/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1afc933530a87bd0cc7b25726c9a7fff3f3e007/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=f1afc933530a87bd0cc7b25726c9a7fff3f3e007", "patch": "@@ -43,21 +43,8 @@ fn atom_pat(p: &mut Parser, recovery_set: TokenSet) -> Option<CompletedMarker> {\n         return Some(path_pat(p));\n     }\n \n-    // test literal_pattern\n-    // fn main() {\n-    //     match () {\n-    //         -1 => (),\n-    //         92 => (),\n-    //         'c' => (),\n-    //         \"hello\" => (),\n-    //     }\n-    // }\n-    if p.at(MINUS) && (p.nth(1) == INT_NUMBER || p.nth(1) == FLOAT_NUMBER) {\n-        p.bump();\n-    }\n-\n-    if let Some(m) = expressions::literal(p) {\n-        return Some(m);\n+    if is_literal_pat_start(p) {\n+        return Some(literal_pat(p));\n     }\n \n     let m = match la0 {\n@@ -73,6 +60,30 @@ fn atom_pat(p: &mut Parser, recovery_set: TokenSet) -> Option<CompletedMarker> {\n     Some(m)\n }\n \n+fn is_literal_pat_start(p: &mut Parser) -> bool {\n+    p.at(MINUS) && (p.nth(1) == INT_NUMBER || p.nth(1) == FLOAT_NUMBER)\n+        || p.at_ts(expressions::LITERAL_FIRST)\n+}\n+\n+// test literal_pattern\n+// fn main() {\n+//     match () {\n+//         -1 => (),\n+//         92 => (),\n+//         'c' => (),\n+//         \"hello\" => (),\n+//     }\n+// }\n+fn literal_pat(p: &mut Parser) -> CompletedMarker {\n+    assert!(is_literal_pat_start(p));\n+    let m = p.start();\n+    if p.at(MINUS) {\n+        p.bump();\n+    }\n+    expressions::literal(p);\n+    m.complete(p, LITERAL_PAT)\n+}\n+\n // test path_part\n // fn foo() {\n //     let foo::Bar = ();"}, {"sha": "266b95bbb1964af6267c69ac73cab1d5830ef3ae", "filename": "crates/ra_syntax/src/syntax_kinds/generated.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1afc933530a87bd0cc7b25726c9a7fff3f3e007/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1afc933530a87bd0cc7b25726c9a7fff3f3e007/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs?ref=f1afc933530a87bd0cc7b25726c9a7fff3f3e007", "patch": "@@ -157,6 +157,7 @@ pub enum SyntaxKind {\n     TUPLE_PAT,\n     SLICE_PAT,\n     RANGE_PAT,\n+    LITERAL_PAT,\n     TUPLE_EXPR,\n     ARRAY_EXPR,\n     PAREN_EXPR,\n@@ -493,6 +494,7 @@ impl SyntaxKind {\n             TUPLE_PAT => &SyntaxInfo { name: \"TUPLE_PAT\" },\n             SLICE_PAT => &SyntaxInfo { name: \"SLICE_PAT\" },\n             RANGE_PAT => &SyntaxInfo { name: \"RANGE_PAT\" },\n+            LITERAL_PAT => &SyntaxInfo { name: \"LITERAL_PAT\" },\n             TUPLE_EXPR => &SyntaxInfo { name: \"TUPLE_EXPR\" },\n             ARRAY_EXPR => &SyntaxInfo { name: \"ARRAY_EXPR\" },\n             PAREN_EXPR => &SyntaxInfo { name: \"PAREN_EXPR\" },"}, {"sha": "51c5ab7f28cccfe0baf4eb57bf2e33327560034f", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0055_literal_pattern.txt", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f1afc933530a87bd0cc7b25726c9a7fff3f3e007/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0055_literal_pattern.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f1afc933530a87bd0cc7b25726c9a7fff3f3e007/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0055_literal_pattern.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0055_literal_pattern.txt?ref=f1afc933530a87bd0cc7b25726c9a7fff3f3e007", "patch": "@@ -22,9 +22,10 @@ SOURCE_FILE@[0; 113)\n           L_CURLY@[25; 26)\n           WHITESPACE@[26; 35)\n           MATCH_ARM@[35; 43)\n-            MINUS@[35; 36)\n-            LITERAL@[36; 37)\n-              INT_NUMBER@[36; 37) \"1\"\n+            LITERAL_PAT@[35; 37)\n+              MINUS@[35; 36)\n+              LITERAL@[36; 37)\n+                INT_NUMBER@[36; 37) \"1\"\n             WHITESPACE@[37; 38)\n             FAT_ARROW@[38; 40)\n             WHITESPACE@[40; 41)\n@@ -34,8 +35,9 @@ SOURCE_FILE@[0; 113)\n           COMMA@[43; 44)\n           WHITESPACE@[44; 53)\n           MATCH_ARM@[53; 61)\n-            LITERAL@[53; 55)\n-              INT_NUMBER@[53; 55) \"92\"\n+            LITERAL_PAT@[53; 55)\n+              LITERAL@[53; 55)\n+                INT_NUMBER@[53; 55) \"92\"\n             WHITESPACE@[55; 56)\n             FAT_ARROW@[56; 58)\n             WHITESPACE@[58; 59)\n@@ -45,8 +47,9 @@ SOURCE_FILE@[0; 113)\n           COMMA@[61; 62)\n           WHITESPACE@[62; 71)\n           MATCH_ARM@[71; 80)\n-            LITERAL@[71; 74)\n-              CHAR@[71; 74)\n+            LITERAL_PAT@[71; 74)\n+              LITERAL@[71; 74)\n+                CHAR@[71; 74)\n             WHITESPACE@[74; 75)\n             FAT_ARROW@[75; 77)\n             WHITESPACE@[77; 78)\n@@ -56,8 +59,9 @@ SOURCE_FILE@[0; 113)\n           COMMA@[80; 81)\n           WHITESPACE@[81; 90)\n           MATCH_ARM@[90; 103)\n-            LITERAL@[90; 97)\n-              STRING@[90; 97)\n+            LITERAL_PAT@[90; 97)\n+              LITERAL@[90; 97)\n+                STRING@[90; 97)\n             WHITESPACE@[97; 98)\n             FAT_ARROW@[98; 100)\n             WHITESPACE@[100; 101)"}, {"sha": "de54c49e6fa1d519697d4f467fda892f7b0ffb2f", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0058_range_pat.txt", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f1afc933530a87bd0cc7b25726c9a7fff3f3e007/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0058_range_pat.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f1afc933530a87bd0cc7b25726c9a7fff3f3e007/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0058_range_pat.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0058_range_pat.txt?ref=f1afc933530a87bd0cc7b25726c9a7fff3f3e007", "patch": "@@ -22,13 +22,15 @@ SOURCE_FILE@[0; 112)\n           WHITESPACE@[26; 35)\n           MATCH_ARM@[35; 50)\n             RANGE_PAT@[35; 44)\n-              LITERAL@[35; 36)\n-                INT_NUMBER@[35; 36) \"0\"\n+              LITERAL_PAT@[35; 36)\n+                LITERAL@[35; 36)\n+                  INT_NUMBER@[35; 36) \"0\"\n               WHITESPACE@[36; 37)\n               DOTDOTDOT@[37; 40)\n               WHITESPACE@[40; 41)\n-              LITERAL@[41; 44)\n-                INT_NUMBER@[41; 44) \"100\"\n+              LITERAL_PAT@[41; 44)\n+                LITERAL@[41; 44)\n+                  INT_NUMBER@[41; 44) \"100\"\n             WHITESPACE@[44; 45)\n             FAT_ARROW@[45; 47)\n             WHITESPACE@[47; 48)\n@@ -39,13 +41,15 @@ SOURCE_FILE@[0; 112)\n           WHITESPACE@[51; 60)\n           MATCH_ARM@[60; 77)\n             RANGE_PAT@[60; 71)\n-              LITERAL@[60; 63)\n-                INT_NUMBER@[60; 63) \"101\"\n+              LITERAL_PAT@[60; 63)\n+                LITERAL@[60; 63)\n+                  INT_NUMBER@[60; 63) \"101\"\n               WHITESPACE@[63; 64)\n               DOTDOTEQ@[64; 67)\n               WHITESPACE@[67; 68)\n-              LITERAL@[68; 71)\n-                INT_NUMBER@[68; 71) \"200\"\n+              LITERAL_PAT@[68; 71)\n+                LITERAL@[68; 71)\n+                  INT_NUMBER@[68; 71) \"200\"\n             WHITESPACE@[71; 72)\n             FAT_ARROW@[72; 74)\n             WHITESPACE@[74; 75)\n@@ -56,13 +60,15 @@ SOURCE_FILE@[0; 112)\n           WHITESPACE@[78; 87)\n           MATCH_ARM@[87; 102)\n             RANGE_PAT@[87; 97)\n-              LITERAL@[87; 90)\n-                INT_NUMBER@[87; 90) \"200\"\n+              LITERAL_PAT@[87; 90)\n+                LITERAL@[87; 90)\n+                  INT_NUMBER@[87; 90) \"200\"\n               WHITESPACE@[90; 91)\n               DOTDOT@[91; 93)\n               WHITESPACE@[93; 94)\n-              LITERAL@[94; 97)\n-                INT_NUMBER@[94; 97) \"301\"\n+              LITERAL_PAT@[94; 97)\n+                LITERAL@[94; 97)\n+                  INT_NUMBER@[94; 97) \"301\"\n             FAT_ARROW@[97; 99)\n             WHITESPACE@[99; 100)\n             TUPLE_EXPR@[100; 102)"}, {"sha": "f3987c3b79dbb6a18fc12c1600077bf9c0446118", "filename": "crates/ra_syntax/tests/data/parser/ok/0035_weird_exprs.txt", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f1afc933530a87bd0cc7b25726c9a7fff3f3e007/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0035_weird_exprs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f1afc933530a87bd0cc7b25726c9a7fff3f3e007/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0035_weird_exprs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Fok%2F0035_weird_exprs.txt?ref=f1afc933530a87bd0cc7b25726c9a7fff3f3e007", "patch": "@@ -456,8 +456,9 @@ SOURCE_FILE@[0; 3813)\n                           L_CURLY@[930; 931)\n                           WHITESPACE@[931; 952)\n                           MATCH_ARM@[952; 1147)\n-                            LITERAL@[952; 953)\n-                              INT_NUMBER@[952; 953) \"1\"\n+                            LITERAL_PAT@[952; 953)\n+                              LITERAL@[952; 953)\n+                                INT_NUMBER@[952; 953) \"1\"\n                             WHITESPACE@[953; 954)\n                             FAT_ARROW@[954; 956)\n                             WHITESPACE@[956; 957)\n@@ -1080,8 +1081,9 @@ SOURCE_FILE@[0; 3813)\n                     L_CURLY@[1853; 1854)\n                     WHITESPACE@[1854; 1855)\n                     MATCH_ARM@[1855; 1863)\n-                      LITERAL@[1855; 1856)\n-                        INT_NUMBER@[1855; 1856) \"1\"\n+                      LITERAL_PAT@[1855; 1856)\n+                        LITERAL@[1855; 1856)\n+                          INT_NUMBER@[1855; 1856) \"1\"\n                       WHITESPACE@[1856; 1857)\n                       FAT_ARROW@[1857; 1859)\n                       WHITESPACE@[1859; 1860)"}]}