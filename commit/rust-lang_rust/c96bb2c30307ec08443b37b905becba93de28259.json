{"sha": "c96bb2c30307ec08443b37b905becba93de28259", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NmJiMmMzMDMwN2VjMDg0NDNiMzdiOTA1YmVjYmE5M2RlMjgyNTk=", "commit": {"author": {"name": "Joe Frikker", "email": "jfrikker@gmail.com", "date": "2019-06-30T22:28:12Z"}, "committer": {"name": "Joe Frikker", "email": "jfrikker@gmail.com", "date": "2019-06-30T22:28:12Z"}, "message": "Running rustfmt on test", "tree": {"sha": "c7926b5be58eef290491a3e0282b5acb04ef7c5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7926b5be58eef290491a3e0282b5acb04ef7c5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c96bb2c30307ec08443b37b905becba93de28259", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c96bb2c30307ec08443b37b905becba93de28259", "html_url": "https://github.com/rust-lang/rust/commit/c96bb2c30307ec08443b37b905becba93de28259", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c96bb2c30307ec08443b37b905becba93de28259/comments", "author": {"login": "jfrikker", "id": 1620319, "node_id": "MDQ6VXNlcjE2MjAzMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1620319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jfrikker", "html_url": "https://github.com/jfrikker", "followers_url": "https://api.github.com/users/jfrikker/followers", "following_url": "https://api.github.com/users/jfrikker/following{/other_user}", "gists_url": "https://api.github.com/users/jfrikker/gists{/gist_id}", "starred_url": "https://api.github.com/users/jfrikker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jfrikker/subscriptions", "organizations_url": "https://api.github.com/users/jfrikker/orgs", "repos_url": "https://api.github.com/users/jfrikker/repos", "events_url": "https://api.github.com/users/jfrikker/events{/privacy}", "received_events_url": "https://api.github.com/users/jfrikker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jfrikker", "id": 1620319, "node_id": "MDQ6VXNlcjE2MjAzMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1620319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jfrikker", "html_url": "https://github.com/jfrikker", "followers_url": "https://api.github.com/users/jfrikker/followers", "following_url": "https://api.github.com/users/jfrikker/following{/other_user}", "gists_url": "https://api.github.com/users/jfrikker/gists{/gist_id}", "starred_url": "https://api.github.com/users/jfrikker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jfrikker/subscriptions", "organizations_url": "https://api.github.com/users/jfrikker/orgs", "repos_url": "https://api.github.com/users/jfrikker/repos", "events_url": "https://api.github.com/users/jfrikker/events{/privacy}", "received_events_url": "https://api.github.com/users/jfrikker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8880677b4f7337861d98afb7742968f794dbf1ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/8880677b4f7337861d98afb7742968f794dbf1ef", "html_url": "https://github.com/rust-lang/rust/commit/8880677b4f7337861d98afb7742968f794dbf1ef"}], "stats": {"total": 46, "additions": 28, "deletions": 18}, "files": [{"sha": "117300e84a40f17bd04cd1d43c1466f8477ce1a7", "filename": "tests/ui/try_err.fixed", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c96bb2c30307ec08443b37b905becba93de28259/tests%2Fui%2Ftry_err.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c96bb2c30307ec08443b37b905becba93de28259/tests%2Fui%2Ftry_err.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.fixed?ref=c96bb2c30307ec08443b37b905becba93de28259", "patch": "@@ -6,7 +6,8 @@\n // Should flag `Err(err)?`\n pub fn basic_test() -> Result<i32, i32> {\n     let err: i32 = 1;\n-    if true { // To avoid warnings during rustfix\n+    // To avoid warnings during rustfix\n+    if true {\n         return Err(err);\n     }\n     Ok(0)\n@@ -15,7 +16,8 @@ pub fn basic_test() -> Result<i32, i32> {\n // Tests that `.into()` is added when appropriate\n pub fn into_test() -> Result<i32, i32> {\n     let err: u8 = 1;\n-    if true { // To avoid warnings during rustfix\n+    // To avoid warnings during rustfix\n+    if true {\n         return Err(err.into());\n     }\n     Ok(0)\n@@ -26,15 +28,16 @@ pub fn negative_test() -> Result<i32, i32> {\n     Ok(nested_error()? + 1)\n }\n \n-\n // Tests that `.into()` isn't added when the error type\n // matches the surrounding closure's return type, even\n // when it doesn't match the surrounding function's.\n pub fn closure_matches_test() -> Result<i32, i32> {\n-    let res: Result<i32, i8> = Some(1).into_iter()\n+    let res: Result<i32, i8> = Some(1)\n+        .into_iter()\n         .map(|i| {\n             let err: i8 = 1;\n-            if true { // To avoid warnings during rustfix\n+            // To avoid warnings during rustfix\n+            if true {\n                 return Err(err);\n             }\n             Ok(i)\n@@ -48,10 +51,12 @@ pub fn closure_matches_test() -> Result<i32, i32> {\n // Tests that `.into()` isn't added when the error type\n // doesn't match the surrounding closure's return type.\n pub fn closure_into_test() -> Result<i32, i32> {\n-    let res: Result<i32, i16> = Some(1).into_iter()\n+    let res: Result<i32, i16> = Some(1)\n+        .into_iter()\n         .map(|i| {\n             let err: i8 = 1;\n-            if true { // To avoid warnings during rustfix\n+            // To avoid warnings during rustfix\n+            if true {\n                 return Err(err.into());\n             }\n             Ok(i)"}, {"sha": "828cf639a1b3598c83d8936826f311b206a370c9", "filename": "tests/ui/try_err.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c96bb2c30307ec08443b37b905becba93de28259/tests%2Fui%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c96bb2c30307ec08443b37b905becba93de28259/tests%2Fui%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.rs?ref=c96bb2c30307ec08443b37b905becba93de28259", "patch": "@@ -6,7 +6,8 @@\n // Should flag `Err(err)?`\n pub fn basic_test() -> Result<i32, i32> {\n     let err: i32 = 1;\n-    if true { // To avoid warnings during rustfix\n+    // To avoid warnings during rustfix\n+    if true {\n         Err(err)?;\n     }\n     Ok(0)\n@@ -15,7 +16,8 @@ pub fn basic_test() -> Result<i32, i32> {\n // Tests that `.into()` is added when appropriate\n pub fn into_test() -> Result<i32, i32> {\n     let err: u8 = 1;\n-    if true { // To avoid warnings during rustfix\n+    // To avoid warnings during rustfix\n+    if true {\n         Err(err)?;\n     }\n     Ok(0)\n@@ -26,15 +28,16 @@ pub fn negative_test() -> Result<i32, i32> {\n     Ok(nested_error()? + 1)\n }\n \n-\n // Tests that `.into()` isn't added when the error type\n // matches the surrounding closure's return type, even\n // when it doesn't match the surrounding function's.\n pub fn closure_matches_test() -> Result<i32, i32> {\n-    let res: Result<i32, i8> = Some(1).into_iter()\n+    let res: Result<i32, i8> = Some(1)\n+        .into_iter()\n         .map(|i| {\n             let err: i8 = 1;\n-            if true { // To avoid warnings during rustfix\n+            // To avoid warnings during rustfix\n+            if true {\n                 Err(err)?;\n             }\n             Ok(i)\n@@ -48,10 +51,12 @@ pub fn closure_matches_test() -> Result<i32, i32> {\n // Tests that `.into()` isn't added when the error type\n // doesn't match the surrounding closure's return type.\n pub fn closure_into_test() -> Result<i32, i32> {\n-    let res: Result<i32, i16> = Some(1).into_iter()\n+    let res: Result<i32, i16> = Some(1)\n+        .into_iter()\n         .map(|i| {\n             let err: i8 = 1;\n-            if true { // To avoid warnings during rustfix\n+            // To avoid warnings during rustfix\n+            if true {\n                 Err(err)?;\n             }\n             Ok(i)"}, {"sha": "dbe05ce5178819f86f910e71a3a9f3df33152364", "filename": "tests/ui/try_err.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c96bb2c30307ec08443b37b905becba93de28259/tests%2Fui%2Ftry_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c96bb2c30307ec08443b37b905becba93de28259/tests%2Fui%2Ftry_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.stderr?ref=c96bb2c30307ec08443b37b905becba93de28259", "patch": "@@ -1,5 +1,5 @@\n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:10:9\n+  --> $DIR/try_err.rs:11:9\n    |\n LL |         Err(err)?;\n    |         ^^^^^^^^^ help: try this: `return Err(err)`\n@@ -11,19 +11,19 @@ LL | #![deny(clippy::try_err)]\n    |         ^^^^^^^^^^^^^^^\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:19:9\n+  --> $DIR/try_err.rs:21:9\n    |\n LL |         Err(err)?;\n    |         ^^^^^^^^^ help: try this: `return Err(err.into())`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:38:17\n+  --> $DIR/try_err.rs:41:17\n    |\n LL |                 Err(err)?;\n    |                 ^^^^^^^^^ help: try this: `return Err(err)`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:55:17\n+  --> $DIR/try_err.rs:60:17\n    |\n LL |                 Err(err)?;\n    |                 ^^^^^^^^^ help: try this: `return Err(err.into())`"}]}