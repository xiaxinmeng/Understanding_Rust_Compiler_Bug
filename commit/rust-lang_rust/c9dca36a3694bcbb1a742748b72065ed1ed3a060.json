{"sha": "c9dca36a3694bcbb1a742748b72065ed1ed3a060", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZGNhMzZhMzY5NGJjYmIxYTc0Mjc0OGI3MjA2NWVkMWVkM2EwNjA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-30T13:14:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-30T13:14:55Z"}, "message": "Rollup merge of #59463 - pnkfelix:issue-56327-skip-dyn-keyword-lint-under-macros, r=matthewjasper\n\nskip dyn keyword lint under macros\n\nThis PR is following my own intuition that `rustfix` should never inject bugs into working code (even if that comes at the expense of it failing to fix things that will become bugs).\n\nFix #56327", "tree": {"sha": "8f4b553973fd27f0639a8660a03896aab0b2129c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f4b553973fd27f0639a8660a03896aab0b2129c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9dca36a3694bcbb1a742748b72065ed1ed3a060", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcn2vPCRBK7hj4Ov3rIwAAdHIIAGx1X5zkPCai8Ck5cyMqfyaM\nr7ynO/Ve0eLdUEcK/LROMaIUq1CKlOQ5xplyJaf85Y+oA/1i0SLJFMbY/fE2mg+G\nbfaoC+573arJkIX6JpzH2QUS8tvD1eaWRQbxiiurXvswd633mWJ3T6/Su704HRj4\ngiEzm+3/aQafZrF8VQWh3Hv2/q/EejB/F6V8ncEWVGHGnqkZS+zPPFQtSYeiOVmZ\nnzVQ3lEq8WxJgH6HKdnNxZYrpn3jvG8iPwv9IW90kmVA2/jNHGjBN81O70PR/CzS\nfma+DcK7WJEqjFXjxP+YC2MVT/z9QDocsDmAkczFyywXZf4Vzf/lg4NkJfyFyXY=\n=X+ts\n-----END PGP SIGNATURE-----\n", "payload": "tree 8f4b553973fd27f0639a8660a03896aab0b2129c\nparent ae2551825dbe5a688d00e1d1e7aa7dbaec274e50\nparent 528366d3ffe0564c2e300aae6df06e6a1bfafde2\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1553951695 +0100\ncommitter GitHub <noreply@github.com> 1553951695 +0100\n\nRollup merge of #59463 - pnkfelix:issue-56327-skip-dyn-keyword-lint-under-macros, r=matthewjasper\n\nskip dyn keyword lint under macros\n\nThis PR is following my own intuition that `rustfix` should never inject bugs into working code (even if that comes at the expense of it failing to fix things that will become bugs).\n\nFix #56327\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9dca36a3694bcbb1a742748b72065ed1ed3a060", "html_url": "https://github.com/rust-lang/rust/commit/c9dca36a3694bcbb1a742748b72065ed1ed3a060", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9dca36a3694bcbb1a742748b72065ed1ed3a060/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae2551825dbe5a688d00e1d1e7aa7dbaec274e50", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae2551825dbe5a688d00e1d1e7aa7dbaec274e50", "html_url": "https://github.com/rust-lang/rust/commit/ae2551825dbe5a688d00e1d1e7aa7dbaec274e50"}, {"sha": "528366d3ffe0564c2e300aae6df06e6a1bfafde2", "url": "https://api.github.com/repos/rust-lang/rust/commits/528366d3ffe0564c2e300aae6df06e6a1bfafde2", "html_url": "https://github.com/rust-lang/rust/commit/528366d3ffe0564c2e300aae6df06e6a1bfafde2"}], "stats": {"total": 501, "additions": 490, "deletions": 11}, "files": [{"sha": "1fae931e9f1fd531d35fa949820aac1df32001ac", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 36, "deletions": 11, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/c9dca36a3694bcbb1a742748b72065ed1ed3a060/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dca36a3694bcbb1a742748b72065ed1ed3a060/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=c9dca36a3694bcbb1a742748b72065ed1ed3a060", "patch": "@@ -1619,14 +1619,16 @@ impl LintPass for KeywordIdents {\n     }\n }\n \n+struct UnderMacro(bool);\n+\n impl KeywordIdents {\n     fn check_tokens(&mut self, cx: &EarlyContext<'_>, tokens: TokenStream) {\n         for tt in tokens.into_trees() {\n             match tt {\n                 TokenTree::Token(span, tok) => match tok.ident() {\n                     // only report non-raw idents\n                     Some((ident, false)) => {\n-                        self.check_ident(cx, ast::Ident {\n+                        self.check_ident_token(cx, UnderMacro(true), ast::Ident {\n                             span: span.substitute_dummy(ident.span),\n                             ..ident\n                         });\n@@ -1639,16 +1641,12 @@ impl KeywordIdents {\n             }\n         }\n     }\n-}\n \n-impl EarlyLintPass for KeywordIdents {\n-    fn check_mac_def(&mut self, cx: &EarlyContext<'_>, mac_def: &ast::MacroDef, _id: ast::NodeId) {\n-        self.check_tokens(cx, mac_def.stream());\n-    }\n-    fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &ast::Mac) {\n-        self.check_tokens(cx, mac.node.tts.clone().into());\n-    }\n-    fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: ast::Ident) {\n+    fn check_ident_token(&mut self,\n+                         cx: &EarlyContext<'_>,\n+                         UnderMacro(under_macro): UnderMacro,\n+                         ident: ast::Ident)\n+    {\n         let ident_str = &ident.as_str()[..];\n         let cur_edition = cx.sess.edition();\n         let is_raw_ident = |ident: ast::Ident| {\n@@ -1657,7 +1655,22 @@ impl EarlyLintPass for KeywordIdents {\n         let next_edition = match cur_edition {\n             Edition::Edition2015 => {\n                 match ident_str {\n-                    \"async\" | \"try\" | \"dyn\" => Edition::Edition2018,\n+                    \"async\" | \"try\" => Edition::Edition2018,\n+\n+                    // rust-lang/rust#56327: Conservatively do not\n+                    // attempt to report occurrences of `dyn` within\n+                    // macro definitions or invocations, because `dyn`\n+                    // can legitimately occur as a contextual keyword\n+                    // in 2015 code denoting its 2018 meaning, and we\n+                    // do not want rustfix to inject bugs into working\n+                    // code by rewriting such occurrences.\n+                    //\n+                    // But if we see `dyn` outside of a macro, we know\n+                    // its precise role in the parsed AST and thus are\n+                    // assured this is truly an attempt to use it as\n+                    // an identifier.\n+                    \"dyn\" if !under_macro => Edition::Edition2018,\n+\n                     // Only issue warnings for `await` if the `async_await`\n                     // feature isn't being used. Otherwise, users need\n                     // to keep using `await` for the macro exposed by std.\n@@ -1715,6 +1728,18 @@ impl EarlyLintPass for KeywordIdents {\n     }\n }\n \n+impl EarlyLintPass for KeywordIdents {\n+    fn check_mac_def(&mut self, cx: &EarlyContext<'_>, mac_def: &ast::MacroDef, _id: ast::NodeId) {\n+        self.check_tokens(cx, mac_def.stream());\n+    }\n+    fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &ast::Mac) {\n+        self.check_tokens(cx, mac.node.tts.clone().into());\n+    }\n+    fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: ast::Ident) {\n+        self.check_ident_token(cx, UnderMacro(false), ident);\n+    }\n+}\n+\n \n pub struct ExplicitOutlivesRequirements;\n "}, {"sha": "003736208ed38e818974558a932cd1732e19d4df", "filename": "src/test/ui/dyn-keyword/dyn-2015-edition-keyword-ident-lint.fixed", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/c9dca36a3694bcbb1a742748b72065ed1ed3a060/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c9dca36a3694bcbb1a742748b72065ed1ed3a060/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.fixed?ref=c9dca36a3694bcbb1a742748b72065ed1ed3a060", "patch": "@@ -0,0 +1,81 @@\n+// Under the 2015 edition with the keyword_idents lint, `dyn` is not\n+// entirely acceptable as an identifier. We currently do not attempt\n+// to detect or fix uses of `dyn` under a macro. Since we are testing\n+// this file via `rustfix`, we want the rustfix output to be\n+// compilable; so the macros here carefully use `dyn` \"correctly.\"\n+\n+// run-rustfix\n+\n+#![allow(non_camel_case_types)]\n+#![deny(keyword_idents)]\n+\n+mod outer_mod {\n+    pub mod r#dyn {\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+        pub struct r#dyn;\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+    }\n+}\n+use outer_mod::r#dyn::r#dyn;\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+//~| ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+\n+fn main() {\n+    match r#dyn { r#dyn => {} }\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+//~| ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+    macro_defn::r#dyn();\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+\n+    macro_defn::boxed();\n+}\n+\n+mod macro_defn {\n+    use super::Trait;\n+\n+    macro_rules! r#dyn {\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+\n+        // Note that we do not lint nor fix occurrences under macros\n+        ($dyn:tt) => { (Box<dyn Trait>, Box<$dyn Trait>) }\n+    }\n+\n+    pub fn r#dyn() -> ::outer_mod::r#dyn::r#dyn {\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+//~| ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+//~| ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+        ::outer_mod::r#dyn::r#dyn\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+//~| ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+    }\n+\n+\n+\n+    pub fn boxed() -> r#dyn!(\n+        //~^ ERROR `dyn` is a keyword\n+        //~| WARN was previously accepted\n+\n+            // Note that we do not lint nor fix occurrences under macros\n+            dyn\n+    )\n+    {\n+        (Box::new(1), Box::new(2))\n+    }\n+}\n+\n+pub trait Trait { }\n+\n+impl Trait for u32 { }"}, {"sha": "0e5c39fc501beecc166f4d5b9c1dfcad6f147919", "filename": "src/test/ui/dyn-keyword/dyn-2015-edition-keyword-ident-lint.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/c9dca36a3694bcbb1a742748b72065ed1ed3a060/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dca36a3694bcbb1a742748b72065ed1ed3a060/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.rs?ref=c9dca36a3694bcbb1a742748b72065ed1ed3a060", "patch": "@@ -0,0 +1,81 @@\n+// Under the 2015 edition with the keyword_idents lint, `dyn` is not\n+// entirely acceptable as an identifier. We currently do not attempt\n+// to detect or fix uses of `dyn` under a macro. Since we are testing\n+// this file via `rustfix`, we want the rustfix output to be\n+// compilable; so the macros here carefully use `dyn` \"correctly.\"\n+\n+// run-rustfix\n+\n+#![allow(non_camel_case_types)]\n+#![deny(keyword_idents)]\n+\n+mod outer_mod {\n+    pub mod dyn {\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+        pub struct dyn;\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+    }\n+}\n+use outer_mod::dyn::dyn;\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+//~| ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+\n+fn main() {\n+    match dyn { dyn => {} }\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+//~| ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+    macro_defn::dyn();\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+\n+    macro_defn::boxed();\n+}\n+\n+mod macro_defn {\n+    use super::Trait;\n+\n+    macro_rules! dyn {\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+\n+        // Note that we do not lint nor fix occurrences under macros\n+        ($dyn:tt) => { (Box<dyn Trait>, Box<$dyn Trait>) }\n+    }\n+\n+    pub fn dyn() -> ::outer_mod::dyn::dyn {\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+//~| ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+//~| ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+        ::outer_mod::dyn::dyn\n+//~^ ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+//~| ERROR `dyn` is a keyword\n+//~| WARN was previously accepted\n+    }\n+\n+\n+\n+    pub fn boxed() -> dyn!(\n+        //~^ ERROR `dyn` is a keyword\n+        //~| WARN was previously accepted\n+\n+            // Note that we do not lint nor fix occurrences under macros\n+            dyn\n+    )\n+    {\n+        (Box::new(1), Box::new(2))\n+    }\n+}\n+\n+pub trait Trait { }\n+\n+impl Trait for u32 { }"}, {"sha": "361727733bc57243be5ff7b2b3c73747d6fb0490", "filename": "src/test/ui/dyn-keyword/dyn-2015-edition-keyword-ident-lint.stderr", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/c9dca36a3694bcbb1a742748b72065ed1ed3a060/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9dca36a3694bcbb1a742748b72065ed1ed3a060/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.stderr?ref=c9dca36a3694bcbb1a742748b72065ed1ed3a060", "patch": "@@ -0,0 +1,133 @@\n+error: `dyn` is a keyword in the 2018 edition\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:13:13\n+   |\n+LL |     pub mod dyn {\n+   |             ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n+   |\n+note: lint level defined here\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:10:9\n+   |\n+LL | #![deny(keyword_idents)]\n+   |         ^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `dyn` is a keyword in the 2018 edition\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:16:20\n+   |\n+LL |         pub struct dyn;\n+   |                    ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `dyn` is a keyword in the 2018 edition\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:21:16\n+   |\n+LL | use outer_mod::dyn::dyn;\n+   |                ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `dyn` is a keyword in the 2018 edition\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:21:21\n+   |\n+LL | use outer_mod::dyn::dyn;\n+   |                     ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `dyn` is a keyword in the 2018 edition\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:28:11\n+   |\n+LL |     match dyn { dyn => {} }\n+   |           ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `dyn` is a keyword in the 2018 edition\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:28:17\n+   |\n+LL |     match dyn { dyn => {} }\n+   |                 ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `dyn` is a keyword in the 2018 edition\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:33:17\n+   |\n+LL |     macro_defn::dyn();\n+   |                 ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `dyn` is a keyword in the 2018 edition\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:43:18\n+   |\n+LL |     macro_rules! dyn {\n+   |                  ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `dyn` is a keyword in the 2018 edition\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:51:12\n+   |\n+LL |     pub fn dyn() -> ::outer_mod::dyn::dyn {\n+   |            ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `dyn` is a keyword in the 2018 edition\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:51:34\n+   |\n+LL |     pub fn dyn() -> ::outer_mod::dyn::dyn {\n+   |                                  ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `dyn` is a keyword in the 2018 edition\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:51:39\n+   |\n+LL |     pub fn dyn() -> ::outer_mod::dyn::dyn {\n+   |                                       ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `dyn` is a keyword in the 2018 edition\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:58:22\n+   |\n+LL |         ::outer_mod::dyn::dyn\n+   |                      ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `dyn` is a keyword in the 2018 edition\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:58:27\n+   |\n+LL |         ::outer_mod::dyn::dyn\n+   |                           ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `dyn` is a keyword in the 2018 edition\n+  --> $DIR/dyn-2015-edition-keyword-ident-lint.rs:67:23\n+   |\n+LL |     pub fn boxed() -> dyn!(\n+   |                       ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: aborting due to 14 previous errors\n+"}, {"sha": "f535791d7fbe498ea1c8f18c8ce5019b5b0d9983", "filename": "src/test/ui/dyn-keyword/dyn-2015-idents-in-decl-macros-unlinted.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c9dca36a3694bcbb1a742748b72065ed1ed3a060/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-idents-in-decl-macros-unlinted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dca36a3694bcbb1a742748b72065ed1ed3a060/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-idents-in-decl-macros-unlinted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-idents-in-decl-macros-unlinted.rs?ref=c9dca36a3694bcbb1a742748b72065ed1ed3a060", "patch": "@@ -0,0 +1,51 @@\n+// compile-pass\n+\n+// Under the 2015 edition with the keyword_idents lint, `dyn` is\n+// not entirely acceptable as an identifier.\n+//\n+// We currently do not attempt to detect or fix uses of `dyn` as an\n+// identifier under a macro, including under the declarative `macro`\n+// forms from macros 1.2 and macros 2.0.\n+\n+#![feature(decl_macro)]\n+#![allow(non_camel_case_types)]\n+#![deny(keyword_idents)]\n+\n+mod outer_mod {\n+    pub mod r#dyn {\n+        pub struct r#dyn;\n+    }\n+}\n+\n+// Here we are illustrating that the current lint does not flag the\n+// occurrences of `dyn` in this macro definition; however, it\n+// certainly *could* (and it would be nice if it did), since these\n+// occurrences are not compatible with the 2018 edition's\n+// interpretation of `dyn` as a keyword.\n+macro defn_has_dyn_idents() { ::outer_mod::dyn::dyn }\n+\n+struct X;\n+trait Trait { fn hello(&self) { }}\n+impl Trait for X { }\n+\n+macro tt_trait($arg:tt) { & $arg Trait }\n+macro id_trait($id:ident) { & $id Trait }\n+\n+fn main() {\n+    defn_has_dyn_idents!();\n+\n+    // Here we are illustrating that the current lint does not flag\n+    // the occurrences of `dyn` in these macro invocations. It\n+    // definitely should *not* flag the one in `tt_trait`, since that\n+    // is expanding in a valid fashion to `&dyn Trait`.\n+    //\n+    // It is arguable whether it would be valid to flag the occurrence\n+    // in `id_trait`, since that macro specifies that it takes an\n+    // `ident` as its input.\n+    fn f_tt(x: &X) -> tt_trait!(dyn) { x }\n+    fn f_id(x: &X) -> id_trait!(dyn) { x }\n+\n+    let x = X;\n+    f_tt(&x).hello();\n+    f_id(&x).hello();\n+}"}, {"sha": "27e490558689fe7fdc3ef18ff3063e7d4e5e1d9d", "filename": "src/test/ui/dyn-keyword/dyn-2015-idents-in-macros-unlinted.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c9dca36a3694bcbb1a742748b72065ed1ed3a060/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-idents-in-macros-unlinted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dca36a3694bcbb1a742748b72065ed1ed3a060/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-idents-in-macros-unlinted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-idents-in-macros-unlinted.rs?ref=c9dca36a3694bcbb1a742748b72065ed1ed3a060", "patch": "@@ -0,0 +1,56 @@\n+// compile-pass\n+\n+// Under the 2015 edition with the keyword_idents lint, `dyn` is\n+// not entirely acceptable as an identifier.\n+//\n+// We currently do not attempt to detect or fix uses of `dyn` as an\n+// identifier under a macro.\n+\n+#![allow(non_camel_case_types)]\n+#![deny(keyword_idents)]\n+\n+mod outer_mod {\n+    pub mod r#dyn {\n+        pub struct r#dyn;\n+    }\n+}\n+\n+// Here we are illustrating that the current lint does not flag the\n+// occurrences of `dyn` in this macro definition; however, it\n+// certainly *could* (and it would be nice if it did), since these\n+// occurrences are not compatible with the 2018 edition's\n+// interpretation of `dyn` as a keyword.\n+macro_rules! defn_has_dyn_idents {\n+    () => { ::outer_mod::dyn::dyn }\n+}\n+\n+struct X;\n+trait Trait { fn hello(&self) { }}\n+impl Trait for X { }\n+\n+macro_rules! tt_trait {\n+    ($arg:tt) => { & $arg Trait }\n+}\n+\n+macro_rules! id_trait {\n+    ($id:ident) => { & $id Trait }\n+}\n+\n+fn main() {\n+    defn_has_dyn_idents!();\n+\n+    // Here we are illustrating that the current lint does not flag\n+    // the occurrences of `dyn` in these macro invocations. It\n+    // definitely should *not* flag the one in `tt_trait`, since that\n+    // is expanding in a valid fashion to `&dyn Trait`.\n+    //\n+    // It is arguable whether it would be valid to flag the occurrence\n+    // in `id_trait`, since that macro specifies that it takes an\n+    // `ident` as its input.\n+    fn f_tt(x: &X) -> tt_trait!(dyn) { x }\n+    fn f_id(x: &X) -> id_trait!(dyn) { x }\n+\n+    let x = X;\n+    f_tt(&x).hello();\n+    f_id(&x).hello();\n+}"}, {"sha": "8cef5c2b349471d9a72247666ad5e8d002678575", "filename": "src/test/ui/dyn-keyword/dyn-2015-no-warnings-without-lints.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c9dca36a3694bcbb1a742748b72065ed1ed3a060/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-no-warnings-without-lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dca36a3694bcbb1a742748b72065ed1ed3a060/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-no-warnings-without-lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-no-warnings-without-lints.rs?ref=c9dca36a3694bcbb1a742748b72065ed1ed3a060", "patch": "@@ -0,0 +1,27 @@\n+// Under the 2015 edition without the keyword_idents lint, `dyn` is\n+// entirely acceptable as an identifier.\n+\n+// compile-pass\n+\n+#![allow(non_camel_case_types)]\n+\n+mod outer_mod {\n+    pub mod dyn {\n+        pub struct dyn;\n+    }\n+}\n+use outer_mod::dyn::dyn;\n+\n+fn main() {\n+    match dyn { dyn => {} }\n+    macro_defn::dyn();\n+}\n+mod macro_defn {\n+    macro_rules! dyn {\n+        () => { ::outer_mod::dyn::dyn }\n+    }\n+\n+    pub fn dyn() -> ::outer_mod::dyn::dyn {\n+        dyn!()\n+    }\n+}"}, {"sha": "ff3830d61755adb964085d27cb868fb4d0cc150a", "filename": "src/test/ui/dyn-keyword/issue-56327-dyn-trait-in-macro-is-okay.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c9dca36a3694bcbb1a742748b72065ed1ed3a060/src%2Ftest%2Fui%2Fdyn-keyword%2Fissue-56327-dyn-trait-in-macro-is-okay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dca36a3694bcbb1a742748b72065ed1ed3a060/src%2Ftest%2Fui%2Fdyn-keyword%2Fissue-56327-dyn-trait-in-macro-is-okay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fissue-56327-dyn-trait-in-macro-is-okay.rs?ref=c9dca36a3694bcbb1a742748b72065ed1ed3a060", "patch": "@@ -0,0 +1,25 @@\n+// compile-pass\n+\n+// rust-lang/rust#56327: Some occurrences of `dyn` within a macro are\n+// not instances of identifiers, and thus should *not* be caught by the\n+// keyword_ident lint.\n+//\n+// Otherwise, rustfix replaces the type `Box<dyn Drop>` with\n+// `Box<r#dyn Drop>`, which is injecting a bug rather than fixing\n+// anything.\n+\n+#![deny(rust_2018_compatibility)]\n+\n+macro_rules! foo {\n+    () => {\n+        fn generated_foo() {\n+            let _x: Box<dyn Drop>;\n+        }\n+    }\n+}\n+\n+foo!();\n+\n+fn main() {\n+    generated_foo();\n+}"}]}