{"sha": "7023bea22c969a324d7d95d8794370410ff7c4c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMjNiZWEyMmM5NjlhMzI0ZDdkOTVkODc5NDM3MDQxMGZmN2M0Yzk=", "commit": {"author": {"name": "Barosl Lee", "email": "vcs@barosl.com", "date": "2014-12-19T16:42:21Z"}, "committer": {"name": "Barosl Lee", "email": "vcs@barosl.com", "date": "2014-12-20T00:17:14Z"}, "message": "Print a friendly error for the if-let construct without an else block\n\nFixes #19991.", "tree": {"sha": "81cf841e8b8a055ea0517888c1daddadd6469e5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81cf841e8b8a055ea0517888c1daddadd6469e5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7023bea22c969a324d7d95d8794370410ff7c4c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7023bea22c969a324d7d95d8794370410ff7c4c9", "html_url": "https://github.com/rust-lang/rust/commit/7023bea22c969a324d7d95d8794370410ff7c4c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7023bea22c969a324d7d95d8794370410ff7c4c9/comments", "author": {"login": "barosl", "id": 573768, "node_id": "MDQ6VXNlcjU3Mzc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/573768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barosl", "html_url": "https://github.com/barosl", "followers_url": "https://api.github.com/users/barosl/followers", "following_url": "https://api.github.com/users/barosl/following{/other_user}", "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}", "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barosl/subscriptions", "organizations_url": "https://api.github.com/users/barosl/orgs", "repos_url": "https://api.github.com/users/barosl/repos", "events_url": "https://api.github.com/users/barosl/events{/privacy}", "received_events_url": "https://api.github.com/users/barosl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "barosl", "id": 573768, "node_id": "MDQ6VXNlcjU3Mzc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/573768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barosl", "html_url": "https://github.com/barosl", "followers_url": "https://api.github.com/users/barosl/followers", "following_url": "https://api.github.com/users/barosl/following{/other_user}", "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}", "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barosl/subscriptions", "organizations_url": "https://api.github.com/users/barosl/orgs", "repos_url": "https://api.github.com/users/barosl/repos", "events_url": "https://api.github.com/users/barosl/events{/privacy}", "received_events_url": "https://api.github.com/users/barosl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbe9fb45bc705a89f23b434c686544d490923596", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbe9fb45bc705a89f23b434c686544d490923596", "html_url": "https://github.com/rust-lang/rust/commit/cbe9fb45bc705a89f23b434c686544d490923596"}], "stats": {"total": 53, "additions": 44, "deletions": 9}, "files": [{"sha": "d4b89621ace008c21ddfd3e5f3cdadb5c40d041e", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7023bea22c969a324d7d95d8794370410ff7c4c9/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7023bea22c969a324d7d95d8794370410ff7c4c9/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=7023bea22c969a324d7d95d8794370410ff7c4c9", "patch": "@@ -238,7 +238,8 @@ pub fn check_match<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                              expr: &ast::Expr,\n                              discrim: &ast::Expr,\n                              arms: &[ast::Arm],\n-                             expected: Expectation<'tcx>) {\n+                             expected: Expectation<'tcx>,\n+                             match_src: ast::MatchSource) {\n     let tcx = fcx.ccx.tcx;\n \n     let discrim_ty = fcx.infcx().next_ty_var();\n@@ -290,12 +291,26 @@ pub fn check_match<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         if ty::type_is_error(result_ty) || ty::type_is_error(bty) {\n             ty::mk_err()\n         } else {\n+            let (origin, expected, found) = match match_src {\n+                /* if-let construct without an else block */\n+                ast::MatchIfLetDesugar(contains_else_arm) if !contains_else_arm => (\n+                    infer::IfExpressionWithNoElse(expr.span),\n+                    bty,\n+                    result_ty,\n+                ),\n+                _ => (\n+                    infer::MatchExpressionArm(expr.span, arm.body.span),\n+                    result_ty,\n+                    bty,\n+                ),\n+            };\n+\n             infer::common_supertype(\n                 fcx.infcx(),\n-                infer::MatchExpressionArm(expr.span, arm.body.span),\n-                true, // result_ty is \"expected\" here\n-                result_ty,\n-                bty\n+                origin,\n+                true,\n+                expected,\n+                found,\n             )\n         }\n     });"}, {"sha": "f8a8ef35f754b8b70e50f2af07e046a172b51480", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7023bea22c969a324d7d95d8794370410ff7c4c9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7023bea22c969a324d7d95d8794370410ff7c4c9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7023bea22c969a324d7d95d8794370410ff7c4c9", "patch": "@@ -3918,8 +3918,8 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n             fcx.write_nil(id);\n         }\n       }\n-      ast::ExprMatch(ref discrim, ref arms, _) => {\n-        _match::check_match(fcx, expr, &**discrim, arms.as_slice(), expected);\n+      ast::ExprMatch(ref discrim, ref arms, match_src) => {\n+        _match::check_match(fcx, expr, &**discrim, arms.as_slice(), expected, match_src);\n       }\n       ast::ExprClosure(_, opt_kind, ref decl, ref body) => {\n           closure::check_expr_closure(fcx, expr, opt_kind, &**decl, &**body, expected);"}, {"sha": "ab338da63bf4d854eebae86ee3a91cd324039f1c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7023bea22c969a324d7d95d8794370410ff7c4c9/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7023bea22c969a324d7d95d8794370410ff7c4c9/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=7023bea22c969a324d7d95d8794370410ff7c4c9", "patch": "@@ -754,7 +754,7 @@ pub struct QPath {\n #[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum MatchSource {\n     MatchNormal,\n-    MatchIfLetDesugar,\n+    MatchIfLetDesugar(bool /* contains_else_arm */),\n     MatchWhileLetDesugar,\n }\n "}, {"sha": "63bd38de8a096f65849a0ed19fee9b899fc00a7a", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7023bea22c969a324d7d95d8794370410ff7c4c9/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7023bea22c969a324d7d95d8794370410ff7c4c9/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=7023bea22c969a324d7d95d8794370410ff7c4c9", "patch": "@@ -170,7 +170,9 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             arms.extend(else_if_arms.into_iter());\n             arms.push(else_arm);\n \n-            let match_expr = fld.cx.expr(span, ast::ExprMatch(expr, arms, ast::MatchIfLetDesugar));\n+            let match_expr = fld.cx.expr(span, ast::ExprMatch(expr,\n+                                                              arms,\n+                                                    ast::MatchIfLetDesugar(elseopt.is_some())));\n             fld.fold_expr(match_expr)\n         }\n "}, {"sha": "0f1dbfa349277f215bccab001534fb8111bf4d88", "filename": "src/test/compile-fail/issue-19991.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7023bea22c969a324d7d95d8794370410ff7c4c9/src%2Ftest%2Fcompile-fail%2Fissue-19991.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7023bea22c969a324d7d95d8794370410ff7c4c9/src%2Ftest%2Fcompile-fail%2Fissue-19991.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19991.rs?ref=7023bea22c969a324d7d95d8794370410ff7c4c9", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test if the sugared if-let construct correctly prints \"missing an else clause\" when an else\n+// clause does not exist, instead of the unsympathetic \"match arms have incompatible types\"\n+\n+fn main() {\n+    if let Some(homura) = Some(\"madoka\") { //~ ERROR missing an else clause: expected `()`\n+        765i32\n+    };\n+}"}]}