{"sha": "d7bbd3042cc674fb1a863c89085044a8a4a8b15e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YmJkMzA0MmNjNjc0ZmIxYTg2M2M4OTA4NTA0NGE4YTRhOGIxNWU=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2017-12-08T09:53:46Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2018-01-04T07:57:14Z"}, "message": "Remove outdated LLVMRustBuildLandingPad() wrapper\n\nThe function was added as a wrapper to handle compatibility with older\nLLVM versions that we no longer support, so it can be removed.\n\nRefs #46437", "tree": {"sha": "2d791d5bd3b41de576444bfe1e69a5a64136cd6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d791d5bd3b41de576444bfe1e69a5a64136cd6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7bbd3042cc674fb1a863c89085044a8a4a8b15e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7bbd3042cc674fb1a863c89085044a8a4a8b15e", "html_url": "https://github.com/rust-lang/rust/commit/d7bbd3042cc674fb1a863c89085044a8a4a8b15e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7bbd3042cc674fb1a863c89085044a8a4a8b15e/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f4ebf9f0a3196420e25cf1558b49ea3f38643c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f4ebf9f0a3196420e25cf1558b49ea3f38643c4", "html_url": "https://github.com/rust-lang/rust/commit/0f4ebf9f0a3196420e25cf1558b49ea3f38643c4"}], "stats": {"total": 31, "additions": 11, "deletions": 20}, "files": [{"sha": "746c5a7cb247e7913488584e6355a8afe5bc8a15", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d7bbd3042cc674fb1a863c89085044a8a4a8b15e/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7bbd3042cc674fb1a863c89085044a8a4a8b15e/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=d7bbd3042cc674fb1a863c89085044a8a4a8b15e", "patch": "@@ -812,13 +812,12 @@ extern \"C\" {\n                                Bundle: OperandBundleDefRef,\n                                Name: *const c_char)\n                                -> ValueRef;\n-    pub fn LLVMRustBuildLandingPad(B: BuilderRef,\n-                                   Ty: TypeRef,\n-                                   PersFn: ValueRef,\n-                                   NumClauses: c_uint,\n-                                   Name: *const c_char,\n-                                   F: ValueRef)\n-                                   -> ValueRef;\n+    pub fn LLVMBuildLandingPad(B: BuilderRef,\n+                               Ty: TypeRef,\n+                               PersFn: ValueRef,\n+                               NumClauses: c_uint,\n+                               Name: *const c_char)\n+                               -> ValueRef;\n     pub fn LLVMBuildResume(B: BuilderRef, Exn: ValueRef) -> ValueRef;\n     pub fn LLVMBuildUnreachable(B: BuilderRef) -> ValueRef;\n "}, {"sha": "4a0b1381a40084c3b1d192cfc62b70a663a9ed44", "filename": "src/librustc_trans/builder.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7bbd3042cc674fb1a863c89085044a8a4a8b15e/src%2Flibrustc_trans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7bbd3042cc674fb1a863c89085044a8a4a8b15e/src%2Flibrustc_trans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbuilder.rs?ref=d7bbd3042cc674fb1a863c89085044a8a4a8b15e", "patch": "@@ -1012,12 +1012,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     }\n \n     pub fn landing_pad(&self, ty: Type, pers_fn: ValueRef,\n-                       num_clauses: usize,\n-                       llfn: ValueRef) -> ValueRef {\n+                       num_clauses: usize) -> ValueRef {\n         self.count_insn(\"landingpad\");\n         unsafe {\n-            llvm::LLVMRustBuildLandingPad(self.llbuilder, ty.to_ref(), pers_fn,\n-                                          num_clauses as c_uint, noname(), llfn)\n+            llvm::LLVMBuildLandingPad(self.llbuilder, ty.to_ref(), pers_fn,\n+                                      num_clauses as c_uint, noname())\n         }\n     }\n "}, {"sha": "cfddd99d0dd9aab1df1457c3c724d749afdbe728", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7bbd3042cc674fb1a863c89085044a8a4a8b15e/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7bbd3042cc674fb1a863c89085044a8a4a8b15e/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=d7bbd3042cc674fb1a863c89085044a8a4a8b15e", "patch": "@@ -925,7 +925,7 @@ fn trans_gnu_try<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n         // rust_try ignores the selector.\n         let lpad_ty = Type::struct_(ccx, &[Type::i8p(ccx), Type::i32(ccx)],\n                                     false);\n-        let vals = catch.landing_pad(lpad_ty, bcx.ccx.eh_personality(), 1, catch.llfn());\n+        let vals = catch.landing_pad(lpad_ty, bcx.ccx.eh_personality(), 1);\n         catch.add_clause(vals, C_null(Type::i8p(ccx)));\n         let ptr = catch.extract_value(vals, 0);\n         let ptr_align = bcx.tcx().data_layout.pointer_align;"}, {"sha": "8c9fb03954583fca26f1bb24b8613f445f2c0869", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7bbd3042cc674fb1a863c89085044a8a4a8b15e/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7bbd3042cc674fb1a863c89085044a8a4a8b15e/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=d7bbd3042cc674fb1a863c89085044a8a4a8b15e", "patch": "@@ -753,7 +753,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n \n         let llpersonality = self.ccx.eh_personality();\n         let llretty = self.landing_pad_type();\n-        let lp = bcx.landing_pad(llretty, llpersonality, 1, self.llfn);\n+        let lp = bcx.landing_pad(llretty, llpersonality, 1);\n         bcx.set_cleanup(lp);\n \n         let slot = self.get_personality_slot(&bcx);"}, {"sha": "d5095f1f94c3e355a8a3ab5fa949217d99ade845", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7bbd3042cc674fb1a863c89085044a8a4a8b15e/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d7bbd3042cc674fb1a863c89085044a8a4a8b15e/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=d7bbd3042cc674fb1a863c89085044a8a4a8b15e", "patch": "@@ -1144,13 +1144,6 @@ extern \"C\" void LLVMRustWriteSMDiagnosticToString(LLVMSMDiagnosticRef D,\n   unwrap(D)->print(\"\", OS);\n }\n \n-extern \"C\" LLVMValueRef\n-LLVMRustBuildLandingPad(LLVMBuilderRef B, LLVMTypeRef Ty,\n-                        LLVMValueRef PersFn, unsigned NumClauses,\n-                        const char *Name, LLVMValueRef F) {\n-  return LLVMBuildLandingPad(B, Ty, PersFn, NumClauses, Name);\n-}\n-\n extern \"C\" LLVMValueRef LLVMRustBuildCleanupPad(LLVMBuilderRef B,\n                                                 LLVMValueRef ParentPad,\n                                                 unsigned ArgCount,"}]}