{"sha": "6c0ad5b5641f12e0696f9ae0e96fe055f4c27ca3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMGFkNWI1NjQxZjEyZTA2OTZmOWFlMGU5NmZlMDU1ZjRjMjdjYTM=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-02T19:54:01Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-03T14:34:05Z"}, "message": "bench: fix fallout", "tree": {"sha": "862fde1a696b21f05758a64c18de75820db55c2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/862fde1a696b21f05758a64c18de75820db55c2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c0ad5b5641f12e0696f9ae0e96fe055f4c27ca3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c0ad5b5641f12e0696f9ae0e96fe055f4c27ca3", "html_url": "https://github.com/rust-lang/rust/commit/6c0ad5b5641f12e0696f9ae0e96fe055f4c27ca3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c0ad5b5641f12e0696f9ae0e96fe055f4c27ca3/comments", "author": null, "committer": null, "parents": [{"sha": "91eeb641cd53344d8a5a06d8b768cda3ccd030c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/91eeb641cd53344d8a5a06d8b768cda3ccd030c3", "html_url": "https://github.com/rust-lang/rust/commit/91eeb641cd53344d8a5a06d8b768cda3ccd030c3"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "ccc50b867dcd64f6ee4e9b47c93031a2cf1c47ba", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c0ad5b5641f12e0696f9ae0e96fe055f4c27ca3/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0ad5b5641f12e0696f9ae0e96fe055f4c27ca3/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=6c0ad5b5641f12e0696f9ae0e96fe055f4c27ca3", "patch": "@@ -75,7 +75,9 @@ impl<'a> AAGen<'a> {\n         AAGen { rng: rng, data: data }\n     }\n }\n-impl<'a> Iterator<u8> for AAGen<'a> {\n+impl<'a> Iterator for AAGen<'a> {\n+    type Item = u8;\n+\n     fn next(&mut self) -> Option<u8> {\n         let r = self.rng.gen();\n         self.data.iter()\n@@ -85,7 +87,7 @@ impl<'a> Iterator<u8> for AAGen<'a> {\n     }\n }\n \n-fn make_fasta<W: Writer, I: Iterator<u8>>(\n+fn make_fasta<W: Writer, I: Iterator<Item=u8>>(\n     wr: &mut W, header: &str, mut it: I, mut n: uint)\n     -> std::io::IoResult<()>\n {"}, {"sha": "ff681ca7f14701e8fce1c933939ee66aedacc26e", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c0ad5b5641f12e0696f9ae0e96fe055f4c27ca3/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0ad5b5641f12e0696f9ae0e96fe055f4c27ca3/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=6c0ad5b5641f12e0696f9ae0e96fe055f4c27ca3", "patch": "@@ -194,7 +194,9 @@ impl Table {\n     }\n }\n \n-impl<'a> Iterator<&'a Entry> for Items<'a> {\n+impl<'a> Iterator for Items<'a> {\n+    type Item = &'a Entry;\n+\n     fn next(&mut self) -> Option<&'a Entry> {\n         let ret = match self.cur {\n             None => {"}, {"sha": "004d90fd6e550091ee5848f5c7d9965f16e73874", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c0ad5b5641f12e0696f9ae0e96fe055f4c27ca3/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0ad5b5641f12e0696f9ae0e96fe055f4c27ca3/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=6c0ad5b5641f12e0696f9ae0e96fe055f4c27ca3", "patch": "@@ -57,7 +57,9 @@ struct Iterate<'a, T> {\n     f: |&T|: 'a -> T,\n     next: T\n }\n-impl<'a, T> Iterator<T> for Iterate<'a, T> {\n+impl<'a, T> Iterator for Iterate<'a, T> {\n+    type Item = T;\n+\n     fn next(&mut self) -> Option<T> {\n         let mut res = (self.f)(&self.next);\n         std::mem::swap(&mut res, &mut self.next);\n@@ -78,7 +80,9 @@ impl<'a, T> List<'a, T> {\n         ListIterator{cur: self}\n     }\n }\n-impl<'a, T> Iterator<&'a T> for ListIterator<'a, T> {\n+impl<'a, T> Iterator for ListIterator<'a, T> {\n+    type Item = &'a T;\n+\n     fn next(&mut self) -> Option<&'a T> {\n         match *self.cur {\n             List::Nil => None,"}, {"sha": "c85aae4dd2fac9f61257f8ad8a94780e1162744c", "filename": "src/test/bench/shootout-reverse-complement.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c0ad5b5641f12e0696f9ae0e96fe055f4c27ca3/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0ad5b5641f12e0696f9ae0e96fe055f4c27ca3/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs?ref=6c0ad5b5641f12e0696f9ae0e96fe055f4c27ca3", "patch": "@@ -150,7 +150,9 @@ struct MutDnaSeqs<'a> { s: &'a mut [u8] }\n fn mut_dna_seqs<'a>(s: &'a mut [u8]) -> MutDnaSeqs<'a> {\n     MutDnaSeqs { s: s }\n }\n-impl<'a> Iterator<&'a mut [u8]> for MutDnaSeqs<'a> {\n+impl<'a> Iterator for MutDnaSeqs<'a> {\n+    type Item = &'a mut [u8];\n+\n     fn next(&mut self) -> Option<&'a mut [u8]> {\n         let tmp = std::mem::replace(&mut self.s, &mut []);\n         let tmp = match memchr(tmp, b'\\n') {\n@@ -229,7 +231,7 @@ unsafe impl<T: 'static> Send for Racy<T> {}\n /// The closure `f` is run in parallel with an element of `iter`.\n fn parallel<'a, I, T, F>(mut iter: I, f: F)\n         where T: 'a+Send + Sync,\n-              I: Iterator<&'a mut [T]>,\n+              I: Iterator<Item=&'a mut [T]>,\n               F: Fn(&mut [T]) + Sync {\n     use std::mem;\n     use std::raw::Repr;"}]}