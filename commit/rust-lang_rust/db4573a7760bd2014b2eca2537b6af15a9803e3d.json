{"sha": "db4573a7760bd2014b2eca2537b6af15a9803e3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNDU3M2E3NzYwYmQyMDE0YjJlY2EyNTM3YjZhZjE1YTk4MDNlM2Q=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-04T01:51:58Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-09T00:04:00Z"}, "message": "librustc: Remove mutable fields from the language.\n\nThey're still parsed though, to get through bootstrapping.", "tree": {"sha": "ad598aad92edd9b68fa52d8635814fcce6d54dca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad598aad92edd9b68fa52d8635814fcce6d54dca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db4573a7760bd2014b2eca2537b6af15a9803e3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db4573a7760bd2014b2eca2537b6af15a9803e3d", "html_url": "https://github.com/rust-lang/rust/commit/db4573a7760bd2014b2eca2537b6af15a9803e3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db4573a7760bd2014b2eca2537b6af15a9803e3d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7522417d48c03a110fa8839428424d6dbae1223", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7522417d48c03a110fa8839428424d6dbae1223", "html_url": "https://github.com/rust-lang/rust/commit/c7522417d48c03a110fa8839428424d6dbae1223"}], "stats": {"total": 246, "additions": 69, "deletions": 177}, "files": [{"sha": "fd35a4425d87017214e10b41af7e34ab2a3717e5", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=db4573a7760bd2014b2eca2537b6af15a9803e3d", "patch": "@@ -204,18 +204,6 @@ fn each_reexport(d: ebml::Doc, f: &fn(ebml::Doc) -> bool) {\n     }\n }\n \n-fn field_mutability(d: ebml::Doc) -> ast::struct_mutability {\n-    // Use maybe_get_doc in case it's a method\n-    reader::maybe_get_doc(d, tag_struct_mut).map_default(\n-        ast::struct_immutable,\n-        |d| {\n-            match reader::doc_as_u8(*d) as char {\n-              'm' => ast::struct_mutable,\n-              _   => ast::struct_immutable\n-            }\n-        })\n-}\n-\n fn variant_disr_val(d: ebml::Doc) -> Option<int> {\n     do reader::maybe_get_doc(d, tag_disr_val).chain |val_doc| {\n         int::parse_bytes(reader::doc_data(val_doc), 10u)\n@@ -923,12 +911,10 @@ pub fn get_struct_fields(intr: @ident_interner, cdata: cmd, id: ast::node_id)\n         if f == PublicField || f == PrivateField || f == InheritedField {\n             let name = item_name(intr, an_item);\n             let did = item_def_id(an_item, cdata);\n-            let mt = field_mutability(an_item);\n             result.push(ty::field_ty {\n                 ident: name,\n                 id: did, vis:\n                 struct_field_family_to_visibility(f),\n-                mutability: mt,\n             });\n         }\n     }\n@@ -938,7 +924,6 @@ pub fn get_struct_fields(intr: @ident_interner, cdata: cmd, id: ast::node_id)\n             ident: special_idents::unnamed_field,\n             id: did,\n             vis: ast::inherited,\n-            mutability: ast::struct_immutable,\n         });\n     }\n     result"}, {"sha": "87ccd1e45b6f9855ccfcfda19291e863b0bc724e", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=db4573a7760bd2014b2eca2537b6af15a9803e3d", "patch": "@@ -119,16 +119,6 @@ fn encode_region_param(ecx: @EncodeContext,\n     }\n }\n \n-fn encode_mutability(ebml_w: &mut writer::Encoder, mt: struct_mutability) {\n-    ebml_w.start_tag(tag_struct_mut);\n-    let val = match mt {\n-      struct_immutable => 'a',\n-      struct_mutable => 'm'\n-    };\n-    ebml_w.writer.write(&[val as u8]);\n-    ebml_w.end_tag();\n-}\n-\n struct entry<T> {\n     val: T,\n     pos: uint\n@@ -518,13 +508,9 @@ fn encode_info_for_struct(ecx: @EncodeContext,\n      /* We encode both private and public fields -- need to include\n         private fields to get the offsets right */\n     for fields.each |field| {\n-        let (nm, mt, vis) = match field.node.kind {\n-            named_field(nm, mt, vis) => (nm, mt, vis),\n-            unnamed_field => (\n-                special_idents::unnamed_field,\n-                struct_immutable,\n-                inherited\n-            )\n+        let (nm, vis) = match field.node.kind {\n+            named_field(nm, vis) => (nm, vis),\n+            unnamed_field => (special_idents::unnamed_field, inherited)\n         };\n \n         let id = field.node.id;\n@@ -537,7 +523,6 @@ fn encode_info_for_struct(ecx: @EncodeContext,\n         encode_name(ecx, ebml_w, nm);\n         encode_path(ecx, ebml_w, path, ast_map::path_name(nm));\n         encode_type(ecx, ebml_w, node_id_to_type(tcx, id));\n-        encode_mutability(ebml_w, mt);\n         encode_def_id(ebml_w, local_def(id));\n         ebml_w.end_tag();\n     }\n@@ -828,7 +813,7 @@ fn encode_info_for_item(ecx: @EncodeContext,\n         needs to know*/\n         for struct_def.fields.each |f| {\n             match f.node.kind {\n-                named_field(ident, _, vis) => {\n+                named_field(ident, vis) => {\n                    ebml_w.start_tag(tag_item_field);\n                    encode_struct_field_family(ebml_w, vis);\n                    encode_name(ecx, ebml_w, ident);"}, {"sha": "ceb473da52fc0d008326e2149b2bcb8fa56dfe96", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=db4573a7760bd2014b2eca2537b6af15a9803e3d", "patch": "@@ -56,7 +56,6 @@ pub enum lint {\n     non_camel_case_types,\n     type_limits,\n     default_methods,\n-    deprecated_mutable_fields,\n     unused_unsafe,\n \n     managed_heap_memory,\n@@ -455,7 +454,6 @@ fn check_item(i: @ast::item, cx: ty::ctxt) {\n     check_item_heap(cx, i);\n     check_item_type_limits(cx, i);\n     check_item_default_methods(cx, i);\n-    check_item_deprecated_mutable_fields(cx, i);\n     check_item_unused_unsafe(cx, i);\n     check_item_unused_mut(cx, i);\n }\n@@ -640,28 +638,7 @@ fn check_item_default_methods(cx: ty::ctxt, item: @ast::item) {\n     }\n }\n \n-fn check_item_deprecated_mutable_fields(cx: ty::ctxt, item: @ast::item) {\n-    match item.node {\n-        ast::item_struct(struct_def, _) => {\n-            for struct_def.fields.each |field| {\n-                match field.node.kind {\n-                    ast::named_field(_, ast::struct_mutable, _) => {\n-                        cx.sess.span_lint(deprecated_mutable_fields,\n-                                          item.id,\n-                                          item.id,\n-                                          field.span,\n-                                          \"mutable fields are deprecated\");\n-                    }\n-                    ast::named_field(*) | ast::unnamed_field => {}\n-                }\n-            }\n-        }\n-        _ => {}\n-    }\n-}\n-\n fn check_item_ctypes(cx: ty::ctxt, it: @ast::item) {\n-\n     fn check_foreign_fn(cx: ty::ctxt, fn_id: ast::node_id,\n                         decl: &ast::fn_decl) {\n         let tys = vec::map(decl.inputs, |a| a.ty );"}, {"sha": "26992388b29d385b4acbc0bf41dc20b663f66cfa", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=db4573a7760bd2014b2eca2537b6af15a9803e3d", "patch": "@@ -581,17 +581,7 @@ pub impl mem_categorization_ctxt {\n                              f_name: ast::ident,\n                              f_ty: ty::t,\n                              field_id: ast::node_id) -> cmt {\n-        let f_mutbl = match field_mutbl(self.tcx, base_cmt.ty,\n-                                        f_name, field_id) {\n-            Some(f_mutbl) => f_mutbl,\n-            None => {\n-                self.tcx.sess.span_bug(\n-                    node.span(),\n-                    fmt!(\"Cannot find field `%s` in type `%s`\",\n-                         *self.tcx.sess.str_of(f_name),\n-                         ty_to_str(self.tcx, base_cmt.ty)));\n-            }\n-        };\n+        let f_mutbl = m_imm;\n         let m = self.inherited_mutability(base_cmt.mutbl, f_mutbl);\n         let f_interior = interior_field(f_name, f_mutbl);\n         @cmt_ {\n@@ -968,11 +958,7 @@ pub fn field_mutbl(tcx: ty::ctxt,\n       ty::ty_struct(did, _) => {\n         for ty::lookup_struct_fields(tcx, did).each |fld| {\n             if fld.ident == f_name {\n-                let m = match fld.mutability {\n-                  ast::struct_mutable => ast::m_mutbl,\n-                  ast::struct_immutable => ast::m_imm\n-                };\n-                return Some(m);\n+                return Some(ast::m_imm);\n             }\n         }\n       }\n@@ -981,11 +967,7 @@ pub fn field_mutbl(tcx: ty::ctxt,\n           ast::def_variant(_, variant_id) => {\n             for ty::lookup_struct_fields(tcx, variant_id).each |fld| {\n                 if fld.ident == f_name {\n-                    let m = match fld.mutability {\n-                      ast::struct_mutable => ast::m_mutbl,\n-                      ast::struct_immutable => ast::m_imm\n-                    };\n-                    return Some(m);\n+                    return Some(ast::m_imm);\n                 }\n             }\n           }"}, {"sha": "76d35527104d5a2326dfacf36efe2ab6543298d1", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=db4573a7760bd2014b2eca2537b6af15a9803e3d", "patch": "@@ -894,17 +894,7 @@ pub fn determine_rp_in_struct_field(\n         cm: @ast::struct_field,\n         cx: @mut DetermineRpCtxt,\n         visitor: visit::vt<@mut DetermineRpCtxt>) {\n-    match cm.node.kind {\n-      ast::named_field(_, ast::struct_mutable, _) => {\n-        do cx.with_ambient_variance(rv_invariant) {\n-            visit::visit_struct_field(cm, cx, visitor);\n-        }\n-      }\n-      ast::named_field(_, ast::struct_immutable, _) |\n-      ast::unnamed_field => {\n-        visit::visit_struct_field(cm, cx, visitor);\n-      }\n-    }\n+    visit::visit_struct_field(cm, cx, visitor);\n }\n \n pub fn determine_rp_in_crate(sess: Session,"}, {"sha": "ff002afd028f52b208f49c444dcbcf5d499e5eae", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=db4573a7760bd2014b2eca2537b6af15a9803e3d", "patch": "@@ -4667,7 +4667,7 @@ pub impl Resolver {\n                       for vec::each(class_def.fields) |field| {\n                         match field.node.kind {\n                           unnamed_field => {},\n-                          named_field(ident, _, _) => {\n+                          named_field(ident, _) => {\n                               if str::eq_slice(*this.session.str_of(ident),\n                                                name) {\n                                 return true"}, {"sha": "5f9dc277c51a3362c69399314de89c2cb00eb094", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=db4573a7760bd2014b2eca2537b6af15a9803e3d", "patch": "@@ -120,14 +120,14 @@ lvalues are *never* stored by value.\n */\n \n use back::abi;\n-use lib;\n use lib::llvm::{ValueRef, TypeRef, llvm};\n+use lib;\n use metadata::csearch;\n use middle::trans::_match;\n use middle::trans::adt;\n use middle::trans::asm;\n-use middle::trans::base;\n use middle::trans::base::*;\n+use middle::trans::base;\n use middle::trans::build::*;\n use middle::trans::callee::DoAutorefArg;\n use middle::trans::callee;\n@@ -142,8 +142,10 @@ use middle::trans::machine;\n use middle::trans::meth;\n use middle::trans::tvec;\n use middle::trans::type_of;\n+use middle::ty::struct_fields;\n+use middle::ty::{AutoDerefRef, AutoAddEnv};\n+use middle::ty::{AutoPtr, AutoBorrowVec, AutoBorrowVecRef, AutoBorrowFn};\n use middle::ty;\n-use middle::ty::struct_mutable_fields;\n use middle::ty::{AutoPtr, AutoBorrowVec, AutoBorrowVecRef, AutoBorrowFn,\n                  AutoDerefRef, AutoAddEnv, AutoUnsafe};\n use util::common::indenter;\n@@ -1107,7 +1109,7 @@ pub fn with_field_tys<R>(tcx: ty::ctxt,\n                          op: &fn(int, (&[ty::field])) -> R) -> R {\n     match ty::get(ty).sty {\n         ty::ty_struct(did, ref substs) => {\n-            op(0, struct_mutable_fields(tcx, did, substs))\n+            op(0, struct_fields(tcx, did, substs))\n         }\n \n         ty::ty_enum(_, ref substs) => {\n@@ -1124,8 +1126,8 @@ pub fn with_field_tys<R>(tcx: ty::ctxt,\n                         ast::def_variant(enum_id, variant_id) => {\n                             let variant_info = ty::enum_variant_with_id(\n                                 tcx, enum_id, variant_id);\n-                            op(variant_info.disr_val, struct_mutable_fields(\n-                                tcx, variant_id, substs))\n+                            op(variant_info.disr_val,\n+                               struct_fields(tcx, variant_id, substs))\n                         }\n                         _ => {\n                             tcx.sess.bug(~\"resolve didn't map this expr to a \\"}, {"sha": "3b06f903641d4fe08c1096590c9351dc0f95b0d2", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=db4573a7760bd2014b2eca2537b6af15a9803e3d", "patch": "@@ -496,9 +496,7 @@ pub fn trans_struct_drop(bcx: block,\n         Call(bcx, dtor_addr, args);\n \n         // Drop the fields\n-        let field_tys =\n-            ty::struct_mutable_fields(bcx.tcx(), class_did,\n-                                              substs);\n+        let field_tys = ty::struct_fields(bcx.tcx(), class_did, substs);\n         for vec::eachi(field_tys) |i, fld| {\n             let llfld_a = adt::trans_field_ptr(bcx, repr, v0, 0, i);\n             bcx = drop_ty(bcx, llfld_a, fld.mt.ty);"}, {"sha": "b2938476d35071938f4837d5ec72cb97e2b1d0d8", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 10, "deletions": 41, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=db4573a7760bd2014b2eca2537b6af15a9803e3d", "patch": "@@ -106,10 +106,9 @@ pub enum SelfMode {\n }\n \n pub struct field_ty {\n-  ident: ident,\n-  id: def_id,\n-  vis: ast::visibility,\n-  mutability: ast::struct_mutability,\n+    ident: ident,\n+    id: def_id,\n+    vis: ast::visibility,\n }\n \n // Contains information needed to resolve types and (in the future) look up\n@@ -4027,12 +4026,11 @@ pub fn lookup_struct_field(cx: ctxt,\n fn struct_field_tys(fields: &[@struct_field]) -> ~[field_ty] {\n     do fields.map |field| {\n         match field.node.kind {\n-            named_field(ident, mutability, visibility) => {\n+            named_field(ident, visibility) => {\n                 field_ty {\n                     ident: ident,\n                     id: ast_util::local_def(field.node.id),\n                     vis: visibility,\n-                    mutability: mutability,\n                 }\n             }\n             unnamed_field => {\n@@ -4041,51 +4039,22 @@ fn struct_field_tys(fields: &[@struct_field]) -> ~[field_ty] {\n                         syntax::parse::token::special_idents::unnamed_field,\n                     id: ast_util::local_def(field.node.id),\n                     vis: ast::public,\n-                    mutability: ast::struct_immutable,\n                 }\n             }\n         }\n     }\n }\n \n-// Return a list of fields corresponding to the struct's items\n-// (as if the struct was a record). trans uses this\n-// Takes a list of substs with which to instantiate field types\n-// Keep in mind that this function reports that all fields are\n-// mutable, regardless of how they were declared. It's meant to\n-// be used in trans.\n-pub fn struct_mutable_fields(cx: ctxt,\n-                             did: ast::def_id,\n-                             substs: &substs)\n-                          -> ~[field] {\n-    struct_item_fields(cx, did, substs, |_mt| m_mutbl)\n-}\n-\n-// Same as struct_mutable_fields, but doesn't change\n-// mutability.\n-pub fn struct_fields(cx: ctxt,\n-                     did: ast::def_id,\n-                     substs: &substs)\n-                  -> ~[field] {\n-    struct_item_fields(cx, did, substs, |mt| match mt {\n-      struct_mutable => m_mutbl,\n-        struct_immutable => m_imm })\n-}\n-\n-\n-fn struct_item_fields(cx:ctxt,\n-                     did: ast::def_id,\n-                     substs: &substs,\n-                     frob_mutability: &fn(struct_mutability) -> mutability)\n-    -> ~[field] {\n+// Returns a list of fields corresponding to the struct's items. trans uses\n+// this. Takes a list of substs with which to instantiate field types.\n+pub fn struct_fields(cx: ctxt, did: ast::def_id, substs: &substs)\n+                     -> ~[field] {\n     do lookup_struct_fields(cx, did).map |f| {\n-       // consider all instance vars mut, because the\n-       // constructor may mutate all vars\n        field {\n-           ident: f.ident,\n+            ident: f.ident,\n             mt: mt {\n                 ty: lookup_field_type(cx, did, f.id, substs),\n-                mutbl: frob_mutability(f.mutability)\n+                mutbl: m_imm\n             }\n         }\n     }"}, {"sha": "f04ca4b7a04366c4b60c6cd8b15b1b5b7186c791", "filename": "src/librustdoc/extract.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibrustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibrustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fextract.rs?ref=db4573a7760bd2014b2eca2537b6af15a9803e3d", "patch": "@@ -274,7 +274,7 @@ fn structdoc_from_struct(\n         item: itemdoc,\n         fields: do struct_def.fields.map |field| {\n             match field.node.kind {\n-                ast::named_field(ident, _, _) => to_str(ident),\n+                ast::named_field(ident, _) => to_str(ident),\n                 ast::unnamed_field => ~\"(unnamed)\",\n             }\n         },"}, {"sha": "c8fc04eaea1a3cd3ac4f2549efa287a991c86ff8", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=db4573a7760bd2014b2eca2537b6af15a9803e3d", "patch": "@@ -1168,7 +1168,7 @@ pub type struct_field = spanned<struct_field_>;\n #[auto_decode]\n #[deriving(Eq)]\n pub enum struct_field_kind {\n-    named_field(ident, struct_mutability, visibility),\n+    named_field(ident, visibility),\n     unnamed_field   // element of a tuple-like struct\n }\n \n@@ -1218,17 +1218,6 @@ pub enum item_ {\n     item_mac(mac),\n }\n \n-#[auto_encode]\n-#[auto_decode]\n-#[deriving(Eq)]\n-pub enum struct_mutability { struct_mutable, struct_immutable }\n-\n-impl to_bytes::IterBytes for struct_mutability {\n-    fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) {\n-        (*self as u8).iter_bytes(lsb0, f)\n-    }\n-}\n-\n #[auto_encode]\n #[auto_decode]\n #[deriving(Eq)]\n@@ -1289,6 +1278,21 @@ mod test {\n         assert_eq! (s,~[14]);\n     }\n \n+    #[test] fn test_marksof () {\n+        let stopname = uints_to_name(&~[12,14,78]);\n+        assert_eq!(s,~[]);\n+        xorPush(&mut s,14);\n+        assert_eq!(s,~[14]);\n+        xorPush(&mut s,15);\n+        assert_eq!(s,~[14,15]);\n+        xorPush (&mut s,16);\n+        assert_eq! (s,~[14,15,16]);\n+        xorPush (&mut s,16);\n+        assert_eq! (s,~[14,15]);\n+        xorPush (&mut s,15);\n+        assert_eq! (s,~[14]);\n+    }\n+\n     #[test] fn test_marksof () {\n         let stopname = uints_to_name(&~[12,14,78]);\n         let name1 = uints_to_name(&~[4,9,7]);\n@@ -1347,3 +1351,12 @@ mod test {\n }\n \n */\n+//\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// End:\n+//"}, {"sha": "7b20d71fdc4094a4e37241dee93aa36f63aaa877", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=db4573a7760bd2014b2eca2537b6af15a9803e3d", "patch": "@@ -285,7 +285,7 @@ pub fn split_trait_methods(trait_methods: &[trait_method])\n \n pub fn struct_field_visibility(field: ast::struct_field) -> visibility {\n     match field.node.kind {\n-        ast::named_field(_, _, visibility) => visibility,\n+        ast::named_field(_, visibility) => visibility,\n         ast::unnamed_field => ast::public\n     }\n }"}, {"sha": "5bd4f89a3b38bb538cc4441d8d7a663475671ebe", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=db4573a7760bd2014b2eca2537b6af15a9803e3d", "patch": "@@ -914,19 +914,15 @@ struct field {\n \n fn mk_struct_fields(fields: &[@ast::struct_field]) -> ~[field] {\n     do fields.map |field| {\n-        let (ident, mutbl) = match field.node.kind {\n-            ast::named_field(ident, mutbl, _) => (ident, mutbl),\n-            _ => fail!(~\"[auto_encode] does not support \\\n-                        unnamed fields\")\n+        let ident = match field.node.kind {\n+            ast::named_field(ident, _) => ident,\n+            _ => fail!(~\"[auto_encode] does not support unnamed fields\")\n         };\n \n         field {\n             span: field.span,\n             ident: ident,\n-            mutbl: match mutbl {\n-                ast::struct_mutable => ast::m_mutbl,\n-                ast::struct_immutable => ast::m_imm,\n-            },\n+            mutbl: ast::m_imm,\n         }\n     }\n }"}, {"sha": "2bdfe51c50eabdf822611a05ba37a94dc238c83d", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=db4573a7760bd2014b2eca2537b6af15a9803e3d", "patch": "@@ -280,7 +280,7 @@ fn expand_deriving_decodable_struct_method(\n     let mut fields = ~[];\n     for struct_def.fields.each |struct_field| {\n         match struct_field.node.kind {\n-            named_field(ident, _, _) => {\n+            named_field(ident, _) => {\n                 fields.push(create_read_struct_field(cx, span, i, ident));\n             }\n             unnamed_field => {"}, {"sha": "54e5687f415ab112b7a08a201e041cb72342585e", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=db4573a7760bd2014b2eca2537b6af15a9803e3d", "patch": "@@ -211,7 +211,7 @@ fn expand_deriving_encodable_struct_method(\n     let mut statements = ~[];\n     for struct_def.fields.each |struct_field| {\n         match struct_field.node.kind {\n-            named_field(ident, _, _) => {\n+            named_field(ident, _) => {\n                 // Create the accessor for this field.\n                 let self_field = build::mk_access(\n                     cx,"}, {"sha": "3d66506d6ca8ffadb220f0f7bb0c15cee01ccdc7", "filename": "src/libsyntax/ext/deriving/iter_bytes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs?ref=db4573a7760bd2014b2eca2537b6af15a9803e3d", "patch": "@@ -90,4 +90,4 @@ fn iter_bytes_substructure(cx: @ext_ctxt, span: span, substr: &Substructure) ->\n     }\n \n     build::mk_block(cx, span, ~[], stmts, None)\n-}\n\\ No newline at end of file\n+}"}, {"sha": "00a91bdc46e8a3e6f3c071b6faf87b9ddd1788da", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=db4573a7760bd2014b2eca2537b6af15a9803e3d", "patch": "@@ -410,10 +410,8 @@ impl gen_init for protocol {\n \n             @spanned {\n                 node: ast::struct_field_ {\n-                    kind: ast::named_field(\n-                            cx.ident_of(s.name),\n-                            ast::struct_immutable,\n-                            ast::inherited),\n+                    kind: ast::named_field(cx.ident_of(s.name),\n+                                           ast::inherited),\n                     id: cx.next_id(),\n                     ty: fty,\n                     attrs: ~[],"}, {"sha": "9eb74f9e5296188dafae3b524ee75619499e6eeb", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=db4573a7760bd2014b2eca2537b6af15a9803e3d", "patch": "@@ -45,7 +45,7 @@ use ast::{pat_tup, pat_uniq, pat_wild, private};\n use ast::{rem, required};\n use ast::{ret_style, return_val, self_ty, shl, shr, stmt, stmt_decl};\n use ast::{stmt_expr, stmt_semi, stmt_mac, struct_def, struct_field};\n-use ast::{struct_immutable, struct_mutable, struct_variant_kind, subtract};\n+use ast::{struct_variant_kind, subtract};\n use ast::{sty_box, sty_region, sty_static, sty_uniq, sty_value};\n use ast::{token_tree, trait_method, trait_ref, tt_delim, tt_seq, tt_tok};\n use ast::{tt_nonterminal, tuple_variant_kind, Ty, ty_, ty_bot, ty_box};\n@@ -2528,10 +2528,10 @@ pub impl Parser {\n     fn parse_name_and_ty(&self,\n                          pr: visibility,\n                          attrs: ~[attribute]) -> @struct_field {\n-        let mut is_mutbl = struct_immutable;\n         let lo = self.span.lo;\n         if self.eat_keyword(&~\"mut\") {\n-            is_mutbl = struct_mutable;\n+            // Do nothing, for backwards compatibility.\n+            // XXX: Remove after snapshot.\n         }\n         if !is_plain_ident(&*self.token) {\n             self.fatal(~\"expected ident\");\n@@ -2540,7 +2540,7 @@ pub impl Parser {\n         self.expect(&token::COLON);\n         let ty = self.parse_ty(false);\n         @spanned(lo, self.last_span.hi, ast::struct_field_ {\n-            kind: named_field(name, is_mutbl, pr),\n+            kind: named_field(name, pr),\n             id: self.get_id(),\n             ty: ty,\n             attrs: attrs,"}, {"sha": "f12fb21992e85dbd3a97ad26ae9800745e65e41f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4573a7760bd2014b2eca2537b6af15a9803e3d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=db4573a7760bd2014b2eca2537b6af15a9803e3d", "patch": "@@ -703,14 +703,11 @@ pub fn print_struct(s: @ps,\n         for struct_def.fields.each |field| {\n             match field.node.kind {\n                 ast::unnamed_field => fail!(~\"unexpected unnamed field\"),\n-                ast::named_field(ident, mutability, visibility) => {\n+                ast::named_field(ident, visibility) => {\n                     hardbreak_if_not_bol(s);\n                     maybe_print_comment(s, field.span.lo);\n                     print_outer_attributes(s, field.node.attrs);\n                     print_visibility(s, visibility);\n-                    if mutability == ast::struct_mutable {\n-                        word_nbsp(s, ~\"mut\");\n-                    }\n                     print_ident(s, ident);\n                     word_nbsp(s, ~\":\");\n                     print_type(s, field.node.ty);"}]}