{"sha": "486720f0800fd53cb0466f20bbba840798fe5da3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NjcyMGYwODAwZmQ1M2NiMDQ2NmYyMGJiYmE4NDA3OThmZTVkYTM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-30T13:29:04Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-04T08:38:54Z"}, "message": "fix determinig the size of foreign static allocations", "tree": {"sha": "786b2f5f1a9758d56f0156a4d6cb0f82adff1084", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/786b2f5f1a9758d56f0156a4d6cb0f82adff1084"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/486720f0800fd53cb0466f20bbba840798fe5da3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/486720f0800fd53cb0466f20bbba840798fe5da3", "html_url": "https://github.com/rust-lang/rust/commit/486720f0800fd53cb0466f20bbba840798fe5da3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/486720f0800fd53cb0466f20bbba840798fe5da3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5612feb5133d24caaf68f18e9ae8812ecbaa0ba3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5612feb5133d24caaf68f18e9ae8812ecbaa0ba3", "html_url": "https://github.com/rust-lang/rust/commit/5612feb5133d24caaf68f18e9ae8812ecbaa0ba3"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "bed531504d3e4a5f080d6353a9b9cd4a53aaf228", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/486720f0800fd53cb0466f20bbba840798fe5da3/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/486720f0800fd53cb0466f20bbba840798fe5da3/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=486720f0800fd53cb0466f20bbba840798fe5da3", "patch": "@@ -10,7 +10,7 @@ use std::collections::VecDeque;\n use std::ptr;\n use std::borrow::Cow;\n \n-use rustc::ty::{self, Instance, query::TyCtxtAt};\n+use rustc::ty::{self, Instance, ParamEnv, query::TyCtxtAt};\n use rustc::ty::layout::{Align, TargetDataLayout, Size, HasDataLayout};\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n \n@@ -536,19 +536,33 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     ) -> InterpResult<'static, (Size, Align)> {\n         // Regular allocations.\n         if let Ok(alloc) = self.get(id) {\n-            Ok((Size::from_bytes(alloc.bytes.len() as u64), alloc.align))\n+            return Ok((Size::from_bytes(alloc.bytes.len() as u64), alloc.align));\n         }\n         // Function pointers.\n-        else if let Ok(_) = self.get_fn_alloc(id) {\n-            if let AllocCheck::Dereferencable = liveness {\n+        if let Ok(_) = self.get_fn_alloc(id) {\n+            return if let AllocCheck::Dereferencable = liveness {\n                 // The caller requested no function pointers.\n                 err!(DerefFunctionPointer)\n             } else {\n                 Ok((Size::ZERO, Align::from_bytes(1).unwrap()))\n+            };\n+        }\n+        // Foreign statics.\n+        // Can't do this in the match argument, we may get cycle errors since the lock would\n+        // be held throughout the match.\n+        let alloc = self.tcx.alloc_map.lock().get(id);\n+        match alloc {\n+            Some(GlobalAlloc::Static(did)) => {\n+                assert!(self.tcx.is_foreign_item(did));\n+                // Use size and align of the type\n+                let ty = self.tcx.type_of(did);\n+                let layout = self.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n+                return Ok((layout.size, layout.align.abi));\n             }\n+            _ => {}\n         }\n         // The rest must be dead.\n-        else if let AllocCheck::MaybeDead = liveness {\n+        if let AllocCheck::MaybeDead = liveness {\n             // Deallocated pointers are allowed, we should be able to find\n             // them in the map.\n             Ok(*self.dead_alloc_map.get(&id)"}]}