{"sha": "06bf94a129931d6e4abadf779af40b95c143b3eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2YmY5NGExMjk5MzFkNmU0YWJhZGY3NzlhZjQwYjk1YzE0M2IzZWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-21T05:18:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-21T05:18:03Z"}, "message": "Auto merge of #43929 - oli-obk:use_placement, r=nrc\n\nImprove placement of `use` suggestions\n\nr? @nrc\n\ncc @estebank @Mark-Simulacrum\n\nfixes #42835\nfixes #42548\nfixes #43769", "tree": {"sha": "db1bb4a8a38f310b0e250869ccf38052d0ec0b0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db1bb4a8a38f310b0e250869ccf38052d0ec0b0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06bf94a129931d6e4abadf779af40b95c143b3eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06bf94a129931d6e4abadf779af40b95c143b3eb", "html_url": "https://github.com/rust-lang/rust/commit/06bf94a129931d6e4abadf779af40b95c143b3eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06bf94a129931d6e4abadf779af40b95c143b3eb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf56cf360e98aa05eb9fa897000d93f6443cf429", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf56cf360e98aa05eb9fa897000d93f6443cf429", "html_url": "https://github.com/rust-lang/rust/commit/cf56cf360e98aa05eb9fa897000d93f6443cf429"}, {"sha": "8f563226942570490ca77ea5ebfcc19fb3cf4089", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f563226942570490ca77ea5ebfcc19fb3cf4089", "html_url": "https://github.com/rust-lang/rust/commit/8f563226942570490ca77ea5ebfcc19fb3cf4089"}], "stats": {"total": 239, "additions": 198, "deletions": 41}, "files": [{"sha": "26dda2dc42d2bfb47d012631881218f81e8cfa9a", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06bf94a129931d6e4abadf779af40b95c143b3eb/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06bf94a129931d6e4abadf779af40b95c143b3eb/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=06bf94a129931d6e4abadf779af40b95c143b3eb", "patch": "@@ -217,8 +217,10 @@ impl CodeSuggestion {\n             if !buf.ends_with('\\n') {\n                 push_trailing(buf, prev_line.as_ref(), &prev_hi, None);\n             }\n-            // remove trailing newline\n-            buf.pop();\n+            // remove trailing newlines\n+            while buf.ends_with('\\n') {\n+                buf.pop();\n+            }\n         }\n         bufs\n     }"}, {"sha": "a0d7ee44faf616d68bfbd7b2c9c33f1d49f660db", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 112, "deletions": 22, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/06bf94a129931d6e4abadf779af40b95c143b3eb/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06bf94a129931d6e4abadf779af40b95c143b3eb/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=06bf94a129931d6e4abadf779af40b95c143b3eb", "patch": "@@ -581,6 +581,55 @@ impl<T> ::std::ops::IndexMut<Namespace> for PerNS<T> {\n     }\n }\n \n+struct UsePlacementFinder {\n+    target_module: NodeId,\n+    span: Option<Span>,\n+    found_use: bool,\n+}\n+\n+impl<'tcx> Visitor<'tcx> for UsePlacementFinder {\n+    fn visit_mod(\n+        &mut self,\n+        module: &'tcx ast::Mod,\n+        _: Span,\n+        _: &[ast::Attribute],\n+        node_id: NodeId,\n+    ) {\n+        if self.span.is_some() {\n+            return;\n+        }\n+        if node_id != self.target_module {\n+            visit::walk_mod(self, module);\n+            return;\n+        }\n+        // find a use statement\n+        for item in &module.items {\n+            match item.node {\n+                ItemKind::Use(..) => {\n+                    // don't suggest placing a use before the prelude\n+                    // import or other generated ones\n+                    if item.span == DUMMY_SP {\n+                        let mut span = item.span;\n+                        span.hi = span.lo;\n+                        self.span = Some(span);\n+                        self.found_use = true;\n+                        return;\n+                    }\n+                },\n+                // don't place use before extern crate\n+                ItemKind::ExternCrate(_) => {}\n+                // but place them before the first other item\n+                _ => if self.span.map_or(true, |span| item.span < span ) {\n+                    let mut span = item.span;\n+                    span.hi = span.lo;\n+                    self.span = Some(span);\n+                },\n+            }\n+        }\n+        assert!(self.span.is_some(), \"a file can't have no items and emit suggestions\");\n+    }\n+}\n+\n impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n     fn visit_item(&mut self, item: &'tcx Item) {\n         self.resolve_item(item);\n@@ -990,6 +1039,16 @@ enum NameBindingKind<'a> {\n \n struct PrivacyError<'a>(Span, Name, &'a NameBinding<'a>);\n \n+struct UseError<'a> {\n+    err: DiagnosticBuilder<'a>,\n+    /// Attach `use` statements for these candidates\n+    candidates: Vec<ImportSuggestion>,\n+    /// The node id of the module to place the use statements in\n+    node_id: NodeId,\n+    /// Whether the diagnostic should state that it's \"better\"\n+    better: bool,\n+}\n+\n struct AmbiguityError<'a> {\n     span: Span,\n     name: Name,\n@@ -1190,15 +1249,20 @@ pub struct Resolver<'a> {\n     extern_module_map: FxHashMap<(DefId, bool /* MacrosOnly? */), Module<'a>>,\n \n     pub make_glob_map: bool,\n-    // Maps imports to the names of items actually imported (this actually maps\n-    // all imports, but only glob imports are actually interesting).\n+    /// Maps imports to the names of items actually imported (this actually maps\n+    /// all imports, but only glob imports are actually interesting).\n     pub glob_map: GlobMap,\n \n     used_imports: FxHashSet<(NodeId, Namespace)>,\n     pub maybe_unused_trait_imports: NodeSet,\n \n+    /// privacy errors are delayed until the end in order to deduplicate them\n     privacy_errors: Vec<PrivacyError<'a>>,\n+    /// ambiguity errors are delayed for deduplication\n     ambiguity_errors: Vec<AmbiguityError<'a>>,\n+    /// `use` injections are delayed for better placement and deduplication\n+    use_injections: Vec<UseError<'a>>,\n+\n     gated_errors: FxHashSet<Span>,\n     disallowed_shadowing: Vec<&'a LegacyBinding<'a>>,\n \n@@ -1401,6 +1465,7 @@ impl<'a> Resolver<'a> {\n \n             privacy_errors: Vec::new(),\n             ambiguity_errors: Vec::new(),\n+            use_injections: Vec::new(),\n             gated_errors: FxHashSet(),\n             disallowed_shadowing: Vec::new(),\n \n@@ -1465,10 +1530,11 @@ impl<'a> Resolver<'a> {\n         ImportResolver { resolver: self }.finalize_imports();\n         self.current_module = self.graph_root;\n         self.finalize_current_module_macro_resolutions();\n+\n         visit::walk_crate(self, krate);\n \n         check_unused::check_crate(self, krate);\n-        self.report_errors();\n+        self.report_errors(krate);\n         self.crate_loader.postprocess(krate);\n     }\n \n@@ -2413,25 +2479,20 @@ impl<'a> Resolver<'a> {\n                 __diagnostic_used!(E0411);\n                 err.code(\"E0411\".into());\n                 err.span_label(span, \"`Self` is only available in traits and impls\");\n-                return err;\n+                return (err, Vec::new());\n             }\n             if is_self_value(path, ns) {\n                 __diagnostic_used!(E0424);\n                 err.code(\"E0424\".into());\n                 err.span_label(span, format!(\"`self` value is only available in \\\n                                                methods with `self` parameter\"));\n-                return err;\n+                return (err, Vec::new());\n             }\n \n             // Try to lookup the name in more relaxed fashion for better error reporting.\n             let ident = *path.last().unwrap();\n             let candidates = this.lookup_import_candidates(ident.node.name, ns, is_expected);\n-            if !candidates.is_empty() {\n-                let mut module_span = this.current_module.span;\n-                module_span.hi = module_span.lo;\n-                // Report import candidates as help and proceed searching for labels.\n-                show_candidates(&mut err, module_span, &candidates, def.is_some());\n-            } else if is_expected(Def::Enum(DefId::local(CRATE_DEF_INDEX))) {\n+            if candidates.is_empty() && is_expected(Def::Enum(DefId::local(CRATE_DEF_INDEX))) {\n                 let enum_candidates =\n                     this.lookup_import_candidates(ident.node.name, ns, is_enum_variant);\n                 let mut enum_candidates = enum_candidates.iter()\n@@ -2471,7 +2532,7 @@ impl<'a> Resolver<'a> {\n                                                 format!(\"Self::{}\", path_str));\n                         }\n                     }\n-                    return err;\n+                    return (err, candidates);\n                 }\n             }\n \n@@ -2488,22 +2549,22 @@ impl<'a> Resolver<'a> {\n                 match (def, source) {\n                     (Def::Macro(..), _) => {\n                         err.span_label(span, format!(\"did you mean `{}!(...)`?\", path_str));\n-                        return err;\n+                        return (err, candidates);\n                     }\n                     (Def::TyAlias(..), PathSource::Trait) => {\n                         err.span_label(span, \"type aliases cannot be used for traits\");\n-                        return err;\n+                        return (err, candidates);\n                     }\n                     (Def::Mod(..), PathSource::Expr(Some(parent))) => match parent.node {\n                         ExprKind::Field(_, ident) => {\n                             err.span_label(parent.span, format!(\"did you mean `{}::{}`?\",\n                                                                  path_str, ident.node));\n-                            return err;\n+                            return (err, candidates);\n                         }\n                         ExprKind::MethodCall(ref segment, ..) => {\n                             err.span_label(parent.span, format!(\"did you mean `{}::{}(...)`?\",\n                                                                  path_str, segment.identifier));\n-                            return err;\n+                            return (err, candidates);\n                         }\n                         _ => {}\n                     },\n@@ -2519,7 +2580,7 @@ impl<'a> Resolver<'a> {\n                         }\n                         err.span_label(span, format!(\"did you mean `{} {{ /* fields */ }}`?\",\n                                                        path_str));\n-                        return err;\n+                        return (err, candidates);\n                     }\n                     _ => {}\n                 }\n@@ -2530,10 +2591,14 @@ impl<'a> Resolver<'a> {\n                 err.span_label(base_span, fallback_label);\n                 this.type_ascription_suggestion(&mut err, base_span);\n             }\n-            err\n+            (err, candidates)\n         };\n         let report_errors = |this: &mut Self, def: Option<Def>| {\n-            report_errors(this, def).emit();\n+            let (err, candidates) = report_errors(this, def);\n+            let def_id = this.current_module.normal_ancestor_id;\n+            let node_id = this.definitions.as_local_node_id(def_id).unwrap();\n+            let better = def.is_some();\n+            this.use_injections.push(UseError { err, candidates, node_id, better });\n             err_path_resolution()\n         };\n \n@@ -3458,8 +3523,9 @@ impl<'a> Resolver<'a> {\n         vis.is_accessible_from(module.normal_ancestor_id, self)\n     }\n \n-    fn report_errors(&mut self) {\n+    fn report_errors(&mut self, krate: &Crate) {\n         self.report_shadowing_errors();\n+        self.report_with_use_injections(krate);\n         let mut reported_spans = FxHashSet();\n \n         for &AmbiguityError { span, name, b1, b2, lexical, legacy } in &self.ambiguity_errors {\n@@ -3507,6 +3573,22 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n+    fn report_with_use_injections(&mut self, krate: &Crate) {\n+        for UseError { mut err, candidates, node_id, better } in self.use_injections.drain(..) {\n+            let mut finder = UsePlacementFinder {\n+                target_module: node_id,\n+                span: None,\n+                found_use: false,\n+            };\n+            visit::walk_crate(&mut finder, krate);\n+            if !candidates.is_empty() {\n+                let span = finder.span.expect(\"did not find module\");\n+                show_candidates(&mut err, span, &candidates, better, finder.found_use);\n+            }\n+            err.emit();\n+        }\n+    }\n+\n     fn report_shadowing_errors(&mut self) {\n         for (ident, scope) in replace(&mut self.lexical_macro_resolutions, Vec::new()) {\n             self.resolve_legacy_scope(scope, ident, true);\n@@ -3697,7 +3779,8 @@ fn import_candidate_to_paths(suggestion: &ImportSuggestion) -> (Span, String, St\n fn show_candidates(err: &mut DiagnosticBuilder,\n                    span: Span,\n                    candidates: &[ImportSuggestion],\n-                   better: bool) {\n+                   better: bool,\n+                   found_use: bool) {\n \n     // we want consistent results across executions, but candidates are produced\n     // by iterating through a hash map, so make sure they are ordered:\n@@ -3713,7 +3796,14 @@ fn show_candidates(err: &mut DiagnosticBuilder,\n     let msg = format!(\"possible {}candidate{} into scope\", better, msg_diff);\n \n     for candidate in &mut path_strings {\n-        *candidate = format!(\"use {};\\n\", candidate);\n+        // produce an additional newline to separate the new use statement\n+        // from the directly following item.\n+        let additional_newline = if found_use {\n+            \"\"\n+        } else {\n+            \"\\n\"\n+        };\n+        *candidate = format!(\"use {};\\n{}\", candidate, additional_newline);\n     }\n \n     err.span_suggestions(span, &msg, path_strings);"}, {"sha": "a401861274debf02aa8383b9fc93a5cac9b362d7", "filename": "src/test/ui/resolve/enums-are-namespaced-xc.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06bf94a129931d6e4abadf779af40b95c143b3eb/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06bf94a129931d6e4abadf779af40b95c143b3eb/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr?ref=06bf94a129931d6e4abadf779af40b95c143b3eb", "patch": "@@ -6,7 +6,7 @@ error[E0425]: cannot find value `A` in module `namespaced_enums`\n    |\n help: possible candidate is found in another module, you can import it into scope\n    |\n-12 | use namespaced_enums::Foo::A;\n+14 | use namespaced_enums::Foo::A;\n    |\n \n error[E0425]: cannot find function `B` in module `namespaced_enums`\n@@ -17,7 +17,7 @@ error[E0425]: cannot find function `B` in module `namespaced_enums`\n    |\n help: possible candidate is found in another module, you can import it into scope\n    |\n-12 | use namespaced_enums::Foo::B;\n+14 | use namespaced_enums::Foo::B;\n    |\n \n error[E0422]: cannot find struct, variant or union type `C` in module `namespaced_enums`\n@@ -28,7 +28,7 @@ error[E0422]: cannot find struct, variant or union type `C` in module `namespace\n    |\n help: possible candidate is found in another module, you can import it into scope\n    |\n-12 | use namespaced_enums::Foo::C;\n+14 | use namespaced_enums::Foo::C;\n    |\n \n error: aborting due to 3 previous errors"}, {"sha": "da849ecc71ab4f6b93e3e14ba0a4f6a2151f3297", "filename": "src/test/ui/resolve/issue-21221-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06bf94a129931d6e4abadf779af40b95c143b3eb/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06bf94a129931d6e4abadf779af40b95c143b3eb/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-3.stderr?ref=06bf94a129931d6e4abadf779af40b95c143b3eb", "patch": "@@ -6,7 +6,7 @@ error[E0405]: cannot find trait `OuterTrait` in this scope\n    |\n help: possible candidate is found in another module, you can import it into scope\n    |\n-16 | use issue_21221_3::outer::OuterTrait;\n+18 | use issue_21221_3::outer::OuterTrait;\n    |\n \n error: cannot continue compilation due to previous error"}, {"sha": "78059ed37bee86401c71d43966cbda76a243eb5b", "filename": "src/test/ui/resolve/issue-21221-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06bf94a129931d6e4abadf779af40b95c143b3eb/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06bf94a129931d6e4abadf779af40b95c143b3eb/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-4.stderr?ref=06bf94a129931d6e4abadf779af40b95c143b3eb", "patch": "@@ -6,7 +6,7 @@ error[E0405]: cannot find trait `T` in this scope\n    |\n help: possible candidate is found in another module, you can import it into scope\n    |\n-16 | use issue_21221_4::T;\n+18 | use issue_21221_4::T;\n    |\n \n error: cannot continue compilation due to previous error"}, {"sha": "7a4d0ca698e6dec0d58b1e0ee6ec15bddb3d0bad", "filename": "src/test/ui/resolve/issue-3907.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06bf94a129931d6e4abadf779af40b95c143b3eb/src%2Ftest%2Fui%2Fresolve%2Fissue-3907.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06bf94a129931d6e4abadf779af40b95c143b3eb/src%2Ftest%2Fui%2Fresolve%2Fissue-3907.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-3907.stderr?ref=06bf94a129931d6e4abadf779af40b95c143b3eb", "patch": "@@ -6,7 +6,7 @@ error[E0404]: expected trait, found type alias `Foo`\n    |\n help: possible better candidate is found in another module, you can import it into scope\n    |\n-12 | use issue_3907::Foo;\n+14 | use issue_3907::Foo;\n    |\n \n error: cannot continue compilation due to previous error"}, {"sha": "ee1481ec6f2b0087d4964dac21d037bfbf26950b", "filename": "src/test/ui/resolve/privacy-struct-ctor.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06bf94a129931d6e4abadf779af40b95c143b3eb/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06bf94a129931d6e4abadf779af40b95c143b3eb/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr?ref=06bf94a129931d6e4abadf779af40b95c143b3eb", "patch": "@@ -10,7 +10,7 @@ error[E0423]: expected value, found struct `Z`\n    |\n help: possible better candidate is found in another module, you can import it into scope\n    |\n-15 | use m::n::Z;\n+16 |     use m::n::Z;\n    |\n \n error[E0423]: expected value, found struct `S`\n@@ -24,7 +24,7 @@ error[E0423]: expected value, found struct `S`\n    |\n help: possible better candidate is found in another module, you can import it into scope\n    |\n-13 | use m::S;\n+15 | use m::S;\n    |\n \n error[E0423]: expected value, found struct `xcrate::S`\n@@ -38,7 +38,7 @@ error[E0423]: expected value, found struct `xcrate::S`\n    |\n help: possible better candidate is found in another module, you can import it into scope\n    |\n-13 | use m::S;\n+15 | use m::S;\n    |\n \n error[E0603]: tuple struct `Z` is private"}, {"sha": "e0027fed4d6f292efe713351e11dbc68f75ca27d", "filename": "src/test/ui/resolve/use_suggestion_placement.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/06bf94a129931d6e4abadf779af40b95c143b3eb/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06bf94a129931d6e4abadf779af40b95c143b3eb/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.rs?ref=06bf94a129931d6e4abadf779af40b95c143b3eb", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! y {\n+    () => {}\n+}\n+\n+mod m {\n+    pub const A: i32 = 0;\n+}\n+\n+fn main() {\n+    y!();\n+    let _ = A;\n+    foo();\n+}\n+\n+fn foo() {\n+    type Dict<K, V> = HashMap<K, V>;\n+}"}, {"sha": "5c74d8bed6665370d385fd13162ac36e6a1b3b46", "filename": "src/test/ui/resolve/use_suggestion_placement.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/06bf94a129931d6e4abadf779af40b95c143b3eb/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06bf94a129931d6e4abadf779af40b95c143b3eb/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr?ref=06bf94a129931d6e4abadf779af40b95c143b3eb", "patch": "@@ -0,0 +1,38 @@\n+error[E0425]: cannot find value `A` in this scope\n+  --> $DIR/use_suggestion_placement.rs:21:13\n+   |\n+21 |     let _ = A;\n+   |             ^ not found in this scope\n+   |\n+help: possible candidate is found in another module, you can import it into scope\n+   |\n+11 | use m::A;\n+   |\n+\n+error[E0412]: cannot find type `HashMap` in this scope\n+  --> $DIR/use_suggestion_placement.rs:26:23\n+   |\n+26 |     type Dict<K, V> = HashMap<K, V>;\n+   |                       ^^^^^^^ not found in this scope\n+   |\n+help: possible candidates are found in other modules, you can import them into scope\n+   |\n+11 | use std::collections::HashMap;\n+   |\n+11 | use std::collections::hash_map::HashMap;\n+   |\n+\n+error[E0091]: type parameter `K` is unused\n+  --> $DIR/use_suggestion_placement.rs:26:15\n+   |\n+26 |     type Dict<K, V> = HashMap<K, V>;\n+   |               ^ unused type parameter\n+\n+error[E0091]: type parameter `V` is unused\n+  --> $DIR/use_suggestion_placement.rs:26:18\n+   |\n+26 |     type Dict<K, V> = HashMap<K, V>;\n+   |                  ^ unused type parameter\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "344cf69748eccf9f3ac688be384b1eb786b9bb96", "filename": "src/test/ui/span/visibility-ty-params.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/06bf94a129931d6e4abadf779af40b95c143b3eb/src%2Ftest%2Fui%2Fspan%2Fvisibility-ty-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06bf94a129931d6e4abadf779af40b95c143b3eb/src%2Ftest%2Fui%2Fspan%2Fvisibility-ty-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvisibility-ty-params.stderr?ref=06bf94a129931d6e4abadf779af40b95c143b3eb", "patch": "@@ -1,11 +1,3 @@\n-error[E0577]: expected module, found struct `S`\n-  --> $DIR/visibility-ty-params.rs:16:5\n-   |\n-16 | m!{ S<u8> } //~ ERROR generic arguments in visibility path\n-   |     -^^^^\n-   |     |\n-   |     did you mean `m`?\n-\n error: generic arguments in visibility path\n   --> $DIR/visibility-ty-params.rs:16:6\n    |\n@@ -18,5 +10,13 @@ error: generic arguments in visibility path\n 20 |     m!{ m<> } //~ ERROR generic arguments in visibility path\n    |          ^^\n \n+error[E0577]: expected module, found struct `S`\n+  --> $DIR/visibility-ty-params.rs:16:5\n+   |\n+16 | m!{ S<u8> } //~ ERROR generic arguments in visibility path\n+   |     -^^^^\n+   |     |\n+   |     did you mean `m`?\n+\n error: aborting due to 3 previous errors\n "}]}