{"sha": "b4de150dbc65a6bb95c86517430726c55251d0b0", "node_id": "C_kwDOAAsO6NoAKGI0ZGUxNTBkYmM2NWE2YmI5NWM4NjUxNzQzMDcyNmM1NTI1MWQwYjA", "commit": {"author": {"name": "Tom Milligan", "email": "tom@reinfer.io", "date": "2022-03-04T18:13:08Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2022-03-12T16:47:46Z"}, "message": "fix: imports_granularity module with path containing self", "tree": {"sha": "ac6aef3d0121b9bba0f974b59316077515dc7cf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac6aef3d0121b9bba0f974b59316077515dc7cf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4de150dbc65a6bb95c86517430726c55251d0b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4de150dbc65a6bb95c86517430726c55251d0b0", "html_url": "https://github.com/rust-lang/rust/commit/b4de150dbc65a6bb95c86517430726c55251d0b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4de150dbc65a6bb95c86517430726c55251d0b0/comments", "author": {"login": "tommilligan", "id": 12255914, "node_id": "MDQ6VXNlcjEyMjU1OTE0", "avatar_url": "https://avatars.githubusercontent.com/u/12255914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tommilligan", "html_url": "https://github.com/tommilligan", "followers_url": "https://api.github.com/users/tommilligan/followers", "following_url": "https://api.github.com/users/tommilligan/following{/other_user}", "gists_url": "https://api.github.com/users/tommilligan/gists{/gist_id}", "starred_url": "https://api.github.com/users/tommilligan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tommilligan/subscriptions", "organizations_url": "https://api.github.com/users/tommilligan/orgs", "repos_url": "https://api.github.com/users/tommilligan/repos", "events_url": "https://api.github.com/users/tommilligan/events{/privacy}", "received_events_url": "https://api.github.com/users/tommilligan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18c0369688d5854ea67dbe29cfac3cc8380cb20e", "url": "https://api.github.com/repos/rust-lang/rust/commits/18c0369688d5854ea67dbe29cfac3cc8380cb20e", "html_url": "https://github.com/rust-lang/rust/commit/18c0369688d5854ea67dbe29cfac3cc8380cb20e"}], "stats": {"total": 53, "additions": 41, "deletions": 12}, "files": [{"sha": "0231980948686e2b691be3de84ae8a92ea4308ba", "filename": "src/imports.rs", "status": "modified", "additions": 38, "deletions": 12, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b4de150dbc65a6bb95c86517430726c55251d0b0/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4de150dbc65a6bb95c86517430726c55251d0b0/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=b4de150dbc65a6bb95c86517430726c55251d0b0", "patch": "@@ -190,13 +190,17 @@ pub(crate) fn merge_use_trees(use_trees: Vec<UseTree>, merge_by: SharedPrefix) -\n             continue;\n         }\n \n-        for flattened in use_tree.flatten() {\n+        for mut flattened in use_tree.flatten() {\n             if let Some(tree) = result\n                 .iter_mut()\n                 .find(|tree| tree.share_prefix(&flattened, merge_by))\n             {\n                 tree.merge(&flattened, merge_by);\n             } else {\n+                // If this is the first tree with this prefix, handle potential trailing ::self\n+                if merge_by == SharedPrefix::Module {\n+                    flattened = flattened.nest_trailing_self();\n+                }\n                 result.push(flattened);\n             }\n         }\n@@ -208,17 +212,7 @@ pub(crate) fn flatten_use_trees(use_trees: Vec<UseTree>) -> Vec<UseTree> {\n     use_trees\n         .into_iter()\n         .flat_map(UseTree::flatten)\n-        .map(|mut tree| {\n-            // If a path ends in `::self`, rewrite it to `::{self}`.\n-            if let Some(UseSegment::Slf(..)) = tree.path.last() {\n-                let self_segment = tree.path.pop().unwrap();\n-                tree.path.push(UseSegment::List(vec![UseTree::from_path(\n-                    vec![self_segment],\n-                    DUMMY_SP,\n-                )]));\n-            }\n-            tree\n-        })\n+        .map(UseTree::nest_trailing_self)\n         .collect()\n }\n \n@@ -635,6 +629,18 @@ impl UseTree {\n             self.span = self.span.to(other.span);\n         }\n     }\n+\n+    /// If this tree ends in `::self`, rewrite it to `::{self}`.\n+    fn nest_trailing_self(mut self) -> UseTree {\n+        if let Some(UseSegment::Slf(..)) = self.path.last() {\n+            let self_segment = self.path.pop().unwrap();\n+            self.path.push(UseSegment::List(vec![UseTree::from_path(\n+                vec![self_segment],\n+                DUMMY_SP,\n+            )]));\n+        }\n+        self\n+    }\n }\n \n fn merge_rest(\n@@ -1311,4 +1317,24 @@ mod test {\n                 < parse_use_tree(\"std::cmp::{b, e, g, f}\").normalize()\n         );\n     }\n+\n+    #[test]\n+    fn test_use_tree_nest_trailing_self() {\n+        assert_eq!(\n+            parse_use_tree(\"a::b::self\").nest_trailing_self(),\n+            parse_use_tree(\"a::b::{self}\")\n+        );\n+        assert_eq!(\n+            parse_use_tree(\"a::b::c\").nest_trailing_self(),\n+            parse_use_tree(\"a::b::c\")\n+        );\n+        assert_eq!(\n+            parse_use_tree(\"a::b::{c, d}\").nest_trailing_self(),\n+            parse_use_tree(\"a::b::{c, d}\")\n+        );\n+        assert_eq!(\n+            parse_use_tree(\"a::b::{self, c}\").nest_trailing_self(),\n+            parse_use_tree(\"a::b::{self, c}\")\n+        );\n+    }\n }"}, {"sha": "2d7bb299aaacef723e33266587af6c1dca936d6a", "filename": "tests/source/imports_granularity_module.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4de150dbc65a6bb95c86517430726c55251d0b0/tests%2Fsource%2Fimports_granularity_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4de150dbc65a6bb95c86517430726c55251d0b0/tests%2Fsource%2Fimports_granularity_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fimports_granularity_module.rs?ref=b4de150dbc65a6bb95c86517430726c55251d0b0", "patch": "@@ -4,6 +4,7 @@ use a::{b::c, d::e};\n use a::{f, g::{h, i}};\n use a::{j::{self, k::{self, l}, m}, n::{o::p, q}};\n pub use a::{r::s, t};\n+use b::{c::d, self};\n \n #[cfg(test)]\n use foo::{a::b, c::d};"}, {"sha": "e4e1a299e58669f809ae8f9826776c9a6466f43b", "filename": "tests/target/imports_granularity_module.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4de150dbc65a6bb95c86517430726c55251d0b0/tests%2Ftarget%2Fimports_granularity_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4de150dbc65a6bb95c86517430726c55251d0b0/tests%2Ftarget%2Fimports_granularity_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimports_granularity_module.rs?ref=b4de150dbc65a6bb95c86517430726c55251d0b0", "patch": "@@ -10,6 +10,8 @@ use a::n::o::p;\n use a::n::q;\n pub use a::r::s;\n pub use a::t;\n+use b::c::d;\n+use b::{self};\n \n use foo::e;\n #[cfg(test)]"}]}