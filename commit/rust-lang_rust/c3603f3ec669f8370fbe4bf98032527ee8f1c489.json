{"sha": "c3603f3ec669f8370fbe4bf98032527ee8f1c489", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNjAzZjNlYzY2OWY4MzcwZmJlNGJmOTgwMzI1MjdlZThmMWM0ODk=", "commit": {"author": {"name": "Florian Zeitz", "email": "florob@babelmonkeys.de", "date": "2017-08-01T22:32:14Z"}, "committer": {"name": "Florian Zeitz", "email": "florob@babelmonkeys.de", "date": "2017-08-01T22:32:14Z"}, "message": "trans: Check LLVM type instead of Layout", "tree": {"sha": "000432bda94d9d600ee2c224643a894a31db3074", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/000432bda94d9d600ee2c224643a894a31db3074"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3603f3ec669f8370fbe4bf98032527ee8f1c489", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3603f3ec669f8370fbe4bf98032527ee8f1c489", "html_url": "https://github.com/rust-lang/rust/commit/c3603f3ec669f8370fbe4bf98032527ee8f1c489", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3603f3ec669f8370fbe4bf98032527ee8f1c489/comments", "author": {"login": "Florob", "id": 133684, "node_id": "MDQ6VXNlcjEzMzY4NA==", "avatar_url": "https://avatars.githubusercontent.com/u/133684?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Florob", "html_url": "https://github.com/Florob", "followers_url": "https://api.github.com/users/Florob/followers", "following_url": "https://api.github.com/users/Florob/following{/other_user}", "gists_url": "https://api.github.com/users/Florob/gists{/gist_id}", "starred_url": "https://api.github.com/users/Florob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Florob/subscriptions", "organizations_url": "https://api.github.com/users/Florob/orgs", "repos_url": "https://api.github.com/users/Florob/repos", "events_url": "https://api.github.com/users/Florob/events{/privacy}", "received_events_url": "https://api.github.com/users/Florob/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Florob", "id": 133684, "node_id": "MDQ6VXNlcjEzMzY4NA==", "avatar_url": "https://avatars.githubusercontent.com/u/133684?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Florob", "html_url": "https://github.com/Florob", "followers_url": "https://api.github.com/users/Florob/followers", "following_url": "https://api.github.com/users/Florob/following{/other_user}", "gists_url": "https://api.github.com/users/Florob/gists{/gist_id}", "starred_url": "https://api.github.com/users/Florob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Florob/subscriptions", "organizations_url": "https://api.github.com/users/Florob/orgs", "repos_url": "https://api.github.com/users/Florob/repos", "events_url": "https://api.github.com/users/Florob/events{/privacy}", "received_events_url": "https://api.github.com/users/Florob/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac43d58d3aca4b578864ec6dbb24d68a9f9c201c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac43d58d3aca4b578864ec6dbb24d68a9f9c201c", "html_url": "https://github.com/rust-lang/rust/commit/ac43d58d3aca4b578864ec6dbb24d68a9f9c201c"}], "stats": {"total": 12, "additions": 4, "deletions": 8}, "files": [{"sha": "0485054a12aef44d884c0711367cd5ab75eae647", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c3603f3ec669f8370fbe4bf98032527ee8f1c489/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3603f3ec669f8370fbe4bf98032527ee8f1c489/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=c3603f3ec669f8370fbe4bf98032527ee8f1c489", "patch": "@@ -11,7 +11,7 @@\n use llvm::{self, ValueRef};\n use rustc::ty::{self, Ty};\n use rustc::ty::cast::{CastTy, IntTy};\n-use rustc::ty::layout::{self, Layout, LayoutTyper, Primitive};\n+use rustc::ty::layout::{Layout, LayoutTyper};\n use rustc::mir::tcx::LvalueTy;\n use rustc::mir;\n use rustc::middle::lang_items::ExchangeMallocFnLangItem;\n@@ -107,6 +107,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                 let align = dest.alignment.to_align();\n \n                 if let OperandValue::Immediate(v) = tr_elem.val {\n+                    // Use llvm.memset.p0i8.* to initialize all zero arrays\n                     if common::is_const_integral(v) && common::const_to_uint(v) == 0 {\n                         let align = align.unwrap_or_else(|| bcx.ccx.align_of(tr_elem.ty));\n                         let align = C_i32(bcx.ccx, align as i32);\n@@ -116,20 +117,15 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                         base::call_memset(&bcx, base, fill, size, align, false);\n                         return bcx;\n                     }\n-                }\n \n-                // Use llvm.memset.p0i8.* to initialize byte arrays\n-                let elem_layout = bcx.ccx.layout_of(tr_elem.ty).layout;\n-                match *elem_layout {\n-                    Layout::Scalar { value: Primitive::Int(layout::I8), .. } |\n-                    Layout::CEnum { discr: layout::I8, .. } => {\n+                    // Use llvm.memset.p0i8.* to initialize byte arrays\n+                    if common::val_ty(v) == Type::i8(bcx.ccx) {\n                         let align = align.unwrap_or_else(|| bcx.ccx.align_of(tr_elem.ty));\n                         let align = C_i32(bcx.ccx, align as i32);\n                         let fill = tr_elem.immediate();\n                         base::call_memset(&bcx, base, fill, size, align, false);\n                         return bcx;\n                     }\n-                    _ => ()\n                 }\n \n                 tvec::slice_for_each(&bcx, base, tr_elem.ty, size, |bcx, llslot, loop_bb| {"}]}