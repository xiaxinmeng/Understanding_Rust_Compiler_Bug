{"sha": "69310dea89caa9257ca7e1ad78922f0852913725", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5MzEwZGVhODljYWE5MjU3Y2E3ZTFhZDc4OTIyZjA4NTI5MTM3MjU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-30T11:45:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-30T11:45:15Z"}, "message": "Rollup merge of #72607 - Amanieu:fix-72570, r=oli-obk\n\nEagerly lower asm sub-expressions to HIR even if there is an error\n\nFixes #72570\n\nr? @oli-obk", "tree": {"sha": "e7d61a1621efe6cc10255c29a95667a8654f8710", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7d61a1621efe6cc10255c29a95667a8654f8710"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69310dea89caa9257ca7e1ad78922f0852913725", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe0kdLCRBK7hj4Ov3rIwAAdHIIADwF8D+TC7OWTdc8LgJNedHg\nMk8iQA6KS6un+TPf/CO7IE933cDng9GEcBtodl9ei8sgYjQ6WmDHiUU8zS31AC35\nitnXtB9Gl81xTHhs+loQ7c/DBsF1HLmA3equHCXz00uLPR6Cx2zYZ8U26eWLrT0d\nbLiy9BCmi79TfMZGvd7+fDdOGiOUtfSv3tg/0+oRUC7Gs93tVCaXKmhAJeHPaY0e\nllC/FCBcpdvys6kYVyjDwdGzaZXO18WvSzR/ier859vstVknHqgrSaFzDqi+rs6J\nBCjYDG19L/fYxDz46dU9a7zWBrupI0rdqhXSJydJr8RX2DtHH2G1ZgfgOCnj3d4=\n=q01S\n-----END PGP SIGNATURE-----\n", "payload": "tree e7d61a1621efe6cc10255c29a95667a8654f8710\nparent e4c35246fc3565f51bce8c12c1213cfb23f20f61\nparent de53276aac3f9cb89fff5d9db3741e8c7852920a\nauthor Ralf Jung <post@ralfj.de> 1590839115 +0200\ncommitter GitHub <noreply@github.com> 1590839115 +0200\n\nRollup merge of #72607 - Amanieu:fix-72570, r=oli-obk\n\nEagerly lower asm sub-expressions to HIR even if there is an error\n\nFixes #72570\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69310dea89caa9257ca7e1ad78922f0852913725", "html_url": "https://github.com/rust-lang/rust/commit/69310dea89caa9257ca7e1ad78922f0852913725", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69310dea89caa9257ca7e1ad78922f0852913725/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4c35246fc3565f51bce8c12c1213cfb23f20f61", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4c35246fc3565f51bce8c12c1213cfb23f20f61", "html_url": "https://github.com/rust-lang/rust/commit/e4c35246fc3565f51bce8c12c1213cfb23f20f61"}, {"sha": "de53276aac3f9cb89fff5d9db3741e8c7852920a", "url": "https://api.github.com/repos/rust-lang/rust/commits/de53276aac3f9cb89fff5d9db3741e8c7852920a", "html_url": "https://github.com/rust-lang/rust/commit/de53276aac3f9cb89fff5d9db3741e8c7852920a"}], "stats": {"total": 88, "additions": 54, "deletions": 34}, "files": [{"sha": "b7f2e9a9050df0d0ebb6167cefe5a00cce0f0b1b", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 36, "deletions": 34, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/69310dea89caa9257ca7e1ad78922f0852913725/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69310dea89caa9257ca7e1ad78922f0852913725/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=69310dea89caa9257ca7e1ad78922f0852913725", "patch": "@@ -974,20 +974,18 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     fn lower_expr_asm(&mut self, sp: Span, asm: &InlineAsm) -> hir::ExprKind<'hir> {\n-        let asm_arch = if let Some(asm_arch) = self.sess.asm_arch {\n-            asm_arch\n-        } else {\n+        if self.sess.asm_arch.is_none() {\n             struct_span_err!(self.sess, sp, E0472, \"asm! is unsupported on this target\").emit();\n-            return hir::ExprKind::Err;\n-        };\n-        if asm.options.contains(InlineAsmOptions::ATT_SYNTAX) {\n-            match asm_arch {\n-                asm::InlineAsmArch::X86 | asm::InlineAsmArch::X86_64 => {}\n-                _ => self\n-                    .sess\n-                    .struct_span_err(sp, \"the `att_syntax` option is only supported on x86\")\n-                    .emit(),\n-            }\n+        }\n+        if asm.options.contains(InlineAsmOptions::ATT_SYNTAX)\n+            && !matches!(\n+                self.sess.asm_arch,\n+                Some(asm::InlineAsmArch::X86 | asm::InlineAsmArch::X86_64)\n+            )\n+        {\n+            self.sess\n+                .struct_span_err(sp, \"the `att_syntax` option is only supported on x86\")\n+                .emit();\n         }\n \n         // Lower operands to HIR, filter_map skips any operands with invalid\n@@ -1001,10 +999,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     Some(match reg {\n                         InlineAsmRegOrRegClass::Reg(s) => asm::InlineAsmRegOrRegClass::Reg(\n                             asm::InlineAsmReg::parse(\n-                                asm_arch,\n-                                |feature| {\n-                                    self.sess.target_features.contains(&Symbol::intern(feature))\n-                                },\n+                                sess.asm_arch?,\n+                                |feature| sess.target_features.contains(&Symbol::intern(feature)),\n                                 s,\n                             )\n                             .map_err(|e| {\n@@ -1015,7 +1011,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         ),\n                         InlineAsmRegOrRegClass::RegClass(s) => {\n                             asm::InlineAsmRegOrRegClass::RegClass(\n-                                asm::InlineAsmRegClass::parse(asm_arch, s)\n+                                asm::InlineAsmRegClass::parse(sess.asm_arch?, s)\n                                     .map_err(|e| {\n                                         let msg = format!(\n                                             \"invalid register class `{}`: {}\",\n@@ -1029,33 +1025,38 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         }\n                     })\n                 };\n-                let op = match op {\n-                    InlineAsmOperand::In { reg, expr } => hir::InlineAsmOperand::In {\n-                        reg: lower_reg(*reg)?,\n+\n+                // lower_reg is executed last because we need to lower all\n+                // sub-expressions even if we throw them away later.\n+                let op = match *op {\n+                    InlineAsmOperand::In { reg, ref expr } => hir::InlineAsmOperand::In {\n                         expr: self.lower_expr_mut(expr),\n+                        reg: lower_reg(reg)?,\n                     },\n-                    InlineAsmOperand::Out { reg, late, expr } => hir::InlineAsmOperand::Out {\n-                        reg: lower_reg(*reg)?,\n-                        late: *late,\n+                    InlineAsmOperand::Out { reg, late, ref expr } => hir::InlineAsmOperand::Out {\n+                        late,\n                         expr: expr.as_ref().map(|expr| self.lower_expr_mut(expr)),\n+                        reg: lower_reg(reg)?,\n                     },\n-                    InlineAsmOperand::InOut { reg, late, expr } => hir::InlineAsmOperand::InOut {\n-                        reg: lower_reg(*reg)?,\n-                        late: *late,\n-                        expr: self.lower_expr_mut(expr),\n-                    },\n-                    InlineAsmOperand::SplitInOut { reg, late, in_expr, out_expr } => {\n+                    InlineAsmOperand::InOut { reg, late, ref expr } => {\n+                        hir::InlineAsmOperand::InOut {\n+                            late,\n+                            expr: self.lower_expr_mut(expr),\n+                            reg: lower_reg(reg)?,\n+                        }\n+                    }\n+                    InlineAsmOperand::SplitInOut { reg, late, ref in_expr, ref out_expr } => {\n                         hir::InlineAsmOperand::SplitInOut {\n-                            reg: lower_reg(*reg)?,\n-                            late: *late,\n+                            late,\n                             in_expr: self.lower_expr_mut(in_expr),\n                             out_expr: out_expr.as_ref().map(|expr| self.lower_expr_mut(expr)),\n+                            reg: lower_reg(reg)?,\n                         }\n                     }\n-                    InlineAsmOperand::Const { expr } => {\n+                    InlineAsmOperand::Const { ref expr } => {\n                         hir::InlineAsmOperand::Const { expr: self.lower_expr_mut(expr) }\n                     }\n-                    InlineAsmOperand::Sym { expr } => {\n+                    InlineAsmOperand::Sym { ref expr } => {\n                         hir::InlineAsmOperand::Sym { expr: self.lower_expr_mut(expr) }\n                     }\n                 };\n@@ -1069,6 +1070,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         }\n \n         // Validate template modifiers against the register classes for the operands\n+        let asm_arch = sess.asm_arch.unwrap();\n         for p in &asm.template {\n             if let InlineAsmTemplatePiece::Placeholder {\n                 operand_idx,"}, {"sha": "f34525a664ebe4d136a34360df975c060749e56b", "filename": "src/test/ui/asm/issue-72570.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69310dea89caa9257ca7e1ad78922f0852913725/src%2Ftest%2Fui%2Fasm%2Fissue-72570.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69310dea89caa9257ca7e1ad78922f0852913725/src%2Ftest%2Fui%2Fasm%2Fissue-72570.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-72570.rs?ref=69310dea89caa9257ca7e1ad78922f0852913725", "patch": "@@ -0,0 +1,10 @@\n+// only-x86_64\n+\n+#![feature(asm)]\n+\n+fn main() {\n+    unsafe {\n+        asm!(\"\", in(\"invalid\") \"\".len());\n+        //~^ ERROR: invalid register `invalid`: unknown register\n+    }\n+}"}, {"sha": "49013a23ced2da7543e91ba1b35cb7e9f0013485", "filename": "src/test/ui/asm/issue-72570.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69310dea89caa9257ca7e1ad78922f0852913725/src%2Ftest%2Fui%2Fasm%2Fissue-72570.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69310dea89caa9257ca7e1ad78922f0852913725/src%2Ftest%2Fui%2Fasm%2Fissue-72570.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-72570.stderr?ref=69310dea89caa9257ca7e1ad78922f0852913725", "patch": "@@ -0,0 +1,8 @@\n+error: invalid register `invalid`: unknown register\n+  --> $DIR/issue-72570.rs:7:18\n+   |\n+LL |         asm!(\"\", in(\"invalid\") \"\".len());\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}