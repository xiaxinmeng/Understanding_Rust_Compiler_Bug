{"sha": "7203be1109d6e29dce14a842d454922c665ade3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMDNiZTExMDlkNmUyOWRjZTE0YTg0MmQ0NTQ5MjJjNjY1YWRlM2Y=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-06T06:57:58Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-06T06:57:58Z"}, "message": "librustc: Fix handling of `~` and `@` unary operators in mode computation. Closes #4114. rs=bugfix", "tree": {"sha": "393c19329ba186d774e2803dba5fd85faa754dae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/393c19329ba186d774e2803dba5fd85faa754dae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7203be1109d6e29dce14a842d454922c665ade3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7203be1109d6e29dce14a842d454922c665ade3f", "html_url": "https://github.com/rust-lang/rust/commit/7203be1109d6e29dce14a842d454922c665ade3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7203be1109d6e29dce14a842d454922c665ade3f/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b58e1f6690c16ee77e21cfab145a0ee307a00695", "url": "https://api.github.com/repos/rust-lang/rust/commits/b58e1f6690c16ee77e21cfab145a0ee307a00695", "html_url": "https://github.com/rust-lang/rust/commit/b58e1f6690c16ee77e21cfab145a0ee307a00695"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "9cad123edc566d13817d31274126163592358198", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7203be1109d6e29dce14a842d454922c665ade3f/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7203be1109d6e29dce14a842d454922c665ade3f/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=7203be1109d6e29dce14a842d454922c665ade3f", "patch": "@@ -316,7 +316,7 @@ fn parse_ty(st: @pstate, conv: conv_did) -> ty::t {\n         match st.tcx.rcache.find({cnum: st.crate, pos: pos, len: len}) {\n           Some(tt) => return tt,\n           None => {\n-            let ps = @{pos: pos ,.. *st};\n+            let ps = @{pos: pos ,.. copy *st};\n             let tt = parse_ty(ps, conv);\n             st.tcx.rcache.insert({cnum: st.crate, pos: pos, len: len}, tt);\n             return tt;"}, {"sha": "e1bea7714b3a9fd622bf30d5669d65cc2422af54", "filename": "src/librustc/middle/mode.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7203be1109d6e29dce14a842d454922c665ade3f/src%2Flibrustc%2Fmiddle%2Fmode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7203be1109d6e29dce14a842d454922c665ade3f/src%2Flibrustc%2Fmiddle%2Fmode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmode.rs?ref=7203be1109d6e29dce14a842d454922c665ade3f", "patch": "@@ -4,12 +4,11 @@ use middle::typeck::{method_map, method_map_entry};\n \n use core::vec;\n use std::map::HashMap;\n-use syntax::ast::{by_copy, by_move, by_ref, by_val, crate, expr, expr_assign};\n-use syntax::ast::{expr_addr_of, expr_assign_op, expr_binary, expr_call};\n-use syntax::ast::{expr_copy, expr_field, expr_index, expr_method_call};\n-use syntax::ast::{expr_path, expr_swap, expr_unary, node_id, sty_uniq};\n-use syntax::ast::{sty_value};\n-use syntax::ast::{box, uniq, deref, not, neg, expr_match, expr_paren};\n+use syntax::ast::{box, by_copy, by_move, by_ref, by_val, crate, deref, expr};\n+use syntax::ast::{expr_addr_of, expr_assign, expr_assign_op, expr_binary};\n+use syntax::ast::{expr_call, expr_copy, expr_field, expr_index, expr_match};\n+use syntax::ast::{expr_method_call, expr_paren, expr_path, expr_swap};\n+use syntax::ast::{expr_unary, neg, node_id, not, sty_uniq, sty_value, uniq};\n use syntax::visit;\n use syntax::visit::vt;\n \n@@ -115,17 +114,25 @@ fn compute_modes_for_expr(expr: @expr,\n             compute_modes_for_expr(arg, arg_cx, v);\n         }\n         expr_unary(unop, arg) => {\n-            // Ditto.\n-            let arg_cx = VisitContext { mode: ReadValue, ..cx };\n-            compute_modes_for_expr(arg, arg_cx, v);\n-\n             match unop {\n                 deref => {\n+                    // Derefs function as reads.\n+                    let arg_cx = VisitContext { mode: ReadValue, ..cx };\n+                    compute_modes_for_expr(arg, arg_cx, v);\n+\n                     // This is an lvalue, so it needs a value mode recorded\n                     // for it.\n                     record_mode_for_expr(expr, cx);\n                 }\n-                box(_) | uniq(_) | not | neg => {}\n+                box(_) | uniq(_) => {\n+                    let arg_cx = VisitContext { mode: MoveValue, ..cx };\n+                    compute_modes_for_expr(arg, arg_cx, v);\n+                }\n+                not | neg => {\n+                    // Takes its argument by ref.\n+                    let arg_cx = VisitContext { mode: ReadValue, ..cx };\n+                    compute_modes_for_expr(arg, arg_cx, v);\n+                }\n             }\n         }\n         expr_field(arg, _, _) => {"}, {"sha": "ecd29a6f6431da861413d35cb853fd06118a6795", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7203be1109d6e29dce14a842d454922c665ade3f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7203be1109d6e29dce14a842d454922c665ade3f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=7203be1109d6e29dce14a842d454922c665ade3f", "patch": "@@ -2457,7 +2457,7 @@ fn check_block_no_value(fcx: @fn_ctxt, blk: ast::blk) -> bool {\n \n fn check_block(fcx0: @fn_ctxt, blk: ast::blk) -> bool {\n     let fcx = match blk.node.rules {\n-      ast::unsafe_blk => @fn_ctxt {purity: ast::unsafe_fn,.. *fcx0},\n+      ast::unsafe_blk => @fn_ctxt {purity: ast::unsafe_fn,.. copy *fcx0},\n       ast::default_blk => fcx0\n     };\n     do fcx.with_region_lb(blk.node.id) {"}, {"sha": "778bb8d557b9b4568d9f3c255c94f9001393d99e", "filename": "src/test/compile-fail/move-based-on-type-tuple.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7203be1109d6e29dce14a842d454922c665ade3f/src%2Ftest%2Fcompile-fail%2Fmove-based-on-type-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7203be1109d6e29dce14a842d454922c665ade3f/src%2Ftest%2Fcompile-fail%2Fmove-based-on-type-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-based-on-type-tuple.rs?ref=7203be1109d6e29dce14a842d454922c665ade3f", "patch": "@@ -0,0 +1,4 @@\n+fn dup(x: ~int) -> ~(~int,~int) { ~(x, x) } //~ ERROR use of moved variable\n+fn main() {\n+    dup(~3);\n+}"}]}