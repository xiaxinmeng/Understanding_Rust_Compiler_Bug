{"sha": "4db68e644e2e7bef55ed536ac77f87292260527c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkYjY4ZTY0NGUyZTdiZWY1NWVkNTM2YWM3N2Y4NzI5MjI2MDUyN2M=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-29T23:40:59Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-31T14:30:17Z"}, "message": "Modify failure lang items to take less pointers.\n\nDivide-by-zero before:\n\n```\n        leaq    \"str\\\"str\\\"(1762)\"(%rip), %rax\n        movq    %rax, 16(%rsp)\n        movq    $27, 24(%rsp)\n        leaq    \"str\\\"str\\\"(1542)\"(%rip), %rax\n        movq    %rax, (%rsp)\n        movq    $19, 8(%rsp)\n        leaq    16(%rsp), %rdi\n        leaq    (%rsp), %rsi\n        movl    $32, %edx\n        callq   _ZN7failure5fail_20hc04408f955ce60aaqWjE@PLT\n```\n\nAfter:\n\n```\n        leaq    .Lconst(%rip), %rdi\n        callq   _ZN7failure5fail_20haf918a97c8f7f2bfqWjE@PLT\n```\n\nBounds check before:\n\n```\n        leaq    \"str\\\"str\\\"(1542)\"(%rip), %rax\n        movq    %rax, 8(%rsp)\n        movq    $19, 16(%rsp)\n        leaq    8(%rsp), %rdi\n        movl    $38, %esi\n        movl    $1, %edx\n        movl    $1, %ecx\n        callq   _ZN7failure17fail_bounds_check20hf4bc3c69e96caf41RXjE@PLT\n```\n\nBounds check after:\n\n```\n        leaq    .Lconst2(%rip), %rdi\n        movl    $1, %esi\n        movl    $1, %edx\n        callq   _ZN7failure17fail_bounds_check20h5267276a537a7de22XjE@PLT\n```\n\nSize before:\n\n21277995 librustc-4e7c5e5c.s\n\n```\ntext       data\n12554881   6089335\n```\n\nSize after:\n\n21247617 librustc-4e7c5e5c.so\n\n```\ntext       data\n12518497   6095748\n```", "tree": {"sha": "f4f515bed4ef231d75f17fd49779816cfefbe006", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4f515bed4ef231d75f17fd49779816cfefbe006"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4db68e644e2e7bef55ed536ac77f87292260527c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4db68e644e2e7bef55ed536ac77f87292260527c", "html_url": "https://github.com/rust-lang/rust/commit/4db68e644e2e7bef55ed536ac77f87292260527c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4db68e644e2e7bef55ed536ac77f87292260527c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "134946d06e6926e087a792ac13c7f4421591afed", "url": "https://api.github.com/repos/rust-lang/rust/commits/134946d06e6926e087a792ac13c7f4421591afed", "html_url": "https://github.com/rust-lang/rust/commit/134946d06e6926e087a792ac13c7f4421591afed"}], "stats": {"total": 56, "additions": 40, "deletions": 16}, "files": [{"sha": "6a638b5618ca6e80dd15ce16d19bc18cd0e5e0f5", "filename": "src/libcore/failure.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4db68e644e2e7bef55ed536ac77f87292260527c/src%2Flibcore%2Ffailure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db68e644e2e7bef55ed536ac77f87292260527c/src%2Flibcore%2Ffailure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffailure.rs?ref=4db68e644e2e7bef55ed536ac77f87292260527c", "patch": "@@ -33,6 +33,7 @@\n use fmt;\n use intrinsics;\n \n+#[cfg(stage0)]\n #[cold] #[inline(never)] // this is the slow path, always\n #[lang=\"fail_\"]\n fn fail_(expr: &'static str, file: &'static str, line: uint) -> ! {\n@@ -43,6 +44,7 @@ fn fail_(expr: &'static str, file: &'static str, line: uint) -> ! {\n     unsafe { intrinsics::abort() }\n }\n \n+#[cfg(stage0)]\n #[cold]\n #[lang=\"fail_bounds_check\"]\n fn fail_bounds_check(file: &'static str, line: uint,\n@@ -53,6 +55,30 @@ fn fail_bounds_check(file: &'static str, line: uint,\n     unsafe { intrinsics::abort() }\n }\n \n+#[cfg(not(stage0))]\n+#[cold] #[inline(never)] // this is the slow path, always\n+#[lang=\"fail_\"]\n+fn fail_(expr_file_line: &(&'static str, &'static str, uint)) -> ! {\n+    let (expr, file, line) = *expr_file_line;\n+    let ref file_line = (file, line);\n+    format_args!(|args| -> () {\n+        begin_unwind(args, file_line);\n+    }, \"{}\", expr);\n+\n+    unsafe { intrinsics::abort() }\n+}\n+\n+#[cfg(not(stage0))]\n+#[cold]\n+#[lang=\"fail_bounds_check\"]\n+fn fail_bounds_check(file_line: &(&'static str, uint),\n+                     index: uint, len: uint) -> ! {\n+    format_args!(|args| -> () {\n+        begin_unwind(args, file_line);\n+    }, \"index out of bounds: the len is {} but the index is {}\", len, index);\n+    unsafe { intrinsics::abort() }\n+}\n+\n #[cold]\n pub fn begin_unwind(fmt: &fmt::Arguments, file_line: &(&'static str, uint)) -> ! {\n     #[allow(ctypes)]"}, {"sha": "7d546aac0cbaed28eecce64105d3c2760be91b80", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4db68e644e2e7bef55ed536ac77f87292260527c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db68e644e2e7bef55ed536ac77f87292260527c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=4db68e644e2e7bef55ed536ac77f87292260527c", "patch": "@@ -109,7 +109,7 @@ fn const_vec(cx: &CrateContext, e: &ast::Expr,\n     (v, llunitty, inlineable.iter().fold(true, |a, &b| a && b))\n }\n \n-fn const_addr_of(cx: &CrateContext, cv: ValueRef) -> ValueRef {\n+pub fn const_addr_of(cx: &CrateContext, cv: ValueRef) -> ValueRef {\n     unsafe {\n         let gv = \"const\".with_c_str(|name| {\n             llvm::LLVMAddGlobal(cx.llmod, val_ty(cv).to_ref(), name)"}, {"sha": "2fd2e69cfc3bcbf31ec72682b5deb2e07a36e56d", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4db68e644e2e7bef55ed536ac77f87292260527c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4db68e644e2e7bef55ed536ac77f87292260527c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=4db68e644e2e7bef55ed536ac77f87292260527c", "patch": "@@ -20,6 +20,7 @@ use middle::trans::callee;\n use middle::trans::cleanup::CleanupMethods;\n use middle::trans::cleanup;\n use middle::trans::common::*;\n+use middle::trans::consts;\n use middle::trans::datum;\n use middle::trans::debuginfo;\n use middle::trans::expr;\n@@ -477,14 +478,6 @@ pub fn trans_ret<'a>(bcx: &'a Block<'a>,\n     return bcx;\n }\n \n-fn str_slice_arg<'a>(bcx: &'a Block<'a>, s: InternedString) -> ValueRef {\n-    let ccx = bcx.ccx();\n-    let s = C_str_slice(ccx, s);\n-    let slot = alloca(bcx, val_ty(s), \"__temp\");\n-    Store(bcx, s, slot);\n-    slot\n-}\n-\n pub fn trans_fail<'a>(\n                   bcx: &'a Block<'a>,\n                   sp: Span,\n@@ -493,12 +486,14 @@ pub fn trans_fail<'a>(\n     let ccx = bcx.ccx();\n     let _icx = push_ctxt(\"trans_fail_value\");\n \n-    let v_str = str_slice_arg(bcx, fail_str);\n+    let v_str = C_str_slice(ccx, fail_str);\n     let loc = bcx.sess().codemap().lookup_char_pos(sp.lo);\n     let filename = token::intern_and_get_ident(loc.file.name.as_slice());\n-    let v_filename = str_slice_arg(bcx, filename);\n-    let v_line = loc.line as int;\n-    let args = vec!(v_str, v_filename, C_int(ccx, v_line));\n+    let filename = C_str_slice(ccx, filename);\n+    let line = C_int(ccx, loc.line as int);\n+    let expr_file_line_const = C_struct(ccx, &[v_str, filename, line], false);\n+    let expr_file_line = consts::const_addr_of(ccx, expr_file_line_const);\n+    let args = vec!(expr_file_line);\n     let did = langcall(bcx, Some(sp), \"\", FailFnLangItem);\n     let bcx = callee::trans_lang_call(bcx,\n                                       did,\n@@ -514,16 +509,19 @@ pub fn trans_fail_bounds_check<'a>(\n                                index: ValueRef,\n                                len: ValueRef)\n                                -> &'a Block<'a> {\n+    let ccx = bcx.ccx();\n     let _icx = push_ctxt(\"trans_fail_bounds_check\");\n \n     // Extract the file/line from the span\n     let loc = bcx.sess().codemap().lookup_char_pos(sp.lo);\n     let filename = token::intern_and_get_ident(loc.file.name.as_slice());\n \n     // Invoke the lang item\n-    let filename = str_slice_arg(bcx, filename);\n-    let line = C_int(bcx.ccx(), loc.line as int);\n-    let args = vec!(filename, line, index, len);\n+    let filename = C_str_slice(ccx,  filename);\n+    let line = C_int(ccx, loc.line as int);\n+    let file_line_const = C_struct(ccx, &[filename, line], false);\n+    let file_line = consts::const_addr_of(ccx, file_line_const);\n+    let args = vec!(file_line, index, len);\n     let did = langcall(bcx, Some(sp), \"\", FailBoundsCheckFnLangItem);\n     let bcx = callee::trans_lang_call(bcx,\n                                       did,"}]}