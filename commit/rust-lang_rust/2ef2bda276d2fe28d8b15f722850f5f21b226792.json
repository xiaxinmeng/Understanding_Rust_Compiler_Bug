{"sha": "2ef2bda276d2fe28d8b15f722850f5f21b226792", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlZjJiZGEyNzZkMmZlMjhkOGIxNWY3MjI4NTBmNWYyMWIyMjY3OTI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-01T19:42:28Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-01T19:42:28Z"}, "message": "Move brace/if/for/while/do/alt/spawn exprs into bottom_expr rule.", "tree": {"sha": "fcef09cecb27527e7c63f72b975542a11b547ff0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcef09cecb27527e7c63f72b975542a11b547ff0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ef2bda276d2fe28d8b15f722850f5f21b226792", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ef2bda276d2fe28d8b15f722850f5f21b226792", "html_url": "https://github.com/rust-lang/rust/commit/2ef2bda276d2fe28d8b15f722850f5f21b226792", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ef2bda276d2fe28d8b15f722850f5f21b226792/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eef7b613c7f9435bec591376170791de41fa38c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eef7b613c7f9435bec591376170791de41fa38c", "html_url": "https://github.com/rust-lang/rust/commit/4eef7b613c7f9435bec591376170791de41fa38c"}], "stats": {"total": 42, "additions": 19, "deletions": 23}, "files": [{"sha": "688bfb01e19209c50e265326cd64dcc34adb280f", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2ef2bda276d2fe28d8b15f722850f5f21b226792/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ef2bda276d2fe28d8b15f722850f5f21b226792/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=2ef2bda276d2fe28d8b15f722850f5f21b226792", "patch": "@@ -771,6 +771,24 @@ fn parse_bottom_expr(&parser p) -> @ast::expr {\n         hi = p.get_hi_pos();\n         expect(p, token::RPAREN);\n         ret @spanned(lo, hi, e.node);\n+\n+    } else if  (p.peek() == token::LBRACE) {\n+        auto blk = parse_block(p);\n+        ret @spanned(blk.span.lo, blk.span.hi,\n+                     ast::expr_block(blk, p.get_ann()));\n+    } else if (eat_word(p, \"if\")) {\n+        ret parse_if_expr(p);\n+    } else if (eat_word(p, \"for\")) {\n+        ret parse_for_expr(p);\n+    } else if (eat_word(p, \"while\")) {\n+        ret parse_while_expr(p);\n+    } else if (eat_word(p, \"do\")) {\n+        ret parse_do_while_expr(p);\n+    } else if (eat_word(p, \"alt\")) {\n+        ret parse_alt_expr(p);\n+    } else if (eat_word(p, \"spawn\")) {\n+        ret parse_spawn_expr(p);\n+\n     } else if (eat_word(p, \"tup\")) {\n         fn parse_elt(&parser p) -> ast::elt {\n             auto m = parse_mutability(p);\n@@ -1415,33 +1433,11 @@ fn parse_expr(&parser p) -> @ast::expr {\n fn parse_expr_res(&parser p, restriction r) -> @ast::expr {\n     auto old = p.get_restriction();\n     p.restrict(r);\n-    auto e = parse_expr_inner(p);\n+    auto e = parse_assign_expr(p);\n     p.restrict(old);\n     ret e;\n }\n \n-fn parse_expr_inner(&parser p) -> @ast::expr {\n-    if (p.peek() == token::LBRACE) {\n-        auto blk = parse_block(p);\n-        ret @spanned(blk.span.lo, blk.span.hi,\n-                     ast::expr_block(blk, p.get_ann()));\n-    } else if (eat_word(p, \"if\")) {\n-        ret parse_if_expr(p);\n-    } else if (eat_word(p, \"for\")) {\n-        ret parse_for_expr(p);\n-    } else if (eat_word(p, \"while\")) {\n-        ret parse_while_expr(p);\n-    } else if (eat_word(p, \"do\")) {\n-        ret parse_do_while_expr(p);\n-    } else if (eat_word(p, \"alt\")) {\n-        ret parse_alt_expr(p);\n-    } else if (eat_word(p, \"spawn\")) {\n-        ret parse_spawn_expr(p);\n-    } else {\n-        ret parse_assign_expr(p);\n-    }\n-}\n-\n fn parse_initializer(&parser p) -> option::t[ast::initializer] {\n     alt (p.peek()) {\n         case (token::EQ) {"}]}