{"sha": "1c3fce01dfb63da3a88161d5744389f827ffe0d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjM2ZjZTAxZGZiNjNkYTNhODgxNjFkNTc0NDM4OWY4MjdmZmUwZDg=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-09-19T08:31:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-19T08:31:31Z"}, "message": "Rollup merge of #88996 - Aaron1011:trailing-macro-semi, r=petrochenkov\n\nFix linting when trailing macro expands to a trailing semi\n\nWhen a macro is used in the trailing expression position of a block\n(e.g. `fn foo() { my_macro!() }`), we currently parse it as an\nexpression, rather than a statement. As a result, we ended up\nusing the `NodeId` of the containing statement as our `lint_node_id`,\neven though we don't normally do this for macro calls.\n\nIf such a macro expands to an expression with a `#[cfg]` attribute,\nthen the trailing statement can get removed entirely. This lead to\nan ICE, since we were usng the `NodeId` of the expression to emit\na lint.\n\nThs commit makes us skip updating `lint_node_id` when handling\na macro in trailing expression position. This will cause us to\nlint at the closest parent of the macro call.", "tree": {"sha": "aa909783cd7604e8b2addc6ea773a0679ef4805c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa909783cd7604e8b2addc6ea773a0679ef4805c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c3fce01dfb63da3a88161d5744389f827ffe0d8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhRvVjCRBK7hj4Ov3rIwAAVrMIAFqdL6Hgkhx9/WGgJApEb0U4\nNPUG2kLE0E4xwxdobetR+617zCDB1iCU7NcGDl0dgJZzLmi7dg0zlwrTxZ0TEs5n\nPc95wpYw6Ly+f289Ivgoa76+qu2bmVJESsctBpH/eeYgg7GmCi+MTAS8ypXHpQGz\nszoWhCZH4pDZs9hkCuUsuHBzTgoBhoaBYnSR7R78cS9ERgYur9ao/6W8guxMHaVZ\nDp1IoQ+ct4j9SFPAQjpaMuLAkAiGHijW5+5CKhOSR1mU5uqwjW5ez6EwW18lbqCp\ndM5P7H5hdicwR0yDm+ZlRDij0KkE8mPVSWXw9tsRF55skeCLskhkr6ajMwSWKE4=\n=xXi9\n-----END PGP SIGNATURE-----\n", "payload": "tree aa909783cd7604e8b2addc6ea773a0679ef4805c\nparent ba1a90a417bf81b33c793552b4fd95e6df81a38a\nparent bd4c9676c76a1df1ea14c04fa0150e4048d5ba77\nauthor Yuki Okushi <jtitor@2k36.org> 1632040291 +0900\ncommitter GitHub <noreply@github.com> 1632040291 +0900\n\nRollup merge of #88996 - Aaron1011:trailing-macro-semi, r=petrochenkov\n\nFix linting when trailing macro expands to a trailing semi\n\nWhen a macro is used in the trailing expression position of a block\n(e.g. `fn foo() { my_macro!() }`), we currently parse it as an\nexpression, rather than a statement. As a result, we ended up\nusing the `NodeId` of the containing statement as our `lint_node_id`,\neven though we don't normally do this for macro calls.\n\nIf such a macro expands to an expression with a `#[cfg]` attribute,\nthen the trailing statement can get removed entirely. This lead to\nan ICE, since we were usng the `NodeId` of the expression to emit\na lint.\n\nThs commit makes us skip updating `lint_node_id` when handling\na macro in trailing expression position. This will cause us to\nlint at the closest parent of the macro call.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c3fce01dfb63da3a88161d5744389f827ffe0d8", "html_url": "https://github.com/rust-lang/rust/commit/1c3fce01dfb63da3a88161d5744389f827ffe0d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c3fce01dfb63da3a88161d5744389f827ffe0d8/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba1a90a417bf81b33c793552b4fd95e6df81a38a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba1a90a417bf81b33c793552b4fd95e6df81a38a", "html_url": "https://github.com/rust-lang/rust/commit/ba1a90a417bf81b33c793552b4fd95e6df81a38a"}, {"sha": "bd4c9676c76a1df1ea14c04fa0150e4048d5ba77", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd4c9676c76a1df1ea14c04fa0150e4048d5ba77", "html_url": "https://github.com/rust-lang/rust/commit/bd4c9676c76a1df1ea14c04fa0150e4048d5ba77"}], "stats": {"total": 49, "additions": 43, "deletions": 6}, "files": [{"sha": "d32593f34adefc750c68f8a9ed4f1b20f5f8a29c", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1c3fce01dfb63da3a88161d5744389f827ffe0d8/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3fce01dfb63da3a88161d5744389f827ffe0d8/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=1c3fce01dfb63da3a88161d5744389f827ffe0d8", "patch": "@@ -1386,14 +1386,17 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         // `SEMICOLON_IN_EXPRESSIONS_FROM_MACROS` lint if needed.\n         // See #78991 for an investigation of treating macros in this position\n         // as statements, rather than expressions, during parsing.\n-        if let StmtKind::Expr(expr) = &stmt.kind {\n-            if matches!(**expr, ast::Expr { kind: ast::ExprKind::MacCall(..), .. }) {\n+        let res = match &stmt.kind {\n+            StmtKind::Expr(expr)\n+                if matches!(**expr, ast::Expr { kind: ast::ExprKind::MacCall(..), .. }) =>\n+            {\n                 self.cx.current_expansion.is_trailing_mac = true;\n+                // Don't use `assign_id` for this statement - it may get removed\n+                // entirely due to a `#[cfg]` on the contained expression\n+                noop_flat_map_stmt(stmt, self)\n             }\n-        }\n-\n-        let res = assign_id!(self, &mut stmt.id, || noop_flat_map_stmt(stmt, self));\n-\n+            _ => assign_id!(self, &mut stmt.id, || noop_flat_map_stmt(stmt, self)),\n+        };\n         self.cx.current_expansion.is_trailing_mac = false;\n         res\n     }"}, {"sha": "f8e847563915e97b4e8475bf6ebdd285b5ecd782", "filename": "src/test/ui/macros/lint-trailing-macro-call.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1c3fce01dfb63da3a88161d5744389f827ffe0d8/src%2Ftest%2Fui%2Fmacros%2Flint-trailing-macro-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3fce01dfb63da3a88161d5744389f827ffe0d8/src%2Ftest%2Fui%2Fmacros%2Flint-trailing-macro-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Flint-trailing-macro-call.rs?ref=1c3fce01dfb63da3a88161d5744389f827ffe0d8", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+//\n+// Ensures that we properly lint\n+// a removed 'expression' resulting from a macro\n+// in trailing expression position\n+\n+macro_rules! expand_it {\n+    () => {\n+        #[cfg(FALSE)] 25; //~  WARN trailing semicolon in macro\n+                          //~| WARN this was previously\n+    }\n+}\n+\n+fn main() {\n+    expand_it!()\n+}"}, {"sha": "a98a559c8afaded3aee9a1c917a384f0112718ab", "filename": "src/test/ui/macros/lint-trailing-macro-call.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1c3fce01dfb63da3a88161d5744389f827ffe0d8/src%2Ftest%2Fui%2Fmacros%2Flint-trailing-macro-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c3fce01dfb63da3a88161d5744389f827ffe0d8/src%2Ftest%2Fui%2Fmacros%2Flint-trailing-macro-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Flint-trailing-macro-call.stderr?ref=1c3fce01dfb63da3a88161d5744389f827ffe0d8", "patch": "@@ -0,0 +1,18 @@\n+warning: trailing semicolon in macro used in expression position\n+  --> $DIR/lint-trailing-macro-call.rs:9:25\n+   |\n+LL |         #[cfg(FALSE)] 25;\n+   |                         ^\n+...\n+LL |     expand_it!()\n+   |     ------------ in this macro invocation\n+   |\n+   = note: `#[warn(semicolon_in_expressions_from_macros)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n+   = note: macro invocations at the end of a block are treated as expressions\n+   = note: to ignore the value produced by the macro, add a semicolon after the invocation of `expand_it`\n+   = note: this warning originates in the macro `expand_it` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+warning: 1 warning emitted\n+"}]}