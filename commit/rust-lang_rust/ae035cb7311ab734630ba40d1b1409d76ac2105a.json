{"sha": "ae035cb7311ab734630ba40d1b1409d76ac2105a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMDM1Y2I3MzExYWI3MzQ2MzBiYTQwZDFiMTQwOWQ3NmFjMjEwNWE=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2017-11-30T15:22:11Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-13T11:03:27Z"}, "message": "Extract coerce_closure_fn_ty function", "tree": {"sha": "3364567332fcb35e4d626805c914d9a25fee62a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3364567332fcb35e4d626805c914d9a25fee62a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae035cb7311ab734630ba40d1b1409d76ac2105a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae035cb7311ab734630ba40d1b1409d76ac2105a", "html_url": "https://github.com/rust-lang/rust/commit/ae035cb7311ab734630ba40d1b1409d76ac2105a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae035cb7311ab734630ba40d1b1409d76ac2105a/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "900d4d5bda06eb87b5a8a36713720095ef6951e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/900d4d5bda06eb87b5a8a36713720095ef6951e1", "html_url": "https://github.com/rust-lang/rust/commit/900d4d5bda06eb87b5a8a36713720095ef6951e1"}], "stats": {"total": 39, "additions": 22, "deletions": 17}, "files": [{"sha": "441dd792ee14a75075bfc80a91ac736746f108a3", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ae035cb7311ab734630ba40d1b1409d76ac2105a/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae035cb7311ab734630ba40d1b1409d76ac2105a/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=ae035cb7311ab734630ba40d1b1409d76ac2105a", "patch": "@@ -1717,6 +1717,27 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }))\n     }\n \n+    /// Create an unsafe fn ty based on a safe fn ty.\n+    pub fn coerce_closure_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {\n+        let converted_sig = sig.map_bound(|s| {\n+            let params_iter = match s.inputs()[0].sty {\n+                ty::TyTuple(params, _) => {\n+                    params.into_iter().cloned()\n+                }\n+                _ => bug!(),\n+            };\n+            self.mk_fn_sig(\n+                params_iter,\n+                s.output(),\n+                s.variadic,\n+                hir::Unsafety::Normal,\n+                abi::Abi::Rust\n+                )\n+        });\n+\n+        self.mk_fn_ptr(converted_sig)\n+    }\n+\n     // Interns a type/name combination, stores the resulting box in cx.interners,\n     // and returns the box as cast to an unsafe ptr (see comments for Ty above).\n     pub fn mk_ty(self, st: TypeVariants<'tcx>) -> Ty<'tcx> {"}, {"sha": "079dc2964a36289dafb923463e4ccc314129ab71", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ae035cb7311ab734630ba40d1b1409d76ac2105a/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae035cb7311ab734630ba40d1b1409d76ac2105a/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=ae035cb7311ab734630ba40d1b1409d76ac2105a", "patch": "@@ -75,7 +75,6 @@ use rustc::ty::fold::TypeFoldable;\n use rustc::ty::error::TypeError;\n use rustc::ty::relate::RelateResult;\n use errors::DiagnosticBuilder;\n-use syntax::abi;\n use syntax::feature_gate;\n use syntax::ptr::P;\n use syntax_pos;\n@@ -670,22 +669,7 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n                 // to\n                 //     `fn(arg0,arg1,...) -> _`\n                 let sig = self.closure_sig(def_id_a, substs_a);\n-                let converted_sig = sig.map_bound(|s| {\n-                    let params_iter = match s.inputs()[0].sty {\n-                        ty::TyTuple(params, _) => {\n-                            params.into_iter().cloned()\n-                        }\n-                        _ => bug!(),\n-                    };\n-                    self.tcx.mk_fn_sig(\n-                        params_iter,\n-                        s.output(),\n-                        s.variadic,\n-                        hir::Unsafety::Normal,\n-                        abi::Abi::Rust\n-                    )\n-                });\n-                let pointer_ty = self.tcx.mk_fn_ptr(converted_sig);\n+                let pointer_ty = self.tcx.coerce_closure_fn_ty(sig);\n                 debug!(\"coerce_closure_to_fn(a={:?}, b={:?}, pty={:?})\",\n                        a, b, pointer_ty);\n                 self.unify_and(pointer_ty, b, simple(Adjust::ClosureFnPointer))"}]}