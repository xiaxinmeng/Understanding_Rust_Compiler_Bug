{"sha": "7fb7cfc2d1cd2781a20e4034b12384566d13c728", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmYjdjZmMyZDFjZDI3ODFhMjBlNDAzNGIxMjM4NDU2NmQxM2M3Mjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-30T14:46:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-30T14:46:50Z"}, "message": "generate single byte tokens", "tree": {"sha": "86495030c1c1fdda29946165cdd750569dfe044f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86495030c1c1fdda29946165cdd750569dfe044f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fb7cfc2d1cd2781a20e4034b12384566d13c728", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fb7cfc2d1cd2781a20e4034b12384566d13c728", "html_url": "https://github.com/rust-lang/rust/commit/7fb7cfc2d1cd2781a20e4034b12384566d13c728", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fb7cfc2d1cd2781a20e4034b12384566d13c728/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4366940976a3d150a8b5bf92dc24f0162d4d62c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4366940976a3d150a8b5bf92dc24f0162d4d62c", "html_url": "https://github.com/rust-lang/rust/commit/d4366940976a3d150a8b5bf92dc24f0162d4d62c"}], "stats": {"total": 242, "additions": 139, "deletions": 103}, "files": [{"sha": "38453b45cf18dca6c7d29ee6f8e35ea324861fe5", "filename": "src/grammar.ron", "status": "modified", "additions": 39, "deletions": 35, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/7fb7cfc2d1cd2781a20e4034b12384566d13c728/src%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/7fb7cfc2d1cd2781a20e4034b12384566d13c728/src%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar.ron?ref=7fb7cfc2d1cd2781a20e4034b12384566d13c728", "patch": "@@ -1,4 +1,43 @@\n Grammar(\n+    single_byte_tokens: [\n+        [\";\", \"SEMI\"],\n+        [\",\", \"COMMA\"],\n+        [\"(\", \"L_PAREN\"],\n+        [\")\", \"R_PAREN\"],\n+        [\"{\", \"L_CURLY\"],\n+        [\"}\", \"R_CURLY\"],\n+        [\"[\", \"L_BRACK\"],\n+        [\"]\", \"R_BRACK\"],\n+        [\"<\", \"L_ANGLE\"],\n+        [\">\", \"R_ANGLE\"],\n+        [\"@\", \"AT\"],\n+        [\"#\", \"POUND\"],\n+        [\"~\", \"TILDE\"],\n+        [\"?\", \"QUESTION\"],\n+        [\"$\", \"DOLLAR\"],\n+        [\"&\", \"AMPERSAND\"],\n+        [\"|\", \"PIPE\"],\n+        [\"+\", \"PLUS\"],\n+        [\"*\", \"STAR\"],\n+        [\"/\", \"SLASH\"],\n+        [\"^\", \"CARET\"],\n+        [\"%\", \"PERCENT\"],\n+    ],\n+    multi_byte_tokens: [\n+        [\".\", \"DOT\"],\n+        [\"..\", \"DOTDOT\"],\n+        [\"...\", \"DOTDOTDOT\"],\n+        [\"..=\", \"DOTDOTEQ\"],\n+        [\":\", \"COLON\"],\n+        [\"::\", \"COLONCOLON\"],\n+        [\"=\", \"EQ\"],\n+        [\"==\", \"EQEQ\"],\n+        [\"=>\", \"FAT_ARROW\"],\n+        [\"!\", \"EXCL\"],\n+        [\"!=\", \"NEQ\"],\n+        [\"-\", \"MINUS\"],\n+        [\"->\", \"THIN_ARROW\"],\n+    ],\n     keywords: [\n         \"use\",\n         \"fn\",\n@@ -42,48 +81,13 @@ Grammar(\n         \"WHITESPACE\",\n         \"INT_NUMBER\",\n         \"FLOAT_NUMBER\",\n-        \"SEMI\",\n-        \"COMMA\",\n-        \"DOT\",\n-        \"DOTDOT\",\n-        \"DOTDOTDOT\",\n-        \"DOTDOTEQ\",\n-        \"L_PAREN\",\n-        \"R_PAREN\",\n-        \"L_CURLY\",\n-        \"R_CURLY\",\n-        \"L_BRACK\",\n-        \"R_BRACK\",\n-        \"L_ANGLE\",\n-        \"R_ANGLE\",\n-        \"AT\",\n-        \"POUND\",\n-        \"TILDE\",\n-        \"QUESTION\",\n-        \"COLON\",\n-        \"COLONCOLON\",\n-        \"DOLLAR\",\n-        \"EQ\",\n-        \"EQEQ\",\n-        \"FAT_ARROW\",\n-        \"NEQ\",\n-        \"EXCL\",\n         \"LIFETIME\",\n         \"CHAR\",\n         \"BYTE\",\n         \"STRING\",\n         \"RAW_STRING\",\n         \"BYTE_STRING\",\n         \"RAW_BYTE_STRING\",\n-        \"PLUS\",\n-        \"MINUS\",\n-        \"STAR\",\n-        \"SLASH\",\n-        \"CARET\",\n-        \"PERCENT\",\n-        \"AMPERSAND\",\n-        \"PIPE\",\n-        \"THIN_ARROW\",\n         \"COMMENT\",\n         \"DOC_COMMENT\",\n         \"SHEBANG\","}, {"sha": "f8fdc41acc0ba55f7af650457e745f44e5e82d77", "filename": "src/lexer/mod.rs", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7fb7cfc2d1cd2781a20e4034b12384566d13c728/src%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fb7cfc2d1cd2781a20e4034b12384566d13c728/src%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flexer%2Fmod.rs?ref=7fb7cfc2d1cd2781a20e4034b12384566d13c728", "patch": "@@ -79,30 +79,11 @@ fn next_token_inner(c: char, ptr: &mut Ptr) -> SyntaxKind {\n     }\n \n     // One-byte tokens.\n-    match c {\n-        ';' => return SEMI,\n-        ',' => return COMMA,\n-        '(' => return L_PAREN,\n-        ')' => return R_PAREN,\n-        '{' => return L_CURLY,\n-        '}' => return R_CURLY,\n-        '[' => return L_BRACK,\n-        ']' => return R_BRACK,\n-        '<' => return L_ANGLE,\n-        '>' => return R_ANGLE,\n-        '@' => return AT,\n-        '#' => return POUND,\n-        '~' => return TILDE,\n-        '?' => return QUESTION,\n-        '$' => return DOLLAR,\n-        '&' => return AMPERSAND,\n-        '|' => return PIPE,\n-        '+' => return PLUS,\n-        '*' => return STAR,\n-        '/' => return SLASH,\n-        '^' => return CARET,\n-        '%' => return PERCENT,\n+    if let Some(kind) = SyntaxKind::from_char(c) {\n+        return kind;\n+    }\n \n+    match c {\n         // Multi-byte tokens.\n         '.' => {\n             return match (ptr.next(), ptr.nnext()) {"}, {"sha": "de0d1c51de80d64e8715df2c8c3c91dc22c7ffb2", "filename": "src/syntax_kinds/generated.rs", "status": "modified", "additions": 71, "deletions": 42, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/7fb7cfc2d1cd2781a20e4034b12384566d13c728/src%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fb7cfc2d1cd2781a20e4034b12384566d13c728/src%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds%2Fgenerated.rs?ref=7fb7cfc2d1cd2781a20e4034b12384566d13c728", "patch": "@@ -5,18 +5,8 @@ use super::SyntaxInfo;\n /// The kind of syntax node, e.g. `IDENT`, `USE_KW`, or `STRUCT_DEF`.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub enum SyntaxKind {\n-    ERROR,\n-    IDENT,\n-    UNDERSCORE,\n-    WHITESPACE,\n-    INT_NUMBER,\n-    FLOAT_NUMBER,\n     SEMI,\n     COMMA,\n-    DOT,\n-    DOTDOT,\n-    DOTDOTDOT,\n-    DOTDOTEQ,\n     L_PAREN,\n     R_PAREN,\n     L_CURLY,\n@@ -29,30 +19,40 @@ pub enum SyntaxKind {\n     POUND,\n     TILDE,\n     QUESTION,\n+    DOLLAR,\n+    AMPERSAND,\n+    PIPE,\n+    PLUS,\n+    STAR,\n+    SLASH,\n+    CARET,\n+    PERCENT,\n+    DOT,\n+    DOTDOT,\n+    DOTDOTDOT,\n+    DOTDOTEQ,\n     COLON,\n     COLONCOLON,\n-    DOLLAR,\n     EQ,\n     EQEQ,\n     FAT_ARROW,\n-    NEQ,\n     EXCL,\n+    NEQ,\n+    MINUS,\n+    THIN_ARROW,\n+    ERROR,\n+    IDENT,\n+    UNDERSCORE,\n+    WHITESPACE,\n+    INT_NUMBER,\n+    FLOAT_NUMBER,\n     LIFETIME,\n     CHAR,\n     BYTE,\n     STRING,\n     RAW_STRING,\n     BYTE_STRING,\n     RAW_BYTE_STRING,\n-    PLUS,\n-    MINUS,\n-    STAR,\n-    SLASH,\n-    CARET,\n-    PERCENT,\n-    AMPERSAND,\n-    PIPE,\n-    THIN_ARROW,\n     COMMENT,\n     DOC_COMMENT,\n     SHEBANG,\n@@ -151,18 +151,8 @@ use self::SyntaxKind::*;\n impl SyntaxKind {\n     pub(crate) fn info(self) -> &'static SyntaxInfo {\n         match self {\n-            ERROR => &SyntaxInfo { name: \"ERROR\" },\n-            IDENT => &SyntaxInfo { name: \"IDENT\" },\n-            UNDERSCORE => &SyntaxInfo { name: \"UNDERSCORE\" },\n-            WHITESPACE => &SyntaxInfo { name: \"WHITESPACE\" },\n-            INT_NUMBER => &SyntaxInfo { name: \"INT_NUMBER\" },\n-            FLOAT_NUMBER => &SyntaxInfo { name: \"FLOAT_NUMBER\" },\n             SEMI => &SyntaxInfo { name: \"SEMI\" },\n             COMMA => &SyntaxInfo { name: \"COMMA\" },\n-            DOT => &SyntaxInfo { name: \"DOT\" },\n-            DOTDOT => &SyntaxInfo { name: \"DOTDOT\" },\n-            DOTDOTDOT => &SyntaxInfo { name: \"DOTDOTDOT\" },\n-            DOTDOTEQ => &SyntaxInfo { name: \"DOTDOTEQ\" },\n             L_PAREN => &SyntaxInfo { name: \"L_PAREN\" },\n             R_PAREN => &SyntaxInfo { name: \"R_PAREN\" },\n             L_CURLY => &SyntaxInfo { name: \"L_CURLY\" },\n@@ -175,30 +165,40 @@ impl SyntaxKind {\n             POUND => &SyntaxInfo { name: \"POUND\" },\n             TILDE => &SyntaxInfo { name: \"TILDE\" },\n             QUESTION => &SyntaxInfo { name: \"QUESTION\" },\n+            DOLLAR => &SyntaxInfo { name: \"DOLLAR\" },\n+            AMPERSAND => &SyntaxInfo { name: \"AMPERSAND\" },\n+            PIPE => &SyntaxInfo { name: \"PIPE\" },\n+            PLUS => &SyntaxInfo { name: \"PLUS\" },\n+            STAR => &SyntaxInfo { name: \"STAR\" },\n+            SLASH => &SyntaxInfo { name: \"SLASH\" },\n+            CARET => &SyntaxInfo { name: \"CARET\" },\n+            PERCENT => &SyntaxInfo { name: \"PERCENT\" },\n+            DOT => &SyntaxInfo { name: \"DOT\" },\n+            DOTDOT => &SyntaxInfo { name: \"DOTDOT\" },\n+            DOTDOTDOT => &SyntaxInfo { name: \"DOTDOTDOT\" },\n+            DOTDOTEQ => &SyntaxInfo { name: \"DOTDOTEQ\" },\n             COLON => &SyntaxInfo { name: \"COLON\" },\n             COLONCOLON => &SyntaxInfo { name: \"COLONCOLON\" },\n-            DOLLAR => &SyntaxInfo { name: \"DOLLAR\" },\n             EQ => &SyntaxInfo { name: \"EQ\" },\n             EQEQ => &SyntaxInfo { name: \"EQEQ\" },\n             FAT_ARROW => &SyntaxInfo { name: \"FAT_ARROW\" },\n-            NEQ => &SyntaxInfo { name: \"NEQ\" },\n             EXCL => &SyntaxInfo { name: \"EXCL\" },\n+            NEQ => &SyntaxInfo { name: \"NEQ\" },\n+            MINUS => &SyntaxInfo { name: \"MINUS\" },\n+            THIN_ARROW => &SyntaxInfo { name: \"THIN_ARROW\" },\n+            ERROR => &SyntaxInfo { name: \"ERROR\" },\n+            IDENT => &SyntaxInfo { name: \"IDENT\" },\n+            UNDERSCORE => &SyntaxInfo { name: \"UNDERSCORE\" },\n+            WHITESPACE => &SyntaxInfo { name: \"WHITESPACE\" },\n+            INT_NUMBER => &SyntaxInfo { name: \"INT_NUMBER\" },\n+            FLOAT_NUMBER => &SyntaxInfo { name: \"FLOAT_NUMBER\" },\n             LIFETIME => &SyntaxInfo { name: \"LIFETIME\" },\n             CHAR => &SyntaxInfo { name: \"CHAR\" },\n             BYTE => &SyntaxInfo { name: \"BYTE\" },\n             STRING => &SyntaxInfo { name: \"STRING\" },\n             RAW_STRING => &SyntaxInfo { name: \"RAW_STRING\" },\n             BYTE_STRING => &SyntaxInfo { name: \"BYTE_STRING\" },\n             RAW_BYTE_STRING => &SyntaxInfo { name: \"RAW_BYTE_STRING\" },\n-            PLUS => &SyntaxInfo { name: \"PLUS\" },\n-            MINUS => &SyntaxInfo { name: \"MINUS\" },\n-            STAR => &SyntaxInfo { name: \"STAR\" },\n-            SLASH => &SyntaxInfo { name: \"SLASH\" },\n-            CARET => &SyntaxInfo { name: \"CARET\" },\n-            PERCENT => &SyntaxInfo { name: \"PERCENT\" },\n-            AMPERSAND => &SyntaxInfo { name: \"AMPERSAND\" },\n-            PIPE => &SyntaxInfo { name: \"PIPE\" },\n-            THIN_ARROW => &SyntaxInfo { name: \"THIN_ARROW\" },\n             COMMENT => &SyntaxInfo { name: \"COMMENT\" },\n             DOC_COMMENT => &SyntaxInfo { name: \"DOC_COMMENT\" },\n             SHEBANG => &SyntaxInfo { name: \"SHEBANG\" },\n@@ -325,5 +325,34 @@ impl SyntaxKind {\n         };\n         Some(kw)\n     }\n+\n+    pub(crate) fn from_char(c: char) -> Option<SyntaxKind> {\n+        let tok = match c {\n+            ';' => SEMI,\n+            ',' => COMMA,\n+            '(' => L_PAREN,\n+            ')' => R_PAREN,\n+            '{' => L_CURLY,\n+            '}' => R_CURLY,\n+            '[' => L_BRACK,\n+            ']' => R_BRACK,\n+            '<' => L_ANGLE,\n+            '>' => R_ANGLE,\n+            '@' => AT,\n+            '#' => POUND,\n+            '~' => TILDE,\n+            '?' => QUESTION,\n+            '$' => DOLLAR,\n+            '&' => AMPERSAND,\n+            '|' => PIPE,\n+            '+' => PLUS,\n+            '*' => STAR,\n+            '/' => SLASH,\n+            '^' => CARET,\n+            '%' => PERCENT,\n+            _ => return None,\n+        };\n+        Some(tok)\n+    }\n }\n "}, {"sha": "21e471b71bcf3c7ae017f41ca31c3588bb574a3d", "filename": "src/syntax_kinds/generated.rs.tera", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7fb7cfc2d1cd2781a20e4034b12384566d13c728/src%2Fsyntax_kinds%2Fgenerated.rs.tera", "raw_url": "https://github.com/rust-lang/rust/raw/7fb7cfc2d1cd2781a20e4034b12384566d13c728/src%2Fsyntax_kinds%2Fgenerated.rs.tera", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds%2Fgenerated.rs.tera?ref=7fb7cfc2d1cd2781a20e4034b12384566d13c728", "patch": "@@ -5,7 +5,13 @@ use super::SyntaxInfo;\n /// The kind of syntax node, e.g. `IDENT`, `USE_KW`, or `STRUCT_DEF`.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub enum SyntaxKind {\n-{%- for t in tokens %}\n+{%- for t in single_byte_tokens %}\n+    {{t.1}},\n+{%- endfor -%}\n+{% for t in multi_byte_tokens %}\n+    {{t.1}},\n+{%- endfor -%}\n+{% for t in tokens %}\n     {{t}},\n {%- endfor -%}\n {% for kw in keywords %}\n@@ -29,7 +35,13 @@ use self::SyntaxKind::*;\n impl SyntaxKind {\n     pub(crate) fn info(self) -> &'static SyntaxInfo {\n         match self {\n-{%- for t in tokens %}\n+{%- for t in single_byte_tokens %}\n+            {{t.1}} => &SyntaxInfo { name: \"{{t.1}}\" },\n+{%- endfor -%}\n+{% for t in multi_byte_tokens %}\n+            {{t.1}} => &SyntaxInfo { name: \"{{t.1}}\" },\n+{%- endfor -%}\n+{% for t in tokens %}\n             {{t}} => &SyntaxInfo { name: \"{{t}}\" },\n {%- endfor -%}\n {% for kw in keywords %}\n@@ -55,5 +67,15 @@ impl SyntaxKind {\n         };\n         Some(kw)\n     }\n+\n+    pub(crate) fn from_char(c: char) -> Option<SyntaxKind> {\n+        let tok = match c {\n+{%- for t in single_byte_tokens %}\n+            '{{t.0}}' => {{t.1}},\n+{%- endfor %}\n+            _ => return None,\n+        };\n+        Some(tok)\n+    }\n }\n "}, {"sha": "3290d1dce5c655b5020dce191686e6f8e875f1f4", "filename": "tools/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fb7cfc2d1cd2781a20e4034b12384566d13c728/tools%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fb7cfc2d1cd2781a20e4034b12384566d13c728/tools%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tools%2Fsrc%2Fmain.rs?ref=7fb7cfc2d1cd2781a20e4034b12384566d13c728", "patch": "@@ -64,7 +64,7 @@ fn get_kinds() -> Result<String> {\n     let grammar = grammar()?;\n     let template = fs::read_to_string(SYNTAX_KINDS_TEMPLATE)?;\n     let ret = tera::Tera::one_off(&template, &grammar, false)\n-        .map_err(|e| format_err!(\"template error: {}\", e))?;\n+        .map_err(|e| format_err!(\"template error: {:?}\", e))?;\n     Ok(ret)\n }\n "}]}