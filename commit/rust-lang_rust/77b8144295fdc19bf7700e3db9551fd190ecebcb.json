{"sha": "77b8144295fdc19bf7700e3db9551fd190ecebcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3YjgxNDQyOTVmZGMxOWJmNzcwMGUzZGI5NTUxZmQxOTBlY2ViY2I=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-26T18:50:21Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-26T18:50:21Z"}, "message": "libcore: Implement result::get_ref.\n\nThis can be more efficient than unwrapping for large structural\ntypes.", "tree": {"sha": "33efcd6867a109f595f1dfd42912e04e953f19fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33efcd6867a109f595f1dfd42912e04e953f19fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77b8144295fdc19bf7700e3db9551fd190ecebcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77b8144295fdc19bf7700e3db9551fd190ecebcb", "html_url": "https://github.com/rust-lang/rust/commit/77b8144295fdc19bf7700e3db9551fd190ecebcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77b8144295fdc19bf7700e3db9551fd190ecebcb/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62be878ed1715650f080c3b113a85f73e7af0973", "url": "https://api.github.com/repos/rust-lang/rust/commits/62be878ed1715650f080c3b113a85f73e7af0973", "html_url": "https://github.com/rust-lang/rust/commit/62be878ed1715650f080c3b113a85f73e7af0973"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "e916a28ea79d12d6fe99d98f093aa94e0d305b29", "filename": "src/libcore/result.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/77b8144295fdc19bf7700e3db9551fd190ecebcb/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b8144295fdc19bf7700e3db9551fd190ecebcb/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=77b8144295fdc19bf7700e3db9551fd190ecebcb", "patch": "@@ -26,6 +26,22 @@ pure fn get<T: copy, U>(res: result<T, U>) -> T {\n     }\n }\n \n+/**\n+ * Get a reference to the value out of a successful result\n+ *\n+ * # Failure\n+ *\n+ * If the result is an error\n+ */\n+pure fn get_ref<T, U>(res: &a/result<T, U>) -> &a/T {\n+    match *res {\n+        ok(ref t) => t,\n+        err(ref the_err) => unchecked {\n+            fail fmt!(\"get_ref called on error result: %?\", the_err)\n+        }\n+    }\n+}\n+\n /**\n  * Get the value out of an error result\n  *"}]}