{"sha": "a31dd0a2f739227ab502641eb11e3a68a76fd61f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMWRkMGEyZjczOTIyN2FiNTAyNjQxZWIxMWUzYTY4YTc2ZmQ2MWY=", "commit": {"author": {"name": "Georg Semmler", "email": "georg_semmler_05@web.de", "date": "2018-11-23T09:45:17Z"}, "committer": {"name": "Georg Semmler", "email": "georg_semmler_05@web.de", "date": "2019-01-03T21:26:57Z"}, "message": "Directly check if input_ty is a type parameter and therefore a\nuncoverd type", "tree": {"sha": "6aaf33da73a022e855fd58942927329dcf7c22d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6aaf33da73a022e855fd58942927329dcf7c22d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a31dd0a2f739227ab502641eb11e3a68a76fd61f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEt/EOFp+yWvA8Dk28qHvO5SBc5IkFAlwufiEACgkQqHvO5SBc\n5Ik1vggAq4A4+cbg3l+euvmos8DvqpnBJwLfw9EaWhFZ/w3DJmSA0hC2redvTnwK\nBTC5AxQgYl7CitMXWNpv3TMutvXgFMQZZxn816kLShi3+a5zeTidQx13a6YYIEBR\nOYGGYoLcL8R+nuO8UKnzO/wrI5C6uOmBW18dt9GPC3sFrw44jGsIpGRIGpJNdxR8\nrTx4LW/0C2E7lCuPyqtZNBYkieEnEZg4UlzeU33Vu+tIDSuk+jvWIhY7s9KfwJkD\nfHqEoMFNV3aF4mgotV1FPBbhcT1o1uA8XYxAxCvEKrHkFK4B68mrD6arQHkycK3v\nDHEh/2ujGyG6Tf0nQkWKcqClBIe3xg==\n=e6sB\n-----END PGP SIGNATURE-----", "payload": "tree 6aaf33da73a022e855fd58942927329dcf7c22d9\nparent 854ac40104bce20a68571b2b1d8e3fab98c48b92\nauthor Georg Semmler <georg_semmler_05@web.de> 1542966317 +0100\ncommitter Georg Semmler <georg_semmler_05@web.de> 1546550817 +0100\n\nDirectly check if input_ty is a type parameter and therefore a\nuncoverd type\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a31dd0a2f739227ab502641eb11e3a68a76fd61f", "html_url": "https://github.com/rust-lang/rust/commit/a31dd0a2f739227ab502641eb11e3a68a76fd61f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a31dd0a2f739227ab502641eb11e3a68a76fd61f/comments", "author": {"login": "weiznich", "id": 1674512, "node_id": "MDQ6VXNlcjE2NzQ1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1674512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiznich", "html_url": "https://github.com/weiznich", "followers_url": "https://api.github.com/users/weiznich/followers", "following_url": "https://api.github.com/users/weiznich/following{/other_user}", "gists_url": "https://api.github.com/users/weiznich/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiznich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiznich/subscriptions", "organizations_url": "https://api.github.com/users/weiznich/orgs", "repos_url": "https://api.github.com/users/weiznich/repos", "events_url": "https://api.github.com/users/weiznich/events{/privacy}", "received_events_url": "https://api.github.com/users/weiznich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "weiznich", "id": 1674512, "node_id": "MDQ6VXNlcjE2NzQ1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1674512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiznich", "html_url": "https://github.com/weiznich", "followers_url": "https://api.github.com/users/weiznich/followers", "following_url": "https://api.github.com/users/weiznich/following{/other_user}", "gists_url": "https://api.github.com/users/weiznich/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiznich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiznich/subscriptions", "organizations_url": "https://api.github.com/users/weiznich/orgs", "repos_url": "https://api.github.com/users/weiznich/repos", "events_url": "https://api.github.com/users/weiznich/events{/privacy}", "received_events_url": "https://api.github.com/users/weiznich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "854ac40104bce20a68571b2b1d8e3fab98c48b92", "url": "https://api.github.com/repos/rust-lang/rust/commits/854ac40104bce20a68571b2b1d8e3fab98c48b92", "html_url": "https://github.com/rust-lang/rust/commit/854ac40104bce20a68571b2b1d8e3fab98c48b92"}], "stats": {"total": 42, "additions": 1, "deletions": 41}, "files": [{"sha": "c9cb823ebb3c0bbff5778b8a0ef885b63fb1af42", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 41, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a31dd0a2f739227ab502641eb11e3a68a76fd61f/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a31dd0a2f739227ab502641eb11e3a68a76fd61f/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=a31dd0a2f739227ab502641eb11e3a68a76fd61f", "patch": "@@ -387,7 +387,7 @@ fn orphan_check_trait_ref<'tcx>(tcx: TyCtxt<'_, '_, '_>,\n             if ty_is_local(tcx, input_ty, in_crate) {\n                 debug!(\"orphan_check_trait_ref: ty_is_local `{:?}`\", input_ty);\n                 return Ok(());\n-            } else if is_uncovered_ty(input_ty) {\n+            } else if let ty::Param(_) = input_ty.sty {\n                 debug!(\"orphan_check_trait_ref: uncovered ty: `{:?}`\", input_ty);\n                 return Err(OrphanCheckErr::UncoveredTy(input_ty))\n             }\n@@ -435,46 +435,6 @@ fn orphan_check_trait_ref<'tcx>(tcx: TyCtxt<'_, '_, '_>,\n     }\n }\n \n-fn is_uncovered_ty(ty: Ty<'_>) -> bool {\n-    match ty.sty {\n-        ty::Bool |\n-        ty::Char |\n-        ty::Int(..) |\n-        ty::Uint(..) |\n-        ty::Float(..) |\n-        ty::Str |\n-        ty::FnDef(..) |\n-        ty::FnPtr(_) |\n-        ty::Array(..) |\n-        ty::Slice(..) |\n-        ty::RawPtr(..) |\n-        ty::Ref(..) |\n-        ty::Never |\n-        ty::Tuple(..) |\n-        ty::Bound(..) |\n-        ty::Infer(..) |\n-        ty::Adt(..) |\n-        ty::Foreign(..) |\n-        ty::Dynamic(..) |\n-        ty::Error |\n-        ty::Projection(..) => {\n-            false\n-        }\n-\n-        ty::Param(..)  => {\n-            true\n-        }\n-\n-        ty::UnnormalizedProjection(..) |\n-        ty::Closure(..) |\n-        ty::Generator(..) |\n-        ty::GeneratorWitness(..) |\n-        ty::Opaque(..) => {\n-            bug!(\"is_uncovered_ty invoked on unexpected type: {:?}\", ty)\n-        }\n-    }\n-}\n-\n fn uncovered_tys<'tcx>(tcx: TyCtxt<'_, '_, '_>, ty: Ty<'tcx>, in_crate: InCrate)\n                        -> Vec<Ty<'tcx>> {\n     if ty_is_local_constructor(ty, in_crate) {"}]}