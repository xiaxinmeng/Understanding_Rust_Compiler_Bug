{"sha": "093582c102b4ca983e9b6ef620860a75f6a1d812", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MzU4MmMxMDJiNGNhOTgzZTliNmVmNjIwODYwYTc1ZjZhMWQ4MTI=", "commit": {"author": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2015-12-30T09:07:40Z"}, "committer": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2015-12-30T09:07:40Z"}, "message": "Make MethodsPass lint notes clearer", "tree": {"sha": "ec5aa5253127596118d2ec327afb4d7856a88f98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec5aa5253127596118d2ec327afb4d7856a88f98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/093582c102b4ca983e9b6ef620860a75f6a1d812", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/093582c102b4ca983e9b6ef620860a75f6a1d812", "html_url": "https://github.com/rust-lang/rust/commit/093582c102b4ca983e9b6ef620860a75f6a1d812", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/093582c102b4ca983e9b6ef620860a75f6a1d812/comments", "author": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c42d46468e7a047841c89d1ebdd517917bb12a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c42d46468e7a047841c89d1ebdd517917bb12a2", "html_url": "https://github.com/rust-lang/rust/commit/2c42d46468e7a047841c89d1ebdd517917bb12a2"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "a6200534e30e7c50d5eba61065f019c8aef06ef0", "filename": "src/methods.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/093582c102b4ca983e9b6ef620860a75f6a1d812/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/093582c102b4ca983e9b6ef620860a75f6a1d812/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=093582c102b4ca983e9b6ef620860a75f6a1d812", "patch": "@@ -327,7 +327,8 @@ fn lint_map_unwrap_or(cx: &LateContext, expr: &Expr, map_args: &MethodArgs,\n         if same_span && !multiline {\n             span_note_and_lint(\n                 cx, OPTION_MAP_UNWRAP_OR, expr.span, msg, expr.span,\n-                &format!(\"replace this with map_or({1}, {0})\", map_snippet, unwrap_snippet)\n+                &format!(\"replace `map({0}).unwrap_or({1})` with `map_or({1}, {0})`\", map_snippet,\n+                         unwrap_snippet)\n             );\n         }\n         else if same_span && multiline {\n@@ -356,7 +357,8 @@ fn lint_map_unwrap_or_else(cx: &LateContext, expr: &Expr, map_args: &MethodArgs,\n         if same_span && !multiline {\n             span_note_and_lint(\n                 cx, OPTION_MAP_UNWRAP_OR_ELSE, expr.span, msg, expr.span,\n-                &format!(\"replace this with map_or_else({1}, {0})\", map_snippet, unwrap_snippet)\n+                &format!(\"replace `map({0}).unwrap_or_else({1})` with `with map_or_else({1}, {0})`\",\n+                          map_snippet, unwrap_snippet)\n             );\n         }\n         else if same_span && multiline {\n@@ -375,7 +377,7 @@ fn lint_filter_next(cx: &LateContext, expr: &Expr, filter_args: &MethodArgs) {\n         let filter_snippet = snippet(cx, filter_args[1].span, \"..\");\n         if filter_snippet.lines().count() <= 1 { // add note if not multi-line\n             span_note_and_lint(cx, FILTER_NEXT, expr.span, msg, expr.span,\n-                               &format!(\"replace this with `find({})`)\", filter_snippet));\n+                &format!(\"replace `filter({0}).next()` with `find({0})`\", filter_snippet));\n         }\n         else {\n             span_lint(cx, FILTER_NEXT, expr.span, msg);\n@@ -394,7 +396,8 @@ fn lint_search_is_some(cx: &LateContext, expr: &Expr, search_method: &str, searc\n         let search_snippet = snippet(cx, search_args[1].span, \"..\");\n         if search_snippet.lines().count() <= 1 { // add note if not multi-line\n             span_note_and_lint(cx, SEARCH_IS_SOME, expr.span, &msg, expr.span,\n-                               &format!(\"replace this with `any({})`)\", search_snippet));\n+                &format!(\"replace `{0}({1}).is_some()` with `any({1})`\", search_method,\n+                         search_snippet));\n         }\n         else {\n             span_lint(cx, SEARCH_IS_SOME, expr.span, &msg);"}, {"sha": "b41b28dc11e44592ac6258abdd39e70bad7bb400", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/093582c102b4ca983e9b6ef620860a75f6a1d812/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/093582c102b4ca983e9b6ef620860a75f6a1d812/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=093582c102b4ca983e9b6ef620860a75f6a1d812", "patch": "@@ -50,7 +50,7 @@ fn option_methods() {\n     // Check OPTION_MAP_UNWRAP_OR\n     // single line case\n     let _ = opt.map(|x| x + 1) //~  ERROR called `map(f).unwrap_or(a)`\n-                               //~| NOTE replace this\n+                               //~| NOTE replace `map(|x| x + 1).unwrap_or(0)`\n                .unwrap_or(0); // should lint even though this call is on a separate line\n     // multi line cases\n     let _ = opt.map(|x| { //~ ERROR called `map(f).unwrap_or(a)`\n@@ -67,7 +67,7 @@ fn option_methods() {\n     // Check OPTION_MAP_UNWRAP_OR_ELSE\n     // single line case\n     let _ = opt.map(|x| x + 1) //~  ERROR called `map(f).unwrap_or_else(g)`\n-                               //~| NOTE replace this\n+                               //~| NOTE replace `map(|x| x + 1).unwrap_or_else(|| 0)`\n                .unwrap_or_else(|| 0); // should lint even though this call is on a separate line\n     // multi line cases\n     let _ = opt.map(|x| { //~ ERROR called `map(f).unwrap_or_else(g)`\n@@ -116,8 +116,9 @@ fn filter_next() {\n     let v = vec![3, 2, 1, 0, -1, -2, -3];\n \n     // check single-line case\n-    let _ = v.iter().filter(|&x| *x < 0).next(); //~ERROR called `filter(p).next()` on an Iterator.\n-                                                 //~| NOTE replace this\n+    let _ = v.iter().filter(|&x| *x < 0).next();\n+    //~^ ERROR called `filter(p).next()` on an Iterator.\n+    //~| NOTE replace `filter(|&x| *x < 0).next()`\n \n     // check multi-line case\n     let _ = v.iter().filter(|&x| { //~ERROR called `filter(p).next()` on an Iterator.\n@@ -135,26 +136,32 @@ fn search_is_some() {\n     let v = vec![3, 2, 1, 0, -1, -2, -3];\n \n     // check `find().is_some()`, single-line\n-    let _ = v.iter().find(|&x| *x < 0).is_some(); //~ERROR called `is_some()` after searching\n-                                                  //~| NOTE replace this\n+    let _ = v.iter().find(|&x| *x < 0).is_some();\n+    //~^ ERROR called `is_some()` after searching\n+    //~| NOTE replace `find(|&x| *x < 0).is_some()`\n+\n     // check `find().is_some()`, multi-line\n     let _ = v.iter().find(|&x| { //~ERROR called `is_some()` after searching\n                               *x < 0\n                           }\n                    ).is_some();\n \n     // check `position().is_some()`, single-line\n-    let _ = v.iter().position(|&x| x < 0).is_some(); //~ERROR called `is_some()` after searching\n-                                                     //~| NOTE replace this\n+    let _ = v.iter().position(|&x| x < 0).is_some();\n+    //~^ ERROR called `is_some()` after searching\n+    //~| NOTE replace `position(|&x| x < 0).is_some()`\n+\n     // check `position().is_some()`, multi-line\n     let _ = v.iter().position(|&x| { //~ERROR called `is_some()` after searching\n                                   x < 0\n                               }\n                    ).is_some();\n \n     // check `rposition().is_some()`, single-line\n-    let _ = v.iter().rposition(|&x| x < 0).is_some(); //~ERROR called `is_some()` after searching\n-                                                      //~| NOTE replace this\n+    let _ = v.iter().rposition(|&x| x < 0).is_some();\n+    //~^ ERROR called `is_some()` after searching\n+    //~| NOTE replace `rposition(|&x| x < 0).is_some()`\n+\n     // check `rposition().is_some()`, multi-line\n     let _ = v.iter().rposition(|&x| { //~ERROR called `is_some()` after searching\n                                    x < 0"}]}