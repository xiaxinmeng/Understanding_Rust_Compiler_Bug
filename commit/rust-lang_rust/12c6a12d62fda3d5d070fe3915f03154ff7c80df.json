{"sha": "12c6a12d62fda3d5d070fe3915f03154ff7c80df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyYzZhMTJkNjJmZGEzZDVkMDcwZmUzOTE1ZjAzMTU0ZmY3YzgwZGY=", "commit": {"author": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2021-02-18T19:27:11Z"}, "committer": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2021-02-18T19:27:11Z"}, "message": "Emit error when trying to use assembler syntax directives in `asm!`", "tree": {"sha": "bca07f5862f16fb7f90a79c1aa7b4502bd700a8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bca07f5862f16fb7f90a79c1aa7b4502bd700a8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12c6a12d62fda3d5d070fe3915f03154ff7c80df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12c6a12d62fda3d5d070fe3915f03154ff7c80df", "html_url": "https://github.com/rust-lang/rust/commit/12c6a12d62fda3d5d070fe3915f03154ff7c80df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12c6a12d62fda3d5d070fe3915f03154ff7c80df/comments", "author": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "committer": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb2effd44e667d133e31ef334e30d10195218ce6", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb2effd44e667d133e31ef334e30d10195218ce6", "html_url": "https://github.com/rust-lang/rust/commit/cb2effd44e667d133e31ef334e30d10195218ce6"}], "stats": {"total": 103, "additions": 102, "deletions": 1}, "files": [{"sha": "168dee6678d684c9978bd6e20b9a359892b05bec", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/12c6a12d62fda3d5d070fe3915f03154ff7c80df/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c6a12d62fda3d5d070fe3915f03154ff7c80df/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=12c6a12d62fda3d5d070fe3915f03154ff7c80df", "patch": "@@ -7,7 +7,10 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_expand::base::{self, *};\n use rustc_parse::parser::Parser;\n use rustc_parse_format as parse;\n-use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::{\n+    symbol::{kw, sym, Symbol},\n+    BytePos,\n+};\n use rustc_span::{InnerSpan, Span};\n \n struct AsmArgs {\n@@ -465,6 +468,54 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n         for piece in unverified_pieces {\n             match piece {\n                 parse::Piece::String(s) => {\n+                    if let Some(idx) = s.find(\".intel_syntax\") {\n+                        let mut end = idx + \".intel_syntax\".len();\n+                        if let Some(prefix_idx) = s.split_at(end).1.find(\"noprefix\") {\n+                            // Should be a space and it should be immediately after\n+                            if prefix_idx == 1 {\n+                                end += \" noprefix\".len();\n+                            }\n+                        }\n+\n+                        let syntax_span =\n+                            template_span.from_inner(InnerSpan::new(idx + 1, end + 1));\n+                        let mut err = ecx.struct_span_err(syntax_span, \"intel sytnax is the default syntax, and trying to use this directive may cause issues\");\n+                        err.span_suggestion(\n+                            syntax_span,\n+                            \"Remove this assembler directive\",\n+                            s.replace(&s[idx..end], \"\").to_string(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                        err.emit();\n+                    }\n+\n+                    if let Some(idx) = s.find(\".att_syntax\") {\n+                        let mut end = idx + \".att_syntax\".len();\n+                        if let Some(prefix_idx) = s.split_at(end).1.find(\"noprefix\") {\n+                            // Should be a space and it should be immediately after\n+                            if prefix_idx == 1 {\n+                                end += \" noprefix\".len();\n+                            }\n+                        }\n+\n+                        let syntax_span =\n+                            template_span.from_inner(InnerSpan::new(idx + 1, end + 1));\n+                        let mut err = ecx.struct_span_err(syntax_span, \"using the .att_syntax directive may cause issues, use the att_syntax option instead\");\n+                        let asm_end = sp.hi() - BytePos(2);\n+                        let suggestions = vec![\n+                            (syntax_span, \"\".to_string()),\n+                            (\n+                                Span::new(asm_end, asm_end, sp.ctxt()),\n+                                \", options(att_syntax)\".to_string(),\n+                            ),\n+                        ];\n+                        err.multipart_suggestion(\n+                            \"Remove the assembler directive and replace it with options(att_syntax)\",\n+                            suggestions,\n+                            Applicability::MachineApplicable,\n+                        );\n+                        err.emit();\n+                    }\n                     template.push(ast::InlineAsmTemplatePiece::String(s.to_string()))\n                 }\n                 parse::Piece::NextArgument(arg) => {"}, {"sha": "ec8ff0718857be38efa237ef7b7eb81cb63ebbe1", "filename": "src/test/ui/asm/inline-syntax.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/12c6a12d62fda3d5d070fe3915f03154ff7c80df/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c6a12d62fda3d5d070fe3915f03154ff7c80df/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs?ref=12c6a12d62fda3d5d070fe3915f03154ff7c80df", "patch": "@@ -0,0 +1,14 @@\n+#![feature(asm, llvm_asm)]\n+\n+fn main() {\n+    unsafe {\n+        asm!(\".intel_syntax noprefix\", \"nop\");\n+        //~^ ERROR intel sytnax is the default syntax\n+        asm!(\".intel_syntax aaa noprefix\", \"nop\");\n+        //~^ ERROR intel sytnax is the default syntax\n+        asm!(\".att_syntax noprefix\", \"nop\");\n+        //~^ ERROR using the .att_syntax directive may cause issues\n+        asm!(\".att_syntax bbb noprefix\", \"nop\");\n+        //~^ ERROR using the .att_syntax directive may cause issues\n+    }\n+}"}, {"sha": "bd792660c6ae42877ffc90fafc5d70c066b0d691", "filename": "src/test/ui/asm/inline-syntax.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/12c6a12d62fda3d5d070fe3915f03154ff7c80df/src%2Ftest%2Fui%2Fasm%2Finline-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12c6a12d62fda3d5d070fe3915f03154ff7c80df/src%2Ftest%2Fui%2Fasm%2Finline-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.stderr?ref=12c6a12d62fda3d5d070fe3915f03154ff7c80df", "patch": "@@ -0,0 +1,36 @@\n+error: intel sytnax is the default syntax, and trying to use this directive may cause issues\n+  --> $DIR/inline-syntax.rs:5:15\n+   |\n+LL |         asm!(\".intel_syntax noprefix\", \"nop\");\n+   |               ^^^^^^^^^^^^^^^^^^^^^^ help: Remove this assembler directive\n+\n+error: intel sytnax is the default syntax, and trying to use this directive may cause issues\n+  --> $DIR/inline-syntax.rs:7:15\n+   |\n+LL |         asm!(\".intel_syntax aaa noprefix\", \"nop\");\n+   |               ^^^^^^^^^^^^^ help: Remove this assembler directive: `aaa noprefix`\n+\n+error: using the .att_syntax directive may cause issues, use the att_syntax option instead\n+  --> $DIR/inline-syntax.rs:9:15\n+   |\n+LL |         asm!(\".att_syntax noprefix\", \"nop\");\n+   |               ^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: Remove the assembler directive and replace it with options(att_syntax)\n+   |\n+LL |         asm!(\"\", \"nop\", options(att_syntax));\n+   |              --       ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: using the .att_syntax directive may cause issues, use the att_syntax option instead\n+  --> $DIR/inline-syntax.rs:11:15\n+   |\n+LL |         asm!(\".att_syntax bbb noprefix\", \"nop\");\n+   |               ^^^^^^^^^^^\n+   |\n+help: Remove the assembler directive and replace it with options(att_syntax)\n+   |\n+LL |         asm!(\" bbb noprefix\", \"nop\", options(att_syntax));\n+   |              --                    ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}]}