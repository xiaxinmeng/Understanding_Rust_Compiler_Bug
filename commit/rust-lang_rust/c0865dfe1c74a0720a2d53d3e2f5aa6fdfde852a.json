{"sha": "c0865dfe1c74a0720a2d53d3e2f5aa6fdfde852a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwODY1ZGZlMWM3NGEwNzIwYTJkNTNkM2UyZjVhYTZmZGZkZTg1MmE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-17T10:11:33Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-17T12:03:18Z"}, "message": "Rollup merge of #22401 - pnkfelix:fsk-int-uint-audit, r=Gankro\n\ncc #22240", "tree": {"sha": "f2175980ef5419f536aa42575cccfe758f2f388d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2175980ef5419f536aa42575cccfe758f2f388d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0865dfe1c74a0720a2d53d3e2f5aa6fdfde852a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0865dfe1c74a0720a2d53d3e2f5aa6fdfde852a", "html_url": "https://github.com/rust-lang/rust/commit/c0865dfe1c74a0720a2d53d3e2f5aa6fdfde852a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0865dfe1c74a0720a2d53d3e2f5aa6fdfde852a/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "071f8cc9ace7ac16ac94820d9e91e747c60be09d", "url": "https://api.github.com/repos/rust-lang/rust/commits/071f8cc9ace7ac16ac94820d9e91e747c60be09d", "html_url": "https://github.com/rust-lang/rust/commit/071f8cc9ace7ac16ac94820d9e91e747c60be09d"}, {"sha": "480ea5ac55d99b9cf52f4df157a532005cd3ed75", "url": "https://api.github.com/repos/rust-lang/rust/commits/480ea5ac55d99b9cf52f4df157a532005cd3ed75", "html_url": "https://github.com/rust-lang/rust/commit/480ea5ac55d99b9cf52f4df157a532005cd3ed75"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "5d351adfca06ba0f6589b938d56cc68f0975e3a9", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c0865dfe1c74a0720a2d53d3e2f5aa6fdfde852a/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0865dfe1c74a0720a2d53d3e2f5aa6fdfde852a/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=c0865dfe1c74a0720a2d53d3e2f5aa6fdfde852a", "patch": "@@ -78,12 +78,12 @@\n //! use std::cell::RefCell;\n //!\n //! struct Graph {\n-//!     edges: Vec<(uint, uint)>,\n-//!     span_tree_cache: RefCell<Option<Vec<(uint, uint)>>>\n+//!     edges: Vec<(i32, i32)>,\n+//!     span_tree_cache: RefCell<Option<Vec<(i32, i32)>>>\n //! }\n //!\n //! impl Graph {\n-//!     fn minimum_spanning_tree(&self) -> Vec<(uint, uint)> {\n+//!     fn minimum_spanning_tree(&self) -> Vec<(i32, i32)> {\n //!         // Create a new scope to contain the lifetime of the\n //!         // dynamic borrow\n //!         {\n@@ -104,7 +104,7 @@\n //!         // This is the major hazard of using `RefCell`.\n //!         self.minimum_spanning_tree()\n //!     }\n-//! #   fn calc_span_tree(&self) -> Vec<(uint, uint)> { vec![] }\n+//! #   fn calc_span_tree(&self) -> Vec<(i32, i32)> { vec![] }\n //! }\n //! ```\n //!\n@@ -125,7 +125,7 @@\n //!\n //! struct RcBox<T> {\n //!     value: T,\n-//!     refcount: Cell<uint>\n+//!     refcount: Cell<usize>\n //! }\n //!\n //! impl<T> Clone for Rc<T> {\n@@ -279,8 +279,8 @@ pub enum BorrowState {\n }\n \n // Values [1, MAX-1] represent the number of `Ref` active\n-// (will not outgrow its range since `uint` is the size of the address space)\n-type BorrowFlag = uint;\n+// (will not outgrow its range since `usize` is the size of the address space)\n+type BorrowFlag = usize;\n const UNUSED: BorrowFlag = 0;\n const WRITING: BorrowFlag = -1;\n "}, {"sha": "740997b7a249d5a6fcdf472c2e5c277f472a0327", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c0865dfe1c74a0720a2d53d3e2f5aa6fdfde852a/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0865dfe1c74a0720a2d53d3e2f5aa6fdfde852a/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=c0865dfe1c74a0720a2d53d3e2f5aa6fdfde852a", "patch": "@@ -43,7 +43,7 @@ pub use intrinsics::forget;\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn size_of<T>() -> uint {\n+pub fn size_of<T>() -> usize {\n     unsafe { intrinsics::size_of::<T>() }\n }\n \n@@ -58,7 +58,7 @@ pub fn size_of<T>() -> uint {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn size_of_val<T>(_val: &T) -> uint {\n+pub fn size_of_val<T>(_val: &T) -> usize {\n     size_of::<T>()\n }\n \n@@ -75,7 +75,7 @@ pub fn size_of_val<T>(_val: &T) -> uint {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn min_align_of<T>() -> uint {\n+pub fn min_align_of<T>() -> usize {\n     unsafe { intrinsics::min_align_of::<T>() }\n }\n \n@@ -90,7 +90,7 @@ pub fn min_align_of<T>() -> uint {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn min_align_of_val<T>(_val: &T) -> uint {\n+pub fn min_align_of_val<T>(_val: &T) -> usize {\n     min_align_of::<T>()\n }\n \n@@ -108,7 +108,7 @@ pub fn min_align_of_val<T>(_val: &T) -> uint {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn align_of<T>() -> uint {\n+pub fn align_of<T>() -> usize {\n     // We use the preferred alignment as the default alignment for a type. This\n     // appears to be what clang migrated towards as well:\n     //\n@@ -130,7 +130,7 @@ pub fn align_of<T>() -> uint {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn align_of_val<T>(_val: &T) -> uint {\n+pub fn align_of_val<T>(_val: &T) -> usize {\n     align_of::<T>()\n }\n \n@@ -150,7 +150,7 @@ pub fn align_of_val<T>(_val: &T) -> uint {\n /// ```\n /// use std::mem;\n ///\n-/// let x: int = unsafe { mem::zeroed() };\n+/// let x: i32 = unsafe { mem::zeroed() };\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -171,7 +171,7 @@ pub unsafe fn zeroed<T>() -> T {\n /// ```\n /// use std::mem;\n ///\n-/// let x: int = unsafe { mem::uninitialized() };\n+/// let x: i32 = unsafe { mem::uninitialized() };\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "5644f76306929e0fbfe7a531058e679bb12a9fb3", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0865dfe1c74a0720a2d53d3e2f5aa6fdfde852a/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0865dfe1c74a0720a2d53d3e2f5aa6fdfde852a/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=c0865dfe1c74a0720a2d53d3e2f5aa6fdfde852a", "patch": "@@ -19,8 +19,8 @@ pub unsafe trait Zeroable {}\n unsafe impl<T> Zeroable for *const T {}\n unsafe impl<T> Zeroable for *mut T {}\n unsafe impl<T> Zeroable for Unique<T> { }\n-unsafe impl Zeroable for int {}\n-unsafe impl Zeroable for uint {}\n+unsafe impl Zeroable for isize {}\n+unsafe impl Zeroable for usize {}\n unsafe impl Zeroable for i8 {}\n unsafe impl Zeroable for u8 {}\n unsafe impl Zeroable for i16 {}"}]}