{"sha": "d8c87ac080a67327eaaefc336733bc3e5f937448", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4Yzg3YWMwODBhNjczMjdlYWFlZmMzMzY3MzNiYzNlNWY5Mzc0NDg=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-10-27T17:43:49Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-08T16:53:38Z"}, "message": "Use a field for is_eval_always.", "tree": {"sha": "9eea81713e99a2c7c5e4055cc3b21961a302df5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9eea81713e99a2c7c5e4055cc3b21961a302df5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8c87ac080a67327eaaefc336733bc3e5f937448", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8c87ac080a67327eaaefc336733bc3e5f937448", "html_url": "https://github.com/rust-lang/rust/commit/d8c87ac080a67327eaaefc336733bc3e5f937448", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8c87ac080a67327eaaefc336733bc3e5f937448/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24f0b957e75a314eff99e11103399d5b54629294", "url": "https://api.github.com/repos/rust-lang/rust/commits/24f0b957e75a314eff99e11103399d5b54629294", "html_url": "https://github.com/rust-lang/rust/commit/24f0b957e75a314eff99e11103399d5b54629294"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "848c8b8ea9cbcc08a1d83afb360e945a2f992c21", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d8c87ac080a67327eaaefc336733bc3e5f937448/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8c87ac080a67327eaaefc336733bc3e5f937448/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=d8c87ac080a67327eaaefc336733bc3e5f937448", "patch": "@@ -80,6 +80,11 @@ pub struct DepKindStruct {\n     /// When their result is needed, it is recomputed. They are useful for fine-grained\n     /// dependency tracking, and caching within one compiler invocation.\n     pub(super) is_anon: bool,\n+\n+    /// Eval-always queries do not track their dependencies, and are always recomputed, even if\n+    /// their inputs have not changed since the last compiler invocation. The result is still\n+    /// cached within one compiler invocation.\n+    pub(super) is_eval_always: bool,\n }\n \n impl std::ops::Deref for DepKind {\n@@ -127,14 +132,15 @@ pub mod dep_kind {\n     use super::*;\n \n     // We use this for most things when incr. comp. is turned off.\n-    pub const Null: DepKindStruct = DepKindStruct { is_anon: false };\n+    pub const Null: DepKindStruct = DepKindStruct { is_anon: false, is_eval_always: false };\n \n     // Represents metadata from an extern crate.\n-    pub const CrateMetadata: DepKindStruct = DepKindStruct { is_anon: false };\n+    pub const CrateMetadata: DepKindStruct = DepKindStruct { is_anon: false, is_eval_always: true };\n \n-    pub const TraitSelect: DepKindStruct = DepKindStruct { is_anon: true };\n+    pub const TraitSelect: DepKindStruct = DepKindStruct { is_anon: true, is_eval_always: false };\n \n-    pub const CompileCodegenUnit: DepKindStruct = DepKindStruct { is_anon: false };\n+    pub const CompileCodegenUnit: DepKindStruct =\n+        DepKindStruct { is_anon: false, is_eval_always: false };\n \n     macro_rules! define_query_dep_kinds {\n         ($(\n@@ -143,9 +149,11 @@ pub mod dep_kind {\n         ,)*) => (\n             $(pub const $variant: DepKindStruct = {\n                 const is_anon: bool = contains_anon_attr!($($attrs)*);\n+                const is_eval_always: bool = contains_eval_always_attr!($($attrs)*);\n \n                 DepKindStruct {\n                     is_anon,\n+                    is_eval_always,\n                 }\n             };)*\n         );\n@@ -192,14 +200,6 @@ macro_rules! define_dep_nodes {\n                 }\n             }\n \n-            pub fn is_eval_always(&self) -> bool {\n-                match *self {\n-                    $(\n-                        DepKind :: $variant => { contains_eval_always_attr!($($attrs)*) }\n-                    )*\n-                }\n-            }\n-\n             #[allow(unreachable_code)]\n             pub fn has_params(&self) -> bool {\n                 match *self {"}, {"sha": "b81b5b3ede107860e7f99f0383a332471ed35a98", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d8c87ac080a67327eaaefc336733bc3e5f937448/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8c87ac080a67327eaaefc336733bc3e5f937448/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=d8c87ac080a67327eaaefc336733bc3e5f937448", "patch": "@@ -26,8 +26,9 @@ pub type SerializedDepGraph = rustc_query_system::dep_graph::SerializedDepGraph<\n impl rustc_query_system::dep_graph::DepKind for DepKind {\n     const NULL: Self = DepKind::Null;\n \n+    #[inline(always)]\n     fn is_eval_always(&self) -> bool {\n-        DepKind::is_eval_always(self)\n+        self.is_eval_always\n     }\n \n     fn has_params(&self) -> bool {"}]}