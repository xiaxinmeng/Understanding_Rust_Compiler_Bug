{"sha": "c87996a8ada9be5373cb069b20351a18ef74f226", "node_id": "C_kwDOAAsO6NoAKGM4Nzk5NmE4YWRhOWJlNTM3M2NiMDY5YjIwMzUxYTE4ZWY3NGYyMjY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-26T14:02:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-26T14:02:22Z"}, "message": "Rollup merge of #107322 - JakobDegen:custom-mir, r=tmiasko\n\nCustom mir: Add support for some remaining, easy to support constructs\n\nSome documentation for previous changes and support for `Deinit`, checked binops, len, and array repetition\n\nr? ```@oli-obk``` or ```@tmiasko```", "tree": {"sha": "2d3d078a13d1c4b2d2d94e3143e230c3f1936c53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d3d078a13d1c4b2d2d94e3143e230c3f1936c53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c87996a8ada9be5373cb069b20351a18ef74f226", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj0ofuCRBK7hj4Ov3rIwAAfv8IAA+gnMXoc/m1XAISOUWz0aND\nJdVIRB7r492+fCXMEJ9vOyUjURz7aL71bhgsCXu7rWDCR90kYTogyUH3YhkL3ZA9\njlRqw6F/TZ1xuVMGw1OKsXVW3eZjo40pYSl9nluDa5ABFQrYfRUdEqEeVox7nX/5\n/VMuGwmaB1gNCJFOyu/6YBhxFxen2VQ5NR3dhYM15LgyPwCaN6qn/TXhkXhL4KJO\nJXR+IwNHHCQ62Bycq/b7IAOuW8iXF479Qu/0xtOUJAI8ONHafdnHulsQ/WWFC5Pr\ntiRBpEu9VRLas8ppmdoehBoBqWIfofNe+vvc4XP4nGkNJx0lLmFhy9itcaKm0qI=\n=WToZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 2d3d078a13d1c4b2d2d94e3143e230c3f1936c53\nparent 82455a799ec408798811d951b9ceb45bdfe57753\nparent d7f59e91e09037c3a0b6721f4f50081ee15e405a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674741742 +0100\ncommitter GitHub <noreply@github.com> 1674741742 +0100\n\nRollup merge of #107322 - JakobDegen:custom-mir, r=tmiasko\n\nCustom mir: Add support for some remaining, easy to support constructs\n\nSome documentation for previous changes and support for `Deinit`, checked binops, len, and array repetition\n\nr? ```@oli-obk``` or ```@tmiasko```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c87996a8ada9be5373cb069b20351a18ef74f226", "html_url": "https://github.com/rust-lang/rust/commit/c87996a8ada9be5373cb069b20351a18ef74f226", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c87996a8ada9be5373cb069b20351a18ef74f226/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82455a799ec408798811d951b9ceb45bdfe57753", "url": "https://api.github.com/repos/rust-lang/rust/commits/82455a799ec408798811d951b9ceb45bdfe57753", "html_url": "https://github.com/rust-lang/rust/commit/82455a799ec408798811d951b9ceb45bdfe57753"}, {"sha": "d7f59e91e09037c3a0b6721f4f50081ee15e405a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7f59e91e09037c3a0b6721f4f50081ee15e405a", "html_url": "https://github.com/rust-lang/rust/commit/d7f59e91e09037c3a0b6721f4f50081ee15e405a"}], "stats": {"total": 74, "additions": 68, "deletions": 6}, "files": [{"sha": "dbba529aef7a5ea6adbf1959bd923111b42db8fd", "filename": "compiler/rustc_mir_build/src/build/custom/parse/instruction.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c87996a8ada9be5373cb069b20351a18ef74f226/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87996a8ada9be5373cb069b20351a18ef74f226/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs?ref=c87996a8ada9be5373cb069b20351a18ef74f226", "patch": "@@ -18,6 +18,9 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n             @call(\"mir_storage_dead\", args) => {\n                 Ok(StatementKind::StorageDead(self.parse_local(args[0])?))\n             },\n+            @call(\"mir_deinit\", args) => {\n+                Ok(StatementKind::Deinit(Box::new(self.parse_place(args[0])?)))\n+            },\n             @call(\"mir_retag\", args) => {\n                 Ok(StatementKind::Retag(RetagKind::Default, Box::new(self.parse_place(args[0])?)))\n             },\n@@ -141,6 +144,14 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n     fn parse_rvalue(&self, expr_id: ExprId) -> PResult<Rvalue<'tcx>> {\n         parse_by_kind!(self, expr_id, _, \"rvalue\",\n             @call(\"mir_discriminant\", args) => self.parse_place(args[0]).map(Rvalue::Discriminant),\n+            @call(\"mir_checked\", args) => {\n+                parse_by_kind!(self, args[0], _, \"binary op\",\n+                    ExprKind::Binary { op, lhs, rhs } => Ok(Rvalue::CheckedBinaryOp(\n+                        *op, Box::new((self.parse_operand(*lhs)?, self.parse_operand(*rhs)?))\n+                    )),\n+                )\n+            },\n+            @call(\"mir_len\", args) => Ok(Rvalue::Len(self.parse_place(args[0])?)),\n             ExprKind::Borrow { borrow_kind, arg } => Ok(\n                 Rvalue::Ref(self.tcx.lifetimes.re_erased, *borrow_kind, self.parse_place(*arg)?)\n             ),\n@@ -153,6 +164,9 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n             ExprKind::Unary { op, arg } => Ok(\n                 Rvalue::UnaryOp(*op, self.parse_operand(*arg)?)\n             ),\n+            ExprKind::Repeat { value, count } => Ok(\n+                Rvalue::Repeat(self.parse_operand(*value)?, *count)\n+            ),\n             _ => self.parse_operand(expr_id).map(Rvalue::Use),\n         )\n     }"}, {"sha": "3d7ccffa1735c97f5f54666aad381d06a22b5043", "filename": "library/core/src/intrinsics/mir.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c87996a8ada9be5373cb069b20351a18ef74f226/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87996a8ada9be5373cb069b20351a18ef74f226/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs?ref=c87996a8ada9be5373cb069b20351a18ef74f226", "patch": "@@ -211,13 +211,16 @@\n //!\n //! #### Statements\n //!  - Assign statements work via normal Rust assignment.\n-//!  - [`Retag`] statements have an associated function.\n+//!  - [`Retag`], [`StorageLive`], [`StorageDead`], [`Deinit`] statements have an associated function.\n //!\n //! #### Rvalues\n //!\n //!  - Operands implicitly convert to `Use` rvalues.\n //!  - `&`, `&mut`, `addr_of!`, and `addr_of_mut!` all work to create their associated rvalue.\n-//!  - [`Discriminant`] has an associated function.\n+//!  - [`Discriminant`] and [`Len`] have associated functions.\n+//!  - Unary and binary operations use their normal Rust syntax - `a * b`, `!c`, etc.\n+//!  - Checked binary operations are represented by wrapping the associated binop in [`Checked`].\n+//!  - Array repetition syntax (`[foo; 10]`) creates the associated rvalue.\n //!\n //! #### Terminators\n //!\n@@ -261,6 +264,9 @@ define!(\"mir_drop_and_replace\", fn DropAndReplace<T>(place: T, value: T, goto: B\n define!(\"mir_call\", fn Call<T>(place: T, goto: BasicBlock, call: T));\n define!(\"mir_storage_live\", fn StorageLive<T>(local: T));\n define!(\"mir_storage_dead\", fn StorageDead<T>(local: T));\n+define!(\"mir_deinit\", fn Deinit<T>(place: T));\n+define!(\"mir_checked\", fn Checked<T>(binop: T) -> (T, bool));\n+define!(\"mir_len\", fn Len<T>(place: T) -> usize);\n define!(\"mir_retag\", fn Retag<T>(place: T));\n define!(\"mir_move\", fn Move<T>(place: T) -> T);\n define!(\"mir_static\", fn Static<T>(s: T) -> &'static T);"}, {"sha": "4c9212728859667b11e4ecb3ff2e0bf7b01051c4", "filename": "tests/mir-opt/building/custom/arrays.arrays.built.after.mir", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c87996a8ada9be5373cb069b20351a18ef74f226/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Farrays.arrays.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c87996a8ada9be5373cb069b20351a18ef74f226/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Farrays.arrays.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Farrays.arrays.built.after.mir?ref=c87996a8ada9be5373cb069b20351a18ef74f226", "patch": "@@ -0,0 +1,14 @@\n+// MIR for `arrays` after built\n+\n+fn arrays() -> usize {\n+    let mut _0: usize;                   // return place in scope 0 at $DIR/arrays.rs:+0:32: +0:37\n+    let mut _1: [i32; C];                // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+    let mut _2: usize;                   // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+\n+    bb0: {\n+        _1 = [const 5_i32; C];           // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+        _2 = Len(_1);                    // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+        _0 = _2;                         // scope 0 at $DIR/arrays.rs:+4:9: +4:16\n+        return;                          // scope 0 at $DIR/arrays.rs:+5:9: +5:17\n+    }\n+}"}, {"sha": "8e0a1fd7a4390bf87fb2fa38303088c080f83d06", "filename": "tests/mir-opt/building/custom/arrays.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c87996a8ada9be5373cb069b20351a18ef74f226/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Farrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87996a8ada9be5373cb069b20351a18ef74f226/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Farrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Farrays.rs?ref=c87996a8ada9be5373cb069b20351a18ef74f226", "patch": "@@ -0,0 +1,19 @@\n+#![feature(custom_mir, core_intrinsics, inline_const)]\n+\n+extern crate core;\n+use core::intrinsics::mir::*;\n+\n+// EMIT_MIR arrays.arrays.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+fn arrays<const C: usize>() -> usize {\n+    mir!({\n+        let x = [5_i32; C];\n+        let c = Len(x);\n+        RET = c;\n+        Return()\n+    })\n+}\n+\n+fn main() {\n+    assert_eq!(arrays::<20>(), 20);\n+}"}, {"sha": "eca5b792ec0a26ebaae0c0d4c1e07d2a2742b726", "filename": "tests/mir-opt/building/custom/enums.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c87996a8ada9be5373cb069b20351a18ef74f226/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87996a8ada9be5373cb069b20351a18ef74f226/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.rs?ref=c87996a8ada9be5373cb069b20351a18ef74f226", "patch": "@@ -86,6 +86,7 @@ fn switch_option_repr(option: Bool) -> bool {\n #[custom_mir(dialect = \"runtime\", phase = \"initial\")]\n fn set_discr(option: &mut Option<()>) {\n     mir!({\n+        Deinit(*option);\n         SetDiscriminant(*option, 0);\n         Return()\n     })"}, {"sha": "6d07473658acefad878248a707c740c5ec7eb577", "filename": "tests/mir-opt/building/custom/enums.set_discr.built.after.mir", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c87996a8ada9be5373cb069b20351a18ef74f226/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.set_discr.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c87996a8ada9be5373cb069b20351a18ef74f226/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.set_discr.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fenums.set_discr.built.after.mir?ref=c87996a8ada9be5373cb069b20351a18ef74f226", "patch": "@@ -4,7 +4,8 @@ fn set_discr(_1: &mut Option<()>) -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/enums.rs:+0:39: +0:39\n \n     bb0: {\n-        discriminant((*_1)) = 0;         // scope 0 at $DIR/enums.rs:+2:9: +2:36\n-        return;                          // scope 0 at $DIR/enums.rs:+3:9: +3:17\n+        Deinit((*_1));                   // scope 0 at $DIR/enums.rs:+2:9: +2:24\n+        discriminant((*_1)) = 0;         // scope 0 at $DIR/enums.rs:+3:9: +3:36\n+        return;                          // scope 0 at $DIR/enums.rs:+4:9: +4:17\n     }\n }"}, {"sha": "cb43d5e6ed7c7e888c854bb4edffeabc101b9051", "filename": "tests/mir-opt/building/custom/operators.f.built.after.mir", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c87996a8ada9be5373cb069b20351a18ef74f226/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Foperators.f.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c87996a8ada9be5373cb069b20351a18ef74f226/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Foperators.f.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Foperators.f.built.after.mir?ref=c87996a8ada9be5373cb069b20351a18ef74f226", "patch": "@@ -2,6 +2,7 @@\n \n fn f(_1: i32, _2: bool) -> i32 {\n     let mut _0: i32;                     // return place in scope 0 at $DIR/operators.rs:+0:30: +0:33\n+    let mut _3: (i32, bool);             // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n \n     bb0: {\n         _1 = Neg(_1);                    // scope 0 at $DIR/operators.rs:+2:9: +2:15\n@@ -20,7 +21,10 @@ fn f(_1: i32, _2: bool) -> i32 {\n         _2 = Le(_1, _1);                 // scope 0 at $DIR/operators.rs:+15:9: +15:19\n         _2 = Ge(_1, _1);                 // scope 0 at $DIR/operators.rs:+16:9: +16:19\n         _2 = Gt(_1, _1);                 // scope 0 at $DIR/operators.rs:+17:9: +17:18\n-        _0 = _1;                         // scope 0 at $DIR/operators.rs:+18:9: +18:16\n-        return;                          // scope 0 at $DIR/operators.rs:+19:9: +19:17\n+        _3 = CheckedAdd(_1, _1);         // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+        _2 = (_3.1: bool);               // scope 0 at $DIR/operators.rs:+19:9: +19:18\n+        _1 = (_3.0: i32);                // scope 0 at $DIR/operators.rs:+20:9: +20:18\n+        _0 = _1;                         // scope 0 at $DIR/operators.rs:+21:9: +21:16\n+        return;                          // scope 0 at $DIR/operators.rs:+22:9: +22:17\n     }\n }"}, {"sha": "db7a48317d9284896ee36f3148e08e4acaa5881f", "filename": "tests/mir-opt/building/custom/operators.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c87996a8ada9be5373cb069b20351a18ef74f226/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Foperators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87996a8ada9be5373cb069b20351a18ef74f226/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Foperators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Foperators.rs?ref=c87996a8ada9be5373cb069b20351a18ef74f226", "patch": "@@ -22,6 +22,9 @@ pub fn f(a: i32, b: bool) -> i32 {\n         b = a <= a;\n         b = a >= a;\n         b = a > a;\n+        let res = Checked(a + a);\n+        b = res.1;\n+        a = res.0;\n         RET = a;\n         Return()\n     })"}]}