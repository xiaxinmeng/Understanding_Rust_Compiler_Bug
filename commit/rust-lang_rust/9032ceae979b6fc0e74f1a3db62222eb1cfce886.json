{"sha": "9032ceae979b6fc0e74f1a3db62222eb1cfce886", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMzJjZWFlOTc5YjZmYzBlNzRmMWEzZGI2MjIyMmViMWNmY2U4ODY=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-19T14:18:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-19T14:18:13Z"}, "message": "Rollup merge of #40445 - estebank:issue-18150, r=jonathandturner\n\nPoint to let when modifying field of immutable variable\n\nPoint at the immutable local variable when trying to modify one of its\nfields.\n\nGiven a file:\n\n```rust\nstruct Foo {\n    pub v: Vec<String>\n}\n\nfn main() {\n    let f = Foo { v: Vec::new() };\n    f.v.push(\"cat\".to_string());\n}\n```\n\npresent the following output:\n\n```\nerror: cannot borrow immutable field `f.v` as mutable\n --> file.rs:7:13\n  |\n6 |    let f = Foo { v: Vec::new() };\n  |        - this should be `mut`\n7 |    f.v.push(\"cat\".to_string());\n  |    ^^^\n\nerror: aborting due to previous error\n```\n\nFix #27593.", "tree": {"sha": "9bfc0191a6c1e885360dacaa32f1c01e4e9f42f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bfc0191a6c1e885360dacaa32f1c01e4e9f42f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9032ceae979b6fc0e74f1a3db62222eb1cfce886", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9032ceae979b6fc0e74f1a3db62222eb1cfce886", "html_url": "https://github.com/rust-lang/rust/commit/9032ceae979b6fc0e74f1a3db62222eb1cfce886", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9032ceae979b6fc0e74f1a3db62222eb1cfce886/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b686ce4caa65efb96a9a00062d7d408f6d475cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b686ce4caa65efb96a9a00062d7d408f6d475cd", "html_url": "https://github.com/rust-lang/rust/commit/7b686ce4caa65efb96a9a00062d7d408f6d475cd"}, {"sha": "9ac628d5e84bd3664e41d53bafa3d66b303b19c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ac628d5e84bd3664e41d53bafa3d66b303b19c1", "html_url": "https://github.com/rust-lang/rust/commit/9ac628d5e84bd3664e41d53bafa3d66b303b19c1"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "0cf53826dd4274998190b0e26c2a290f24553129", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9032ceae979b6fc0e74f1a3db62222eb1cfce886/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9032ceae979b6fc0e74f1a3db62222eb1cfce886/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=9032ceae979b6fc0e74f1a3db62222eb1cfce886", "patch": "@@ -195,6 +195,21 @@ pub struct cmt_<'tcx> {\n pub type cmt<'tcx> = Rc<cmt_<'tcx>>;\n \n impl<'tcx> cmt_<'tcx> {\n+    pub fn get_def(&self) -> Option<ast::NodeId> {\n+        match self.cat {\n+            Categorization::Deref(ref cmt, ..) |\n+            Categorization::Interior(ref cmt, _) |\n+            Categorization::Downcast(ref cmt, _) => {\n+                if let Categorization::Local(nid) = cmt.cat {\n+                    Some(nid)\n+                } else {\n+                    None\n+                }\n+            }\n+            _ => None\n+        }\n+    }\n+\n     pub fn get_field(&self, name: ast::Name) -> Option<DefId> {\n         match self.cat {\n             Categorization::Deref(ref cmt, ..) |"}, {"sha": "20d495976b05f47a8c1ece2b23566775f8fee3bd", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9032ceae979b6fc0e74f1a3db62222eb1cfce886/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9032ceae979b6fc0e74f1a3db62222eb1cfce886/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=9032ceae979b6fc0e74f1a3db62222eb1cfce886", "patch": "@@ -662,6 +662,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n     pub fn bckerr_to_diag(&self, err: &BckError<'tcx>) -> DiagnosticBuilder<'a> {\n         let span = err.span.clone();\n         let mut immutable_field = None;\n+        let mut local_def = None;\n \n         let msg = &match err.code {\n             err_mutbl => {\n@@ -711,6 +712,14 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                 }\n                                 None\n                             });\n+                        local_def = err.cmt.get_def()\n+                            .and_then(|nid| {\n+                                if !self.tcx.hir.is_argument(nid) {\n+                                    Some(self.tcx.hir.span(nid))\n+                                } else {\n+                                    None\n+                                }\n+                            });\n \n                         format!(\"cannot borrow {} as mutable\", descr)\n                     }\n@@ -741,6 +750,11 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         if let Some((span, msg)) = immutable_field {\n             db.span_label(span, &msg);\n         }\n+        if let Some(let_span) = local_def {\n+            if let Ok(snippet) = self.tcx.sess.codemap().span_to_snippet(let_span) {\n+                db.span_label(let_span, &format!(\"consider changing this to `mut {}`\", snippet));\n+            }\n+        }\n         db\n     }\n \n@@ -1109,6 +1123,11 @@ before rustc 1.16, this temporary lived longer - see issue #39283 \\\n                     } else {\n                         db.span_label(*error_span, &format!(\"cannot borrow mutably\"));\n                     }\n+                } else if let Categorization::Interior(ref cmt, _) = err.cmt.cat {\n+                    if let mc::MutabilityCategory::McImmutable = cmt.mutbl {\n+                        db.span_label(*error_span,\n+                                      &\"cannot mutably borrow immutable field\");\n+                    }\n                 }\n             }\n         }"}, {"sha": "7f124e6d34d354e0161ec23143d3b28050524409", "filename": "src/test/ui/did_you_mean/issue-39544.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9032ceae979b6fc0e74f1a3db62222eb1cfce886/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9032ceae979b6fc0e74f1a3db62222eb1cfce886/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr?ref=9032ceae979b6fc0e74f1a3db62222eb1cfce886", "patch": "@@ -1,8 +1,10 @@\n error: cannot borrow immutable field `z.x` as mutable\n   --> $DIR/issue-39544.rs:21:18\n    |\n+20 |     let z = Z { x: X::Y };\n+   |         - consider changing this to `mut z`\n 21 |     let _ = &mut z.x;\n-   |                  ^^^\n+   |                  ^^^ cannot mutably borrow immutable field\n \n error: aborting due to previous error\n "}]}