{"sha": "2f355b79ddb49c45fb3396352f464458ad867234", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMzU1Yjc5ZGRiNDljNDVmYjMzOTYzNTJmNDY0NDU4YWQ4NjcyMzQ=", "commit": {"author": {"name": "Piotr Jawniak", "email": "sawyer47@gmail.com", "date": "2014-07-03T09:42:24Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-03T19:54:52Z"}, "message": "Simplify creating a parser from a token tree\n\nCloses #15306", "tree": {"sha": "78f9a16d24171326b08c22b354077b06a92e46ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78f9a16d24171326b08c22b354077b06a92e46ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f355b79ddb49c45fb3396352f464458ad867234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f355b79ddb49c45fb3396352f464458ad867234", "html_url": "https://github.com/rust-lang/rust/commit/2f355b79ddb49c45fb3396352f464458ad867234", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f355b79ddb49c45fb3396352f464458ad867234/comments", "author": {"login": "Sawyer47", "id": 1534302, "node_id": "MDQ6VXNlcjE1MzQzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1534302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sawyer47", "html_url": "https://github.com/Sawyer47", "followers_url": "https://api.github.com/users/Sawyer47/followers", "following_url": "https://api.github.com/users/Sawyer47/following{/other_user}", "gists_url": "https://api.github.com/users/Sawyer47/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sawyer47/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sawyer47/subscriptions", "organizations_url": "https://api.github.com/users/Sawyer47/orgs", "repos_url": "https://api.github.com/users/Sawyer47/repos", "events_url": "https://api.github.com/users/Sawyer47/events{/privacy}", "received_events_url": "https://api.github.com/users/Sawyer47/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a6fcc51a063a49c1b7a330828c857849d1e3119", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a6fcc51a063a49c1b7a330828c857849d1e3119", "html_url": "https://github.com/rust-lang/rust/commit/4a6fcc51a063a49c1b7a330828c857849d1e3119"}], "stats": {"total": 60, "additions": 14, "deletions": 46}, "files": [{"sha": "848509cbab27883f21b589bd8c91660c43a60e06", "filename": "src/libfourcc/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2f355b79ddb49c45fb3396352f464458ad867234/src%2Flibfourcc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f355b79ddb49c45fb3396352f464458ad867234/src%2Flibfourcc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfourcc%2Flib.rs?ref=2f355b79ddb49c45fb3396352f464458ad867234", "patch": "@@ -59,7 +59,6 @@ use syntax::codemap::{Span, mk_sp};\n use syntax::ext::base;\n use syntax::ext::base::{ExtCtxt, MacExpr};\n use syntax::ext::build::AstBuilder;\n-use syntax::parse;\n use syntax::parse::token;\n use syntax::parse::token::InternedString;\n use rustc::plugin::Registry;\n@@ -135,11 +134,7 @@ struct Ident {\n \n fn parse_tts(cx: &ExtCtxt,\n              tts: &[ast::TokenTree]) -> (Gc<ast::Expr>, Option<Ident>) {\n-    let p = &mut parse::new_parser_from_tts(cx.parse_sess(),\n-                                            cx.cfg(),\n-                                            tts.iter()\n-                                               .map(|x| (*x).clone())\n-                                               .collect());\n+    let p = &mut cx.new_parser_from_tts(tts);\n     let ex = p.parse_expr();\n     let id = if p.token == token::EOF {\n         None"}, {"sha": "369de484e8e84059d11b9517e48dc5724c81da9b", "filename": "src/libhexfloat/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2f355b79ddb49c45fb3396352f464458ad867234/src%2Flibhexfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f355b79ddb49c45fb3396352f464458ad867234/src%2Flibhexfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibhexfloat%2Flib.rs?ref=2f355b79ddb49c45fb3396352f464458ad867234", "patch": "@@ -54,7 +54,6 @@ use syntax::codemap::{Span, mk_sp};\n use syntax::ext::base;\n use syntax::ext::base::{ExtCtxt, MacExpr};\n use syntax::ext::build::AstBuilder;\n-use syntax::parse;\n use syntax::parse::token;\n use rustc::plugin::Registry;\n \n@@ -167,11 +166,7 @@ struct Ident {\n \n fn parse_tts(cx: &ExtCtxt,\n              tts: &[ast::TokenTree]) -> (Gc<ast::Expr>, Option<Ident>) {\n-    let p = &mut parse::new_parser_from_tts(cx.parse_sess(),\n-                                            cx.cfg(),\n-                                            tts.iter()\n-                                               .map(|x| (*x).clone())\n-                                               .collect());\n+    let p = &mut cx.new_parser_from_tts(tts);\n     let ex = p.parse_expr();\n     let id = if p.token == token::EOF {\n         None"}, {"sha": "4108388e7766979df1df4e8a06e095d89d31e771", "filename": "src/libregex_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f355b79ddb49c45fb3396352f464458ad867234/src%2Flibregex_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f355b79ddb49c45fb3396352f464458ad867234/src%2Flibregex_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex_macros%2Flib.rs?ref=2f355b79ddb49c45fb3396352f464458ad867234", "patch": "@@ -32,7 +32,6 @@ use syntax::ast;\n use syntax::codemap;\n use syntax::ext::build::AstBuilder;\n use syntax::ext::base::{ExtCtxt, MacResult, MacExpr, DummyResult};\n-use syntax::parse;\n use syntax::parse::token;\n use syntax::print::pprust;\n \n@@ -615,8 +614,7 @@ fn exec<'t>(which: ::regex::native::MatchKind, input: &'t str,\n /// Looks for a single string literal and returns it.\n /// Otherwise, logs an error with cx.span_err and returns None.\n fn parse(cx: &mut ExtCtxt, tts: &[ast::TokenTree]) -> Option<String> {\n-    let mut parser = parse::new_parser_from_tts(cx.parse_sess(), cx.cfg(),\n-                                                Vec::from_slice(tts));\n+    let mut parser = cx.new_parser_from_tts(tts);\n     let entry = cx.expand_expr(parser.parse_expr());\n     let regex = match entry.node {\n         ast::ExprLit(lit) => {"}, {"sha": "f0494e181201375096c9e0417a84bce1ba43fb07", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f355b79ddb49c45fb3396352f464458ad867234/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f355b79ddb49c45fb3396352f464458ad867234/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=2f355b79ddb49c45fb3396352f464458ad867234", "patch": "@@ -16,7 +16,6 @@ use ast;\n use codemap::Span;\n use ext::base;\n use ext::base::*;\n-use parse;\n use parse::token::InternedString;\n use parse::token;\n \n@@ -48,12 +47,7 @@ static OPTIONS: &'static [&'static str] = &[\"volatile\", \"alignstack\", \"intel\"];\n \n pub fn expand_asm(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                   -> Box<base::MacResult> {\n-    let mut p = parse::new_parser_from_tts(cx.parse_sess(),\n-                                           cx.cfg(),\n-                                           tts.iter()\n-                                              .map(|x| (*x).clone())\n-                                              .collect());\n-\n+    let mut p = cx.new_parser_from_tts(tts);\n     let mut asm = InternedString::new(\"\");\n     let mut asm_str_style = None;\n     let mut outputs = Vec::new();"}, {"sha": "d2e69204d333cb5cb0374857bdf9c456a0d22492", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2f355b79ddb49c45fb3396352f464458ad867234/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f355b79ddb49c45fb3396352f464458ad867234/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=2f355b79ddb49c45fb3396352f464458ad867234", "patch": "@@ -15,6 +15,7 @@ use codemap::{CodeMap, Span, ExpnInfo};\n use ext;\n use ext::expand;\n use parse;\n+use parse::parser;\n use parse::token;\n use parse::token::{InternedString, intern, str_to_ident};\n use util::small_vector::SmallVector;\n@@ -433,6 +434,11 @@ impl<'a> ExtCtxt<'a> {\n         }\n     }\n \n+    pub fn new_parser_from_tts(&self, tts: &[ast::TokenTree])\n+        -> parser::Parser<'a> {\n+        parse::tts_to_parser(self.parse_sess, Vec::from_slice(tts), self.cfg())\n+    }\n+\n     pub fn codemap(&self) -> &'a CodeMap { &self.parse_sess.span_diagnostic.cm }\n     pub fn parse_sess(&self) -> &'a parse::ParseSess { self.parse_sess }\n     pub fn cfg(&self) -> ast::CrateConfig { self.cfg.clone() }\n@@ -586,11 +592,7 @@ pub fn get_single_str_from_tts(cx: &ExtCtxt,\n pub fn get_exprs_from_tts(cx: &mut ExtCtxt,\n                           sp: Span,\n                           tts: &[ast::TokenTree]) -> Option<Vec<Gc<ast::Expr>>> {\n-    let mut p = parse::new_parser_from_tts(cx.parse_sess(),\n-                                           cx.cfg(),\n-                                           tts.iter()\n-                                              .map(|x| (*x).clone())\n-                                              .collect());\n+    let mut p = cx.new_parser_from_tts(tts);\n     let mut es = Vec::new();\n     while p.token != token::EOF {\n         es.push(cx.expand_expr(p.parse_expr()));"}, {"sha": "c2930662bc459a31bbb370875ae5a2088dd1171e", "filename": "src/libsyntax/ext/cfg.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f355b79ddb49c45fb3396352f464458ad867234/src%2Flibsyntax%2Fext%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f355b79ddb49c45fb3396352f464458ad867234/src%2Flibsyntax%2Fext%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fcfg.rs?ref=2f355b79ddb49c45fb3396352f464458ad867234", "patch": "@@ -24,17 +24,11 @@ use attr::*;\n use parse::attr::ParserAttr;\n use parse::token::InternedString;\n use parse::token;\n-use parse;\n \n \n pub fn expand_cfg(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                   -> Box<base::MacResult> {\n-    let mut p = parse::new_parser_from_tts(cx.parse_sess(),\n-                                           cx.cfg(),\n-                                           tts.iter()\n-                                              .map(|x| (*x).clone())\n-                                              .collect());\n-\n+    let mut p = cx.new_parser_from_tts(tts);\n     let mut cfgs = Vec::new();\n     // parse `cfg!(meta_item, meta_item(x,y), meta_item=\"foo\", ...)`\n     while p.token != token::EOF {"}, {"sha": "f39e50ad1313f63501394e1a31da42b528c2a396", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2f355b79ddb49c45fb3396352f464458ad867234/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f355b79ddb49c45fb3396352f464458ad867234/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=2f355b79ddb49c45fb3396352f464458ad867234", "patch": "@@ -16,7 +16,6 @@ use ext::base;\n use ext::build::AstBuilder;\n use parse::token::InternedString;\n use parse::token;\n-use rsparse = parse;\n \n use parse = fmt_macros;\n use std::collections::HashMap;\n@@ -81,11 +80,7 @@ fn parse_args(ecx: &mut ExtCtxt, sp: Span, allow_method: bool,\n     let mut names = HashMap::<String, Gc<ast::Expr>>::new();\n     let mut order = Vec::new();\n \n-    let mut p = rsparse::new_parser_from_tts(ecx.parse_sess(),\n-                                             ecx.cfg(),\n-                                             tts.iter()\n-                                                .map(|x| (*x).clone())\n-                                                .collect());\n+    let mut p = ecx.new_parser_from_tts(tts);\n     // Parse the leading function expression (maybe a block, maybe a path)\n     let invocation = if allow_method {\n         let e = p.parse_expr();"}, {"sha": "7b24b97d5da4dd6be7557657bb8019f0ba816103", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2f355b79ddb49c45fb3396352f464458ad867234/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f355b79ddb49c45fb3396352f464458ad867234/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=2f355b79ddb49c45fb3396352f464458ad867234", "patch": "@@ -15,7 +15,6 @@ use ext::base;\n use ext::build::AstBuilder;\n use parse::token::*;\n use parse::token;\n-use parse;\n \n use std::gc::Gc;\n \n@@ -583,11 +582,7 @@ fn expand_tts(cx: &ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n     // it has to do with transition away from supporting old-style macros, so\n     // try removing it when enough of them are gone.\n \n-    let mut p = parse::new_parser_from_tts(cx.parse_sess(),\n-                                           cx.cfg(),\n-                                           tts.iter()\n-                                              .map(|x| (*x).clone())\n-                                              .collect());\n+    let mut p = cx.new_parser_from_tts(tts);\n     p.quote_depth += 1u;\n \n     let cx_expr = p.parse_expr();"}]}