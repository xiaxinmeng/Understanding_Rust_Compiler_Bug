{"sha": "bcaeb2080069b83bc50a537ce7bd14d7521ce65e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjYWViMjA4MDA2OWI4M2JjNTBhNTM3Y2U3YmQxNGQ3NTIxY2U2NWU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-01-23T01:53:27Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-01-23T01:53:27Z"}, "message": "long line police", "tree": {"sha": "7476a462314ae5c048904178f16e55a80c8e4bf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7476a462314ae5c048904178f16e55a80c8e4bf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcaeb2080069b83bc50a537ce7bd14d7521ce65e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcaeb2080069b83bc50a537ce7bd14d7521ce65e", "html_url": "https://github.com/rust-lang/rust/commit/bcaeb2080069b83bc50a537ce7bd14d7521ce65e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcaeb2080069b83bc50a537ce7bd14d7521ce65e/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14d721388b1317eb85dd79210c03e303f9ab95aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/14d721388b1317eb85dd79210c03e303f9ab95aa", "html_url": "https://github.com/rust-lang/rust/commit/14d721388b1317eb85dd79210c03e303f9ab95aa"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "2cb188110feddf7e4e44018a26b7d9c37b39e5ec", "filename": "src/librustc/middle/borrowck/preserve.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bcaeb2080069b83bc50a537ce7bd14d7521ce65e/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcaeb2080069b83bc50a537ce7bd14d7521ce65e/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs?ref=bcaeb2080069b83bc50a537ce7bd14d7521ce65e", "patch": "@@ -358,14 +358,14 @@ priv impl &preserve_ctxt {\n                 debug!(\"Elected to root\");\n                 let rk = {id: base.id, derefs: derefs};\n                 // This code could potentially lead cause boxes to be frozen\n-                // for longer than necessarily at runtime. It prevents an ICE\n-                // in trans; the fundamental problem is that it's hard to make\n-                // sure trans and borrowck have the same notion of scope. The\n-                // real fix is to clean up how trans handles cleanups, but\n-                // that's hard. If this becomes an issue, it's an option to just\n-                // change this to `let scope_to_use = scope_id;`. Though that\n-                // would potentially re-introduce the ICE. See #3511 for more\n-                // details.\n+                // for longer than necessarily at runtime. It prevents an\n+                // ICE in trans; the fundamental problem is that it's hard\n+                // to make sure trans and borrowck have the same notion of\n+                // scope. The real fix is to clean up how trans handles\n+                // cleanups, but that's hard. If this becomes an issue, it's\n+                // an option to just change this to `let scope_to_use =\n+                // scope_id;`. Though that would potentially re-introduce\n+                // the ICE. See #3511 for more details.\n                 let scope_to_use = if\n                     self.bccx.stmt_map.contains_key(scope_id) {\n                     // Root it in its parent scope, b/c"}, {"sha": "11d18706b905cbe475c7fbf38abcbf600e0460c6", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bcaeb2080069b83bc50a537ce7bd14d7521ce65e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcaeb2080069b83bc50a537ce7bd14d7521ce65e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=bcaeb2080069b83bc50a537ce7bd14d7521ce65e", "patch": "@@ -405,7 +405,8 @@ fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n                     assert ast_util::is_local(def_id);\n                     let f = base::get_item_val(cx, def_id.node);\n                     match purity {\n-                      ast::extern_fn => llvm::LLVMConstPointerCast(f, T_ptr(T_i8())),\n+                      ast::extern_fn =>\n+                        llvm::LLVMConstPointerCast(f, T_ptr(T_i8())),\n                       _ => C_struct(~[f, C_null(T_opaque_box_ptr(cx))])\n                     }\n                 }"}]}