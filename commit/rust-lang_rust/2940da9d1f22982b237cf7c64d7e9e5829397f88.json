{"sha": "2940da9d1f22982b237cf7c64d7e9e5829397f88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NDBkYTlkMWYyMjk4MmIyMzdjZjdjNjRkN2U5ZTU4MjkzOTdmODg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-20T09:48:42Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-20T09:48:42Z"}, "message": "bump Rust", "tree": {"sha": "8214850a118aa2030ee6128929579c50cd80089f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8214850a118aa2030ee6128929579c50cd80089f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2940da9d1f22982b237cf7c64d7e9e5829397f88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2940da9d1f22982b237cf7c64d7e9e5829397f88", "html_url": "https://github.com/rust-lang/rust/commit/2940da9d1f22982b237cf7c64d7e9e5829397f88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2940da9d1f22982b237cf7c64d7e9e5829397f88/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "146ee66268bb38a226eb9737d1a595bcb2ac1dbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/146ee66268bb38a226eb9737d1a595bcb2ac1dbd", "html_url": "https://github.com/rust-lang/rust/commit/146ee66268bb38a226eb9737d1a595bcb2ac1dbd"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "f001577e7f0cb190342a7662a6c61021eabc2f2f", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2940da9d1f22982b237cf7c64d7e9e5829397f88/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/2940da9d1f22982b237cf7c64d7e9e5829397f88/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=2940da9d1f22982b237cf7c64d7e9e5829397f88", "patch": "@@ -1 +1 @@\n-ff4a2533a0720f9cdd86e02eafa3725f07aa7752\n+033013cab3a861224fd55f494c8be1cb0349eb49"}, {"sha": "762a70d803a41470041ab22ae4a13a867abc17f2", "filename": "tests/compile-fail/invalid_enum_tag.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2940da9d1f22982b237cf7c64d7e9e5829397f88/tests%2Fcompile-fail%2Finvalid_enum_tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2940da9d1f22982b237cf7c64d7e9e5829397f88/tests%2Fcompile-fail%2Finvalid_enum_tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_enum_tag.rs?ref=2940da9d1f22982b237cf7c64d7e9e5829397f88", "patch": "@@ -2,7 +2,7 @@\n // Make sure we find these even with many checks disabled.\n // compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n \n-// error-pattern: enum value has invalid discriminant: 0x0000002a\n+// error-pattern: enum value has invalid tag: 0x0000002a\n \n use std::mem;\n ", "previous_filename": "tests/compile-fail/invalid_enum_discriminant.rs"}, {"sha": "897bfa90a7029c9d2bf6996d20a6b54747aaefc7", "filename": "tests/compile-fail/validity/invalid_enum_tag.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2940da9d1f22982b237cf7c64d7e9e5829397f88/tests%2Fcompile-fail%2Fvalidity%2Finvalid_enum_tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2940da9d1f22982b237cf7c64d7e9e5829397f88/tests%2Fcompile-fail%2Fvalidity%2Finvalid_enum_tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Finvalid_enum_tag.rs?ref=2940da9d1f22982b237cf7c64d7e9e5829397f88", "patch": "@@ -4,5 +4,5 @@ pub enum Foo {\n }\n \n fn main() {\n-    let _f = unsafe { std::mem::transmute::<i32, Foo>(42) }; //~ ERROR encountered 0x0000002a, but expected a valid enum discriminant\n+    let _f = unsafe { std::mem::transmute::<i32, Foo>(42) }; //~ ERROR encountered 0x0000002a, but expected a valid enum tag\n }", "previous_filename": "tests/compile-fail/validity/invalid_enum_discriminant.rs"}, {"sha": "1d5cf16aa5ea4bb91a6c88e193759aa0f02d0d12", "filename": "tests/compile-fail/validity/transmute_through_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2940da9d1f22982b237cf7c64d7e9e5829397f88/tests%2Fcompile-fail%2Fvalidity%2Ftransmute_through_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2940da9d1f22982b237cf7c64d7e9e5829397f88/tests%2Fcompile-fail%2Fvalidity%2Ftransmute_through_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Ftransmute_through_ptr.rs?ref=2940da9d1f22982b237cf7c64d7e9e5829397f88", "patch": "@@ -3,12 +3,12 @@ enum Bool { True }\n \n fn evil(x: &mut Bool) {\n     let x = x as *mut _ as *mut u32;\n-    unsafe { *x = 44; } // out-of-bounds enum discriminant\n+    unsafe { *x = 44; } // out-of-bounds enum tag\n }\n \n fn main() {\n     let mut x = Bool::True;\n     evil(&mut x);\n     let _y = x; // reading this ought to be enough to trigger validation\n-    //~^ ERROR encountered 0x0000002c, but expected a valid enum discriminant\n+    //~^ ERROR encountered 0x0000002c, but expected a valid enum tag\n }"}, {"sha": "288ae1965a69d2f1e4b560d73fbacd5d66fcc7fa", "filename": "tests/run-pass/panic/catch_panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2940da9d1f22982b237cf7c64d7e9e5829397f88/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2940da9d1f22982b237cf7c64d7e9e5829397f88/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs?ref=2940da9d1f22982b237cf7c64d7e9e5829397f88", "patch": "@@ -1,5 +1,5 @@\n // ignore-windows: Unwind panicking does not currently work on Windows\n-// normalize-stderr-test \"[^ ]*libcore/(macros|mem)/mod.rs[0-9:]*\" -> \"$$LOC\"\n+// normalize-stderr-test \"[^ ]*libcore/[a-z/]+.rs[0-9:]*\" -> \"$$LOC\"\n #![feature(never_type)]\n #![allow(unconditional_panic)]\n use std::panic::{catch_unwind, AssertUnwindSafe};\n@@ -75,7 +75,7 @@ fn main() {\n     // Assertion and debug assertion\n     test(None, |_old_val| { assert!(false); loop {} });\n     test(None, |_old_val| { debug_assert!(false); loop {} });\n-    test(None, |_old_val| { unsafe { (1 as *const i32).read() }; loop {} }); // trigger debug-assertion in libstd\n+    test(None, |_old_val| { unsafe { std::char::from_u32_unchecked(0xFD10000); } loop {} }); // trigger debug-assertion in libstd\n \n     eprintln!(\"Success!\"); // Make sure we get this in stderr\n }"}, {"sha": "f64ff1186619e626a4aabe6e346e7ab9d3b6394f", "filename": "tests/run-pass/panic/catch_panic.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2940da9d1f22982b237cf7c64d7e9e5829397f88/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2940da9d1f22982b237cf7c64d7e9e5829397f88/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr?ref=2940da9d1f22982b237cf7c64d7e9e5829397f88", "patch": "@@ -22,6 +22,6 @@ thread 'main' panicked at 'assertion failed: false', $DIR/catch_panic.rs:76:29\n Caught panic message (&str): assertion failed: false\n thread 'main' panicked at 'assertion failed: false', $DIR/catch_panic.rs:77:29\n Caught panic message (&str): assertion failed: false\n-thread 'main' panicked at 'attempt to copy from unaligned or null pointer', $LOC\n-Caught panic message (String): attempt to copy from unaligned or null pointer\n+thread 'main' panicked at 'called `Option::unwrap()` on a `None` value', $LOC\n+Caught panic message (String): called `Option::unwrap()` on a `None` value\n Success!"}, {"sha": "44cef00a22c36f53d4f92d8042eee830ecc8aed3", "filename": "tests/run-pass/specialization.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2940da9d1f22982b237cf7c64d7e9e5829397f88/tests%2Frun-pass%2Fspecialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2940da9d1f22982b237cf7c64d7e9e5829397f88/tests%2Frun-pass%2Fspecialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fspecialization.rs?ref=2940da9d1f22982b237cf7c64d7e9e5829397f88", "patch": "@@ -1,3 +1,4 @@\n+#![allow(incomplete_features)]\n #![feature(specialization)]\n \n trait IsUnit {"}]}