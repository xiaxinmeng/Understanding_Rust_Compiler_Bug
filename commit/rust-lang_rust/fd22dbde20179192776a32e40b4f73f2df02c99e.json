{"sha": "fd22dbde20179192776a32e40b4f73f2df02c99e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMjJkYmRlMjAxNzkxOTI3NzZhMzJlNDBiNGY3M2YyZGYwMmM5OWU=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-17T21:15:42Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-17T21:15:42Z"}, "message": "Merge #283\n\n283: Docs r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "26011ecbaf6c28ef6202385ece9337f32b4ab260", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26011ecbaf6c28ef6202385ece9337f32b4ab260"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd22dbde20179192776a32e40b4f73f2df02c99e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd22dbde20179192776a32e40b4f73f2df02c99e", "html_url": "https://github.com/rust-lang/rust/commit/fd22dbde20179192776a32e40b4f73f2df02c99e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd22dbde20179192776a32e40b4f73f2df02c99e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "1875aa024f885f1d6119bff8aa828634b4941248", "url": "https://api.github.com/repos/rust-lang/rust/commits/1875aa024f885f1d6119bff8aa828634b4941248", "html_url": "https://github.com/rust-lang/rust/commit/1875aa024f885f1d6119bff8aa828634b4941248"}, {"sha": "ee2dc9969fd46d710b7d17c297f3768f57a40e57", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee2dc9969fd46d710b7d17c297f3768f57a40e57", "html_url": "https://github.com/rust-lang/rust/commit/ee2dc9969fd46d710b7d17c297f3768f57a40e57"}], "stats": {"total": 76, "additions": 58, "deletions": 18}, "files": [{"sha": "3b200bbc857917144d2a2ce64e467481d9684589", "filename": "ARCHITECTURE.md", "status": "modified", "additions": 58, "deletions": 18, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/fd22dbde20179192776a32e40b4f73f2df02c99e/ARCHITECTURE.md", "raw_url": "https://github.com/rust-lang/rust/raw/fd22dbde20179192776a32e40b4f73f2df02c99e/ARCHITECTURE.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ARCHITECTURE.md?ref=fd22dbde20179192776a32e40b4f73f2df02c99e", "patch": "@@ -4,6 +4,33 @@ This document describes high-level architecture of rust-analyzer.\n If you want to familiarize yourself with the code base, you are just\n in the right place!\n \n+## The Big Picture\n+\n+![](https://user-images.githubusercontent.com/1711539/50114578-e8a34280-0255-11e9-902c-7cfc70747966.png)\n+\n+On the highest level, rust-analyzer is a thing which accepts input source code\n+from the client and produces a structured semantic model of the code.\n+\n+More specifically, input data consists of a set of test files (`(PathBuf,\n+String)` pairs) and an information about project structure, the so called\n+`CrateGraph`. Crate graph specifies which files are crate roots, which cfg flags\n+are specified for each crate (TODO: actually implement this) and what are\n+dependencies between the crate. The analyzer keeps all these input data in\n+memory and never does any IO. Because the input data is source code, which\n+typically measures in tens of megabytes at most, keeping all input data in\n+memory is OK.\n+\n+A \"structured semantic model\" is basically an object-oriented representations of\n+modules, functions and types which appear in the source code. This representation\n+is fully \"resolved\": all expressions have types, all references are bound to\n+declarations, etc.\n+\n+The client can submit a small delta of input data (typically, a change to a\n+single file) and get a fresh code model which accounts for changes.\n+\n+Underlying engine makes sure that model is computed lazily (on-demand) and can\n+be quickly updated for small modifications.\n+\n \n ## Code generation\n \n@@ -58,27 +85,25 @@ all `//test test_name` comments into files inside `tests/data` directory.\n See [#93](https://github.com/rust-analyzer/rust-analyzer/pull/93) for an example PR which\n fixes a bug in the grammar.\n \n-### `crates/ra_hir`\n-\n-HIR (previsouly known as descriptors) provides a high-level OO acess to Rust\n-code.\n+### `crates/ra_db`\n \n-The principal difference between HIR and syntax trees is that HIR is bound\n-to a particular crate instance. That is, it has cfg flags and features\n-applied. So, there relation between syntax and HIR is many-to-one.\n+We use [salsa][https://github.com/salsa-rs/salsa] crate for incremental and\n+on-demand computation. Roughly, you can think of salsa as a key-value store, but\n+it also can compute derived values using specified functions. The `ra_db` crate\n+provides a basic infrastructure for interracting with salsa. Crucially, it\n+defines most of the \"input\" queries: facts supplied by the client of the analyzer.\n \n-### `crates/ra_editor`\n+### `crates/ra_hir`\n \n-All IDE features which can be implemented if you only have access to a\n-single file. `ra_editor` could be used to enhance editing of Rust code\n-without the need to fiddle with build-systems, file\n-synchronization and such.\n+HIR provides a high-level \"object oriented\" acess to Rust code.\n \n-In a sense, `ra_editor` is just a bunch of pure functions which take a\n-syntax tree as an input.\n+The principal difference between HIR and syntax trees is that HIR is bound to a\n+particular crate instance. That is, it has cfg flags and features applied (in\n+theory, in practice this is to be implemented). So, there relation between\n+syntax and HIR is many-to-one. The `source_binder` modules is responsible for\n+guessing a hir for a particular source position.\n \n-The tests for `ra_editor` are `#[cfg(test)] mod tests` unit-tests spread\n-throughout its modules.\n+Underneath, hir works on top of salsa, using a `HirDatabase` trait.\n \n ### `crates/ra_analysis`\n \n@@ -88,8 +113,10 @@ current state, incorporates changes and handles out `Analysis` --- an\n immutable consistent snapshot of world state at a point in time, which\n actually powers analysis.\n \n-### `crates/ra_db`\n-This defines basic database traits. Concrete DB is defined by ra_analysis.\n+One interesting aspect of analysis is its support for cancellation. When a change\n+is applied to `AnalysisHost`, first all currently active snapshots are\n+cancelled. Only after all snapshots are dropped the change actually affects the\n+database.\n \n ### `crates/ra_lsp_server`\n \n@@ -100,6 +127,19 @@ See [#79](https://github.com/rust-analyzer/rust-analyzer/pull/79/) as an\n example of PR which adds a new feature to `ra_editor` and exposes it\n to `ra_lsp_server`.\n \n+### `crates/ra_editor`\n+\n+All IDE features which can be implemented if you only have access to a\n+single file. `ra_editor` could be used to enhance editing of Rust code\n+without the need to fiddle with build-systems, file\n+synchronization and such.\n+\n+In a sense, `ra_editor` is just a bunch of pure functions which take a\n+syntax tree as an input.\n+\n+The tests for `ra_editor` are `#[cfg(test)] mod tests` unit-tests spread\n+throughout its modules.\n+\n ### `crates/gen_lsp_server`\n \n A language server scaffold, exposing a synchronous crossbeam-channel based API."}]}