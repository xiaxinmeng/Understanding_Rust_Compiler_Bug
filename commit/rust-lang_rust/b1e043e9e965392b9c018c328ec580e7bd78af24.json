{"sha": "b1e043e9e965392b9c018c328ec580e7bd78af24", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxZTA0M2U5ZTk2NTM5MmI5YzAxOGMzMjhlYzU4MGU3YmQ3OGFmMjQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-07-31T16:51:39Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-07-31T16:51:39Z"}, "message": "async-llvm(27): Move #[rustc_error] check to an earlier point in order to restore some test expections.", "tree": {"sha": "d1ae7e3627bdd7fb81478bb054af9ca970a83e17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1ae7e3627bdd7fb81478bb054af9ca970a83e17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1e043e9e965392b9c018c328ec580e7bd78af24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1e043e9e965392b9c018c328ec580e7bd78af24", "html_url": "https://github.com/rust-lang/rust/commit/b1e043e9e965392b9c018c328ec580e7bd78af24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1e043e9e965392b9c018c328ec580e7bd78af24/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cacc31f8a348a97da8681c0e55dd106818b7c8cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/cacc31f8a348a97da8681c0e55dd106818b7c8cd", "html_url": "https://github.com/rust-lang/rust/commit/cacc31f8a348a97da8681c0e55dd106818b7c8cd"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "14c73de64bc798f80e82768dac05c2f1956ea6fa", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b1e043e9e965392b9c018c328ec580e7bd78af24/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1e043e9e965392b9c018c328ec580e7bd78af24/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=b1e043e9e965392b9c018c328ec580e7bd78af24", "patch": "@@ -650,24 +650,30 @@ pub fn set_link_section(ccx: &CrateContext,\n     }\n }\n \n+// check for the #[rustc_error] annotation, which forces an\n+// error in trans. This is used to write compile-fail tests\n+// that actually test that compilation succeeds without\n+// reporting an error.\n+fn check_for_rustc_errors_attr(tcx: TyCtxt) {\n+    if let Some((id, span)) = *tcx.sess.entry_fn.borrow() {\n+        let main_def_id = tcx.hir.local_def_id(id);\n+\n+        if tcx.has_attr(main_def_id, \"rustc_error\") {\n+            tcx.sess.span_fatal(span, \"compilation successful\");\n+        }\n+    }\n+}\n+\n /// Create the `main` function which will initialise the rust runtime and call\n /// users main function.\n-pub fn maybe_create_entry_wrapper(ccx: &CrateContext) {\n+fn maybe_create_entry_wrapper(ccx: &CrateContext) {\n     let (main_def_id, span) = match *ccx.sess().entry_fn.borrow() {\n         Some((id, span)) => {\n             (ccx.tcx().hir.local_def_id(id), span)\n         }\n         None => return,\n     };\n \n-    // check for the #[rustc_error] annotation, which forces an\n-    // error in trans. This is used to write compile-fail tests\n-    // that actually test that compilation succeeds without\n-    // reporting an error.\n-    if ccx.tcx().has_attr(main_def_id, \"rustc_error\") {\n-        ccx.tcx().sess.span_fatal(span, \"compilation successful\");\n-    }\n-\n     let instance = Instance::mono(ccx.tcx(), main_def_id);\n \n     if !ccx.codegen_unit().contains_item(&TransItem::Fn(instance)) {\n@@ -928,6 +934,8 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              incremental_hashes_map: IncrementalHashesMap,\n                              output_filenames: &OutputFilenames)\n                              -> OngoingCrateTranslation {\n+    check_for_rustc_errors_attr(tcx);\n+\n     // Be careful with this krate: obviously it gives access to the\n     // entire contents of the krate. So if you push any subtasks of\n     // `TransCrate`, you need to be careful to register \"reads\" of the"}]}