{"sha": "c80d28c8e322b6da49b7725d2b5e5b5cc86da822", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MGQyOGM4ZTMyMmI2ZGE0OWI3NzI1ZDJiNWU1YjVjYzg2ZGE4MjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-01T08:46:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-01T08:46:23Z"}, "message": "auto merge of #11963 : alexcrichton/rust/fix-rustpkg, r=brson\n\nRight now the bots are all injecting a libstd version, so all the rustpkg tests\r\nare passing. All rustpkg compilations will fail unless the version number is\r\nexplicitly given because rustpkg attempts to exactly guess the target file name.\r\nSwitch back to using a pattern match in order to unbreak tests.\r\n\r\nCloses #11852", "tree": {"sha": "2b74e7ee268820b3cadb9ff53f1646a5c0340209", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b74e7ee268820b3cadb9ff53f1646a5c0340209"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c80d28c8e322b6da49b7725d2b5e5b5cc86da822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c80d28c8e322b6da49b7725d2b5e5b5cc86da822", "html_url": "https://github.com/rust-lang/rust/commit/c80d28c8e322b6da49b7725d2b5e5b5cc86da822", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c80d28c8e322b6da49b7725d2b5e5b5cc86da822/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac000cd8e1117339f274850571b90af9e30981dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac000cd8e1117339f274850571b90af9e30981dc", "html_url": "https://github.com/rust-lang/rust/commit/ac000cd8e1117339f274850571b90af9e30981dc"}, {"sha": "723072ff6a66dab863e7c012c06aadf8a5c4ee91", "url": "https://api.github.com/repos/rust-lang/rust/commits/723072ff6a66dab863e7c012c06aadf8a5c4ee91", "html_url": "https://github.com/rust-lang/rust/commit/723072ff6a66dab863e7c012c06aadf8a5c4ee91"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "908e5e5c3810f5fd638a0c132e825ac764627318", "filename": "src/librustpkg/path_util.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c80d28c8e322b6da49b7725d2b5e5b5cc86da822/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80d28c8e322b6da49b7725d2b5e5b5cc86da822/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=c80d28c8e322b6da49b7725d2b5e5b5cc86da822", "patch": "@@ -21,9 +21,7 @@ use std::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n use std::os;\n use std::io;\n use std::io::fs;\n-use extra::hex::ToHex;\n use syntax::crateid::CrateId;\n-use rustc::util::sha2::{Digest, Sha256};\n use rustc::metadata::filesearch::{libdir, relative_target_lib_path};\n use rustc::driver::driver::host_triple;\n use messages::*;\n@@ -206,24 +204,27 @@ pub fn system_library(sysroot: &Path, crate_id: &CrateId) -> Option<Path> {\n }\n \n fn library_in(crate_id: &CrateId, dir_to_search: &Path) -> Option<Path> {\n-    let mut hasher = Sha256::new();\n-    hasher.reset();\n-    hasher.input_str(crate_id.to_str());\n-    let hash = hasher.result_bytes().to_hex();\n-    let hash = hash.slice_chars(0, 8);\n-\n-    let lib_name = format!(\"{}-{}-{}\", crate_id.name, hash, crate_id.version_or_default());\n-    let filenames = [\n-        format!(\"{}{}.{}\", \"lib\", lib_name, \"rlib\"),\n-        format!(\"{}{}{}\", os::consts::DLL_PREFIX, lib_name, os::consts::DLL_SUFFIX),\n+    let version_str = match crate_id.version {\n+        Some(ref v) => format!(\"-{}\", *v),\n+        None => ~\"\",\n+    };\n+    let patterns = ~[\n+        (format!(\"lib{}\", crate_id.name), format!(\"{}.rlib\", version_str)),\n+        (format!(\"{}{}\", os::consts::DLL_PREFIX, crate_id.name),\n+         format!(\"{}{}\", version_str, os::consts::DLL_SUFFIX)),\n     ];\n \n-    for filename in filenames.iter() {\n-        debug!(\"filename = {}\", filename.as_slice());\n-        let path = dir_to_search.join(filename.as_slice());\n-        if path.exists() {\n-            debug!(\"found: {}\", path.display());\n-            return Some(path);\n+    for (prefix, suffix) in patterns.move_iter() {\n+        let files = match io::result(|| fs::readdir(dir_to_search)) {\n+            Ok(dir) => dir, Err(..) => continue,\n+        };\n+        for file in files.move_iter() {\n+            let filename = match file.filename_str() {\n+                Some(s) => s, None => continue,\n+            };\n+            if filename.starts_with(prefix) && filename.ends_with(suffix) {\n+                return Some(file.clone())\n+            }\n         }\n     }\n     debug!(\"warning: library_in_workspace didn't find a library in {} for {}\","}]}