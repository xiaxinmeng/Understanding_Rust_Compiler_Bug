{"sha": "35103fe8ab588348be8cb679c8ced006b946755f", "node_id": "C_kwDOAAsO6NoAKDM1MTAzZmU4YWI1ODgzNDhiZThjYjY3OWM4Y2VkMDA2Yjk0Njc1NWY", "commit": {"author": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-03-11T05:28:05Z"}, "committer": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-03-15T10:30:12Z"}, "message": "error-msg: expand suggestion for unused lint", "tree": {"sha": "ce9d68b045851b3be5235f9cee0757aa9dd4a54f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce9d68b045851b3be5235f9cee0757aa9dd4a54f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35103fe8ab588348be8cb679c8ced006b946755f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEINUdoc4Vb1yVx04IZ6vxb7Ds2HAFAmQRnjQACgkQZ6vxb7Ds\n2HBPIg/5AV3STZCj8Yr0IBbeM35Qug/pmfL9PINwCnuFBNCdVSV+nmyT+9Zjyl8Z\nVMdN3KtlE3mx4osOKGClUXyQjv9fvloxlroxABlFKGnVv80JGFdm2mc0OnIWm9Bi\n5TaTu62EW9sq6dmt6/aRFRivhxxdkIZ1ycFweez+QC41xxRIyeYkvtf1dP79JPXm\nPHQ2L7BN2Nk+7Njnmyjp/LaYFLA7rkg3tEwIZZsRIgTaQIg6VzHi09pFLzCez6xF\nR/dOrR+aSdGFzAezki13e0/kkytQxepNr+x49/iatEC/3jBW9diU5diZ0+ZxP8Mn\nFJdxIzpD7H/4YgvQYIoKfD35BFdFV7kMHLGAXTvMp40d++qNDg/FaU3rZPtF1RbD\nOctMoHivHZ+X4iULTlRSNoiAYe7vGP1LDbzvJaV8/VAviBQyLvFB7y8m9anNrBU0\nAzAHQ4CoT7NzvXVxcOAi9OozAyqVtQElgHtwgXEMaFMOR2Aqp45bw1cFg7xXXBC0\nwepUOEbXVyrU7g/dtLeZLaHaj0L9lQGKvsBagMJkNUw47XCWK7G9j4O2kGmWKD2Z\njI7C+EPCdEUPKyuV+uSKzSkKR6l9UGQQMU3TF8m5HrTR1YTCIZuybsltuu3SAfuD\nrY9g0QgGr20gVFl3bO/QHWiWW43mflCYun9rbbw44ZNvJRC03zc=\n=Cx+n\n-----END PGP SIGNATURE-----", "payload": "tree ce9d68b045851b3be5235f9cee0757aa9dd4a54f\nparent e84e5ff04a647ce28540300244a26ba120642eea\nauthor Ezra Shaw <ezrasure@outlook.com> 1678512485 +1300\ncommitter Ezra Shaw <ezrasure@outlook.com> 1678876212 +1300\n\nerror-msg: expand suggestion for unused lint\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35103fe8ab588348be8cb679c8ced006b946755f", "html_url": "https://github.com/rust-lang/rust/commit/35103fe8ab588348be8cb679c8ced006b946755f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35103fe8ab588348be8cb679c8ced006b946755f/comments", "author": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e84e5ff04a647ce28540300244a26ba120642eea", "url": "https://api.github.com/repos/rust-lang/rust/commits/e84e5ff04a647ce28540300244a26ba120642eea", "html_url": "https://github.com/rust-lang/rust/commit/e84e5ff04a647ce28540300244a26ba120642eea"}], "stats": {"total": 169, "additions": 138, "deletions": 31}, "files": [{"sha": "308c02929ca42b2e469d5c01caf5a3ff55b3c086", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/35103fe8ab588348be8cb679c8ced006b946755f/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35103fe8ab588348be8cb679c8ced006b946755f/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=35103fe8ab588348be8cb679c8ced006b946755f", "patch": "@@ -1390,7 +1390,7 @@ pub struct UnusedOp<'a> {\n     pub op: &'a str,\n     #[label]\n     pub label: Span,\n-    #[suggestion(style = \"verbose\", code = \"let _ = \", applicability = \"machine-applicable\")]\n+    #[suggestion(style = \"verbose\", code = \"let _ = \", applicability = \"maybe-incorrect\")]\n     pub suggestion: Span,\n }\n \n@@ -1434,17 +1434,15 @@ pub struct UnusedDef<'a, 'b> {\n }\n \n #[derive(Subdiagnostic)]\n-pub enum UnusedDefSuggestion {\n-    #[suggestion(\n-        lint_suggestion,\n-        style = \"verbose\",\n-        code = \"let _ = \",\n-        applicability = \"machine-applicable\"\n-    )]\n-    Default {\n-        #[primary_span]\n-        span: Span,\n-    },\n+#[suggestion(\n+    lint_suggestion,\n+    style = \"verbose\",\n+    code = \"let _ = \",\n+    applicability = \"maybe-incorrect\"\n+)]\n+pub struct UnusedDefSuggestion {\n+    #[primary_span]\n+    pub span: Span,\n }\n \n // Needed because of def_path_str"}, {"sha": "faca61fc29bf97bcfc5b75380415b8753ea2376e", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/35103fe8ab588348be8cb679c8ced006b946755f/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35103fe8ab588348be8cb679c8ced006b946755f/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=35103fe8ab588348be8cb679c8ced006b946755f", "patch": "@@ -123,7 +123,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n         let must_use_result = is_ty_must_use(cx, ty, &expr, expr.span);\n         let type_lint_emitted_or_suppressed = match must_use_result {\n             Some(path) => {\n-                emit_must_use_untranslated(cx, &path, \"\", \"\", 1);\n+                emit_must_use_untranslated(cx, &path, \"\", \"\", 1, false);\n                 true\n             }\n             None => false,\n@@ -358,6 +358,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                         descr_pre_path,\n                         descr_post_path,\n                         1,\n+                        false,\n                     )\n                 })\n                 .is_some()\n@@ -370,27 +371,30 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n             descr_pre: &str,\n             descr_post: &str,\n             plural_len: usize,\n+            is_inner: bool,\n         ) {\n             let plural_suffix = pluralize!(plural_len);\n \n             match path {\n                 MustUsePath::Suppressed => {}\n                 MustUsePath::Boxed(path) => {\n                     let descr_pre = &format!(\"{}boxed \", descr_pre);\n-                    emit_must_use_untranslated(cx, path, descr_pre, descr_post, plural_len);\n+                    emit_must_use_untranslated(cx, path, descr_pre, descr_post, plural_len, true);\n                 }\n                 MustUsePath::Opaque(path) => {\n                     let descr_pre = &format!(\"{}implementer{} of \", descr_pre, plural_suffix);\n-                    emit_must_use_untranslated(cx, path, descr_pre, descr_post, plural_len);\n+                    emit_must_use_untranslated(cx, path, descr_pre, descr_post, plural_len, true);\n                 }\n                 MustUsePath::TraitObject(path) => {\n                     let descr_post = &format!(\" trait object{}{}\", plural_suffix, descr_post);\n-                    emit_must_use_untranslated(cx, path, descr_pre, descr_post, plural_len);\n+                    emit_must_use_untranslated(cx, path, descr_pre, descr_post, plural_len, true);\n                 }\n                 MustUsePath::TupleElement(elems) => {\n                     for (index, path) in elems {\n                         let descr_post = &format!(\" in tuple element {}\", index);\n-                        emit_must_use_untranslated(cx, path, descr_pre, descr_post, plural_len);\n+                        emit_must_use_untranslated(\n+                            cx, path, descr_pre, descr_post, plural_len, true,\n+                        );\n                     }\n                 }\n                 MustUsePath::Array(path, len) => {\n@@ -401,6 +405,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                         descr_pre,\n                         descr_post,\n                         plural_len.saturating_add(usize::try_from(*len).unwrap_or(usize::MAX)),\n+                        true,\n                     );\n                 }\n                 MustUsePath::Closure(span) => {\n@@ -418,19 +423,6 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                     );\n                 }\n                 MustUsePath::Def(span, def_id, reason) => {\n-                    let suggestion = if matches!(\n-                        cx.tcx.get_diagnostic_name(*def_id),\n-                        Some(sym::add)\n-                            | Some(sym::sub)\n-                            | Some(sym::mul)\n-                            | Some(sym::div)\n-                            | Some(sym::rem)\n-                            | Some(sym::neg),\n-                    ) {\n-                        Some(UnusedDefSuggestion::Default { span: span.shrink_to_lo() })\n-                    } else {\n-                        None\n-                    };\n                     cx.emit_spanned_lint(\n                         UNUSED_MUST_USE,\n                         *span,\n@@ -440,7 +432,8 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                             cx,\n                             def_id: *def_id,\n                             note: *reason,\n-                            suggestion,\n+                            suggestion: (!is_inner)\n+                                .then_some(UnusedDefSuggestion { span: span.shrink_to_lo() }),\n                         },\n                     );\n                 }"}, {"sha": "123ce71727f67c0dd4641a046b73472abedb8376", "filename": "tests/ui/conditional-compilation/cfg-attr-multi-true.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35103fe8ab588348be8cb679c8ced006b946755f/tests%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35103fe8ab588348be8cb679c8ced006b946755f/tests%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr?ref=35103fe8ab588348be8cb679c8ced006b946755f", "patch": "@@ -35,6 +35,10 @@ note: the lint level is defined here\n    |\n LL | #![warn(unused_must_use)]\n    |         ^^^^^^^^^^^^^^^\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |     let _ = MustUseDeprecated::new();\n+   |     +++++++\n \n warning: 5 warnings emitted\n "}, {"sha": "e88c1a9b8a9b99c0d3e4fae7b8818b451a6db6ab", "filename": "tests/ui/lint/fn_must_use.stderr", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/35103fe8ab588348be8cb679c8ced006b946755f/tests%2Fui%2Flint%2Ffn_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35103fe8ab588348be8cb679c8ced006b946755f/tests%2Fui%2Flint%2Ffn_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Ffn_must_use.stderr?ref=35103fe8ab588348be8cb679c8ced006b946755f", "patch": "@@ -10,12 +10,21 @@ note: the lint level is defined here\n    |\n LL | #![warn(unused_must_use)]\n    |         ^^^^^^^^^^^^^^^\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |     let _ = need_to_use_this_value();\n+   |     +++++++\n \n warning: unused return value of `MyStruct::need_to_use_this_method_value` that must be used\n   --> $DIR/fn_must_use.rs:60:5\n    |\n LL |     m.need_to_use_this_method_value();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |     let _ = m.need_to_use_this_method_value();\n+   |     +++++++\n \n warning: unused return value of `EvenNature::is_even` that must be used\n   --> $DIR/fn_must_use.rs:61:5\n@@ -24,24 +33,43 @@ LL |     m.is_even(); // trait method!\n    |     ^^^^^^^^^^^\n    |\n    = note: no side effects\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |     let _ = m.is_even(); // trait method!\n+   |     +++++++\n \n warning: unused return value of `MyStruct::need_to_use_this_associated_function_value` that must be used\n   --> $DIR/fn_must_use.rs:64:5\n    |\n LL |     MyStruct::need_to_use_this_associated_function_value();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |     let _ = MyStruct::need_to_use_this_associated_function_value();\n+   |     +++++++\n \n warning: unused return value of `std::cmp::PartialEq::eq` that must be used\n   --> $DIR/fn_must_use.rs:70:5\n    |\n LL |     2.eq(&3);\n    |     ^^^^^^^^\n+   |\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |     let _ = 2.eq(&3);\n+   |     +++++++\n \n warning: unused return value of `std::cmp::PartialEq::eq` that must be used\n   --> $DIR/fn_must_use.rs:71:5\n    |\n LL |     m.eq(&n);\n    |     ^^^^^^^^\n+   |\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |     let _ = m.eq(&n);\n+   |     +++++++\n \n warning: unused comparison that must be used\n   --> $DIR/fn_must_use.rs:74:5"}, {"sha": "4898db7fe3ddd7a76d49bc7b7061eb04961d4168", "filename": "tests/ui/lint/unused/must-use-box-from-raw.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35103fe8ab588348be8cb679c8ced006b946755f/tests%2Fui%2Flint%2Funused%2Fmust-use-box-from-raw.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35103fe8ab588348be8cb679c8ced006b946755f/tests%2Fui%2Flint%2Funused%2Fmust-use-box-from-raw.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Fmust-use-box-from-raw.stderr?ref=35103fe8ab588348be8cb679c8ced006b946755f", "patch": "@@ -10,6 +10,10 @@ note: the lint level is defined here\n    |\n LL | #![warn(unused_must_use)]\n    |         ^^^^^^^^^^^^^^^\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |     let _ = Box::from_raw(ptr);\n+   |     +++++++\n \n warning: 1 warning emitted\n "}, {"sha": "993a19e5f04ed85f4816a4974965bd5149434f14", "filename": "tests/ui/lint/unused/must_use-unit.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/35103fe8ab588348be8cb679c8ced006b946755f/tests%2Fui%2Flint%2Funused%2Fmust_use-unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35103fe8ab588348be8cb679c8ced006b946755f/tests%2Fui%2Flint%2Funused%2Fmust_use-unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Fmust_use-unit.stderr?ref=35103fe8ab588348be8cb679c8ced006b946755f", "patch": "@@ -9,12 +9,21 @@ note: the lint level is defined here\n    |\n LL | #![deny(unused_must_use)]\n    |         ^^^^^^^^^^^^^^^\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |     let _ = foo();\n+   |     +++++++\n \n error: unused return value of `bar` that must be used\n   --> $DIR/must_use-unit.rs:15:5\n    |\n LL |     bar();\n    |     ^^^^^\n+   |\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |     let _ = bar();\n+   |     +++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1c3702ba265c0480fa3b36a7e59b36a5f7e693c1", "filename": "tests/ui/lint/unused/unused-async.stderr", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/35103fe8ab588348be8cb679c8ced006b946755f/tests%2Fui%2Flint%2Funused%2Funused-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35103fe8ab588348be8cb679c8ced006b946755f/tests%2Fui%2Flint%2Funused%2Funused-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Funused-async.stderr?ref=35103fe8ab588348be8cb679c8ced006b946755f", "patch": "@@ -16,12 +16,22 @@ error: unused return value of `foo` that must be used\n    |\n LL |     foo();\n    |     ^^^^^\n+   |\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |     let _ = foo();\n+   |     +++++++\n \n error: unused output of future returned by `foo` that must be used\n   --> $DIR/unused-async.rs:33:5\n    |\n LL |     foo().await;\n    |     ^^^^^^^^^^^\n+   |\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |     let _ = foo().await;\n+   |     +++++++\n \n error: unused implementer of `Future` that must be used\n   --> $DIR/unused-async.rs:34:5\n@@ -36,12 +46,22 @@ error: unused return value of `bar` that must be used\n    |\n LL |     bar();\n    |     ^^^^^\n+   |\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |     let _ = bar();\n+   |     +++++++\n \n error: unused output of future returned by `bar` that must be used\n   --> $DIR/unused-async.rs:36:5\n    |\n LL |     bar().await;\n    |     ^^^^^^^^^^^\n+   |\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |     let _ = bar().await;\n+   |     +++++++\n \n error: unused implementer of `Future` that must be used\n   --> $DIR/unused-async.rs:37:5"}, {"sha": "f42995a65d13eadc51da96b262f48c8f9f9801f7", "filename": "tests/ui/lint/unused/unused-result.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/35103fe8ab588348be8cb679c8ced006b946755f/tests%2Fui%2Flint%2Funused%2Funused-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35103fe8ab588348be8cb679c8ced006b946755f/tests%2Fui%2Flint%2Funused%2Funused-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Funused-result.stderr?ref=35103fe8ab588348be8cb679c8ced006b946755f", "patch": "@@ -9,6 +9,10 @@ note: the lint level is defined here\n    |\n LL | #![deny(unused_results, unused_must_use)]\n    |                         ^^^^^^^^^^^^^^^\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |     let _ = foo::<MustUse>();\n+   |     +++++++\n \n error: unused `MustUseMsg` that must be used\n   --> $DIR/unused-result.rs:22:5\n@@ -17,6 +21,10 @@ LL |     foo::<MustUseMsg>();\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: some message\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |     let _ = foo::<MustUseMsg>();\n+   |     +++++++\n \n error: unused result of type `isize`\n   --> $DIR/unused-result.rs:34:5\n@@ -35,6 +43,11 @@ error: unused `MustUse` that must be used\n    |\n LL |     foo::<MustUse>();\n    |     ^^^^^^^^^^^^^^^^\n+   |\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |     let _ = foo::<MustUse>();\n+   |     +++++++\n \n error: unused `MustUseMsg` that must be used\n   --> $DIR/unused-result.rs:36:5\n@@ -43,6 +56,10 @@ LL |     foo::<MustUseMsg>();\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: some message\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |     let _ = foo::<MustUseMsg>();\n+   |     +++++++\n \n error: aborting due to 5 previous errors\n "}, {"sha": "9633767c4428767a162995e2c862ce7e6ab04eb5", "filename": "tests/ui/lint/unused/unused_attributes-must_use.stderr", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/35103fe8ab588348be8cb679c8ced006b946755f/tests%2Fui%2Flint%2Funused%2Funused_attributes-must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35103fe8ab588348be8cb679c8ced006b946755f/tests%2Fui%2Flint%2Funused%2Funused_attributes-must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Funused_attributes-must_use.stderr?ref=35103fe8ab588348be8cb679c8ced006b946755f", "patch": "@@ -146,42 +146,76 @@ note: the lint level is defined here\n    |\n LL | #![deny(unused_attributes, unused_must_use)]\n    |                            ^^^^^^^^^^^^^^^\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |     let _ = X;\n+   |     +++++++\n \n error: unused `Y` that must be used\n   --> $DIR/unused_attributes-must_use.rs:104:5\n    |\n LL |     Y::Z;\n    |     ^^^^\n+   |\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |     let _ = Y::Z;\n+   |     +++++++\n \n error: unused `U` that must be used\n   --> $DIR/unused_attributes-must_use.rs:105:5\n    |\n LL |     U { unit: () };\n    |     ^^^^^^^^^^^^^^\n+   |\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |     let _ = U { unit: () };\n+   |     +++++++\n \n error: unused return value of `U::method` that must be used\n   --> $DIR/unused_attributes-must_use.rs:106:5\n    |\n LL |     U::method();\n    |     ^^^^^^^^^^^\n+   |\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |     let _ = U::method();\n+   |     +++++++\n \n error: unused return value of `foo` that must be used\n   --> $DIR/unused_attributes-must_use.rs:107:5\n    |\n LL |     foo();\n    |     ^^^^^\n+   |\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |     let _ = foo();\n+   |     +++++++\n \n error: unused return value of `foreign_foo` that must be used\n   --> $DIR/unused_attributes-must_use.rs:110:9\n    |\n LL |         foreign_foo();\n    |         ^^^^^^^^^^^^^\n+   |\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |         let _ = foreign_foo();\n+   |         +++++++\n \n error: unused return value of `Use::get_four` that must be used\n   --> $DIR/unused_attributes-must_use.rs:118:5\n    |\n LL |     ().get_four();\n    |     ^^^^^^^^^^^^^\n+   |\n+help: use `let _ = ...` to ignore the resulting value\n+   |\n+LL |     let _ = ().get_four();\n+   |     +++++++\n \n error: aborting due to 28 previous errors\n "}]}