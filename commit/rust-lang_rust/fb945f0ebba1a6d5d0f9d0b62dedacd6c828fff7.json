{"sha": "fb945f0ebba1a6d5d0f9d0b62dedacd6c828fff7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiOTQ1ZjBlYmJhMWE2ZDVkMGY5ZDBiNjJkZWRhY2Q2YzgyOGZmZjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-10T04:05:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-10T04:05:14Z"}, "message": "Auto merge of #53854 - davidtwco:issue-53668, r=nikomatsakis\n\nif- and while-let-chains, take 2 - edition changes\n\nPart of #53668.\n\nr? @nikomatsakis", "tree": {"sha": "81cfcda6ccea74cbe92e912e37bf1a569301d14a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81cfcda6ccea74cbe92e912e37bf1a569301d14a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb945f0ebba1a6d5d0f9d0b62dedacd6c828fff7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb945f0ebba1a6d5d0f9d0b62dedacd6c828fff7", "html_url": "https://github.com/rust-lang/rust/commit/fb945f0ebba1a6d5d0f9d0b62dedacd6c828fff7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb945f0ebba1a6d5d0f9d0b62dedacd6c828fff7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdcd4a4a45357f11343d5abe9501a35793a6fd57", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdcd4a4a45357f11343d5abe9501a35793a6fd57", "html_url": "https://github.com/rust-lang/rust/commit/fdcd4a4a45357f11343d5abe9501a35793a6fd57"}, {"sha": "0a8cf67e61c884f63f471d3ab7094e383a0d97b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a8cf67e61c884f63f471d3ab7094e383a0d97b3", "html_url": "https://github.com/rust-lang/rust/commit/0a8cf67e61c884f63f471d3ab7094e383a0d97b3"}], "stats": {"total": 261, "additions": 261, "deletions": 0}, "files": [{"sha": "52d61792ed2d3993ac6f0cffd06eaea5e407ef1d", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/fb945f0ebba1a6d5d0f9d0b62dedacd6c828fff7/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb945f0ebba1a6d5d0f9d0b62dedacd6c828fff7/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=fb945f0ebba1a6d5d0f9d0b62dedacd6c828fff7", "patch": "@@ -22,6 +22,7 @@ use syntax::ast::*;\n use syntax::attr;\n use syntax::source_map::Spanned;\n use syntax::symbol::keywords;\n+use syntax::ptr::P;\n use syntax::visit::{self, Visitor};\n use syntax_pos::Span;\n use errors;\n@@ -167,11 +168,61 @@ impl<'a> AstValidator<'a> {\n                 \"only lifetime parameters can be used in this context\");\n         }\n     }\n+\n+    /// With eRFC 2497, we need to check whether an expression is ambigious and warn or error\n+    /// depending on the edition, this function handles that.\n+    fn while_if_let_ambiguity(&self, expr: &P<Expr>) {\n+        if let Some((span, op_kind)) = self.while_if_let_expr_ambiguity(&expr) {\n+            let mut err = self.err_handler().struct_span_err(\n+                span, &format!(\"ambigious use of `{}`\", op_kind.to_string())\n+            );\n+\n+            err.note(\n+                \"this will be a error until the `let_chains` feature is stabilized\"\n+            );\n+            err.note(\n+                \"see rust-lang/rust#53668 for more information\"\n+            );\n+\n+            if let Ok(snippet) = self.session.source_map().span_to_snippet(span) {\n+                err.span_suggestion(\n+                    span, \"consider adding parentheses\", format!(\"({})\", snippet),\n+                );\n+            }\n+\n+            err.emit();\n+        }\n+    }\n+\n+    /// With eRFC 2497 adding if-let chains, there is a requirement that the parsing of\n+    /// `&&` and `||` in a if-let statement be unambigious. This function returns a span and\n+    /// a `BinOpKind` (either `&&` or `||` depending on what was ambigious) if it is determined\n+    /// that the current expression parsed is ambigious and will break in future.\n+    fn while_if_let_expr_ambiguity(&self, expr: &P<Expr>) -> Option<(Span, BinOpKind)> {\n+        debug!(\"while_if_let_expr_ambiguity: expr.node: {:?}\", expr.node);\n+        match &expr.node {\n+            ExprKind::Binary(op, _, _) if op.node == BinOpKind::And || op.node == BinOpKind::Or => {\n+                Some((expr.span, op.node))\n+            },\n+            ExprKind::Range(ref lhs, ref rhs, _) => {\n+                let lhs_ambigious = lhs.as_ref()\n+                    .and_then(|lhs| self.while_if_let_expr_ambiguity(lhs));\n+                let rhs_ambigious = rhs.as_ref()\n+                    .and_then(|rhs| self.while_if_let_expr_ambiguity(rhs));\n+\n+                lhs_ambigious.or(rhs_ambigious)\n+            }\n+            _ => None,\n+        }\n+    }\n+\n }\n \n impl<'a> Visitor<'a> for AstValidator<'a> {\n     fn visit_expr(&mut self, expr: &'a Expr) {\n         match expr.node {\n+            ExprKind::IfLet(_, ref expr, _, _) | ExprKind::WhileLet(_, ref expr, _, _) =>\n+                self.while_if_let_ambiguity(&expr),\n             ExprKind::InlineAsm(..) if !self.session.target.target.options.allow_asm => {\n                 span_err!(self.session, expr.span, E0472, \"asm! is unsupported on this target\");\n             }"}, {"sha": "339d49104b021f266c3cebce5e4b4d4b4b35d42d", "filename": "src/test/ui/rfc-2497-if-let-chains/syntax-ambiguity-2015.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/fb945f0ebba1a6d5d0f9d0b62dedacd6c828fff7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb945f0ebba1a6d5d0f9d0b62dedacd6c828fff7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.rs?ref=fb945f0ebba1a6d5d0f9d0b62dedacd6c828fff7", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// edition:2015\n+\n+// Enabling `ireffutable_let_patterns` isn't necessary for what this tests, but it makes coming up\n+// with examples easier.\n+#![feature(irrefutable_let_patterns)]\n+\n+#[allow(irrefutable_let_patterns)]\n+fn main() {\n+    use std::ops::Range;\n+\n+    if let Range { start: _, end: _ } = true..true && false { }\n+    //~^ ERROR ambigious use of `&&`\n+\n+    if let Range { start: _, end: _ } = true..true || false { }\n+    //~^ ERROR ambigious use of `||`\n+\n+    while let Range { start: _, end: _ } = true..true && false { }\n+    //~^ ERROR ambigious use of `&&`\n+\n+    while let Range { start: _, end: _ } = true..true || false { }\n+    //~^ ERROR ambigious use of `||`\n+\n+    if let true = false && false { }\n+    //~^ ERROR ambigious use of `&&`\n+\n+    while let true = (1 == 2) && false { }\n+    //~^ ERROR ambigious use of `&&`\n+\n+    // The following cases are not an error as parenthesis are used to\n+    // clarify intent:\n+\n+    if let Range { start: _, end: _ } = true..(true || false) { }\n+\n+    if let Range { start: _, end: _ } = true..(true && false) { }\n+\n+    while let Range { start: _, end: _ } = true..(true || false) { }\n+\n+    while let Range { start: _, end: _ } = true..(true && false) { }\n+}"}, {"sha": "8597294913f2754fa92bb582bcff6e49522c6592", "filename": "src/test/ui/rfc-2497-if-let-chains/syntax-ambiguity-2015.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/fb945f0ebba1a6d5d0f9d0b62dedacd6c828fff7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb945f0ebba1a6d5d0f9d0b62dedacd6c828fff7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.stderr?ref=fb945f0ebba1a6d5d0f9d0b62dedacd6c828fff7", "patch": "@@ -0,0 +1,56 @@\n+error: ambigious use of `&&`\n+  --> $DIR/syntax-ambiguity-2015.rs:21:47\n+   |\n+LL |     if let Range { start: _, end: _ } = true..true && false { }\n+   |                                               ^^^^^^^^^^^^^ help: consider adding parentheses: `(true && false)`\n+   |\n+   = note: this will be a error until the `let_chains` feature is stabilized\n+   = note: see rust-lang/rust#53668 for more information\n+\n+error: ambigious use of `||`\n+  --> $DIR/syntax-ambiguity-2015.rs:24:47\n+   |\n+LL |     if let Range { start: _, end: _ } = true..true || false { }\n+   |                                               ^^^^^^^^^^^^^ help: consider adding parentheses: `(true || false)`\n+   |\n+   = note: this will be a error until the `let_chains` feature is stabilized\n+   = note: see rust-lang/rust#53668 for more information\n+\n+error: ambigious use of `&&`\n+  --> $DIR/syntax-ambiguity-2015.rs:27:50\n+   |\n+LL |     while let Range { start: _, end: _ } = true..true && false { }\n+   |                                                  ^^^^^^^^^^^^^ help: consider adding parentheses: `(true && false)`\n+   |\n+   = note: this will be a error until the `let_chains` feature is stabilized\n+   = note: see rust-lang/rust#53668 for more information\n+\n+error: ambigious use of `||`\n+  --> $DIR/syntax-ambiguity-2015.rs:30:50\n+   |\n+LL |     while let Range { start: _, end: _ } = true..true || false { }\n+   |                                                  ^^^^^^^^^^^^^ help: consider adding parentheses: `(true || false)`\n+   |\n+   = note: this will be a error until the `let_chains` feature is stabilized\n+   = note: see rust-lang/rust#53668 for more information\n+\n+error: ambigious use of `&&`\n+  --> $DIR/syntax-ambiguity-2015.rs:33:19\n+   |\n+LL |     if let true = false && false { }\n+   |                   ^^^^^^^^^^^^^^ help: consider adding parentheses: `(false && false)`\n+   |\n+   = note: this will be a error until the `let_chains` feature is stabilized\n+   = note: see rust-lang/rust#53668 for more information\n+\n+error: ambigious use of `&&`\n+  --> $DIR/syntax-ambiguity-2015.rs:36:22\n+   |\n+LL |     while let true = (1 == 2) && false { }\n+   |                      ^^^^^^^^^^^^^^^^^ help: consider adding parentheses: `((1 == 2) && false)`\n+   |\n+   = note: this will be a error until the `let_chains` feature is stabilized\n+   = note: see rust-lang/rust#53668 for more information\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "baa90bcf8e97102faca8042f9f09b30a485b580a", "filename": "src/test/ui/rfc-2497-if-let-chains/syntax-ambiguity-2018.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/fb945f0ebba1a6d5d0f9d0b62dedacd6c828fff7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb945f0ebba1a6d5d0f9d0b62dedacd6c828fff7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2018.rs?ref=fb945f0ebba1a6d5d0f9d0b62dedacd6c828fff7", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// edition:2018\n+\n+// Enabling `ireffutable_let_patterns` isn't necessary for what this tests, but it makes coming up\n+// with examples easier.\n+#![feature(irrefutable_let_patterns)]\n+\n+#[allow(irrefutable_let_patterns)]\n+fn main() {\n+    use std::ops::Range;\n+\n+    if let Range { start: _, end: _ } = true..true && false { }\n+    //~^ ERROR ambigious use of `&&`\n+\n+    if let Range { start: _, end: _ } = true..true || false { }\n+    //~^ ERROR ambigious use of `||`\n+\n+    while let Range { start: _, end: _ } = true..true && false { }\n+    //~^ ERROR ambigious use of `&&`\n+\n+    while let Range { start: _, end: _ } = true..true || false { }\n+    //~^ ERROR ambigious use of `||`\n+\n+    if let true = false && false { }\n+    //~^ ERROR ambigious use of `&&`\n+\n+    while let true = (1 == 2) && false { }\n+    //~^ ERROR ambigious use of `&&`\n+\n+    // The following cases are not an error as parenthesis are used to\n+    // clarify intent:\n+\n+    if let Range { start: _, end: _ } = true..(true || false) { }\n+\n+    if let Range { start: _, end: _ } = true..(true && false) { }\n+\n+    while let Range { start: _, end: _ } = true..(true || false) { }\n+\n+    while let Range { start: _, end: _ } = true..(true && false) { }\n+}"}, {"sha": "86ee04747b29dbc80bf75287831923f8ed314df3", "filename": "src/test/ui/rfc-2497-if-let-chains/syntax-ambiguity-2018.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/fb945f0ebba1a6d5d0f9d0b62dedacd6c828fff7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb945f0ebba1a6d5d0f9d0b62dedacd6c828fff7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2018.stderr?ref=fb945f0ebba1a6d5d0f9d0b62dedacd6c828fff7", "patch": "@@ -0,0 +1,56 @@\n+error: ambigious use of `&&`\n+  --> $DIR/syntax-ambiguity-2018.rs:21:47\n+   |\n+LL |     if let Range { start: _, end: _ } = true..true && false { }\n+   |                                               ^^^^^^^^^^^^^ help: consider adding parentheses: `(true && false)`\n+   |\n+   = note: this will be a error until the `let_chains` feature is stabilized\n+   = note: see rust-lang/rust#53668 for more information\n+\n+error: ambigious use of `||`\n+  --> $DIR/syntax-ambiguity-2018.rs:24:47\n+   |\n+LL |     if let Range { start: _, end: _ } = true..true || false { }\n+   |                                               ^^^^^^^^^^^^^ help: consider adding parentheses: `(true || false)`\n+   |\n+   = note: this will be a error until the `let_chains` feature is stabilized\n+   = note: see rust-lang/rust#53668 for more information\n+\n+error: ambigious use of `&&`\n+  --> $DIR/syntax-ambiguity-2018.rs:27:50\n+   |\n+LL |     while let Range { start: _, end: _ } = true..true && false { }\n+   |                                                  ^^^^^^^^^^^^^ help: consider adding parentheses: `(true && false)`\n+   |\n+   = note: this will be a error until the `let_chains` feature is stabilized\n+   = note: see rust-lang/rust#53668 for more information\n+\n+error: ambigious use of `||`\n+  --> $DIR/syntax-ambiguity-2018.rs:30:50\n+   |\n+LL |     while let Range { start: _, end: _ } = true..true || false { }\n+   |                                                  ^^^^^^^^^^^^^ help: consider adding parentheses: `(true || false)`\n+   |\n+   = note: this will be a error until the `let_chains` feature is stabilized\n+   = note: see rust-lang/rust#53668 for more information\n+\n+error: ambigious use of `&&`\n+  --> $DIR/syntax-ambiguity-2018.rs:33:19\n+   |\n+LL |     if let true = false && false { }\n+   |                   ^^^^^^^^^^^^^^ help: consider adding parentheses: `(false && false)`\n+   |\n+   = note: this will be a error until the `let_chains` feature is stabilized\n+   = note: see rust-lang/rust#53668 for more information\n+\n+error: ambigious use of `&&`\n+  --> $DIR/syntax-ambiguity-2018.rs:36:22\n+   |\n+LL |     while let true = (1 == 2) && false { }\n+   |                      ^^^^^^^^^^^^^^^^^ help: consider adding parentheses: `((1 == 2) && false)`\n+   |\n+   = note: this will be a error until the `let_chains` feature is stabilized\n+   = note: see rust-lang/rust#53668 for more information\n+\n+error: aborting due to 6 previous errors\n+"}]}