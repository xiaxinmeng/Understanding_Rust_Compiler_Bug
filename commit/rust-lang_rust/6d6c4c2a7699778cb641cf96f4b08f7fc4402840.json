{"sha": "6d6c4c2a7699778cb641cf96f4b08f7fc4402840", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNmM0YzJhNzY5OTc3OGNiNjQxY2Y5NmY0YjA4ZjdmYzQ0MDI4NDA=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-07-07T18:42:18Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-07-07T18:42:50Z"}, "message": "Command line changes for adding support for static libraries.", "tree": {"sha": "209bfa6b411f8a8632612be53f561c8657661136", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/209bfa6b411f8a8632612be53f561c8657661136"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d6c4c2a7699778cb641cf96f4b08f7fc4402840", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d6c4c2a7699778cb641cf96f4b08f7fc4402840", "html_url": "https://github.com/rust-lang/rust/commit/6d6c4c2a7699778cb641cf96f4b08f7fc4402840", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d6c4c2a7699778cb641cf96f4b08f7fc4402840/comments", "author": null, "committer": null, "parents": [{"sha": "16f82dce1c1c2a9f42a1a5e2c4e3345f07ee5c2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/16f82dce1c1c2a9f42a1a5e2c4e3345f07ee5c2d", "html_url": "https://github.com/rust-lang/rust/commit/16f82dce1c1c2a9f42a1a5e2c4e3345f07ee5c2d"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "0bf21d854de6e8771308a8a94a59d6cdcfcbdf7b", "filename": "mk/stage1.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d6c4c2a7699778cb641cf96f4b08f7fc4402840/mk%2Fstage1.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6d6c4c2a7699778cb641cf96f4b08f7fc4402840/mk%2Fstage1.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage1.mk?ref=6d6c4c2a7699778cb641cf96f4b08f7fc4402840", "patch": "@@ -2,7 +2,7 @@ stage1/lib/$(CFG_STDLIB): $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n               stage1/rustc$(X) stage0/lib/$(CFG_STDLIB) stage1/intrinsics.bc \\\n               stage1/glue.o $(LREQ) $(MKFILES)\n \t@$(call E, compile_and_link: $@)\n-\t$(STAGE1)  --shared -o $@ $<\n+\t$(STAGE1) --lib -o $@ $<\n \n stage1/lib/glue.o: stage1/rustc$(X) stage0/lib/$(CFG_STDLIB) \\\n \tstage1/intrinsics.bc $(LREQ) $(MKFILES)"}, {"sha": "159933032f9bffc1d9092ddf5193ac57de754d27", "filename": "mk/stage2.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d6c4c2a7699778cb641cf96f4b08f7fc4402840/mk%2Fstage2.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6d6c4c2a7699778cb641cf96f4b08f7fc4402840/mk%2Fstage2.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage2.mk?ref=6d6c4c2a7699778cb641cf96f4b08f7fc4402840", "patch": "@@ -2,7 +2,7 @@ stage2/lib/$(CFG_STDLIB): $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n               stage2/rustc$(X) stage1/lib/$(CFG_STDLIB) stage2/intrinsics.bc \\\n               stage2/glue.o $(LREQ) $(MKFILES)\n \t@$(call E, compile_and_link: $@)\n-\t$(STAGE2)  --shared -o $@ $<\n+\t$(STAGE2)  --lib -o $@ $<\n \n stage2/lib/glue.o: stage2/rustc$(X) stage1/lib/$(CFG_STDLIB) \\\n \tstage2/intrinsics.bc rustllvm/$(CFG_RUSTLLVM) rt/$(CFG_RUNTIME)"}, {"sha": "4584399388723b2406721b3f1c919ad4e81d592d", "filename": "mk/stage3.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d6c4c2a7699778cb641cf96f4b08f7fc4402840/mk%2Fstage3.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6d6c4c2a7699778cb641cf96f4b08f7fc4402840/mk%2Fstage3.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage3.mk?ref=6d6c4c2a7699778cb641cf96f4b08f7fc4402840", "patch": "@@ -2,7 +2,7 @@ stage3/lib/$(CFG_STDLIB): $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n               stage3/rustc$(X) stage2/lib/$(CFG_STDLIB) stage3/intrinsics.bc \\\n               stage3/glue.o $(LREQ) $(MKFILES)\n \t@$(call E, compile_and_link: $@)\n-\t$(STAGE3)  --shared -o $@ $<\n+\t$(STAGE3)  --lib -o $@ $<\n \n stage3/lib/glue.o: stage3/rustc$(X) stage2/lib/$(CFG_STDLIB) \\\n \t stage3/intrinsics.bc rustllvm/$(CFG_RUSTLLVM) rt/$(CFG_RUNTIME)"}, {"sha": "b58a0884bf6ecc67fc87379268aaa9edb5f1ab54", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d6c4c2a7699778cb641cf96f4b08f7fc4402840/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6c4c2a7699778cb641cf96f4b08f7fc4402840/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=6d6c4c2a7699778cb641cf96f4b08f7fc4402840", "patch": "@@ -348,7 +348,7 @@ fn build_link_meta(&session::session sess, &ast::crate c,\n     }\n \n     fn warn_missing(&session::session sess, str name, str default) {\n-        if (!sess.get_opts().shared) { ret; }\n+        if (!sess.get_opts().library) { ret; }\n         sess.warn(#fmt(\"missing crate link meta '%s', using '%s' as default\",\n                        name, default));\n     }"}, {"sha": "15add626a3b720ff1a2af061c9f83a16c0c45f96", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6d6c4c2a7699778cb641cf96f4b08f7fc4402840/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6c4c2a7699778cb641cf96f4b08f7fc4402840/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=6d6c4c2a7699778cb641cf96f4b08f7fc4402840", "patch": "@@ -213,7 +213,8 @@ options:\n \n     -o <filename>      write output to <filename>\n     --glue             generate glue.bc file\n-    --shared           compile a shared-library crate\n+    --lib              compile a library crate\n+    --static           use or produce static libraries\n     --pretty [type]    pretty-print the input instead of compiling\n     --ls               list the symbols defined by a crate file\n     -L <path>          add a directory to the library search path\n@@ -281,7 +282,7 @@ fn build_target_config() -> @session::config {\n \n fn build_session_options(str binary, getopts::match match, str binary_dir) ->\n    @session::options {\n-    auto shared = opt_present(match, \"shared\");\n+    auto library = opt_present(match, \"lib\");\n     auto library_search_paths = [binary_dir + \"/lib\"];\n     library_search_paths += getopts::opt_strs(match, \"L\");\n     auto output_type =\n@@ -330,7 +331,7 @@ fn build_session_options(str binary, getopts::match match, str binary_dir) ->\n     auto cfg = parse_cfgspecs(getopts::opt_strs(match, \"cfg\"));\n     auto test = opt_present(match, \"test\");\n     let @session::options sopts =\n-        @rec(shared=shared,\n+        @rec(library=library,\n              optimize=opt_level,\n              debuginfo=debuginfo,\n              verify=verify,\n@@ -369,11 +370,12 @@ fn main(vec[str] args) {\n         [optflag(\"h\"), optflag(\"help\"), optflag(\"v\"), optflag(\"version\"),\n          optflag(\"glue\"), optflag(\"emit-llvm\"), optflagopt(\"pretty\"),\n          optflag(\"ls\"), optflag(\"parse-only\"), optflag(\"O\"),\n-         optopt(\"OptLevel\"), optflag(\"shared\"), optmulti(\"L\"), optflag(\"S\"),\n+         optopt(\"OptLevel\"), optmulti(\"L\"), optflag(\"S\"),\n          optflag(\"c\"), optopt(\"o\"), optflag(\"g\"), optflag(\"save-temps\"),\n          optopt(\"sysroot\"), optflag(\"stats\"), optflag(\"time-passes\"),\n          optflag(\"time-llvm-passes\"), optflag(\"no-typestate\"),\n-         optflag(\"noverify\"), optmulti(\"cfg\"), optflag(\"test\")];\n+         optflag(\"noverify\"), optmulti(\"cfg\"), optflag(\"test\"),\n+         optflag(\"lib\"), optflag(\"static\")];\n     auto binary = vec::shift[str](args);\n     auto binary_dir = fs::dirname(binary);\n     auto match =\n@@ -455,7 +457,7 @@ fn main(vec[str] args) {\n             auto temp_filename;\n             alt (sopts.output_type) {\n                 case (link::output_type_exe) {\n-                    // FIXME: what about shared?\n+                    // FIXME: what about --lib?\n \n                     temp_filename = ofile + \".o\";\n                 }\n@@ -479,13 +481,13 @@ fn main(vec[str] args) {\n         let vec[str] gcc_args =\n             [stage, \"-Lrt\", \"-lrustrt\", glu,  \"-m32\", \"-o\",\n              saved_out_filename, saved_out_filename + \".o\"];\n-        auto shared_cmd;\n+        auto lib_cmd;\n \n         auto os = sess.get_targ_cfg().os;\n         if (os == session::os_macos) {\n-                shared_cmd = \"-dynamiclib\";\n+                lib_cmd = \"-dynamiclib\";\n         } else {\n-                shared_cmd = \"-shared\";\n+                lib_cmd = \"-shared\";\n         }\n \n         // Converts a library file name into a gcc -l argument\n@@ -527,8 +529,8 @@ fn main(vec[str] args) {\n             gcc_args += [\"-l\" + l];\n         }\n \n-        if (sopts.shared) {\n-            gcc_args += [shared_cmd];\n+        if (sopts.library) {\n+            gcc_args += [lib_cmd];\n         } else {\n             // FIXME: why do we hardcode -lm?\n             gcc_args += [\"-lm\", main];"}, {"sha": "a891d2c4b61a4eab685583b382809c0fdeab58e9", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d6c4c2a7699778cb641cf96f4b08f7fc4402840/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6c4c2a7699778cb641cf96f4b08f7fc4402840/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=6d6c4c2a7699778cb641cf96f4b08f7fc4402840", "patch": "@@ -23,7 +23,7 @@ type config =\n         ty_mach float_type);\n \n type options =\n-    rec(bool shared,\n+    rec(bool library,\n         uint optimize,\n         bool debuginfo,\n         bool verify,"}, {"sha": "293db34e8328f1ea806ef334c654b8f454342b19", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d6c4c2a7699778cb641cf96f4b08f7fc4402840/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6c4c2a7699778cb641cf96f4b08f7fc4402840/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=6d6c4c2a7699778cb641cf96f4b08f7fc4402840", "patch": "@@ -8701,7 +8701,7 @@ fn decl_fn_and_pair_full(&@crate_ctxt ccx, &span sp, &vec[str] path, str flav,\n         }\n     }\n     let bool is_main =\n-        str::eq(vec::top(path), \"main\") && !ccx.sess.get_opts().shared;\n+        str::eq(vec::top(path), \"main\") && !ccx.sess.get_opts().library;\n     // Declare the function itself.\n \n     let str s =\n@@ -8745,7 +8745,7 @@ fn register_fn_pair(&@crate_ctxt cx, str ps, TypeRef llfnty, ValueRef llfn,\n     // FIXME: We should also hide the unexported pairs in crates.\n \n     auto gvar =\n-        create_fn_pair(cx, ps, llfnty, llfn, cx.sess.get_opts().shared);\n+        create_fn_pair(cx, ps, llfnty, llfn, cx.sess.get_opts().library);\n     cx.item_ids.insert(id, llfn);\n     cx.item_symbols.insert(id, ps);\n     cx.fn_pairs.insert(id, gvar);\n@@ -9219,7 +9219,7 @@ fn create_crate_map(&@crate_ctxt ccx) -> ValueRef {\n     }\n     vec::push[ValueRef](subcrates, C_int(0));\n     auto mapname;\n-    if (ccx.sess.get_opts().shared) {\n+    if (ccx.sess.get_opts().library) {\n         mapname = ccx.link_meta.name;\n     } else { mapname = \"toplevel\"; }\n     auto sym_name = \"_rust_crate_map_\" + mapname;\n@@ -9235,7 +9235,7 @@ fn create_crate_map(&@crate_ctxt ccx) -> ValueRef {\n }\n \n fn write_metadata(&@trans::crate_ctxt cx, &@ast::crate crate) {\n-    if (!cx.sess.get_opts().shared) { ret; }\n+    if (!cx.sess.get_opts().library) { ret; }\n     auto llmeta = C_postr(metadata::encoder::encode_metadata(cx, crate));\n     auto llconst = trans::C_struct([llmeta]);\n     auto llglobal ="}]}