{"sha": "e8869cb7a7e760f39088190a724991726cd05c50", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ODY5Y2I3YTdlNzYwZjM5MDg4MTkwYTcyNDk5MTcyNmNkMDVjNTA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-05-04T19:41:45Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-08-05T21:08:28Z"}, "message": "Wrap the span_map tuple index into a type called \"LightSpan\"", "tree": {"sha": "bee1a4d50877ab5410492d767253b3277ac9e7e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bee1a4d50877ab5410492d767253b3277ac9e7e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8869cb7a7e760f39088190a724991726cd05c50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8869cb7a7e760f39088190a724991726cd05c50", "html_url": "https://github.com/rust-lang/rust/commit/e8869cb7a7e760f39088190a724991726cd05c50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8869cb7a7e760f39088190a724991726cd05c50/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5c927dfda986e7370985b5a7c8c3ce452639d44", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5c927dfda986e7370985b5a7c8c3ce452639d44", "html_url": "https://github.com/rust-lang/rust/commit/c5c927dfda986e7370985b5a7c8c3ce452639d44"}], "stats": {"total": 112, "additions": 68, "deletions": 44}, "files": [{"sha": "808e1ca236f71f69d074ba718bcde18dc05ad40e", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 10, "deletions": 27, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e8869cb7a7e760f39088190a724991726cd05c50/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8869cb7a7e760f39088190a724991726cd05c50/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=e8869cb7a7e760f39088190a724991726cd05c50", "patch": "@@ -17,7 +17,7 @@ use rustc_span::edition::Edition;\n use rustc_span::symbol::Symbol;\n \n use super::format::{self, Buffer};\n-use super::render::LinkFromSrc;\n+use super::render::{LightSpan, LinkFromSrc};\n \n /// Highlights `src`, returning the HTML output.\n crate fn render_with_highlighting(\n@@ -74,7 +74,7 @@ fn write_header(out: &mut Buffer, class: Option<&str>, extra_content: Option<Buf\n /// won't try to generate links to an ident definition.\n ///\n /// More explanations about spans and how we use them here are provided in the\n-/// [`local_span_to_global_span`] function documentation about how it works.\n+/// [`LightSpan::new_in_file`] function documentation about how it works.\n ///\n /// As for `root_path`, it's used to know \"how far\" from the top of the directory we are to link\n /// to either documentation pages or other source pages.\n@@ -115,14 +115,14 @@ enum Class {\n     KeyWord,\n     // Keywords that do pointer/reference stuff.\n     RefKeyWord,\n-    Self_((u32, u32)),\n+    Self_(LightSpan),\n     Op,\n     Macro,\n     MacroNonTerminal,\n     String,\n     Number,\n     Bool,\n-    Ident((u32, u32)),\n+    Ident(LightSpan),\n     Lifetime,\n     PreludeTy,\n     PreludeVal,\n@@ -155,7 +155,7 @@ impl Class {\n \n     /// In case this is an item which can be converted into a link to a definition, it'll contain\n     /// a \"span\" (a tuple representing `(lo, hi)` equivalent of `Span`).\n-    fn get_span(self) -> Option<(u32, u32)> {\n+    fn get_span(self) -> Option<LightSpan> {\n         match self {\n             Self::Ident(sp) | Self::Self_(sp) => Some(sp),\n             _ => None,\n@@ -201,23 +201,6 @@ fn get_real_ident_class(text: &str, edition: Edition, allow_path_keywords: bool)\n     })\n }\n \n-/// Before explaining what this function does, some global explanations on rust's `Span`:\n-///\n-/// Each source code file is stored in the source map in the compiler and has a\n-/// `lo` and a `hi` (lowest and highest bytes in this source map which can be seen as one huge\n-/// string to simplify things). So in this case, this represents the starting byte of the current\n-/// file. It'll be used later on to retrieve the \"definition span\" from the\n-/// `span_correspondance_map` (which is inside `context`).\n-///\n-/// This when we transform the \"span\" we have from reading the input into a \"span\" which can be\n-/// used as index to the `span_correspondance_map` to get the definition of this item.\n-///\n-/// So in here, `file_span_lo` is representing the \"lo\" byte in the global source map, and to make\n-/// our \"span\" works in there, we simply add `file_span_lo` to our values.\n-fn local_span_to_global_span(file_span_lo: u32, start: u32, end: u32) -> (u32, u32) {\n-    (start + file_span_lo, end + file_span_lo)\n-}\n-\n /// Processes program tokens, classifying strings of text by highlighting\n /// category (`Class`).\n struct Classifier<'a> {\n@@ -234,7 +217,7 @@ struct Classifier<'a> {\n impl<'a> Classifier<'a> {\n     /// Takes as argument the source code to HTML-ify, the rust edition to use and the source code\n     /// file \"lo\" byte which we be used later on by the `span_correspondance_map`. More explanations\n-    /// are provided in the [`local_span_to_global_span`] function documentation about how it works.\n+    /// are provided in the [`LightSpan::new_in_file`] function documentation about how it works.\n     fn new(src: &str, edition: Edition, file_span_lo: u32) -> Classifier<'_> {\n         let tokens = TokenIter { src }.peekable();\n         Classifier {\n@@ -496,20 +479,20 @@ impl<'a> Classifier<'a> {\n                         self.in_macro_nonterminal = false;\n                         Class::MacroNonTerminal\n                     }\n-                    \"self\" | \"Self\" => Class::Self_(local_span_to_global_span(\n+                    \"self\" | \"Self\" => Class::Self_(LightSpan::new_in_file(\n                         self.file_span_lo,\n                         before,\n                         before + text.len() as u32,\n                     )),\n-                    _ => Class::Ident(local_span_to_global_span(\n+                    _ => Class::Ident(LightSpan::new_in_file(\n                         self.file_span_lo,\n                         before,\n                         before + text.len() as u32,\n                     )),\n                 },\n                 Some(c) => c,\n             },\n-            TokenKind::RawIdent | TokenKind::UnknownPrefix => Class::Ident(local_span_to_global_span(\n+            TokenKind::RawIdent | TokenKind::UnknownPrefix => Class::Ident(LightSpan::new_in_file(\n                 self.file_span_lo,\n                 before,\n                 before + text.len() as u32,\n@@ -572,7 +555,7 @@ fn string<T: Display>(\n                     \"self\" | \"Self\" => write!(\n                         &mut path,\n                         \"<span class=\\\"{}\\\">{}</span>\",\n-                        Class::Self_((0, 0)).as_html(),\n+                        Class::Self_(LightSpan::empty()).as_html(),\n                         t\n                     ),\n                     \"crate\" | \"super\" => write!("}, {"sha": "36ec2cf3f7a25839cb1158f1ae67030167087fa9", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8869cb7a7e760f39088190a724991726cd05c50/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8869cb7a7e760f39088190a724991726cd05c50/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=e8869cb7a7e760f39088190a724991726cd05c50", "patch": "@@ -18,8 +18,8 @@ use super::cache::{build_index, ExternalLocation};\n use super::print_item::{full_path, item_path, print_item};\n use super::write_shared::write_shared;\n use super::{\n-    collect_spans_and_sources, print_sidebar, settings, AllTypes, LinkFromSrc, NameDoc, StylePath,\n-    BASIC_KEYWORDS,\n+    collect_spans_and_sources, print_sidebar, settings, AllTypes, LightSpan, LinkFromSrc, NameDoc,\n+    StylePath, BASIC_KEYWORDS,\n };\n \n use crate::clean;\n@@ -131,7 +131,7 @@ crate struct SharedContext<'tcx> {\n \n     /// Correspondance map used to link types used in the source code pages to allow to click on\n     /// links to jump to the type's definition.\n-    crate span_correspondance_map: FxHashMap<(u32, u32), LinkFromSrc>,\n+    crate span_correspondance_map: FxHashMap<LightSpan, LinkFromSrc>,\n }\n \n impl SharedContext<'_> {"}, {"sha": "584afdeb280fc81458479f71b7a3467f8ea41ad0", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8869cb7a7e760f39088190a724991726cd05c50/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8869cb7a7e760f39088190a724991726cd05c50/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=e8869cb7a7e760f39088190a724991726cd05c50", "patch": "@@ -34,7 +34,7 @@ mod span_map;\n mod write_shared;\n \n crate use context::*;\n-crate use span_map::{collect_spans_and_sources, LinkFromSrc};\n+crate use span_map::{collect_spans_and_sources, LightSpan, LinkFromSrc};\n \n use std::collections::VecDeque;\n use std::default::Default;"}, {"sha": "c7cc2250c241025e2dfa5ea6193a5d3342c36528", "filename": "src/librustdoc/html/render/span_map.rs", "status": "modified", "additions": 54, "deletions": 13, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/e8869cb7a7e760f39088190a724991726cd05c50/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8869cb7a7e760f39088190a724991726cd05c50/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs?ref=e8869cb7a7e760f39088190a724991726cd05c50", "patch": "@@ -24,6 +24,43 @@ crate enum LinkFromSrc {\n     External(DefId),\n }\n \n+/// This struct is used only as index in the `span_map`, not as [`Span`]! `Span`s contain\n+/// some extra information (the syntax context) we don't need. **Do not convert this type back to\n+/// `Span`!!!**\n+#[derive(Clone, Copy, Hash, PartialEq, Eq, Debug)]\n+crate struct LightSpan {\n+    crate lo: u32,\n+    crate hi: u32,\n+}\n+\n+impl LightSpan {\n+    /// Before explaining what this method does, some global explanations on rust's `Span`:\n+    ///\n+    /// Each source code file is stored in the source map in the compiler and has a\n+    /// `lo` and a `hi` (lowest and highest bytes in this source map which can be seen as one huge\n+    /// string to simplify things). So in this case, this represents the starting byte of the\n+    /// current file. It'll be used later on to retrieve the \"definition span\" from the\n+    /// `span_correspondance_map` (which is inside `context`).\n+    ///\n+    /// This when we transform the \"span\" we have from reading the input into a \"span\" which can be\n+    /// used as index to the `span_correspondance_map` to get the definition of this item.\n+    ///\n+    /// So in here, `file_span_lo` is representing the \"lo\" byte in the global source map, and to\n+    /// make our \"span\" works in there, we simply add `file_span_lo` to our values.\n+    crate fn new_in_file(file_span_lo: u32, lo: u32, hi: u32) -> Self {\n+        Self { lo: lo + file_span_lo, hi: hi + file_span_lo }\n+    }\n+\n+    crate fn empty() -> Self {\n+        Self { lo: 0, hi: 0 }\n+    }\n+\n+    /// Extra the `lo` and `hi` from the [`Span`] and discard the unused syntax context.\n+    fn new_from_span(sp: Span) -> Self {\n+        Self { lo: sp.lo().0, hi: sp.hi().0 }\n+    }\n+}\n+\n /// This function will do at most two things:\n ///\n /// 1. Generate a `span` correspondance map which links an item `span` to its definition `span`.\n@@ -40,7 +77,7 @@ crate fn collect_spans_and_sources(\n     src_root: &Path,\n     include_sources: bool,\n     generate_link_to_definition: bool,\n-) -> (clean::Crate, FxHashMap<PathBuf, String>, FxHashMap<(u32, u32), LinkFromSrc>) {\n+) -> (clean::Crate, FxHashMap<PathBuf, String>, FxHashMap<LightSpan, LinkFromSrc>) {\n     let mut visitor = SpanMapVisitor { tcx, matches: FxHashMap::default() };\n \n     if include_sources {\n@@ -54,13 +91,9 @@ crate fn collect_spans_and_sources(\n     }\n }\n \n-fn span_to_tuple(span: Span) -> (u32, u32) {\n-    (span.lo().0, span.hi().0)\n-}\n-\n struct SpanMapVisitor<'tcx> {\n     crate tcx: TyCtxt<'tcx>,\n-    crate matches: FxHashMap<(u32, u32), LinkFromSrc>,\n+    crate matches: FxHashMap<LightSpan, LinkFromSrc>,\n }\n \n impl<'tcx> SpanMapVisitor<'tcx> {\n@@ -77,12 +110,16 @@ impl<'tcx> SpanMapVisitor<'tcx> {\n         };\n         if let Some(span) = self.tcx.hir().res_span(path.res) {\n             self.matches.insert(\n-                path_span.map(span_to_tuple).unwrap_or_else(|| span_to_tuple(path.span)),\n+                path_span\n+                    .map(LightSpan::new_from_span)\n+                    .unwrap_or_else(|| LightSpan::new_from_span(path.span)),\n                 LinkFromSrc::Local(span),\n             );\n         } else if let Some(def_id) = info {\n             self.matches.insert(\n-                path_span.map(span_to_tuple).unwrap_or_else(|| span_to_tuple(path.span)),\n+                path_span\n+                    .map(LightSpan::new_from_span)\n+                    .unwrap_or_else(|| LightSpan::new_from_span(path.span)),\n                 LinkFromSrc::External(def_id),\n             );\n         }\n@@ -122,8 +159,10 @@ impl Visitor<'tcx> for SpanMapVisitor<'tcx> {\n             if let Some(node) = self.tcx.hir().find(id) {\n                 match node {\n                     Node::Item(item) => {\n-                        self.matches\n-                            .insert(span_to_tuple(item.ident.span), LinkFromSrc::Local(m.inner));\n+                        self.matches.insert(\n+                            LightSpan::new_from_span(item.ident.span),\n+                            LinkFromSrc::Local(m.inner),\n+                        );\n                     }\n                     _ => {}\n                 }\n@@ -146,12 +185,14 @@ impl Visitor<'tcx> for SpanMapVisitor<'tcx> {\n                     if let Some(def_id) = typeck_results.type_dependent_def_id(expr.hir_id) {\n                         match hir.span_if_local(def_id) {\n                             Some(span) => {\n-                                self.matches\n-                                    .insert(span_to_tuple(method_span), LinkFromSrc::Local(span));\n+                                self.matches.insert(\n+                                    LightSpan::new_from_span(method_span),\n+                                    LinkFromSrc::Local(span),\n+                                );\n                             }\n                             None => {\n                                 self.matches.insert(\n-                                    span_to_tuple(method_span),\n+                                    LightSpan::new_from_span(method_span),\n                                     LinkFromSrc::External(def_id),\n                                 );\n                             }"}]}