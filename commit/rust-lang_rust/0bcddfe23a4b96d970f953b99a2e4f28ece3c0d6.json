{"sha": "0bcddfe23a4b96d970f953b99a2e4f28ece3c0d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiY2RkZmUyM2E0Yjk2ZDk3MGY5NTNiOTlhMmU0ZjI4ZWNlM2MwZDY=", "commit": {"author": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2019-11-23T14:33:40Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2019-12-26T05:12:58Z"}, "message": "Normalize identifiers in librustc_parse.", "tree": {"sha": "21f2e652d6e3d8111a7a075a2b931990c94312ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21f2e652d6e3d8111a7a075a2b931990c94312ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bcddfe23a4b96d970f953b99a2e4f28ece3c0d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bcddfe23a4b96d970f953b99a2e4f28ece3c0d6", "html_url": "https://github.com/rust-lang/rust/commit/0bcddfe23a4b96d970f953b99a2e4f28ece3c0d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bcddfe23a4b96d970f953b99a2e4f28ece3c0d6/comments", "author": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b13d65ab9274323de72539556f2c5f7eef29f4a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b13d65ab9274323de72539556f2c5f7eef29f4a1", "html_url": "https://github.com/rust-lang/rust/commit/b13d65ab9274323de72539556f2c5f7eef29f4a1"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "02717c85ccfc317175e0ae8b104a2b7494bfb1cb", "filename": "Cargo.lock", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0bcddfe23a4b96d970f953b99a2e4f28ece3c0d6/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0bcddfe23a4b96d970f953b99a2e4f28ece3c0d6/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0bcddfe23a4b96d970f953b99a2e4f28ece3c0d6", "patch": "@@ -3696,6 +3696,7 @@ dependencies = [\n  \"smallvec 1.0.0\",\n  \"syntax\",\n  \"syntax_pos\",\n+ \"unicode-normalization\",\n ]\n \n [[package]]\n@@ -4913,9 +4914,12 @@ dependencies = [\n \n [[package]]\n name = \"unicode-normalization\"\n-version = \"0.1.7\"\n+version = \"0.1.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6a0180bc61fc5a987082bfa111f4cc95c4caff7f9799f3e46df09163a937aa25\"\n+checksum = \"b561e267b2326bb4cebfc0ef9e68355c7abe6c6f522aeac2f5bf95d56c59bdcf\"\n+dependencies = [\n+ \"smallvec 1.0.0\",\n+]\n \n [[package]]\n name = \"unicode-segmentation\""}, {"sha": "73458a444f4c6c481d2011aebd2b9de7e064ab19", "filename": "src/librustc_parse/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0bcddfe23a4b96d970f953b99a2e4f28ece3c0d6/src%2Flibrustc_parse%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0bcddfe23a4b96d970f953b99a2e4f28ece3c0d6/src%2Flibrustc_parse%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2FCargo.toml?ref=0bcddfe23a4b96d970f953b99a2e4f28ece3c0d6", "patch": "@@ -20,3 +20,4 @@ rustc_error_codes = { path = \"../librustc_error_codes\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n syntax_pos = { path = \"../libsyntax_pos\" }\n syntax = { path = \"../libsyntax\" }\n+unicode-normalization = \"0.1.11\""}, {"sha": "d69cd14d544db059ef98829826aab8a45f601413", "filename": "src/librustc_parse/lexer/mod.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0bcddfe23a4b96d970f953b99a2e4f28ece3c0d6/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bcddfe23a4b96d970f953b99a2e4f28ece3c0d6/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Fmod.rs?ref=0bcddfe23a4b96d970f953b99a2e4f28ece3c0d6", "patch": "@@ -220,8 +220,7 @@ impl<'a> StringReader<'a> {\n                 if is_raw_ident {\n                     ident_start = ident_start + BytePos(2);\n                 }\n-                // FIXME: perform NFKC normalization here. (Issue #2253)\n-                let sym = self.symbol_from(ident_start);\n+                let sym = self.nfc_symbol_from(ident_start);\n                 if is_raw_ident {\n                     let span = self.mk_sp(start, self.pos);\n                     if !sym.can_be_raw() {\n@@ -470,6 +469,20 @@ impl<'a> StringReader<'a> {\n         Symbol::intern(self.str_from_to(start, end))\n     }\n \n+    /// As symbol_from, with the text normalized into Unicode NFC form.\n+    fn nfc_symbol_from(&self, start: BytePos) -> Symbol {\n+        use unicode_normalization::{is_nfc_quick, IsNormalized, UnicodeNormalization};\n+        debug!(\"taking an normalized ident from {:?} to {:?}\", start, self.pos);\n+        let sym = self.str_from(start);\n+        match is_nfc_quick(sym.chars()) {\n+            IsNormalized::Yes => Symbol::intern(sym),\n+            _ => {\n+                let sym_str: String = sym.chars().nfc().collect();\n+                Symbol::intern(&sym_str)\n+            }\n+        }\n+    }\n+\n     /// Slice of the source text spanning from `start` up to but excluding `end`.\n     fn str_from_to(&self, start: BytePos, end: BytePos) -> &str {\n         &self.src[self.src_index(start)..self.src_index(end)]"}]}