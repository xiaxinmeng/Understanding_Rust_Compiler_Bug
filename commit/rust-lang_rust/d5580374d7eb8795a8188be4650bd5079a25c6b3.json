{"sha": "d5580374d7eb8795a8188be4650bd5079a25c6b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NTgwMzc0ZDdlYjg3OTVhODE4OGJlNDY1MGJkNTA3OWEyNWM2YjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-23T14:26:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-23T14:26:13Z"}, "message": "Auto merge of #40758 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 5 pull requests\n\n- Successful merges: #40612, #40627, #40668, #40715, #40753\n- Failed merges:", "tree": {"sha": "c8c3e2c691fb417cc4b2d532c54dd69d88eb4884", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8c3e2c691fb417cc4b2d532c54dd69d88eb4884"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5580374d7eb8795a8188be4650bd5079a25c6b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5580374d7eb8795a8188be4650bd5079a25c6b3", "html_url": "https://github.com/rust-lang/rust/commit/d5580374d7eb8795a8188be4650bd5079a25c6b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5580374d7eb8795a8188be4650bd5079a25c6b3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dfc25e05e995c92a6093718198cca4bc2c85b63", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dfc25e05e995c92a6093718198cca4bc2c85b63", "html_url": "https://github.com/rust-lang/rust/commit/8dfc25e05e995c92a6093718198cca4bc2c85b63"}, {"sha": "ea76c5ed569b170078d225c70f64bc773de80b81", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea76c5ed569b170078d225c70f64bc773de80b81", "html_url": "https://github.com/rust-lang/rust/commit/ea76c5ed569b170078d225c70f64bc773de80b81"}], "stats": {"total": 535, "additions": 337, "deletions": 198}, "files": [{"sha": "c68f30a6e563b4fe39e2b2e59c4f5db28fb0fe88", "filename": "src/ci/docker/dist-s390x-linux-netbsd/Dockerfile", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Fci%2Fdocker%2Fdist-s390x-linux-netbsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Fci%2Fdocker%2Fdist-s390x-linux-netbsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-s390x-linux-netbsd%2FDockerfile?ref=d5580374d7eb8795a8188be4650bd5079a25c6b3", "patch": "@@ -64,17 +64,17 @@ COPY patches/ /tmp/patches/\n COPY s390x-linux-gnu.config build-s390x-toolchain.sh /tmp/\n RUN ./build-s390x-toolchain.sh\n \n-USER root\n-\n COPY build-netbsd-toolchain.sh /tmp/\n RUN ./build-netbsd-toolchain.sh\n \n-ENV PATH=$PATH:/x-tools/s390x-ibm-linux-gnu/bin\n+USER root\n+\n+ENV PATH=$PATH:/x-tools/s390x-ibm-linux-gnu/bin:/x-tools/x86_64-unknown-netbsd/bin\n \n ENV \\\n-    AR_x86_64_unknown_netbsd=x86_64-unknown-netbsd-ar \\\n-    CC_x86_64_unknown_netbsd=x86_64-unknown-netbsd-gcc \\\n-    CXX_x86_64_unknown_netbsd=x86_64-unknown-netbsd-g++ \\\n+    AR_x86_64_unknown_netbsd=x86_64--netbsd-ar \\\n+    CC_x86_64_unknown_netbsd=x86_64--netbsd-gcc-sysroot \\\n+    CXX_x86_64_unknown_netbsd=x86_64--netbsd-g++-sysroot \\\n     CC_s390x_unknown_linux_gnu=s390x-ibm-linux-gnu-gcc \\\n     AR_s390x_unknown_linux_gnu=s390x-ibm-linux-gnu-ar \\\n     CXX_s390x_unknown_linux_gnu=s390x-ibm-linux-gnu-g++"}, {"sha": "ea335a249736c703296840774638e609961625c1", "filename": "src/ci/docker/dist-s390x-linux-netbsd/build-netbsd-toolchain.sh", "status": "modified", "additions": 64, "deletions": 101, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Fci%2Fdocker%2Fdist-s390x-linux-netbsd%2Fbuild-netbsd-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Fci%2Fdocker%2Fdist-s390x-linux-netbsd%2Fbuild-netbsd-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-s390x-linux-netbsd%2Fbuild-netbsd-toolchain.sh?ref=d5580374d7eb8795a8188be4650bd5079a25c6b3", "patch": "@@ -13,108 +13,71 @@\n \n set -ex\n \n-BINUTILS=2.25.1\n-GCC=5.3.0\n-\n-# First up, build binutils\n-mkdir binutils\n-cd binutils\n-curl https://ftp.gnu.org/gnu/binutils/binutils-$BINUTILS.tar.bz2 | tar xjf -\n-mkdir binutils-build\n-cd binutils-build\n-../binutils-$BINUTILS/configure \\\n-  --target=x86_64-unknown-netbsd\n-make -j10\n-make install\n-cd ../..\n-rm -rf binutils\n+hide_output() {\n+  set +x\n+  on_err=\"\n+echo ERROR: An error was encountered with the build.\n+cat /tmp/build.log\n+exit 1\n+\"\n+  trap \"$on_err\" ERR\n+  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n+  PING_LOOP_PID=$!\n+  $@ &> /tmp/build.log\n+  rm /tmp/build.log\n+  trap - ERR\n+  kill $PING_LOOP_PID\n+  set -x\n+}\n \n-# Next, download the NetBSD libc and relevant header files\n mkdir netbsd\n-# originally from:\n-# https://ftp.netbsd.org/pub/NetBSD/NetBSD-7.0/amd64/binary/sets/base.tgz\n-curl https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-01-16-netbsd-base.tgz | \\\n-  tar xzf - -C netbsd ./usr/include ./usr/lib ./lib\n-# originally from:\n-# https://ftp.netbsd.org/pub/NetBSD/NetBSD-7.0/amd64/binary/sets/comp.tgz\n-curl https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-01-16-netbsd-comp.tgz | \\\n-  tar xzf - -C netbsd ./usr/include ./usr/lib\n-\n-dst=/usr/local/x86_64-unknown-netbsd\n-cp -r netbsd/usr/include $dst\n-cp netbsd/usr/lib/crt0.o $dst/lib\n-cp netbsd/usr/lib/crti.o $dst/lib\n-cp netbsd/usr/lib/crtn.o $dst/lib\n-cp netbsd/usr/lib/crtbeginS.o $dst/lib\n-cp netbsd/usr/lib/crtendS.o $dst/lib\n-cp netbsd/usr/lib/crtbegin.o $dst/lib\n-cp netbsd/usr/lib/crtend.o $dst/lib\n-cp netbsd/usr/lib/gcrt0.o $dst/lib\n-cp netbsd/usr/lib/libc.a $dst/lib\n-cp netbsd/usr/lib/libc_p.a $dst/lib\n-cp netbsd/usr/lib/libc_pic.a $dst/lib\n-cp netbsd/lib/libc.so.12.193.1 $dst/lib\n-cp netbsd/lib/libutil.so.7.21 $dst/lib\n-cp netbsd/usr/lib/libm.a $dst/lib\n-cp netbsd/usr/lib/libm_p.a $dst/lib\n-cp netbsd/usr/lib/libm_pic.a $dst/lib\n-cp netbsd/lib/libm.so.0.11 $dst/lib\n-cp netbsd/usr/lib/librt.so.1.1 $dst/lib\n-cp netbsd/usr/lib/libpthread.a $dst/lib\n-cp netbsd/usr/lib/libpthread_p.a $dst/lib\n-cp netbsd/usr/lib/libpthread_pic.a $dst/lib\n-cp netbsd/usr/lib/libpthread.so.1.2 $dst/lib\n-\n-ln -s libc.so.12.193.1 $dst/lib/libc.so\n-ln -s libc.so.12.193.1 $dst/lib/libc.so.12\n-ln -s libm.so.0.11 $dst/lib/libm.so\n-ln -s libm.so.0.11 $dst/lib/libm.so.0\n-ln -s libutil.so.7.21 $dst/lib/libutil.so\n-ln -s libutil.so.7.21 $dst/lib/libutil.so.7\n-ln -s libpthread.so.1.2 $dst/lib/libpthread.so\n-ln -s libpthread.so.1.2 $dst/lib/libpthread.so.1\n-ln -s librt.so.1.1 $dst/lib/librt.so\n-\n-rm -rf netbsd\n-\n-# Finally, download and build gcc to target NetBSD\n-mkdir gcc\n-cd gcc\n-curl https://ftp.gnu.org/gnu/gcc/gcc-$GCC/gcc-$GCC.tar.bz2 | tar xjf -\n-cd gcc-$GCC\n-./contrib/download_prerequisites\n-\n-# Originally from\n-# ftp://ftp.netbsd.org/pub/pkgsrc/pkgsrc-2016Q4/pkgsrc/lang/gcc5/patches/patch-libstdc%2B%2B-v3_config_os_bsd_netbsd_ctype__base.h\n-PATCHES=\"https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-01-13-netbsd-patch1.patch\"\n-\n-# Originally from\n-# ftp://ftp.netbsd.org/pub/pkgsrc/pkgsrc-2016Q4/pkgsrc/lang/gcc5/patches/patch-libstdc%2B%2B-v3_config_os_bsd_netbsd_ctype__configure__char.cc\n-PATCHES=\"$PATCHES https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-01-13-netbsd-patch2.patch\"\n-\n-for patch in $PATCHES; do\n-  curl $patch | patch -Np0\n-done\n-\n-mkdir ../gcc-build\n-cd ../gcc-build\n-../gcc-$GCC/configure                            \\\n-  --enable-languages=c,c++                       \\\n-  --target=x86_64-unknown-netbsd                 \\\n-  --disable-libcilkrts                           \\\n-  --disable-multilib                             \\\n-  --disable-nls                                  \\\n-  --disable-libgomp                              \\\n-  --disable-libquadmath                          \\\n-  --disable-libssp                               \\\n-  --disable-libvtv                               \\\n-  --disable-libcilkrt                            \\\n-  --disable-libada                               \\\n-  --disable-libsanitizer                         \\\n-  --disable-libquadmath-support                  \\\n-  --disable-lto\n-make -j10\n-make install\n+cd netbsd\n+\n+mkdir -p /x-tools/x86_64-unknown-netbsd/sysroot\n+\n+URL=https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror\n+\n+# Originally from ftp://ftp.netbsd.org/pub/NetBSD/NetBSD-$BSD/source/sets/*.tgz\n+curl $URL/2017-03-17-netbsd-src.tgz | tar xzf -\n+curl $URL/2017-03-17-netbsd-gnusrc.tgz | tar xzf -\n+curl $URL/2017-03-17-netbsd-sharesrc.tgz | tar xzf -\n+curl $URL/2017-03-17-netbsd-syssrc.tgz | tar xzf -\n+\n+# Originally from ftp://ftp.netbsd.org/pub/NetBSD/NetBSD-$BSD/amd64/binary/sets/*.tgz\n+curl $URL/2017-03-17-netbsd-base.tgz | \\\n+  tar xzf - -C /x-tools/x86_64-unknown-netbsd/sysroot ./usr/include ./usr/lib ./lib\n+curl $URL/2017-03-17-netbsd-comp.tgz | \\\n+  tar xzf - -C /x-tools/x86_64-unknown-netbsd/sysroot ./usr/include ./usr/lib\n+\n+cd usr/src\n+\n+# The options, in order, do the following\n+# * this is an unpriviledged build\n+# * output to a predictable location\n+# * disable various uneeded stuff\n+MKUNPRIVED=yes TOOLDIR=/x-tools/x86_64-unknown-netbsd \\\n+MKSHARE=no MKDOC=no MKHTML=no MKINFO=no MKKMOD=no MKLINT=no MKMAN=no MKNLS=no MKPROFILE=no \\\n+hide_output ./build.sh -j10 -m amd64 tools\n \n cd ../..\n-rm -rf gcc\n+\n+rm -rf usr\n+\n+cat > /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-gcc-sysroot <<'EOF'\n+#!/bin/bash\n+exec /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-gcc --sysroot=/x-tools/x86_64-unknown-netbsd/sysroot \"$@\"\n+EOF\n+\n+cat > /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-g++-sysroot <<'EOF'\n+#!/bin/bash\n+exec /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-g++ --sysroot=/x-tools/x86_64-unknown-netbsd/sysroot \"$@\"\n+EOF\n+\n+GCC_SHA1=`sha1sum -b /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-gcc | cut -d' ' -f1`\n+GPP_SHA1=`sha1sum -b /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-g++ | cut -d' ' -f1`\n+\n+echo \"# $GCC_SHA1\" >> /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-gcc-sysroot\n+echo \"# $GPP_SHA1\" >> /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-g++-sysroot\n+\n+chmod +x /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-gcc-sysroot\n+chmod +x /x-tools/x86_64-unknown-netbsd/bin/x86_64--netbsd-g++-sysroot"}, {"sha": "34f14ef53f8935e890f6459472aa02c971cbf677", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=d5580374d7eb8795a8188be4650bd5079a25c6b3", "patch": "@@ -536,17 +536,17 @@ impl<'a, I: DoubleEndedIterator + ?Sized> DoubleEndedIterator for &'a mut I {\n /// #     }\n /// # }\n /// impl ExactSizeIterator for Counter {\n-///     // We already have the number of iterations, so we can use it directly.\n+///     // We can easily calculate the remaining number of iterations.\n ///     fn len(&self) -> usize {\n-///         self.count\n+///         5 - self.count\n ///     }\n /// }\n ///\n /// // And now we can use it!\n ///\n /// let counter = Counter::new();\n ///\n-/// assert_eq!(0, counter.len());\n+/// assert_eq!(5, counter.len());\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait ExactSizeIterator: Iterator {"}, {"sha": "7cd0b26940d9118284e3adcc03b35a3fda36972d", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=d5580374d7eb8795a8188be4650bd5079a25c6b3", "patch": "@@ -46,7 +46,7 @@ impl ObjectSafetyViolation {\n                 \"the trait cannot require that `Self : Sized`\".into(),\n             ObjectSafetyViolation::SupertraitSelf =>\n                 \"the trait cannot use `Self` as a type parameter \\\n-                 in the supertrait listing\".into(),\n+                 in the supertraits or where-clauses\".into(),\n             ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod) =>\n                 format!(\"method `{}` has no receiver\", name).into(),\n             ObjectSafetyViolation::Method(name, MethodViolationCode::ReferencesSelf) =>"}, {"sha": "36d1ae74e9114546b5a5f4fa6164bd8e9d417e78", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 43, "deletions": 49, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=d5580374d7eb8795a8188be4650bd5079a25c6b3", "patch": "@@ -2059,55 +2059,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn associated_item(self, def_id: DefId) -> AssociatedItem {\n-        if !def_id.is_local() {\n-            return queries::associated_item::get(self, DUMMY_SP, def_id);\n-        }\n-\n-        self.maps.associated_item.memoize(def_id, || {\n-            // When the user asks for a given associated item, we\n-            // always go ahead and convert all the associated items in\n-            // the container. Note that we are also careful only to\n-            // ever register a read on the *container* of the assoc\n-            // item, not the assoc item itself. This prevents changes\n-            // in the details of an item (for example, the type to\n-            // which an associated type is bound) from contaminating\n-            // those tasks that just need to scan the names of items\n-            // and so forth.\n-\n-            let id = self.hir.as_local_node_id(def_id).unwrap();\n-            let parent_id = self.hir.get_parent(id);\n-            let parent_def_id = self.hir.local_def_id(parent_id);\n-            let parent_item = self.hir.expect_item(parent_id);\n-            match parent_item.node {\n-                hir::ItemImpl(.., ref impl_trait_ref, _, ref impl_item_refs) => {\n-                    for impl_item_ref in impl_item_refs {\n-                        let assoc_item =\n-                            self.associated_item_from_impl_item_ref(parent_def_id,\n-                                                                    impl_trait_ref.is_some(),\n-                                                                    impl_item_ref);\n-                        self.maps.associated_item.borrow_mut()\n-                            .insert(assoc_item.def_id, assoc_item);\n-                    }\n-                }\n-\n-                hir::ItemTrait(.., ref trait_item_refs) => {\n-                    for trait_item_ref in trait_item_refs {\n-                        let assoc_item =\n-                            self.associated_item_from_trait_item_ref(parent_def_id, trait_item_ref);\n-                        self.maps.associated_item.borrow_mut()\n-                            .insert(assoc_item.def_id, assoc_item);\n-                    }\n-                }\n-\n-                ref r => {\n-                    panic!(\"unexpected container of associated items: {:?}\", r)\n-                }\n-            }\n-\n-            // memoize wants us to return something, so return\n-            // the one we generated for this def-id\n-            *self.maps.associated_item.borrow().get(&def_id).unwrap()\n-        })\n+        queries::associated_item::get(self, DUMMY_SP, def_id)\n     }\n \n     fn associated_item_from_trait_item_ref(self,\n@@ -2643,3 +2595,45 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n }\n+\n+fn associated_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n+    -> AssociatedItem\n+{\n+    let id = tcx.hir.as_local_node_id(def_id).unwrap();\n+    let parent_id = tcx.hir.get_parent(id);\n+    let parent_def_id = tcx.hir.local_def_id(parent_id);\n+    let parent_item = tcx.hir.expect_item(parent_id);\n+    match parent_item.node {\n+        hir::ItemImpl(.., ref impl_trait_ref, _, ref impl_item_refs) => {\n+            if let Some(impl_item_ref) = impl_item_refs.iter().find(|i| i.id.node_id == id) {\n+                let assoc_item =\n+                    tcx.associated_item_from_impl_item_ref(parent_def_id,\n+                                                            impl_trait_ref.is_some(),\n+                                                            impl_item_ref);\n+                debug_assert_eq!(assoc_item.def_id, def_id);\n+                return assoc_item;\n+            }\n+        }\n+\n+        hir::ItemTrait(.., ref trait_item_refs) => {\n+            if let Some(trait_item_ref) = trait_item_refs.iter().find(|i| i.id.node_id == id) {\n+                let assoc_item =\n+                    tcx.associated_item_from_trait_item_ref(parent_def_id, trait_item_ref);\n+                debug_assert_eq!(assoc_item.def_id, def_id);\n+                return assoc_item;\n+            }\n+        }\n+\n+        ref r => {\n+            panic!(\"unexpected container of associated items: {:?}\", r)\n+        }\n+    }\n+    panic!(\"associated item not found for def_id: {:?}\", def_id);\n+}\n+\n+pub fn provide(providers: &mut ty::maps::Providers) {\n+    *providers = ty::maps::Providers {\n+        associated_item,\n+        ..*providers\n+    };\n+}"}, {"sha": "d37553d7d660ea8b3374df940bc229ea9b2137b7", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=d5580374d7eb8795a8188be4650bd5079a25c6b3", "patch": "@@ -889,6 +889,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     let mut local_providers = ty::maps::Providers::default();\n     mir::provide(&mut local_providers);\n     typeck::provide(&mut local_providers);\n+    ty::provide(&mut local_providers);\n \n     let mut extern_providers = ty::maps::Providers::default();\n     cstore::provide(&mut extern_providers);"}, {"sha": "42717ec289c34d019bf2b6f1a462b214f39fab59", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=d5580374d7eb8795a8188be4650bd5079a25c6b3", "patch": "@@ -131,6 +131,12 @@ fn main() {\n         if is_crossed && flag.starts_with(\"-m\") {\n             continue;\n         }\n+\n+        // -Wdate-time is not supported by the netbsd cross compiler\n+        if is_crossed && target.contains(\"netbsd\") && flag.contains(\"date-time\") {\n+            continue;\n+        }\n+\n         cfg.flag(flag);\n     }\n \n@@ -227,16 +233,21 @@ fn main() {\n         }\n     }\n \n-    // OpenBSD has a particular C++ runtime library name\n+    let llvm_static_stdcpp = env::var_os(\"LLVM_STATIC_STDCPP\");\n+\n     let stdcppname = if target.contains(\"openbsd\") {\n+        // OpenBSD has a particular C++ runtime library name\n         \"estdc++\"\n+    } else if target.contains(\"netbsd\") && llvm_static_stdcpp.is_some() {\n+        // NetBSD uses a separate library when relocation is required\n+        \"stdc++_pic\"\n     } else {\n         \"stdc++\"\n     };\n \n     // C++ runtime library\n     if !target.contains(\"msvc\") {\n-        if let Some(s) = env::var_os(\"LLVM_STATIC_STDCPP\") {\n+        if let Some(s) = llvm_static_stdcpp {\n             assert!(!cxxflags.contains(\"stdlib=libc++\"));\n             let path = PathBuf::from(s);\n             println!(\"cargo:rustc-link-search=native={}\","}, {"sha": "649e90599345bf93aa5ee6bc0f7e4e8e3dad75ec", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 38, "deletions": 26, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d5580374d7eb8795a8188be4650bd5079a25c6b3", "patch": "@@ -4626,7 +4626,7 @@ impl<'a> Parser<'a> {\n \n         let mut attrs = self.parse_outer_attributes()?;\n         let lo = self.span.lo;\n-        let vis = self.parse_visibility()?;\n+        let vis = self.parse_visibility(false)?;\n         let defaultness = self.parse_defaultness()?;\n         let (name, node) = if self.eat_keyword(keywords::Type) {\n             let name = self.parse_ident()?;\n@@ -4939,25 +4939,8 @@ impl<'a> Parser<'a> {\n             |p| {\n                 let attrs = p.parse_outer_attributes()?;\n                 let lo = p.span.lo;\n-                let mut vis = p.parse_visibility()?;\n-                let ty_is_interpolated =\n-                    p.token.is_interpolated() || p.look_ahead(1, |t| t.is_interpolated());\n-                let mut ty = p.parse_ty()?;\n-\n-                // Handle `pub(path) type`, in which `vis` will be `pub` and `ty` will be `(path)`.\n-                if vis == Visibility::Public && !ty_is_interpolated &&\n-                   p.token != token::Comma && p.token != token::CloseDelim(token::Paren) {\n-                    ty = if let TyKind::Paren(ref path_ty) = ty.node {\n-                        if let TyKind::Path(None, ref path) = path_ty.node {\n-                            vis = Visibility::Restricted { path: P(path.clone()), id: path_ty.id };\n-                            Some(p.parse_ty()?)\n-                        } else {\n-                            None\n-                        }\n-                    } else {\n-                        None\n-                    }.unwrap_or(ty);\n-                }\n+                let vis = p.parse_visibility(true)?;\n+                let ty = p.parse_ty()?;\n                 Ok(StructField {\n                     span: mk_sp(lo, p.span.hi),\n                     vis: vis,\n@@ -4996,18 +4979,25 @@ impl<'a> Parser<'a> {\n     fn parse_struct_decl_field(&mut self) -> PResult<'a, StructField> {\n         let attrs = self.parse_outer_attributes()?;\n         let lo = self.span.lo;\n-        let vis = self.parse_visibility()?;\n+        let vis = self.parse_visibility(false)?;\n         self.parse_single_struct_field(lo, vis, attrs)\n     }\n \n-    // Parse `pub`, `pub(crate)` and `pub(in path)` plus shortcuts\n-    // `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.\n-    fn parse_visibility(&mut self) -> PResult<'a, Visibility> {\n+    /// Parse `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `pub(self)` for `pub(in self)`\n+    /// and `pub(super)` for `pub(in super)`.  If the following element can't be a tuple (i.e. it's\n+    /// a function definition, it's not a tuple struct field) and the contents within the parens\n+    /// isn't valid, emit a proper diagnostic.\n+    fn parse_visibility(&mut self, can_take_tuple: bool) -> PResult<'a, Visibility> {\n         if !self.eat_keyword(keywords::Pub) {\n             return Ok(Visibility::Inherited)\n         }\n \n         if self.check(&token::OpenDelim(token::Paren)) {\n+            let start_span = self.span;\n+            // We don't `self.bump()` the `(` yet because this might be a struct definition where\n+            // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.\n+            // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so\n+            // by the following tokens.\n             if self.look_ahead(1, |t| t.is_keyword(keywords::Crate)) {\n                 // `pub(crate)`\n                 self.bump(); // `(`\n@@ -5032,6 +5022,28 @@ impl<'a> Parser<'a> {\n                 let vis = Visibility::Restricted { path: P(path), id: ast::DUMMY_NODE_ID };\n                 self.expect(&token::CloseDelim(token::Paren))?; // `)`\n                 return Ok(vis)\n+            } else if !can_take_tuple {  // Provide this diagnostic if this is not a tuple struct\n+                // `pub(something) fn ...` or `struct X { pub(something) y: Z }`\n+                self.bump(); // `(`\n+                let msg = \"incorrect visibility restriction\";\n+                let suggestion = r##\"some possible visibility restrictions are:\n+`pub(crate)`: visible only on the current crate\n+`pub(super)`: visible only in the current module's parent\n+`pub(in path::to::module)`: visible only on the specified path\"##;\n+                let path = self.parse_path(PathStyle::Mod)?;\n+                let path_span = self.prev_span;\n+                let help_msg = format!(\"to make this visible only to module `{}`, add `in` before \\\n+                                       the path:\",\n+                                       path);\n+                self.expect(&token::CloseDelim(token::Paren))?;  // `)`\n+                let sp = Span {\n+                    lo: start_span.lo,\n+                    hi: self.prev_span.hi,\n+                    expn_id: start_span.expn_id,\n+                };\n+                let mut err = self.span_fatal_help(sp, &msg, &suggestion);\n+                err.span_suggestion(path_span, &help_msg, format!(\"in {}\", path));\n+                err.emit();  // emit diagnostic, but continue with public visibility\n             }\n         }\n \n@@ -5508,7 +5520,7 @@ impl<'a> Parser<'a> {\n \n         let lo = self.span.lo;\n \n-        let visibility = self.parse_visibility()?;\n+        let visibility = self.parse_visibility(false)?;\n \n         if self.eat_keyword(keywords::Use) {\n             // USE ITEM\n@@ -5787,7 +5799,7 @@ impl<'a> Parser<'a> {\n     fn parse_foreign_item(&mut self) -> PResult<'a, Option<ForeignItem>> {\n         let attrs = self.parse_outer_attributes()?;\n         let lo = self.span.lo;\n-        let visibility = self.parse_visibility()?;\n+        let visibility = self.parse_visibility(false)?;\n \n         if self.check_keyword(keywords::Static) {\n             // FOREIGN STATIC ITEM"}, {"sha": "a93c056c410c6d5e48f108905ea6e62e07b0d2bb", "filename": "src/test/compile-fail/object-safety-supertrait-mentions-Self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Ftest%2Fcompile-fail%2Fobject-safety-supertrait-mentions-Self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Ftest%2Fcompile-fail%2Fobject-safety-supertrait-mentions-Self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-supertrait-mentions-Self.rs?ref=d5580374d7eb8795a8188be4650bd5079a25c6b3", "patch": "@@ -24,7 +24,7 @@ fn make_bar<T:Bar<u32>>(t: &T) -> &Bar<u32> {\n \n fn make_baz<T:Baz>(t: &T) -> &Baz {\n     //~^ ERROR E0038\n-    //~| NOTE the trait cannot use `Self` as a type parameter in the supertrait listing\n+    //~| NOTE the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n     //~| NOTE the trait `Baz` cannot be made into an object\n     t\n }"}, {"sha": "d17b604717e70bc7de0b38862fdd30b0cc8311b9", "filename": "src/test/compile-fail/privacy/restricted/tuple-struct-fields/test.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftuple-struct-fields%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftuple-struct-fields%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftuple-struct-fields%2Ftest.rs?ref=d5580374d7eb8795a8188be4650bd5079a25c6b3", "patch": "@@ -10,7 +10,8 @@\n \n mod foo {\n     type T = ();\n-    struct S1(pub(foo) (), pub(T), pub(crate) (), pub(((), T)));\n-    struct S2(pub((foo)) ()); //~ ERROR expected `,`, found `(`\n-                              //~| ERROR expected one of `;` or `where`, found `(`\n+    struct S1(pub(in foo) (), pub(T), pub(crate) (), pub(((), T)));\n+    struct S2(pub((foo)) ());\n+    //~^ ERROR expected `,`, found `(`\n+    //~| ERROR expected one of `;` or `where`, found `(`\n }"}, {"sha": "166d5e27e8d96ce8d75a26ce0dc70cb0f53c6f9b", "filename": "src/test/compile-fail/privacy/restricted/tuple-struct-fields/test2.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftuple-struct-fields%2Ftest2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftuple-struct-fields%2Ftest2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftuple-struct-fields%2Ftest2.rs?ref=d5580374d7eb8795a8188be4650bd5079a25c6b3", "patch": "@@ -11,9 +11,10 @@\n macro_rules! define_struct {\n     ($t:ty) => {\n         struct S1(pub $t);\n-        struct S2(pub (foo) ());\n-        struct S3(pub $t ()); //~ ERROR expected `,`, found `(`\n-                              //~| ERROR expected one of `;` or `where`, found `(`\n+        struct S2(pub (in foo) ());\n+        struct S3(pub $t ());\n+        //~^ ERROR expected `,`, found `(`\n+        //~| ERROR expected one of `;` or `where`, found `(`\n     }\n }\n "}, {"sha": "edab175f4cd91d3c2e7a5d9a63631eb93e57f508", "filename": "src/test/compile-fail/privacy/restricted/tuple-struct-fields/test3.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftuple-struct-fields%2Ftest3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftuple-struct-fields%2Ftest3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftuple-struct-fields%2Ftest3.rs?ref=d5580374d7eb8795a8188be4650bd5079a25c6b3", "patch": "@@ -11,9 +11,10 @@\n macro_rules! define_struct {\n     ($t:ty) => {\n         struct S1(pub($t));\n-        struct S2(pub (foo) ());\n-        struct S3(pub($t) ()); //~ ERROR expected `,`, found `(`\n-                               //~| ERROR expected one of `;` or `where`, found `(`\n+        struct S2(pub (in foo) ());\n+        struct S3(pub($t) ());\n+        //~^ ERROR expected `,`, found `(`\n+        //~| ERROR expected one of `;` or `where`, found `(`\n     }\n }\n "}, {"sha": "13514310371cc95f1e1ae4a4f1c024f62ee096cb", "filename": "src/test/ui/pub/pub-restricted-error-fn.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.rs?ref=d5580374d7eb8795a8188be4650bd5079a25c6b3", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(pub_restricted)]\n+\n+pub(crate) () fn foo() {}"}, {"sha": "470e8331247851848b2cecf66b5c87c66d1fd863", "filename": "src/test/ui/pub/pub-restricted-error-fn.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.stderr?ref=d5580374d7eb8795a8188be4650bd5079a25c6b3", "patch": "@@ -0,0 +1,8 @@\n+error: unmatched visibility `pub`\n+  --> $DIR/pub-restricted-error-fn.rs:13:10\n+   |\n+13 | pub(crate) () fn foo() {}\n+   |          ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "99af031899ab6758b3c2d343d3fe6e08751bf70e", "filename": "src/test/ui/pub/pub-restricted-error.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.rs?ref=d5580374d7eb8795a8188be4650bd5079a25c6b3", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(pub_restricted)]\n+\n+struct Bar(pub(()));\n+\n+struct Foo {\n+    pub(crate) () foo: usize,\n+}\n+\n+"}, {"sha": "b8b4c80778d968d05f5296d9a8acb2459e8974dd", "filename": "src/test/ui/pub/pub-restricted-error.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.stderr?ref=d5580374d7eb8795a8188be4650bd5079a25c6b3", "patch": "@@ -0,0 +1,8 @@\n+error: expected identifier, found `(`\n+  --> $DIR/pub-restricted-error.rs:16:16\n+   |\n+16 |     pub(crate) () foo: usize,\n+   |                ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "3f74285717a7b6ff1046d737806667bfb6d2a14c", "filename": "src/test/ui/pub/pub-restricted-non-path.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-non-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-non-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-non-path.rs?ref=d5580374d7eb8795a8188be4650bd5079a25c6b3", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(pub_restricted)]\n+\n+pub (.) fn afn() {}\n+\n+fn main() {}"}, {"sha": "ebfccc4d720451f0e168d5c606792cdb64c68d45", "filename": "src/test/ui/pub/pub-restricted-non-path.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-non-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-non-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-non-path.stderr?ref=d5580374d7eb8795a8188be4650bd5079a25c6b3", "patch": "@@ -0,0 +1,8 @@\n+error: expected identifier, found `.`\n+  --> $DIR/pub-restricted-non-path.rs:13:6\n+   |\n+13 | pub (.) fn afn() {}\n+   |      ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "48e487f71a7910681e4a63c870dee5c455318cec", "filename": "src/test/ui/pub/pub-restricted.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.rs?ref=d5580374d7eb8795a8188be4650bd5079a25c6b3", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(pub_restricted)]\n+\n+mod a {}\n+\n+pub (a) fn afn() {}\n+pub (b) fn bfn() {}\n+pub fn privfn() {}\n+mod x {\n+    mod y {\n+        pub (in x) fn foo() {}\n+        pub (super) fn bar() {}\n+        pub (crate) fn qux() {}\n+    }\n+}\n+\n+mod y {\n+    struct Foo {\n+        pub (crate) c: usize,\n+        pub (super) s: usize,\n+        valid_private: usize,\n+        pub (in y) valid_in_x: usize,\n+        pub (a) invalid: usize,\n+        pub (in x) non_parent_invalid: usize,\n+    }\n+}\n+\n+fn main() {}\n\\ No newline at end of file"}, {"sha": "5bc230e8da3775cda4d7c05ef3d261c0aed30361", "filename": "src/test/ui/pub/pub-restricted.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5580374d7eb8795a8188be4650bd5079a25c6b3/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.stderr?ref=d5580374d7eb8795a8188be4650bd5079a25c6b3", "patch": "@@ -0,0 +1,47 @@\n+error: incorrect visibility restriction\n+  --> $DIR/pub-restricted.rs:15:5\n+   |\n+15 | pub (a) fn afn() {}\n+   |     ^^^\n+   |\n+   = help: some possible visibility restrictions are:\n+           `pub(crate)`: visible only on the current crate\n+           `pub(super)`: visible only in the current module's parent\n+           `pub(in path::to::module)`: visible only on the specified path\n+help: to make this visible only to module `a`, add `in` before the path:\n+   | pub (in a) fn afn() {}\n+\n+error: incorrect visibility restriction\n+  --> $DIR/pub-restricted.rs:16:5\n+   |\n+16 | pub (b) fn bfn() {}\n+   |     ^^^\n+   |\n+   = help: some possible visibility restrictions are:\n+           `pub(crate)`: visible only on the current crate\n+           `pub(super)`: visible only in the current module's parent\n+           `pub(in path::to::module)`: visible only on the specified path\n+help: to make this visible only to module `b`, add `in` before the path:\n+   | pub (in b) fn bfn() {}\n+\n+error: incorrect visibility restriction\n+  --> $DIR/pub-restricted.rs:32:13\n+   |\n+32 |         pub (a) invalid: usize,\n+   |             ^^^\n+   |\n+   = help: some possible visibility restrictions are:\n+           `pub(crate)`: visible only on the current crate\n+           `pub(super)`: visible only in the current module's parent\n+           `pub(in path::to::module)`: visible only on the specified path\n+help: to make this visible only to module `a`, add `in` before the path:\n+   |         pub (in a) invalid: usize,\n+\n+error: visibilities can only be restricted to ancestor modules\n+  --> $DIR/pub-restricted.rs:33:17\n+   |\n+33 |         pub (in x) non_parent_invalid: usize,\n+   |                 ^\n+\n+error: aborting due to 4 previous errors\n+"}]}