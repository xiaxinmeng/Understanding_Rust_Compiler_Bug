{"sha": "754d51ebe40df99748bf224b4de7f43d5a345bd3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NGQ1MWViZTQwZGY5OTc0OGJmMjI0YjRkZTdmNDNkNWEzNDViZDM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-08-23T19:14:06Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-08-23T19:16:48Z"}, "message": "useful debug printouts\n\nThe changes to dumping expressions seem particularly useful", "tree": {"sha": "45ffca6d8926c98e09978b83f6f3aa23adeb985c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45ffca6d8926c98e09978b83f6f3aa23adeb985c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/754d51ebe40df99748bf224b4de7f43d5a345bd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/754d51ebe40df99748bf224b4de7f43d5a345bd3", "html_url": "https://github.com/rust-lang/rust/commit/754d51ebe40df99748bf224b4de7f43d5a345bd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/754d51ebe40df99748bf224b4de7f43d5a345bd3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af15e529db5a7b31245d0b03d7af6dcb5ea21321", "url": "https://api.github.com/repos/rust-lang/rust/commits/af15e529db5a7b31245d0b03d7af6dcb5ea21321", "html_url": "https://github.com/rust-lang/rust/commit/af15e529db5a7b31245d0b03d7af6dcb5ea21321"}], "stats": {"total": 44, "additions": 31, "deletions": 13}, "files": [{"sha": "0397021c291b65c42bbd7dc110ad06fabfd1c8f0", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/754d51ebe40df99748bf224b4de7f43d5a345bd3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754d51ebe40df99748bf224b4de7f43d5a345bd3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=754d51ebe40df99748bf224b4de7f43d5a345bd3", "patch": "@@ -14,6 +14,7 @@ use rustc_trait_selection::traits::{\n };\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n+    #[instrument(skip(self), level=\"debug\")]\n     pub fn check_match(\n         &self,\n         expr: &'tcx hir::Expr<'tcx>,\n@@ -26,6 +27,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let acrb = arms_contain_ref_bindings(arms);\n         let scrutinee_ty = self.demand_scrutinee_type(scrut, acrb, arms.is_empty());\n+        debug!(?scrutinee_ty);\n \n         // If there are no arms, that is a diverging match; a special case.\n         if arms.is_empty() {"}, {"sha": "14550690e63e01e542cfab488bb84b2f480d1679", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/754d51ebe40df99748bf224b4de7f43d5a345bd3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754d51ebe40df99748bf224b4de7f43d5a345bd3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=754d51ebe40df99748bf224b4de7f43d5a345bd3", "patch": "@@ -51,6 +51,7 @@ use rustc_trait_selection::traits::error_reporting::report_object_safety_error;\n \n /// Reifies a cast check to be checked once we have full type information for\n /// a function context.\n+#[derive(Debug)]\n pub struct CastCheck<'tcx> {\n     expr: &'tcx hir::Expr<'tcx>,\n     expr_ty: Ty<'tcx>,\n@@ -603,12 +604,11 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n         });\n     }\n \n+    #[instrument(skip(fcx), level = \"debug\")]\n     pub fn check(mut self, fcx: &FnCtxt<'a, 'tcx>) {\n         self.expr_ty = fcx.structurally_resolved_type(self.expr.span, self.expr_ty);\n         self.cast_ty = fcx.structurally_resolved_type(self.cast_span, self.cast_ty);\n \n-        debug!(\"check_cast({}, {:?} as {:?})\", self.expr.hir_id, self.expr_ty, self.cast_ty);\n-\n         if !fcx.type_is_known_to_be_sized_modulo_regions(self.cast_ty, self.span) {\n             self.report_cast_to_unsized_type(fcx);\n         } else if self.expr_ty.references_error() || self.cast_ty.references_error() {"}, {"sha": "040524df9c7c935a1d288738236608a0430fefa2", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/754d51ebe40df99748bf224b4de7f43d5a345bd3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754d51ebe40df99748bf224b4de7f43d5a345bd3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=754d51ebe40df99748bf224b4de7f43d5a345bd3", "patch": "@@ -1328,6 +1328,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n     /// The inner coercion \"engine\". If `expression` is `None`, this\n     /// is a forced-unit case, and hence `expression_ty` must be\n     /// `Nil`.\n+    #[instrument(skip(self,fcx,augment_error,label_expression_as_expected), level=\"debug\")]\n     crate fn coerce_inner<'a>(\n         &mut self,\n         fcx: &FnCtxt<'a, 'tcx>,"}, {"sha": "7880369e6c2937c321ee9666f9cb2161f9fabf29", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/754d51ebe40df99748bf224b4de7f43d5a345bd3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754d51ebe40df99748bf224b4de7f43d5a345bd3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=754d51ebe40df99748bf224b4de7f43d5a345bd3", "patch": "@@ -156,12 +156,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Note that inspecting a type's structure *directly* may expose the fact\n     /// that there are actually multiple representations for `Error`, so avoid\n     /// that when err needs to be handled differently.\n+    #[instrument(skip(self), level=\"debug\")]\n     pub(super) fn check_expr_with_expectation(\n         &self,\n         expr: &'tcx hir::Expr<'tcx>,\n         expected: Expectation<'tcx>,\n     ) -> Ty<'tcx> {\n-        debug!(\">> type-checking: expected={:?}, expr={:?} \", expected, expr);\n+        if self.tcx().sess.verbose() {\n+            // make this code only run with -Zverbose because it is probably slow\n+            if let Ok(lint_str) = self.tcx.sess.source_map().span_to_snippet(expr.span) {\n+                if !lint_str.contains(\"\\n\") {\n+                    debug!(\"expr text: {}\", lint_str);\n+                } else {\n+                    let mut lines = lint_str.lines();\n+                    if let Some(line0) = lines.next() {\n+                        let remaining_lines = lines.count();\n+                        debug!(\"expr text: {}\", line0);\n+                        debug!(\"expr text: ...(and {} more lines)\", remaining_lines);\n+                    }\n+                }\n+            }\n+            }\n \n         // True if `expr` is a `Try::from_ok(())` that is a result of desugaring a try block\n         // without the final expr (e.g. `try { return; }`). We don't want to generate an\n@@ -1049,6 +1064,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let mut deferred_cast_checks = self.deferred_cast_checks.borrow_mut();\n             match cast::CastCheck::new(self, e, t_expr, t_cast, t.span, expr.span) {\n                 Ok(cast_check) => {\n+                    debug!(\n+                        \"check_expr_cast: deferring cast from {:?} to {:?}: {:?}\",\n+                        t_cast,\n+                        t_expr,\n+                        cast_check,\n+                    );\n                     deferred_cast_checks.push(cast_check);\n                     t_cast\n                 }"}, {"sha": "b624e07374ec7b010e5af881b6d401618c5c8bd4", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/754d51ebe40df99748bf224b4de7f43d5a345bd3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754d51ebe40df99748bf224b4de7f43d5a345bd3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=754d51ebe40df99748bf224b4de7f43d5a345bd3", "patch": "@@ -29,6 +29,7 @@ use std::slice;\n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub(in super::super) fn check_casts(&self) {\n         let mut deferred_cast_checks = self.deferred_cast_checks.borrow_mut();\n+        debug!(\"FnCtxt::check_casts: {} deferred checks\", deferred_cast_checks.len());\n         for cast in deferred_cast_checks.drain(..) {\n             cast.check(self);\n         }"}, {"sha": "08fb6793ac0bdf10e701f605620cfef6d50e5846", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/754d51ebe40df99748bf224b4de7f43d5a345bd3/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754d51ebe40df99748bf224b4de7f43d5a345bd3/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=754d51ebe40df99748bf224b4de7f43d5a345bd3", "patch": "@@ -120,9 +120,8 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         }\n     }\n \n+    #[instrument(skip(self), level = \"debug\")]\n     pub fn consume_body(&mut self, body: &hir::Body<'_>) {\n-        debug!(\"consume_body(body={:?})\", body);\n-\n         for param in body.params {\n             let param_ty = return_if_err!(self.mc.pat_ty_adjusted(&param.pat));\n             debug!(\"consume_body: param_ty = {:?}\", param_ty);\n@@ -243,7 +242,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 let ExprUseVisitor { ref mc, body_owner: _, delegate: _ } = *self;\n                 let mut needs_to_be_read = false;\n                 for arm in arms.iter() {\n-                    match mc.cat_pattern(discr_place.clone(), &arm.pat, |place, pat| {\n+                    return_if_err!(mc.cat_pattern(discr_place.clone(), &arm.pat, |place, pat| {\n                         match &pat.kind {\n                             PatKind::Binding(.., opt_sub_pat) => {\n                                 // If the opt_sub_pat is None, than the binding does not count as\n@@ -290,13 +289,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                                 // examined\n                             }\n                         }\n-                    }) {\n-                        Ok(_) => (),\n-                        Err(_) => {\n-                            // If typeck failed, assume borrow is needed.\n-                            needs_to_be_read = true;\n-                        }\n-                    }\n+                    }));\n                 }\n \n                 if needs_to_be_read {"}]}