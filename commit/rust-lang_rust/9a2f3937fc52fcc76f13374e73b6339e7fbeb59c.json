{"sha": "9a2f3937fc52fcc76f13374e73b6339e7fbeb59c", "node_id": "C_kwDOAAsO6NoAKDlhMmYzOTM3ZmM1MmZjYzc2ZjEzMzc0ZTczYjYzMzllN2ZiZWI1OWM", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2023-01-13T07:54:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-13T07:54:22Z"}, "message": "Rollup merge of #106608 - compiler-errors:missing-generics-verbose, r=estebank\n\nRender missing generics suggestion verbosely\n\nIt's a bit easier to read like this, especially ones that are appending new generics onto an existing list, like \": `, T`\" which render somewhat poorly inline.\n\nAlso don't suggest `dyn` as a type parameter to add, even if technically that's valid in edition 2015.", "tree": {"sha": "fd99f71b00fa0d294d58fe7d46422911e2aadd2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd99f71b00fa0d294d58fe7d46422911e2aadd2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjwQ4uCRBK7hj4Ov3rIwAA4+IIALAnkukqDlhwcQSqwPwICiLr\niNXeqFFer5lcEDjqH/tbANcb5Mk9L95KxSperg0UFWibdnGgogRppTJeo37rWLW7\n6i05+n9JvZ8y3YupBrNb7VirKDZ7cskVpmKQEwp2wZst3X9m0hyZWcxbI/OFW85B\nKqZZlki232Ao7tDJVaH12R6j16TiUNh96rhsQQ4aDY09bVsuB/eZC7EYvW8AkmtI\n2FYslu0kT/zpyCF5IKnj9/6uRD5vLDWNGWsM/5ySX6VFtK/Q5a0sEQb7Fs8pkXwW\nggaEXUfZSYr7Ao+2V325QdOCGUmmPUTKnbqDe4iFqo+walRgIeRgZSUdkjmzmD8=\n=vHxm\n-----END PGP SIGNATURE-----\n", "payload": "tree fd99f71b00fa0d294d58fe7d46422911e2aadd2c\nparent 279f1c9d8c26a8d227ae8ab806d262bb784b251b\nparent bf0623e3633a371374341265c8729f6255bfde4c\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1673596462 +0900\ncommitter GitHub <noreply@github.com> 1673596462 +0900\n\nRollup merge of #106608 - compiler-errors:missing-generics-verbose, r=estebank\n\nRender missing generics suggestion verbosely\n\nIt's a bit easier to read like this, especially ones that are appending new generics onto an existing list, like \": `, T`\" which render somewhat poorly inline.\n\nAlso don't suggest `dyn` as a type parameter to add, even if technically that's valid in edition 2015.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c", "html_url": "https://github.com/rust-lang/rust/commit/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "279f1c9d8c26a8d227ae8ab806d262bb784b251b", "url": "https://api.github.com/repos/rust-lang/rust/commits/279f1c9d8c26a8d227ae8ab806d262bb784b251b", "html_url": "https://github.com/rust-lang/rust/commit/279f1c9d8c26a8d227ae8ab806d262bb784b251b"}, {"sha": "bf0623e3633a371374341265c8729f6255bfde4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf0623e3633a371374341265c8729f6255bfde4c", "html_url": "https://github.com/rust-lang/rust/commit/bf0623e3633a371374341265c8729f6255bfde4c"}], "stats": {"total": 150, "additions": 94, "deletions": 56}, "files": [{"sha": "fb2aebbd18a3d8508e5d06fc0eeba2e58f479f7a", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=9a2f3937fc52fcc76f13374e73b6339e7fbeb59c", "patch": "@@ -167,7 +167,7 @@ impl<'a> Resolver<'a> {\n                 );\n                 err.emit();\n             } else if let Some((span, msg, sugg, appl)) = suggestion {\n-                err.span_suggestion(span, msg, sugg, appl);\n+                err.span_suggestion_verbose(span, msg, sugg, appl);\n                 err.emit();\n             } else if let [segment] = path.as_slice() && is_call {\n                 err.stash(segment.ident.span, rustc_errors::StashKey::CallIntoMethod);"}, {"sha": "d92b046d0b9f226fe3bb0f3111a09658acef8303", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=9a2f3937fc52fcc76f13374e73b6339e7fbeb59c", "patch": "@@ -2065,7 +2065,11 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         path: &[Segment],\n     ) -> Option<(Span, &'static str, String, Applicability)> {\n         let (ident, span) = match path {\n-            [segment] if !segment.has_generic_args && segment.ident.name != kw::SelfUpper => {\n+            [segment]\n+                if !segment.has_generic_args\n+                    && segment.ident.name != kw::SelfUpper\n+                    && segment.ident.name != kw::Dyn =>\n+            {\n                 (segment.ident.to_string(), segment.ident.span)\n             }\n             _ => return None,"}, {"sha": "efdd56dd47d396329b653c03804c8ed1db98d75c", "filename": "src/tools/clippy/tests/ui/crashes/ice-6252.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6252.stderr?ref=9a2f3937fc52fcc76f13374e73b6339e7fbeb59c", "patch": "@@ -17,9 +17,12 @@ error[E0412]: cannot find type `VAL` in this scope\n   --> $DIR/ice-6252.rs:10:63\n    |\n LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n-   |          -                                                    ^^^ not found in this scope\n-   |          |\n-   |          help: you might be missing a type parameter: `, VAL`\n+   |                                                               ^^^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | impl<N, M, VAL> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n+   |          +++++\n \n error[E0046]: not all trait items implemented, missing: `VAL`\n   --> $DIR/ice-6252.rs:10:1"}, {"sha": "9d4ea01152cc9d0374ede99fba3fb24d377a4548", "filename": "tests/ui/functions-closures/fn-help-with-err-generic-is-not-function.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/tests%2Fui%2Ffunctions-closures%2Ffn-help-with-err-generic-is-not-function.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/tests%2Fui%2Ffunctions-closures%2Ffn-help-with-err-generic-is-not-function.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions-closures%2Ffn-help-with-err-generic-is-not-function.stderr?ref=9a2f3937fc52fcc76f13374e73b6339e7fbeb59c", "patch": "@@ -2,9 +2,12 @@ error[E0412]: cannot find type `T` in this scope\n   --> $DIR/fn-help-with-err-generic-is-not-function.rs:2:13\n    |\n LL | impl Struct<T>\n-   |     -       ^ not found in this scope\n-   |     |\n-   |     help: you might be missing a type parameter: `<T>`\n+   |             ^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | impl<T> Struct<T>\n+   |     +++\n \n error[E0412]: cannot find type `T` in this scope\n   --> $DIR/fn-help-with-err-generic-is-not-function.rs:7:5"}, {"sha": "f4bd4d1e826a0d16224a5b76fe79c36e957fd590", "filename": "tests/ui/issues/issue-58712.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/tests%2Fui%2Fissues%2Fissue-58712.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/tests%2Fui%2Fissues%2Fissue-58712.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-58712.stderr?ref=9a2f3937fc52fcc76f13374e73b6339e7fbeb59c", "patch": "@@ -2,9 +2,12 @@ error[E0412]: cannot find type `DeviceId` in this scope\n   --> $DIR/issue-58712.rs:6:20\n    |\n LL | impl<H> AddrVec<H, DeviceId> {\n-   |       -            ^^^^^^^^ not found in this scope\n-   |       |\n-   |       help: you might be missing a type parameter: `, DeviceId`\n+   |                    ^^^^^^^^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | impl<H, DeviceId> AddrVec<H, DeviceId> {\n+   |       ++++++++++\n \n error[E0412]: cannot find type `DeviceId` in this scope\n   --> $DIR/issue-58712.rs:8:29"}, {"sha": "d154bfe0cb553daec484377669b5cfec1693e8b5", "filename": "tests/ui/issues/issue-77919.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/tests%2Fui%2Fissues%2Fissue-77919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/tests%2Fui%2Fissues%2Fissue-77919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-77919.stderr?ref=9a2f3937fc52fcc76f13374e73b6339e7fbeb59c", "patch": "@@ -13,9 +13,12 @@ error[E0412]: cannot find type `VAL` in this scope\n   --> $DIR/issue-77919.rs:11:63\n    |\n LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n-   |          -                                                    ^^^ not found in this scope\n-   |          |\n-   |          help: you might be missing a type parameter: `, VAL`\n+   |                                                               ^^^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | impl<N, M, VAL> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n+   |          +++++\n \n error[E0046]: not all trait items implemented, missing: `VAL`\n   --> $DIR/issue-77919.rs:11:1"}, {"sha": "bfa7459ab4a39088bb377be499d24dfce7b3b1a0", "filename": "tests/ui/issues/issue-86756.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/tests%2Fui%2Fissues%2Fissue-86756.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/tests%2Fui%2Fissues%2Fissue-86756.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-86756.stderr?ref=9a2f3937fc52fcc76f13374e73b6339e7fbeb59c", "patch": "@@ -9,8 +9,6 @@ LL | trait Foo<T, T = T> {}\n error[E0412]: cannot find type `dyn` in this scope\n   --> $DIR/issue-86756.rs:5:10\n    |\n-LL | fn eq<A, B>() {\n-   |           - help: you might be missing a type parameter: `, dyn`\n LL |     eq::<dyn, Foo>\n    |          ^^^ not found in this scope\n "}, {"sha": "0cae01bd1e32988a5d32043d8ed8f4303e809819", "filename": "tests/ui/parser/dyn-trait-compatibility.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/tests%2Fui%2Fparser%2Fdyn-trait-compatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/tests%2Fui%2Fparser%2Fdyn-trait-compatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fdyn-trait-compatibility.stderr?ref=9a2f3937fc52fcc76f13374e73b6339e7fbeb59c", "patch": "@@ -26,17 +26,13 @@ error[E0412]: cannot find type `dyn` in this scope\n   --> $DIR/dyn-trait-compatibility.rs:5:15\n    |\n LL | type A2 = dyn<dyn, dyn>;\n-   |        -      ^^^ not found in this scope\n-   |        |\n-   |        help: you might be missing a type parameter: `<dyn>`\n+   |               ^^^ not found in this scope\n \n error[E0412]: cannot find type `dyn` in this scope\n   --> $DIR/dyn-trait-compatibility.rs:5:20\n    |\n LL | type A2 = dyn<dyn, dyn>;\n-   |        -           ^^^ not found in this scope\n-   |        |\n-   |        help: you might be missing a type parameter: `<dyn>`\n+   |                    ^^^ not found in this scope\n \n error[E0412]: cannot find type `dyn` in this scope\n   --> $DIR/dyn-trait-compatibility.rs:9:11\n@@ -48,9 +44,7 @@ error[E0412]: cannot find type `dyn` in this scope\n   --> $DIR/dyn-trait-compatibility.rs:9:16\n    |\n LL | type A3 = dyn<<dyn as dyn>::dyn>;\n-   |        -       ^^^ not found in this scope\n-   |        |\n-   |        help: you might be missing a type parameter: `<dyn>`\n+   |                ^^^ not found in this scope\n \n error: aborting due to 8 previous errors\n "}, {"sha": "934ba87bbaa8872fd649cbc22920c9c4a5c7bb05", "filename": "tests/ui/suggestions/type-not-found-in-adt-field.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/tests%2Fui%2Fsuggestions%2Ftype-not-found-in-adt-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/tests%2Fui%2Fsuggestions%2Ftype-not-found-in-adt-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Ftype-not-found-in-adt-field.stderr?ref=9a2f3937fc52fcc76f13374e73b6339e7fbeb59c", "patch": "@@ -7,10 +7,13 @@ LL |     m: Vec<Someunknownname<String, ()>>,\n error[E0412]: cannot find type `K` in this scope\n   --> $DIR/type-not-found-in-adt-field.rs:6:8\n    |\n-LL | struct OtherStruct {\n-   |                   - help: you might be missing a type parameter: `<K>`\n LL |     m: K,\n    |        ^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | struct OtherStruct<K> {\n+   |                   +++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "45bd533b5c6f0adc830330bf9100b94c31bf5bf5", "filename": "tests/ui/traits/ignore-err-impls.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/tests%2Fui%2Ftraits%2Fignore-err-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/tests%2Fui%2Ftraits%2Fignore-err-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fignore-err-impls.stderr?ref=9a2f3937fc52fcc76f13374e73b6339e7fbeb59c", "patch": "@@ -2,9 +2,12 @@ error[E0412]: cannot find type `Type` in this scope\n   --> $DIR/ignore-err-impls.rs:6:14\n    |\n LL | impl Generic<Type> for S {}\n-   |     -        ^^^^ not found in this scope\n-   |     |\n-   |     help: you might be missing a type parameter: `<Type>`\n+   |              ^^^^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | impl<Type> Generic<Type> for S {}\n+   |     ++++++\n \n error: aborting due to previous error\n "}, {"sha": "aa8384e98053969edf0601e4739900f1c7a843f4", "filename": "tests/ui/traits/issue-50480.stderr", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/tests%2Fui%2Ftraits%2Fissue-50480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/tests%2Fui%2Ftraits%2Fissue-50480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-50480.stderr?ref=9a2f3937fc52fcc76f13374e73b6339e7fbeb59c", "patch": "@@ -2,9 +2,12 @@ error[E0412]: cannot find type `N` in this scope\n   --> $DIR/issue-50480.rs:3:12\n    |\n LL | struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n-   |           -^ not found in this scope\n-   |           |\n-   |           help: you might be missing a type parameter: `<N>`\n+   |            ^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | struct Foo<N>(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n+   |           +++\n \n error[E0412]: cannot find type `NotDefined` in this scope\n   --> $DIR/issue-50480.rs:3:15\n@@ -16,17 +19,23 @@ error[E0412]: cannot find type `N` in this scope\n   --> $DIR/issue-50480.rs:3:12\n    |\n LL | struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n-   |           -^ not found in this scope\n-   |           |\n-   |           help: you might be missing a type parameter: `<N>`\n+   |            ^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | struct Foo<N>(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n+   |           +++\n \n error[E0412]: cannot find type `NotDefined` in this scope\n   --> $DIR/issue-50480.rs:3:15\n    |\n LL | struct Foo(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n-   |           -   ^^^^^^^^^^ not found in this scope\n-   |           |\n-   |           help: you might be missing a type parameter: `<NotDefined>`\n+   |               ^^^^^^^^^^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | struct Foo<NotDefined>(N, NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n+   |           ++++++++++++\n \n error[E0412]: cannot find type `N` in this scope\n   --> $DIR/issue-50480.rs:12:18"}, {"sha": "1675edc9ff0b99715dd63dbdfcc5c8e96f337ad5", "filename": "tests/ui/traits/issue-75627.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/tests%2Fui%2Ftraits%2Fissue-75627.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/tests%2Fui%2Ftraits%2Fissue-75627.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-75627.stderr?ref=9a2f3937fc52fcc76f13374e73b6339e7fbeb59c", "patch": "@@ -2,9 +2,12 @@ error[E0412]: cannot find type `T` in this scope\n   --> $DIR/issue-75627.rs:3:26\n    |\n LL | unsafe impl Send for Foo<T> {}\n-   |            -             ^ not found in this scope\n-   |            |\n-   |            help: you might be missing a type parameter: `<T>`\n+   |                          ^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | unsafe impl<T> Send for Foo<T> {}\n+   |            +++\n \n error: aborting due to previous error\n "}, {"sha": "8e7fd5f2557108ab1b59363d453cc8cf1b807ceb", "filename": "tests/ui/traits/issue-78372.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/tests%2Fui%2Ftraits%2Fissue-78372.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/tests%2Fui%2Ftraits%2Fissue-78372.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-78372.stderr?ref=9a2f3937fc52fcc76f13374e73b6339e7fbeb59c", "patch": "@@ -30,9 +30,12 @@ error[E0412]: cannot find type `MISC` in this scope\n   --> $DIR/issue-78372.rs:3:34\n    |\n LL | impl<T> DispatchFromDyn<Smaht<U, MISC>> for T {}\n-   |       -                          ^^^^ not found in this scope\n-   |       |\n-   |       help: you might be missing a type parameter: `, MISC`\n+   |                                  ^^^^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | impl<T, MISC> DispatchFromDyn<Smaht<U, MISC>> for T {}\n+   |       ++++++\n \n error[E0658]: use of unstable library feature 'dispatch_from_dyn'\n   --> $DIR/issue-78372.rs:1:5"}, {"sha": "b4591778f8e7b98c04c5d9a246c2e76289d0b060", "filename": "tests/ui/transmutability/malformed-program-gracefulness/unknown_dst.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/tests%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Funknown_dst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/tests%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Funknown_dst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Funknown_dst.stderr?ref=9a2f3937fc52fcc76f13374e73b6339e7fbeb59c", "patch": "@@ -1,11 +1,13 @@\n error[E0412]: cannot find type `Dst` in this scope\n   --> $DIR/unknown_dst.rs:20:36\n    |\n-LL | fn should_gracefully_handle_unknown_dst() {\n-   |                                        - help: you might be missing a type parameter: `<Dst>`\n-...\n LL |     assert::is_transmutable::<Src, Dst, Context>();\n    |                                    ^^^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | fn should_gracefully_handle_unknown_dst<Dst>() {\n+   |                                        +++++\n \n error: aborting due to previous error\n "}, {"sha": "a55d71d8068244f94c80afe6287eb9613c0bcb6e", "filename": "tests/ui/transmutability/malformed-program-gracefulness/unknown_src.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/tests%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Funknown_src.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/tests%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Funknown_src.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fmalformed-program-gracefulness%2Funknown_src.stderr?ref=9a2f3937fc52fcc76f13374e73b6339e7fbeb59c", "patch": "@@ -1,11 +1,13 @@\n error[E0412]: cannot find type `Src` in this scope\n   --> $DIR/unknown_src.rs:20:31\n    |\n-LL | fn should_gracefully_handle_unknown_src() {\n-   |                                        - help: you might be missing a type parameter: `<Src>`\n-...\n LL |     assert::is_transmutable::<Src, Dst, Context>();\n    |                               ^^^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | fn should_gracefully_handle_unknown_src<Src>() {\n+   |                                        +++++\n \n error: aborting due to previous error\n "}, {"sha": "182612d5ee70e2e77fec57ffc710164ca6e76163", "filename": "tests/ui/typeck/autoderef-with-param-env-error.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/tests%2Fui%2Ftypeck%2Fautoderef-with-param-env-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/tests%2Fui%2Ftypeck%2Fautoderef-with-param-env-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fautoderef-with-param-env-error.stderr?ref=9a2f3937fc52fcc76f13374e73b6339e7fbeb59c", "patch": "@@ -1,11 +1,13 @@\n error[E0412]: cannot find type `T` in this scope\n   --> $DIR/autoderef-with-param-env-error.rs:3:5\n    |\n-LL | fn foo()\n-   |       - help: you might be missing a type parameter: `<T>`\n-LL | where\n LL |     T: Send,\n    |     ^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | fn foo<T>()\n+   |       +++\n \n error: aborting due to previous error\n "}, {"sha": "5561673f3c6728e6bba507c3fd1305e82d85b498", "filename": "tests/ui/typeck/issue-104513-ice.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/tests%2Fui%2Ftypeck%2Fissue-104513-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2f3937fc52fcc76f13374e73b6339e7fbeb59c/tests%2Fui%2Ftypeck%2Fissue-104513-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-104513-ice.stderr?ref=9a2f3937fc52fcc76f13374e73b6339e7fbeb59c", "patch": "@@ -1,10 +1,13 @@\n error[E0405]: cannot find trait `Oops` in this scope\n   --> $DIR/issue-104513-ice.rs:3:19\n    |\n-LL | fn f() {\n-   |     - help: you might be missing a type parameter: `<Oops>`\n LL |     let _: S<impl Oops> = S;\n    |                   ^^^^ not found in this scope\n+   |\n+help: you might be missing a type parameter\n+   |\n+LL | fn f<Oops>() {\n+   |     ++++++\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n   --> $DIR/issue-104513-ice.rs:3:14"}]}