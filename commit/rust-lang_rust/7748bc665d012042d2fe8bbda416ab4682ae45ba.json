{"sha": "7748bc665d012042d2fe8bbda416ab4682ae45ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NDhiYzY2NWQwMTIwNDJkMmZlOGJiZGE0MTZhYjQ2ODJhZTQ1YmE=", "commit": {"author": {"name": "Tommy Ip", "email": "hkmp7tommy@gmail.com", "date": "2017-05-24T15:23:02Z"}, "committer": {"name": "Tommy Ip", "email": "hkmp7tommy@gmail.com", "date": "2017-05-24T15:23:02Z"}, "message": "Include context info into closure_kinds", "tree": {"sha": "c3868d20dec1560e7c8bc46e6fdd618c4f944f8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3868d20dec1560e7c8bc46e6fdd618c4f944f8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7748bc665d012042d2fe8bbda416ab4682ae45ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7748bc665d012042d2fe8bbda416ab4682ae45ba", "html_url": "https://github.com/rust-lang/rust/commit/7748bc665d012042d2fe8bbda416ab4682ae45ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7748bc665d012042d2fe8bbda416ab4682ae45ba/comments", "author": {"login": "tommyip", "id": 18504232, "node_id": "MDQ6VXNlcjE4NTA0MjMy", "avatar_url": "https://avatars.githubusercontent.com/u/18504232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tommyip", "html_url": "https://github.com/tommyip", "followers_url": "https://api.github.com/users/tommyip/followers", "following_url": "https://api.github.com/users/tommyip/following{/other_user}", "gists_url": "https://api.github.com/users/tommyip/gists{/gist_id}", "starred_url": "https://api.github.com/users/tommyip/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tommyip/subscriptions", "organizations_url": "https://api.github.com/users/tommyip/orgs", "repos_url": "https://api.github.com/users/tommyip/repos", "events_url": "https://api.github.com/users/tommyip/events{/privacy}", "received_events_url": "https://api.github.com/users/tommyip/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tommyip", "id": 18504232, "node_id": "MDQ6VXNlcjE4NTA0MjMy", "avatar_url": "https://avatars.githubusercontent.com/u/18504232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tommyip", "html_url": "https://github.com/tommyip", "followers_url": "https://api.github.com/users/tommyip/followers", "following_url": "https://api.github.com/users/tommyip/following{/other_user}", "gists_url": "https://api.github.com/users/tommyip/gists{/gist_id}", "starred_url": "https://api.github.com/users/tommyip/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tommyip/subscriptions", "organizations_url": "https://api.github.com/users/tommyip/orgs", "repos_url": "https://api.github.com/users/tommyip/repos", "events_url": "https://api.github.com/users/tommyip/events{/privacy}", "received_events_url": "https://api.github.com/users/tommyip/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b13bff5203c1bdc6ac6dc87f69b5359a9503078", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b13bff5203c1bdc6ac6dc87f69b5359a9503078", "html_url": "https://github.com/rust-lang/rust/commit/5b13bff5203c1bdc6ac6dc87f69b5359a9503078"}], "stats": {"total": 54, "additions": 35, "deletions": 19}, "files": [{"sha": "a6dbbee79a48c83dfa6ab3651e4259f97d03eafc", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7748bc665d012042d2fe8bbda416ab4682ae45ba/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7748bc665d012042d2fe8bbda416ab4682ae45ba/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=7748bc665d012042d2fe8bbda416ab4682ae45ba", "patch": "@@ -1682,7 +1682,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     {\n         if let InferTables::InProgress(tables) = self.tables {\n             if let Some(id) = self.tcx.hir.as_local_node_id(def_id) {\n-                return tables.borrow().closure_kinds.get(&id).cloned();\n+                return tables.borrow()\n+                             .closure_kinds\n+                             .get(&id)\n+                             .cloned()\n+                             .map(|(kind, _)| kind);\n             }\n         }\n "}, {"sha": "bc9fd1147b6ea8bc5a0cd9af2b8331e1391c5d64", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7748bc665d012042d2fe8bbda416ab4682ae45ba/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7748bc665d012042d2fe8bbda416ab4682ae45ba/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=7748bc665d012042d2fe8bbda416ab4682ae45ba", "patch": "@@ -58,6 +58,7 @@ use syntax::abi;\n use syntax::ast::{self, Name, NodeId};\n use syntax::attr;\n use syntax::symbol::{Symbol, keywords};\n+use syntax_pos::Span;\n \n use hir;\n \n@@ -229,8 +230,9 @@ pub struct TypeckTables<'tcx> {\n     /// Records the type of each closure.\n     pub closure_tys: NodeMap<ty::PolyFnSig<'tcx>>,\n \n-    /// Records the kind of each closure.\n-    pub closure_kinds: NodeMap<ty::ClosureKind>,\n+    /// Records the kind of each closure and the span of the variable that\n+    /// cause the closure to be this kind.\n+    pub closure_kinds: NodeMap<(ty::ClosureKind, Option<Span>)>,\n \n     /// For each fn, records the \"liberated\" types of its arguments\n     /// and return type. Liberated means that all bound regions"}, {"sha": "c2e8269aafef94091e5b2c437c6bb78cc3879713", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7748bc665d012042d2fe8bbda416ab4682ae45ba/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7748bc665d012042d2fe8bbda416ab4682ae45ba/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=7748bc665d012042d2fe8bbda416ab4682ae45ba", "patch": "@@ -103,7 +103,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         self.tables.borrow_mut().closure_tys.insert(expr.id, sig);\n         match opt_kind {\n             Some(kind) => {\n-                self.tables.borrow_mut().closure_kinds.insert(expr.id, kind);\n+                self.tables.borrow_mut().closure_kinds.insert(expr.id, (kind, None));\n             }\n             None => {}\n         }"}, {"sha": "7981df9211aa7190623421c8552bf5d8445cfc72", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7748bc665d012042d2fe8bbda416ab4682ae45ba/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7748bc665d012042d2fe8bbda416ab4682ae45ba/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=7748bc665d012042d2fe8bbda416ab4682ae45ba", "patch": "@@ -802,7 +802,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n \n             let closure_kinds = &self.tables.borrow().closure_kinds;\n             let closure_kind = match closure_kinds.get(&closure_id) {\n-                Some(&k) => k,\n+                Some(&(k, _)) => k,\n                 None => {\n                     return Err(MethodError::ClosureAmbiguity(trait_def_id));\n                 }"}, {"sha": "06af22b9a41e8f409418d88025210bddb22f0be9", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7748bc665d012042d2fe8bbda416ab4682ae45ba/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7748bc665d012042d2fe8bbda416ab4682ae45ba/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7748bc665d012042d2fe8bbda416ab4682ae45ba", "patch": "@@ -702,7 +702,7 @@ fn closure_kind<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           def_id: DefId)\n                           -> ty::ClosureKind {\n     let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n-    tcx.typeck_tables_of(def_id).closure_kinds[&node_id]\n+    tcx.typeck_tables_of(def_id).closure_kinds[&node_id].0\n }\n \n fn adt_destructor<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "3d5cb13b0eed57eebac1ed3e3713361f6b3fa734", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7748bc665d012042d2fe8bbda416ab4682ae45ba/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7748bc665d012042d2fe8bbda416ab4682ae45ba/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=7748bc665d012042d2fe8bbda416ab4682ae45ba", "patch": "@@ -74,7 +74,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n struct SeedBorrowKind<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,\n-    temp_closure_kinds: NodeMap<ty::ClosureKind>,\n+    temp_closure_kinds: NodeMap<(ty::ClosureKind, Option<Span>)>,\n }\n \n impl<'a, 'gcx, 'tcx> Visitor<'gcx> for SeedBorrowKind<'a, 'gcx, 'tcx> {\n@@ -107,7 +107,7 @@ impl<'a, 'gcx, 'tcx> SeedBorrowKind<'a, 'gcx, 'tcx> {\n                      capture_clause: hir::CaptureClause)\n     {\n         if !self.fcx.tables.borrow().closure_kinds.contains_key(&expr.id) {\n-            self.temp_closure_kinds.insert(expr.id, ty::ClosureKind::Fn);\n+            self.temp_closure_kinds.insert(expr.id, (ty::ClosureKind::Fn, None));\n             debug!(\"check_closure: adding closure {:?} as Fn\", expr.id);\n         }\n \n@@ -143,12 +143,12 @@ impl<'a, 'gcx, 'tcx> SeedBorrowKind<'a, 'gcx, 'tcx> {\n \n struct AdjustBorrowKind<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,\n-    temp_closure_kinds: NodeMap<ty::ClosureKind>,\n+    temp_closure_kinds: NodeMap<(ty::ClosureKind, Option<Span>)>,\n }\n \n impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n     fn new(fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,\n-           temp_closure_kinds: NodeMap<ty::ClosureKind>)\n+           temp_closure_kinds: NodeMap<(ty::ClosureKind, Option<Span>)>)\n            -> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n         AdjustBorrowKind { fcx: fcx, temp_closure_kinds: temp_closure_kinds }\n     }\n@@ -211,8 +211,8 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n \n         // If we are also inferred the closure kind here, update the\n         // main table and process any deferred resolutions.\n-        if let Some(&kind) = self.temp_closure_kinds.get(&id) {\n-            self.fcx.tables.borrow_mut().closure_kinds.insert(id, kind);\n+        if let Some(&(kind, span)) = self.temp_closure_kinds.get(&id) {\n+            self.fcx.tables.borrow_mut().closure_kinds.insert(id, (kind, span));\n             let closure_def_id = self.fcx.tcx.hir.local_def_id(id);\n             debug!(\"closure_kind({:?}) = {:?}\", closure_def_id, kind);\n \n@@ -276,6 +276,7 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n         // for that to be legal, the upvar would have to be borrowed\n         // by value instead\n         let guarantor = cmt.guarantor();\n+        let tcx = self.fcx.tcx;\n         debug!(\"adjust_upvar_borrow_kind_for_consume: guarantor={:?}\",\n                guarantor);\n         match guarantor.cat {\n@@ -289,7 +290,8 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n \n                         // to move out of an upvar, this must be a FnOnce closure\n                         self.adjust_closure_kind(upvar_id.closure_expr_id,\n-                                                 ty::ClosureKind::FnOnce);\n+                                                 ty::ClosureKind::FnOnce,\n+                                                 tcx.hir.span(upvar_id.var_id));\n \n                         let upvar_capture_map =\n                             &mut self.fcx.tables.borrow_mut().upvar_capture_map;\n@@ -303,7 +305,8 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n                         // to be a FnOnce closure to permit moves out\n                         // of the environment.\n                         self.adjust_closure_kind(upvar_id.closure_expr_id,\n-                                                 ty::ClosureKind::FnOnce);\n+                                                 ty::ClosureKind::FnOnce,\n+                                                 tcx.hir.span(upvar_id.var_id));\n                     }\n                     mc::NoteNone => {\n                     }\n@@ -394,6 +397,8 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n             ty::ImmBorrow => false,\n         });\n \n+        let tcx = self.fcx.tcx;\n+\n         match *note {\n             mc::NoteUpvarRef(upvar_id) => {\n                 // if this is an implicit deref of an\n@@ -407,15 +412,19 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n                 }\n \n                 // also need to be in an FnMut closure since this is not an ImmBorrow\n-                self.adjust_closure_kind(upvar_id.closure_expr_id, ty::ClosureKind::FnMut);\n+                self.adjust_closure_kind(upvar_id.closure_expr_id,\n+                                         ty::ClosureKind::FnMut,\n+                                         tcx.hir.span(upvar_id.var_id));\n \n                 true\n             }\n             mc::NoteClosureEnv(upvar_id) => {\n                 // this kind of deref occurs in a `move` closure, or\n                 // for a by-value upvar; in either case, to mutate an\n                 // upvar, we need to be an FnMut closure\n-                self.adjust_closure_kind(upvar_id.closure_expr_id, ty::ClosureKind::FnMut);\n+                self.adjust_closure_kind(upvar_id.closure_expr_id,\n+                                         ty::ClosureKind::FnMut,\n+                                         tcx.hir.span(upvar_id.var_id));\n \n                 true\n             }\n@@ -462,11 +471,12 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n \n     fn adjust_closure_kind(&mut self,\n                            closure_id: ast::NodeId,\n-                           new_kind: ty::ClosureKind) {\n+                           new_kind: ty::ClosureKind,\n+                           upvar_span: Span) {\n         debug!(\"adjust_closure_kind(closure_id={}, new_kind={:?})\",\n                closure_id, new_kind);\n \n-        if let Some(&existing_kind) = self.temp_closure_kinds.get(&closure_id) {\n+        if let Some(&(existing_kind, _)) = self.temp_closure_kinds.get(&closure_id) {\n             debug!(\"adjust_closure_kind: closure_id={}, existing_kind={:?}, new_kind={:?}\",\n                    closure_id, existing_kind, new_kind);\n \n@@ -482,7 +492,7 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n                 (ty::ClosureKind::Fn, ty::ClosureKind::FnOnce) |\n                 (ty::ClosureKind::FnMut, ty::ClosureKind::FnOnce) => {\n                     // new kind is stronger than the old kind\n-                    self.temp_closure_kinds.insert(closure_id, new_kind);\n+                    self.temp_closure_kinds.insert(closure_id, (new_kind, Some(upvar_span)));\n                 }\n             }\n         }"}]}