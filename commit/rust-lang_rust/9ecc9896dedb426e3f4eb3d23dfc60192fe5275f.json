{"sha": "9ecc9896dedb426e3f4eb3d23dfc60192fe5275f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllY2M5ODk2ZGVkYjQyNmUzZjRlYjNkMjNkZmM2MDE5MmZlNTI3NWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-10T20:44:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-10T20:44:45Z"}, "message": "Auto merge of #25281 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #24948, #25158, #25188, #25222, #25239, #25240, #25241, #25255, #25257, #25263\n- Failed merges:", "tree": {"sha": "fd8c0fefebe5f85a5d400487383c4c9567353268", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd8c0fefebe5f85a5d400487383c4c9567353268"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ecc9896dedb426e3f4eb3d23dfc60192fe5275f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ecc9896dedb426e3f4eb3d23dfc60192fe5275f", "html_url": "https://github.com/rust-lang/rust/commit/9ecc9896dedb426e3f4eb3d23dfc60192fe5275f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ecc9896dedb426e3f4eb3d23dfc60192fe5275f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "750f2c63f2737305d33288303cdecb7a470a7922", "url": "https://api.github.com/repos/rust-lang/rust/commits/750f2c63f2737305d33288303cdecb7a470a7922", "html_url": "https://github.com/rust-lang/rust/commit/750f2c63f2737305d33288303cdecb7a470a7922"}, {"sha": "c70458ba5dc19dde84d5cf54265e5d100abf5784", "url": "https://api.github.com/repos/rust-lang/rust/commits/c70458ba5dc19dde84d5cf54265e5d100abf5784", "html_url": "https://github.com/rust-lang/rust/commit/c70458ba5dc19dde84d5cf54265e5d100abf5784"}], "stats": {"total": 111, "additions": 100, "deletions": 11}, "files": [{"sha": "12dd087f20c09850b1cc1f6b81ef80d92a41903b", "filename": "src/doc/trpl/guessing-game.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ecc9896dedb426e3f4eb3d23dfc60192fe5275f/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ecc9896dedb426e3f4eb3d23dfc60192fe5275f/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fguessing-game.md?ref=9ecc9896dedb426e3f4eb3d23dfc60192fe5275f", "patch": "@@ -713,7 +713,7 @@ variety of numbers, we need to give Rust a hint as to the exact type of number\n we want. Hence, `let guess: u32`. The colon (`:`) after `guess` tells Rust\n we\u2019re going to annotate its type. `u32` is an unsigned, thirty-two bit\n integer. Rust has [a number of built-in number types][number], but we\u2019ve\n-chosen `u32`. It\u2019s a good default choice for a small positive numer.\n+chosen `u32`. It\u2019s a good default choice for a small positive number.\n \n [parse]: ../std/primitive.str.html#method.parse\n [number]: primitive-types.html#numeric-types\n@@ -922,7 +922,7 @@ failure. Each contains more information: the successful parsed integer, or an\n error type. In this case, we `match` on `Ok(num)`, which sets the inner value\n of the `Ok` to the name `num`, and then we just return it on the right-hand\n side. In the `Err` case, we don\u2019t care what kind of error it is, so we just\n-use `_` intead of a name. This ignores the error, and `continue` causes us\n+use `_` instead of a name. This ignores the error, and `continue` causes us\n to go to the next iteration of the `loop`.\n \n Now we should be good! Let\u2019s try:"}, {"sha": "86b94453389667b35da4431d7d53504d5ab4fcbb", "filename": "src/doc/trpl/match.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ecc9896dedb426e3f4eb3d23dfc60192fe5275f/src%2Fdoc%2Ftrpl%2Fmatch.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ecc9896dedb426e3f4eb3d23dfc60192fe5275f/src%2Fdoc%2Ftrpl%2Fmatch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmatch.md?ref=9ecc9896dedb426e3f4eb3d23dfc60192fe5275f", "patch": "@@ -50,7 +50,7 @@ side of a `let` binding or directly where an expression is used:\n ```rust\n let x = 5;\n \n-let numer = match x {\n+let number = match x {\n     1 => \"one\",\n     2 => \"two\",\n     3 => \"three\","}, {"sha": "9b386acdca214c5d3b1fc9c5571c79d5b616db32", "filename": "src/doc/trpl/mutability.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ecc9896dedb426e3f4eb3d23dfc60192fe5275f/src%2Fdoc%2Ftrpl%2Fmutability.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ecc9896dedb426e3f4eb3d23dfc60192fe5275f/src%2Fdoc%2Ftrpl%2Fmutability.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmutability.md?ref=9ecc9896dedb426e3f4eb3d23dfc60192fe5275f", "patch": "@@ -78,8 +78,8 @@ When we call `clone()`, the `Arc<T>` needs to update the reference count. Yet\n we\u2019ve not used any `mut`s here, `x` is an immutable binding, and we didn\u2019t take\n `&mut 5` or anything. So what gives?\n \n-To this, we have to go back to the core of Rust\u2019s guiding philosophy, memory\n-safety, and the mechanism by which Rust guarantees it, the\n+To understand this, we have to go back to the core of Rust\u2019s guiding\n+philosophy, memory safety, and the mechanism by which Rust guarantees it, the\n [ownership][ownership] system, and more specifically, [borrowing][borrowing]:\n \n > You may have one or the other of these two kinds of borrows, but not both at"}, {"sha": "971bb7cd700db789408ad68a6570ce2960c8de11", "filename": "src/doc/trpl/ownership.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ecc9896dedb426e3f4eb3d23dfc60192fe5275f/src%2Fdoc%2Ftrpl%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ecc9896dedb426e3f4eb3d23dfc60192fe5275f/src%2Fdoc%2Ftrpl%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fownership.md?ref=9ecc9896dedb426e3f4eb3d23dfc60192fe5275f", "patch": "@@ -174,7 +174,7 @@ fn foo(v: Vec<i32>) -> Vec<i32> {\n }\n ```\n \n-This would get very tedius. It gets worse the more things we want to take ownership of:\n+This would get very tedious. It gets worse the more things we want to take ownership of:\n \n ```rust\n fn foo(v1: Vec<i32>, v2: Vec<i32>) -> (Vec<i32>, Vec<i32>, i32) {"}, {"sha": "bb2bf028700d2cd7d0f9025518687cb8259b3327", "filename": "src/doc/trpl/primitive-types.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ecc9896dedb426e3f4eb3d23dfc60192fe5275f/src%2Fdoc%2Ftrpl%2Fprimitive-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ecc9896dedb426e3f4eb3d23dfc60192fe5275f/src%2Fdoc%2Ftrpl%2Fprimitive-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fprimitive-types.md?ref=9ecc9896dedb426e3f4eb3d23dfc60192fe5275f", "patch": "@@ -176,7 +176,7 @@ Slices have type `&[T]`. We\u2019ll talk about that `T` when we cover\n \n [generics]: generics.html\n \n-You can find more documentation for `slices`s [in the standard library\n+You can find more documentation for slices [in the standard library\n documentation][slice].\n \n [slice]: ../std/primitive.slice.html"}, {"sha": "da416e994c4c58b7729deb7e9479965e4d6c7444", "filename": "src/doc/trpl/references-and-borrowing.md", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9ecc9896dedb426e3f4eb3d23dfc60192fe5275f/src%2Fdoc%2Ftrpl%2Freferences-and-borrowing.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ecc9896dedb426e3f4eb3d23dfc60192fe5275f/src%2Fdoc%2Ftrpl%2Freferences-and-borrowing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Freferences-and-borrowing.md?ref=9ecc9896dedb426e3f4eb3d23dfc60192fe5275f", "patch": "@@ -312,6 +312,7 @@ println!(\"{}\", y);\n \n We get this error:\n \n+```text\n error: `x` does not live long enough\n     y = &x;\n          ^\n@@ -334,3 +335,37 @@ In other words, `y` is only valid for the scope where `x` exists. As soon as\n `x` goes away, it becomes invalid to refer to it. As such, the error says that\n the borrow \u2018doesn\u2019t live long enough\u2019 because it\u2019s not valid for the right\n amount of time.\n+\n+The same problem occurs when the reference is declared _before_ the variable it refers to:\n+\n+```rust,ignore\n+let y: &i32;\n+let x = 5;\n+y = &x;\n+\n+println!(\"{}\", y);\n+```\n+\n+We get this error:\n+\n+```text\n+error: `x` does not live long enough\n+y = &x;\n+     ^\n+note: reference must be valid for the block suffix following statement 0 at\n+2:16...\n+    let y: &i32;\n+    let x = 5;\n+    y = &x;\n+    \n+    println!(\"{}\", y);\n+}\n+\n+note: ...but borrowed value is only valid for the block suffix following\n+statement 1 at 3:14\n+    let x = 5;\n+    y = &x;\n+    \n+    println!(\"{}\", y);\n+}\n+```\n\\ No newline at end of file"}, {"sha": "74837a06faecd094d2c588293465dbe8b543801a", "filename": "src/etc/CONFIGS.md", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ecc9896dedb426e3f4eb3d23dfc60192fe5275f/src%2Fetc%2FCONFIGS.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ecc9896dedb426e3f4eb3d23dfc60192fe5275f/src%2Fetc%2FCONFIGS.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2FCONFIGS.md?ref=9ecc9896dedb426e3f4eb3d23dfc60192fe5275f", "patch": "@@ -1,10 +1,16 @@\n # Configs\n \n-Here are some links to repos with configs which ease the use of rust:\n+These are some links to repos with configs which ease the use of rust.\n+\n+## Officially Maintained Configs\n \n * [rust.vim](https://github.com/rust-lang/rust.vim)\n * [emacs rust-mode](https://github.com/rust-lang/rust-mode)\n * [gedit-config](https://github.com/rust-lang/gedit-config)\n * [kate-config](https://github.com/rust-lang/kate-config)\n * [nano-config](https://github.com/rust-lang/nano-config)\n * [zsh-config](https://github.com/rust-lang/zsh-config)\n+\n+## Community-maintained Configs\n+\n+* [.editorconfig](https://gist.github.com/derhuerst/c9d1b9309e308d9851fa) ([what is this?](http://editorconfig.org/))"}, {"sha": "28e476742911b77dbe8c251c39b929f77e8717c5", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ecc9896dedb426e3f4eb3d23dfc60192fe5275f/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecc9896dedb426e3f4eb3d23dfc60192fe5275f/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=9ecc9896dedb426e3f4eb3d23dfc60192fe5275f", "patch": "@@ -1052,6 +1052,7 @@ impl<T: fmt::Display + ?Sized> ToString for T {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRef<str> for String {\n+    #[inline]\n     fn as_ref(&self) -> &str {\n         self\n     }"}, {"sha": "da6ac6bd752bfa3bb349b433f4081d6c35b60748", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ecc9896dedb426e3f4eb3d23dfc60192fe5275f/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecc9896dedb426e3f4eb3d23dfc60192fe5275f/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=9ecc9896dedb426e3f4eb3d23dfc60192fe5275f", "patch": "@@ -173,6 +173,7 @@ impl<T> AsMut<[T]> for [T] {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRef<str> for str {\n+    #[inline]\n     fn as_ref(&self) -> &str {\n         self\n     }"}, {"sha": "026ba3d08b42bea90bc74aac4fa37e6c910861ac", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9ecc9896dedb426e3f4eb3d23dfc60192fe5275f/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecc9896dedb426e3f4eb3d23dfc60192fe5275f/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=9ecc9896dedb426e3f4eb3d23dfc60192fe5275f", "patch": "@@ -46,6 +46,23 @@ enum variant, one of the fields was not provided. Each field should be specified\n exactly once.\n \"##,\n \n+E0067: r##\"\n+The left-hand side of an assignment operator must be an lvalue expression. An\n+lvalue expression represents a memory location and includes item paths (ie,\n+namespaced variables), dereferences, indexing expressions, and field references.\n+\n+```\n+use std::collections::LinkedList;\n+\n+// Good\n+let mut list = LinkedList::new();\n+\n+\n+// Bad: assignment to non-lvalue expression\n+LinkedList::new() += 1;\n+```\n+\"##,\n+\n E0081: r##\"\n Enum discriminants are used to differentiate enum variants stored in memory.\n This error indicates that the same value was used for two or more variants,\n@@ -119,6 +136,20 @@ construct an instance of the following type using only safe code:\n ```\n enum Empty {}\n ```\n+\"##,\n+\n+E0131: r##\"\n+It is not possible to define `main` with type parameters, or even with function\n+parameters. When `main` is present, it must take no arguments and return `()`.\n+\"##,\n+\n+E0132: r##\"\n+It is not possible to declare type parameters on a function that has the `start`\n+attribute. Such a function must have the following type signature:\n+\n+```\n+fn(isize, *const *const u8) -> isize\n+```\n \"##\n \n }\n@@ -149,7 +180,6 @@ register_diagnostics! {\n     E0060,\n     E0061,\n     E0066,\n-    E0067,\n     E0068,\n     E0069,\n     E0070,\n@@ -189,8 +219,6 @@ register_diagnostics! {\n     E0128,\n     E0129,\n     E0130,\n-    E0131,\n-    E0132,\n     E0141,\n     E0159,\n     E0163,"}, {"sha": "48f65a5abfd453927e0ccbc1b679ae2e6708c8f0", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9ecc9896dedb426e3f4eb3d23dfc60192fe5275f/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecc9896dedb426e3f4eb3d23dfc60192fe5275f/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=9ecc9896dedb426e3f4eb3d23dfc60192fe5275f", "patch": "@@ -916,6 +916,24 @@ impl<K, V, S> HashMap<K, V, S>\n     }\n \n     /// Gets the given key's corresponding entry in the map for in-place manipulation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut letters = HashMap::new();\n+    ///\n+    /// for ch in \"a short treatise on fungi\".chars() {\n+    ///     let counter = letters.entry(ch).or_insert(0);\n+    ///     *counter += 1;\n+    /// }\n+    ///\n+    /// assert_eq!(letters[&'s'], 2);\n+    /// assert_eq!(letters[&'t'], 3);\n+    /// assert_eq!(letters[&'u'], 1);\n+    /// assert_eq!(letters.get(&'y'), None);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn entry(&mut self, key: K) -> Entry<K, V> {\n         // Gotta resize now."}]}