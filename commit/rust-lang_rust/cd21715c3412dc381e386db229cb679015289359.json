{"sha": "cd21715c3412dc381e386db229cb679015289359", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMjE3MTVjMzQxMmRjMzgxZTM4NmRiMjI5Y2I2NzkwMTUyODkzNTk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-16T16:22:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-16T16:22:30Z"}, "message": "Rollup merge of #63613 - petrochenkov:stdhyg, r=alexcrichton\n\nHygienize use of built-in macros in the standard library\n\nSame as https://github.com/rust-lang/rust/pull/61629, but for built-in macros.\n\nCloses https://github.com/rust-lang/rust/issues/48781\nr? @alexcrichton", "tree": {"sha": "c0bba6bbb16621c3803202560d595aef2daa77ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0bba6bbb16621c3803202560d595aef2daa77ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd21715c3412dc381e386db229cb679015289359", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdVthGCRBK7hj4Ov3rIwAAdHIIADepDVePMBNSP3yPtCNFVUxk\n9z/wJYEmvo0hKKmrYgrk8N9aKfSzniUlbbnoQPHb6ZaZ+3UlGC9xxfHfZCmuckDw\nQc4DEzIVf0sAqe0dQuPgqQeX0+xooNpVys5DZbH1PX/abIiKQTW2tLfVMhR0kY5Q\nsveqnXzx4BDxj2NRXf2b0o+e8+q8tQ7A9DE9R9hxV4hcGulFgGTb+dtk6xYx1qq2\nJPf39I4oPpHeI+C/bncvUCguaQdtVfoDXgxPAGK5NWrjDWqbu39yTxtLi12q2xfR\ndvjgS4J1sVz7Tlglog7Rp3qfVdoQXGBTLZptAp2x0+zIZhoI32ORUvJCP0YeNhw=\n=NoJb\n-----END PGP SIGNATURE-----\n", "payload": "tree c0bba6bbb16621c3803202560d595aef2daa77ed\nparent b7311316fe8b6638d5d9dc07f18def8f60f0b9d2\nparent 263e3c59505a16e78b757e0ead3928a3e961a8ab\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565972550 +0200\ncommitter GitHub <noreply@github.com> 1565972550 +0200\n\nRollup merge of #63613 - petrochenkov:stdhyg, r=alexcrichton\n\nHygienize use of built-in macros in the standard library\n\nSame as https://github.com/rust-lang/rust/pull/61629, but for built-in macros.\n\nCloses https://github.com/rust-lang/rust/issues/48781\nr? @alexcrichton\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd21715c3412dc381e386db229cb679015289359", "html_url": "https://github.com/rust-lang/rust/commit/cd21715c3412dc381e386db229cb679015289359", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd21715c3412dc381e386db229cb679015289359/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7311316fe8b6638d5d9dc07f18def8f60f0b9d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7311316fe8b6638d5d9dc07f18def8f60f0b9d2", "html_url": "https://github.com/rust-lang/rust/commit/b7311316fe8b6638d5d9dc07f18def8f60f0b9d2"}, {"sha": "263e3c59505a16e78b757e0ead3928a3e961a8ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/263e3c59505a16e78b757e0ead3928a3e961a8ab", "html_url": "https://github.com/rust-lang/rust/commit/263e3c59505a16e78b757e0ead3928a3e961a8ab"}], "stats": {"total": 80, "additions": 26, "deletions": 54}, "files": [{"sha": "0b5e186d4c77b17c5ae683437df783fea53bd320", "filename": "src/liballoc/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd21715c3412dc381e386db229cb679015289359/src%2Fliballoc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21715c3412dc381e386db229cb679015289359/src%2Fliballoc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fmacros.rs?ref=cd21715c3412dc381e386db229cb679015289359", "patch": "@@ -98,5 +98,5 @@ macro_rules! vec {\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! format {\n-    ($($arg:tt)*) => ($crate::fmt::format(format_args!($($arg)*)))\n+    ($($arg:tt)*) => ($crate::fmt::format(::core::format_args!($($arg)*)))\n }"}, {"sha": "e114f3af0c5155bb5d75dbc024d02b177a3fb86c", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cd21715c3412dc381e386db229cb679015289359/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21715c3412dc381e386db229cb679015289359/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=cd21715c3412dc381e386db229cb679015289359", "patch": "@@ -2,21 +2,21 @@\n ///\n /// For details, see `std::macros`.\n #[macro_export]\n-#[allow_internal_unstable(core_panic, __rust_unstable_column)]\n+#[allow_internal_unstable(core_panic)]\n #[stable(feature = \"core\", since = \"1.6.0\")]\n macro_rules! panic {\n     () => (\n         $crate::panic!(\"explicit panic\")\n     );\n     ($msg:expr) => ({\n-        $crate::panicking::panic(&($msg, file!(), line!(), __rust_unstable_column!()))\n+        $crate::panicking::panic(&($msg, $crate::file!(), $crate::line!(), $crate::column!()))\n     });\n     ($msg:expr,) => (\n         $crate::panic!($msg)\n     );\n     ($fmt:expr, $($arg:tt)+) => ({\n-        $crate::panicking::panic_fmt(format_args!($fmt, $($arg)+),\n-                                     &(file!(), line!(), __rust_unstable_column!()))\n+        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+),\n+                                     &($crate::file!(), $crate::line!(), $crate::column!()))\n     });\n }\n \n@@ -70,7 +70,7 @@ macro_rules! assert_eq {\n                     panic!(r#\"assertion failed: `(left == right)`\n   left: `{:?}`,\n  right: `{:?}`: {}\"#, &*left_val, &*right_val,\n-                           format_args!($($arg)+))\n+                           $crate::format_args!($($arg)+))\n                 }\n             }\n         }\n@@ -127,7 +127,7 @@ macro_rules! assert_ne {\n                     panic!(r#\"assertion failed: `(left != right)`\n   left: `{:?}`,\n  right: `{:?}`: {}\"#, &*left_val, &*right_val,\n-                           format_args!($($arg)+))\n+                           $crate::format_args!($($arg)+))\n                 }\n             }\n         }\n@@ -181,7 +181,7 @@ macro_rules! assert_ne {\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! debug_assert {\n-    ($($arg:tt)*) => (if cfg!(debug_assertions) { assert!($($arg)*); })\n+    ($($arg:tt)*) => (if $crate::cfg!(debug_assertions) { $crate::assert!($($arg)*); })\n }\n \n /// Asserts that two expressions are equal to each other.\n@@ -208,7 +208,7 @@ macro_rules! debug_assert {\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! debug_assert_eq {\n-    ($($arg:tt)*) => (if cfg!(debug_assertions) { $crate::assert_eq!($($arg)*); })\n+    ($($arg:tt)*) => (if $crate::cfg!(debug_assertions) { $crate::assert_eq!($($arg)*); })\n }\n \n /// Asserts that two expressions are not equal to each other.\n@@ -235,7 +235,7 @@ macro_rules! debug_assert_eq {\n #[macro_export]\n #[stable(feature = \"assert_ne\", since = \"1.13.0\")]\n macro_rules! debug_assert_ne {\n-    ($($arg:tt)*) => (if cfg!(debug_assertions) { $crate::assert_ne!($($arg)*); })\n+    ($($arg:tt)*) => (if $crate::cfg!(debug_assertions) { $crate::assert_ne!($($arg)*); })\n }\n \n /// Unwraps a result or propagates its error.\n@@ -386,7 +386,7 @@ macro_rules! r#try {\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! write {\n-    ($dst:expr, $($arg:tt)*) => ($dst.write_fmt(format_args!($($arg)*)))\n+    ($dst:expr, $($arg:tt)*) => ($dst.write_fmt($crate::format_args!($($arg)*)))\n }\n \n /// Write formatted data into a buffer, with a newline appended.\n@@ -446,7 +446,7 @@ macro_rules! writeln {\n         $crate::writeln!($dst)\n     );\n     ($dst:expr, $($arg:tt)*) => (\n-        $dst.write_fmt(format_args_nl!($($arg)*))\n+        $dst.write_fmt($crate::format_args_nl!($($arg)*))\n     );\n }\n \n@@ -515,7 +515,7 @@ macro_rules! unreachable {\n         $crate::unreachable!($msg)\n     });\n     ($fmt:expr, $($arg:tt)*) => ({\n-        panic!(concat!(\"internal error: entered unreachable code: \", $fmt), $($arg)*)\n+        panic!($crate::concat!(\"internal error: entered unreachable code: \", $fmt), $($arg)*)\n     });\n }\n \n@@ -573,7 +573,7 @@ macro_rules! unreachable {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! unimplemented {\n     () => (panic!(\"not yet implemented\"));\n-    ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", format_args!($($arg)+)));\n+    ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", $crate::format_args!($($arg)+)));\n }\n \n /// Indicates unfinished code.\n@@ -632,7 +632,7 @@ macro_rules! unimplemented {\n #[unstable(feature = \"todo_macro\", issue = \"59277\")]\n macro_rules! todo {\n     () => (panic!(\"not yet implemented\"));\n-    ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", format_args!($($arg)+)));\n+    ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", $crate::format_args!($($arg)+)));\n }\n \n /// Definitions of built-in macros.\n@@ -927,13 +927,6 @@ pub(crate) mod builtin {\n     #[macro_export]\n     macro_rules! column { () => { /* compiler built-in */ } }\n \n-    /// Same as `column`, but less likely to be shadowed.\n-    #[unstable(feature = \"__rust_unstable_column\", issue = \"0\",\n-               reason = \"internal implementation detail of the `panic` macro\")]\n-    #[rustc_builtin_macro]\n-    #[macro_export]\n-    macro_rules! __rust_unstable_column { () => { /* compiler built-in */ } }\n-\n     /// Expands to the file name in which it was invoked.\n     ///\n     /// With [`line!`] and [`column!`], these macros provide debugging information for"}, {"sha": "7cc279a9ef2ecb83ce3ac3916b6f0b9273617861", "filename": "src/libcore/prelude/v1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd21715c3412dc381e386db229cb679015289359/src%2Flibcore%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21715c3412dc381e386db229cb679015289359/src%2Flibcore%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude%2Fv1.rs?ref=cd21715c3412dc381e386db229cb679015289359", "patch": "@@ -56,7 +56,6 @@ pub use crate::hash::macros::Hash;\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[doc(no_inline)]\n pub use crate::{\n-    __rust_unstable_column,\n     asm,\n     assert,\n     cfg,"}, {"sha": "c3882bacf87eb0bcdbadcc9eb6a144772cac95a6", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd21715c3412dc381e386db229cb679015289359/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21715c3412dc381e386db229cb679015289359/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=cd21715c3412dc381e386db229cb679015289359", "patch": "@@ -228,7 +228,6 @@\n // std is implemented with unstable features, many of which are internal\n // compiler details that will never be stable\n // NB: the following list is sorted to minimize merge conflicts.\n-#![feature(__rust_unstable_column)]\n #![feature(alloc_error_handler)]\n #![feature(alloc_layout_extra)]\n #![feature(allocator_api)]\n@@ -551,7 +550,6 @@ pub use core::{\n     option_env,\n     stringify,\n     // Unstable\n-    __rust_unstable_column,\n     asm,\n     concat_idents,\n     format_args_nl,"}, {"sha": "cbeaf20b13adc923fc5a913e378fdb76a56a316b", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cd21715c3412dc381e386db229cb679015289359/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21715c3412dc381e386db229cb679015289359/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=cd21715c3412dc381e386db229cb679015289359", "patch": "@@ -53,20 +53,20 @@\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow_internal_unstable(__rust_unstable_column, libstd_sys_internals)]\n+#[allow_internal_unstable(libstd_sys_internals)]\n macro_rules! panic {\n     () => ({\n         $crate::panic!(\"explicit panic\")\n     });\n     ($msg:expr) => ({\n-        $crate::rt::begin_panic($msg, &(file!(), line!(), __rust_unstable_column!()))\n+        $crate::rt::begin_panic($msg, &($crate::file!(), $crate::line!(), $crate::column!()))\n     });\n     ($msg:expr,) => ({\n         $crate::panic!($msg)\n     });\n     ($fmt:expr, $($arg:tt)+) => ({\n-        $crate::rt::begin_panic_fmt(&format_args!($fmt, $($arg)+),\n-                                    &(file!(), line!(), __rust_unstable_column!()))\n+        $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+),\n+                                    &($crate::file!(), $crate::line!(), $crate::column!()))\n     });\n }\n \n@@ -113,7 +113,7 @@ macro_rules! panic {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow_internal_unstable(print_internals)]\n macro_rules! print {\n-    ($($arg:tt)*) => ($crate::io::_print(format_args!($($arg)*)));\n+    ($($arg:tt)*) => ($crate::io::_print($crate::format_args!($($arg)*)));\n }\n \n /// Prints to the standard output, with a newline.\n@@ -147,7 +147,7 @@ macro_rules! print {\n macro_rules! println {\n     () => ($crate::print!(\"\\n\"));\n     ($($arg:tt)*) => ({\n-        $crate::io::_print(format_args_nl!($($arg)*));\n+        $crate::io::_print($crate::format_args_nl!($($arg)*));\n     })\n }\n \n@@ -176,7 +176,7 @@ macro_rules! println {\n #[stable(feature = \"eprint\", since = \"1.19.0\")]\n #[allow_internal_unstable(print_internals)]\n macro_rules! eprint {\n-    ($($arg:tt)*) => ($crate::io::_eprint(format_args!($($arg)*)));\n+    ($($arg:tt)*) => ($crate::io::_eprint($crate::format_args!($($arg)*)));\n }\n \n /// Prints to the standard error, with a newline.\n@@ -206,7 +206,7 @@ macro_rules! eprint {\n macro_rules! eprintln {\n     () => ($crate::eprint!(\"\\n\"));\n     ($($arg:tt)*) => ({\n-        $crate::io::_eprint(format_args_nl!($($arg)*));\n+        $crate::io::_eprint($crate::format_args_nl!($($arg)*));\n     })\n }\n \n@@ -337,15 +337,15 @@ macro_rules! eprintln {\n #[stable(feature = \"dbg_macro\", since = \"1.32.0\")]\n macro_rules! dbg {\n     () => {\n-        $crate::eprintln!(\"[{}:{}]\", file!(), line!());\n+        $crate::eprintln!(\"[{}:{}]\", $crate::file!(), $crate::line!());\n     };\n     ($val:expr) => {\n         // Use of `match` here is intentional because it affects the lifetimes\n         // of temporaries - https://stackoverflow.com/a/48732525/1063961\n         match $val {\n             tmp => {\n                 $crate::eprintln!(\"[{}:{}] {} = {:#?}\",\n-                    file!(), line!(), stringify!($val), &tmp);\n+                    $crate::file!(), $crate::line!(), $crate::stringify!($val), &tmp);\n                 tmp\n             }\n         }"}, {"sha": "3e4cf91127fc5b87ad1d99594260f1f3c327466e", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd21715c3412dc381e386db229cb679015289359/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21715c3412dc381e386db229cb679015289359/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=cd21715c3412dc381e386db229cb679015289359", "patch": "@@ -40,7 +40,6 @@ pub use crate::result::Result::{self, Ok, Err};\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[doc(no_inline)]\n pub use core::prelude::v1::{\n-    __rust_unstable_column,\n     asm,\n     assert,\n     cfg,"}, {"sha": "4add2261c6cda1f4605b97f22b3022f7adb7fa88", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd21715c3412dc381e386db229cb679015289359/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21715c3412dc381e386db229cb679015289359/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=cd21715c3412dc381e386db229cb679015289359", "patch": "@@ -57,7 +57,6 @@ pub fn register_builtin_macros(resolver: &mut dyn syntax::ext::base::Resolver, e\n     }\n \n     register_bang! {\n-        __rust_unstable_column: source_util::expand_column,\n         asm: asm::expand_asm,\n         assert: assert::expand_assert,\n         cfg: cfg::expand_cfg,"}, {"sha": "27fc66d3b09e6b4a6cb2d388e0117f109efa78e0", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd21715c3412dc381e386db229cb679015289359/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd21715c3412dc381e386db229cb679015289359/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=cd21715c3412dc381e386db229cb679015289359", "patch": "@@ -609,7 +609,6 @@ symbols! {\n         rust_eh_personality,\n         rust_eh_unwind_resume,\n         rust_oom,\n-        __rust_unstable_column,\n         rvalue_static_promotion,\n         sanitizer_runtime,\n         _Self,"}, {"sha": "202a9235adbace98ed0df1f04f76f7d78adce6f8", "filename": "src/test/ui/macros/trace-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd21715c3412dc381e386db229cb679015289359/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd21715c3412dc381e386db229cb679015289359/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr?ref=cd21715c3412dc381e386db229cb679015289359", "patch": "@@ -5,5 +5,5 @@ LL |     println!(\"Hello, World!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expanding `println! { \"Hello, World!\" }`\n-   = note: to `{ $crate :: io :: _print (format_args_nl ! (\"Hello, World!\")) ; }`\n+   = note: to `{ $crate :: io :: _print ($crate :: format_args_nl ! (\"Hello, World!\")) ; }`\n "}, {"sha": "053806ead2d12bcc50c1923793923ac3a21bb94d", "filename": "src/test/ui/rust-unstable-column-gated.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7311316fe8b6638d5d9dc07f18def8f60f0b9d2/src%2Ftest%2Fui%2Frust-unstable-column-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7311316fe8b6638d5d9dc07f18def8f60f0b9d2/src%2Ftest%2Fui%2Frust-unstable-column-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-unstable-column-gated.rs?ref=b7311316fe8b6638d5d9dc07f18def8f60f0b9d2", "patch": "@@ -1,4 +0,0 @@\n-fn main() {\n-    println!(\"{}\", __rust_unstable_column!());\n-    //~^ ERROR use of unstable library feature '__rust_unstable_column'\n-}"}, {"sha": "7db1b01fb0e63053dd036876e4390d84f520febd", "filename": "src/test/ui/rust-unstable-column-gated.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b7311316fe8b6638d5d9dc07f18def8f60f0b9d2/src%2Ftest%2Fui%2Frust-unstable-column-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7311316fe8b6638d5d9dc07f18def8f60f0b9d2/src%2Ftest%2Fui%2Frust-unstable-column-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-unstable-column-gated.stderr?ref=b7311316fe8b6638d5d9dc07f18def8f60f0b9d2", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: use of unstable library feature '__rust_unstable_column': internal implementation detail of the `panic` macro\n-  --> $DIR/rust-unstable-column-gated.rs:2:20\n-   |\n-LL |     println!(\"{}\", __rust_unstable_column!());\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(__rust_unstable_column)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}]}