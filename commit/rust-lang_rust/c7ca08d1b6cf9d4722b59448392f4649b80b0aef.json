{"sha": "c7ca08d1b6cf9d4722b59448392f4649b80b0aef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3Y2EwOGQxYjZjZjlkNDcyMmI1OTQ0ODM5MmY0NjQ5YjgwYjBhZWY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-09T21:17:50Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-09T21:17:50Z"}, "message": "rustc: Remove all calls to resolve_all_vars and the function itself", "tree": {"sha": "b41146101bb0d2c4db7ad181a1faac27bf0ff69c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b41146101bb0d2c4db7ad181a1faac27bf0ff69c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7ca08d1b6cf9d4722b59448392f4649b80b0aef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7ca08d1b6cf9d4722b59448392f4649b80b0aef", "html_url": "https://github.com/rust-lang/rust/commit/c7ca08d1b6cf9d4722b59448392f4649b80b0aef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7ca08d1b6cf9d4722b59448392f4649b80b0aef/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06d706e19772431a38bffe839b9c673952dccf90", "url": "https://api.github.com/repos/rust-lang/rust/commits/06d706e19772431a38bffe839b9c673952dccf90", "html_url": "https://github.com/rust-lang/rust/commit/06d706e19772431a38bffe839b9c673952dccf90"}], "stats": {"total": 28, "additions": 1, "deletions": 27}, "files": [{"sha": "27a78a937fff6b5b217d3585cc7347eaeda2ca8e", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c7ca08d1b6cf9d4722b59448392f4649b80b0aef/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7ca08d1b6cf9d4722b59448392f4649b80b0aef/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=c7ca08d1b6cf9d4722b59448392f4649b80b0aef", "patch": "@@ -2041,31 +2041,6 @@ mod unify {\n       ret ures_ok(t);\n     }\n \n-    // FIXME: This function should not be necessary, but it is for now until\n-    // we eliminate pushdown. The typechecker should never rely on early\n-    // resolution of type variables.\n-    fn resolve_all_vars(&ty_ctxt tcx, &@var_bindings vb, t typ) -> t {\n-        if (!type_contains_vars(tcx, typ)) { ret typ; }\n-\n-        fn folder(ty_ctxt tcx, @var_bindings vb, int vid) -> t {\n-            // It's possible that we haven't even created the var set.\n-            // Handle this case gracefully.\n-            if ((vid as uint) >= ufind::set_count(vb.sets)) {\n-                ret ty::mk_var(tcx, vid);\n-            }\n-\n-            auto root_id = ufind::find(vb.sets, vid as uint);\n-            alt (smallintmap::find[t](vb.types, root_id)) {\n-                case (some[t](?typ2)) {\n-                    ret fold_ty(tcx, fm_var(bind folder(tcx, vb, _)), typ2);\n-                }\n-                case (none[t]) { ret ty::mk_var(tcx, vid); }\n-            }\n-        }\n-\n-        ret fold_ty(tcx, fm_var(bind folder(tcx, vb, _)), typ);\n-    }\n-\n     // If the given type is a variable, returns the structure of that type.\n     fn resolve_type_structure(&ty_ctxt tcx, &@var_bindings vb, t typ)\n             -> fixup_result {"}, {"sha": "339d4d2c05064f3dff1f1b83665a06cd67ecc137", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7ca08d1b6cf9d4722b59448392f4649b80b0aef/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7ca08d1b6cf9d4722b59448392f4649b80b0aef/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=c7ca08d1b6cf9d4722b59448392f4649b80b0aef", "patch": "@@ -935,8 +935,7 @@ mod demand {\n             case (ures_ok(?t)) {\n                 let vec[ty::t] result_ty_param_substs = [];\n                 for (int var_id in ty_param_subst_var_ids) {\n-                    auto tp_subst = ty::unify::resolve_all_vars(fcx.ccx.tcx,\n-                        fcx.var_bindings, ty::mk_var(fcx.ccx.tcx, var_id));\n+                    auto tp_subst = ty::mk_var(fcx.ccx.tcx, var_id);\n                     result_ty_param_substs += [tp_subst];\n                 }\n "}]}