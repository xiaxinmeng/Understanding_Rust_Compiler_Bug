{"sha": "efbd8f62ed2f9201d410721fae69e6233d385ba6", "node_id": "C_kwDOAAsO6NoAKGVmYmQ4ZjYyZWQyZjkyMDFkNDEwNzIxZmFlNjllNjIzM2QzODViYTY", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-09-04T11:53:25Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-09-04T11:53:25Z"}, "message": "rustdoc: Compute enum discriminant on demand", "tree": {"sha": "cc913ce2245cf665caeef3d0cfb5678a602965be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc913ce2245cf665caeef3d0cfb5678a602965be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efbd8f62ed2f9201d410721fae69e6233d385ba6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efbd8f62ed2f9201d410721fae69e6233d385ba6", "html_url": "https://github.com/rust-lang/rust/commit/efbd8f62ed2f9201d410721fae69e6233d385ba6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efbd8f62ed2f9201d410721fae69e6233d385ba6/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b76a012be16de964c242594afba4323997f436b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b76a012be16de964c242594afba4323997f436b2", "html_url": "https://github.com/rust-lang/rust/commit/b76a012be16de964c242594afba4323997f436b2"}], "stats": {"total": 52, "additions": 28, "deletions": 24}, "files": [{"sha": "be2227f47af613c50797412a1f30d55160049c30", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/efbd8f62ed2f9201d410721fae69e6233d385ba6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbd8f62ed2f9201d410721fae69e6233d385ba6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=efbd8f62ed2f9201d410721fae69e6233d385ba6", "patch": "@@ -1787,10 +1787,7 @@ pub(crate) fn clean_visibility(vis: ty::Visibility) -> Visibility {\n pub(crate) fn clean_variant_def<'tcx>(variant: &ty::VariantDef, cx: &mut DocContext<'tcx>) -> Item {\n     let kind = match variant.ctor_kind {\n         CtorKind::Const => Variant::CLike(match variant.discr {\n-            ty::VariantDiscr::Explicit(def_id) => Some(Discriminant {\n-                expr: None,\n-                value: print_evaluated_const(cx.tcx, def_id, false).unwrap(),\n-            }),\n+            ty::VariantDiscr::Explicit(def_id) => Some(Discriminant { expr: None, value: def_id }),\n             ty::VariantDiscr::Relative(_) => None,\n         }),\n         CtorKind::Fn => Variant::Tuple(\n@@ -1820,16 +1817,9 @@ fn clean_variant_data<'tcx>(\n         hir::VariantData::Tuple(..) => {\n             Variant::Tuple(variant.fields().iter().map(|x| clean_field(x, cx)).collect())\n         }\n-        hir::VariantData::Unit(..) => Variant::CLike(disr_expr.map(|disr| {\n-            Discriminant {\n-                expr: Some(print_const_expr(cx.tcx, disr.body)),\n-                value: print_evaluated_const(\n-                    cx.tcx,\n-                    cx.tcx.hir().local_def_id(disr.hir_id).to_def_id(),\n-                    false,\n-                )\n-                .unwrap(),\n-            }\n+        hir::VariantData::Unit(..) => Variant::CLike(disr_expr.map(|disr| Discriminant {\n+            expr: Some(disr.body),\n+            value: cx.tcx.hir().local_def_id(disr.hir_id).to_def_id(),\n         })),\n     }\n }"}, {"sha": "d6bb7c6c4fc89055e6540f6a19db0209aaebfbb1", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/efbd8f62ed2f9201d410721fae69e6233d385ba6/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbd8f62ed2f9201d410721fae69e6233d385ba6/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=efbd8f62ed2f9201d410721fae69e6233d385ba6", "patch": "@@ -2116,8 +2116,20 @@ impl Variant {\n pub(crate) struct Discriminant {\n     // In the case of cross crate re-exports, we don't have the nessesary information\n     // to reconstruct the expression of the discriminant, only the value.\n-    pub(crate) expr: Option<String>,\n-    pub(crate) value: String,\n+    pub(super) expr: Option<BodyId>,\n+    pub(super) value: DefId,\n+}\n+\n+impl Discriminant {\n+    /// Will be `None` in the case of cross-crate reexports, and may be\n+    /// simplified\n+    pub(crate) fn expr(&self, tcx: TyCtxt<'_>) -> Option<String> {\n+        self.expr.map(|body| print_const_expr(tcx, body))\n+    }\n+    /// Will always be a machine readable number, without underscores or suffixes.\n+    pub(crate) fn value(&self, tcx: TyCtxt<'_>) -> String {\n+        print_evaluated_const(tcx, self.value, false).unwrap()\n+    }\n }\n \n /// Small wrapper around [`rustc_span::Span`] that adds helper methods"}, {"sha": "f6347b4f0f66ba1e2026295531359d92d7e1c19c", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/efbd8f62ed2f9201d410721fae69e6233d385ba6/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbd8f62ed2f9201d410721fae69e6233d385ba6/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=efbd8f62ed2f9201d410721fae69e6233d385ba6", "patch": "@@ -662,7 +662,7 @@ impl FromWithTcx<clean::Variant> for Variant {\n     fn from_tcx(variant: clean::Variant, tcx: TyCtxt<'_>) -> Self {\n         use clean::Variant::*;\n         match variant {\n-            CLike(disr) => Variant::Plain(disr.map(convert_discriminant)),\n+            CLike(disr) => Variant::Plain(disr.map(|disr| disr.into_tcx(tcx))),\n             Tuple(fields) => Variant::Tuple(\n                 fields\n                     .into_iter()\n@@ -678,13 +678,15 @@ impl FromWithTcx<clean::Variant> for Variant {\n     }\n }\n \n-fn convert_discriminant(disr: clean::Discriminant) -> Discriminant {\n-    Discriminant {\n-        // expr is only none if going throught the inlineing path, which gets\n-        // `rustc_middle` types, not `rustc_hir`, but because JSON never inlines\n-        // the expr is always some.\n-        expr: disr.expr.unwrap(),\n-        value: disr.value,\n+impl FromWithTcx<clean::Discriminant> for Discriminant {\n+    fn from_tcx(disr: clean::Discriminant, tcx: TyCtxt<'_>) -> Self {\n+        Discriminant {\n+            // expr is only none if going throught the inlineing path, which gets\n+            // `rustc_middle` types, not `rustc_hir`, but because JSON never inlines\n+            // the expr is always some.\n+            expr: disr.expr(tcx).unwrap(),\n+            value: disr.value(tcx),\n+        }\n     }\n }\n "}]}