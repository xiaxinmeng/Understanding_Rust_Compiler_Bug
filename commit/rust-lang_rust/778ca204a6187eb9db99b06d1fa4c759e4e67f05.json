{"sha": "778ca204a6187eb9db99b06d1fa4c759e4e67f05", "node_id": "C_kwDOAAsO6NoAKDc3OGNhMjA0YTYxODdlYjlkYjk5YjA2ZDFmYTRjNzU5ZTRlNjdmMDU", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-12-30T18:28:23Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-12-30T18:28:23Z"}, "message": "Move Result::into_ok", "tree": {"sha": "4e77e69ec0c2662dc033d31864553ab95b334f7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e77e69ec0c2662dc033d31864553ab95b334f7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/778ca204a6187eb9db99b06d1fa4c759e4e67f05", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmHN+kcACgkQ+boUO5X/\nbYKHbRAAgZgqLAS5KHFewdSQl0KMMMHncuV+F9UebATghS3hcS1T4OI0HTIGaxDg\nSNRLwAiRWvN2m7p3dObNqHAyPxgxYjD5CppZ3jBU+7RjyMbd4tk+4CId6d/H49OP\n5omhMADfT/zapcZNbGCjZGHtcXBM/vY6QbaI18rJJlurJ2QD4UgLIsp0w7rISkqZ\nT1T8l1c+lTC2E8PFEMnnPakGG45po6i7+pF3EMfvBd5mWsMPhqMQmQrpmEGaRiU/\ncN4qANhesdsPrU67SsiuThcUsmgQACXlribSgXsq9SzrJrd8jura7GFgt3SEJHmx\nc0xsMVIS+lWZSw0s97ClbemoHiArFg6CjIkfE1dFORv6+MeatQB8Dqoy5/ckHMoq\nzzARc9ry45W9nblrqn6F74FqdwLXMjXYLjQ1YMGuafuscoaQWtMuiNwGvtnmM5EW\nozO2rWrKWOxen3WQn6kMv6HYSt/0+R6tzHEK/AJdCW9JX/ciKQ/rVBQAUf/NqDpK\nQLp/wzZBHtXyNqko8Ud0IfUid9uUDY/qVvgObZeySV/dLL605LMgrjAMcx5adLbs\nh9Ah/j1gsBuPVrnDU+iaqJfzVl9Wp/+p61VCPKhG3vARHl3CheAOZTMJrGuAgCGG\nypzWV/8+TUnATaBwlpnZWhWZ0+XUDl0wEWRN5JyXtmtH690xW6U=\n=x3ym\n-----END PGP SIGNATURE-----", "payload": "tree 4e77e69ec0c2662dc033d31864553ab95b334f7b\nparent 06ea5ebe4ef89cdb626930c4e8b235d430d47fee\nauthor David Tolnay <dtolnay@gmail.com> 1640888903 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1640888903 -0800\n\nMove Result::into_ok\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/778ca204a6187eb9db99b06d1fa4c759e4e67f05", "html_url": "https://github.com/rust-lang/rust/commit/778ca204a6187eb9db99b06d1fa4c759e4e67f05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/778ca204a6187eb9db99b06d1fa4c759e4e67f05/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06ea5ebe4ef89cdb626930c4e8b235d430d47fee", "url": "https://api.github.com/repos/rust-lang/rust/commits/06ea5ebe4ef89cdb626930c4e8b235d430d47fee", "html_url": "https://github.com/rust-lang/rust/commit/06ea5ebe4ef89cdb626930c4e8b235d430d47fee"}], "stats": {"total": 73, "additions": 37, "deletions": 36}, "files": [{"sha": "6810e44d81e7d8fb726cd9a497482b528e740324", "filename": "library/core/src/result.rs", "status": "modified", "additions": 37, "deletions": 36, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/778ca204a6187eb9db99b06d1fa4c759e4e67f05/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ca204a6187eb9db99b06d1fa4c759e4e67f05/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=778ca204a6187eb9db99b06d1fa4c759e4e67f05", "patch": "@@ -1174,6 +1174,43 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n+    /// Returns the contained [`Ok`] value, but never panics.\n+    ///\n+    /// Unlike [`unwrap`], this method is known to never panic on the\n+    /// result types it is implemented for. Therefore, it can be used\n+    /// instead of `unwrap` as a maintainability safeguard that will fail\n+    /// to compile if the error type of the `Result` is later changed\n+    /// to an error that can actually occur.\n+    ///\n+    /// [`unwrap`]: Result::unwrap\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// # #![feature(never_type)]\n+    /// # #![feature(unwrap_infallible)]\n+    ///\n+    /// fn only_good_news() -> Result<String, !> {\n+    ///     Ok(\"this is fine\".into())\n+    /// }\n+    ///\n+    /// let s: String = only_good_news().into_ok();\n+    /// println!(\"{}\", s);\n+    /// ```\n+    #[unstable(feature = \"unwrap_infallible\", reason = \"newly added\", issue = \"61695\")]\n+    #[inline]\n+    pub fn into_ok(self) -> T\n+    where\n+        E: Into<!>,\n+    {\n+        match self {\n+            Ok(x) => x,\n+            Err(e) => e.into(),\n+        }\n+    }\n+\n     ////////////////////////////////////////////////////////////////////////\n     // Boolean operations on the values, eager and lazy\n     /////////////////////////////////////////////////////////////////////////\n@@ -1499,42 +1536,6 @@ impl<T: Clone, E> Result<&mut T, E> {\n     }\n }\n \n-#[unstable(feature = \"unwrap_infallible\", reason = \"newly added\", issue = \"61695\")]\n-impl<T, E: Into<!>> Result<T, E> {\n-    /// Returns the contained [`Ok`] value, but never panics.\n-    ///\n-    /// Unlike [`unwrap`], this method is known to never panic on the\n-    /// result types it is implemented for. Therefore, it can be used\n-    /// instead of `unwrap` as a maintainability safeguard that will fail\n-    /// to compile if the error type of the `Result` is later changed\n-    /// to an error that can actually occur.\n-    ///\n-    /// [`unwrap`]: Result::unwrap\n-    ///\n-    /// # Examples\n-    ///\n-    /// Basic usage:\n-    ///\n-    /// ```\n-    /// # #![feature(never_type)]\n-    /// # #![feature(unwrap_infallible)]\n-    ///\n-    /// fn only_good_news() -> Result<String, !> {\n-    ///     Ok(\"this is fine\".into())\n-    /// }\n-    ///\n-    /// let s: String = only_good_news().into_ok();\n-    /// println!(\"{}\", s);\n-    /// ```\n-    #[inline]\n-    pub fn into_ok(self) -> T {\n-        match self {\n-            Ok(x) => x,\n-            Err(e) => e.into(),\n-        }\n-    }\n-}\n-\n #[unstable(feature = \"unwrap_infallible\", reason = \"newly added\", issue = \"61695\")]\n impl<T: Into<!>, E> Result<T, E> {\n     /// Returns the contained [`Err`] value, but never panics."}]}