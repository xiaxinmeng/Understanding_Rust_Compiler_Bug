{"sha": "23747419ca52414d3ecf6f69f1e530e47ab1e937", "node_id": "C_kwDOAAsO6NoAKDIzNzQ3NDE5Y2E1MjQxNGQzZWNmNmY2OWYxZTUzMGU0N2FiMWU5Mzc", "commit": {"author": {"name": "Dezhi Wu", "email": "wu543065657@163.com", "date": "2022-08-17T13:44:58Z"}, "committer": {"name": "Dezhi Wu", "email": "wu543065657@163.com", "date": "2022-08-17T13:44:58Z"}, "message": "fix: a bunch of typos\n\nThis PR will fix some typos detected by [typos].\n\nThere are also some other typos in the function names, variable names, and file\nnames, which I leave as they are. I'm more certain that typos in comments\nshould be fixed.\n\n[typos]: https://github.com/crate-ci/typos", "tree": {"sha": "eb4eccaab64f2ff0e88817d2dc0299df8b2ebe9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb4eccaab64f2ff0e88817d2dc0299df8b2ebe9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23747419ca52414d3ecf6f69f1e530e47ab1e937", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23747419ca52414d3ecf6f69f1e530e47ab1e937", "html_url": "https://github.com/rust-lang/rust/commit/23747419ca52414d3ecf6f69f1e530e47ab1e937", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23747419ca52414d3ecf6f69f1e530e47ab1e937/comments", "author": {"login": "dzvon", "id": 3402811, "node_id": "MDQ6VXNlcjM0MDI4MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3402811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzvon", "html_url": "https://github.com/dzvon", "followers_url": "https://api.github.com/users/dzvon/followers", "following_url": "https://api.github.com/users/dzvon/following{/other_user}", "gists_url": "https://api.github.com/users/dzvon/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzvon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzvon/subscriptions", "organizations_url": "https://api.github.com/users/dzvon/orgs", "repos_url": "https://api.github.com/users/dzvon/repos", "events_url": "https://api.github.com/users/dzvon/events{/privacy}", "received_events_url": "https://api.github.com/users/dzvon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dzvon", "id": 3402811, "node_id": "MDQ6VXNlcjM0MDI4MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3402811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzvon", "html_url": "https://github.com/dzvon", "followers_url": "https://api.github.com/users/dzvon/followers", "following_url": "https://api.github.com/users/dzvon/following{/other_user}", "gists_url": "https://api.github.com/users/dzvon/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzvon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzvon/subscriptions", "organizations_url": "https://api.github.com/users/dzvon/orgs", "repos_url": "https://api.github.com/users/dzvon/repos", "events_url": "https://api.github.com/users/dzvon/events{/privacy}", "received_events_url": "https://api.github.com/users/dzvon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baa2cccb24023a246d4258b08ff4064c9169e67e", "url": "https://api.github.com/repos/rust-lang/rust/commits/baa2cccb24023a246d4258b08ff4064c9169e67e", "html_url": "https://github.com/rust-lang/rust/commit/baa2cccb24023a246d4258b08ff4064c9169e67e"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "2bebea2fbfefd2dd2cbfbbd9617e87ac9a424a74", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=23747419ca52414d3ecf6f69f1e530e47ab1e937", "patch": "@@ -345,7 +345,7 @@ impl CargoActor {\n         //\n         // Because cargo only outputs one JSON object per line, we can\n         // simply skip a line if it doesn't parse, which just ignores any\n-        // erroneus output.\n+        // erroneous output.\n \n         let mut error = String::new();\n         let mut read_at_least_one_message = false;"}, {"sha": "52b79cd0fdda2f5cf0d4a61c5f349717ea7f2744", "filename": "crates/hir-def/src/nameres/proc_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fhir-def%2Fsrc%2Fnameres%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fhir-def%2Fsrc%2Fnameres%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fproc_macro.rs?ref=23747419ca52414d3ecf6f69f1e530e47ab1e937", "patch": "@@ -45,7 +45,7 @@ impl Attrs {\n                     kind: ProcMacroKind::CustomDerive { helpers: Box::new([]) },\n                 }),\n \n-                // `#[proc_macro_derive(Trait, attibutes(helper1, helper2, ...))]`\n+                // `#[proc_macro_derive(Trait, attributes(helper1, helper2, ...))]`\n                 [\n                     TokenTree::Leaf(Leaf::Ident(trait_name)),\n                     TokenTree::Leaf(Leaf::Punct(comma)),"}, {"sha": "d753d88470c442cb3c372494c2fc38720eb91573", "filename": "crates/hir-expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fhir-expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fhir-expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Flib.rs?ref=23747419ca52414d3ecf6f69f1e530e47ab1e937", "patch": "@@ -616,7 +616,7 @@ impl ExpansionInfo {\n \n         let token_id = match token_id_in_attr_input {\n             Some(token_id) => token_id,\n-            // the token is not inside an attribute's input so do the lookup in the macro_arg as ususal\n+            // the token is not inside an attribute's input so do the lookup in the macro_arg as usual\n             None => {\n                 let relative_range =\n                     token.value.text_range().checked_sub(self.arg.value.text_range().start())?;"}, {"sha": "897980c6650497132360baa4833ee68bcb5858a1", "filename": "crates/ide-assists/src/handlers/extract_module.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_module.rs?ref=23747419ca52414d3ecf6f69f1e530e47ab1e937", "patch": "@@ -29,7 +29,7 @@ use super::remove_unused_param::range_to_remove;\n \n // Assist: extract_module\n //\n-// Extracts a selected region as seperate module. All the references, visibility and imports are\n+// Extracts a selected region as separate module. All the references, visibility and imports are\n // resolved.\n //\n // ```\n@@ -105,7 +105,7 @@ pub(crate) fn extract_module(acc: &mut Assists, ctx: &AssistContext<'_>) -> Opti\n             //\n             //- Thirdly, resolving all the imports this includes removing paths from imports\n             //  outside the module, shifting/cloning them inside new module, or shifting the imports, or making\n-            //  new import statemnts\n+            //  new import statements\n \n             //We are getting item usages and record_fields together, record_fields\n             //for change_visibility and usages for first point mentioned above in the process\n@@ -661,7 +661,7 @@ fn check_intersection_and_push(\n     import_path: TextRange,\n ) {\n     if import_paths_to_be_removed.len() > 0 {\n-        // Text ranges recieved here for imports are extended to the\n+        // Text ranges received here for imports are extended to the\n         // next/previous comma which can cause intersections among them\n         // and later deletion of these can cause panics similar\n         // to reported in #11766. So to mitigate it, we"}, {"sha": "5242f3b5100cfa9357d322ac8f2cc647def5385f", "filename": "crates/ide-assists/src/handlers/replace_turbofish_with_explicit_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs?ref=23747419ca52414d3ecf6f69f1e530e47ab1e937", "patch": "@@ -88,7 +88,7 @@ pub(crate) fn replace_turbofish_with_explicit_type(\n             },\n         );\n     } else if let Some(InferType(t)) = let_stmt.ty() {\n-        // If there's a type inferrence underscore, we can offer to replace it with the type in\n+        // If there's a type inference underscore, we can offer to replace it with the type in\n         // the turbofish.\n         // let x: _ = fn::<...>();\n         let underscore_range = t.syntax().text_range();"}, {"sha": "662ddd063f323912960a6feec31b39c0cff0a5d4", "filename": "crates/ide-assists/src/utils/suggest_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fide-assists%2Fsrc%2Futils%2Fsuggest_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fide-assists%2Fsrc%2Futils%2Fsuggest_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils%2Fsuggest_name.rs?ref=23747419ca52414d3ecf6f69f1e530e47ab1e937", "patch": "@@ -75,7 +75,7 @@ pub(crate) fn for_generic_parameter(ty: &ast::ImplTraitType) -> SmolStr {\n /// In current implementation, the function tries to get the name from\n /// the following sources:\n ///\n-/// * if expr is an argument to function/method, use paramter name\n+/// * if expr is an argument to function/method, use parameter name\n /// * if expr is a function/method call, use function name\n /// * expression type name if it exists (E.g. `()`, `fn() -> ()` or `!` do not have names)\n /// * fallback: `var_name`\n@@ -85,7 +85,7 @@ pub(crate) fn for_generic_parameter(ty: &ast::ImplTraitType) -> SmolStr {\n /// Currently it sticks to the first name found.\n // FIXME: Microoptimize and return a `SmolStr` here.\n pub(crate) fn for_variable(expr: &ast::Expr, sema: &Semantics<'_, RootDatabase>) -> String {\n-    // `from_param` does not benifit from stripping\n+    // `from_param` does not benefit from stripping\n     // it need the largest context possible\n     // so we check firstmost\n     if let Some(name) = from_param(expr, sema) {"}, {"sha": "b273a4cb53ba1da2631b42798f5ecd86c11c1805", "filename": "crates/ide-completion/src/completions/postfix/format_like.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs?ref=23747419ca52414d3ecf6f69f1e530e47ab1e937", "patch": "@@ -173,7 +173,7 @@ impl FormatStrParser {\n                     }\n                 }\n                 (State::Expr, ':') if chars.peek().copied() == Some(':') => {\n-                    // path seperator\n+                    // path separator\n                     current_expr.push_str(\"::\");\n                     chars.next();\n                 }\n@@ -185,7 +185,7 @@ impl FormatStrParser {\n                         current_expr = String::new();\n                         self.state = State::FormatOpts;\n                     } else {\n-                        // We're inside of braced expression, assume that it's a struct field name/value delimeter.\n+                        // We're inside of braced expression, assume that it's a struct field name/value delimiter.\n                         current_expr.push(chr);\n                     }\n                 }"}, {"sha": "a63ef006875bc9962ac460e3885e5acf42478d74", "filename": "crates/ide-completion/src/tests/flyimport.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fide-completion%2Fsrc%2Ftests%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fide-completion%2Fsrc%2Ftests%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fflyimport.rs?ref=23747419ca52414d3ecf6f69f1e530e47ab1e937", "patch": "@@ -159,7 +159,7 @@ pub mod some_module {\n     pub struct ThiiiiiirdStruct;\n     // contains all letters from the query, but not in the beginning, displayed second\n     pub struct AfterThirdStruct;\n-    // contains all letters from the query in the begginning, displayed first\n+    // contains all letters from the query in the beginning, displayed first\n     pub struct ThirdStruct;\n }\n "}, {"sha": "49b81265ea5be22649f65103a517d583390f27a2", "filename": "crates/ide-db/src/rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fide-db%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fide-db%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Frename.rs?ref=23747419ca52414d3ecf6f69f1e530e47ab1e937", "patch": "@@ -82,7 +82,7 @@ impl Definition {\n     }\n \n     /// Textual range of the identifier which will change when renaming this\n-    /// `Definition`. Note that some definitions, like buitin types, can't be\n+    /// `Definition`. Note that some definitions, like builtin types, can't be\n     /// renamed.\n     pub fn range_for_rename(self, sema: &Semantics<'_, RootDatabase>) -> Option<FileRange> {\n         let res = match self {"}, {"sha": "5fcaf405b14b94887cc6e81c1dd05db061eac143", "filename": "crates/ide-diagnostics/src/handlers/missing_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_match_arms.rs?ref=23747419ca52414d3ecf6f69f1e530e47ab1e937", "patch": "@@ -750,7 +750,7 @@ fn main() {\n enum Foo { A }\n fn main() {\n     // FIXME: this should not bail out but current behavior is such as the old algorithm.\n-    // ExprValidator::validate_match(..) checks types of top level patterns incorrecly.\n+    // ExprValidator::validate_match(..) checks types of top level patterns incorrectly.\n     match Foo::A {\n         ref _x => {}\n         Foo::A => {}"}, {"sha": "c1aa14d6b7e74d715920d9a2dea2992bd0cbf4e3", "filename": "crates/mbe/src/expander/matcher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs?ref=23747419ca52414d3ecf6f69f1e530e47ab1e937", "patch": "@@ -321,7 +321,7 @@ struct MatchState<'t> {\n     /// The KleeneOp of this sequence if we are in a repetition.\n     sep_kind: Option<RepeatKind>,\n \n-    /// Number of tokens of seperator parsed\n+    /// Number of tokens of separator parsed\n     sep_parsed: Option<usize>,\n \n     /// Matched meta variables bindings"}, {"sha": "b81b7432f6554f255743a85b38696a83dfc0fc53", "filename": "crates/project-model/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fproject-model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fproject-model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Flib.rs?ref=23747419ca52414d3ecf6f69f1e530e47ab1e937", "patch": "@@ -3,7 +3,7 @@\n //!\n //! Pure model is represented by the [`base_db::CrateGraph`] from another crate.\n //!\n-//! In this crate, we are conserned with \"real world\" project models.\n+//! In this crate, we are concerned with \"real world\" project models.\n //!\n //! Specifically, here we have a representation for a Cargo project\n //! ([`CargoWorkspace`]) and for manually specified layout ([`ProjectJson`])."}, {"sha": "8d6f50f5587c5ad0e8248702e66ba69c9187eced", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=23747419ca52414d3ecf6f69f1e530e47ab1e937", "patch": "@@ -770,7 +770,7 @@ fn handle_rustc_crates(\n         queue.push_back(root_pkg);\n         while let Some(pkg) = queue.pop_front() {\n             // Don't duplicate packages if they are dependended on a diamond pattern\n-            // N.B. if this line is ommitted, we try to analyse over 4_800_000 crates\n+            // N.B. if this line is omitted, we try to analyse over 4_800_000 crates\n             // which is not ideal\n             if rustc_pkg_crates.contains_key(&pkg) {\n                 continue;"}, {"sha": "298814af5a465679eaf033982061c9f8da010b9f", "filename": "crates/rust-analyzer/src/bin/logger.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs?ref=23747419ca52414d3ecf6f69f1e530e47ab1e937", "patch": "@@ -52,7 +52,7 @@ impl Logger {\n         // merge chalk filter to our main filter (from RA_LOG env).\n         //\n         // The acceptable syntax of CHALK_DEBUG is `target[span{field=value}]=level`.\n-        // As the value should only affect chalk crates, we'd better mannually\n+        // As the value should only affect chalk crates, we'd better manually\n         // specify the target. And for simplicity, CHALK_DEBUG only accept the value\n         // that specify level.\n         let chalk_level_dir = std::env::var(\"CHALK_DEBUG\")"}, {"sha": "ec3d3d444c365822f5c9d7efea9e8268f1bb36b1", "filename": "crates/syntax/src/hacks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fsyntax%2Fsrc%2Fhacks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fsyntax%2Fsrc%2Fhacks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fhacks.rs?ref=23747419ca52414d3ecf6f69f1e530e47ab1e937", "patch": "@@ -1,4 +1,4 @@\n-//! Things which exist to solve practial issues, but which shouldn't exist.\n+//! Things which exist to solve practical issues, but which shouldn't exist.\n //!\n //! Please avoid adding new usages of the functions in this module\n "}, {"sha": "7badb1c363b44b46cfa0b74766a6fd74eae9d878", "filename": "crates/vfs/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fvfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23747419ca52414d3ecf6f69f1e530e47ab1e937/crates%2Fvfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Flib.rs?ref=23747419ca52414d3ecf6f69f1e530e47ab1e937", "patch": "@@ -64,7 +64,7 @@ pub struct FileId(pub u32);\n \n /// Storage for all files read by rust-analyzer.\n ///\n-/// For more informations see the [crate-level](crate) documentation.\n+/// For more information see the [crate-level](crate) documentation.\n #[derive(Default)]\n pub struct Vfs {\n     interner: PathInterner,"}, {"sha": "c173a239feab361b0a99d0fbab1a3e88cab4b62d", "filename": "docs/dev/architecture.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23747419ca52414d3ecf6f69f1e530e47ab1e937/docs%2Fdev%2Farchitecture.md", "raw_url": "https://github.com/rust-lang/rust/raw/23747419ca52414d3ecf6f69f1e530e47ab1e937/docs%2Fdev%2Farchitecture.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Farchitecture.md?ref=23747419ca52414d3ecf6f69f1e530e47ab1e937", "patch": "@@ -485,7 +485,7 @@ Mind the code--architecture gap: at the moment, we are using fewer feature flags\n ### Serialization\n \n In Rust, it is easy (often too easy) to add serialization to any type by adding `#[derive(Serialize)]`.\n-This easiness is misleading -- serializable types impose significant backwards compatability constraints.\n+This easiness is misleading -- serializable types impose significant backwards compatibility constraints.\n If a type is serializable, then it is a part of some IPC boundary.\n You often don't control the other side of this boundary, so changing serializable types is hard.\n "}, {"sha": "12f666401fd1890f50039bfefb2779b5a01dc944", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23747419ca52414d3ecf6f69f1e530e47ab1e937/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/23747419ca52414d3ecf6f69f1e530e47ab1e937/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=23747419ca52414d3ecf6f69f1e530e47ab1e937", "patch": "@@ -655,7 +655,7 @@ function crateGraph(ctx: Ctx, full: boolean): Cmd {\n                     html, body { margin:0; padding:0; overflow:hidden }\n                     svg { position:fixed; top:0; left:0; height:100%; width:100% }\n \n-                    /* Disable the graphviz backgroud and fill the polygons */\n+                    /* Disable the graphviz background and fill the polygons */\n                     .graph > polygon { display:none; }\n                     :is(.node,.edge) polygon { fill: white; }\n "}, {"sha": "e1ca495428024ace9a3a5f0ae86595b8c84377ae", "filename": "editors/code/src/toolchain.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23747419ca52414d3ecf6f69f1e530e47ab1e937/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/23747419ca52414d3ecf6f69f1e530e47ab1e937/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftoolchain.ts?ref=23747419ca52414d3ecf6f69f1e530e47ab1e937", "patch": "@@ -158,7 +158,7 @@ export const getPathForExecutable = memoizeAsync(\n \n         try {\n             // hmm, `os.homedir()` seems to be infallible\n-            // it is not mentioned in docs and cannot be infered by the type signature...\n+            // it is not mentioned in docs and cannot be inferred by the type signature...\n             const standardPath = vscode.Uri.joinPath(\n                 vscode.Uri.file(os.homedir()),\n                 \".cargo\","}]}