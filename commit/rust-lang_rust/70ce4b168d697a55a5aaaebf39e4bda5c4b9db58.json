{"sha": "70ce4b168d697a55a5aaaebf39e4bda5c4b9db58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwY2U0YjE2OGQ2OTdhNTVhNWFhYWViZjM5ZTRiZGE1YzRiOWRiNTg=", "commit": {"author": {"name": "Christian", "email": "chris_veenman@hotmail.com", "date": "2019-03-21T18:36:51Z"}, "committer": {"name": "Christian", "email": "chris_veenman@hotmail.com", "date": "2019-03-21T18:36:51Z"}, "message": "Wrapped a line such that it does not exceed 100 characters.", "tree": {"sha": "d1bf86fbb53967de00f18cb088b6b743a84f7535", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1bf86fbb53967de00f18cb088b6b743a84f7535"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70ce4b168d697a55a5aaaebf39e4bda5c4b9db58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70ce4b168d697a55a5aaaebf39e4bda5c4b9db58", "html_url": "https://github.com/rust-lang/rust/commit/70ce4b168d697a55a5aaaebf39e4bda5c4b9db58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70ce4b168d697a55a5aaaebf39e4bda5c4b9db58/comments", "author": null, "committer": null, "parents": [{"sha": "d7fcd219c5cc79af1d8f24d7f41d12466d349bdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7fcd219c5cc79af1d8f24d7f41d12466d349bdd", "html_url": "https://github.com/rust-lang/rust/commit/d7fcd219c5cc79af1d8f24d7f41d12466d349bdd"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "9f72d02d865d369c27fce1a3746c8eedfc33ff6d", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70ce4b168d697a55a5aaaebf39e4bda5c4b9db58/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70ce4b168d697a55a5aaaebf39e4bda5c4b9db58/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=70ce4b168d697a55a5aaaebf39e4bda5c4b9db58", "patch": "@@ -291,7 +291,8 @@ pub trait Into<T>: Sized {\n /// When constructing a function that is capable of failing, the return type\n /// will generally be of the form `Result<T, E>`.\n /// The `From` trait simplifies error handling by allowing a function to return a single error type\n-/// that encapsulate multiple error types. See the \"Examples\" section and [the book][book] for more details.\n+/// that encapsulate multiple error types. See the \"Examples\" section\n+/// and [the book][book] for more details.\n ///\n /// **Note: This trait must not fail**. If the conversion can fail, use [`TryFrom`].\n ///"}]}