{"sha": "a7c3301b5884b33fc87f2e498f28426dfbcb1a84", "node_id": "C_kwDOAAsO6NoAKGE3YzMzMDFiNTg4NGIzM2ZjODdmMmU0OThmMjg0MjZkZmJjYjFhODQ", "commit": {"author": {"name": "Centri3", "email": "114838443+Centri3@users.noreply.github.com", "date": "2023-04-17T04:56:21Z"}, "committer": {"name": "Centri3", "email": "114838443+Centri3@users.noreply.github.com", "date": "2023-04-17T04:56:21Z"}, "message": "refactor", "tree": {"sha": "dfb4d7afcfc9f691e32b0e18a67364f5e84c060b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfb4d7afcfc9f691e32b0e18a67364f5e84c060b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7c3301b5884b33fc87f2e498f28426dfbcb1a84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7c3301b5884b33fc87f2e498f28426dfbcb1a84", "html_url": "https://github.com/rust-lang/rust/commit/a7c3301b5884b33fc87f2e498f28426dfbcb1a84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7c3301b5884b33fc87f2e498f28426dfbcb1a84/comments", "author": {"login": "Centri3", "id": 114838443, "node_id": "U_kgDOBthLqw", "avatar_url": "https://avatars.githubusercontent.com/u/114838443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centri3", "html_url": "https://github.com/Centri3", "followers_url": "https://api.github.com/users/Centri3/followers", "following_url": "https://api.github.com/users/Centri3/following{/other_user}", "gists_url": "https://api.github.com/users/Centri3/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centri3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centri3/subscriptions", "organizations_url": "https://api.github.com/users/Centri3/orgs", "repos_url": "https://api.github.com/users/Centri3/repos", "events_url": "https://api.github.com/users/Centri3/events{/privacy}", "received_events_url": "https://api.github.com/users/Centri3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centri3", "id": 114838443, "node_id": "U_kgDOBthLqw", "avatar_url": "https://avatars.githubusercontent.com/u/114838443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centri3", "html_url": "https://github.com/Centri3", "followers_url": "https://api.github.com/users/Centri3/followers", "following_url": "https://api.github.com/users/Centri3/following{/other_user}", "gists_url": "https://api.github.com/users/Centri3/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centri3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centri3/subscriptions", "organizations_url": "https://api.github.com/users/Centri3/orgs", "repos_url": "https://api.github.com/users/Centri3/repos", "events_url": "https://api.github.com/users/Centri3/events{/privacy}", "received_events_url": "https://api.github.com/users/Centri3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfccebe3e01e8c63ea0fc2833550123e45091e5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfccebe3e01e8c63ea0fc2833550123e45091e5b", "html_url": "https://github.com/rust-lang/rust/commit/dfccebe3e01e8c63ea0fc2833550123e45091e5b"}], "stats": {"total": 90, "additions": 61, "deletions": 29}, "files": [{"sha": "d85d3b58305850ad3ab4d0015e5c3639245be45b", "filename": "clippy_lints/src/semicolon_block.rs", "status": "modified", "additions": 61, "deletions": 29, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/a7c3301b5884b33fc87f2e498f28426dfbcb1a84/clippy_lints%2Fsrc%2Fsemicolon_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c3301b5884b33fc87f2e498f28426dfbcb1a84/clippy_lints%2Fsrc%2Fsemicolon_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_block.rs?ref=a7c3301b5884b33fc87f2e498f28426dfbcb1a84", "patch": "@@ -125,11 +125,15 @@ impl LateLintPass<'_> for SemicolonBlock {\n                     ..\n                 } = stmt else { return };\n                 semicolon_outside_block(cx, block, expr, span);\n+                semicolon_outside_block_if_singleline_check_outside(cx, block, expr, stmt.span)\n             },\n             StmtKind::Semi(Expr {\n                 kind: ExprKind::Block(block @ Block { expr: Some(tail), .. }, _),\n                 ..\n-            }) if !block.span.from_expansion() => semicolon_inside_block(cx, block, tail, stmt.span),\n+            }) if !block.span.from_expansion() => {\n+                semicolon_inside_block(cx, block, tail, stmt.span);\n+                semicolon_outside_block_if_singleline_check_inside(cx, block, tail, stmt.span)\n+            },\n             _ => (),\n         }\n     }\n@@ -139,8 +143,6 @@ fn semicolon_inside_block(cx: &LateContext<'_>, block: &Block<'_>, tail: &Expr<'\n     let insert_span = tail.span.source_callsite().shrink_to_hi();\n     let remove_span = semi_span.with_lo(block.span.hi());\n \n-    check_semicolon_outside_block_if_singleline(cx, block, remove_span, insert_span, true, \"inside\");\n-\n     span_lint_and_then(\n         cx,\n         SEMICOLON_INSIDE_BLOCK,\n@@ -163,8 +165,6 @@ fn semicolon_outside_block(cx: &LateContext<'_>, block: &Block<'_>, tail_stmt_ex\n     let semi_span = cx.sess().source_map().stmt_span(semi_span, block.span);\n     let remove_span = semi_span.with_lo(tail_stmt_expr.span.source_callsite().hi());\n \n-    check_semicolon_outside_block_if_singleline(cx, block, remove_span, insert_span, false, \"outside\");\n-\n     span_lint_and_then(\n         cx,\n         SEMICOLON_OUTSIDE_BLOCK,\n@@ -181,39 +181,54 @@ fn semicolon_outside_block(cx: &LateContext<'_>, block: &Block<'_>, tail_stmt_ex\n     );\n }\n \n-fn check_semicolon_outside_block_if_singleline(\n+fn semicolon_outside_block_if_singleline_check_inside(\n     cx: &LateContext<'_>,\n     block: &Block<'_>,\n-    remove_span: Span,\n-    insert_span: Span,\n-    inequality: bool,\n-    ty: &str,\n+    tail: &Expr<'_>,\n+    semi_span: Span,\n ) {\n-    let remove_line = cx\n-        .sess()\n-        .source_map()\n-        .lookup_line(remove_span.lo())\n-        .expect(\"failed to get `remove_span`'s line\")\n-        .line;\n-    let insert_line = cx\n-        .sess()\n-        .source_map()\n-        .lookup_line(insert_span.lo())\n-        .expect(\"failed to get `insert_span`'s line\")\n-        .line;\n+    let insert_span = tail.span.source_callsite().shrink_to_hi();\n+    let remove_span = semi_span.with_lo(block.span.hi());\n+\n+    let (remove_line, insert_line) = get_line(cx, remove_span, insert_span);\n+\n+    if insert_line != remove_line {\n+        span_lint_and_then(\n+            cx,\n+            SEMICOLON_OUTSIDE_BLOCK_IF_SINGLELINE,\n+            block.span,\n+            &format!(\"consider moving the `;` inside the block for consistent formatting\"),\n+            |diag| {\n+                multispan_sugg_with_applicability(\n+                    diag,\n+                    \"put the `;` here\",\n+                    Applicability::MachineApplicable,\n+                    [(remove_span, String::new()), (insert_span, \";\".to_owned())],\n+                );\n+            },\n+        );\n+    }\n+}\n \n-    let eq = if inequality {\n-        remove_line != insert_line\n-    } else {\n-        remove_line == insert_line\n-    };\n+fn semicolon_outside_block_if_singleline_check_outside(\n+    cx: &LateContext<'_>,\n+    block: &Block<'_>,\n+    tail_stmt_expr: &Expr<'_>,\n+    semi_span: Span,\n+) {\n+    let insert_span = block.span.with_lo(block.span.hi());\n+    // account for macro calls\n+    let semi_span = cx.sess().source_map().stmt_span(semi_span, block.span);\n+    let remove_span = semi_span.with_lo(tail_stmt_expr.span.source_callsite().hi());\n+\n+    let (remove_line, insert_line) = get_line(cx, remove_span, insert_span);\n \n-    if eq {\n+    if remove_line == insert_line {\n         span_lint_and_then(\n             cx,\n             SEMICOLON_OUTSIDE_BLOCK_IF_SINGLELINE,\n             block.span,\n-            &format!(\"consider moving the `;` {ty} the block for consistent formatting\"),\n+            &format!(\"consider moving the `;` outside the block for consistent formatting\"),\n             |diag| {\n                 multispan_sugg_with_applicability(\n                     diag,\n@@ -225,3 +240,20 @@ fn check_semicolon_outside_block_if_singleline(\n         );\n     }\n }\n+\n+fn get_line(cx: &LateContext<'_>, remove_span: Span, insert_span: Span) -> (usize, usize) {\n+    let remove_line = cx\n+        .sess()\n+        .source_map()\n+        .lookup_line(remove_span.lo())\n+        .expect(\"failed to get `remove_span`'s line\")\n+        .line;\n+    let insert_line = cx\n+        .sess()\n+        .source_map()\n+        .lookup_line(insert_span.lo())\n+        .expect(\"failed to get `insert_span`'s line\")\n+        .line;\n+\n+    (remove_line, insert_line)\n+}"}]}