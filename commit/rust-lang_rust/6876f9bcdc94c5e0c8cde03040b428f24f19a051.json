{"sha": "6876f9bcdc94c5e0c8cde03040b428f24f19a051", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NzZmOWJjZGM5NGM1ZTBjOGNkZTAzMDQwYjQyOGYyNGYxOWEwNTE=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-08-26T23:06:24Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-08-26T23:06:24Z"}, "message": "filter linkcheck spurious failure", "tree": {"sha": "851bb88357e7c01ad0783a67ab25ccaab35dffdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/851bb88357e7c01ad0783a67ab25ccaab35dffdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6876f9bcdc94c5e0c8cde03040b428f24f19a051", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6876f9bcdc94c5e0c8cde03040b428f24f19a051", "html_url": "https://github.com/rust-lang/rust/commit/6876f9bcdc94c5e0c8cde03040b428f24f19a051", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6876f9bcdc94c5e0c8cde03040b428f24f19a051/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06", "html_url": "https://github.com/rust-lang/rust/commit/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06"}], "stats": {"total": 54, "additions": 35, "deletions": 19}, "files": [{"sha": "0915600bb3875e3028586e6d13eecfb01136dad7", "filename": "src/tools/rustbook/src/main.rs", "status": "modified", "additions": 35, "deletions": 19, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/6876f9bcdc94c5e0c8cde03040b428f24f19a051/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6876f9bcdc94c5e0c8cde03040b428f24f19a051/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs?ref=6876f9bcdc94c5e0c8cde03040b428f24f19a051", "patch": "@@ -1,18 +1,18 @@\n-use clap::{crate_version};\n+use clap::crate_version;\n \n use std::env;\n use std::path::{Path, PathBuf};\n \n-use clap::{App, ArgMatches, SubCommand, AppSettings};\n+use clap::{App, AppSettings, ArgMatches, SubCommand};\n \n+use mdbook::errors::Result as Result3;\n use mdbook::MDBook;\n-use mdbook::errors::{Result as Result3};\n \n+use failure::Error;\n #[cfg(feature = \"linkcheck\")]\n use mdbook::renderer::RenderContext;\n #[cfg(feature = \"linkcheck\")]\n use mdbook_linkcheck::{self, errors::BrokenLinks};\n-use failure::Error;\n \n fn main() {\n     let d_message = \"-d, --dest-dir=[dest-dir]\n@@ -21,18 +21,22 @@ fn main() {\n 'A directory for your book{n}(Defaults to Current Directory when omitted)'\";\n \n     let matches = App::new(\"rustbook\")\n-                    .about(\"Build a book with mdBook\")\n-                    .author(\"Steve Klabnik <steve@steveklabnik.com>\")\n-                    .version(&*format!(\"v{}\", crate_version!()))\n-                    .setting(AppSettings::SubcommandRequired)\n-                    .subcommand(SubCommand::with_name(\"build\")\n-                        .about(\"Build the book from the markdown files\")\n-                        .arg_from_usage(d_message)\n-                        .arg_from_usage(dir_message))\n-                    .subcommand(SubCommand::with_name(\"linkcheck\")\n-                        .about(\"Run linkcheck with mdBook 3\")\n-                        .arg_from_usage(dir_message))\n-                    .get_matches();\n+        .about(\"Build a book with mdBook\")\n+        .author(\"Steve Klabnik <steve@steveklabnik.com>\")\n+        .version(&*format!(\"v{}\", crate_version!()))\n+        .setting(AppSettings::SubcommandRequired)\n+        .subcommand(\n+            SubCommand::with_name(\"build\")\n+                .about(\"Build the book from the markdown files\")\n+                .arg_from_usage(d_message)\n+                .arg_from_usage(dir_message),\n+        )\n+        .subcommand(\n+            SubCommand::with_name(\"linkcheck\")\n+                .about(\"Run linkcheck with mdBook 3\")\n+                .arg_from_usage(dir_message),\n+        )\n+        .get_matches();\n \n     // Check which subcomamnd the user ran...\n     match matches.subcommand() {\n@@ -46,23 +50,35 @@ fn main() {\n \n                 ::std::process::exit(101);\n             }\n-        },\n+        }\n         (\"linkcheck\", Some(sub_matches)) => {\n             if let Err(err) = linkcheck(sub_matches) {\n                 eprintln!(\"Error: {}\", err);\n \n+                // HACK: ignore timeouts\n+                #[allow(unused_mut)]\n+                let mut actually_broken = false;\n+\n                 #[cfg(feature = \"linkcheck\")]\n                 {\n                     if let Ok(broken_links) = err.downcast::<BrokenLinks>() {\n                         for cause in broken_links.links().iter() {\n                             eprintln!(\"\\tCaused By: {}\", cause);\n+\n+                            if cause.contains(\"timed out\") {\n+                                actually_broken = true;\n+                            }\n                         }\n                     }\n                 }\n \n-                ::std::process::exit(101);\n+                if actually_broken {\n+                    std::process::exit(101);\n+                } else {\n+                    std::process::exit(0);\n+                }\n             }\n-        },\n+        }\n         (_, _) => unreachable!(),\n     };\n }"}]}