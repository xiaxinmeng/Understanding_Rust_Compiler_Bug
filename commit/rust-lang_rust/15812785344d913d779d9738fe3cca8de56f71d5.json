{"sha": "15812785344d913d779d9738fe3cca8de56f71d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ODEyNzg1MzQ0ZDkxM2Q3NzlkOTczOGZlM2NjYThkZTU2ZjcxZDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-10T17:12:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-10T17:12:48Z"}, "message": "Auto merge of #66364 - Centril:cleanup-macro-def, r=petrochenkov,eddyb\n\nCleanup `rmeta::MacroDef`\n\nAvoid using rountrip parsing in the encoder and in `fn load_macro_untracked`.\n\nThe main reason I was interested in this was to remove `rustc_parse` as a dependency of `rustc_metadata` but it seems like this had other benefits as well.\n\nFixes #49511.\n\nr? @eddyb\ncc @matthewjasper @estebank @petrochenkov", "tree": {"sha": "66030ca0994b2b5b8066582debf391d34ff368bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66030ca0994b2b5b8066582debf391d34ff368bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15812785344d913d779d9738fe3cca8de56f71d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15812785344d913d779d9738fe3cca8de56f71d5", "html_url": "https://github.com/rust-lang/rust/commit/15812785344d913d779d9738fe3cca8de56f71d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15812785344d913d779d9738fe3cca8de56f71d5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd155df0a69338757ca39a2a606a6accb7b8d342", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd155df0a69338757ca39a2a606a6accb7b8d342", "html_url": "https://github.com/rust-lang/rust/commit/dd155df0a69338757ca39a2a606a6accb7b8d342"}, {"sha": "bafa5cc9ba35228115560b0b6f3038eb83f161e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/bafa5cc9ba35228115560b0b6f3038eb83f161e8", "html_url": "https://github.com/rust-lang/rust/commit/bafa5cc9ba35228115560b0b6f3038eb83f161e8"}], "stats": {"total": 479, "additions": 190, "deletions": 289}, "files": [{"sha": "aefd40bfaa59ea3c7fb42bac363900e1c81082c4", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -3891,14 +3891,12 @@ dependencies = [\n  \"memmap\",\n  \"rustc\",\n  \"rustc_ast\",\n- \"rustc_ast_pretty\",\n  \"rustc_attr\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_expand\",\n  \"rustc_hir\",\n  \"rustc_index\",\n- \"rustc_parse\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"serialize\","}, {"sha": "5cbaa5a42f6780f73cd6293ca91b5a42caa9f912", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -111,6 +111,7 @@ macro_rules! define_dep_nodes {\n     ) => (\n         #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash,\n                  RustcEncodable, RustcDecodable)]\n+        #[allow(non_camel_case_types)]\n         pub enum DepKind {\n             $($variant),*\n         }\n@@ -173,6 +174,7 @@ macro_rules! define_dep_nodes {\n \n         pub struct DepConstructor;\n \n+        #[allow(non_camel_case_types)]\n         impl DepConstructor {\n             $(\n                 #[inline(always)]"}, {"sha": "dcc8dcbf21961588412f740fd715729ba9c7364f", "filename": "src/librustc/lint.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint.rs?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -344,15 +344,8 @@ pub fn in_external_macro(sess: &Session, span: Span) -> bool {\n         ExpnKind::Root | ExpnKind::Desugaring(DesugaringKind::ForLoop) => false,\n         ExpnKind::AstPass(_) | ExpnKind::Desugaring(_) => true, // well, it's \"external\"\n         ExpnKind::Macro(MacroKind::Bang, _) => {\n-            if expn_data.def_site.is_dummy() {\n-                // Dummy span for the `def_site` means it's an external macro.\n-                return true;\n-            }\n-            match sess.source_map().span_to_snippet(expn_data.def_site) {\n-                Ok(code) => !code.starts_with(\"macro_rules\"),\n-                // No snippet means external macro or compiler-builtin expansion.\n-                Err(_) => true,\n-            }\n+            // Dummy span for the `def_site` means it's an external macro.\n+            expn_data.def_site.is_dummy() || sess.source_map().is_imported(expn_data.def_site)\n         }\n         ExpnKind::Macro(..) => true, // definitely a plugin\n     }"}, {"sha": "cf917daef83880930ae61e8aa909c66283360989", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -110,7 +110,7 @@ pub fn report_unstable(\n     let span_key = msp.primary_span().and_then(|sp: Span| {\n         if !sp.is_dummy() {\n             let file = sm.lookup_char_pos(sp.lo()).file;\n-            if file.name.is_macros() { None } else { Some(span) }\n+            if file.is_imported() { None } else { Some(span) }\n         } else {\n             None\n         }"}, {"sha": "03f83e616365b19c1c5e433d864d12f51bfceab9", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -414,22 +414,24 @@ pub trait Emitter {\n     }\n \n     // This does a small \"fix\" for multispans by looking to see if it can find any that\n-    // point directly at <*macros>. Since these are often difficult to read, this\n-    // will change the span to point at the use site.\n+    // point directly at external macros. Since these are often difficult to read,\n+    // this will change the span to point at the use site.\n     fn fix_multispans_in_extern_macros(\n         &self,\n         source_map: &Option<Lrc<SourceMap>>,\n         span: &mut MultiSpan,\n         children: &mut Vec<SubDiagnostic>,\n     ) {\n-        for span in iter::once(span).chain(children.iter_mut().map(|child| &mut child.span)) {\n+        debug!(\"fix_multispans_in_extern_macros: before: span={:?} children={:?}\", span, children);\n+        for span in iter::once(&mut *span).chain(children.iter_mut().map(|child| &mut child.span)) {\n             self.fix_multispan_in_extern_macros(source_map, span);\n         }\n+        debug!(\"fix_multispans_in_extern_macros: after: span={:?} children={:?}\", span, children);\n     }\n \n-    // This \"fixes\" MultiSpans that contain Spans that are pointing to locations inside of\n-    // <*macros>. Since these locations are often difficult to read, we move these Spans from\n-    // <*macros> to their corresponding use site.\n+    // This \"fixes\" MultiSpans that contain `Span`s pointing to locations inside of external macros.\n+    // Since these locations are often difficult to read,\n+    // we move these spans from the external macros to their corresponding use site.\n     fn fix_multispan_in_extern_macros(\n         &self,\n         source_map: &Option<Lrc<SourceMap>>,\n@@ -440,14 +442,14 @@ pub trait Emitter {\n             None => return,\n         };\n \n-        // First, find all the spans in <*macros> and point instead at their use site\n+        // First, find all the spans in external macros and point instead at their use site.\n         let replacements: Vec<(Span, Span)> = span\n             .primary_spans()\n             .iter()\n             .copied()\n             .chain(span.span_labels().iter().map(|sp_label| sp_label.span))\n             .filter_map(|sp| {\n-                if !sp.is_dummy() && sm.span_to_filename(sp).is_macros() {\n+                if !sp.is_dummy() && sm.is_imported(sp) {\n                     let maybe_callsite = sp.source_callsite();\n                     if sp != maybe_callsite {\n                         return Some((sp, maybe_callsite));\n@@ -457,7 +459,7 @@ pub trait Emitter {\n             })\n             .collect();\n \n-        // After we have them, make sure we replace these 'bad' def sites with their use sites\n+        // After we have them, make sure we replace these 'bad' def sites with their use sites.\n         for (from, to) in replacements {\n             span.replace(from, to);\n         }\n@@ -472,6 +474,7 @@ impl Emitter for EmitterWriter {\n     fn emit_diagnostic(&mut self, diag: &Diagnostic) {\n         let mut children = diag.children.clone();\n         let (mut primary_span, suggestions) = self.primary_span_formatted(&diag);\n+        debug!(\"emit_diagnostic: suggestions={:?}\", suggestions);\n \n         self.fix_multispans_in_extern_macros_and_render_macro_backtrace(\n             &self.sm,\n@@ -1533,6 +1536,7 @@ impl EmitterWriter {\n \n         // Render the replacements for each suggestion\n         let suggestions = suggestion.splice_lines(&**sm);\n+        debug!(\"emit_suggestion_default: suggestions={:?}\", suggestions);\n \n         if suggestions.is_empty() {\n             // Suggestions coming from macros can have malformed spans. This is a heavy handed"}, {"sha": "1382825922b0edff9bc5526337fc70d5c5ec4bfd", "filename": "src/librustc_errors/json.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc_errors%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc_errors%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fjson.rs?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -394,6 +394,11 @@ impl DiagnosticSpanLine {\n         je.sm\n             .span_to_lines(span)\n             .map(|lines| {\n+                // We can't get any lines if the source is unavailable.\n+                if !je.sm.ensure_source_file_source_present(lines.file.clone()) {\n+                    return vec![];\n+                }\n+\n                 let sf = &*lines.file;\n                 lines\n                     .lines"}, {"sha": "bed26c3736b83978dd485f1796f26a9bccef00d2", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -196,6 +196,11 @@ impl CodeSuggestion {\n                 let lines = sm.span_to_lines(bounding_span).ok()?;\n                 assert!(!lines.lines.is_empty());\n \n+                // We can't splice anything if the source is unavailable.\n+                if !sm.ensure_source_file_source_present(lines.file.clone()) {\n+                    return None;\n+                }\n+\n                 // To build up the result, we do this for each span:\n                 // - push the line segment trailing the previous span\n                 //   (at the beginning a \"phantom\" span pointing at the start of the line)"}, {"sha": "3040a9aefbb308bc4a11282f49d89fa3a1dcb9e1", "filename": "src/librustc_expand/mbe/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -105,10 +105,10 @@ impl<'a> ParserAnyMacro<'a> {\n             if e.span.is_dummy() {\n                 // Get around lack of span in error (#30128)\n                 e.replace_span_with(site_span);\n-                if parser.sess.source_map().span_to_filename(arm_span).is_real() {\n+                if !parser.sess.source_map().is_imported(arm_span) {\n                     e.span_label(arm_span, \"in this macro arm\");\n                 }\n-            } else if !parser.sess.source_map().span_to_filename(parser.token.span).is_real() {\n+            } else if parser.sess.source_map().is_imported(parser.token.span) {\n                 e.span_label(site_span, \"in this macro invocation\");\n             }\n             match kind {\n@@ -297,7 +297,7 @@ fn generic_extension<'cx>(\n     let span = token.span.substitute_dummy(sp);\n     let mut err = cx.struct_span_err(span, &parse_failure_msg(&token));\n     err.span_label(span, label);\n-    if !def_span.is_dummy() && cx.source_map().span_to_filename(def_span).is_real() {\n+    if !def_span.is_dummy() && !cx.source_map().is_imported(def_span) {\n         err.span_label(cx.source_map().def_span(def_span), \"when calling this macro\");\n     }\n "}, {"sha": "0f8bc4323070b17a8ed169face61fb55a5f97030", "filename": "src/librustc_macros/src/symbols.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc_macros%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc_macros%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fsymbols.rs?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -103,6 +103,7 @@ pub fn symbols(input: TokenStream) -> TokenStream {\n             #value,\n         });\n         keyword_stream.extend(quote! {\n+            #[allow(non_upper_case_globals)]\n             pub const #name: Symbol = Symbol::new(#counter);\n         });\n         counter += 1;\n@@ -120,6 +121,8 @@ pub fn symbols(input: TokenStream) -> TokenStream {\n             #value,\n         });\n         symbols_stream.extend(quote! {\n+            #[allow(rustc::default_hash_types)]\n+            #[allow(non_upper_case_globals)]\n             pub const #name: Symbol = Symbol::new(#counter);\n         });\n         counter += 1;\n@@ -149,6 +152,7 @@ pub fn symbols(input: TokenStream) -> TokenStream {\n             () => {\n                 #symbols_stream\n \n+                #[allow(non_upper_case_globals)]\n                 pub const digits_array: &[Symbol; 10] = &[\n                     #digits_stream\n                 ];"}, {"sha": "a8e308c5c9e874ddfbf43b353146b175ddbe4bec", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -15,7 +15,6 @@ log = \"0.4\"\n memmap = \"0.7\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc = { path = \"../librustc\" }\n-rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }\n rustc_attr = { path = \"../librustc_attr\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n@@ -26,7 +25,6 @@ rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n stable_deref_trait = \"1.0.0\"\n rustc_ast = { path = \"../librustc_ast\" }\n rustc_expand = { path = \"../librustc_expand\" }\n-rustc_parse = { path = \"../librustc_parse\" }\n rustc_span = { path = \"../librustc_span\" }\n \n [target.'cfg(windows)'.dependencies]"}, {"sha": "f6b914761c2486c0115f12b0b2974f58ade0fa70", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -1275,9 +1275,9 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         }\n     }\n \n-    fn get_macro(&self, id: DefIndex) -> MacroDef {\n+    fn get_macro(&self, id: DefIndex, sess: &Session) -> MacroDef {\n         match self.kind(id) {\n-            EntryKind::MacroDef(macro_def) => macro_def.decode(self),\n+            EntryKind::MacroDef(macro_def) => macro_def.decode((self, sess)),\n             _ => bug!(),\n         }\n     }"}, {"sha": "dcbfed8972c42c08ceb0d3f3964e1a7cc7276d27", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 14, "deletions": 27, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -14,27 +14,22 @@ use rustc::session::{CrateDisambiguator, Session};\n use rustc::ty::query::Providers;\n use rustc::ty::query::QueryConfig;\n use rustc::ty::{self, TyCtxt};\n+use rustc_ast::ast;\n+use rustc_ast::attr;\n+use rustc_ast::expand::allocator::AllocatorKind;\n+use rustc_ast::ptr::P;\n+use rustc_ast::tokenstream::DelimSpan;\n use rustc_data_structures::svh::Svh;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use rustc_parse::parser::emit_unclosed_delims;\n-use rustc_parse::source_file_to_stream;\n+use rustc_span::source_map::{self, Span, Spanned};\n+use rustc_span::symbol::Symbol;\n \n use rustc_data_structures::sync::Lrc;\n use smallvec::SmallVec;\n use std::any::Any;\n use std::sync::Arc;\n \n-use rustc_ast::ast;\n-use rustc_ast::attr;\n-use rustc_ast::expand::allocator::AllocatorKind;\n-use rustc_ast::ptr::P;\n-use rustc_ast::tokenstream::DelimSpan;\n-use rustc_span::source_map;\n-use rustc_span::source_map::Spanned;\n-use rustc_span::symbol::Symbol;\n-use rustc_span::{FileName, Span};\n-\n macro_rules! provide {\n     (<$lt:tt> $tcx:ident, $def_id:ident, $other:ident, $cdata:ident,\n       $($name:ident => $compute:block)*) => {\n@@ -419,15 +414,9 @@ impl CStore {\n             return LoadedMacro::ProcMacro(data.load_proc_macro(id.index, sess));\n         }\n \n-        let def = data.get_macro(id.index);\n-        let macro_full_name = data.def_path(id.index).to_string_friendly(|_| data.root.name);\n-        let source_name = FileName::Macros(macro_full_name);\n-\n-        let source_file = sess.parse_sess.source_map().new_source_file(source_name, def.body);\n-        let local_span = Span::with_root_ctxt(source_file.start_pos, source_file.end_pos);\n-        let dspan = DelimSpan::from_single(local_span);\n-        let (body, mut errors) = source_file_to_stream(&sess.parse_sess, source_file, None);\n-        emit_unclosed_delims(&mut errors, &sess.parse_sess);\n+        let span = data.get_span(id.index, sess);\n+        let dspan = DelimSpan::from_single(span);\n+        let rmeta::MacroDef { body, legacy } = data.get_macro(id.index, sess);\n \n         // Mark the attrs as used\n         let attrs = data.get_item_attrs(id.index, sess);\n@@ -441,22 +430,20 @@ impl CStore {\n             .data\n             .get_opt_name()\n             .expect(\"no name in load_macro\");\n-        sess.imported_macro_spans\n-            .borrow_mut()\n-            .insert(local_span, (name.to_string(), data.get_span(id.index, sess)));\n+        sess.imported_macro_spans.borrow_mut().insert(span, (name.to_string(), span));\n \n         LoadedMacro::MacroDef(\n             ast::Item {\n                 // FIXME: cross-crate hygiene\n                 ident: ast::Ident::with_dummy_span(name),\n                 id: ast::DUMMY_NODE_ID,\n-                span: local_span,\n+                span,\n                 attrs: attrs.iter().cloned().collect(),\n                 kind: ast::ItemKind::MacroDef(ast::MacroDef {\n                     body: P(ast::MacArgs::Delimited(dspan, ast::MacDelimiter::Brace, body)),\n-                    legacy: def.legacy,\n+                    legacy,\n                 }),\n-                vis: source_map::respan(local_span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n+                vis: source_map::respan(span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n                 tokens: None,\n             },\n             data.root.edition,"}, {"sha": "2b04918296d0660746ef8b20fa080f6e5c890c53", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -1235,10 +1235,9 @@ impl EncodeContext<'tcx> {\n \n     /// Serialize the text of exported macros\n     fn encode_info_for_macro_def(&mut self, macro_def: &hir::MacroDef<'_>) {\n-        use rustc_ast_pretty::pprust;\n         let def_id = self.tcx.hir().local_def_id(macro_def.hir_id);\n         record!(self.per_def.kind[def_id] <- EntryKind::MacroDef(self.lazy(MacroDef {\n-            body: pprust::tts_to_string(macro_def.body.clone()),\n+            body: macro_def.body.clone(),\n             legacy: macro_def.legacy,\n         })));\n         record!(self.per_def.visibility[def_id] <- ty::Visibility::Public);"}, {"sha": "89e26b15d502bb2bf73267a0b62ef75aec4ae44a", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -11,6 +11,7 @@ use rustc::session::config::SymbolManglingVersion;\n use rustc::session::CrateDisambiguator;\n use rustc::ty::{self, ReprOptions, Ty};\n use rustc_ast::ast;\n+use rustc_ast::tokenstream::TokenStream;\n use rustc_attr as attr;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n@@ -324,7 +325,7 @@ struct ModData {\n \n #[derive(RustcEncodable, RustcDecodable)]\n struct MacroDef {\n-    body: String,\n+    body: TokenStream,\n     legacy: bool,\n }\n "}, {"sha": "1d493da9e5b112830e008aeffb5874e7bfc8a077", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -83,8 +83,6 @@ scoped_tls::scoped_thread_local!(pub static GLOBALS: Globals);\n )]\n pub enum FileName {\n     Real(PathBuf),\n-    /// A macro. This includes the full name of the macro, so that there are no clashes.\n-    Macros(String),\n     /// Call to `quote!`.\n     QuoteExpansion(u64),\n     /// Command line.\n@@ -107,7 +105,6 @@ impl std::fmt::Display for FileName {\n         use FileName::*;\n         match *self {\n             Real(ref path) => write!(fmt, \"{}\", path.display()),\n-            Macros(ref name) => write!(fmt, \"<{} macros>\", name),\n             QuoteExpansion(_) => write!(fmt, \"<quote expansion>\"),\n             MacroExpansion(_) => write!(fmt, \"<macro expansion>\"),\n             Anon(_) => write!(fmt, \"<anon>\"),\n@@ -132,8 +129,7 @@ impl FileName {\n         use FileName::*;\n         match *self {\n             Real(_) => true,\n-            Macros(_)\n-            | Anon(_)\n+            Anon(_)\n             | MacroExpansion(_)\n             | ProcMacroSourceCode(_)\n             | CfgSpec(_)\n@@ -144,22 +140,6 @@ impl FileName {\n         }\n     }\n \n-    pub fn is_macros(&self) -> bool {\n-        use FileName::*;\n-        match *self {\n-            Real(_)\n-            | Anon(_)\n-            | MacroExpansion(_)\n-            | ProcMacroSourceCode(_)\n-            | CfgSpec(_)\n-            | CliCrateAttr(_)\n-            | Custom(_)\n-            | QuoteExpansion(_)\n-            | DocTest(_, _) => false,\n-            Macros(_) => true,\n-        }\n-    }\n-\n     pub fn quote_expansion_source_code(src: &str) -> FileName {\n         let mut hasher = StableHasher::new();\n         src.hash(&mut hasher);"}, {"sha": "65095c6f1317cc56b7fe62884c5d2910ba0ddf46", "filename": "src/librustc_span/source_map.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc_span%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc_span%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsource_map.rs?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -975,6 +975,12 @@ impl SourceMap {\n             _ => None,\n         })\n     }\n+\n+    pub fn is_imported(&self, sp: Span) -> bool {\n+        let source_file_index = self.lookup_source_file_idx(sp.lo());\n+        let source_file = &self.files()[source_file_index];\n+        source_file.is_imported()\n+    }\n }\n \n #[derive(Clone)]"}, {"sha": "6df9d0541952c0d26dd6dabc0ce595a959ade681", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -373,7 +373,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> Option<(Span, &'static str, String)> {\n         let sm = self.sess().source_map();\n         let sp = expr.span;\n-        if !sm.span_to_filename(sp).is_real() {\n+        if sm.is_imported(sp) {\n             // Ignore if span is from within a macro #41858, #58298. We previously used the macro\n             // call span, but that breaks down when the type error comes from multiple calls down.\n             return None;\n@@ -523,7 +523,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             {\n                 // We have `&T`, check if what was expected was `T`. If so,\n                 // we may want to suggest removing a `&`.\n-                if !sm.span_to_filename(expr.span).is_real() {\n+                if sm.is_imported(expr.span) {\n                     if let Ok(code) = sm.span_to_snippet(sp) {\n                         if code.starts_with('&') {\n                             return Some((\n@@ -601,7 +601,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // FIXME(estebank): modify once we decide to suggest `as` casts\n             return false;\n         }\n-        if !self.tcx.sess.source_map().span_to_filename(expr.span).is_real() {\n+        if self.tcx.sess.source_map().is_imported(expr.span) {\n             // Ignore if span is from within a macro.\n             return false;\n         }"}, {"sha": "d3015b403fc4ccf5963b1ce72b8073c848c689c8", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -1565,7 +1565,7 @@ impl Context {\n \n         let mut path = String::new();\n \n-        // We can safely ignore macros from other libraries\n+        // We can safely ignore synthetic `SourceFile`s.\n         let file = match item.source.filename {\n             FileName::Real(ref path) => path,\n             _ => return None,"}, {"sha": "86f46b2d7e15422214dfc8ca029583447eec6ecd", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -35,7 +35,7 @@ impl<'a> DocFolder for SourceCollector<'a> {\n         // If we're including source files, and we haven't seen this file yet,\n         // then we need to render it out to the filesystem.\n         if self.scx.include_sources\n-            // skip all invalid or macro spans\n+            // skip all synthetic \"files\"\n             && item.source.filename.is_real()\n             // skip non-local items\n             && item.def_id.is_local()"}, {"sha": "d2aa4bbbd12511982843df7cd720c9c4f4d7c9c3", "filename": "src/test/rustdoc/issue-26606.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Frustdoc%2Fissue-26606.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Frustdoc%2Fissue-26606.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-26606.rs?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -7,5 +7,5 @@\n extern crate issue_26606_macro;\n \n // @has issue_26606/constant.FOO.html\n-// @!has - '//a/@href' '../src/'\n+// @has - '//a/@href' '../src/issue_26606/auxiliary/issue-26606-macro.rs.html#3'\n make_item!(FOO);"}, {"sha": "dda9ddf1f487f3faf715b326f96b50d0a0712f9f", "filename": "src/test/ui/consts/miri_unleashed/mutable_const2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -10,7 +10,7 @@ error: internal compiler error: mutable allocation in constant\n LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-thread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:355:17\n+thread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:360:17\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n \n error: internal compiler error: unexpected panic"}, {"sha": "88a1f5dc6736d96efb6bebf20eb43fdd57fcd467", "filename": "src/test/ui/editions/edition-keywords-2015-2018-expansion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -7,8 +7,8 @@ LL |     produces_async! {}\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you can escape reserved keywords to use them as identifiers\n    |\n-LL | () => (pub fn r#async () { })\n-   |               ^^^^^^^\n+LL |     () => (pub fn r#async() {})\n+   |                   ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e12d1a48463d73aa392a73273fc369d150d3aaa6", "filename": "src/test/ui/editions/edition-keywords-2018-2015-parsing.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -33,10 +33,10 @@ LL |     r#async = consumes_async_raw!(async);\n    |                                   ^^^^^ no rules expected this token in macro call\n \n error: macro expansion ends with an incomplete expression: expected one of `move`, `|`, or `||`\n-  --> <::edition_kw_macro_2015::passes_ident macros>:1:22\n+  --> $DIR/auxiliary/edition-kw-macro-2015.rs:27:23\n    |\n-LL | ($ i : ident) => ($ i)\n-   |                      ^ expected one of `move`, `|`, or `||`\n+LL |     ($i: ident) => ($i)\n+   |                       ^ expected one of `move`, `|`, or `||`\n    | \n   ::: $DIR/edition-keywords-2018-2015-parsing.rs:16:8\n    |"}, {"sha": "5eaa1d03a4a5f491dfe2d5bd3b5f8089f61d1d34", "filename": "src/test/ui/editions/edition-keywords-2018-2018-expansion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -7,8 +7,8 @@ LL |     produces_async! {}\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you can escape reserved keywords to use them as identifiers\n    |\n-LL | () => (pub fn r#async () { })\n-   |               ^^^^^^^\n+LL |     () => (pub fn r#async() {})\n+   |                   ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "110165fc077ca54711b7659be84dd9e12089f24f", "filename": "src/test/ui/editions/edition-keywords-2018-2018-parsing.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -33,10 +33,10 @@ LL |     r#async = consumes_async_raw!(async);\n    |                                   ^^^^^ no rules expected this token in macro call\n \n error: macro expansion ends with an incomplete expression: expected one of `move`, `|`, or `||`\n-  --> <::edition_kw_macro_2018::passes_ident macros>:1:22\n+  --> $DIR/auxiliary/edition-kw-macro-2018.rs:27:23\n    |\n-LL | ($ i : ident) => ($ i)\n-   |                      ^ expected one of `move`, `|`, or `||`\n+LL |     ($i: ident) => ($i)\n+   |                       ^ expected one of `move`, `|`, or `||`\n    | \n   ::: $DIR/edition-keywords-2018-2018-parsing.rs:16:8\n    |"}, {"sha": "2f3d48bf039074087c46d525c808800ff5120783", "filename": "src/test/ui/macro_backtrace/main.-Zmacro-backtrace.stderr", "status": "modified", "additions": 54, "deletions": 50, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.-Zmacro-backtrace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.-Zmacro-backtrace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.-Zmacro-backtrace.stderr?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -13,66 +13,70 @@ LL |       pong!();\n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n   --> $DIR/main.rs:10:20\n    |\n-LL | / macro_rules! pong {\n-LL | |     () => { syntax error };\n-   | |                    ^^^^^ expected one of 8 possible tokens\n-LL | | }\n-   | |_- in this expansion of `pong!`\n+LL | /  macro_rules! pong {\n+LL | |      () => { syntax error };\n+   | |                     ^^^^^ expected one of 8 possible tokens\n+LL | |  }\n+   | |__- in this expansion of `pong!`\n ...\n-LL |       ping!();\n-   |       -------- in this macro invocation\n+LL |        ping!();\n+   |        -------- in this macro invocation\n    | \n-  ::: <::ping::ping macros>:1:1\n+  ::: $DIR/auxiliary/ping.rs:5:1\n    |\n-LL |   () => { pong ! () ; }\n-   |   ---------------------\n-   |   |       |\n-   |   |       in this macro invocation\n-   |   in this expansion of `ping!`\n+LL |  / macro_rules! ping {\n+LL |  |     () => {\n+LL |  |         pong!();\n+   |  |         -------- in this macro invocation\n+LL |  |     }\n+LL |  | }\n+   |  |_- in this expansion of `ping!`\n \n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n   --> $DIR/main.rs:10:20\n    |\n-LL | / macro_rules! pong {\n-LL | |     () => { syntax error };\n-   | |                    ^^^^^ expected one of 8 possible tokens\n-LL | | }\n-   | |_- in this expansion of `pong!` (#5)\n+LL | /  macro_rules! pong {\n+LL | |      () => { syntax error };\n+   | |                     ^^^^^ expected one of 8 possible tokens\n+LL | |  }\n+   | |__- in this expansion of `pong!` (#5)\n ...\n-LL |       deep!();\n-   |       -------- in this macro invocation (#1)\n+LL |        deep!();\n+   |        -------- in this macro invocation (#1)\n    | \n-  ::: <::ping::deep macros>:1:1\n+  ::: $DIR/auxiliary/ping.rs:5:1\n    |\n-LL |   () => { foo ! () ; }\n-   |   --------------------\n-   |   |       |\n-   |   |       in this macro invocation (#2)\n-   |   in this expansion of `deep!` (#1)\n-   | \n-  ::: <::ping::foo macros>:1:1\n-   |\n-LL |   () => { bar ! () ; }\n-   |   --------------------\n-   |   |       |\n-   |   |       in this macro invocation (#3)\n-   |   in this expansion of `foo!` (#2)\n-   | \n-  ::: <::ping::bar macros>:1:1\n-   |\n-LL |   () => { ping ! () ; }\n-   |   ---------------------\n-   |   |       |\n-   |   |       in this macro invocation (#4)\n-   |   in this expansion of `bar!` (#3)\n-   | \n-  ::: <::ping::ping macros>:1:1\n-   |\n-LL |   () => { pong ! () ; }\n-   |   ---------------------\n-   |   |       |\n-   |   |       in this macro invocation (#5)\n-   |   in this expansion of `ping!` (#4)\n+LL |  / macro_rules! ping {\n+LL |  |     () => {\n+LL |  |         pong!();\n+   |  |         -------- in this macro invocation (#5)\n+LL |  |     }\n+LL |  | }\n+   |  |_- in this expansion of `ping!` (#4)\n+...\n+LL | /  macro_rules! deep {\n+LL | |      () => {\n+LL | |          foo!();\n+   | |          ------- in this macro invocation (#2)\n+LL | |      }\n+LL | |  }\n+   | |__- in this expansion of `deep!` (#1)\n+...\n+LL | /  macro_rules! foo {\n+LL | |      () => {\n+LL | |          bar!();\n+   | |          ------- in this macro invocation (#3)\n+LL | |      }\n+LL | |  }\n+   | |__- in this expansion of `foo!` (#2)\n+...\n+LL | /  macro_rules! bar {\n+LL | |      () => {\n+LL | |          ping!();\n+   | |          -------- in this macro invocation (#4)\n+LL | |      }\n+LL | |  }\n+   | |__- in this expansion of `bar!` (#3)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "716a0005ba3e4556e4d8f7fc7e7e0cd1da4d8e4f", "filename": "src/test/ui/macros/unknown-builtin.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.rs?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -1,3 +1,8 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n+\n // error-pattern: cannot find a built-in macro with name `line`\n \n #![feature(rustc_attrs)]"}, {"sha": "ed163750a6ea48bd7506994be8c56c4c2295a83c", "filename": "src/test/ui/macros/unknown-builtin.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.stderr?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -1,14 +1,18 @@\n error: cannot find a built-in macro with name `unknown`\n-  --> $DIR/unknown-builtin.rs:6:1\n+  --> $DIR/unknown-builtin.rs:11:1\n    |\n LL | macro_rules! unknown { () => () }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: cannot find a built-in macro with name `line`\n-  --> <::core::macros::builtin::line macros>:1:1\n+  --> $SRC_DIR/libcore/macros/mod.rs:LL:COL\n    |\n-LL | () => { } ;\n-   | ^^^^^^^^^^^\n+LL | /     macro_rules! line {\n+LL | |         () => {\n+LL | |             /* compiler built-in */\n+LL | |         };\n+LL | |     }\n+   | |_____^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c6dde67cfeba6141903901f1a29a1193aff753cd", "filename": "src/test/ui/methods/method-on-ambiguous-numeric-type.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Fmethods%2Fmethod-on-ambiguous-numeric-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Fmethods%2Fmethod-on-ambiguous-numeric-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-on-ambiguous-numeric-type.stderr?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -42,10 +42,13 @@ LL |     ($ident:ident) => { let $ident: i32 = 42; }\n error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n   --> $DIR/method-on-ambiguous-numeric-type.rs:30:9\n    |\n-LL |     mac!(bar);\n-   |     ---------- you must specify a type for this binding, like `i32`\n LL |     bar.pow(2);\n    |         ^^^\n+   |\n+help: you must specify a type for this binding, like `i32`\n+   |\n+LL |     ($ident:ident) => { let $ident: i32 = 42; }\n+   |                             ^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "30a4cd7c116a627917ac5868ac03aad2c39f20bd", "filename": "src/test/ui/proc-macro/mixed-site-span.stderr", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -21,21 +21,10 @@ LL |         local_def;\n    |         ^^^^^^^^^ not found in this scope\n \n error[E0412]: cannot find type `ItemUse` in crate `$crate`\n-  --> $DIR/auxiliary/mixed-site-span.rs:14:1\n-   |\n-LL | / pub fn proc_macro_rules(input: TokenStream) -> TokenStream {\n-LL | |     if input.is_empty() {\n-LL | |         let id = |s| TokenTree::from(Ident::new(s, Span::mixed_site()));\n-LL | |         let item_def = id(\"ItemDef\");\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^ not found in `$crate`\n-   | \n-  ::: $DIR/mixed-site-span.rs:26:1\n-   |\n-LL |   pass_dollar_crate!();\n-   |   --------------------- in this macro invocation\n+  --> $DIR/mixed-site-span.rs:26:1\n+   |\n+LL | pass_dollar_crate!();\n+   | ^^^^^^^^^^^^^^^^^^^^^ not found in `$crate`\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: possible candidate is found in another module, you can import it into scope"}, {"sha": "4405278528eebe973c37c2b83f21241a06301fd8", "filename": "src/test/ui/proc-macro/multispan.stderr", "status": "modified", "additions": 28, "deletions": 105, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Fproc-macro%2Fmultispan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Fproc-macro%2Fmultispan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmultispan.stderr?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -1,19 +1,8 @@\n error: hello to you, too!\n-  --> $DIR/auxiliary/multispan.rs:31:1\n-   |\n-LL | / pub fn hello(input: TokenStream) -> TokenStream {\n-LL | |     if let Err(diag) = parse(input) {\n-LL | |         diag.emit();\n-LL | |     }\n-LL | |\n-LL | |     TokenStream::new()\n-LL | | }\n-   | |_^\n-   | \n-  ::: $DIR/multispan.rs:14:5\n-   |\n-LL |       hello!(hi);\n-   |       ----------- in this macro invocation\n+  --> $DIR/multispan.rs:14:5\n+   |\n+LL |     hello!(hi);\n+   |     ^^^^^^^^^^^\n    |\n note: found these 'hi's\n   --> $DIR/multispan.rs:14:12\n@@ -23,21 +12,10 @@ LL |     hello!(hi);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: hello to you, too!\n-  --> $DIR/auxiliary/multispan.rs:31:1\n-   |\n-LL | / pub fn hello(input: TokenStream) -> TokenStream {\n-LL | |     if let Err(diag) = parse(input) {\n-LL | |         diag.emit();\n-LL | |     }\n-LL | |\n-LL | |     TokenStream::new()\n-LL | | }\n-   | |_^\n-   | \n-  ::: $DIR/multispan.rs:17:5\n-   |\n-LL |       hello!(hi hi);\n-   |       -------------- in this macro invocation\n+  --> $DIR/multispan.rs:17:5\n+   |\n+LL |     hello!(hi hi);\n+   |     ^^^^^^^^^^^^^^\n    |\n note: found these 'hi's\n   --> $DIR/multispan.rs:17:12\n@@ -47,21 +25,10 @@ LL |     hello!(hi hi);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: hello to you, too!\n-  --> $DIR/auxiliary/multispan.rs:31:1\n-   |\n-LL | / pub fn hello(input: TokenStream) -> TokenStream {\n-LL | |     if let Err(diag) = parse(input) {\n-LL | |         diag.emit();\n-LL | |     }\n-LL | |\n-LL | |     TokenStream::new()\n-LL | | }\n-   | |_^\n-   | \n-  ::: $DIR/multispan.rs:20:5\n-   |\n-LL |       hello!(hi hi hi);\n-   |       ----------------- in this macro invocation\n+  --> $DIR/multispan.rs:20:5\n+   |\n+LL |     hello!(hi hi hi);\n+   |     ^^^^^^^^^^^^^^^^^\n    |\n note: found these 'hi's\n   --> $DIR/multispan.rs:20:12\n@@ -71,21 +38,10 @@ LL |     hello!(hi hi hi);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: hello to you, too!\n-  --> $DIR/auxiliary/multispan.rs:31:1\n-   |\n-LL | / pub fn hello(input: TokenStream) -> TokenStream {\n-LL | |     if let Err(diag) = parse(input) {\n-LL | |         diag.emit();\n-LL | |     }\n-LL | |\n-LL | |     TokenStream::new()\n-LL | | }\n-   | |_^\n-   | \n-  ::: $DIR/multispan.rs:23:5\n-   |\n-LL |       hello!(hi hey hi yo hi beep beep hi hi);\n-   |       ---------------------------------------- in this macro invocation\n+  --> $DIR/multispan.rs:23:5\n+   |\n+LL |     hello!(hi hey hi yo hi beep beep hi hi);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: found these 'hi's\n   --> $DIR/multispan.rs:23:12\n@@ -95,21 +51,10 @@ LL |     hello!(hi hey hi yo hi beep beep hi hi);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: hello to you, too!\n-  --> $DIR/auxiliary/multispan.rs:31:1\n-   |\n-LL | / pub fn hello(input: TokenStream) -> TokenStream {\n-LL | |     if let Err(diag) = parse(input) {\n-LL | |         diag.emit();\n-LL | |     }\n-LL | |\n-LL | |     TokenStream::new()\n-LL | | }\n-   | |_^\n-   | \n-  ::: $DIR/multispan.rs:24:5\n-   |\n-LL |       hello!(hi there, hi how are you? hi... hi.);\n-   |       -------------------------------------------- in this macro invocation\n+  --> $DIR/multispan.rs:24:5\n+   |\n+LL |     hello!(hi there, hi how are you? hi... hi.);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: found these 'hi's\n   --> $DIR/multispan.rs:24:12\n@@ -119,21 +64,10 @@ LL |     hello!(hi there, hi how are you? hi... hi.);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: hello to you, too!\n-  --> $DIR/auxiliary/multispan.rs:31:1\n-   |\n-LL | / pub fn hello(input: TokenStream) -> TokenStream {\n-LL | |     if let Err(diag) = parse(input) {\n-LL | |         diag.emit();\n-LL | |     }\n-LL | |\n-LL | |     TokenStream::new()\n-LL | | }\n-   | |_^\n-   | \n-  ::: $DIR/multispan.rs:25:5\n-   |\n-LL |       hello!(whoah. hi di hi di ho);\n-   |       ------------------------------ in this macro invocation\n+  --> $DIR/multispan.rs:25:5\n+   |\n+LL |     hello!(whoah. hi di hi di ho);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: found these 'hi's\n   --> $DIR/multispan.rs:25:19\n@@ -143,21 +77,10 @@ LL |     hello!(whoah. hi di hi di ho);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: hello to you, too!\n-  --> $DIR/auxiliary/multispan.rs:31:1\n-   |\n-LL | / pub fn hello(input: TokenStream) -> TokenStream {\n-LL | |     if let Err(diag) = parse(input) {\n-LL | |         diag.emit();\n-LL | |     }\n-LL | |\n-LL | |     TokenStream::new()\n-LL | | }\n-   | |_^\n-   | \n-  ::: $DIR/multispan.rs:26:5\n-   |\n-LL |       hello!(hi good hi and good bye);\n-   |       -------------------------------- in this macro invocation\n+  --> $DIR/multispan.rs:26:5\n+   |\n+LL |     hello!(hi good hi and good bye);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: found these 'hi's\n   --> $DIR/multispan.rs:26:12"}, {"sha": "5c0cbd77a8da7f810bc72ea40346ef02cb8b6f6a", "filename": "src/test/ui/proc-macro/span-api-tests.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Fproc-macro%2Fspan-api-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Fproc-macro%2Fspan-api-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-api-tests.rs?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -11,7 +11,9 @@ extern crate span_test_macros;\n \n extern crate span_api_tests;\n \n-use span_api_tests::{reemit, assert_fake_source_file, assert_source_file, macro_stringify};\n+// FIXME(69775): Investigate `assert_fake_source_file`.\n+\n+use span_api_tests::{reemit, assert_source_file, macro_stringify};\n \n macro_rules! say_hello {\n     ($macname:ident) => ( $macname! { \"Hello, world!\" })\n@@ -25,7 +27,7 @@ reemit_legacy! {\n     assert_source_file! { \"Hello, world!\" }\n }\n \n-say_hello_extern! { assert_fake_source_file }\n+say_hello_extern! { assert_source_file }\n \n reemit! {\n     assert_source_file! { \"Hello, world!\" }"}, {"sha": "ca82a3453452559cf5f4f40de65a7f45973622e7", "filename": "src/test/ui/proc-macro/three-equals.stderr", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Fproc-macro%2Fthree-equals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Fproc-macro%2Fthree-equals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fthree-equals.stderr?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -1,19 +1,8 @@\n error: found 2 equal signs, need exactly 3\n-  --> $DIR/auxiliary/three-equals.rs:42:1\n-   |\n-LL | / pub fn three_equals(input: TokenStream) -> TokenStream {\n-LL | |     if let Err(diag) = parse(input) {\n-LL | |         diag.emit();\n-LL | |         return TokenStream::new();\n-...  |\n-LL | |     \"3\".parse().unwrap()\n-LL | | }\n-   | |_^\n-   | \n-  ::: $DIR/three-equals.rs:15:5\n-   |\n-LL |       three_equals!(==);\n-   |       ------------------ in this macro invocation\n+  --> $DIR/three-equals.rs:15:5\n+   |\n+LL |     three_equals!(==);\n+   |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: input must be: `===`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)"}]}