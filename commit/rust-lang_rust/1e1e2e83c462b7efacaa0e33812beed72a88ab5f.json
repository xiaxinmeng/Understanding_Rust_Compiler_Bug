{"sha": "1e1e2e83c462b7efacaa0e33812beed72a88ab5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMWUyZTgzYzQ2MmI3ZWZhY2FhMGUzMzgxMmJlZWQ3MmE4OGFiNWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-05T13:09:25Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-05T13:09:25Z"}, "message": "compound ops", "tree": {"sha": "134caad399dc6a3cc4bfccf49d525e8db646a657", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/134caad399dc6a3cc4bfccf49d525e8db646a657"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e1e2e83c462b7efacaa0e33812beed72a88ab5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e1e2e83c462b7efacaa0e33812beed72a88ab5f", "html_url": "https://github.com/rust-lang/rust/commit/1e1e2e83c462b7efacaa0e33812beed72a88ab5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e1e2e83c462b7efacaa0e33812beed72a88ab5f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5691da4c84655e0d966ac11406fa7a90bdd02643", "url": "https://api.github.com/repos/rust-lang/rust/commits/5691da4c84655e0d966ac11406fa7a90bdd02643", "html_url": "https://github.com/rust-lang/rust/commit/5691da4c84655e0d966ac11406fa7a90bdd02643"}], "stats": {"total": 187, "additions": 171, "deletions": 16}, "files": [{"sha": "67022b296d7aa392b9843bdd61ce12a549bf2338", "filename": "src/grammar.ron", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e1e2e83c462b7efacaa0e33812beed72a88ab5f/src%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/1e1e2e83c462b7efacaa0e33812beed72a88ab5f/src%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar.ron?ref=1e1e2e83c462b7efacaa0e33812beed72a88ab5f", "patch": "@@ -37,6 +37,10 @@ Grammar(\n         [\"!=\", \"NEQ\"],\n         [\"-\", \"MINUS\"],\n         [\"->\", \"THIN_ARROW\"],\n+        [\"<=\", \"LTEQ\"],\n+        [\">=\", \"GTEQ\"],\n+        [\"+=\", \"PLUSEQ\"],\n+        [\"-=\", \"MINUSEQ\"],\n     ],\n     keywords: [\n         \"use\","}, {"sha": "baff0da525e161d9ed3fa2055b4dc24ae4c57d87", "filename": "src/grammar/expressions/mod.rs", "status": "modified", "additions": 37, "deletions": 10, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1e1e2e83c462b7efacaa0e33812beed72a88ab5f/src%2Fgrammar%2Fexpressions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1e2e83c462b7efacaa0e33812beed72a88ab5f/src%2Fgrammar%2Fexpressions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fexpressions%2Fmod.rs?ref=1e1e2e83c462b7efacaa0e33812beed72a88ab5f", "patch": "@@ -33,19 +33,45 @@ struct Restrictions {\n     forbid_structs: bool\n }\n \n+enum Op {\n+    Simple,\n+    Composite(SyntaxKind, u8)\n+}\n+\n // test expr_binding_power\n // fn foo() {\n //     1 + 2 * 3 == 1 * 2 + 3;\n //     *x = 1 + 1;\n // }\n-fn bp_of(op: SyntaxKind) -> u8 {\n-    match op {\n+\n+// test compound_ops\n+// fn foo() {\n+//     x += 1;\n+//     1 + 1 <= 2 * 3;\n+//     z -= 3 >= 0;\n+// }\n+fn current_op(p: &Parser) -> (u8, Op) {\n+    if p.at_compound2(L_ANGLE, EQ) {\n+        return (2, Op::Composite(LTEQ, 2))\n+    }\n+    if p.at_compound2(R_ANGLE, EQ) {\n+        return (2, Op::Composite(GTEQ, 2))\n+    }\n+    if p.at_compound2(PLUS, EQ) {\n+        return (1, Op::Composite(PLUSEQ, 2))\n+    }\n+    if p.at_compound2(MINUS, EQ) {\n+        return (1, Op::Composite(MINUSEQ, 2))\n+    }\n+\n+    let bp = match p.current() {\n         EQ => 1,\n         EQEQ | NEQ => 2,\n         MINUS | PLUS => 3,\n         STAR | SLASH => 4,\n-        _ => 0\n-    }\n+        _ => 0,\n+    };\n+    (bp, Op::Simple)\n }\n \n // Parses expression with binding power of at least bp.\n@@ -56,10 +82,16 @@ fn expr_bp(p: &mut Parser, r: Restrictions, bp: u8) {\n     };\n \n     loop {\n-        let op_bp = bp_of(p.current());\n+        let (op_bp, op) = current_op(p);\n         if op_bp < bp {\n             break;\n         }\n+        match op {\n+            Op::Simple => p.bump(),\n+            Op::Composite(kind, n) => {\n+                p.bump_compound(kind, n);\n+            },\n+        }\n         lhs = bin_expr(p, r, lhs, op_bp);\n     }\n }\n@@ -254,12 +286,7 @@ fn struct_lit(p: &mut Parser) {\n }\n \n fn bin_expr(p: &mut Parser, r: Restrictions, lhs: CompletedMarker, bp: u8) -> CompletedMarker {\n-    assert!(match p.current() {\n-        MINUS | PLUS | STAR | SLASH | EQEQ | NEQ | EQ => true,\n-        _ => false,\n-    });\n     let m = lhs.precede(p);\n-    p.bump();\n     expr_bp(p, r, bp);\n     m.complete(p, BIN_EXPR)\n }"}, {"sha": "fef21c5fd1adcbe1393001a46d2da53253dc1753", "filename": "src/parser_api.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1e1e2e83c462b7efacaa0e33812beed72a88ab5f/src%2Fparser_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1e2e83c462b7efacaa0e33812beed72a88ab5f/src%2Fparser_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser_api.rs?ref=1e1e2e83c462b7efacaa0e33812beed72a88ab5f", "patch": "@@ -58,6 +58,10 @@ impl<'t> Parser<'t> {\n         self.current() == kind\n     }\n \n+    pub(crate) fn at_compound2(&self, c1: SyntaxKind, c2: SyntaxKind) -> bool {\n+        self.0.at_compound2(c1, c2)\n+    }\n+\n     /// Checks if the current token is contextual keyword with text `t`.\n     pub(crate) fn at_contextual_kw(&self, t: &str) -> bool {\n         self.0.at_kw(t)\n@@ -85,6 +89,13 @@ impl<'t> Parser<'t> {\n         self.0.bump_remap(kind);\n     }\n \n+    /// Advances the parser by `n` tokens, remapping its kind.\n+    /// This is useful to create compound tokens from parts. For\n+    /// example, an `<<` token is two consecutive remapped `<` tokens\n+    pub(crate) fn bump_compound(&mut self, kind: SyntaxKind, n: u8) {\n+        self.0.bump_compound(kind, n);\n+    }\n+\n     /// Emit error with the `message`\n     /// TODO: this should be much more fancy and support\n     /// structured errors with spans and notes, like rustc"}, {"sha": "c0fe4d488eef72d32fdc0be5dd426336e7c5fc5c", "filename": "src/parser_impl/input.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1e1e2e83c462b7efacaa0e33812beed72a88ab5f/src%2Fparser_impl%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1e2e83c462b7efacaa0e33812beed72a88ab5f/src%2Fparser_impl%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser_impl%2Finput.rs?ref=1e1e2e83c462b7efacaa0e33812beed72a88ab5f", "patch": "@@ -36,7 +36,22 @@ impl<'t> ParserInput<'t> {\n         self.tokens[idx].kind\n     }\n \n-    #[allow(unused)]\n+    pub fn len(&self, pos: InputPosition) -> TextUnit {\n+        let idx = pos.0 as usize;\n+        if !(idx < self.tokens.len()) {\n+            return 0.into();\n+        }\n+        self.tokens[idx].len\n+    }\n+\n+    pub fn start(&self, pos: InputPosition) -> TextUnit {\n+        let idx = pos.0 as usize;\n+        if !(idx < self.tokens.len()) {\n+            return 0.into();\n+        }\n+        self.start_offsets[idx]\n+    }\n+\n     pub fn text(&self, pos: InputPosition) -> &'t str {\n         let idx = pos.0 as usize;\n         if !(idx < self.tokens.len()) {"}, {"sha": "d640a778493d75e43e3311b4a3b8b40f79c026ea", "filename": "src/parser_impl/mod.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1e1e2e83c462b7efacaa0e33812beed72a88ab5f/src%2Fparser_impl%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1e2e83c462b7efacaa0e33812beed72a88ab5f/src%2Fparser_impl%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser_impl%2Fmod.rs?ref=1e1e2e83c462b7efacaa0e33812beed72a88ab5f", "patch": "@@ -65,6 +65,11 @@ impl<'t> ParserImpl<'t> {\n         self.events\n     }\n \n+    pub(super) fn at_compound2(&self, c1: SyntaxKind, c2: SyntaxKind) -> bool {\n+        self.inp.kind(self.pos) == c1 && self.inp.kind(self.pos + 1) == c2\n+            && self.inp.start(self.pos + 1) == self.inp.start(self.pos) + self.inp.len(self.pos)\n+    }\n+\n     pub(super) fn nth(&self, n: u32) -> SyntaxKind {\n         self.inp.kind(self.pos + n)\n     }\n@@ -87,22 +92,26 @@ impl<'t> ParserImpl<'t> {\n         if kind == EOF {\n             return;\n         }\n-        self.do_bump(kind);\n+        self.do_bump(kind, 1);\n     }\n \n     pub(super) fn bump_remap(&mut self, kind: SyntaxKind) {\n         if self.nth(0) == EOF {\n             // TODO: panic!?\n             return;\n         }\n-        self.do_bump(kind);\n+        self.do_bump(kind, 1);\n+    }\n+\n+    pub(super) fn bump_compound(&mut self, kind: SyntaxKind, n: u8) {\n+        self.do_bump(kind, n);\n     }\n \n-    fn do_bump(&mut self, kind: SyntaxKind) {\n-        self.pos += 1;\n+    fn do_bump(&mut self, kind: SyntaxKind, n_raw_tokens: u8) {\n+        self.pos += u32::from(n_raw_tokens);\n         self.event(Event::Token {\n             kind,\n-            n_raw_tokens: 1,\n+            n_raw_tokens,\n         });\n     }\n "}, {"sha": "8dfeb2b829f692fe19fd8ac78376eed4cad24c4f", "filename": "src/syntax_kinds/generated.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1e1e2e83c462b7efacaa0e33812beed72a88ab5f/src%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1e2e83c462b7efacaa0e33812beed72a88ab5f/src%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds%2Fgenerated.rs?ref=1e1e2e83c462b7efacaa0e33812beed72a88ab5f", "patch": "@@ -40,6 +40,10 @@ pub enum SyntaxKind {\n     NEQ,\n     MINUS,\n     THIN_ARROW,\n+    LTEQ,\n+    GTEQ,\n+    PLUSEQ,\n+    MINUSEQ,\n     USE_KW,\n     FN_KW,\n     STRUCT_KW,\n@@ -261,6 +265,10 @@ impl SyntaxKind {\n             NEQ => &SyntaxInfo { name: \"NEQ\" },\n             MINUS => &SyntaxInfo { name: \"MINUS\" },\n             THIN_ARROW => &SyntaxInfo { name: \"THIN_ARROW\" },\n+            LTEQ => &SyntaxInfo { name: \"LTEQ\" },\n+            GTEQ => &SyntaxInfo { name: \"GTEQ\" },\n+            PLUSEQ => &SyntaxInfo { name: \"PLUSEQ\" },\n+            MINUSEQ => &SyntaxInfo { name: \"MINUSEQ\" },\n             USE_KW => &SyntaxInfo { name: \"USE_KW\" },\n             FN_KW => &SyntaxInfo { name: \"FN_KW\" },\n             STRUCT_KW => &SyntaxInfo { name: \"STRUCT_KW\" },\n@@ -502,6 +510,10 @@ impl SyntaxKind {\n             NEQ => \"!=\",\n             MINUS => \"-\",\n             THIN_ARROW => \"->\",\n+            LTEQ => \"<=\",\n+            GTEQ => \">=\",\n+            PLUSEQ => \"+=\",\n+            MINUSEQ => \"-=\",\n \n             USE_KW => \"use\",\n             FN_KW => \"fn\","}, {"sha": "48be5aebe9c9a6c8c224c5a15f5d55b66a026de9", "filename": "tests/data/parser/inline/0079_compound_ops.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e1e2e83c462b7efacaa0e33812beed72a88ab5f/tests%2Fdata%2Fparser%2Finline%2F0079_compound_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1e2e83c462b7efacaa0e33812beed72a88ab5f/tests%2Fdata%2Fparser%2Finline%2F0079_compound_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0079_compound_ops.rs?ref=1e1e2e83c462b7efacaa0e33812beed72a88ab5f", "patch": "@@ -0,0 +1,5 @@\n+fn foo() {\n+    x += 1;\n+    1 + 1 <= 2 * 3;\n+    z -= 3 >= 0;\n+}"}, {"sha": "6eaed8c75e4ed0d70feb990a40100fbab6f28d27", "filename": "tests/data/parser/inline/0079_compound_ops.txt", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/1e1e2e83c462b7efacaa0e33812beed72a88ab5f/tests%2Fdata%2Fparser%2Finline%2F0079_compound_ops.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1e1e2e83c462b7efacaa0e33812beed72a88ab5f/tests%2Fdata%2Fparser%2Finline%2F0079_compound_ops.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0079_compound_ops.txt?ref=1e1e2e83c462b7efacaa0e33812beed72a88ab5f", "patch": "@@ -0,0 +1,72 @@\n+FILE@[0; 62)\n+  FN_ITEM@[0; 62)\n+    FN_KW@[0; 2)\n+    NAME@[2; 6)\n+      WHITESPACE@[2; 3)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 9)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+      WHITESPACE@[8; 9)\n+    BLOCK_EXPR@[9; 62)\n+      L_CURLY@[9; 10)\n+      EXPR_STMT@[10; 27)\n+        BIN_EXPR@[10; 21)\n+          PATH_EXPR@[10; 17)\n+            PATH@[10; 17)\n+              PATH_SEGMENT@[10; 17)\n+                NAME_REF@[10; 17)\n+                  WHITESPACE@[10; 15)\n+                  IDENT@[15; 16) \"x\"\n+                  WHITESPACE@[16; 17)\n+          PLUSEQ@[17; 19)\n+          LITERAL@[19; 21)\n+            WHITESPACE@[19; 20)\n+            INT_NUMBER@[20; 21) \"1\"\n+        SEMI@[21; 22)\n+        WHITESPACE@[22; 27)\n+      EXPR_STMT@[27; 47)\n+        BIN_EXPR@[27; 41)\n+          BIN_EXPR@[27; 33)\n+            LITERAL@[27; 29)\n+              INT_NUMBER@[27; 28) \"1\"\n+              WHITESPACE@[28; 29)\n+            PLUS@[29; 30)\n+            LITERAL@[30; 33)\n+              WHITESPACE@[30; 31)\n+              INT_NUMBER@[31; 32) \"1\"\n+              WHITESPACE@[32; 33)\n+          LTEQ@[33; 35)\n+          BIN_EXPR@[35; 41)\n+            LITERAL@[35; 38)\n+              WHITESPACE@[35; 36)\n+              INT_NUMBER@[36; 37) \"2\"\n+              WHITESPACE@[37; 38)\n+            STAR@[38; 39)\n+            LITERAL@[39; 41)\n+              WHITESPACE@[39; 40)\n+              INT_NUMBER@[40; 41) \"3\"\n+        SEMI@[41; 42)\n+        WHITESPACE@[42; 47)\n+      EXPR_STMT@[47; 60)\n+        BIN_EXPR@[47; 58)\n+          PATH_EXPR@[47; 49)\n+            PATH@[47; 49)\n+              PATH_SEGMENT@[47; 49)\n+                NAME_REF@[47; 49)\n+                  IDENT@[47; 48) \"z\"\n+                  WHITESPACE@[48; 49)\n+          MINUSEQ@[49; 51)\n+          BIN_EXPR@[51; 58)\n+            LITERAL@[51; 54)\n+              WHITESPACE@[51; 52)\n+              INT_NUMBER@[52; 53) \"3\"\n+              WHITESPACE@[53; 54)\n+            GTEQ@[54; 56)\n+            LITERAL@[56; 58)\n+              WHITESPACE@[56; 57)\n+              INT_NUMBER@[57; 58) \"0\"\n+        SEMI@[58; 59)\n+        WHITESPACE@[59; 60)\n+      R_CURLY@[60; 61)\n+      WHITESPACE@[61; 62)"}]}