{"sha": "4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkMGRkMDJlZTA3YmRkYWQ5MTM2Zjk1YzlmNzg0NmViZjNlYjNmYzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-23T13:19:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-23T13:19:04Z"}, "message": "Auto merge of #80579 - RalfJung:no-fallible-promotion, r=oli-obk\n\navoid promoting division, modulo and indexing operations that could fail\n\nFor division, `x / y` will still be promoted if `y` is a non-zero integer literal; however, `1/(1+1)` will not be promoted any more.\n\nWhile at it, also see if we can reject promoting floating-point arithmetic (which are [complicated](https://github.com/rust-lang/unsafe-code-guidelines/issues/237) so maybe we should not promote them).\n\nThis will need a crater run to see if there's code out there that relies on these things being promoted.\n\nIf we can land this, promoteds in `fn`/`const fn` cannot fail to evaluate any more, which should let us do some simplifications in codegen/Miri!\n\nCc https://github.com/rust-lang/rfcs/pull/3027\nFixes https://github.com/rust-lang/rust/issues/61821\nr? `@oli-obk`", "tree": {"sha": "d7dffe3cb02e26fea21f7a2bc494de2bca7382cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7dffe3cb02e26fea21f7a2bc494de2bca7382cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5", "html_url": "https://github.com/rust-lang/rust/commit/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4153fa82ff8403bde877b52d35bf1ef99e54a4a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4153fa82ff8403bde877b52d35bf1ef99e54a4a2", "html_url": "https://github.com/rust-lang/rust/commit/4153fa82ff8403bde877b52d35bf1ef99e54a4a2"}, {"sha": "ccaabc9479c5627c38aa3a693f765a400b92e32d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccaabc9479c5627c38aa3a693f765a400b92e32d", "html_url": "https://github.com/rust-lang/rust/commit/ccaabc9479c5627c38aa3a693f765a400b92e32d"}], "stats": {"total": 664, "additions": 331, "deletions": 333}, "files": [{"sha": "658372ac336a8ab34db0f9d508e82e63eb325bf6", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 7, "deletions": 26, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5", "patch": "@@ -238,41 +238,22 @@ declare_lint! {\n     ///\n     /// ```rust,compile_fail\n     /// #![allow(unconditional_panic)]\n-    /// let x: &'static i32 = &(1 / 0);\n+    /// const C: i32 = 1/0;\n     /// ```\n     ///\n     /// {{produces}}\n     ///\n     /// ### Explanation\n     ///\n-    /// This lint detects code that is very likely incorrect. If this lint is\n-    /// allowed, then the code will not be evaluated at compile-time, and\n-    /// instead continue to generate code to evaluate at runtime, which may\n-    /// panic during runtime.\n+    /// This lint detects constants that fail to evaluate. Allowing the lint will accept the\n+    /// constant declaration, but any use of this constant will still lead to a hard error. This is\n+    /// a future incompatibility lint; the plan is to eventually entirely forbid even declaring\n+    /// constants that cannot be evaluated.  See [issue #71800] for more details.\n     ///\n-    /// Note that this lint may trigger in either inside or outside of a\n-    /// [const context]. Outside of a [const context], the compiler can\n-    /// sometimes evaluate an expression at compile-time in order to generate\n-    /// more efficient code. As the compiler becomes better at doing this, it\n-    /// needs to decide what to do when it encounters code that it knows for\n-    /// certain will panic or is otherwise incorrect. Making this a hard error\n-    /// would prevent existing code that exhibited this behavior from\n-    /// compiling, breaking backwards-compatibility. However, this is almost\n-    /// certainly incorrect code, so this is a deny-by-default lint. For more\n-    /// details, see [RFC 1229] and [issue #28238].\n-    ///\n-    /// Note that there are several other more specific lints associated with\n-    /// compile-time evaluation, such as [`arithmetic_overflow`],\n-    /// [`unconditional_panic`].\n-    ///\n-    /// [const context]: https://doc.rust-lang.org/reference/const_eval.html#const-context\n-    /// [RFC 1229]: https://github.com/rust-lang/rfcs/blob/master/text/1229-compile-time-asserts.md\n-    /// [issue #28238]: https://github.com/rust-lang/rust/issues/28238\n-    /// [`arithmetic_overflow`]: deny-by-default.html#arithmetic-overflow\n-    /// [`unconditional_panic`]: deny-by-default.html#unconditional-panic\n+    /// [issue #71800]: https://github.com/rust-lang/rust/issues/71800\n     pub CONST_ERR,\n     Deny,\n-    \"constant evaluation detected erroneous expression\",\n+    \"constant evaluation encountered erroneous expression\",\n     report_in_external_macro\n }\n "}, {"sha": "d8758e045443c6ac3110200c5122bc1f37386ced", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 86, "deletions": 26, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5", "patch": "@@ -415,10 +415,11 @@ impl<'tcx> Validator<'_, 'tcx> {\n     // FIXME(eddyb) maybe cache this?\n     fn validate_local(&self, local: Local) -> Result<(), Unpromotable> {\n         if let TempState::Defined { location: loc, .. } = self.temps[local] {\n-            let num_stmts = self.body[loc.block].statements.len();\n+            let block = &self.body[loc.block];\n+            let num_stmts = block.statements.len();\n \n             if loc.statement_index < num_stmts {\n-                let statement = &self.body[loc.block].statements[loc.statement_index];\n+                let statement = &block.statements[loc.statement_index];\n                 match &statement.kind {\n                     StatementKind::Assign(box (_, rhs)) => self.validate_rvalue(rhs),\n                     _ => {\n@@ -430,7 +431,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n                     }\n                 }\n             } else {\n-                let terminator = self.body[loc.block].terminator();\n+                let terminator = block.terminator();\n                 match &terminator.kind {\n                     TerminatorKind::Call { func, args, .. } => self.validate_call(func, args),\n                     TerminatorKind::Yield { .. } => Err(Unpromotable),\n@@ -452,22 +453,15 @@ impl<'tcx> Validator<'_, 'tcx> {\n                 match elem {\n                     ProjectionElem::Deref => {\n                         let mut promotable = false;\n-                        // The `is_empty` predicate is introduced to exclude the case\n-                        // where the projection operations are [ .field, * ].\n-                        // The reason is because promotion will be illegal if field\n-                        // accesses precede the dereferencing.\n+                        // We need to make sure this is a `Deref` of a local with no further projections.\n                         // Discussion can be found at\n                         // https://github.com/rust-lang/rust/pull/74945#discussion_r463063247\n-                        // There may be opportunity for generalization, but this needs to be\n-                        // accounted for.\n-                        if place_base.projection.is_empty() {\n+                        if let Some(local) = place_base.as_local() {\n                             // This is a special treatment for cases like *&STATIC where STATIC is a\n                             // global static variable.\n                             // This pattern is generated only when global static variables are directly\n                             // accessed and is qualified for promotion safely.\n-                            if let TempState::Defined { location, .. } =\n-                                self.temps[place_base.local]\n-                            {\n+                            if let TempState::Defined { location, .. } = self.temps[local] {\n                                 let def_stmt = self.body[location.block]\n                                     .statements\n                                     .get(location.statement_index);\n@@ -505,6 +499,50 @@ impl<'tcx> Validator<'_, 'tcx> {\n                     ProjectionElem::ConstantIndex { .. } | ProjectionElem::Subslice { .. } => {}\n \n                     ProjectionElem::Index(local) => {\n+                        if !self.explicit {\n+                            let mut promotable = false;\n+                            // Only accept if we can predict the index and are indexing an array.\n+                            let val = if let TempState::Defined { location: loc, .. } =\n+                                self.temps[local]\n+                            {\n+                                let block = &self.body[loc.block];\n+                                if loc.statement_index < block.statements.len() {\n+                                    let statement = &block.statements[loc.statement_index];\n+                                    match &statement.kind {\n+                                        StatementKind::Assign(box (\n+                                            _,\n+                                            Rvalue::Use(Operand::Constant(c)),\n+                                        )) => c.literal.try_eval_usize(self.tcx, self.param_env),\n+                                        _ => None,\n+                                    }\n+                                } else {\n+                                    None\n+                                }\n+                            } else {\n+                                None\n+                            };\n+                            if let Some(idx) = val {\n+                                // Determine the type of the thing we are indexing.\n+                                let ty = place_base.ty(self.body, self.tcx).ty;\n+                                match ty.kind() {\n+                                    ty::Array(_, len) => {\n+                                        // It's an array; determine its length.\n+                                        if let Some(len) =\n+                                            len.try_eval_usize(self.tcx, self.param_env)\n+                                        {\n+                                            // If the index is in-bounds, go ahead.\n+                                            if idx < len {\n+                                                promotable = true;\n+                                            }\n+                                        }\n+                                    }\n+                                    _ => {}\n+                                }\n+                            }\n+                            if !promotable {\n+                                return Err(Unpromotable);\n+                            }\n+                        }\n                         self.validate_local(local)?;\n                     }\n \n@@ -589,9 +627,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n \n     fn validate_rvalue(&self, rvalue: &Rvalue<'tcx>) -> Result<(), Unpromotable> {\n         match rvalue {\n-            Rvalue::Use(operand)\n-            | Rvalue::Repeat(operand, _)\n-            | Rvalue::UnaryOp(UnOp::Not | UnOp::Neg, operand) => {\n+            Rvalue::Use(operand) | Rvalue::Repeat(operand, _) => {\n                 self.validate_operand(operand)?;\n             }\n \n@@ -616,10 +652,26 @@ impl<'tcx> Validator<'_, 'tcx> {\n                 self.validate_operand(operand)?;\n             }\n \n+            Rvalue::NullaryOp(op, _) => match op {\n+                NullOp::Box => return Err(Unpromotable),\n+                NullOp::SizeOf => {}\n+            },\n+\n+            Rvalue::UnaryOp(op, operand) => {\n+                match op {\n+                    // These operations can never fail.\n+                    UnOp::Neg | UnOp::Not => {}\n+                }\n+\n+                self.validate_operand(operand)?;\n+            }\n+\n             Rvalue::BinaryOp(op, lhs, rhs) | Rvalue::CheckedBinaryOp(op, lhs, rhs) => {\n                 let op = *op;\n-                if let ty::RawPtr(_) | ty::FnPtr(..) = lhs.ty(self.body, self.tcx).kind() {\n-                    // raw pointer operations are not allowed inside consts and thus not promotable\n+                let lhs_ty = lhs.ty(self.body, self.tcx);\n+\n+                if let ty::RawPtr(_) | ty::FnPtr(..) = lhs_ty.kind() {\n+                    // Raw and fn pointer operations are not allowed inside consts and thus not promotable.\n                     assert!(matches!(\n                         op,\n                         BinOp::Eq\n@@ -634,7 +686,22 @@ impl<'tcx> Validator<'_, 'tcx> {\n                 }\n \n                 match op {\n-                    // FIXME: reject operations that can fail -- namely, division and modulo.\n+                    BinOp::Div | BinOp::Rem => {\n+                        if !self.explicit && lhs_ty.is_integral() {\n+                            // Integer division: the RHS must be a non-zero const.\n+                            let const_val = match rhs {\n+                                Operand::Constant(c) => {\n+                                    c.literal.try_eval_bits(self.tcx, self.param_env, lhs_ty)\n+                                }\n+                                _ => None,\n+                            };\n+                            match const_val {\n+                                Some(x) if x != 0 => {}        // okay\n+                                _ => return Err(Unpromotable), // value not known or 0 -- not okay\n+                            }\n+                        }\n+                    }\n+                    // The remaining operations can never fail.\n                     BinOp::Eq\n                     | BinOp::Ne\n                     | BinOp::Le\n@@ -645,8 +712,6 @@ impl<'tcx> Validator<'_, 'tcx> {\n                     | BinOp::Add\n                     | BinOp::Sub\n                     | BinOp::Mul\n-                    | BinOp::Div\n-                    | BinOp::Rem\n                     | BinOp::BitXor\n                     | BinOp::BitAnd\n                     | BinOp::BitOr\n@@ -658,11 +723,6 @@ impl<'tcx> Validator<'_, 'tcx> {\n                 self.validate_operand(rhs)?;\n             }\n \n-            Rvalue::NullaryOp(op, _) => match op {\n-                NullOp::Box => return Err(Unpromotable),\n-                NullOp::SizeOf => {}\n-            },\n-\n             Rvalue::AddressOf(_, place) => {\n                 // We accept `&raw *`, i.e., raw reborrows -- creating a raw pointer is\n                 // no problem, only using it is."}, {"sha": "9b3f735b1f849a43a9bd1226357a4c7ccd1ab9ba", "filename": "src/test/ui/consts/array-literal-index-oob.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs?ref=4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5", "patch": "@@ -6,6 +6,4 @@\n fn main() {\n     &{ [1, 2, 3][4] };\n     //~^ WARN operation will panic\n-    //~| WARN reaching this expression at runtime will panic or abort\n-    //~| WARN erroneous constant used [const_err]\n }"}, {"sha": "f96b8d48b3e7c469c5aac26a17b3b3cdb766dfd0", "filename": "src/test/ui/consts/array-literal-index-oob.stderr", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr?ref=4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5", "patch": "@@ -10,25 +10,5 @@ note: the lint level is defined here\n LL | #![warn(const_err, unconditional_panic)]\n    |                    ^^^^^^^^^^^^^^^^^^^\n \n-warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/array-literal-index-oob.rs:7:8\n-   |\n-LL |     &{ [1, 2, 3][4] };\n-   |     ---^^^^^^^^^^^^--\n-   |        |\n-   |        indexing out of bounds: the len is 3 but the index is 4\n-   |\n-note: the lint level is defined here\n-  --> $DIR/array-literal-index-oob.rs:4:9\n-   |\n-LL | #![warn(const_err, unconditional_panic)]\n-   |         ^^^^^^^^^\n-\n-warning: erroneous constant used\n-  --> $DIR/array-literal-index-oob.rs:7:5\n-   |\n-LL |     &{ [1, 2, 3][4] };\n-   |     ^^^^^^^^^^^^^^^^^ referenced constant has errors\n-\n-warning: 3 warnings emitted\n+warning: 1 warning emitted\n "}, {"sha": "39803c8f257e0da3e123380d9d488cf594b7f3a3", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs?ref=4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5", "patch": "@@ -1,4 +1,5 @@\n-// compile-flags: -Ztreat-err-as-bug\n+//~ERROR constructed but no error reported\n+// compile-flags: -Ztreat-err-as-bug=2\n // build-fail\n // failure-status: 101\n // rustc-env:RUST_BACKTRACE=1\n@@ -15,8 +16,11 @@\n \n #![allow(unconditional_panic)]\n \n+#[warn(const_err)]\n+const X: i32 = 1 / 0; //~WARN any use of this value will cause an error\n+\n fn main() {\n-    let x: &'static i32 = &(1 / 0);\n-    //~^ ERROR reaching this expression at runtime will panic or abort [const_err]\n+    let x: &'static i32 = &X;\n+    //~^ ERROR evaluation of constant expression failed\n     println!(\"x={}\", x);\n }"}, {"sha": "0016d301e598c3af2c9b3af73aef81195e82d0c2", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.stderr", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr?ref=4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5", "patch": "@@ -1,18 +1,26 @@\n-error: reaching this expression at runtime will panic or abort\n-  --> $DIR/const-eval-query-stack.rs:19:28\n+warning: any use of this value will cause an error\n+  --> $DIR/const-eval-query-stack.rs:20:16\n    |\n-LL |     let x: &'static i32 = &(1 / 0);\n-   |                           -^^^^^^^\n-   |                            |\n-   |                            dividing by zero\n+LL | const X: i32 = 1 / 0;\n+   | ---------------^^^^^-\n+   |                |\n+   |                attempt to divide `1_i32` by zero\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-query-stack.rs:19:8\n    |\n-   = note: `#[deny(const_err)]` on by default\n+LL | #[warn(const_err)]\n+   |        ^^^^^^^^^\n \n+error[E0080]: evaluation of constant expression failed\n+  --> $DIR/const-eval-query-stack.rs:23:27\n+   |\n+LL |     let x: &'static i32 = &X;\n+   |                           ^-\n+   |                            |\n+   |                            referenced constant has errors\n query stack during panic:\n-#0 [eval_to_allocation_raw] const-evaluating + checking `main::promoted[1]`\n-#1 [eval_to_const_value_raw] simplifying constant for the type system `main::promoted[1]`\n-#2 [eval_to_const_value_raw] simplifying constant for the type system `main::promoted[1]`\n-#3 [normalize_generic_arg_after_erasing_regions] normalizing `main::promoted[1]`\n-#4 [optimized_mir] optimizing MIR for `main`\n-#5 [collect_and_partition_mono_items] collect_and_partition_mono_items\n+#0 [normalize_generic_arg_after_erasing_regions] normalizing `main::promoted[1]`\n+#1 [optimized_mir] optimizing MIR for `main`\n+#2 [collect_and_partition_mono_items] collect_and_partition_mono_items\n end of query stack"}, {"sha": "1cd1be5309b90d1e4f30c2683bac6bad450d1ee1", "filename": "src/test/ui/consts/const-eval/promoted_errors.noopt.stderr", "status": "modified", "additions": 30, "deletions": 70, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr?ref=4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5", "patch": "@@ -1,80 +1,40 @@\n-warning: this arithmetic operation will overflow\n-  --> $DIR/promoted_errors.rs:12:20\n-   |\n-LL |     println!(\"{}\", 0u32 - 1);\n-   |                    ^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n-   |\n-note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:9:20\n-   |\n-LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n-   |                    ^^^^^^^^^^^^^^^^^^^\n-\n-warning: this arithmetic operation will overflow\n-  --> $DIR/promoted_errors.rs:14:14\n-   |\n-LL |     let _x = 0u32 - 1;\n-   |              ^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n-\n-warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:16:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ attempt to divide `1_i32` by zero\n-   |\n-note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:9:41\n-   |\n-LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n-   |                                         ^^^^^^^^^^^^^^^^^^^\n-\n-warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:16:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ dividing by zero\n+warning: any use of this value will cause an error\n+  --> $DIR/promoted_errors.rs:13:5\n+   |\n+LL |       0 - 1\n+   |       ^^^^^\n+   |       |\n+   |       attempt to compute `0_u32 - 1_u32`, which would overflow\n+   |       inside `overflow` at $DIR/promoted_errors.rs:13:5\n+   |       inside `X` at $DIR/promoted_errors.rs:31:29\n+...\n+LL | / const X: () = {\n+LL | |     let _x: &'static u32 = &overflow();\n+LL | |\n+LL | |     let _x: &'static i32 = &div_by_zero1();\n+...  |\n+LL | |     let _x: &'static i32 = &oob();\n+LL | | };\n+   | |__-\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:9:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n \n-warning: erroneous constant used\n-  --> $DIR/promoted_errors.rs:16:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ referenced constant has errors\n-\n-warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:20:14\n-   |\n-LL |     let _x = 1 / (1 - 1);\n-   |              ^^^^^^^^^^^ attempt to divide `1_i32` by zero\n-\n-warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:22:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide `1_u32` by zero\n-\n-warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:22:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ dividing by zero\n-\n-warning: erroneous constant used\n-  --> $DIR/promoted_errors.rs:22:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-\n-warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:26:14\n+warning: any use of this value will cause an error\n+  --> $DIR/promoted_errors.rs:31:28\n    |\n-LL |     let _x = 1 / (false as u32);\n-   |              ^^^^^^^^^^^^^^^^^^ attempt to divide `1_u32` by zero\n+LL | / const X: () = {\n+LL | |     let _x: &'static u32 = &overflow();\n+   | |                            ^^^^^^^^^^^ referenced constant has errors\n+LL | |\n+LL | |     let _x: &'static i32 = &div_by_zero1();\n+...  |\n+LL | |     let _x: &'static i32 = &oob();\n+LL | | };\n+   | |__-\n \n-warning: 10 warnings emitted\n+warning: 2 warnings emitted\n "}, {"sha": "ca62e21b6138533be47afc0a0baee3a6745c6572", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt.stderr", "status": "modified", "additions": 30, "deletions": 64, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr?ref=4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5", "patch": "@@ -1,74 +1,40 @@\n-warning: this arithmetic operation will overflow\n-  --> $DIR/promoted_errors.rs:14:14\n-   |\n-LL |     let _x = 0u32 - 1;\n-   |              ^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n-   |\n-note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:9:20\n-   |\n-LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n-   |                    ^^^^^^^^^^^^^^^^^^^\n-\n-warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:16:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ attempt to divide `1_i32` by zero\n-   |\n-note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:9:41\n-   |\n-LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n-   |                                         ^^^^^^^^^^^^^^^^^^^\n-\n-warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:16:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ dividing by zero\n+warning: any use of this value will cause an error\n+  --> $DIR/promoted_errors.rs:17:5\n+   |\n+LL |       1 / 0\n+   |       ^^^^^\n+   |       |\n+   |       attempt to divide `1_i32` by zero\n+   |       inside `div_by_zero1` at $DIR/promoted_errors.rs:17:5\n+   |       inside `X` at $DIR/promoted_errors.rs:33:29\n+...\n+LL | / const X: () = {\n+LL | |     let _x: &'static u32 = &overflow();\n+LL | |\n+LL | |     let _x: &'static i32 = &div_by_zero1();\n+...  |\n+LL | |     let _x: &'static i32 = &oob();\n+LL | | };\n+   | |__-\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:9:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n \n-warning: erroneous constant used\n-  --> $DIR/promoted_errors.rs:16:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ referenced constant has errors\n-\n-warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:20:14\n-   |\n-LL |     let _x = 1 / (1 - 1);\n-   |              ^^^^^^^^^^^ attempt to divide `1_i32` by zero\n-\n-warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:22:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide `1_u32` by zero\n-\n-warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:22:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ dividing by zero\n-\n-warning: erroneous constant used\n-  --> $DIR/promoted_errors.rs:22:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-\n-warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:26:14\n+warning: any use of this value will cause an error\n+  --> $DIR/promoted_errors.rs:33:28\n    |\n-LL |     let _x = 1 / (false as u32);\n-   |              ^^^^^^^^^^^^^^^^^^ attempt to divide `1_u32` by zero\n+LL | / const X: () = {\n+LL | |     let _x: &'static u32 = &overflow();\n+LL | |\n+LL | |     let _x: &'static i32 = &div_by_zero1();\n+   | |                            ^^^^^^^^^^^^^^^ referenced constant has errors\n+...  |\n+LL | |     let _x: &'static i32 = &oob();\n+LL | | };\n+   | |__-\n \n-warning: 9 warnings emitted\n+warning: 2 warnings emitted\n "}, {"sha": "1cd1be5309b90d1e4f30c2683bac6bad450d1ee1", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt_with_overflow_checks.stderr", "status": "modified", "additions": 30, "deletions": 70, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr?ref=4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5", "patch": "@@ -1,80 +1,40 @@\n-warning: this arithmetic operation will overflow\n-  --> $DIR/promoted_errors.rs:12:20\n-   |\n-LL |     println!(\"{}\", 0u32 - 1);\n-   |                    ^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n-   |\n-note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:9:20\n-   |\n-LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n-   |                    ^^^^^^^^^^^^^^^^^^^\n-\n-warning: this arithmetic operation will overflow\n-  --> $DIR/promoted_errors.rs:14:14\n-   |\n-LL |     let _x = 0u32 - 1;\n-   |              ^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n-\n-warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:16:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ attempt to divide `1_i32` by zero\n-   |\n-note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:9:41\n-   |\n-LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n-   |                                         ^^^^^^^^^^^^^^^^^^^\n-\n-warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:16:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ dividing by zero\n+warning: any use of this value will cause an error\n+  --> $DIR/promoted_errors.rs:13:5\n+   |\n+LL |       0 - 1\n+   |       ^^^^^\n+   |       |\n+   |       attempt to compute `0_u32 - 1_u32`, which would overflow\n+   |       inside `overflow` at $DIR/promoted_errors.rs:13:5\n+   |       inside `X` at $DIR/promoted_errors.rs:31:29\n+...\n+LL | / const X: () = {\n+LL | |     let _x: &'static u32 = &overflow();\n+LL | |\n+LL | |     let _x: &'static i32 = &div_by_zero1();\n+...  |\n+LL | |     let _x: &'static i32 = &oob();\n+LL | | };\n+   | |__-\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:9:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n \n-warning: erroneous constant used\n-  --> $DIR/promoted_errors.rs:16:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ referenced constant has errors\n-\n-warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:20:14\n-   |\n-LL |     let _x = 1 / (1 - 1);\n-   |              ^^^^^^^^^^^ attempt to divide `1_i32` by zero\n-\n-warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:22:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide `1_u32` by zero\n-\n-warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:22:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ dividing by zero\n-\n-warning: erroneous constant used\n-  --> $DIR/promoted_errors.rs:22:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-\n-warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:26:14\n+warning: any use of this value will cause an error\n+  --> $DIR/promoted_errors.rs:31:28\n    |\n-LL |     let _x = 1 / (false as u32);\n-   |              ^^^^^^^^^^^^^^^^^^ attempt to divide `1_u32` by zero\n+LL | / const X: () = {\n+LL | |     let _x: &'static u32 = &overflow();\n+   | |                            ^^^^^^^^^^^ referenced constant has errors\n+LL | |\n+LL | |     let _x: &'static i32 = &div_by_zero1();\n+...  |\n+LL | |     let _x: &'static i32 = &oob();\n+LL | | };\n+   | |__-\n \n-warning: 10 warnings emitted\n+warning: 2 warnings emitted\n "}, {"sha": "a2136c8d09be46a1a2266fb31134d01ce1b23397", "filename": "src/test/ui/consts/const-eval/promoted_errors.rs", "status": "modified", "additions": 29, "deletions": 16, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs?ref=4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5", "patch": "@@ -8,21 +8,34 @@\n \n #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n \n+// The only way to have promoteds that fail is in `const fn` called from `const`/`static`.\n+const fn overflow() -> u32 {\n+    0 - 1\n+    //[opt_with_overflow_checks,noopt]~^ WARN any use of this value will cause an error\n+}\n+const fn div_by_zero1() -> i32 {\n+    1 / 0\n+    //[opt]~^ WARN any use of this value will cause an error\n+}\n+const fn div_by_zero2() -> i32 {\n+    1 / (1-1)\n+}\n+const fn div_by_zero3() -> i32 {\n+    1 / (false as i32)\n+}\n+const fn oob() -> i32 {\n+    [1,2,3][4]\n+}\n+\n+const X: () = {\n+    let _x: &'static u32 = &overflow();\n+    //[opt_with_overflow_checks,noopt]~^ WARN any use of this value will cause an error\n+    let _x: &'static i32 = &div_by_zero1();\n+    //[opt]~^ WARN any use of this value will cause an error\n+    let _x: &'static i32 = &div_by_zero2();\n+    let _x: &'static i32 = &div_by_zero3();\n+    let _x: &'static i32 = &oob();\n+};\n+\n fn main() {\n-    println!(\"{}\", 0u32 - 1);\n-    //[opt_with_overflow_checks,noopt]~^ WARN [arithmetic_overflow]\n-    let _x = 0u32 - 1;\n-    //~^ WARN [arithmetic_overflow]\n-    println!(\"{}\", 1 / (1 - 1));\n-    //~^ WARN [unconditional_panic]\n-    //~| WARN panic or abort [const_err]\n-    //~| WARN erroneous constant used [const_err]\n-    let _x = 1 / (1 - 1);\n-    //~^ WARN [unconditional_panic]\n-    println!(\"{}\", 1 / (false as u32));\n-    //~^ WARN [unconditional_panic]\n-    //~| WARN panic or abort [const_err]\n-    //~| WARN erroneous constant used [const_err]\n-    let _x = 1 / (false as u32);\n-    //~^ WARN [unconditional_panic]\n }"}, {"sha": "0d0c78b0fc260c43f249a5079fbcc33ab8a1b56f", "filename": "src/test/ui/consts/promote-not.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs?ref=4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5", "patch": "@@ -44,4 +44,11 @@ fn main() {\n     // We must not promote things with interior mutability. Not even if we \"project it away\".\n     let _val: &'static _ = &(Cell::new(1), 2).0; //~ ERROR temporary value dropped while borrowed\n     let _val: &'static _ = &(Cell::new(1), 2).1; //~ ERROR temporary value dropped while borrowed\n+\n+    // No promotion of fallible operations.\n+    let _val: &'static _ = &(1/0); //~ ERROR temporary value dropped while borrowed\n+    let _val: &'static _ = &(1/(1-1)); //~ ERROR temporary value dropped while borrowed\n+    let _val: &'static _ = &(1%0); //~ ERROR temporary value dropped while borrowed\n+    let _val: &'static _ = &(1%(1-1)); //~ ERROR temporary value dropped while borrowed\n+    let _val: &'static _ = &([1,2,3][4]+1); //~ ERROR temporary value dropped while borrowed\n }"}, {"sha": "108d0da7a674af554dcdc56b669ba1470d1ebbf5", "filename": "src/test/ui/consts/promote-not.stderr", "status": "modified", "additions": 57, "deletions": 2, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.stderr?ref=4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5", "patch": "@@ -65,7 +65,7 @@ LL |     let _val: &'static _ = &(Cell::new(1), 2).0;\n    |               ----------    ^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n    |               |\n    |               type annotation requires that borrow lasts for `'static`\n-LL |     let _val: &'static _ = &(Cell::new(1), 2).1;\n+...\n LL | }\n    | - temporary value is freed at the end of this statement\n \n@@ -76,9 +76,64 @@ LL |     let _val: &'static _ = &(Cell::new(1), 2).1;\n    |               ----------    ^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n    |               |\n    |               type annotation requires that borrow lasts for `'static`\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-not.rs:49:29\n+   |\n+LL |     let _val: &'static _ = &(1/0);\n+   |               ----------    ^^^^^ creates a temporary which is freed while still in use\n+   |               |\n+   |               type annotation requires that borrow lasts for `'static`\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-not.rs:50:29\n+   |\n+LL |     let _val: &'static _ = &(1/(1-1));\n+   |               ----------    ^^^^^^^^^ creates a temporary which is freed while still in use\n+   |               |\n+   |               type annotation requires that borrow lasts for `'static`\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-not.rs:51:29\n+   |\n+LL |     let _val: &'static _ = &(1%0);\n+   |               ----------    ^^^^^ creates a temporary which is freed while still in use\n+   |               |\n+   |               type annotation requires that borrow lasts for `'static`\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-not.rs:52:29\n+   |\n+LL |     let _val: &'static _ = &(1%(1-1));\n+   |               ----------    ^^^^^^^^^ creates a temporary which is freed while still in use\n+   |               |\n+   |               type annotation requires that borrow lasts for `'static`\n+LL |     let _val: &'static _ = &([1,2,3][4]+1);\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-not.rs:53:29\n+   |\n+LL |     let _val: &'static _ = &([1,2,3][4]+1);\n+   |               ----------    ^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |               |\n+   |               type annotation requires that borrow lasts for `'static`\n LL | }\n    | - temporary value is freed at the end of this statement\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 13 previous errors\n \n For more information about this error, try `rustc --explain E0716`."}, {"sha": "b4503f691ffd95fe2ea31d178260fb4f551ced64", "filename": "src/test/ui/consts/promoted_div_by_zero.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4153fa82ff8403bde877b52d35bf1ef99e54a4a2/src%2Ftest%2Fui%2Fconsts%2Fpromoted_div_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4153fa82ff8403bde877b52d35bf1ef99e54a4a2/src%2Ftest%2Fui%2Fconsts%2Fpromoted_div_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromoted_div_by_zero.rs?ref=4153fa82ff8403bde877b52d35bf1ef99e54a4a2", "patch": "@@ -1,9 +0,0 @@\n-#![allow(unconditional_panic, const_err)]\n-\n-// run-fail\n-// error-pattern: attempt to divide by zero\n-// ignore-emscripten no processes\n-\n-fn main() {\n-    let x = &(1 / (1 - 1));\n-}"}, {"sha": "580c6d62f10af238cb57c1b7e4784fc0f3c1383a", "filename": "src/test/ui/consts/promotion.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5/src%2Ftest%2Fui%2Fconsts%2Fpromotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5/src%2Ftest%2Fui%2Fconsts%2Fpromotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromotion.rs?ref=4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5", "patch": "@@ -1,28 +1,43 @@\n-// check-pass\n+// revisions: noopt opt opt_with_overflow_checks\n+//[noopt]compile-flags: -C opt-level=0\n+//[opt]compile-flags: -O\n+//[opt_with_overflow_checks]compile-flags: -C overflow-checks=on -O\n \n-// compile-flags: -O\n+// build-pass\n+#[allow(arithmetic_overflow)]\n \n-fn foo(_: &'static [&'static str]) {}\n-fn bar(_: &'static [&'static str; 3]) {}\n-const fn baz_i32(_: &'static i32) {}\n-const fn baz_u32(_: &'static u32) {}\n+const fn assert_static<T>(_: &'static T) {}\n \n const fn fail() -> i32 { 1/0 }\n const C: i32 = {\n     // Promoted that fails to evaluate in dead code -- this must work\n     // (for backwards compatibility reasons).\n     if false {\n-        baz_i32(&fail());\n+        assert_static(&fail());\n     }\n     42\n };\n \n fn main() {\n-    foo(&[\"a\", \"b\", \"c\"]);\n-    bar(&[\"d\", \"e\", \"f\"]);\n+    assert_static(&[\"a\", \"b\", \"c\"]);\n+    assert_static(&[\"d\", \"e\", \"f\"]);\n     assert_eq!(C, 42);\n \n     // make sure that these do not cause trouble despite overflowing\n-    baz_u32(&(0-1));\n-    baz_i32(&-i32::MIN);\n+    assert_static(&(0-1));\n+    assert_static(&-i32::MIN);\n+\n+    // div-by-non-0 is okay\n+    assert_static(&(1/1));\n+    assert_static(&(1%1));\n+\n+    // in-bounds array access is okay\n+    assert_static(&([1,2,3][0] + 1));\n+    assert_static(&[[1,2][1]]);\n+\n+    // Top-level projections are not part of the promoted, so no error here.\n+    if false {\n+        #[allow(unconditional_panic)]\n+        assert_static(&[1,2,3][4]);\n+    }\n }"}]}