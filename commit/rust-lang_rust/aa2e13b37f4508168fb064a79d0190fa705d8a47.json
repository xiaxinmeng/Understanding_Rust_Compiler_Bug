{"sha": "aa2e13b37f4508168fb064a79d0190fa705d8a47", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhMmUxM2IzN2Y0NTA4MTY4ZmIwNjRhNzlkMDE5MGZhNzA1ZDhhNDc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-01-15T18:43:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-15T18:43:23Z"}, "message": "Merge #2716\n\n2716: Allow assists with multiple selectable actions r=SomeoneToIgnore a=SomeoneToIgnore\n\nThis PR prepares an infra for https://github.com/rust-analyzer/rust-analyzer/issues/2180 task by adding a possibility to specify multiple actions in one assist as multiple edit parameters to the `applySourceChange` command.\r\n\r\nWhen this is done, the command opens a selection dialog, allowing the user to pick the edit to be applied.\r\n\r\nI have no working example to test in this PR, but here's a demo of an auto import feature (a separate PR coming later for that one) using this functionality:\r\n\r\n![out](https://user-images.githubusercontent.com/2690773/71633614-f8ea4d80-2c1d-11ea-9b15-0e13611a7aa4.gif)\r\n\r\nThe PR is not that massive as it may seem: all the assist files' changes are very generic and similar.\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "15d4b618885813c2c9efadd2ea0d25a7173807c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15d4b618885813c2c9efadd2ea0d25a7173807c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa2e13b37f4508168fb064a79d0190fa705d8a47", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeH11LCRBK7hj4Ov3rIwAAdHIIAGcTZz2S26Ii0McnXpiZpa77\n2n7oo0jDL7B5dTgGRiB0kdJsAnkxtkW7v+S5HsPUuPDUbfYQo9MsNbWSWePFyq/H\nk/vpJiFLcdKA5mok8br+wimcjIqCKoruaJR45EfAy3OePPRh+PHZkn25cIzNwE7g\ngIMmx7gYaBILxja9PZ9blS6nN0ADrCrsDl1N6OrFDmPNBEbTp8LL0qp+RjT+pbTr\nsZhUoDJpGHoHVDdz8G9CqCHRw2wGE3TcLTmOyRxx2jFGr3pD+06b7LpRjsO7Kqzp\nURIu+4Uac3kl5pYcBNqUOo+0Z6ILcMQfBVy0XMyOKkhFAbVlFB8IdMuergQfYVY=\n=9QHY\n-----END PGP SIGNATURE-----\n", "payload": "tree 15d4b618885813c2c9efadd2ea0d25a7173807c8\nparent 01422cc31d1917aaef4b1f402eda05abfff1e75f\nparent 79b77403b65877e4d20bbbac6dd853a3beead445\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1579113803 +0000\ncommitter GitHub <noreply@github.com> 1579113803 +0000\n\nMerge #2716\n\n2716: Allow assists with multiple selectable actions r=SomeoneToIgnore a=SomeoneToIgnore\n\nThis PR prepares an infra for https://github.com/rust-analyzer/rust-analyzer/issues/2180 task by adding a possibility to specify multiple actions in one assist as multiple edit parameters to the `applySourceChange` command.\r\n\r\nWhen this is done, the command opens a selection dialog, allowing the user to pick the edit to be applied.\r\n\r\nI have no working example to test in this PR, but here's a demo of an auto import feature (a separate PR coming later for that one) using this functionality:\r\n\r\n![out](https://user-images.githubusercontent.com/2690773/71633614-f8ea4d80-2c1d-11ea-9b15-0e13611a7aa4.gif)\r\n\r\nThe PR is not that massive as it may seem: all the assist files' changes are very generic and similar.\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa2e13b37f4508168fb064a79d0190fa705d8a47", "html_url": "https://github.com/rust-lang/rust/commit/aa2e13b37f4508168fb064a79d0190fa705d8a47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa2e13b37f4508168fb064a79d0190fa705d8a47/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01422cc31d1917aaef4b1f402eda05abfff1e75f", "url": "https://api.github.com/repos/rust-lang/rust/commits/01422cc31d1917aaef4b1f402eda05abfff1e75f", "html_url": "https://github.com/rust-lang/rust/commit/01422cc31d1917aaef4b1f402eda05abfff1e75f"}, {"sha": "79b77403b65877e4d20bbbac6dd853a3beead445", "url": "https://api.github.com/repos/rust-lang/rust/commits/79b77403b65877e4d20bbbac6dd853a3beead445", "html_url": "https://github.com/rust-lang/rust/commit/79b77403b65877e4d20bbbac6dd853a3beead445"}], "stats": {"total": 193, "additions": 150, "deletions": 43}, "files": [{"sha": "45c4de2b6fc69f312e5ddb18412fbf947384bea7", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa2e13b37f4508168fb064a79d0190fa705d8a47/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/aa2e13b37f4508168fb064a79d0190fa705d8a47/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=aa2e13b37f4508168fb064a79d0190fa705d8a47", "patch": "@@ -869,8 +869,8 @@ version = \"0.1.0\"\n name = \"ra_assists\"\n version = \"0.1.0\"\n dependencies = [\n+ \"either 1.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"format-buf 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"itertools 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"join_to_string 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_db 0.1.0\",\n  \"ra_fmt 0.1.0\",\n@@ -1066,6 +1066,7 @@ name = \"ra_lsp_server\"\n version = \"0.1.0\"\n dependencies = [\n  \"crossbeam-channel 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"either 1.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"jod-thread 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "0d2109e4ed6154aea1d697be34d561d8e680c152", "filename": "crates/ra_assists/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa2e13b37f4508168fb064a79d0190fa705d8a47/crates%2Fra_assists%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/aa2e13b37f4508168fb064a79d0190fa705d8a47/crates%2Fra_assists%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2FCargo.toml?ref=aa2e13b37f4508168fb064a79d0190fa705d8a47", "patch": "@@ -11,7 +11,7 @@ doctest = false\n format-buf = \"1.0.0\"\n join_to_string = \"0.1.3\"\n rustc-hash = \"1.0\"\n-itertools = \"0.8.0\"\n+either = \"1.5\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }"}, {"sha": "9d533fa0c162ff316fc734d7747a207ee39068f0", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 43, "deletions": 7, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/aa2e13b37f4508168fb064a79d0190fa705d8a47/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2e13b37f4508168fb064a79d0190fa705d8a47/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=aa2e13b37f4508168fb064a79d0190fa705d8a47", "patch": "@@ -1,4 +1,5 @@\n //! This module defines `AssistCtx` -- the API surface that is exposed to assists.\n+use either::Either;\n use hir::{db::HirDatabase, InFile, SourceAnalyzer};\n use ra_db::FileRange;\n use ra_fmt::{leading_indent, reindent};\n@@ -9,12 +10,12 @@ use ra_syntax::{\n };\n use ra_text_edit::TextEditBuilder;\n \n-use crate::{AssistAction, AssistId, AssistLabel};\n+use crate::{AssistAction, AssistId, AssistLabel, ResolvedAssist};\n \n #[derive(Clone, Debug)]\n pub(crate) enum Assist {\n     Unresolved { label: AssistLabel },\n-    Resolved { label: AssistLabel, action: AssistAction },\n+    Resolved { assist: ResolvedAssist },\n }\n \n /// `AssistCtx` allows to apply an assist or check if it could be applied.\n@@ -81,18 +82,45 @@ impl<'a, DB: HirDatabase> AssistCtx<'a, DB> {\n         self,\n         id: AssistId,\n         label: impl Into<String>,\n-        f: impl FnOnce(&mut AssistBuilder),\n+        f: impl FnOnce(&mut ActionBuilder),\n     ) -> Option<Assist> {\n         let label = AssistLabel { label: label.into(), id };\n         assert!(label.label.chars().nth(0).unwrap().is_uppercase());\n \n         let assist = if self.should_compute_edit {\n             let action = {\n-                let mut edit = AssistBuilder::default();\n+                let mut edit = ActionBuilder::default();\n                 f(&mut edit);\n                 edit.build()\n             };\n-            Assist::Resolved { label, action }\n+            Assist::Resolved { assist: ResolvedAssist { label, action_data: Either::Left(action) } }\n+        } else {\n+            Assist::Unresolved { label }\n+        };\n+\n+        Some(assist)\n+    }\n+\n+    #[allow(dead_code)] // will be used for auto import assist with multiple actions\n+    pub(crate) fn add_assist_group(\n+        self,\n+        id: AssistId,\n+        label: impl Into<String>,\n+        f: impl FnOnce() -> Vec<ActionBuilder>,\n+    ) -> Option<Assist> {\n+        let label = AssistLabel { label: label.into(), id };\n+        let assist = if self.should_compute_edit {\n+            let actions = f();\n+            assert!(!actions.is_empty(), \"Assist cannot have no\");\n+\n+            Assist::Resolved {\n+                assist: ResolvedAssist {\n+                    label,\n+                    action_data: Either::Right(\n+                        actions.into_iter().map(ActionBuilder::build).collect(),\n+                    ),\n+                },\n+            }\n         } else {\n             Assist::Unresolved { label }\n         };\n@@ -128,13 +156,20 @@ impl<'a, DB: HirDatabase> AssistCtx<'a, DB> {\n }\n \n #[derive(Default)]\n-pub(crate) struct AssistBuilder {\n+pub(crate) struct ActionBuilder {\n     edit: TextEditBuilder,\n     cursor_position: Option<TextUnit>,\n     target: Option<TextRange>,\n+    label: Option<String>,\n }\n \n-impl AssistBuilder {\n+impl ActionBuilder {\n+    #[allow(dead_code)]\n+    /// Adds a custom label to the action, if it needs to be different from the assist label\n+    pub(crate) fn label(&mut self, label: impl Into<String>) {\n+        self.label = Some(label.into())\n+    }\n+\n     /// Replaces specified `range` of text with a given string.\n     pub(crate) fn replace(&mut self, range: TextRange, replace_with: impl Into<String>) {\n         self.edit.replace(range, replace_with.into())\n@@ -193,6 +228,7 @@ impl AssistBuilder {\n             edit: self.edit.finish(),\n             cursor_position: self.cursor_position,\n             target: self.target,\n+            label: self.label,\n         }\n     }\n }"}, {"sha": "45e0f983fecb3d44fca64a2f11f22749e4e7da4a", "filename": "crates/ra_assists/src/assists/inline_local_variable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa2e13b37f4508168fb064a79d0190fa705d8a47/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2e13b37f4508168fb064a79d0190fa705d8a47/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs?ref=aa2e13b37f4508168fb064a79d0190fa705d8a47", "patch": "@@ -4,7 +4,7 @@ use ra_syntax::{\n     TextRange,\n };\n \n-use crate::assist_ctx::AssistBuilder;\n+use crate::assist_ctx::ActionBuilder;\n use crate::{Assist, AssistCtx, AssistId};\n \n // Assist: inline_local_variable\n@@ -94,7 +94,7 @@ pub(crate) fn inline_local_varialbe(ctx: AssistCtx<impl HirDatabase>) -> Option<\n     ctx.add_assist(\n         AssistId(\"inline_local_variable\"),\n         \"Inline variable\",\n-        move |edit: &mut AssistBuilder| {\n+        move |edit: &mut ActionBuilder| {\n             edit.delete(delete_range);\n             for (desc, should_wrap) in refs.iter().zip(wrap_in_parens) {\n                 if should_wrap {"}, {"sha": "5dc1ee23374fd06ee32d5dc27ad4bfde676a8468", "filename": "crates/ra_assists/src/doc_tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa2e13b37f4508168fb064a79d0190fa705d8a47/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2e13b37f4508168fb064a79d0190fa705d8a47/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs?ref=aa2e13b37f4508168fb064a79d0190fa705d8a47", "patch": "@@ -15,21 +15,21 @@ fn check(assist_id: &str, before: &str, after: &str) {\n     let (db, file_id) = TestDB::with_single_file(&before);\n     let frange = FileRange { file_id, range: selection.into() };\n \n-    let (_assist_id, action) = crate::assists(&db, frange)\n+    let assist = crate::assists(&db, frange)\n         .into_iter()\n-        .find(|(id, _)| id.id.0 == assist_id)\n+        .find(|assist| assist.label.id.0 == assist_id)\n         .unwrap_or_else(|| {\n             panic!(\n                 \"\\n\\nAssist is not applicable: {}\\nAvailable assists: {}\",\n                 assist_id,\n                 crate::assists(&db, frange)\n                     .into_iter()\n-                    .map(|(id, _)| id.id.0)\n+                    .map(|assist| assist.label.id.0)\n                     .collect::<Vec<_>>()\n                     .join(\", \")\n             )\n         });\n \n-    let actual = action.edit.apply(&before);\n+    let actual = assist.get_first_action().edit.apply(&before);\n     assert_eq_text!(after, &actual);\n }"}, {"sha": "d45b589667a9848e12f63c9617a170d544e4cc2d", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/aa2e13b37f4508168fb064a79d0190fa705d8a47/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2e13b37f4508168fb064a79d0190fa705d8a47/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=aa2e13b37f4508168fb064a79d0190fa705d8a47", "patch": "@@ -13,6 +13,7 @@ mod doc_tests;\n mod test_db;\n pub mod ast_transform;\n \n+use either::Either;\n use hir::db::HirDatabase;\n use ra_db::FileRange;\n use ra_syntax::{TextRange, TextUnit};\n@@ -35,11 +36,27 @@ pub struct AssistLabel {\n \n #[derive(Debug, Clone)]\n pub struct AssistAction {\n+    pub label: Option<String>,\n     pub edit: TextEdit,\n     pub cursor_position: Option<TextUnit>,\n     pub target: Option<TextRange>,\n }\n \n+#[derive(Debug, Clone)]\n+pub struct ResolvedAssist {\n+    pub label: AssistLabel,\n+    pub action_data: Either<AssistAction, Vec<AssistAction>>,\n+}\n+\n+impl ResolvedAssist {\n+    pub fn get_first_action(&self) -> AssistAction {\n+        match &self.action_data {\n+            Either::Left(action) => action.clone(),\n+            Either::Right(actions) => actions[0].clone(),\n+        }\n+    }\n+}\n+\n /// Return all the assists applicable at the given position.\n ///\n /// Assists are returned in the \"unresolved\" state, that is only labels are\n@@ -64,7 +81,7 @@ where\n ///\n /// Assists are returned in the \"resolved\" state, that is with edit fully\n /// computed.\n-pub fn assists<H>(db: &H, range: FileRange) -> Vec<(AssistLabel, AssistAction)>\n+pub fn assists<H>(db: &H, range: FileRange) -> Vec<ResolvedAssist>\n where\n     H: HirDatabase + 'static,\n {\n@@ -75,11 +92,11 @@ where\n             .iter()\n             .filter_map(|f| f(ctx.clone()))\n             .map(|a| match a {\n-                Assist::Resolved { label, action } => (label, action),\n+                Assist::Resolved { assist } => assist,\n                 Assist::Unresolved { .. } => unreachable!(),\n             })\n             .collect::<Vec<_>>();\n-        a.sort_by(|a, b| match (a.1.target, b.1.target) {\n+        a.sort_by(|a, b| match (a.get_first_action().target, b.get_first_action().target) {\n             (Some(a), Some(b)) => a.len().cmp(&b.len()),\n             (Some(_), None) => Ordering::Less,\n             (None, Some(_)) => Ordering::Greater,\n@@ -174,7 +191,7 @@ mod helpers {\n             AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n         let action = match assist {\n             Assist::Unresolved { .. } => unreachable!(),\n-            Assist::Resolved { action, .. } => action,\n+            Assist::Resolved { assist } => assist.get_first_action(),\n         };\n \n         let actual = action.edit.apply(&before);\n@@ -201,7 +218,7 @@ mod helpers {\n             AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n         let action = match assist {\n             Assist::Unresolved { .. } => unreachable!(),\n-            Assist::Resolved { action, .. } => action,\n+            Assist::Resolved { assist } => assist.get_first_action(),\n         };\n \n         let mut actual = action.edit.apply(&before);\n@@ -224,7 +241,7 @@ mod helpers {\n             AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n         let action = match assist {\n             Assist::Unresolved { .. } => unreachable!(),\n-            Assist::Resolved { action, .. } => action,\n+            Assist::Resolved { assist } => assist.get_first_action(),\n         };\n \n         let range = action.target.expect(\"expected target on action\");\n@@ -243,7 +260,7 @@ mod helpers {\n             AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n         let action = match assist {\n             Assist::Unresolved { .. } => unreachable!(),\n-            Assist::Resolved { action, .. } => action,\n+            Assist::Resolved { assist } => assist.get_first_action(),\n         };\n \n         let range = action.target.expect(\"expected target on action\");\n@@ -293,10 +310,10 @@ mod tests {\n         let mut assists = assists.iter();\n \n         assert_eq!(\n-            assists.next().expect(\"expected assist\").0.label,\n+            assists.next().expect(\"expected assist\").label.label,\n             \"Change visibility to pub(crate)\"\n         );\n-        assert_eq!(assists.next().expect(\"expected assist\").0.label, \"Add `#[derive]`\");\n+        assert_eq!(assists.next().expect(\"expected assist\").label.label, \"Add `#[derive]`\");\n     }\n \n     #[test]\n@@ -315,7 +332,7 @@ mod tests {\n         let assists = super::assists(&db, frange);\n         let mut assists = assists.iter();\n \n-        assert_eq!(assists.next().expect(\"expected assist\").0.label, \"Extract into variable\");\n-        assert_eq!(assists.next().expect(\"expected assist\").0.label, \"Replace with match\");\n+        assert_eq!(assists.next().expect(\"expected assist\").label.label, \"Extract into variable\");\n+        assert_eq!(assists.next().expect(\"expected assist\").label.label, \"Replace with match\");\n     }\n }"}, {"sha": "a936900da3eeb7573bfa7398998a8dc5d05710db", "filename": "crates/ra_ide/src/assists.rs", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/aa2e13b37f4508168fb064a79d0190fa705d8a47/crates%2Fra_ide%2Fsrc%2Fassists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2e13b37f4508168fb064a79d0190fa705d8a47/crates%2Fra_ide%2Fsrc%2Fassists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fassists.rs?ref=aa2e13b37f4508168fb064a79d0190fa705d8a47", "patch": "@@ -2,27 +2,53 @@\n \n use ra_db::{FilePosition, FileRange};\n \n-use crate::{db::RootDatabase, SourceChange, SourceFileEdit};\n+use crate::{db::RootDatabase, FileId, SourceChange, SourceFileEdit};\n \n+use either::Either;\n pub use ra_assists::AssistId;\n+use ra_assists::{AssistAction, AssistLabel};\n \n #[derive(Debug)]\n pub struct Assist {\n     pub id: AssistId,\n-    pub change: SourceChange,\n+    pub label: String,\n+    pub change_data: Either<SourceChange, Vec<SourceChange>>,\n }\n \n pub(crate) fn assists(db: &RootDatabase, frange: FileRange) -> Vec<Assist> {\n     ra_assists::assists(db, frange)\n         .into_iter()\n-        .map(|(label, action)| {\n+        .map(|assist| {\n             let file_id = frange.file_id;\n-            let file_edit = SourceFileEdit { file_id, edit: action.edit };\n-            let id = label.id;\n-            let change = SourceChange::source_file_edit(label.label, file_edit).with_cursor_opt(\n-                action.cursor_position.map(|offset| FilePosition { offset, file_id }),\n-            );\n-            Assist { id, change }\n+            let assist_label = &assist.label;\n+            Assist {\n+                id: assist_label.id,\n+                label: assist_label.label.clone(),\n+                change_data: match assist.action_data {\n+                    Either::Left(action) => {\n+                        Either::Left(action_to_edit(action, file_id, assist_label))\n+                    }\n+                    Either::Right(actions) => Either::Right(\n+                        actions\n+                            .into_iter()\n+                            .map(|action| action_to_edit(action, file_id, assist_label))\n+                            .collect(),\n+                    ),\n+                },\n+            }\n         })\n         .collect()\n }\n+\n+fn action_to_edit(\n+    action: AssistAction,\n+    file_id: FileId,\n+    assist_label: &AssistLabel,\n+) -> SourceChange {\n+    let file_edit = SourceFileEdit { file_id, edit: action.edit };\n+    SourceChange::source_file_edit(\n+        action.label.unwrap_or_else(|| assist_label.label.clone()),\n+        file_edit,\n+    )\n+    .with_cursor_opt(action.cursor_position.map(|offset| FilePosition { offset, file_id }))\n+}"}, {"sha": "579158780b3c1c7a653ad9484869ceb9e26ffa4d", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa2e13b37f4508168fb064a79d0190fa705d8a47/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/aa2e13b37f4508168fb064a79d0190fa705d8a47/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=aa2e13b37f4508168fb064a79d0190fa705d8a47", "patch": "@@ -28,6 +28,7 @@ ra_prof = { path = \"../ra_prof\" }\n ra_vfs_glob = { path = \"../ra_vfs_glob\" }\n env_logger = { version = \"0.7.1\", default-features = false, features = [\"humantime\"] }\n ra_cargo_watch = { path = \"../ra_cargo_watch\" }\n+either = \"1.5\"\n \n [dev-dependencies]\n tempfile = \"3\""}, {"sha": "9e996488081efe3b998bf4befb50f94b211e3fa3", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/aa2e13b37f4508168fb064a79d0190fa705d8a47/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2e13b37f4508168fb064a79d0190fa705d8a47/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=aa2e13b37f4508168fb064a79d0190fa705d8a47", "patch": "@@ -3,6 +3,7 @@\n \n use std::{fmt::Write as _, io::Write as _};\n \n+use either::Either;\n use lsp_server::ErrorCode;\n use lsp_types::{\n     CallHierarchyIncomingCall, CallHierarchyIncomingCallsParams, CallHierarchyItem,\n@@ -644,7 +645,6 @@ pub fn handle_code_action(\n     let line_index = world.analysis().file_line_index(file_id)?;\n     let range = params.range.conv_with(&line_index);\n \n-    let assists = world.analysis().assists(FileRange { file_id, range })?.into_iter();\n     let diagnostics = world.analysis().diagnostics(file_id)?;\n     let mut res = CodeActionResponse::default();\n \n@@ -697,15 +697,27 @@ pub fn handle_code_action(\n         res.push(action.into());\n     }\n \n-    for assist in assists {\n-        let title = assist.change.label.clone();\n-        let edit = assist.change.try_conv_with(&world)?;\n+    for assist in world.analysis().assists(FileRange { file_id, range })?.into_iter() {\n+        let title = assist.label.clone();\n \n-        let command = Command {\n-            title,\n-            command: \"rust-analyzer.applySourceChange\".to_string(),\n-            arguments: Some(vec![to_value(edit).unwrap()]),\n+        let command = match assist.change_data {\n+            Either::Left(change) => Command {\n+                title,\n+                command: \"rust-analyzer.applySourceChange\".to_string(),\n+                arguments: Some(vec![to_value(change.try_conv_with(&world)?)?]),\n+            },\n+            Either::Right(changes) => Command {\n+                title,\n+                command: \"rust-analyzer.selectAndApplySourceChange\".to_string(),\n+                arguments: Some(vec![to_value(\n+                    changes\n+                        .into_iter()\n+                        .map(|change| change.try_conv_with(&world))\n+                        .collect::<Result<Vec<_>>>()?,\n+                )?]),\n+            },\n         };\n+\n         let action = CodeAction {\n             title: command.title.clone(),\n             kind: match assist.id {"}, {"sha": "dc075aa8289c61890f5db1fcbed95120e678b191", "filename": "editors/code/src/commands/index.ts", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aa2e13b37f4508168fb064a79d0190fa705d8a47/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/aa2e13b37f4508168fb064a79d0190fa705d8a47/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=aa2e13b37f4508168fb064a79d0190fa705d8a47", "patch": "@@ -39,6 +39,18 @@ function applySourceChange(ctx: Ctx): Cmd {\n     };\n }\n \n+function selectAndApplySourceChange(ctx: Ctx): Cmd {\n+    return async (changes: sourceChange.SourceChange[]) => {\n+        if (changes.length === 1) {\n+            await sourceChange.applySourceChange(ctx, changes[0]);\n+        } else if (changes.length > 0) {\n+            const selectedChange = await vscode.window.showQuickPick(changes);\n+            if (!selectedChange) return;\n+            await sourceChange.applySourceChange(ctx, selectedChange);\n+        }\n+    };\n+}\n+\n function reload(ctx: Ctx): Cmd {\n     return async () => {\n         vscode.window.showInformationMessage('Reloading rust-analyzer...');\n@@ -59,5 +71,6 @@ export {\n     runSingle,\n     showReferences,\n     applySourceChange,\n+    selectAndApplySourceChange,\n     reload\n };"}, {"sha": "0494ccf63f2140508335cd161496c4aac5dfe338", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa2e13b37f4508168fb064a79d0190fa705d8a47/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/aa2e13b37f4508168fb064a79d0190fa705d8a47/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=aa2e13b37f4508168fb064a79d0190fa705d8a47", "patch": "@@ -26,6 +26,7 @@ export async function activate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('runSingle', commands.runSingle);\n     ctx.registerCommand('showReferences', commands.showReferences);\n     ctx.registerCommand('applySourceChange', commands.applySourceChange);\n+    ctx.registerCommand('selectAndApplySourceChange', commands.selectAndApplySourceChange);\n \n     if (ctx.config.enableEnhancedTyping) {\n         ctx.overrideCommand('type', commands.onEnter);"}]}