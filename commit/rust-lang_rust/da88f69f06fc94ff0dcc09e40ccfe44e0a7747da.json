{"sha": "da88f69f06fc94ff0dcc09e40ccfe44e0a7747da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhODhmNjlmMDZmYzk0ZmYwZGNjMDllNDBjY2ZlNDRlMGE3NzQ3ZGE=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-08-26T09:43:14Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-08-26T09:43:14Z"}, "message": "Port middle/stack_check.rs from oldvisit to <V:Visitor> trait API.", "tree": {"sha": "87f5f536be631d6305bb307663e19f9426fbd7ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87f5f536be631d6305bb307663e19f9426fbd7ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da88f69f06fc94ff0dcc09e40ccfe44e0a7747da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da88f69f06fc94ff0dcc09e40ccfe44e0a7747da", "html_url": "https://github.com/rust-lang/rust/commit/da88f69f06fc94ff0dcc09e40ccfe44e0a7747da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da88f69f06fc94ff0dcc09e40ccfe44e0a7747da/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6af6b088ad0a283cdf6fc14291d1a35efa1297cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6af6b088ad0a283cdf6fc14291d1a35efa1297cb", "html_url": "https://github.com/rust-lang/rust/commit/6af6b088ad0a283cdf6fc14291d1a35efa1297cb"}], "stats": {"total": 57, "additions": 37, "deletions": 20}, "files": [{"sha": "4266b051c687598bd206dfa317a668c9bbaa585c", "filename": "src/librustc/middle/stack_check.rs", "status": "modified", "additions": 37, "deletions": 20, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/da88f69f06fc94ff0dcc09e40ccfe44e0a7747da/src%2Flibrustc%2Fmiddle%2Fstack_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da88f69f06fc94ff0dcc09e40ccfe44e0a7747da/src%2Flibrustc%2Fmiddle%2Fstack_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstack_check.rs?ref=da88f69f06fc94ff0dcc09e40ccfe44e0a7747da", "patch": "@@ -22,7 +22,8 @@ use syntax::ast;\n use syntax::ast_map;\n use syntax::attr;\n use syntax::codemap::span;\n-use visit = syntax::oldvisit;\n+use syntax::visit;\n+use syntax::visit::Visitor;\n use util::ppaux::Repr;\n \n #[deriving(Clone)]\n@@ -31,44 +32,56 @@ struct Context {\n     safe_stack: bool\n }\n \n+struct StackCheckVisitor;\n+\n+impl Visitor<Context> for StackCheckVisitor {\n+    fn visit_item(&mut self, i:@ast::item, e:Context) {\n+        stack_check_item(*self, i, e);\n+    }\n+    fn visit_fn(&mut self, fk:&visit::fn_kind, fd:&ast::fn_decl,\n+                b:&ast::Block, s:span, n:ast::NodeId, e:Context) {\n+        stack_check_fn(*self, fk, fd, b, s, n, e);\n+    }\n+    fn visit_expr(&mut self, ex:@ast::expr, e:Context) {\n+        stack_check_expr(*self, ex, e);\n+    }\n+}\n+\n pub fn stack_check_crate(tcx: ty::ctxt,\n                          crate: &ast::Crate) {\n     let new_cx = Context {\n         tcx: tcx,\n         safe_stack: false\n     };\n-    let visitor = visit::mk_vt(@visit::Visitor {\n-        visit_item: stack_check_item,\n-        visit_fn: stack_check_fn,\n-        visit_expr: stack_check_expr,\n-        ..*visit::default_visitor()\n-    });\n-    visit::visit_crate(crate, (new_cx, visitor));\n+    let mut visitor = StackCheckVisitor;\n+    visit::walk_crate(&mut visitor, crate, new_cx);\n }\n \n-fn stack_check_item(item: @ast::item,\n-                    (in_cx, v): (Context, visit::vt<Context>)) {\n+fn stack_check_item(v: StackCheckVisitor,\n+                    item: @ast::item,\n+                    in_cx: Context) {\n+    let mut v = v;\n     match item.node {\n         ast::item_fn(_, ast::extern_fn, _, _, _) => {\n             // an extern fn is already being called from C code...\n             let new_cx = Context {safe_stack: true, ..in_cx};\n-            visit::visit_item(item, (new_cx, v));\n+            visit::walk_item(&mut v, item, new_cx);\n         }\n         ast::item_fn(*) => {\n             let safe_stack = fixed_stack_segment(item.attrs);\n             let new_cx = Context {safe_stack: safe_stack, ..in_cx};\n-            visit::visit_item(item, (new_cx, v));\n+            visit::walk_item(&mut v, item, new_cx);\n         }\n         ast::item_impl(_, _, _, ref methods) => {\n             // visit_method() would make this nicer\n             for &method in methods.iter() {\n                 let safe_stack = fixed_stack_segment(method.attrs);\n                 let new_cx = Context {safe_stack: safe_stack, ..in_cx};\n-                visit::visit_method_helper(method, (new_cx, v));\n+                visit::walk_method_helper(&mut v, method, new_cx);\n             }\n         }\n         _ => {\n-            visit::visit_item(item, (in_cx, v));\n+            visit::walk_item(&mut v, item, in_cx);\n         }\n     }\n \n@@ -77,12 +90,13 @@ fn stack_check_item(item: @ast::item,\n     }\n }\n \n-fn stack_check_fn<'a>(fk: &visit::fn_kind,\n+fn stack_check_fn<'a>(v: StackCheckVisitor,\n+                      fk: &visit::fn_kind,\n                       decl: &ast::fn_decl,\n                       body: &ast::Block,\n                       sp: span,\n                       id: ast::NodeId,\n-                      (in_cx, v): (Context, visit::vt<Context>)) {\n+                      in_cx: Context) {\n     let safe_stack = match *fk {\n         visit::fk_method(*) | visit::fk_item_fn(*) => {\n             in_cx.safe_stack // see stack_check_item above\n@@ -102,11 +116,13 @@ fn stack_check_fn<'a>(fk: &visit::fn_kind,\n     };\n     let new_cx = Context {safe_stack: safe_stack, ..in_cx};\n     debug!(\"stack_check_fn(safe_stack=%b, id=%?)\", safe_stack, id);\n-    visit::visit_fn(fk, decl, body, sp, id, (new_cx, v));\n+    let mut v = v;\n+    visit::walk_fn(&mut v, fk, decl, body, sp, id, new_cx);\n }\n \n-fn stack_check_expr<'a>(expr: @ast::expr,\n-                        (cx, v): (Context, visit::vt<Context>)) {\n+fn stack_check_expr<'a>(v: StackCheckVisitor,\n+                        expr: @ast::expr,\n+                        cx: Context) {\n     debug!(\"stack_check_expr(safe_stack=%b, expr=%s)\",\n            cx.safe_stack, expr.repr(cx.tcx));\n     if !cx.safe_stack {\n@@ -126,7 +142,8 @@ fn stack_check_expr<'a>(expr: @ast::expr,\n             _ => {}\n         }\n     }\n-    visit::visit_expr(expr, (cx, v));\n+    let mut v = v;\n+    visit::walk_expr(&mut v, expr, cx);\n }\n \n fn call_to_extern_fn(cx: Context, callee: @ast::expr) {"}]}