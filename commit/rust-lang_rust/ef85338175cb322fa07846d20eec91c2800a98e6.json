{"sha": "ef85338175cb322fa07846d20eec91c2800a98e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmODUzMzgxNzVjYjMyMmZhMDc4NDZkMjBlZWM5MWMyODAwYTk4ZTY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-06-17T14:02:32Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-07-03T23:42:35Z"}, "message": "Code up the new lifetime default rules, but leave them disabled\nfor now.", "tree": {"sha": "858683392deb59bf71fbbf29829c9e5d06cef452", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/858683392deb59bf71fbbf29829c9e5d06cef452"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef85338175cb322fa07846d20eec91c2800a98e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef85338175cb322fa07846d20eec91c2800a98e6", "html_url": "https://github.com/rust-lang/rust/commit/ef85338175cb322fa07846d20eec91c2800a98e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef85338175cb322fa07846d20eec91c2800a98e6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f027bdc1c8a133693651f333624b756abe21960f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f027bdc1c8a133693651f333624b756abe21960f", "html_url": "https://github.com/rust-lang/rust/commit/f027bdc1c8a133693651f333624b756abe21960f"}], "stats": {"total": 126, "additions": 90, "deletions": 36}, "files": [{"sha": "99d27c1ba31901abd8fd59a3a41f58f83c70498d", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef85338175cb322fa07846d20eec91c2800a98e6/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef85338175cb322fa07846d20eec91c2800a98e6/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=ef85338175cb322fa07846d20eec91c2800a98e6", "patch": "@@ -843,15 +843,15 @@ fn parse_type_param_def_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, conv: &mut F)\n \n fn parse_object_lifetime_default<'a,'tcx, F>(st: &mut PState<'a,'tcx>,\n                                              conv: &mut F)\n-                                             -> Option<ty::ObjectLifetimeDefault>\n+                                             -> ty::ObjectLifetimeDefault\n     where F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n {\n     match next(st) {\n-        'n' => None,\n-        'a' => Some(ty::ObjectLifetimeDefault::Ambiguous),\n+        'a' => ty::ObjectLifetimeDefault::Ambiguous,\n+        'b' => ty::ObjectLifetimeDefault::BaseDefault,\n         's' => {\n             let region = parse_region_(st, conv);\n-            Some(ty::ObjectLifetimeDefault::Specific(region))\n+            ty::ObjectLifetimeDefault::Specific(region)\n         }\n         _ => panic!(\"parse_object_lifetime_default: bad input\")\n     }"}, {"sha": "d80316b8f489fbafbf83c0d854efd5fc08848614", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef85338175cb322fa07846d20eec91c2800a98e6/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef85338175cb322fa07846d20eec91c2800a98e6/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=ef85338175cb322fa07846d20eec91c2800a98e6", "patch": "@@ -414,12 +414,12 @@ pub fn enc_type_param_def<'a, 'tcx>(w: &mut Encoder, cx: &ctxt<'a, 'tcx>,\n \n fn enc_object_lifetime_default<'a, 'tcx>(w: &mut Encoder,\n                                          cx: &ctxt<'a, 'tcx>,\n-                                         default: Option<ty::ObjectLifetimeDefault>)\n+                                         default: ty::ObjectLifetimeDefault)\n {\n     match default {\n-        None => mywrite!(w, \"n\"),\n-        Some(ty::ObjectLifetimeDefault::Ambiguous) => mywrite!(w, \"a\"),\n-        Some(ty::ObjectLifetimeDefault::Specific(r)) => {\n+        ty::ObjectLifetimeDefault::Ambiguous => mywrite!(w, \"a\"),\n+        ty::ObjectLifetimeDefault::BaseDefault => mywrite!(w, \"b\"),\n+        ty::ObjectLifetimeDefault::Specific(r) => {\n             mywrite!(w, \"s\");\n             enc_region(w, cx, r);\n         }"}, {"sha": "d5372d77005d3d8eefa6d5cae4b501ccf0c3b9ee", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef85338175cb322fa07846d20eec91c2800a98e6/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef85338175cb322fa07846d20eec91c2800a98e6/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=ef85338175cb322fa07846d20eec91c2800a98e6", "patch": "@@ -2245,6 +2245,9 @@ pub enum ObjectLifetimeDefault {\n     /// `T:'a` constraints are found.\n     Ambiguous,\n \n+    /// Use the base default, typically 'static, but in a fn body it is a fresh variable\n+    BaseDefault,\n+\n     /// Use the given region as the default.\n     Specific(Region),\n }\n@@ -2256,7 +2259,7 @@ pub struct TypeParameterDef<'tcx> {\n     pub space: subst::ParamSpace,\n     pub index: u32,\n     pub default: Option<Ty<'tcx>>,\n-    pub object_lifetime_default: Option<ObjectLifetimeDefault>,\n+    pub object_lifetime_default: ObjectLifetimeDefault,\n }\n \n #[derive(RustcEncodable, RustcDecodable, Clone, Debug)]\n@@ -7328,6 +7331,7 @@ impl<'tcx> fmt::Debug for ObjectLifetimeDefault {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             ObjectLifetimeDefault::Ambiguous => write!(f, \"Ambiguous\"),\n+            ObjectLifetimeDefault::BaseDefault => format!(\"BaseDefault\"),\n             ObjectLifetimeDefault::Specific(ref r) => write!(f, \"{:?}\", r),\n         }\n     }"}, {"sha": "6bae1b68ed421014b795889c6ba35a8d6e02011a", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ef85338175cb322fa07846d20eec91c2800a98e6/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef85338175cb322fa07846d20eec91c2800a98e6/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=ef85338175cb322fa07846d20eec91c2800a98e6", "patch": "@@ -369,6 +369,9 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ObjectLifetimeDefault {\n             ty::ObjectLifetimeDefault::Ambiguous =>\n                 ty::ObjectLifetimeDefault::Ambiguous,\n \n+            ty::ObjectLifetimeDefault::BaseDefault =>\n+                ty::ObjectLifetimeDefault::BaseDefault,\n+\n             ty::ObjectLifetimeDefault::Specific(r) =>\n                 ty::ObjectLifetimeDefault::Specific(r.fold_with(folder)),\n         }"}, {"sha": "05166fa6134cfdb6b3391c6850c9f98434b47061", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef85338175cb322fa07846d20eec91c2800a98e6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef85338175cb322fa07846d20eec91c2800a98e6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ef85338175cb322fa07846d20eec91c2800a98e6", "patch": "@@ -1779,14 +1779,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n impl<'a, 'tcx> RegionScope for FnCtxt<'a, 'tcx> {\n     fn object_lifetime_default(&self, span: Span) -> Option<ty::Region> {\n+        Some(self.base_object_lifetime_default(span))\n+    }\n+\n+    fn base_object_lifetime_default(&self, span: Span) -> ty::Region {\n         // RFC #599 specifies that object lifetime defaults take\n         // precedence over other defaults. But within a fn body we\n         // don't have a *default* region, rather we use inference to\n         // find the *correct* region, which is strictly more general\n         // (and anyway, within a fn body the right region may not even\n         // be something the user can write explicitly, since it might\n         // be some expression).\n-        Some(self.infcx().next_region_var(infer::MiscVariable(span)))\n+        self.infcx().next_region_var(infer::MiscVariable(span))\n     }\n \n     fn anon_regions(&self, span: Span, count: usize)"}, {"sha": "e170808ad07d679fc7da428fc279ed424b68bb00", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ef85338175cb322fa07846d20eec91c2800a98e6/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef85338175cb322fa07846d20eec91c2800a98e6/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=ef85338175cb322fa07846d20eec91c2800a98e6", "patch": "@@ -1532,8 +1532,7 @@ fn convert_typed_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         let object_lifetime_default_reprs: String =\n             scheme.generics.types.iter()\n                                  .map(|t| match t.object_lifetime_default {\n-                                     Some(ty::ObjectLifetimeDefault::Specific(r)) =>\n-                                         r.to_string(),\n+                                     ty::ObjectLifetimeDefault::Specific(r) => r.to_string(),\n                                      d => format!(\"{:?}\", d),\n                                  })\n                                  .collect::<Vec<String>>()\n@@ -1637,7 +1636,7 @@ fn ty_generics_for_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         name: special_idents::type_self.name,\n         def_id: local_def(param_id),\n         default: None,\n-        object_lifetime_default: None,\n+        object_lifetime_default: ty::ObjectLifetimeDefault::BaseDefault,\n     };\n \n     ccx.tcx.ty_param_defs.borrow_mut().insert(param_id, def.clone());\n@@ -1928,19 +1927,20 @@ fn compute_object_lifetime_default<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n                                             param_id: ast::NodeId,\n                                             param_bounds: &[ast::TyParamBound],\n                                             where_clause: &ast::WhereClause)\n-                                            -> Option<ty::ObjectLifetimeDefault>\n+                                            -> ty::ObjectLifetimeDefault\n {\n     let inline_bounds = from_bounds(ccx, param_bounds);\n     let where_bounds = from_predicates(ccx, param_id, &where_clause.predicates);\n     let all_bounds: HashSet<_> = inline_bounds.into_iter()\n                                               .chain(where_bounds)\n                                               .collect();\n     return if all_bounds.len() > 1 {\n-        Some(ty::ObjectLifetimeDefault::Ambiguous)\n+        ty::ObjectLifetimeDefault::Ambiguous\n+    } else if all_bounds.len() == 0 {\n+        ty::ObjectLifetimeDefault::BaseDefault\n     } else {\n-        all_bounds.into_iter()\n-                  .next()\n-                  .map(ty::ObjectLifetimeDefault::Specific)\n+        ty::ObjectLifetimeDefault::Specific(\n+            all_bounds.into_iter().next().unwrap())\n     };\n \n     fn from_bounds<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,"}, {"sha": "89f118a717977dc22d55728e3841f484fddfb7c5", "filename": "src/librustc_typeck/rscope.rs", "status": "modified", "additions": 61, "deletions": 18, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/ef85338175cb322fa07846d20eec91c2800a98e6/src%2Flibrustc_typeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef85338175cb322fa07846d20eec91c2800a98e6/src%2Flibrustc_typeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Frscope.rs?ref=ef85338175cb322fa07846d20eec91c2800a98e6", "patch": "@@ -45,6 +45,13 @@ pub trait RegionScope {\n     /// be derived from the object traits, what should we use? If\n     /// `None` is returned, an explicit annotation is required.\n     fn object_lifetime_default(&self, span: Span) -> Option<ty::Region>;\n+\n+    /// The \"base\" default is the initial default for a scope. This is\n+    /// 'static except for in fn bodies, where it is a fresh inference\n+    /// variable. You shouldn't call this except for as part of\n+    /// computing `object_lifetime_default` (in particular, in legacy\n+    /// modes, it may not be relevant).\n+    fn base_object_lifetime_default(&self, span: Span) -> ty::Region;\n }\n \n // A scope in which all regions must be explicitly named. This is used\n@@ -53,16 +60,20 @@ pub trait RegionScope {\n pub struct ExplicitRscope;\n \n impl RegionScope for ExplicitRscope {\n-    fn object_lifetime_default(&self, _span: Span) -> Option<ty::Region> {\n-        Some(ty::ReStatic)\n-    }\n-\n     fn anon_regions(&self,\n                     _span: Span,\n                     _count: usize)\n                     -> Result<Vec<ty::Region>, Option<Vec<ElisionFailureInfo>>> {\n         Err(None)\n     }\n+\n+    fn object_lifetime_default(&self, span: Span) -> Option<ty::Region> {\n+        Some(self.base_object_lifetime_default(span))\n+    }\n+\n+    fn base_object_lifetime_default(&self, _span: Span) -> ty::Region {\n+        ty::ReStatic\n+    }\n }\n \n // Same as `ExplicitRscope`, but provides some extra information for diagnostics\n@@ -75,17 +86,21 @@ impl UnelidableRscope {\n }\n \n impl RegionScope for UnelidableRscope {\n-    fn object_lifetime_default(&self, _span: Span) -> Option<ty::Region> {\n-        Some(ty::ReStatic)\n-    }\n-\n     fn anon_regions(&self,\n                     _span: Span,\n                     _count: usize)\n                     -> Result<Vec<ty::Region>, Option<Vec<ElisionFailureInfo>>> {\n         let UnelidableRscope(ref v) = *self;\n         Err(v.clone())\n     }\n+\n+    fn object_lifetime_default(&self, span: Span) -> Option<ty::Region> {\n+        Some(self.base_object_lifetime_default(span))\n+    }\n+\n+    fn base_object_lifetime_default(&self, _span: Span) -> ty::Region {\n+        ty::ReStatic\n+    }\n }\n \n // A scope in which omitted anonymous region defaults to\n@@ -103,11 +118,15 @@ impl ElidableRscope {\n }\n \n impl RegionScope for ElidableRscope {\n-    fn object_lifetime_default(&self, _span: Span) -> Option<ty::Region> {\n+    fn object_lifetime_default(&self, span: Span) -> Option<ty::Region> {\n         // Per RFC #599, object-lifetimes default to 'static unless\n         // overridden by context, and this takes precedence over\n         // lifetime elision.\n-        Some(ty::ReStatic)\n+        Some(self.base_object_lifetime_default(span))\n+    }\n+\n+    fn base_object_lifetime_default(&self, _span: Span) -> ty::Region {\n+        ty::ReStatic\n     }\n \n     fn anon_regions(&self,\n@@ -140,11 +159,15 @@ impl BindingRscope {\n }\n \n impl RegionScope for BindingRscope {\n-    fn object_lifetime_default(&self, _span: Span) -> Option<ty::Region> {\n+    fn object_lifetime_default(&self, span: Span) -> Option<ty::Region> {\n         // Per RFC #599, object-lifetimes default to 'static unless\n         // overridden by context, and this takes precedence over the\n-        // binding defaults.\n-        Some(ty::ReStatic)\n+        // binding defaults in a fn signature.\n+        Some(self.base_object_lifetime_default(span))\n+    }\n+\n+    fn base_object_lifetime_default(&self, _span: Span) -> ty::Region {\n+        ty::ReStatic\n     }\n \n     fn anon_regions(&self,\n@@ -159,12 +182,12 @@ impl RegionScope for BindingRscope {\n /// A scope which overrides the default object lifetime but has no other effect.\n pub struct ObjectLifetimeDefaultRscope<'r> {\n     base_scope: &'r (RegionScope+'r),\n-    default: Option<ty::ObjectLifetimeDefault>,\n+    default: ty::ObjectLifetimeDefault,\n }\n \n impl<'r> ObjectLifetimeDefaultRscope<'r> {\n     pub fn new(base_scope: &'r (RegionScope+'r),\n-               default: Option<ty::ObjectLifetimeDefault>)\n+               default: ty::ObjectLifetimeDefault)\n                -> ObjectLifetimeDefaultRscope<'r>\n     {\n         ObjectLifetimeDefaultRscope {\n@@ -177,9 +200,25 @@ impl<'r> ObjectLifetimeDefaultRscope<'r> {\n impl<'r> RegionScope for ObjectLifetimeDefaultRscope<'r> {\n     fn object_lifetime_default(&self, span: Span) -> Option<ty::Region> {\n         match self.default {\n-            None => self.base_scope.object_lifetime_default(span),\n-            Some(ty::ObjectLifetimeDefault::Ambiguous) => None,\n-            Some(ty::ObjectLifetimeDefault::Specific(r)) => Some(r),\n+            ty::ObjectLifetimeDefault::Ambiguous =>\n+                None,\n+\n+            ty::ObjectLifetimeDefault::BaseDefault =>\n+                if false { // this will become the behavior in Rust 1.3\n+                    Some(self.base_object_lifetime_default(span))\n+                } else {\n+                    self.base_scope.object_lifetime_default(span)\n+                },\n+\n+            ty::ObjectLifetimeDefault::Specific(r) =>\n+                Some(r),\n+        }\n+    }\n+\n+    fn base_object_lifetime_default(&self, span: Span) -> ty::Region {\n+        assert!(false, \"this code should not execute until Rust 1.3\");\n+        self.base_scope.base_object_lifetime_default(span)\n+    }\n         }\n     }\n \n@@ -210,6 +249,10 @@ impl<'r> RegionScope for ShiftedRscope<'r> {\n             .map(|r| ty_fold::shift_region(r, 1))\n     }\n \n+    fn base_object_lifetime_default(&self, span: Span) -> ty::Region {\n+        ty_fold::shift_region(self.base_scope.base_object_lifetime_default(span), 1)\n+    }\n+\n     fn anon_regions(&self,\n                     span: Span,\n                     count: usize)"}]}