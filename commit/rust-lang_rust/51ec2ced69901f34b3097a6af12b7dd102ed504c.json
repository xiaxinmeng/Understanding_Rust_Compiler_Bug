{"sha": "51ec2ced69901f34b3097a6af12b7dd102ed504c", "node_id": "C_kwDOAAsO6NoAKDUxZWMyY2VkNjk5MDFmMzRiMzA5N2E2YWYxMmI3ZGQxMDJlZDUwNGM", "commit": {"author": {"name": "alibektas", "email": "bektasali@protonmail.com", "date": "2023-04-16T21:41:08Z"}, "committer": {"name": "Ali Bektas", "email": "bektasali@protonmail.com", "date": "2023-05-23T01:12:57Z"}, "message": "Improve ast::make\n\nAdd `ty_alias` and make `impl_trait` , `fn` and `impl_` have more coverage.", "tree": {"sha": "48d898e0dfd3061bb10250e4330f05b5a5c0ccd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48d898e0dfd3061bb10250e4330f05b5a5c0ccd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51ec2ced69901f34b3097a6af12b7dd102ed504c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51ec2ced69901f34b3097a6af12b7dd102ed504c", "html_url": "https://github.com/rust-lang/rust/commit/51ec2ced69901f34b3097a6af12b7dd102ed504c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51ec2ced69901f34b3097a6af12b7dd102ed504c/comments", "author": {"login": "alibektas", "id": 20956650, "node_id": "MDQ6VXNlcjIwOTU2NjUw", "avatar_url": "https://avatars.githubusercontent.com/u/20956650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alibektas", "html_url": "https://github.com/alibektas", "followers_url": "https://api.github.com/users/alibektas/followers", "following_url": "https://api.github.com/users/alibektas/following{/other_user}", "gists_url": "https://api.github.com/users/alibektas/gists{/gist_id}", "starred_url": "https://api.github.com/users/alibektas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alibektas/subscriptions", "organizations_url": "https://api.github.com/users/alibektas/orgs", "repos_url": "https://api.github.com/users/alibektas/repos", "events_url": "https://api.github.com/users/alibektas/events{/privacy}", "received_events_url": "https://api.github.com/users/alibektas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alibektas", "id": 20956650, "node_id": "MDQ6VXNlcjIwOTU2NjUw", "avatar_url": "https://avatars.githubusercontent.com/u/20956650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alibektas", "html_url": "https://github.com/alibektas", "followers_url": "https://api.github.com/users/alibektas/followers", "following_url": "https://api.github.com/users/alibektas/following{/other_user}", "gists_url": "https://api.github.com/users/alibektas/gists{/gist_id}", "starred_url": "https://api.github.com/users/alibektas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alibektas/subscriptions", "organizations_url": "https://api.github.com/users/alibektas/orgs", "repos_url": "https://api.github.com/users/alibektas/repos", "events_url": "https://api.github.com/users/alibektas/events{/privacy}", "received_events_url": "https://api.github.com/users/alibektas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2120c913c28896ed8e6247906f8884939c268683", "url": "https://api.github.com/repos/rust-lang/rust/commits/2120c913c28896ed8e6247906f8884939c268683", "html_url": "https://github.com/rust-lang/rust/commit/2120c913c28896ed8e6247906f8884939c268683"}], "stats": {"total": 160, "additions": 126, "deletions": 34}, "files": [{"sha": "23e6adcf53a0222dfffb5cab9f5e984f44aff425", "filename": "crates/ide-assists/src/handlers/generate_delegate_methods.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/51ec2ced69901f34b3097a6af12b7dd102ed504c/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51ec2ced69901f34b3097a6af12b7dd102ed504c/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs?ref=51ec2ced69901f34b3097a6af12b7dd102ed504c", "patch": "@@ -116,12 +116,25 @@ pub(crate) fn generate_delegate_methods(acc: &mut Assists, ctx: &AssistContext<'\n                 );\n                 let ret_type = method_source.ret_type();\n                 let is_async = method_source.async_token().is_some();\n+                let is_const = method_source.const_token().is_some();\n+                let is_unsafe = method_source.unsafe_token().is_some();\n                 let tail_expr_finished =\n                     if is_async { make::expr_await(tail_expr) } else { tail_expr };\n                 let body = make::block_expr([], Some(tail_expr_finished));\n-                let f = make::fn_(vis, name, type_params, None, params, body, ret_type, is_async)\n-                    .indent(ast::edit::IndentLevel(1))\n-                    .clone_for_update();\n+                let f = make::fn_(\n+                    vis,\n+                    name,\n+                    type_params,\n+                    None,\n+                    params,\n+                    body,\n+                    ret_type,\n+                    is_async,\n+                    is_const,\n+                    is_unsafe,\n+                )\n+                .indent(ast::edit::IndentLevel(1))\n+                .clone_for_update();\n \n                 let cursor = Cursor::Before(f.syntax());\n \n@@ -153,8 +166,16 @@ pub(crate) fn generate_delegate_methods(acc: &mut Assists, ctx: &AssistContext<'\n                         let name = &strukt_name.to_string();\n                         let params = strukt.generic_param_list();\n                         let ty_params = params.clone();\n-                        let impl_def = make::impl_(make::ext::ident_path(name), params, ty_params)\n-                            .clone_for_update();\n+                        let where_clause = strukt.where_clause();\n+\n+                        let impl_def = make::impl_(\n+                            ty_params,\n+                            None,\n+                            make::ty_path(make::ext::ident_path(name)),\n+                            where_clause,\n+                            None,\n+                        )\n+                        .clone_for_update();\n                         let assoc_items = impl_def.get_or_create_assoc_item_list();\n                         assoc_items.add_item(f.clone().into());\n "}, {"sha": "68b61fc03ffacd3313e0a2876186f4436c84bfc4", "filename": "crates/ide-assists/src/handlers/generate_function.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51ec2ced69901f34b3097a6af12b7dd102ed504c/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51ec2ced69901f34b3097a6af12b7dd102ed504c/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=51ec2ced69901f34b3097a6af12b7dd102ed504c", "patch": "@@ -378,6 +378,8 @@ impl FunctionBuilder {\n             fn_body,\n             self.ret_type,\n             self.is_async,\n+            false, // FIXME : const and unsafe are not handled yet.\n+            false,\n         );\n         let leading_ws;\n         let trailing_ws;"}, {"sha": "3472a42458754103d8eb9aa3152da7aba32985b7", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 98, "deletions": 29, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/51ec2ced69901f34b3097a6af12b7dd102ed504c/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51ec2ced69901f34b3097a6af12b7dd102ed504c/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=51ec2ced69901f34b3097a6af12b7dd102ed504c", "patch": "@@ -158,13 +158,6 @@ fn ty_from_text(text: &str) -> ast::Type {\n     ast_from_text(&format!(\"type _T = {text};\"))\n }\n \n-/// Related goto [link](https://doc.rust-lang.org/reference/items/type-aliases.html)\n-/// Type Alias syntax is\n-/// ```\n-/// TypeAlias :\n-/// type IDENTIFIER GenericParams? ( : TypeParamBounds )? WhereClause? ( = Type WhereClause?)? ;\n-/// ```\n-/// FIXME : ident should be of type ast::Ident\n pub fn ty_alias(\n     ident: &str,\n     generic_param_list: Option<ast::GenericParamList>,\n@@ -173,7 +166,7 @@ pub fn ty_alias(\n     assignment: Option<(ast::Type, Option<ast::WhereClause>)>,\n ) -> ast::TypeAlias {\n     let mut s = String::new();\n-    s.push_str(&format!(\"type {}\", ident));\n+    s.push_str(&format!(\"type {} \", ident));\n \n     if let Some(list) = generic_param_list {\n         s.push_str(&list.to_string());\n@@ -203,33 +196,106 @@ pub fn assoc_item_list() -> ast::AssocItemList {\n     ast_from_text(\"impl C for D {}\")\n }\n \n-// FIXME: `ty_params` should be `ast::GenericArgList`\n+fn merge_gen_params(\n+    ps: Option<ast::GenericParamList>,\n+    bs: Option<ast::GenericParamList>,\n+) -> Option<ast::GenericParamList> {\n+    match (ps, bs) {\n+        (None, None) => None,\n+        (None, Some(bs)) => Some(bs),\n+        (Some(ps), None) => Some(ps),\n+        (Some(ps), Some(bs)) => {\n+            for b in bs.generic_params() {\n+                ps.add_generic_param(b);\n+            }\n+            Some(ps)\n+        }\n+    }\n+}\n+\n pub fn impl_(\n-    ty: ast::Path,\n-    params: Option<ast::GenericParamList>,\n-    ty_params: Option<ast::GenericParamList>,\n+    generic_params: Option<ast::GenericParamList>,\n+    generic_args: Option<ast::GenericParamList>,\n+    path_type: ast::Type,\n+    where_clause: Option<ast::WhereClause>,\n+    body: Option<Vec<either::Either<ast::Attr, ast::AssocItem>>>,\n ) -> ast::Impl {\n-    let params = match params {\n-        Some(params) => params.to_string(),\n-        None => String::new(),\n+    let (gen_params, tr_gen_args) = match (generic_params, generic_args) {\n+        (None, None) => (String::new(), String::new()),\n+        (None, Some(args)) => (String::new(), args.to_generic_args().to_string()),\n+        (Some(params), None) => (params.to_string(), params.to_generic_args().to_string()),\n+        (Some(params), Some(args)) => match merge_gen_params(Some(params.clone()), Some(args)) {\n+            Some(merged) => (params.to_string(), merged.to_generic_args().to_string()),\n+            None => (params.to_string(), String::new()),\n+        },\n     };\n-    let ty_params = match ty_params {\n-        Some(params) => params.to_string(),\n+\n+    let where_clause = match where_clause {\n+        Some(pr) => pr.to_string(),\n+        None => \" \".to_string(),\n+    };\n+\n+    let body = match body {\n+        Some(bd) => bd.iter().map(|elem| elem.to_string()).join(\"\"),\n         None => String::new(),\n     };\n-    ast_from_text(&format!(\"impl{params} {ty}{ty_params} {{}}\"))\n+\n+    ast_from_text(&format!(\"impl{gen_params} {path_type}{tr_gen_args}{where_clause}{{{}}}\", body))\n }\n \n+// FIXME : We must make *_gen_args' type ast::GenericArgList but in order to do so we must implement in `edit_in_place.rs`\n+// `add_generic_arg()` just like `add_generic_param()`\n+// is implemented for `ast::GenericParamList`\n pub fn impl_trait(\n-    trait_: ast::Path,\n-    ty: ast::Path,\n-    ty_params: Option<ast::GenericParamList>,\n+    is_unsafe: bool,\n+    trait_gen_params: Option<ast::GenericParamList>,\n+    trait_gen_args: Option<ast::GenericParamList>,\n+    type_gen_params: Option<ast::GenericParamList>,\n+    type_gen_args: Option<ast::GenericParamList>,\n+    is_negative: bool,\n+    path_type: ast::Type,\n+    ty: ast::Type,\n+    trait_where_clause: Option<ast::WhereClause>,\n+    ty_where_clause: Option<ast::WhereClause>,\n+    body: Option<Vec<either::Either<ast::Attr, ast::AssocItem>>>,\n ) -> ast::Impl {\n-    // TODO : If this function is now correct we can also change `impl_` accordingly`\n-    let ty_params_str = ty_params.as_ref().map_or_else(String::new, |params| params.to_string());\n-    let ty_genargs_str =\n-        ty_params.map_or_else(String::new, |params| params.to_generic_args().to_string());\n-    ast_from_text(&format!(\"impl{ty_params_str} {trait_} for {ty}{ty_genargs_str} {{}}\"))\n+    let is_unsafe = if is_unsafe { \"unsafe \" } else { \"\" };\n+    let ty_gen_args = match merge_gen_params(type_gen_params.clone(), type_gen_args) {\n+        Some(pars) => pars.to_generic_args().to_string(),\n+        None => String::new(),\n+    };\n+\n+    let tr_gen_args = match merge_gen_params(trait_gen_params.clone(), trait_gen_args) {\n+        Some(pars) => pars.to_generic_args().to_string(),\n+        None => String::new(),\n+    };\n+\n+    let gen_params = match merge_gen_params(trait_gen_params, type_gen_params) {\n+        Some(pars) => pars.to_string(),\n+        None => String::new(),\n+    };\n+\n+    let is_negative = if is_negative { \"! \" } else { \"\" };\n+\n+    let where_clause = match (ty_where_clause, trait_where_clause) {\n+        (None, None) => \" \".to_string(),\n+        (None, Some(tr)) => format!(\"\\n{}\\n\", tr).to_string(),\n+        (Some(ty), None) => format!(\"\\n{}\\n\", ty).to_string(),\n+        (Some(ty), Some(tr)) => {\n+            let updated = ty.clone_for_update();\n+            tr.predicates().for_each(|p| {\n+                ty.add_predicate(p);\n+            });\n+            format!(\"\\n{}\\n\", updated).to_string()\n+        }\n+    };\n+\n+    let body = match body {\n+        Some(bd) => bd.iter().map(|elem| elem.to_string()).join(\"\"),\n+        None => String::new(),\n+    };\n+\n+    ast_from_text(&format!(\"{is_unsafe}impl{gen_params} {is_negative}{path_type}{tr_gen_args} for {ty}{ty_gen_args}{where_clause}{{{}}}\" , body))\n }\n \n pub fn path_segment(name_ref: ast::NameRef) -> ast::PathSegment {\n@@ -871,6 +937,8 @@ pub fn fn_(\n     body: ast::BlockExpr,\n     ret_type: Option<ast::RetType>,\n     is_async: bool,\n+    is_const: bool,\n+    is_unsafe: bool,\n ) -> ast::Fn {\n     let type_params = match type_params {\n         Some(type_params) => format!(\"{type_params}\"),\n@@ -890,12 +958,13 @@ pub fn fn_(\n     };\n \n     let async_literal = if is_async { \"async \" } else { \"\" };\n+    let const_literal = if is_const { \"const \" } else { \"\" };\n+    let unsafe_literal = if is_unsafe { \"unsafe \" } else { \"\" };\n \n     ast_from_text(&format!(\n-        \"{visibility}{async_literal}fn {fn_name}{type_params}{params} {ret_type}{where_clause}{body}\",\n+        \"{visibility}{async_literal}{const_literal}{unsafe_literal}fn {fn_name}{type_params}{params} {ret_type}{where_clause}{body}\",\n     ))\n }\n-\n pub fn struct_(\n     visibility: Option<ast::Visibility>,\n     strukt_name: ast::Name,\n@@ -945,7 +1014,7 @@ pub mod tokens {\n \n     pub(super) static SOURCE_FILE: Lazy<Parse<SourceFile>> = Lazy::new(|| {\n         SourceFile::parse(\n-            \"const C: <()>::Item = (1 != 1, 2 == 2, 3 < 3, 4 <= 4, 5 > 5, 6 >= 6, !true, *p)\\n;\\n\\n\",\n+            \"const C: <()>::Item = (1 != 1, 2 == 2, 3 < 3, 4 <= 4, 5 > 5, 6 >= 6, !true, *p, &p , &mut p)\\n;\\n\\n\",\n         )\n     });\n "}]}