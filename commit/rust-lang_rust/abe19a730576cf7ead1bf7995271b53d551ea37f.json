{"sha": "abe19a730576cf7ead1bf7995271b53d551ea37f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZTE5YTczMDU3NmNmN2VhZDFiZjc5OTUyNzFiNTNkNTUxZWEzN2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-25T06:48:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-25T06:48:21Z"}, "message": "Auto merge of #55921 - scalexm:placeholders, r=nikomatsakis\n\nAdd placeholder types\n\nFixes #48696 (handle universes in canonicalization of type inference vars), and fixes #55098.", "tree": {"sha": "d26fe9c0e33d00119d9f52ee741f6eeded80931e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d26fe9c0e33d00119d9f52ee741f6eeded80931e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abe19a730576cf7ead1bf7995271b53d551ea37f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abe19a730576cf7ead1bf7995271b53d551ea37f", "html_url": "https://github.com/rust-lang/rust/commit/abe19a730576cf7ead1bf7995271b53d551ea37f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abe19a730576cf7ead1bf7995271b53d551ea37f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37961dbd2d84a29be49007a5770b96e296f5f349", "url": "https://api.github.com/repos/rust-lang/rust/commits/37961dbd2d84a29be49007a5770b96e296f5f349", "html_url": "https://github.com/rust-lang/rust/commit/37961dbd2d84a29be49007a5770b96e296f5f349"}, {"sha": "b8a30f04cdd129ab89b85d0eda11f1c65058767a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8a30f04cdd129ab89b85d0eda11f1c65058767a", "html_url": "https://github.com/rust-lang/rust/commit/b8a30f04cdd129ab89b85d0eda11f1c65058767a"}], "stats": {"total": 626, "additions": 414, "deletions": 212}, "files": [{"sha": "ad317a96590b35ee5e098fceb76fceba3cb0940c", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -684,9 +684,13 @@ for ty::TyKind<'gcx>\n             Param(param_ty) => {\n                 param_ty.hash_stable(hcx, hasher);\n             }\n-            Bound(bound_ty) => {\n+            Bound(debruijn, bound_ty) => {\n+                debruijn.hash_stable(hcx, hasher);\n                 bound_ty.hash_stable(hcx, hasher);\n             }\n+            ty::Placeholder(placeholder_ty) => {\n+                placeholder_ty.hash_stable(hcx, hasher);\n+            }\n             Foreign(def_id) => {\n                 def_id.hash_stable(hcx, hasher);\n             }\n@@ -1096,12 +1100,13 @@ impl_stable_hash_for!(struct infer::canonical::CanonicalVarInfo {\n \n impl_stable_hash_for!(enum infer::canonical::CanonicalVarKind {\n     Ty(k),\n+    PlaceholderTy(placeholder),\n     Region(ui),\n     PlaceholderRegion(placeholder),\n });\n \n impl_stable_hash_for!(enum infer::canonical::CanonicalTyVarKind {\n-    General,\n+    General(ui),\n     Int,\n     Float\n });"}, {"sha": "ddb520775da0a0f781a8ff962fb46a7c83b28802", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 45, "deletions": 13, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -23,7 +23,7 @@ use infer::InferCtxt;\n use std::sync::atomic::Ordering;\n use ty::fold::{TypeFoldable, TypeFolder};\n use ty::subst::Kind;\n-use ty::{self, BoundTy, BoundVar, Lift, List, Ty, TyCtxt, TypeFlags};\n+use ty::{self, BoundVar, Lift, List, Ty, TyCtxt, TypeFlags};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n@@ -339,20 +339,51 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Canonicalizer<'cx, 'gcx, 'tcx>\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         match t.sty {\n-            ty::Infer(ty::TyVar(_)) => self.canonicalize_ty_var(CanonicalTyVarKind::General, t),\n+            ty::Infer(ty::TyVar(vid)) => {\n+                match self.infcx.unwrap().probe_ty_var(vid) {\n+                    // `t` could be a float / int variable: canonicalize that instead\n+                    Ok(t) => self.fold_ty(t),\n+\n+                    // `TyVar(vid)` is unresolved, track its universe index in the canonicalized\n+                    // result\n+                    Err(ui) => self.canonicalize_ty_var(\n+                        CanonicalVarInfo {\n+                            kind: CanonicalVarKind::Ty(CanonicalTyVarKind::General(ui))\n+                        },\n+                        t\n+                    )\n+                }\n+            }\n \n-            ty::Infer(ty::IntVar(_)) => self.canonicalize_ty_var(CanonicalTyVarKind::Int, t),\n+            ty::Infer(ty::IntVar(_)) => self.canonicalize_ty_var(\n+                CanonicalVarInfo {\n+                    kind: CanonicalVarKind::Ty(CanonicalTyVarKind::Int)\n+                },\n+                t\n+            ),\n \n-            ty::Infer(ty::FloatVar(_)) => self.canonicalize_ty_var(CanonicalTyVarKind::Float, t),\n+            ty::Infer(ty::FloatVar(_)) => self.canonicalize_ty_var(\n+                CanonicalVarInfo {\n+                    kind: CanonicalVarKind::Ty(CanonicalTyVarKind::Float)\n+                },\n+                t\n+            ),\n \n             ty::Infer(ty::FreshTy(_))\n             | ty::Infer(ty::FreshIntTy(_))\n             | ty::Infer(ty::FreshFloatTy(_)) => {\n                 bug!(\"encountered a fresh type during canonicalization\")\n             }\n \n-            ty::Bound(bound_ty) => {\n-                if bound_ty.index >= self.binder_index {\n+            ty::Placeholder(placeholder) => self.canonicalize_ty_var(\n+                CanonicalVarInfo {\n+                    kind: CanonicalVarKind::PlaceholderTy(placeholder)\n+                },\n+                t\n+            ),\n+\n+            ty::Bound(debruijn, _) => {\n+                if debruijn >= self.binder_index {\n                     bug!(\"escaping bound type during canonicalization\")\n                 } else {\n                     t\n@@ -408,9 +439,13 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n         V: TypeFoldable<'tcx> + Lift<'gcx>,\n     {\n         let needs_canonical_flags = if canonicalize_region_mode.any() {\n-            TypeFlags::HAS_FREE_REGIONS | TypeFlags::KEEP_IN_LOCAL_TCX\n+            TypeFlags::KEEP_IN_LOCAL_TCX |\n+            TypeFlags::HAS_FREE_REGIONS | // `HAS_RE_PLACEHOLDER` implies `HAS_FREE_REGIONS`\n+            TypeFlags::HAS_TY_PLACEHOLDER\n         } else {\n-            TypeFlags::KEEP_IN_LOCAL_TCX\n+            TypeFlags::KEEP_IN_LOCAL_TCX |\n+            TypeFlags::HAS_RE_PLACEHOLDER |\n+            TypeFlags::HAS_TY_PLACEHOLDER\n         };\n \n         let gcx = tcx.global_tcx();\n@@ -574,17 +609,14 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n     /// if `ty_var` is bound to anything; if so, canonicalize\n     /// *that*. Otherwise, create a new canonical variable for\n     /// `ty_var`.\n-    fn canonicalize_ty_var(&mut self, ty_kind: CanonicalTyVarKind, ty_var: Ty<'tcx>) -> Ty<'tcx> {\n+    fn canonicalize_ty_var(&mut self, info: CanonicalVarInfo, ty_var: Ty<'tcx>) -> Ty<'tcx> {\n         let infcx = self.infcx.expect(\"encountered ty-var without infcx\");\n         let bound_to = infcx.shallow_resolve(ty_var);\n         if bound_to != ty_var {\n             self.fold_ty(bound_to)\n         } else {\n-            let info = CanonicalVarInfo {\n-                kind: CanonicalVarKind::Ty(ty_kind),\n-            };\n             let var = self.canonical_var(info, ty_var.into());\n-            self.tcx().mk_ty(ty::Bound(BoundTy::new(self.binder_index, var)))\n+            self.tcx().mk_ty(ty::Bound(self.binder_index, var.into()))\n         }\n     }\n }"}, {"sha": "230f8958b33851f81326e8cf01c2a10ad567551b", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -122,6 +122,7 @@ impl CanonicalVarInfo {\n     pub fn is_existential(&self) -> bool {\n         match self.kind {\n             CanonicalVarKind::Ty(_) => true,\n+            CanonicalVarKind::PlaceholderTy(_) => false,\n             CanonicalVarKind::Region(_) => true,\n             CanonicalVarKind::PlaceholderRegion(..) => false,\n         }\n@@ -136,24 +137,27 @@ pub enum CanonicalVarKind {\n     /// Some kind of type inference variable.\n     Ty(CanonicalTyVarKind),\n \n+    /// A \"placeholder\" that represents \"any type\".\n+    PlaceholderTy(ty::PlaceholderType),\n+\n     /// Region variable `'?R`.\n     Region(ty::UniverseIndex),\n \n     /// A \"placeholder\" that represents \"any region\". Created when you\n     /// are solving a goal like `for<'a> T: Foo<'a>` to represent the\n     /// bound region `'a`.\n-    PlaceholderRegion(ty::Placeholder),\n+    PlaceholderRegion(ty::PlaceholderRegion),\n }\n \n impl CanonicalVarKind {\n     pub fn universe(self) -> ty::UniverseIndex {\n         match self {\n-            // At present, we don't support higher-ranked\n-            // quantification over types, so all type variables are in\n-            // the root universe.\n-            CanonicalVarKind::Ty(_) => ty::UniverseIndex::ROOT,\n+            CanonicalVarKind::Ty(kind) => match kind {\n+                CanonicalTyVarKind::General(ui) => ui,\n+                CanonicalTyVarKind::Float | CanonicalTyVarKind::Int => ty::UniverseIndex::ROOT,\n+            }\n \n-            // Region variables can be created in sub-universes.\n+            CanonicalVarKind::PlaceholderTy(placeholder) => placeholder.universe,\n             CanonicalVarKind::Region(ui) => ui,\n             CanonicalVarKind::PlaceholderRegion(placeholder) => placeholder.universe,\n         }\n@@ -168,7 +172,7 @@ impl CanonicalVarKind {\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcDecodable, RustcEncodable)]\n pub enum CanonicalTyVarKind {\n     /// General type variable `?T` that can be unified with arbitrary types.\n-    General,\n+    General(ty::UniverseIndex),\n \n     /// Integral type variable `?I` (that can only be unified with integral types).\n     Int,\n@@ -358,8 +362,11 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         match cv_info.kind {\n             CanonicalVarKind::Ty(ty_kind) => {\n                 let ty = match ty_kind {\n-                    CanonicalTyVarKind::General => {\n-                        self.next_ty_var(TypeVariableOrigin::MiscVariable(span))\n+                    CanonicalTyVarKind::General(ui) => {\n+                        self.next_ty_var_in_universe(\n+                            TypeVariableOrigin::MiscVariable(span),\n+                            universe_map(ui)\n+                        )\n                     }\n \n                     CanonicalTyVarKind::Int => self.tcx.mk_int_var(self.next_int_var_id()),\n@@ -369,20 +376,27 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n                 ty.into()\n             }\n \n+            CanonicalVarKind::PlaceholderTy(ty::PlaceholderType { universe, name }) => {\n+                let universe_mapped = universe_map(universe);\n+                let placeholder_mapped = ty::PlaceholderType {\n+                    universe: universe_mapped,\n+                    name,\n+                };\n+                self.tcx.mk_ty(ty::Placeholder(placeholder_mapped)).into()\n+            }\n+\n             CanonicalVarKind::Region(ui) => self.next_region_var_in_universe(\n                 RegionVariableOrigin::MiscVariable(span),\n                 universe_map(ui),\n             ).into(),\n \n-            CanonicalVarKind::PlaceholderRegion(ty::Placeholder { universe, name }) => {\n+            CanonicalVarKind::PlaceholderRegion(ty::PlaceholderRegion { universe, name }) => {\n                 let universe_mapped = universe_map(universe);\n-                let placeholder_mapped = ty::Placeholder {\n+                let placeholder_mapped = ty::PlaceholderRegion {\n                     universe: universe_mapped,\n                     name,\n                 };\n-                self.tcx\n-                    .mk_region(ty::RePlaceholder(placeholder_mapped))\n-                    .into()\n+                self.tcx.mk_region(ty::RePlaceholder(placeholder_mapped)).into()\n             }\n         }\n     }"}, {"sha": "d32594ebdf366d3b7991206587c1a095a1a22e38", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -435,21 +435,21 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n             match result_value.unpack() {\n                 UnpackedKind::Type(result_value) => {\n                     // e.g., here `result_value` might be `?0` in the example above...\n-                    if let ty::Bound(b) = result_value.sty {\n+                    if let ty::Bound(debruijn, b) = result_value.sty {\n                         // ...in which case we would set `canonical_vars[0]` to `Some(?U)`.\n \n                         // We only allow a `ty::INNERMOST` index in substitutions.\n-                        assert_eq!(b.index, ty::INNERMOST);\n+                        assert_eq!(debruijn, ty::INNERMOST);\n                         opt_values[b.var] = Some(*original_value);\n                     }\n                 }\n                 UnpackedKind::Lifetime(result_value) => {\n                     // e.g., here `result_value` might be `'?1` in the example above...\n-                    if let &ty::RegionKind::ReLateBound(index, br) = result_value {\n+                    if let &ty::RegionKind::ReLateBound(debruijn, br) = result_value {\n                         // ... in which case we would set `canonical_vars[0]` to `Some('static)`.\n \n                         // We only allow a `ty::INNERMOST` index in substitutions.\n-                        assert_eq!(index, ty::INNERMOST);\n+                        assert_eq!(debruijn, ty::INNERMOST);\n                         opt_values[br.assert_bound_var()] = Some(*original_value);\n                     }\n                 }"}, {"sha": "d17cf0c7b47a4f54592509a44b4ea47eb19441d7", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -170,9 +170,6 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> {\n                 t\n             }\n \n-            ty::Bound(..) =>\n-                bug!(\"encountered bound ty during freshening\"),\n-\n             ty::Generator(..) |\n             ty::Bool |\n             ty::Char |\n@@ -200,6 +197,9 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> {\n             ty::Opaque(..) => {\n                 t.super_fold_with(self)\n             }\n+\n+            ty::Placeholder(..) |\n+            ty::Bound(..) => bug!(\"unexpected type {:?}\", t),\n         }\n     }\n }"}, {"sha": "5218aa36facc1c4696c593277f61e1e1738b3352", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -53,7 +53,7 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n             // First, we instantiate each bound region in the supertype with a\n             // fresh placeholder region.\n             let (b_prime, placeholder_map) =\n-                self.infcx.replace_late_bound_regions_with_placeholders(b);\n+                self.infcx.replace_bound_vars_with_placeholders(b);\n \n             // Next, we instantiate each bound region in the subtype\n             // with a fresh region variable. These region variables --\n@@ -115,7 +115,7 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n             // First, we instantiate each bound region in the matcher\n             // with a placeholder region.\n             let ((a_match, a_value), placeholder_map) =\n-                self.infcx.replace_late_bound_regions_with_placeholders(a_pair);\n+                self.infcx.replace_bound_vars_with_placeholders(a_pair);\n \n             debug!(\"higher_ranked_match: a_match={:?}\", a_match);\n             debug!(\"higher_ranked_match: placeholder_map={:?}\", placeholder_map);\n@@ -314,10 +314,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         region_vars\n     }\n \n-    /// Replace all regions bound by `binder` with placeholder regions and\n-    /// return a map indicating which bound-region was replaced with what\n-    /// placeholder region. This is the first step of checking subtyping\n-    /// when higher-ranked things are involved.\n+    /// Replace all regions (resp. types) bound by `binder` with placeholder\n+    /// regions (resp. types) and return a map indicating which bound-region\n+    /// was replaced with what placeholder region. This is the first step of\n+    /// checking subtyping when higher-ranked things are involved.\n     ///\n     /// **Important:** you must call this function from within a snapshot.\n     /// Moreover, before committing the snapshot, you must eventually call\n@@ -330,26 +330,37 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// the [rustc guide].\n     ///\n     /// [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/traits/hrtb.html\n-    pub fn replace_late_bound_regions_with_placeholders<T>(\n+    pub fn replace_bound_vars_with_placeholders<T>(\n         &self,\n-        binder: &ty::Binder<T>,\n+        binder: &ty::Binder<T>\n     ) -> (T, PlaceholderMap<'tcx>)\n     where\n-        T : TypeFoldable<'tcx>,\n+        T: TypeFoldable<'tcx>\n     {\n         let next_universe = self.create_next_universe();\n \n-        let (result, map) = self.tcx.replace_late_bound_regions(binder, |br| {\n-            self.tcx.mk_region(ty::RePlaceholder(ty::Placeholder {\n+        let fld_r = |br| {\n+            self.tcx.mk_region(ty::RePlaceholder(ty::PlaceholderRegion {\n                 universe: next_universe,\n                 name: br,\n             }))\n-        });\n+        };\n+\n+        let fld_t = |bound_ty: ty::BoundTy| {\n+            self.tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n+                universe: next_universe,\n+                name: bound_ty.var,\n+            }))\n+        };\n+\n+        let (result, map) = self.tcx.replace_bound_vars(binder, fld_r, fld_t);\n \n-        debug!(\"replace_late_bound_regions_with_placeholders(binder={:?}, result={:?}, map={:?})\",\n-               binder,\n-               result,\n-               map);\n+        debug!(\n+            \"replace_bound_vars_with_placeholders(binder={:?}, result={:?}, map={:?})\",\n+            binder,\n+            result,\n+            map\n+        );\n \n         (result, map)\n     }\n@@ -530,7 +541,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n     /// Pops the placeholder regions found in `placeholder_map` from the region\n     /// inference context. Whenever you create placeholder regions via\n-    /// `replace_late_bound_regions_with_placeholders`, they must be popped before you\n+    /// `replace_bound_vars_with_placeholders`, they must be popped before you\n     /// commit the enclosing snapshot (if you do not commit, e.g. within a\n     /// probe or as a result of an error, then this is not necessary, as\n     /// popping happens as part of the rollback)."}, {"sha": "a29c85bd2b1c5781d9c489e29ccea0cbaedd52b9", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -227,7 +227,7 @@ pub struct InferCtxt<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     universe: Cell<ty::UniverseIndex>,\n }\n \n-/// A map returned by `replace_late_bound_regions_with_placeholders()`\n+/// A map returned by `replace_bound_vars_with_placeholders()`\n /// indicating the placeholder region that each late-bound region was\n /// replaced with.\n pub type PlaceholderMap<'tcx> = BTreeMap<ty::BoundRegion, ty::Region<'tcx>>;\n@@ -411,7 +411,7 @@ pub enum NLLRegionVariableOrigin {\n \n     /// \"Universal\" instantiation of a higher-ranked region (e.g.,\n     /// from a `for<'a> T` binder). Meant to represent \"any region\".\n-    Placeholder(ty::Placeholder),\n+    Placeholder(ty::PlaceholderRegion),\n \n     Existential,\n }\n@@ -935,7 +935,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     b,\n                 },\n                 placeholder_map,\n-            ) = self.replace_late_bound_regions_with_placeholders(predicate);\n+            ) = self.replace_bound_vars_with_placeholders(predicate);\n \n             let cause_span = cause.span;\n             let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;\n@@ -952,7 +952,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     ) -> UnitResult<'tcx> {\n         self.commit_if_ok(|snapshot| {\n             let (ty::OutlivesPredicate(r_a, r_b), placeholder_map) =\n-                self.replace_late_bound_regions_with_placeholders(predicate);\n+                self.replace_bound_vars_with_placeholders(predicate);\n             let origin = SubregionOrigin::from_obligation_cause(cause, || {\n                 RelateRegionParamBound(cause.span)\n             });\n@@ -972,6 +972,17 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.tcx.mk_var(self.next_ty_var_id(false, origin))\n     }\n \n+    pub fn next_ty_var_in_universe(\n+        &self,\n+        origin: TypeVariableOrigin,\n+        universe: ty::UniverseIndex\n+    ) -> Ty<'tcx> {\n+        let vid = self.type_variables\n+            .borrow_mut()\n+            .new_var(universe, false, origin);\n+        self.tcx.mk_var(vid)\n+    }\n+\n     pub fn next_diverging_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {\n         self.tcx.mk_var(self.next_ty_var_id(true, origin))\n     }\n@@ -1227,6 +1238,17 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    /// If `TyVar(vid)` resolves to a type, return that type. Else, return the\n+    /// universe index of `TyVar(vid)`.\n+    pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {\n+        use self::type_variable::TypeVariableValue;\n+\n+        match self.type_variables.borrow_mut().probe(vid) {\n+            TypeVariableValue::Known { value } => Ok(value),\n+            TypeVariableValue::Unknown { universe } => Err(universe),\n+        }\n+    }\n+\n     pub fn shallow_resolve(&self, typ: Ty<'tcx>) -> Ty<'tcx> {\n         self.inlined_shallow_resolve(typ)\n     }"}, {"sha": "9bdbf77fee0a9ddfa1bf92eec5ad89afac88b5a8", "filename": "src/librustc/infer/nll_relate/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -95,7 +95,7 @@ pub trait TypeRelatingDelegate<'tcx> {\n     /// So e.g. if you have `for<'a> fn(..) <: for<'b> fn(..)`, then\n     /// we will invoke this method to instantiate `'b` with a\n     /// placeholder region.\n-    fn next_placeholder_region(&mut self, placeholder: ty::Placeholder) -> ty::Region<'tcx>;\n+    fn next_placeholder_region(&mut self, placeholder: ty::PlaceholderRegion) -> ty::Region<'tcx>;\n \n     /// Creates a new existential region in the given universe. This\n     /// is used when handling subtyping and type variables -- if we\n@@ -176,7 +176,7 @@ where\n                         universe\n                     });\n \n-                    let placeholder = ty::Placeholder { universe, name: br };\n+                    let placeholder = ty::PlaceholderRegion { universe, name: br };\n                     delegate.next_placeholder_region(placeholder)\n                 } else {\n                     delegate.next_existential_region_var()"}, {"sha": "5624961ea6e67a23dcf7aa23b22e881e5b3b31e6", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -72,7 +72,7 @@ pub type TypeVariableMap = FxHashMap<ty::TyVid, TypeVariableOrigin>;\n \n struct TypeVariableData {\n     origin: TypeVariableOrigin,\n-    diverging: bool\n+    diverging: bool,\n }\n \n #[derive(Copy, Clone, Debug)]"}, {"sha": "b7a84c99308f8cfbddc2affe8ca39933b6f0e934", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -455,7 +455,7 @@ fn ty_is_local_constructor(ty: Ty<'_>, in_crate: InCrate) -> bool {\n             false\n         }\n \n-        ty::Bound(..) | ty::Infer(..) => match in_crate {\n+        ty::Placeholder(..) | ty::Bound(..) | ty::Infer(..) => match in_crate {\n             InCrate::Local => false,\n             // The inference variable might be unified with a local\n             // type in that remote crate."}, {"sha": "7e97dc3c84a790536bb5c580dc561bfe887d815b", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -281,7 +281,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 ty::Generator(..) => Some(18),\n                 ty::Foreign(..) => Some(19),\n                 ty::GeneratorWitness(..) => Some(20),\n-                ty::Bound(..) | ty::Infer(..) | ty::Error => None,\n+                ty::Placeholder(..) | ty::Bound(..) | ty::Infer(..) | ty::Error => None,\n                 ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n             }\n         }"}, {"sha": "e7b5fc3d1ffd7549ca923d397777b79c7c55b184", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -204,7 +204,7 @@ pub fn poly_project_and_unify_type<'cx, 'gcx, 'tcx>(\n     let infcx = selcx.infcx();\n     infcx.commit_if_ok(|snapshot| {\n         let (placeholder_predicate, placeholder_map) =\n-            infcx.replace_late_bound_regions_with_placeholders(&obligation.predicate);\n+            infcx.replace_bound_vars_with_placeholders(&obligation.predicate);\n \n         let skol_obligation = obligation.with(placeholder_predicate);\n         let r = match project_and_unify_type(selcx, &skol_obligation) {\n@@ -424,7 +424,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for AssociatedTypeNormalizer<'a,\n         if let ConstValue::Unevaluated(def_id, substs) = constant.val {\n             let tcx = self.selcx.tcx().global_tcx();\n             if let Some(param_env) = self.tcx().lift_to_global(&self.param_env) {\n-                if substs.needs_infer() || substs.has_skol() {\n+                if substs.needs_infer() || substs.has_placeholders() {\n                     let identity_substs = Substs::identity_for_item(tcx, def_id);\n                     let instance = ty::Instance::resolve(tcx, param_env, def_id, identity_substs);\n                     if let Some(instance) = instance {\n@@ -1656,7 +1656,7 @@ impl<'tcx> ProjectionCache<'tcx> {\n     }\n \n     pub fn rollback_placeholder(&mut self, snapshot: &ProjectionCacheSnapshot) {\n-        self.map.partial_rollback(&snapshot.snapshot, &|k| k.ty.has_re_skol());\n+        self.map.partial_rollback(&snapshot.snapshot, &|k| k.ty.has_re_placeholders());\n     }\n \n     pub fn commit(&mut self, snapshot: &ProjectionCacheSnapshot) {"}, {"sha": "b8bf0fcc15307addcf3032c64740c3daaeda6315", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -251,6 +251,7 @@ pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'_, '_, 'tcx>, ty: Ty<'tcx>) ->\n         | ty::Projection(..)\n         | ty::Param(_)\n         | ty::Opaque(..)\n+        | ty::Placeholder(..)\n         | ty::Infer(_)\n         | ty::Bound(..)\n         | ty::Generator(..) => false,"}, {"sha": "91b2ba301c312ec7b6130f557706106cd512b9f4", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -202,7 +202,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for QueryNormalizer<'cx, 'gcx, 'tcx\n         if let ConstValue::Unevaluated(def_id, substs) = constant.val {\n             let tcx = self.infcx.tcx.global_tcx();\n             if let Some(param_env) = self.tcx().lift_to_global(&self.param_env) {\n-                if substs.needs_infer() || substs.has_skol() {\n+                if substs.needs_infer() || substs.has_placeholders() {\n                     let identity_substs = Substs::identity_for_item(tcx, def_id);\n                     let instance = ty::Instance::resolve(tcx, param_env, def_id, identity_substs);\n                     if let Some(instance) = instance {"}, {"sha": "0f59f478cb41575eb5568101e7a3dd573aa801fb", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -1726,7 +1726,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         let poly_trait_predicate = self.infcx()\n             .resolve_type_vars_if_possible(&obligation.predicate);\n         let (skol_trait_predicate, placeholder_map) = self.infcx()\n-            .replace_late_bound_regions_with_placeholders(&poly_trait_predicate);\n+            .replace_bound_vars_with_placeholders(&poly_trait_predicate);\n         debug!(\n             \"match_projection_obligation_against_definition_bounds: \\\n              skol_trait_predicate={:?} placeholder_map={:?}\",\n@@ -2470,7 +2470,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             ty::Infer(ty::TyVar(_)) => Ambiguous,\n \n             ty::UnnormalizedProjection(..)\n-            | ty::Bound(_)\n+            | ty::Placeholder(..)\n+            | ty::Bound(..)\n             | ty::Infer(ty::FreshTy(_))\n             | ty::Infer(ty::FreshIntTy(_))\n             | ty::Infer(ty::FreshFloatTy(_)) => {\n@@ -2555,7 +2556,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             }\n \n             ty::UnnormalizedProjection(..)\n-            | ty::Bound(_)\n+            | ty::Placeholder(..)\n+            | ty::Bound(..)\n             | ty::Infer(ty::FreshTy(_))\n             | ty::Infer(ty::FreshIntTy(_))\n             | ty::Infer(ty::FreshFloatTy(_)) => {\n@@ -2594,11 +2596,12 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             | ty::Char => Vec::new(),\n \n             ty::UnnormalizedProjection(..)\n+            | ty::Placeholder(..)\n             | ty::Dynamic(..)\n             | ty::Param(..)\n             | ty::Foreign(..)\n             | ty::Projection(..)\n-            | ty::Bound(_)\n+            | ty::Bound(..)\n             | ty::Infer(ty::TyVar(_))\n             | ty::Infer(ty::FreshTy(_))\n             | ty::Infer(ty::FreshIntTy(_))\n@@ -2682,7 +2685,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n                 self.in_snapshot(|this, snapshot| {\n                     let (skol_ty, placeholder_map) = this.infcx()\n-                        .replace_late_bound_regions_with_placeholders(&ty);\n+                        .replace_bound_vars_with_placeholders(&ty);\n                     let Normalized {\n                         value: normalized_ty,\n                         mut obligations,\n@@ -2916,7 +2919,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         let trait_obligations: Vec<PredicateObligation<'_>> = self.in_snapshot(|this, snapshot| {\n             let poly_trait_ref = obligation.predicate.to_poly_trait_ref();\n             let (trait_ref, placeholder_map) = this.infcx()\n-                .replace_late_bound_regions_with_placeholders(&poly_trait_ref);\n+                .replace_bound_vars_with_placeholders(&poly_trait_ref);\n             let cause = obligation.derived_cause(ImplDerivedObligation);\n             this.impl_or_trait_obligations(\n                 cause,\n@@ -3119,7 +3122,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n         self.in_snapshot(|this, snapshot| {\n             let (predicate, placeholder_map) = this.infcx()\n-                .replace_late_bound_regions_with_placeholders(&obligation.predicate);\n+                .replace_bound_vars_with_placeholders(&obligation.predicate);\n             let trait_ref = predicate.trait_ref;\n             let trait_def_id = trait_ref.def_id;\n             let substs = trait_ref.substs;\n@@ -3582,7 +3585,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         }\n \n         let (skol_obligation, placeholder_map) = self.infcx()\n-            .replace_late_bound_regions_with_placeholders(&obligation.predicate);\n+            .replace_bound_vars_with_placeholders(&obligation.predicate);\n         let skol_obligation_trait_ref = skol_obligation.trait_ref;\n \n         let impl_substs = self.infcx"}, {"sha": "36538ac0889dee908f99657931259f9cc3920027", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -324,7 +324,7 @@ impl<'tcx> TypeVisitor<'tcx> for BoundNamesCollector {\n         use syntax::symbol::Symbol;\n \n         match t.sty {\n-            ty::Bound(bound_ty) if bound_ty.index == self.binder_index => {\n+            ty::Bound(debruijn, bound_ty) if debruijn == self.binder_index => {\n                 self.types.insert(\n                     bound_ty.var.as_u32(),\n                     match bound_ty.kind {"}, {"sha": "22d5ea6e4bc938e3e682e2d6358ae511156ebbe2", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -2243,7 +2243,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     pub fn print_debug_stats(self) {\n         sty_debug_print!(\n             self,\n-            Adt, Array, Slice, RawPtr, Ref, FnDef, FnPtr,\n+            Adt, Array, Slice, RawPtr, Ref, FnDef, FnPtr, Placeholder,\n             Generator, GeneratorWitness, Dynamic, Closure, Tuple, Bound,\n             Param, Infer, UnnormalizedProjection, Projection, Opaque, Foreign);\n "}, {"sha": "90022a770c114ef8d26cadaf54ae64779bb6fd80", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -212,7 +212,8 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n             ty::Infer(ty::TyVar(_)) => \"inferred type\".into(),\n             ty::Infer(ty::IntVar(_)) => \"integral variable\".into(),\n             ty::Infer(ty::FloatVar(_)) => \"floating-point variable\".into(),\n-            ty::Bound(_) |\n+            ty::Placeholder(..) => \"placeholder type\".into(),\n+            ty::Bound(..) => \"bound type\".into(),\n             ty::Infer(ty::FreshTy(_)) => \"fresh type\".into(),\n             ty::Infer(ty::FreshIntTy(_)) => \"fresh integral type\".into(),\n             ty::Infer(ty::FreshFloatTy(_)) => \"fresh floating-point type\".into(),"}, {"sha": "8304e363815728a489cd1b5dec2d9d2cb8410dbe", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -122,7 +122,7 @@ pub fn simplify_type<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         ty::Foreign(def_id) => {\n             Some(ForeignSimplifiedType(def_id))\n         }\n-        ty::Bound(..) | ty::Infer(_) | ty::Error => None,\n+        ty::Placeholder(..) | ty::Bound(..) | ty::Infer(_) | ty::Error => None,\n     }\n }\n "}, {"sha": "1ea7e27c0dcdb2c451382c886685be8799a3b05f", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -115,8 +115,12 @@ impl FlagComputation {\n                 self.add_substs(&substs.substs);\n             }\n \n-            &ty::Bound(bound_ty) => {\n-                self.add_binder(bound_ty.index);\n+            &ty::Bound(debruijn, _) => {\n+                self.add_binder(debruijn);\n+            }\n+\n+            &ty::Placeholder(..) => {\n+                self.add_flags(TypeFlags::HAS_TY_PLACEHOLDER);\n             }\n \n             &ty::Infer(infer) => {"}, {"sha": "6f0e8d4f0268068a0290fa178a1229c6d97601c0", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -102,14 +102,14 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     fn needs_infer(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_INFER | TypeFlags::HAS_RE_INFER)\n     }\n-    fn has_skol(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_RE_SKOL)\n+    fn has_placeholders(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_RE_PLACEHOLDER | TypeFlags::HAS_TY_PLACEHOLDER)\n     }\n     fn needs_subst(&self) -> bool {\n         self.has_type_flags(TypeFlags::NEEDS_SUBST)\n     }\n-    fn has_re_skol(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_RE_SKOL)\n+    fn has_re_placeholders(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_RE_PLACEHOLDER)\n     }\n     fn has_closure_types(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_CLOSURE)\n@@ -460,8 +460,8 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for BoundVarReplacer<'a, 'gcx, 'tcx>\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         match t.sty {\n-            ty::Bound(bound_ty) => {\n-                if bound_ty.index == self.current_index {\n+            ty::Bound(debruijn, bound_ty) => {\n+                if debruijn == self.current_index {\n                     let fld_t = &mut self.fld_t;\n                     let ty = fld_t(bound_ty);\n                     ty::fold::shift_vars(\n@@ -526,7 +526,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n               T: TypeFoldable<'tcx>\n     {\n         // identity for bound types\n-        let fld_t = |bound_ty| self.mk_ty(ty::Bound(bound_ty));\n+        let fld_t = |bound_ty| self.mk_ty(ty::Bound(ty::INNERMOST, bound_ty));\n         self.replace_escaping_bound_vars(value.skip_binder(), fld_r, fld_t)\n     }\n \n@@ -722,16 +722,13 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Shifter<'a, 'gcx, 'tcx> {\n \n     fn fold_ty(&mut self, ty: ty::Ty<'tcx>) -> ty::Ty<'tcx> {\n         match ty.sty {\n-            ty::Bound(bound_ty) => {\n-                if self.amount == 0 || bound_ty.index < self.current_index {\n+            ty::Bound(debruijn, bound_ty) => {\n+                if self.amount == 0 || debruijn < self.current_index {\n                     ty\n                 } else {\n-                    let shifted = ty::BoundTy {\n-                        index: bound_ty.index.shifted_in(self.amount),\n-                        var: bound_ty.var,\n-                        kind: bound_ty.kind,\n-                    };\n-                    self.tcx.mk_ty(ty::Bound(shifted))\n+                    self.tcx.mk_ty(\n+                        ty::Bound(debruijn.shifted_in(self.amount), bound_ty)\n+                    )\n                 }\n             }\n "}, {"sha": "f6c90ab0a1ad2b04a4bb8fb49a2cf53d56b1ac0c", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -515,6 +515,7 @@ pub fn characteristic_def_id_of_type(ty: Ty<'_>) -> Option<DefId> {\n         ty::Str |\n         ty::FnPtr(_) |\n         ty::Projection(_) |\n+        ty::Placeholder(..) |\n         ty::UnnormalizedProjection(..) |\n         ty::Param(_) |\n         ty::Opaque(..) |"}, {"sha": "5406495226d798cd041e7fc90d39739991773099", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -1159,6 +1159,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n             }\n \n             ty::Bound(..) |\n+            ty::Placeholder(..) |\n             ty::UnnormalizedProjection(..) |\n             ty::GeneratorWitness(..) |\n             ty::Infer(_) => {\n@@ -1743,7 +1744,8 @@ impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n             }\n \n             ty::Projection(_) | ty::UnnormalizedProjection(..) | ty::Bound(..) |\n-            ty::Opaque(..) | ty::Param(_) | ty::Infer(_) | ty::Error => {\n+            ty::Placeholder(..) | ty::Opaque(..) | ty::Param(_) | ty::Infer(_) |\n+            ty::Error => {\n                 bug!(\"TyLayout::field_type: unexpected type `{}`\", this.ty)\n             }\n         })"}, {"sha": "b371f4532e5fac560ce59551c8264a524c0a50a1", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -432,7 +432,7 @@ bitflags! {\n         const HAS_SELF           = 1 << 1;\n         const HAS_TY_INFER       = 1 << 2;\n         const HAS_RE_INFER       = 1 << 3;\n-        const HAS_RE_SKOL        = 1 << 4;\n+        const HAS_RE_PLACEHOLDER = 1 << 4;\n \n         /// Does this have any `ReEarlyBound` regions? Used to\n         /// determine whether substitition is required, since those\n@@ -467,6 +467,8 @@ bitflags! {\n         /// if a global bound is safe to evaluate.\n         const HAS_RE_LATE_BOUND = 1 << 13;\n \n+        const HAS_TY_PLACEHOLDER = 1 << 14;\n+\n         const NEEDS_SUBST        = TypeFlags::HAS_PARAMS.bits |\n                                    TypeFlags::HAS_SELF.bits |\n                                    TypeFlags::HAS_RE_EARLY_BOUND.bits;\n@@ -478,15 +480,16 @@ bitflags! {\n                                   TypeFlags::HAS_SELF.bits |\n                                   TypeFlags::HAS_TY_INFER.bits |\n                                   TypeFlags::HAS_RE_INFER.bits |\n-                                  TypeFlags::HAS_RE_SKOL.bits |\n+                                  TypeFlags::HAS_RE_PLACEHOLDER.bits |\n                                   TypeFlags::HAS_RE_EARLY_BOUND.bits |\n                                   TypeFlags::HAS_FREE_REGIONS.bits |\n                                   TypeFlags::HAS_TY_ERR.bits |\n                                   TypeFlags::HAS_PROJECTION.bits |\n                                   TypeFlags::HAS_TY_CLOSURE.bits |\n                                   TypeFlags::HAS_FREE_LOCAL_NAMES.bits |\n                                   TypeFlags::KEEP_IN_LOCAL_TCX.bits |\n-                                  TypeFlags::HAS_RE_LATE_BOUND.bits;\n+                                  TypeFlags::HAS_RE_LATE_BOUND.bits |\n+                                  TypeFlags::HAS_TY_PLACEHOLDER.bits;\n     }\n }\n \n@@ -1587,12 +1590,27 @@ impl UniverseIndex {\n /// universe are just two regions with an unknown relationship to one\n /// another.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, PartialOrd, Ord)]\n-pub struct Placeholder {\n+pub struct Placeholder<T> {\n     pub universe: UniverseIndex,\n-    pub name: BoundRegion,\n+    pub name: T,\n+}\n+\n+impl<'a, 'gcx, T> HashStable<StableHashingContext<'a>> for Placeholder<T>\n+    where T: HashStable<StableHashingContext<'a>>\n+{\n+    fn hash_stable<W: StableHasherResult>(\n+        &self,\n+        hcx: &mut StableHashingContext<'a>,\n+        hasher: &mut StableHasher<W>\n+    ) {\n+        self.universe.hash_stable(hcx, hasher);\n+        self.name.hash_stable(hcx, hasher);\n+    }\n }\n \n-impl_stable_hash_for!(struct Placeholder { universe, name });\n+pub type PlaceholderRegion = Placeholder<BoundRegion>;\n+\n+pub type PlaceholderType = Placeholder<BoundVar>;\n \n /// When type checking, we use the `ParamEnv` to track\n /// details about the set of where-clauses that are in scope at this\n@@ -1674,7 +1692,7 @@ impl<'tcx> ParamEnv<'tcx> {\n             }\n \n             Reveal::All => {\n-                if value.has_skol()\n+                if value.has_placeholders()\n                     || value.needs_infer()\n                     || value.has_param_types()\n                     || value.has_self_ty()\n@@ -2430,6 +2448,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                 }\n             }\n \n+            Placeholder(..) |\n             Bound(..) |\n             Infer(..) => {\n                 bug!(\"unexpected type `{:?}` in sized_constraint_for_ty\","}, {"sha": "0e3fc62e4ca9aeb6f3cce9ce12c7e6476d795c32", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -155,6 +155,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             ty::FnDef(..) |       // OutlivesFunction (*)\n             ty::FnPtr(_) |        // OutlivesFunction (*)\n             ty::Dynamic(..) |       // OutlivesObject, OutlivesFragment (*)\n+            ty::Placeholder(..) |\n             ty::Bound(..) |\n             ty::Error => {\n                 // (*) Bare functions and traits are both binders. In the"}, {"sha": "d6aeb288b5cdcbe2b533f94301eef4f57fb37b93", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -746,6 +746,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::Infer(_) |\n             ty::Param(..) |\n             ty::Bound(..) |\n+            ty::Placeholder(..) |\n             ty::Never |\n             ty::Foreign(..) => return self\n         };\n@@ -792,6 +793,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::Error |\n             ty::Infer(_) |\n             ty::Bound(..) |\n+            ty::Placeholder(..) |\n             ty::Param(..) |\n             ty::Never |\n             ty::Foreign(..) => false,"}, {"sha": "3056abba95626f1fea6b1086bf0b14113d449a8c", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -201,7 +201,10 @@ pub enum TyKind<'tcx> {\n     Param(ParamTy),\n \n     /// Bound type variable, used only when preparing a trait query.\n-    Bound(BoundTy),\n+    Bound(ty::DebruijnIndex, BoundTy),\n+\n+    /// A placeholder type - universally quantified higher-ranked type.\n+    Placeholder(ty::PlaceholderType),\n \n     /// A type variable used during type checking.\n     Infer(InferTy),\n@@ -1165,7 +1168,7 @@ pub enum RegionKind {\n \n     /// A placeholder region - basically the higher-ranked version of ReFree.\n     /// Should not exist after typeck.\n-    RePlaceholder(ty::Placeholder),\n+    RePlaceholder(ty::PlaceholderRegion),\n \n     /// Empty lifetime is for data that is never accessed.\n     /// Bottom in the region lattice. We treat ReEmpty somewhat\n@@ -1242,7 +1245,6 @@ newtype_index! {\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct BoundTy {\n-    pub index: DebruijnIndex,\n     pub var: BoundVar,\n     pub kind: BoundTyKind,\n }\n@@ -1253,13 +1255,12 @@ pub enum BoundTyKind {\n     Param(InternedString),\n }\n \n-impl_stable_hash_for!(struct BoundTy { index, var, kind });\n+impl_stable_hash_for!(struct BoundTy { var, kind });\n impl_stable_hash_for!(enum self::BoundTyKind { Anon, Param(a) });\n \n-impl BoundTy {\n-    pub fn new(index: DebruijnIndex, var: BoundVar) -> Self {\n+impl From<BoundVar> for BoundTy {\n+    fn from(var: BoundVar) -> Self {\n         BoundTy {\n-            index,\n             var,\n             kind: BoundTyKind::Anon,\n         }\n@@ -1462,7 +1463,7 @@ impl RegionKind {\n             }\n             ty::RePlaceholder(..) => {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;\n-                flags = flags | TypeFlags::HAS_RE_SKOL;\n+                flags = flags | TypeFlags::HAS_RE_PLACEHOLDER;\n             }\n             ty::ReLateBound(..) => {\n                 flags = flags | TypeFlags::HAS_RE_LATE_BOUND;\n@@ -1890,6 +1891,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             Foreign(..) |\n             Param(_) |\n             Bound(..) |\n+            Placeholder(..) |\n             Infer(_) |\n             Error => {}\n         }\n@@ -1953,7 +1955,8 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n \n             ty::Infer(ty::TyVar(_)) => false,\n \n-            ty::Bound(_) |\n+            ty::Bound(..) |\n+            ty::Placeholder(..) |\n             ty::Infer(ty::FreshTy(_)) |\n             ty::Infer(ty::FreshIntTy(_)) |\n             ty::Infer(ty::FreshFloatTy(_)) =>"}, {"sha": "3425203989891f916f5c341e2beb73d8f430973b", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -190,11 +190,12 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n         Substs::for_item(tcx, def_id, |param, _| {\n             match param.kind {\n                 ty::GenericParamDefKind::Type { .. } => {\n-                    tcx.mk_ty(ty::Bound(ty::BoundTy {\n-                        index: ty::INNERMOST,\n-                        var: ty::BoundVar::from(param.index),\n-                        kind: ty::BoundTyKind::Param(param.name),\n-                    })).into()\n+                    tcx.mk_ty(\n+                        ty::Bound(ty::INNERMOST, ty::BoundTy {\n+                            var: ty::BoundVar::from(param.index),\n+                            kind: ty::BoundTyKind::Param(param.name),\n+                        })\n+                    ).into()\n                 }\n \n                 ty::GenericParamDefKind::Lifetime => {\n@@ -584,18 +585,18 @@ impl CanonicalUserSubsts<'tcx> {\n         self.value.substs.iter().zip(BoundVar::new(0)..).all(|(kind, cvar)| {\n             match kind.unpack() {\n                 UnpackedKind::Type(ty) => match ty.sty {\n-                    ty::Bound(b) => {\n+                    ty::Bound(debruijn, b) => {\n                         // We only allow a `ty::INNERMOST` index in substitutions.\n-                        assert_eq!(b.index, ty::INNERMOST);\n+                        assert_eq!(debruijn, ty::INNERMOST);\n                         cvar == b.var\n                     }\n                     _ => false,\n                 },\n \n                 UnpackedKind::Lifetime(r) => match r {\n-                    ty::ReLateBound(index, br) => {\n+                    ty::ReLateBound(debruijn, br) => {\n                         // We only allow a `ty::INNERMOST` index in substitutions.\n-                        assert_eq!(*index, ty::INNERMOST);\n+                        assert_eq!(*debruijn, ty::INNERMOST);\n                         cvar == br.assert_bound_var()\n                     }\n                     _ => false,"}, {"sha": "f0885f960516d6c7ab7301335da3a8d5aff9caee", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -952,7 +952,7 @@ fn needs_drop_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // Can refer to a type which may drop.\n         // FIXME(eddyb) check this against a ParamEnv.\n         ty::Dynamic(..) | ty::Projection(..) | ty::Param(_) | ty::Bound(..) |\n-        ty::Opaque(..) | ty::Infer(_) | ty::Error => true,\n+        ty::Placeholder(..) | ty::Opaque(..) | ty::Infer(_) | ty::Error => true,\n \n         ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n "}, {"sha": "82b95b9df603148f349d53f25ab7e0d89c0b37d5", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -82,7 +82,7 @@ fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n     match parent_ty.sty {\n         ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) |\n         ty::Str | ty::Infer(_) | ty::Param(_) | ty::Never | ty::Error |\n-        ty::Bound(..) | ty::Foreign(..) => {\n+        ty::Placeholder(..) | ty::Bound(..) | ty::Foreign(..) => {\n         }\n         ty::Array(ty, len) => {\n             push_const(stack, len);"}, {"sha": "6ae0793d9247120ee9c06793514a232902a1f8c0", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -259,6 +259,7 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n                 ty::Never |\n                 ty::Param(_) |\n                 ty::Bound(..) |\n+                ty::Placeholder(..) |\n                 ty::Foreign(..) => {\n                     // WfScalar, WfParameter, etc\n                 }"}, {"sha": "eea3b54919d5263eb3b7087ebabf2859acf99ceb", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -18,7 +18,7 @@ use ty::{Bool, Char, Adt};\n use ty::{Error, Str, Array, Slice, Float, FnDef, FnPtr};\n use ty::{Param, Bound, RawPtr, Ref, Never, Tuple};\n use ty::{Closure, Generator, GeneratorWitness, Foreign, Projection, Opaque};\n-use ty::{UnnormalizedProjection, Dynamic, Int, Uint, Infer};\n+use ty::{Placeholder, UnnormalizedProjection, Dynamic, Int, Uint, Infer};\n use ty::{self, RegionVid, Ty, TyCtxt, TypeFoldable, GenericParamCount, GenericParamDefKind};\n use util::nodemap::FxHashSet;\n \n@@ -792,7 +792,7 @@ define_print! {\n                 }\n                 ty::ReLateBound(_, br) |\n                 ty::ReFree(ty::FreeRegion { bound_region: br, .. }) |\n-                ty::RePlaceholder(ty::Placeholder { name: br, .. }) => {\n+                ty::RePlaceholder(ty::PlaceholderRegion { name: br, .. }) => {\n                     write!(f, \"{}\", br)\n                 }\n                 ty::ReScope(scope) if cx.identify_regions => {\n@@ -1110,13 +1110,13 @@ define_print! {\n                 Infer(infer_ty) => write!(f, \"{}\", infer_ty),\n                 Error => write!(f, \"[type error]\"),\n                 Param(ref param_ty) => write!(f, \"{}\", param_ty),\n-                Bound(bound_ty) => {\n+                Bound(debruijn, bound_ty) => {\n                     match bound_ty.kind {\n                         ty::BoundTyKind::Anon => {\n-                            if bound_ty.index == ty::INNERMOST {\n+                            if debruijn == ty::INNERMOST {\n                                 write!(f, \"^{}\", bound_ty.var.index())\n                             } else {\n-                                write!(f, \"^{}_{}\", bound_ty.index.index(), bound_ty.var.index())\n+                                write!(f, \"^{}_{}\", debruijn.index(), bound_ty.var.index())\n                             }\n                         }\n \n@@ -1144,6 +1144,9 @@ define_print! {\n                     data.print(f, cx)?;\n                     write!(f, \")\")\n                 }\n+                Placeholder(placeholder) => {\n+                    write!(f, \"Placeholder({:?})\", placeholder)\n+                }\n                 Opaque(def_id, substs) => {\n                     if cx.is_verbose {\n                         return write!(f, \"Opaque({:?}, {:?})\", def_id, substs);"}, {"sha": "60545f9e193d130dfda0cb7c40908aebf4c75035", "filename": "src/librustc_codegen_llvm/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -172,6 +172,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         }\n         ty::Error |\n         ty::Infer(_) |\n+        ty::Placeholder(..) |\n         ty::UnnormalizedProjection(..) |\n         ty::Projection(..) |\n         ty::Bound(..) |"}, {"sha": "82ace620c8ab2f9afbd97ef008455de948ab14b5", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -727,6 +727,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             ty::Closure(..) |\n             ty::Generator(..) |\n             ty::GeneratorWitness(..) |\n+            ty::Placeholder(..) |\n             ty::UnnormalizedProjection(..) |\n             ty::Projection(..) |\n             ty::Opaque(..) |"}, {"sha": "4ccd26bee8b8813097bb24b0a3ffc5d962cae4f2", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -2193,7 +2193,7 @@ impl<'tcx> AnnotatedBorrowFnSignature<'tcx> {\n         match ty.sty {\n             ty::TyKind::Ref(ty::RegionKind::ReLateBound(_, br), _, _)\n             | ty::TyKind::Ref(\n-                ty::RegionKind::RePlaceholder(ty::Placeholder { name: br, .. }),\n+                ty::RegionKind::RePlaceholder(ty::PlaceholderRegion { name: br, .. }),\n                 _,\n                 _,\n             ) => with_highlight_region_for_bound_region(*br, counter, || ty.to_string()),\n@@ -2207,7 +2207,7 @@ impl<'tcx> AnnotatedBorrowFnSignature<'tcx> {\n         match ty.sty {\n             ty::TyKind::Ref(region, _, _) => match region {\n                 ty::RegionKind::ReLateBound(_, br)\n-                | ty::RegionKind::RePlaceholder(ty::Placeholder { name: br, .. }) => {\n+                | ty::RegionKind::RePlaceholder(ty::PlaceholderRegion { name: br, .. }) => {\n                     with_highlight_region_for_bound_region(*br, counter, || region.to_string())\n                 }\n                 _ => region.to_string(),"}, {"sha": "6a1dc50c67a09c2bdd78f529d012d659ff27a344", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -1230,7 +1230,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         mir: &Mir<'tcx>,\n         _mir_def_id: DefId,\n         longer_fr: RegionVid,\n-        placeholder: ty::Placeholder,\n+        placeholder: ty::PlaceholderRegion,\n     ) {\n         debug!(\n             \"check_bound_universal_region(fr={:?}, placeholder={:?})\","}, {"sha": "69e2c896d33e515b3ce77fdcb4305f8333fc65ad", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -150,7 +150,7 @@ crate enum RegionElement {\n \n     /// A placeholder (e.g., instantiated from a `for<'a> fn(&'a u32)`\n     /// type).\n-    PlaceholderRegion(ty::Placeholder),\n+    PlaceholderRegion(ty::PlaceholderRegion),\n }\n \n /// When we initially compute liveness, we use a bit matrix storing\n@@ -219,17 +219,17 @@ impl<N: Idx> LivenessValues<N> {\n     }\n }\n \n-/// Maps from `ty::Placeholder` values that are used in the rest of\n+/// Maps from `ty::PlaceholderRegion` values that are used in the rest of\n /// rustc to the internal `PlaceholderIndex` values that are used in\n /// NLL.\n #[derive(Default)]\n crate struct PlaceholderIndices {\n-    to_index: FxHashMap<ty::Placeholder, PlaceholderIndex>,\n-    from_index: IndexVec<PlaceholderIndex, ty::Placeholder>,\n+    to_index: FxHashMap<ty::PlaceholderRegion, PlaceholderIndex>,\n+    from_index: IndexVec<PlaceholderIndex, ty::PlaceholderRegion>,\n }\n \n impl PlaceholderIndices {\n-    crate fn insert(&mut self, placeholder: ty::Placeholder) -> PlaceholderIndex {\n+    crate fn insert(&mut self, placeholder: ty::PlaceholderRegion) -> PlaceholderIndex {\n         let PlaceholderIndices {\n             to_index,\n             from_index,\n@@ -239,11 +239,11 @@ impl PlaceholderIndices {\n             .or_insert_with(|| from_index.push(placeholder))\n     }\n \n-    crate fn lookup_index(&self, placeholder: ty::Placeholder) -> PlaceholderIndex {\n+    crate fn lookup_index(&self, placeholder: ty::PlaceholderRegion) -> PlaceholderIndex {\n         self.to_index[&placeholder]\n     }\n \n-    crate fn lookup_placeholder(&self, placeholder: PlaceholderIndex) -> ty::Placeholder {\n+    crate fn lookup_placeholder(&self, placeholder: PlaceholderIndex) -> ty::PlaceholderRegion {\n         self.from_index[placeholder]\n     }\n \n@@ -375,7 +375,7 @@ impl<N: Idx> RegionValues<N> {\n     crate fn placeholders_contained_in<'a>(\n         &'a self,\n         r: N,\n-    ) -> impl Iterator<Item = ty::Placeholder> + 'a {\n+    ) -> impl Iterator<Item = ty::PlaceholderRegion> + 'a {\n         self.placeholders\n             .row(r)\n             .into_iter()\n@@ -432,7 +432,7 @@ impl ToElementIndex for RegionVid {\n     }\n }\n \n-impl ToElementIndex for ty::Placeholder {\n+impl ToElementIndex for ty::PlaceholderRegion {\n     fn add_to_row<N: Idx>(self, values: &mut RegionValues<N>, row: N) -> bool {\n         let index = values.placeholder_indices.lookup_index(self);\n         values.placeholders.insert(row, index)"}, {"sha": "5f64dfd931c8989a6f2c31f0bf1cc2c6fa742124", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -777,7 +777,7 @@ impl MirTypeckRegionConstraints<'tcx> {\n     fn placeholder_region(\n         &mut self,\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n-        placeholder: ty::Placeholder,\n+        placeholder: ty::PlaceholderRegion,\n     ) -> ty::Region<'tcx> {\n         let placeholder_index = self.placeholder_indices.insert(placeholder);\n         match self.placeholder_index_to_region.get(placeholder_index) {"}, {"sha": "cf4f913080783ed67d16260f11ed3b7bde160dad", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -84,7 +84,10 @@ impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, '_, 'tcx> {\n         }\n     }\n \n-    fn next_placeholder_region(&mut self, placeholder: ty::Placeholder) -> ty::Region<'tcx> {\n+    fn next_placeholder_region(\n+        &mut self,\n+        placeholder: ty::PlaceholderRegion\n+    ) -> ty::Region<'tcx> {\n         if let Some(borrowck_context) = &mut self.borrowck_context {\n             borrowck_context.constraints.placeholder_region(self.infcx, placeholder)\n         } else {"}, {"sha": "24de92e79f0e4a4f0552265fb8312f861af58516", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -378,6 +378,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n             ty::Error |\n             ty::Bound(..) |\n             ty::Infer(_) |\n+            ty::Placeholder(..) |\n             ty::UnnormalizedProjection(..) |\n             ty::Projection(..) |\n             ty::Param(_) |"}, {"sha": "25a6af284b57247a41cce6b7396c50da6b730755", "filename": "src/librustc_traits/chalk_context/mod.rs", "status": "modified", "additions": 117, "deletions": 53, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -11,7 +11,7 @@\n mod program_clauses;\n \n use chalk_engine::fallible::Fallible as ChalkEngineFallible;\n-use chalk_engine::{context, hh::HhGoal, DelayedLiteral, ExClause};\n+use chalk_engine::{context, hh::HhGoal, DelayedLiteral, Literal, ExClause};\n use rustc::infer::canonical::{\n     Canonical, CanonicalVarValues, OriginalQueryValues, QueryRegionConstraint, QueryResponse,\n };\n@@ -28,7 +28,7 @@ use rustc::traits::{\n     InEnvironment,\n };\n use rustc::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n-use rustc::ty::subst::Kind;\n+use rustc::ty::subst::{Kind, UnpackedKind};\n use rustc::ty::{self, TyCtxt};\n \n use std::fmt::{self, Debug};\n@@ -44,7 +44,7 @@ crate struct ChalkArenas<'gcx> {\n #[derive(Copy, Clone)]\n crate struct ChalkContext<'cx, 'gcx: 'cx> {\n     _arenas: ChalkArenas<'gcx>,\n-    _tcx: TyCtxt<'cx, 'gcx, 'gcx>,\n+    tcx: TyCtxt<'cx, 'gcx, 'gcx>,\n }\n \n #[derive(Copy, Clone)]\n@@ -68,7 +68,7 @@ BraceStructTypeFoldableImpl! {\n }\n \n impl context::Context for ChalkArenas<'tcx> {\n-    type CanonicalExClause = Canonical<'tcx, ExClause<Self>>;\n+    type CanonicalExClause = Canonical<'tcx, ChalkExClause<'tcx>>;\n \n     type CanonicalGoalInEnvironment = Canonical<'tcx, InEnvironment<'tcx, Goal<'tcx>>>;\n \n@@ -147,19 +147,29 @@ impl context::ContextOps<ChalkArenas<'gcx>> for ChalkContext<'cx, 'gcx> {\n     /// - the environment and goal found by substitution `S` into `arg`\n     fn instantiate_ucanonical_goal<R>(\n         &self,\n-        _arg: &Canonical<'gcx, InEnvironment<'gcx, Goal<'gcx>>>,\n-        _op: impl context::WithInstantiatedUCanonicalGoal<ChalkArenas<'gcx>, Output = R>,\n+        arg: &Canonical<'gcx, InEnvironment<'gcx, Goal<'gcx>>>,\n+        op: impl context::WithInstantiatedUCanonicalGoal<ChalkArenas<'gcx>, Output = R>,\n     ) -> R {\n-        unimplemented!()\n+        self.tcx.infer_ctxt().enter_with_canonical(DUMMY_SP, arg, |ref infcx, arg, subst| {\n+            let chalk_infcx = &mut ChalkInferenceContext {\n+                infcx,\n+            };\n+            op.with(chalk_infcx, subst, arg.environment, arg.goal)\n+        })\n     }\n \n     fn instantiate_ex_clause<R>(\n         &self,\n         _num_universes: usize,\n-        _canonical_ex_clause: &Canonical<'gcx, ChalkExClause<'gcx>>,\n-        _op: impl context::WithInstantiatedExClause<ChalkArenas<'gcx>, Output = R>,\n+        arg: &Canonical<'gcx, ChalkExClause<'gcx>>,\n+        op: impl context::WithInstantiatedExClause<ChalkArenas<'gcx>, Output = R>,\n     ) -> R {\n-        unimplemented!()\n+        self.tcx.infer_ctxt().enter_with_canonical(DUMMY_SP, &arg.upcast(), |ref infcx, arg, _| {\n+            let chalk_infcx = &mut ChalkInferenceContext {\n+                infcx,\n+            };\n+            op.with(chalk_infcx,arg)\n+        })\n     }\n \n     /// True if this solution has no region constraints.\n@@ -186,14 +196,33 @@ impl context::ContextOps<ChalkArenas<'gcx>> for ChalkContext<'cx, 'gcx> {\n     }\n \n     fn is_trivial_substitution(\n-        _u_canon: &Canonical<'gcx, InEnvironment<'gcx, Goal<'gcx>>>,\n-        _canonical_subst: &Canonical<'gcx, ConstrainedSubst<'gcx>>,\n+        u_canon: &Canonical<'gcx, InEnvironment<'gcx, Goal<'gcx>>>,\n+        canonical_subst: &Canonical<'tcx, ConstrainedSubst<'tcx>>,\n     ) -> bool {\n-        unimplemented!()\n-    }\n-\n-    fn num_universes(_: &Canonical<'gcx, InEnvironment<'gcx, Goal<'gcx>>>) -> usize {\n-        0 // FIXME\n+        let subst = &canonical_subst.value.subst;\n+        assert_eq!(u_canon.variables.len(), subst.var_values.len());\n+        subst.var_values\n+            .iter_enumerated()\n+            .all(|(cvar, kind)| match kind.unpack() {\n+                UnpackedKind::Lifetime(r) => match r {\n+                    &ty::ReLateBound(debruijn, br) => {\n+                        debug_assert_eq!(debruijn, ty::INNERMOST);\n+                        cvar == br.assert_bound_var()\n+                    }\n+                    _ => false,\n+                },\n+                UnpackedKind::Type(ty) => match ty.sty {\n+                    ty::Bound(debruijn, bound_ty) => {\n+                        debug_assert_eq!(debruijn, ty::INNERMOST);\n+                        cvar == bound_ty.var\n+                    }\n+                    _ => false,\n+                },\n+            })\n+    }\n+\n+    fn num_universes(canon: &Canonical<'gcx, InEnvironment<'gcx, Goal<'gcx>>>) -> usize {\n+        canon.max_universe.index() + 1\n     }\n \n     /// Convert a goal G *from* the canonical universes *into* our\n@@ -214,39 +243,6 @@ impl context::ContextOps<ChalkArenas<'gcx>> for ChalkContext<'cx, 'gcx> {\n     }\n }\n \n-//impl context::UCanonicalGoalInEnvironment<ChalkContext<'cx, 'gcx>>\n-//    for Canonical<'gcx, ty::ParamEnvAnd<'gcx, Goal<'gcx>>>\n-//{\n-//    fn canonical(&self) -> &Canonical<'gcx, ty::ParamEnvAnd<'gcx, Goal<'gcx>>> {\n-//        self\n-//    }\n-//\n-//    fn is_trivial_substitution(\n-//        &self,\n-//        canonical_subst: &Canonical<'tcx, ConstrainedSubst<'tcx>>,\n-//    ) -> bool {\n-//        let subst = &canonical_subst.value.subst;\n-//        assert_eq!(self.canonical.variables.len(), subst.var_values.len());\n-//        subst\n-//            .var_values\n-//            .iter_enumerated()\n-//            .all(|(cvar, kind)| match kind.unpack() {\n-//                Kind::Lifetime(r) => match r {\n-//                    ty::ReCanonical(cvar1) => cvar == cvar1,\n-//                    _ => false,\n-//                },\n-//                Kind::Type(ty) => match ty.sty {\n-//                    ty::Infer(ty::InferTy::CanonicalTy(cvar1)) => cvar == cvar1,\n-//                    _ => false,\n-//                },\n-//            })\n-//    }\n-//\n-//    fn num_universes(&self) -> usize {\n-//        0 // FIXME\n-//    }\n-//}\n-\n impl context::InferenceTable<ChalkArenas<'gcx>, ChalkArenas<'tcx>>\n     for ChalkInferenceContext<'cx, 'gcx, 'tcx>\n {\n@@ -260,7 +256,10 @@ impl context::InferenceTable<ChalkArenas<'gcx>, ChalkArenas<'tcx>>\n \n     fn into_hh_goal(&mut self, goal: Goal<'tcx>) -> ChalkHhGoal<'tcx> {\n         match *goal {\n-            GoalKind::Implies(..) => panic!(\"FIXME rust-lang-nursery/chalk#94\"),\n+            GoalKind::Implies(hypotheses, goal) => HhGoal::Implies(\n+                hypotheses.iter().cloned().collect(),\n+                goal\n+            ),\n             GoalKind::And(left, right) => HhGoal::And(left, right),\n             GoalKind::Not(subgoal) => HhGoal::Not(subgoal),\n             GoalKind::DomainGoal(d) => HhGoal::DomainGoal(d),\n@@ -338,9 +337,9 @@ impl context::UnificationOps<ChalkArenas<'gcx>, ChalkArenas<'tcx>>\n \n     fn instantiate_binders_universally(\n         &mut self,\n-        _arg: &ty::Binder<Goal<'tcx>>,\n+        arg: &ty::Binder<Goal<'tcx>>,\n     ) -> Goal<'tcx> {\n-        panic!(\"FIXME -- universal instantiation needs sgrif's branch\")\n+        self.infcx.replace_bound_vars_with_placeholders(arg).0\n     }\n \n     fn instantiate_binders_existentially(\n@@ -491,3 +490,68 @@ BraceStructLiftImpl! {\n         subst, constraints\n     }\n }\n+\n+trait Upcast<'tcx, 'gcx: 'tcx>: 'gcx {\n+    type Upcasted: 'tcx;\n+\n+    fn upcast(&self) -> Self::Upcasted;\n+}\n+\n+impl<'tcx, 'gcx: 'tcx> Upcast<'tcx, 'gcx> for DelayedLiteral<ChalkArenas<'gcx>> {\n+    type Upcasted = DelayedLiteral<ChalkArenas<'tcx>>;\n+\n+    fn upcast(&self) -> Self::Upcasted {\n+        match self {\n+            &DelayedLiteral::CannotProve(..) => DelayedLiteral::CannotProve(()),\n+            &DelayedLiteral::Negative(index) => DelayedLiteral::Negative(index),\n+            DelayedLiteral::Positive(index, subst) => DelayedLiteral::Positive(\n+                *index,\n+                subst.clone()\n+            ),\n+        }\n+    }\n+}\n+\n+impl<'tcx, 'gcx: 'tcx> Upcast<'tcx, 'gcx> for Literal<ChalkArenas<'gcx>> {\n+    type Upcasted = Literal<ChalkArenas<'tcx>>;\n+\n+    fn upcast(&self) -> Self::Upcasted {\n+        match self {\n+            &Literal::Negative(goal) => Literal::Negative(goal),\n+            &Literal::Positive(goal) => Literal::Positive(goal),\n+        }\n+    }\n+}\n+\n+impl<'tcx, 'gcx: 'tcx> Upcast<'tcx, 'gcx> for ExClause<ChalkArenas<'gcx>> {\n+    type Upcasted = ExClause<ChalkArenas<'tcx>>;\n+\n+    fn upcast(&self) -> Self::Upcasted {\n+        ExClause {\n+            subst: self.subst.clone(),\n+            delayed_literals: self.delayed_literals\n+                .iter()\n+                .map(|l| l.upcast())\n+                .collect(),\n+            constraints: self.constraints.clone(),\n+            subgoals: self.subgoals\n+                .iter()\n+                .map(|g| g.upcast())\n+                .collect(),\n+        }\n+    }\n+}\n+\n+impl<'tcx, 'gcx: 'tcx, T> Upcast<'tcx, 'gcx> for Canonical<'gcx, T>\n+    where T: Upcast<'tcx, 'gcx>\n+{\n+    type Upcasted = Canonical<'tcx, T::Upcasted>;\n+\n+    fn upcast(&self) -> Self::Upcasted {\n+        Canonical {\n+            max_universe: self.max_universe,\n+            value: self.value.upcast(),\n+            variables: self.variables,\n+        }\n+    }\n+}"}, {"sha": "b8670e5e91436c880871b1ed72d3d32218e98c4b", "filename": "src/librustc_traits/chalk_context/program_clauses.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -59,7 +59,8 @@ fn assemble_clauses_from_assoc_ty_values<'tcx>(\n \n fn program_clauses_for_raw_ptr<'tcx>(tcx: ty::TyCtxt<'_, '_, 'tcx>) -> Clauses<'tcx> {\n     let ty = ty::Bound(\n-        ty::BoundTy::new(ty::INNERMOST, ty::BoundVar::from_u32(0))\n+        ty::INNERMOST,\n+        ty::BoundVar::from_u32(0).into()\n     );\n     let ty = tcx.mk_ty(ty);\n \n@@ -88,9 +89,9 @@ fn program_clauses_for_fn_ptr<'tcx>(\n ) -> Clauses<'tcx> {\n     let inputs_and_output = tcx.mk_type_list(\n         (0..arity_and_output).into_iter()\n+            .map(|i| ty::BoundVar::from(i))\n             // DebruijnIndex(1) because we are going to inject these in a `PolyFnSig`\n-            .map(|i| ty::BoundTy::new(ty::DebruijnIndex::from(1usize), ty::BoundVar::from(i)))\n-            .map(|t| tcx.mk_ty(ty::Bound(t)))\n+            .map(|var| tcx.mk_ty(ty::Bound(ty::DebruijnIndex::from(1usize), var.into())))\n     );\n \n     let fn_sig = ty::Binder::bind(ty::FnSig {\n@@ -115,7 +116,8 @@ fn program_clauses_for_fn_ptr<'tcx>(\n \n fn program_clauses_for_slice<'tcx>(tcx: ty::TyCtxt<'_, '_, 'tcx>) -> Clauses<'tcx> {\n     let ty = ty::Bound(\n-        ty::BoundTy::new(ty::INNERMOST, ty::BoundVar::from_u32(0))\n+        ty::INNERMOST,\n+        ty::BoundVar::from_u32(0).into()\n     );\n     let ty = tcx.mk_ty(ty);\n \n@@ -151,7 +153,8 @@ fn program_clauses_for_array<'tcx>(\n     length: &'tcx ty::Const<'tcx>\n ) -> Clauses<'tcx> {\n     let ty = ty::Bound(\n-        ty::BoundTy::new(ty::INNERMOST, ty::BoundVar::from_u32(0))\n+        ty::INNERMOST,\n+        ty::BoundVar::from_u32(0).into()\n     );\n     let ty = tcx.mk_ty(ty);\n \n@@ -188,8 +191,8 @@ fn program_clauses_for_tuple<'tcx>(\n ) -> Clauses<'tcx> {\n     let type_list = tcx.mk_type_list(\n         (0..arity).into_iter()\n-            .map(|i| ty::BoundTy::new(ty::INNERMOST, ty::BoundVar::from(i)))\n-            .map(|t| tcx.mk_ty(ty::Bound(t)))\n+            .map(|i| ty::BoundVar::from(i))\n+            .map(|var| tcx.mk_ty(ty::Bound(ty::INNERMOST, var.into())))\n     );\n \n     let tuple_ty = tcx.mk_ty(ty::Tuple(type_list));\n@@ -233,7 +236,7 @@ fn program_clauses_for_ref<'tcx>(tcx: ty::TyCtxt<'_, '_, 'tcx>) -> Clauses<'tcx>\n         ty::ReLateBound(ty::INNERMOST, ty::BoundRegion::BrAnon(0))\n     );\n     let ty = tcx.mk_ty(\n-        ty::Bound(ty::BoundTy::new(ty::INNERMOST, ty::BoundVar::from_u32(1)))\n+        ty::Bound(ty::INNERMOST, ty::BoundVar::from_u32(1).into())\n     );\n \n     let ref_ty = tcx.mk_ref(region, ty::TypeAndMut {\n@@ -418,6 +421,7 @@ impl ChalkInferenceContext<'cx, 'gcx, 'tcx> {\n                     }\n \n                     ty::GeneratorWitness(..) |\n+                    ty::Placeholder(..) |\n                     ty::UnnormalizedProjection(..) |\n                     ty::Infer(..) |\n                     ty::Bound(..) |"}, {"sha": "9ab86daf654497c0ebcd9944d024d54dd00d237d", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -274,7 +274,7 @@ fn dtorck_constraint_for_ty<'a, 'gcx, 'tcx>(\n \n         ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n \n-        ty::Bound(..) | ty::Infer(..) | ty::Error => {\n+        ty::Placeholder(..) | ty::Bound(..) | ty::Infer(..) | ty::Error => {\n             // By the time this code runs, all type variables ought to\n             // be fully resolved.\n             Err(NoSolution)"}, {"sha": "519b0ac61058e75608c630b262d305f78fd0b0cf", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -55,7 +55,7 @@ impl ClauseVisitor<'set, 'a, 'tcx> {\n                     ty::ReLateBound(ty::INNERMOST, ty::BoundRegion::BrAnon(0))\n                 );\n                 let ty = self.tcx.mk_ty(\n-                    ty::Bound(ty::BoundTy::new(ty::INNERMOST, ty::BoundVar::from_u32(1)))\n+                    ty::Bound(ty::INNERMOST, ty::BoundVar::from_u32(1).into())\n                 );\n \n                 let ref_ty = self.tcx.mk_ref(region, ty::TypeAndMut {\n@@ -114,6 +114,7 @@ impl ClauseVisitor<'set, 'a, 'tcx> {\n             ty::Tuple(..) |\n             ty::Never |\n             ty::Infer(..) |\n+            ty::Placeholder(..) |\n             ty::Bound(..) => (),\n \n             ty::GeneratorWitness(..) |"}, {"sha": "2d8e5b48aac7b69e79c9d257927e77cbca169471", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -515,7 +515,8 @@ pub fn program_clauses_for_associated_type_def<'a, 'tcx>(\n         .unwrap_or(0);\n     // Add a new type param after the existing ones (`U` in the comment above).\n     let ty_var = ty::Bound(\n-        ty::BoundTy::new(ty::INNERMOST, ty::BoundVar::from_u32(offset + 1))\n+        ty::INNERMOST,\n+        ty::BoundVar::from_u32(offset + 1).into()\n     );\n \n     // `ProjectionEq(<Self as Trait<P1..Pn>>::AssocType<Pn+1..Pm> = U)`"}, {"sha": "c35aee7883f499af196f8823b863a3eed238d082", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -128,7 +128,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             ty::Opaque(def_id, substs) => Some(PointerKind::OfOpaque(def_id, substs)),\n             ty::Param(ref p) => Some(PointerKind::OfParam(p)),\n             // Insufficient type information.\n-            ty::Bound(..) | ty::Infer(_) => None,\n+            ty::Placeholder(..) | ty::Bound(..) | ty::Infer(_) => None,\n \n             ty::Bool | ty::Char | ty::Int(..) | ty::Uint(..) |\n             ty::Float(_) | ty::Array(..) | ty::GeneratorWitness(..) |"}, {"sha": "5b67116cb511e6ab63fad1c8f80111216c2181c2", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -1494,7 +1494,7 @@ impl<'tcx> Candidate<'tcx> {\n                     // `WhereClausePick`.\n                     assert!(\n                         !trait_ref.skip_binder().substs.needs_infer()\n-                            && !trait_ref.skip_binder().substs.has_skol()\n+                            && !trait_ref.skip_binder().substs.has_placeholders()\n                     );\n \n                     WhereClausePick(trait_ref.clone())"}, {"sha": "669f2bcb77c4d57fce76688f2c0cde52bb80005f", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -115,7 +115,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n \n     fn write_ty_to_tables(&mut self, hir_id: hir::HirId, ty: Ty<'gcx>) {\n         debug!(\"write_ty_to_tables({:?}, {:?})\", hir_id, ty);\n-        assert!(!ty.needs_infer() && !ty.has_skol());\n+        assert!(!ty.needs_infer() && !ty.has_placeholders());\n         self.tables.node_types_mut().insert(hir_id, ty);\n     }\n \n@@ -580,7 +580,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n         if let Some(substs) = self.fcx.tables.borrow().node_substs_opt(hir_id) {\n             let substs = self.resolve(&substs, &span);\n             debug!(\"write_substs_to_tcx({:?}, {:?})\", hir_id, substs);\n-            assert!(!substs.needs_infer() && !substs.has_skol());\n+            assert!(!substs.needs_infer() && !substs.has_placeholders());\n             self.tables.node_substs_mut().insert(hir_id, substs);\n         }\n "}, {"sha": "ed32e5a8d9b3829b66042792b7048ea0dd9e3e97", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -336,6 +336,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 // types, where we use Error as the Self type\n             }\n \n+            ty::Placeholder(..) |\n             ty::UnnormalizedProjection(..) |\n             ty::GeneratorWitness(..) |\n             ty::Bound(..) |"}, {"sha": "fd8f70b19e7ecb919165f36300d7b28f9180a63f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -2744,6 +2744,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n             ty::Closure(..) | ty::Generator(..) => Tuple(vec![]), // FIXME(pcwalton)\n \n             ty::Bound(..) => panic!(\"Bound\"),\n+            ty::Placeholder(..) => panic!(\"Placeholder\"),\n             ty::UnnormalizedProjection(..) => panic!(\"UnnormalizedProjection\"),\n             ty::GeneratorWitness(..) => panic!(\"GeneratorWitness\"),\n             ty::Infer(..) => panic!(\"Infer\"),"}, {"sha": "10e91e71fe284f266f23867fe9df932e231ba00c", "filename": "src/test/run-pass/rustc-rust-log.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Ftest%2Frun-pass%2Frustc-rust-log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Ftest%2Frun-pass%2Frustc-rust-log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frustc-rust-log.rs?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -16,6 +16,7 @@\n //\n // dont-check-compiler-stdout\n // dont-check-compiler-stderr\n+// compile-flags: --error-format human\n \n // rustc-env:RUST_LOG=debug\n "}, {"sha": "c963625c961e8c462c2595aa8a0351232b38aeec", "filename": "src/test/ui/nll/user-annotations/dump-fn-method.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-fn-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abe19a730576cf7ead1bf7995271b53d551ea37f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-fn-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-fn-method.stderr?ref=abe19a730576cf7ead1bf7995271b53d551ea37f", "patch": "@@ -4,7 +4,7 @@ error: user substs: Canonical { max_universe: U0, variables: [], value: UserSubs\n LL |     let x = foo::<u32>; //~ ERROR [u32]\n    |             ^^^^^^^^^^\n \n-error: user substs: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General) }, CanonicalVarInfo { kind: Ty(General) }], value: UserSubsts { substs: [^0, u32, ^1], user_self_ty: None } }\n+error: user substs: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }, CanonicalVarInfo { kind: Ty(General(U0)) }], value: UserSubsts { substs: [^0, u32, ^1], user_self_ty: None } }\n   --> $DIR/dump-fn-method.rs:42:13\n    |\n LL |     let x = <_ as Bazoom<u32>>::method::<_>; //~ ERROR [^0, u32, ^1]\n@@ -16,7 +16,7 @@ error: user substs: Canonical { max_universe: U0, variables: [], value: UserSubs\n LL |     let x = <u8 as Bazoom<u16>>::method::<u32>; //~ ERROR [u8, u16, u32]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: user substs: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General) }, CanonicalVarInfo { kind: Ty(General) }], value: UserSubsts { substs: [^0, ^1, u32], user_self_ty: None } }\n+error: user substs: Canonical { max_universe: U1, variables: [CanonicalVarInfo { kind: Ty(General(U1)) }, CanonicalVarInfo { kind: Ty(General(U1)) }], value: UserSubsts { substs: [^0, ^1, u32], user_self_ty: None } }\n   --> $DIR/dump-fn-method.rs:54:5\n    |\n LL |     y.method::<u32>(44, 66); //~ ERROR [^0, ^1, u32]"}]}