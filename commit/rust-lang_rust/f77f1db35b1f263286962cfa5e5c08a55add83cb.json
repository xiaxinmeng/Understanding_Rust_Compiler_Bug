{"sha": "f77f1db35b1f263286962cfa5e5c08a55add83cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3N2YxZGIzNWIxZjI2MzI4Njk2MmNmYTVlNWMwOGE1NWFkZDgzY2I=", "commit": {"author": {"name": "Korrat", "email": "korrat@protonmail.com", "date": "2020-10-24T14:48:10Z"}, "committer": {"name": "Korrat", "email": "korrat@protonmail.com", "date": "2020-12-09T17:00:09Z"}, "message": "Add a lint for maps with zero-sized values\n\nCo-authored-by: Eduardo Broto <ebroto@tutanota.com>", "tree": {"sha": "24ca60338c6e63a8bc9022bd6d827a99a5fb6299", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24ca60338c6e63a8bc9022bd6d827a99a5fb6299"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f77f1db35b1f263286962cfa5e5c08a55add83cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f77f1db35b1f263286962cfa5e5c08a55add83cb", "html_url": "https://github.com/rust-lang/rust/commit/f77f1db35b1f263286962cfa5e5c08a55add83cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f77f1db35b1f263286962cfa5e5c08a55add83cb/comments", "author": {"login": "korrat", "id": 22543341, "node_id": "MDQ6VXNlcjIyNTQzMzQx", "avatar_url": "https://avatars.githubusercontent.com/u/22543341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/korrat", "html_url": "https://github.com/korrat", "followers_url": "https://api.github.com/users/korrat/followers", "following_url": "https://api.github.com/users/korrat/following{/other_user}", "gists_url": "https://api.github.com/users/korrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/korrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/korrat/subscriptions", "organizations_url": "https://api.github.com/users/korrat/orgs", "repos_url": "https://api.github.com/users/korrat/repos", "events_url": "https://api.github.com/users/korrat/events{/privacy}", "received_events_url": "https://api.github.com/users/korrat/received_events", "type": "User", "site_admin": false}, "committer": {"login": "korrat", "id": 22543341, "node_id": "MDQ6VXNlcjIyNTQzMzQx", "avatar_url": "https://avatars.githubusercontent.com/u/22543341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/korrat", "html_url": "https://github.com/korrat", "followers_url": "https://api.github.com/users/korrat/followers", "following_url": "https://api.github.com/users/korrat/following{/other_user}", "gists_url": "https://api.github.com/users/korrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/korrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/korrat/subscriptions", "organizations_url": "https://api.github.com/users/korrat/orgs", "repos_url": "https://api.github.com/users/korrat/repos", "events_url": "https://api.github.com/users/korrat/events{/privacy}", "received_events_url": "https://api.github.com/users/korrat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2d99259a420fc44cff11bbf69b38ec915f32e08", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2d99259a420fc44cff11bbf69b38ec915f32e08", "html_url": "https://github.com/rust-lang/rust/commit/a2d99259a420fc44cff11bbf69b38ec915f32e08"}], "stats": {"total": 437, "additions": 437, "deletions": 0}, "files": [{"sha": "af3b1c1db2aedb79bcb117754f4e1f82fb4d2298", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f77f1db35b1f263286962cfa5e5c08a55add83cb/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/f77f1db35b1f263286962cfa5e5c08a55add83cb/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=f77f1db35b1f263286962cfa5e5c08a55add83cb", "patch": "@@ -2171,5 +2171,6 @@ Released 2018-09-13\n [`zero_divided_by_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_divided_by_zero\n [`zero_prefixed_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal\n [`zero_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr\n+[`zero_sized_map_values`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_sized_map_values\n [`zst_offset`]: https://rust-lang.github.io/rust-clippy/master/index.html#zst_offset\n <!-- end autogenerated links to lint list -->"}, {"sha": "5fca088c9b405b564daddb1925a4ad1f75440bea", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f77f1db35b1f263286962cfa5e5c08a55add83cb/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77f1db35b1f263286962cfa5e5c08a55add83cb/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f77f1db35b1f263286962cfa5e5c08a55add83cb", "patch": "@@ -345,6 +345,7 @@ mod wildcard_dependencies;\n mod wildcard_imports;\n mod write;\n mod zero_div_zero;\n+mod zero_sized_map_values;\n // end lints modules, do not remove this comment, it\u2019s used in `update_lints`\n \n pub use crate::utils::conf::Conf;\n@@ -944,6 +945,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &write::WRITE_LITERAL,\n         &write::WRITE_WITH_NEWLINE,\n         &zero_div_zero::ZERO_DIVIDED_BY_ZERO,\n+        &zero_sized_map_values::ZERO_SIZED_MAP_VALUES,\n     ]);\n     // end register lints, do not remove this comment, it\u2019s used in `update_lints`\n \n@@ -1204,6 +1206,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box undropped_manually_drops::UndroppedManuallyDrops);\n     store.register_late_pass(|| box strings::StrToString);\n     store.register_late_pass(|| box strings::StringToString);\n+    store.register_late_pass(|| box zero_sized_map_values::ZeroSizedMapValues);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1336,6 +1339,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&unused_self::UNUSED_SELF),\n         LintId::of(&wildcard_imports::ENUM_GLOB_USE),\n         LintId::of(&wildcard_imports::WILDCARD_IMPORTS),\n+        LintId::of(&zero_sized_map_values::ZERO_SIZED_MAP_VALUES),\n     ]);\n \n     #[cfg(feature = \"internal-lints\")]"}, {"sha": "1d5fa8d06a996092ba5ff39d066a68fb40c319c2", "filename": "clippy_lints/src/zero_sized_map_values.rs", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/f77f1db35b1f263286962cfa5e5c08a55add83cb/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77f1db35b1f263286962cfa5e5c08a55add83cb/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs?ref=f77f1db35b1f263286962cfa5e5c08a55add83cb", "patch": "@@ -0,0 +1,82 @@\n+use if_chain::if_chain;\n+use rustc_hir::{self as hir, HirId, ItemKind, Node};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::{Adt, Ty};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_target::abi::LayoutOf as _;\n+use rustc_typeck::hir_ty_to_ty;\n+\n+use crate::utils::{is_type_diagnostic_item, match_type, paths, span_lint_and_help};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for maps with zero-sized value types anywhere in the code.\n+    ///\n+    /// **Why is this bad?** Since there is only a single value for a zero-sized type, a map\n+    /// containing zero sized values is effectively a set. Using a set in that case improves\n+    /// readability and communicates intent more clearly.\n+    ///\n+    /// **Known problems:**\n+    /// * A zero-sized type cannot be recovered later if it contains private fields.\n+    /// * This lints the signature of public items\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// # use std::collections::HashMap;\n+    /// fn unique_words(text: &str) -> HashMap<&str, ()> {\n+    ///     todo!();\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::collections::HashSet;\n+    /// fn unique_words(text: &str) -> HashSet<&str> {\n+    ///     todo!();\n+    /// }\n+    /// ```\n+    pub ZERO_SIZED_MAP_VALUES,\n+    pedantic,\n+    \"usage of map with zero-sized value type\"\n+}\n+\n+declare_lint_pass!(ZeroSizedMapValues => [ZERO_SIZED_MAP_VALUES]);\n+\n+impl LateLintPass<'_> for ZeroSizedMapValues {\n+    fn check_ty(&mut self, cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>) {\n+        if_chain! {\n+            if !hir_ty.span.from_expansion();\n+            if !in_trait_impl(cx, hir_ty.hir_id);\n+            let ty = ty_from_hir_ty(cx, hir_ty);\n+            if is_type_diagnostic_item(cx, ty, sym!(hashmap_type)) || match_type(cx, ty, &paths::BTREEMAP);\n+            if let Adt(_, ref substs) = ty.kind();\n+            let ty = substs.type_at(1);\n+            if let Ok(layout) = cx.layout_of(ty);\n+            if layout.is_zst();\n+            then {\n+                span_lint_and_help(cx, ZERO_SIZED_MAP_VALUES, hir_ty.span, \"map with zero-sized value type\", None, \"consider using a set instead\");\n+            }\n+        }\n+    }\n+}\n+\n+fn in_trait_impl(cx: &LateContext<'_>, hir_id: HirId) -> bool {\n+    let parent_id = cx.tcx.hir().get_parent_item(hir_id);\n+    if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_item(parent_id)) {\n+        if let ItemKind::Impl { of_trait: Some(_), .. } = item.kind {\n+            return true;\n+        }\n+    }\n+    false\n+}\n+\n+fn ty_from_hir_ty<'tcx>(cx: &LateContext<'tcx>, hir_ty: &hir::Ty<'_>) -> Ty<'tcx> {\n+    cx.maybe_typeck_results()\n+        .and_then(|results| {\n+            if results.hir_owner == hir_ty.hir_id.owner {\n+                results.node_type_opt(hir_ty.hir_id)\n+            } else {\n+                None\n+            }\n+        })\n+        .unwrap_or_else(|| hir_ty_to_ty(cx.tcx, hir_ty))\n+}"}, {"sha": "5cd254787d834b387c6ea1d1675c2cfa115b43b6", "filename": "tests/ui/zero_sized_btreemap_values.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f77f1db35b1f263286962cfa5e5c08a55add83cb/tests%2Fui%2Fzero_sized_btreemap_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77f1db35b1f263286962cfa5e5c08a55add83cb/tests%2Fui%2Fzero_sized_btreemap_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_sized_btreemap_values.rs?ref=f77f1db35b1f263286962cfa5e5c08a55add83cb", "patch": "@@ -0,0 +1,68 @@\n+#![warn(clippy::zero_sized_map_values)]\n+use std::collections::BTreeMap;\n+\n+const CONST_OK: Option<BTreeMap<String, usize>> = None;\n+const CONST_NOT_OK: Option<BTreeMap<String, ()>> = None;\n+\n+static STATIC_OK: Option<BTreeMap<String, usize>> = None;\n+static STATIC_NOT_OK: Option<BTreeMap<String, ()>> = None;\n+\n+type OkMap = BTreeMap<String, usize>;\n+type NotOkMap = BTreeMap<String, ()>;\n+\n+enum TestEnum {\n+    Ok(BTreeMap<String, usize>),\n+    NotOk(BTreeMap<String, ()>),\n+}\n+\n+struct Test {\n+    ok: BTreeMap<String, usize>,\n+    not_ok: BTreeMap<String, ()>,\n+\n+    also_not_ok: Vec<BTreeMap<usize, ()>>,\n+}\n+\n+trait TestTrait {\n+    type Output;\n+\n+    fn produce_output() -> Self::Output;\n+\n+    fn weird_map(&self, map: BTreeMap<usize, ()>);\n+}\n+\n+impl Test {\n+    fn ok(&self) -> BTreeMap<String, usize> {\n+        todo!()\n+    }\n+\n+    fn not_ok(&self) -> BTreeMap<String, ()> {\n+        todo!()\n+    }\n+}\n+\n+impl TestTrait for Test {\n+    type Output = BTreeMap<String, ()>;\n+\n+    fn produce_output() -> Self::Output {\n+        todo!();\n+    }\n+\n+    fn weird_map(&self, map: BTreeMap<usize, ()>) {\n+        todo!();\n+    }\n+}\n+\n+fn test(map: BTreeMap<String, ()>, key: &str) -> BTreeMap<String, ()> {\n+    todo!();\n+}\n+\n+fn test2(map: BTreeMap<String, usize>, key: &str) -> BTreeMap<String, usize> {\n+    todo!();\n+}\n+\n+fn main() {\n+    let _: BTreeMap<String, ()> = BTreeMap::new();\n+    let _: BTreeMap<String, usize> = BTreeMap::new();\n+\n+    let _: BTreeMap<_, _> = std::iter::empty::<(String, ())>().collect();\n+}"}, {"sha": "334d921a9af3fee977cb2c47d422056b4de385af", "filename": "tests/ui/zero_sized_btreemap_values.stderr", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/f77f1db35b1f263286962cfa5e5c08a55add83cb/tests%2Fui%2Fzero_sized_btreemap_values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f77f1db35b1f263286962cfa5e5c08a55add83cb/tests%2Fui%2Fzero_sized_btreemap_values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_sized_btreemap_values.stderr?ref=f77f1db35b1f263286962cfa5e5c08a55add83cb", "patch": "@@ -0,0 +1,107 @@\n+error: map with zero-sized value type\n+  --> $DIR/zero_sized_btreemap_values.rs:5:28\n+   |\n+LL | const CONST_NOT_OK: Option<BTreeMap<String, ()>> = None;\n+   |                            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::zero-sized-map-values` implied by `-D warnings`\n+   = help: consider using a set instead\n+\n+error: map with zero-sized value type\n+  --> $DIR/zero_sized_btreemap_values.rs:8:30\n+   |\n+LL | static STATIC_NOT_OK: Option<BTreeMap<String, ()>> = None;\n+   |                              ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a set instead\n+\n+error: map with zero-sized value type\n+  --> $DIR/zero_sized_btreemap_values.rs:11:17\n+   |\n+LL | type NotOkMap = BTreeMap<String, ()>;\n+   |                 ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a set instead\n+\n+error: map with zero-sized value type\n+  --> $DIR/zero_sized_btreemap_values.rs:15:11\n+   |\n+LL |     NotOk(BTreeMap<String, ()>),\n+   |           ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a set instead\n+\n+error: map with zero-sized value type\n+  --> $DIR/zero_sized_btreemap_values.rs:20:13\n+   |\n+LL |     not_ok: BTreeMap<String, ()>,\n+   |             ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a set instead\n+\n+error: map with zero-sized value type\n+  --> $DIR/zero_sized_btreemap_values.rs:22:22\n+   |\n+LL |     also_not_ok: Vec<BTreeMap<usize, ()>>,\n+   |                      ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a set instead\n+\n+error: map with zero-sized value type\n+  --> $DIR/zero_sized_btreemap_values.rs:30:30\n+   |\n+LL |     fn weird_map(&self, map: BTreeMap<usize, ()>);\n+   |                              ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a set instead\n+\n+error: map with zero-sized value type\n+  --> $DIR/zero_sized_btreemap_values.rs:38:25\n+   |\n+LL |     fn not_ok(&self) -> BTreeMap<String, ()> {\n+   |                         ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a set instead\n+\n+error: map with zero-sized value type\n+  --> $DIR/zero_sized_btreemap_values.rs:55:14\n+   |\n+LL | fn test(map: BTreeMap<String, ()>, key: &str) -> BTreeMap<String, ()> {\n+   |              ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a set instead\n+\n+error: map with zero-sized value type\n+  --> $DIR/zero_sized_btreemap_values.rs:55:50\n+   |\n+LL | fn test(map: BTreeMap<String, ()>, key: &str) -> BTreeMap<String, ()> {\n+   |                                                  ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a set instead\n+\n+error: map with zero-sized value type\n+  --> $DIR/zero_sized_btreemap_values.rs:64:35\n+   |\n+LL |     let _: BTreeMap<String, ()> = BTreeMap::new();\n+   |                                   ^^^^^^^^^^^^^\n+   |\n+   = help: consider using a set instead\n+\n+error: map with zero-sized value type\n+  --> $DIR/zero_sized_btreemap_values.rs:64:12\n+   |\n+LL |     let _: BTreeMap<String, ()> = BTreeMap::new();\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a set instead\n+\n+error: map with zero-sized value type\n+  --> $DIR/zero_sized_btreemap_values.rs:67:12\n+   |\n+LL |     let _: BTreeMap<_, _> = std::iter::empty::<(String, ())>().collect();\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a set instead\n+\n+error: aborting due to 13 previous errors\n+"}, {"sha": "a1608d863fb52cb4c05e336ed40d323387554784", "filename": "tests/ui/zero_sized_hashmap_values.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f77f1db35b1f263286962cfa5e5c08a55add83cb/tests%2Fui%2Fzero_sized_hashmap_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77f1db35b1f263286962cfa5e5c08a55add83cb/tests%2Fui%2Fzero_sized_hashmap_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_sized_hashmap_values.rs?ref=f77f1db35b1f263286962cfa5e5c08a55add83cb", "patch": "@@ -0,0 +1,68 @@\n+#![warn(clippy::zero_sized_map_values)]\n+use std::collections::HashMap;\n+\n+const CONST_OK: Option<HashMap<String, usize>> = None;\n+const CONST_NOT_OK: Option<HashMap<String, ()>> = None;\n+\n+static STATIC_OK: Option<HashMap<String, usize>> = None;\n+static STATIC_NOT_OK: Option<HashMap<String, ()>> = None;\n+\n+type OkMap = HashMap<String, usize>;\n+type NotOkMap = HashMap<String, ()>;\n+\n+enum TestEnum {\n+    Ok(HashMap<String, usize>),\n+    NotOk(HashMap<String, ()>),\n+}\n+\n+struct Test {\n+    ok: HashMap<String, usize>,\n+    not_ok: HashMap<String, ()>,\n+\n+    also_not_ok: Vec<HashMap<usize, ()>>,\n+}\n+\n+trait TestTrait {\n+    type Output;\n+\n+    fn produce_output() -> Self::Output;\n+\n+    fn weird_map(&self, map: HashMap<usize, ()>);\n+}\n+\n+impl Test {\n+    fn ok(&self) -> HashMap<String, usize> {\n+        todo!()\n+    }\n+\n+    fn not_ok(&self) -> HashMap<String, ()> {\n+        todo!()\n+    }\n+}\n+\n+impl TestTrait for Test {\n+    type Output = HashMap<String, ()>;\n+\n+    fn produce_output() -> Self::Output {\n+        todo!();\n+    }\n+\n+    fn weird_map(&self, map: HashMap<usize, ()>) {\n+        todo!();\n+    }\n+}\n+\n+fn test(map: HashMap<String, ()>, key: &str) -> HashMap<String, ()> {\n+    todo!();\n+}\n+\n+fn test2(map: HashMap<String, usize>, key: &str) -> HashMap<String, usize> {\n+    todo!();\n+}\n+\n+fn main() {\n+    let _: HashMap<String, ()> = HashMap::new();\n+    let _: HashMap<String, usize> = HashMap::new();\n+\n+    let _: HashMap<_, _> = std::iter::empty::<(String, ())>().collect();\n+}"}, {"sha": "43987b3d01d16a408cdf19f5a9dd405f75dc276d", "filename": "tests/ui/zero_sized_hashmap_values.stderr", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/f77f1db35b1f263286962cfa5e5c08a55add83cb/tests%2Fui%2Fzero_sized_hashmap_values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f77f1db35b1f263286962cfa5e5c08a55add83cb/tests%2Fui%2Fzero_sized_hashmap_values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_sized_hashmap_values.stderr?ref=f77f1db35b1f263286962cfa5e5c08a55add83cb", "patch": "@@ -0,0 +1,107 @@\n+error: map with zero-sized value type\n+  --> $DIR/zero_sized_hashmap_values.rs:5:28\n+   |\n+LL | const CONST_NOT_OK: Option<HashMap<String, ()>> = None;\n+   |                            ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::zero-sized-map-values` implied by `-D warnings`\n+   = help: consider using a set instead\n+\n+error: map with zero-sized value type\n+  --> $DIR/zero_sized_hashmap_values.rs:8:30\n+   |\n+LL | static STATIC_NOT_OK: Option<HashMap<String, ()>> = None;\n+   |                              ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a set instead\n+\n+error: map with zero-sized value type\n+  --> $DIR/zero_sized_hashmap_values.rs:11:17\n+   |\n+LL | type NotOkMap = HashMap<String, ()>;\n+   |                 ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a set instead\n+\n+error: map with zero-sized value type\n+  --> $DIR/zero_sized_hashmap_values.rs:15:11\n+   |\n+LL |     NotOk(HashMap<String, ()>),\n+   |           ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a set instead\n+\n+error: map with zero-sized value type\n+  --> $DIR/zero_sized_hashmap_values.rs:20:13\n+   |\n+LL |     not_ok: HashMap<String, ()>,\n+   |             ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a set instead\n+\n+error: map with zero-sized value type\n+  --> $DIR/zero_sized_hashmap_values.rs:22:22\n+   |\n+LL |     also_not_ok: Vec<HashMap<usize, ()>>,\n+   |                      ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a set instead\n+\n+error: map with zero-sized value type\n+  --> $DIR/zero_sized_hashmap_values.rs:30:30\n+   |\n+LL |     fn weird_map(&self, map: HashMap<usize, ()>);\n+   |                              ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a set instead\n+\n+error: map with zero-sized value type\n+  --> $DIR/zero_sized_hashmap_values.rs:38:25\n+   |\n+LL |     fn not_ok(&self) -> HashMap<String, ()> {\n+   |                         ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a set instead\n+\n+error: map with zero-sized value type\n+  --> $DIR/zero_sized_hashmap_values.rs:55:14\n+   |\n+LL | fn test(map: HashMap<String, ()>, key: &str) -> HashMap<String, ()> {\n+   |              ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a set instead\n+\n+error: map with zero-sized value type\n+  --> $DIR/zero_sized_hashmap_values.rs:55:49\n+   |\n+LL | fn test(map: HashMap<String, ()>, key: &str) -> HashMap<String, ()> {\n+   |                                                 ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a set instead\n+\n+error: map with zero-sized value type\n+  --> $DIR/zero_sized_hashmap_values.rs:64:34\n+   |\n+LL |     let _: HashMap<String, ()> = HashMap::new();\n+   |                                  ^^^^^^^^^^^^\n+   |\n+   = help: consider using a set instead\n+\n+error: map with zero-sized value type\n+  --> $DIR/zero_sized_hashmap_values.rs:64:12\n+   |\n+LL |     let _: HashMap<String, ()> = HashMap::new();\n+   |            ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a set instead\n+\n+error: map with zero-sized value type\n+  --> $DIR/zero_sized_hashmap_values.rs:67:12\n+   |\n+LL |     let _: HashMap<_, _> = std::iter::empty::<(String, ())>().collect();\n+   |            ^^^^^^^^^^^^^\n+   |\n+   = help: consider using a set instead\n+\n+error: aborting due to 13 previous errors\n+"}]}