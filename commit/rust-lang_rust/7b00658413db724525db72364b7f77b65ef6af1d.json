{"sha": "7b00658413db724525db72364b7f77b65ef6af1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMDA2NTg0MTNkYjcyNDUyNWRiNzIzNjRiN2Y3N2I2NWVmNmFmMWQ=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2015-05-02T17:55:41Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2015-05-15T15:01:55Z"}, "message": "syntax: Add unquoting ast::{Generics,WhereClause}", "tree": {"sha": "193d68d3d1531bf40c92b0ddb70083544ad6d966", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/193d68d3d1531bf40c92b0ddb70083544ad6d966"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b00658413db724525db72364b7f77b65ef6af1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b00658413db724525db72364b7f77b65ef6af1d", "html_url": "https://github.com/rust-lang/rust/commit/7b00658413db724525db72364b7f77b65ef6af1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b00658413db724525db72364b7f77b65ef6af1d/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eef6b4a37b9b7a1753bb91016c36435ad66309dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/eef6b4a37b9b7a1753bb91016c36435ad66309dc", "html_url": "https://github.com/rust-lang/rust/commit/eef6b4a37b9b7a1753bb91016c36435ad66309dc"}], "stats": {"total": 51, "additions": 38, "deletions": 13}, "files": [{"sha": "39ddafffaece88c5a36c515ff23a60ad35bf297e", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b00658413db724525db72364b7f77b65ef6af1d/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b00658413db724525db72364b7f77b65ef6af1d/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=7b00658413db724525db72364b7f77b65ef6af1d", "patch": "@@ -94,6 +94,18 @@ pub mod rt {\n         }\n     }\n \n+    impl ToTokens for ast::Generics {\n+        fn to_tokens(&self, _cx: &ExtCtxt) -> Vec<TokenTree> {\n+            vec![ast::TtToken(DUMMY_SP, token::Interpolated(token::NtGenerics(self.clone())))]\n+        }\n+    }\n+\n+    impl ToTokens for ast::WhereClause {\n+        fn to_tokens(&self, _cx: &ExtCtxt) -> Vec<TokenTree> {\n+            vec![ast::TtToken(DUMMY_SP, token::Interpolated(token::NtWhereClause(self.clone())))]\n+        }\n+    }\n+\n     impl ToTokens for P<ast::Item> {\n         fn to_tokens(&self, _cx: &ExtCtxt) -> Vec<TokenTree> {\n             vec![ast::TtToken(self.span, token::Interpolated(token::NtItem(self.clone())))]"}, {"sha": "4bf15f509a048e1f34b833228ba10da97cd43fa2", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b00658413db724525db72364b7f77b65ef6af1d/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b00658413db724525db72364b7f77b65ef6af1d/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=7b00658413db724525db72364b7f77b65ef6af1d", "patch": "@@ -689,6 +689,9 @@ pub fn noop_fold_interpolated<T: Folder>(nt: token::Nonterminal, fld: &mut T)\n         token::NtTraitItem(arm) =>\n             token::NtTraitItem(fld.fold_trait_item(arm)\n                                .expect_one(\"expected fold to produce exactly one item\")),\n+        token::NtGenerics(generics) => token::NtGenerics(fld.fold_generics(generics)),\n+        token::NtWhereClause(where_clause) =>\n+            token::NtWhereClause(fld.fold_where_clause(where_clause)),\n     }\n }\n "}, {"sha": "9bf6fa88ba5531d48e61fce29a2fb34548a9f8c9", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b00658413db724525db72364b7f77b65ef6af1d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b00658413db724525db72364b7f77b65ef6af1d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7b00658413db724525db72364b7f77b65ef6af1d", "patch": "@@ -3808,6 +3808,8 @@ impl<'a> Parser<'a> {\n     ///                  | ( < lifetimes , typaramseq ( , )? > )\n     /// where   typaramseq = ( typaram ) | ( typaram , typaramseq )\n     pub fn parse_generics(&mut self) -> PResult<ast::Generics> {\n+        maybe_whole!(self, NtGenerics);\n+\n         if try!(self.eat(&token::Lt) ){\n             let lifetime_defs = try!(self.parse_lifetime_defs());\n             let mut seen_default = false;\n@@ -3928,6 +3930,8 @@ impl<'a> Parser<'a> {\n     /// where T : Trait<U, V> + 'b, 'a : 'b\n     /// ```\n     pub fn parse_where_clause(&mut self) -> PResult<ast::WhereClause> {\n+        maybe_whole!(self, NtWhereClause);\n+\n         let mut where_clause = WhereClause {\n             id: ast::DUMMY_NODE_ID,\n             predicates: Vec::new(),"}, {"sha": "832fec40199b8ae9be51f7ed59abf0368c50b08a", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b00658413db724525db72364b7f77b65ef6af1d/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b00658413db724525db72364b7f77b65ef6af1d/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=7b00658413db724525db72364b7f77b65ef6af1d", "patch": "@@ -385,6 +385,8 @@ pub enum Nonterminal {\n     NtArm(ast::Arm),\n     NtImplItem(P<ast::ImplItem>),\n     NtTraitItem(P<ast::TraitItem>),\n+    NtGenerics(ast::Generics),\n+    NtWhereClause(ast::WhereClause),\n }\n \n impl fmt::Debug for Nonterminal {\n@@ -403,6 +405,8 @@ impl fmt::Debug for Nonterminal {\n             NtArm(..) => f.pad(\"NtArm(..)\"),\n             NtImplItem(..) => f.pad(\"NtImplItem(..)\"),\n             NtTraitItem(..) => f.pad(\"NtTraitItem(..)\"),\n+            NtGenerics(..) => f.pad(\"NtGenerics(..)\"),\n+            NtWhereClause(..) => f.pad(\"NtWhereClause(..)\"),\n         }\n     }\n }"}, {"sha": "b71d65a8fb0c5dcafdd173deefdf6e847ac6dd6c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7b00658413db724525db72364b7f77b65ef6af1d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b00658413db724525db72364b7f77b65ef6af1d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=7b00658413db724525db72364b7f77b65ef6af1d", "patch": "@@ -287,19 +287,21 @@ pub fn token_to_string(tok: &Token) -> String {\n         token::SpecialVarNt(var)    => format!(\"${}\", var.as_str()),\n \n         token::Interpolated(ref nt) => match *nt {\n-            token::NtExpr(ref e)      => expr_to_string(&**e),\n-            token::NtMeta(ref e)      => meta_item_to_string(&**e),\n-            token::NtTy(ref e)        => ty_to_string(&**e),\n-            token::NtPath(ref e)      => path_to_string(&**e),\n-            token::NtItem(ref e)      => item_to_string(&**e),\n-            token::NtBlock(ref e)     => block_to_string(&**e),\n-            token::NtStmt(ref e)      => stmt_to_string(&**e),\n-            token::NtPat(ref e)       => pat_to_string(&**e),\n-            token::NtIdent(ref e)     => ident_to_string(&**e),\n-            token::NtTT(ref e)        => tt_to_string(&**e),\n-            token::NtArm(ref e)       => arm_to_string(&**e),\n-            token::NtImplItem(ref e)  => impl_item_to_string(&**e),\n-            token::NtTraitItem(ref e) => trait_item_to_string(&**e),\n+            token::NtExpr(ref e)        => expr_to_string(&**e),\n+            token::NtMeta(ref e)        => meta_item_to_string(&**e),\n+            token::NtTy(ref e)          => ty_to_string(&**e),\n+            token::NtPath(ref e)        => path_to_string(&**e),\n+            token::NtItem(ref e)        => item_to_string(&**e),\n+            token::NtBlock(ref e)       => block_to_string(&**e),\n+            token::NtStmt(ref e)        => stmt_to_string(&**e),\n+            token::NtPat(ref e)         => pat_to_string(&**e),\n+            token::NtIdent(ref e, _)    => ident_to_string(&**e),\n+            token::NtTT(ref e)          => tt_to_string(&**e),\n+            token::NtArm(ref e)         => arm_to_string(&*e),\n+            token::NtImplItem(ref e)    => impl_item_to_string(&**e),\n+            token::NtTraitItem(ref e)   => trait_item_to_string(&**e),\n+            token::NtGenerics(ref e)    => generics_to_string(&*e),\n+            token::NtWhereClause(ref e) => where_clause_to_string(&*e),\n         }\n     }\n }"}]}