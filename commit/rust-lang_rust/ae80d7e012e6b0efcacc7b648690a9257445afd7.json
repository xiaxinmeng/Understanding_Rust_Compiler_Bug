{"sha": "ae80d7e012e6b0efcacc7b648690a9257445afd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlODBkN2UwMTJlNmIwZWZjYWNjN2I2NDg2OTBhOTI1NzQ0NWFmZDc=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-07T23:03:19Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-15T10:58:33Z"}, "message": "update const arg queries", "tree": {"sha": "5af95457168653a89d3b0f86251989ad2de62476", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5af95457168653a89d3b0f86251989ad2de62476"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae80d7e012e6b0efcacc7b648690a9257445afd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae80d7e012e6b0efcacc7b648690a9257445afd7", "html_url": "https://github.com/rust-lang/rust/commit/ae80d7e012e6b0efcacc7b648690a9257445afd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae80d7e012e6b0efcacc7b648690a9257445afd7/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08394eb12174ad14aeef739a876d1456187b4d66", "url": "https://api.github.com/repos/rust-lang/rust/commits/08394eb12174ad14aeef739a876d1456187b4d66", "html_url": "https://github.com/rust-lang/rust/commit/08394eb12174ad14aeef739a876d1456187b4d66"}], "stats": {"total": 292, "additions": 154, "deletions": 138}, "files": [{"sha": "76b8ac4e80af183a8c391c4f093166371e058add", "filename": "src/librustc_middle/mir/query.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fquery.rs?ref=ae80d7e012e6b0efcacc7b648690a9257445afd7", "patch": "@@ -1,10 +1,10 @@\n //! Values computed by queries that use MIR.\n \n-use crate::ty::{self, Ty};\n+use crate::ty::{self, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_index::bit_set::BitMatrix;\n use rustc_index::vec::IndexVec;\n use rustc_span::{Span, Symbol};\n@@ -323,3 +323,24 @@ pub struct CoverageInfo {\n     /// The total number of coverage region counters added to the MIR `Body`.\n     pub num_counters: u32,\n }\n+\n+impl<'tcx> TyCtxt<'tcx> {\n+    pub fn mir_borrowck_opt_const_arg(\n+        self,\n+        def: ty::WithOptParam<LocalDefId>,\n+    ) -> &'tcx BorrowCheckResult<'tcx> {\n+        if let Some(param_did) = def.param_did {\n+            self.mir_borrowck_const_arg((def.did, param_did))\n+        } else {\n+            self.mir_borrowck(def.did)\n+        }\n+    }\n+\n+    pub fn mir_const_qualif_opt_const_arg(self, def: ty::WithOptParam<LocalDefId>) -> ConstQualifs {\n+        if let Some(param_did) = def.param_did {\n+            self.mir_const_qualif_const_arg((def.did, param_did))\n+        } else {\n+            self.mir_const_qualif(def.did)\n+        }\n+    }\n+}"}, {"sha": "76702fab9dc91071855281204a2a6003d6b81605", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=ae80d7e012e6b0efcacc7b648690a9257445afd7", "patch": "@@ -209,11 +209,11 @@ rustc_queries! {\n             cache_on_disk_if { key.is_local() }\n         }\n         query mir_const_qualif_const_arg(\n-            key: ty::WithOptParam<LocalDefId>\n+            key: (LocalDefId, DefId)\n         ) -> mir::ConstQualifs {\n             desc {\n-                |tcx| \"const checking the potential const argument `{}`\",\n-                tcx.def_path_str(key.did.to_def_id())\n+                |tcx| \"const checking the const argument `{}`\",\n+                tcx.def_path_str(key.0.to_def_id())\n             }\n         }\n \n@@ -257,10 +257,10 @@ rustc_queries! {\n             desc { |tcx| \"optimizing MIR for `{}`\", tcx.def_path_str(key) }\n             cache_on_disk_if { key.is_local() }\n         }\n-        query optimized_mir_of_const_arg(key: ty::WithOptParam<LocalDefId>) -> &'tcx mir::Body<'tcx> {\n+        query optimized_mir_of_const_arg(key: (LocalDefId, DefId)) -> &'tcx mir::Body<'tcx> {\n             desc {\n-                |tcx| \"optimizing MIR for the potential const argument `{}`\",\n-                tcx.def_path_str(key.did.to_def_id())\n+                |tcx| \"optimizing MIR for the const argument `{}`\",\n+                tcx.def_path_str(key.0.to_def_id())\n             }\n         }\n \n@@ -280,7 +280,7 @@ rustc_queries! {\n             key: ty::WithOptParam<LocalDefId>\n         ) -> &'tcx IndexVec<mir::Promoted, mir::Body<'tcx>> {\n             desc {\n-                |tcx| \"optimizing promoted MIR for the potential const argument `{}`\",\n+                |tcx| \"optimizing promoted MIR for the const argument `{}`\",\n                 tcx.def_path_str(key.did.to_def_id()),\n             }\n         }\n@@ -496,8 +496,8 @@ rustc_queries! {\n             desc { |tcx| \"unsafety-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n             cache_on_disk_if { true }\n         }\n-        query unsafety_check_result_const_arg(key: ty::WithOptParam<LocalDefId>) -> &'tcx mir::UnsafetyCheckResult {\n-            desc { |tcx| \"unsafety-checking the potential const arg `{}`\", tcx.def_path_str(key.did.to_def_id()) }\n+        query unsafety_check_result_const_arg(key: (LocalDefId, DefId)) -> &'tcx mir::UnsafetyCheckResult {\n+            desc { |tcx| \"unsafety-checking the const arg `{}`\", tcx.def_path_str(key.0.to_def_id()) }\n         }\n \n         /// HACK: when evaluated, this reports a \"unsafe derive on repr(packed)\" error.\n@@ -579,12 +579,12 @@ rustc_queries! {\n             desc { |tcx| \"type-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n             cache_on_disk_if { true }\n         }\n-        query _typeck_tables_of_const_arg(\n-            key: ty::WithOptParam<LocalDefId>\n+        query typeck_tables_of_const_arg(\n+            key: (LocalDefId, DefId)\n         ) -> &'tcx ty::TypeckTables<'tcx> {\n             desc {\n                 |tcx| \"type-checking the const argument `{}`\",\n-                tcx.def_path_str(key.did.to_def_id()),\n+                tcx.def_path_str(key.0.to_def_id()),\n             }\n         }\n         query diagnostic_only_typeck_tables_of(key: LocalDefId) -> &'tcx ty::TypeckTables<'tcx> {\n@@ -627,10 +627,10 @@ rustc_queries! {\n                     || opt_result.map_or(false, |r| !r.concrete_opaque_types.is_empty())\n             }\n         }\n-        query mir_borrowck_const_arg(key: ty::WithOptParam<LocalDefId>) -> &'tcx mir::BorrowCheckResult<'tcx> {\n+        query mir_borrowck_const_arg(key: (LocalDefId, DefId)) -> &'tcx mir::BorrowCheckResult<'tcx> {\n             desc {\n-                |tcx| \"borrow-checking the potential const argument`{}`\",\n-                tcx.def_path_str(key.did.to_def_id())\n+                |tcx| \"borrow-checking the const argument`{}`\",\n+                tcx.def_path_str(key.0.to_def_id())\n             }\n         }\n     }\n@@ -1501,11 +1501,11 @@ rustc_queries! {\n         }\n \n         query resolve_instance_of_const_arg(\n-            key: ty::ParamEnvAnd<'tcx, (ty::WithOptParam<DefId>, SubstsRef<'tcx>)>\n+            key: ty::ParamEnvAnd<'tcx, (LocalDefId, DefId, SubstsRef<'tcx>)>\n         ) -> Result<Option<ty::Instance<'tcx>>, ErrorReported> {\n             desc {\n-                \"resolving instance of the potential const argument `{}`\",\n-                ty::Instance::new(key.value.0.did, key.value.1),\n+                \"resolving instance of the const argument `{}`\",\n+                ty::Instance::new(key.value.0.to_def_id(), key.value.2),\n             }\n         }\n     }"}, {"sha": "fd7be0dbc0b0b98b273a6e059f73381f83ef77de", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=ae80d7e012e6b0efcacc7b648690a9257445afd7", "patch": "@@ -980,12 +980,12 @@ pub struct GlobalCtxt<'tcx> {\n }\n \n impl<'tcx> TyCtxt<'tcx> {\n-    pub fn typeck_tables_of_const_arg(\n+    pub fn typeck_tables_of_opt_const_arg(\n         self,\n         def: ty::WithOptParam<LocalDefId>,\n     ) -> &'tcx TypeckTables<'tcx> {\n-        if def.param_did.is_some() {\n-            self._typeck_tables_of_const_arg(def)\n+        if let Some(param_did) = def.param_did {\n+            self.typeck_tables_of_const_arg((def.did, param_did))\n         } else {\n             self.typeck_tables_of(def.did)\n         }"}, {"sha": "a00afab95997a8bf827922737cf34936ba6f075f", "filename": "src/librustc_middle/ty/instance.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_middle%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_middle%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Finstance.rs?ref=ae80d7e012e6b0efcacc7b648690a9257445afd7", "patch": "@@ -359,7 +359,14 @@ impl<'tcx> Instance<'tcx> {\n         substs: SubstsRef<'tcx>,\n     ) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n         let substs = tcx.erase_regions(&substs);\n-        tcx.resolve_instance_of_const_arg(tcx.erase_regions(&param_env.and((def, substs))))\n+\n+        if let Some((did, param_did)) = def.as_const_arg() {\n+            tcx.resolve_instance_of_const_arg(\n+                tcx.erase_regions(&param_env.and((did, param_did, substs))),\n+            )\n+        } else {\n+            tcx.resolve_instance(tcx.erase_regions(&param_env.and((def.did, substs))))\n+        }\n     }\n \n     pub fn resolve_for_fn_ptr("}, {"sha": "92ebe9b2d184cb9568c3868832e9ae219754306f", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=ae80d7e012e6b0efcacc7b648690a9257445afd7", "patch": "@@ -1600,6 +1600,16 @@ impl WithOptParam<DefId> {\n         self.did.as_local().map(|did| WithOptParam { did, param_did: self.param_did })\n     }\n \n+    pub fn as_const_arg(self) -> Option<(LocalDefId, DefId)> {\n+        if let Some(param_did) = self.param_did {\n+            if let Some(did) = self.did.as_local() {\n+                return Some((did, param_did));\n+            }\n+        }\n+\n+        None\n+    }\n+\n     pub fn expect_local(self) -> WithOptParam<LocalDefId> {\n         self.as_local().unwrap()\n     }\n@@ -1611,10 +1621,6 @@ impl WithOptParam<DefId> {\n     pub fn ty_def_id(self) -> DefId {\n         self.param_did.unwrap_or(self.did)\n     }\n-\n-    pub fn init_me_bby(tcx: TyCtxt<'_>, did: DefId) -> WithOptParam<DefId> {\n-        WithOptParam { did, param_did: did.as_local().and_then(|did| tcx.opt_const_param_of(did)) }\n-    }\n }\n \n /// When type checking, we use the `ParamEnv` to track\n@@ -2889,8 +2895,9 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> &'tcx Body<'tcx> {\n         match instance {\n             ty::InstanceDef::Item(def) => {\n-                if let Some(def) = def.as_local() {\n-                    self.optimized_mir_of_const_arg(def)\n+                if let Some((did, param_did)) = def.as_const_arg() {\n+                    // The `param_did` is only `Some` for local `DefId`s.\n+                    self.optimized_mir_of_const_arg((did, param_did))\n                 } else {\n                     self.optimized_mir(def.did)\n                 }"}, {"sha": "557f64d3c191347accab95cb3413f41f424851ae", "filename": "src/librustc_middle/ty/query/keys.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs?ref=ae80d7e012e6b0efcacc7b648690a9257445afd7", "patch": "@@ -138,6 +138,17 @@ impl Key for (DefId, LocalDefId) {\n     }\n }\n \n+impl Key for (LocalDefId, DefId) {\n+    type CacheSelector = DefaultCacheSelector;\n+\n+    fn query_crate(&self) -> CrateNum {\n+        LOCAL_CRATE\n+    }\n+    fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n+        self.0.default_span(tcx)\n+    }\n+}\n+\n impl Key for (CrateNum, DefId) {\n     type CacheSelector = DefaultCacheSelector;\n \n@@ -182,14 +193,14 @@ impl<'tcx> Key for (DefId, SubstsRef<'tcx>) {\n     }\n }\n \n-impl<'tcx> Key for (ty::WithOptParam<DefId>, SubstsRef<'tcx>) {\n+impl<'tcx> Key for (LocalDefId, DefId, SubstsRef<'tcx>) {\n     type CacheSelector = DefaultCacheSelector;\n \n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n-        self.0.did.default_span(tcx)\n+        self.0.default_span(tcx)\n     }\n }\n "}, {"sha": "f04bfe648fb786719821b31d1aa7b674db3d087d", "filename": "src/librustc_middle/ty/structural_impls.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs?ref=ae80d7e012e6b0efcacc7b648690a9257445afd7", "patch": "@@ -272,6 +272,7 @@ CloneTypeFoldableAndLiftImpls! {\n     ::rustc_span::symbol::Symbol,\n     ::rustc_hir::def::Res,\n     ::rustc_hir::def_id::DefId,\n+    ::rustc_hir::def_id::LocalDefId,\n     ::rustc_hir::LlvmInlineAsmInner,\n     ::rustc_hir::MatchSource,\n     ::rustc_hir::Mutability,\n@@ -719,6 +720,18 @@ impl<'tcx, T: TypeFoldable<'tcx>, U: TypeFoldable<'tcx>> TypeFoldable<'tcx> for\n     }\n }\n \n+impl<'tcx, A: TypeFoldable<'tcx>, B: TypeFoldable<'tcx>, C: TypeFoldable<'tcx>> TypeFoldable<'tcx>\n+    for (A, B, C)\n+{\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> (A, B, C) {\n+        (self.0.fold_with(folder), self.1.fold_with(folder), self.2.fold_with(folder))\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.0.visit_with(visitor) || self.1.visit_with(visitor) || self.2.visit_with(visitor)\n+    }\n+}\n+\n EnumTypeFoldableImpl! {\n     impl<'tcx, T> TypeFoldable<'tcx> for Option<T> {\n         (Some)(a),"}, {"sha": "0ca165ee847171007a577eb759bbdf5d6138b2a3", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=ae80d7e012e6b0efcacc7b648690a9257445afd7", "patch": "@@ -89,8 +89,8 @@ const DEREF_PROJECTION: &[PlaceElem<'_>; 1] = &[ProjectionElem::Deref];\n pub fn provide(providers: &mut Providers) {\n     *providers = Providers {\n         mir_borrowck: |tcx, did| mir_borrowck(tcx, ty::WithOptParam::dummy(did)),\n-        mir_borrowck_const_arg: |tcx, def| {\n-            if def.param_did.is_none() { tcx.mir_borrowck(def.did) } else { mir_borrowck(tcx, def) }\n+        mir_borrowck_const_arg: |tcx, (did, param_did)| {\n+            mir_borrowck(tcx, ty::WithOptParam { did, param_did: Some(param_did) })\n         },\n         ..*providers\n     };\n@@ -101,8 +101,8 @@ fn mir_borrowck<'tcx>(\n     def: ty::WithOptParam<LocalDefId>,\n ) -> &'tcx BorrowCheckResult<'tcx> {\n     if def.param_did.is_none() {\n-        if let param_did @ Some(_) = tcx.opt_const_param_of(def.did) {\n-            return tcx.mir_borrowck_const_arg(ty::WithOptParam { param_did, ..def });\n+        if let Some(param_did) = tcx.opt_const_param_of(def.did) {\n+            return tcx.mir_borrowck_const_arg((def.did, param_did));\n         }\n     }\n \n@@ -150,7 +150,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n     }\n \n     // Gather the upvars of a closure, if any.\n-    let tables = tcx.typeck_tables_of_const_arg(def);\n+    let tables = tcx.typeck_tables_of_opt_const_arg(def);\n     if let Some(ErrorReported) = tables.tainted_by_errors {\n         infcx.set_tainted_by_errors();\n     }"}, {"sha": "38894398343d5f1c4d8b6d33d0cb1e2a94582c3b", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=ae80d7e012e6b0efcacc7b648690a9257445afd7", "patch": "@@ -292,7 +292,8 @@ pub fn const_eval_raw_provider<'tcx>(\n \n     if let Some(def) = def.as_local() {\n         if tcx.has_typeck_tables(def.did) {\n-            if let Some(error_reported) = tcx.typeck_tables_of_const_arg(def).tainted_by_errors {\n+            if let Some(error_reported) = tcx.typeck_tables_of_opt_const_arg(def).tainted_by_errors\n+            {\n                 return Err(ErrorHandled::Reported(error_reported));\n             }\n         }"}, {"sha": "9cbc6d4dcea9b1ee8a8d6e8edae9bfc29231e420", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=ae80d7e012e6b0efcacc7b648690a9257445afd7", "patch": "@@ -398,7 +398,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         if let Some(def) = def.as_local() {\n             if self.tcx.has_typeck_tables(def.did) {\n                 if let Some(error_reported) =\n-                    self.tcx.typeck_tables_of_const_arg(def).tainted_by_errors\n+                    self.tcx.typeck_tables_of_opt_const_arg(def).tainted_by_errors\n                 {\n                     throw_inval!(TypeckError(error_reported))\n                 }\n@@ -415,8 +415,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         match instance {\n             ty::InstanceDef::Item(def) => {\n                 if self.tcx.is_mir_available(def.did) {\n-                    if let Some(def) = def.as_local() {\n-                        Ok(self.tcx.optimized_mir_of_const_arg(def))\n+                    if let Some((did, param_did)) = def.as_const_arg() {\n+                        Ok(self.tcx.optimized_mir_of_const_arg((did, param_did)))\n                     } else {\n                         Ok(self.tcx.optimized_mir(def.did))\n                     }"}, {"sha": "445a0230afd3a977d144b3240eb9e2f4236c67c2", "filename": "src/librustc_mir/transform/check_consts/qualifs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=ae80d7e012e6b0efcacc7b648690a9257445afd7", "patch": "@@ -248,8 +248,8 @@ where\n         assert!(promoted.is_none());\n         // Don't peek inside trait associated constants.\n         if cx.tcx.trait_of_item(def.did).is_none() {\n-            let qualifs = if let Some(def) = def.as_local() {\n-                cx.tcx.at(constant.span).mir_const_qualif_const_arg(def)\n+            let qualifs = if let Some((did, param_did)) = def.as_const_arg() {\n+                cx.tcx.at(constant.span).mir_const_qualif_const_arg((did, param_did))\n             } else {\n                 cx.tcx.at(constant.span).mir_const_qualif(def.did)\n             };"}, {"sha": "5ee93dfc446a49df532736cd787bea5e43021d28", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=ae80d7e012e6b0efcacc7b648690a9257445afd7", "patch": "@@ -493,12 +493,8 @@ pub(crate) fn provide(providers: &mut Providers) {\n         unsafety_check_result: |tcx, def_id| {\n             unsafety_check_result(tcx, ty::WithOptParam::dummy(def_id))\n         },\n-        unsafety_check_result_const_arg: |tcx, def| {\n-            if def.param_did.is_none() {\n-                tcx.unsafety_check_result(def.did)\n-            } else {\n-                unsafety_check_result(tcx, def)\n-            }\n+        unsafety_check_result_const_arg: |tcx, (did, param_did)| {\n+            unsafety_check_result(tcx, ty::WithOptParam { did, param_did: Some(param_did) })\n         },\n         unsafe_derive_on_repr_packed,\n         ..*providers\n@@ -553,8 +549,8 @@ fn unsafety_check_result<'tcx>(\n     def: ty::WithOptParam<LocalDefId>,\n ) -> &'tcx UnsafetyCheckResult {\n     if def.param_did.is_none() {\n-        if let param_did @ Some(_) = tcx.opt_const_param_of(def.did) {\n-            return tcx.unsafety_check_result_const_arg(ty::WithOptParam { param_did, ..def });\n+        if let Some(param_did) = tcx.opt_const_param_of(def.did) {\n+            return tcx.unsafety_check_result_const_arg((def.did, param_did));\n         }\n     }\n "}, {"sha": "fdcf36a316268ded0f3f5a5c12c871c75915acd8", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=ae80d7e012e6b0efcacc7b648690a9257445afd7", "patch": "@@ -51,12 +51,8 @@ pub(crate) fn provide(providers: &mut Providers) {\n         mir_const_qualif: |tcx, did| {\n             mir_const_qualif(tcx, ty::WithOptParam::dummy(did.expect_local()))\n         },\n-        mir_const_qualif_const_arg: |tcx, def| {\n-            if def.param_did.is_none() {\n-                tcx.mir_const_qualif(def.did.to_def_id())\n-            } else {\n-                mir_const_qualif(tcx, def)\n-            }\n+        mir_const_qualif_const_arg: |tcx, (did, param_did)| {\n+            mir_const_qualif(tcx, ty::WithOptParam { did, param_did: Some(param_did) })\n         },\n         mir_validated,\n         mir_drops_elaborated_and_const_checked,\n@@ -227,8 +223,8 @@ pub fn run_passes(\n \n fn mir_const_qualif(tcx: TyCtxt<'_>, def: ty::WithOptParam<LocalDefId>) -> ConstQualifs {\n     if def.param_did.is_none() {\n-        if let param_did @ Some(_) = tcx.opt_const_param_of(def.did) {\n-            return tcx.mir_const_qualif_const_arg(ty::WithOptParam { param_did, ..def });\n+        if let Some(param_did) = tcx.opt_const_param_of(def.did) {\n+            return tcx.mir_const_qualif_const_arg((def.did, param_did));\n         }\n     }\n \n@@ -278,7 +274,11 @@ fn mir_const<'tcx>(\n     }\n \n     // Unsafety check uses the raw mir, so make sure it is run.\n-    let _ = tcx.unsafety_check_result_const_arg(def);\n+    if let Some(param_did) = def.param_did {\n+        tcx.ensure().unsafety_check_result_const_arg((def.did, param_did));\n+    } else {\n+        tcx.ensure().unsafety_check_result(def.did);\n+    }\n \n     let mut body = tcx.mir_built(def).steal();\n \n@@ -321,7 +321,7 @@ fn mir_validated(\n \n     // Ensure that we compute the `mir_const_qualif` for constants at\n     // this point, before we steal the mir-const result.\n-    let _ = tcx.mir_const_qualif_const_arg(def);\n+    let _ = tcx.mir_const_qualif_opt_const_arg(def);\n \n     let mut body = tcx.mir_const(def).steal();\n \n@@ -367,7 +367,11 @@ fn mir_drops_elaborated_and_const_checked<'tcx>(\n \n     // (Mir-)Borrowck uses `mir_validated`, so we have to force it to\n     // execute before we can steal.\n-    tcx.ensure().mir_borrowck_const_arg(def);\n+    if let Some(param_did) = def.param_did {\n+        tcx.ensure().mir_borrowck_const_arg((def.did, param_did));\n+    } else {\n+        tcx.ensure().mir_borrowck(def.did);\n+    }\n \n     let (body, _) = tcx.mir_validated(def);\n     let mut body = body.steal();\n@@ -485,26 +489,18 @@ fn run_optimization_passes<'tcx>(\n \n fn optimized_mir<'tcx>(tcx: TyCtxt<'tcx>, did: DefId) -> &'tcx Body<'tcx> {\n     let did = did.expect_local();\n-    if let param_did @ Some(_) = tcx.opt_const_param_of(did) {\n-        tcx.optimized_mir_of_const_arg(ty::WithOptParam { did, param_did })\n+    if let Some(param_did) = tcx.opt_const_param_of(did) {\n+        tcx.optimized_mir_of_const_arg((did, param_did))\n     } else {\n         tcx.arena.alloc(inner_optimized_mir(tcx, ty::WithOptParam::dummy(did)))\n     }\n }\n \n fn optimized_mir_of_const_arg<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    def: ty::WithOptParam<LocalDefId>,\n+    (did, param_did): (LocalDefId, DefId),\n ) -> &'tcx Body<'tcx> {\n-    if def.param_did.is_none() {\n-        if let param_did @ Some(_) = tcx.opt_const_param_of(def.did) {\n-            tcx.optimized_mir_of_const_arg(ty::WithOptParam { param_did, ..def })\n-        } else {\n-            tcx.optimized_mir(def.did)\n-        }\n-    } else {\n-        tcx.arena.alloc(inner_optimized_mir(tcx, def))\n-    }\n+    tcx.arena.alloc(inner_optimized_mir(tcx, ty::WithOptParam { did, param_did: Some(param_did) }))\n }\n \n fn inner_optimized_mir(tcx: TyCtxt<'_>, def: ty::WithOptParam<LocalDefId>) -> Body<'_> {\n@@ -538,7 +534,11 @@ fn promoted_mir<'tcx>(\n         return tcx.arena.alloc(IndexVec::new());\n     }\n \n-    tcx.ensure().mir_borrowck_const_arg(def);\n+    if let Some(param_did) = def.param_did {\n+        tcx.ensure().mir_borrowck_const_arg((def.did, param_did));\n+    } else {\n+        tcx.ensure().mir_borrowck(def.did);\n+    }\n     let (_, promoted) = tcx.mir_validated(def);\n     let mut promoted = promoted.steal();\n "}, {"sha": "025ef1ece4603624812ad5fa95b23237f61e28dd", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=ae80d7e012e6b0efcacc7b648690a9257445afd7", "patch": "@@ -601,7 +601,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n                             let substs = InternalSubsts::identity_for_item(cx.tcx(), did);\n                             let lhs = mk_const(cx.tcx().mk_const(ty::Const {\n                                 val: ty::ConstKind::Unevaluated(\n-                                    ty::WithOptParam::init_me_bby(cx.tcx(), did),\n+                                    ty::WithOptParam::dummy(did),\n                                     substs,\n                                     None,\n                                 ),\n@@ -800,11 +800,7 @@ fn convert_path_expr<'a, 'tcx>(\n             debug!(\"convert_path_expr: (const) user_ty={:?}\", user_ty);\n             ExprKind::Literal {\n                 literal: cx.tcx.mk_const(ty::Const {\n-                    val: ty::ConstKind::Unevaluated(\n-                        ty::WithOptParam::init_me_bby(cx.tcx, def_id),\n-                        substs,\n-                        None,\n-                    ),\n+                    val: ty::ConstKind::Unevaluated(ty::WithOptParam::dummy(def_id), substs, None),\n                     ty: cx.tables().node_type(expr.hir_id),\n                 }),\n                 user_ty,"}, {"sha": "7daf7b629d85290acc7d5d54c153240e2fd05f63", "filename": "src/librustc_mir_build/hair/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs?ref=ae80d7e012e6b0efcacc7b648690a9257445afd7", "patch": "@@ -56,7 +56,7 @@ impl<'a, 'tcx> Cx<'a, 'tcx> {\n         src_id: hir::HirId,\n     ) -> Cx<'a, 'tcx> {\n         let tcx = infcx.tcx;\n-        let tables = tcx.typeck_tables_of_const_arg(def);\n+        let tables = tcx.typeck_tables_of_opt_const_arg(def);\n         let body_owner_kind = tcx.hir().body_owner_kind(src_id);\n \n         let constness = match body_owner_kind {"}, {"sha": "0a1d8c1077a0bac459ab9b936e3db50f56110f5f", "filename": "src/librustc_ty/instance.rs", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_ty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_ty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Finstance.rs?ref=ae80d7e012e6b0efcacc7b648690a9257445afd7", "patch": "@@ -1,5 +1,5 @@\n use rustc_errors::ErrorReported;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Instance, TyCtxt, TypeFoldable};\n@@ -15,32 +15,25 @@ fn resolve_instance<'tcx>(\n     key: ty::ParamEnvAnd<'tcx, (DefId, SubstsRef<'tcx>)>,\n ) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n     let (param_env, (did, substs)) = key.into_parts();\n-    if let param_did @ Some(_) = did.as_local().and_then(|did| tcx.opt_const_param_of(did)) {\n-        tcx.resolve_instance_of_const_arg(\n-            param_env.and((ty::WithOptParam { did, param_did }, substs)),\n-        )\n-    } else {\n-        inner_resolve_instance(tcx, param_env.and((ty::WithOptParam::dummy(did), substs)))\n+    if let Some(did) = did.as_local() {\n+        if let Some(param_did) = tcx.opt_const_param_of(did) {\n+            return tcx.resolve_instance_of_const_arg(param_env.and((did, param_did, substs)));\n+        }\n     }\n+\n+    inner_resolve_instance(tcx, param_env.and((ty::WithOptParam::dummy(did), substs)))\n }\n \n fn resolve_instance_of_const_arg<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    key: ty::ParamEnvAnd<'tcx, (ty::WithOptParam<DefId>, SubstsRef<'tcx>)>,\n+    key: ty::ParamEnvAnd<'tcx, (LocalDefId, DefId, SubstsRef<'tcx>)>,\n ) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n-    let (param_env, (def, substs)) = key.into_parts();\n-    if def.param_did.is_none() {\n-        if let Some(did) = def.did.as_local() {\n-            if let param_did @ Some(_) = tcx.opt_const_param_of(did) {\n-                return tcx.resolve_instance_of_const_arg(\n-                    param_env.and((ty::WithOptParam { param_did, ..def }, substs)),\n-                );\n-            }\n-        }\n-        tcx.resolve_instance(param_env.and((def.did, substs)))\n-    } else {\n-        inner_resolve_instance(tcx, param_env.and((def, substs)))\n-    }\n+    let (param_env, (did, param_did, substs)) = key.into_parts();\n+    inner_resolve_instance(\n+        tcx,\n+        param_env\n+            .and((ty::WithOptParam { did: did.to_def_id(), param_did: Some(param_did) }, substs)),\n+    )\n }\n \n fn inner_resolve_instance<'tcx>("}, {"sha": "fd2a0175cf66cafbfde1f7a8c3ab92ad3568ad59", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ae80d7e012e6b0efcacc7b648690a9257445afd7", "patch": "@@ -764,7 +764,7 @@ pub fn provide(providers: &mut Providers) {\n     method::provide(providers);\n     *providers = Providers {\n         typeck_item_bodies,\n-        _typeck_tables_of_const_arg: typeck_tables_of_const_arg,\n+        typeck_tables_of_const_arg,\n         typeck_tables_of,\n         diagnostic_only_typeck_tables_of,\n         has_typeck_tables,\n@@ -958,19 +958,15 @@ where\n \n fn typeck_tables_of_const_arg<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    def: ty::WithOptParam<LocalDefId>,\n+    (did, param_did): (LocalDefId, DefId),\n ) -> &ty::TypeckTables<'tcx> {\n-    if let Some(param_did) = def.param_did {\n-        let fallback = move || tcx.type_of(param_did);\n-        typeck_tables_of_with_fallback(tcx, def.did, fallback)\n-    } else {\n-        bug!(\"missing param_did\")\n-    }\n+    let fallback = move || tcx.type_of(param_did);\n+    typeck_tables_of_with_fallback(tcx, did, fallback)\n }\n \n fn typeck_tables_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> &ty::TypeckTables<'tcx> {\n-    if let param_did @ Some(_) = tcx.opt_const_param_of(def_id) {\n-        tcx.typeck_tables_of_const_arg(ty::WithOptParam { did: def_id, param_did })\n+    if let Some(param_did) = tcx.opt_const_param_of(def_id) {\n+        tcx.typeck_tables_of_const_arg((def_id, param_did))\n     } else {\n         let fallback = move || tcx.type_of(def_id.to_def_id());\n         typeck_tables_of_with_fallback(tcx, def_id, fallback)"}, {"sha": "1b4326ea56aaaaa7baea21921be6166fcce37b9a", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-impl.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr?ref=ae80d7e012e6b0efcacc7b648690a9257445afd7", "patch": "@@ -30,11 +30,6 @@ note: ...which requires const-evaluating `<impl at $DIR/issue-24949-assoc-const-\n    |\n LL |     const BAR: u32 = IMPL_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires optimizing MIR for the potential const argument `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR`...\n-  --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:12:5\n-   |\n-LL |     const BAR: u32 = IMPL_REF_BAR;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires optimizing MIR for `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:12:5\n    |"}, {"sha": "8efa56a9a2e63133c6fe770db3753a5e70e89dd5", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-trait-default.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr?ref=ae80d7e012e6b0efcacc7b648690a9257445afd7", "patch": "@@ -30,11 +30,6 @@ note: ...which requires const-evaluating `FooDefault::BAR`...\n    |\n LL |     const BAR: u32 = DEFAULT_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires optimizing MIR for the potential const argument `FooDefault::BAR`...\n-  --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:8:5\n-   |\n-LL |     const BAR: u32 = DEFAULT_REF_BAR;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires optimizing MIR for `FooDefault::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:8:5\n    |"}, {"sha": "78ce1a28a3fdcfb1c8f0a6dd641b9d13aa9153ae", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-trait.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr?ref=ae80d7e012e6b0efcacc7b648690a9257445afd7", "patch": "@@ -30,11 +30,6 @@ note: ...which requires const-evaluating `<impl at $DIR/issue-24949-assoc-const-\n    |\n LL |     const BAR: u32 = TRAIT_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires optimizing MIR for the potential const argument `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 13:2>::BAR`...\n-  --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:12:5\n-   |\n-LL |     const BAR: u32 = TRAIT_REF_BAR;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires optimizing MIR for `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 13:2>::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:12:5\n    |"}, {"sha": "cba894bec9d2232c56b5d2c7c7027bd8587f6eac", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae80d7e012e6b0efcacc7b648690a9257445afd7/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=ae80d7e012e6b0efcacc7b648690a9257445afd7", "patch": "@@ -19,11 +19,6 @@ note: ...which requires processing MIR for `cycle1`...\n    |\n LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires unsafety-checking the potential const arg `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:12:1\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires unsafety-checking `cycle1`...\n   --> $DIR/auto-trait-leak.rs:12:1\n    |\n@@ -60,11 +55,6 @@ note: ...which requires processing MIR for `cycle2`...\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires unsafety-checking the potential const arg `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:20:1\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires unsafety-checking `cycle2`...\n   --> $DIR/auto-trait-leak.rs:20:1\n    |"}]}