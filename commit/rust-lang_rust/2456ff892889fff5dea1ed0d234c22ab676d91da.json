{"sha": "2456ff892889fff5dea1ed0d234c22ab676d91da", "node_id": "C_kwDOAAsO6NoAKDI0NTZmZjg5Mjg4OWZmZjVkZWExZWQwZDIzNGMyMmFiNjc2ZDkxZGE", "commit": {"author": {"name": "Nika Layzell", "email": "nika@thelayzells.com", "date": "2022-06-25T16:11:44Z"}, "committer": {"name": "Nika Layzell", "email": "nika@thelayzells.com", "date": "2022-06-25T16:26:21Z"}, "message": "proc_macro: remove Context trait, and put span methods directly on Server", "tree": {"sha": "72ec6d9067f3230d89cbb8c77325fd7ae7564ddc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72ec6d9067f3230d89cbb8c77325fd7ae7564ddc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2456ff892889fff5dea1ed0d234c22ab676d91da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2456ff892889fff5dea1ed0d234c22ab676d91da", "html_url": "https://github.com/rust-lang/rust/commit/2456ff892889fff5dea1ed0d234c22ab676d91da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2456ff892889fff5dea1ed0d234c22ab676d91da/comments", "author": {"login": "mystor", "id": 1261662, "node_id": "MDQ6VXNlcjEyNjE2NjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1261662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mystor", "html_url": "https://github.com/mystor", "followers_url": "https://api.github.com/users/mystor/followers", "following_url": "https://api.github.com/users/mystor/following{/other_user}", "gists_url": "https://api.github.com/users/mystor/gists{/gist_id}", "starred_url": "https://api.github.com/users/mystor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mystor/subscriptions", "organizations_url": "https://api.github.com/users/mystor/orgs", "repos_url": "https://api.github.com/users/mystor/repos", "events_url": "https://api.github.com/users/mystor/events{/privacy}", "received_events_url": "https://api.github.com/users/mystor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mystor", "id": 1261662, "node_id": "MDQ6VXNlcjEyNjE2NjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1261662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mystor", "html_url": "https://github.com/mystor", "followers_url": "https://api.github.com/users/mystor/followers", "following_url": "https://api.github.com/users/mystor/following{/other_user}", "gists_url": "https://api.github.com/users/mystor/gists{/gist_id}", "starred_url": "https://api.github.com/users/mystor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mystor/subscriptions", "organizations_url": "https://api.github.com/users/mystor/orgs", "repos_url": "https://api.github.com/users/mystor/repos", "events_url": "https://api.github.com/users/mystor/events{/privacy}", "received_events_url": "https://api.github.com/users/mystor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55f052d9c927699e0f69b937ac93701442155d39", "url": "https://api.github.com/repos/rust-lang/rust/commits/55f052d9c927699e0f69b937ac93701442155d39", "html_url": "https://github.com/rust-lang/rust/commit/55f052d9c927699e0f69b937ac93701442155d39"}], "stats": {"total": 30, "additions": 13, "deletions": 17}, "files": [{"sha": "dddcff4c6dd1c30e750b5bdfb1cd8b16bb16a20d", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2456ff892889fff5dea1ed0d234c22ab676d91da/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2456ff892889fff5dea1ed0d234c22ab676d91da/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=2456ff892889fff5dea1ed0d234c22ab676d91da", "patch": "@@ -372,7 +372,7 @@ impl<'a, 'b> Rustc<'a, 'b> {\n     fn lit(&mut self, kind: token::LitKind, symbol: Symbol, suffix: Option<Symbol>) -> Literal {\n         Literal {\n             lit: token::Lit::new(kind, symbol, suffix),\n-            span: server::Context::call_site(self),\n+            span: server::Server::call_site(self),\n         }\n     }\n }\n@@ -550,7 +550,7 @@ impl server::Group for Rustc<'_, '_> {\n         Group {\n             delimiter,\n             stream: stream.unwrap_or_default(),\n-            span: DelimSpan::from_single(server::Context::call_site(self)),\n+            span: DelimSpan::from_single(server::Server::call_site(self)),\n             flatten: false,\n         }\n     }\n@@ -582,7 +582,7 @@ impl server::Group for Rustc<'_, '_> {\n \n impl server::Punct for Rustc<'_, '_> {\n     fn new(&mut self, ch: char, spacing: Spacing) -> Self::Punct {\n-        Punct::new(ch, spacing == Spacing::Joint, server::Context::call_site(self))\n+        Punct::new(ch, spacing == Spacing::Joint, server::Server::call_site(self))\n     }\n \n     fn as_char(&mut self, punct: Self::Punct) -> char {\n@@ -918,7 +918,7 @@ impl server::Span for Rustc<'_, '_> {\n     }\n }\n \n-impl server::Context for Rustc<'_, '_> {\n+impl server::Server for Rustc<'_, '_> {\n     fn def_site(&mut self) -> Self::Span {\n         self.def_site\n     }"}, {"sha": "debcffc6f79a02cd6dbaa8dabf4efff2c88d4721", "filename": "library/proc_macro/src/bridge/server.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2456ff892889fff5dea1ed0d234c22ab676d91da/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2456ff892889fff5dea1ed0d234c22ab676d91da/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs?ref=2456ff892889fff5dea1ed0d234c22ab676d91da", "patch": "@@ -30,13 +30,6 @@ macro_rules! associated_fn {\n     ($($item:tt)*) => ($($item)*;)\n }\n \n-/// Helper methods defined by `Server` types not invoked over RPC.\n-pub trait Context: Types {\n-    fn def_site(&mut self) -> Self::Span;\n-    fn call_site(&mut self) -> Self::Span;\n-    fn mixed_site(&mut self) -> Self::Span;\n-}\n-\n macro_rules! declare_server_traits {\n     ($($name:ident {\n         $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)?;)*\n@@ -45,23 +38,26 @@ macro_rules! declare_server_traits {\n             $(associated_fn!(fn $method(&mut self, $($arg: $arg_ty),*) $(-> $ret_ty)?);)*\n         })*\n \n-        pub trait Server: Types + Context $(+ $name)* {}\n-        impl<S: Types + Context $(+ $name)*> Server for S {}\n+        pub trait Server: Types $(+ $name)* {\n+            fn def_site(&mut self) -> Self::Span;\n+            fn call_site(&mut self) -> Self::Span;\n+            fn mixed_site(&mut self) -> Self::Span;\n+        }\n     }\n }\n with_api!(Self, self_, declare_server_traits);\n \n pub(super) struct MarkedTypes<S: Types>(S);\n \n-impl<S: Context> Context for MarkedTypes<S> {\n+impl<S: Server> Server for MarkedTypes<S> {\n     fn def_site(&mut self) -> Self::Span {\n-        <_>::mark(Context::def_site(&mut self.0))\n+        <_>::mark(Server::def_site(&mut self.0))\n     }\n     fn call_site(&mut self) -> Self::Span {\n-        <_>::mark(Context::call_site(&mut self.0))\n+        <_>::mark(Server::call_site(&mut self.0))\n     }\n     fn mixed_site(&mut self) -> Self::Span {\n-        <_>::mark(Context::mixed_site(&mut self.0))\n+        <_>::mark(Server::mixed_site(&mut self.0))\n     }\n }\n "}]}