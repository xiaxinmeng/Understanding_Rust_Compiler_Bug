{"sha": "308c03501a9a49d058f2ad76dd17a4e593ce7be7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwOGMwMzUwMWE5YTQ5ZDA1OGYyYWQ3NmRkMTdhNGU1OTNjZTdiZTc=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-02-24T18:16:03Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-04T16:31:21Z"}, "message": "Remove libc from std\n\nThese wrappers are bound to a specific libc, and they don't need to be part of\nlibstd.", "tree": {"sha": "7422beb467d5f5cde6dc4c9c1b497625c5d21810", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7422beb467d5f5cde6dc4c9c1b497625c5d21810"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/308c03501a9a49d058f2ad76dd17a4e593ce7be7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/308c03501a9a49d058f2ad76dd17a4e593ce7be7", "html_url": "https://github.com/rust-lang/rust/commit/308c03501a9a49d058f2ad76dd17a4e593ce7be7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/308c03501a9a49d058f2ad76dd17a4e593ce7be7/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46e6194ee138b09d7376fa3dcdb539cf41dc68dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/46e6194ee138b09d7376fa3dcdb539cf41dc68dd", "html_url": "https://github.com/rust-lang/rust/commit/46e6194ee138b09d7376fa3dcdb539cf41dc68dd"}], "stats": {"total": 541, "additions": 279, "deletions": 262}, "files": [{"sha": "442f7849d96e4983072de931cb41ec34962568f7", "filename": "src/liblibc/lib.rs", "status": "renamed", "additions": 275, "deletions": 255, "changes": 530, "blob_url": "https://github.com/rust-lang/rust/blob/308c03501a9a49d058f2ad76dd17a4e593ce7be7/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308c03501a9a49d058f2ad76dd17a4e593ce7be7/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=308c03501a9a49d058f2ad76dd17a4e593ce7be7", "patch": "@@ -8,14 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(globs)];\n+#[crate_id = \"libc#0.10-pre\"];\n+#[experimental];\n+\n /*!\n * Bindings for the C standard library and other platform libraries\n *\n * This module contains bindings to the C standard library,\n * organized into modules by their defining standard.\n * Additionally, it contains some assorted platform-specific definitions.\n-* For convenience, most functions and types are reexported from `std::libc`,\n-* so `pub use std::libc::*` will import the available\n+* For convenience, most functions and types are reexported from `libc`,\n+* so `pub use std::*` will import the available\n * C bindings as appropriate for the target platform. The exact\n * set of functions available are platform specific.\n *\n@@ -67,119 +71,135 @@\n #![allow(missing_doc)]\n #![allow(uppercase_variables)]\n \n+#[cfg(test)] extern crate std;\n+#[cfg(test)] extern crate test;\n+#[cfg(test)] extern crate native;\n+\n // Initial glob-exports mean that all the contents of all the modules\n // wind up exported, if you're interested in writing platform-specific code.\n \n-pub use libc::types::common::c95::*;\n-pub use libc::types::common::c99::*;\n-pub use libc::types::common::posix88::*;\n-pub use libc::types::common::posix01::*;\n-pub use libc::types::common::posix08::*;\n-pub use libc::types::common::bsd44::*;\n-pub use libc::types::os::common::posix01::*;\n-pub use libc::types::os::common::bsd44::*;\n-pub use libc::types::os::arch::c95::*;\n-pub use libc::types::os::arch::c99::*;\n-pub use libc::types::os::arch::posix88::*;\n-pub use libc::types::os::arch::posix01::*;\n-pub use libc::types::os::arch::posix08::*;\n-pub use libc::types::os::arch::bsd44::*;\n-pub use libc::types::os::arch::extra::*;\n-\n-pub use libc::consts::os::c95::*;\n-pub use libc::consts::os::c99::*;\n-pub use libc::consts::os::posix88::*;\n-pub use libc::consts::os::posix01::*;\n-pub use libc::consts::os::posix08::*;\n-pub use libc::consts::os::bsd44::*;\n-pub use libc::consts::os::extra::*;\n-pub use libc::consts::os::sysconf::*;\n-\n-pub use libc::funcs::c95::ctype::*;\n-pub use libc::funcs::c95::stdio::*;\n-pub use libc::funcs::c95::stdlib::*;\n-pub use libc::funcs::c95::string::*;\n-\n-pub use libc::funcs::posix88::stat_::*;\n-pub use libc::funcs::posix88::stdio::*;\n-pub use libc::funcs::posix88::fcntl::*;\n-pub use libc::funcs::posix88::dirent::*;\n-pub use libc::funcs::posix88::unistd::*;\n-pub use libc::funcs::posix88::mman::*;\n-\n-pub use libc::funcs::posix01::stat_::*;\n-pub use libc::funcs::posix01::unistd::*;\n-pub use libc::funcs::posix01::glob::*;\n-pub use libc::funcs::posix01::mman::*;\n-pub use libc::funcs::posix08::unistd::*;\n-\n-pub use libc::funcs::bsd43::*;\n-pub use libc::funcs::bsd44::*;\n-pub use libc::funcs::extra::*;\n+pub use types::common::c95::*;\n+pub use types::common::c99::*;\n+pub use types::common::posix88::*;\n+pub use types::common::posix01::*;\n+pub use types::common::posix08::*;\n+pub use types::common::bsd44::*;\n+pub use types::os::common::posix01::*;\n+pub use types::os::common::bsd44::*;\n+pub use types::os::arch::c95::*;\n+pub use types::os::arch::c99::*;\n+pub use types::os::arch::posix88::*;\n+pub use types::os::arch::posix01::*;\n+pub use types::os::arch::posix08::*;\n+pub use types::os::arch::bsd44::*;\n+pub use types::os::arch::extra::*;\n+\n+pub use consts::os::c95::*;\n+pub use consts::os::c99::*;\n+pub use consts::os::posix88::*;\n+pub use consts::os::posix01::*;\n+pub use consts::os::posix08::*;\n+pub use consts::os::bsd44::*;\n+pub use consts::os::extra::*;\n+pub use consts::os::sysconf::*;\n+\n+pub use funcs::c95::ctype::*;\n+pub use funcs::c95::stdio::*;\n+pub use funcs::c95::stdlib::*;\n+pub use funcs::c95::string::*;\n+\n+pub use funcs::posix88::stat_::*;\n+pub use funcs::posix88::stdio::*;\n+pub use funcs::posix88::fcntl::*;\n+pub use funcs::posix88::dirent::*;\n+pub use funcs::posix88::unistd::*;\n+pub use funcs::posix88::mman::*;\n+\n+pub use funcs::posix01::stat_::*;\n+pub use funcs::posix01::unistd::*;\n+pub use funcs::posix01::glob::*;\n+pub use funcs::posix01::mman::*;\n+pub use funcs::posix08::unistd::*;\n+\n+pub use funcs::bsd43::*;\n+pub use funcs::bsd44::*;\n+pub use funcs::extra::*;\n \n #[cfg(target_os = \"win32\")]\n-pub use libc::funcs::extra::kernel32::*;\n+pub use funcs::extra::kernel32::*;\n #[cfg(target_os = \"win32\")]\n-pub use libc::funcs::extra::msvcrt::*;\n+pub use funcs::extra::msvcrt::*;\n \n // Explicit export lists for the intersection (provided here) mean that\n // you can write more-platform-agnostic code if you stick to just these\n // symbols.\n \n-pub use libc::types::common::c95::{FILE, c_void, fpos_t};\n-pub use libc::types::common::posix88::{DIR, dirent_t};\n-pub use libc::types::os::arch::c95::{c_char, c_double, c_float, c_int};\n-pub use libc::types::os::arch::c95::{c_long, c_short, c_uchar, c_ulong};\n-pub use libc::types::os::arch::c95::{c_ushort, clock_t, ptrdiff_t};\n-pub use libc::types::os::arch::c95::{size_t, time_t};\n-pub use libc::types::os::arch::c99::{c_longlong, c_ulonglong, intptr_t};\n-pub use libc::types::os::arch::c99::{uintptr_t};\n-pub use libc::types::os::arch::posix88::{dev_t, dirent_t, ino_t, mode_t};\n-pub use libc::types::os::arch::posix88::{off_t, pid_t, ssize_t};\n-\n-pub use libc::consts::os::c95::{_IOFBF, _IOLBF, _IONBF, BUFSIZ, EOF};\n-pub use libc::consts::os::c95::{EXIT_FAILURE, EXIT_SUCCESS};\n-pub use libc::consts::os::c95::{FILENAME_MAX, FOPEN_MAX, L_tmpnam};\n-pub use libc::consts::os::c95::{RAND_MAX, SEEK_CUR, SEEK_END};\n-pub use libc::consts::os::c95::{SEEK_SET, TMP_MAX};\n-pub use libc::consts::os::posix88::{F_OK, O_APPEND, O_CREAT, O_EXCL};\n-pub use libc::consts::os::posix88::{O_RDONLY, O_RDWR, O_TRUNC, O_WRONLY};\n-pub use libc::consts::os::posix88::{R_OK, S_IEXEC, S_IFBLK, S_IFCHR};\n-pub use libc::consts::os::posix88::{S_IFDIR, S_IFIFO, S_IFMT, S_IFREG, S_IFLNK};\n-pub use libc::consts::os::posix88::{S_IREAD, S_IRUSR, S_IRWXU, S_IWUSR};\n-pub use libc::consts::os::posix88::{STDERR_FILENO, STDIN_FILENO};\n-pub use libc::consts::os::posix88::{STDOUT_FILENO, W_OK, X_OK};\n-\n-pub use libc::funcs::c95::ctype::{isalnum, isalpha, iscntrl, isdigit};\n-pub use libc::funcs::c95::ctype::{islower, isprint, ispunct, isspace};\n-pub use libc::funcs::c95::ctype::{isupper, isxdigit, tolower, toupper};\n-\n-pub use libc::funcs::c95::stdio::{fclose, feof, ferror, fflush, fgetc};\n-pub use libc::funcs::c95::stdio::{fgetpos, fgets, fopen, fputc, fputs};\n-pub use libc::funcs::c95::stdio::{fread, freopen, fseek, fsetpos, ftell};\n-pub use libc::funcs::c95::stdio::{fwrite, perror, puts, remove, rewind};\n-pub use libc::funcs::c95::stdio::{setbuf, setvbuf, tmpfile, ungetc};\n-\n-pub use libc::funcs::c95::stdlib::{abs, atof, atoi, calloc, exit, _exit};\n-pub use libc::funcs::c95::stdlib::{free, getenv, labs, malloc, rand};\n-pub use libc::funcs::c95::stdlib::{realloc, srand, strtod, strtol};\n-pub use libc::funcs::c95::stdlib::{strtoul, system};\n-\n-pub use libc::funcs::c95::string::{memchr, memcmp};\n-pub use libc::funcs::c95::string::{strcat, strchr, strcmp};\n-pub use libc::funcs::c95::string::{strcoll, strcpy, strcspn, strerror};\n-pub use libc::funcs::c95::string::{strlen, strncat, strncmp, strncpy};\n-pub use libc::funcs::c95::string::{strpbrk, strrchr, strspn, strstr};\n-pub use libc::funcs::c95::string::{strtok, strxfrm};\n-\n-pub use libc::funcs::posix88::fcntl::{open, creat};\n-pub use libc::funcs::posix88::stat_::{chmod, fstat, mkdir, stat};\n-pub use libc::funcs::posix88::stdio::{fdopen, fileno, pclose, popen};\n-pub use libc::funcs::posix88::unistd::{access, chdir, close, dup, dup2};\n-pub use libc::funcs::posix88::unistd::{execv, execve, execvp, getcwd};\n-pub use libc::funcs::posix88::unistd::{getpid, isatty, lseek, pipe, read};\n-pub use libc::funcs::posix88::unistd::{rmdir, unlink, write};\n-\n+pub use types::common::c95::{FILE, c_void, fpos_t};\n+pub use types::common::posix88::{DIR, dirent_t};\n+pub use types::os::arch::c95::{c_char, c_double, c_float, c_int};\n+pub use types::os::arch::c95::{c_long, c_short, c_uchar, c_ulong};\n+pub use types::os::arch::c95::{c_ushort, clock_t, ptrdiff_t};\n+pub use types::os::arch::c95::{size_t, time_t};\n+pub use types::os::arch::c99::{c_longlong, c_ulonglong, intptr_t};\n+pub use types::os::arch::c99::{uintptr_t};\n+pub use types::os::arch::posix88::{dev_t, dirent_t, ino_t, mode_t};\n+pub use types::os::arch::posix88::{off_t, pid_t, ssize_t};\n+\n+pub use consts::os::c95::{_IOFBF, _IOLBF, _IONBF, BUFSIZ, EOF};\n+pub use consts::os::c95::{EXIT_FAILURE, EXIT_SUCCESS};\n+pub use consts::os::c95::{FILENAME_MAX, FOPEN_MAX, L_tmpnam};\n+pub use consts::os::c95::{RAND_MAX, SEEK_CUR, SEEK_END};\n+pub use consts::os::c95::{SEEK_SET, TMP_MAX};\n+pub use consts::os::posix88::{F_OK, O_APPEND, O_CREAT, O_EXCL};\n+pub use consts::os::posix88::{O_RDONLY, O_RDWR, O_TRUNC, O_WRONLY};\n+pub use consts::os::posix88::{R_OK, S_IEXEC, S_IFBLK, S_IFCHR};\n+pub use consts::os::posix88::{S_IFDIR, S_IFIFO, S_IFMT, S_IFREG, S_IFLNK};\n+pub use consts::os::posix88::{S_IREAD, S_IRUSR, S_IRWXU, S_IWUSR};\n+pub use consts::os::posix88::{STDERR_FILENO, STDIN_FILENO};\n+pub use consts::os::posix88::{STDOUT_FILENO, W_OK, X_OK};\n+\n+pub use funcs::c95::ctype::{isalnum, isalpha, iscntrl, isdigit};\n+pub use funcs::c95::ctype::{islower, isprint, ispunct, isspace};\n+pub use funcs::c95::ctype::{isupper, isxdigit, tolower, toupper};\n+\n+pub use funcs::c95::stdio::{fclose, feof, ferror, fflush, fgetc};\n+pub use funcs::c95::stdio::{fgetpos, fgets, fopen, fputc, fputs};\n+pub use funcs::c95::stdio::{fread, freopen, fseek, fsetpos, ftell};\n+pub use funcs::c95::stdio::{fwrite, perror, puts, remove, rewind};\n+pub use funcs::c95::stdio::{setbuf, setvbuf, tmpfile, ungetc};\n+\n+pub use funcs::c95::stdlib::{abs, atof, atoi, calloc, exit, _exit};\n+pub use funcs::c95::stdlib::{free, getenv, labs, malloc, rand};\n+pub use funcs::c95::stdlib::{realloc, srand, strtod, strtol};\n+pub use funcs::c95::stdlib::{strtoul, system};\n+\n+pub use funcs::c95::string::{memchr, memcmp};\n+pub use funcs::c95::string::{strcat, strchr, strcmp};\n+pub use funcs::c95::string::{strcoll, strcpy, strcspn, strerror};\n+pub use funcs::c95::string::{strlen, strncat, strncmp, strncpy};\n+pub use funcs::c95::string::{strpbrk, strrchr, strspn, strstr};\n+pub use funcs::c95::string::{strtok, strxfrm};\n+\n+pub use funcs::posix88::fcntl::{open, creat};\n+pub use funcs::posix88::stat_::{chmod, fstat, mkdir, stat};\n+pub use funcs::posix88::stdio::{fdopen, fileno, pclose, popen};\n+pub use funcs::posix88::unistd::{access, chdir, close, dup, dup2};\n+pub use funcs::posix88::unistd::{execv, execve, execvp, getcwd};\n+pub use funcs::posix88::unistd::{getpid, isatty, lseek, pipe, read};\n+pub use funcs::posix88::unistd::{rmdir, unlink, write};\n+\n+#[cfg(not(windows))]\n+#[link(name = \"c\")]\n+#[link(name = \"m\")]\n+extern {}\n+\n+/// A wrapper for a nullable pointer. Don't use this except for interacting\n+/// with libc. Basically Option, but without the dependance on libstd.\n+// If/when libprim happens, this can be removed in favor of that\n+pub enum Nullable<T> {\n+    Null,\n+    Some(T)\n+}\n \n pub mod types {\n \n@@ -237,8 +257,8 @@ pub mod types {\n     pub mod os {\n         pub mod common {\n             pub mod posix01 {\n-                use libc::types::common::c95::{c_void};\n-                use libc::types::os::arch::c95::{c_char, c_ulong, size_t,\n+                use types::common::c95::{c_void};\n+                use types::os::arch::c95::{c_char, c_ulong, size_t,\n                                                  time_t, suseconds_t, c_long};\n \n                 pub type pthread_t = c_ulong;\n@@ -270,7 +290,7 @@ pub mod types {\n                 pub type sighandler_t = size_t;\n             }\n             pub mod bsd44 {\n-                use libc::types::os::arch::c95::{c_char, c_int, c_uint};\n+                use types::os::arch::c95::{c_char, c_int, c_uint};\n \n                 pub type socklen_t = u32;\n                 pub type sa_family_t = u16;\n@@ -385,10 +405,10 @@ pub mod types {\n             }\n             #[cfg(target_arch = \"x86\")]\n             pub mod posix01 {\n-                use libc::types::os::arch::c95::{c_short, c_long, time_t};\n-                use libc::types::os::arch::posix88::{dev_t, gid_t, ino_t};\n-                use libc::types::os::arch::posix88::{mode_t, off_t};\n-                use libc::types::os::arch::posix88::{uid_t};\n+                use types::os::arch::c95::{c_short, c_long, time_t};\n+                use types::os::arch::posix88::{dev_t, gid_t, ino_t};\n+                use types::os::arch::posix88::{mode_t, off_t};\n+                use types::os::arch::posix88::{uid_t};\n \n                 pub type nlink_t = u32;\n                 pub type blksize_t = i32;\n@@ -428,9 +448,9 @@ pub mod types {\n             }\n             #[cfg(target_arch = \"arm\")]\n             pub mod posix01 {\n-                use libc::types::os::arch::c95::{c_uchar, c_uint, c_ulong, time_t};\n-                use libc::types::os::arch::c99::{c_longlong, c_ulonglong};\n-                use libc::types::os::arch::posix88::{uid_t, gid_t, ino_t};\n+                use types::os::arch::c95::{c_uchar, c_uint, c_ulong, time_t};\n+                use types::os::arch::c99::{c_longlong, c_ulonglong};\n+                use types::os::arch::posix88::{uid_t, gid_t, ino_t};\n \n                 pub type nlink_t = u16;\n                 pub type blksize_t = u32;\n@@ -469,10 +489,10 @@ pub mod types {\n             }\n             #[cfg(target_arch = \"mips\")]\n             pub mod posix01 {\n-                use libc::types::os::arch::c95::{c_long, c_ulong, time_t};\n-                use libc::types::os::arch::posix88::{gid_t, ino_t};\n-                use libc::types::os::arch::posix88::{mode_t, off_t};\n-                use libc::types::os::arch::posix88::{uid_t};\n+                use types::os::arch::c95::{c_long, c_ulong, time_t};\n+                use types::os::arch::posix88::{gid_t, ino_t};\n+                use types::os::arch::posix88::{mode_t, off_t};\n+                use types::os::arch::posix88::{uid_t};\n \n                 pub type nlink_t = u32;\n                 pub type blksize_t = i32;\n@@ -554,10 +574,10 @@ pub mod types {\n                 pub type ssize_t = i64;\n             }\n             pub mod posix01 {\n-                use libc::types::os::arch::c95::{c_int, c_long, time_t};\n-                use libc::types::os::arch::posix88::{dev_t, gid_t, ino_t};\n-                use libc::types::os::arch::posix88::{mode_t, off_t};\n-                use libc::types::os::arch::posix88::{uid_t};\n+                use types::os::arch::c95::{c_int, c_long, time_t};\n+                use types::os::arch::posix88::{dev_t, gid_t, ino_t};\n+                use types::os::arch::posix88::{mode_t, off_t};\n+                use types::os::arch::posix88::{uid_t};\n \n                 pub type nlink_t = u64;\n                 pub type blksize_t = i64;\n@@ -605,10 +625,10 @@ pub mod types {\n     pub mod os {\n         pub mod common {\n             pub mod posix01 {\n-                use libc::types::common::c95::{c_void};\n-                use libc::types::os::arch::c95::{c_char, c_int, size_t,\n+                use types::common::c95::{c_void};\n+                use types::os::arch::c95::{c_char, c_int, size_t,\n                                                  time_t, suseconds_t, c_long};\n-                use libc::types::os::arch::c99::{uintptr_t};\n+                use types::os::arch::c99::{uintptr_t};\n \n                 pub type pthread_t = uintptr_t;\n \n@@ -643,7 +663,7 @@ pub mod types {\n                 pub type sighandler_t = size_t;\n             }\n             pub mod bsd44 {\n-                use libc::types::os::arch::c95::{c_char, c_int, c_uint};\n+                use types::os::arch::c95::{c_char, c_int, c_uint};\n \n                 pub type socklen_t = u32;\n                 pub type sa_family_t = u8;\n@@ -747,12 +767,12 @@ pub mod types {\n                 pub type ssize_t = i64;\n             }\n             pub mod posix01 {\n-                use libc::types::common::c95::{c_void};\n-                use libc::types::common::c99::{uint8_t, uint32_t, int32_t};\n-                use libc::types::os::arch::c95::{c_long, time_t};\n-                use libc::types::os::arch::posix88::{dev_t, gid_t, ino_t};\n-                use libc::types::os::arch::posix88::{mode_t, off_t};\n-                use libc::types::os::arch::posix88::{uid_t};\n+                use types::common::c95::{c_void};\n+                use types::common::c99::{uint8_t, uint32_t, int32_t};\n+                use types::os::arch::c95::{c_long, time_t};\n+                use types::os::arch::posix88::{dev_t, gid_t, ino_t};\n+                use types::os::arch::posix88::{mode_t, off_t};\n+                use types::os::arch::posix88::{uid_t};\n \n                 pub type nlink_t = u16;\n                 pub type blksize_t = i64;\n@@ -803,11 +823,11 @@ pub mod types {\n     pub mod os {\n         pub mod common {\n             pub mod posix01 {\n-                use libc::types::os::arch::c95::{c_short, time_t, suseconds_t,\n+                use types::os::arch::c95::{c_short, time_t, suseconds_t,\n                                                  c_long};\n-                use libc::types::os::arch::extra::{int64, time64_t};\n-                use libc::types::os::arch::posix88::{dev_t, ino_t};\n-                use libc::types::os::arch::posix88::mode_t;\n+                use types::os::arch::extra::{int64, time64_t};\n+                use types::os::arch::posix88::{dev_t, ino_t};\n+                use types::os::arch::posix88::mode_t;\n \n                 // pub Note: this is the struct called stat64 in win32. Not stat,\n                 // nor stati64.\n@@ -845,7 +865,7 @@ pub mod types {\n             }\n \n             pub mod bsd44 {\n-                use libc::types::os::arch::c95::{c_char, c_int, c_uint, size_t};\n+                use types::os::arch::c95::{c_char, c_int, c_uint, size_t};\n \n                 pub type SOCKET = c_uint;\n                 pub type socklen_t = c_int;\n@@ -978,13 +998,13 @@ pub mod types {\n             }\n             pub mod extra {\n                 use ptr;\n-                use libc::consts::os::extra::{MAX_PROTOCOL_CHAIN,\n+                use consts::os::extra::{MAX_PROTOCOL_CHAIN,\n                                               WSAPROTOCOL_LEN};\n-                use libc::types::common::c95::c_void;\n-                use libc::types::os::arch::c95::{c_char, c_int, c_uint, size_t};\n-                use libc::types::os::arch::c95::{c_long, c_ulong};\n-                use libc::types::os::arch::c95::{wchar_t};\n-                use libc::types::os::arch::c99::{c_ulonglong, c_longlong};\n+                use types::common::c95::c_void;\n+                use types::os::arch::c95::{c_char, c_int, c_uint, size_t};\n+                use types::os::arch::c95::{c_long, c_ulong};\n+                use types::os::arch::c95::{wchar_t};\n+                use types::os::arch::c99::{c_ulonglong, c_longlong};\n \n                 pub type BOOL = c_int;\n                 pub type BYTE = u8;\n@@ -1176,10 +1196,10 @@ pub mod types {\n     pub mod os {\n         pub mod common {\n             pub mod posix01 {\n-                use libc::types::common::c95::c_void;\n-                use libc::types::os::arch::c95::{c_char, c_int, size_t,\n+                use types::common::c95::c_void;\n+                use types::os::arch::c95::{c_char, c_int, size_t,\n                                                  time_t, suseconds_t, c_long};\n-                use libc::types::os::arch::c99::{uintptr_t};\n+                use types::os::arch::c99::{uintptr_t};\n \n                 pub type pthread_t = uintptr_t;\n \n@@ -1215,7 +1235,7 @@ pub mod types {\n             }\n \n             pub mod bsd44 {\n-                use libc::types::os::arch::c95::{c_char, c_int, c_uint};\n+                use types::os::arch::c95::{c_char, c_int, c_uint};\n \n                 pub type socklen_t = c_int;\n                 pub type sa_family_t = u8;\n@@ -1320,9 +1340,9 @@ pub mod types {\n                 pub type ssize_t = i32;\n             }\n             pub mod posix01 {\n-                use libc::types::common::c99::{int32_t, int64_t, uint32_t};\n-                use libc::types::os::arch::c95::{c_char, c_long, time_t};\n-                use libc::types::os::arch::posix88::{dev_t, gid_t, ino_t,\n+                use types::common::c99::{int32_t, int64_t, uint32_t};\n+                use types::os::arch::c95::{c_char, c_long, time_t};\n+                use types::os::arch::posix88::{dev_t, gid_t, ino_t,\n                                                      mode_t, off_t, uid_t};\n \n                 pub type nlink_t = u16;\n@@ -1417,11 +1437,11 @@ pub mod types {\n                 pub type ssize_t = i64;\n             }\n             pub mod posix01 {\n-                use libc::types::common::c99::{int32_t, int64_t};\n-                use libc::types::common::c99::{uint32_t};\n-                use libc::types::os::arch::c95::{c_char, c_long, time_t};\n-                use libc::types::os::arch::posix88::{dev_t, gid_t, ino_t};\n-                use libc::types::os::arch::posix88::{mode_t, off_t, uid_t};\n+                use types::common::c99::{int32_t, int64_t};\n+                use types::common::c99::{uint32_t};\n+                use types::os::arch::c95::{c_char, c_long, time_t};\n+                use types::os::arch::posix88::{dev_t, gid_t, ino_t};\n+                use types::os::arch::posix88::{mode_t, off_t, uid_t};\n \n                 pub type nlink_t = u16;\n                 pub type blksize_t = i64;\n@@ -1485,7 +1505,7 @@ pub mod consts {\n     #[cfg(target_os = \"win32\")]\n     pub mod os {\n         pub mod c95 {\n-            use libc::types::os::arch::c95::{c_int, c_uint};\n+            use types::os::arch::c95::{c_int, c_uint};\n \n             pub static EXIT_FAILURE : c_int = 1;\n             pub static EXIT_SUCCESS : c_int = 0;\n@@ -1559,7 +1579,7 @@ pub mod consts {\n         pub mod c99 {\n         }\n         pub mod posix88 {\n-            use libc::types::os::arch::c95::c_int;\n+            use types::os::arch::c95::c_int;\n \n             pub static O_RDONLY : c_int = 0;\n             pub static O_WRONLY : c_int = 1;\n@@ -1595,7 +1615,7 @@ pub mod consts {\n         pub mod posix08 {\n         }\n         pub mod bsd44 {\n-            use libc::types::os::arch::c95::c_int;\n+            use types::os::arch::c95::c_int;\n \n             pub static AF_INET: c_int = 2;\n             pub static AF_INET6: c_int = 23;\n@@ -1623,8 +1643,8 @@ pub mod consts {\n             pub static SHUT_RDWR: c_int = 2;\n         }\n         pub mod extra {\n-            use libc::types::os::arch::c95::c_int;\n-            use libc::types::os::arch::extra::{WORD, DWORD, BOOL};\n+            use types::os::arch::c95::c_int;\n+            use types::os::arch::extra::{WORD, DWORD, BOOL};\n \n             pub static TRUE : BOOL = 1;\n             pub static FALSE : BOOL = 0;\n@@ -1852,7 +1872,7 @@ pub mod consts {\n     #[cfg(target_os = \"android\")]\n     pub mod os {\n         pub mod c95 {\n-            use libc::types::os::arch::c95::{c_int, c_uint};\n+            use types::os::arch::c95::{c_int, c_uint};\n \n             pub static EXIT_FAILURE : c_int = 1;\n             pub static EXIT_SUCCESS : c_int = 0;\n@@ -1876,8 +1896,8 @@ pub mod consts {\n         #[cfg(target_arch = \"x86_64\")]\n         #[cfg(target_arch = \"arm\")]\n         pub mod posix88 {\n-            use libc::types::os::arch::c95::c_int;\n-            use libc::types::common::c95::c_void;\n+            use types::os::arch::c95::c_int;\n+            use types::common::c95::c_void;\n \n             pub static O_RDONLY : c_int = 0;\n             pub static O_WRONLY : c_int = 1;\n@@ -2087,8 +2107,8 @@ pub mod consts {\n \n         #[cfg(target_arch = \"mips\")]\n         pub mod posix88 {\n-            use libc::types::os::arch::c95::c_int;\n-            use libc::types::common::c95::c_void;\n+            use types::os::arch::c95::c_int;\n+            use types::common::c95::c_void;\n \n             pub static O_RDONLY : c_int = 0;\n             pub static O_WRONLY : c_int = 1;\n@@ -2295,7 +2315,7 @@ pub mod consts {\n             pub static EDQUOT: c_int = 1133;\n         }\n         pub mod posix01 {\n-            use libc::types::os::arch::c95::{c_int, size_t};\n+            use types::os::arch::c95::{c_int, size_t};\n \n             pub static SIGTRAP : c_int = 5;\n             pub static SIGPIPE: c_int = 13;\n@@ -2370,7 +2390,7 @@ pub mod consts {\n         pub mod posix08 {\n         }\n         pub mod bsd44 {\n-            use libc::types::os::arch::c95::c_int;\n+            use types::os::arch::c95::c_int;\n \n             pub static MADV_NORMAL : c_int = 0;\n             pub static MADV_RANDOM : c_int = 1;\n@@ -2414,7 +2434,7 @@ pub mod consts {\n         #[cfg(target_arch = \"x86_64\")]\n         #[cfg(target_arch = \"arm\")]\n         pub mod extra {\n-            use libc::types::os::arch::c95::c_int;\n+            use types::os::arch::c95::c_int;\n \n             pub static O_RSYNC : c_int = 1052672;\n             pub static O_DSYNC : c_int = 4096;\n@@ -2437,7 +2457,7 @@ pub mod consts {\n         }\n         #[cfg(target_arch = \"mips\")]\n         pub mod extra {\n-            use libc::types::os::arch::c95::c_int;\n+            use types::os::arch::c95::c_int;\n \n             pub static O_RSYNC : c_int = 16400;\n             pub static O_DSYNC : c_int = 16;\n@@ -2459,7 +2479,7 @@ pub mod consts {\n         }\n         #[cfg(target_os = \"linux\")]\n         pub mod sysconf {\n-            use libc::types::os::arch::c95::c_int;\n+            use types::os::arch::c95::c_int;\n \n             pub static _SC_ARG_MAX : c_int = 0;\n             pub static _SC_CHILD_MAX : c_int = 1;\n@@ -2520,7 +2540,7 @@ pub mod consts {\n         }\n         #[cfg(target_os = \"android\")]\n         pub mod sysconf {\n-            use libc::types::os::arch::c95::c_int;\n+            use types::os::arch::c95::c_int;\n \n             pub static _SC_ARG_MAX : c_int = 0;\n             pub static _SC_BC_BASE_MAX : c_int = 1;\n@@ -2557,7 +2577,7 @@ pub mod consts {\n     #[cfg(target_os = \"freebsd\")]\n     pub mod os {\n         pub mod c95 {\n-            use libc::types::os::arch::c95::{c_int, c_uint};\n+            use types::os::arch::c95::{c_int, c_uint};\n \n             pub static EXIT_FAILURE : c_int = 1;\n             pub static EXIT_SUCCESS : c_int = 0;\n@@ -2578,8 +2598,8 @@ pub mod consts {\n         pub mod c99 {\n         }\n         pub mod posix88 {\n-            use libc::types::common::c95::c_void;\n-            use libc::types::os::arch::c95::c_int;\n+            use types::common::c95::c_void;\n+            use types::os::arch::c95::c_int;\n \n             pub static O_RDONLY : c_int = 0;\n             pub static O_WRONLY : c_int = 1;\n@@ -2748,7 +2768,7 @@ pub mod consts {\n             pub static ELAST : c_int = 99;\n         }\n         pub mod posix01 {\n-            use libc::types::os::arch::c95::{c_int, size_t};\n+            use types::os::arch::c95::{c_int, size_t};\n \n             pub static SIGTRAP : c_int = 5;\n             pub static SIGPIPE: c_int = 13;\n@@ -2820,7 +2840,7 @@ pub mod consts {\n         pub mod posix08 {\n         }\n         pub mod bsd44 {\n-            use libc::types::os::arch::c95::c_int;\n+            use types::os::arch::c95::c_int;\n \n             pub static MADV_NORMAL : c_int = 0;\n             pub static MADV_RANDOM : c_int = 1;\n@@ -2869,7 +2889,7 @@ pub mod consts {\n             pub static SHUT_RDWR: c_int = 2;\n         }\n         pub mod extra {\n-            use libc::types::os::arch::c95::c_int;\n+            use types::os::arch::c95::c_int;\n \n             pub static O_SYNC : c_int = 128;\n             pub static CTL_KERN: c_int = 1;\n@@ -2885,7 +2905,7 @@ pub mod consts {\n             pub static MAP_NOCORE : c_int = 0x020000;\n         }\n         pub mod sysconf {\n-            use libc::types::os::arch::c95::c_int;\n+            use types::os::arch::c95::c_int;\n \n             pub static _SC_ARG_MAX : c_int = 1;\n             pub static _SC_CHILD_MAX : c_int = 2;\n@@ -2945,7 +2965,7 @@ pub mod consts {\n     #[cfg(target_os = \"macos\")]\n     pub mod os {\n         pub mod c95 {\n-            use libc::types::os::arch::c95::{c_int, c_uint};\n+            use types::os::arch::c95::{c_int, c_uint};\n \n             pub static EXIT_FAILURE : c_int = 1;\n             pub static EXIT_SUCCESS : c_int = 0;\n@@ -2966,8 +2986,8 @@ pub mod consts {\n         pub mod c99 {\n         }\n         pub mod posix88 {\n-            use libc::types::common::c95::c_void;\n-            use libc::types::os::arch::c95::c_int;\n+            use types::common::c95::c_void;\n+            use types::os::arch::c95::c_int;\n \n             pub static O_RDONLY : c_int = 0;\n             pub static O_WRONLY : c_int = 1;\n@@ -3147,7 +3167,7 @@ pub mod consts {\n             pub static ELAST : c_int = 106;\n         }\n         pub mod posix01 {\n-            use libc::types::os::arch::c95::{c_int, size_t};\n+            use types::os::arch::c95::{c_int, size_t};\n \n             pub static SIGTRAP : c_int = 5;\n             pub static SIGPIPE: c_int = 13;\n@@ -3209,7 +3229,7 @@ pub mod consts {\n         pub mod posix08 {\n         }\n         pub mod bsd44 {\n-            use libc::types::os::arch::c95::c_int;\n+            use types::os::arch::c95::c_int;\n \n             pub static MADV_NORMAL : c_int = 0;\n             pub static MADV_RANDOM : c_int = 1;\n@@ -3256,7 +3276,7 @@ pub mod consts {\n             pub static SHUT_RDWR: c_int = 2;\n         }\n         pub mod extra {\n-            use libc::types::os::arch::c95::c_int;\n+            use types::os::arch::c95::c_int;\n \n             pub static O_DSYNC : c_int = 4194304;\n             pub static O_SYNC : c_int = 128;\n@@ -3271,7 +3291,7 @@ pub mod consts {\n             pub static MAP_JIT : c_int = 0x0800;\n         }\n         pub mod sysconf {\n-            use libc::types::os::arch::c95::c_int;\n+            use types::os::arch::c95::c_int;\n \n             pub static _SC_ARG_MAX : c_int = 1;\n             pub static _SC_CHILD_MAX : c_int = 2;\n@@ -3340,7 +3360,7 @@ pub mod funcs {\n \n     pub mod c95 {\n         pub mod ctype {\n-            use libc::types::os::arch::c95::{c_char, c_int};\n+            use types::os::arch::c95::{c_char, c_int};\n \n             extern {\n                 pub fn isalnum(c: c_int) -> c_int;\n@@ -3360,8 +3380,8 @@ pub mod funcs {\n         }\n \n         pub mod stdio {\n-            use libc::types::common::c95::{FILE, c_void, fpos_t};\n-            use libc::types::os::arch::c95::{c_char, c_int, c_long, size_t};\n+            use types::common::c95::{FILE, c_void, fpos_t};\n+            use types::os::arch::c95::{c_char, c_int, c_long, size_t};\n \n             extern {\n                 pub fn fopen(filename: *c_char, mode: *c_char) -> *FILE;\n@@ -3415,10 +3435,10 @@ pub mod funcs {\n         }\n \n         pub mod stdlib {\n-            use libc::types::common::c95::c_void;\n-            use libc::types::os::arch::c95::{c_char, c_double, c_int};\n-            use libc::types::os::arch::c95::{c_long, c_uint, c_ulong};\n-            use libc::types::os::arch::c95::{size_t};\n+            use types::common::c95::c_void;\n+            use types::os::arch::c95::{c_char, c_double, c_int};\n+            use types::os::arch::c95::{c_long, c_uint, c_ulong};\n+            use types::os::arch::c95::{size_t};\n \n             extern {\n                 pub fn abs(i: c_int) -> c_int;\n@@ -3447,9 +3467,9 @@ pub mod funcs {\n         }\n \n         pub mod string {\n-            use libc::types::common::c95::c_void;\n-            use libc::types::os::arch::c95::{c_char, c_int, size_t};\n-            use libc::types::os::arch::c95::{wchar_t};\n+            use types::common::c95::c_void;\n+            use types::os::arch::c95::{c_char, c_int, size_t};\n+            use types::os::arch::c95::{wchar_t};\n \n             extern {\n                 pub fn strcpy(dst: *c_char, src: *c_char) -> *c_char;\n@@ -3491,8 +3511,8 @@ pub mod funcs {\n     #[cfg(target_os = \"win32\")]\n     pub mod posix88 {\n         pub mod stat_ {\n-            use libc::types::os::common::posix01::{stat, utimbuf};\n-            use libc::types::os::arch::c95::{c_int, c_char, wchar_t};\n+            use types::os::common::posix01::{stat, utimbuf};\n+            use types::os::arch::c95::{c_int, c_char, wchar_t};\n \n             extern {\n                 #[link_name = \"_chmod\"]\n@@ -3515,8 +3535,8 @@ pub mod funcs {\n         }\n \n         pub mod stdio {\n-            use libc::types::common::c95::FILE;\n-            use libc::types::os::arch::c95::{c_int, c_char};\n+            use types::common::c95::FILE;\n+            use types::os::arch::c95::{c_int, c_char};\n \n             extern {\n                 #[link_name = \"_popen\"]\n@@ -3531,7 +3551,7 @@ pub mod funcs {\n         }\n \n         pub mod fcntl {\n-            use libc::types::os::arch::c95::{c_int, c_char, wchar_t};\n+            use types::os::arch::c95::{c_int, c_char, wchar_t};\n             extern {\n                 #[link_name = \"_open\"]\n                 pub fn open(path: *c_char, oflag: c_int, mode: c_int)\n@@ -3549,10 +3569,10 @@ pub mod funcs {\n         }\n \n         pub mod unistd {\n-            use libc::types::common::c95::c_void;\n-            use libc::types::os::arch::c95::{c_int, c_uint, c_char,\n+            use types::common::c95::c_void;\n+            use types::os::arch::c95::{c_int, c_uint, c_char,\n                                              c_long, size_t};\n-            use libc::types::os::arch::c99::intptr_t;\n+            use types::os::arch::c99::intptr_t;\n \n             extern {\n                 #[link_name = \"_access\"]\n@@ -3610,9 +3630,9 @@ pub mod funcs {\n     #[cfg(target_os = \"freebsd\")]\n     pub mod posix88 {\n         pub mod stat_ {\n-            use libc::types::os::arch::c95::{c_char, c_int};\n-            use libc::types::os::arch::posix01::stat;\n-            use libc::types::os::arch::posix88::mode_t;\n+            use types::os::arch::c95::{c_char, c_int};\n+            use types::os::arch::posix01::stat;\n+            use types::os::arch::posix88::mode_t;\n \n             extern {\n                 pub fn chmod(path: *c_char, mode: mode_t) -> c_int;\n@@ -3642,8 +3662,8 @@ pub mod funcs {\n         }\n \n         pub mod stdio {\n-            use libc::types::common::c95::FILE;\n-            use libc::types::os::arch::c95::{c_char, c_int};\n+            use types::common::c95::FILE;\n+            use types::os::arch::c95::{c_char, c_int};\n \n             extern {\n                 pub fn popen(command: *c_char, mode: *c_char) -> *FILE;\n@@ -3654,8 +3674,8 @@ pub mod funcs {\n         }\n \n         pub mod fcntl {\n-            use libc::types::os::arch::c95::{c_char, c_int};\n-            use libc::types::os::arch::posix88::mode_t;\n+            use types::os::arch::c95::{c_char, c_int};\n+            use types::os::arch::posix88::mode_t;\n \n             extern {\n                 pub fn open(path: *c_char, oflag: c_int, mode: c_int)\n@@ -3666,8 +3686,8 @@ pub mod funcs {\n         }\n \n         pub mod dirent {\n-            use libc::types::common::posix88::{DIR, dirent_t};\n-            use libc::types::os::arch::c95::{c_char, c_int, c_long};\n+            use types::common::posix88::{DIR, dirent_t};\n+            use types::os::arch::c95::{c_char, c_int, c_long};\n \n             // NB: On OS X opendir and readdir have two versions,\n             // one for 32-bit kernelspace and one for 64.\n@@ -3699,13 +3719,13 @@ pub mod funcs {\n         }\n \n         pub mod unistd {\n-            use libc::types::common::c95::c_void;\n-            use libc::types::os::arch::c95::{c_char, c_int, c_long, c_uint};\n-            use libc::types::os::arch::c95::{size_t};\n-            use libc::types::os::common::posix01::timespec;\n-            use libc::types::os::arch::posix01::utimbuf;\n-            use libc::types::os::arch::posix88::{gid_t, off_t, pid_t};\n-            use libc::types::os::arch::posix88::{ssize_t, uid_t};\n+            use types::common::c95::c_void;\n+            use types::os::arch::c95::{c_char, c_int, c_long, c_uint};\n+            use types::os::arch::c95::{size_t};\n+            use types::os::common::posix01::timespec;\n+            use types::os::arch::posix01::utimbuf;\n+            use types::os::arch::posix88::{gid_t, off_t, pid_t};\n+            use types::os::arch::posix88::{ssize_t, uid_t};\n \n             pub static _PC_NAME_MAX: c_int = 4;\n \n@@ -3768,18 +3788,18 @@ pub mod funcs {\n         }\n \n         pub mod signal {\n-            use libc::types::os::arch::c95::{c_int};\n-            use libc::types::os::arch::posix88::{pid_t};\n+            use types::os::arch::c95::{c_int};\n+            use types::os::arch::posix88::{pid_t};\n \n             extern {\n                 pub fn kill(pid: pid_t, sig: c_int) -> c_int;\n             }\n         }\n \n         pub mod mman {\n-            use libc::types::common::c95::{c_void};\n-            use libc::types::os::arch::c95::{size_t, c_int, c_char};\n-            use libc::types::os::arch::posix88::{mode_t, off_t};\n+            use types::common::c95::{c_void};\n+            use types::os::arch::c95::{size_t, c_int, c_char};\n+            use types::os::arch::posix88::{mode_t, off_t};\n \n             extern {\n                 pub fn mlock(addr: *c_void, len: size_t) -> c_int;\n@@ -3814,8 +3834,8 @@ pub mod funcs {\n     #[cfg(target_os = \"freebsd\")]\n     pub mod posix01 {\n         pub mod stat_ {\n-            use libc::types::os::arch::c95::{c_char, c_int};\n-            use libc::types::os::arch::posix01::stat;\n+            use types::os::arch::c95::{c_char, c_int};\n+            use types::os::arch::posix01::stat;\n \n             extern {\n                 #[cfg(target_os = \"linux\")]\n@@ -3830,8 +3850,8 @@ pub mod funcs {\n         }\n \n         pub mod unistd {\n-            use libc::types::os::arch::c95::{c_char, c_int, size_t};\n-            use libc::types::os::arch::posix88::{ssize_t, off_t};\n+            use types::os::arch::c95::{c_char, c_int, size_t};\n+            use types::os::arch::posix88::{ssize_t, off_t};\n \n             extern {\n                 pub fn readlink(path: *c_char,\n@@ -3857,8 +3877,8 @@ pub mod funcs {\n         }\n \n         pub mod signal {\n-            use libc::types::os::arch::c95::c_int;\n-            use libc::types::os::common::posix01::sighandler_t;\n+            use types::os::arch::c95::c_int;\n+            use types::os::common::posix01::sighandler_t;\n \n             #[cfg(not(target_os = \"android\"))]\n             extern {\n@@ -3875,8 +3895,8 @@ pub mod funcs {\n         }\n \n         pub mod wait {\n-            use libc::types::os::arch::c95::{c_int};\n-            use libc::types::os::arch::posix88::{pid_t};\n+            use types::os::arch::c95::{c_int};\n+            use types::os::arch::posix88::{pid_t};\n \n             extern {\n                 pub fn waitpid(pid: pid_t, status: *mut c_int, options: c_int)\n@@ -3885,22 +3905,22 @@ pub mod funcs {\n         }\n \n         pub mod glob {\n-            use libc::types::os::arch::c95::{c_char, c_int};\n-            use libc::types::os::common::posix01::{glob_t};\n-            use option::Option;\n+            use types::os::arch::c95::{c_char, c_int};\n+            use types::os::common::posix01::{glob_t};\n+            use Nullable;\n \n             extern {\n                 pub fn glob(pattern: *c_char,\n                             flags: c_int,\n-                            errfunc: Option<extern \"C\" fn(epath: *c_char, errno: int) -> int>,\n+                            errfunc: Nullable<extern \"C\" fn(epath: *c_char, errno: int) -> int>,\n                             pglob: *mut glob_t);\n                 pub fn globfree(pglob: *mut glob_t);\n             }\n         }\n \n         pub mod mman {\n-            use libc::types::common::c95::{c_void};\n-            use libc::types::os::arch::c95::{c_int, size_t};\n+            use types::common::c95::{c_void};\n+            use types::os::arch::c95::{c_int, size_t};\n \n             extern {\n                 pub fn posix_madvise(addr: *c_void,\n@@ -3939,10 +3959,10 @@ pub mod funcs {\n \n     #[cfg(not(windows))]\n     pub mod bsd43 {\n-        use libc::types::common::c95::{c_void};\n-        use libc::types::os::common::bsd44::{socklen_t, sockaddr};\n-        use libc::types::os::arch::c95::{c_int, size_t};\n-        use libc::types::os::arch::posix88::ssize_t;\n+        use types::common::c95::{c_void};\n+        use types::os::common::bsd44::{socklen_t, sockaddr};\n+        use types::os::arch::c95::{c_int, size_t};\n+        use types::os::arch::posix88::ssize_t;\n \n         extern \"system\" {\n             pub fn socket(domain: c_int, ty: c_int, protocol: c_int) -> c_int;\n@@ -3975,10 +3995,10 @@ pub mod funcs {\n \n     #[cfg(windows)]\n     pub mod bsd43 {\n-        use libc::types::common::c95::{c_void};\n-        use libc::types::os::common::bsd44::{socklen_t, sockaddr, SOCKET};\n-        use libc::types::os::arch::c95::c_int;\n-        use libc::types::os::arch::posix88::ssize_t;\n+        use types::common::c95::{c_void};\n+        use types::os::common::bsd44::{socklen_t, sockaddr, SOCKET};\n+        use types::os::arch::c95::c_int;\n+        use types::os::arch::posix88::ssize_t;\n \n         extern \"system\" {\n             pub fn socket(domain: c_int, ty: c_int, protocol: c_int) -> SOCKET;\n@@ -4013,8 +4033,8 @@ pub mod funcs {\n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"freebsd\")]\n     pub mod bsd44 {\n-        use libc::types::common::c95::{c_void};\n-        use libc::types::os::arch::c95::{c_char, c_uchar, c_int, c_uint, size_t};\n+        use types::common::c95::{c_void};\n+        use types::os::arch::c95::{c_char, c_uchar, c_int, c_uint, size_t};\n \n         extern {\n             pub fn sysctl(name: *c_int,\n@@ -4046,8 +4066,8 @@ pub mod funcs {\n     #[cfg(target_os = \"linux\")]\n     #[cfg(target_os = \"android\")]\n     pub mod bsd44 {\n-        use libc::types::common::c95::{c_void};\n-        use libc::types::os::arch::c95::{c_uchar, c_int, size_t};\n+        use types::common::c95::{c_void};\n+        use types::os::arch::c95::{c_uchar, c_int, size_t};\n \n         extern {\n             pub fn getdtablesize() -> c_int;\n@@ -4065,7 +4085,7 @@ pub mod funcs {\n \n     #[cfg(target_os = \"macos\")]\n     pub mod extra {\n-        use libc::types::os::arch::c95::{c_char, c_int};\n+        use types::os::arch::c95::{c_char, c_int};\n \n         extern {\n             pub fn _NSGetExecutablePath(buf: *mut c_char, bufsize: *mut u32)\n@@ -4087,8 +4107,8 @@ pub mod funcs {\n     pub mod extra {\n \n         pub mod kernel32 {\n-            use libc::types::os::arch::c95::{c_uint};\n-            use libc::types::os::arch::extra::{BOOL, DWORD, SIZE_T, HMODULE,\n+            use types::os::arch::c95::{c_uint};\n+            use types::os::arch::extra::{BOOL, DWORD, SIZE_T, HMODULE,\n                                                LPCWSTR, LPWSTR, LPCSTR, LPSTR,\n                                                LPCH, LPDWORD, LPVOID,\n                                                LPCVOID, LPOVERLAPPED,\n@@ -4284,8 +4304,8 @@ pub mod funcs {\n         }\n \n         pub mod msvcrt {\n-            use libc::types::os::arch::c95::{c_int, c_long};\n-            use libc::types::os::arch::c99::intptr_t;\n+            use types::os::arch::c95::{c_int, c_long};\n+            use types::os::arch::c99::intptr_t;\n \n             extern {\n                 #[link_name = \"_commit\"]", "previous_filename": "src/libstd/libc.rs"}, {"sha": "ea2c6e7b10122b83ce886fdaa495eb3ff3c2fd72", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/308c03501a9a49d058f2ad76dd17a4e593ce7be7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308c03501a9a49d058f2ad76dd17a4e593ce7be7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=308c03501a9a49d058f2ad76dd17a4e593ce7be7", "patch": "@@ -27,6 +27,7 @@ use middle::ty;\n use util::sha2::Sha256;\n use util::nodemap::{NodeMap, NodeSet, DefIdMap};\n \n+use libc::c_uint;\n use std::cell::{Cell, RefCell};\n use std::c_str::ToCStr;\n use std::ptr;"}, {"sha": "e3a263c776bb78d56647a21a4812ff6ad790a676", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/308c03501a9a49d058f2ad76dd17a4e593ce7be7/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308c03501a9a49d058f2ad76dd17a4e593ce7be7/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=308c03501a9a49d058f2ad76dd17a4e593ce7be7", "patch": "@@ -73,6 +73,9 @@\n // Make and rand accessible for benchmarking/testcases\n #[cfg(test)] extern crate rand;\n \n+// we wrap some libc stuff\n+extern crate libc;\n+\n // Make std testable by not duplicating lang items. See #2912\n #[cfg(test)] extern crate realstd = \"std\";\n #[cfg(test)] pub use kinds = realstd::kinds;\n@@ -176,8 +179,6 @@ pub mod sync;\n \n /* Runtime and platform support */\n \n-#[unstable]\n-pub mod libc;\n pub mod c_str;\n pub mod c_vec;\n pub mod os;"}, {"sha": "f954bcabe5aa9d4271aaa9d99a004f8cbf11b678", "filename": "src/libstd/rtdeps.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/308c03501a9a49d058f2ad76dd17a4e593ce7be7/src%2Flibstd%2Frtdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308c03501a9a49d058f2ad76dd17a4e593ce7be7/src%2Flibstd%2Frtdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frtdeps.rs?ref=308c03501a9a49d058f2ad76dd17a4e593ce7be7", "patch": "@@ -22,23 +22,18 @@ extern {}\n // On linux librt and libdl are indirect dependencies via rustrt,\n // and binutils 2.22+ won't add them automatically\n #[cfg(target_os = \"linux\")]\n-#[link(name = \"c\")]\n #[link(name = \"dl\")]\n-#[link(name = \"m\")]\n #[link(name = \"pthread\")]\n extern {}\n \n #[cfg(target_os = \"android\")]\n #[link(name = \"dl\")]\n #[link(name = \"log\")]\n-#[link(name = \"m\")]\n-#[link(name = \"c\")]\n extern {}\n \n #[cfg(target_os = \"freebsd\")]\n #[link(name = \"execinfo\")]\n #[link(name = \"pthread\")]\n-#[link(name = \"m\")]\n extern {}\n \n #[cfg(target_os = \"macos\")]"}]}