{"sha": "2a082209a68703915ffe10c913d30f274bf76fa7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMDgyMjA5YTY4NzAzOTE1ZmZlMTBjOTEzZDMwZjI3NGJmNzZmYTc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-01-11T13:15:24Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-01-11T13:28:18Z"}, "message": "Fix PlaceElem::Subslice length computation", "tree": {"sha": "572179f3c9f514deb34a64062cbec17479d0365e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/572179f3c9f514deb34a64062cbec17479d0365e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a082209a68703915ffe10c913d30f274bf76fa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a082209a68703915ffe10c913d30f274bf76fa7", "html_url": "https://github.com/rust-lang/rust/commit/2a082209a68703915ffe10c913d30f274bf76fa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a082209a68703915ffe10c913d30f274bf76fa7/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0080f55df2fb00a8934f064a3d9f4db3b0cc48db", "url": "https://api.github.com/repos/rust-lang/rust/commits/0080f55df2fb00a8934f064a3d9f4db3b0cc48db", "html_url": "https://github.com/rust-lang/rust/commit/0080f55df2fb00a8934f064a3d9f4db3b0cc48db"}], "stats": {"total": 105, "additions": 104, "deletions": 1}, "files": [{"sha": "ec3614bb34ad02705b648bb75822851764bc14ab", "filename": "example/subslice-patterns-const-eval.rs", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/2a082209a68703915ffe10c913d30f274bf76fa7/example%2Fsubslice-patterns-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a082209a68703915ffe10c913d30f274bf76fa7/example%2Fsubslice-patterns-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fsubslice-patterns-const-eval.rs?ref=2a082209a68703915ffe10c913d30f274bf76fa7", "patch": "@@ -0,0 +1,99 @@\n+// Based on https://github.com/rust-lang/rust/blob/c5840f9d252c2f5cc16698dbf385a29c5de3ca07/src/test/ui/array-slice-vec/subslice-patterns-const-eval-match.rs\n+\n+// Test that array subslice patterns are correctly handled in const evaluation.\n+\n+// run-pass\n+\n+#![feature(slice_patterns)]\n+\n+#[derive(PartialEq, Debug, Clone)]\n+struct N(u8);\n+\n+#[derive(PartialEq, Debug, Clone)]\n+struct Z;\n+\n+macro_rules! n {\n+    ($($e:expr),* $(,)?) => {\n+        [$(N($e)),*]\n+    }\n+}\n+\n+// This macro has an unused variable so that it can be repeated base on the\n+// number of times a repeated variable (`$e` in `z`) occurs.\n+macro_rules! zed {\n+    ($e:expr) => { Z }\n+}\n+\n+macro_rules! z {\n+    ($($e:expr),* $(,)?) => {\n+        [$(zed!($e)),*]\n+    }\n+}\n+\n+// Compare constant evaluation and runtime evaluation of a given expression.\n+macro_rules! compare_evaluation {\n+    ($e:expr, $t:ty $(,)?) => {{\n+        const CONST_EVAL: $t = $e;\n+        const fn const_eval() -> $t { $e }\n+        static CONST_EVAL2: $t = const_eval();\n+        let runtime_eval = $e;\n+        assert_eq!(CONST_EVAL, runtime_eval);\n+        assert_eq!(CONST_EVAL2, runtime_eval);\n+    }}\n+}\n+\n+// Repeat `$test`, substituting the given macro variables with the given\n+// identifiers.\n+//\n+// For example:\n+//\n+// repeat! {\n+//     ($name); X; Y:\n+//     struct $name;\n+// }\n+//\n+// Expands to:\n+//\n+// struct X; struct Y;\n+//\n+// This is used to repeat the tests using both the `N` and `Z`\n+// types.\n+macro_rules! repeat {\n+    (($($dollar:tt $placeholder:ident)*); $($($values:ident),+);*: $($test:tt)*) => {\n+        macro_rules! single {\n+            ($($dollar $placeholder:ident),*) => { $($test)* }\n+        }\n+        $(single!($($values),+);)*\n+    }\n+}\n+\n+fn main() {\n+    repeat! {\n+        ($arr $Ty); n, N; z, Z:\n+        compare_evaluation!({ let [_, x @ .., _] = $arr!(1, 2, 3, 4); x }, [$Ty; 2]);\n+        compare_evaluation!({ let [_, ref x @ .., _] = $arr!(1, 2, 3, 4); x }, &'static [$Ty; 2]);\n+        compare_evaluation!({ let [_, x @ .., _] = &$arr!(1, 2, 3, 4); x }, &'static [$Ty; 2]);\n+\n+        compare_evaluation!({ let [_, _, x @ .., _, _] = $arr!(1, 2, 3, 4); x }, [$Ty; 0]);\n+        compare_evaluation!(\n+            { let [_, _, ref x @ .., _, _] = $arr!(1, 2, 3, 4); x },\n+            &'static [$Ty; 0],\n+        );\n+        compare_evaluation!(\n+            { let [_, _, x @ .., _, _] = &$arr!(1, 2, 3, 4); x },\n+            &'static [$Ty; 0],\n+        );\n+\n+        compare_evaluation!({ let [_, .., x] = $arr!(1, 2, 3, 4); x }, $Ty);\n+        compare_evaluation!({ let [_, .., ref x] = $arr!(1, 2, 3, 4); x }, &'static $Ty);\n+        compare_evaluation!({ let [_, _y @ .., x] = &$arr!(1, 2, 3, 4); x }, &'static $Ty);\n+    }\n+\n+    compare_evaluation!({ let [_, .., N(x)] = n!(1, 2, 3, 4); x }, u8);\n+    compare_evaluation!({ let [_, .., N(ref x)] = n!(1, 2, 3, 4); x }, &'static u8);\n+    compare_evaluation!({ let [_, .., N(x)] = &n!(1, 2, 3, 4); x }, &'static u8);\n+\n+    compare_evaluation!({ let [N(x), .., _] = n!(1, 2, 3, 4); x }, u8);\n+    compare_evaluation!({ let [N(ref x), .., _] = n!(1, 2, 3, 4); x }, &'static u8);\n+    compare_evaluation!({ let [N(x), .., _] = &n!(1, 2, 3, 4); x }, &'static u8);\n+}"}, {"sha": "663e312a4249b94e320d8e6abb79375ae2c822fc", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a082209a68703915ffe10c913d30f274bf76fa7/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a082209a68703915ffe10c913d30f274bf76fa7/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=2a082209a68703915ffe10c913d30f274bf76fa7", "patch": "@@ -688,7 +688,7 @@ pub fn trans_place<'tcx>(\n                             .eval_usize(fx.tcx, ParamEnv::reveal_all());\n                         cplace = CPlace::for_ptr(\n                             ptr.offset_i64(fx, elem_layout.size.bytes() as i64 * from as i64),\n-                            fx.layout_of(fx.tcx.mk_array(elem_ty, len - from as u64 - to as u64)),\n+                            fx.layout_of(fx.tcx.mk_array(elem_ty, to as u64 - from as u64)),\n                         );\n                     }\n                     ty::Slice(elem_ty) => {"}, {"sha": "d73badad95765cc6ade41918d42c9e55e8337acf", "filename": "test.sh", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a082209a68703915ffe10c913d30f274bf76fa7/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/2a082209a68703915ffe10c913d30f274bf76fa7/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=2a082209a68703915ffe10c913d30f274bf76fa7", "patch": "@@ -60,6 +60,10 @@ echo \"[AOT] std_example\"\n $RUSTC example/std_example.rs --crate-type bin\n ./target/out/std_example\n \n+echo \"[AOT] subslice-patterns-const-eval\"\n+$RUSTC example/subslice-patterns-const-eval.rs --crate-type bin -Cpanic=abort\n+./target/out/subslice-patterns-const-eval\n+\n echo \"[BUILD] mod_bench\"\n $RUSTC example/mod_bench.rs --crate-type bin\n "}]}