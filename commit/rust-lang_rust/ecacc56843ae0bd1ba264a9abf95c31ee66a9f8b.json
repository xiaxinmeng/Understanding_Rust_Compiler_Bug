{"sha": "ecacc56843ae0bd1ba264a9abf95c31ee66a9f8b", "node_id": "C_kwDOAAsO6NoAKGVjYWNjNTY4NDNhZTBiZDFiYTI2NGE5YWJmOTVjMzFlZTY2YTlmOGI", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-21T07:39:54Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-21T07:39:54Z"}, "message": "Use names suggestive of channel endpoints", "tree": {"sha": "2e09b7f661e4decb4d96422a8238d0ad285df28d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e09b7f661e4decb4d96422a8238d0ad285df28d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecacc56843ae0bd1ba264a9abf95c31ee66a9f8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecacc56843ae0bd1ba264a9abf95c31ee66a9f8b", "html_url": "https://github.com/rust-lang/rust/commit/ecacc56843ae0bd1ba264a9abf95c31ee66a9f8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecacc56843ae0bd1ba264a9abf95c31ee66a9f8b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68041b42fc4a915321c31895f4544e8e70a0c4c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/68041b42fc4a915321c31895f4544e8e70a0c4c8", "html_url": "https://github.com/rust-lang/rust/commit/68041b42fc4a915321c31895f4544e8e70a0c4c8"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "06a84cfbf32eb78fae763089378de796047756d8", "filename": "ui_test/src/lib.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ecacc56843ae0bd1ba264a9abf95c31ee66a9f8b/ui_test%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecacc56843ae0bd1ba264a9abf95c31ee66a9f8b/ui_test%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Flib.rs?ref=ecacc56843ae0bd1ba264a9abf95c31ee66a9f8b", "patch": "@@ -126,7 +126,7 @@ pub fn run_tests(mut config: Config) -> Result<()> {\n         });\n \n         // A channel for the messages emitted by the individual test threads.\n-        let (finish_file, finished_files) = crossbeam::channel::unbounded();\n+        let (finished_files_sender, finished_files_recv) = crossbeam::channel::unbounded();\n         enum TestResult {\n             Ok,\n             Failed,\n@@ -135,7 +135,7 @@ pub fn run_tests(mut config: Config) -> Result<()> {\n \n         s.spawn(|_| {\n             if config.quiet {\n-                for (i, (_, result)) in finished_files.into_iter().enumerate() {\n+                for (i, (_, result)) in finished_files_recv.into_iter().enumerate() {\n                     // Humans start counting at 1\n                     let i = i + 1;\n                     match result {\n@@ -148,7 +148,7 @@ pub fn run_tests(mut config: Config) -> Result<()> {\n                     }\n                 }\n             } else {\n-                for (msg, result) in finished_files {\n+                for (msg, result) in finished_files_recv {\n                     eprint!(\"{msg} ... \");\n                     eprintln!(\n                         \"{}\",\n@@ -166,9 +166,9 @@ pub fn run_tests(mut config: Config) -> Result<()> {\n \n         // Create N worker threads that receive files to test.\n         for _ in 0..std::thread::available_parallelism().unwrap().get() {\n-            let finish_file = finish_file.clone();\n+            let finished_files_sender = finished_files_sender.clone();\n             threads.push(s.spawn(|_| -> Result<()> {\n-                let finish_file = finish_file;\n+                let finished_files_sender = finished_files_sender;\n                 for path in &receive {\n                     if !config.path_filter.is_empty() {\n                         let path_display = path.display().to_string();\n@@ -181,7 +181,8 @@ pub fn run_tests(mut config: Config) -> Result<()> {\n                     // Ignore file if only/ignore rules do (not) apply\n                     if !test_file_conditions(&comments, &target, &config) {\n                         ignored.fetch_add(1, Ordering::Relaxed);\n-                        finish_file.send((path.display().to_string(), TestResult::Ignored))?;\n+                        finished_files_sender\n+                            .send((path.display().to_string(), TestResult::Ignored))?;\n                         continue;\n                     }\n                     // Run the test for all revisions\n@@ -197,10 +198,10 @@ pub fn run_tests(mut config: Config) -> Result<()> {\n                             write!(msg, \"(revision `{revision}`) \").unwrap();\n                         }\n                         if errors.is_empty() {\n-                            finish_file.send((msg, TestResult::Ok))?;\n+                            finished_files_sender.send((msg, TestResult::Ok))?;\n                             succeeded.fetch_add(1, Ordering::Relaxed);\n                         } else {\n-                            finish_file.send((msg, TestResult::Failed))?;\n+                            finished_files_sender.send((msg, TestResult::Failed))?;\n                             failures.lock().unwrap().push((\n                                 path.clone(),\n                                 m,"}]}