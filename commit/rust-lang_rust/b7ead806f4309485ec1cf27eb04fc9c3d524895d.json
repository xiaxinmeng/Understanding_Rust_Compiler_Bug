{"sha": "b7ead806f4309485ec1cf27eb04fc9c3d524895d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZWFkODA2ZjQzMDk0ODVlYzFjZjI3ZWIwNGZjOWMzZDUyNDg5NWQ=", "commit": {"author": {"name": "Ga\u00ebtan Cassiers", "email": "gaetan.cassiers@gmail.com", "date": "2015-06-22T11:33:19Z"}, "committer": {"name": "Ga\u00ebtan Cassiers", "email": "gaetan.cassiers@gmail.com", "date": "2015-06-23T00:15:46Z"}, "message": "Use FromIterator implementation for Option\n\nCombined with try_opt!, this avoid an explicit for loop or another macro.", "tree": {"sha": "6214bd5b717653ebacb0a3d62d2a645a7e8f1df4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6214bd5b717653ebacb0a3d62d2a645a7e8f1df4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7ead806f4309485ec1cf27eb04fc9c3d524895d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7ead806f4309485ec1cf27eb04fc9c3d524895d", "html_url": "https://github.com/rust-lang/rust/commit/b7ead806f4309485ec1cf27eb04fc9c3d524895d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7ead806f4309485ec1cf27eb04fc9c3d524895d/comments", "author": {"login": "cassiersg", "id": 9348542, "node_id": "MDQ6VXNlcjkzNDg1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9348542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cassiersg", "html_url": "https://github.com/cassiersg", "followers_url": "https://api.github.com/users/cassiersg/followers", "following_url": "https://api.github.com/users/cassiersg/following{/other_user}", "gists_url": "https://api.github.com/users/cassiersg/gists{/gist_id}", "starred_url": "https://api.github.com/users/cassiersg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cassiersg/subscriptions", "organizations_url": "https://api.github.com/users/cassiersg/orgs", "repos_url": "https://api.github.com/users/cassiersg/repos", "events_url": "https://api.github.com/users/cassiersg/events{/privacy}", "received_events_url": "https://api.github.com/users/cassiersg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cassiersg", "id": 9348542, "node_id": "MDQ6VXNlcjkzNDg1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9348542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cassiersg", "html_url": "https://github.com/cassiersg", "followers_url": "https://api.github.com/users/cassiersg/followers", "following_url": "https://api.github.com/users/cassiersg/following{/other_user}", "gists_url": "https://api.github.com/users/cassiersg/gists{/gist_id}", "starred_url": "https://api.github.com/users/cassiersg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cassiersg/subscriptions", "organizations_url": "https://api.github.com/users/cassiersg/orgs", "repos_url": "https://api.github.com/users/cassiersg/repos", "events_url": "https://api.github.com/users/cassiersg/events{/privacy}", "received_events_url": "https://api.github.com/users/cassiersg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad658885d421119dcc33d8d5df41a5740eb33454", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad658885d421119dcc33d8d5df41a5740eb33454", "html_url": "https://github.com/rust-lang/rust/commit/ad658885d421119dcc33d8d5df41a5740eb33454"}], "stats": {"total": 51, "additions": 27, "deletions": 24}, "files": [{"sha": "85ea41fb060c8b7919c496c6778d25186111e99f", "filename": "src/expr.rs", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b7ead806f4309485ec1cf27eb04fc9c3d524895d/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ead806f4309485ec1cf27eb04fc9c3d524895d/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=b7ead806f4309485ec1cf27eb04fc9c3d524895d", "patch": "@@ -142,11 +142,11 @@ fn rewrite_call(context: &RewriteContext,\n     let arg_count = args.len();\n \n     let args_str = if arg_count > 0 {\n-        let mut args_rewritten = Vec::with_capacity(args.len());\n-        for arg in args.iter() {\n-            args_rewritten.push((try_opt!(arg.rewrite(context, remaining_width, offset)),\n-                                 String::new()));\n-        }\n+        let args_rewritten: Vec<_> =\n+            try_opt!(args.iter()\n+                         .map(|arg| arg.rewrite(context, remaining_width, offset)\n+                                       .map(|arg_str| (arg_str, String::new())))\n+                         .collect());\n         let fmt = ListFormatting {\n             tactic: ListTactic::HorizontalVertical,\n             separator: \",\",\n@@ -188,15 +188,16 @@ fn rewrite_struct_lit(context: &RewriteContext,\n     let indent = offset + path_str.len() + 3;\n     let budget = width - (path_str.len() + 5);\n \n-    let mut field_strs = Vec::with_capacity(fields.len());\n-    for field in fields.iter() {\n-        field_strs.push(try_opt!(rewrite_field(context, field, budget, indent)));\n-    }\n-    if let Some(expr) = base {\n-        // Another 2 on the width/indent for the ..\n-        field_strs.push(format!(\"..{}\", try_opt!(expr.rewrite(context, budget - 2, indent + 2))));\n-    }\n-\n+    let field_strs: Vec<_> =\n+        try_opt!(fields.iter()\n+                       .map(|field| rewrite_field(context, field, budget, indent))\n+                       .chain(base.iter()\n+                                  .map(|expr| expr.rewrite(context,\n+                                                           // 2 = \"..\"\n+                                                           budget - 2,\n+                                                           indent + 2)\n+                                                  .map(|s| format!(\"..{}\", s))))\n+                       .collect());\n     // FIXME comments\n     let field_strs: Vec<_> = field_strs.into_iter().map(|s| (s, String::new())).collect();\n     let fmt = ListFormatting {\n@@ -239,15 +240,18 @@ fn rewrite_tuple_lit(context: &RewriteContext,\n             return items[0].rewrite(context, width - 3, indent).map(|s| format!(\"({},)\", s));\n         }\n         // Only last line has width-1 as budget, other may take max_width\n-        let mut item_strs = Vec::with_capacity(items.len());\n-        for (i, item) in items.iter().enumerate() {\n-            let rem_width = if i == items.len() - 1 {\n-                width - 2\n-            } else {\n-                config!(max_width) - indent - 2\n-            };\n-            item_strs.push(try_opt!(item.rewrite(context, rem_width, indent)));\n-        }\n+        let item_strs: Vec<_> =\n+            try_opt!(items.iter()\n+                          .enumerate()\n+                          .map(|(i, item)| {\n+                              let rem_width = if i == items.len() - 1 {\n+                                  width - 2\n+                              } else {\n+                                  config!(max_width) - indent - 2\n+                              };\n+                              item.rewrite(context, rem_width, indent)\n+                          })\n+                          .collect());\n         let tactics = if item_strs.iter().any(|s| s.contains('\\n')) {\n             ListTactic::Vertical\n         } else {"}, {"sha": "0b9a9cfa46badb4419d5992e9b9255def82f65b6", "filename": "src/visitor.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7ead806f4309485ec1cf27eb04fc9c3d524895d/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ead806f4309485ec1cf27eb04fc9c3d524895d/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=b7ead806f4309485ec1cf27eb04fc9c3d524895d", "patch": "@@ -37,7 +37,6 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                          config!(max_width) - offset,\n                          offset) {\n             Some(new_str) => {\n-                //let new_str = self.rewrite_expr(ex, config!(max_width) - offset, offset);\n                 self.changes.push_str_span(ex.span, &new_str);\n                 self.last_pos = ex.span.hi;\n             }"}]}