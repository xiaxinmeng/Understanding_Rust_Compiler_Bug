{"sha": "f2c64ba15d3ef87f731f17d90c873383d5f3e432", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyYzY0YmExNWQzZWY4N2Y3MzFmMTdkOTBjODczMzgzZDVmM2U0MzI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-14T14:38:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-14T14:38:01Z"}, "message": "Merge #2243\n\n2243: Move body queries to hir_def r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "ff8a962228a7532a5f468862bc4b0c62535f5069", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff8a962228a7532a5f468862bc4b0c62535f5069"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2c64ba15d3ef87f731f17d90c873383d5f3e432", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdzWbJCRBK7hj4Ov3rIwAAdHIIADGid5O1oOItvBVpZYg9uVW+\nl68K9ET4clkSoXxqulR5V/8asTDj3vHHQe2iW9PP3x44FXFP72fQ4tILylSQ53Fu\nrH2K3A/kfKhuyiZxRPzfF/BGgbpeS7jr0WFjvkCP7YtJa8seuElfaXe1QnaHIJK5\nm2yr1JFYpoL0EGWaUMIYv/hV6KQkhinwNARQ0/VqgrmD4lmZIu3hXMu0PZXrUXp0\nif+dTNMgk1q88elMZqN2Pzt8stFkRcXSTNUcqMaH9vj0td5bxRrNaUhU7dmQyLIs\n7w0cB7OD2iD/OGJ8O5SCMhE6C0qL8N/cUYK+3bA0N1MfVVMFm+HV+x3NokS5MoM=\n=CSK2\n-----END PGP SIGNATURE-----\n", "payload": "tree ff8a962228a7532a5f468862bc4b0c62535f5069\nparent 5c3ccc55082838524f695ffe40138fd8e805db70\nparent 1583ab1558022d0fdbbc10d3a440a2d3daa4a840\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1573742281 +0000\ncommitter GitHub <noreply@github.com> 1573742281 +0000\n\nMerge #2243\n\n2243: Move body queries to hir_def r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2c64ba15d3ef87f731f17d90c873383d5f3e432", "html_url": "https://github.com/rust-lang/rust/commit/f2c64ba15d3ef87f731f17d90c873383d5f3e432", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2c64ba15d3ef87f731f17d90c873383d5f3e432/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c3ccc55082838524f695ffe40138fd8e805db70", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c3ccc55082838524f695ffe40138fd8e805db70", "html_url": "https://github.com/rust-lang/rust/commit/5c3ccc55082838524f695ffe40138fd8e805db70"}, {"sha": "1583ab1558022d0fdbbc10d3a440a2d3daa4a840", "url": "https://api.github.com/repos/rust-lang/rust/commits/1583ab1558022d0fdbbc10d3a440a2d3daa4a840", "html_url": "https://github.com/rust-lang/rust/commit/1583ab1558022d0fdbbc10d3a440a2d3daa4a840"}], "stats": {"total": 223, "additions": 129, "deletions": 94}, "files": [{"sha": "962d5a8c15fbe824f30040b6e54599ba3c8c566b", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f2c64ba15d3ef87f731f17d90c873383d5f3e432/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c64ba15d3ef87f731f17d90c873383d5f3e432/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=f2c64ba15d3ef87f731f17d90c873383d5f3e432", "patch": "@@ -8,6 +8,7 @@ use std::sync::Arc;\n \n use hir_def::{\n     adt::VariantData,\n+    body::scope::ExprScopes,\n     builtin_type::BuiltinType,\n     type_ref::{Mutability, TypeRef},\n     CrateModuleId, LocalEnumVariantId, LocalStructFieldId, ModuleId, UnionId,\n@@ -539,6 +540,7 @@ pub trait HasBody: Copy {\n     fn infer(self, db: &impl HirDatabase) -> Arc<InferenceResult>;\n     fn body(self, db: &impl HirDatabase) -> Arc<Body>;\n     fn body_source_map(self, db: &impl HirDatabase) -> Arc<BodySourceMap>;\n+    fn expr_scopes(self, db: &impl HirDatabase) -> Arc<ExprScopes>;\n }\n \n impl<T> HasBody for T\n@@ -550,11 +552,15 @@ where\n     }\n \n     fn body(self, db: &impl HirDatabase) -> Arc<Body> {\n-        db.body(self.into())\n+        self.into().body(db)\n     }\n \n     fn body_source_map(self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n-        db.body_with_source_map(self.into()).1\n+        self.into().body_source_map(db)\n+    }\n+\n+    fn expr_scopes(self, db: &impl HirDatabase) -> Arc<ExprScopes> {\n+        self.into().expr_scopes(db)\n     }\n }\n \n@@ -564,11 +570,15 @@ impl HasBody for DefWithBody {\n     }\n \n     fn body(self, db: &impl HirDatabase) -> Arc<Body> {\n-        db.body(self)\n+        db.body(self.into())\n     }\n \n     fn body_source_map(self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n-        db.body_with_source_map(self).1\n+        db.body_with_source_map(self.into()).1\n+    }\n+\n+    fn expr_scopes(self, db: &impl HirDatabase) -> Arc<ExprScopes> {\n+        db.expr_scopes(self.into())\n     }\n }\n \n@@ -662,11 +672,11 @@ impl Function {\n     }\n \n     pub(crate) fn body_source_map(self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n-        db.body_with_source_map(self.into()).1\n+        db.body_with_source_map(self.id.into()).1\n     }\n \n     pub fn body(self, db: &impl HirDatabase) -> Arc<Body> {\n-        db.body(self.into())\n+        db.body(self.id.into())\n     }\n \n     pub fn ty(self, db: &impl HirDatabase) -> Ty {\n@@ -1079,7 +1089,7 @@ pub struct Local {\n \n impl Local {\n     pub fn name(self, db: &impl HirDatabase) -> Option<Name> {\n-        let body = db.body(self.parent);\n+        let body = self.parent.body(db);\n         match &body[self.pat_id] {\n             Pat::Bind { name, .. } => Some(name.clone()),\n             _ => None,\n@@ -1091,7 +1101,7 @@ impl Local {\n     }\n \n     pub fn is_mut(self, db: &impl HirDatabase) -> bool {\n-        let body = db.body(self.parent);\n+        let body = self.parent.body(db);\n         match &body[self.pat_id] {\n             Pat::Bind { mode, .. } => match mode {\n                 BindingAnnotation::Mutable | BindingAnnotation::RefMut => true,\n@@ -1115,7 +1125,7 @@ impl Local {\n     }\n \n     pub fn source(self, db: &impl HirDatabase) -> Source<Either<ast::BindPat, ast::SelfParam>> {\n-        let (_body, source_map) = db.body_with_source_map(self.parent);\n+        let source_map = self.parent.body_source_map(db);\n         let src = source_map.pat_syntax(self.pat_id).unwrap(); // Hmm...\n         let root = src.file_syntax(db);\n         src.map(|ast| ast.map(|it| it.cast().unwrap().to_node(&root), |it| it.to_node(&root)))"}, {"sha": "c60029c0188f009fd9f4749e8e41e25e40f9fdca", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f2c64ba15d3ef87f731f17d90c873383d5f3e432/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c64ba15d3ef87f731f17d90c873383d5f3e432/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=f2c64ba15d3ef87f731f17d90c873383d5f3e432", "patch": "@@ -8,7 +8,6 @@ use ra_syntax::SmolStr;\n \n use crate::{\n     debug::HirDebugDatabase,\n-    expr::{Body, BodySourceMap},\n     generics::{GenericDef, GenericParams},\n     ids,\n     impl_block::{ImplBlock, ImplSourceMap, ModuleImplBlocks},\n@@ -19,13 +18,14 @@ use crate::{\n         InferenceResult, Namespace, Substs, Ty, TypableDef, TypeCtor,\n     },\n     type_alias::TypeAliasData,\n-    Const, ConstData, Crate, DefWithBody, ExprScopes, FnData, Function, Module, Static,\n-    StructField, Trait, TypeAlias,\n+    Const, ConstData, Crate, DefWithBody, FnData, Function, Module, Static, StructField, Trait,\n+    TypeAlias,\n };\n \n pub use hir_def::db::{\n-    CrateDefMapQuery, DefDatabase2, DefDatabase2Storage, EnumDataQuery, InternDatabase,\n-    InternDatabaseStorage, RawItemsQuery, RawItemsWithSourceMapQuery, StructDataQuery,\n+    BodyQuery, BodyWithSourceMapQuery, CrateDefMapQuery, DefDatabase2, DefDatabase2Storage,\n+    EnumDataQuery, ExprScopesQuery, InternDatabase, InternDatabaseStorage, RawItemsQuery,\n+    RawItemsWithSourceMapQuery, StructDataQuery,\n };\n pub use hir_expand::db::{\n     AstDatabase, AstDatabaseStorage, AstIdMapQuery, MacroArgQuery, MacroDefQuery, MacroExpandQuery,\n@@ -85,9 +85,6 @@ pub trait DefDatabase: HirDebugDatabase + DefDatabase2 {\n #[salsa::query_group(HirDatabaseStorage)]\n #[salsa::requires(salsa::Database)]\n pub trait HirDatabase: DefDatabase + AstDatabase {\n-    #[salsa::invoke(crate::expr::expr_scopes_query)]\n-    fn expr_scopes(&self, def: DefWithBody) -> Arc<ExprScopes>;\n-\n     #[salsa::invoke(crate::ty::infer_query)]\n     fn infer(&self, def: DefWithBody) -> Arc<InferenceResult>;\n \n@@ -113,12 +110,6 @@ pub trait HirDatabase: DefDatabase + AstDatabase {\n     #[salsa::invoke(crate::ty::generic_defaults_query)]\n     fn generic_defaults(&self, def: GenericDef) -> Substs;\n \n-    #[salsa::invoke(crate::expr::body_with_source_map_query)]\n-    fn body_with_source_map(&self, def: DefWithBody) -> (Arc<Body>, Arc<BodySourceMap>);\n-\n-    #[salsa::invoke(crate::expr::body_query)]\n-    fn body(&self, def: DefWithBody) -> Arc<Body>;\n-\n     #[salsa::invoke(crate::ty::method_resolution::CrateImplBlocks::impls_in_crate_query)]\n     fn impls_in_crate(&self, krate: Crate) -> Arc<CrateImplBlocks>;\n "}, {"sha": "9262325f2348577a043a11b76468318b53a473e5", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 4, "deletions": 39, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f2c64ba15d3ef87f731f17d90c873383d5f3e432/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c64ba15d3ef87f731f17d90c873383d5f3e432/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=f2c64ba15d3ef87f731f17d90c873383d5f3e432", "patch": "@@ -4,9 +4,9 @@ pub(crate) mod validation;\n \n use std::sync::Arc;\n \n-use ra_syntax::{ast, AstPtr};\n+use ra_syntax::AstPtr;\n \n-use crate::{db::HirDatabase, DefWithBody, HasSource, Resolver};\n+use crate::{db::HirDatabase, DefWithBody, HasBody, Resolver};\n \n pub use hir_def::{\n     body::{\n@@ -19,48 +19,13 @@ pub use hir_def::{\n     },\n };\n \n-pub(crate) fn body_with_source_map_query(\n-    db: &impl HirDatabase,\n-    def: DefWithBody,\n-) -> (Arc<Body>, Arc<BodySourceMap>) {\n-    let mut params = None;\n-\n-    let (file_id, body) = match def {\n-        DefWithBody::Function(f) => {\n-            let src = f.source(db);\n-            params = src.ast.param_list();\n-            (src.file_id, src.ast.body().map(ast::Expr::from))\n-        }\n-        DefWithBody::Const(c) => {\n-            let src = c.source(db);\n-            (src.file_id, src.ast.body())\n-        }\n-        DefWithBody::Static(s) => {\n-            let src = s.source(db);\n-            (src.file_id, src.ast.body())\n-        }\n-    };\n-    let expander = hir_def::body::Expander::new(db, file_id, def.module(db).id);\n-    let (body, source_map) = Body::new(db, expander, params, body);\n-    (Arc::new(body), Arc::new(source_map))\n-}\n-\n-pub(crate) fn body_query(db: &impl HirDatabase, def: DefWithBody) -> Arc<Body> {\n-    db.body_with_source_map(def).0\n-}\n-\n-pub(crate) fn expr_scopes_query(db: &impl HirDatabase, def: DefWithBody) -> Arc<ExprScopes> {\n-    let body = db.body(def);\n-    Arc::new(ExprScopes::new(&*body))\n-}\n-\n // needs arbitrary_self_types to be a method... or maybe move to the def?\n pub(crate) fn resolver_for_expr(\n     db: &impl HirDatabase,\n     owner: DefWithBody,\n     expr_id: ExprId,\n ) -> Resolver {\n-    let scopes = db.expr_scopes(owner);\n+    let scopes = owner.expr_scopes(db);\n     resolver_for_scope(db, owner, scopes.scope_for(expr_id))\n }\n \n@@ -70,7 +35,7 @@ pub(crate) fn resolver_for_scope(\n     scope_id: Option<ScopeId>,\n ) -> Resolver {\n     let mut r = owner.resolver(db);\n-    let scopes = db.expr_scopes(owner);\n+    let scopes = owner.expr_scopes(db);\n     let scope_chain = scopes.scope_chain(scope_id).collect::<Vec<_>>();\n     for scope in scope_chain.into_iter().rev() {\n         r = r.push_expr_scope(Arc::clone(&scopes), scope);"}, {"sha": "9633ef5861b866d949e05529f74587221a6f27dd", "filename": "crates/ra_hir/src/from_id.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f2c64ba15d3ef87f731f17d90c873383d5f3e432/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c64ba15d3ef87f731f17d90c873383d5f3e432/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs?ref=f2c64ba15d3ef87f731f17d90c873383d5f3e432", "patch": "@@ -3,9 +3,9 @@\n //! It's unclear if we need this long-term, but it's definitelly useful while we\n //! are splitting the hir.\n \n-use hir_def::{AdtId, EnumVariantId, ModuleDefId};\n+use hir_def::{AdtId, DefWithBodyId, EnumVariantId, ModuleDefId};\n \n-use crate::{Adt, EnumVariant, ModuleDef};\n+use crate::{Adt, DefWithBody, EnumVariant, ModuleDef};\n \n macro_rules! from_id {\n     ($(($id:path, $ty:path)),*) => {$(\n@@ -61,3 +61,13 @@ impl From<ModuleDefId> for ModuleDef {\n         }\n     }\n }\n+\n+impl From<DefWithBody> for DefWithBodyId {\n+    fn from(def: DefWithBody) -> Self {\n+        match def {\n+            DefWithBody::Function(it) => DefWithBodyId::FunctionId(it.id),\n+            DefWithBody::Static(it) => DefWithBodyId::StaticId(it.id),\n+            DefWithBody::Const(it) => DefWithBodyId::ConstId(it.id),\n+        }\n+    }\n+}"}, {"sha": "9793af8587554f15f92e3bfa7ce4f6c7f38b0a54", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2c64ba15d3ef87f731f17d90c873383d5f3e432/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c64ba15d3ef87f731f17d90c873383d5f3e432/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=f2c64ba15d3ef87f731f17d90c873383d5f3e432", "patch": "@@ -10,7 +10,7 @@ use ra_syntax::{\n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     ids::{AstItemDef, LocationCtx},\n-    AstId, Const, Crate, DefWithBody, Enum, EnumVariant, FieldSource, Function, HasSource,\n+    AstId, Const, Crate, DefWithBody, Enum, EnumVariant, FieldSource, Function, HasBody, HasSource,\n     ImplBlock, Local, Module, ModuleSource, Source, Static, Struct, StructField, Trait, TypeAlias,\n     Union, VariantDef,\n };\n@@ -144,7 +144,7 @@ impl Local {\n             };\n             Some(res)\n         })?;\n-        let (_body, source_map) = db.body_with_source_map(parent);\n+        let source_map = parent.body_source_map(db);\n         let src = src.map(ast::Pat::from);\n         let pat_id = source_map.node_pat(src.as_ref())?;\n         Some(Local { parent, pat_id })"}, {"sha": "ca40e3b5448bd6d03bc3cd04c609b96b97d8d2b3", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2c64ba15d3ef87f731f17d90c873383d5f3e432/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c64ba15d3ef87f731f17d90c873383d5f3e432/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=f2c64ba15d3ef87f731f17d90c873383d5f3e432", "patch": "@@ -146,7 +146,7 @@ impl SourceAnalyzer {\n         let def_with_body = def_with_body_from_child_node(db, file_id, node);\n         if let Some(def) = def_with_body {\n             let source_map = def.body_source_map(db);\n-            let scopes = db.expr_scopes(def);\n+            let scopes = def.expr_scopes(db);\n             let scope = match offset {\n                 None => scope_for(&scopes, &source_map, file_id.into(), &node),\n                 Some(offset) => scope_for_offset(&scopes, &source_map, file_id.into(), offset),"}, {"sha": "c35378cc413dde6b38a403d216d4e26d0cab8f1c", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2c64ba15d3ef87f731f17d90c873383d5f3e432/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c64ba15d3ef87f731f17d90c873383d5f3e432/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=f2c64ba15d3ef87f731f17d90c873383d5f3e432", "patch": "@@ -43,7 +43,8 @@ use crate::{\n     expr::{BindingAnnotation, Body, ExprId, PatId},\n     resolve::{Resolver, TypeNs},\n     ty::infer::diagnostics::InferenceDiagnostic,\n-    Adt, AssocItem, ConstData, DefWithBody, FloatTy, FnData, Function, IntTy, Path, StructField,\n+    Adt, AssocItem, ConstData, DefWithBody, FloatTy, FnData, Function, HasBody, IntTy, Path,\n+    StructField,\n };\n \n macro_rules! ty_app {\n@@ -214,7 +215,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             coerce_unsized_map: Self::init_coerce_unsized_map(db, &resolver),\n             db,\n             owner,\n-            body: db.body(owner),\n+            body: owner.body(db),\n             resolver,\n         }\n     }"}, {"sha": "75351c17d51eaec1684dc7edbd54ad7f17b8fd80", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2c64ba15d3ef87f731f17d90c873383d5f3e432/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c64ba15d3ef87f731f17d90c873383d5f3e432/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=f2c64ba15d3ef87f731f17d90c873383d5f3e432", "patch": "@@ -22,7 +22,7 @@ use crate::{\n         ApplicationTy, GenericPredicate, Namespace, ProjectionTy, Substs, TraitRef, Ty, TypeCtor,\n         TypeWalk,\n     },\n-    AssocItem, Crate, ImplBlock, Trait, TypeAlias,\n+    AssocItem, Crate, HasBody, ImplBlock, Trait, TypeAlias,\n };\n \n /// This represents a trait whose name we could not resolve.\n@@ -714,7 +714,7 @@ fn closure_fn_trait_impl_datum(\n     let fn_once_trait = get_fn_trait(db, krate, super::FnTrait::FnOnce)?;\n     let trait_ = get_fn_trait(db, krate, data.fn_trait)?; // get corresponding fn trait\n \n-    let num_args: u16 = match &db.body(data.def)[data.expr] {\n+    let num_args: u16 = match &data.def.body(db)[data.expr] {\n         crate::expr::Expr::Lambda { args, .. } => args.len() as u16,\n         _ => {\n             log::warn!(\"closure for closure type {:?} not found\", data);"}, {"sha": "85dc4feb0a3f6375d17cedd8e4ed5ac89c537e23", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f2c64ba15d3ef87f731f17d90c873383d5f3e432/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c64ba15d3ef87f731f17d90c873383d5f3e432/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=f2c64ba15d3ef87f731f17d90c873383d5f3e432", "patch": "@@ -17,7 +17,7 @@ use crate::{\n     expr::{Expr, ExprId, Pat, PatId},\n     nameres::CrateDefMap,\n     path::Path,\n-    ModuleId,\n+    AstItemDef, DefWithBodyId, ModuleId,\n };\n \n pub struct Expander {\n@@ -141,7 +141,37 @@ pub struct BodySourceMap {\n }\n \n impl Body {\n-    pub fn new(\n+    pub(crate) fn body_with_source_map_query(\n+        db: &impl DefDatabase2,\n+        def: DefWithBodyId,\n+    ) -> (Arc<Body>, Arc<BodySourceMap>) {\n+        let mut params = None;\n+\n+        let (file_id, module, body) = match def {\n+            DefWithBodyId::FunctionId(f) => {\n+                let src = f.source(db);\n+                params = src.ast.param_list();\n+                (src.file_id, f.module(db), src.ast.body().map(ast::Expr::from))\n+            }\n+            DefWithBodyId::ConstId(c) => {\n+                let src = c.source(db);\n+                (src.file_id, c.module(db), src.ast.body())\n+            }\n+            DefWithBodyId::StaticId(s) => {\n+                let src = s.source(db);\n+                (src.file_id, s.module(db), src.ast.body())\n+            }\n+        };\n+        let expander = Expander::new(db, file_id, module);\n+        let (body, source_map) = Body::new(db, expander, params, body);\n+        (Arc::new(body), Arc::new(source_map))\n+    }\n+\n+    pub(crate) fn body_query(db: &impl DefDatabase2, def: DefWithBodyId) -> Arc<Body> {\n+        db.body_with_source_map(def).0\n+    }\n+\n+    fn new(\n         db: &impl DefDatabase2,\n         expander: Expander,\n         params: Option<ast::ParamList>,"}, {"sha": "09a39e721e63aaced3edd469ec9c2e9de302f4f2", "filename": "crates/ra_hir_def/src/body/scope.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2c64ba15d3ef87f731f17d90c873383d5f3e432/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c64ba15d3ef87f731f17d90c873383d5f3e432/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs?ref=f2c64ba15d3ef87f731f17d90c873383d5f3e432", "patch": "@@ -1,12 +1,15 @@\n //! FIXME: write short doc here\n+use std::sync::Arc;\n \n use hir_expand::name::Name;\n use ra_arena::{impl_arena_id, Arena, RawId};\n use rustc_hash::FxHashMap;\n \n use crate::{\n     body::Body,\n+    db::DefDatabase2,\n     expr::{Expr, ExprId, Pat, PatId, Statement},\n+    DefWithBodyId,\n };\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n@@ -42,7 +45,12 @@ pub struct ScopeData {\n }\n \n impl ExprScopes {\n-    pub fn new(body: &Body) -> ExprScopes {\n+    pub(crate) fn expr_scopes_query(db: &impl DefDatabase2, def: DefWithBodyId) -> Arc<ExprScopes> {\n+        let body = db.body(def);\n+        Arc::new(ExprScopes::new(&*body))\n+    }\n+\n+    fn new(body: &Body) -> ExprScopes {\n         let mut scopes =\n             ExprScopes { scopes: Arena::default(), scope_by_expr: FxHashMap::default() };\n         let root = scopes.root_scope();"}, {"sha": "40b5920d9bf833ba9733e3dd3ff104eb76a64820", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f2c64ba15d3ef87f731f17d90c873383d5f3e432/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c64ba15d3ef87f731f17d90c873383d5f3e432/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=f2c64ba15d3ef87f731f17d90c873383d5f3e432", "patch": "@@ -7,11 +7,12 @@ use ra_syntax::ast;\n \n use crate::{\n     adt::{EnumData, StructData},\n+    body::{scope::ExprScopes, Body, BodySourceMap},\n     nameres::{\n         raw::{ImportSourceMap, RawItems},\n         CrateDefMap,\n     },\n-    EnumId, StructOrUnionId,\n+    DefWithBodyId, EnumId, StructOrUnionId,\n };\n \n #[salsa::query_group(InternDatabaseStorage)]\n@@ -52,4 +53,13 @@ pub trait DefDatabase2: InternDatabase + AstDatabase {\n \n     #[salsa::invoke(EnumData::enum_data_query)]\n     fn enum_data(&self, e: EnumId) -> Arc<EnumData>;\n+\n+    #[salsa::invoke(Body::body_with_source_map_query)]\n+    fn body_with_source_map(&self, def: DefWithBodyId) -> (Arc<Body>, Arc<BodySourceMap>);\n+\n+    #[salsa::invoke(Body::body_query)]\n+    fn body(&self, def: DefWithBodyId) -> Arc<Body>;\n+\n+    #[salsa::invoke(ExprScopes::expr_scopes_query)]\n+    fn expr_scopes(&self, def: DefWithBodyId) -> Arc<ExprScopes>;\n }"}, {"sha": "3fab7965ca611bc66b4c5c22d2de948dce147cfd", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2c64ba15d3ef87f731f17d90c873383d5f3e432/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c64ba15d3ef87f731f17d90c873383d5f3e432/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=f2c64ba15d3ef87f731f17d90c873383d5f3e432", "patch": "@@ -374,3 +374,13 @@ impl_froms!(\n     TypeAliasId,\n     BuiltinType\n );\n+\n+/// The defs which have a body.\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum DefWithBodyId {\n+    FunctionId(FunctionId),\n+    StaticId(StaticId),\n+    ConstId(ConstId),\n+}\n+\n+impl_froms!(DefWithBodyId: FunctionId, ConstId, StaticId);"}, {"sha": "f06191963f02805e59ed1505d125e4bcafd70b4d", "filename": "crates/ra_parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f2c64ba15d3ef87f731f17d90c873383d5f3e432/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c64ba15d3ef87f731f17d90c873383d5f3e432/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=f2c64ba15d3ef87f731f17d90c873383d5f3e432", "patch": "@@ -40,24 +40,24 @@ pub(crate) fn literal(p: &mut Parser) -> Option<CompletedMarker> {\n // E.g. for after the break in `if break {}`, this should not match\n pub(super) const ATOM_EXPR_FIRST: TokenSet =\n     LITERAL_FIRST.union(paths::PATH_FIRST).union(token_set![\n-        L_PAREN,\n-        L_CURLY,\n-        L_BRACK,\n-        PIPE,\n-        MOVE_KW,\n-        BOX_KW,\n-        IF_KW,\n-        WHILE_KW,\n-        MATCH_KW,\n-        UNSAFE_KW,\n-        RETURN_KW,\n-        BREAK_KW,\n-        CONTINUE_KW,\n+        T!['('],\n+        T!['{'],\n+        T!['['],\n+        T![|],\n+        T![move],\n+        T![box],\n+        T![if],\n+        T![while],\n+        T![match],\n+        T![unsafe],\n+        T![return],\n+        T![break],\n+        T![continue],\n+        T![async],\n+        T![try],\n+        T![loop],\n+        T![for],\n         LIFETIME,\n-        ASYNC_KW,\n-        TRY_KW,\n-        LOOP_KW,\n-        FOR_KW,\n     ]);\n \n const EXPR_RECOVERY_SET: TokenSet = token_set![LET_KW];"}, {"sha": "2a6952c013ac8bc27d082ff6732c64bb0e9f65c9", "filename": "crates/ra_parser/src/token_set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2c64ba15d3ef87f731f17d90c873383d5f3e432/crates%2Fra_parser%2Fsrc%2Ftoken_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c64ba15d3ef87f731f17d90c873383d5f3e432/crates%2Fra_parser%2Fsrc%2Ftoken_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Ftoken_set.rs?ref=f2c64ba15d3ef87f731f17d90c873383d5f3e432", "patch": "@@ -30,8 +30,8 @@ const fn mask(kind: SyntaxKind) -> u128 {\n \n #[macro_export]\n macro_rules! token_set {\n-    ($($t:ident),*) => { TokenSet::empty()$(.union(TokenSet::singleton($t)))* };\n-    ($($t:ident),* ,) => { token_set!($($t),*) };\n+    ($($t:expr),*) => { TokenSet::empty()$(.union(TokenSet::singleton($t)))* };\n+    ($($t:expr),* ,) => { token_set!($($t),*) };\n }\n \n #[test]"}]}