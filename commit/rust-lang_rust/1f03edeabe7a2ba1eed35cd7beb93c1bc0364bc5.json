{"sha": "1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5", "node_id": "C_kwDOAAsO6NoAKDFmMDNlZGVhYmU3YTJiYTFlZWQzNWNkN2JlYjkzYzFiYzAzNjRiYzU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-02T17:54:58Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-09T01:31:45Z"}, "message": "Bless tests, fix ICE with ImplTraitPlaceholder", "tree": {"sha": "8b4f06a8495ca5c2a0f4b44e347ce54c8ceb39d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b4f06a8495ca5c2a0f4b44e347ce54c8ceb39d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5", "html_url": "https://github.com/rust-lang/rust/commit/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70775304cd83bf01bf91d5cf206923064fca68ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/70775304cd83bf01bf91d5cf206923064fca68ef", "html_url": "https://github.com/rust-lang/rust/commit/70775304cd83bf01bf91d5cf206923064fca68ef"}], "stats": {"total": 437, "additions": 245, "deletions": 192}, "files": [{"sha": "e8201c0ddcaebab968df1e0b30c51f5e449ba3cd", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5", "patch": "@@ -1960,8 +1960,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 //\n                 // Then, we will create `fn foo(..) -> Foo<'_, '_>`, and\n                 // hence the elision takes place at the fn site.\n-                let future_bound =\n-                    this.lower_async_fn_output_type_to_future_bound(output, fn_def_id, span);\n+                let future_bound = this.lower_async_fn_output_type_to_future_bound(\n+                    output,\n+                    span,\n+                    ImplTraitContext::ReturnPositionOpaqueTy {\n+                        origin: hir::OpaqueTyOrigin::FnReturn(fn_def_id),\n+                    },\n+                );\n \n                 let generic_params = this.arena.alloc_from_iter(collected_lifetimes.iter().map(\n                     |&(new_node_id, lifetime, _)| {\n@@ -2064,17 +2069,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         fn_node_id: NodeId,\n         opaque_ty_node_id: NodeId,\n     ) -> hir::FnRetTy<'hir> {\n-        let span = output.span();\n-\n-        let opaque_ty_span = self.mark_span_with_reason(DesugaringKind::Async, span, None);\n-\n-        let fn_def_id = self.local_def_id(fn_node_id);\n-\n         let kind = self.lower_impl_trait_in_trait(output.span(), opaque_ty_node_id, |lctx| {\n-            let bound =\n-                lctx.lower_async_fn_output_type_to_future_bound(output, fn_def_id, output.span());\n+            let bound = lctx.lower_async_fn_output_type_to_future_bound(\n+                output,\n+                output.span(),\n+                ImplTraitContext::Disallowed(ImplTraitPosition::TraitReturn),\n+            );\n             arena_vec![lctx; bound]\n         });\n+\n+        let opaque_ty_span = self.mark_span_with_reason(DesugaringKind::Async, output.span(), None);\n         let opaque_ty = self.ty(opaque_ty_span, kind);\n         hir::FnRetTy::Return(self.arena.alloc(opaque_ty))\n     }\n@@ -2083,19 +2087,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_async_fn_output_type_to_future_bound(\n         &mut self,\n         output: &FnRetTy,\n-        fn_def_id: LocalDefId,\n         span: Span,\n+        mut nested_impl_trait_context: ImplTraitContext,\n     ) -> hir::GenericBound<'hir> {\n         // Compute the `T` in `Future<Output = T>` from the return type.\n         let output_ty = match output {\n             FnRetTy::Ty(ty) => {\n                 // Not `OpaqueTyOrigin::AsyncFn`: that's only used for the\n                 // `impl Future` opaque type that `async fn` implicitly\n                 // generates.\n-                let mut context = ImplTraitContext::ReturnPositionOpaqueTy {\n-                    origin: hir::OpaqueTyOrigin::FnReturn(fn_def_id),\n-                };\n-                self.lower_ty(ty, &mut context)\n+                self.lower_ty(ty, &mut nested_impl_trait_context)\n             }\n             FnRetTy::Default(ret_ty_span) => self.arena.alloc(self.ty_tup(*ret_ty_span, &[])),\n         };"}, {"sha": "55cbaf71e7cfdd9b8f49a257fde93e89318e6df1", "filename": "compiler/rustc_typeck/src/check/closure.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs?ref=1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5", "patch": "@@ -4,6 +4,7 @@ use super::{check_fn, Expectation, FnCtxt, GeneratorTypes};\n \n use crate::astconv::AstConv;\n use crate::rustc_middle::ty::subst::Subst;\n+use hir::def::DefKind;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n@@ -680,9 +681,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .map(|e| e.map_bound(|e| *e).transpose_tuple2())\n                 .find_map(|(p, s)| get_future_output(p.subst(self.tcx, substs), s.0))?,\n             ty::Error(_) => return None,\n+            ty::Projection(proj)\n+                if self.tcx.def_kind(proj.item_def_id) == DefKind::ImplTraitPlaceholder =>\n+            {\n+                self.tcx\n+                    .bound_explicit_item_bounds(proj.item_def_id)\n+                    .transpose_iter()\n+                    .map(|e| e.map_bound(|e| *e).transpose_tuple2())\n+                    .find_map(|(p, s)| get_future_output(p.subst(self.tcx, proj.substs), s.0))?\n+            }\n             _ => span_bug!(\n                 self.tcx.def_span(expr_def_id),\n-                \"async fn generator return type not an inference variable\"\n+                \"async fn generator return type not an inference variable: {ret_ty}\"\n             ),\n         };\n "}, {"sha": "0ea685986db4057dcbf376b0913d06428de24a71", "filename": "src/test/ui/async-await/async-trait-fn.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.rs?ref=1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5", "patch": "@@ -1,8 +1,11 @@\n // edition:2018\n trait T {\n     async fn foo() {} //~ ERROR functions in traits cannot be declared `async`\n+    //~^ ERROR mismatched types\n     async fn bar(&self) {} //~ ERROR functions in traits cannot be declared `async`\n+    //~^ ERROR mismatched types\n     async fn baz() { //~ ERROR functions in traits cannot be declared `async`\n+        //~^ ERROR mismatched types\n         // Nested item must not ICE.\n         fn a() {}\n     }"}, {"sha": "e30dfb1e1a7054d7b89b93a5b2a59ac2c179a39f", "filename": "src/test/ui/async-await/async-trait-fn.stderr", "status": "modified", "additions": 62, "deletions": 13, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr?ref=1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5", "patch": "@@ -2,40 +2,89 @@ error[E0706]: functions in traits cannot be declared `async`\n   --> $DIR/async-trait-fn.rs:3:5\n    |\n LL |     async fn foo() {}\n-   |     -----^^^^^^^^^^^^\n+   |     -----^^^^^^^^^\n    |     |\n    |     `async` because of this\n    |\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/async-trait-fn.rs:4:5\n+  --> $DIR/async-trait-fn.rs:5:5\n    |\n LL |     async fn bar(&self) {}\n-   |     -----^^^^^^^^^^^^^^^^^\n+   |     -----^^^^^^^^^^^^^^\n    |     |\n    |     `async` because of this\n    |\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/async-trait-fn.rs:5:5\n+  --> $DIR/async-trait-fn.rs:7:5\n+   |\n+LL |     async fn baz() {\n+   |     -----^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+\n+error[E0308]: mismatched types\n+  --> $DIR/async-trait-fn.rs:3:20\n+   |\n+LL |     async fn foo() {}\n+   |                    ^^ expected associated type, found opaque type\n+   |\n+  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n+   |\n+LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n+   |                                           ------------------------------- the found opaque type\n+   |\n+   = note: expected associated type `<Self as T>::foo::{opaque#0}`\n+                  found opaque type `impl Future<Output = ()>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/async-trait-fn.rs:5:25\n+   |\n+LL |     async fn bar(&self) {}\n+   |                         ^^ expected associated type, found opaque type\n+   |\n+  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n+   |\n+LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n+   |                                           ------------------------------- the found opaque type\n+   |\n+   = note: expected associated type `<Self as T>::bar::{opaque#0}`\n+                  found opaque type `impl Future<Output = ()>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/async-trait-fn.rs:7:20\n    |\n LL |       async fn baz() {\n-   |       ^----\n-   |       |\n-   |  _____`async` because of this\n-   | |\n+   |  ____________________^\n+LL | |\n LL | |         // Nested item must not ICE.\n LL | |         fn a() {}\n LL | |     }\n-   | |_____^\n+   | |_____^ expected associated type, found opaque type\n    |\n-   = note: `async` trait functions are not currently supported\n-   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n+   |\n+LL |   pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n+   |                                             ------------------------------- the found opaque type\n+   |\n+   = note: expected associated type `<Self as T>::baz::{opaque#0}`\n+                  found opaque type `impl Future<Output = ()>`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0706`.\n+Some errors have detailed explanations: E0308, E0706.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "22a61dcd25f98835921c47d2aef5a281347f73c9", "filename": "src/test/ui/async-await/edition-deny-async-fns-2015.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs?ref=1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5", "patch": "@@ -16,7 +16,8 @@ impl Foo {\n \n trait Bar {\n     async fn foo() {} //~ ERROR `async fn` is not permitted in Rust 2015\n-                      //~^ ERROR functions in traits cannot be declared `async`\n+    //~^ ERROR functions in traits cannot be declared `async`\n+    //~| ERROR mismatched types\n }\n \n fn main() {"}, {"sha": "2f40ef1ccbb14e64e3fa3f071df7f6411868c036", "filename": "src/test/ui/async-await/edition-deny-async-fns-2015.stderr", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr?ref=1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5", "patch": "@@ -53,7 +53,7 @@ LL |     async fn foo() {}\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:36:9\n+  --> $DIR/edition-deny-async-fns-2015.rs:37:9\n    |\n LL |         async fn bar() {}\n    |         ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -62,7 +62,7 @@ LL |         async fn bar() {}\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:26:9\n+  --> $DIR/edition-deny-async-fns-2015.rs:27:9\n    |\n LL |         async fn foo() {}\n    |         ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -71,7 +71,7 @@ LL |         async fn foo() {}\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:31:13\n+  --> $DIR/edition-deny-async-fns-2015.rs:32:13\n    |\n LL |             async fn bar() {}\n    |             ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -83,14 +83,30 @@ error[E0706]: functions in traits cannot be declared `async`\n   --> $DIR/edition-deny-async-fns-2015.rs:18:5\n    |\n LL |     async fn foo() {}\n-   |     -----^^^^^^^^^^^^\n+   |     -----^^^^^^^^^\n    |     |\n    |     `async` because of this\n    |\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n-error: aborting due to 10 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/edition-deny-async-fns-2015.rs:18:20\n+   |\n+LL |     async fn foo() {}\n+   |                    ^^ expected associated type, found opaque type\n+   |\n+  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n+   |\n+LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n+   |                                           ------------------------------- the found opaque type\n+   |\n+   = note: expected associated type `<Self as Bar>::foo::{opaque#0}`\n+                  found opaque type `impl Future<Output = ()>`\n+\n+error: aborting due to 11 previous errors\n \n-Some errors have detailed explanations: E0670, E0706.\n-For more information about an error, try `rustc --explain E0670`.\n+Some errors have detailed explanations: E0308, E0670, E0706.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "1c12f1e4862e8a2b36af6d9006fd7514484cb11c", "filename": "src/test/ui/async-await/issues/issue-95307.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-95307.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-95307.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-95307.stderr?ref=1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5", "patch": "@@ -8,6 +8,8 @@ LL |     async fn new() -> [u8; _];\n    |\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n error: in expressions, `_` can only be used on the left-hand side of an assignment\n   --> $DIR/issue-95307.rs:7:28"}, {"sha": "cf5d3dab4aadad1f5b3e73b5f4b98db565906d25", "filename": "src/test/ui/parser/fn-header-semantic-fail.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.rs?ref=1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5", "patch": "@@ -27,7 +27,6 @@ fn main() {\n     struct Y;\n     impl X for Y {\n         async fn ft1() {} //~ ERROR functions in traits cannot be declared `async`\n-        //~^ ERROR has an incompatible type for trait\n         unsafe fn ft2() {} // OK.\n         const fn ft3() {} //~ ERROR functions in traits cannot be declared const\n         extern \"C\" fn ft4() {}\n@@ -36,7 +35,6 @@ fn main() {\n         //~| ERROR functions in traits cannot be declared const\n         //~| ERROR functions cannot be both `const` and `async`\n         //~| ERROR cycle detected\n-        //~| ERROR has an incompatible type for trait\n     }\n \n     impl Y {"}, {"sha": "36304779df36fa6ee620f90cd7c15cbb98266da7", "filename": "src/test/ui/parser/fn-header-semantic-fail.stderr", "status": "modified", "additions": 78, "deletions": 106, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr?ref=1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5", "patch": "@@ -7,17 +7,6 @@ LL |     const async unsafe extern \"C\" fn ff5() {}\n    |     |     `async` because of this\n    |     `const` because of this\n \n-error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:17:9\n-   |\n-LL |         async fn ft1();\n-   |         -----^^^^^^^^^^\n-   |         |\n-   |         `async` because of this\n-   |\n-   = note: `async` trait functions are not currently supported\n-   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n-\n error[E0379]: functions in traits cannot be declared const\n   --> $DIR/fn-header-semantic-fail.rs:19:9\n    |\n@@ -30,17 +19,6 @@ error[E0379]: functions in traits cannot be declared const\n LL |         const async unsafe extern \"C\" fn ft5();\n    |         ^^^^^ functions in traits cannot be const\n \n-error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:21:9\n-   |\n-LL |         const async unsafe extern \"C\" fn ft5();\n-   |         ^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |               |\n-   |               `async` because of this\n-   |\n-   = note: `async` trait functions are not currently supported\n-   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n-\n error: functions cannot be both `const` and `async`\n   --> $DIR/fn-header-semantic-fail.rs:21:9\n    |\n@@ -50,42 +28,20 @@ LL |         const async unsafe extern \"C\" fn ft5();\n    |         |     `async` because of this\n    |         `const` because of this\n \n-error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:29:9\n-   |\n-LL |         async fn ft1() {}\n-   |         -----^^^^^^^^^^^^\n-   |         |\n-   |         `async` because of this\n-   |\n-   = note: `async` trait functions are not currently supported\n-   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n-\n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/fn-header-semantic-fail.rs:32:9\n+  --> $DIR/fn-header-semantic-fail.rs:31:9\n    |\n LL |         const fn ft3() {}\n    |         ^^^^^ functions in traits cannot be const\n \n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/fn-header-semantic-fail.rs:34:9\n+  --> $DIR/fn-header-semantic-fail.rs:33:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^ functions in traits cannot be const\n \n-error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:34:9\n-   |\n-LL |         const async unsafe extern \"C\" fn ft5() {}\n-   |         ^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |               |\n-   |               `async` because of this\n-   |\n-   = note: `async` trait functions are not currently supported\n-   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n-\n error: functions cannot be both `const` and `async`\n-  --> $DIR/fn-header-semantic-fail.rs:34:9\n+  --> $DIR/fn-header-semantic-fail.rs:33:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^-^^^^^------------------------------\n@@ -94,7 +50,7 @@ LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         `const` because of this\n \n error: functions cannot be both `const` and `async`\n-  --> $DIR/fn-header-semantic-fail.rs:47:9\n+  --> $DIR/fn-header-semantic-fail.rs:45:9\n    |\n LL |         const async unsafe extern \"C\" fn fi5() {}\n    |         ^^^^^-^^^^^------------------------------\n@@ -103,7 +59,7 @@ LL |         const async unsafe extern \"C\" fn fi5() {}\n    |         `const` because of this\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:53:18\n+  --> $DIR/fn-header-semantic-fail.rs:51:18\n    |\n LL |     extern \"C\" {\n    |     ---------- in this `extern` block\n@@ -116,7 +72,7 @@ LL |         fn fe1();\n    |         ~~\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:54:19\n+  --> $DIR/fn-header-semantic-fail.rs:52:19\n    |\n LL |     extern \"C\" {\n    |     ---------- in this `extern` block\n@@ -130,7 +86,7 @@ LL |         fn fe2();\n    |         ~~\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:55:18\n+  --> $DIR/fn-header-semantic-fail.rs:53:18\n    |\n LL |     extern \"C\" {\n    |     ---------- in this `extern` block\n@@ -144,7 +100,7 @@ LL |         fn fe3();\n    |         ~~\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:56:23\n+  --> $DIR/fn-header-semantic-fail.rs:54:23\n    |\n LL |     extern \"C\" {\n    |     ---------- in this `extern` block\n@@ -158,7 +114,7 @@ LL |         fn fe4();\n    |         ~~\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:57:42\n+  --> $DIR/fn-header-semantic-fail.rs:55:42\n    |\n LL |     extern \"C\" {\n    |     ---------- in this `extern` block\n@@ -172,14 +128,66 @@ LL |         fn fe5();\n    |         ~~\n \n error: functions cannot be both `const` and `async`\n-  --> $DIR/fn-header-semantic-fail.rs:57:9\n+  --> $DIR/fn-header-semantic-fail.rs:55:9\n    |\n LL |         const async unsafe extern \"C\" fn fe5();\n    |         ^^^^^-^^^^^----------------------------\n    |         |     |\n    |         |     `async` because of this\n    |         `const` because of this\n \n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/fn-header-semantic-fail.rs:17:9\n+   |\n+LL |         async fn ft1();\n+   |         -----^^^^^^^^^^\n+   |         |\n+   |         `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/fn-header-semantic-fail.rs:21:9\n+   |\n+LL |         const async unsafe extern \"C\" fn ft5();\n+   |         ^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |               |\n+   |               `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/fn-header-semantic-fail.rs:29:9\n+   |\n+LL |         async fn ft1() {}\n+   |         -----^^^^^^^^^\n+   |         |\n+   |         `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/fn-header-semantic-fail.rs:33:9\n+   |\n+LL |         const async unsafe extern \"C\" fn ft5() {}\n+   |         ^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |               |\n+   |               `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+\n error[E0391]: cycle detected when computing type of `main::ff5::{opaque#0}`\n   --> $DIR/fn-header-semantic-fail.rs:12:44\n    |\n@@ -216,60 +224,24 @@ LL | |     }\n LL | | }\n    | |_^\n \n-error[E0053]: method `ft1` has an incompatible type for trait\n-  --> $DIR/fn-header-semantic-fail.rs:29:24\n-   |\n-LL |         async fn ft1() {}\n-   |                        ^\n-   |                        |\n-   |                        checked the `Output` of this `async fn`, found opaque type\n-   |                        expected `()`, found opaque type\n-   |\n-   = note: while checking the return type of the `async fn`\n-note: type in trait\n-  --> $DIR/fn-header-semantic-fail.rs:17:23\n-   |\n-LL |         async fn ft1();\n-   |                       ^\n-   = note: expected fn pointer `fn()`\n-              found fn pointer `fn() -> impl Future<Output = ()>`\n-\n-error[E0053]: method `ft5` has an incompatible type for trait\n-  --> $DIR/fn-header-semantic-fail.rs:34:48\n-   |\n-LL |         const async unsafe extern \"C\" fn ft5() {}\n-   |                                                ^\n-   |                                                |\n-   |                                                checked the `Output` of this `async fn`, found opaque type\n-   |                                                expected `()`, found opaque type\n-   |\n-   = note: while checking the return type of the `async fn`\n-note: type in trait\n-  --> $DIR/fn-header-semantic-fail.rs:21:47\n-   |\n-LL |         const async unsafe extern \"C\" fn ft5();\n-   |                                               ^\n-   = note: expected fn pointer `unsafe extern \"C\" fn()`\n-              found fn pointer `unsafe extern \"C\" fn() -> impl Future<Output = ()>`\n-\n error[E0391]: cycle detected when computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 28:17>::ft5::{opaque#0}`\n-  --> $DIR/fn-header-semantic-fail.rs:34:48\n+  --> $DIR/fn-header-semantic-fail.rs:33:48\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |                                                ^\n    |\n note: ...which requires borrow-checking `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 28:17>::ft5`...\n-  --> $DIR/fn-header-semantic-fail.rs:34:9\n+  --> $DIR/fn-header-semantic-fail.rs:33:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires processing `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 28:17>::ft5`...\n-  --> $DIR/fn-header-semantic-fail.rs:34:9\n+  --> $DIR/fn-header-semantic-fail.rs:33:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const checking `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 28:17>::ft5`...\n-  --> $DIR/fn-header-semantic-fail.rs:34:9\n+  --> $DIR/fn-header-semantic-fail.rs:33:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -288,30 +260,30 @@ LL | |     }\n LL | | }\n    | |_^\n \n-error[E0391]: cycle detected when computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:42:5: 42:11>::fi5::{opaque#0}`\n-  --> $DIR/fn-header-semantic-fail.rs:47:48\n+error[E0391]: cycle detected when computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:40:5: 40:11>::fi5::{opaque#0}`\n+  --> $DIR/fn-header-semantic-fail.rs:45:48\n    |\n LL |         const async unsafe extern \"C\" fn fi5() {}\n    |                                                ^\n    |\n-note: ...which requires borrow-checking `main::<impl at $DIR/fn-header-semantic-fail.rs:42:5: 42:11>::fi5`...\n-  --> $DIR/fn-header-semantic-fail.rs:47:9\n+note: ...which requires borrow-checking `main::<impl at $DIR/fn-header-semantic-fail.rs:40:5: 40:11>::fi5`...\n+  --> $DIR/fn-header-semantic-fail.rs:45:9\n    |\n LL |         const async unsafe extern \"C\" fn fi5() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires processing `main::<impl at $DIR/fn-header-semantic-fail.rs:42:5: 42:11>::fi5`...\n-  --> $DIR/fn-header-semantic-fail.rs:47:9\n+note: ...which requires processing `main::<impl at $DIR/fn-header-semantic-fail.rs:40:5: 40:11>::fi5`...\n+  --> $DIR/fn-header-semantic-fail.rs:45:9\n    |\n LL |         const async unsafe extern \"C\" fn fi5() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const checking `main::<impl at $DIR/fn-header-semantic-fail.rs:42:5: 42:11>::fi5`...\n-  --> $DIR/fn-header-semantic-fail.rs:47:9\n+note: ...which requires const checking `main::<impl at $DIR/fn-header-semantic-fail.rs:40:5: 40:11>::fi5`...\n+  --> $DIR/fn-header-semantic-fail.rs:45:9\n    |\n LL |         const async unsafe extern \"C\" fn fi5() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires computing whether `impl core::future::future::Future<Output = ()>` is freeze...\n    = note: ...which requires evaluating trait selection obligation `impl core::future::future::Future<Output = ()>: core::marker::Freeze`...\n-   = note: ...which again requires computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:42:5: 42:11>::fi5::{opaque#0}`, completing the cycle\n+   = note: ...which again requires computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:40:5: 40:11>::fi5::{opaque#0}`, completing the cycle\n note: cycle used when checking item types in top-level module\n   --> $DIR/fn-header-semantic-fail.rs:5:1\n    |\n@@ -324,7 +296,7 @@ LL | |     }\n LL | | }\n    | |_^\n \n-error: aborting due to 23 previous errors\n+error: aborting due to 21 previous errors\n \n-Some errors have detailed explanations: E0053, E0379, E0391, E0706.\n-For more information about an error, try `rustc --explain E0053`.\n+Some errors have detailed explanations: E0379, E0391, E0706.\n+For more information about an error, try `rustc --explain E0379`."}, {"sha": "49462f52fb4c2355375bd633eb76b28dcd730501", "filename": "src/test/ui/resolve/issue-70736-async-fn-no-body-def-collector.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.rs?ref=1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5", "patch": "@@ -14,7 +14,6 @@ trait B {\n impl B for A {\n     async fn associated(); //~ ERROR without body\n     //~^ ERROR cannot be declared `async`\n-    //~| ERROR has an incompatible type for trait\n }\n \n fn main() {}"}, {"sha": "55c3b66f1363df29fbb58a8bd48d844aa9ff699d", "filename": "src/test/ui/resolve/issue-70736-async-fn-no-body-def-collector.stderr", "status": "modified", "additions": 14, "deletions": 29, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr?ref=1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5", "patch": "@@ -14,17 +14,6 @@ LL |     async fn inherent();\n    |                        |\n    |                        help: provide a definition for the function: `{ <body> }`\n \n-error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:11:5\n-   |\n-LL |     async fn associated();\n-   |     -----^^^^^^^^^^^^^^^^^\n-   |     |\n-   |     `async` because of this\n-   |\n-   = note: `async` trait functions are not currently supported\n-   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n-\n error: associated function in `impl` without body\n   --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:15:5\n    |\n@@ -34,7 +23,7 @@ LL |     async fn associated();\n    |                          help: provide a definition for the function: `{ <body> }`\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:15:5\n+  --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:11:5\n    |\n LL |     async fn associated();\n    |     -----^^^^^^^^^^^^^^^^^\n@@ -43,26 +32,22 @@ LL |     async fn associated();\n    |\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n-error[E0053]: method `associated` has an incompatible type for trait\n-  --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:15:26\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:15:5\n    |\n LL |     async fn associated();\n-   |                          ^\n-   |                          |\n-   |                          checked the `Output` of this `async fn`, found opaque type\n-   |                          expected `()`, found opaque type\n-   |\n-   = note: while checking the return type of the `async fn`\n-note: type in trait\n-  --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:11:26\n+   |     -----^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n    |\n-LL |     async fn associated();\n-   |                          ^\n-   = note: expected fn pointer `fn()`\n-              found fn pointer `fn() -> impl Future<Output = ()>`\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0053, E0706.\n-For more information about an error, try `rustc --explain E0053`.\n+For more information about this error, try `rustc --explain E0706`."}, {"sha": "94f578af209a8593e10a87e0928556d558833152", "filename": "src/test/ui/span/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs?ref=1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5", "patch": "@@ -12,7 +12,8 @@ impl A {\n \n trait C{async fn new(val: T) {} //~ ERROR  `async fn` is not permitted in Rust 2015\n //~^ ERROR functions in traits cannot be declared `async`\n-//~^^ ERROR cannot find type `T` in this scope\n-//~^^^ WARN changes to closure capture in Rust 2021 will affect drop order [rust_2021_incompatible_closure_captures]\n+//~| ERROR mismatched types\n+//~| ERROR cannot find type `T` in this scope\n+//~| WARN changes to closure capture in Rust 2021 will affect drop order [rust_2021_incompatible_closure_captures]\n \n //~ ERROR  this file contains an unclosed delimiter"}, {"sha": "9819f6501378637700b7aee397be0457b7f2ec1b", "filename": "src/test/ui/span/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.stderr", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.stderr?ref=1f03edeabe7a2ba1eed35cd7beb93c1bc0364bc5", "patch": "@@ -1,5 +1,5 @@\n error: this file contains an unclosed delimiter\n-  --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:18:53\n+  --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:19:53\n    |\n LL | trait C{async fn new(val: T) {}\n    |        - unclosed delimiter\n@@ -25,17 +25,6 @@ LL | trait C{async fn new(val: T) {}\n    = help: pass `--edition 2021` to `rustc`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n-error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:13:9\n-   |\n-LL | trait C{async fn new(val: T) {}\n-   |         -----^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         `async` because of this\n-   |\n-   = note: `async` trait functions are not currently supported\n-   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n-\n error[E0423]: expected function, found module `crate`\n   --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:9:5\n    |\n@@ -51,6 +40,19 @@ LL | pub struct A {}\n LL | trait C{async fn new(val: T) {}\n    |                           ^ help: a struct with a similar name exists: `A`\n \n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:13:9\n+   |\n+LL | trait C{async fn new(val: T) {}\n+   |         -----^^^^^^^^^^^^^^^\n+   |         |\n+   |         `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+\n warning: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:6:57\n    |\n@@ -72,6 +74,20 @@ help: add a dummy let to cause `path` to be fully captured\n LL |     async fn create(path: impl AsRef<std::path::Path>)  { let _ = &path;\n    |                                                           ++++++++++++++\n \n+error[E0308]: mismatched types\n+  --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:13:30\n+   |\n+LL | trait C{async fn new(val: T) {}\n+   |                              ^^ expected associated type, found opaque type\n+   |\n+  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n+   |\n+LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n+   |                                           ------------------------------- the found opaque type\n+   |\n+   = note: expected associated type `<Self as C>::new::{opaque#0}`\n+                  found opaque type `impl Future<Output = ()>`\n+\n warning: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:13:30\n    |\n@@ -87,7 +103,7 @@ help: add a dummy let to cause `val` to be fully captured\n LL | trait C{async fn new(val: T) { let _ = &val;}\n    |                                +++++++++++++\n \n-error: aborting due to 6 previous errors; 2 warnings emitted\n+error: aborting due to 7 previous errors; 2 warnings emitted\n \n-Some errors have detailed explanations: E0412, E0423, E0670, E0706.\n-For more information about an error, try `rustc --explain E0412`.\n+Some errors have detailed explanations: E0308, E0412, E0423, E0670, E0706.\n+For more information about an error, try `rustc --explain E0308`."}]}