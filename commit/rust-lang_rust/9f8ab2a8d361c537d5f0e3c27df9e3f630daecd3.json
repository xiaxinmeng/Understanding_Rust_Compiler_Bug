{"sha": "9f8ab2a8d361c537d5f0e3c27df9e3f630daecd3", "node_id": "C_kwDOAAsO6NoAKDlmOGFiMmE4ZDM2MWM1MzdkNWYwZTNjMjdkZjllM2Y2MzBkYWVjZDM", "commit": {"author": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2023-04-04T08:26:00Z"}, "committer": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2023-05-06T01:34:24Z"}, "message": "rename relative names in `sync`", "tree": {"sha": "aac9fe2b042111d05f611334b335d9a4ea806325", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aac9fe2b042111d05f611334b335d9a4ea806325"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f8ab2a8d361c537d5f0e3c27df9e3f630daecd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f8ab2a8d361c537d5f0e3c27df9e3f630daecd3", "html_url": "https://github.com/rust-lang/rust/commit/9f8ab2a8d361c537d5f0e3c27df9e3f630daecd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f8ab2a8d361c537d5f0e3c27df9e3f630daecd3/comments", "author": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f196e27d87cf2be019098c7562b4c2cf26566680", "url": "https://api.github.com/repos/rust-lang/rust/commits/f196e27d87cf2be019098c7562b4c2cf26566680", "html_url": "https://github.com/rust-lang/rust/commit/f196e27d87cf2be019098c7562b4c2cf26566680"}], "stats": {"total": 53, "additions": 29, "deletions": 24}, "files": [{"sha": "62e65209d722582de133d818cf7a6ee72fdbe20d", "filename": "compiler/rustc_data_structures/src/marker.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f8ab2a8d361c537d5f0e3c27df9e3f630daecd3/compiler%2Frustc_data_structures%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8ab2a8d361c537d5f0e3c27df9e3f630daecd3/compiler%2Frustc_data_structures%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fmarker.rs?ref=9f8ab2a8d361c537d5f0e3c27df9e3f630daecd3", "patch": "@@ -10,7 +10,7 @@ cfg_if!(\n             message = \"`{Self}` doesn't implement `DynSend`. \\\n             Add it to `rustc_data_structures::marker` or use `IntoDyn` if it's already `Send`\"\n         )]\n-        // This is an auto trait for types which can be sent across threads if `sync::active()`\n+        // This is an auto trait for types which can be sent across threads if `sync::is_dyn_thread_safe()`\n         // is true. These types can be wrapped in a `FromDyn` to get a `Send` type. Wrapping a\n         // `Send` type in `IntoDyn` will create a `DynSend` type.\n         pub unsafe auto trait DynSend {}\n@@ -19,7 +19,7 @@ cfg_if!(\n             message = \"`{Self}` doesn't implement `DynSync`. \\\n             Add it to `rustc_data_structures::marker` or use `IntoDyn` if it's already `Sync`\"\n         )]\n-        // This is an auto trait for types which can be shared across threads if `sync::active()`\n+        // This is an auto trait for types which can be shared across threads if `sync::is_dyn_thread_safe()`\n         // is true. These types can be wrapped in a `FromDyn` to get a `Sync` type. Wrapping a\n         // `Sync` type in `IntoDyn` will create a `DynSync` type.\n         pub unsafe auto trait DynSync {}\n@@ -204,11 +204,11 @@ pub struct FromDyn<T>(T);\n impl<T> FromDyn<T> {\n     #[inline(always)]\n     pub fn from(val: T) -> Self {\n-        // Check that `sync::active()` is true on creation so we can\n+        // Check that `sync::is_dyn_thread_safe()` is true on creation so we can\n         // implement `Send` and `Sync` for this structure when `T`\n         // implements `DynSend` and `DynSync` respectively.\n         #[cfg(parallel_compiler)]\n-        assert!(crate::sync::active());\n+        assert!(crate::sync::is_dyn_thread_safe());\n         FromDyn(val)\n     }\n \n@@ -218,11 +218,11 @@ impl<T> FromDyn<T> {\n     }\n }\n \n-// `FromDyn` is `Send` if `T` is `DynSend`, since it ensures that sync::active() is true.\n+// `FromDyn` is `Send` if `T` is `DynSend`, since it ensures that sync::is_dyn_thread_safe() is true.\n #[cfg(parallel_compiler)]\n unsafe impl<T: DynSend> Send for FromDyn<T> {}\n \n-// `FromDyn` is `Sync` if `T` is `DynSync`, since it ensures that sync::active() is true.\n+// `FromDyn` is `Sync` if `T` is `DynSync`, since it ensures that sync::is_dyn_thread_safe() is true.\n #[cfg(parallel_compiler)]\n unsafe impl<T: DynSync> Sync for FromDyn<T> {}\n "}, {"sha": "41aad2ff4e424eda5c08f658a3c32f930ef61017", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9f8ab2a8d361c537d5f0e3c27df9e3f630daecd3/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8ab2a8d361c537d5f0e3c27df9e3f630daecd3/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=9f8ab2a8d361c537d5f0e3c27df9e3f630daecd3", "patch": "@@ -61,32 +61,37 @@ mod mode {\n     use std::sync::atomic::AtomicU8;\n \n     const UNINITIALIZED: u8 = 0;\n-    const INACTIVE: u8 = 1;\n-    const ACTIVE: u8 = 2;\n+    const DYN_NOT_SYNC: u8 = 1;\n+    const DYN_SYNC: u8 = 2;\n \n-    static MODE: AtomicU8 = AtomicU8::new(UNINITIALIZED);\n+    static DYN_SYNC_MODE: AtomicU8 = AtomicU8::new(UNINITIALIZED);\n \n+    // Weather control thread safety dynamically\n     #[inline]\n-    pub fn active() -> bool {\n-        match MODE.load(Ordering::Relaxed) {\n-            INACTIVE => false,\n-            ACTIVE => true,\n+    pub fn is_dyn_thread_safe() -> bool {\n+        match DYN_SYNC_MODE.load(Ordering::Relaxed) {\n+            DYN_NOT_SYNC => false,\n+            DYN_SYNC => true,\n             _ => panic!(\"uninitialized parallel mode!\"),\n         }\n     }\n \n     // Only set by the `-Z threads` compile option\n-    pub fn set(parallel: bool) {\n-        let set: u8 = if parallel { ACTIVE } else { INACTIVE };\n-        let previous =\n-            MODE.compare_exchange(UNINITIALIZED, set, Ordering::Relaxed, Ordering::Relaxed);\n+    pub fn set_dyn_thread_safe_mode(parallel: bool) {\n+        let set: u8 = if parallel { DYN_SYNC } else { DYN_NOT_SYNC };\n+        let previous = DYN_SYNC_MODE.compare_exchange(\n+            UNINITIALIZED,\n+            set,\n+            Ordering::Relaxed,\n+            Ordering::Relaxed,\n+        );\n \n         // Check that the mode was either uninitialized or was already set to the requested mode.\n         assert!(previous.is_ok() || previous == Err(set));\n     }\n }\n \n-pub use mode::{active, set};\n+pub use mode::{is_dyn_thread_safe, set_dyn_thread_safe_mode};\n cfg_if! {\n     if #[cfg(not(parallel_compiler))] {\n         pub unsafe auto trait Send {}\n@@ -358,7 +363,7 @@ cfg_if! {\n             A: FnOnce() -> RA + DynSend,\n             B: FnOnce() -> RB + DynSend,\n         {\n-            if mode::active() {\n+            if mode::is_dyn_thread_safe() {\n                 let oper_a = FromDyn::from(oper_a);\n                 let oper_b = FromDyn::from(oper_b);\n                 let (a, b) = rayon::join(move || FromDyn::from(oper_a.into_inner()()), move || FromDyn::from(oper_b.into_inner()()));\n@@ -368,7 +373,7 @@ cfg_if! {\n             }\n         }\n \n-        // This function only works when `mode::active()`.\n+        // This function only works when `mode::is_dyn_thread_safe()`.\n         pub fn scope<'scope, OP, R>(op: OP) -> R\n         where\n             OP: FnOnce(&rayon::Scope<'scope>) -> R + DynSend,\n@@ -393,7 +398,7 @@ cfg_if! {\n                 });\n             };\n             ($fblock:block, $($blocks:block),*) => {\n-                if rustc_data_structures::sync::active() {\n+                if rustc_data_structures::sync::is_dyn_thread_safe() {\n                     // Reverse the order of the later blocks since Rayon executes them in reverse order\n                     // when using a single thread. This ensures the execution order matches that\n                     // of a single threaded rustc\n@@ -431,7 +436,7 @@ cfg_if! {\n             t: T,\n             for_each: impl Fn(I) + DynSync + DynSend\n         ) {\n-            if mode::active() {\n+            if mode::is_dyn_thread_safe() {\n                 let for_each = FromDyn::from(for_each);\n                 let panic: Lock<Option<_>> = Lock::new(None);\n                 t.into_par_iter().for_each(|i| if let Err(p) = catch_unwind(AssertUnwindSafe(|| for_each(i))) {\n@@ -470,7 +475,7 @@ cfg_if! {\n             t: T,\n             map: impl Fn(I) -> R + DynSync + DynSend\n         ) -> C {\n-            if mode::active() {\n+            if mode::is_dyn_thread_safe() {\n                 let panic: Lock<Option<_>> = Lock::new(None);\n                 let map = FromDyn::from(map);\n                 // We catch panics here ensuring that all the loop iterations execute."}, {"sha": "fb6c273e929f7e2554b165bc4e2806a1f3fc27a0", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f8ab2a8d361c537d5f0e3c27df9e3f630daecd3/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8ab2a8d361c537d5f0e3c27df9e3f630daecd3/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=9f8ab2a8d361c537d5f0e3c27df9e3f630daecd3", "patch": "@@ -62,7 +62,7 @@ impl Compiler {\n \n #[allow(rustc::bad_opt_access)]\n pub fn set_parallel_mode(sopts: &config::UnstableOptions) {\n-    rustc_data_structures::sync::set(sopts.threads > 1);\n+    rustc_data_structures::sync::set_dyn_thread_safe_mode(sopts.threads > 1);\n }\n \n /// Converts strings provided as `--cfg [cfgspec]` into a `crate_cfg`."}]}