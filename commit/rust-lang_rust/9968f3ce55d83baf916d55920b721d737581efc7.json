{"sha": "9968f3ce55d83baf916d55920b721d737581efc7", "node_id": "C_kwDOAAsO6NoAKDk5NjhmM2NlNTVkODNiYWY5MTZkNTU5MjBiNzIxZDczNzU4MWVmYzc", "commit": {"author": {"name": "benediktwerner", "email": "1benediktwerner@gmail.com", "date": "2023-02-25T16:52:25Z"}, "committer": {"name": "Benedikt Werner", "email": "1benediktwerner@gmail.com", "date": "2023-05-30T19:22:30Z"}, "message": "rustdoc: Fix LinkReplacer link matching", "tree": {"sha": "a0f51c9b122caccefaeac77d5b3bf4f822937266", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0f51c9b122caccefaeac77d5b3bf4f822937266"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9968f3ce55d83baf916d55920b721d737581efc7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAAhcAAAAHc3NoLXJzYQAAAAMBAAEAAAIBAMPH6WULiFxCvqcDeOO8Ed\njqIzn69xk4DISLtOOMbIlKnobn0cHbcsKNVw5bCvcHOeZyH/asVQQhFMhDxVQn/2LhLZ/B\ne/UBwL46eukksZpjjXheH3UnL3A80lJOOcaW5zSwa4eshZX31VGq3DAmiPV5XEadxw8uhq\naisy11fbFAkvk16F1ahAZZ4lyMU4LLd9WKuVDZe/nuQ9BC15Kxy/yE6TtmP0wyAJKKJDds\nwdHvUisfLAUmD8KbLrvIg2X0BZ8Wp3DMntvZIauonStQdI2GktvmuALAl7QPJFvzFYlIq2\ngBrjUSPcxoxxOHC7v2fFpQM6l1GVdrPy5gIH/bkhmziL8+IAK/QRw/HlTp2jdS7wuw2HNk\nbFIeM5wL+bRLrbC7Rp5DqT9x59CpcQEB3IGnHI187fIs16+MQOXFyONfTc8JjvvI/oRRAD\n35LOKi0bZKFgoPoGxha9odvPM0W1x0C7g2VdsJVLsX01r7tJfM1Taqb0JVNfTpT3+nncIW\nlIPTqffIPgYrOxynYDru+xSAsrrnMbDjpfy+ot5NllRSMupYsOCPrYQT4nAiNXYsSzJXsf\nkOuJxwGvkB8oDP5VNngbpwAIlG4pJUtsX/lTaZ+YNcUaaQmy8YzLa3ndAaE+kH6DOqM3x8\nkr4n/tg9ahQYMWbeqmntSTbUZPrzmYzdAAAAA2dpdAAAAAAAAAAGc2hhNTEyAAACFAAAAA\nxyc2Etc2hhMi0yNTYAAAIAGUeHS7bINo/J3EmXp4JQ0XJUtfmtR5d7OYhTYw3c88cAD51w\ngPSwI4KEEobbfma0hso97J4WjbmZL8auCIH7yrN8YS6DF2R3OFKekFdpYj4QPM2igq6LLz\nz9Es6BD1G2sQr6k2Le6Wv4PEclC+A/kYZvsG86FBXuptPTlaEVxVh3hkWkjq2/erNdKYl4\nOz0lWZJAtWojcvvn24JN+QuzocxjKDEB2OCafLiWJoNbm31NfH0XOSvcLJ60Yd48XyZP+b\ns9JF7uw70FGlIxZHM8vhGSeT8KYlu8JG15otqnpajj9Fet0lE+sY33coHBOJ8InIKFr8q3\nDOq+vK4xNCPLiOUR1W1EFpdGv62CA2goACqY8+KLOjZbjoBxl5ac28P5cz5G6X5xgMGZIY\nqcmzyCVc6TswNnjm1aQ4KZA0HiBjiFj/+qhkD3ZDRvZ+XVUYlSpB1eNF+9iD0lD3iZ3n0l\nSO07QEIOdfpUZv7C2ZE8bL0fbcREn8QcY9WoNEytIr3+bJyCOgBogFPqZMLfFkVg5BFa+G\nsZOl9R7yVOMBsWPuyDmb54Bn1eMeKXjb2iFYppF123lFUDRP+bbOG1QMuqHw87Qggi3bD4\nh648z3zU3IKFxXFxLse92BVtQlBYBh/St380KoeXmQrzqiCrrFKuzqor0+K10Vibkh9ZoN\nwkRhM=\n-----END SSH SIGNATURE-----", "payload": "tree a0f51c9b122caccefaeac77d5b3bf4f822937266\nparent 26c98689f2060ec834dbe8b8e80b24b31ffd48f2\nauthor benediktwerner <1benediktwerner@gmail.com> 1677343945 +0100\ncommitter Benedikt Werner <1benediktwerner@gmail.com> 1685474550 +0200\n\nrustdoc: Fix LinkReplacer link matching\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9968f3ce55d83baf916d55920b721d737581efc7", "html_url": "https://github.com/rust-lang/rust/commit/9968f3ce55d83baf916d55920b721d737581efc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9968f3ce55d83baf916d55920b721d737581efc7/comments", "author": {"login": "benediktwerner", "id": 19309705, "node_id": "MDQ6VXNlcjE5MzA5NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/19309705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benediktwerner", "html_url": "https://github.com/benediktwerner", "followers_url": "https://api.github.com/users/benediktwerner/followers", "following_url": "https://api.github.com/users/benediktwerner/following{/other_user}", "gists_url": "https://api.github.com/users/benediktwerner/gists{/gist_id}", "starred_url": "https://api.github.com/users/benediktwerner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benediktwerner/subscriptions", "organizations_url": "https://api.github.com/users/benediktwerner/orgs", "repos_url": "https://api.github.com/users/benediktwerner/repos", "events_url": "https://api.github.com/users/benediktwerner/events{/privacy}", "received_events_url": "https://api.github.com/users/benediktwerner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "benediktwerner", "id": 19309705, "node_id": "MDQ6VXNlcjE5MzA5NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/19309705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benediktwerner", "html_url": "https://github.com/benediktwerner", "followers_url": "https://api.github.com/users/benediktwerner/followers", "following_url": "https://api.github.com/users/benediktwerner/following{/other_user}", "gists_url": "https://api.github.com/users/benediktwerner/gists{/gist_id}", "starred_url": "https://api.github.com/users/benediktwerner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benediktwerner/subscriptions", "organizations_url": "https://api.github.com/users/benediktwerner/orgs", "repos_url": "https://api.github.com/users/benediktwerner/repos", "events_url": "https://api.github.com/users/benediktwerner/events{/privacy}", "received_events_url": "https://api.github.com/users/benediktwerner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26c98689f2060ec834dbe8b8e80b24b31ffd48f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/26c98689f2060ec834dbe8b8e80b24b31ffd48f2", "html_url": "https://github.com/rust-lang/rust/commit/26c98689f2060ec834dbe8b8e80b24b31ffd48f2"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "2f7ffce017bc3079f38d0e49115f890bac7325a2", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9968f3ce55d83baf916d55920b721d737581efc7/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968f3ce55d83baf916d55920b721d737581efc7/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=9968f3ce55d83baf916d55920b721d737581efc7", "patch": "@@ -382,7 +382,6 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for LinkReplacer<'a, I> {\n             Some(Event::Code(text)) => {\n                 trace!(\"saw code {}\", text);\n                 if let Some(link) = self.shortcut_link {\n-                    trace!(\"original text was {}\", link.original_text);\n                     // NOTE: this only replaces if the code block is the *entire* text.\n                     // If only part of the link has code highlighting, the disambiguator will not be removed.\n                     // e.g. [fn@`f`]\n@@ -391,8 +390,11 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for LinkReplacer<'a, I> {\n                     // So we could never be sure we weren't replacing too much:\n                     // [fn@my_`f`unc] is treated the same as [my_func()] in that pass.\n                     //\n-                    // NOTE: &[1..len() - 1] is to strip the backticks\n-                    if **text == link.original_text[1..link.original_text.len() - 1] {\n+                    // NOTE: .get(1..len() - 1) is to strip the backticks\n+                    if let Some(link) = self.links.iter().find(|l| {\n+                        l.href == link.href\n+                            && Some(&**text) == l.original_text.get(1..l.original_text.len() - 1)\n+                    }) {\n                         debug!(\"replacing {} with {}\", text, link.new_text);\n                         *text = CowStr::Borrowed(&link.new_text);\n                     }\n@@ -403,9 +405,12 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for LinkReplacer<'a, I> {\n             Some(Event::Text(text)) => {\n                 trace!(\"saw text {}\", text);\n                 if let Some(link) = self.shortcut_link {\n-                    trace!(\"original text was {}\", link.original_text);\n                     // NOTE: same limitations as `Event::Code`\n-                    if **text == *link.original_text {\n+                    if let Some(link) = self\n+                        .links\n+                        .iter()\n+                        .find(|l| l.href == link.href && **text == *l.original_text)\n+                    {\n                         debug!(\"replacing {} with {}\", text, link.new_text);\n                         *text = CowStr::Borrowed(&link.new_text);\n                     }"}, {"sha": "eb1c7a05e54097098212a322763d475a010d5267", "filename": "tests/rustdoc/intra-doc/issue-108459.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9968f3ce55d83baf916d55920b721d737581efc7/tests%2Frustdoc%2Fintra-doc%2Fissue-108459.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968f3ce55d83baf916d55920b721d737581efc7/tests%2Frustdoc%2Fintra-doc%2Fissue-108459.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fintra-doc%2Fissue-108459.rs?ref=9968f3ce55d83baf916d55920b721d737581efc7", "patch": "@@ -0,0 +1,37 @@\n+#![deny(rustdoc::broken_intra_doc_links)]\n+\n+pub struct S;\n+pub mod char {}\n+\n+// Ensure this doesn't ICE due to trying to slice off non-existent backticks from \"S\"\n+\n+/// See [S] and [`S`]\n+pub struct MyStruct1;\n+\n+// Ensure that link texts are replaced correctly even if there are multiple links with\n+// the same target but different text\n+\n+/// See also [crate::char] and [mod@char] and [prim@char]\n+// @has issue_108459/struct.MyStruct2.html '//*[@href=\"char/index.html\"]' 'crate::char'\n+// @has - '//*[@href=\"char/index.html\"]' 'char'\n+// @has - '//*[@href=\"{{channel}}/std/primitive.char.html\"]' 'char'\n+pub struct MyStruct2;\n+\n+/// See also [mod@char] and [prim@char] and [crate::char]\n+// @has issue_108459/struct.MyStruct3.html '//*[@href=\"char/index.html\"]' 'crate::char'\n+// @has - '//*[@href=\"char/index.html\"]' 'char'\n+// @has - '//*[@href=\"{{channel}}/std/primitive.char.html\"]' 'char'\n+pub struct MyStruct3;\n+\n+// Ensure that links are correct even if there are multiple links with the same text but\n+// different targets\n+\n+/// See also [char][mod@char] and [char][prim@char]\n+// @has issue_108459/struct.MyStruct4.html '//*[@href=\"char/index.html\"]' 'char'\n+// @has - '//*[@href=\"{{channel}}/std/primitive.char.html\"]' 'char'\n+pub struct MyStruct4;\n+\n+/// See also [char][prim@char] and [char][crate::char]\n+// @has issue_108459/struct.MyStruct5.html '//*[@href=\"char/index.html\"]' 'char'\n+// @has - '//*[@href=\"{{channel}}/std/primitive.char.html\"]' 'char'\n+pub struct MyStruct5;"}, {"sha": "c5a64e42a01248001d5b11eba64c6745307398eb", "filename": "tests/rustdoc/intra-doc/prim-precedence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9968f3ce55d83baf916d55920b721d737581efc7/tests%2Frustdoc%2Fintra-doc%2Fprim-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9968f3ce55d83baf916d55920b721d737581efc7/tests%2Frustdoc%2Fintra-doc%2Fprim-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fintra-doc%2Fprim-precedence.rs?ref=9968f3ce55d83baf916d55920b721d737581efc7", "patch": "@@ -12,5 +12,5 @@ pub struct MyString;\n \n /// See also [crate::char] and [mod@char]\n // @has prim_precedence/struct.MyString2.html '//*[@href=\"char/index.html\"]' 'crate::char'\n-// @has - '//*[@href=\"char/index.html\"]' 'mod@char'\n+// @has - '//*[@href=\"char/index.html\"]' 'char'\n pub struct MyString2;"}]}