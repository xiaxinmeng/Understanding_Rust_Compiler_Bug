{"sha": "11432ba98043ee0ade961bdedb4b785bf06c086e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNDMyYmE5ODA0M2VlMGFkZTk2MWJkZWRiNGI3ODViZjA2YzA4NmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-11T12:12:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-11T12:12:13Z"}, "message": "Auto merge of #51230 - nikic:no-verify-lto, r=pnkfelix\n\nDisable LLVM verification by default\n\nCurrently -Z no-verify only controls IR verification prior to LLVM codegen, while verification is performed unconditionally both before and after linking with (Thin)LTO.\n\nAlso wondering what the sentiment is on disabling verification by default (and e.g. only enabling it on ALT builds with assertions). This does not seem terribly useful outside of rustc development and it does seem to show up in profiles (at something like 3%).\n\n**EDIT:** A table showing the various configurations and what is enabled when.\n\n| Configuration | Dynamic verification performed | LLVM static assertions compiled in |\n| --- | --- | --- |\n| alt builds | | yes |\n| nightly builds | | no |\n| stable builds | | no |\n| CI builds | | |\n| dev builds in a checkout | | |", "tree": {"sha": "fa90a01c30de78430012adcf37f54c2d55ea5462", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa90a01c30de78430012adcf37f54c2d55ea5462"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11432ba98043ee0ade961bdedb4b785bf06c086e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11432ba98043ee0ade961bdedb4b785bf06c086e", "html_url": "https://github.com/rust-lang/rust/commit/11432ba98043ee0ade961bdedb4b785bf06c086e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11432ba98043ee0ade961bdedb4b785bf06c086e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "989fa053895a27fd40896335224b619843b7e58a", "url": "https://api.github.com/repos/rust-lang/rust/commits/989fa053895a27fd40896335224b619843b7e58a", "html_url": "https://github.com/rust-lang/rust/commit/989fa053895a27fd40896335224b619843b7e58a"}, {"sha": "3f18a41333aabf515d6d343c07f3bbbd154f6018", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f18a41333aabf515d6d343c07f3bbbd154f6018", "html_url": "https://github.com/rust-lang/rust/commit/3f18a41333aabf515d6d343c07f3bbbd154f6018"}], "stats": {"total": 49, "additions": 34, "deletions": 15}, "files": [{"sha": "99073416334f59ef7b02fcae69c7ac276c3084d3", "filename": "config.toml.example", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11432ba98043ee0ade961bdedb4b785bf06c086e/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/11432ba98043ee0ade961bdedb4b785bf06c086e/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=11432ba98043ee0ade961bdedb4b785bf06c086e", "patch": "@@ -360,6 +360,9 @@\n # Print backtrace on internal compiler errors during bootstrap\n #backtrace-on-ice = false\n \n+# Whether to verify generated LLVM IR\n+#verify-llvm-ir = false\n+\n # =============================================================================\n # Options for specific targets\n #"}, {"sha": "e81595a8c62489005737056920ce7330b8ba5ba4", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11432ba98043ee0ade961bdedb4b785bf06c086e/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11432ba98043ee0ade961bdedb4b785bf06c086e/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=11432ba98043ee0ade961bdedb4b785bf06c086e", "patch": "@@ -283,6 +283,10 @@ fn main() {\n         cmd.arg(\"--cfg\").arg(\"parallel_queries\");\n     }\n \n+    if env::var_os(\"RUSTC_VERIFY_LLVM_IR\").is_some() {\n+        cmd.arg(\"-Z\").arg(\"verify-llvm-ir\");\n+    }\n+\n     let color = match env::var(\"RUSTC_COLOR\") {\n         Ok(s) => usize::from_str(&s).expect(\"RUSTC_COLOR should be an integer\"),\n         Err(_) => 0,"}, {"sha": "6c3a476d084db706a821ea2ec5589100d08e26de", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11432ba98043ee0ade961bdedb4b785bf06c086e/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11432ba98043ee0ade961bdedb4b785bf06c086e/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=11432ba98043ee0ade961bdedb4b785bf06c086e", "patch": "@@ -922,6 +922,10 @@ impl<'a> Builder<'a> {\n             cargo.env(\"RUSTC_BACKTRACE_ON_ICE\", \"1\");\n         }\n \n+        if self.config.rust_verify_llvm_ir {\n+            cargo.env(\"RUSTC_VERIFY_LLVM_IR\", \"1\");\n+        }\n+\n         cargo.env(\"RUSTC_VERBOSE\", format!(\"{}\", self.verbosity));\n \n         // in std, we want to avoid denying warnings for stage 0 as that makes cfg's painful."}, {"sha": "420ae1f349c3ed3a3d0d1d841eaf76166f46d160", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11432ba98043ee0ade961bdedb4b785bf06c086e/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11432ba98043ee0ade961bdedb4b785bf06c086e/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=11432ba98043ee0ade961bdedb4b785bf06c086e", "patch": "@@ -105,6 +105,7 @@ pub struct Config {\n     pub rust_dist_src: bool,\n     pub rust_codegen_backends: Vec<Interned<String>>,\n     pub rust_codegen_backends_dir: String,\n+    pub rust_verify_llvm_ir: bool,\n \n     pub build: Interned<String>,\n     pub hosts: Vec<Interned<String>>,\n@@ -312,6 +313,7 @@ struct Rust {\n     llvm_tools: Option<bool>,\n     deny_warnings: Option<bool>,\n     backtrace_on_ice: Option<bool>,\n+    verify_llvm_ir: Option<bool>,\n }\n \n /// TOML representation of how each build target is configured.\n@@ -543,6 +545,7 @@ impl Config {\n             config.save_toolstates = rust.save_toolstates.clone().map(PathBuf::from);\n             set(&mut config.deny_warnings, rust.deny_warnings.or(flags.warnings));\n             set(&mut config.backtrace_on_ice, rust.backtrace_on_ice);\n+            set(&mut config.rust_verify_llvm_ir, rust.verify_llvm_ir);\n \n             if let Some(ref backends) = rust.codegen_backends {\n                 config.rust_codegen_backends = backends.iter()"}, {"sha": "55752141e30ebd4f8e7647be6a8b2f775d58851c", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11432ba98043ee0ade961bdedb4b785bf06c086e/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11432ba98043ee0ade961bdedb4b785bf06c086e/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=11432ba98043ee0ade961bdedb4b785bf06c086e", "patch": "@@ -1151,8 +1151,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"gather codegen statistics\"),\n     asm_comments: bool = (false, parse_bool, [TRACKED],\n         \"generate comments into the assembly (may change behavior)\"),\n-    no_verify: bool = (false, parse_bool, [TRACKED],\n-        \"skip LLVM verification\"),\n+    verify_llvm_ir: bool = (false, parse_bool, [TRACKED],\n+        \"verify LLVM IR\"),\n     borrowck_stats: bool = (false, parse_bool, [UNTRACKED],\n         \"gather borrowck statistics\"),\n     no_landing_pads: bool = (false, parse_bool, [TRACKED],\n@@ -3114,7 +3114,7 @@ mod tests {\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n         opts = reference.clone();\n-        opts.debugging_opts.no_verify = true;\n+        opts.debugging_opts.verify_llvm_ir = true;\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n         opts = reference.clone();"}, {"sha": "ad1df0a1348c53917b67d85dfc373942e97aaa3c", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11432ba98043ee0ade961bdedb4b785bf06c086e/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11432ba98043ee0ade961bdedb4b785bf06c086e/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=11432ba98043ee0ade961bdedb4b785bf06c086e", "patch": "@@ -516,8 +516,8 @@ impl Session {\n     pub fn asm_comments(&self) -> bool {\n         self.opts.debugging_opts.asm_comments\n     }\n-    pub fn no_verify(&self) -> bool {\n-        self.opts.debugging_opts.no_verify\n+    pub fn verify_llvm_ir(&self) -> bool {\n+        self.opts.debugging_opts.verify_llvm_ir\n     }\n     pub fn borrowck_stats(&self) -> bool {\n         self.opts.debugging_opts.borrowck_stats"}, {"sha": "a33f8b569d0a8585e3cee4a92ffbf70e90b19699", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/11432ba98043ee0ade961bdedb4b785bf06c086e/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11432ba98043ee0ade961bdedb4b785bf06c086e/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=11432ba98043ee0ade961bdedb4b785bf06c086e", "patch": "@@ -461,9 +461,12 @@ fn run_pass_manager(cgcx: &CodegenContext,\n     unsafe {\n         let pm = llvm::LLVMCreatePassManager();\n         llvm::LLVMRustAddAnalysisPasses(tm, pm, llmod);\n-        let pass = llvm::LLVMRustFindAndCreatePass(\"verify\\0\".as_ptr() as *const _);\n-        assert!(!pass.is_null());\n-        llvm::LLVMRustAddPass(pm, pass);\n+\n+        if config.verify_llvm_ir {\n+            let pass = llvm::LLVMRustFindAndCreatePass(\"verify\\0\".as_ptr() as *const _);\n+            assert!(!pass.is_null());\n+            llvm::LLVMRustAddPass(pm, pass);\n+        }\n \n         // When optimizing for LTO we don't actually pass in `-O0`, but we force\n         // it to always happen at least with `-O1`.\n@@ -494,9 +497,11 @@ fn run_pass_manager(cgcx: &CodegenContext,\n             }\n         });\n \n-        let pass = llvm::LLVMRustFindAndCreatePass(\"verify\\0\".as_ptr() as *const _);\n-        assert!(!pass.is_null());\n-        llvm::LLVMRustAddPass(pm, pass);\n+        if config.verify_llvm_ir {\n+            let pass = llvm::LLVMRustFindAndCreatePass(\"verify\\0\".as_ptr() as *const _);\n+            assert!(!pass.is_null());\n+            llvm::LLVMRustAddPass(pm, pass);\n+        }\n \n         time_ext(cgcx.time_passes, None, \"LTO passes\", ||\n              llvm::LLVMRunPassManager(pm, llmod));"}, {"sha": "5382bbafcf463cbb21c4b3742d93f4143acd7ab8", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11432ba98043ee0ade961bdedb4b785bf06c086e/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11432ba98043ee0ade961bdedb4b785bf06c086e/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=11432ba98043ee0ade961bdedb4b785bf06c086e", "patch": "@@ -232,7 +232,7 @@ pub struct ModuleConfig {\n     emit_obj: bool,\n     // Miscellaneous flags.  These are mostly copied from command-line\n     // options.\n-    no_verify: bool,\n+    pub verify_llvm_ir: bool,\n     no_prepopulate_passes: bool,\n     no_builtins: bool,\n     time_passes: bool,\n@@ -271,7 +271,7 @@ impl ModuleConfig {\n             embed_bitcode_marker: false,\n             no_integrated_as: false,\n \n-            no_verify: false,\n+            verify_llvm_ir: false,\n             no_prepopulate_passes: false,\n             no_builtins: false,\n             time_passes: false,\n@@ -283,7 +283,7 @@ impl ModuleConfig {\n     }\n \n     fn set_flags(&mut self, sess: &Session, no_builtins: bool) {\n-        self.no_verify = sess.no_verify();\n+        self.verify_llvm_ir = sess.verify_llvm_ir();\n         self.no_prepopulate_passes = sess.opts.cg.no_prepopulate_passes;\n         self.no_builtins = no_builtins || sess.target.target.options.no_builtins;\n         self.time_passes = sess.time_passes();\n@@ -542,7 +542,7 @@ unsafe fn optimize(cgcx: &CodegenContext,\n             true\n         };\n \n-        if !config.no_verify { assert!(addpass(\"verify\")); }\n+        if config.verify_llvm_ir { assert!(addpass(\"verify\")); }\n         if !config.no_prepopulate_passes {\n             llvm::LLVMRustAddAnalysisPasses(tm, fpm, llmod);\n             llvm::LLVMRustAddAnalysisPasses(tm, mpm, llmod);"}]}