{"sha": "bc11b459af451e4c35bf611a0baacba2b7919629", "node_id": "C_kwDOAAsO6NoAKGJjMTFiNDU5YWY0NTFlNGMzNWJmNjExYTBiYWFjYmEyYjc5MTk2Mjk", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-04-20T16:04:28Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-04-20T16:04:28Z"}, "message": "Turn core::fmt::rt::v1 into a private module.", "tree": {"sha": "fca08fb5bb20e96cd40b8efb104afaac5309e2fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fca08fb5bb20e96cd40b8efb104afaac5309e2fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc11b459af451e4c35bf611a0baacba2b7919629", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc11b459af451e4c35bf611a0baacba2b7919629", "html_url": "https://github.com/rust-lang/rust/commit/bc11b459af451e4c35bf611a0baacba2b7919629", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc11b459af451e4c35bf611a0baacba2b7919629/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a77159341e12e02d7f738c709b9798e68bc4af04", "url": "https://api.github.com/repos/rust-lang/rust/commits/a77159341e12e02d7f738c709b9798e68bc4af04", "html_url": "https://github.com/rust-lang/rust/commit/a77159341e12e02d7f738c709b9798e68bc4af04"}], "stats": {"total": 55, "additions": 24, "deletions": 31}, "files": [{"sha": "6988411095f0d3fa376b454ae00ceb997d3d6028", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 21, "deletions": 26, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/bc11b459af451e4c35bf611a0baacba2b7919629/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc11b459af451e4c35bf611a0baacba2b7919629/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=bc11b459af451e4c35bf611a0baacba2b7919629", "patch": "@@ -18,6 +18,7 @@ mod float;\n #[cfg(no_fp_fmt_parse)]\n mod nofloat;\n mod num;\n+mod rt;\n \n #[stable(feature = \"fmt_flags_align\", since = \"1.28.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"Alignment\")]\n@@ -38,12 +39,6 @@ pub enum Alignment {\n #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n pub use self::builders::{DebugList, DebugMap, DebugSet, DebugStruct, DebugTuple};\n \n-#[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n-#[doc(hidden)]\n-pub mod rt {\n-    pub mod v1;\n-}\n-\n /// The type returned by formatter methods.\n ///\n /// # Examples\n@@ -227,7 +222,7 @@ impl<W: Write + ?Sized> Write for &mut W {\n pub struct Formatter<'a> {\n     flags: u32,\n     fill: char,\n-    align: rt::v1::Alignment,\n+    align: rt::Alignment,\n     width: Option<usize>,\n     precision: Option<usize>,\n \n@@ -248,7 +243,7 @@ impl<'a> Formatter<'a> {\n         Formatter {\n             flags: 0,\n             fill: ' ',\n-            align: rt::v1::Alignment::Unknown,\n+            align: rt::Alignment::Unknown,\n             width: None,\n             precision: None,\n             buf,\n@@ -433,17 +428,17 @@ impl<'a> Arguments<'a> {\n     /// An `UnsafeArg` is required because the following invariants must be held\n     /// in order for this function to be safe:\n     /// 1. The `pieces` slice must be at least as long as `fmt`.\n-    /// 2. Every [`rt::v1::Argument::position`] value within `fmt` must be a\n+    /// 2. Every [`rt::Argument::position`] value within `fmt` must be a\n     ///    valid index of `args`.\n-    /// 3. Every [`rt::v1::Count::Param`] within `fmt` must contain a valid index of\n+    /// 3. Every [`rt::Count::Param`] within `fmt` must contain a valid index of\n     ///    `args`.\n     #[doc(hidden)]\n     #[inline]\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n     pub fn new_v1_formatted(\n         pieces: &'a [&'static str],\n         args: &'a [ArgumentV1<'a>],\n-        fmt: &'a [rt::v1::Argument],\n+        fmt: &'a [rt::Argument],\n         _unsafe_arg: UnsafeArg,\n     ) -> Arguments<'a> {\n         Arguments { pieces, fmt: Some(fmt), args }\n@@ -505,7 +500,7 @@ pub struct Arguments<'a> {\n     pieces: &'a [&'static str],\n \n     // Placeholder specs, or `None` if all specs are default (as in \"{}{}\").\n-    fmt: Option<&'a [rt::v1::Argument]>,\n+    fmt: Option<&'a [rt::Argument]>,\n \n     // Dynamic arguments for interpolation, to be interleaved with string\n     // pieces. (Every argument is preceded by a string piece.)\n@@ -1281,7 +1276,7 @@ pub fn write(output: &mut dyn Write, args: Arguments<'_>) -> Result {\n     Ok(())\n }\n \n-unsafe fn run(fmt: &mut Formatter<'_>, arg: &rt::v1::Argument, args: &[ArgumentV1<'_>]) -> Result {\n+unsafe fn run(fmt: &mut Formatter<'_>, arg: &rt::Argument, args: &[ArgumentV1<'_>]) -> Result {\n     fmt.fill = arg.format.fill;\n     fmt.align = arg.format.align;\n     fmt.flags = arg.format.flags;\n@@ -1302,11 +1297,11 @@ unsafe fn run(fmt: &mut Formatter<'_>, arg: &rt::v1::Argument, args: &[ArgumentV\n     (value.formatter)(value.value, fmt)\n }\n \n-unsafe fn getcount(args: &[ArgumentV1<'_>], cnt: &rt::v1::Count) -> Option<usize> {\n+unsafe fn getcount(args: &[ArgumentV1<'_>], cnt: &rt::Count) -> Option<usize> {\n     match *cnt {\n-        rt::v1::Count::Is(n) => Some(n),\n-        rt::v1::Count::Implied => None,\n-        rt::v1::Count::Param(i) => {\n+        rt::Count::Is(n) => Some(n),\n+        rt::Count::Implied => None,\n+        rt::Count::Param(i) => {\n             debug_assert!(i < args.len());\n             // SAFETY: cnt and args come from the same Arguments,\n             // which guarantees this index is always within bounds.\n@@ -1449,7 +1444,7 @@ impl<'a> Formatter<'a> {\n             // is zero\n             Some(min) if self.sign_aware_zero_pad() => {\n                 let old_fill = crate::mem::replace(&mut self.fill, '0');\n-                let old_align = crate::mem::replace(&mut self.align, rt::v1::Alignment::Right);\n+                let old_align = crate::mem::replace(&mut self.align, rt::Alignment::Right);\n                 write_prefix(self, sign, prefix)?;\n                 let post_padding = self.padding(min - width, Alignment::Right)?;\n                 self.buf.write_str(buf)?;\n@@ -1553,10 +1548,10 @@ impl<'a> Formatter<'a> {\n         default: Alignment,\n     ) -> result::Result<PostPadding, Error> {\n         let align = match self.align {\n-            rt::v1::Alignment::Unknown => default,\n-            rt::v1::Alignment::Left => Alignment::Left,\n-            rt::v1::Alignment::Right => Alignment::Right,\n-            rt::v1::Alignment::Center => Alignment::Center,\n+            rt::Alignment::Unknown => default,\n+            rt::Alignment::Left => Alignment::Left,\n+            rt::Alignment::Right => Alignment::Right,\n+            rt::Alignment::Center => Alignment::Center,\n         };\n \n         let (pre_pad, post_pad) = match align {\n@@ -1788,10 +1783,10 @@ impl<'a> Formatter<'a> {\n     #[stable(feature = \"fmt_flags_align\", since = \"1.28.0\")]\n     pub fn align(&self) -> Option<Alignment> {\n         match self.align {\n-            rt::v1::Alignment::Left => Some(Alignment::Left),\n-            rt::v1::Alignment::Right => Some(Alignment::Right),\n-            rt::v1::Alignment::Center => Some(Alignment::Center),\n-            rt::v1::Alignment::Unknown => None,\n+            rt::Alignment::Left => Some(Alignment::Left),\n+            rt::Alignment::Right => Some(Alignment::Right),\n+            rt::Alignment::Center => Some(Alignment::Center),\n+            rt::Alignment::Unknown => None,\n         }\n     }\n "}, {"sha": "58dbe314d08bece11d7979e09133ae47f6af8026", "filename": "library/core/src/fmt/rt.rs", "status": "renamed", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bc11b459af451e4c35bf611a0baacba2b7919629/library%2Fcore%2Fsrc%2Ffmt%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc11b459af451e4c35bf611a0baacba2b7919629/library%2Fcore%2Fsrc%2Ffmt%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Frt.rs?ref=bc11b459af451e4c35bf611a0baacba2b7919629", "patch": "@@ -1,9 +1,7 @@\n-//! This is an internal module used by the ifmt! runtime. These structures are\n-//! emitted to static arrays to precompile format strings ahead of time.\n-//!\n-//! These definitions are similar to their `ct` equivalents, but differ in that\n-//! these can be statically allocated and are slightly optimized for the runtime\n #![allow(missing_debug_implementations)]\n+#![unstable(feature = \"fmt_internals\", issue = \"none\")]\n+\n+//! These are the lang items used by format_args!().\n \n #[lang = \"format_placeholder\"]\n #[derive(Copy, Clone)]", "previous_filename": "library/core/src/fmt/rt/v1.rs"}]}