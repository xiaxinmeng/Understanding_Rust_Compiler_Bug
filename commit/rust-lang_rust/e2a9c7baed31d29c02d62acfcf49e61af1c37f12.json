{"sha": "e2a9c7baed31d29c02d62acfcf49e61af1c37f12", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYTljN2JhZWQzMWQyOWMwMmQ2MmFjZmNmNDllNjFhZjFjMzdmMTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-27T11:35:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-27T11:35:25Z"}, "message": "Auto merge of #1266 - JOE1994:write_os_str_to_wide_str, r=RalfJung\n\nChange helper fn 'write_os_str_to_wide_str'\n\nHelper fn `write_os_str_to_wide_str` now works on `Scalar<Tag>`, just like other **read/write os_str** helper functions.\n\nThe 2nd commit contains some changes made to `src/shims/env.rs` in PR #1225, in order to keep it from bloating too much.", "tree": {"sha": "65561c5e60c38b8aca407a8887f7b5c8ba806660", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65561c5e60c38b8aca407a8887f7b5c8ba806660"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2a9c7baed31d29c02d62acfcf49e61af1c37f12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2a9c7baed31d29c02d62acfcf49e61af1c37f12", "html_url": "https://github.com/rust-lang/rust/commit/e2a9c7baed31d29c02d62acfcf49e61af1c37f12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2a9c7baed31d29c02d62acfcf49e61af1c37f12/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d0a457c8b1750e82f19527b18b313f3514633f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d0a457c8b1750e82f19527b18b313f3514633f0", "html_url": "https://github.com/rust-lang/rust/commit/0d0a457c8b1750e82f19527b18b313f3514633f0"}, {"sha": "07f7083409c3cdb112249bc4f5930c3713d1bbb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/07f7083409c3cdb112249bc4f5930c3713d1bbb4", "html_url": "https://github.com/rust-lang/rust/commit/07f7083409c3cdb112249bc4f5930c3713d1bbb4"}], "stats": {"total": 93, "additions": 44, "deletions": 49}, "files": [{"sha": "a11e231acb30e2ee7aa7f29160a6a1bcb22257d0", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2a9c7baed31d29c02d62acfcf49e61af1c37f12/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/e2a9c7baed31d29c02d62acfcf49e61af1c37f12/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=e2a9c7baed31d29c02d62acfcf49e61af1c37f12", "patch": "@@ -1 +1 @@\n-a5fb9ae5b2ed3cb011ada9dc1e8633aa0927f279\n+7b73d14b0b35e7b4f79f2d71dc1bbbab31698288"}, {"sha": "3e89fdf6f3cce652cf756dd015d4b2cfd3fcd33d", "filename": "src/helpers.rs", "status": "modified", "additions": 5, "deletions": 36, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e2a9c7baed31d29c02d62acfcf49e61af1c37f12/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2a9c7baed31d29c02d62acfcf49e61af1c37f12/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=e2a9c7baed31d29c02d62acfcf49e61af1c37f12", "patch": "@@ -463,18 +463,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n     }\n \n-    /// Dispatches to appropriate implementations for reading an OsString from Memory,\n-    /// depending on the interpretation target.\n-    /// FIXME: Use `Cow` to avoid copies\n-    fn read_os_str_from_target_str(&self, scalar: Scalar<Tag>) -> InterpResult<'tcx, OsString> {\n-        let target_os = self.eval_context_ref().tcx.sess.target.target.target_os.as_str();\n-        match target_os {\n-            \"linux\" | \"macos\" => self.read_os_str_from_c_str(scalar).map(|x| x.to_os_string()),\n-            \"windows\" => self.read_os_str_from_wide_str(scalar),\n-            unsupported => throw_unsup_format!(\"OsString support for target OS `{}` not yet available\", unsupported),\n-        }\n-    }\n-\n     /// Helper function to read an OsString from a null-terminated sequence of bytes, which is what\n     /// the Unix APIs usually handle.\n     fn read_os_str_from_c_str<'a>(&'a self, scalar: Scalar<Tag>) -> InterpResult<'tcx, &'a OsStr>\n@@ -567,7 +555,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn write_os_str_to_wide_str(\n         &mut self,\n         os_str: &OsStr,\n-        mplace: MPlaceTy<'tcx, Tag>,\n+        scalar: Scalar<Tag>,\n         size: u64,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         #[cfg(windows)]\n@@ -593,32 +581,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             return Ok((false, string_length));\n         }\n \n-        let this = self.eval_context_mut();\n-\n         // Store the UTF-16 string.\n-        let char_size = Size::from_bytes(2);\n-        for (idx, c) in u16_vec.into_iter().chain(iter::once(0x0000)).enumerate() {\n-            let place = this.mplace_field(mplace, idx)?;\n-            this.write_scalar(Scalar::from_uint(c, char_size), place.into())?;\n-        }\n+        self.eval_context_mut()\n+            .memory\n+            .write_u16s(scalar, u16_vec.into_iter().chain(iter::once(0x0000)))?;\n         Ok((true, string_length))\n     }\n \n-    /// Dispatches to appropriate implementations for allocating & writing OsString in Memory,\n-    /// depending on the interpretation target.\n-    fn alloc_os_str_as_target_str(\n-        &mut self,\n-        os_str: &OsStr,\n-        memkind: MemoryKind<MiriMemoryKind>,\n-    ) -> InterpResult<'tcx, Pointer<Tag>> {\n-        let target_os = self.eval_context_ref().tcx.sess.target.target.target_os.as_str();\n-        match target_os {\n-            \"linux\" | \"macos\" => Ok(self.alloc_os_str_as_c_str(os_str, memkind)),\n-            \"windows\" => Ok(self.alloc_os_str_as_wide_str(os_str, memkind)),\n-            unsupported => throw_unsup_format!(\"OsString support for target OS `{}` not yet available\", unsupported),\n-        }\n-    }\n-\n     /// Allocate enough memory to store the given `OsStr` as a null-terminated sequence of bytes.\n     fn alloc_os_str_as_c_str(\n         &mut self,\n@@ -645,7 +614,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let arg_type = this.tcx.mk_array(this.tcx.types.u16, size);\n         let arg_place = this.allocate(this.layout_of(arg_type).unwrap(), memkind);\n-        assert!(self.write_os_str_to_wide_str(os_str, arg_place, size).unwrap().0);\n+        assert!(self.write_os_str_to_wide_str(os_str, arg_place.ptr, size).unwrap().0);\n         arg_place.ptr.assert_ptr()\n     }\n "}, {"sha": "79c386e894ecb76be6ba0d8b587d657ae8b92cb7", "filename": "src/shims/env.rs", "status": "modified", "additions": 38, "deletions": 12, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e2a9c7baed31d29c02d62acfcf49e61af1c37f12/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2a9c7baed31d29c02d62acfcf49e61af1c37f12/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=e2a9c7baed31d29c02d62acfcf49e61af1c37f12", "patch": "@@ -26,10 +26,14 @@ impl<'tcx> EnvVars<'tcx> {\n         excluded_env_vars: Vec<String>,\n     ) -> InterpResult<'tcx> {\n         if ecx.machine.communicate {\n+            let target_os = ecx.tcx.sess.target.target.target_os.as_str();\n             for (name, value) in env::vars() {\n                 if !excluded_env_vars.contains(&name) {\n-                    let var_ptr =\n-                        alloc_env_var_as_target_str(name.as_ref(), value.as_ref(), ecx)?;\n+                    let var_ptr = match target_os {\n+                        \"linux\" | \"macos\" => alloc_env_var_as_c_str(name.as_ref(), value.as_ref(), ecx)?,\n+                        \"windows\" => alloc_env_var_as_wide_str(name.as_ref(), value.as_ref(), ecx)?,\n+                        unsupported => throw_unsup_format!(\"environment support for target OS `{}` not yet available\", unsupported),\n+                    };\n                     ecx.machine.env_vars.map.insert(OsString::from(name), var_ptr);\n                 }\n             }\n@@ -38,30 +42,41 @@ impl<'tcx> EnvVars<'tcx> {\n     }\n }\n \n-fn alloc_env_var_as_target_str<'mir, 'tcx>(\n+fn alloc_env_var_as_c_str<'mir, 'tcx>(\n     name: &OsStr,\n     value: &OsStr,\n     ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n ) -> InterpResult<'tcx, Pointer<Tag>> {\n     let mut name_osstring = name.to_os_string();\n     name_osstring.push(\"=\");\n     name_osstring.push(value);\n-    Ok(ecx.alloc_os_str_as_target_str(name_osstring.as_os_str(), MiriMemoryKind::Machine.into())?)\n+    Ok(ecx.alloc_os_str_as_c_str(name_osstring.as_os_str(), MiriMemoryKind::Machine.into()))\n+}\n+\n+fn alloc_env_var_as_wide_str<'mir, 'tcx>(\n+    name: &OsStr,\n+    value: &OsStr,\n+    ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n+) -> InterpResult<'tcx, Pointer<Tag>> {\n+    let mut name_osstring = name.to_os_string();\n+    name_osstring.push(\"=\");\n+    name_osstring.push(value);\n+    Ok(ecx.alloc_os_str_as_wide_str(name_osstring.as_os_str(), MiriMemoryKind::Machine.into()))\n }\n \n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn getenv(&mut self, name_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, Scalar<Tag>> {\n         let this = self.eval_context_mut();\n-        let target_os = this.tcx.sess.target.target.target_os.as_str();\n-        assert!(target_os == \"linux\" || target_os == \"macos\", \"`{}` is only available for the UNIX target family\");\n+        let target_os = &this.tcx.sess.target.target.target_os;\n+        assert!(target_os == \"linux\" || target_os == \"macos\", \"`getenv` is only available for the UNIX target family\");\n \n         let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n         let name = this.read_os_str_from_c_str(name_ptr)?;\n         Ok(match this.machine.env_vars.map.get(name) {\n-            // The offset is used to strip the \"{name}=\" part of the string.\n             Some(var_ptr) => {\n-                Scalar::from(var_ptr.offset(Size::from_bytes(name.len()) + Size::from_bytes(1), this)?)\n+                // The offset is used to strip the \"{name}=\" part of the string.\n+                Scalar::from(var_ptr.offset(Size::from_bytes(u64::try_from(name.len()).unwrap().checked_add(1).unwrap()), this)?)\n             }\n             None => Scalar::ptr_null(&*this.tcx),\n         })\n@@ -73,32 +88,40 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         value_op: OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, i32> {\n         let mut this = self.eval_context_mut();\n+        let target_os = &this.tcx.sess.target.target.target_os;\n+        assert!(target_os == \"linux\" || target_os == \"macos\", \"`setenv` is only available for the UNIX target family\");\n \n         let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n         let value_ptr = this.read_scalar(value_op)?.not_undef()?;\n-        let value = this.read_os_str_from_target_str(value_ptr)?;\n+\n         let mut new = None;\n         if !this.is_null(name_ptr)? {\n-            let name = this.read_os_str_from_target_str(name_ptr)?;\n+            let name = this.read_os_str_from_c_str(name_ptr)?;\n             if !name.is_empty() && !name.to_string_lossy().contains('=') {\n+                let value = this.read_os_str_from_c_str(value_ptr)?;\n                 new = Some((name.to_owned(), value.to_owned()));\n             }\n         }\n         if let Some((name, value)) = new {\n-            let var_ptr = alloc_env_var_as_target_str(&name, &value, &mut this)?;\n+            let var_ptr = alloc_env_var_as_c_str(&name, &value, &mut this)?;\n             if let Some(var) = this.machine.env_vars.map.insert(name, var_ptr) {\n                 this.memory\n                     .deallocate(var, None, MiriMemoryKind::Machine.into())?;\n             }\n             this.update_environ()?;\n-            Ok(0)\n+            Ok(0) // return zero on success\n         } else {\n+            // name argument is a null pointer, points to an empty string, or points to a string containing an '=' character.\n+            let einval = this.eval_libc(\"EINVAL\")?;\n+            this.set_last_error(einval)?;\n             Ok(-1)\n         }\n     }\n \n     fn unsetenv(&mut self, name_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n+        let target_os = &this.tcx.sess.target.target.target_os;\n+        assert!(target_os == \"linux\" || target_os == \"macos\", \"`unsetenv` is only available for the UNIX target family\");\n \n         let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n         let mut success = None;\n@@ -116,6 +139,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             this.update_environ()?;\n             Ok(0)\n         } else {\n+            // name argument is a null pointer, points to an empty string, or points to a string containing an '=' character.\n+            let einval = this.eval_libc(\"EINVAL\")?;\n+            this.set_last_error(einval)?;\n             Ok(-1)\n         }\n     }"}]}