{"sha": "fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMjlhNGNkYTU5ZWU2MGM2ZmJmYThhNTI0MjliMjdhNTk2YWFhNmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-13T17:08:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-13T17:08:39Z"}, "message": "Auto merge of #52242 - ashtneoi:suggest-ref-mut, r=pnkfelix\n\nNLL: Suggest `ref mut` and `&mut self`\n\nFixes #51244. Supersedes #51249, I think.\n\nUnder the old lexical lifetimes, the compiler provided helpful suggestions about adding `mut` when you tried to mutate a variable bound as `&self` or (explicit) `ref`. NLL doesn't have those suggestions yet. This pull request adds them.\n\nI didn't bother making the help text exactly the same as without NLL, but I can if that's important.\n\n(Originally this was supposed to be part of #51612, but I got bogged down trying to fit everything in one PR.)", "tree": {"sha": "5209cc1b3596750a4ee15dfc862e06139f2a7805", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5209cc1b3596750a4ee15dfc862e06139f2a7805"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d", "html_url": "https://github.com/rust-lang/rust/commit/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bce32b532de61434841b7c2ce3085e1f63d6a7a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/bce32b532de61434841b7c2ce3085e1f63d6a7a1", "html_url": "https://github.com/rust-lang/rust/commit/bce32b532de61434841b7c2ce3085e1f63d6a7a1"}, {"sha": "1ed861910f1a875c7bf19ee398cad1570b92aad4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ed861910f1a875c7bf19ee398cad1570b92aad4", "html_url": "https://github.com/rust-lang/rust/commit/1ed861910f1a875c7bf19ee398cad1570b92aad4"}], "stats": {"total": 299, "additions": 239, "deletions": 60}, "files": [{"sha": "79b4382369217bfb72776c41c6cfd5c72e55ff1c", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d", "patch": "@@ -39,6 +39,7 @@ use rustc::middle::free_region::RegionRelations;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::query::Providers;\n use rustc_mir::util::borrowck_errors::{BorrowckErrors, Origin};\n+use rustc_mir::util::suggest_ref_mut;\n use rustc::util::nodemap::FxHashSet;\n \n use std::cell::RefCell;\n@@ -1206,15 +1207,15 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 self.note_immutable_local(db, error_node_id, node_id)\n             }\n             Some(ImmutabilityBlame::LocalDeref(node_id)) => {\n-                let let_span = self.tcx.hir.span(node_id);\n                 match self.local_binding_mode(node_id) {\n                     ty::BindByReference(..) => {\n-                        let snippet = self.tcx.sess.codemap().span_to_snippet(let_span);\n-                        if let Ok(snippet) = snippet {\n-                            db.span_label(\n+                        let let_span = self.tcx.hir.span(node_id);\n+                        let suggestion = suggest_ref_mut(self.tcx, let_span);\n+                        if let Some((let_span, replace_str)) = suggestion {\n+                            db.span_suggestion(\n                                 let_span,\n-                                format!(\"consider changing this to `{}`\",\n-                                         snippet.replace(\"ref \", \"ref mut \"))\n+                                \"use a mutable reference instead\",\n+                                replace_str,\n                             );\n                         }\n                     }"}, {"sha": "03eaee362c70a7196f697ca1e0f6c971bc06faef", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 56, "deletions": 32, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d", "patch": "@@ -44,6 +44,7 @@ use dataflow::{EverInitializedPlaces, MovingOutStatements};\n use dataflow::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n use util::borrowck_errors::{BorrowckErrors, Origin};\n use util::collect_writes::FindAssignments;\n+use util::suggest_ref_mut;\n \n use self::borrow_set::{BorrowData, BorrowSet};\n use self::flows::Flows;\n@@ -1837,17 +1838,41 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             Place::Projection(box Projection {\n                 base: Place::Local(local),\n                 elem: ProjectionElem::Deref,\n-            }) if self.mir.local_decls[*local].is_nonref_binding() =>\n-            {\n-                let (err_help_span, suggested_code) =\n-                    find_place_to_suggest_ampmut(self.tcx, self.mir, *local);\n-                err.span_suggestion(\n-                    err_help_span,\n-                    \"consider changing this to be a mutable reference\",\n-                    suggested_code,\n-                );\n-\n+            }) if self.mir.local_decls[*local].is_user_variable.is_some() => {\n                 let local_decl = &self.mir.local_decls[*local];\n+                let suggestion = match local_decl.is_user_variable.as_ref().unwrap() {\n+                    ClearCrossCrate::Set(mir::BindingForm::ImplicitSelf) => {\n+                        Some(suggest_ampmut_self(local_decl))\n+                    },\n+\n+                    ClearCrossCrate::Set(mir::BindingForm::Var(mir::VarBindingForm {\n+                        binding_mode: ty::BindingMode::BindByValue(_),\n+                        opt_ty_info,\n+                        ..\n+                    })) => Some(suggest_ampmut(\n+                        self.tcx,\n+                        self.mir,\n+                        *local,\n+                        local_decl,\n+                        *opt_ty_info,\n+                    )),\n+\n+                    ClearCrossCrate::Set(mir::BindingForm::Var(mir::VarBindingForm {\n+                        binding_mode: ty::BindingMode::BindByReference(_),\n+                        ..\n+                    })) => suggest_ref_mut(self.tcx, local_decl.source_info.span),\n+\n+                    ClearCrossCrate::Clear => bug!(\"saw cleared local state\"),\n+                };\n+\n+                if let Some((err_help_span, suggested_code)) = suggestion {\n+                    err.span_suggestion(\n+                        err_help_span,\n+                        \"consider changing this to be a mutable reference\",\n+                        suggested_code,\n+                    );\n+                }\n+\n                 if let Some(name) = local_decl.name {\n                     err.span_label(\n                         span,\n@@ -1874,13 +1899,16 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         err.emit();\n         return true;\n \n-        // Returns the span to highlight and the associated text to\n-        // present when suggesting that the user use an `&mut`.\n-        //\n+        fn suggest_ampmut_self<'cx, 'gcx, 'tcx>(\n+            local_decl: &mir::LocalDecl<'tcx>,\n+        ) -> (Span, String) {\n+            (local_decl.source_info.span, \"&mut self\".to_string())\n+        }\n+\n         // When we want to suggest a user change a local variable to be a `&mut`, there\n         // are three potential \"obvious\" things to highlight:\n         //\n-        // let ident [: Type] [= RightHandSideExresssion];\n+        // let ident [: Type] [= RightHandSideExpression];\n         //     ^^^^^    ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^\n         //     (1.)     (2.)              (3.)\n         //\n@@ -1889,48 +1917,44 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         // for example, if the RHS is present and the Type is not, then the type is going to\n         // be inferred *from* the RHS, which means we should highlight that (and suggest\n         // that they borrow the RHS mutably).\n-        fn find_place_to_suggest_ampmut<'cx, 'gcx, 'tcx>(\n+        //\n+        // This implementation attempts to emulate AST-borrowck prioritization\n+        // by trying (3.), then (2.) and finally falling back on (1.).\n+        fn suggest_ampmut<'cx, 'gcx, 'tcx>(\n             tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n             mir: &Mir<'tcx>,\n             local: Local,\n+            local_decl: &mir::LocalDecl<'tcx>,\n+            opt_ty_info: Option<Span>,\n         ) -> (Span, String) {\n-            // This implementation attempts to emulate AST-borrowck prioritization\n-            // by trying (3.), then (2.) and finally falling back on (1.).\n             let locations = mir.find_assignments(local);\n             if locations.len() > 0 {\n                 let assignment_rhs_span = mir.source_info(locations[0]).span;\n                 let snippet = tcx.sess.codemap().span_to_snippet(assignment_rhs_span);\n                 if let Ok(src) = snippet {\n-                    // pnkfelix inherited code; believes intention is\n-                    // highlighted text will always be `&<expr>` and\n-                    // thus can transform to `&mut` by slicing off\n-                    // first ASCII character and prepending \"&mut \".\n                     if src.starts_with('&') {\n                         let borrowed_expr = src[1..].to_string();\n-                        return (assignment_rhs_span, format!(\"&mut {}\", borrowed_expr));\n+                        return (\n+                            assignment_rhs_span,\n+                            format!(\"&mut {}\", borrowed_expr),\n+                        );\n                     }\n                 }\n             }\n \n-            let local_decl = &mir.local_decls[local];\n-            let highlight_span = match local_decl.is_user_variable {\n+            let highlight_span = match opt_ty_info {\n                 // if this is a variable binding with an explicit type,\n                 // try to highlight that for the suggestion.\n-                Some(ClearCrossCrate::Set(mir::BindingForm::Var(mir::VarBindingForm {\n-                    opt_ty_info: Some(ty_span),\n-                    ..\n-                }))) => ty_span,\n-\n-                Some(ClearCrossCrate::Clear) => bug!(\"saw cleared local state\"),\n+                Some(ty_span) => ty_span,\n \n                 // otherwise, just highlight the span associated with\n                 // the (MIR) LocalDecl.\n-                _ => local_decl.source_info.span,\n+                None => local_decl.source_info.span,\n             };\n \n             let ty_mut = local_decl.ty.builtin_deref(true).unwrap();\n             assert_eq!(ty_mut.mutbl, hir::MutImmutable);\n-            return (highlight_span, format!(\"&mut {}\", ty_mut.ty));\n+            (highlight_span, format!(\"&mut {}\", ty_mut.ty))\n         }\n     }\n "}, {"sha": "92c0a2b475c20dacdeae77b02f1c6c2b505c49a9", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d", "patch": "@@ -33,6 +33,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(never_type)]\n #![feature(specialization)]\n #![feature(try_trait)]\n+#![feature(unicode_internals)]\n \n #![recursion_limit=\"256\"]\n \n@@ -56,6 +57,7 @@ extern crate rustc_target;\n extern crate log_settings;\n extern crate rustc_apfloat;\n extern crate byteorder;\n+extern crate core;\n \n mod diagnostics;\n "}, {"sha": "78e9dd23e83ae718387a9fa5bd1e47e2a50028e3", "filename": "src/librustc_mir/util/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Flibrustc_mir%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Flibrustc_mir%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fmod.rs?ref=fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use core::unicode::property::Pattern_White_Space;\n+use rustc::ty;\n+use syntax_pos::Span;\n+\n pub mod borrowck_errors;\n pub mod elaborate_drops;\n pub mod def_use;\n@@ -23,3 +27,19 @@ pub use self::alignment::is_disaligned;\n pub use self::pretty::{dump_enabled, dump_mir, write_mir_pretty, PassWhere};\n pub use self::graphviz::{write_mir_graphviz};\n pub use self::graphviz::write_node_label as write_graphviz_node_label;\n+\n+/// If possible, suggest replacing `ref` with `ref mut`.\n+pub fn suggest_ref_mut<'cx, 'gcx, 'tcx>(\n+    tcx: ty::TyCtxt<'cx, 'gcx, 'tcx>,\n+    pattern_span: Span,\n+) -> Option<(Span, String)> {\n+    let hi_src = tcx.sess.codemap().span_to_snippet(pattern_span).unwrap();\n+    if hi_src.starts_with(\"ref\")\n+        && hi_src[\"ref\".len()..].starts_with(Pattern_White_Space)\n+    {\n+        let replacement = format!(\"ref mut{}\", &hi_src[\"ref\".len()..]);\n+        Some((pattern_span, replacement))\n+    } else {\n+        None\n+    }\n+}"}, {"sha": "d156d64b9d693503dcdcce306e92bd9f047ae1da", "filename": "src/test/ui/did_you_mean/issue-38147-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.nll.stderr?ref=fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow immutable item `*self.s` as mutable\n   --> $DIR/issue-38147-1.rs:27:9\n    |\n LL |     fn f(&self) {\n-   |          ----- help: consider changing this to be a mutable reference: `&mut Foo<'_>`\n+   |          ----- help: consider changing this to be a mutable reference: `&mut self`\n LL |         self.s.push('x'); //~ ERROR cannot borrow data mutably\n    |         ^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n "}, {"sha": "e2d2fcd63db122c244f273ec9dee1e991ea545c7", "filename": "src/test/ui/did_you_mean/issue-39544.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.nll.stderr?ref=fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d", "patch": "@@ -10,15 +10,15 @@ error[E0596]: cannot borrow immutable item `self.x` as mutable\n   --> $DIR/issue-39544.rs:26:17\n    |\n LL |     fn foo<'z>(&'z self) {\n-   |                -------- help: consider changing this to be a mutable reference: `&mut Z`\n+   |                -------- help: consider changing this to be a mutable reference: `&mut self`\n LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow immutable item `self.x` as mutable\n   --> $DIR/issue-39544.rs:30:17\n    |\n LL |     fn foo1(&self, other: &Z) {\n-   |             ----- help: consider changing this to be a mutable reference: `&mut Z`\n+   |             ----- help: consider changing this to be a mutable reference: `&mut self`\n LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n@@ -35,7 +35,7 @@ error[E0596]: cannot borrow immutable item `self.x` as mutable\n   --> $DIR/issue-39544.rs:35:17\n    |\n LL |     fn foo2<'a>(&'a self, other: &Z) {\n-   |                 -------- help: consider changing this to be a mutable reference: `&mut Z`\n+   |                 -------- help: consider changing this to be a mutable reference: `&mut self`\n LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n "}, {"sha": "f00ad3d6505be021633a70fef7566c3bf3adfa16", "filename": "src/test/ui/nll/issue-51244.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Ftest%2Fui%2Fnll%2Fissue-51244.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Ftest%2Fui%2Fnll%2Fissue-51244.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51244.rs?ref=fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+\n+fn main() {\n+    let ref my_ref @ _ = 0;\n+    *my_ref = 0;\n+    //~^ ERROR cannot assign to `*my_ref` which is behind a `&` reference [E0594]\n+}"}, {"sha": "4e04aec8fe1af324aba85e48356cd944d7bf3f7f", "filename": "src/test/ui/nll/issue-51244.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Ftest%2Fui%2Fnll%2Fissue-51244.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Ftest%2Fui%2Fnll%2Fissue-51244.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51244.stderr?ref=fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d", "patch": "@@ -0,0 +1,11 @@\n+error[E0594]: cannot assign to `*my_ref` which is behind a `&` reference\n+  --> $DIR/issue-51244.rs:15:5\n+   |\n+LL |     let ref my_ref @ _ = 0;\n+   |         -------------- help: consider changing this to be a mutable reference: `ref mut my_ref @ _`\n+LL |     *my_ref = 0;\n+   |     ^^^^^^^^^^^ `my_ref` is a `&` reference, so the data it refers to cannot be written\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "a9b2bca434cbac08a5409d17cc837dd4c7c323ae", "filename": "src/test/ui/rfc-2005-default-binding-mode/enum.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.nll.stderr?ref=fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d", "patch": "@@ -2,19 +2,19 @@ error[E0594]: cannot assign to `*x` which is behind a `&` reference\n   --> $DIR/enum.rs:19:5\n    |\n LL |     *x += 1; //~ ERROR cannot assign to immutable\n-   |     ^^^^^^^ cannot assign\n+   |     ^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be written\n \n error[E0594]: cannot assign to `*x` which is behind a `&` reference\n   --> $DIR/enum.rs:23:9\n    |\n LL |         *x += 1; //~ ERROR cannot assign to immutable\n-   |         ^^^^^^^ cannot assign\n+   |         ^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be written\n \n error[E0594]: cannot assign to `*x` which is behind a `&` reference\n   --> $DIR/enum.rs:29:9\n    |\n LL |         *x += 1; //~ ERROR cannot assign to immutable\n-   |         ^^^^^^^ cannot assign\n+   |         ^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be written\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ad05de9f3575f739e9b820c655f9f93b11a14a31", "filename": "src/test/ui/rfc-2005-default-binding-mode/enum.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.stderr?ref=fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d", "patch": "@@ -1,24 +1,18 @@\n error[E0594]: cannot assign to immutable borrowed content `*x`\n   --> $DIR/enum.rs:19:5\n    |\n-LL |     let Wrap(x) = &Wrap(3);\n-   |              - consider changing this to `x`\n LL |     *x += 1; //~ ERROR cannot assign to immutable\n    |     ^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to immutable borrowed content `*x`\n   --> $DIR/enum.rs:23:9\n    |\n-LL |     if let Some(x) = &Some(3) {\n-   |                 - consider changing this to `x`\n LL |         *x += 1; //~ ERROR cannot assign to immutable\n    |         ^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to immutable borrowed content `*x`\n   --> $DIR/enum.rs:29:9\n    |\n-LL |     while let Some(x) = &Some(3) {\n-   |                    - consider changing this to `x`\n LL |         *x += 1; //~ ERROR cannot assign to immutable\n    |         ^^^^^^^ cannot borrow as mutable\n "}, {"sha": "4c6149a8b7b30e8d93031a76839e67808bd07d62", "filename": "src/test/ui/rfc-2005-default-binding-mode/explicit-mut.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.nll.stderr?ref=fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d", "patch": "@@ -2,19 +2,19 @@ error[E0594]: cannot assign to `*n` which is behind a `&` reference\n   --> $DIR/explicit-mut.rs:17:13\n    |\n LL |             *n += 1; //~ ERROR cannot assign to immutable\n-   |             ^^^^^^^ cannot assign\n+   |             ^^^^^^^ `n` is a `&` reference, so the data it refers to cannot be written\n \n error[E0594]: cannot assign to `*n` which is behind a `&` reference\n   --> $DIR/explicit-mut.rs:25:13\n    |\n LL |             *n += 1; //~ ERROR cannot assign to immutable\n-   |             ^^^^^^^ cannot assign\n+   |             ^^^^^^^ `n` is a `&` reference, so the data it refers to cannot be written\n \n error[E0594]: cannot assign to `*n` which is behind a `&` reference\n   --> $DIR/explicit-mut.rs:33:13\n    |\n LL |             *n += 1; //~ ERROR cannot assign to immutable\n-   |             ^^^^^^^ cannot assign\n+   |             ^^^^^^^ `n` is a `&` reference, so the data it refers to cannot be written\n \n error: aborting due to 3 previous errors\n "}, {"sha": "8da67a6b5ee6520abd8084b16b04386959f4146b", "filename": "src/test/ui/rfc-2005-default-binding-mode/explicit-mut.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.stderr?ref=fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d", "patch": "@@ -1,24 +1,18 @@\n error[E0594]: cannot assign to immutable borrowed content `*n`\n   --> $DIR/explicit-mut.rs:17:13\n    |\n-LL |         Some(n) => {\n-   |              - consider changing this to `n`\n LL |             *n += 1; //~ ERROR cannot assign to immutable\n    |             ^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to immutable borrowed content `*n`\n   --> $DIR/explicit-mut.rs:25:13\n    |\n-LL |         Some(n) => {\n-   |              - consider changing this to `n`\n LL |             *n += 1; //~ ERROR cannot assign to immutable\n    |             ^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to immutable borrowed content `*n`\n   --> $DIR/explicit-mut.rs:33:13\n    |\n-LL |         Some(n) => {\n-   |              - consider changing this to `n`\n LL |             *n += 1; //~ ERROR cannot assign to immutable\n    |             ^^^^^^^ cannot borrow as mutable\n "}, {"sha": "ce02ae2aec23f25d44aafb8cde8c57027eb65a4a", "filename": "src/test/ui/suggestions/issue-51244.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-51244.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-51244.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-51244.nll.stderr?ref=fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d", "patch": "@@ -0,0 +1,11 @@\n+error[E0594]: cannot assign to `*my_ref` which is behind a `&` reference\n+  --> $DIR/issue-51244.rs:13:5\n+   |\n+LL |     let ref my_ref @ _ = 0;\n+   |         -------------- help: consider changing this to be a mutable reference: `ref mut my_ref @ _`\n+LL |     *my_ref = 0; //~ ERROR cannot assign to immutable borrowed content `*my_ref` [E0594]\n+   |     ^^^^^^^^^^^ `my_ref` is a `&` reference, so the data it refers to cannot be written\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "50a21184a98b90a5bd7014ba0626ff4dd0d18222", "filename": "src/test/ui/suggestions/issue-51244.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-51244.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-51244.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-51244.rs?ref=fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let ref my_ref @ _ = 0;\n+    *my_ref = 0; //~ ERROR cannot assign to immutable borrowed content `*my_ref` [E0594]\n+}"}, {"sha": "997a74295e565a68fea8ae287f4bbe48d15d66eb", "filename": "src/test/ui/suggestions/issue-51244.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-51244.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-51244.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-51244.stderr?ref=fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d", "patch": "@@ -0,0 +1,11 @@\n+error[E0594]: cannot assign to immutable borrowed content `*my_ref`\n+  --> $DIR/issue-51244.rs:13:5\n+   |\n+LL |     let ref my_ref @ _ = 0;\n+   |         -------------- help: use a mutable reference instead: `ref mut my_ref @ _`\n+LL |     *my_ref = 0; //~ ERROR cannot assign to immutable borrowed content `*my_ref` [E0594]\n+   |     ^^^^^^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "30b5371af1ac58f642f48113100256a75bf2a553", "filename": "src/test/ui/suggestions/suggest-ref-mut.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-mut.rs?ref=fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+\n+struct X(usize);\n+\n+impl X {\n+    fn zap(&self) {\n+        //~^ HELP\n+        //~| SUGGESTION &mut self\n+        self.0 = 32;\n+        //~^ ERROR\n+    }\n+}\n+\n+fn main() {\n+    let ref foo = 16;\n+    //~^ HELP\n+    //~| SUGGESTION ref mut foo\n+    *foo = 32;\n+    //~^ ERROR\n+    if let Some(ref bar) = Some(16) {\n+        //~^ HELP\n+        //~| SUGGESTION ref mut bar\n+        *bar = 32;\n+        //~^ ERROR\n+    }\n+    match 16 {\n+        ref quo => { *quo = 32; },\n+        //~^ ERROR\n+        //~| HELP\n+        //~| SUGGESTION ref mut quo\n+    }\n+}"}, {"sha": "0b2b240ef53a8fcb44c7cc9f5ea0c5c68c244d31", "filename": "src/test/ui/suggestions/suggest-ref-mut.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-mut.stderr?ref=fe29a4cda59ee60c6fbfa8a52429b27a596aaa6d", "patch": "@@ -0,0 +1,38 @@\n+error[E0594]: cannot assign to `self.0` which is behind a `&` reference\n+  --> $DIR/suggest-ref-mut.rs:19:9\n+   |\n+LL |     fn zap(&self) {\n+   |            ----- help: consider changing this to be a mutable reference: `&mut self`\n+...\n+LL |         self.0 = 32;\n+   |         ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be written\n+\n+error[E0594]: cannot assign to `*foo` which is behind a `&` reference\n+  --> $DIR/suggest-ref-mut.rs:28:5\n+   |\n+LL |     let ref foo = 16;\n+   |         ------- help: consider changing this to be a mutable reference: `ref mut foo`\n+...\n+LL |     *foo = 32;\n+   |     ^^^^^^^^^ `foo` is a `&` reference, so the data it refers to cannot be written\n+\n+error[E0594]: cannot assign to `*bar` which is behind a `&` reference\n+  --> $DIR/suggest-ref-mut.rs:33:9\n+   |\n+LL |     if let Some(ref bar) = Some(16) {\n+   |                 ------- help: consider changing this to be a mutable reference: `ref mut bar`\n+...\n+LL |         *bar = 32;\n+   |         ^^^^^^^^^ `bar` is a `&` reference, so the data it refers to cannot be written\n+\n+error[E0594]: cannot assign to `*quo` which is behind a `&` reference\n+  --> $DIR/suggest-ref-mut.rs:37:22\n+   |\n+LL |         ref quo => { *quo = 32; },\n+   |         -------      ^^^^^^^^^ `quo` is a `&` reference, so the data it refers to cannot be written\n+   |         |\n+   |         help: consider changing this to be a mutable reference: `ref mut quo`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0594`."}]}