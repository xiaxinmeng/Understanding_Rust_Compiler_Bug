{"sha": "3122510748ba67128fb2b5ed28367dbbc1602a8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMjI1MTA3NDhiYTY3MTI4ZmIyYjVlZDI4MzY3ZGJiYzE2MDJhOGM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-17T06:20:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-17T06:20:49Z"}, "message": "Rollup merge of #82826 - pierwill:fix-IPv, r=JohnTitor\n\n(std::net::parser): Fix capitalization of IP version names\n\nAlso add some missing puctuation in doc and code comments.", "tree": {"sha": "51234f1793978fa76ff8cb963ac59ed5a6f2eef3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51234f1793978fa76ff8cb963ac59ed5a6f2eef3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3122510748ba67128fb2b5ed28367dbbc1602a8c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgUZ/CCRBK7hj4Ov3rIwAAdHIIAH1R25k9Ew5UwinLxwqdRUlN\n2yUJkDo1xk5iQz5ZofCJbp3hM+ADXutnRYOt0+/vzV/vfqbcLXqVfxKPm0Q6EnNV\nTAHJQ6vj61xbGy3AB+fcPsU4ejRMPWCGpIrPe3buk8XRYhv8f0W/a13XxYP93xSR\nKdTN3QUpBRDuPyM1/UQOINV+RgGflMtiRmlf6ZOmKKIq34u5it8/O3c73u2yIInC\nt4v+hBTnyo6pMA2/z+l/opVrvqpuv7r4K6w7l5ui51PNEWSY3Un78wBHvgY9A7o7\nIA1iKL2rSvwROqQDePcthwNiRLi3S9D6hXHkuylJs7zkzH2/7GryeXgi9ehfrwY=\n=ERdd\n-----END PGP SIGNATURE-----\n", "payload": "tree 51234f1793978fa76ff8cb963ac59ed5a6f2eef3\nparent a16db3dcda83dec3e7a46f2e6028a5b8eb7cec80\nparent b86c0d85e52262b7dedc20922fff105ba82a1c4c\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1615962049 +0900\ncommitter GitHub <noreply@github.com> 1615962049 +0900\n\nRollup merge of #82826 - pierwill:fix-IPv, r=JohnTitor\n\n(std::net::parser): Fix capitalization of IP version names\n\nAlso add some missing puctuation in doc and code comments.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3122510748ba67128fb2b5ed28367dbbc1602a8c", "html_url": "https://github.com/rust-lang/rust/commit/3122510748ba67128fb2b5ed28367dbbc1602a8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3122510748ba67128fb2b5ed28367dbbc1602a8c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a16db3dcda83dec3e7a46f2e6028a5b8eb7cec80", "url": "https://api.github.com/repos/rust-lang/rust/commits/a16db3dcda83dec3e7a46f2e6028a5b8eb7cec80", "html_url": "https://github.com/rust-lang/rust/commit/a16db3dcda83dec3e7a46f2e6028a5b8eb7cec80"}, {"sha": "b86c0d85e52262b7dedc20922fff105ba82a1c4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b86c0d85e52262b7dedc20922fff105ba82a1c4c", "html_url": "https://github.com/rust-lang/rust/commit/b86c0d85e52262b7dedc20922fff105ba82a1c4c"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "7064ed3ed236d9162b73fee4e4a2d03d1326d787", "filename": "library/std/src/net/parser.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3122510748ba67128fb2b5ed28367dbbc1602a8c/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3122510748ba67128fb2b5ed28367dbbc1602a8c/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs?ref=3122510748ba67128fb2b5ed28367dbbc1602a8c", "patch": "@@ -35,7 +35,7 @@ macro_rules! impl_helper {\n impl_helper! { u8 u16 u32 }\n \n struct Parser<'a> {\n-    // parsing as ASCII, so can use byte array\n+    // Parsing as ASCII, so can use byte array.\n     state: &'a [u8],\n }\n \n@@ -44,7 +44,7 @@ impl<'a> Parser<'a> {\n         Parser { state: input.as_bytes() }\n     }\n \n-    /// Run a parser, and restore the pre-parse state if it fails\n+    /// Run a parser, and restore the pre-parse state if it fails.\n     fn read_atomically<T, F>(&mut self, inner: F) -> Option<T>\n     where\n         F: FnOnce(&mut Parser<'_>) -> Option<T>,\n@@ -126,7 +126,7 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    /// Read an IPv4 address\n+    /// Read an IPv4 address.\n     fn read_ipv4_addr(&mut self) -> Option<Ipv4Addr> {\n         self.read_atomically(|p| {\n             let mut groups = [0; 4];\n@@ -139,18 +139,18 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    /// Read an IPV6 Address\n+    /// Read an IPv6 Address.\n     fn read_ipv6_addr(&mut self) -> Option<Ipv6Addr> {\n-        /// Read a chunk of an ipv6 address into `groups`. Returns the number\n+        /// Read a chunk of an IPv6 address into `groups`. Returns the number\n         /// of groups read, along with a bool indicating if an embedded\n-        /// trailing ipv4 address was read. Specifically, read a series of\n-        /// colon-separated ipv6 groups (0x0000 - 0xFFFF), with an optional\n-        /// trailing embedded ipv4 address.\n+        /// trailing IPv4 address was read. Specifically, read a series of\n+        /// colon-separated IPv6 groups (0x0000 - 0xFFFF), with an optional\n+        /// trailing embedded IPv4 address.\n         fn read_groups(p: &mut Parser<'_>, groups: &mut [u16]) -> (usize, bool) {\n             let limit = groups.len();\n \n             for (i, slot) in groups.iter_mut().enumerate() {\n-                // Try to read a trailing embedded ipv4 address. There must be\n+                // Try to read a trailing embedded IPv4 address. There must be\n                 // at least two groups left.\n                 if i < limit - 1 {\n                     let ipv4 = p.read_separator(':', i, |p| p.read_ipv4_addr());\n@@ -188,8 +188,8 @@ impl<'a> Parser<'a> {\n                 return None;\n             }\n \n-            // read `::` if previous code parsed less than 8 groups\n-            // `::` indicates one or more groups of 16 bits of zeros\n+            // Read `::` if previous code parsed less than 8 groups.\n+            // `::` indicates one or more groups of 16 bits of zeros.\n             p.read_given_char(':')?;\n             p.read_given_char(':')?;\n \n@@ -206,28 +206,28 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    /// Read an IP Address, either IPV4 or IPV6.\n+    /// Read an IP Address, either IPv4 or IPv6.\n     fn read_ip_addr(&mut self) -> Option<IpAddr> {\n         self.read_ipv4_addr().map(IpAddr::V4).or_else(move || self.read_ipv6_addr().map(IpAddr::V6))\n     }\n \n-    /// Read a : followed by a port in base 10.\n+    /// Read a `:` followed by a port in base 10.\n     fn read_port(&mut self) -> Option<u16> {\n         self.read_atomically(|p| {\n             p.read_given_char(':')?;\n             p.read_number(10, None)\n         })\n     }\n \n-    /// Read a % followed by a scope id in base 10.\n+    /// Read a `%` followed by a scope ID in base 10.\n     fn read_scope_id(&mut self) -> Option<u32> {\n         self.read_atomically(|p| {\n             p.read_given_char('%')?;\n             p.read_number(10, None)\n         })\n     }\n \n-    /// Read an IPV4 address with a port\n+    /// Read an IPv4 address with a port.\n     fn read_socket_addr_v4(&mut self) -> Option<SocketAddrV4> {\n         self.read_atomically(|p| {\n             let ip = p.read_ipv4_addr()?;\n@@ -236,7 +236,7 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    /// Read an IPV6 address with a port\n+    /// Read an IPv6 address with a port.\n     fn read_socket_addr_v6(&mut self) -> Option<SocketAddrV6> {\n         self.read_atomically(|p| {\n             p.read_given_char('[')?;"}]}