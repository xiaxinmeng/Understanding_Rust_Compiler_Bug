{"sha": "80c793c1d360570837d897a713a64b450f50f028", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwYzc5M2MxZDM2MDU3MDgzN2Q4OTdhNzEzYTY0YjQ1MGY1MGYwMjg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-24T22:25:07Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-30T10:56:39Z"}, "message": "Allow individual upvars to be inferred to move semantics. Fixes #21603.", "tree": {"sha": "be692cc2fb0a7e22c1a58bbe83d18f621be0b76c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be692cc2fb0a7e22c1a58bbe83d18f621be0b76c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80c793c1d360570837d897a713a64b450f50f028", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80c793c1d360570837d897a713a64b450f50f028", "html_url": "https://github.com/rust-lang/rust/commit/80c793c1d360570837d897a713a64b450f50f028", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80c793c1d360570837d897a713a64b450f50f028/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f29cdeb4bdd7aa724d3872deb4d8f59c17aa1bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f29cdeb4bdd7aa724d3872deb4d8f59c17aa1bd", "html_url": "https://github.com/rust-lang/rust/commit/2f29cdeb4bdd7aa724d3872deb4d8f59c17aa1bd"}], "stats": {"total": 174, "additions": 167, "deletions": 7}, "files": [{"sha": "9457a1a99f6d516bc12d4865de941459eef5e556", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/80c793c1d360570837d897a713a64b450f50f028/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c793c1d360570837d897a713a64b450f50f028/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=80c793c1d360570837d897a713a64b450f50f028", "patch": "@@ -366,6 +366,9 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n                         consume_id: ast::NodeId,\n                         consume_span: Span,\n                         cmt: mc::cmt<'tcx>) {\n+        debug!(\"delegate_consume(consume_id={}, cmt={})\",\n+               consume_id, cmt.repr(self.tcx()));\n+\n         let mode = copy_or_move(self.typer, &cmt, DirectRefMove);\n         self.delegate.consume(consume_id, consume_span, cmt, mode);\n     }"}, {"sha": "aa876fcb5f6fb98c2c4a03ef2f740bcf8b7e3941", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80c793c1d360570837d897a713a64b450f50f028/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c793c1d360570837d897a713a64b450f50f028/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=80c793c1d360570837d897a713a64b450f50f028", "patch": "@@ -305,7 +305,7 @@ impl<'a, 'tcx> mc::Typer<'tcx> for FnCtxt<'a, 'tcx> {\n     }\n     fn type_moves_by_default(&self, span: Span, ty: Ty<'tcx>) -> bool {\n         let ty = self.infcx().resolve_type_vars_if_possible(&ty);\n-        traits::type_known_to_meet_builtin_bound(self.infcx(), self, ty, ty::BoundCopy, span)\n+        !traits::type_known_to_meet_builtin_bound(self.infcx(), self, ty, ty::BoundCopy, span)\n     }\n     fn node_method_ty(&self, method_call: ty::MethodCall)\n                       -> Option<Ty<'tcx>> {"}, {"sha": "449220b1c85285c4b56fc79a76a0b65d60484b3a", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 47, "deletions": 6, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/80c793c1d360570837d897a713a64b450f50f028/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c793c1d360570837d897a713a64b450f50f028/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=80c793c1d360570837d897a713a64b450f50f028", "patch": "@@ -176,6 +176,41 @@ impl<'a,'tcx> AdjustBorrowKind<'a,'tcx> {\n         euv.walk_fn(decl, body);\n     }\n \n+    fn adjust_upvar_borrow_kind_for_consume(&self,\n+                                            cmt: mc::cmt<'tcx>,\n+                                            mode: euv::ConsumeMode)\n+    {\n+        debug!(\"adjust_upvar_borrow_kind_for_consume(cmt={}, mode={:?})\",\n+               cmt.repr(self.tcx()), mode);\n+\n+        // we only care about moves\n+        match mode {\n+            euv::Copy => { return; }\n+            euv::Move(_) => { }\n+        }\n+\n+        // watch out for a move of the deref of a borrowed pointer;\n+        // for that to be legal, the upvar would have to be borrowed\n+        // by value instead\n+        let guarantor = cmt.guarantor();\n+        debug!(\"adjust_upvar_borrow_kind_for_consume: guarantor={}\",\n+               guarantor.repr(self.tcx()));\n+        match guarantor.cat {\n+            mc::cat_deref(_, _, mc::BorrowedPtr(..)) |\n+            mc::cat_deref(_, _, mc::Implicit(..)) => {\n+                if let mc::NoteUpvarRef(upvar_id) = cmt.note {\n+                    debug!(\"adjust_upvar_borrow_kind_for_consume: \\\n+                            setting upvar_id={:?} to by value\",\n+                           upvar_id);\n+\n+                    let mut upvar_capture_map = self.fcx.inh.upvar_capture_map.borrow_mut();\n+                    upvar_capture_map.insert(upvar_id, ty::UpvarCapture::ByValue);\n+                }\n+            }\n+            _ => { }\n+        }\n+    }\n+\n     /// Indicates that `cmt` is being directly mutated (e.g., assigned\n     /// to). If cmt contains any by-ref upvars, this implies that\n     /// those upvars must be borrowed using an `&mut` borow.\n@@ -319,9 +354,12 @@ impl<'a,'tcx> euv::Delegate<'tcx> for AdjustBorrowKind<'a,'tcx> {\n     fn consume(&mut self,\n                _consume_id: ast::NodeId,\n                _consume_span: Span,\n-               _cmt: mc::cmt<'tcx>,\n-               _mode: euv::ConsumeMode)\n-    {}\n+               cmt: mc::cmt<'tcx>,\n+               mode: euv::ConsumeMode)\n+    {\n+        debug!(\"consume(cmt={},mode={:?})\", cmt.repr(self.tcx()), mode);\n+        self.adjust_upvar_borrow_kind_for_consume(cmt, mode);\n+    }\n \n     fn matched_pat(&mut self,\n                    _matched_pat: &ast::Pat,\n@@ -331,9 +369,12 @@ impl<'a,'tcx> euv::Delegate<'tcx> for AdjustBorrowKind<'a,'tcx> {\n \n     fn consume_pat(&mut self,\n                    _consume_pat: &ast::Pat,\n-                   _cmt: mc::cmt<'tcx>,\n-                   _mode: euv::ConsumeMode)\n-    {}\n+                   cmt: mc::cmt<'tcx>,\n+                   mode: euv::ConsumeMode)\n+    {\n+        debug!(\"consume_pat(cmt={},mode={:?})\", cmt.repr(self.tcx()), mode);\n+        self.adjust_upvar_borrow_kind_for_consume(cmt, mode);\n+    }\n \n     fn borrow(&mut self,\n               borrow_id: ast::NodeId,"}, {"sha": "e66610c14960757e852c51c5110f9749948a2993", "filename": "src/test/compile-fail/unboxed-closures-move-upvar-from-non-once-ref-closure.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/80c793c1d360570837d897a713a64b450f50f028/src%2Ftest%2Fcompile-fail%2Funboxed-closures-move-upvar-from-non-once-ref-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c793c1d360570837d897a713a64b450f50f028/src%2Ftest%2Fcompile-fail%2Funboxed-closures-move-upvar-from-non-once-ref-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-move-upvar-from-non-once-ref-closure.rs?ref=80c793c1d360570837d897a713a64b450f50f028", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that a by-ref `FnMut` closure gets an error when it tries to\n+// consume a value.\n+\n+fn call<F>(f: F) where F : Fn() {\n+    f();\n+}\n+\n+fn main() {\n+    let y = vec!(format!(\"World\"));\n+    call(|| {\n+        y.into_iter();\n+        //~^ ERROR cannot move out of captured outer variable in an `Fn` closure\n+    });\n+}"}, {"sha": "2345a86595e2da0223b60d29f68147c5964c3bdc", "filename": "src/test/compile-fail/unboxed-closures-mutated-upvar-from-fn-closure.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/80c793c1d360570837d897a713a64b450f50f028/src%2Ftest%2Fcompile-fail%2Funboxed-closures-mutated-upvar-from-fn-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c793c1d360570837d897a713a64b450f50f028/src%2Ftest%2Fcompile-fail%2Funboxed-closures-mutated-upvar-from-fn-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-mutated-upvar-from-fn-closure.rs?ref=80c793c1d360570837d897a713a64b450f50f028", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that a by-ref `FnMut` closure gets an error when it tries to\n+// mutate a value.\n+\n+fn call<F>(f: F) where F : Fn() {\n+    f();\n+}\n+\n+fn main() {\n+    let mut counter = 0_u32;\n+    call(|| {\n+        counter += 1;\n+        //~^ ERROR cannot assign to data in a captured outer variable in an `Fn` closure\n+    });\n+}"}, {"sha": "e921f0c723ee5a6a1f2d3e2d4d6ba3076bd89cbb", "filename": "src/test/run-pass/unboxed-closures-counter-not-moved.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/80c793c1d360570837d897a713a64b450f50f028/src%2Ftest%2Frun-pass%2Funboxed-closures-counter-not-moved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c793c1d360570837d897a713a64b450f50f028/src%2Ftest%2Frun-pass%2Funboxed-closures-counter-not-moved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-counter-not-moved.rs?ref=80c793c1d360570837d897a713a64b450f50f028", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we mutate a counter on the stack only when we expect to.\n+\n+fn call<F>(f: F) where F : FnOnce() {\n+    f();\n+}\n+\n+fn main() {\n+    let y = vec!(format!(\"Hello\"), format!(\"World\"));\n+    let mut counter = 22_u32;\n+\n+    call(|| {\n+        // Move `y`, but do not move `counter`, even though it is read\n+        // by value (note that it is also mutated).\n+        for item in y.into_iter() {\n+            let v = counter;\n+            counter += v;\n+        }\n+    });\n+    assert_eq!(counter, 88);\n+\n+    call(move || {\n+        // this mutates a moved copy, and hence doesn't affect original\n+        counter += 1;\n+    });\n+    assert_eq!(counter, 88);\n+}"}, {"sha": "9534ee6fa12619449e6568bc11f46b2847751e92", "filename": "src/test/run-pass/unboxed-closures-move-some-upvars-in-by-ref-closure.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/80c793c1d360570837d897a713a64b450f50f028/src%2Ftest%2Frun-pass%2Funboxed-closures-move-some-upvars-in-by-ref-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c793c1d360570837d897a713a64b450f50f028/src%2Ftest%2Frun-pass%2Funboxed-closures-move-some-upvars-in-by-ref-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-move-some-upvars-in-by-ref-closure.rs?ref=80c793c1d360570837d897a713a64b450f50f028", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that in a by-ref once closure we move some variables even as\n+// we capture others by mutable reference.\n+\n+fn call<F>(f: F) where F : FnOnce() {\n+    f();\n+}\n+\n+fn main() {\n+    let mut x = vec!(format!(\"Hello\"));\n+    let y = vec!(format!(\"World\"));\n+    call(|| {\n+        // Here: `x` must be captured with a mutable reference in\n+        // order for us to append on it, and `y` must be captured by\n+        // value.\n+        for item in y.into_iter() {\n+            x.push(item);\n+        }\n+    });\n+    assert_eq!(x.len(), 2);\n+    assert_eq!(&*x[0], \"Hello\");\n+    assert_eq!(&*x[1], \"World\");\n+}"}]}