{"sha": "3a9bf24bb3d0fbcc8cabfecb03bb60c3cfa8babe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhOWJmMjRiYjNkMGZiY2M4Y2FiZmVjYjAzYmI2MGMzY2ZhOGJhYmU=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-04-30T13:17:06Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-04-30T13:17:06Z"}, "message": "Added constant lookup (with help from Manish) to bad_bit_mask", "tree": {"sha": "6ac9e9b8b72c322fb97cb2e68d14488413c037b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ac9e9b8b72c322fb97cb2e68d14488413c037b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a9bf24bb3d0fbcc8cabfecb03bb60c3cfa8babe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a9bf24bb3d0fbcc8cabfecb03bb60c3cfa8babe", "html_url": "https://github.com/rust-lang/rust/commit/3a9bf24bb3d0fbcc8cabfecb03bb60c3cfa8babe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a9bf24bb3d0fbcc8cabfecb03bb60c3cfa8babe/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b675236df81e26458f9741664766d3812e6c1bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b675236df81e26458f9741664766d3812e6c1bb", "html_url": "https://github.com/rust-lang/rust/commit/8b675236df81e26458f9741664766d3812e6c1bb"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "881eafa310ecfb75f363c6f9fd0eb3d9e58a4c17", "filename": "src/bit_mask.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3a9bf24bb3d0fbcc8cabfecb03bb60c3cfa8babe/src%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a9bf24bb3d0fbcc8cabfecb03bb60c3cfa8babe/src%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbit_mask.rs?ref=3a9bf24bb3d0fbcc8cabfecb03bb60c3cfa8babe", "patch": "@@ -19,6 +19,8 @@\n \n use rustc::plugin::Registry;\n use rustc::lint::*;\n+use rustc::middle::const_eval::lookup_const_by_id;\n+use rustc::middle::def::*;\n use syntax::ast::*;\n use syntax::ast_util::{is_comparison_binop, binop_to_string};\n use syntax::ptr::P;\n@@ -41,7 +43,7 @@ impl LintPass for BitMask {\n     fn check_expr(&mut self, cx: &Context, e: &Expr) {\n         if let ExprBinary(ref cmp, ref left, ref right) = e.node {\n \t\t\tif is_comparison_binop(cmp.node) {\n-\t\t\t\tfetch_int_literal(&right.node).map(|cmp_value| check_compare(cx, left, cmp.node, cmp_value, &e.span));\n+\t\t\t\tfetch_int_literal(cx, right).map(|cmp_value| check_compare(cx, left, cmp.node, cmp_value, &e.span));\n \t\t\t}\n \t\t}\n     }\n@@ -52,9 +54,9 @@ fn check_compare(cx: &Context, bit_op: &Expr, cmp_op: BinOp_, cmp_value: u64, sp\n \t\t&ExprParen(ref subexp) => check_compare(cx, subexp, cmp_op, cmp_value, span),\n \t\t&ExprBinary(ref op, ref left, ref right) => {\n \t\t\tif op.node != BiBitAnd && op.node != BiBitOr { return; }\n-\t\t\tif let Some(mask_value) = fetch_int_literal(&right.node) {\n+\t\t\tif let Some(mask_value) = fetch_int_literal(cx, right) {\n \t\t\t\tcheck_bit_mask(cx, op.node, cmp_op, mask_value, cmp_value, span);\n-\t\t\t} else if let Some(mask_value) = fetch_int_literal(&left.node) {\n+\t\t\t} else if let Some(mask_value) = fetch_int_literal(cx, left) {\n \t\t\t\tcheck_bit_mask(cx, op.node, cmp_op, mask_value, cmp_value, span);\n \t\t\t}\n \t\t},\n@@ -101,11 +103,22 @@ fn check_bit_mask(cx: &Context, bit_op: BinOp_, cmp_op: BinOp_, mask_value: u64,\n \t}\n }\n \n-fn fetch_int_literal(lit : &Expr_) -> Option<u64> {\n-\tif let &ExprLit(ref lit_ptr) = lit {\n-\t\tif let &LitInt(value, _) = &lit_ptr.node {\n-\t\t\treturn Option::Some(value); //TODO: Handle sign\n-\t\t}\n+fn fetch_int_literal(cx: &Context, lit : &Expr) -> Option<u64> {\n+\tmatch &lit.node {\n+\t\t&ExprLit(ref lit_ptr) => {\n+\t\t\tif let &LitInt(value, _) = &lit_ptr.node {\n+\t\t\t\tOption::Some(value) //TODO: Handle sign\n+\t\t\t} else { Option::None }\n+\t\t},\n+\t\t&ExprPath(_, _) => {\n+\t\t\tlet def_map = cx.tcx.def_map.borrow();\n+\t\t\tlet path_res_op = def_map.get(&lit.id);\n+\t\t\tpath_res_op.as_ref().and_then(|x| {\n+\t\t\t\tif let &DefConst(def_id) = &x.base_def {\n+\t\t\t\t\tlookup_const_by_id(cx.tcx, def_id, Option::None).and_then(|l| fetch_int_literal(cx, l))\n+\t\t\t\t} else { Option::None }\n+\t\t\t})\n+\t\t},\n+\t\t_ => Option::None\n \t}\n-\tOption::None\n }"}, {"sha": "7cf8709c5754c5ff4cce8de72ede06cf0ad232c2", "filename": "tests/compile-fail/bit_masks.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3a9bf24bb3d0fbcc8cabfecb03bb60c3cfa8babe/tests%2Fcompile-fail%2Fbit_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a9bf24bb3d0fbcc8cabfecb03bb60c3cfa8babe/tests%2Fcompile-fail%2Fbit_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbit_masks.rs?ref=3a9bf24bb3d0fbcc8cabfecb03bb60c3cfa8babe", "patch": "@@ -1,7 +1,10 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n-#![deny(bad_bit_mask)]\n+const THREE_BITS : i64 = 7;\n+const EVEN_MORE_REDIRECTION : i64 = THREE_BITS;\n+\n+#[deny(bad_bit_mask)]\n fn main() {\n \tlet x = 5;\n \tx & 1 == 1; //ok, distinguishes bit 0\n@@ -16,4 +19,8 @@ fn main() {\n \tx | 1 > 1; // ok (if a bit silly), equals x > 1\n \tx | 2 > 1; //~ERROR\n \tx | 2 <= 2; // ok (if a bit silly), equals x <= 2\n+\t\n+\t// this also now works with constants\n+\tx & THREE_BITS == 8; //~ERROR\n+\tx | EVEN_MORE_REDIRECTION < 7; //~ERROR\n }"}]}