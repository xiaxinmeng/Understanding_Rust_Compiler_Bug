{"sha": "b56f0102014111e2e57f0df743626d69bab18081", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NmYwMTAyMDE0MTExZTJlNTdmMGRmNzQzNjI2ZDY5YmFiMTgwODE=", "commit": {"author": {"name": "Roberto Vidal", "email": "vidal.roberto.j@gmail.com", "date": "2019-04-23T16:48:43Z"}, "committer": {"name": "Roberto Vidal", "email": "vidal.roberto.j@gmail.com", "date": "2019-04-23T18:11:45Z"}, "message": "Allows searching for case-equivalent symbols (fixes #1151)", "tree": {"sha": "54188073cc7db1e6f41e4208b77cd8e83308f38e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54188073cc7db1e6f41e4208b77cd8e83308f38e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b56f0102014111e2e57f0df743626d69bab18081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b56f0102014111e2e57f0df743626d69bab18081", "html_url": "https://github.com/rust-lang/rust/commit/b56f0102014111e2e57f0df743626d69bab18081", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b56f0102014111e2e57f0df743626d69bab18081/comments", "author": {"login": "jrvidal", "id": 1636604, "node_id": "MDQ6VXNlcjE2MzY2MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1636604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrvidal", "html_url": "https://github.com/jrvidal", "followers_url": "https://api.github.com/users/jrvidal/followers", "following_url": "https://api.github.com/users/jrvidal/following{/other_user}", "gists_url": "https://api.github.com/users/jrvidal/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrvidal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrvidal/subscriptions", "organizations_url": "https://api.github.com/users/jrvidal/orgs", "repos_url": "https://api.github.com/users/jrvidal/repos", "events_url": "https://api.github.com/users/jrvidal/events{/privacy}", "received_events_url": "https://api.github.com/users/jrvidal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jrvidal", "id": 1636604, "node_id": "MDQ6VXNlcjE2MzY2MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1636604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrvidal", "html_url": "https://github.com/jrvidal", "followers_url": "https://api.github.com/users/jrvidal/followers", "following_url": "https://api.github.com/users/jrvidal/following{/other_user}", "gists_url": "https://api.github.com/users/jrvidal/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrvidal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrvidal/subscriptions", "organizations_url": "https://api.github.com/users/jrvidal/orgs", "repos_url": "https://api.github.com/users/jrvidal/repos", "events_url": "https://api.github.com/users/jrvidal/events{/privacy}", "received_events_url": "https://api.github.com/users/jrvidal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a094d5c621e44ff78dce953c0cae7cfba4b2840e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a094d5c621e44ff78dce953c0cae7cfba4b2840e", "html_url": "https://github.com/rust-lang/rust/commit/a094d5c621e44ff78dce953c0cae7cfba4b2840e"}], "stats": {"total": 88, "additions": 70, "deletions": 18}, "files": [{"sha": "9c38035740d9f732d6f2af71bed927eb7c7efad1", "filename": "crates/ra_ide_api/src/symbol_index.rs", "status": "modified", "additions": 70, "deletions": 18, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/b56f0102014111e2e57f0df743626d69bab18081/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b56f0102014111e2e57f0df743626d69bab18081/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs?ref=b56f0102014111e2e57f0df743626d69bab18081", "patch": "@@ -20,7 +20,6 @@\n //! file in the current workspace, and run a query against the union of all\n //! those FSTs.\n use std::{\n-    cmp::Ordering,\n     hash::{Hash, Hasher},\n     sync::Arc,\n     mem,\n@@ -137,13 +136,32 @@ impl Hash for SymbolIndex {\n \n impl SymbolIndex {\n     fn new(mut symbols: Vec<FileSymbol>) -> SymbolIndex {\n-        fn cmp(s1: &FileSymbol, s2: &FileSymbol) -> Ordering {\n-            unicase::Ascii::new(s1.name.as_str()).cmp(&unicase::Ascii::new(s2.name.as_str()))\n+        fn cmp_key<'a>(s1: &'a FileSymbol) -> impl Ord + Eq + 'a {\n+            unicase::Ascii::new(s1.name.as_str())\n         }\n-        symbols.par_sort_by(cmp);\n-        symbols.dedup_by(|s1, s2| cmp(s1, s2) == Ordering::Equal);\n-        let names = symbols.iter().map(|it| it.name.as_str().to_lowercase());\n-        let map = fst::Map::from_iter(names.zip(0u64..)).unwrap();\n+\n+        symbols.par_sort_by(|s1, s2| cmp_key(s1).cmp(&cmp_key(s2)));\n+\n+        let mut builder = fst::MapBuilder::memory();\n+\n+        let mut last_batch_start = 0;\n+\n+        for idx in 0..symbols.len() {\n+            if symbols.get(last_batch_start).map(cmp_key) == symbols.get(idx + 1).map(cmp_key) {\n+                continue;\n+            }\n+\n+            let start = last_batch_start;\n+            let end = idx + 1;\n+            last_batch_start = end;\n+\n+            let key = symbols[start].name.as_str().to_lowercase();\n+            let value = SymbolIndex::range_to_map_value(start, end);\n+\n+            builder.insert(key, value).unwrap();\n+        }\n+\n+        let map = fst::Map::from_bytes(builder.into_inner().unwrap()).unwrap();\n         SymbolIndex { symbols, map }\n     }\n \n@@ -163,6 +181,19 @@ impl SymbolIndex {\n             .collect::<Vec<_>>();\n         SymbolIndex::new(symbols)\n     }\n+\n+    fn range_to_map_value(start: usize, end: usize) -> u64 {\n+        debug_assert![start <= (std::u32::MAX as usize)];\n+        debug_assert![end <= (std::u32::MAX as usize)];\n+\n+        ((start as u64) << 32) + end as u64\n+    }\n+\n+    fn map_value_to_range(value: u64) -> (usize, usize) {\n+        let end = value as u32 as usize;\n+        let start = (value >> 32) as usize;\n+        (start, end)\n+    }\n }\n \n impl Query {\n@@ -179,17 +210,18 @@ impl Query {\n                 break;\n             }\n             for indexed_value in indexed_values {\n-                let file_symbols = &indices[indexed_value.index];\n-                let idx = indexed_value.value as usize;\n-\n-                let symbol = &file_symbols.symbols[idx];\n-                if self.only_types && !is_type(symbol.ptr.kind()) {\n-                    continue;\n-                }\n-                if self.exact && symbol.name != self.query {\n-                    continue;\n+                let symbol_index = &indices[indexed_value.index];\n+                let (start, end) = SymbolIndex::map_value_to_range(indexed_value.value);\n+\n+                for symbol in &symbol_index.symbols[start..end] {\n+                    if self.only_types && !is_type(symbol.ptr.kind()) {\n+                        continue;\n+                    }\n+                    if self.exact && symbol.name != self.query {\n+                        continue;\n+                    }\n+                    res.push(symbol.clone());\n                 }\n-                res.push(symbol.clone());\n             }\n         }\n         res\n@@ -273,7 +305,10 @@ fn to_file_symbol(node: &SyntaxNode, file_id: FileId) -> Option<FileSymbol> {\n \n #[cfg(test)]\n mod tests {\n-    use ra_syntax::SmolStr;\n+    use ra_syntax::{\n+        SmolStr,\n+        SyntaxKind::{FN_DEF, STRUCT_DEF}\n+};\n     use crate::{\n         display::NavigationTarget,\n         mock_analysis::single_file,\n@@ -323,6 +358,23 @@ mod foo {\n         assert_eq!(s.container_name(), Some(&SmolStr::new(\"foo\")));\n     }\n \n+    #[test]\n+    fn test_world_symbols_are_case_sensitive() {\n+        let code = r#\"\n+fn foo() {}\n+\n+struct Foo;\n+        \"#;\n+\n+        let symbols = get_symbols_matching(code, \"Foo\");\n+\n+        let fn_match = symbols.iter().find(|s| s.name() == \"foo\").map(|s| s.kind());\n+        let struct_match = symbols.iter().find(|s| s.name() == \"Foo\").map(|s| s.kind());\n+\n+        assert_eq!(fn_match, Some(FN_DEF));\n+        assert_eq!(struct_match, Some(STRUCT_DEF));\n+    }\n+\n     fn get_symbols_matching(text: &str, query: &str) -> Vec<NavigationTarget> {\n         let (analysis, _) = single_file(text);\n         analysis.symbol_search(Query::new(query.into())).unwrap()"}]}