{"sha": "d5f77f3b6db604191c8b6856279a7bb5e0390375", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1Zjc3ZjNiNmRiNjA0MTkxYzhiNjg1NjI3OWE3YmI1ZTAzOTAzNzU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-24T08:43:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-24T08:43:58Z"}, "message": "Merge #3685\n\n3685: Auto import macros r=SomeoneToIgnore a=SomeoneToIgnore\n\nIf I got it right, assists test infra does not support multiple crates snippets (https://github.com/rust-analyzer/rust-analyzer/blob/2720e2374be951bb762ff2815dd67c7ffe3419b7/crates/ra_hir_def/src/nameres/tests.rs#L491) hence no tests added for the macro import.\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "c9afbe6d9c1c40bea7dedc05dded93aa6c7c146b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9afbe6d9c1c40bea7dedc05dded93aa6c7c146b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5f77f3b6db604191c8b6856279a7bb5e0390375", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeechOCRBK7hj4Ov3rIwAAdHIIAAk3KkE8QCUks2n6SNe+mgB3\nlNvrmLrdNoYASD66r9fXKjbzW8bhZVDwKuPepKTuaM1aa9jmwjZtxakAhZ4P+EX0\n/sMdQs3E3tfEQ06hpHr2fkXvawTvfJ1JothbRm3li6HI7gwRyMQarjnjWFcCxPm/\nYgkhf/aDKBD1SmH19jfXvpP1UCW1ihyJjIxXOEwarij7NCnyVafdWey50w+aHKdI\nvf3eAdtW6XZ/ObyudCKuvICxJZEoeBs9sKiitJC4zwSpXTEY7kHSZhtNRNOcxt8K\nWZlfPb24CLUweQkmrKzOIhHlzj3YqL8VZHAlkadVeuvM8Jyu6eYmUNNxoGRg5zo=\n=36bZ\n-----END PGP SIGNATURE-----\n", "payload": "tree c9afbe6d9c1c40bea7dedc05dded93aa6c7c146b\nparent f9494f114798f66b5f2174cf518a2951a82571d3\nparent dd3b64124b086cf68c3f8b1e838601b5770a9795\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1585039438 +0000\ncommitter GitHub <noreply@github.com> 1585039438 +0000\n\nMerge #3685\n\n3685: Auto import macros r=SomeoneToIgnore a=SomeoneToIgnore\n\nIf I got it right, assists test infra does not support multiple crates snippets (https://github.com/rust-analyzer/rust-analyzer/blob/2720e2374be951bb762ff2815dd67c7ffe3419b7/crates/ra_hir_def/src/nameres/tests.rs#L491) hence no tests added for the macro import.\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f77f3b6db604191c8b6856279a7bb5e0390375", "html_url": "https://github.com/rust-lang/rust/commit/d5f77f3b6db604191c8b6856279a7bb5e0390375", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5f77f3b6db604191c8b6856279a7bb5e0390375/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9494f114798f66b5f2174cf518a2951a82571d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9494f114798f66b5f2174cf518a2951a82571d3", "html_url": "https://github.com/rust-lang/rust/commit/f9494f114798f66b5f2174cf518a2951a82571d3"}, {"sha": "dd3b64124b086cf68c3f8b1e838601b5770a9795", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd3b64124b086cf68c3f8b1e838601b5770a9795", "html_url": "https://github.com/rust-lang/rust/commit/dd3b64124b086cf68c3f8b1e838601b5770a9795"}], "stats": {"total": 137, "additions": 100, "deletions": 37}, "files": [{"sha": "908319f875bdb52959212a2e63387f02f30f8557", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5f77f3b6db604191c8b6856279a7bb5e0390375/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d5f77f3b6db604191c8b6856279a7bb5e0390375/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d5f77f3b6db604191c8b6856279a7bb5e0390375", "patch": "@@ -884,6 +884,7 @@ version = \"0.1.0\"\n name = \"ra_assists\"\n version = \"0.1.0\"\n dependencies = [\n+ \"either\",\n  \"format-buf\",\n  \"itertools 0.9.0\",\n  \"join_to_string\",\n@@ -1045,6 +1046,7 @@ dependencies = [\n name = \"ra_ide_db\"\n version = \"0.1.0\"\n dependencies = [\n+ \"either\",\n  \"fst\",\n  \"log\",\n  \"once_cell\","}, {"sha": "a87f4052aa48fbfea6dfb9b9f69820ab92c72e43", "filename": "crates/ra_assists/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d5f77f3b6db604191c8b6856279a7bb5e0390375/crates%2Fra_assists%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d5f77f3b6db604191c8b6856279a7bb5e0390375/crates%2Fra_assists%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2FCargo.toml?ref=d5f77f3b6db604191c8b6856279a7bb5e0390375", "patch": "@@ -12,6 +12,7 @@ format-buf = \"1.0.0\"\n join_to_string = \"0.1.3\"\n rustc-hash = \"1.1.0\"\n itertools = \"0.9.0\"\n+either = \"1.5.3\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }"}, {"sha": "99682e023e92048fb513082dc6d2253411edf8d7", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d5f77f3b6db604191c8b6856279a7bb5e0390375/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f77f3b6db604191c8b6856279a7bb5e0390375/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=d5f77f3b6db604191c8b6856279a7bb5e0390375", "patch": "@@ -17,6 +17,7 @@ use crate::{\n     utils::insert_use_statement,\n     AssistId,\n };\n+use either::Either;\n \n // Assist: auto_import\n //\n@@ -58,6 +59,7 @@ pub(crate) fn auto_import(ctx: AssistCtx) -> Option<Assist> {\n     group.finish()\n }\n \n+#[derive(Debug)]\n struct AutoImportAssets {\n     import_candidate: ImportCandidate,\n     module_with_name_to_import: Module,\n@@ -127,14 +129,14 @@ impl AutoImportAssets {\n         ImportsLocator::new(db)\n             .find_imports(&self.get_search_query())\n             .into_iter()\n-            .filter_map(|module_def| match &self.import_candidate {\n+            .filter_map(|candidate| match &self.import_candidate {\n                 ImportCandidate::TraitAssocItem(assoc_item_type, _) => {\n-                    let located_assoc_item = match module_def {\n-                        ModuleDef::Function(located_function) => located_function\n+                    let located_assoc_item = match candidate {\n+                        Either::Left(ModuleDef::Function(located_function)) => located_function\n                             .as_assoc_item(db)\n                             .map(|assoc| assoc.container(db))\n                             .and_then(Self::assoc_to_trait),\n-                        ModuleDef::Const(located_const) => located_const\n+                        Either::Left(ModuleDef::Const(located_const)) => located_const\n                             .as_assoc_item(db)\n                             .map(|assoc| assoc.container(db))\n                             .and_then(Self::assoc_to_trait),\n@@ -153,10 +155,11 @@ impl AutoImportAssets {\n                             |_, assoc| Self::assoc_to_trait(assoc.container(db)),\n                         )\n                         .map(ModuleDef::from)\n+                        .map(Either::Left)\n                 }\n                 ImportCandidate::TraitMethod(function_callee, _) => {\n                     let located_assoc_item =\n-                        if let ModuleDef::Function(located_function) = module_def {\n+                        if let Either::Left(ModuleDef::Function(located_function)) = candidate {\n                             located_function\n                                 .as_assoc_item(db)\n                                 .map(|assoc| assoc.container(db))\n@@ -179,10 +182,18 @@ impl AutoImportAssets {\n                             },\n                         )\n                         .map(ModuleDef::from)\n+                        .map(Either::Left)\n+                }\n+                _ => Some(candidate),\n+            })\n+            .filter_map(|candidate| match candidate {\n+                Either::Left(module_def) => {\n+                    self.module_with_name_to_import.find_use_path(db, module_def)\n+                }\n+                Either::Right(macro_def) => {\n+                    self.module_with_name_to_import.find_use_path(db, macro_def)\n                 }\n-                _ => Some(module_def),\n             })\n-            .filter_map(|module_def| self.module_with_name_to_import.find_use_path(db, module_def))\n             .filter(|use_path| !use_path.segments.is_empty())\n             .take(20)\n             .collect::<BTreeSet<_>>()\n@@ -439,6 +450,30 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn macro_import() {\n+        check_assist(\n+            auto_import,\n+            r\"\n+                    //- /lib.rs crate:crate_with_macro\n+                    #[macro_export]\n+                    macro_rules! foo {\n+                        () => ()\n+                    }\n+\n+                    //- /main.rs crate:main deps:crate_with_macro\n+                    fn main() {\n+                        foo<|>\n+                    }\",\n+            r\"use crate_with_macro::foo;\n+\n+fn main() {\n+    foo<|>\n+}\n+\",\n+        );\n+    }\n+\n     #[test]\n     fn auto_import_target() {\n         check_assist_target("}, {"sha": "88b4c892600361bc2058d0b1d137cd81e49ae435", "filename": "crates/ra_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5f77f3b6db604191c8b6856279a7bb5e0390375/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f77f3b6db604191c8b6856279a7bb5e0390375/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=d5f77f3b6db604191c8b6856279a7bb5e0390375", "patch": "@@ -2,7 +2,7 @@\n \n use std::iter;\n \n-use hir::{Adt, HasSource, Semantics};\n+use hir::{Adt, HasSource, ModuleDef, Semantics};\n use itertools::Itertools;\n use ra_ide_db::RootDatabase;\n \n@@ -154,7 +154,7 @@ fn resolve_tuple_of_enum_def(\n }\n \n fn build_pat(db: &RootDatabase, module: hir::Module, var: hir::EnumVariant) -> Option<ast::Pat> {\n-    let path = crate::ast_transform::path_to_ast(module.find_use_path(db, var.into())?);\n+    let path = crate::ast_transform::path_to_ast(module.find_use_path(db, ModuleDef::from(var))?);\n \n     // FIXME: use HIR for this; it doesn't currently expose struct vs. tuple vs. unit variants though\n     let pat: ast::Pat = match var.source(db).value.kind() {"}, {"sha": "bcc9b3f10cfdf077a9862488ca45bf5c18577cf3", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d5f77f3b6db604191c8b6856279a7bb5e0390375/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f77f3b6db604191c8b6856279a7bb5e0390375/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=d5f77f3b6db604191c8b6856279a7bb5e0390375", "patch": "@@ -165,7 +165,6 @@ mod helpers {\n \n     use ra_db::{fixture::WithFixture, FileId, FileRange, SourceDatabaseExt};\n     use ra_ide_db::{symbol_index::SymbolsDatabase, RootDatabase};\n-    use ra_syntax::TextRange;\n     use test_utils::{add_cursor, assert_eq_text, extract_range_or_offset, RangeOrOffset};\n \n     use crate::{AssistCtx, AssistHandler};\n@@ -175,8 +174,7 @@ mod helpers {\n         let (mut db, file_id) = RootDatabase::with_single_file(text);\n         // FIXME: ideally, this should be done by the above `RootDatabase::with_single_file`,\n         // but it looks like this might need specialization? :(\n-        let local_roots = vec![db.file_source_root(file_id)];\n-        db.set_local_roots(Arc::new(local_roots));\n+        db.set_local_roots(Arc::new(vec![db.file_source_root(file_id)]));\n         (db, file_id)\n     }\n \n@@ -206,19 +204,32 @@ mod helpers {\n     }\n \n     fn check(assist: AssistHandler, before: &str, expected: ExpectedResult) {\n-        let (range_or_offset, before) = extract_range_or_offset(before);\n-        let range: TextRange = range_or_offset.into();\n+        let (text_without_caret, file_with_caret_id, range_or_offset, db) =\n+            if before.contains(\"//-\") {\n+                let (mut db, position) = RootDatabase::with_position(before);\n+                db.set_local_roots(Arc::new(vec![db.file_source_root(position.file_id)]));\n+                (\n+                    db.file_text(position.file_id).as_ref().to_owned(),\n+                    position.file_id,\n+                    RangeOrOffset::Offset(position.offset),\n+                    db,\n+                )\n+            } else {\n+                let (range_or_offset, text_without_caret) = extract_range_or_offset(before);\n+                let (db, file_id) = with_single_file(&text_without_caret);\n+                (text_without_caret, file_id, range_or_offset, db)\n+            };\n+\n+        let frange = FileRange { file_id: file_with_caret_id, range: range_or_offset.into() };\n \n-        let (db, file_id) = with_single_file(&before);\n-        let frange = FileRange { file_id, range };\n         let sema = Semantics::new(&db);\n         let assist_ctx = AssistCtx::new(&sema, frange, true);\n \n         match (assist(assist_ctx), expected) {\n             (Some(assist), ExpectedResult::After(after)) => {\n                 let action = assist.0[0].action.clone().unwrap();\n \n-                let mut actual = action.edit.apply(&before);\n+                let mut actual = action.edit.apply(&text_without_caret);\n                 match action.cursor_position {\n                     None => {\n                         if let RangeOrOffset::Offset(before_cursor_pos) = range_or_offset {\n@@ -237,7 +248,7 @@ mod helpers {\n             (Some(assist), ExpectedResult::Target(target)) => {\n                 let action = assist.0[0].action.clone().unwrap();\n                 let range = action.target.expect(\"expected target on action\");\n-                assert_eq_text!(&before[range], target);\n+                assert_eq_text!(&text_without_caret[range], target);\n             }\n             (Some(_), ExpectedResult::NotApplicable) => panic!(\"assist should not be applicable!\"),\n             (None, ExpectedResult::After(_)) | (None, ExpectedResult::Target(_)) => {"}, {"sha": "c5cfd875f2dd1ca06b65d68cadfd2399ce1045cc", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d5f77f3b6db604191c8b6856279a7bb5e0390375/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f77f3b6db604191c8b6856279a7bb5e0390375/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=d5f77f3b6db604191c8b6856279a7bb5e0390375", "patch": "@@ -33,7 +33,11 @@ use ra_syntax::{\n };\n use rustc_hash::FxHashSet;\n \n-use crate::{db::HirDatabase, has_source::HasSource, CallableDef, HirDisplay, InFile, Name};\n+use crate::{\n+    db::{DefDatabase, HirDatabase},\n+    has_source::HasSource,\n+    CallableDef, HirDisplay, InFile, Name,\n+};\n \n /// hir::Crate describes a single crate. It's the main interface with which\n /// a crate's dependencies interact. Mostly, it should be just a proxy for the\n@@ -274,20 +278,10 @@ impl Module {\n     /// this module, if possible.\n     pub fn find_use_path(\n         self,\n-        db: &dyn HirDatabase,\n-        item: ModuleDef,\n+        db: &dyn DefDatabase,\n+        item: impl Into<ItemInNs>,\n     ) -> Option<hir_def::path::ModPath> {\n-        // FIXME expose namespace choice\n-        hir_def::find_path::find_path(db.upcast(), determine_item_namespace(item), self.into())\n-    }\n-}\n-\n-fn determine_item_namespace(module_def: ModuleDef) -> ItemInNs {\n-    match module_def {\n-        ModuleDef::Static(_) | ModuleDef::Const(_) | ModuleDef::Function(_) => {\n-            ItemInNs::Values(module_def.into())\n-        }\n-        _ => ItemInNs::Types(module_def.into()),\n+        hir_def::find_path::find_path(db, item.into(), self.into())\n     }\n }\n "}, {"sha": "62fb52e7278381137271f24c59025a616599858c", "filename": "crates/ra_hir/src/from_id.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d5f77f3b6db604191c8b6856279a7bb5e0390375/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f77f3b6db604191c8b6856279a7bb5e0390375/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs?ref=d5f77f3b6db604191c8b6856279a7bb5e0390375", "patch": "@@ -9,8 +9,8 @@ use hir_def::{\n };\n \n use crate::{\n-    Adt, AssocItem, AttrDef, DefWithBody, EnumVariant, GenericDef, Local, ModuleDef, StructField,\n-    VariantDef,\n+    code_model::ItemInNs, Adt, AssocItem, AttrDef, DefWithBody, EnumVariant, GenericDef, Local,\n+    MacroDef, ModuleDef, StructField, VariantDef,\n };\n \n macro_rules! from_id {\n@@ -228,3 +228,20 @@ impl From<(DefWithBodyId, PatId)> for Local {\n         Local { parent, pat_id }\n     }\n }\n+\n+impl From<MacroDef> for ItemInNs {\n+    fn from(macro_def: MacroDef) -> Self {\n+        ItemInNs::Macros(macro_def.into())\n+    }\n+}\n+\n+impl From<ModuleDef> for ItemInNs {\n+    fn from(module_def: ModuleDef) -> Self {\n+        match module_def {\n+            ModuleDef::Static(_) | ModuleDef::Const(_) | ModuleDef::Function(_) => {\n+                ItemInNs::Values(module_def.into())\n+            }\n+            _ => ItemInNs::Types(module_def.into()),\n+        }\n+    }\n+}"}, {"sha": "c3921bd406c6712dadb806ba0958956b7a6fddc9", "filename": "crates/ra_ide_db/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d5f77f3b6db604191c8b6856279a7bb5e0390375/crates%2Fra_ide_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d5f77f3b6db604191c8b6856279a7bb5e0390375/crates%2Fra_ide_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2FCargo.toml?ref=d5f77f3b6db604191c8b6856279a7bb5e0390375", "patch": "@@ -17,6 +17,7 @@ fst = { version = \"0.4\", default-features = false }\n rustc-hash = \"1.1.0\"\n superslice = \"1.0.0\"\n once_cell = \"1.3.1\"\n+either = \"1.5.3\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }"}, {"sha": "bf0d8db6067b088ece41e0b622a62fd74ee0adb0", "filename": "crates/ra_ide_db/src/imports_locator.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5f77f3b6db604191c8b6856279a7bb5e0390375/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f77f3b6db604191c8b6856279a7bb5e0390375/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs?ref=d5f77f3b6db604191c8b6856279a7bb5e0390375", "patch": "@@ -1,7 +1,7 @@\n //! This module contains an import search funcionality that is provided to the ra_assists module.\n //! Later, this should be moved away to a separate crate that is accessible from the ra_assists module.\n \n-use hir::{ModuleDef, Semantics};\n+use hir::{MacroDef, ModuleDef, Semantics};\n use ra_prof::profile;\n use ra_syntax::{ast, AstNode, SyntaxKind::NAME};\n \n@@ -10,6 +10,7 @@ use crate::{\n     symbol_index::{self, FileSymbol, Query},\n     RootDatabase,\n };\n+use either::Either;\n \n pub struct ImportsLocator<'a> {\n     sema: Semantics<'a, RootDatabase>,\n@@ -20,7 +21,7 @@ impl<'a> ImportsLocator<'a> {\n         Self { sema: Semantics::new(db) }\n     }\n \n-    pub fn find_imports(&mut self, name_to_import: &str) -> Vec<ModuleDef> {\n+    pub fn find_imports(&mut self, name_to_import: &str) -> Vec<Either<ModuleDef, MacroDef>> {\n         let _p = profile(\"search_for_imports\");\n         let db = self.sema.db;\n \n@@ -43,7 +44,8 @@ impl<'a> ImportsLocator<'a> {\n             .chain(lib_results.into_iter())\n             .filter_map(|import_candidate| self.get_name_definition(&import_candidate))\n             .filter_map(|name_definition_to_import| match name_definition_to_import {\n-                Definition::ModuleDef(module_def) => Some(module_def),\n+                Definition::ModuleDef(module_def) => Some(Either::Left(module_def)),\n+                Definition::Macro(macro_def) => Some(Either::Right(macro_def)),\n                 _ => None,\n             })\n             .collect()"}]}