{"sha": "a0d81d1327fc1678119441e256f54128220b7ed4", "node_id": "C_kwDOAAsO6NoAKGEwZDgxZDEzMjdmYzE2NzgxMTk0NDFlMjU2ZjU0MTI4MjIwYjdlZDQ", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2021-11-17T06:47:43Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-11-18T16:37:06Z"}, "message": "Pluralize disallowed_type lint filenames\n\nThis way they match up with the pluralized lint name as well.", "tree": {"sha": "bad349046da97f15724db9cecb45483a0d06d23e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bad349046da97f15724db9cecb45483a0d06d23e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0d81d1327fc1678119441e256f54128220b7ed4", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmGWgTIACgkQHKDfKvWd\naKXmBxAArdJVgmoPVpq5Vou9iOxDIsEHcCorj81cHO4uK/xQj+7jRheTJglUaWKR\n89L7OnAIXTczvqGTHGuCLVwzLYsvn4hI1ydJ58QPnGaGE7vzCeniQzSSPXodiV+f\nncMOeEguPtOLqN49v/YgV6QiXu7mXG4E3poCpi1rNNxMLyk5EQG1x3zEW/mvE3zh\nspnkHhcN5Sw9ijLqoafwsSr39yfIV7g47whGSU2O5yNDvwes/IXYVlx8shQWcBRm\nBvI+UmQ66HIelFgbL2AdueoVNAr9reHrDfocDtzSaG2SBm95Qt0wch3YXgUKkVL0\nbwi1ZaFcxW69yi7F4Gr/tZSYG2LF7V0ucTcuJKucICiLKyW1wxBXh5YzAvCaNwXL\nKTv9W4fzwxOZb5bQ3d6uz1fSXBr14rT03nsN4n0REkDhk+4sDQ4kBuh23piA//C6\nUnfmS6uglup7auh3yoWrX4yyRfSIKJdmKeePJ4rBSRpZDdWgeZ4os+rmz7Rcx9BR\nozVq6rbweqrPqOVbn5V84aiEu9o0ekSnXp2kJStK+h29mAZQOhb3YZyGT76WpR/4\nul4kr1200lDnyNIpLbYgFh9AIXdh4167QywQnW8UbMCZTqpoxafkeB95oB/ijJOo\n1Wk5JCoew19xCF4Qy8Wkc4PJaIydu0e9S1HOPJshxb9Z7QBlZR4=\n=FzA4\n-----END PGP SIGNATURE-----", "payload": "tree bad349046da97f15724db9cecb45483a0d06d23e\nparent b7f18916fa46c6ed25aed3b27e149850864b1f0e\nauthor Philipp Hansch <dev@phansch.net> 1637131663 +0100\ncommitter flip1995 <philipp.krones@embecosm.com> 1637253426 +0100\n\nPluralize disallowed_type lint filenames\n\nThis way they match up with the pluralized lint name as well.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0d81d1327fc1678119441e256f54128220b7ed4", "html_url": "https://github.com/rust-lang/rust/commit/a0d81d1327fc1678119441e256f54128220b7ed4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0d81d1327fc1678119441e256f54128220b7ed4/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7f18916fa46c6ed25aed3b27e149850864b1f0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7f18916fa46c6ed25aed3b27e149850864b1f0e", "html_url": "https://github.com/rust-lang/rust/commit/b7f18916fa46c6ed25aed3b27e149850864b1f0e"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "eaed40327136f75636b013e37ee400b7a9318790", "filename": "clippy_lints/src/disallowed_types.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a0d81d1327fc1678119441e256f54128220b7ed4/clippy_lints%2Fsrc%2Fdisallowed_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d81d1327fc1678119441e256f54128220b7ed4/clippy_lints%2Fsrc%2Fdisallowed_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_types.rs?ref=a0d81d1327fc1678119441e256f54128220b7ed4", "previous_filename": "clippy_lints/src/disallowed_type.rs"}, {"sha": "f48cfb81b62b2f94c351b74bbb3734b8ee47a2bb", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0d81d1327fc1678119441e256f54128220b7ed4/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d81d1327fc1678119441e256f54128220b7ed4/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=a0d81d1327fc1678119441e256f54128220b7ed4", "patch": "@@ -99,7 +99,7 @@ store.register_lints(&[\n     derive::UNSAFE_DERIVE_DESERIALIZE,\n     disallowed_method::DISALLOWED_METHOD,\n     disallowed_script_idents::DISALLOWED_SCRIPT_IDENTS,\n-    disallowed_type::DISALLOWED_TYPES,\n+    disallowed_types::DISALLOWED_TYPES,\n     doc::DOC_MARKDOWN,\n     doc::MISSING_ERRORS_DOC,\n     doc::MISSING_PANICS_DOC,"}, {"sha": "ac7e6df6fc79310f339bc34b5d6f10376a0e73e5", "filename": "clippy_lints/src/lib.register_nursery.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0d81d1327fc1678119441e256f54128220b7ed4/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d81d1327fc1678119441e256f54128220b7ed4/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_nursery.rs?ref=a0d81d1327fc1678119441e256f54128220b7ed4", "patch": "@@ -7,7 +7,7 @@ store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n     LintId::of(cognitive_complexity::COGNITIVE_COMPLEXITY),\n     LintId::of(copies::BRANCHES_SHARING_CODE),\n     LintId::of(disallowed_method::DISALLOWED_METHOD),\n-    LintId::of(disallowed_type::DISALLOWED_TYPES),\n+    LintId::of(disallowed_types::DISALLOWED_TYPES),\n     LintId::of(equatable_if_let::EQUATABLE_IF_LET),\n     LintId::of(fallible_impl_from::FALLIBLE_IMPL_FROM),\n     LintId::of(floating_point_arithmetic::IMPRECISE_FLOPS),"}, {"sha": "83b57fba02a10801f9a83707989bf1934f5ea740", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0d81d1327fc1678119441e256f54128220b7ed4/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d81d1327fc1678119441e256f54128220b7ed4/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a0d81d1327fc1678119441e256f54128220b7ed4", "patch": "@@ -196,7 +196,7 @@ mod derivable_impls;\n mod derive;\n mod disallowed_method;\n mod disallowed_script_idents;\n-mod disallowed_type;\n+mod disallowed_types;\n mod doc;\n mod double_comparison;\n mod double_parens;\n@@ -827,7 +827,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(move || Box::new(module_style::ModStyle));\n     store.register_late_pass(|| Box::new(unused_async::UnusedAsync));\n     let disallowed_types = conf.disallowed_types.clone();\n-    store.register_late_pass(move || Box::new(disallowed_type::DisallowedTypes::new(disallowed_types.clone())));\n+    store.register_late_pass(move || Box::new(disallowed_types::DisallowedTypes::new(disallowed_types.clone())));\n     let import_renames = conf.enforced_import_renames.clone();\n     store.register_late_pass(move || {\n         Box::new(missing_enforced_import_rename::ImportRename::new("}, {"sha": "6cb9e2ef95467be59c0ba74c9dc8d25de2411c09", "filename": "tests/ui-toml/toml_disallowed_types/clippy.toml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a0d81d1327fc1678119441e256f54128220b7ed4/tests%2Fui-toml%2Ftoml_disallowed_types%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a0d81d1327fc1678119441e256f54128220b7ed4/tests%2Fui-toml%2Ftoml_disallowed_types%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_types%2Fclippy.toml?ref=a0d81d1327fc1678119441e256f54128220b7ed4", "previous_filename": "tests/ui-toml/toml_disallowed_type/clippy.toml"}, {"sha": "7f28efd676f2c786605844e52b4019af8a61a16a", "filename": "tests/ui-toml/toml_disallowed_types/conf_disallowed_types.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a0d81d1327fc1678119441e256f54128220b7ed4/tests%2Fui-toml%2Ftoml_disallowed_types%2Fconf_disallowed_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d81d1327fc1678119441e256f54128220b7ed4/tests%2Fui-toml%2Ftoml_disallowed_types%2Fconf_disallowed_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_types%2Fconf_disallowed_types.rs?ref=a0d81d1327fc1678119441e256f54128220b7ed4", "previous_filename": "tests/ui-toml/toml_disallowed_type/conf_disallowed_type.rs"}, {"sha": "e3ece799c7ce690626e8ba4a1ce1f22cb4ab95c8", "filename": "tests/ui-toml/toml_disallowed_types/conf_disallowed_types.stderr", "status": "renamed", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a0d81d1327fc1678119441e256f54128220b7ed4/tests%2Fui-toml%2Ftoml_disallowed_types%2Fconf_disallowed_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0d81d1327fc1678119441e256f54128220b7ed4/tests%2Fui-toml%2Ftoml_disallowed_types%2Fconf_disallowed_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_types%2Fconf_disallowed_types.stderr?ref=a0d81d1327fc1678119441e256f54128220b7ed4", "patch": "@@ -1,129 +1,129 @@\n error: `std::sync::atomic::AtomicU32` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:7:1\n+  --> $DIR/conf_disallowed_types.rs:7:1\n    |\n LL | use std::sync::atomic::AtomicU32;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::disallowed-types` implied by `-D warnings`\n \n error: `std::time::Instant` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:8:1\n+  --> $DIR/conf_disallowed_types.rs:8:1\n    |\n LL | use std::time::Instant as Sneaky;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `std::time::Instant` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:12:33\n+  --> $DIR/conf_disallowed_types.rs:12:33\n    |\n LL | fn bad_return_type() -> fn() -> Sneaky {\n    |                                 ^^^^^^\n \n error: `std::time::Instant` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:16:28\n+  --> $DIR/conf_disallowed_types.rs:16:28\n    |\n LL | fn bad_arg_type(_: impl Fn(Sneaky) -> foo::atomic::AtomicU32) {}\n    |                            ^^^^^^\n \n error: `std::sync::atomic::AtomicU32` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:16:39\n+  --> $DIR/conf_disallowed_types.rs:16:39\n    |\n LL | fn bad_arg_type(_: impl Fn(Sneaky) -> foo::atomic::AtomicU32) {}\n    |                                       ^^^^^^^^^^^^^^^^^^^^^^\n \n error: `std::io::Read` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:18:22\n+  --> $DIR/conf_disallowed_types.rs:18:22\n    |\n LL | fn trait_obj(_: &dyn std::io::Read) {}\n    |                      ^^^^^^^^^^^^^\n \n error: `usize` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:20:33\n+  --> $DIR/conf_disallowed_types.rs:20:33\n    |\n LL | fn full_and_single_path_prim(_: usize, _: bool) {}\n    |                                 ^^^^^\n \n error: `bool` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:20:43\n+  --> $DIR/conf_disallowed_types.rs:20:43\n    |\n LL | fn full_and_single_path_prim(_: usize, _: bool) {}\n    |                                           ^^^^\n \n error: `usize` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:22:28\n+  --> $DIR/conf_disallowed_types.rs:22:28\n    |\n LL | fn const_generics<const C: usize>() {}\n    |                            ^^^^^\n \n error: `usize` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:24:24\n+  --> $DIR/conf_disallowed_types.rs:24:24\n    |\n LL | struct GenArg<const U: usize>([u8; U]);\n    |                        ^^^^^\n \n error: `std::net::Ipv4Addr` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:28:10\n+  --> $DIR/conf_disallowed_types.rs:28:10\n    |\n LL | fn ip(_: std::net::Ipv4Addr) {}\n    |          ^^^^^^^^^^^^^^^^^^\n    |\n    = note: no IPv4 allowed (from clippy.toml)\n \n error: `std::net::TcpListener` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:30:16\n+  --> $DIR/conf_disallowed_types.rs:30:16\n    |\n LL | fn listener(_: std::net::TcpListener) {}\n    |                ^^^^^^^^^^^^^^^^^^^^^\n \n error: `std::collections::HashMap` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:34:48\n+  --> $DIR/conf_disallowed_types.rs:34:48\n    |\n LL |     let _: std::collections::HashMap<(), ()> = std::collections::HashMap::new();\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `std::collections::HashMap` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:34:12\n+  --> $DIR/conf_disallowed_types.rs:34:12\n    |\n LL |     let _: std::collections::HashMap<(), ()> = std::collections::HashMap::new();\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `std::time::Instant` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:35:13\n+  --> $DIR/conf_disallowed_types.rs:35:13\n    |\n LL |     let _ = Sneaky::now();\n    |             ^^^^^^\n \n error: `std::sync::atomic::AtomicU32` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:36:13\n+  --> $DIR/conf_disallowed_types.rs:36:13\n    |\n LL |     let _ = foo::atomic::AtomicU32::new(0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^\n \n error: `std::sync::atomic::AtomicU32` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:37:17\n+  --> $DIR/conf_disallowed_types.rs:37:17\n    |\n LL |     static FOO: std::sync::atomic::AtomicU32 = foo::atomic::AtomicU32::new(1);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `std::sync::atomic::AtomicU32` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:37:48\n+  --> $DIR/conf_disallowed_types.rs:37:48\n    |\n LL |     static FOO: std::sync::atomic::AtomicU32 = foo::atomic::AtomicU32::new(1);\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^\n \n error: `syn::TypePath` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:38:43\n+  --> $DIR/conf_disallowed_types.rs:38:43\n    |\n LL |     let _: std::collections::BTreeMap<(), syn::TypePath> = Default::default();\n    |                                           ^^^^^^^^^^^^^\n \n error: `syn::Ident` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:39:13\n+  --> $DIR/conf_disallowed_types.rs:39:13\n    |\n LL |     let _ = syn::Ident::new(\"\", todo!());\n    |             ^^^^^^^^^^\n \n error: `usize` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:41:12\n+  --> $DIR/conf_disallowed_types.rs:41:12\n    |\n LL |     let _: usize = 64_usize;\n    |            ^^^^^", "previous_filename": "tests/ui-toml/toml_disallowed_type/conf_disallowed_type.stderr"}]}