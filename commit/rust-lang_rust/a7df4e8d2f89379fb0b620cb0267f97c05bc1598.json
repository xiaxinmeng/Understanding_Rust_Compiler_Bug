{"sha": "a7df4e8d2f89379fb0b620cb0267f97c05bc1598", "node_id": "C_kwDOAAsO6NoAKGE3ZGY0ZThkMmY4OTM3OWZiMGI2MjBjYjAyNjdmOTdjMDViYzE1OTg", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2021-12-16T21:34:39Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-01-18T22:25:29Z"}, "message": "Handle empty loops better", "tree": {"sha": "74eb0ece9ef457eb3ed3d9fc2ba56cc5cccb1c7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74eb0ece9ef457eb3ed3d9fc2ba56cc5cccb1c7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7df4e8d2f89379fb0b620cb0267f97c05bc1598", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7df4e8d2f89379fb0b620cb0267f97c05bc1598", "html_url": "https://github.com/rust-lang/rust/commit/a7df4e8d2f89379fb0b620cb0267f97c05bc1598", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7df4e8d2f89379fb0b620cb0267f97c05bc1598/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e281a7782b775104351ab28abaee795fdaf84c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e281a7782b775104351ab28abaee795fdaf84c5", "html_url": "https://github.com/rust-lang/rust/commit/6e281a7782b775104351ab28abaee795fdaf84c5"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "b434e05db80b49751c8231c102ca29f1dd43ec88", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a7df4e8d2f89379fb0b620cb0267f97c05bc1598/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7df4e8d2f89379fb0b620cb0267f97c05bc1598/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=a7df4e8d2f89379fb0b620cb0267f97c05bc1598", "patch": "@@ -157,8 +157,15 @@ impl<'tcx> Visitor<'tcx> for DropRangeVisitor<'tcx> {\n             }\n             ExprKind::Loop(body, ..) => {\n                 let loop_begin = self.expr_index + 1;\n-                self.visit_block(body);\n-                self.drop_ranges.add_control_edge(self.expr_index, loop_begin);\n+                if body.stmts.is_empty() && body.expr.is_none() {\n+                    // For empty loops we won't have updated self.expr_index after visiting the\n+                    // body, meaning we'd get an edge from expr_index to expr_index + 1, but\n+                    // instead we want an edge from expr_index + 1 to expr_index + 1.\n+                    self.drop_ranges.add_control_edge(loop_begin, loop_begin);\n+                } else {\n+                    self.visit_block(body);\n+                    self.drop_ranges.add_control_edge(self.expr_index, loop_begin);\n+                }\n             }\n             ExprKind::Break(hir::Destination { target_id: Ok(target), .. }, ..)\n             | ExprKind::Continue(hir::Destination { target_id: Ok(target), .. }, ..) => {"}, {"sha": "55629132e400e1fe4c43cd9b655f103b8d049086", "filename": "src/test/ui/async-await/async-fn-nonsend.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a7df4e8d2f89379fb0b620cb0267f97c05bc1598/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7df4e8d2f89379fb0b620cb0267f97c05bc1598/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs?ref=a7df4e8d2f89379fb0b620cb0267f97c05bc1598", "patch": "@@ -43,6 +43,13 @@ async fn non_sync_with_method_call() {\n     }\n }\n \n+async fn non_sync_with_infinite_loop() {\n+    let f: &mut std::fmt::Formatter = loop {};\n+    if non_sync().fmt(f).unwrap() == () {\n+        fut().await;\n+    }\n+}\n+\n fn assert_send(_: impl Send) {}\n \n pub fn pass_assert() {\n@@ -51,4 +58,5 @@ pub fn pass_assert() {\n     //~^ ERROR future cannot be sent between threads safely\n     assert_send(non_sync_with_method_call());\n     //~^ ERROR future cannot be sent between threads safely\n+    assert_send(non_sync_with_infinite_loop());\n }"}, {"sha": "9c87067a4d3a0736221810ea1afd87a6d1582dd3", "filename": "src/test/ui/async-await/async-fn-nonsend.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a7df4e8d2f89379fb0b620cb0267f97c05bc1598/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7df4e8d2f89379fb0b620cb0267f97c05bc1598/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr?ref=a7df4e8d2f89379fb0b620cb0267f97c05bc1598", "patch": "@@ -1,5 +1,5 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:50:17\n+  --> $DIR/async-fn-nonsend.rs:57:17\n    |\n LL |     assert_send(non_send_temporary_in_match());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_send_temporary_in_match` is not `Send`\n@@ -16,13 +16,13 @@ LL |         Some(_) => fut().await,\n LL | }\n    | - `Some(non_send())` is later dropped here\n note: required by a bound in `assert_send`\n-  --> $DIR/async-fn-nonsend.rs:46:24\n+  --> $DIR/async-fn-nonsend.rs:53:24\n    |\n LL | fn assert_send(_: impl Send) {}\n    |                        ^^^^ required by this bound in `assert_send`\n \n error: future cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:52:17\n+  --> $DIR/async-fn-nonsend.rs:59:17\n    |\n LL |     assert_send(non_sync_with_method_call());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_sync_with_method_call` is not `Send`\n@@ -40,7 +40,7 @@ LL |     }\n LL | }\n    | - `f` is later dropped here\n note: required by a bound in `assert_send`\n-  --> $DIR/async-fn-nonsend.rs:46:24\n+  --> $DIR/async-fn-nonsend.rs:53:24\n    |\n LL | fn assert_send(_: impl Send) {}\n    |                        ^^^^ required by this bound in `assert_send`"}]}