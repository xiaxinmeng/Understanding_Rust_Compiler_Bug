{"sha": "628d715ff42c83ab74bef3a5a5c5ac3c2f915c11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyOGQ3MTVmZjQyYzgzYWI3NGJlZjNhNWE1YzVhYzNjMmY5MTVjMTE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-31T23:58:15Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-02T17:25:06Z"}, "message": "Deprecate MarkerTrait and PhantomFn.", "tree": {"sha": "bc071903672c58c1e6435094ae2dc767710d87a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc071903672c58c1e6435094ae2dc767710d87a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/628d715ff42c83ab74bef3a5a5c5ac3c2f915c11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/628d715ff42c83ab74bef3a5a5c5ac3c2f915c11", "html_url": "https://github.com/rust-lang/rust/commit/628d715ff42c83ab74bef3a5a5c5ac3c2f915c11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/628d715ff42c83ab74bef3a5a5c5ac3c2f915c11/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b5accade787beb0c82fe1f6937c43bfb6abd054", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b5accade787beb0c82fe1f6937c43bfb6abd054", "html_url": "https://github.com/rust-lang/rust/commit/9b5accade787beb0c82fe1f6937c43bfb6abd054"}], "stats": {"total": 85, "additions": 17, "deletions": 68}, "files": [{"sha": "3f85af9719778ea780a7fd983b09674e732fe607", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/628d715ff42c83ab74bef3a5a5c5ac3c2f915c11/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628d715ff42c83ab74bef3a5a5c5ac3c2f915c11/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=628d715ff42c83ab74bef3a5a5c5ac3c2f915c11", "patch": "@@ -192,13 +192,16 @@ struct TyDesc {\n     align: usize\n }\n \n+trait AllTypes { fn dummy(&self) { } }\n+impl<T:?Sized> AllTypes for T { }\n+\n unsafe fn get_tydesc<T>() -> *const TyDesc {\n     use std::raw::TraitObject;\n \n     let ptr = &*(1 as *const T);\n \n     // Can use any trait that is implemented for all types.\n-    let obj = mem::transmute::<&marker::MarkerTrait, TraitObject>(ptr);\n+    let obj = mem::transmute::<&AllTypes, TraitObject>(ptr);\n     obj.vtable as *const TyDesc\n }\n "}, {"sha": "e867ba02854390327e24526a5fbe1761153b6a44", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 12, "deletions": 67, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/628d715ff42c83ab74bef3a5a5c5ac3c2f915c11/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628d715ff42c83ab74bef3a5a5c5ac3c2f915c11/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=628d715ff42c83ab74bef3a5a5c5ac3c2f915c11", "patch": "@@ -35,6 +35,7 @@ use hash::Hasher;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang=\"send\"]\n #[rustc_on_unimplemented = \"`{Self}` cannot be sent between threads safely\"]\n+#[allow(deprecated)]\n pub unsafe trait Send : MarkerTrait {\n     // empty.\n }\n@@ -50,6 +51,7 @@ impl !Send for Managed { }\n #[lang=\"sized\"]\n #[rustc_on_unimplemented = \"`{Self}` does not have a constant size known at compile-time\"]\n #[fundamental] // for Default, for example, which requires that `[T]: !Default` be evaluatable\n+#[allow(deprecated)]\n pub trait Sized : MarkerTrait {\n     // Empty.\n }\n@@ -203,6 +205,7 @@ pub trait Copy : Clone {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang=\"sync\"]\n #[rustc_on_unimplemented = \"`{Self}` cannot be shared between threads safely\"]\n+#[allow(deprecated)]\n pub unsafe trait Sync : MarkerTrait {\n     // Empty\n }\n@@ -269,83 +272,24 @@ macro_rules! impls{\n         )\n }\n \n-/// `MarkerTrait` is intended to be used as the supertrait for traits\n-/// that don't have any methods but instead serve just to designate\n-/// categories of types. An example would be the `Send` trait, which\n-/// indicates types that are sendable: `Send` does not itself offer\n-/// any methods, but instead is used to gate access to data.\n-///\n-/// FIXME. Better documentation needed here!\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+/// `MarkerTrait` is deprecated and no longer needed.\n+#[unstable(feature = \"core\", reason = \"deprecated\")]\n+#[deprecated(since = \"1.0.0\", reason = \"No longer needed\")]\n+#[allow(deprecated)]\n pub trait MarkerTrait : PhantomFn<Self,Self> { }\n //                                    ~~~~~ <-- FIXME(#22806)?\n //\n // Marker trait has been made invariant so as to avoid inf recursion,\n // but we should ideally solve the underlying problem. That's a bit\n // complicated.\n \n+#[allow(deprecated)]\n impl<T:?Sized> MarkerTrait for T { }\n \n-/// `PhantomFn` is a marker trait for use with traits that contain\n-/// type or lifetime parameters that do not appear in any of their\n-/// methods. In that case, you can either remove those parameters, or\n-/// add a `PhantomFn` supertrait that reflects the signature of\n-/// methods that compiler should \"pretend\" exists. This most commonly\n-/// occurs for traits with no methods: in that particular case, you\n-/// can extend `MarkerTrait`, which is equivalent to\n-/// `PhantomFn<Self>`.\n-///\n-/// # Examples\n-///\n-/// As an example, consider a trait with no methods like `Even`, meant\n-/// to represent types that are \"even\":\n-///\n-/// ```rust,ignore\n-/// trait Even { }\n-/// ```\n-///\n-/// In this case, because the implicit parameter `Self` is unused, the\n-/// compiler will issue an error. The only purpose of this trait is to\n-/// categorize types (and hence instances of those types) as \"even\" or\n-/// not, so if we *were* going to have a method, it might look like:\n-///\n-/// ```rust,ignore\n-/// trait Even {\n-///     fn is_even(self) -> bool { true }\n-/// }\n-/// ```\n-///\n-/// Therefore, we can model a method like this as follows:\n-///\n-/// ```\n-/// use std::marker::PhantomFn;\n-/// trait Even : PhantomFn<Self> { }\n-/// ```\n-///\n-/// Another equivalent, but clearer, option would be to use\n-/// `MarkerTrait`:\n-///\n-/// ```\n-/// # #![feature(core)]\n-/// use std::marker::MarkerTrait;\n-/// trait Even : MarkerTrait { }\n-/// ```\n-///\n-/// # Parameters\n-///\n-/// - `A` represents the type of the method's argument. You can use a\n-///   tuple to represent \"multiple\" arguments. Any types appearing here\n-///   will be considered \"contravariant\".\n-/// - `R`, if supplied, represents the method's return type. This defaults\n-///   to `()` as it is rarely needed.\n-///\n-/// # Additional reading\n-///\n-/// More details and background can be found in [RFC 738][738].\n-///\n-/// [738]: https://github.com/rust-lang/rfcs/blob/master/text/0738-variance.md\n+/// `PhantomFn` is a deprecated marker trait that is no longer needed.\n #[lang=\"phantom_fn\"]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[unstable(feature = \"core\", reason = \"deprecated\")]\n+#[deprecated(since = \"1.0.0\", reason = \"No longer needed\")]\n pub trait PhantomFn<A:?Sized,R:?Sized=()> { }\n \n /// `PhantomData<T>` allows you to describe that a type acts as if it stores a value of type `T`,\n@@ -444,6 +388,7 @@ mod impls {\n /// [1]: http://en.wikipedia.org/wiki/Parametricity\n #[rustc_reflect_like]\n #[unstable(feature = \"core\", reason = \"requires RFC and more experience\")]\n+#[allow(deprecated)]\n pub trait Reflect : MarkerTrait {\n }\n "}, {"sha": "3df4d00f60cc4c941e5007d872d6de64bc624c84", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/628d715ff42c83ab74bef3a5a5c5ac3c2f915c11/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/628d715ff42c83ab74bef3a5a5c5ac3c2f915c11/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=628d715ff42c83ab74bef3a5a5c5ac3c2f915c11", "patch": "@@ -14,6 +14,7 @@ use marker::{Sized, MarkerTrait};\n use ops::Deref;\n \n /// Unsafe trait to indicate what types are usable with the NonZero struct\n+#[allow(deprecated)]\n pub unsafe trait Zeroable : MarkerTrait {}\n \n unsafe impl<T:?Sized> Zeroable for *const T {}"}]}