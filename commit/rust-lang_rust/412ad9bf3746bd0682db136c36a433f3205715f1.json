{"sha": "412ad9bf3746bd0682db136c36a433f3205715f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMmFkOWJmMzc0NmJkMDY4MmRiMTM2YzM2YTQzM2YzMjA1NzE1ZjE=", "commit": {"author": {"name": "Michael Bradshaw", "email": "mjbshaw@gmail.com", "date": "2018-10-22T03:09:42Z"}, "committer": {"name": "Michael Bradshaw", "email": "mjbshaw@gmail.com", "date": "2018-10-22T03:09:42Z"}, "message": "Allow extern statics with an extern type\n\nFixes #55239", "tree": {"sha": "404611fe213015b90bb3a2cdcbb21818e8ac2975", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/404611fe213015b90bb3a2cdcbb21818e8ac2975"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/412ad9bf3746bd0682db136c36a433f3205715f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/412ad9bf3746bd0682db136c36a433f3205715f1", "html_url": "https://github.com/rust-lang/rust/commit/412ad9bf3746bd0682db136c36a433f3205715f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/412ad9bf3746bd0682db136c36a433f3205715f1/comments", "author": {"login": "mjbshaw", "id": 1204698, "node_id": "MDQ6VXNlcjEyMDQ2OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1204698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbshaw", "html_url": "https://github.com/mjbshaw", "followers_url": "https://api.github.com/users/mjbshaw/followers", "following_url": "https://api.github.com/users/mjbshaw/following{/other_user}", "gists_url": "https://api.github.com/users/mjbshaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbshaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbshaw/subscriptions", "organizations_url": "https://api.github.com/users/mjbshaw/orgs", "repos_url": "https://api.github.com/users/mjbshaw/repos", "events_url": "https://api.github.com/users/mjbshaw/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbshaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mjbshaw", "id": 1204698, "node_id": "MDQ6VXNlcjEyMDQ2OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1204698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbshaw", "html_url": "https://github.com/mjbshaw", "followers_url": "https://api.github.com/users/mjbshaw/followers", "following_url": "https://api.github.com/users/mjbshaw/following{/other_user}", "gists_url": "https://api.github.com/users/mjbshaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbshaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbshaw/subscriptions", "organizations_url": "https://api.github.com/users/mjbshaw/orgs", "repos_url": "https://api.github.com/users/mjbshaw/repos", "events_url": "https://api.github.com/users/mjbshaw/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbshaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "424a749a01224239ba2c8850f16007d57db0a242", "url": "https://api.github.com/repos/rust-lang/rust/commits/424a749a01224239ba2c8850f16007d57db0a242", "html_url": "https://github.com/rust-lang/rust/commit/424a749a01224239ba2c8850f16007d57db0a242"}], "stats": {"total": 79, "additions": 64, "deletions": 15}, "files": [{"sha": "ec6ca242fa36b88daffd2d0a29ada6c5b17a4e5a", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/412ad9bf3746bd0682db136c36a433f3205715f1/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412ad9bf3746bd0682db136c36a433f3205715f1/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=412ad9bf3746bd0682db136c36a433f3205715f1", "patch": "@@ -13,7 +13,7 @@ use constrained_type_params::{identify_constrained_type_params, Parameter};\n \n use hir::def_id::DefId;\n use rustc::traits::{self, ObligationCauseCode};\n-use rustc::ty::{self, Lift, Ty, TyCtxt, GenericParamDefKind, TypeFoldable};\n+use rustc::ty::{self, Lift, Ty, TyCtxt, TyKind, GenericParamDefKind, TypeFoldable};\n use rustc::ty::subst::{Subst, Substs};\n use rustc::ty::util::ExplicitSelf;\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n@@ -119,14 +119,14 @@ pub fn check_item_well_formed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: Def\n             check_item_fn(tcx, item);\n         }\n         hir::ItemKind::Static(ref ty, ..) => {\n-            check_item_type(tcx, item.id, ty.span);\n+            check_item_type(tcx, item.id, ty.span, false);\n         }\n         hir::ItemKind::Const(ref ty, ..) => {\n-            check_item_type(tcx, item.id, ty.span);\n+            check_item_type(tcx, item.id, ty.span, false);\n         }\n         hir::ItemKind::ForeignMod(ref module) => for it in module.items.iter() {\n             if let hir::ForeignItemKind::Static(ref ty, ..) = it.node {\n-                check_item_type(tcx, it.id, ty.span);\n+                check_item_type(tcx, it.id, ty.span, true);\n             }\n         },\n         hir::ItemKind::Struct(ref struct_def, ref ast_generics) => {\n@@ -340,23 +340,35 @@ fn check_item_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item: &hir::Item) {\n     })\n }\n \n-fn check_item_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_id: ast::NodeId, ty_span: Span) {\n+fn check_item_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                             item_id: ast::NodeId,\n+                             ty_span: Span,\n+                             allow_foreign_ty: bool) {\n     debug!(\"check_item_type: {:?}\", item_id);\n \n     for_id(tcx, item_id, ty_span).with_fcx(|fcx, _this| {\n         let ty = fcx.tcx.type_of(fcx.tcx.hir.local_def_id(item_id));\n         let item_ty = fcx.normalize_associated_types_in(ty_span, &ty);\n \n-        fcx.register_wf_obligation(item_ty, ty_span, ObligationCauseCode::MiscObligation);\n-        fcx.register_bound(\n-            item_ty,\n-            fcx.tcx.require_lang_item(lang_items::SizedTraitLangItem),\n-            traits::ObligationCause::new(\n-                ty_span,\n-                fcx.body_id,\n-                traits::MiscObligation,\n-            ),\n-        );\n+        let mut allow_unsized = false;\n+        if allow_foreign_ty {\n+            if let TyKind::Foreign(_) = tcx.struct_tail(item_ty).sty {\n+                allow_unsized = true;\n+            }\n+        }\n+\n+        if !allow_unsized {\n+            fcx.register_wf_obligation(item_ty, ty_span, ObligationCauseCode::MiscObligation);\n+            fcx.register_bound(\n+                item_ty,\n+                fcx.tcx.require_lang_item(lang_items::SizedTraitLangItem),\n+                traits::ObligationCause::new(\n+                    ty_span,\n+                    fcx.body_id,\n+                    traits::MiscObligation,\n+                ),\n+            );\n+        }\n \n         vec![] // no implied bounds in a const etc\n     });"}, {"sha": "72e2853b9f03845fa6655ef2ea457c7c77d63971", "filename": "src/test/ui/static/static-extern-type.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/412ad9bf3746bd0682db136c36a433f3205715f1/src%2Ftest%2Fui%2Fstatic%2Fstatic-extern-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412ad9bf3746bd0682db136c36a433f3205715f1/src%2Ftest%2Fui%2Fstatic%2Fstatic-extern-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-extern-type.rs?ref=412ad9bf3746bd0682db136c36a433f3205715f1", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+#![feature(extern_types)]\n+\n+pub mod a {\n+    extern \"C\" {\n+        pub type StartFn;\n+        pub static start: StartFn;\n+    }\n+}\n+\n+pub mod b {\n+    #[repr(transparent)]\n+    pub struct TransparentType(::a::StartFn);\n+    extern \"C\" {\n+        pub static start: TransparentType;\n+    }\n+}\n+\n+pub mod c {\n+    #[repr(C)]\n+    pub struct CType(u32, ::b::TransparentType);\n+    extern \"C\" {\n+        pub static start: CType;\n+    }\n+}\n+\n+fn main() {}"}]}