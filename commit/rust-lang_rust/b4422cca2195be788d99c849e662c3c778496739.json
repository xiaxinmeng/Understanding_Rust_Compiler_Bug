{"sha": "b4422cca2195be788d99c849e662c3c778496739", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NDIyY2NhMjE5NWJlNzg4ZDk5Yzg0OWU2NjJjM2M3Nzg0OTY3Mzk=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-04-07T19:42:06Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-04-07T19:42:06Z"}, "message": "Add a -O option and change the Makefile to use it.", "tree": {"sha": "7e699c298714a46eaff380a8e501c3ad0cf3b1b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e699c298714a46eaff380a8e501c3ad0cf3b1b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4422cca2195be788d99c849e662c3c778496739", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4422cca2195be788d99c849e662c3c778496739", "html_url": "https://github.com/rust-lang/rust/commit/b4422cca2195be788d99c849e662c3c778496739", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4422cca2195be788d99c849e662c3c778496739/comments", "author": null, "committer": null, "parents": [{"sha": "ddf96ac3a829bcf2a86d1f644fb6593789f64419", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddf96ac3a829bcf2a86d1f644fb6593789f64419", "html_url": "https://github.com/rust-lang/rust/commit/ddf96ac3a829bcf2a86d1f644fb6593789f64419"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "988f56a61d584074792b9ad2a105a01bc8c24e11", "filename": "Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4422cca2195be788d99c849e662c3c778496739/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/b4422cca2195be788d99c849e662c3c778496739/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=b4422cca2195be788d99c849e662c3c778496739", "patch": "@@ -14,7 +14,7 @@ CFG_INFO := $(info cfg: building on $(CFG_OSTYPE) $(CFG_CPUTYPE))\n CFG_GCC_CFLAGS :=\n CFG_GCC_LINK_FLAGS :=\n CFG_BOOT_FLAGS := $(BOOT_FLAGS)\n-CFG_RUSTC_FLAGS := -nowarn\n+CFG_RUSTC_FLAGS := -nowarn -O\n \n # On Darwin, we need to run dsymutil so the debugging information ends\n # up in the right place.  On other platforms, it automatically gets"}, {"sha": "36827b73ba0fe0d2b8720387a9516a88fbe6b3e5", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b4422cca2195be788d99c849e662c3c778496739/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4422cca2195be788d99c849e662c3c778496739/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=b4422cca2195be788d99c849e662c3c778496739", "patch": "@@ -58,6 +58,7 @@ impure fn compile_input(session.session sess,\n                         eval.env env,\n                         str input, str output,\n                         bool shared,\n+                        bool optimize,\n                         vec[str] library_search_paths) {\n     auto def = tup(0, 0);\n     auto p = parser.new_parser(sess, env, def, input);\n@@ -69,7 +70,7 @@ impure fn compile_input(session.session sess,\n     auto type_cache = typeck_result._1;\n     // FIXME: uncomment once typestate_check works\n     // crate = typestate_check.check_crate(crate);\n-    trans.trans_crate(sess, crate, type_cache, output, shared);\n+    trans.trans_crate(sess, crate, type_cache, output, shared, optimize);\n }\n \n impure fn pretty_print_input(session.session sess,\n@@ -131,6 +132,9 @@ impure fn main(vec[str] args) {\n     let bool pretty = false;\n     let bool glue = false;\n \n+    // FIXME: Maybe we should support -O0, -O1, -Os, etc\n+    let bool optimize = false;\n+\n     auto i = 1u;\n     auto len = _vec.len[str](args);\n \n@@ -140,6 +144,8 @@ impure fn main(vec[str] args) {\n         if (_str.byte_len(arg) > 0u && arg.(0) == '-' as u8) {\n             if (_str.eq(arg, \"-nowarn\")) {\n                 do_warn = false;\n+            } else if (_str.eq(arg, \"-O\")) {\n+                optimize = true;\n             } else if (_str.eq(arg, \"-glue\")) {\n                 glue = true;\n             } else if (_str.eq(arg, \"-shared\")) {\n@@ -189,10 +195,10 @@ impure fn main(vec[str] args) {\n     if (glue) {\n         alt (output_file) {\n             case (none[str]) {\n-                middle.trans.make_common_glue(\"glue.bc\");\n+                middle.trans.make_common_glue(\"glue.bc\", optimize);\n             }\n             case (some[str](?s)) {\n-                middle.trans.make_common_glue(s);\n+                middle.trans.make_common_glue(s, optimize);\n             }\n         }\n         ret;\n@@ -217,11 +223,11 @@ impure fn main(vec[str] args) {\n                         parts += vec(\".bc\");\n                         auto ofile = _str.concat(parts);\n                         compile_input(sess, env, ifile, ofile, shared,\n-                                      library_search_paths);\n+                                      optimize, library_search_paths);\n                     }\n                     case (some[str](?ofile)) {\n                         compile_input(sess, env, ifile, ofile, shared,\n-                                      library_search_paths);\n+                                      optimize, library_search_paths);\n                     }\n                 }\n             }"}, {"sha": "f81c8e1d9b849b2cf9329dc287b905aa6476e522", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4422cca2195be788d99c849e662c3c778496739/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4422cca2195be788d99c849e662c3c778496739/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=b4422cca2195be788d99c849e662c3c778496739", "patch": "@@ -7003,7 +7003,7 @@ fn make_glues(ModuleRef llmod, type_names tn) -> @glue_fns {\n              vec_append_glue = make_vec_append_glue(llmod, tn));\n }\n \n-fn make_common_glue(str output) {\n+fn make_common_glue(str output, bool optimize) {\n     // FIXME: part of this is repetitive and is probably a good idea\n     // to autogen it, but things like the memcpy implementation are not\n     // and it might be better to just check in a .ll file.\n@@ -7029,14 +7029,15 @@ fn make_common_glue(str output) {\n \n     trans_exit_task_glue(glues, new_str_hash[ValueRef](), tn, llmod);\n \n-    run_passes(llmod, true);\n+    run_passes(llmod, optimize);\n \n     llvm.LLVMWriteBitcodeToFile(llmod, _str.buf(output));\n     llvm.LLVMDisposeModule(llmod);\n }\n \n fn trans_crate(session.session sess, @ast.crate crate,\n-               &ty.type_cache type_cache, str output, bool shared) {\n+               &ty.type_cache type_cache, str output, bool shared,\n+               bool optimize) {\n     auto llmod =\n         llvm.LLVMModuleCreateWithNameInContext(_str.buf(\"rust_out\"),\n                                                llvm.LLVMGetGlobalContext());\n@@ -7099,8 +7100,7 @@ fn trans_crate(session.session sess, @ast.crate crate,\n     // Translate the metadata.\n     middle.metadata.write_metadata(cx, crate);\n \n-    // FIXME: Add an -O option\n-    run_passes(llmod, true);\n+    run_passes(llmod, optimize);\n \n     llvm.LLVMWriteBitcodeToFile(llmod, _str.buf(output));\n     llvm.LLVMDisposeModule(llmod);"}]}