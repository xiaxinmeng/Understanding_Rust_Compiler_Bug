{"sha": "b80f0a3c9fe6a0e6d88a95b0697cb64411152530", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MGYwYTNjOWZlNmEwZTZkODhhOTViMDY5N2NiNjQ0MTExNTI1MzA=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-27T09:06:53Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-27T09:06:53Z"}, "message": "Use the method name 'unary-' for overloading negation\n\nIt's less likely to clash with something than 'neg'.\n\nIssue #1520", "tree": {"sha": "63525975082b9216384c81029d51f97b4fcebc1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63525975082b9216384c81029d51f97b4fcebc1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b80f0a3c9fe6a0e6d88a95b0697cb64411152530", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b80f0a3c9fe6a0e6d88a95b0697cb64411152530", "html_url": "https://github.com/rust-lang/rust/commit/b80f0a3c9fe6a0e6d88a95b0697cb64411152530", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b80f0a3c9fe6a0e6d88a95b0697cb64411152530/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b67e2d27406d1bd2173c269b22a6166830357a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b67e2d27406d1bd2173c269b22a6166830357a0", "html_url": "https://github.com/rust-lang/rust/commit/7b67e2d27406d1bd2173c269b22a6166830357a0"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "1d54ec2befc72d5294aae3ab68c498672f53fc6e", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b80f0a3c9fe6a0e6d88a95b0697cb64411152530/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80f0a3c9fe6a0e6d88a95b0697cb64411152530/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=b80f0a3c9fe6a0e6d88a95b0697cb64411152530", "patch": "@@ -1903,7 +1903,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n             oper_t = structurally_resolved_type(fcx, oper.span, oper_t);\n             if !(ty::type_is_integral(tcx, oper_t) ||\n                  ty::type_is_fp(tcx, oper_t)) {\n-                oper_t = check_user_unop(fcx, \"-\", \"neg\", expr, oper_t);\n+                oper_t = check_user_unop(fcx, \"-\", \"unary-\", expr, oper_t);\n             }\n           }\n         }"}, {"sha": "a7bbddfee39419db492cd3c94363b8df5bb6abc2", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b80f0a3c9fe6a0e6d88a95b0697cb64411152530/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80f0a3c9fe6a0e6d88a95b0697cb64411152530/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=b80f0a3c9fe6a0e6d88a95b0697cb64411152530", "patch": "@@ -1829,7 +1829,11 @@ fn parse_method_name(p: parser) -> ast::ident {\n       token::BINOP(op) { p.bump(); token::binop_to_str(op) }\n       token::NOT { p.bump(); \"!\" }\n       token::LBRACKET { p.bump(); expect(p, token::RBRACKET); \"[]\" }\n-      _ { parse_value_ident(p) }\n+      _ {\n+          let id = parse_value_ident(p);\n+          if id == \"unary\" && eat(p, token::BINOP(token::MINUS)) { \"unary-\" }\n+          else { id }\n+      }\n     }\n }\n "}, {"sha": "42933578b3bc3d4d9b069511df3b8ce7b37fdb08", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b80f0a3c9fe6a0e6d88a95b0697cb64411152530/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80f0a3c9fe6a0e6d88a95b0697cb64411152530/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=b80f0a3c9fe6a0e6d88a95b0697cb64411152530", "patch": "@@ -7,7 +7,7 @@ impl point_ops for point {\n     fn -(other: point) -> point {\n         {x: self.x - other.x, y: self.y - other.y}\n     }\n-    fn neg() -> point {\n+    fn unary-() -> point {\n         {x: -self.x, y: -self.y}\n     }\n     fn [](x: bool) -> int {"}]}