{"sha": "2fa6220f57228d149f99272a4b3f97b560359738", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYTYyMjBmNTcyMjhkMTQ5Zjk5MjcyYTRiM2Y5N2I1NjAzNTk3Mzg=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-07-19T21:39:48Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-07-19T21:43:32Z"}, "message": "Format all the loops!", "tree": {"sha": "ea276f44b9b8d519243f0dc0f98d5200f55662ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea276f44b9b8d519243f0dc0f98d5200f55662ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fa6220f57228d149f99272a4b3f97b560359738", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fa6220f57228d149f99272a4b3f97b560359738", "html_url": "https://github.com/rust-lang/rust/commit/2fa6220f57228d149f99272a4b3f97b560359738", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fa6220f57228d149f99272a4b3f97b560359738/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fda8dd883f5de6989280884a37e408981dfc2ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fda8dd883f5de6989280884a37e408981dfc2ee", "html_url": "https://github.com/rust-lang/rust/commit/2fda8dd883f5de6989280884a37e408981dfc2ee"}], "stats": {"total": 208, "additions": 169, "deletions": 39}, "files": [{"sha": "35bd90f5f3218835930bb4b2c071be7269cbe63d", "filename": "src/expr.rs", "status": "modified", "additions": 140, "deletions": 32, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/2fa6220f57228d149f99272a4b3f97b560359738/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa6220f57228d149f99272a4b3f97b560359738/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=2fa6220f57228d149f99272a4b3f97b560359738", "patch": "@@ -56,21 +56,45 @@ impl Rewrite for ast::Expr {\n             ast::Expr_::ExprTup(ref items) => {\n                 rewrite_tuple_lit(context, items, self.span, width, offset)\n             }\n-            ast::Expr_::ExprWhile(ref subexpr, ref block, label) => {\n-                let label_string = rewrite_label(label);\n-                // 6 = \"while \"\n-                // 2 = \" {\"\n-                let expr_width = width - 6 - 2 - label_string.len();\n-                let expr_offset = offset + 6 + label_string.len();\n-\n-                subexpr.rewrite(context, expr_width, expr_offset).and_then(|expr_string| {\n-                    // FIXME: this drops any comment between \"loop\" and the block.\n-                    block.rewrite(context, width, offset).map(|result| {\n-                        format!(\"{}while {} {}\", rewrite_label(label), expr_string, result)\n-                    })\n-                })\n+            ast::Expr_::ExprWhile(ref cond, ref block, label) => {\n+                rewrite_loop(context,\n+                             cond,\n+                             block,\n+                             label,\n+                             None,\n+                             \"while \",\n+                             \"let \",\n+                             \" = \",\n+                             width,\n+                             offset)\n+            }\n+            ast::Expr_::ExprWhileLet(ref pat, ref cond, ref block, label) => {\n+                rewrite_loop(context,\n+                             cond,\n+                             block,\n+                             label,\n+                             Some(pat),\n+                             \"while \",\n+                             \"let \",\n+                             \" = \",\n+                             width,\n+                             offset)\n+            }\n+            ast::Expr_::ExprForLoop(ref pat, ref cond, ref block, label) => {\n+                rewrite_loop(context,\n+                             cond,\n+                             block,\n+                             label,\n+                             Some(pat),\n+                             \"for \",\n+                             \"\",\n+                             \" in \",\n+                             width,\n+                             offset)\n             }\n             ast::Expr_::ExprLoop(ref block, label) => {\n+                // Of all the loops, this is the only one that does not use\n+                // rewrite_loop!\n                 // FIXME: this drops any comment between \"loop\" and the block.\n                 block.rewrite(context, width, offset).map(|result| {\n                     format!(\"{}loop {}\", rewrite_label(label), result)\n@@ -97,6 +121,14 @@ impl Rewrite for ast::Expr {\n                                 width,\n                                 offset)\n             }\n+            // We reformat it ourselves because rustc gives us a bad span for ranges\n+            ast::Expr_::ExprRange(ref left, ref right) => {\n+                rewrite_range(context,\n+                              left.as_ref().map(|e| &**e),\n+                              right.as_ref().map(|e| &**e),\n+                              width,\n+                              offset)\n+            }\n             _ => context.codemap.span_to_snippet(self.span).ok()\n         }\n     }\n@@ -136,6 +168,61 @@ fn rewrite_label(label: Option<ast::Ident>) -> String {\n     }\n }\n \n+// FIXME: this doesn't play well with line breaks\n+fn rewrite_range(context: &RewriteContext,\n+                 left: Option<&ast::Expr>,\n+                 right: Option<&ast::Expr>,\n+                 width: usize,\n+                 offset: usize)\n+                 -> Option<String> {\n+    let left_string = match left {\n+        // 2 = ..\n+        Some(expr) => try_opt!(expr.rewrite(context, width - 2, offset)),\n+        None => String::new()\n+    };\n+\n+    let right_string = match right {\n+        Some(expr) => {\n+            // 2 = ..\n+            let max_width = (width - 2).checked_sub(left_string.len()).unwrap_or(0);\n+            try_opt!(expr.rewrite(context, max_width, offset + 2 + left_string.len()))\n+        }\n+        None => String::new()\n+    };\n+\n+    Some(format!(\"{}..{}\", left_string, right_string))\n+}\n+\n+fn rewrite_loop(context: &RewriteContext,\n+                cond: &ast::Expr,\n+                block: &ast::Block,\n+                label: Option<ast::Ident>,\n+                pat: Option<&ast::Pat>,\n+                keyword: &str,\n+                matcher: &str, // FIXME: think of better identifiers\n+                connector: &str,\n+                width: usize,\n+                offset: usize)\n+                -> Option<String> {\n+    let label_string = rewrite_label(label);\n+    // 2 = \" {\"\n+    let inner_width = width - keyword.len() - 2 - label_string.len();\n+    let inner_offset = offset + keyword.len() + label_string.len();\n+\n+    let pat_expr_string = try_opt!(rewrite_pat_expr(context,\n+                                                    pat,\n+                                                    cond,\n+                                                    matcher,\n+                                                    connector,\n+                                                    inner_width,\n+                                                    inner_offset));\n+\n+    // FIXME: this drops any comment between \"loop\" and the block.\n+    block.rewrite(context, width, offset).map(|result| {\n+        format!(\"{}{}{} {}\", label_string, keyword, pat_expr_string, result)\n+    })\n+}\n+\n fn rewrite_if_else(context: &RewriteContext,\n                    cond: &ast::Expr,\n                    if_block: &ast::Block,\n@@ -144,37 +231,58 @@ fn rewrite_if_else(context: &RewriteContext,\n                    width: usize,\n                    offset: usize)\n                    -> Option<String> {\n-    // FIXME: missing comments between control statements and blocks\n     // 3 = \"if \", 2 = \" {\"\n-    let pat_string = match pat {\n+    let pat_expr_string = try_opt!(rewrite_pat_expr(context,\n+                                                    pat,\n+                                                    cond,\n+                                                    \"let \",\n+                                                    \" = \",\n+                                                    width - 3 - 2,\n+                                                    offset + 3));\n+\n+    let if_block_string = try_opt!(if_block.rewrite(context, width, offset));\n+    let mut result = format!(\"if {} {}\", pat_expr_string, if_block_string);\n+\n+    if let Some(else_block) = else_block {\n+        let else_block_string = try_opt!(else_block.rewrite(context, width, offset));\n+\n+        result.push_str(\" else \");\n+        result.push_str(&else_block_string);\n+    }\n+\n+    Some(result)\n+}\n+\n+fn rewrite_pat_expr(context: &RewriteContext,\n+                    pat: Option<&ast::Pat>,\n+                    expr: &ast::Expr,\n+                    matcher: &str,\n+                    connector: &str,\n+                    width: usize,\n+                    offset: usize)\n+                    -> Option<String> {\n+    let mut result = match pat {\n         Some(pat) => {\n-            // 7 = \"let \".len() + \" = \".len()\n-            // 4 = \"let \".len()\n-            let pat_string = try_opt!(pat.rewrite(context, width - 3 - 2 - 7, offset + 3 + 4));\n-            format!(\"let {} = \", pat_string)\n+            let pat_string = try_opt!(pat.rewrite(context,\n+                                                  width - connector.len() - matcher.len(),\n+                                                  offset + matcher.len()));\n+            format!(\"{}{}{}\", matcher, pat_string, connector)\n         }\n         None => String::new()\n     };\n \n     // Consider only the last line of the pat string\n-    let extra_offset = match pat_string.rfind('\\n') {\n+    let extra_offset = match result.rfind('\\n') {\n         // 1 for newline character\n-        Some(idx) => pat_string.len() - idx - 1 - offset,\n-        None => 3 + pat_string.len()\n+        Some(idx) => result.len() - idx - 1 - offset,\n+        None => result.len()\n     };\n \n-    let cond_string = try_opt!(cond.rewrite(context,\n-                                            width - extra_offset - 2,\n+    let expr_string = try_opt!(expr.rewrite(context,\n+                                            width - extra_offset,\n                                             offset + extra_offset));\n-    let if_block_string = try_opt!(if_block.rewrite(context, width, offset));\n-    let mut result = format!(\"if {}{} {}\", pat_string, cond_string, if_block_string);\n \n-    if let Some(else_block) = else_block {\n-        let else_block_string = try_opt!(else_block.rewrite(context, width, offset));\n-\n-        result.push_str(\" else \");\n-        result.push_str(&else_block_string);\n-    }\n+    result.push_str(&expr_string);\n \n     Some(result)\n }"}, {"sha": "5ea4812e144be7e34434fcc32bf07b5d271c6ddc", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2fa6220f57228d149f99272a4b3f97b560359738/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa6220f57228d149f99272a4b3f97b560359738/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2fa6220f57228d149f99272a4b3f97b560359738", "patch": "@@ -218,11 +218,12 @@ fn fmt_lines(changes: &mut ChangeSet, config: &Config) -> FormatReport {\n         let mut cur_line = 1;\n         let mut newline_count = 0;\n         let mut errors = vec![];\n-        let mut issue_seeker = BadIssueSeeker::new(config.report_todo,\n-                                                   config.report_fixme);\n+        let mut issue_seeker = BadIssueSeeker::new(config.report_todo, config.report_fixme);\n \n         for (c, b) in text.chars() {\n-            if c == '\\r' { continue; }\n+            if c == '\\r' {\n+                continue;\n+            }\n \n             // Add warnings for bad todos/ fixmes\n             if let Some(issue) = issue_seeker.inspect(c) {"}, {"sha": "13c0cf763e331de57bb285e842a504e212618827", "filename": "src/lists.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2fa6220f57228d149f99272a4b3f97b560359738/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa6220f57228d149f99272a4b3f97b560359738/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=2fa6220f57228d149f99272a4b3f97b560359738", "patch": "@@ -136,7 +136,11 @@ pub fn write_list<'b>(items: &[ListItem], formatting: &ListFormatting<'b>) -> St\n         let first = i == 0;\n         let last = i == items.len() - 1;\n         let separate = !last || trailing_separator;\n-        let item_sep_len = if separate { sep_len } else { 0 };\n+        let item_sep_len = if separate {\n+            sep_len\n+        } else {\n+            0\n+        };\n         let item_width = item.item.len() + item_sep_len;\n \n         match tactic {\n@@ -208,8 +212,7 @@ pub fn write_list<'b>(items: &[ListItem], formatting: &ListFormatting<'b>) -> St\n             let comment = item.post_comment.as_ref().unwrap();\n             // Use block-style only for the last item or multiline comments.\n             let block_style = formatting.ends_with_newline && last ||\n-                              comment.trim().contains('\\n') ||\n-                              comment.trim().len() > width;\n+                              comment.trim().contains('\\n') || comment.trim().len() > width;\n \n             let formatted_comment = rewrite_comment(comment, block_style, width, offset);\n "}, {"sha": "ee5688c14a17b387fd243647f734f5b142ac2b4b", "filename": "src/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fa6220f57228d149f99272a4b3f97b560359738/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa6220f57228d149f99272a4b3f97b560359738/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=2fa6220f57228d149f99272a4b3f97b560359738", "patch": "@@ -353,7 +353,7 @@ impl<'a> FmtVisitor<'a> {\n \n             result.push_str(&a_str);\n \n-            if i < attrs.len() -1 {\n+            if i < attrs.len() - 1 {\n                 result.push('\\n');\n             }\n         }"}, {"sha": "36e6ab43de861f6cc09b1619536837397e8a34f3", "filename": "tests/source/loop.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2fa6220f57228d149f99272a4b3f97b560359738/tests%2Fsource%2Floop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa6220f57228d149f99272a4b3f97b560359738/tests%2Fsource%2Floop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Floop.rs?ref=2fa6220f57228d149f99272a4b3f97b560359738", "patch": "@@ -13,4 +13,13 @@ let x = loop { do_forever(); };\n \n    while aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa > bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb {\n    }\n+\n+    'b: for xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx in some_iter(arg1, arg2) {\n+        // do smth\n+    }\n+\n+    while let  Some(i) =     x.find('s')\n+    {\n+        x.update();\n+    }\n }"}, {"sha": "e1f2ccc91a4285b429b5e5a18356631436832cd4", "filename": "tests/target/loop.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2fa6220f57228d149f99272a4b3f97b560359738/tests%2Ftarget%2Floop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa6220f57228d149f99272a4b3f97b560359738/tests%2Ftarget%2Floop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Floop.rs?ref=2fa6220f57228d149f99272a4b3f97b560359738", "patch": "@@ -18,4 +18,13 @@ fn main() {\n \n     while aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa > bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb {\n     }\n+\n+    'b: for xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx in some_iter(arg1,\n+                                                                                        arg2) {\n+        // do smth\n+    }\n+\n+    while let Some(i) = x.find('s') {\n+        x.update();\n+    }\n }"}]}