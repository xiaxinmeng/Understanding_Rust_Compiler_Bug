{"sha": "0b7dd95475d0150719cd859dbd6e2fe7092d83bd", "node_id": "C_kwDOAAsO6NoAKDBiN2RkOTU0NzVkMDE1MDcxOWNkODU5ZGJkNmUyZmU3MDkyZDgzYmQ", "commit": {"author": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-07T19:27:50Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-13T15:46:06Z"}, "message": "remove HirVisitor\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "c697139eabb622d9a384ff631485b3c30dd09dc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c697139eabb622d9a384ff631485b3c30dd09dc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b7dd95475d0150719cd859dbd6e2fe7092d83bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b7dd95475d0150719cd859dbd6e2fe7092d83bd", "html_url": "https://github.com/rust-lang/rust/commit/0b7dd95475d0150719cd859dbd6e2fe7092d83bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b7dd95475d0150719cd859dbd6e2fe7092d83bd/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "885b90bb349d0e37e0fe26cdb7afadbc1e8c57f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/885b90bb349d0e37e0fe26cdb7afadbc1e8c57f0", "html_url": "https://github.com/rust-lang/rust/commit/885b90bb349d0e37e0fe26cdb7afadbc1e8c57f0"}], "stats": {"total": 74, "additions": 31, "deletions": 43}, "files": [{"sha": "dc63a2d8666bdff04f843d2c9e6d2b35c488440a", "filename": "compiler/rustc_passes/src/debugger_visualizer.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0b7dd95475d0150719cd859dbd6e2fe7092d83bd/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7dd95475d0150719cd859dbd6e2fe7092d83bd/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs?ref=0b7dd95475d0150719cd859dbd6e2fe7092d83bd", "patch": "@@ -16,7 +16,7 @@ use std::sync::Arc;\n fn check_for_debugger_visualizer<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     hir_id: HirId,\n-    debugger_visualizers: &mut FxHashSet<DebuggerVisualizerFile>\n+    debugger_visualizers: &mut FxHashSet<DebuggerVisualizerFile>,\n ) {\n     let attrs = tcx.hir().attrs(hir_id);\n     for attr in attrs {\n@@ -51,8 +51,7 @@ fn check_for_debugger_visualizer<'tcx>(\n                 let contents = match std::fs::read(&file) {\n                     Ok(contents) => contents,\n                     Err(err) => {\n-                        tcx\n-                            .sess\n+                        tcx.sess\n                             .struct_span_err(\n                                 attr.span,\n                                 &format!(\n@@ -71,12 +70,8 @@ fn check_for_debugger_visualizer<'tcx>(\n                     DebuggerVisualizerType::Natvis,\n                 ));\n             } else {\n-                tcx\n-                    .sess\n-                    .struct_span_err(\n-                        attr.span,\n-                        &format!(\"{} is not a valid file\", file.display()),\n-                    )\n+                tcx.sess\n+                    .struct_span_err(attr.span, &format!(\"{} is not a valid file\", file.display()))\n                     .emit();\n             }\n         }\n@@ -101,7 +96,6 @@ fn debugger_visualizers<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> Vec<Debugger\n     // Collect debugger visualizers on the crate attributes.\n     check_for_debugger_visualizer(tcx, CRATE_HIR_ID, &mut debugger_visualizers);\n \n-\n     // Extract out the found debugger_visualizer items.\n     let mut visualizers = debugger_visualizers.into_iter().collect::<Vec<_>>();\n "}, {"sha": "c3b82aa853c786e757577df794518aa2a7c6ca6a", "filename": "src/test/run-make-fulldeps/obtain-borrowck/driver.rs", "status": "modified", "additions": 27, "deletions": 33, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0b7dd95475d0150719cd859dbd6e2fe7092d83bd/src%2Ftest%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7dd95475d0150719cd859dbd6e2fe7092d83bd/src%2Ftest%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fobtain-borrowck%2Fdriver.rs?ref=0b7dd95475d0150719cd859dbd6e2fe7092d83bd", "patch": "@@ -21,7 +21,7 @@ extern crate rustc_session;\n use rustc_borrowck::consumers::BodyWithBorrowckFacts;\n use rustc_driver::Compilation;\n use rustc_hir::def_id::LocalDefId;\n-use rustc_hir::itemlikevisit::ItemLikeVisitor;\n+use rustc_hir::def::DefKind;\n use rustc_interface::interface::Compiler;\n use rustc_interface::{Config, Queries};\n use rustc_middle::ty::query::query_values::mir_borrowck;\n@@ -65,11 +65,34 @@ impl rustc_driver::Callbacks for CompilerCalls {\n         queries.global_ctxt().unwrap().peek_mut().enter(|tcx| {\n             // Collect definition ids of MIR bodies.\n             let hir = tcx.hir();\n-            let mut visitor = HirVisitor { bodies: Vec::new() };\n-            hir.visit_all_item_likes(&mut visitor);\n+            let mut bodies = Vec::new();\n+\n+            let crate_items = tcx.hir_crate_items(());\n+            for id in crate_items.items() {\n+                if matches!(tcx.def_kind(id.def_id), DefKind::Fn) {\n+                    bodies.push(id.def_id);\n+                }\n+            }\n+\n+            for id in crate_items.trait_items() {\n+                if matches!(tcx.def_kind(id.def_id), DefKind::AssocFn) {\n+                    let trait_item = hir.trait_item(id);\n+                    if let rustc_hir::TraitItemKind::Fn(_, trait_fn) = &trait_item.kind {\n+                        if let rustc_hir::TraitFn::Provided(_) = trait_fn {\n+                            bodies.push(trait_item.def_id);\n+                        }\n+                    }\n+                }\n+            }\n+\n+            for id in crate_items.impl_items() {\n+                if matches!(tcx.def_kind(id.def_id), DefKind::AssocFn) {\n+                    bodies.push(id.def_id);\n+                }\n+            }\n \n             // Trigger borrow checking of all bodies.\n-            for def_id in visitor.bodies {\n+            for def_id in bodies {\n                 let _ = tcx.optimized_mir(def_id);\n             }\n \n@@ -121,35 +144,6 @@ fn mir_borrowck<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> mir_borrowck<'tc\n     original_mir_borrowck(tcx, def_id)\n }\n \n-/// Visitor that collects all body definition ids mentioned in the program.\n-struct HirVisitor {\n-    bodies: Vec<LocalDefId>,\n-}\n-\n-impl<'tcx> ItemLikeVisitor<'tcx> for HirVisitor {\n-    fn visit_item(&mut self, item: &rustc_hir::Item) {\n-        if let rustc_hir::ItemKind::Fn(..) = item.kind {\n-            self.bodies.push(item.def_id);\n-        }\n-    }\n-\n-    fn visit_trait_item(&mut self, trait_item: &rustc_hir::TraitItem) {\n-        if let rustc_hir::TraitItemKind::Fn(_, trait_fn) = &trait_item.kind {\n-            if let rustc_hir::TraitFn::Provided(_) = trait_fn {\n-                self.bodies.push(trait_item.def_id);\n-            }\n-        }\n-    }\n-\n-    fn visit_impl_item(&mut self, impl_item: &rustc_hir::ImplItem) {\n-        if let rustc_hir::ImplItemKind::Fn(..) = impl_item.kind {\n-            self.bodies.push(impl_item.def_id);\n-        }\n-    }\n-\n-    fn visit_foreign_item(&mut self, _foreign_item: &rustc_hir::ForeignItem) {}\n-}\n-\n /// Pull MIR bodies stored in the thread-local.\n fn get_bodies<'tcx>(tcx: TyCtxt<'tcx>) -> Vec<(String, BodyWithBorrowckFacts<'tcx>)> {\n     MIR_BODIES.with(|state| {"}]}