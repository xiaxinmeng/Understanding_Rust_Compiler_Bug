{"sha": "8367fb7ba6abae89ab7e17c1b3987ee321f5bb71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzNjdmYjdiYTZhYmFlODlhYjdlMTdjMWIzOTg3ZWUzMjFmNWJiNzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-27T10:01:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-27T10:01:45Z"}, "message": "Auto merge of #39252 - alexcrichton:less-exports, r=nrc\n\nHide a few more standard library symbols\n\nThese commits touch up some of the symbol visibility rules for some crates related to the standard library, notably:\n\n* Symbols that are `pub extern` and `#[no_mangle]` which are internal-to-rust ABI things are no longer at the `C` export level, but the `Rust` export level. This includes allocators, panic runtimes, and compiler builtins.\n* The libbacktrace library is now compiled with `-fvisibility=hidden` to ensure that we don't export those symbols.", "tree": {"sha": "21b4f4f8b07ec2058229ef9dbbb316a7155fd1b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21b4f4f8b07ec2058229ef9dbbb316a7155fd1b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8367fb7ba6abae89ab7e17c1b3987ee321f5bb71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8367fb7ba6abae89ab7e17c1b3987ee321f5bb71", "html_url": "https://github.com/rust-lang/rust/commit/8367fb7ba6abae89ab7e17c1b3987ee321f5bb71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8367fb7ba6abae89ab7e17c1b3987ee321f5bb71/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fece9c735678d152da721711f6f4aba1f0b8ab15", "url": "https://api.github.com/repos/rust-lang/rust/commits/fece9c735678d152da721711f6f4aba1f0b8ab15", "html_url": "https://github.com/rust-lang/rust/commit/fece9c735678d152da721711f6f4aba1f0b8ab15"}, {"sha": "3d6f263b2a162974725cdcb914ba9ad9c2dbef84", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d6f263b2a162974725cdcb914ba9ad9c2dbef84", "html_url": "https://github.com/rust-lang/rust/commit/3d6f263b2a162974725cdcb914ba9ad9c2dbef84"}], "stats": {"total": 67, "additions": 63, "deletions": 4}, "files": [{"sha": "1143df0c6302d85e022ea634ed0e1812b55af838", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8367fb7ba6abae89ab7e17c1b3987ee321f5bb71/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8367fb7ba6abae89ab7e17c1b3987ee321f5bb71/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=8367fb7ba6abae89ab7e17c1b3987ee321f5bb71", "patch": "@@ -181,4 +181,15 @@ fn main() {\n     } else if !target.contains(\"windows\") && !target.contains(\"musl\") {\n         println!(\"cargo:rustc-link-lib=pthread\");\n     }\n+\n+    // The pthread_atfork symbols is used by jemalloc on android but the really\n+    // old android we're building on doesn't have them defined, so just make\n+    // sure the symbols are available.\n+    if target.contains(\"androideabi\") {\n+        println!(\"cargo:rerun-if-changed=pthread_atfork_dummy.c\");\n+        gcc::Config::new()\n+            .flag(\"-fvisibility=hidden\")\n+            .file(\"pthread_atfork_dummy.c\")\n+            .compile(\"libpthread_atfork_dummy.a\");\n+    }\n }"}, {"sha": "fc8a5455d1d07406a8e4557fd260534f441c3859", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8367fb7ba6abae89ab7e17c1b3987ee321f5bb71/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8367fb7ba6abae89ab7e17c1b3987ee321f5bb71/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=8367fb7ba6abae89ab7e17c1b3987ee321f5bb71", "patch": "@@ -143,7 +143,7 @@ mod imp {\n     // we're building on doesn't have them defined, so just make sure the symbols\n     // are available.\n     #[no_mangle]\n-    #[cfg(target_os = \"android\")]\n+    #[cfg(all(target_os = \"android\", not(cargobuild)))]\n     pub extern \"C\" fn pthread_atfork(_prefork: *mut u8,\n                                      _postfork_parent: *mut u8,\n                                      _postfork_child: *mut u8)"}, {"sha": "4e3df0ab26c373340bd3c020ec0288b0b17addca", "filename": "src/liballoc_jemalloc/pthread_atfork_dummy.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8367fb7ba6abae89ab7e17c1b3987ee321f5bb71/src%2Fliballoc_jemalloc%2Fpthread_atfork_dummy.c", "raw_url": "https://github.com/rust-lang/rust/raw/8367fb7ba6abae89ab7e17c1b3987ee321f5bb71/src%2Fliballoc_jemalloc%2Fpthread_atfork_dummy.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fpthread_atfork_dummy.c?ref=8367fb7ba6abae89ab7e17c1b3987ee321f5bb71", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// See comments in build.rs for why this exists\n+int pthread_atfork(void* prefork,\n+                   void* postfork_parent,\n+                   void* postfork_child) {\n+  return 0;\n+}"}, {"sha": "bea3ca8df70e0babf243b0c40c210ddbe75bc4ae", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8367fb7ba6abae89ab7e17c1b3987ee321f5bb71/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8367fb7ba6abae89ab7e17c1b3987ee321f5bb71/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=8367fb7ba6abae89ab7e17c1b3987ee321f5bb71", "patch": "@@ -81,19 +81,50 @@ impl ExportedSymbols {\n         for cnum in scx.sess().cstore.crates() {\n             debug_assert!(cnum != LOCAL_CRATE);\n \n+            // If this crate is a plugin and/or a custom derive crate, then\n+            // we're not even going to link those in so we skip those crates.\n             if scx.sess().cstore.plugin_registrar_fn(cnum).is_some() ||\n                scx.sess().cstore.derive_registrar_fn(cnum).is_some() {\n                 continue;\n             }\n \n+            // Check to see if this crate is a \"special runtime crate\". These\n+            // crates, implementation details of the standard library, typically\n+            // have a bunch of `pub extern` and `#[no_mangle]` functions as the\n+            // ABI between them. We don't want their symbols to have a `C`\n+            // export level, however, as they're just implementation details.\n+            // Down below we'll hardwire all of the symbols to the `Rust` export\n+            // level instead.\n+            let special_runtime_crate =\n+                scx.sess().cstore.is_allocator(cnum) ||\n+                scx.sess().cstore.is_panic_runtime(cnum) ||\n+                scx.sess().cstore.is_compiler_builtins(cnum);\n+\n             let crate_exports = scx\n                 .sess()\n                 .cstore\n                 .exported_symbols(cnum)\n                 .iter()\n                 .map(|&def_id| {\n                     let name = Instance::mono(scx, def_id).symbol_name(scx);\n-                    let export_level = export_level(scx, def_id);\n+                    let export_level = if special_runtime_crate {\n+                        // We can probably do better here by just ensuring that\n+                        // it has hidden visibility rather than public\n+                        // visibility, as this is primarily here to ensure it's\n+                        // not stripped during LTO.\n+                        //\n+                        // In general though we won't link right if these\n+                        // symbols are stripped, and LTO currently strips them.\n+                        if name == \"rust_eh_personality\" ||\n+                           name == \"rust_eh_register_frames\" ||\n+                           name == \"rust_eh_unregister_frames\" {\n+                            SymbolExportLevel::C\n+                        } else {\n+                            SymbolExportLevel::Rust\n+                        }\n+                    } else {\n+                        export_level(scx, def_id)\n+                    };\n                     debug!(\"EXPORTED SYMBOL (re-export): {} ({:?})\", name, export_level);\n                     (name, export_level)\n                 })"}, {"sha": "9504194393f9429373ed6e2246bd72b7705e6413", "filename": "src/libstd/build.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8367fb7ba6abae89ab7e17c1b3987ee321f5bb71/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8367fb7ba6abae89ab7e17c1b3987ee321f5bb71/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=8367fb7ba6abae89ab7e17c1b3987ee321f5bb71", "patch": "@@ -87,8 +87,9 @@ fn build_libbacktrace(host: &str, target: &str) {\n     let compiler = gcc::Config::new().get_compiler();\n     // only msvc returns None for ar so unwrap is okay\n     let ar = build_helper::cc2ar(compiler.path(), target).unwrap();\n-    let cflags = compiler.args().iter().map(|s| s.to_str().unwrap())\n-                         .collect::<Vec<_>>().join(\" \");\n+    let mut cflags = compiler.args().iter().map(|s| s.to_str().unwrap())\n+                             .collect::<Vec<_>>().join(\" \");\n+    cflags.push_str(\" -fvisibility=hidden\");\n     run(Command::new(\"sh\")\n                 .current_dir(&build_dir)\n                 .arg(src_dir.join(\"configure\").to_str().unwrap()"}]}