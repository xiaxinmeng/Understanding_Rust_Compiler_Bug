{"sha": "0ed2feca617de0d99f23f96859b372be2e2baab3", "node_id": "C_kwDOAAsO6NoAKDBlZDJmZWNhNjE3ZGUwZDk5ZjIzZjk2ODU5YjM3MmJlMmUyYmFhYjM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-23T21:39:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-23T21:39:09Z"}, "message": "Rollup merge of #98305 - klensy:no-err-alloc, r=compiler-errors\n\nprohibit_generics: don't alloc error string if no error emitted\n\nNoticed unreaded allocs in DHAT.", "tree": {"sha": "2ac1d10148b74162a300658463f34f6fa98890db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ac1d10148b74162a300658463f34f6fa98890db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ed2feca617de0d99f23f96859b372be2e2baab3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJitN19CRBK7hj4Ov3rIwAAuZwIAIVMF8VlbiocpRSzGuaP6HJU\n3uTIP2EQdXZhpxwClaqn+956qdHsVWfSnaj3weiwEgz0XJ+wSien90T8rAXOLQnM\n0Xqe1tqREClELsd6PALB3y2rNXWVsLDWC6rzRHt03z8Fim92MPP+ahEnAKpe1944\n26pIOnI+gvE56E5RJ/B083Br/V1j9lSOKJwvhB3K10YBDa9lbUY1OagT1ehElDnL\n8MbCHnJFFuiFuh5iIPgqswOBNn/5V5jEqv4RZug8gEIdBK6DB8+FpczpQGty5ia1\nTOBD6O6Vx6yFgti+xBD8Kl/i5B0bI2dLdNpwvsDT+8okUlJiP8Mf2lMxSRAHbNc=\n=RbH3\n-----END PGP SIGNATURE-----\n", "payload": "tree 2ac1d10148b74162a300658463f34f6fa98890db\nparent 41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb\nparent f00179521d10357d099b419a73a22f50295220f1\nauthor Michael Goulet <michael@errs.io> 1656020349 -0700\ncommitter GitHub <noreply@github.com> 1656020349 -0700\n\nRollup merge of #98305 - klensy:no-err-alloc, r=compiler-errors\n\nprohibit_generics: don't alloc error string if no error emitted\n\nNoticed unreaded allocs in DHAT.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ed2feca617de0d99f23f96859b372be2e2baab3", "html_url": "https://github.com/rust-lang/rust/commit/0ed2feca617de0d99f23f96859b372be2e2baab3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ed2feca617de0d99f23f96859b372be2e2baab3/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb", "html_url": "https://github.com/rust-lang/rust/commit/41cb5e9439d0e14d1eaa5bee29f7d7faa0e116fb"}, {"sha": "f00179521d10357d099b419a73a22f50295220f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f00179521d10357d099b419a73a22f50295220f1", "html_url": "https://github.com/rust-lang/rust/commit/f00179521d10357d099b419a73a22f50295220f1"}], "stats": {"total": 65, "additions": 33, "deletions": 32}, "files": [{"sha": "eec3b24aec260b18caea3ab49848b0808bf42e60", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 33, "deletions": 32, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/0ed2feca617de0d99f23f96859b372be2e2baab3/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ed2feca617de0d99f23f96859b372be2e2baab3/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=0ed2feca617de0d99f23f96859b372be2e2baab3", "patch": "@@ -2111,14 +2111,24 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         extend: impl Fn(&mut DiagnosticBuilder<'tcx, ErrorGuaranteed>),\n     ) -> bool {\n         let args = segments.clone().flat_map(|segment| segment.args().args);\n-        let types_and_spans: Vec<_> = segments\n-            .clone()\n-            .flat_map(|segment| {\n-                segment.res.and_then(|res| {\n-                    if segment.args().args.is_empty() {\n-                        None\n-                    } else {\n-                        Some((\n+\n+        let (lt, ty, ct, inf) =\n+            args.clone().fold((false, false, false, false), |(lt, ty, ct, inf), arg| match arg {\n+                hir::GenericArg::Lifetime(_) => (true, ty, ct, inf),\n+                hir::GenericArg::Type(_) => (lt, true, ct, inf),\n+                hir::GenericArg::Const(_) => (lt, ty, true, inf),\n+                hir::GenericArg::Infer(_) => (lt, ty, ct, true),\n+            });\n+        let mut emitted = false;\n+        if lt || ty || ct || inf {\n+            let types_and_spans: Vec<_> = segments\n+                .clone()\n+                .flat_map(|segment| {\n+                    segment.res.and_then(|res| {\n+                        if segment.args().args.is_empty() {\n+                            None\n+                        } else {\n+                            Some((\n                             match res {\n                                 Res::PrimTy(ty) => format!(\"{} `{}`\", res.descr(), ty.name()),\n                                 Res::Def(_, def_id)\n@@ -2130,32 +2140,23 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             },\n                             segment.ident.span,\n                         ))\n-                    }\n+                        }\n+                    })\n                 })\n-            })\n-            .collect();\n-        let this_type = match &types_and_spans[..] {\n-            [.., _, (last, _)] => format!(\n-                \"{} and {last}\",\n-                types_and_spans[..types_and_spans.len() - 1]\n-                    .iter()\n-                    .map(|(x, _)| x.as_str())\n-                    .intersperse(&\", \")\n-                    .collect::<String>()\n-            ),\n-            [(only, _)] => only.to_string(),\n-            [] => \"this type\".to_string(),\n-        };\n+                .collect();\n+            let this_type = match &types_and_spans[..] {\n+                [.., _, (last, _)] => format!(\n+                    \"{} and {last}\",\n+                    types_and_spans[..types_and_spans.len() - 1]\n+                        .iter()\n+                        .map(|(x, _)| x.as_str())\n+                        .intersperse(&\", \")\n+                        .collect::<String>()\n+                ),\n+                [(only, _)] => only.to_string(),\n+                [] => \"this type\".to_string(),\n+            };\n \n-        let (lt, ty, ct, inf) =\n-            args.clone().fold((false, false, false, false), |(lt, ty, ct, inf), arg| match arg {\n-                hir::GenericArg::Lifetime(_) => (true, ty, ct, inf),\n-                hir::GenericArg::Type(_) => (lt, true, ct, inf),\n-                hir::GenericArg::Const(_) => (lt, ty, true, inf),\n-                hir::GenericArg::Infer(_) => (lt, ty, ct, true),\n-            });\n-        let mut emitted = false;\n-        if lt || ty || ct || inf {\n             let arg_spans: Vec<Span> = args.map(|arg| arg.span()).collect();\n \n             let mut kinds = Vec::with_capacity(4);"}]}