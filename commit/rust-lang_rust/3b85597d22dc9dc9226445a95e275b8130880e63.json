{"sha": "3b85597d22dc9dc9226445a95e275b8130880e63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiODU1OTdkMjJkYzlkYzkyMjY0NDVhOTVlMjc1YjgxMzA4ODBlNjM=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-17T08:05:57Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-18T20:36:06Z"}, "message": "Add a specialized version of `shallow_resolve()`.\n\nThe super-hot call site of `inlined_shallow_resolve()` basically does\n`r.inlined_shallow_resolve(ty) != ty`. This commit introduces a\nversion of that function specialized for that particular call pattern,\n`shallow_resolve_changed()`. Incredibly, this reduces the instruction\ncount for `keccak` by 5%.\n\nThe commit also renames `inlined_shallow_resolve()` as\n`shallow_resolve()` and removes the `inline(always)` annotation, as it's\nno longer nearly so hot.", "tree": {"sha": "bf90bdcf1fa96838e44f84dcfd2b818111263bdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf90bdcf1fa96838e44f84dcfd2b818111263bdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b85597d22dc9dc9226445a95e275b8130880e63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b85597d22dc9dc9226445a95e275b8130880e63", "html_url": "https://github.com/rust-lang/rust/commit/3b85597d22dc9dc9226445a95e275b8130880e63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b85597d22dc9dc9226445a95e275b8130880e63/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82e5c6ee6597e7d8926b4f2fea89d02d77f978d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/82e5c6ee6597e7d8926b4f2fea89d02d77f978d4", "html_url": "https://github.com/rust-lang/rust/commit/82e5c6ee6597e7d8926b4f2fea89d02d77f978d4"}], "stats": {"total": 48, "additions": 39, "deletions": 9}, "files": [{"sha": "46a364cfe99a475baebe7f71b30eb62f4cac934c", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3b85597d22dc9dc9226445a95e275b8130880e63/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b85597d22dc9dc9226445a95e275b8130880e63/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=3b85597d22dc9dc9226445a95e275b8130880e63", "patch": "@@ -1558,11 +1558,7 @@ impl<'a, 'tcx> ShallowResolver<'a, 'tcx> {\n         ShallowResolver { infcx }\n     }\n \n-    // We have this force-inlined variant of `shallow_resolve` for the one\n-    // callsite that is extremely hot. All other callsites use the normal\n-    // variant.\n-    #[inline(always)]\n-    pub fn inlined_shallow_resolve(&mut self, typ: Ty<'tcx>) -> Ty<'tcx> {\n+    pub fn shallow_resolve(&mut self, typ: Ty<'tcx>) -> Ty<'tcx> {\n         match typ.sty {\n             ty::Infer(ty::TyVar(v)) => {\n                 // Not entirely obvious: if `typ` is a type variable,\n@@ -1597,6 +1593,42 @@ impl<'a, 'tcx> ShallowResolver<'a, 'tcx> {\n             _ => typ,\n         }\n     }\n+\n+    // `resolver.shallow_resolve_changed(ty)` is equivalent to\n+    // `resolver.shallow_resolve(ty) != ty`, but more efficient. It's always\n+    // inlined, despite being large, because it has a single call site that is\n+    // extremely hot.\n+    #[inline(always)]\n+    pub fn shallow_resolve_changed(&mut self, typ: Ty<'tcx>) -> bool {\n+        match typ.sty {\n+            ty::Infer(ty::TyVar(v)) => {\n+                use self::type_variable::TypeVariableValue;\n+\n+                // See the comment in `shallow_resolve()`.\n+                match self.infcx.type_variables.borrow_mut().probe(v) {\n+                    TypeVariableValue::Known { value: t } => self.fold_ty(t) != typ,\n+                    TypeVariableValue::Unknown { .. } => false,\n+                }\n+            }\n+\n+            ty::Infer(ty::IntVar(v)) => {\n+                match self.infcx.int_unification_table.borrow_mut().probe_value(v) {\n+                    Some(v) => v.to_type(self.infcx.tcx) != typ,\n+                    None => false,\n+                }\n+            }\n+\n+            ty::Infer(ty::FloatVar(v)) => {\n+                match self.infcx.float_unification_table.borrow_mut().probe_value(v) {\n+                    Some(v) => v.to_type(self.infcx.tcx) != typ,\n+                    None => false,\n+                }\n+            }\n+\n+            _ => false,\n+        }\n+    }\n+\n }\n \n impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {\n@@ -1605,7 +1637,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {\n     }\n \n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        self.inlined_shallow_resolve(ty)\n+        self.shallow_resolve(ty)\n     }\n \n     fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {"}, {"sha": "805727b6ce0d72c0711065f284f07d2bf9af9d30", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b85597d22dc9dc9226445a95e275b8130880e63/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b85597d22dc9dc9226445a95e275b8130880e63/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=3b85597d22dc9dc9226445a95e275b8130880e63", "patch": "@@ -264,9 +264,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n             // This `for` loop was once a call to `all()`, but this lower-level\n             // form was a perf win. See #64545 for details.\n             for &ty in &pending_obligation.stalled_on {\n-                // Use the force-inlined variant of shallow_resolve() because this code is hot.\n-                let resolved = ShallowResolver::new(self.selcx.infcx()).inlined_shallow_resolve(ty);\n-                if resolved != ty {\n+                if ShallowResolver::new(self.selcx.infcx()).shallow_resolve_changed(ty) {\n                     changed = true;\n                     break;\n                 }"}]}