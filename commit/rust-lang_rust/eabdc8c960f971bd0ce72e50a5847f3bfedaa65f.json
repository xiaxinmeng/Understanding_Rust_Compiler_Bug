{"sha": "eabdc8c960f971bd0ce72e50a5847f3bfedaa65f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhYmRjOGM5NjBmOTcxYmQwY2U3MmU1MGE1ODQ3ZjNiZmVkYWE2NWY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-11-08T01:36:17Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-11-08T02:37:56Z"}, "message": "std: Make atomic types non-copyable. Closes #8380", "tree": {"sha": "5edcca091bef7ff0c24a075508a321ae4048e924", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5edcca091bef7ff0c24a075508a321ae4048e924"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eabdc8c960f971bd0ce72e50a5847f3bfedaa65f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eabdc8c960f971bd0ce72e50a5847f3bfedaa65f", "html_url": "https://github.com/rust-lang/rust/commit/eabdc8c960f971bd0ce72e50a5847f3bfedaa65f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eabdc8c960f971bd0ce72e50a5847f3bfedaa65f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03f30515f4c8ca91dc7ceba3628f6eb1b3259ac5", "url": "https://api.github.com/repos/rust-lang/rust/commits/03f30515f4c8ca91dc7ceba3628f6eb1b3259ac5", "html_url": "https://github.com/rust-lang/rust/commit/03f30515f4c8ca91dc7ceba3628f6eb1b3259ac5"}], "stats": {"total": 65, "additions": 51, "deletions": 14}, "files": [{"sha": "9aaccb3ebbac4adc35f5801b5d4bd191e7c94b82", "filename": "src/libstd/unstable/atomics.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/eabdc8c960f971bd0ce72e50a5847f3bfedaa65f/src%2Flibstd%2Funstable%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eabdc8c960f971bd0ce72e50a5847f3bfedaa65f/src%2Flibstd%2Funstable%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fatomics.rs?ref=eabdc8c960f971bd0ce72e50a5847f3bfedaa65f", "patch": "@@ -23,40 +23,46 @@ use cast;\n use option::{Option,Some,None};\n use libc::c_void;\n use ops::Drop;\n+use util::NonCopyable;\n \n /**\n  * A simple atomic flag, that can be set and cleared. The most basic atomic type.\n  */\n pub struct AtomicFlag {\n-    priv v: int\n+    priv v: int,\n+    priv nocopy: NonCopyable\n }\n \n /**\n  * An atomic boolean type.\n  */\n pub struct AtomicBool {\n-    priv v: uint\n+    priv v: uint,\n+    priv nocopy: NonCopyable\n }\n \n /**\n  * A signed atomic integer type, supporting basic atomic arithmetic operations\n  */\n pub struct AtomicInt {\n-    priv v: int\n+    priv v: int,\n+    priv nocopy: NonCopyable\n }\n \n /**\n  * An unsigned atomic integer type, supporting basic atomic arithmetic operations\n  */\n pub struct AtomicUint {\n-    priv v: uint\n+    priv v: uint,\n+    priv nocopy: NonCopyable\n }\n \n /**\n  * An unsafe atomic pointer. Only supports basic atomic operations\n  */\n pub struct AtomicPtr<T> {\n-    priv p: *mut T\n+    priv p: *mut T,\n+    priv nocopy: NonCopyable\n }\n \n /**\n@@ -75,15 +81,15 @@ pub enum Ordering {\n     SeqCst\n }\n \n-pub static INIT_ATOMIC_FLAG : AtomicFlag = AtomicFlag { v: 0 };\n-pub static INIT_ATOMIC_BOOL : AtomicBool = AtomicBool { v: 0 };\n-pub static INIT_ATOMIC_INT  : AtomicInt  = AtomicInt  { v: 0 };\n-pub static INIT_ATOMIC_UINT : AtomicUint = AtomicUint { v: 0 };\n+pub static INIT_ATOMIC_FLAG : AtomicFlag = AtomicFlag { v: 0, nocopy: NonCopyable };\n+pub static INIT_ATOMIC_BOOL : AtomicBool = AtomicBool { v: 0, nocopy: NonCopyable };\n+pub static INIT_ATOMIC_INT  : AtomicInt  = AtomicInt  { v: 0, nocopy: NonCopyable };\n+pub static INIT_ATOMIC_UINT : AtomicUint = AtomicUint { v: 0, nocopy: NonCopyable };\n \n impl AtomicFlag {\n \n     pub fn new() -> AtomicFlag {\n-        AtomicFlag { v: 0 }\n+        AtomicFlag { v: 0, nocopy: NonCopyable }\n     }\n \n     /**\n@@ -106,7 +112,7 @@ impl AtomicFlag {\n \n impl AtomicBool {\n     pub fn new(v: bool) -> AtomicBool {\n-        AtomicBool { v: if v { 1 } else { 0 } }\n+        AtomicBool { v: if v { 1 } else { 0 }, nocopy: NonCopyable }\n     }\n \n     #[inline]\n@@ -171,7 +177,7 @@ impl AtomicBool {\n \n impl AtomicInt {\n     pub fn new(v: int) -> AtomicInt {\n-        AtomicInt { v:v }\n+        AtomicInt { v:v, nocopy: NonCopyable }\n     }\n \n     #[inline]\n@@ -209,7 +215,7 @@ impl AtomicInt {\n \n impl AtomicUint {\n     pub fn new(v: uint) -> AtomicUint {\n-        AtomicUint { v:v }\n+        AtomicUint { v:v, nocopy: NonCopyable }\n     }\n \n     #[inline]\n@@ -247,7 +253,7 @@ impl AtomicUint {\n \n impl<T> AtomicPtr<T> {\n     pub fn new(p: *mut T) -> AtomicPtr<T> {\n-        AtomicPtr { p:p }\n+        AtomicPtr { p:p, nocopy: NonCopyable }\n     }\n \n     #[inline]"}, {"sha": "a46dec7830a29566f8941f29079348d7df25e152", "filename": "src/test/compile-fail/std-uncopyable-atomics.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/eabdc8c960f971bd0ce72e50a5847f3bfedaa65f/src%2Ftest%2Fcompile-fail%2Fstd-uncopyable-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eabdc8c960f971bd0ce72e50a5847f3bfedaa65f/src%2Ftest%2Fcompile-fail%2Fstd-uncopyable-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstd-uncopyable-atomics.rs?ref=eabdc8c960f971bd0ce72e50a5847f3bfedaa65f", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue #8380\n+\n+#[feature(globs)];\n+\n+use std::unstable::atomics::*;\n+use std::ptr;\n+\n+fn main() {\n+    let x = INIT_ATOMIC_FLAG;\n+    let x = *&x; //~ ERROR: cannot move out of dereference\n+    let x = INIT_ATOMIC_BOOL;\n+    let x = *&x; //~ ERROR: cannot move out of dereference\n+    let x = INIT_ATOMIC_INT;\n+    let x = *&x; //~ ERROR: cannot move out of dereference\n+    let x = INIT_ATOMIC_UINT;\n+    let x = *&x; //~ ERROR: cannot move out of dereference\n+    let x: AtomicPtr<uint> = AtomicPtr::new(ptr::mut_null());\n+    let x = *&x; //~ ERROR: cannot move out of dereference\n+    let x: AtomicOption<uint> = AtomicOption::empty();\n+    let x = *&x; //~ ERROR: cannot move out of dereference\n+}"}]}