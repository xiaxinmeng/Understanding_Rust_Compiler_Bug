{"sha": "feac9f1c7b17903ef14ff46bc24c2baa45f3b15f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlYWM5ZjFjN2IxNzkwM2VmMTRmZjQ2YmMyNGMyYmFhNDVmM2IxNWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-12T08:54:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-12T08:54:40Z"}, "message": "Auto merge of #24818 - tbelaire:double-import, r=nrc\n\nThis isn't quite right, but it's interesting.", "tree": {"sha": "62cb271674ec185c4811344f8446fff893c6279e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62cb271674ec185c4811344f8446fff893c6279e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/feac9f1c7b17903ef14ff46bc24c2baa45f3b15f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/feac9f1c7b17903ef14ff46bc24c2baa45f3b15f", "html_url": "https://github.com/rust-lang/rust/commit/feac9f1c7b17903ef14ff46bc24c2baa45f3b15f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/feac9f1c7b17903ef14ff46bc24c2baa45f3b15f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2e1a1b50eee3dd98bbd760d71ae7b5fce360165", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2e1a1b50eee3dd98bbd760d71ae7b5fce360165", "html_url": "https://github.com/rust-lang/rust/commit/f2e1a1b50eee3dd98bbd760d71ae7b5fce360165"}, {"sha": "db9d01842450fe07f77ca97d9a68d105366f407e", "url": "https://api.github.com/repos/rust-lang/rust/commits/db9d01842450fe07f77ca97d9a68d105366f407e", "html_url": "https://github.com/rust-lang/rust/commit/db9d01842450fe07f77ca97d9a68d105366f407e"}], "stats": {"total": 58, "additions": 46, "deletions": 12}, "files": [{"sha": "9870b41e7fa631783312f98fbcec69e31b5d5b4b", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/feac9f1c7b17903ef14ff46bc24c2baa45f3b15f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feac9f1c7b17903ef14ff46bc24c2baa45f3b15f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=feac9f1c7b17903ef14ff46bc24c2baa45f3b15f", "patch": "@@ -618,7 +618,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                                namespace_name,\n                                name_bindings.def_for_namespace(namespace));\n                         self.check_for_conflicting_import(\n-                            &import_resolution.target_for_namespace(namespace),\n+                            &import_resolution,\n                             directive.span,\n                             target,\n                             namespace);\n@@ -755,7 +755,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                             // Continue.\n                         }\n                         Some(ref value_target) => {\n-                            self.check_for_conflicting_import(&dest_import_resolution.value_target,\n+                            self.check_for_conflicting_import(&dest_import_resolution,\n                                                               import_directive.span,\n                                                               *ident,\n                                                               ValueNS);\n@@ -767,7 +767,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                             // Continue.\n                         }\n                         Some(ref type_target) => {\n-                            self.check_for_conflicting_import(&dest_import_resolution.type_target,\n+                            self.check_for_conflicting_import(&dest_import_resolution,\n                                                               import_directive.span,\n                                                               *ident,\n                                                               TypeNS);\n@@ -887,24 +887,31 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n \n     /// Checks that imported names and items don't have the same name.\n     fn check_for_conflicting_import(&mut self,\n-                                    target: &Option<Target>,\n+                                    import_resolution: &ImportResolution,\n                                     import_span: Span,\n                                     name: Name,\n                                     namespace: Namespace) {\n+        let target = import_resolution.target_for_namespace(namespace);\n         debug!(\"check_for_conflicting_import: {}; target exists: {}\",\n                &token::get_name(name),\n                target.is_some());\n \n-        match *target {\n+        match target {\n             Some(ref target) if target.shadowable != Shadowable::Always => {\n-                let msg = format!(\"a {} named `{}` has already been imported \\\n-                                   in this module\",\n-                                  match namespace {\n-                                    TypeNS => \"type\",\n-                                    ValueNS => \"value\",\n-                                  },\n+                let ns_word = match namespace {\n+                    TypeNS => \"type\",\n+                    ValueNS => \"value\",\n+                };\n+                span_err!(self.resolver.session, import_span, E0252,\n+                          \"a {} named `{}` has already been imported \\\n+                           in this module\", ns_word,\n                                   &token::get_name(name));\n-                span_err!(self.resolver.session, import_span, E0252, \"{}\", &msg[..]);\n+                let use_id = import_resolution.id(namespace);\n+                let item = self.resolver.ast_map.expect_item(use_id);\n+                // item is syntax::ast::Item;\n+                span_note!(self.resolver.session, item.span,\n+                            \"previous import of `{}` here\",\n+                            token::get_name(name));\n             }\n             Some(_) | None => {}\n         }"}, {"sha": "cbf13c0a559092fee8af5cbff0ec903c71f65173", "filename": "src/test/compile-fail/double-import.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/feac9f1c7b17903ef14ff46bc24c2baa45f3b15f/src%2Ftest%2Fcompile-fail%2Fdouble-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feac9f1c7b17903ef14ff46bc24c2baa45f3b15f/src%2Ftest%2Fcompile-fail%2Fdouble-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdouble-import.rs?ref=feac9f1c7b17903ef14ff46bc24c2baa45f3b15f", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![feature(no_std)]\n+#![no_std]\n+\n+// This tests that conflicting imports shows both `use` lines\n+// when reporting the error.\n+\n+mod sub1 {\n+    fn foo() {} // implementation 1\n+}\n+\n+mod sub2 {\n+    fn foo() {} // implementation 2\n+}\n+\n+use sub1::foo; //~ NOTE previous import of `foo` here\n+use sub2::foo; //~ ERROR a value named `foo` has already been imported in this module [E0252]\n+\n+fn main() {}"}]}