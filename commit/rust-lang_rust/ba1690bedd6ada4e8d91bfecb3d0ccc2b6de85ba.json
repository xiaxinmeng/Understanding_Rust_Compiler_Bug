{"sha": "ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba", "node_id": "C_kwDOAAsO6NoAKGJhMTY5MGJlZGQ2YWRhNGU4ZDkxYmZlY2IzZDBjY2MyYjZkZTg1YmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-01T01:27:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-01T01:27:32Z"}, "message": "Auto merge of #111567 - Urgau:uplift_cast_ref_to_mut, r=b-naber\n\nUplift `clippy::cast_ref_to_mut` lint\n\nThis PR aims at uplifting the `clippy::cast_ref_to_mut` lint into rustc.\n\n## `cast_ref_to_mut`\n\n(deny-by-default)\n\nThe `cast_ref_to_mut` lint checks for casts of `&T` to `&mut T` without using interior mutability.\n\n### Example\n\n```rust,compile_fail\nfn x(r: &i32) {\n    unsafe {\n        *(r as *const i32 as *mut i32) += 1;\n    }\n}\n```\n\n### Explanation\n\nCasting `&T` to `&mut T` without interior mutability is undefined behavior, as it's a violation of Rust reference aliasing requirements.\n\n-----\n\nMostly followed the instructions for uplifting a clippy lint described here: https://github.com/rust-lang/rust/pull/99696#pullrequestreview-1134072751\n\n`@rustbot` label: +I-lang-nominated\nr? compiler\n\n-----\n\nFor Clippy:\n\nchangelog: Moves: Uplifted `clippy::cast_ref_to_mut` into rustc", "tree": {"sha": "6e669dc7e3fd97892062894efef4a9b56e8edad1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e669dc7e3fd97892062894efef4a9b56e8edad1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba", "html_url": "https://github.com/rust-lang/rust/commit/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9af3865deca9c601ef32ef4ed29f7cae5fed50a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9af3865deca9c601ef32ef4ed29f7cae5fed50a9", "html_url": "https://github.com/rust-lang/rust/commit/9af3865deca9c601ef32ef4ed29f7cae5fed50a9"}, {"sha": "32d4e1c3c71fa30c83405eee7ff8b9bba6a903f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/32d4e1c3c71fa30c83405eee7ff8b9bba6a903f0", "html_url": "https://github.com/rust-lang/rust/commit/32d4e1c3c71fa30c83405eee7ff8b9bba6a903f0"}], "stats": {"total": 446, "additions": 276, "deletions": 170}, "files": [{"sha": "98fe3821947d5a6b55cab266932ab553e49679eb", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba", "patch": "@@ -155,6 +155,8 @@ lint_builtin_unused_doc_comment = unused doc comment\n lint_builtin_while_true = denote infinite loops with `loop {\"{\"} ... {\"}\"}`\n     .suggestion = use `loop`\n \n+lint_cast_ref_to_mut = casting `&T` to `&mut T` is undefined behavior, even if the reference is unused, consider instead using an `UnsafeCell`\n+\n lint_check_name_deprecated = lint name `{$lint_name}` is deprecated and does not have an effect anymore. Use: {$new_name}\n \n lint_check_name_unknown = unknown lint: `{$lint_name}`"}, {"sha": "84308d48c10bc28969df2db3fec668f418649eab", "filename": "compiler/rustc_lint/src/cast_ref_to_mut.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/compiler%2Frustc_lint%2Fsrc%2Fcast_ref_to_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/compiler%2Frustc_lint%2Fsrc%2Fcast_ref_to_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcast_ref_to_mut.rs?ref=ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba", "patch": "@@ -0,0 +1,72 @@\n+use rustc_ast::Mutability;\n+use rustc_hir::{Expr, ExprKind, MutTy, TyKind, UnOp};\n+use rustc_middle::ty;\n+use rustc_span::sym;\n+\n+use crate::{lints::CastRefToMutDiag, LateContext, LateLintPass, LintContext};\n+\n+declare_lint! {\n+    /// The `cast_ref_to_mut` lint checks for casts of `&T` to `&mut T`\n+    /// without using interior mutability.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// fn x(r: &i32) {\n+    ///     unsafe {\n+    ///         *(r as *const i32 as *mut i32) += 1;\n+    ///     }\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Casting `&T` to `&mut T` without using interior mutability is undefined behavior,\n+    /// as it's a violation of Rust reference aliasing requirements.\n+    ///\n+    /// `UnsafeCell` is the only way to obtain aliasable data that is considered\n+    /// mutable.\n+    CAST_REF_TO_MUT,\n+    Deny,\n+    \"casts of `&T` to `&mut T` without interior mutability\"\n+}\n+\n+declare_lint_pass!(CastRefToMut => [CAST_REF_TO_MUT]);\n+\n+impl<'tcx> LateLintPass<'tcx> for CastRefToMut {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n+        let ExprKind::Unary(UnOp::Deref, e) = &expr.kind else { return; };\n+\n+        let e = e.peel_blocks();\n+        let e = if let ExprKind::Cast(e, t) = e.kind\n+            && let TyKind::Ptr(MutTy { mutbl: Mutability::Mut, .. }) = t.kind {\n+            e\n+        } else if let ExprKind::MethodCall(_, expr, [], _) = e.kind\n+            && let Some(def_id) = cx.typeck_results().type_dependent_def_id(e.hir_id)\n+            && cx.tcx.is_diagnostic_item(sym::ptr_cast_mut, def_id) {\n+            expr\n+        } else {\n+            return;\n+        };\n+\n+        let e = e.peel_blocks();\n+        let e = if let ExprKind::Cast(e, t) = e.kind\n+            && let TyKind::Ptr(MutTy { mutbl: Mutability::Not, .. }) = t.kind {\n+            e\n+        } else if let ExprKind::Call(path, [arg]) = e.kind\n+            && let ExprKind::Path(ref qpath) = path.kind\n+            && let Some(def_id) = cx.qpath_res(qpath, path.hir_id).opt_def_id()\n+            && cx.tcx.is_diagnostic_item(sym::ptr_from_ref, def_id) {\n+            arg\n+        } else {\n+            return;\n+        };\n+\n+        let e = e.peel_blocks();\n+        if let ty::Ref(..) = cx.typeck_results().node_type(e.hir_id).kind() {\n+            cx.emit_spanned_lint(CAST_REF_TO_MUT, expr.span, CastRefToMutDiag);\n+        }\n+    }\n+}"}, {"sha": "5e3f057d4283428c202a08beab9e3f4f9f2fe959", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba", "patch": "@@ -50,6 +50,7 @@ extern crate tracing;\n \n mod array_into_iter;\n pub mod builtin;\n+mod cast_ref_to_mut;\n mod context;\n mod deref_into_dyn_supertrait;\n mod drop_forget_useless;\n@@ -97,6 +98,7 @@ use rustc_span::Span;\n \n use array_into_iter::ArrayIntoIter;\n use builtin::*;\n+use cast_ref_to_mut::*;\n use deref_into_dyn_supertrait::*;\n use drop_forget_useless::*;\n use enum_intrinsics_non_enums::EnumIntrinsicsNonEnums;\n@@ -214,6 +216,7 @@ late_lint_methods!(\n             BoxPointers: BoxPointers,\n             PathStatements: PathStatements,\n             LetUnderscore: LetUnderscore,\n+            CastRefToMut: CastRefToMut,\n             // Depends on referenced function signatures in expressions\n             UnusedResults: UnusedResults,\n             NonUpperCaseGlobals: NonUpperCaseGlobals,"}, {"sha": "fd15f7952023a2fb2b201f65eedb11364e156cf7", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba", "patch": "@@ -718,6 +718,11 @@ pub enum InvalidFromUtf8Diag {\n     },\n }\n \n+// cast_ref_to_mut.rs\n+#[derive(LintDiagnostic)]\n+#[diag(lint_cast_ref_to_mut)]\n+pub struct CastRefToMutDiag;\n+\n // hidden_unicode_codepoints.rs\n #[derive(LintDiagnostic)]\n #[diag(lint_hidden_unicode_codepoints)]"}, {"sha": "2f002e424277edafa944b2daf772adc3ae6f4aa6", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba", "patch": "@@ -1146,6 +1146,8 @@ symbols! {\n         profiler_builtins,\n         profiler_runtime,\n         ptr,\n+        ptr_cast_mut,\n+        ptr_from_ref,\n         ptr_guaranteed_cmp,\n         ptr_mask,\n         ptr_null,"}, {"sha": "926189a17b2046ee44961188f7f3847465b5ed0c", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba", "patch": "@@ -104,6 +104,7 @@ impl<T: ?Sized> *const T {\n     /// refactored.\n     #[stable(feature = \"ptr_const_cast\", since = \"1.65.0\")]\n     #[rustc_const_stable(feature = \"ptr_const_cast\", since = \"1.65.0\")]\n+    #[rustc_diagnostic_item = \"ptr_cast_mut\"]\n     #[inline(always)]\n     pub const fn cast_mut(self) -> *mut T {\n         self as _"}, {"sha": "acc9ca29d41a10feac582bfdb6e1ab76ac7c6e1f", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba", "patch": "@@ -698,6 +698,7 @@ where\n #[inline(always)]\n #[must_use]\n #[unstable(feature = \"ptr_from_ref\", issue = \"106116\")]\n+#[rustc_diagnostic_item = \"ptr_from_ref\"]\n pub const fn from_ref<T: ?Sized>(r: &T) -> *const T {\n     r\n }"}, {"sha": "15f2f81f4079e5b2e88b66809e797f845249c3d1", "filename": "src/tools/clippy/clippy_lints/src/casts/cast_ref_to_mut.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_ref_to_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_ref_to_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_ref_to_mut.rs?ref=9af3865deca9c601ef32ef4ed29f7cae5fed50a9", "patch": "@@ -1,26 +0,0 @@\n-use clippy_utils::diagnostics::span_lint;\n-use if_chain::if_chain;\n-use rustc_hir::{Expr, ExprKind, MutTy, Mutability, TyKind, UnOp};\n-use rustc_lint::LateContext;\n-use rustc_middle::ty;\n-\n-use super::CAST_REF_TO_MUT;\n-\n-pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n-    if_chain! {\n-        if let ExprKind::Unary(UnOp::Deref, e) = &expr.kind;\n-        if let ExprKind::Cast(e, t) = &e.kind;\n-        if let TyKind::Ptr(MutTy { mutbl: Mutability::Mut, .. }) = t.kind;\n-        if let ExprKind::Cast(e, t) = &e.kind;\n-        if let TyKind::Ptr(MutTy { mutbl: Mutability::Not, .. }) = t.kind;\n-        if let ty::Ref(..) = cx.typeck_results().node_type(e.hir_id).kind();\n-        then {\n-            span_lint(\n-                cx,\n-                CAST_REF_TO_MUT,\n-                expr.span,\n-                \"casting `&T` to `&mut T` may cause undefined behavior, consider instead using an `UnsafeCell`\",\n-            );\n-        }\n-    }\n-}"}, {"sha": "0c175372aab83c4c478a991ddd8a0f0f0195ea93", "filename": "src/tools/clippy/clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba", "patch": "@@ -9,7 +9,6 @@ mod cast_possible_truncation;\n mod cast_possible_wrap;\n mod cast_precision_loss;\n mod cast_ptr_alignment;\n-mod cast_ref_to_mut;\n mod cast_sign_loss;\n mod cast_slice_different_sizes;\n mod cast_slice_from_raw_parts;\n@@ -330,41 +329,6 @@ declare_clippy_lint! {\n     \"casting a function pointer to any integer type\"\n }\n \n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for casts of `&T` to `&mut T` anywhere in the code.\n-    ///\n-    /// ### Why is this bad?\n-    /// It\u2019s basically guaranteed to be undefined behavior.\n-    /// `UnsafeCell` is the only way to obtain aliasable data that is considered\n-    /// mutable.\n-    ///\n-    /// ### Example\n-    /// ```rust,ignore\n-    /// fn x(r: &i32) {\n-    ///     unsafe {\n-    ///         *(r as *const _ as *mut _) += 1;\n-    ///     }\n-    /// }\n-    /// ```\n-    ///\n-    /// Instead consider using interior mutability types.\n-    ///\n-    /// ```rust\n-    /// use std::cell::UnsafeCell;\n-    ///\n-    /// fn x(r: &UnsafeCell<i32>) {\n-    ///     unsafe {\n-    ///         *r.get() += 1;\n-    ///     }\n-    /// }\n-    /// ```\n-    #[clippy::version = \"1.33.0\"]\n-    pub CAST_REF_TO_MUT,\n-    correctness,\n-    \"a cast of reference to a mutable pointer\"\n-}\n-\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for expressions where a character literal is cast\n@@ -680,7 +644,6 @@ impl_lint_pass!(Casts => [\n     CAST_POSSIBLE_TRUNCATION,\n     CAST_POSSIBLE_WRAP,\n     CAST_LOSSLESS,\n-    CAST_REF_TO_MUT,\n     CAST_PTR_ALIGNMENT,\n     CAST_SLICE_DIFFERENT_SIZES,\n     UNNECESSARY_CAST,\n@@ -747,7 +710,6 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n             }\n         }\n \n-        cast_ref_to_mut::check(cx, expr);\n         cast_ptr_alignment::check(cx, expr);\n         char_lit_as_u8::check(cx, expr);\n         ptr_as_ptr::check(cx, expr, &self.msrv);"}, {"sha": "212e809d4c564fde2e8488186375c5e067acf6ec", "filename": "src/tools/clippy/clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba", "patch": "@@ -81,7 +81,6 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::casts::CAST_POSSIBLE_WRAP_INFO,\n     crate::casts::CAST_PRECISION_LOSS_INFO,\n     crate::casts::CAST_PTR_ALIGNMENT_INFO,\n-    crate::casts::CAST_REF_TO_MUT_INFO,\n     crate::casts::CAST_SIGN_LOSS_INFO,\n     crate::casts::CAST_SLICE_DIFFERENT_SIZES_INFO,\n     crate::casts::CAST_SLICE_FROM_RAW_PARTS_INFO,"}, {"sha": "4cb41830023396982b68f8a40c8c7a9bec0736c6", "filename": "src/tools/clippy/clippy_lints/src/renamed_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs?ref=ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba", "patch": "@@ -31,6 +31,7 @@ pub static RENAMED_LINTS: &[(&str, &str)] = &[\n     (\"clippy::stutter\", \"clippy::module_name_repetitions\"),\n     (\"clippy::to_string_in_display\", \"clippy::recursive_format_impl\"),\n     (\"clippy::zero_width_space\", \"clippy::invisible_characters\"),\n+    (\"clippy::cast_ref_to_mut\", \"cast_ref_to_mut\"),\n     (\"clippy::clone_double_ref\", \"suspicious_double_ref_op\"),\n     (\"clippy::drop_bounds\", \"drop_bounds\"),\n     (\"clippy::drop_copy\", \"dropping_copy_types\"),"}, {"sha": "c48a734ba32c26874a19c58d8c6d959fe9e7f066", "filename": "src/tools/clippy/tests/ui/cast_ref_to_mut.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_ref_to_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_ref_to_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_ref_to_mut.rs?ref=9af3865deca9c601ef32ef4ed29f7cae5fed50a9", "patch": "@@ -1,31 +0,0 @@\n-#![warn(clippy::cast_ref_to_mut)]\n-#![allow(clippy::no_effect, clippy::borrow_as_ptr)]\n-\n-extern \"C\" {\n-    // N.B., mutability can be easily incorrect in FFI calls -- as\n-    // in C, the default is mutable pointers.\n-    fn ffi(c: *mut u8);\n-    fn int_ffi(c: *mut i32);\n-}\n-\n-fn main() {\n-    let s = String::from(\"Hello\");\n-    let a = &s;\n-    unsafe {\n-        let num = &3i32;\n-        let mut_num = &mut 3i32;\n-        // Should be warned against\n-        (*(a as *const _ as *mut String)).push_str(\" world\");\n-        *(a as *const _ as *mut _) = String::from(\"Replaced\");\n-        *(a as *const _ as *mut String) += \" world\";\n-        // Shouldn't be warned against\n-        println!(\"{}\", *(num as *const _ as *const i16));\n-        println!(\"{}\", *(mut_num as *mut _ as *mut i16));\n-        ffi(a.as_ptr() as *mut _);\n-        int_ffi(num as *const _ as *mut _);\n-        int_ffi(&3 as *const _ as *mut _);\n-        let mut value = 3;\n-        let value: *const i32 = &mut value;\n-        *(value as *const i16 as *mut i16) = 42;\n-    }\n-}"}, {"sha": "aacd99437d9fc3eadde5b8a60a5b0a11e9de8b30", "filename": "src/tools/clippy/tests/ui/cast_ref_to_mut.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_ref_to_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_ref_to_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_ref_to_mut.stderr?ref=9af3865deca9c601ef32ef4ed29f7cae5fed50a9", "patch": "@@ -1,22 +0,0 @@\n-error: casting `&T` to `&mut T` may cause undefined behavior, consider instead using an `UnsafeCell`\n-  --> $DIR/cast_ref_to_mut.rs:18:9\n-   |\n-LL |         (*(a as *const _ as *mut String)).push_str(\" world\");\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::cast-ref-to-mut` implied by `-D warnings`\n-\n-error: casting `&T` to `&mut T` may cause undefined behavior, consider instead using an `UnsafeCell`\n-  --> $DIR/cast_ref_to_mut.rs:19:9\n-   |\n-LL |         *(a as *const _ as *mut _) = String::from(\"Replaced\");\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: casting `&T` to `&mut T` may cause undefined behavior, consider instead using an `UnsafeCell`\n-  --> $DIR/cast_ref_to_mut.rs:20:9\n-   |\n-LL |         *(a as *const _ as *mut String) += \" world\";\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "f7854b89ee4ea22962364caaa5835bf8fb97dad1", "filename": "src/tools/clippy/tests/ui/rename.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed?ref=ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba", "patch": "@@ -29,6 +29,7 @@\n #![allow(clippy::recursive_format_impl)]\n #![allow(clippy::invisible_characters)]\n #![allow(suspicious_double_ref_op)]\n+#![allow(cast_ref_to_mut)]\n #![allow(drop_bounds)]\n #![allow(dropping_copy_types)]\n #![allow(dropping_references)]\n@@ -76,6 +77,7 @@\n #![warn(clippy::module_name_repetitions)]\n #![warn(clippy::recursive_format_impl)]\n #![warn(clippy::invisible_characters)]\n+#![warn(cast_ref_to_mut)]\n #![warn(suspicious_double_ref_op)]\n #![warn(drop_bounds)]\n #![warn(dropping_copy_types)]"}, {"sha": "fa347d395ef5d624722de7bf4bdb0fc16abcb225", "filename": "src/tools/clippy/tests/ui/rename.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs?ref=ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba", "patch": "@@ -29,6 +29,7 @@\n #![allow(clippy::recursive_format_impl)]\n #![allow(clippy::invisible_characters)]\n #![allow(suspicious_double_ref_op)]\n+#![allow(cast_ref_to_mut)]\n #![allow(drop_bounds)]\n #![allow(dropping_copy_types)]\n #![allow(dropping_references)]\n@@ -76,6 +77,7 @@\n #![warn(clippy::stutter)]\n #![warn(clippy::to_string_in_display)]\n #![warn(clippy::zero_width_space)]\n+#![warn(clippy::cast_ref_to_mut)]\n #![warn(clippy::clone_double_ref)]\n #![warn(clippy::drop_bounds)]\n #![warn(clippy::drop_copy)]"}, {"sha": "9dffe51e5d7d3ca16bc14e69784fc2ef49a0f5b4", "filename": "src/tools/clippy/tests/ui/rename.stderr", "status": "modified", "additions": 56, "deletions": 50, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr?ref=ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba", "patch": "@@ -1,298 +1,304 @@\n error: lint `clippy::almost_complete_letter_range` has been renamed to `clippy::almost_complete_range`\n-  --> $DIR/rename.rs:50:9\n+  --> $DIR/rename.rs:51:9\n    |\n LL | #![warn(clippy::almost_complete_letter_range)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::almost_complete_range`\n    |\n    = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n error: lint `clippy::blacklisted_name` has been renamed to `clippy::disallowed_names`\n-  --> $DIR/rename.rs:51:9\n+  --> $DIR/rename.rs:52:9\n    |\n LL | #![warn(clippy::blacklisted_name)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_names`\n \n error: lint `clippy::block_in_if_condition_expr` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:52:9\n+  --> $DIR/rename.rs:53:9\n    |\n LL | #![warn(clippy::block_in_if_condition_expr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::block_in_if_condition_stmt` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:53:9\n+  --> $DIR/rename.rs:54:9\n    |\n LL | #![warn(clippy::block_in_if_condition_stmt)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::box_vec` has been renamed to `clippy::box_collection`\n-  --> $DIR/rename.rs:54:9\n+  --> $DIR/rename.rs:55:9\n    |\n LL | #![warn(clippy::box_vec)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::box_collection`\n \n error: lint `clippy::const_static_lifetime` has been renamed to `clippy::redundant_static_lifetimes`\n-  --> $DIR/rename.rs:55:9\n+  --> $DIR/rename.rs:56:9\n    |\n LL | #![warn(clippy::const_static_lifetime)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::redundant_static_lifetimes`\n \n error: lint `clippy::cyclomatic_complexity` has been renamed to `clippy::cognitive_complexity`\n-  --> $DIR/rename.rs:56:9\n+  --> $DIR/rename.rs:57:9\n    |\n LL | #![warn(clippy::cyclomatic_complexity)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::cognitive_complexity`\n \n error: lint `clippy::derive_hash_xor_eq` has been renamed to `clippy::derived_hash_with_manual_eq`\n-  --> $DIR/rename.rs:57:9\n+  --> $DIR/rename.rs:58:9\n    |\n LL | #![warn(clippy::derive_hash_xor_eq)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::derived_hash_with_manual_eq`\n \n error: lint `clippy::disallowed_method` has been renamed to `clippy::disallowed_methods`\n-  --> $DIR/rename.rs:58:9\n+  --> $DIR/rename.rs:59:9\n    |\n LL | #![warn(clippy::disallowed_method)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_methods`\n \n error: lint `clippy::disallowed_type` has been renamed to `clippy::disallowed_types`\n-  --> $DIR/rename.rs:59:9\n+  --> $DIR/rename.rs:60:9\n    |\n LL | #![warn(clippy::disallowed_type)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_types`\n \n error: lint `clippy::eval_order_dependence` has been renamed to `clippy::mixed_read_write_in_expression`\n-  --> $DIR/rename.rs:60:9\n+  --> $DIR/rename.rs:61:9\n    |\n LL | #![warn(clippy::eval_order_dependence)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::mixed_read_write_in_expression`\n \n error: lint `clippy::identity_conversion` has been renamed to `clippy::useless_conversion`\n-  --> $DIR/rename.rs:61:9\n+  --> $DIR/rename.rs:62:9\n    |\n LL | #![warn(clippy::identity_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::useless_conversion`\n \n error: lint `clippy::if_let_some_result` has been renamed to `clippy::match_result_ok`\n-  --> $DIR/rename.rs:62:9\n+  --> $DIR/rename.rs:63:9\n    |\n LL | #![warn(clippy::if_let_some_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::match_result_ok`\n \n error: lint `clippy::integer_arithmetic` has been renamed to `clippy::arithmetic_side_effects`\n-  --> $DIR/rename.rs:63:9\n+  --> $DIR/rename.rs:64:9\n    |\n LL | #![warn(clippy::integer_arithmetic)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::arithmetic_side_effects`\n \n error: lint `clippy::logic_bug` has been renamed to `clippy::overly_complex_bool_expr`\n-  --> $DIR/rename.rs:64:9\n+  --> $DIR/rename.rs:65:9\n    |\n LL | #![warn(clippy::logic_bug)]\n    |         ^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::overly_complex_bool_expr`\n \n error: lint `clippy::new_without_default_derive` has been renamed to `clippy::new_without_default`\n-  --> $DIR/rename.rs:65:9\n+  --> $DIR/rename.rs:66:9\n    |\n LL | #![warn(clippy::new_without_default_derive)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::new_without_default`\n \n error: lint `clippy::option_and_then_some` has been renamed to `clippy::bind_instead_of_map`\n-  --> $DIR/rename.rs:66:9\n+  --> $DIR/rename.rs:67:9\n    |\n LL | #![warn(clippy::option_and_then_some)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::bind_instead_of_map`\n \n error: lint `clippy::option_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:67:9\n+  --> $DIR/rename.rs:68:9\n    |\n LL | #![warn(clippy::option_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::option_map_unwrap_or` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:68:9\n+  --> $DIR/rename.rs:69:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:69:9\n+  --> $DIR/rename.rs:70:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:70:9\n+  --> $DIR/rename.rs:71:9\n    |\n LL | #![warn(clippy::option_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::ref_in_deref` has been renamed to `clippy::needless_borrow`\n-  --> $DIR/rename.rs:71:9\n+  --> $DIR/rename.rs:72:9\n    |\n LL | #![warn(clippy::ref_in_deref)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::needless_borrow`\n \n error: lint `clippy::result_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:72:9\n+  --> $DIR/rename.rs:73:9\n    |\n LL | #![warn(clippy::result_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::result_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:73:9\n+  --> $DIR/rename.rs:74:9\n    |\n LL | #![warn(clippy::result_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::result_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:74:9\n+  --> $DIR/rename.rs:75:9\n    |\n LL | #![warn(clippy::result_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::single_char_push_str` has been renamed to `clippy::single_char_add_str`\n-  --> $DIR/rename.rs:75:9\n+  --> $DIR/rename.rs:76:9\n    |\n LL | #![warn(clippy::single_char_push_str)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::single_char_add_str`\n \n error: lint `clippy::stutter` has been renamed to `clippy::module_name_repetitions`\n-  --> $DIR/rename.rs:76:9\n+  --> $DIR/rename.rs:77:9\n    |\n LL | #![warn(clippy::stutter)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::module_name_repetitions`\n \n error: lint `clippy::to_string_in_display` has been renamed to `clippy::recursive_format_impl`\n-  --> $DIR/rename.rs:77:9\n+  --> $DIR/rename.rs:78:9\n    |\n LL | #![warn(clippy::to_string_in_display)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::recursive_format_impl`\n \n error: lint `clippy::zero_width_space` has been renamed to `clippy::invisible_characters`\n-  --> $DIR/rename.rs:78:9\n+  --> $DIR/rename.rs:79:9\n    |\n LL | #![warn(clippy::zero_width_space)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::invisible_characters`\n \n+error: lint `clippy::cast_ref_to_mut` has been renamed to `cast_ref_to_mut`\n+  --> $DIR/rename.rs:80:9\n+   |\n+LL | #![warn(clippy::cast_ref_to_mut)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `cast_ref_to_mut`\n+\n error: lint `clippy::clone_double_ref` has been renamed to `suspicious_double_ref_op`\n-  --> $DIR/rename.rs:79:9\n+  --> $DIR/rename.rs:81:9\n    |\n LL | #![warn(clippy::clone_double_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `suspicious_double_ref_op`\n \n error: lint `clippy::drop_bounds` has been renamed to `drop_bounds`\n-  --> $DIR/rename.rs:80:9\n+  --> $DIR/rename.rs:82:9\n    |\n LL | #![warn(clippy::drop_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `drop_bounds`\n \n error: lint `clippy::drop_copy` has been renamed to `dropping_copy_types`\n-  --> $DIR/rename.rs:81:9\n+  --> $DIR/rename.rs:83:9\n    |\n LL | #![warn(clippy::drop_copy)]\n    |         ^^^^^^^^^^^^^^^^^ help: use the new name: `dropping_copy_types`\n \n error: lint `clippy::drop_ref` has been renamed to `dropping_references`\n-  --> $DIR/rename.rs:82:9\n+  --> $DIR/rename.rs:84:9\n    |\n LL | #![warn(clippy::drop_ref)]\n    |         ^^^^^^^^^^^^^^^^ help: use the new name: `dropping_references`\n \n error: lint `clippy::for_loop_over_option` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:83:9\n+  --> $DIR/rename.rs:85:9\n    |\n LL | #![warn(clippy::for_loop_over_option)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loop_over_result` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:84:9\n+  --> $DIR/rename.rs:86:9\n    |\n LL | #![warn(clippy::for_loop_over_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loops_over_fallibles` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:85:9\n+  --> $DIR/rename.rs:87:9\n    |\n LL | #![warn(clippy::for_loops_over_fallibles)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::forget_copy` has been renamed to `forgetting_copy_types`\n-  --> $DIR/rename.rs:86:9\n+  --> $DIR/rename.rs:88:9\n    |\n LL | #![warn(clippy::forget_copy)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `forgetting_copy_types`\n \n error: lint `clippy::forget_ref` has been renamed to `forgetting_references`\n-  --> $DIR/rename.rs:87:9\n+  --> $DIR/rename.rs:89:9\n    |\n LL | #![warn(clippy::forget_ref)]\n    |         ^^^^^^^^^^^^^^^^^^ help: use the new name: `forgetting_references`\n \n error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n-  --> $DIR/rename.rs:88:9\n+  --> $DIR/rename.rs:90:9\n    |\n LL | #![warn(clippy::into_iter_on_array)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `array_into_iter`\n \n error: lint `clippy::invalid_atomic_ordering` has been renamed to `invalid_atomic_ordering`\n-  --> $DIR/rename.rs:89:9\n+  --> $DIR/rename.rs:91:9\n    |\n LL | #![warn(clippy::invalid_atomic_ordering)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_atomic_ordering`\n \n error: lint `clippy::invalid_ref` has been renamed to `invalid_value`\n-  --> $DIR/rename.rs:90:9\n+  --> $DIR/rename.rs:92:9\n    |\n LL | #![warn(clippy::invalid_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_value`\n \n error: lint `clippy::invalid_utf8_in_unchecked` has been renamed to `invalid_from_utf8_unchecked`\n-  --> $DIR/rename.rs:91:9\n+  --> $DIR/rename.rs:93:9\n    |\n LL | #![warn(clippy::invalid_utf8_in_unchecked)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_from_utf8_unchecked`\n \n error: lint `clippy::let_underscore_drop` has been renamed to `let_underscore_drop`\n-  --> $DIR/rename.rs:92:9\n+  --> $DIR/rename.rs:94:9\n    |\n LL | #![warn(clippy::let_underscore_drop)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `let_underscore_drop`\n \n error: lint `clippy::mem_discriminant_non_enum` has been renamed to `enum_intrinsics_non_enums`\n-  --> $DIR/rename.rs:93:9\n+  --> $DIR/rename.rs:95:9\n    |\n LL | #![warn(clippy::mem_discriminant_non_enum)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `enum_intrinsics_non_enums`\n \n error: lint `clippy::panic_params` has been renamed to `non_fmt_panics`\n-  --> $DIR/rename.rs:94:9\n+  --> $DIR/rename.rs:96:9\n    |\n LL | #![warn(clippy::panic_params)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panics`\n \n error: lint `clippy::positional_named_format_parameters` has been renamed to `named_arguments_used_positionally`\n-  --> $DIR/rename.rs:95:9\n+  --> $DIR/rename.rs:97:9\n    |\n LL | #![warn(clippy::positional_named_format_parameters)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `named_arguments_used_positionally`\n \n error: lint `clippy::temporary_cstring_as_ptr` has been renamed to `temporary_cstring_as_ptr`\n-  --> $DIR/rename.rs:96:9\n+  --> $DIR/rename.rs:98:9\n    |\n LL | #![warn(clippy::temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `temporary_cstring_as_ptr`\n \n error: lint `clippy::unknown_clippy_lints` has been renamed to `unknown_lints`\n-  --> $DIR/rename.rs:97:9\n+  --> $DIR/rename.rs:99:9\n    |\n LL | #![warn(clippy::unknown_clippy_lints)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unknown_lints`\n \n error: lint `clippy::unused_label` has been renamed to `unused_labels`\n-  --> $DIR/rename.rs:98:9\n+  --> $DIR/rename.rs:100:9\n    |\n LL | #![warn(clippy::unused_label)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unused_labels`\n \n-error: aborting due to 49 previous errors\n+error: aborting due to 50 previous errors\n "}, {"sha": "40ba31dad8f68eebcfd33b78ace19b5d124a2a9c", "filename": "src/tools/miri/tests/fail/modifying_constants.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmodifying_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmodifying_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmodifying_constants.rs?ref=ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba", "patch": "@@ -1,6 +1,8 @@\n // This should fail even without validation/SB\n //@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n+#![allow(cast_ref_to_mut)]\n+\n fn main() {\n     let x = &1; // the `&1` is promoted to a constant, but it used to be that only the pointer is marked static, not the pointee\n     let y = unsafe { &mut *(x as *const i32 as *mut i32) };"}, {"sha": "8cd59b3550dc965d99b1a46611bb54206ad492d9", "filename": "src/tools/miri/tests/fail/stacked_borrows/shr_frozen_violation1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fshr_frozen_violation1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fshr_frozen_violation1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fshr_frozen_violation1.rs?ref=ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba", "patch": "@@ -1,3 +1,5 @@\n+#![allow(cast_ref_to_mut)]\n+\n fn foo(x: &mut i32) -> i32 {\n     *x = 5;\n     unknown_code(&*x);"}, {"sha": "9a9d4721c84945256a0cd521024fd789578bbcc5", "filename": "tests/ui/const-generics/issues/issue-100313.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-100313.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-100313.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-100313.rs?ref=ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba", "patch": "@@ -9,6 +9,7 @@ impl <const B: &'static bool> T<B> {\n         unsafe {\n             *(B as *const bool as *mut bool) = false;\n             //~^ ERROR evaluation of constant value failed [E0080]\n+            //~| ERROR casting `&T` to `&mut T` is undefined behavior\n         }\n     }\n }"}, {"sha": "ffc34a3a41e246a61dd435fb8577a73c0b47ec24", "filename": "tests/ui/const-generics/issues/issue-100313.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-100313.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-100313.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-100313.stderr?ref=ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba", "patch": "@@ -1,3 +1,11 @@\n+error: casting `&T` to `&mut T` is undefined behavior, even if the reference is unused, consider instead using an `UnsafeCell`\n+  --> $DIR/issue-100313.rs:10:13\n+   |\n+LL |             *(B as *const bool as *mut bool) = false;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(cast_ref_to_mut)]` on by default\n+\n error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-100313.rs:10:13\n    |\n@@ -10,11 +18,11 @@ note: inside `T::<&true>::set_false`\n LL |             *(B as *const bool as *mut bool) = false;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: inside `_`\n-  --> $DIR/issue-100313.rs:18:5\n+  --> $DIR/issue-100313.rs:19:5\n    |\n LL |     x.set_false();\n    |     ^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "745d7070143662010359fc38d4cdb6273bead131", "filename": "tests/ui/lint/cast_ref_to_mut.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/tests%2Fui%2Flint%2Fcast_ref_to_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/tests%2Fui%2Flint%2Fcast_ref_to_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fcast_ref_to_mut.rs?ref=ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba", "patch": "@@ -0,0 +1,50 @@\n+// check-fail\n+\n+#![feature(ptr_from_ref)]\n+\n+extern \"C\" {\n+    // N.B., mutability can be easily incorrect in FFI calls -- as\n+    // in C, the default is mutable pointers.\n+    fn ffi(c: *mut u8);\n+    fn int_ffi(c: *mut i32);\n+}\n+\n+fn main() {\n+    let s = String::from(\"Hello\");\n+    let a = &s;\n+    unsafe {\n+        let num = &3i32;\n+        let mut_num = &mut 3i32;\n+\n+        (*(a as *const _ as *mut String)).push_str(\" world\");\n+        //~^ ERROR casting `&T` to `&mut T` is undefined behavior\n+        *(a as *const _ as *mut _) = String::from(\"Replaced\");\n+        //~^ ERROR casting `&T` to `&mut T` is undefined behavior\n+        *(a as *const _ as *mut String) += \" world\";\n+        //~^ ERROR casting `&T` to `&mut T` is undefined behavior\n+        let _num = &mut *(num as *const i32 as *mut i32);\n+        //~^ ERROR casting `&T` to `&mut T` is undefined behavior\n+        let _num = &mut *(num as *const i32).cast_mut();\n+        //~^ ERROR casting `&T` to `&mut T` is undefined behavior\n+        let _num = *{ num as *const i32 }.cast_mut();\n+        //~^ ERROR casting `&T` to `&mut T` is undefined behavior\n+        *std::ptr::from_ref(num).cast_mut() += 1;\n+        //~^ ERROR casting `&T` to `&mut T` is undefined behavior\n+        *std::ptr::from_ref({ num }).cast_mut() += 1;\n+        //~^ ERROR casting `&T` to `&mut T` is undefined behavior\n+        *{ std::ptr::from_ref(num) }.cast_mut() += 1;\n+        //~^ ERROR casting `&T` to `&mut T` is undefined behavior\n+        *(std::ptr::from_ref({ num }) as *mut i32) += 1;\n+        //~^ ERROR casting `&T` to `&mut T` is undefined behavior\n+\n+        // Shouldn't be warned against\n+        println!(\"{}\", *(num as *const _ as *const i16));\n+        println!(\"{}\", *(mut_num as *mut _ as *mut i16));\n+        ffi(a.as_ptr() as *mut _);\n+        int_ffi(num as *const _ as *mut _);\n+        int_ffi(&3 as *const _ as *mut _);\n+        let mut value = 3;\n+        let value: *const i32 = &mut value;\n+        *(value as *const i16 as *mut i16) = 42;\n+    }\n+}"}, {"sha": "baff00d6c04196ccbd2b58266f082218de583efa", "filename": "tests/ui/lint/cast_ref_to_mut.stderr", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/tests%2Fui%2Flint%2Fcast_ref_to_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba/tests%2Fui%2Flint%2Fcast_ref_to_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fcast_ref_to_mut.stderr?ref=ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba", "patch": "@@ -0,0 +1,64 @@\n+error: casting `&T` to `&mut T` is undefined behavior, even if the reference is unused, consider instead using an `UnsafeCell`\n+  --> $DIR/cast_ref_to_mut.rs:19:9\n+   |\n+LL |         (*(a as *const _ as *mut String)).push_str(\" world\");\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(cast_ref_to_mut)]` on by default\n+\n+error: casting `&T` to `&mut T` is undefined behavior, even if the reference is unused, consider instead using an `UnsafeCell`\n+  --> $DIR/cast_ref_to_mut.rs:21:9\n+   |\n+LL |         *(a as *const _ as *mut _) = String::from(\"Replaced\");\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: casting `&T` to `&mut T` is undefined behavior, even if the reference is unused, consider instead using an `UnsafeCell`\n+  --> $DIR/cast_ref_to_mut.rs:23:9\n+   |\n+LL |         *(a as *const _ as *mut String) += \" world\";\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: casting `&T` to `&mut T` is undefined behavior, even if the reference is unused, consider instead using an `UnsafeCell`\n+  --> $DIR/cast_ref_to_mut.rs:25:25\n+   |\n+LL |         let _num = &mut *(num as *const i32 as *mut i32);\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: casting `&T` to `&mut T` is undefined behavior, even if the reference is unused, consider instead using an `UnsafeCell`\n+  --> $DIR/cast_ref_to_mut.rs:27:25\n+   |\n+LL |         let _num = &mut *(num as *const i32).cast_mut();\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: casting `&T` to `&mut T` is undefined behavior, even if the reference is unused, consider instead using an `UnsafeCell`\n+  --> $DIR/cast_ref_to_mut.rs:29:20\n+   |\n+LL |         let _num = *{ num as *const i32 }.cast_mut();\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: casting `&T` to `&mut T` is undefined behavior, even if the reference is unused, consider instead using an `UnsafeCell`\n+  --> $DIR/cast_ref_to_mut.rs:31:9\n+   |\n+LL |         *std::ptr::from_ref(num).cast_mut() += 1;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: casting `&T` to `&mut T` is undefined behavior, even if the reference is unused, consider instead using an `UnsafeCell`\n+  --> $DIR/cast_ref_to_mut.rs:33:9\n+   |\n+LL |         *std::ptr::from_ref({ num }).cast_mut() += 1;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: casting `&T` to `&mut T` is undefined behavior, even if the reference is unused, consider instead using an `UnsafeCell`\n+  --> $DIR/cast_ref_to_mut.rs:35:9\n+   |\n+LL |         *{ std::ptr::from_ref(num) }.cast_mut() += 1;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: casting `&T` to `&mut T` is undefined behavior, even if the reference is unused, consider instead using an `UnsafeCell`\n+  --> $DIR/cast_ref_to_mut.rs:37:9\n+   |\n+LL |         *(std::ptr::from_ref({ num }) as *mut i32) += 1;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 10 previous errors\n+"}]}