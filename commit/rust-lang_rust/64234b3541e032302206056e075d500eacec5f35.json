{"sha": "64234b3541e032302206056e075d500eacec5f35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MjM0YjM1NDFlMDMyMzAyMjA2MDU2ZTA3NWQ1MDBlYWNlYzVmMzU=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-15T04:33:35Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-19T15:51:01Z"}, "message": "libterm: use `#[deriving(Copy)]`", "tree": {"sha": "03f53a2586ef1eda1fe99b2ef5c4a26e3f711633", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03f53a2586ef1eda1fe99b2ef5c4a26e3f711633"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64234b3541e032302206056e075d500eacec5f35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64234b3541e032302206056e075d500eacec5f35", "html_url": "https://github.com/rust-lang/rust/commit/64234b3541e032302206056e075d500eacec5f35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64234b3541e032302206056e075d500eacec5f35/comments", "author": null, "committer": null, "parents": [{"sha": "86f8c127dd806940fe201b510b9284750fb17271", "url": "https://api.github.com/repos/rust-lang/rust/commits/86f8c127dd806940fe201b510b9284750fb17271", "html_url": "https://github.com/rust-lang/rust/commit/86f8c127dd806940fe201b510b9284750fb17271"}], "stats": {"total": 19, "additions": 5, "deletions": 14}, "files": [{"sha": "a4ebcfe8a568b023bd5ad5b5e5470fcf32ed93b7", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64234b3541e032302206056e075d500eacec5f35/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64234b3541e032302206056e075d500eacec5f35/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=64234b3541e032302206056e075d500eacec5f35", "patch": "@@ -165,13 +165,13 @@ pub mod color {\n /// Terminal attributes\n pub mod attr {\n     pub use self::Attr::*;\n-    use std::kinds::Copy;\n \n     /// Terminal attributes for use with term.attr().\n     ///\n     /// Most attributes can only be turned on and must be turned off with term.reset().\n     /// The ones that can be turned off explicitly take a boolean value.\n     /// Color is also represented as an attribute for convenience.\n+    #[deriving(Copy)]\n     pub enum Attr {\n         /// Bold (or possibly bright) mode\n         Bold,\n@@ -194,8 +194,6 @@ pub mod attr {\n         /// Convenience attribute to set the background color\n         BackgroundColor(super::color::Color)\n     }\n-\n-    impl Copy for Attr {}\n }\n \n /// A terminal with similar capabilities to an ANSI Terminal"}, {"sha": "4ecbc54c59089876fbda43f07dd2eba47d74bd95", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/64234b3541e032302206056e075d500eacec5f35/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64234b3541e032302206056e075d500eacec5f35/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=64234b3541e032302206056e075d500eacec5f35", "patch": "@@ -16,7 +16,7 @@ use self::FormatState::*;\n use self::FormatOp::*;\n use std::mem::replace;\n \n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n enum States {\n     Nothing,\n     Percent,\n@@ -33,17 +33,13 @@ enum States {\n     SeekIfEndPercent(int)\n }\n \n-impl Copy for States {}\n-\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n enum FormatState {\n     FormatStateFlags,\n     FormatStateWidth,\n     FormatStatePrecision\n }\n \n-impl Copy for FormatState {}\n-\n /// Types of parameters a capability can use\n #[allow(missing_docs)]\n #[deriving(Clone)]\n@@ -446,7 +442,7 @@ pub fn expand(cap: &[u8], params: &[Param], vars: &mut Variables)\n     Ok(output)\n }\n \n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n struct Flags {\n     width: uint,\n     precision: uint,\n@@ -456,15 +452,14 @@ struct Flags {\n     space: bool\n }\n \n-impl Copy for Flags {}\n-\n impl Flags {\n     fn new() -> Flags {\n         Flags{ width: 0, precision: 0, alternate: false,\n                left: false, sign: false, space: false }\n     }\n }\n \n+#[deriving(Copy)]\n enum FormatOp {\n     FormatDigit,\n     FormatOctal,\n@@ -473,8 +468,6 @@ enum FormatOp {\n     FormatString\n }\n \n-impl Copy for FormatOp {}\n-\n impl FormatOp {\n     fn from_char(c: char) -> FormatOp {\n         match c {"}]}