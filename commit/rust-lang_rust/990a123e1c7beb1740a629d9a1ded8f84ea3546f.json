{"sha": "990a123e1c7beb1740a629d9a1ded8f84ea3546f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MGExMjNlMWM3YmViMTc0MGE2MjlkOWExZGVkOGY4NGVhMzU0NmY=", "commit": {"author": {"name": "Ga\u00ebtan Cassiers", "email": "gaetan.cassiers@gmail.com", "date": "2015-07-03T09:13:28Z"}, "committer": {"name": "Ga\u00ebtan Cassiers", "email": "gaetan.cassiers@gmail.com", "date": "2015-07-03T09:13:28Z"}, "message": "Run rustfmt on the code", "tree": {"sha": "5b20a14ebf33636385b1d1b24430d939887a2f44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b20a14ebf33636385b1d1b24430d939887a2f44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/990a123e1c7beb1740a629d9a1ded8f84ea3546f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/990a123e1c7beb1740a629d9a1ded8f84ea3546f", "html_url": "https://github.com/rust-lang/rust/commit/990a123e1c7beb1740a629d9a1ded8f84ea3546f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/990a123e1c7beb1740a629d9a1ded8f84ea3546f/comments", "author": {"login": "cassiersg", "id": 9348542, "node_id": "MDQ6VXNlcjkzNDg1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9348542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cassiersg", "html_url": "https://github.com/cassiersg", "followers_url": "https://api.github.com/users/cassiersg/followers", "following_url": "https://api.github.com/users/cassiersg/following{/other_user}", "gists_url": "https://api.github.com/users/cassiersg/gists{/gist_id}", "starred_url": "https://api.github.com/users/cassiersg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cassiersg/subscriptions", "organizations_url": "https://api.github.com/users/cassiersg/orgs", "repos_url": "https://api.github.com/users/cassiersg/repos", "events_url": "https://api.github.com/users/cassiersg/events{/privacy}", "received_events_url": "https://api.github.com/users/cassiersg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cassiersg", "id": 9348542, "node_id": "MDQ6VXNlcjkzNDg1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9348542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cassiersg", "html_url": "https://github.com/cassiersg", "followers_url": "https://api.github.com/users/cassiersg/followers", "following_url": "https://api.github.com/users/cassiersg/following{/other_user}", "gists_url": "https://api.github.com/users/cassiersg/gists{/gist_id}", "starred_url": "https://api.github.com/users/cassiersg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cassiersg/subscriptions", "organizations_url": "https://api.github.com/users/cassiersg/orgs", "repos_url": "https://api.github.com/users/cassiersg/repos", "events_url": "https://api.github.com/users/cassiersg/events{/privacy}", "received_events_url": "https://api.github.com/users/cassiersg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3de366d282de6de5dd1d69c40ea32f98a051fc66", "url": "https://api.github.com/repos/rust-lang/rust/commits/3de366d282de6de5dd1d69c40ea32f98a051fc66", "html_url": "https://github.com/rust-lang/rust/commit/3de366d282de6de5dd1d69c40ea32f98a051fc66"}], "stats": {"total": 352, "additions": 147, "deletions": 205}, "files": [{"sha": "3f0d985da483fa887882bf7a719eeb987cf5cf92", "filename": "src/changes.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/990a123e1c7beb1740a629d9a1ded8f84ea3546f/src%2Fchanges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/990a123e1c7beb1740a629d9a1ded8f84ea3546f/src%2Fchanges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchanges.rs?ref=990a123e1c7beb1740a629d9a1ded8f84ea3546f", "patch": "@@ -35,11 +35,9 @@ pub struct ChangeSet<'a> {\n impl<'a> ChangeSet<'a> {\n     // Create a new ChangeSet for a given libsyntax CodeMap.\n     pub fn from_codemap(codemap: &'a CodeMap) -> ChangeSet<'a> {\n-        let mut result = ChangeSet {\n-            file_map: HashMap::new(),\n-            codemap: codemap,\n-            file_spans: Vec::with_capacity(codemap.files.borrow().len()),\n-        };\n+        let mut result = ChangeSet { file_map: HashMap::new(),\n+                                     codemap: codemap,\n+                                     file_spans: Vec::with_capacity(codemap.files.borrow().len()), };\n \n         for f in codemap.files.borrow().iter() {\n             // Use the length of the file as a heuristic for how much space we\n@@ -116,11 +114,7 @@ impl<'a> ChangeSet<'a> {\n \n     // Return an iterator over the entire changed text.\n     pub fn text<'c>(&'c self) -> FileIterator<'c, 'a> {\n-        FileIterator {\n-            change_set: self,\n-            keys: self.file_map.keys().collect(),\n-            cur_key: 0,\n-        }\n+        FileIterator { change_set: self, keys: self.file_map.keys().collect(), cur_key: 0 }\n     }\n \n     // Append a newline to the end of each file.\n@@ -153,12 +147,11 @@ impl<'a> ChangeSet<'a> {\n         let text = &self.file_map[filename];\n \n         // prints all newlines either as `\\n` or as `\\r\\n`\n-        fn write_system_newlines<T>(\n-            mut writer: T,\n-            text: &StringBuffer,\n-            config: &Config)\n-            -> Result<(), ::std::io::Error>\n-            where T: Write,\n+        fn write_system_newlines<T>(mut writer: T,\n+                                    text: &StringBuffer,\n+                                    config: &Config)\n+                                    -> Result<(), ::std::io::Error>\n+            where T: Write\n         {\n             match config.newline_style {\n                 NewlineStyle::Unix => write!(writer, \"{}\", text),"}, {"sha": "064cace6c510a1f62b6d55994a03fa149aaa3508", "filename": "src/comment.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/990a123e1c7beb1740a629d9a1ded8f84ea3546f/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/990a123e1c7beb1740a629d9a1ded8f84ea3546f/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=990a123e1c7beb1740a629d9a1ded8f84ea3546f", "patch": "@@ -24,15 +24,13 @@ pub fn rewrite_comment(orig: &str, block_style: bool, width: usize, offset: usiz\n     let max_chars = width.checked_sub(closer.len()).unwrap_or(1)\n                          .checked_sub(opener.len()).unwrap_or(1);\n \n-    let fmt = StringFormat {\n-        opener: \"\",\n-        closer: \"\",\n-        line_start: line_start,\n-        line_end: \"\",\n-        width: max_chars,\n-        offset: offset + opener.len() - line_start.len(),\n-        trim_end: true\n-    };\n+    let fmt = StringFormat { opener: \"\",\n+                             closer: \"\",\n+                             line_start: line_start,\n+                             line_end: \"\",\n+                             width: max_chars,\n+                             offset: offset + opener.len() - line_start.len(),\n+                             trim_end: true, };\n \n     let indent_str = make_indent(offset);\n     let line_breaks = s.chars().filter(|&c| c == '\\n').count();\n@@ -102,8 +100,8 @@ fn format_comments() {\n \n     let input = \"// comment\";\n     let expected_output = \"/* com\\n                                                                      \\\n-                            * men\\n                                                                      \\\n-                            * t */\";\n+                           * men\\n                                                                      \\\n+                           * t */\";\n     assert_eq!(expected_output, rewrite_comment(input, true, 9, 69));\n \n     assert_eq!(\"/* trimmed */\", rewrite_comment(\"/*   trimmed    */\", true, 100, 100));"}, {"sha": "da706c4afa748f3c1e70cfc377ffa2c5c4c76c8d", "filename": "src/expr.rs", "status": "modified", "additions": 42, "deletions": 43, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/990a123e1c7beb1740a629d9a1ded8f84ea3546f/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/990a123e1c7beb1740a629d9a1ded8f84ea3546f/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=990a123e1c7beb1740a629d9a1ded8f84ea3546f", "patch": "@@ -63,23 +63,21 @@ fn rewrite_string_lit(context: &RewriteContext,\n                       span: Span,\n                       width: usize,\n                       offset: usize)\n-    -> Option<String> {\n+                      -> Option<String> {\n     // Check if there is anything to fix: we always try to fixup multi-line\n     // strings, or if the string is too long for the line.\n     let l_loc = context.codemap.lookup_char_pos(span.lo);\n     let r_loc = context.codemap.lookup_char_pos(span.hi);\n     if l_loc.line == r_loc.line && r_loc.col.to_usize() <= context.config.max_width {\n         return context.codemap.span_to_snippet(span).ok();\n     }\n-    let fmt = StringFormat {\n-        opener: \"\\\"\",\n-        closer: \"\\\"\",\n-        line_start: \" \",\n-        line_end: \"\\\\\",\n-        width: width,\n-        offset: offset,\n-        trim_end: false\n-    };\n+    let fmt = StringFormat { opener: \"\\\"\",\n+                             closer: \"\\\"\",\n+                             line_start: \" \",\n+                             line_end: \"\\\\\",\n+                             width: width,\n+                             offset: offset,\n+                             trim_end: false, };\n \n     Some(rewrite_string(&s.escape_default(), &fmt))\n }\n@@ -90,7 +88,7 @@ fn rewrite_call(context: &RewriteContext,\n                 span: Span,\n                 width: usize,\n                 offset: usize)\n-        -> Option<String> {\n+                -> Option<String> {\n     debug!(\"rewrite_call, width: {}, offset: {}\", width, offset);\n \n     // TODO using byte lens instead of char lens (and probably all over the place too)\n@@ -119,20 +117,22 @@ fn rewrite_call(context: &RewriteContext,\n                              callee.span.hi + BytePos(1),\n                              span.hi);\n \n-    let fmt = ListFormatting {\n-        tactic: ListTactic::HorizontalVertical,\n-        separator: \",\",\n-        trailing_separator: SeparatorTactic::Never,\n-        indent: offset,\n-        h_width: remaining_width,\n-        v_width: remaining_width,\n-        ends_with_newline: true,\n-    };\n+    let fmt = ListFormatting { tactic: ListTactic::HorizontalVertical,\n+                               separator: \",\",\n+                               trailing_separator: SeparatorTactic::Never,\n+                               indent: offset,\n+                               h_width: remaining_width,\n+                               v_width: remaining_width,\n+                               ends_with_newline: true, };\n \n     Some(format!(\"{}({})\", callee_str, write_list(&items, &fmt)))\n }\n \n-fn rewrite_paren(context: &RewriteContext, subexpr: &ast::Expr, width: usize, offset: usize) -> Option<String> {\n+fn rewrite_paren(context: &RewriteContext,\n+                 subexpr: &ast::Expr,\n+                 width: usize,\n+                 offset: usize)\n+                 -> Option<String> {\n     debug!(\"rewrite_paren, width: {}, offset: {}\", width, offset);\n     // 1 is for opening paren, 2 is for opening+closing, we want to keep the closing\n     // paren on the same line as the subexpr\n@@ -148,14 +148,13 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n                           span: Span,\n                           width: usize,\n                           offset: usize)\n-        -> Option<String>\n-{\n+                          -> Option<String> {\n     debug!(\"rewrite_struct_lit: width {}, offset {}\", width, offset);\n     assert!(fields.len() > 0 || base.is_some());\n \n     enum StructLitField<'a> {\n         Regular(&'a ast::Field),\n-        Base(&'a ast::Expr)\n+        Base(&'a ast::Expr),\n     }\n \n     let path_str = pprust::path_to_string(path);\n@@ -203,19 +202,17 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n                              span_after(span, \"{\", context.codemap),\n                              span.hi);\n \n-    let fmt = ListFormatting {\n-        tactic: ListTactic::HorizontalVertical,\n-        separator: \",\",\n-        trailing_separator: if base.is_some() {\n+    let fmt = ListFormatting { tactic: ListTactic::HorizontalVertical,\n+                               separator: \",\",\n+                               trailing_separator: if base.is_some() {\n             SeparatorTactic::Never\n         } else {\n             context.config.struct_lit_trailing_comma\n         },\n-        indent: indent,\n-        h_width: budget,\n-        v_width: budget,\n-        ends_with_newline: true,\n-    };\n+                               indent: indent,\n+                               h_width: budget,\n+                               v_width: budget,\n+                               ends_with_newline: true, };\n     let fields_str = write_list(&items, &fmt);\n     Some(format!(\"{} {{ {} }}\", path_str, fields_str))\n \n@@ -225,7 +222,11 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n     // }\n }\n \n-fn rewrite_field(context: &RewriteContext, field: &ast::Field, width: usize, offset: usize) -> Option<String> {\n+fn rewrite_field(context: &RewriteContext,\n+                 field: &ast::Field,\n+                 width: usize,\n+                 offset: usize)\n+                 -> Option<String> {\n     let name = &token::get_ident(field.ident.node);\n     let overhead = name.len() + 2;\n     let expr = field.expr.rewrite(context, width - overhead, offset + overhead);\n@@ -262,15 +263,13 @@ fn rewrite_tuple_lit(context: &RewriteContext,\n         SeparatorTactic::Never\n     };\n \n-    let fmt = ListFormatting {\n-        tactic: ListTactic::HorizontalVertical,\n-        separator: \",\",\n-        trailing_separator: trailing_separator_tactic,\n-        indent: indent,\n-        h_width: width - 2,\n-        v_width: width - 2,\n-        ends_with_newline: true,\n-    };\n+    let fmt = ListFormatting { tactic: ListTactic::HorizontalVertical,\n+                               separator: \",\",\n+                               trailing_separator: trailing_separator_tactic,\n+                               indent: indent,\n+                               h_width: width - 2,\n+                               v_width: width - 2,\n+                               ends_with_newline: true, };\n \n     Some(format!(\"({})\", write_list(&items, &fmt)))\n }"}, {"sha": "d9eb7b772a3b2ca3a9ad332168d2d70c7b9226de", "filename": "src/imports.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/990a123e1c7beb1740a629d9a1ded8f84ea3546f/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/990a123e1c7beb1740a629d9a1ded8f84ea3546f/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=990a123e1c7beb1740a629d9a1ded8f84ea3546f", "patch": "@@ -48,7 +48,8 @@ impl<'a> FmtVisitor<'a> {\n                             path: &ast::Path,\n                             path_list: &[ast::PathListItem],\n                             visibility: ast::Visibility,\n-                            span: Span) -> Option<String> {\n+                            span: Span)\n+                            -> Option<String> {\n         let path_str = pprust::path_to_string(path);\n         let vis = format_visibility(visibility);\n \n@@ -70,18 +71,17 @@ impl<'a> FmtVisitor<'a> {\n         let remaining_line_budget = one_line_budget.checked_sub(used_width).unwrap_or(0);\n         let remaining_multi_budget = multi_line_budget.checked_sub(used_width).unwrap_or(0);\n \n-        let fmt = ListFormatting {\n-            tactic: ListTactic::Mixed,\n-            separator: \",\",\n-            trailing_separator: SeparatorTactic::Never,\n-            indent: block_indent + indent,\n-            h_width: remaining_line_budget,\n-            v_width: remaining_multi_budget,\n-            ends_with_newline: true,\n-        };\n+        let fmt = ListFormatting { tactic: ListTactic::Mixed,\n+                                   separator: \",\",\n+                                   trailing_separator: SeparatorTactic::Never,\n+                                   indent: block_indent + indent,\n+                                   h_width: remaining_line_budget,\n+                                   v_width: remaining_multi_budget,\n+                                   ends_with_newline: true, };\n \n         let mut items = itemize_list(self.codemap,\n-                                     vec![ListItem::from_str(\"\")], // Dummy value, explanation below\n+                                     vec![ListItem::from_str(\"\")], /* Dummy value, explanation\n+                                                                    * below */\n                                      path_list.iter(),\n                                      \",\",\n                                      \"}\","}, {"sha": "bb7e9ba14e301c12375650c3a1e714e193aa5e19", "filename": "src/issues.rs", "status": "modified", "additions": 13, "deletions": 22, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/990a123e1c7beb1740a629d9a1ded8f84ea3546f/src%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/990a123e1c7beb1740a629d9a1ded8f84ea3546f/src%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fissues.rs?ref=990a123e1c7beb1740a629d9a1ded8f84ea3546f", "patch": "@@ -21,7 +21,7 @@ static FIX_ME_CHARS: &'static [char] = &['F', 'I', 'X', 'M', 'E'];\n pub enum ReportTactic {\n     Always,\n     Unnumbered,\n-    Never\n+    Never,\n }\n \n impl ReportTactic {\n@@ -40,20 +40,20 @@ impl_enum_decodable!(ReportTactic, Always, Unnumbered, Never);\n enum Seeking {\n     Issue {\n         todo_idx: usize,\n-        fixme_idx: usize\n+        fixme_idx: usize,\n     },\n     Number {\n         issue: Issue,\n-        part: NumberPart\n-    }\n+        part: NumberPart,\n+    },\n }\n \n #[derive(Clone, Copy)]\n enum NumberPart {\n     OpenParen,\n     Pound,\n     Number,\n-    CloseParen\n+    CloseParen,\n }\n \n #[derive(PartialEq, Eq, Debug, Clone, Copy)]\n@@ -79,13 +79,13 @@ impl fmt::Display for Issue {\n #[derive(PartialEq, Eq, Debug, Clone, Copy)]\n enum IssueType {\n     Todo,\n-    Fixme\n+    Fixme,\n }\n \n enum IssueClassification {\n     Good,\n     Bad(Issue),\n-    None\n+    None,\n }\n \n pub struct BadIssueSeeker {\n@@ -96,11 +96,9 @@ pub struct BadIssueSeeker {\n \n impl BadIssueSeeker {\n     pub fn new(report_todo: ReportTactic, report_fixme: ReportTactic) -> BadIssueSeeker {\n-        BadIssueSeeker {\n-            state: Seeking::Issue { todo_idx: 0, fixme_idx: 0 },\n-            report_todo: report_todo,\n-            report_fixme: report_fixme,\n-        }\n+        BadIssueSeeker { state: Seeking::Issue { todo_idx: 0, fixme_idx: 0 },\n+                         report_todo: report_todo,\n+                         report_fixme: report_fixme, }\n     }\n \n     // Check whether or not the current char is conclusive evidence for an\n@@ -176,8 +174,7 @@ impl BadIssueSeeker {\n                       c: char,\n                       issue: Issue,\n                       mut part: NumberPart)\n-        -> IssueClassification\n-    {\n+                      -> IssueClassification {\n         if ! issue.missing_number || c == '\\n' {\n             return IssueClassification::Bad(issue);\n         } else if c == ')' {\n@@ -272,10 +269,7 @@ fn find_issue() {\n #[test]\n fn issue_type() {\n     let mut seeker = BadIssueSeeker::new(ReportTactic::Always, ReportTactic::Never);\n-    let expected = Some(Issue {\n-        issue_type: IssueType::Todo,\n-        missing_number: false\n-    });\n+    let expected = Some(Issue { issue_type: IssueType::Todo, missing_number: false });\n \n     assert_eq!(expected,\n                \"TODO(#100): more awesomeness\".chars()\n@@ -284,10 +278,7 @@ fn issue_type() {\n                                        .unwrap());\n \n     let mut seeker = BadIssueSeeker::new(ReportTactic::Never, ReportTactic::Unnumbered);\n-    let expected = Some(Issue {\n-        issue_type: IssueType::Fixme,\n-        missing_number: true\n-    });\n+    let expected = Some(Issue { issue_type: IssueType::Fixme, missing_number: true });\n \n     assert_eq!(expected,\n                \"Test. FIXME: bad, bad, not good\".chars()"}, {"sha": "0f7f44f8d99a068dcb48926d85d3cb45c8903800", "filename": "src/items.rs", "status": "modified", "additions": 46, "deletions": 72, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/990a123e1c7beb1740a629d9a1ded8f84ea3546f/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/990a123e1c7beb1740a629d9a1ded8f84ea3546f/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=990a123e1c7beb1740a629d9a1ded8f84ea3546f", "patch": "@@ -33,8 +33,7 @@ impl<'a> FmtVisitor<'a> {\n                       abi: &abi::Abi,\n                       vis: ast::Visibility,\n                       span: Span)\n-        -> String\n-    {\n+                      -> String {\n         let newline_brace = self.newline_for_brace(&generics.where_clause);\n \n         let mut result = self.rewrite_fn_base(indent,\n@@ -67,8 +66,7 @@ impl<'a> FmtVisitor<'a> {\n                                ident: ast::Ident,\n                                sig: &ast::MethodSig,\n                                span: Span)\n-        -> String\n-    {\n+                               -> String {\n         // Drop semicolon or it will be interpreted as comment\n         let span = codemap::mk_sp(span.lo, span.hi - BytePos(1));\n \n@@ -102,8 +100,7 @@ impl<'a> FmtVisitor<'a> {\n                        vis: ast::Visibility,\n                        span: Span,\n                        newline_brace: bool)\n-        -> String\n-    {\n+                       -> String {\n         // FIXME we'll lose any comments in between parts of the function decl, but anyone\n         // who comments there probably deserves what they get.\n \n@@ -165,9 +162,10 @@ impl<'a> FmtVisitor<'a> {\n                                  .last()\n                                  .map(|tp| end_typaram(tp))\n                                  .unwrap_or(span.lo);\n-        let args_span = codemap::mk_sp(\n-            span_after(codemap::mk_sp(args_start, span.hi), \"(\", self.codemap),\n-            span_for_return(&fd.output).lo);\n+        let args_span = codemap::mk_sp(span_after(codemap::mk_sp(args_start, span.hi),\n+                                                  \"(\",\n+                                                  self.codemap),\n+                                       span_for_return(&fd.output).lo);\n         result.push_str(&self.rewrite_args(&fd.inputs,\n                                            explicit_self,\n                                            one_line_budget,\n@@ -229,8 +227,7 @@ impl<'a> FmtVisitor<'a> {\n                     multi_line_budget: usize,\n                     arg_indent: usize,\n                     span: Span)\n-        -> String\n-    {\n+                    -> String {\n         let mut arg_item_strs: Vec<_> = args.iter().map(|a| self.rewrite_fn_input(a)).collect();\n         // Account for sugary self.\n         let mut min_args = 1;\n@@ -308,15 +305,13 @@ impl<'a> FmtVisitor<'a> {\n             item.item = arg;\n         }\n \n-        let fmt = ListFormatting {\n-            tactic: ListTactic::HorizontalVertical,\n-            separator: \",\",\n-            trailing_separator: SeparatorTactic::Never,\n-            indent: arg_indent,\n-            h_width: one_line_budget,\n-            v_width: multi_line_budget,\n-            ends_with_newline: true,\n-        };\n+        let fmt = ListFormatting { tactic: ListTactic::HorizontalVertical,\n+                                   separator: \",\",\n+                                   trailing_separator: SeparatorTactic::Never,\n+                                   indent: arg_indent,\n+                                   h_width: one_line_budget,\n+                                   v_width: multi_line_budget,\n+                                   ends_with_newline: true, };\n \n         write_list(&arg_items, &fmt)\n     }\n@@ -326,8 +321,7 @@ impl<'a> FmtVisitor<'a> {\n                                 indent: usize,\n                                 ret_str_len: usize,\n                                 newline_brace: bool)\n-        -> (usize, usize, usize)\n-    {\n+                                -> (usize, usize, usize) {\n         let mut budgets = None;\n \n         // Try keeping everything on the same line\n@@ -384,8 +378,7 @@ impl<'a> FmtVisitor<'a> {\n                       vis: ast::Visibility,\n                       enum_def: &ast::EnumDef,\n                       generics: &ast::Generics,\n-                      span: Span)\n-    {\n+                      span: Span) {\n         let header_str = self.format_header(\"enum \", ident, vis);\n         self.changes.push_str_span(span, &header_str);\n \n@@ -416,11 +409,7 @@ impl<'a> FmtVisitor<'a> {\n     }\n \n     // Variant of an enum\n-    fn visit_variant(&mut self,\n-                     field: &ast::Variant,\n-                     last_field: bool,\n-                     next_span_start: BytePos)\n-    {\n+    fn visit_variant(&mut self, field: &ast::Variant, last_field: bool, next_span_start: BytePos) {\n         if self.visit_attrs(&field.node.attrs) {\n             return;\n         }\n@@ -511,8 +500,8 @@ impl<'a> FmtVisitor<'a> {\n                      struct_def: &ast::StructDef,\n                      generics: Option<&ast::Generics>,\n                      span: Span,\n-                     offset: usize) -> String\n-    {\n+                     offset: usize)\n+                     -> String {\n         let mut result = String::with_capacity(1024);\n \n         let header_str = self.format_header(item_name, ident, vis);\n@@ -564,8 +553,7 @@ impl<'a> FmtVisitor<'a> {\n \n         // Conservative approximation\n         let single_line_cost = (span.hi - struct_def.fields[0].span.lo).0;\n-        let break_line = !is_tuple ||\n-                         generics_str.contains('\\n') ||\n+        let break_line = !is_tuple || generics_str.contains('\\n') ||\n                          single_line_cost as usize + used_budget > self.config.max_width;\n \n         if break_line {\n@@ -578,15 +566,13 @@ impl<'a> FmtVisitor<'a> {\n \n         // 1 = ,\n         let budget = self.config.ideal_width - offset + self.config.tab_spaces - 1;\n-        let fmt = ListFormatting {\n-            tactic: tactic,\n-            separator: \",\",\n-            trailing_separator: self.config.struct_trailing_comma,\n-            indent: offset + self.config.tab_spaces,\n-            h_width: self.config.max_width,\n-            v_width: budget,\n-            ends_with_newline: false,\n-        };\n+        let fmt = ListFormatting { tactic: tactic,\n+                                   separator: \",\",\n+                                   trailing_separator: self.config.struct_trailing_comma,\n+                                   indent: offset + self.config.tab_spaces,\n+                                   h_width: self.config.max_width,\n+                                   v_width: budget,\n+                                   ends_with_newline: false, };\n \n         result.push_str(&write_list(&items, &fmt));\n \n@@ -609,8 +595,7 @@ impl<'a> FmtVisitor<'a> {\n                         vis: ast::Visibility,\n                         struct_def: &ast::StructDef,\n                         generics: &ast::Generics,\n-                        span: Span)\n-    {\n+                        span: Span) {\n         let indent = self.block_indent;\n         let result = self.format_struct(\"struct \",\n                                         ident,\n@@ -623,12 +608,7 @@ impl<'a> FmtVisitor<'a> {\n         self.last_pos = span.hi;\n     }\n \n-    fn format_header(&self,\n-                     item_name: &str,\n-                     ident: ast::Ident,\n-                     vis: ast::Visibility)\n-        -> String\n-    {\n+    fn format_header(&self, item_name: &str, ident: ast::Ident, vis: ast::Visibility) -> String {\n         format!(\"{}{}{}\", format_visibility(vis), item_name, &token::get_ident(ident))\n     }\n \n@@ -637,8 +617,7 @@ impl<'a> FmtVisitor<'a> {\n                        opener: &str,\n                        offset: usize,\n                        span: Span)\n-        -> String\n-    {\n+                       -> String {\n         let mut result = self.rewrite_generics(generics, offset, span);\n \n         if generics.where_clause.predicates.len() > 0 || result.contains('\\n') {\n@@ -728,15 +707,13 @@ impl<'a> FmtVisitor<'a> {\n             item.item = ty;\n         }\n \n-        let fmt = ListFormatting {\n-            tactic: ListTactic::HorizontalVertical,\n-            separator: \",\",\n-            trailing_separator: SeparatorTactic::Never,\n-            indent: offset + 1,\n-            h_width: budget,\n-            v_width: budget,\n-            ends_with_newline: true,\n-        };\n+        let fmt = ListFormatting { tactic: ListTactic::HorizontalVertical,\n+                                   separator: \",\",\n+                                   trailing_separator: SeparatorTactic::Never,\n+                                   indent: offset + 1,\n+                                   h_width: budget,\n+                                   v_width: budget,\n+                                   ends_with_newline: true, };\n         result.push_str(&write_list(&items, &fmt));\n \n         result.push('>');\n@@ -748,8 +725,7 @@ impl<'a> FmtVisitor<'a> {\n                             where_clause: &ast::WhereClause,\n                             indent: usize,\n                             span_end: BytePos)\n-        -> String\n-    {\n+                            -> String {\n         let mut result = String::new();\n         if where_clause.predicates.len() == 0 {\n             return result;\n@@ -772,15 +748,13 @@ impl<'a> FmtVisitor<'a> {\n                                  span_end);\n \n         let budget = self.config.ideal_width + self.config.leeway - indent - 10;\n-        let fmt = ListFormatting {\n-            tactic: ListTactic::Vertical,\n-            separator: \",\",\n-            trailing_separator: SeparatorTactic::Never,\n-            indent: indent + 10,\n-            h_width: budget,\n-            v_width: budget,\n-            ends_with_newline: true,\n-        };\n+        let fmt = ListFormatting { tactic: ListTactic::Vertical,\n+                                   separator: \",\",\n+                                   trailing_separator: SeparatorTactic::Never,\n+                                   indent: indent + 10,\n+                                   h_width: budget,\n+                                   v_width: budget,\n+                                   ends_with_newline: true, };\n         result.push_str(&write_list(&items, &fmt));\n \n         result"}, {"sha": "155c8ab08cb32fc5312f42c81809e85ae51f5ff5", "filename": "src/lists.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/990a123e1c7beb1740a629d9a1ded8f84ea3546f/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/990a123e1c7beb1740a629d9a1ded8f84ea3546f/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=990a123e1c7beb1740a629d9a1ded8f84ea3546f", "patch": "@@ -48,20 +48,19 @@ pub struct ListFormatting<'a> {\n     pub v_width: usize,\n     // Non-expressions, e.g. items, will have a new line at the end of the list.\n     // Important for comment styles.\n-    pub ends_with_newline: bool\n+    pub ends_with_newline: bool,\n }\n \n pub struct ListItem {\n     pub pre_comment: Option<String>,\n     // Item should include attributes and doc comments\n     pub item: String,\n-    pub post_comment: Option<String>\n+    pub post_comment: Option<String>,\n }\n \n impl ListItem {\n     pub fn is_multiline(&self) -> bool {\n-        self.item.contains('\\n') ||\n-        self.pre_comment.is_some() ||\n+        self.item.contains('\\n') || self.pre_comment.is_some() ||\n         self.post_comment.as_ref().map(|s| s.contains('\\n')).unwrap_or(false)\n     }\n \n@@ -70,11 +69,7 @@ impl ListItem {\n     }\n \n     pub fn from_str<S: Into<String>>(s: S) -> ListItem {\n-        ListItem {\n-            pre_comment: None,\n-            item: s.into(),\n-            post_comment: None\n-        }\n+        ListItem { pre_comment: None, item: s.into(), post_comment: None }\n     }\n }\n \n@@ -239,8 +234,8 @@ pub fn itemize_list<T, I, F1, F2, F3>(codemap: &CodeMap,\n                                       get_item_string: F3,\n                                       mut prev_span_end: BytePos,\n                                       next_span_start: BytePos)\n-    -> Vec<ListItem>\n-    where I: Iterator<Item=T>,\n+                                      -> Vec<ListItem>\n+    where I: Iterator<Item = T>,\n           F1: Fn(&T) -> BytePos,\n           F2: Fn(&T) -> BytePos,\n           F3: Fn(&T) -> String"}, {"sha": "d560b3f2027b5a155e67cc6395a45211450ed9d2", "filename": "src/missed_spans.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/990a123e1c7beb1740a629d9a1ded8f84ea3546f/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/990a123e1c7beb1740a629d9a1ded8f84ea3546f/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=990a123e1c7beb1740a629d9a1ded8f84ea3546f", "patch": "@@ -36,8 +36,7 @@ impl<'a> FmtVisitor<'a> {\n \n     fn format_missing_inner<F: Fn(&mut FmtVisitor, &str, &str, &str)>(&mut self,\n                                                                       end: BytePos,\n-                                                                      process_last_snippet: F)\n-    {\n+                                                                      process_last_snippet: F) {\n         let start = self.last_pos;\n         debug!(\"format_missing_inner: {:?} to {:?}\",\n                self.codemap.lookup_char_pos(start),"}, {"sha": "6880cd8bcc2f93abc323da39a4539dcec384721d", "filename": "src/types.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/990a123e1c7beb1740a629d9a1ded8f84ea3546f/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/990a123e1c7beb1740a629d9a1ded8f84ea3546f/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=990a123e1c7beb1740a629d9a1ded8f84ea3546f", "patch": "@@ -15,8 +15,7 @@ use syntax::parse::token;\n use syntax::print::pprust;\n \n impl<'a> FmtVisitor<'a> {\n-    pub fn rewrite_pred(&self, predicate: &ast::WherePredicate) -> String\n-    {\n+    pub fn rewrite_pred(&self, predicate: &ast::WherePredicate) -> String {\n         // TODO dead spans\n         // TODO assumes we'll always fit on one line...\n         match predicate {\n@@ -49,8 +48,7 @@ impl<'a> FmtVisitor<'a> {\n         }\n     }\n \n-    pub fn rewrite_lifetime_def(&self, lifetime: &ast::LifetimeDef) -> String\n-    {\n+    pub fn rewrite_lifetime_def(&self, lifetime: &ast::LifetimeDef) -> String {\n         if lifetime.bounds.len() == 0 {\n             return pprust::lifetime_to_string(&lifetime.lifetime);\n         }\n@@ -60,8 +58,7 @@ impl<'a> FmtVisitor<'a> {\n                 lifetime.bounds.iter().map(|l| pprust::lifetime_to_string(l)).collect::<Vec<_>>().connect(\" + \"))\n     }\n \n-    pub fn rewrite_ty_bound(&self, bound: &ast::TyParamBound) -> String\n-    {\n+    pub fn rewrite_ty_bound(&self, bound: &ast::TyParamBound) -> String {\n         match *bound {\n             ast::TyParamBound::TraitTyParamBound(ref tref, ast::TraitBoundModifier::None) => {\n                 self.rewrite_poly_trait_ref(tref)\n@@ -75,8 +72,7 @@ impl<'a> FmtVisitor<'a> {\n         }\n     }\n \n-    pub fn rewrite_ty_param(&self, ty_param: &ast::TyParam) -> String\n-    {\n+    pub fn rewrite_ty_param(&self, ty_param: &ast::TyParam) -> String {\n         let mut result = String::with_capacity(128);\n         result.push_str(&token::get_ident(ty_param.ident));\n         if ty_param.bounds.len() > 0 {\n@@ -91,8 +87,7 @@ impl<'a> FmtVisitor<'a> {\n         result\n     }\n \n-    fn rewrite_poly_trait_ref(&self, t: &ast::PolyTraitRef) -> String\n-    {\n+    fn rewrite_poly_trait_ref(&self, t: &ast::PolyTraitRef) -> String {\n         if t.bound_lifetimes.len() > 0 {\n             format!(\"for<{}> {}\",\n                     t.bound_lifetimes.iter().map(|l| self.rewrite_lifetime_def(l)).collect::<Vec<_>>().connect(\", \"),"}, {"sha": "5c15e1bf523037c0cb07854ebf6571d740e7a283", "filename": "src/visitor.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/990a123e1c7beb1740a629d9a1ded8f84ea3546f/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/990a123e1c7beb1740a629d9a1ded8f84ea3546f/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=990a123e1c7beb1740a629d9a1ded8f84ea3546f", "patch": "@@ -282,13 +282,11 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n \n impl<'a> FmtVisitor<'a> {\n     pub fn from_codemap<'b>(codemap: &'b CodeMap, config: &'b Config) -> FmtVisitor<'b> {\n-        FmtVisitor {\n-            codemap: codemap,\n-            changes: ChangeSet::from_codemap(codemap),\n-            last_pos: BytePos(0),\n-            block_indent: 0,\n-            config: config\n-        }\n+        FmtVisitor { codemap: codemap,\n+                     changes: ChangeSet::from_codemap(codemap),\n+                     last_pos: BytePos(0),\n+                     block_indent: 0,\n+                     config: config, }\n     }\n \n     pub fn snippet(&self, span: Span) -> String {"}]}