{"sha": "946225d77f65e307de3c216cbc2c686b880a6791", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NjIyNWQ3N2Y2NWUzMDdkZTNjMjE2Y2JjMmM2ODZiODgwYTY3OTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-09T12:31:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-09T12:31:40Z"}, "message": "auto merge of #18755 : japaric/rust/ord, r=alexcrichton\n\nCloses #18738\r\ncc #15689\r\n\r\nr? @alexcrichton \r\ncc @cmr", "tree": {"sha": "9c59ba3a3c98527c91baf65aa3e0e8dcf5567893", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c59ba3a3c98527c91baf65aa3e0e8dcf5567893"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/946225d77f65e307de3c216cbc2c686b880a6791", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/946225d77f65e307de3c216cbc2c686b880a6791", "html_url": "https://github.com/rust-lang/rust/commit/946225d77f65e307de3c216cbc2c686b880a6791", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/946225d77f65e307de3c216cbc2c686b880a6791/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6b70914b6d74eed4bcaf040efbfdb33844f21c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6b70914b6d74eed4bcaf040efbfdb33844f21c9", "html_url": "https://github.com/rust-lang/rust/commit/a6b70914b6d74eed4bcaf040efbfdb33844f21c9"}, {"sha": "54068eea42ae51a05b500e68a3cc283486cb00d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/54068eea42ae51a05b500e68a3cc283486cb00d4", "html_url": "https://github.com/rust-lang/rust/commit/54068eea42ae51a05b500e68a3cc283486cb00d4"}], "stats": {"total": 66, "additions": 56, "deletions": 10}, "files": [{"sha": "7727bb824db3abf443d5ae134443bfba8ac34d03", "filename": "src/libsyntax/ext/deriving/cmp/eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/946225d77f65e307de3c216cbc2c686b880a6791/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/946225d77f65e307de3c216cbc2c686b880a6791/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs?ref=946225d77f65e307de3c216cbc2c686b880a6791", "patch": "@@ -30,7 +30,7 @@ pub fn expand_deriving_eq(cx: &mut ExtCtxt,\n             |cx, span, subexpr, self_f, other_fs| {\n                 let other_f = match other_fs {\n                     [ref o_f] => o_f,\n-                    _ => cx.span_bug(span, \"not exactly 2 arguments in `deriving(Eq)`\")\n+                    _ => cx.span_bug(span, \"not exactly 2 arguments in `deriving(PartialEq)`\")\n                 };\n \n                 let eq = cx.expr_binary(span, ast::BiEq, self_f, other_f.clone());\n@@ -47,7 +47,7 @@ pub fn expand_deriving_eq(cx: &mut ExtCtxt,\n             |cx, span, subexpr, self_f, other_fs| {\n                 let other_f = match other_fs {\n                     [ref o_f] => o_f,\n-                    _ => cx.span_bug(span, \"not exactly 2 arguments in `deriving(Eq)`\")\n+                    _ => cx.span_bug(span, \"not exactly 2 arguments in `deriving(PartialEq)`\")\n                 };\n \n                 let eq = cx.expr_binary(span, ast::BiNe, self_f, other_f.clone());"}, {"sha": "cd44dde7004d84d189c702ae519f77fd701ae62b", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/946225d77f65e307de3c216cbc2c686b880a6791/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/946225d77f65e307de3c216cbc2c686b880a6791/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=946225d77f65e307de3c216cbc2c686b880a6791", "patch": "@@ -107,12 +107,19 @@ pub fn cs_partial_cmp(cx: &mut ExtCtxt, span: Span,\n     let ordering = cx.expr_path(ordering);\n     let equals_expr = cx.expr_some(span, ordering);\n \n+    let partial_cmp_path = vec![\n+        cx.ident_of(\"std\"),\n+        cx.ident_of(\"cmp\"),\n+        cx.ident_of(\"PartialOrd\"),\n+        cx.ident_of(\"partial_cmp\"),\n+    ];\n+\n     /*\n     Builds:\n \n-    let __test = self_field1.partial_cmp(&other_field2);\n+    let __test = ::std::cmp::PartialOrd::partial_cmp(&self_field1, &other_field1);\n     if __test == ::std::option::Some(::std::cmp::Equal) {\n-        let __test = self_field2.partial_cmp(&other_field2);\n+        let __test = ::std::cmp::PartialOrd::partial_cmp(&self_field2, &other_field2);\n         if __test == ::std::option::Some(::std::cmp::Equal) {\n             ...\n         } else {\n@@ -124,18 +131,32 @@ pub fn cs_partial_cmp(cx: &mut ExtCtxt, span: Span,\n \n     FIXME #6449: These `if`s could/should be `match`es.\n     */\n-    cs_same_method_fold(\n+    cs_fold(\n         // foldr nests the if-elses correctly, leaving the first field\n         // as the outermost one, and the last as the innermost.\n         false,\n-        |cx, span, old, new| {\n+        |cx, span, old, self_f, other_fs| {\n             // let __test = new;\n             // if __test == Some(::std::cmp::Equal) {\n             //    old\n             // } else {\n             //    __test\n             // }\n \n+            let new = {\n+                let other_f = match other_fs {\n+                    [ref o_f] => o_f,\n+                    _ => cx.span_bug(span, \"not exactly 2 arguments in `deriving(PartialOrd)`\"),\n+                };\n+\n+                let args = vec![\n+                    cx.expr_addr_of(span, self_f),\n+                    cx.expr_addr_of(span, other_f.clone()),\n+                ];\n+\n+                cx.expr_call_global(span, partial_cmp_path.clone(), args)\n+            };\n+\n             let assign = cx.stmt_let(span, false, test_id, new);\n \n             let cond = cx.expr_binary(span, ast::BiEq,\n@@ -149,7 +170,7 @@ pub fn cs_partial_cmp(cx: &mut ExtCtxt, span: Span,\n         equals_expr.clone(),\n         |cx, span, (self_args, tag_tuple), _non_self_args| {\n             if self_args.len() != 2 {\n-                cx.span_bug(span, \"not exactly 2 arguments in `deriving(Ord)`\")\n+                cx.span_bug(span, \"not exactly 2 arguments in `deriving(PartialOrd)`\")\n             } else {\n                 some_ordering_collapsed(cx, span, PartialCmpOp, tag_tuple)\n             }\n@@ -183,7 +204,7 @@ fn cs_op(less: bool, equal: bool, cx: &mut ExtCtxt,\n             */\n             let other_f = match other_fs {\n                 [ref o_f] => o_f,\n-                _ => cx.span_bug(span, \"not exactly 2 arguments in `deriving(Ord)`\")\n+                _ => cx.span_bug(span, \"not exactly 2 arguments in `deriving(PartialOrd)`\")\n             };\n \n             let cmp = cx.expr_binary(span, op, self_f.clone(), other_f.clone());\n@@ -197,7 +218,7 @@ fn cs_op(less: bool, equal: bool, cx: &mut ExtCtxt,\n         cx.expr_bool(span, equal),\n         |cx, span, (self_args, tag_tuple), _non_self_args| {\n             if self_args.len() != 2 {\n-                cx.span_bug(span, \"not exactly 2 arguments in `deriving(Ord)`\")\n+                cx.span_bug(span, \"not exactly 2 arguments in `deriving(PartialOrd)`\")\n             } else {\n                 let op = match (less, equal) {\n                     (true,  true) => LeOp, (true,  false) => LtOp,"}, {"sha": "d84ad677e5df50f85fe44f9d6dbb05ae67e49ba8", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/946225d77f65e307de3c216cbc2c686b880a6791/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/946225d77f65e307de3c216cbc2c686b880a6791/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=946225d77f65e307de3c216cbc2c686b880a6791", "patch": "@@ -108,7 +108,7 @@ pub fn cs_cmp(cx: &mut ExtCtxt, span: Span,\n         cx.expr_path(equals_path.clone()),\n         |cx, span, (self_args, tag_tuple), _non_self_args| {\n             if self_args.len() != 2 {\n-                cx.span_bug(span, \"not exactly 2 arguments in `deriving(TotalOrd)`\")\n+                cx.span_bug(span, \"not exactly 2 arguments in `deriving(Ord)`\")\n             } else {\n                 ordering_collapsed(cx, span, tag_tuple)\n             }"}, {"sha": "7958b9ec117cbea071278b4369c1b144f190e728", "filename": "src/test/run-pass/issue-18738.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/946225d77f65e307de3c216cbc2c686b880a6791/src%2Ftest%2Frun-pass%2Fissue-18738.rs", "raw_url": "https://github.com/rust-lang/rust/raw/946225d77f65e307de3c216cbc2c686b880a6791/src%2Ftest%2Frun-pass%2Fissue-18738.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18738.rs?ref=946225d77f65e307de3c216cbc2c686b880a6791", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[deriving(PartialEq, PartialOrd)]\n+enum Test<'a> {\n+    Int(&'a int),\n+    Slice(&'a [u8]),\n+}\n+\n+#[deriving(PartialEq, PartialOrd)]\n+struct Version {\n+    vendor_info: &'static str\n+}\n+\n+#[deriving(PartialEq, PartialOrd)]\n+struct Foo(&'static str);\n+\n+fn main() {}"}]}