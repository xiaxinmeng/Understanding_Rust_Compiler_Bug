{"sha": "c98895d9f20eec10993bf2c3f07a2f2945228e49", "node_id": "C_kwDOAAsO6NoAKGM5ODg5NWQ5ZjIwZWVjMTA5OTNiZjJjM2YwN2EyZjI5NDUyMjhlNDk", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-04-16T08:06:55Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-04-16T09:42:50Z"}, "message": "Various minor Idx-related tweaks\n\nNothing particularly exciting here, but a couple of things I noticed as I was looking for more index conversions to simplify.", "tree": {"sha": "b1c752440e9426e5dbe210d473f28abdd4df559c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1c752440e9426e5dbe210d473f28abdd4df559c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c98895d9f20eec10993bf2c3f07a2f2945228e49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c98895d9f20eec10993bf2c3f07a2f2945228e49", "html_url": "https://github.com/rust-lang/rust/commit/c98895d9f20eec10993bf2c3f07a2f2945228e49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c98895d9f20eec10993bf2c3f07a2f2945228e49/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a711152615ad9294dc0e5ee6885c8e9bb8418a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a711152615ad9294dc0e5ee6885c8e9bb8418a9", "html_url": "https://github.com/rust-lang/rust/commit/2a711152615ad9294dc0e5ee6885c8e9bb8418a9"}], "stats": {"total": 107, "additions": 55, "deletions": 52}, "files": [{"sha": "2b01aca2ee4824a6d1599a96d3ed186ae0f82096", "filename": "compiler/rustc_abi/src/layout.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_abi%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_abi%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flayout.rs?ref=c98895d9f20eec10993bf2c3f07a2f2945228e49", "patch": "@@ -461,8 +461,8 @@ pub trait LayoutCalculator {\n             let all_indices = variants.indices();\n             let needs_disc =\n                 |index: VariantIdx| index != largest_variant_index && !absent(&variants[index]);\n-            let niche_variants = all_indices.clone().find(|v| needs_disc(*v)).unwrap().index()\n-                ..=all_indices.rev().find(|v| needs_disc(*v)).unwrap().index();\n+            let niche_variants = all_indices.clone().find(|v| needs_disc(*v)).unwrap()\n+                ..=all_indices.rev().find(|v| needs_disc(*v)).unwrap();\n \n             let count = niche_variants.size_hint().1.unwrap() as u128;\n \n@@ -560,8 +560,7 @@ pub trait LayoutCalculator {\n                     tag: niche_scalar,\n                     tag_encoding: TagEncoding::Niche {\n                         untagged_variant: largest_variant_index,\n-                        niche_variants: (VariantIdx::new(*niche_variants.start())\n-                            ..=VariantIdx::new(*niche_variants.end())),\n+                        niche_variants,\n                         niche_start,\n                     },\n                     tag_field: 0,"}, {"sha": "9f96575e2f1d28359329aa79856ffa0620f94a95", "filename": "compiler/rustc_abi/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flib.rs?ref=c98895d9f20eec10993bf2c3f07a2f2945228e49", "patch": "@@ -11,7 +11,7 @@ use bitflags::bitflags;\n use rustc_data_structures::intern::Interned;\n #[cfg(feature = \"nightly\")]\n use rustc_data_structures::stable_hasher::StableOrd;\n-use rustc_index::vec::{Idx, IndexSlice, IndexVec};\n+use rustc_index::vec::{IndexSlice, IndexVec};\n #[cfg(feature = \"nightly\")]\n use rustc_macros::HashStable_Generic;\n #[cfg(feature = \"nightly\")]"}, {"sha": "d16741757d1f1e03f8882021f36c4aef39ba2ece", "filename": "compiler/rustc_ast/src/node_id.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_ast%2Fsrc%2Fnode_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_ast%2Fsrc%2Fnode_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fnode_id.rs?ref=c98895d9f20eec10993bf2c3f07a2f2945228e49", "patch": "@@ -9,14 +9,14 @@ rustc_index::newtype_index! {\n     ///\n     /// [`DefId`]: rustc_span::def_id::DefId\n     #[debug_format = \"NodeId({})\"]\n-    pub struct NodeId {}\n+    pub struct NodeId {\n+        /// The [`NodeId`] used to represent the root of the crate.\n+        const CRATE_NODE_ID = 0;\n+    }\n }\n \n rustc_data_structures::define_id_collections!(NodeMap, NodeSet, NodeMapEntry, NodeId);\n \n-/// The [`NodeId`] used to represent the root of the crate.\n-pub const CRATE_NODE_ID: NodeId = NodeId::from_u32(0);\n-\n /// When parsing and at the beginning of doing expansions, we initially give all AST nodes\n /// this dummy AST [`NodeId`]. Then, during a later phase of expansion, we renumber them\n /// to have small, positive IDs."}, {"sha": "aa7cf3578ea829431cf1af737130a65a9e4f7880", "filename": "compiler/rustc_borrowck/src/diagnostics/var_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fvar_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fvar_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fvar_name.rs?ref=c98895d9f20eec10993bf2c3f07a2f2945228e49", "patch": "@@ -3,7 +3,7 @@\n \n use crate::region_infer::RegionInferenceContext;\n use crate::Upvar;\n-use rustc_index::vec::{Idx, IndexSlice};\n+use rustc_index::vec::IndexSlice;\n use rustc_middle::mir::{Body, Local};\n use rustc_middle::ty::{RegionVid, TyCtxt};\n use rustc_span::source_map::Span;\n@@ -117,7 +117,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         argument_index: usize,\n     ) -> (Option<Symbol>, Span) {\n         let implicit_inputs = self.universal_regions().defining_ty.implicit_inputs();\n-        let argument_local = Local::new(implicit_inputs + argument_index + 1);\n+        let argument_local = Local::from_usize(implicit_inputs + argument_index + 1);\n         debug!(\"get_argument_name_and_span_for_region: argument_local={argument_local:?}\");\n \n         let argument_name = local_names[argument_local];"}, {"sha": "87fad9a355d3d69dc0d69ca770fcfdbdc3fa899d", "filename": "compiler/rustc_borrowck/src/facts.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_borrowck%2Fsrc%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_borrowck%2Fsrc%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ffacts.rs?ref=c98895d9f20eec10993bf2c3f07a2f2945228e49", "patch": "@@ -4,7 +4,6 @@ use crate::location::{LocationIndex, LocationTable};\n use crate::BorrowIndex;\n use polonius_engine::AllFacts as PoloniusFacts;\n use polonius_engine::Atom;\n-use rustc_index::vec::Idx;\n use rustc_middle::mir::Local;\n use rustc_middle::ty::{RegionVid, TyCtxt};\n use rustc_mir_dataflow::move_paths::MovePathIndex;\n@@ -93,13 +92,13 @@ impl AllFactsExt for AllFacts {\n \n impl Atom for BorrowIndex {\n     fn index(self) -> usize {\n-        Idx::index(self)\n+        self.as_usize()\n     }\n }\n \n impl Atom for LocationIndex {\n     fn index(self) -> usize {\n-        Idx::index(self)\n+        self.as_usize()\n     }\n }\n "}, {"sha": "08fa912f3682a7cfeee991b5f6cba692075b5741", "filename": "compiler/rustc_borrowck/src/location.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs?ref=c98895d9f20eec10993bf2c3f07a2f2945228e49", "patch": "@@ -1,6 +1,6 @@\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::vec::IndexVec;\n use rustc_middle::mir::{BasicBlock, Body, Location};\n \n /// Maps between a MIR Location, which identifies a particular\n@@ -50,19 +50,19 @@ impl LocationTable {\n     }\n \n     pub fn all_points(&self) -> impl Iterator<Item = LocationIndex> {\n-        (0..self.num_points).map(LocationIndex::new)\n+        (0..self.num_points).map(LocationIndex::from_usize)\n     }\n \n     pub fn start_index(&self, location: Location) -> LocationIndex {\n         let Location { block, statement_index } = location;\n         let start_index = self.statements_before_block[block];\n-        LocationIndex::new(start_index + statement_index * 2)\n+        LocationIndex::from_usize(start_index + statement_index * 2)\n     }\n \n     pub fn mid_index(&self, location: Location) -> LocationIndex {\n         let Location { block, statement_index } = location;\n         let start_index = self.statements_before_block[block];\n-        LocationIndex::new(start_index + statement_index * 2 + 1)\n+        LocationIndex::from_usize(start_index + statement_index * 2 + 1)\n     }\n \n     pub fn to_location(&self, index: LocationIndex) -> RichLocation {"}, {"sha": "73b8765e57d1abc58e1aacc40e7d02f286ae855e", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=c98895d9f20eec10993bf2c3f07a2f2945228e49", "patch": "@@ -7,8 +7,8 @@ use rustc_hir::def_id::LocalDefId;\n use rustc_index::vec::IndexSlice;\n use rustc_middle::mir::{create_dump_file, dump_enabled, dump_mir, PassWhere};\n use rustc_middle::mir::{\n-    BasicBlock, Body, ClosureOutlivesSubject, ClosureRegionRequirements, LocalKind, Location,\n-    Promoted,\n+    Body, ClosureOutlivesSubject, ClosureRegionRequirements, LocalKind, Location, Promoted,\n+    START_BLOCK,\n };\n use rustc_middle::ty::{self, OpaqueHiddenType, TyCtxt};\n use rustc_span::symbol::sym;\n@@ -94,8 +94,8 @@ fn populate_polonius_move_facts(\n         }\n     }\n \n-    let fn_entry_start = location_table\n-        .start_index(Location { block: BasicBlock::from_u32(0u32), statement_index: 0 });\n+    let fn_entry_start =\n+        location_table.start_index(Location { block: START_BLOCK, statement_index: 0 });\n \n     // initialized_at\n     for init in move_data.inits.iter() {"}, {"sha": "9250b8d3eaf2a31ec3bc9dafbd97aef678c1ccf7", "filename": "compiler/rustc_borrowck/src/type_check/input_output.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs?ref=c98895d9f20eec10993bf2c3f07a2f2945228e49", "patch": "@@ -7,7 +7,6 @@\n //! `RETURN_PLACE` the MIR arguments) are always fully normalized (and\n //! contain revealed `impl Trait` values).\n \n-use rustc_index::vec::Idx;\n use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, Ty};\n@@ -83,7 +82,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             }\n \n             // In MIR, argument N is stored in local N+1.\n-            let local = Local::new(argument_index + 1);\n+            let local = Local::from_usize(argument_index + 1);\n \n             let mir_input_ty = body.local_decls[local].ty;\n "}, {"sha": "74241f722a67ed9138a335c00af9d736adc565c1", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=c98895d9f20eec10993bf2c3f07a2f2945228e49", "patch": "@@ -19,7 +19,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::BodyOwnerKind;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::vec::IndexVec;\n use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::{self, InlineConstSubsts, InlineConstSubstsParts, RegionVid, Ty, TyCtxt};\n@@ -289,7 +289,7 @@ impl<'tcx> UniversalRegions<'tcx> {\n     /// Returns an iterator over all the RegionVids corresponding to\n     /// universally quantified free regions.\n     pub fn universal_regions(&self) -> impl Iterator<Item = RegionVid> {\n-        (FIRST_GLOBAL_INDEX..self.num_universals).map(RegionVid::new)\n+        (FIRST_GLOBAL_INDEX..self.num_universals).map(RegionVid::from_usize)\n     }\n \n     /// Returns `true` if `r` is classified as an local region."}, {"sha": "a0a8246be15248fdb82a7b437ea220d9e034cb6d", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=c98895d9f20eec10993bf2c3f07a2f2945228e49", "patch": "@@ -12,7 +12,6 @@ use crate::MemFlags;\n use rustc_ast as ast;\n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_hir::lang_items::LangItem;\n-use rustc_index::vec::Idx;\n use rustc_middle::mir::{self, AssertKind, SwitchTargets};\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf, ValidityRequirement};\n use rustc_middle::ty::print::{with_no_trimmed_paths, with_no_visible_paths};\n@@ -369,7 +368,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         if self.fn_abi.c_variadic {\n             // The `VaList` \"spoofed\" argument is just after all the real arguments.\n             let va_list_arg_idx = self.fn_abi.args.len();\n-            match self.locals[mir::Local::new(1 + va_list_arg_idx)] {\n+            match self.locals[mir::Local::from_usize(1 + va_list_arg_idx)] {\n                 LocalRef::Place(va_list) => {\n                     bx.va_end(va_list.llval);\n                 }"}, {"sha": "015a9beab832d2d388bf90cb2f9752efbeb1f886", "filename": "compiler/rustc_const_eval/src/interpret/discriminant.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fdiscriminant.rs?ref=c98895d9f20eec10993bf2c3f07a2f2945228e49", "patch": "@@ -211,18 +211,19 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                             let variant_index_relative = u32::try_from(variant_index_relative)\n                                 .expect(\"we checked that this fits into a u32\");\n                             // Then computing the absolute variant idx should not overflow any more.\n-                            let variant_index = variants_start\n-                                .checked_add(variant_index_relative)\n-                                .expect(\"overflow computing absolute variant idx\");\n-                            let variants_len = op\n+                            let variant_index = VariantIdx::from_u32(\n+                                variants_start\n+                                    .checked_add(variant_index_relative)\n+                                    .expect(\"overflow computing absolute variant idx\"),\n+                            );\n+                            let variants = op\n                                 .layout\n                                 .ty\n                                 .ty_adt_def()\n                                 .expect(\"tagged layout for non adt\")\n-                                .variants()\n-                                .len();\n-                            assert!(usize::try_from(variant_index).unwrap() < variants_len);\n-                            VariantIdx::from_u32(variant_index)\n+                                .variants();\n+                            assert!(variant_index < variants.next_index());\n+                            variant_index\n                         } else {\n                             untagged_variant\n                         }"}, {"sha": "525acfdaa81247746a09c7a105beefa24eb0a2d2", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=c98895d9f20eec10993bf2c3f07a2f2945228e49", "patch": "@@ -17,7 +17,6 @@ use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, Article, AssocItem, Ty, TypeAndMut, TypeFoldable};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{BytePos, Span, DUMMY_SP};\n-use rustc_target::abi::FieldIdx;\n use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::traits::ObligationCause;\n \n@@ -875,7 +874,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     variant.fields.len() == 1\n                 })\n                 .filter_map(|variant| {\n-                    let sole_field = &variant.fields[FieldIdx::from_u32(0)];\n+                    let sole_field = &variant.single_field();\n \n                     let field_is_local = sole_field.did.is_local();\n                     let field_is_accessible ="}, {"sha": "0fdb29a5e48466d8f4ed9473f36bf8212b678bd3", "filename": "compiler/rustc_hir_typeck/src/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_hir_typeck%2Fsrc%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_hir_typeck%2Fsrc%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fintrinsicck.rs?ref=c98895d9f20eec10993bf2c3f07a2f2945228e49", "patch": "@@ -4,7 +4,7 @@ use rustc_hir as hir;\n use rustc_index::vec::Idx;\n use rustc_middle::ty::layout::{LayoutError, SizeSkeleton};\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitableExt};\n-use rustc_target::abi::{FieldIdx, Pointer, VariantIdx};\n+use rustc_target::abi::{Pointer, VariantIdx};\n \n use super::FnCtxt;\n \n@@ -28,7 +28,7 @@ fn unpack_option_like<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n         }\n \n         if def.variant(data_idx).fields.len() == 1 {\n-            return def.variant(data_idx).fields[FieldIdx::from_u32(0)].ty(tcx, substs);\n+            return def.variant(data_idx).single_field().ty(tcx, substs);\n         }\n     }\n "}, {"sha": "d885d040707e4a20b69b58c8ceaec304f7d62019", "filename": "compiler/rustc_infer/src/infer/error_reporting/suggest.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs?ref=c98895d9f20eec10993bf2c3f07a2f2945228e49", "patch": "@@ -10,7 +10,6 @@ use rustc_middle::traits::{\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self as ty, GenericArgKind, IsSuggestable, Ty, TypeVisitableExt};\n use rustc_span::{sym, BytePos, Span};\n-use rustc_target::abi::FieldIdx;\n \n use crate::errors::{\n     ConsiderAddingAwait, FnConsiderCasting, FnItemsAreDistinct, FnUniqTypes,\n@@ -114,7 +113,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                         variant.fields.len() == 1 && variant.ctor_kind() == Some(CtorKind::Fn)\n                     })\n                     .filter_map(|variant| {\n-                        let sole_field = &variant.fields[FieldIdx::from_u32(0)];\n+                        let sole_field = &variant.single_field();\n                         let sole_field_ty = sole_field.ty(self.tcx, substs);\n                         if self.same_type_modulo_infer(sole_field_ty, exp_found.found) {\n                             let variant_path ="}, {"sha": "18a397c9abb962f4debbbb858dd5a180ee63c3a1", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=c98895d9f20eec10993bf2c3f07a2f2945228e49", "patch": "@@ -1969,6 +1969,16 @@ impl VariantDef {\n     pub fn ctor_def_id(&self) -> Option<DefId> {\n         self.ctor.map(|(_, def_id)| def_id)\n     }\n+\n+    /// Returns the one field in this variant.\n+    ///\n+    /// `panic!`s if there are no fields or multiple fields.\n+    #[inline]\n+    pub fn single_field(&self) -> &FieldDef {\n+        assert!(self.fields.len() == 1);\n+\n+        &self.fields[FieldIdx::from_u32(0)]\n+    }\n }\n \n impl PartialEq for VariantDef {"}, {"sha": "9dcc41e27269f56ad3f560a54841afb838b1a553", "filename": "compiler/rustc_query_system/src/dep_graph/query.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fquery.rs?ref=c98895d9f20eec10993bf2c3f07a2f2945228e49", "patch": "@@ -24,10 +24,7 @@ impl<K: DepKind> DepGraphQuery<K> {\n \n     pub fn push(&mut self, index: DepNodeIndex, node: DepNode<K>, edges: &[DepNodeIndex]) {\n         let source = self.graph.add_node(node);\n-        if index.index() >= self.dep_index_to_index.len() {\n-            self.dep_index_to_index.resize(index.index() + 1, None);\n-        }\n-        self.dep_index_to_index[index] = Some(source);\n+        self.dep_index_to_index.insert(index, source);\n         self.indices.insert(node, source);\n \n         for &target in edges.iter() {"}, {"sha": "dfdd52720a05224117f4523459a2200564559036", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt/canonical.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98895d9f20eec10993bf2c3f07a2f2945228e49/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs?ref=c98895d9f20eec10993bf2c3f07a2f2945228e49", "patch": "@@ -11,12 +11,13 @@\n use super::{CanonicalGoal, Certainty, EvalCtxt, Goal};\n use crate::solve::canonicalize::{CanonicalizeMode, Canonicalizer};\n use crate::solve::{CanonicalResponse, QueryResult, Response};\n+use rustc_index::vec::IndexVec;\n use rustc_infer::infer::canonical::query_response::make_query_region_constraints;\n use rustc_infer::infer::canonical::CanonicalVarValues;\n use rustc_infer::infer::canonical::{CanonicalExt, QueryRegionConstraints};\n use rustc_middle::traits::query::NoSolution;\n use rustc_middle::traits::solve::{ExternalConstraints, ExternalConstraintsData};\n-use rustc_middle::ty::{self, GenericArgKind};\n+use rustc_middle::ty::{self, BoundVar, GenericArgKind};\n use rustc_span::DUMMY_SP;\n use std::iter;\n use std::ops::Deref;\n@@ -139,25 +140,25 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         //\n         // We therefore instantiate the existential variable in the canonical response with the\n         // inference variable of the input right away, which is more performant.\n-        let mut opt_values = vec![None; response.variables.len()];\n+        let mut opt_values = IndexVec::from_elem_n(None, response.variables.len());\n         for (original_value, result_value) in iter::zip(original_values, var_values.var_values) {\n             match result_value.unpack() {\n                 GenericArgKind::Type(t) => {\n                     if let &ty::Bound(debruijn, b) = t.kind() {\n                         assert_eq!(debruijn, ty::INNERMOST);\n-                        opt_values[b.var.index()] = Some(*original_value);\n+                        opt_values[b.var] = Some(*original_value);\n                     }\n                 }\n                 GenericArgKind::Lifetime(r) => {\n                     if let ty::ReLateBound(debruijn, br) = *r {\n                         assert_eq!(debruijn, ty::INNERMOST);\n-                        opt_values[br.var.index()] = Some(*original_value);\n+                        opt_values[br.var] = Some(*original_value);\n                     }\n                 }\n                 GenericArgKind::Const(c) => {\n                     if let ty::ConstKind::Bound(debrujin, b) = c.kind() {\n                         assert_eq!(debrujin, ty::INNERMOST);\n-                        opt_values[b.index()] = Some(*original_value);\n+                        opt_values[b] = Some(*original_value);\n                     }\n                 }\n             }\n@@ -180,7 +181,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n                     // more placeholders then they should be able to. However the inference variables have\n                     // to \"come from somewhere\", so by equating them with the original values of the caller\n                     // later on, we pull them down into their correct universe again.\n-                    if let Some(v) = opt_values[index] {\n+                    if let Some(v) = opt_values[BoundVar::from_usize(index)] {\n                         v\n                     } else {\n                         self.infcx.instantiate_canonical_var(DUMMY_SP, info, |_| prev_universe)"}]}