{"sha": "fa45602b71c59c6315fdb07e925dec61f5827ad9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNDU2MDJiNzFjNTljNjMxNWZkYjA3ZTkyNWRlYzYxZjU4MjdhZDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-26T21:46:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-26T21:46:13Z"}, "message": "Auto merge of #54929 - csmoe:cfg_lint, r=petrochenkov\n\nSuggest to remove prefix `b` in cfg attribute lint string\n\nCloses #54926\nr? @estebank", "tree": {"sha": "5f4e8068e3e90fed1a3718e693d7fcab2a25a1cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f4e8068e3e90fed1a3718e693d7fcab2a25a1cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa45602b71c59c6315fdb07e925dec61f5827ad9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa45602b71c59c6315fdb07e925dec61f5827ad9", "html_url": "https://github.com/rust-lang/rust/commit/fa45602b71c59c6315fdb07e925dec61f5827ad9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa45602b71c59c6315fdb07e925dec61f5827ad9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e6f30ec3e6bda159063fcd126dcb14725fef92d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e6f30ec3e6bda159063fcd126dcb14725fef92d", "html_url": "https://github.com/rust-lang/rust/commit/3e6f30ec3e6bda159063fcd126dcb14725fef92d"}, {"sha": "81a609bd4c7a8244e1cedaf9d34824b241deadbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/81a609bd4c7a8244e1cedaf9d34824b241deadbb", "html_url": "https://github.com/rust-lang/rust/commit/81a609bd4c7a8244e1cedaf9d34824b241deadbb"}], "stats": {"total": 299, "additions": 221, "deletions": 78}, "files": [{"sha": "ec8e7d060587f450821f45c82be5f976cb9ff577", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=fa45602b71c59c6315fdb07e925dec61f5827ad9", "patch": "@@ -134,11 +134,11 @@ impl<'a, 'tcx: 'a> Annotator<'a, 'tcx> {\n         if self.tcx.features().staged_api {\n             // This crate explicitly wants staged API.\n             debug!(\"annotate(id = {:?}, attrs = {:?})\", id, attrs);\n-            if let Some(..) = attr::find_deprecation(self.tcx.sess.diagnostic(), attrs, item_sp) {\n+            if let Some(..) = attr::find_deprecation(&self.tcx.sess.parse_sess, attrs, item_sp) {\n                 self.tcx.sess.span_err(item_sp, \"`#[deprecated]` cannot be used in staged api, \\\n                                                  use `#[rustc_deprecated]` instead\");\n             }\n-            if let Some(mut stab) = attr::find_stability(self.tcx.sess.diagnostic(),\n+            if let Some(mut stab) = attr::find_stability(&self.tcx.sess.parse_sess,\n                                                          attrs, item_sp) {\n                 // Error if prohibited, or can't inherit anything from a container\n                 if kind == AnnotationKind::Prohibited ||\n@@ -224,7 +224,7 @@ impl<'a, 'tcx: 'a> Annotator<'a, 'tcx> {\n                 }\n             }\n \n-            if let Some(depr) = attr::find_deprecation(self.tcx.sess.diagnostic(), attrs, item_sp) {\n+            if let Some(depr) = attr::find_deprecation(&self.tcx.sess.parse_sess, attrs, item_sp) {\n                 if kind == AnnotationKind::Prohibited {\n                     self.tcx.sess.span_err(item_sp, \"This deprecation annotation is useless\");\n                 }"}, {"sha": "48ba69fee1cfd0b89f2e25b0db97f2ba551c4dcd", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=fa45602b71c59c6315fdb07e925dec61f5827ad9", "patch": "@@ -1928,7 +1928,7 @@ impl ReprOptions {\n         let mut max_align = 0;\n         let mut min_pack = 0;\n         for attr in tcx.get_attrs(did).iter() {\n-            for r in attr::find_repr_attrs(tcx.sess.diagnostic(), attr) {\n+            for r in attr::find_repr_attrs(&tcx.sess.parse_sess, attr) {\n                 flags.insert(match r {\n                     attr::ReprC => ReprFlags::IS_C,\n                     attr::ReprPacked(pack) => {"}, {"sha": "40781b0771d89d72a0161bb83ed933f54b21aeb2", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=fa45602b71c59c6315fdb07e925dec61f5827ad9", "patch": "@@ -121,7 +121,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonCamelCaseTypes {\n         let has_repr_c = it.attrs\n             .iter()\n             .any(|attr| {\n-                attr::find_repr_attrs(cx.tcx.sess.diagnostic(), attr)\n+                attr::find_repr_attrs(&cx.tcx.sess.parse_sess, attr)\n                     .iter()\n                     .any(|r| r == &attr::ReprC)\n             });"}, {"sha": "7e25694d5598fc9b00a0c7b13a5af14a701fe583", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=fa45602b71c59c6315fdb07e925dec61f5827ad9", "patch": "@@ -1713,7 +1713,7 @@ fn check_packed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sp: Span, def_id: DefId)\n     let repr = tcx.adt_def(def_id).repr;\n     if repr.packed() {\n         for attr in tcx.get_attrs(def_id).iter() {\n-            for r in attr::find_repr_attrs(tcx.sess.diagnostic(), attr) {\n+            for r in attr::find_repr_attrs(&tcx.sess.parse_sess, attr) {\n                 if let attr::ReprPacked(pack) = r {\n                     if pack != repr.pack {\n                         struct_span_err!(tcx.sess, sp, E0634,"}, {"sha": "a9acc70d1a5b982f421a7047c13b2412ee2e8a1a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=fa45602b71c59c6315fdb07e925dec61f5827ad9", "patch": "@@ -1328,6 +1328,14 @@ impl LitKind {\n         }\n     }\n \n+    /// Returns true if this literal is byte literal string false otherwise.\n+    pub fn is_bytestr(&self) -> bool {\n+        match self {\n+            LitKind::ByteStr(_) => true,\n+            _ => false,\n+        }\n+    }\n+\n     /// Returns true if this is a numeric literal.\n     pub fn is_numeric(&self) -> bool {\n         match *self {"}, {"sha": "1bbc1accc07d64943801dfd98636a312c03a702c", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 147, "deletions": 55, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=fa45602b71c59c6315fdb07e925dec61f5827ad9", "patch": "@@ -24,10 +24,11 @@ enum AttrError {\n     MissingSince,\n     MissingFeature,\n     MultipleStabilityLevels,\n-    UnsupportedLiteral\n+    UnsupportedLiteral(&'static str, /* is_bytestr */ bool),\n }\n \n-fn handle_errors(diag: &Handler, span: Span, error: AttrError) {\n+fn handle_errors(sess: &ParseSess, span: Span, error: AttrError) {\n+    let diag = &sess.span_diagnostic;\n     match error {\n         AttrError::MultipleItem(item) => span_err!(diag, span, E0538,\n                                                    \"multiple '{}' items\", item),\n@@ -44,7 +45,23 @@ fn handle_errors(diag: &Handler, span: Span, error: AttrError) {\n         AttrError::MissingFeature => span_err!(diag, span, E0546, \"missing 'feature'\"),\n         AttrError::MultipleStabilityLevels => span_err!(diag, span, E0544,\n                                                         \"multiple stability levels\"),\n-        AttrError::UnsupportedLiteral => span_err!(diag, span, E0565, \"unsupported literal\"),\n+        AttrError::UnsupportedLiteral(\n+            msg,\n+            is_bytestr,\n+        ) => {\n+            let mut err = struct_span_err!(diag, span, E0565, \"{}\", msg);\n+            if is_bytestr {\n+                if let Ok(lint_str) = sess.source_map().span_to_snippet(span) {\n+                    err.span_suggestion_with_applicability(\n+                        span,\n+                        \"consider removing the prefix\",\n+                        format!(\"{}\", &lint_str[1..]),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+            }\n+            err.emit();\n+        }\n     }\n }\n \n@@ -161,12 +178,12 @@ pub fn contains_feature_attr(attrs: &[Attribute], feature_name: &str) -> bool {\n }\n \n /// Find the first stability attribute. `None` if none exists.\n-pub fn find_stability(diagnostic: &Handler, attrs: &[Attribute],\n+pub fn find_stability(sess: &ParseSess, attrs: &[Attribute],\n                       item_sp: Span) -> Option<Stability> {\n-    find_stability_generic(diagnostic, attrs.iter(), item_sp)\n+    find_stability_generic(sess, attrs.iter(), item_sp)\n }\n \n-fn find_stability_generic<'a, I>(diagnostic: &Handler,\n+fn find_stability_generic<'a, I>(sess: &ParseSess,\n                                  attrs_iter: I,\n                                  item_sp: Span)\n                                  -> Option<Stability>\n@@ -178,6 +195,7 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n     let mut rustc_depr: Option<RustcDeprecation> = None;\n     let mut rustc_const_unstable: Option<Symbol> = None;\n     let mut promotable = false;\n+    let diagnostic = &sess.span_diagnostic;\n \n     'outer: for attr in attrs_iter {\n         if ![\n@@ -202,7 +220,7 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n             let meta = meta.as_ref().unwrap();\n             let get = |meta: &MetaItem, item: &mut Option<Symbol>| {\n                 if item.is_some() {\n-                    handle_errors(diagnostic, meta.span, AttrError::MultipleItem(meta.name()));\n+                    handle_errors(sess, meta.span, AttrError::MultipleItem(meta.name()));\n                     return false\n                 }\n                 if let Some(v) = meta.value_str() {\n@@ -229,14 +247,22 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                                 _ => {\n                                     let expected = &[ $( stringify!($name) ),+ ];\n                                     handle_errors(\n-                                        diagnostic,\n+                                        sess,\n                                         mi.span,\n-                                        AttrError::UnknownMetaItem(mi.name(), expected));\n+                                        AttrError::UnknownMetaItem(mi.name(), expected),\n+                                    );\n                                     continue 'outer\n                                 }\n                             }\n                         } else {\n-                            handle_errors(diagnostic, meta.span, AttrError::UnsupportedLiteral);\n+                            handle_errors(\n+                                sess,\n+                                meta.span,\n+                                AttrError::UnsupportedLiteral(\n+                                    \"unsupported literal\",\n+                                    false,\n+                                ),\n+                            );\n                             continue 'outer\n                         }\n                     }\n@@ -261,7 +287,7 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                             })\n                         }\n                         (None, _) => {\n-                            handle_errors(diagnostic, attr.span(), AttrError::MissingSince);\n+                            handle_errors(sess, attr.span(), AttrError::MissingSince);\n                             continue\n                         }\n                         _ => {\n@@ -287,7 +313,7 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                 }\n                 \"unstable\" => {\n                     if stab.is_some() {\n-                        handle_errors(diagnostic, attr.span(), AttrError::MultipleStabilityLevels);\n+                        handle_errors(sess, attr.span(), AttrError::MultipleStabilityLevels);\n                         break\n                     }\n \n@@ -302,7 +328,7 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                                 \"issue\" => if !get(mi, &mut issue) { continue 'outer },\n                                 _ => {\n                                     handle_errors(\n-                                        diagnostic,\n+                                        sess,\n                                         meta.span,\n                                         AttrError::UnknownMetaItem(\n                                             mi.name(),\n@@ -313,7 +339,14 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                                 }\n                             }\n                         } else {\n-                            handle_errors(diagnostic, meta.span, AttrError::UnsupportedLiteral);\n+                            handle_errors(\n+                                sess,\n+                                meta.span,\n+                                AttrError::UnsupportedLiteral(\n+                                    \"unsupported literal\",\n+                                    false,\n+                                ),\n+                            );\n                             continue 'outer\n                         }\n                     }\n@@ -340,7 +373,7 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                             })\n                         }\n                         (None, _, _) => {\n-                            handle_errors(diagnostic, attr.span(), AttrError::MissingFeature);\n+                            handle_errors(sess, attr.span(), AttrError::MissingFeature);\n                             continue\n                         }\n                         _ => {\n@@ -351,29 +384,41 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                 }\n                 \"stable\" => {\n                     if stab.is_some() {\n-                        handle_errors(diagnostic, attr.span(), AttrError::MultipleStabilityLevels);\n+                        handle_errors(sess, attr.span(), AttrError::MultipleStabilityLevels);\n                         break\n                     }\n \n                     let mut feature = None;\n                     let mut since = None;\n                     for meta in metas {\n-                        if let NestedMetaItemKind::MetaItem(ref mi) = meta.node {\n-                            match &*mi.name().as_str() {\n-                                \"feature\" => if !get(mi, &mut feature) { continue 'outer },\n-                                \"since\" => if !get(mi, &mut since) { continue 'outer },\n-                                _ => {\n-                                    handle_errors(\n-                                        diagnostic,\n-                                        meta.span,\n-                                        AttrError::UnknownMetaItem(mi.name(), &[\"since\", \"note\"]),\n-                                    );\n-                                    continue 'outer\n+                        match &meta.node {\n+                            NestedMetaItemKind::MetaItem(mi) => {\n+                                match &*mi.name().as_str() {\n+                                    \"feature\" => if !get(mi, &mut feature) { continue 'outer },\n+                                    \"since\" => if !get(mi, &mut since) { continue 'outer },\n+                                    _ => {\n+                                        handle_errors(\n+                                            sess,\n+                                            meta.span,\n+                                            AttrError::UnknownMetaItem(\n+                                                mi.name(), &[\"since\", \"note\"],\n+                                            ),\n+                                        );\n+                                        continue 'outer\n+                                    }\n                                 }\n+                            },\n+                            NestedMetaItemKind::Literal(lit) => {\n+                                handle_errors(\n+                                    sess,\n+                                    lit.span,\n+                                    AttrError::UnsupportedLiteral(\n+                                        \"unsupported literal\",\n+                                        false,\n+                                    ),\n+                                );\n+                                continue 'outer\n                             }\n-                        } else {\n-                            handle_errors(diagnostic, meta.span, AttrError::UnsupportedLiteral);\n-                            continue 'outer\n                         }\n                     }\n \n@@ -390,11 +435,11 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                             })\n                         }\n                         (None, _) => {\n-                            handle_errors(diagnostic, attr.span(), AttrError::MissingFeature);\n+                            handle_errors(sess, attr.span(), AttrError::MissingFeature);\n                             continue\n                         }\n                         _ => {\n-                            handle_errors(diagnostic, attr.span(), AttrError::MissingSince);\n+                            handle_errors(sess, attr.span(), AttrError::MissingSince);\n                             continue\n                         }\n                     }\n@@ -462,7 +507,15 @@ pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Feat\n                 error(cfg.span, \"unexpected parentheses after `cfg` predicate key\")\n             }\n             MetaItemKind::NameValue(lit) if !lit.node.is_str() => {\n-                error(lit.span, \"literal in `cfg` predicate value must be a string\")\n+                handle_errors(\n+                    sess,\n+                    lit.span,\n+                    AttrError::UnsupportedLiteral(\n+                        \"literal in `cfg` predicate value must be a string\",\n+                        lit.node.is_bytestr()\n+                    ),\n+                );\n+                true\n             }\n             MetaItemKind::NameValue(..) | MetaItemKind::Word => {\n                 sess.config.contains(&(cfg.name(), cfg.value_str()))\n@@ -481,7 +534,14 @@ pub fn eval_condition<F>(cfg: &ast::MetaItem, sess: &ParseSess, eval: &mut F)\n         ast::MetaItemKind::List(ref mis) => {\n             for mi in mis.iter() {\n                 if !mi.is_meta_item() {\n-                    handle_errors(&sess.span_diagnostic, mi.span, AttrError::UnsupportedLiteral);\n+                    handle_errors(\n+                        sess,\n+                        mi.span,\n+                        AttrError::UnsupportedLiteral(\n+                            \"unsupported literal\",\n+                            false\n+                        ),\n+                    );\n                     return false;\n                 }\n             }\n@@ -523,18 +583,19 @@ pub struct Deprecation {\n }\n \n /// Find the deprecation attribute. `None` if none exists.\n-pub fn find_deprecation(diagnostic: &Handler, attrs: &[Attribute],\n+pub fn find_deprecation(sess: &ParseSess, attrs: &[Attribute],\n                         item_sp: Span) -> Option<Deprecation> {\n-    find_deprecation_generic(diagnostic, attrs.iter(), item_sp)\n+    find_deprecation_generic(sess, attrs.iter(), item_sp)\n }\n \n-fn find_deprecation_generic<'a, I>(diagnostic: &Handler,\n+fn find_deprecation_generic<'a, I>(sess: &ParseSess,\n                                    attrs_iter: I,\n                                    item_sp: Span)\n                                    -> Option<Deprecation>\n     where I: Iterator<Item = &'a Attribute>\n {\n     let mut depr: Option<Deprecation> = None;\n+    let diagnostic = &sess.span_diagnostic;\n \n     'outer: for attr in attrs_iter {\n         if attr.path != \"deprecated\" {\n@@ -551,37 +612,60 @@ fn find_deprecation_generic<'a, I>(diagnostic: &Handler,\n         depr = if let Some(metas) = attr.meta_item_list() {\n             let get = |meta: &MetaItem, item: &mut Option<Symbol>| {\n                 if item.is_some() {\n-                    handle_errors(diagnostic, meta.span, AttrError::MultipleItem(meta.name()));\n+                    handle_errors(sess, meta.span, AttrError::MultipleItem(meta.name()));\n                     return false\n                 }\n                 if let Some(v) = meta.value_str() {\n                     *item = Some(v);\n                     true\n                 } else {\n-                    span_err!(diagnostic, meta.span, E0551, \"incorrect meta item\");\n+                    if let Some(lit) = meta.name_value_literal() {\n+                        handle_errors(\n+                            sess,\n+                            lit.span,\n+                            AttrError::UnsupportedLiteral(\n+                                \"literal in `deprecated` \\\n+                                value must be a string\",\n+                                lit.node.is_bytestr()\n+                            ),\n+                        );\n+                    } else {\n+                        span_err!(diagnostic, meta.span, E0551, \"incorrect meta item\");\n+                    }\n+\n                     false\n                 }\n             };\n \n             let mut since = None;\n             let mut note = None;\n             for meta in metas {\n-                if let NestedMetaItemKind::MetaItem(ref mi) = meta.node {\n-                    match &*mi.name().as_str() {\n-                        \"since\" => if !get(mi, &mut since) { continue 'outer },\n-                        \"note\" => if !get(mi, &mut note) { continue 'outer },\n-                        _ => {\n-                            handle_errors(\n-                                diagnostic,\n-                                meta.span,\n-                                AttrError::UnknownMetaItem(mi.name(), &[\"since\", \"note\"]),\n-                            );\n-                            continue 'outer\n+                match &meta.node {\n+                    NestedMetaItemKind::MetaItem(mi) => {\n+                        match &*mi.name().as_str() {\n+                            \"since\" => if !get(mi, &mut since) { continue 'outer },\n+                            \"note\" => if !get(mi, &mut note) { continue 'outer },\n+                            _ => {\n+                                handle_errors(\n+                                    sess,\n+                                    meta.span,\n+                                    AttrError::UnknownMetaItem(mi.name(), &[\"since\", \"note\"]),\n+                                );\n+                                continue 'outer\n+                            }\n                         }\n                     }\n-                } else {\n-                    handle_errors(diagnostic, meta.span, AttrError::UnsupportedLiteral);\n-                    continue 'outer\n+                    NestedMetaItemKind::Literal(lit) => {\n+                        handle_errors(\n+                            sess,\n+                            lit.span,\n+                            AttrError::UnsupportedLiteral(\n+                                \"item in `deprecated` must be a key/value pair\",\n+                                false,\n+                            ),\n+                        );\n+                        continue 'outer\n+                    }\n                 }\n             }\n \n@@ -629,16 +713,24 @@ impl IntType {\n /// the same discriminant size that the corresponding C enum would or C\n /// structure layout, `packed` to remove padding, and `transparent` to elegate representation\n /// concerns to the only non-ZST field.\n-pub fn find_repr_attrs(diagnostic: &Handler, attr: &Attribute) -> Vec<ReprAttr> {\n+pub fn find_repr_attrs(sess: &ParseSess, attr: &Attribute) -> Vec<ReprAttr> {\n     use self::ReprAttr::*;\n \n     let mut acc = Vec::new();\n+    let diagnostic = &sess.span_diagnostic;\n     if attr.path == \"repr\" {\n         if let Some(items) = attr.meta_item_list() {\n             mark_used(attr);\n             for item in items {\n                 if !item.is_meta_item() {\n-                    handle_errors(diagnostic, item.span, AttrError::UnsupportedLiteral);\n+                    handle_errors(\n+                        sess,\n+                        item.span,\n+                        AttrError::UnsupportedLiteral(\n+                            \"meta item in `repr` must be an identifier\",\n+                            false,\n+                        ),\n+                    );\n                     continue\n                 }\n "}, {"sha": "5404420988c35a930666693a60d1f4f2675e3536", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=fa45602b71c59c6315fdb07e925dec61f5827ad9", "patch": "@@ -219,6 +219,15 @@ impl MetaItem {\n         name_from_path(&self.ident)\n     }\n \n+    // #[attribute(name = \"value\")]\n+    //             ^^^^^^^^^^^^^^\n+    pub fn name_value_literal(&self) -> Option<&Lit> {\n+        match &self.node {\n+            MetaItemKind::NameValue(v) => Some(v),\n+            _ => None,\n+        }\n+    }\n+\n     pub fn value_str(&self) -> Option<Symbol> {\n         match self.node {\n             MetaItemKind::NameValue(ref v) => {"}, {"sha": "6bba891278acadbe6e29a6e89911d887aebd8bca", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=fa45602b71c59c6315fdb07e925dec61f5827ad9", "patch": "@@ -355,7 +355,7 @@ pub fn compile(sess: &ParseSess, features: &Features, def: &ast::Item, edition:\n             }\n         }\n \n-        let unstable_feature = attr::find_stability(&sess.span_diagnostic,\n+        let unstable_feature = attr::find_stability(&sess,\n                                                     &def.attrs, def.span).and_then(|stability| {\n             if let attr::StabilityLevel::Unstable { issue, .. } = stability.level {\n                 Some((stability.feature, issue))"}, {"sha": "002ecce58e6529207d0a7ca6c5b1eab8d42ff321", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=fa45602b71c59c6315fdb07e925dec61f5827ad9", "patch": "@@ -202,8 +202,8 @@ use syntax::source_map::{self, respan};\n use syntax::util::move_map::MoveMap;\n use syntax::ptr::P;\n use syntax::symbol::{Symbol, keywords};\n+use syntax::parse::ParseSess;\n use syntax_pos::{DUMMY_SP, Span};\n-use errors::Handler;\n \n use self::ty::{LifetimeBounds, Path, Ptr, PtrTy, Self_, Ty};\n \n@@ -412,7 +412,7 @@ impl<'a> TraitDef<'a> {\n         match *item {\n             Annotatable::Item(ref item) => {\n                 let is_packed = item.attrs.iter().any(|attr| {\n-                    for r in attr::find_repr_attrs(&cx.parse_sess.span_diagnostic, attr) {\n+                    for r in attr::find_repr_attrs(&cx.parse_sess, attr) {\n                         if let attr::ReprPacked(_) = r {\n                             return true;\n                         }\n@@ -811,10 +811,10 @@ impl<'a> TraitDef<'a> {\n     }\n }\n \n-fn find_repr_type_name(diagnostic: &Handler, type_attrs: &[ast::Attribute]) -> &'static str {\n+fn find_repr_type_name(sess: &ParseSess, type_attrs: &[ast::Attribute]) -> &'static str {\n     let mut repr_type_name = \"isize\";\n     for a in type_attrs {\n-        for r in &attr::find_repr_attrs(diagnostic, a) {\n+        for r in &attr::find_repr_attrs(sess, a) {\n             repr_type_name = match *r {\n                 attr::ReprPacked(_) | attr::ReprSimd | attr::ReprAlign(_) | attr::ReprTransparent =>\n                     continue,\n@@ -1390,7 +1390,7 @@ impl<'a> MethodDef<'a> {\n             // discriminant_test = __self0_vi == __self1_vi && __self0_vi == __self2_vi && ...\n             let mut discriminant_test = cx.expr_bool(sp, true);\n \n-            let target_type_name = find_repr_type_name(&cx.parse_sess.span_diagnostic, type_attrs);\n+            let target_type_name = find_repr_type_name(&cx.parse_sess, type_attrs);\n \n             let mut first_ident = None;\n             for (&ident, self_arg) in vi_idents.iter().zip(&self_args) {"}, {"sha": "83e162e08712fd5f087f0102213e219c0ec9d91e", "filename": "src/test/ui/conditional-compilation/cfg-attr-syntax-validation.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.rs?ref=fa45602b71c59c6315fdb07e925dec61f5827ad9", "patch": "@@ -22,11 +22,14 @@ struct S7;\n #[cfg(a = 10)] //~ ERROR literal in `cfg` predicate value must be a string\n struct S8;\n \n-macro_rules! generate_s9 {\n+#[cfg(a = b\"hi\")]  //~ ERROR literal in `cfg` predicate value must be a string\n+struct S9;\n+\n+macro_rules! generate_s10 {\n     ($expr: expr) => {\n         #[cfg(feature = $expr)] //~ ERROR `cfg` is not a well-formed meta-item\n-        struct S9;\n+        struct S10;\n     }\n }\n \n-generate_s9!(concat!(\"nonexistent\"));\n+generate_s10!(concat!(\"nonexistent\"));"}, {"sha": "da06a81751cdb2d2757d5fe24c69c4dd46ec02b2", "filename": "src/test/ui/conditional-compilation/cfg-attr-syntax-validation.stderr", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr?ref=fa45602b71c59c6315fdb07e925dec61f5827ad9", "patch": "@@ -40,21 +40,28 @@ error[E0537]: invalid predicate `a`\n LL | #[cfg(a())] //~ ERROR invalid predicate `a`\n    |       ^^^\n \n-error: literal in `cfg` predicate value must be a string\n+error[E0565]: literal in `cfg` predicate value must be a string\n   --> $DIR/cfg-attr-syntax-validation.rs:22:11\n    |\n LL | #[cfg(a = 10)] //~ ERROR literal in `cfg` predicate value must be a string\n    |           ^^\n \n+error[E0565]: literal in `cfg` predicate value must be a string\n+  --> $DIR/cfg-attr-syntax-validation.rs:25:11\n+   |\n+LL | #[cfg(a = b\"hi\")]  //~ ERROR literal in `cfg` predicate value must be a string\n+   |           ^^^^^ help: consider removing the prefix: `\"hi\"`\n+\n error: `cfg` is not a well-formed meta-item\n-  --> $DIR/cfg-attr-syntax-validation.rs:27:9\n+  --> $DIR/cfg-attr-syntax-validation.rs:30:9\n    |\n LL |         #[cfg(feature = $expr)] //~ ERROR `cfg` is not a well-formed meta-item\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: expected syntax is: `#[cfg(/* predicate */)]`\n ...\n-LL | generate_s9!(concat!(\"nonexistent\"));\n-   | ------------------------------------- in this macro invocation\n+LL | generate_s10!(concat!(\"nonexistent\"));\n+   | -------------------------------------- in this macro invocation\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 10 previous errors\n \n-For more information about this error, try `rustc --explain E0537`.\n+Some errors occurred: E0537, E0565.\n+For more information about an error, try `rustc --explain E0537`."}, {"sha": "a2e099acd3c6adc67906ffd2c34cd553d473172e", "filename": "src/test/ui/error-codes/E0565-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Ftest%2Fui%2Ferror-codes%2FE0565-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Ftest%2Fui%2Ferror-codes%2FE0565-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0565-1.stderr?ref=fa45602b71c59c6315fdb07e925dec61f5827ad9", "patch": "@@ -1,4 +1,4 @@\n-error[E0565]: unsupported literal\n+error[E0565]: item in `deprecated` must be a key/value pair\n   --> $DIR/E0565-1.rs:12:14\n    |\n LL | #[deprecated(\"since\")] //~ ERROR E0565"}, {"sha": "eb13e4327511146bc8ff99ff047831be3c15f577", "filename": "src/test/ui/error-codes/E0565-2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Ftest%2Fui%2Ferror-codes%2FE0565-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Ftest%2Fui%2Ferror-codes%2FE0565-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0565-2.rs?ref=fa45602b71c59c6315fdb07e925dec61f5827ad9", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// repr currently doesn't support literals\n+#[deprecated(since = b\"1.29\", note = \"hi\")] //~ ERROR E0565\n+struct A {  }\n+\n+fn main() {  }"}, {"sha": "68093e4e2f07793bc3450692fc2dfb8c886183bb", "filename": "src/test/ui/error-codes/E0565-2.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Ftest%2Fui%2Ferror-codes%2FE0565-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Ftest%2Fui%2Ferror-codes%2FE0565-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0565-2.stderr?ref=fa45602b71c59c6315fdb07e925dec61f5827ad9", "patch": "@@ -0,0 +1,9 @@\n+error[E0565]: literal in `deprecated` value must be a string\n+  --> $DIR/E0565-2.rs:12:22\n+   |\n+LL | #[deprecated(since = b\"1.29\", note = \"hi\")] //~ ERROR E0565\n+   |                      ^^^^^^^ help: consider removing the prefix: `\"1.29\"`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0565`."}, {"sha": "04edff8ec6962f0599243c00d3343d84e5ee8a2c", "filename": "src/test/ui/error-codes/E0565.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Ftest%2Fui%2Ferror-codes%2FE0565.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa45602b71c59c6315fdb07e925dec61f5827ad9/src%2Ftest%2Fui%2Ferror-codes%2FE0565.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0565.stderr?ref=fa45602b71c59c6315fdb07e925dec61f5827ad9", "patch": "@@ -1,4 +1,4 @@\n-error[E0565]: unsupported literal\n+error[E0565]: meta item in `repr` must be an identifier\n   --> $DIR/E0565.rs:12:8\n    |\n LL | #[repr(\"C\")] //~ ERROR E0565"}]}