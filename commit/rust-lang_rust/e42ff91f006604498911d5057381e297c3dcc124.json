{"sha": "e42ff91f006604498911d5057381e297c3dcc124", "node_id": "C_kwDOAAsO6NoAKGU0MmZmOTFmMDA2NjA0NDk4OTExZDUwNTczODFlMjk3YzNkY2MxMjQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-11T13:45:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-11T13:45:20Z"}, "message": "Merge #10743\n\n10743: feat: index fewer crates on startup/reload r=jonas-schievink a=jonas-schievink\n\nBefore this PR, we used to index every crate in the `CrateGraph`, which includes every test, benchmark and example of all packages everywhere. The point of indexing is to speed up future queries, so indexing lots of tiny crates users are unlikely to open isn't really helpful.\r\n\r\nThis PR instead makes us index only the transitive dependencies of all workspace crates.\r\n\r\nThis reduces the number of crates we index in the rust-analyzer repo from 617 to 177 (!). Time is not impacted by that much, because most of the skipped crates are tiny.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "ae7691adcc7d4dfc6f477dceec2ff627abc6dd0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae7691adcc7d4dfc6f477dceec2ff627abc6dd0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e42ff91f006604498911d5057381e297c3dcc124", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhjR5wCRBK7hj4Ov3rIwAAvj8IAGGQNHfCWGtKqUFWQT2Mhx2P\nMgRPB8cH+QxF4RO9Bv4BsLTbEaMW+EbuqxxFslxciflcQee5DSoceZKhiI2cOQ0J\n1ywAQljO86fvVgUfi8XKG8j9E/RFCHTgs/p3ZV/Xn4gRHojJe4NsuJuGlvCKX2NB\nLtMrGgeJ1QluFrXuS/S7Xjcr5qx2M8aE7dpLDd7xWTQw+7G3jpWSJtAj0aqgGn6T\nqOD0VRSYLmtgGSS02b0kLCUoLRRRqp4pjLB399UzhQyPrKTdY5Vz+a2lrE952ZyS\nB3zha6y8jvIHDh/45ZUOh1admR+H0VC4qyYv0ClVec8Tq05+NN7ZGDxsLE3/QVY=\n=LkBH\n-----END PGP SIGNATURE-----\n", "payload": "tree ae7691adcc7d4dfc6f477dceec2ff627abc6dd0c\nparent 3b3063fb2d1804b3dc42184027ef08073de03fd9\nparent acbe8bc7acef4e0b7c2ed9b085f651ea2ca78406\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1636638320 +0000\ncommitter GitHub <noreply@github.com> 1636638320 +0000\n\nMerge #10743\n\n10743: feat: index fewer crates on startup/reload r=jonas-schievink a=jonas-schievink\n\nBefore this PR, we used to index every crate in the `CrateGraph`, which includes every test, benchmark and example of all packages everywhere. The point of indexing is to speed up future queries, so indexing lots of tiny crates users are unlikely to open isn't really helpful.\r\n\r\nThis PR instead makes us index only the transitive dependencies of all workspace crates.\r\n\r\nThis reduces the number of crates we index in the rust-analyzer repo from 617 to 177 (!). Time is not impacted by that much, because most of the skipped crates are tiny.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e42ff91f006604498911d5057381e297c3dcc124", "html_url": "https://github.com/rust-lang/rust/commit/e42ff91f006604498911d5057381e297c3dcc124", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e42ff91f006604498911d5057381e297c3dcc124/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b3063fb2d1804b3dc42184027ef08073de03fd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b3063fb2d1804b3dc42184027ef08073de03fd9", "html_url": "https://github.com/rust-lang/rust/commit/3b3063fb2d1804b3dc42184027ef08073de03fd9"}, {"sha": "acbe8bc7acef4e0b7c2ed9b085f651ea2ca78406", "url": "https://api.github.com/repos/rust-lang/rust/commits/acbe8bc7acef4e0b7c2ed9b085f651ea2ca78406", "html_url": "https://github.com/rust-lang/rust/commit/acbe8bc7acef4e0b7c2ed9b085f651ea2ca78406"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "41e48c4ba563850d39fce9c5da4fb93df6eb5635", "filename": "crates/ide/src/prime_caches.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e42ff91f006604498911d5057381e297c3dcc124/crates%2Fide%2Fsrc%2Fprime_caches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e42ff91f006604498911d5057381e297c3dcc124/crates%2Fide%2Fsrc%2Fprime_caches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fprime_caches.rs?ref=e42ff91f006604498911d5057381e297c3dcc124", "patch": "@@ -4,7 +4,8 @@\n //! various caches, it's not really advanced at the moment.\n \n use hir::db::DefDatabase;\n-use ide_db::base_db::SourceDatabase;\n+use ide_db::base_db::{CrateGraph, CrateId, SourceDatabase, SourceDatabaseExt};\n+use rustc_hash::FxHashSet;\n \n use crate::RootDatabase;\n \n@@ -19,7 +20,18 @@ pub struct PrimeCachesProgress {\n pub(crate) fn prime_caches(db: &RootDatabase, cb: &(dyn Fn(PrimeCachesProgress) + Sync)) {\n     let _p = profile::span(\"prime_caches\");\n     let graph = db.crate_graph();\n-    let topo = &graph.crates_in_topological_order();\n+    // We're only interested in the transitive dependencies of all workspace crates.\n+    let to_prime: FxHashSet<_> = graph\n+        .iter()\n+        .filter(|&id| {\n+            let file_id = graph[id].root_file_id;\n+            let root_id = db.file_source_root(file_id);\n+            !db.source_root(root_id).is_library\n+        })\n+        .flat_map(|id| graph.transitive_deps(id))\n+        .collect();\n+\n+    let topo = toposort(&graph, &to_prime);\n \n     // FIXME: This would be easy to parallelize, since it's in the ideal ordering for that.\n     // Unfortunately rayon prevents panics from propagation out of a `scope`, which breaks\n@@ -32,3 +44,16 @@ pub(crate) fn prime_caches(db: &RootDatabase, cb: &(dyn Fn(PrimeCachesProgress)\n         db.import_map(crate_id);\n     }\n }\n+\n+fn toposort(graph: &CrateGraph, crates: &FxHashSet<CrateId>) -> Vec<CrateId> {\n+    // Just subset the full topologically sorted set for simplicity.\n+\n+    let all = graph.crates_in_topological_order();\n+    let mut result = Vec::with_capacity(crates.len());\n+    for krate in all {\n+        if crates.contains(&krate) {\n+            result.push(krate);\n+        }\n+    }\n+    result\n+}"}]}