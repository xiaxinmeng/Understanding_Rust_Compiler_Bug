{"sha": "2261ddc717485dc06e4dbd255947549816f37e4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNjFkZGM3MTc0ODVkYzA2ZTRkYmQyNTU5NDc1NDk4MTZmMzdlNGI=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-07-21T22:59:41Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-07-21T23:09:55Z"}, "message": "Move ast_constr_to_constr from typeck to ty\n\nso that it can be used in places that import ty.", "tree": {"sha": "174ca719501398663e6b18362ec0421569e433df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/174ca719501398663e6b18362ec0421569e433df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2261ddc717485dc06e4dbd255947549816f37e4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2261ddc717485dc06e4dbd255947549816f37e4b", "html_url": "https://github.com/rust-lang/rust/commit/2261ddc717485dc06e4dbd255947549816f37e4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2261ddc717485dc06e4dbd255947549816f37e4b/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "075a094c1fae81498443db137ba8e178e4e757e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/075a094c1fae81498443db137ba8e178e4e757e4", "html_url": "https://github.com/rust-lang/rust/commit/075a094c1fae81498443db137ba8e178e4e757e4"}], "stats": {"total": 46, "additions": 24, "deletions": 22}, "files": [{"sha": "1228892077f415bd913ae754e8c98f5332eb0b54", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2261ddc717485dc06e4dbd255947549816f37e4b/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2261ddc717485dc06e4dbd255947549816f37e4b/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=2261ddc717485dc06e4dbd255947549816f37e4b", "patch": "@@ -30,6 +30,7 @@ export any_item_native;\n export any_item_rust;\n export arg;\n export args_eq;\n+export ast_constr_to_constr;\n export bind_params_in_type;\n export block_ty;\n export constr;\n@@ -3120,6 +3121,22 @@ fn is_binopable(&ctxt cx, t ty, ast::binop op) -> bool {\n     ret tbl.(tycat(cx, ty)).(opcat(op));\n }\n \n+fn ast_constr_to_constr[T](ty::ctxt tcx, &@ast::constr_general[T] c)\n+    -> @ty::constr_general[T] {\n+    alt (tcx.def_map.find(c.node.id)) {\n+        case (some(ast::def_fn(?pred_id, ast::pure_fn))) {\n+            ret @respan(c.span, rec(path=c.node.path, args=c.node.args,\n+                                    id=pred_id));\n+        }\n+        case (_) {\n+            tcx.sess.span_fatal(c.span, \"Predicate \"\n+                      + path_to_str(c.node.path)\n+                      + \" is unbound or bound to a non-function or an \\\n+                        impure function\");\n+        }\n+    }\n+}\n+\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}, {"sha": "4a0bcf5e61e731909e9d68fc98c19ce1196d9e29", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2261ddc717485dc06e4dbd255947549816f37e4b/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2261ddc717485dc06e4dbd255947549816f37e4b/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=2261ddc717485dc06e4dbd255947549816f37e4b", "patch": "@@ -347,7 +347,7 @@ fn ast_ty_to_ty(&ty::ctxt tcx, &ty_getter getter, &@ast::ty ast_ty) -> ty::t {\n \n             auto out_constrs = ~[];\n             for (@ast::constr constr in constrs) {\n-                out_constrs += ~[ast_constr_to_constr(tcx, constr)];\n+                out_constrs += ~[ty::ast_constr_to_constr(tcx, constr)];\n             }\n             typ = ty::mk_fn(tcx, proto, i, out_ty, cf, out_constrs);\n         }\n@@ -383,7 +383,7 @@ fn ast_ty_to_ty(&ty::ctxt tcx, &ty_getter getter, &@ast::ty ast_ty) -> ty::t {\n \n                 auto out_constrs = ~[];\n                 for (@ast::constr constr in m.node.constrs) {\n-                    out_constrs += ~[ast_constr_to_constr(tcx, constr)];\n+                    out_constrs += ~[ty::ast_constr_to_constr(tcx, constr)];\n                 }\n                 let ty::method new_m =\n                     rec(proto=m.node.proto,\n@@ -399,7 +399,7 @@ fn ast_ty_to_ty(&ty::ctxt tcx, &ty_getter getter, &@ast::ty ast_ty) -> ty::t {\n         case (ast::ty_constr(?t, ?cs)) {\n             auto out_cs = ~[];\n             for (@ast::ty_constr constr in cs) {\n-                out_cs += ~[ast_constr_to_constr(tcx, constr)];\n+                out_cs += ~[ty::ast_constr_to_constr(tcx, constr)];\n             }\n             typ = ty::mk_constr(tcx, ast_ty_to_ty(tcx, getter, t), out_cs);\n         }\n@@ -509,7 +509,7 @@ mod collect {\n \n         auto out_constrs = ~[];\n         for (@ast::constr constr in decl.constraints) {\n-            out_constrs += ~[ast_constr_to_constr(cx.tcx, constr)];\n+            out_constrs += ~[ty::ast_constr_to_constr(cx.tcx, constr)];\n         }\n         auto t_fn =\n             ty::mk_fn(cx.tcx, proto, input_tys, output_ty, decl.cf,\n@@ -589,7 +589,7 @@ mod collect {\n \n         auto out_constrs = ~[];\n         for (@ast::constr constr in m.node.meth.decl.constraints) {\n-            out_constrs += ~[ast_constr_to_constr(cx.tcx, constr)];\n+            out_constrs += ~[ty::ast_constr_to_constr(cx.tcx, constr)];\n         }\n         ret rec(proto=m.node.meth.proto, ident=m.node.ident,\n                 inputs=inputs, output=output, cf=m.node.meth.decl.cf,\n@@ -2422,7 +2422,8 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n \n                 auto out_constrs = ~[];\n                 for (@ast::constr constr in m.node.meth.decl.constraints) {\n-                    out_constrs += ~[ast_constr_to_constr(ccx.tcx, constr)];\n+                    out_constrs +=\n+                      ~[ty::ast_constr_to_constr(ccx.tcx, constr)];\n                 }\n \n                 ret rec(proto=m.node.meth.proto, ident=m.node.ident,\n@@ -2535,22 +2536,6 @@ fn get_obj_info(&@crate_ctxt ccx) -> option::t[obj_info] {\n     ret ivec::last[obj_info](ccx.obj_infos);\n }\n \n-fn ast_constr_to_constr[T](ty::ctxt tcx, &@ast::constr_general[T] c)\n-    -> @ty::constr_general[T] {\n-    alt (tcx.def_map.find(c.node.id)) {\n-        case (some(ast::def_fn(?pred_id, ast::pure_fn))) {\n-            ret @respan(c.span, rec(path=c.node.path, args=c.node.args,\n-                                    id=pred_id));\n-        }\n-        case (_) {\n-            tcx.sess.span_fatal(c.span, \"Predicate \"\n-                      + path_to_str(c.node.path)\n-                      + \" is unbound or bound to a non-function or an \\\n-                        impure function\");\n-        }\n-    }\n-}\n-\n fn check_decl_initializer(&@fn_ctxt fcx, ast::node_id nid,\n                           &ast::initializer init) {\n     check_expr(fcx, init.expr);"}]}