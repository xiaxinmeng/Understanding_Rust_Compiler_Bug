{"sha": "f741ee104b9ae7ea222c8ab2aa4510d04d6759ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NDFlZTEwNGI5YWU3ZWEyMjJjOGFiMmFhNDUxMGQwNGQ2NzU5YWQ=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-01T06:14:58Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-05-07T15:13:09Z"}, "message": "Make SelectionCache and EvaluationCache thread-safe", "tree": {"sha": "965d7036018e64eeefaafb9b2f10445bf9988181", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/965d7036018e64eeefaafb9b2f10445bf9988181"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f741ee104b9ae7ea222c8ab2aa4510d04d6759ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f741ee104b9ae7ea222c8ab2aa4510d04d6759ad", "html_url": "https://github.com/rust-lang/rust/commit/f741ee104b9ae7ea222c8ab2aa4510d04d6759ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f741ee104b9ae7ea222c8ab2aa4510d04d6759ad/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62889702c9868682a3112a19c75321508d9eb6e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/62889702c9868682a3112a19c75321508d9eb6e6", "html_url": "https://github.com/rust-lang/rust/commit/62889702c9868682a3112a19c75321508d9eb6e6"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "2c5b4f280e0e14884bc91c429dd35d69fc4c68f0", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f741ee104b9ae7ea222c8ab2aa4510d04d6759ad/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f741ee104b9ae7ea222c8ab2aa4510d04d6759ad/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=f741ee104b9ae7ea222c8ab2aa4510d04d6759ad", "patch": "@@ -44,9 +44,9 @@ use ty::relate::TypeRelation;\n use middle::lang_items;\n use mir::interpret::{GlobalId};\n \n+use rustc_data_structures::sync::Lock;\n use rustc_data_structures::bitvec::BitVector;\n use std::iter;\n-use std::cell::RefCell;\n use std::cmp;\n use std::fmt;\n use std::mem;\n@@ -148,7 +148,7 @@ struct TraitObligationStack<'prev, 'tcx: 'prev> {\n \n #[derive(Clone)]\n pub struct SelectionCache<'tcx> {\n-    hashmap: RefCell<FxHashMap<ty::TraitRef<'tcx>,\n+    hashmap: Lock<FxHashMap<ty::TraitRef<'tcx>,\n                                WithDepNode<SelectionResult<'tcx, SelectionCandidate<'tcx>>>>>,\n }\n \n@@ -435,7 +435,7 @@ impl<'tcx> From<OverflowError> for SelectionError<'tcx> {\n \n #[derive(Clone)]\n pub struct EvaluationCache<'tcx> {\n-    hashmap: RefCell<FxHashMap<ty::PolyTraitRef<'tcx>, WithDepNode<EvaluationResult>>>\n+    hashmap: Lock<FxHashMap<ty::PolyTraitRef<'tcx>, WithDepNode<EvaluationResult>>>\n }\n \n impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n@@ -1015,14 +1015,19 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         }\n \n         if self.can_use_global_caches(param_env) {\n-            let mut cache = self.tcx().evaluation_cache.hashmap.borrow_mut();\n             if let Some(trait_ref) = self.tcx().lift_to_global(&trait_ref) {\n                 debug!(\n                     \"insert_evaluation_cache(trait_ref={:?}, candidate={:?}) global\",\n                     trait_ref,\n                     result,\n                 );\n-                cache.insert(trait_ref, WithDepNode::new(dep_node, result));\n+                // This may overwrite the cache with the same value\n+                // FIXME: Due to #50507 this overwrites the different values\n+                // This should be changed to use HashMapExt::insert_same\n+                // when that is fixed\n+                self.tcx().evaluation_cache\n+                          .hashmap.borrow_mut()\n+                          .insert(trait_ref, WithDepNode::new(dep_node, result));\n                 return;\n             }\n         }\n@@ -1368,15 +1373,17 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         let tcx = self.tcx();\n         let trait_ref = cache_fresh_trait_pred.skip_binder().trait_ref;\n         if self.can_use_global_caches(param_env) {\n-            let mut cache = tcx.selection_cache.hashmap.borrow_mut();\n             if let Some(trait_ref) = tcx.lift_to_global(&trait_ref) {\n                 if let Some(candidate) = tcx.lift_to_global(&candidate) {\n                     debug!(\n                         \"insert_candidate_cache(trait_ref={:?}, candidate={:?}) global\",\n                         trait_ref,\n                         candidate,\n                     );\n-                    cache.insert(trait_ref, WithDepNode::new(dep_node, candidate));\n+                    // This may overwrite the cache with the same value\n+                    tcx.selection_cache\n+                       .hashmap.borrow_mut()\n+                       .insert(trait_ref, WithDepNode::new(dep_node, candidate));\n                     return;\n                 }\n             }\n@@ -3404,7 +3411,7 @@ impl<'tcx> TraitObligation<'tcx> {\n impl<'tcx> SelectionCache<'tcx> {\n     pub fn new() -> SelectionCache<'tcx> {\n         SelectionCache {\n-            hashmap: RefCell::new(FxHashMap())\n+            hashmap: Lock::new(FxHashMap())\n         }\n     }\n \n@@ -3416,7 +3423,7 @@ impl<'tcx> SelectionCache<'tcx> {\n impl<'tcx> EvaluationCache<'tcx> {\n     pub fn new() -> EvaluationCache<'tcx> {\n         EvaluationCache {\n-            hashmap: RefCell::new(FxHashMap())\n+            hashmap: Lock::new(FxHashMap())\n         }\n     }\n \n@@ -3470,7 +3477,7 @@ impl<'o,'tcx> fmt::Debug for TraitObligationStack<'o,'tcx> {\n     }\n }\n \n-#[derive(Clone)]\n+#[derive(Clone, Eq, PartialEq)]\n pub struct WithDepNode<T> {\n     dep_node: DepNodeIndex,\n     cached_value: T"}]}