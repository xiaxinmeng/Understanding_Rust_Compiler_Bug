{"sha": "07afdb8c0d78e1a83757b87332f6c55004d65189", "node_id": "C_kwDOAAsO6NoAKDA3YWZkYjhjMGQ3OGUxYTgzNzU3Yjg3MzMyZjZjNTUwMDRkNjUxODk", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-02-25T14:36:08Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-02-25T14:36:08Z"}, "message": "Use bitcast for ptrtoint and inttoptr\n\nThis works now", "tree": {"sha": "c4572ba4fc3f4952f677bb6d3ec26fe26d40c34a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4572ba4fc3f4952f677bb6d3ec26fe26d40c34a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07afdb8c0d78e1a83757b87332f6c55004d65189", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07afdb8c0d78e1a83757b87332f6c55004d65189", "html_url": "https://github.com/rust-lang/rust/commit/07afdb8c0d78e1a83757b87332f6c55004d65189", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07afdb8c0d78e1a83757b87332f6c55004d65189/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b48ed38482bc2c12edf10e134c24cf9e51481557", "url": "https://api.github.com/repos/rust-lang/rust/commits/b48ed38482bc2c12edf10e134c24cf9e51481557", "html_url": "https://github.com/rust-lang/rust/commit/b48ed38482bc2c12edf10e134c24cf9e51481557"}], "stats": {"total": 34, "additions": 5, "deletions": 29}, "files": [{"sha": "f5ee9db80a02898decad7d7c00c1858decd09b84", "filename": "src/builder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/07afdb8c0d78e1a83757b87332f6c55004d65189/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07afdb8c0d78e1a83757b87332f6c55004d65189/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=07afdb8c0d78e1a83757b87332f6c55004d65189", "patch": "@@ -904,11 +904,12 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n     }\n \n     fn ptrtoint(&mut self, value: RValue<'gcc>, dest_ty: Type<'gcc>) -> RValue<'gcc> {\n-        self.cx.ptrtoint(self.block, value, dest_ty)\n+        let usize_value = self.cx.const_bitcast(value, self.cx.type_isize());\n+        self.intcast(usize_value, dest_ty, false)\n     }\n \n     fn inttoptr(&mut self, value: RValue<'gcc>, dest_ty: Type<'gcc>) -> RValue<'gcc> {\n-        self.cx.inttoptr(self.block, value, dest_ty)\n+        self.cx.const_bitcast(value, dest_ty)\n     }\n \n     fn bitcast(&mut self, value: RValue<'gcc>, dest_ty: Type<'gcc>) -> RValue<'gcc> {"}, {"sha": "840cbc70c3405812ca9bef9021b76a7b4a52fffb", "filename": "src/common.rs", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/07afdb8c0d78e1a83757b87332f6c55004d65189/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07afdb8c0d78e1a83757b87332f6c55004d65189/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=07afdb8c0d78e1a83757b87332f6c55004d65189", "patch": "@@ -1,5 +1,5 @@\n use gccjit::LValue;\n-use gccjit::{Block, RValue, Type, ToRValue};\n+use gccjit::{RValue, Type, ToRValue};\n use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::traits::{\n     BaseTypeMethods,\n@@ -45,27 +45,6 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n         global\n         // TODO(antoyo): set linkage.\n     }\n-\n-    pub fn inttoptr(&self, block: Block<'gcc>, value: RValue<'gcc>, dest_ty: Type<'gcc>) -> RValue<'gcc> {\n-        let func = block.get_function();\n-        let local = func.new_local(None, value.get_type(), \"intLocal\");\n-        block.add_assignment(None, local, value);\n-        let value_address = local.get_address(None);\n-\n-        let ptr = self.context.new_cast(None, value_address, dest_ty.make_pointer());\n-        ptr.dereference(None).to_rvalue()\n-    }\n-\n-    pub fn ptrtoint(&self, block: Block<'gcc>, value: RValue<'gcc>, dest_ty: Type<'gcc>) -> RValue<'gcc> {\n-        // TODO(antoyo): when libgccjit allow casting from pointer to int, remove this.\n-        let func = block.get_function();\n-        let local = func.new_local(None, value.get_type(), \"ptrLocal\");\n-        block.add_assignment(None, local, value);\n-        let ptr_address = local.get_address(None);\n-\n-        let ptr = self.context.new_cast(None, ptr_address, dest_ty.make_pointer());\n-        ptr.dereference(None).to_rvalue()\n-    }\n }\n \n pub fn bytes_in_context<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, bytes: &[u8]) -> RValue<'gcc> {\n@@ -202,11 +181,7 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n                 }\n \n                 let value = self.const_uint_big(self.type_ix(bitsize), data);\n-                if layout.value == Pointer {\n-                    self.inttoptr(self.current_block.borrow().expect(\"block\"), value, ty)\n-                } else {\n-                    self.const_bitcast(value, ty)\n-                }\n+                self.const_bitcast(value, ty)\n             }\n             Scalar::Ptr(ptr, _size) => {\n                 let (alloc_id, offset) = ptr.into_parts();"}]}