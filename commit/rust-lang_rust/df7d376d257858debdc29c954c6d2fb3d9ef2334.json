{"sha": "df7d376d257858debdc29c954c6d2fb3d9ef2334", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmN2QzNzZkMjU3ODU4ZGViZGMyOWM5NTRjNmQyZmIzZDllZjIzMzQ=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-13T19:05:40Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-15T02:14:16Z"}, "message": "Convert ast::def_id into a struct.", "tree": {"sha": "d6cb6d4f5bb0f6ee16f5e3c2896c0cdf4ce6d0cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6cb6d4f5bb0f6ee16f5e3c2896c0cdf4ce6d0cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df7d376d257858debdc29c954c6d2fb3d9ef2334", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df7d376d257858debdc29c954c6d2fb3d9ef2334", "html_url": "https://github.com/rust-lang/rust/commit/df7d376d257858debdc29c954c6d2fb3d9ef2334", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df7d376d257858debdc29c954c6d2fb3d9ef2334/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bea67bde21d36df40c55b02cd8d8b28c0ec864b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bea67bde21d36df40c55b02cd8d8b28c0ec864b6", "html_url": "https://github.com/rust-lang/rust/commit/bea67bde21d36df40c55b02cd8d8b28c0ec864b6"}], "stats": {"total": 67, "additions": 39, "deletions": 28}, "files": [{"sha": "8137bac74c8656b6fddb0fe7bf22373dd0f4c82c", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/df7d376d257858debdc29c954c6d2fb3d9ef2334/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7d376d257858debdc29c954c6d2fb3d9ef2334/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=df7d376d257858debdc29c954c6d2fb3d9ef2334", "patch": "@@ -218,13 +218,15 @@ fn item_parent_item(d: ebml::Doc) -> Option<ast::def_id> {\n fn translated_parent_item_opt(cnum: ast::crate_num, d: ebml::Doc) ->\n         Option<ast::def_id> {\n     let trait_did_opt = item_parent_item(d);\n-    trait_did_opt.map(|trait_did| {crate: cnum, node: trait_did.node})\n+    do trait_did_opt.map |trait_did| {\n+        ast::def_id { crate: cnum, node: trait_did.node }\n+    }\n }\n \n fn item_reqd_and_translated_parent_item(cnum: ast::crate_num,\n                                         d: ebml::Doc) -> ast::def_id {\n     let trait_did = item_parent_item(d).expect(~\"item without parent\");\n-    {crate: cnum, node: trait_did.node}\n+    ast::def_id { crate: cnum, node: trait_did.node }\n }\n \n fn item_def_id(d: ebml::Doc, cdata: cmd) -> ast::def_id {\n@@ -313,7 +315,7 @@ fn enum_variant_ids(item: ebml::Doc, cdata: cmd) -> ~[ast::def_id] {\n     let v = tag_items_data_item_variant;\n     for reader::tagged_docs(item, v) |p| {\n         let ext = reader::with_doc_data(p, |d| parse_def_id(d));\n-        ids.push({crate: cdata.cnum, node: ext.node});\n+        ids.push(ast::def_id { crate: cdata.cnum, node: ext.node });\n     };\n     return ids;\n }\n@@ -384,7 +386,7 @@ fn item_to_def_like(item: ebml::Doc, did: ast::def_id, cnum: ast::crate_num)\n fn lookup_def(cnum: ast::crate_num, data: @~[u8], did_: ast::def_id) ->\n    ast::def {\n     let item = lookup_item(did_.node, data);\n-    let did = {crate: cnum, node: did_.node};\n+    let did = ast::def_id { crate: cnum, node: did_.node };\n     // We treat references to enums as references to types.\n     return def_like_to_def(item_to_def_like(item, did, cnum));\n }\n@@ -393,7 +395,8 @@ fn get_type(cdata: cmd, id: ast::node_id, tcx: ty::ctxt)\n     -> ty::ty_param_bounds_and_ty {\n \n     let item = lookup_item(id, cdata.data);\n-    let t = item_type({crate: cdata.cnum, node: id}, item, tcx, cdata);\n+    let t = item_type(ast::def_id { crate: cdata.cnum, node: id }, item, tcx,\n+                      cdata);\n     let tp_bounds = if family_has_type_params(item_family(item)) {\n         item_ty_param_bounds(item, tcx, cdata)\n     } else { @~[] };\n@@ -640,8 +643,8 @@ fn get_enum_variants(intr: @ident_interner, cdata: cmd, id: ast::node_id,\n     let mut disr_val = 0;\n     for variant_ids.each |did| {\n         let item = find_item(did.node, items);\n-        let ctor_ty = item_type({crate: cdata.cnum, node: id}, item,\n-                                tcx, cdata);\n+        let ctor_ty = item_type(ast::def_id { crate: cdata.cnum, node: id},\n+                                item, tcx, cdata);\n         let name = item_name(intr, item);\n         let arg_tys = match ty::get(ctor_ty).sty {\n           ty::ty_fn(ref f) => (*f).sig.inputs.map(|a| a.ty),\n@@ -1141,11 +1144,11 @@ fn list_crate_metadata(intr: @ident_interner, bytes: @~[u8],\n // crate to the correct local crate number.\n fn translate_def_id(cdata: cmd, did: ast::def_id) -> ast::def_id {\n     if did.crate == ast::local_crate {\n-        return {crate: cdata.cnum, node: did.node};\n+        return ast::def_id { crate: cdata.cnum, node: did.node };\n     }\n \n     match cdata.cnum_map.find(did.crate) {\n-      option::Some(n) => return {crate: n, node: did.node},\n+      option::Some(n) => ast::def_id { crate: n, node: did.node },\n       option::None => fail ~\"didn't find a crate in the cnum_map\"\n     }\n }"}, {"sha": "0ed32ef11c2ebe7901b000eb7c25a447be58d308", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df7d376d257858debdc29c954c6d2fb3d9ef2334/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7d376d257858debdc29c954c6d2fb3d9ef2334/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=df7d376d257858debdc29c954c6d2fb3d9ef2334", "patch": "@@ -273,7 +273,8 @@ fn encode_enum_variant_info(ecx: @encode_ctxt, ebml_w: writer::Encoder,\n                             ty_params: ~[ty_param]) {\n     let mut disr_val = 0;\n     let mut i = 0;\n-    let vi = ty::enum_variants(ecx.tcx, {crate: local_crate, node: id});\n+    let vi = ty::enum_variants(ecx.tcx,\n+                               ast::def_id { crate: local_crate, node: id });\n     for variants.each |variant| {\n         index.push({val: variant.node.id, pos: ebml_w.writer.tell()});\n         ebml_w.start_tag(tag_items_data_item);"}, {"sha": "2d7904b3bc2ef3a4532362096e23a22dcbb0c4aa", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df7d376d257858debdc29c954c6d2fb3d9ef2334/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7d376d257858debdc29c954c6d2fb3d9ef2334/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=df7d376d257858debdc29c954c6d2fb3d9ef2334", "patch": "@@ -470,7 +470,7 @@ fn parse_def_id(buf: &[u8]) -> ast::def_id {\n        None => fail (fmt!(\"internal error: parse_def_id: id expected, but \\\n                                found %?\", def_part))\n     };\n-    return {crate: crate_num, node: def_num};\n+    ast::def_id { crate: crate_num, node: def_num }\n }\n \n fn parse_bounds_data(data: @~[u8], start: uint,"}, {"sha": "e72f9753589c5dfc8f409da2e05ffca55e69a103", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df7d376d257858debdc29c954c6d2fb3d9ef2334/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7d376d257858debdc29c954c6d2fb3d9ef2334/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=df7d376d257858debdc29c954c6d2fb3d9ef2334", "patch": "@@ -176,7 +176,7 @@ impl extended_decode_ctxt {\n     }\n     fn tr_intern_def_id(did: ast::def_id) -> ast::def_id {\n         assert did.crate == ast::local_crate;\n-        {crate: ast::local_crate, node: self.tr_id(did.node)}\n+        ast::def_id { crate: ast::local_crate, node: self.tr_id(did.node) }\n     }\n     fn tr_span(_span: span) -> span {\n         ast_util::dummy_sp() // FIXME (#1972): handle span properly\n@@ -785,7 +785,7 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n         }\n     }\n \n-    let lid = {crate: ast::local_crate, node: id};\n+    let lid = ast::def_id { crate: ast::local_crate, node: id };\n     do option::iter(&tcx.tcache.find(lid)) |tpbt| {\n         do ebml_w.tag(c::tag_table_tcache) {\n             ebml_w.id(id);\n@@ -988,7 +988,7 @@ fn decode_side_tables(xcx: extended_decode_ctxt,\n                 dcx.tcx.freevars.insert(id, fv_info);\n             } else if tag == (c::tag_table_tcache as uint) {\n                 let tpbt = val_dsr.read_ty_param_bounds_and_ty(xcx);\n-                let lid = {crate: ast::local_crate, node: id};\n+                let lid = ast::def_id { crate: ast::local_crate, node: id };\n                 dcx.tcx.tcache.insert(lid, tpbt);\n             } else if tag == (c::tag_table_param_bounds as uint) {\n                 let bounds = val_dsr.read_bounds(xcx);"}, {"sha": "ee9d96147e79086ec4e7a07b14fcf8441d049983", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df7d376d257858debdc29c954c6d2fb3d9ef2334/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7d376d257858debdc29c954c6d2fb3d9ef2334/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=df7d376d257858debdc29c954c6d2fb3d9ef2334", "patch": "@@ -359,7 +359,7 @@ impl LanguageItemCollector {\n         do iter_crate_data(crate_store) |crate_number, _crate_metadata| {\n             for each_lang_item(crate_store, crate_number)\n                     |node_id, item_index| {\n-                let def_id = { crate: crate_number, node: node_id };\n+                let def_id = def_id { crate: crate_number, node: node_id };\n                 self.collect_item(item_index, def_id);\n             }\n         }"}, {"sha": "0f1b2ee7fc473e32d77b9630f979ab7d46d1f8b4", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df7d376d257858debdc29c954c6d2fb3d9ef2334/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7d376d257858debdc29c954c6d2fb3d9ef2334/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=df7d376d257858debdc29c954c6d2fb3d9ef2334", "patch": "@@ -817,7 +817,7 @@ fn Resolver(session: Session, lang_items: LanguageItems,\n \n     (*graph_root).define_module(Public,\n                                 NoParentLink,\n-                                Some({ crate: 0, node: 0 }),\n+                                Some(def_id { crate: 0, node: 0 }),\n                                 NormalModuleKind,\n                                 has_legacy_export_attr(crate.node.attrs),\n                                 crate.span);\n@@ -1148,7 +1148,7 @@ impl Resolver {\n                     self.add_child(ident, parent, ForbidDuplicateModules, sp);\n \n                 let parent_link = self.get_parent_link(new_parent, ident);\n-                let def_id = { crate: 0, node: item.id };\n+                let def_id = def_id { crate: 0, node: item.id };\n                 (*name_bindings).define_module(privacy,\n                                                parent_link,\n                                                Some(def_id),\n@@ -1172,7 +1172,7 @@ impl Resolver {\n \n                         let parent_link = self.get_parent_link(new_parent,\n                                                                ident);\n-                        let def_id = { crate: 0, node: item.id };\n+                        let def_id = def_id { crate: 0, node: item.id };\n                         (*name_bindings).define_module(privacy,\n                                                        parent_link,\n                                                        Some(def_id),\n@@ -1609,7 +1609,7 @@ impl Resolver {\n                             self.add_child(name, parent, ForbidDuplicateTypes,\n                                            view_item.span);\n \n-                        let def_id = { crate: crate_id, node: 0 };\n+                        let def_id = def_id { crate: crate_id, node: 0 };\n                         let parent_link = ModuleParentLink\n                             (self.get_module_from_parent(new_parent), name);\n "}, {"sha": "92de2897a735365661e7a757e9c9975e148e27aa", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/df7d376d257858debdc29c954c6d2fb3d9ef2334/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7d376d257858debdc29c954c6d2fb3d9ef2334/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=df7d376d257858debdc29c954c6d2fb3d9ef2334", "patch": "@@ -2498,8 +2498,9 @@ fn trans_constant(ccx: @crate_ctxt, it: @ast::item) {\n     let _icx = ccx.insn_ctxt(\"trans_constant\");\n     match it.node {\n       ast::item_enum(ref enum_definition, _) => {\n-        let vi = ty::enum_variants(ccx.tcx, {crate: ast::local_crate,\n-                                             node: it.id});\n+        let vi = ty::enum_variants(ccx.tcx,\n+                                   ast::def_id { crate: ast::local_crate,\n+                                                 node: it.id });\n         let mut i = 0;\n         let path = item_path(ccx, it);\n         for vec::each((*enum_definition).variants) |variant| {"}, {"sha": "c95e9ee08b17b96170032f96a90e62dc72196e91", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df7d376d257858debdc29c954c6d2fb3d9ef2334/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7d376d257858debdc29c954c6d2fb3d9ef2334/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=df7d376d257858debdc29c954c6d2fb3d9ef2334", "patch": "@@ -928,7 +928,8 @@ impl CoherenceChecker {\n         do iter_crate_data(crate_store) |crate_number, _crate_metadata| {\n             self.add_impls_for_module(impls_seen,\n                                       crate_store,\n-                                      { crate: crate_number, node: 0 });\n+                                      def_id { crate: crate_number,\n+                                               node: 0 });\n \n             for each_path(crate_store, crate_number) |path_entry| {\n                 match path_entry.def_like {"}, {"sha": "3b96f4b05e757532c4670e7e828700b4983fd45c", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df7d376d257858debdc29c954c6d2fb3d9ef2334/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7d376d257858debdc29c954c6d2fb3d9ef2334/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=df7d376d257858debdc29c954c6d2fb3d9ef2334", "patch": "@@ -73,8 +73,8 @@ fn collect_item_types(ccx: @crate_ctxt, crate: @ast::crate) {\n             match /*bad*/copy crate_item.node {\n               ast::item_mod(m) => {\n                 for m.items.each |intrinsic_item| {\n-                    let def_id = { crate: ast::local_crate,\n-                                  node: intrinsic_item.id };\n+                    let def_id = ast::def_id { crate: ast::local_crate,\n+                                               node: intrinsic_item.id };\n                     let substs = {self_r: None, self_ty: None, tps: ~[]};\n \n                     match intrinsic_item.node {\n@@ -254,7 +254,7 @@ fn ensure_trait_methods(ccx: @crate_ctxt, id: ast::node_id, trait_ty: ty::t) {\n         // build up a subst that shifts all of the parameters over\n         // by one and substitute in a new type param for self\n \n-        let dummy_defid = {crate: 0, node: 0};\n+        let dummy_defid = ast::def_id {crate: 0, node: 0};\n \n         let non_shifted_trait_tps = do vec::from_fn(trait_bounds.len()) |i| {\n             ty::mk_param(ccx.tcx, i, dummy_defid)\n@@ -458,7 +458,7 @@ fn compare_impl_method(tcx: ty::ctxt,\n         let dummy_tps = do vec::from_fn((*trait_m.tps).len()) |i| {\n             // hack: we don't know the def id of the impl tp, but it\n             // is not important for unification\n-            ty::mk_param(tcx, i + impl_tps, {crate: 0, node: 0})\n+            ty::mk_param(tcx, i + impl_tps, ast::def_id {crate: 0, node: 0})\n         };\n         let trait_tps = trait_substs.tps.map(\n             |t| replace_bound_self(tcx, *t, dummy_self_r));"}, {"sha": "6c4e2b283a6f7f4b57386dd6d17c015d00166b3f", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/df7d376d257858debdc29c954c6d2fb3d9ef2334/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7d376d257858debdc29c954c6d2fb3d9ef2334/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=df7d376d257858debdc29c954c6d2fb3d9ef2334", "patch": "@@ -93,7 +93,10 @@ type node_id = int;\n \n #[auto_encode]\n #[auto_decode]\n-type def_id = {crate: crate_num, node: node_id};\n+struct def_id {\n+    crate: crate_num,\n+    node: node_id,\n+}\n \n impl def_id : cmp::Eq {\n     pure fn eq(&self, other: &def_id) -> bool {"}, {"sha": "113556e389560cef39a92373494719d9331359b9", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df7d376d257858debdc29c954c6d2fb3d9ef2334/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7d376d257858debdc29c954c6d2fb3d9ef2334/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=df7d376d257858debdc29c954c6d2fb3d9ef2334", "patch": "@@ -54,7 +54,9 @@ pure fn path_name_i(idents: &[ident], intr: @token::ident_interner) -> ~str {\n \n pure fn path_to_ident(p: @path) -> ident { vec::last(p.idents) }\n \n-pure fn local_def(id: node_id) -> def_id { {crate: local_crate, node: id} }\n+pure fn local_def(id: node_id) -> def_id {\n+    ast::def_id { crate: local_crate, node: id }\n+}\n \n pure fn is_local(did: ast::def_id) -> bool { did.crate == local_crate }\n "}]}