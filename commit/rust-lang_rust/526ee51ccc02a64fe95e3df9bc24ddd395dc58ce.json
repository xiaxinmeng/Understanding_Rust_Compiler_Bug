{"sha": "526ee51ccc02a64fe95e3df9bc24ddd395dc58ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNmVlNTFjY2MwMmE2NGZlOTVlM2RmOWJjMjRkZGQzOTVkYzU4Y2U=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-11-12T16:52:26Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-12-03T17:18:32Z"}, "message": "Move Lint to rustc_session\n\nThis commit breaks early-lint registration, which will be fixed in the\nnext commit. This movement will allow essentially all crates in the compiler\ntree to declare lints (though not lint passes).", "tree": {"sha": "e9874e9d6c5006db55311df973a00777cbc19c68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9874e9d6c5006db55311df973a00777cbc19c68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/526ee51ccc02a64fe95e3df9bc24ddd395dc58ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/526ee51ccc02a64fe95e3df9bc24ddd395dc58ce", "html_url": "https://github.com/rust-lang/rust/commit/526ee51ccc02a64fe95e3df9bc24ddd395dc58ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/526ee51ccc02a64fe95e3df9bc24ddd395dc58ce/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "433e546af9503f712089debee665671094f79275", "url": "https://api.github.com/repos/rust-lang/rust/commits/433e546af9503f712089debee665671094f79275", "html_url": "https://github.com/rust-lang/rust/commit/433e546af9503f712089debee665671094f79275"}], "stats": {"total": 162, "additions": 75, "deletions": 87}, "files": [{"sha": "ca246994e5c8433da1f70c0aab54315fef1d1ed5", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/526ee51ccc02a64fe95e3df9bc24ddd395dc58ce/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/526ee51ccc02a64fe95e3df9bc24ddd395dc58ce/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=526ee51ccc02a64fe95e3df9bc24ddd395dc58ce", "patch": "@@ -93,7 +93,7 @@ impl LintLevelSets {\n \n         // If `level` is none then we actually assume the default level for this\n         // lint.\n-        let mut level = level.unwrap_or_else(|| lint.default_level(sess));\n+        let mut level = level.unwrap_or_else(|| lint.default_level(sess.edition()));\n \n         // If we're about to issue a warning, check at the last minute for any\n         // directives against the warnings \"lint\". If, for example, there's an"}, {"sha": "3abda8023f3744a2dda7c0858953990e60487621", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 85, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/526ee51ccc02a64fe95e3df9bc24ddd395dc58ce/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/526ee51ccc02a64fe95e3df9bc24ddd395dc58ce/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=526ee51ccc02a64fe95e3df9bc24ddd395dc58ce", "patch": "@@ -27,8 +27,6 @@ use crate::hir::def_id::{CrateNum, LOCAL_CRATE};\n use crate::hir::intravisit;\n use crate::hir;\n use crate::lint::builtin::BuiltinLintDiagnostics;\n-use crate::lint::builtin::parser::{ILL_FORMED_ATTRIBUTE_INPUT, META_VARIABLE_MISUSE};\n-use crate::lint::builtin::parser::INCOMPLETE_INCLUDE;\n use crate::session::{Session, DiagnosticMessageId};\n use crate::ty::TyCtxt;\n use crate::ty::query::Providers;\n@@ -37,8 +35,6 @@ use errors::{DiagnosticBuilder, DiagnosticId};\n use std::{hash, ptr};\n use syntax::ast;\n use syntax::source_map::{MultiSpan, ExpnKind, DesugaringKind};\n-use syntax::early_buffered_lints::BufferedEarlyLintId;\n-use syntax::edition::Edition;\n use syntax::symbol::Symbol;\n use syntax_pos::hygiene::MacroKind;\n use syntax_pos::Span;\n@@ -47,87 +43,7 @@ pub use crate::lint::context::{LateContext, EarlyContext, LintContext, LintStore\n                         check_crate, check_ast_crate, late_lint_mod, CheckLintNameResult,\n                         BufferedEarlyLint,};\n \n-pub use rustc_session::lint::Level;\n-\n-/// Specification of a single lint.\n-#[derive(Copy, Clone, Debug)]\n-pub struct Lint {\n-    /// A string identifier for the lint.\n-    ///\n-    /// This identifies the lint in attributes and in command-line arguments.\n-    /// In those contexts it is always lowercase, but this field is compared\n-    /// in a way which is case-insensitive for ASCII characters. This allows\n-    /// `declare_lint!()` invocations to follow the convention of upper-case\n-    /// statics without repeating the name.\n-    ///\n-    /// The name is written with underscores, e.g., \"unused_imports\".\n-    /// On the command line, underscores become dashes.\n-    pub name: &'static str,\n-\n-    /// Default level for the lint.\n-    pub default_level: Level,\n-\n-    /// Description of the lint or the issue it detects.\n-    ///\n-    /// e.g., \"imports that are never used\"\n-    pub desc: &'static str,\n-\n-    /// Starting at the given edition, default to the given lint level. If this is `None`, then use\n-    /// `default_level`.\n-    pub edition_lint_opts: Option<(Edition, Level)>,\n-\n-    /// `true` if this lint is reported even inside expansions of external macros.\n-    pub report_in_external_macro: bool,\n-\n-    pub future_incompatible: Option<FutureIncompatibleInfo>,\n-\n-    pub is_plugin: bool,\n-}\n-\n-/// Extra information for a future incompatibility lint.\n-#[derive(Copy, Clone, Debug)]\n-pub struct FutureIncompatibleInfo {\n-    /// e.g., a URL for an issue/PR/RFC or error code\n-    pub reference: &'static str,\n-    /// If this is an edition fixing lint, the edition in which\n-    /// this lint becomes obsolete\n-    pub edition: Option<Edition>,\n-}\n-\n-impl Lint {\n-    pub const fn default_fields_for_macro() -> Self {\n-        Lint {\n-            name: \"\",\n-            default_level: Level::Forbid,\n-            desc: \"\",\n-            edition_lint_opts: None,\n-            is_plugin: false,\n-            report_in_external_macro: false,\n-            future_incompatible: None,\n-        }\n-    }\n-\n-    /// Returns the `rust::lint::Lint` for a `syntax::early_buffered_lints::BufferedEarlyLintId`.\n-    pub fn from_parser_lint_id(lint_id: BufferedEarlyLintId) -> &'static Self {\n-        match lint_id {\n-            BufferedEarlyLintId::IllFormedAttributeInput => ILL_FORMED_ATTRIBUTE_INPUT,\n-            BufferedEarlyLintId::MetaVariableMisuse => META_VARIABLE_MISUSE,\n-            BufferedEarlyLintId::IncompleteInclude => INCOMPLETE_INCLUDE,\n-        }\n-    }\n-\n-    /// Gets the lint's name, with ASCII letters converted to lowercase.\n-    pub fn name_lower(&self) -> String {\n-        self.name.to_ascii_lowercase()\n-    }\n-\n-    pub fn default_level(&self, session: &Session) -> Level {\n-        self.edition_lint_opts\n-            .filter(|(e, _)| *e <= session.edition())\n-            .map(|(_, l)| l)\n-            .unwrap_or(self.default_level)\n-    }\n-}\n+pub use rustc_session::lint::{Lint, Level, FutureIncompatibleInfo};\n \n /// Declares a static item of type `&'static Lint`.\n #[macro_export]"}, {"sha": "0e1e03e67b88f9b1a557806fa428c8fedce03132", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/526ee51ccc02a64fe95e3df9bc24ddd395dc58ce/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/526ee51ccc02a64fe95e3df9bc24ddd395dc58ce/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=526ee51ccc02a64fe95e3df9bc24ddd395dc58ce", "patch": "@@ -5,7 +5,7 @@ use rustc_session::cgu_reuse_tracker::CguReuseTracker;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n \n-use crate::lint;\n+use rustc_session::lint;\n use crate::session::config::{OutputType, PrintRequest, Sanitizer, SwitchWithOptPath};\n use crate::session::search_paths::{PathKind, SearchPath};\n use crate::util::common::{duration_to_secs_str, ErrorReported};"}, {"sha": "1078b46589d50900eaf6dcbaab31049bebf21ba3", "filename": "src/librustc_session/lint.rs", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/526ee51ccc02a64fe95e3df9bc24ddd395dc58ce/src%2Flibrustc_session%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/526ee51ccc02a64fe95e3df9bc24ddd395dc58ce/src%2Flibrustc_session%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint.rs?ref=526ee51ccc02a64fe95e3df9bc24ddd395dc58ce", "patch": "@@ -1,4 +1,5 @@\n use syntax_pos::{Symbol, sym};\n+use syntax_pos::edition::Edition;\n pub use self::Level::*;\n \n /// Setting for how to handle a lint.\n@@ -42,3 +43,74 @@ impl Level {\n         }\n     }\n }\n+\n+/// Specification of a single lint.\n+#[derive(Copy, Clone, Debug)]\n+pub struct Lint {\n+    /// A string identifier for the lint.\n+    ///\n+    /// This identifies the lint in attributes and in command-line arguments.\n+    /// In those contexts it is always lowercase, but this field is compared\n+    /// in a way which is case-insensitive for ASCII characters. This allows\n+    /// `declare_lint!()` invocations to follow the convention of upper-case\n+    /// statics without repeating the name.\n+    ///\n+    /// The name is written with underscores, e.g., \"unused_imports\".\n+    /// On the command line, underscores become dashes.\n+    pub name: &'static str,\n+\n+    /// Default level for the lint.\n+    pub default_level: Level,\n+\n+    /// Description of the lint or the issue it detects.\n+    ///\n+    /// e.g., \"imports that are never used\"\n+    pub desc: &'static str,\n+\n+    /// Starting at the given edition, default to the given lint level. If this is `None`, then use\n+    /// `default_level`.\n+    pub edition_lint_opts: Option<(Edition, Level)>,\n+\n+    /// `true` if this lint is reported even inside expansions of external macros.\n+    pub report_in_external_macro: bool,\n+\n+    pub future_incompatible: Option<FutureIncompatibleInfo>,\n+\n+    pub is_plugin: bool,\n+}\n+\n+/// Extra information for a future incompatibility lint.\n+#[derive(Copy, Clone, Debug)]\n+pub struct FutureIncompatibleInfo {\n+    /// e.g., a URL for an issue/PR/RFC or error code\n+    pub reference: &'static str,\n+    /// If this is an edition fixing lint, the edition in which\n+    /// this lint becomes obsolete\n+    pub edition: Option<Edition>,\n+}\n+\n+impl Lint {\n+    pub const fn default_fields_for_macro() -> Self {\n+        Lint {\n+            name: \"\",\n+            default_level: Level::Forbid,\n+            desc: \"\",\n+            edition_lint_opts: None,\n+            is_plugin: false,\n+            report_in_external_macro: false,\n+            future_incompatible: None,\n+        }\n+    }\n+\n+    /// Gets the lint's name, with ASCII letters converted to lowercase.\n+    pub fn name_lower(&self) -> String {\n+        self.name.to_ascii_lowercase()\n+    }\n+\n+    pub fn default_level(&self, edition: Edition) -> Level {\n+        self.edition_lint_opts\n+            .filter(|(e, _)| *e <= edition)\n+            .map(|(_, l)| l)\n+            .unwrap_or(self.default_level)\n+    }\n+}"}]}