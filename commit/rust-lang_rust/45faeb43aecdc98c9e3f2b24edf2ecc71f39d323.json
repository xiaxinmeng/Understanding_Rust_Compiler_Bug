{"sha": "45faeb43aecdc98c9e3f2b24edf2ecc71f39d323", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZmFlYjQzYWVjZGM5OGM5ZTNmMmIyNGVkZjJlY2M3MWYzOWQzMjM=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-14T08:54:17Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-11-13T10:19:25Z"}, "message": "Reuse vector", "tree": {"sha": "5920b7b038bbe986c83b1341413e5b221d5ea685", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5920b7b038bbe986c83b1341413e5b221d5ea685"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45faeb43aecdc98c9e3f2b24edf2ecc71f39d323", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45faeb43aecdc98c9e3f2b24edf2ecc71f39d323", "html_url": "https://github.com/rust-lang/rust/commit/45faeb43aecdc98c9e3f2b24edf2ecc71f39d323", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45faeb43aecdc98c9e3f2b24edf2ecc71f39d323/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7f2bb634308a5f05f2af716482b67ba43701681", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7f2bb634308a5f05f2af716482b67ba43701681", "html_url": "https://github.com/rust-lang/rust/commit/a7f2bb634308a5f05f2af716482b67ba43701681"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "b94fb1d8437ed7089a6e84708e70116a4b851edd", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45faeb43aecdc98c9e3f2b24edf2ecc71f39d323/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45faeb43aecdc98c9e3f2b24edf2ecc71f39d323/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=45faeb43aecdc98c9e3f2b24edf2ecc71f39d323", "patch": "@@ -1367,14 +1367,18 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let mut used_input_regs = FxHashMap::default();\n         let mut used_output_regs = FxHashMap::default();\n+        let mut required_features: Vec<&str> = vec![];\n         for (idx, op) in operands.iter().enumerate() {\n             let op_sp = asm.operands[idx].1;\n             if let Some(reg) = op.reg() {\n+                // Make sure we don't accidentally carry features from the\n+                // previous iteration.\n+                required_features.clear();\n+\n                 // Validate register classes against currently enabled target\n                 // features. We check that at least one type is available for\n                 // the current target.\n                 let reg_class = reg.reg_class();\n-                let mut required_features: Vec<&str> = vec![];\n                 for &(_, feature) in reg_class.supported_types(asm_arch) {\n                     if let Some(feature) = feature {\n                         if self.sess.target_features.contains(&Symbol::intern(feature)) {"}]}