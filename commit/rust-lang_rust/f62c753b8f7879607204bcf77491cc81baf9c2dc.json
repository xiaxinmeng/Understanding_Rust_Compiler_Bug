{"sha": "f62c753b8f7879607204bcf77491cc81baf9c2dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MmM3NTNiOGY3ODc5NjA3MjA0YmNmNzc0OTFjYzgxYmFmOWMyZGM=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-04T16:11:20Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-04T16:41:14Z"}, "message": "add back `noalias` to `&mut T` pointer parameters\n\nThis was removed because these could alias with `&const T` or `@mut T`\nand those are now gone from the language. There are still aliasing\nissues within local scopes, but this is correct for function parameters.\n\nThis also removes the no-op `noalias` marker on proc (not a pointer) and\nleaves out the mention of #6750 because real type-based alias analysis\nis not within the scope of best effort usage of the `noalias` attribute.\n\nTest case:\n\n    pub fn foo(x: &mut &mut u32) {\n        **x = 5;\n        **x = 5;\n    }\n\nBefore:\n\n    define void @_ZN3foo20h0ce94c9671b0150bdaa4v0.0E(i32** nocapture readonly) unnamed_addr #0 {\n    entry-block:\n      %1 = load i32** %0, align 8\n      store i32 5, i32* %1, align 4\n      %2 = load i32** %0, align 8\n      store i32 5, i32* %2, align 4\n      ret void\n    }\n\nAfter:\n\n    define void @_ZN3foo20h0ce94c9671b0150bdaa4v0.0E(i32** noalias nocapture readonly) unnamed_addr #0 {\n    entry-block:\n      %1 = load i32** %0, align 8\n      store i32 5, i32* %1, align 4\n      ret void\n    }\n\nCloses #12436", "tree": {"sha": "2753ef1ac6dd653655dd970f4ab36f58aab09012", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2753ef1ac6dd653655dd970f4ab36f58aab09012"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f62c753b8f7879607204bcf77491cc81baf9c2dc", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f62c753b8f7879607204bcf77491cc81baf9c2dc", "html_url": "https://github.com/rust-lang/rust/commit/f62c753b8f7879607204bcf77491cc81baf9c2dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f62c753b8f7879607204bcf77491cc81baf9c2dc/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c9b77643c281a4f7055bc760ffba846744f2b4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c9b77643c281a4f7055bc760ffba846744f2b4b", "html_url": "https://github.com/rust-lang/rust/commit/1c9b77643c281a4f7055bc760ffba846744f2b4b"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "53a2dc8060572a9a42c7548dfe74c877f6aac0af", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f62c753b8f7879607204bcf77491cc81baf9c2dc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62c753b8f7879607204bcf77491cc81baf9c2dc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=f62c753b8f7879607204bcf77491cc81baf9c2dc", "patch": "@@ -186,8 +186,6 @@ fn decl_fn(llmod: ModuleRef, name: &str, cc: lib::llvm::CallConv,\n             }\n         }\n         // `~` pointer return values never alias because ownership is transferred\n-        // FIXME #6750 ~Trait cannot be directly marked as\n-        // noalias because the actual object pointer is nested.\n         ty::ty_uniq(..) // | ty::ty_trait(_, _, ty::UniqTraitStore, _, _)\n          => {\n             unsafe {\n@@ -258,23 +256,25 @@ pub fn decl_rust_fn(ccx: &CrateContext, has_env: bool,\n         let llarg = unsafe { llvm::LLVMGetParam(llfn, (offset + i) as c_uint) };\n         match ty::get(arg_ty).sty {\n             // `~` pointer parameters never alias because ownership is transferred\n-            // FIXME #6750 ~Trait cannot be directly marked as\n-            // noalias because the actual object pointer is nested.\n-            ty::ty_uniq(..) | // ty::ty_trait(_, _, ty::UniqTraitStore, _, _) |\n-            ty::ty_closure(~ty::ClosureTy {store: ty::UniqTraitStore, ..}) => {\n+            ty::ty_uniq(..) => {\n                 unsafe {\n                     llvm::LLVMAddAttribute(llarg, lib::llvm::NoAliasAttribute as c_uint);\n                 }\n-            },\n-            // When a reference in an argument has no named lifetime, it's\n-            // impossible for that reference to escape this function(ie, be\n-            // returned).\n+            }\n+            // `&mut` pointer parameters never alias other parameters, or mutable global data\n+            ty::ty_rptr(_, mt) if mt.mutbl == ast::MutMutable => {\n+                unsafe {\n+                    llvm::LLVMAddAttribute(llarg, lib::llvm::NoAliasAttribute as c_uint);\n+                }\n+            }\n+            // When a reference in an argument has no named lifetime, it's impossible for that\n+            // reference to escape this function (returned or stored beyond the call by a closure).\n             ty::ty_rptr(ReLateBound(_, BrAnon(_)), _) => {\n                 debug!(\"marking argument of {} as nocapture because of anonymous lifetime\", name);\n                 unsafe {\n                     llvm::LLVMAddAttribute(llarg, lib::llvm::NoCaptureAttribute as c_uint);\n                 }\n-            },\n+            }\n             _ => {\n                 // For non-immediate arguments the callee gets its own copy of\n                 // the value on the stack, so there are no aliases"}]}