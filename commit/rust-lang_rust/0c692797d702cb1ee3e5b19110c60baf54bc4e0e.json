{"sha": "0c692797d702cb1ee3e5b19110c60baf54bc4e0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNjkyNzk3ZDcwMmNiMWVlM2U1YjE5MTEwYzYwYmFmNTRiYzRlMGU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-03T12:48:52Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-03-19T09:15:35Z"}, "message": "rustc: rename DefId::to_local to expect_local and use it instead of LocalDefId::from_def_id.", "tree": {"sha": "196b51fdf80bf01bbfcb172c4b642e9567190c0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/196b51fdf80bf01bbfcb172c4b642e9567190c0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c692797d702cb1ee3e5b19110c60baf54bc4e0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c692797d702cb1ee3e5b19110c60baf54bc4e0e", "html_url": "https://github.com/rust-lang/rust/commit/0c692797d702cb1ee3e5b19110c60baf54bc4e0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c692797d702cb1ee3e5b19110c60baf54bc4e0e/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55ed19fe1bba25251f110c0bf2bc6e42d50f3129", "url": "https://api.github.com/repos/rust-lang/rust/commits/55ed19fe1bba25251f110c0bf2bc6e42d50f3129", "html_url": "https://github.com/rust-lang/rust/commit/55ed19fe1bba25251f110c0bf2bc6e42d50f3129"}], "stats": {"total": 36, "additions": 15, "deletions": 21}, "files": [{"sha": "dffbb37384636c8fbfd35a4f07ae53e5d3c46da2", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c692797d702cb1ee3e5b19110c60baf54bc4e0e/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c692797d702cb1ee3e5b19110c60baf54bc4e0e/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=0c692797d702cb1ee3e5b19110c60baf54bc4e0e", "patch": "@@ -425,7 +425,7 @@ impl<'tcx> DepNodeParams<'tcx> for LocalDefId {\n     }\n \n     fn recover(tcx: TyCtxt<'tcx>, dep_node: &DepNode) -> Option<Self> {\n-        dep_node.extract_def_id(tcx).map(|id| id.to_local())\n+        dep_node.extract_def_id(tcx).map(|id| id.expect_local())\n     }\n }\n "}, {"sha": "e7e4d01ea517a1fa20e9cd60476af03e07ed701e", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c692797d702cb1ee3e5b19110c60baf54bc4e0e/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c692797d702cb1ee3e5b19110c60baf54bc4e0e/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=0c692797d702cb1ee3e5b19110c60baf54bc4e0e", "patch": "@@ -657,7 +657,7 @@ impl<'a, 'tcx> SpecializedDecoder<DefId> for CacheDecoder<'a, 'tcx> {\n impl<'a, 'tcx> SpecializedDecoder<LocalDefId> for CacheDecoder<'a, 'tcx> {\n     #[inline]\n     fn specialized_decode(&mut self) -> Result<LocalDefId, Self::Error> {\n-        Ok(LocalDefId::from_def_id(DefId::decode(self)?))\n+        Ok(DefId::decode(self)?.expect_local())\n     }\n }\n "}, {"sha": "2bf74fe272ec97abc5bd5e801f9875b33ccf8de9", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c692797d702cb1ee3e5b19110c60baf54bc4e0e/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c692797d702cb1ee3e5b19110c60baf54bc4e0e/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=0c692797d702cb1ee3e5b19110c60baf54bc4e0e", "patch": "@@ -364,7 +364,7 @@ impl<'a, 'tcx> SpecializedDecoder<DefIndex> for DecodeContext<'a, 'tcx> {\n impl<'a, 'tcx> SpecializedDecoder<LocalDefId> for DecodeContext<'a, 'tcx> {\n     #[inline]\n     fn specialized_decode(&mut self) -> Result<LocalDefId, Self::Error> {\n-        self.specialized_decode().map(|i| LocalDefId::from_def_id(i))\n+        Ok(DefId::decode(self)?.expect_local())\n     }\n }\n "}, {"sha": "06c010716444dc790db780a2ed9cddaf8b1b0681", "filename": "src/librustc_mir/borrow_check/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c692797d702cb1ee3e5b19110c60baf54bc4e0e/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c692797d702cb1ee3e5b19110c60baf54bc4e0e/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs?ref=0c692797d702cb1ee3e5b19110c60baf54bc4e0e", "patch": "@@ -774,7 +774,7 @@ fn for_each_late_bound_region_defined_on<'tcx>(\n     fn_def_id: DefId,\n     mut f: impl FnMut(ty::Region<'tcx>),\n ) {\n-    if let Some(late_bounds) = tcx.is_late_bound_map(fn_def_id.to_local()) {\n+    if let Some(late_bounds) = tcx.is_late_bound_map(fn_def_id.expect_local()) {\n         for late_bound in late_bounds.iter() {\n             let hir_id = HirId { owner: fn_def_id.index, local_id: *late_bound };\n             let name = tcx.hir().name(hir_id);"}, {"sha": "470e4e7ed25c1fe1adfe0afa796628d55cf64822", "filename": "src/librustc_mir/const_eval/fn_queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c692797d702cb1ee3e5b19110c60baf54bc4e0e/src%2Flibrustc_mir%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c692797d702cb1ee3e5b19110c60baf54bc4e0e/src%2Flibrustc_mir%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Ffn_queries.rs?ref=0c692797d702cb1ee3e5b19110c60baf54bc4e0e", "patch": "@@ -85,7 +85,7 @@ pub fn is_min_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n pub fn is_parent_const_impl_raw(tcx: TyCtxt<'_>, hir_id: hir::HirId) -> bool {\n     let parent_id = tcx.hir().get_parent_did(hir_id);\n     if !parent_id.is_top_level_module() {\n-        is_const_impl_raw(tcx, LocalDefId::from_def_id(parent_id))\n+        is_const_impl_raw(tcx, parent_id.expect_local())\n     } else {\n         false\n     }\n@@ -171,7 +171,7 @@ fn const_fn_is_allowed_fn_ptr(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n pub fn provide(providers: &mut Providers<'_>) {\n     *providers = Providers {\n         is_const_fn_raw,\n-        is_const_impl_raw: |tcx, def_id| is_const_impl_raw(tcx, LocalDefId::from_def_id(def_id)),\n+        is_const_impl_raw: |tcx, def_id| is_const_impl_raw(tcx, def_id.expect_local()),\n         is_promotable_const_fn,\n         const_fn_is_allowed_fn_ptr,\n         ..*providers"}, {"sha": "02b596863ab4090b9026b72b4a4967559bbb89b4", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c692797d702cb1ee3e5b19110c60baf54bc4e0e/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c692797d702cb1ee3e5b19110c60baf54bc4e0e/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=0c692797d702cb1ee3e5b19110c60baf54bc4e0e", "patch": "@@ -10,7 +10,6 @@ use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::ty::{self, AdtKind, Ty};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n-use rustc_hir::def_id::LocalDefId;\n use rustc_index::vec::Idx;\n use rustc_span::Span;\n \n@@ -812,7 +811,7 @@ fn convert_var<'tcx>(\n             let closure_def_id = cx.body_owner;\n             let upvar_id = ty::UpvarId {\n                 var_path: ty::UpvarPath { hir_id: var_hir_id },\n-                closure_expr_id: LocalDefId::from_def_id(closure_def_id),\n+                closure_expr_id: closure_def_id.expect_local(),\n             };\n             let var_ty = cx.tables().node_type(var_hir_id);\n \n@@ -987,7 +986,7 @@ fn capture_upvar<'tcx>(\n ) -> ExprRef<'tcx> {\n     let upvar_id = ty::UpvarId {\n         var_path: ty::UpvarPath { hir_id: var_hir_id },\n-        closure_expr_id: cx.tcx.hir().local_def_id(closure_expr.hir_id).to_local(),\n+        closure_expr_id: cx.tcx.hir().local_def_id(closure_expr.hir_id).expect_local(),\n     };\n     let upvar_capture = cx.tables().upvar_capture(upvar_id);\n     let temp_lifetime = cx.region_scope_tree.temporary_scope(closure_expr.hir_id.local_id);"}, {"sha": "1aaec66722a78d3ed9232b2785209fb294880440", "filename": "src/librustc_span/def_id.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0c692797d702cb1ee3e5b19110c60baf54bc4e0e/src%2Flibrustc_span%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c692797d702cb1ee3e5b19110c60baf54bc4e0e/src%2Flibrustc_span%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fdef_id.rs?ref=0c692797d702cb1ee3e5b19110c60baf54bc4e0e", "patch": "@@ -164,8 +164,9 @@ impl DefId {\n     }\n \n     #[inline]\n-    pub fn to_local(self) -> LocalDefId {\n-        LocalDefId::from_def_id(self)\n+    pub fn expect_local(self) -> LocalDefId {\n+        assert!(self.is_local());\n+        LocalDefId { local_def_index: self.index }\n     }\n \n     pub fn is_top_level_module(self) -> bool {\n@@ -216,12 +217,6 @@ pub struct LocalDefId {\n }\n \n impl LocalDefId {\n-    #[inline]\n-    pub fn from_def_id(def_id: DefId) -> LocalDefId {\n-        assert!(def_id.is_local());\n-        LocalDefId { local_def_index: def_id.index }\n-    }\n-\n     #[inline]\n     pub fn to_def_id(self) -> DefId {\n         DefId { krate: LOCAL_CRATE, index: self.local_def_index }"}, {"sha": "1b5f151870c2f7400f449384b83d8479a756c5c5", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c692797d702cb1ee3e5b19110c60baf54bc4e0e/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c692797d702cb1ee3e5b19110c60baf54bc4e0e/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=0c692797d702cb1ee3e5b19110c60baf54bc4e0e", "patch": "@@ -118,7 +118,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             for (&var_hir_id, _) in upvars.iter() {\n                 let upvar_id = ty::UpvarId {\n                     var_path: ty::UpvarPath { hir_id: var_hir_id },\n-                    closure_expr_id: LocalDefId::from_def_id(closure_def_id),\n+                    closure_expr_id: closure_def_id.expect_local(),\n                 };\n                 debug!(\"seed upvar_id {:?}\", upvar_id);\n                 // Adding the upvar Id to the list of Upvars, which will be added\n@@ -228,7 +228,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let upvar_ty = self.node_ty(var_hir_id);\n                     let upvar_id = ty::UpvarId {\n                         var_path: ty::UpvarPath { hir_id: var_hir_id },\n-                        closure_expr_id: LocalDefId::from_def_id(closure_def_id),\n+                        closure_expr_id: closure_def_id.expect_local(),\n                     };\n                     let capture = self.tables.borrow().upvar_capture(upvar_id);\n "}, {"sha": "a45d8ce6823a3ddae3722dc9c309f0fb66af1b5a", "filename": "src/librustc_typeck/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c692797d702cb1ee3e5b19110c60baf54bc4e0e/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c692797d702cb1ee3e5b19110c60baf54bc4e0e/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs?ref=0c692797d702cb1ee3e5b19110c60baf54bc4e0e", "patch": "@@ -519,7 +519,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n             for &var_id in upvars.keys() {\n                 let upvar_id = ty::UpvarId {\n                     var_path: ty::UpvarPath { hir_id: var_id },\n-                    closure_expr_id: closure_def_id.to_local(),\n+                    closure_expr_id: closure_def_id.expect_local(),\n                 };\n                 let upvar_capture = self.mc.tables.upvar_capture(upvar_id);\n                 let captured_place = return_if_err!(self.cat_captured_var("}, {"sha": "7d8bf71cf97b7e455d8783ad05e9275dcaa33307", "filename": "src/librustc_typeck/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c692797d702cb1ee3e5b19110c60baf54bc4e0e/src%2Flibrustc_typeck%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c692797d702cb1ee3e5b19110c60baf54bc4e0e/src%2Flibrustc_typeck%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fmem_categorization.rs?ref=0c692797d702cb1ee3e5b19110c60baf54bc4e0e", "patch": "@@ -470,7 +470,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n \n         let upvar_id = ty::UpvarId {\n             var_path: ty::UpvarPath { hir_id: var_id },\n-            closure_expr_id: closure_expr_def_id.to_local(),\n+            closure_expr_id: closure_expr_def_id.expect_local(),\n         };\n         let var_ty = self.node_ty(var_id)?;\n "}]}