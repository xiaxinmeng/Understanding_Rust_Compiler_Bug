{"sha": "ff8c8dfbe66701531e3e5e335c28c544d0fbc945", "node_id": "C_kwDOAAsO6NoAKGZmOGM4ZGZiZTY2NzAxNTMxZTNlNWUzMzVjMjhjNTQ0ZDBmYmM5NDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-22T20:47:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-22T20:47:17Z"}, "message": "Auto merge of #104735 - the8472:simd-contains-fix, r=thomcc\n\nSimd contains fix\n\nFixes #104726\n\nThe bug was introduced by an improvement late in the original PR (#103779) which added the backtracking when the last and first byte of the needle were the same. That changed the meaning of the variable for the last probe offset, which I should have split into the last byte offset and last probe offset. Not doing so lead to incorrect loop conditions.", "tree": {"sha": "5179c28a5532cf17ceb11c39cdb45c35e88511d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5179c28a5532cf17ceb11c39cdb45c35e88511d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff8c8dfbe66701531e3e5e335c28c544d0fbc945", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff8c8dfbe66701531e3e5e335c28c544d0fbc945", "html_url": "https://github.com/rust-lang/rust/commit/ff8c8dfbe66701531e3e5e335c28c544d0fbc945", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff8c8dfbe66701531e3e5e335c28c544d0fbc945/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e221616639fb87de9dca21e252ee8a2565ec51d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e221616639fb87de9dca21e252ee8a2565ec51d0", "html_url": "https://github.com/rust-lang/rust/commit/e221616639fb87de9dca21e252ee8a2565ec51d0"}, {"sha": "3ed8fccff5295e1d92419e7c67502e434ff1e98f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ed8fccff5295e1d92419e7c67502e434ff1e98f", "html_url": "https://github.com/rust-lang/rust/commit/3ed8fccff5295e1d92419e7c67502e434ff1e98f"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "4d182be02c9e9588aaec476b19a19d0693d11983", "filename": "library/alloc/tests/str.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff8c8dfbe66701531e3e5e335c28c544d0fbc945/library%2Falloc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff8c8dfbe66701531e3e5e335c28c544d0fbc945/library%2Falloc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstr.rs?ref=ff8c8dfbe66701531e3e5e335c28c544d0fbc945", "patch": "@@ -1631,6 +1631,18 @@ fn strslice_issue_16878() {\n     assert!(!\"00abc01234567890123456789abc\".contains(\"bcabc\"));\n }\n \n+#[test]\n+fn strslice_issue_104726() {\n+    // Edge-case in the simd_contains impl.\n+    // The first and last byte are the same so it backtracks by one byte\n+    // which aligns with the end of the string. Previously incorrect offset calculations\n+    // lead to out-of-bounds slicing.\n+    #[rustfmt::skip]\n+    let needle =                        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaba\";\n+    let haystack = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab\";\n+    assert!(!haystack.contains(needle));\n+}\n+\n #[test]\n #[cfg_attr(miri, ignore)] // Miri is too slow\n fn test_strslice_contains() {"}, {"sha": "d76d6f8b2a2d997a8324e75448025a7db7de3ebc", "filename": "library/core/src/str/pattern.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff8c8dfbe66701531e3e5e335c28c544d0fbc945/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff8c8dfbe66701531e3e5e335c28c544d0fbc945/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs?ref=ff8c8dfbe66701531e3e5e335c28c544d0fbc945", "patch": "@@ -1741,6 +1741,7 @@ fn simd_contains(needle: &str, haystack: &str) -> Option<bool> {\n     use crate::simd::{SimdPartialEq, ToBitMask};\n \n     let first_probe = needle[0];\n+    let last_byte_offset = needle.len() - 1;\n \n     // the offset used for the 2nd vector\n     let second_probe_offset = if needle.len() == 2 {\n@@ -1758,7 +1759,7 @@ fn simd_contains(needle: &str, haystack: &str) -> Option<bool> {\n     };\n \n     // do a naive search if the haystack is too small to fit\n-    if haystack.len() < Block::LANES + second_probe_offset {\n+    if haystack.len() < Block::LANES + last_byte_offset {\n         return Some(haystack.windows(needle.len()).any(|c| c == needle));\n     }\n \n@@ -1815,7 +1816,7 @@ fn simd_contains(needle: &str, haystack: &str) -> Option<bool> {\n     // The loop condition must ensure that there's enough headroom to read LANE bytes,\n     // and not only at the current index but also at the index shifted by block_offset\n     const UNROLL: usize = 4;\n-    while i + second_probe_offset + UNROLL * Block::LANES < haystack.len() && !result {\n+    while i + last_byte_offset + UNROLL * Block::LANES < haystack.len() && !result {\n         let mut masks = [0u16; UNROLL];\n         for j in 0..UNROLL {\n             masks[j] = test_chunk(i + j * Block::LANES);\n@@ -1828,7 +1829,7 @@ fn simd_contains(needle: &str, haystack: &str) -> Option<bool> {\n         }\n         i += UNROLL * Block::LANES;\n     }\n-    while i + second_probe_offset + Block::LANES < haystack.len() && !result {\n+    while i + last_byte_offset + Block::LANES < haystack.len() && !result {\n         let mask = test_chunk(i);\n         if mask != 0 {\n             result |= check_mask(i, mask, result);\n@@ -1840,7 +1841,7 @@ fn simd_contains(needle: &str, haystack: &str) -> Option<bool> {\n     // This simply repeats the same procedure but as right-aligned chunk instead\n     // of a left-aligned one. The last byte must be exactly flush with the string end so\n     // we don't miss a single byte or read out of bounds.\n-    let i = haystack.len() - second_probe_offset - Block::LANES;\n+    let i = haystack.len() - last_byte_offset - Block::LANES;\n     let mask = test_chunk(i);\n     if mask != 0 {\n         result |= check_mask(i, mask, result);\n@@ -1860,6 +1861,7 @@ fn simd_contains(needle: &str, haystack: &str) -> Option<bool> {\n #[cfg(all(target_arch = \"x86_64\", target_feature = \"sse2\"))] // only called on x86\n #[inline]\n unsafe fn small_slice_eq(x: &[u8], y: &[u8]) -> bool {\n+    debug_assert_eq!(x.len(), y.len());\n     // This function is adapted from\n     // https://github.com/BurntSushi/memchr/blob/8037d11b4357b0f07be2bb66dc2659d9cf28ad32/src/memmem/util.rs#L32\n "}]}