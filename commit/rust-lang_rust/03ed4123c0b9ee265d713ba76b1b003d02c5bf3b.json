{"sha": "03ed4123c0b9ee265d713ba76b1b003d02c5bf3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzZWQ0MTIzYzBiOWVlMjY1ZDcxM2JhNzZiMWIwMDNkMDJjNWJmM2I=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-09-30T16:51:09Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-09-30T16:51:09Z"}, "message": "Add FileHandle struct", "tree": {"sha": "5a63556e7eda3a854214580c5d97d62b6b9645b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a63556e7eda3a854214580c5d97d62b6b9645b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03ed4123c0b9ee265d713ba76b1b003d02c5bf3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03ed4123c0b9ee265d713ba76b1b003d02c5bf3b", "html_url": "https://github.com/rust-lang/rust/commit/03ed4123c0b9ee265d713ba76b1b003d02c5bf3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03ed4123c0b9ee265d713ba76b1b003d02c5bf3b/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b540e5d24ec97138eb2e1baf6617038e5723797e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b540e5d24ec97138eb2e1baf6617038e5723797e", "html_url": "https://github.com/rust-lang/rust/commit/b540e5d24ec97138eb2e1baf6617038e5723797e"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "44acf45c9a53bd2b29dd24891ad85fbead9d4366", "filename": "src/shims/io.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/03ed4123c0b9ee265d713ba76b1b003d02c5bf3b/src%2Fshims%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ed4123c0b9ee265d713ba76b1b003d02c5bf3b/src%2Fshims%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fio.rs?ref=03ed4123c0b9ee265d713ba76b1b003d02c5bf3b", "patch": "@@ -5,17 +5,20 @@ use std::io::Read;\n use crate::stacked_borrows::Tag;\n use crate::*;\n \n+struct FileHandle {\n+    file: File,\n+    flag: i32,\n+}\n+\n pub struct FileHandler {\n-    files: HashMap<i32, File>,\n-    flags: HashMap<i32, i32>,\n+    handles: HashMap<i32, FileHandle>,\n     low: i32,\n }\n \n impl Default for FileHandler {\n     fn default() -> Self {\n         FileHandler {\n-            files: Default::default(),\n-            flags: Default::default(),\n+            handles: Default::default(),\n             // 0, 1 and 2 are reserved for stdin, stdout and stderr\n             low: 3,\n         }\n@@ -51,8 +54,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             Ok(file) => {\n                 let mut fh = &mut this.machine.file_handler;\n                 fh.low += 1;\n-                fh.files.insert(fh.low, file);\n-                fh.flags.insert(fh.low, flag);\n+                fh.handles.insert(fh.low, FileHandle{ file, flag});\n                 Ok(fh.low)\n             }\n \n@@ -84,7 +86,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let flag = this.read_scalar(arg_op.unwrap())?.to_i32()?;\n             // The only usage of this in stdlib at the moment is to enable the `FD_CLOEXEC` flag.\n             let fd_cloexec = this.eval_libc_i32(\"FD_CLOEXEC\")?;\n-            if let Some(old_flag) = this.machine.file_handler.flags.get_mut(&fd) {\n+            if let Some(FileHandle{ flag: old_flag, .. }) = this.machine.file_handler.handles.get_mut(&fd) {\n                 if flag ^ *old_flag == fd_cloexec {\n                     *old_flag = flag;\n                 } else {\n@@ -93,8 +95,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             Ok(0)\n         } else if cmd == this.eval_libc_i32(\"F_GETFD\")? {\n-            if let Some(flag) = this.machine.file_handler.flags.get(&fd) {\n-                Ok(*flag)\n+            if let Some(handle) = this.machine.file_handler.handles.get(&fd) {\n+                Ok(handle.flag)\n             } else {\n                 this.machine.last_error = this.eval_libc_i32(\"EBADF\")? as u32;\n                 Ok(-1)\n@@ -113,8 +115,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n \n-        if let Some(file) = this.machine.file_handler.files.remove(&fd) {\n-            match file.sync_all() {\n+        if let Some(handle) = this.machine.file_handler.handles.remove(&fd) {\n+            match handle.file.sync_all() {\n                 Ok(()) => Ok(0),\n                 Err(e) => {\n                     this.machine.last_error = e.raw_os_error().unwrap() as u32;\n@@ -145,7 +147,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let buf = this.force_ptr(this.read_scalar(buf_op)?.not_undef()?)?;\n         let count = this.read_scalar(count_op)?.to_usize(&*this.tcx)?;\n \n-        if let Some(file) = this.machine.file_handler.files.get_mut(&fd) {\n+        if let Some(FileHandle { file, ..}) = this.machine.file_handler.handles.get_mut(&fd) {\n             let mut bytes = vec![0; count as usize];\n             match file.read(&mut bytes) {\n                 Ok(read_bytes) => {"}]}