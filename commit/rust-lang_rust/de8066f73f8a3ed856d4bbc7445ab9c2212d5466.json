{"sha": "de8066f73f8a3ed856d4bbc7445ab9c2212d5466", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlODA2NmY3M2Y4YTNlZDg1NmQ0YmJjNzQ0NWFiOWMyMjEyZDU0NjY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-18T23:52:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-18T23:52:06Z"}, "message": "Rollup merge of #61842 - Zoxc:trim-lift, r=eddyb\n\nRemove unnecessary lift calls\n\nNote that some of these might be useful for sanity checking that there's no infer types or regions.\n\nr? @eddyb", "tree": {"sha": "86ef7282923696267220532b4832ba5c57c73443", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86ef7282923696267220532b4832ba5c57c73443"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de8066f73f8a3ed856d4bbc7445ab9c2212d5466", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdCXkmCRBK7hj4Ov3rIwAAdHIIABDznxBwT9GshbgHw8H2OHSS\nyfzcptrRJX817Yc2tapkJJzsgahqsNIosCRsoiTzzH4WXS/4Q85GPoV20Xu361Tf\nJbe981bBHTItNFdmGxlv9B+q5VWi5MJljjm91GnSNIRNoKoA1+3fvEQXzNsrEqhk\nOt2JxaaLqj1u7GlmwbLBh+FwlburPoDSpgTEANco65WGA+2+O33FV2KAh+7un8n/\nkvcp/fQIfUG6ZIz9khdo474tD/MuuuyKZWaCUtLg1u9cozo4rg4tv+5JDEGFwGcN\nmulM5ECjmjGTHsIanS2SGvUwBU1+ZmC6Ut01eSDklvd0594OgNFTyp5rQH/n8Zk=\n=/Zsj\n-----END PGP SIGNATURE-----\n", "payload": "tree 86ef7282923696267220532b4832ba5c57c73443\nparent 404c854d03c265c31179ab4e0d0db9c0b149e3f9\nparent 007aabae930d753742f6916d91d3fc8838db08a1\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1560901926 +0200\ncommitter GitHub <noreply@github.com> 1560901926 +0200\n\nRollup merge of #61842 - Zoxc:trim-lift, r=eddyb\n\nRemove unnecessary lift calls\n\nNote that some of these might be useful for sanity checking that there's no infer types or regions.\n\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de8066f73f8a3ed856d4bbc7445ab9c2212d5466", "html_url": "https://github.com/rust-lang/rust/commit/de8066f73f8a3ed856d4bbc7445ab9c2212d5466", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "404c854d03c265c31179ab4e0d0db9c0b149e3f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/404c854d03c265c31179ab4e0d0db9c0b149e3f9", "html_url": "https://github.com/rust-lang/rust/commit/404c854d03c265c31179ab4e0d0db9c0b149e3f9"}, {"sha": "007aabae930d753742f6916d91d3fc8838db08a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/007aabae930d753742f6916d91d3fc8838db08a1", "html_url": "https://github.com/rust-lang/rust/commit/007aabae930d753742f6916d91d3fc8838db08a1"}], "stats": {"total": 139, "additions": 50, "deletions": 89}, "files": [{"sha": "3d57a89493e1ea7aaf0c09d7e186c6e82ac647fb", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=de8066f73f8a3ed856d4bbc7445ab9c2212d5466", "patch": "@@ -14,7 +14,7 @@ use crate::mir::interpret::ConstValue;\n use std::sync::atomic::Ordering;\n use crate::ty::fold::{TypeFoldable, TypeFolder};\n use crate::ty::subst::Kind;\n-use crate::ty::{self, BoundVar, InferConst, Lift, List, Ty, TyCtxt, TypeFlags};\n+use crate::ty::{self, BoundVar, InferConst, List, Ty, TyCtxt, TypeFlags};\n use crate::ty::flags::FlagComputation;\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -43,7 +43,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         query_state: &mut OriginalQueryValues<'tcx>,\n     ) -> Canonicalized<'tcx, V>\n     where\n-        V: TypeFoldable<'tcx> + Lift<'tcx>,\n+        V: TypeFoldable<'tcx>,\n     {\n         self.tcx\n             .sess\n@@ -87,7 +87,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     /// [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html#canonicalizing-the-query-result\n     pub fn canonicalize_response<V>(&self, value: &V) -> Canonicalized<'tcx, V>\n     where\n-        V: TypeFoldable<'tcx> + Lift<'tcx>,\n+        V: TypeFoldable<'tcx>,\n     {\n         let mut query_state = OriginalQueryValues::default();\n         Canonicalizer::canonicalize(\n@@ -101,7 +101,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n \n     pub fn canonicalize_user_type_annotation<V>(&self, value: &V) -> Canonicalized<'tcx, V>\n     where\n-        V: TypeFoldable<'tcx> + Lift<'tcx>,\n+        V: TypeFoldable<'tcx>,\n     {\n         let mut query_state = OriginalQueryValues::default();\n         Canonicalizer::canonicalize(\n@@ -132,7 +132,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         query_state: &mut OriginalQueryValues<'tcx>,\n     ) -> Canonicalized<'tcx, V>\n     where\n-        V: TypeFoldable<'tcx> + Lift<'tcx>,\n+        V: TypeFoldable<'tcx>,\n     {\n         self.tcx\n             .sess\n@@ -506,7 +506,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n         query_state: &mut OriginalQueryValues<'tcx>,\n     ) -> Canonicalized<'tcx, V>\n     where\n-        V: TypeFoldable<'tcx> + Lift<'tcx>,\n+        V: TypeFoldable<'tcx>,\n     {\n         let needs_canonical_flags = if canonicalize_region_mode.any() {\n             TypeFlags::KEEP_IN_LOCAL_TCX |\n@@ -520,20 +520,12 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n             TypeFlags::HAS_CT_PLACEHOLDER\n         };\n \n-        let gcx = tcx.global_tcx();\n-\n         // Fast path: nothing that needs to be canonicalized.\n         if !value.has_type_flags(needs_canonical_flags) {\n-            let out_value = gcx.lift(value).unwrap_or_else(|| {\n-                bug!(\n-                    \"failed to lift `{:?}` (nothing to canonicalize)\",\n-                    value\n-                )\n-            });\n             let canon_value = Canonical {\n                 max_universe: ty::UniverseIndex::ROOT,\n                 variables: List::empty(),\n-                value: out_value,\n+                value: value.clone(),\n             };\n             return canon_value;\n         }\n@@ -553,13 +545,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n         // Once we have canonicalized `out_value`, it should not\n         // contain anything that ties it to this inference context\n         // anymore, so it should live in the global arena.\n-        let out_value = gcx.lift(&out_value).unwrap_or_else(|| {\n-            bug!(\n-                \"failed to lift `{:?}`, canonicalized from `{:?}`\",\n-                out_value,\n-                value\n-            )\n-        });\n+        debug_assert!(!out_value.has_type_flags(TypeFlags::KEEP_IN_LOCAL_TCX));\n \n         let canonical_variables = tcx.intern_canonical_var_infos(&canonicalizer.variables);\n "}, {"sha": "b2c7bd73b6812833d0aa3d95521894ffe6fb6533", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=de8066f73f8a3ed856d4bbc7445ab9c2212d5466", "patch": "@@ -194,10 +194,10 @@ pub struct QueryResponse<'tcx, R> {\n     pub value: R,\n }\n \n-pub type Canonicalized<'tcx, V> = Canonical<'tcx, <V as Lift<'tcx>>::Lifted>;\n+pub type Canonicalized<'tcx, V> = Canonical<'tcx, V>;\n \n pub type CanonicalizedQueryResponse<'tcx, T> =\n-    &'tcx Canonical<'tcx, QueryResponse<'tcx, <T as Lift<'tcx>>::Lifted>>;\n+    &'tcx Canonical<'tcx, QueryResponse<'tcx, T>>;\n \n /// Indicates whether or not we were able to prove the query to be\n /// true."}, {"sha": "3e92fed005cd1f141c4d66c341ac71648395733c", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=de8066f73f8a3ed856d4bbc7445ab9c2212d5466", "patch": "@@ -26,7 +26,7 @@ use crate::traits::TraitEngine;\n use crate::traits::{Obligation, ObligationCause, PredicateObligation};\n use crate::ty::fold::TypeFoldable;\n use crate::ty::subst::{Kind, UnpackedKind};\n-use crate::ty::{self, BoundVar, InferConst, Lift, Ty, TyCtxt};\n+use crate::ty::{self, BoundVar, InferConst, Ty, TyCtxt};\n use crate::util::captures::Captures;\n \n impl<'tcx> InferCtxtBuilder<'tcx> {\n@@ -53,8 +53,8 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n     ) -> Fallible<CanonicalizedQueryResponse<'tcx, R>>\n     where\n         K: TypeFoldable<'tcx>,\n-        R: Debug + Lift<'tcx> + TypeFoldable<'tcx>,\n-        Canonical<'tcx, <QueryResponse<'tcx, R> as Lift<'tcx>>::Lifted>: ArenaAllocatable,\n+        R: Debug + TypeFoldable<'tcx>,\n+        Canonical<'tcx, QueryResponse<'tcx, R>>: ArenaAllocatable,\n     {\n         self.enter_with_canonical(\n             DUMMY_SP,\n@@ -99,8 +99,8 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         fulfill_cx: &mut dyn TraitEngine<'tcx>,\n     ) -> Fallible<CanonicalizedQueryResponse<'tcx, T>>\n     where\n-        T: Debug + Lift<'tcx> + TypeFoldable<'tcx>,\n-        Canonical<'tcx, <QueryResponse<'tcx, T> as Lift<'tcx>>::Lifted>: ArenaAllocatable,\n+        T: Debug + TypeFoldable<'tcx>,\n+        Canonical<'tcx, QueryResponse<'tcx, T>>: ArenaAllocatable,\n     {\n         let query_response = self.make_query_response(inference_vars, answer, fulfill_cx)?;\n         let canonical_result = self.canonicalize_response(&query_response);\n@@ -126,9 +126,9 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         &self,\n         inference_vars: CanonicalVarValues<'tcx>,\n         answer: T,\n-    ) -> Canonical<'tcx, QueryResponse<'tcx, <T as Lift<'tcx>>::Lifted>>\n+    ) -> Canonical<'tcx, QueryResponse<'tcx, T>>\n     where\n-        T: Debug + Lift<'tcx> + TypeFoldable<'tcx>,\n+        T: Debug + TypeFoldable<'tcx>,\n     {\n         self.canonicalize_response(&QueryResponse {\n             var_values: inference_vars,\n@@ -147,7 +147,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         fulfill_cx: &mut dyn TraitEngine<'tcx>,\n     ) -> Result<QueryResponse<'tcx, T>, NoSolution>\n     where\n-        T: Debug + TypeFoldable<'tcx> + Lift<'tcx>,\n+        T: Debug + TypeFoldable<'tcx>,\n     {\n         let tcx = self.tcx;\n "}, {"sha": "60554a30060bbc2ee39febfea04f628046ac642e", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=de8066f73f8a3ed856d4bbc7445ab9c2212d5466", "patch": "@@ -469,11 +469,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             definition_ty\n         );\n \n-        // We can unwrap here because our reverse mapper always\n-        // produces things with 'tcx lifetime, though the type folder\n-        // obscures that.\n-        let definition_ty = gcx.lift(&definition_ty).unwrap();\n-\n         definition_ty\n     }\n }"}, {"sha": "c0f56a33eec8f031308ca6007ae2dc4af275620c", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=de8066f73f8a3ed856d4bbc7445ab9c2212d5466", "patch": "@@ -817,10 +817,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n                              .unwrap_or(ty::ClosureKind::LATTICE_BOTTOM),\n \n                     None =>\n-                        self.tcx.global_tcx()\n-                                .lift(&closure_substs)\n-                                .expect(\"no inference cx, but inference variables in closure ty\")\n-                                .closure_kind(closure_def_id, self.tcx.global_tcx()),\n+                        closure_substs.closure_kind(closure_def_id, self.tcx.global_tcx()),\n                 }\n             }\n             _ => span_bug!(span, \"unexpected type for fn in mem_categorization: {:?}\", ty),"}, {"sha": "97fb430a3e0519af9d9e1fa975e9b3b4fdc08140", "filename": "src/librustc/traits/codegen/mod.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc%2Ftraits%2Fcodegen%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc%2Ftraits%2Fcodegen%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcodegen%2Fmod.rs?ref=de8066f73f8a3ed856d4bbc7445ab9c2212d5466", "patch": "@@ -141,9 +141,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         &self,\n         fulfill_cx: &mut FulfillmentContext<'tcx>,\n         result: &T,\n-    ) -> T::Lifted\n+    ) -> T\n     where\n-        T: TypeFoldable<'tcx> + ty::Lift<'tcx>,\n+        T: TypeFoldable<'tcx>,\n     {\n         debug!(\"drain_fulfillment_cx_or_panic()\");\n \n@@ -155,10 +155,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n \n         let result = self.resolve_vars_if_possible(result);\n-        let result = self.tcx.erase_regions(&result);\n-\n-        self.tcx.lift_to_global(&result).unwrap_or_else(||\n-            bug!(\"Uninferred types/regions/consts in `{:?}`\", result)\n-        )\n+        self.tcx.erase_regions(&result)\n     }\n }"}, {"sha": "0f4b7aff82bce82cb1646be85f7145f00f7381e9", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=de8066f73f8a3ed856d4bbc7445ab9c2212d5466", "patch": "@@ -409,7 +409,6 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                             promoted: None\n                         };\n                         if let Ok(evaluated) = tcx.const_eval(param_env.and(cid)) {\n-                            let substs = tcx.lift_to_global(&substs).unwrap();\n                             let evaluated = evaluated.subst(tcx, substs);\n                             return evaluated;\n                         }"}, {"sha": "5dd1b9e3d53f3a6db5d9e7b2ad831c6527ae7af4", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=de8066f73f8a3ed856d4bbc7445ab9c2212d5466", "patch": "@@ -203,7 +203,6 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                             promoted: None,\n                         };\n                         if let Ok(evaluated) = tcx.const_eval(param_env.and(cid)) {\n-                            let substs = tcx.lift_to_global(&substs).unwrap();\n                             let evaluated = evaluated.subst(tcx, substs);\n                             return evaluated;\n                         }"}, {"sha": "4a07a3120f3e83b61409caf691e7cdf72f29a64f", "filename": "src/librustc/traits/query/type_op/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=de8066f73f8a3ed856d4bbc7445ab9c2212d5466", "patch": "@@ -8,7 +8,7 @@ use std::rc::Rc;\n use crate::traits::query::Fallible;\n use crate::traits::ObligationCause;\n use crate::ty::fold::TypeFoldable;\n-use crate::ty::{Lift, ParamEnvAnd, TyCtxt};\n+use crate::ty::{ParamEnvAnd, TyCtxt};\n \n pub mod ascribe_user_type;\n pub mod custom;\n@@ -44,8 +44,8 @@ pub trait TypeOp<'tcx>: Sized + fmt::Debug {\n /// which produces the resulting query region constraints.\n ///\n /// [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html\n-pub trait QueryTypeOp<'tcx>: fmt::Debug + Sized + TypeFoldable<'tcx> + Lift<'tcx> {\n-    type QueryResponse: TypeFoldable<'tcx> + Lift<'tcx>;\n+pub trait QueryTypeOp<'tcx>: fmt::Debug + Sized + TypeFoldable<'tcx> + 'tcx {\n+    type QueryResponse: TypeFoldable<'tcx>;\n \n     /// Give query the option for a simple fast path that never\n     /// actually hits the tcx cache lookup etc. Return `Some(r)` with"}, {"sha": "3fe85d8d83eb9c39eb67d5e7ec9c4eb2e74611a9", "filename": "src/librustc/traits/query/type_op/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs?ref=de8066f73f8a3ed856d4bbc7445ab9c2212d5466", "patch": "@@ -20,7 +20,7 @@ where\n \n impl<'tcx, T> super::QueryTypeOp<'tcx> for Normalize<T>\n where\n-    T: Normalizable<'tcx>,\n+    T: Normalizable<'tcx> + 'tcx,\n {\n     type QueryResponse = T;\n "}, {"sha": "43bb4edd9b27d8e75d1501e9915cc93289a0a838", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=de8066f73f8a3ed856d4bbc7445ab9c2212d5466", "patch": "@@ -132,12 +132,7 @@ pub fn find_associated_item<'tcx>(\n                 let substs = substs.rebase_onto(tcx, trait_def_id, impl_data.substs);\n                 let substs = translate_substs(&infcx, param_env, impl_data.impl_def_id,\n                                               substs, node_item.node);\n-                let substs = infcx.tcx.erase_regions(&substs);\n-                tcx.lift(&substs).unwrap_or_else(||\n-                    bug!(\"find_method: translate_substs \\\n-                          returned {:?} which contains inference types/regions\",\n-                         substs)\n-                )\n+                infcx.tcx.erase_regions(&substs)\n             });\n             (node_item.item.def_id, substs)\n         }"}, {"sha": "b8bdde4a787380a4e110e8691c578107413fe821", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=de8066f73f8a3ed856d4bbc7445ab9c2212d5466", "patch": "@@ -192,9 +192,12 @@ impl<'tcx> ty::TyS<'tcx> {\n \n             ty::Adt(def, _) => format!(\"{} `{}`\", def.descr(), tcx.def_path_str(def.did)).into(),\n             ty::Foreign(def_id) => format!(\"extern type `{}`\", tcx.def_path_str(def_id)).into(),\n-            ty::Array(_, n) => match n.assert_usize(tcx) {\n-                Some(n) => format!(\"array of {} elements\", n).into(),\n-                None => \"array\".into(),\n+            ty::Array(_, n) => {\n+                let n = tcx.lift_to_global(&n).unwrap();\n+                match n.assert_usize(tcx) {\n+                    Some(n) => format!(\"array of {} elements\", n).into(),\n+                    None => \"array\".into(),\n+                }\n             }\n             ty::Slice(_) => \"slice\".into(),\n             ty::RawPtr(_) => \"*-ptr\".into(),"}, {"sha": "8bfbd8b854b03589506ff74ba39a709086a3bd58", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=de8066f73f8a3ed856d4bbc7445ab9c2212d5466", "patch": "@@ -2262,7 +2262,6 @@ impl<'tcx> Const<'tcx> {\n \n     #[inline]\n     pub fn from_bits(tcx: TyCtxt<'tcx>, bits: u128, ty: ParamEnvAnd<'tcx, Ty<'tcx>>) -> &'tcx Self {\n-        let ty = tcx.lift_to_global(&ty).unwrap();\n         let size = tcx.layout_of(ty).unwrap_or_else(|e| {\n             panic!(\"could not compute layout for {:?}: {:?}\", ty, e)\n         }).size;\n@@ -2289,7 +2288,6 @@ impl<'tcx> Const<'tcx> {\n         if self.ty != ty.value {\n             return None;\n         }\n-        let ty = tcx.lift_to_global(&ty).unwrap();\n         let size = tcx.layout_of(ty).ok()?.size;\n         self.val.try_to_bits(size)\n     }\n@@ -2300,15 +2298,14 @@ impl<'tcx> Const<'tcx> {\n     }\n \n     #[inline]\n-    pub fn assert_bits(&self, tcx: TyCtxt<'_>, ty: ParamEnvAnd<'tcx, Ty<'tcx>>) -> Option<u128> {\n+    pub fn assert_bits(&self, tcx: TyCtxt<'tcx>, ty: ParamEnvAnd<'tcx, Ty<'tcx>>) -> Option<u128> {\n         assert_eq!(self.ty, ty.value);\n-        let ty = tcx.lift_to_global(&ty).unwrap();\n         let size = tcx.layout_of(ty).ok()?.size;\n         self.val.try_to_bits(size)\n     }\n \n     #[inline]\n-    pub fn assert_bool(&self, tcx: TyCtxt<'_>) -> Option<bool> {\n+    pub fn assert_bool(&self, tcx: TyCtxt<'tcx>) -> Option<bool> {\n         self.assert_bits(tcx, ParamEnv::empty().and(tcx.types.bool)).and_then(|v| match v {\n             0 => Some(false),\n             1 => Some(true),\n@@ -2317,18 +2314,18 @@ impl<'tcx> Const<'tcx> {\n     }\n \n     #[inline]\n-    pub fn assert_usize(&self, tcx: TyCtxt<'_>) -> Option<u64> {\n+    pub fn assert_usize(&self, tcx: TyCtxt<'tcx>) -> Option<u64> {\n         self.assert_bits(tcx, ParamEnv::empty().and(tcx.types.usize)).map(|v| v as u64)\n     }\n \n     #[inline]\n-    pub fn unwrap_bits(&self, tcx: TyCtxt<'_>, ty: ParamEnvAnd<'tcx, Ty<'tcx>>) -> u128 {\n+    pub fn unwrap_bits(&self, tcx: TyCtxt<'tcx>, ty: ParamEnvAnd<'tcx, Ty<'tcx>>) -> u128 {\n         self.assert_bits(tcx, ty).unwrap_or_else(||\n             bug!(\"expected bits of {}, got {:#?}\", ty.value, self))\n     }\n \n     #[inline]\n-    pub fn unwrap_usize(&self, tcx: TyCtxt<'_>) -> u64 {\n+    pub fn unwrap_usize(&self, tcx: TyCtxt<'tcx>) -> u64 {\n         self.assert_usize(tcx).unwrap_or_else(||\n             bug!(\"expected constant usize, got {:#?}\", self))\n     }"}, {"sha": "ed56d351e90d0f047b9f5614b90591bed09dc6f4", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=de8066f73f8a3ed856d4bbc7445ab9c2212d5466", "patch": "@@ -670,7 +670,7 @@ impl<'cx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx\n                 // \"Lift\" into the gcx -- once regions are erased, this type should be in the\n                 // global arenas; this \"lift\" operation basically just asserts that is true, but\n                 // that is useful later.\n-                let drop_place_ty = gcx.lift(&drop_place_ty).unwrap();\n+                gcx.lift_to_global(&drop_place_ty).unwrap();\n \n                 debug!(\"visit_terminator_drop \\\n                         loc: {:?} term: {:?} drop_place: {:?} drop_place_ty: {:?} span: {:?}\","}, {"sha": "41ed564d0f0e1a91ca73b798ae4464b8ca2b5293", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=de8066f73f8a3ed856d4bbc7445ab9c2212d5466", "patch": "@@ -863,8 +863,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         });\n         debug!(\"try_promote_type_test_subject: folded ty = {:?}\", ty);\n \n-        // `lift` will only fail if we failed to promote some region.\n-        let ty = gcx.lift(&ty)?;\n+        // `lift_to_global` will only fail if we failed to promote some region.\n+        gcx.lift_to_global(&ty)?;\n \n         Some(ClosureOutlivesSubject::Ty(ty))\n     }"}, {"sha": "90ab8eead3fc1110ad0411d7b97632c337ac11a0", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=de8066f73f8a3ed856d4bbc7445ab9c2212d5466", "patch": "@@ -1864,7 +1864,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         // `Sized` bound in no way depends on precise regions, so this\n         // shouldn't affect `is_sized`.\n         let gcx = tcx.global_tcx();\n-        let erased_ty = gcx.lift(&tcx.erase_regions(&ty)).unwrap();\n+        let erased_ty = tcx.erase_regions(&ty);\n         if !erased_ty.is_sized(gcx.at(span), self.param_env) {\n             // in current MIR construction, all non-control-flow rvalue\n             // expressions evaluate through `as_temp` or `into` a return\n@@ -2650,7 +2650,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n     fn normalize<T>(&mut self, value: T, location: impl NormalizeLocation) -> T\n     where\n-        T: type_op::normalize::Normalizable<'tcx> + Copy,\n+        T: type_op::normalize::Normalizable<'tcx> + Copy + 'tcx,\n     {\n         debug!(\"normalize(value={:?}, location={:?})\", value, location);\n         let param_env = self.param_env;"}, {"sha": "243c13c2982d0fb0aadda0731742fdf9b49cc1f5", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=de8066f73f8a3ed856d4bbc7445ab9c2212d5466", "patch": "@@ -569,7 +569,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n     // Helper to get a `-1` value of the appropriate type\n     fn neg_1_literal(&mut self, span: Span, ty: Ty<'tcx>) -> Operand<'tcx> {\n-        let param_ty = ty::ParamEnv::empty().and(self.hir.tcx().lift_to_global(&ty).unwrap());\n+        let param_ty = ty::ParamEnv::empty().and(ty);\n         let bits = self.hir.tcx().layout_of(param_ty).unwrap().size.bits();\n         let n = (!0u128) >> (128 - bits);\n         let literal = ty::Const::from_bits(self.hir.tcx(), n, param_ty);\n@@ -580,7 +580,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     // Helper to get the minimum value of the appropriate type\n     fn minval_literal(&mut self, span: Span, ty: Ty<'tcx>) -> Operand<'tcx> {\n         assert!(ty.is_signed());\n-        let param_ty = ty::ParamEnv::empty().and(self.hir.tcx().lift_to_global(&ty).unwrap());\n+        let param_ty = ty::ParamEnv::empty().and(ty);\n         let bits = self.hir.tcx().layout_of(param_ty).unwrap().size.bits();\n         let n = 1 << (bits - 1);\n         let literal = ty::Const::from_bits(self.hir.tcx(), n, param_ty);"}, {"sha": "37f2a915782497cd4065490a29e0254df3866ef5", "filename": "src/librustc_mir/dataflow/drop_flag_effects.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs?ref=de8066f73f8a3ed856d4bbc7445ab9c2212d5466", "patch": "@@ -151,7 +151,7 @@ pub(crate) fn on_all_drop_children_bits<'tcx, F>(\n         debug!(\"on_all_drop_children_bits({:?}, {:?} : {:?})\", path, place, ty);\n \n         let gcx = tcx.global_tcx();\n-        let erased_ty = gcx.lift(&tcx.erase_regions(&ty)).unwrap();\n+        let erased_ty = tcx.erase_regions(&ty);\n         if erased_ty.needs_drop(gcx, ctxt.param_env) {\n             each_child(child);\n         } else {"}, {"sha": "bc01e3ee95b978871b92e9a878bee65bf62ba707", "filename": "src/librustc_mir/hair/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fconstant.rs?ref=de8066f73f8a3ed856d4bbc7445ab9c2212d5466", "patch": "@@ -18,7 +18,7 @@ crate fn lit_to_const<'tcx>(\n     use syntax::ast::*;\n \n     let trunc = |n| {\n-        let param_ty = ParamEnv::reveal_all().and(tcx.lift_to_global(&ty).unwrap());\n+        let param_ty = ParamEnv::reveal_all().and(ty);\n         let width = tcx.layout_of(param_ty).map_err(|_| LitToConstError::Reported)?.size;\n         trace!(\"trunc {} with size {} and shift {}\", n, width.bits(), 128 - width.bits());\n         let result = truncate(n, width);"}, {"sha": "4e197f1ed4ecf8aa82c37c9215014ea67b1bf076", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=de8066f73f8a3ed856d4bbc7445ab9c2212d5466", "patch": "@@ -190,12 +190,7 @@ impl<'a, 'tcx> Cx<'a, 'tcx> {\n     }\n \n     pub fn needs_drop(&mut self, ty: Ty<'tcx>) -> bool {\n-        let (ty, param_env) = self.tcx.lift_to_global(&(ty, self.param_env)).unwrap_or_else(|| {\n-            bug!(\"MIR: Cx::needs_drop({:?}, {:?}) got \\\n-                  type with inference types/regions\",\n-                 ty, self.param_env);\n-        });\n-        ty.needs_drop(self.tcx.global_tcx(), param_env)\n+        ty.needs_drop(self.tcx.global_tcx(), self.param_env)\n     }\n \n     pub fn tcx(&self) -> TyCtxt<'tcx> {"}, {"sha": "764ff0e15d5a43bfc152c5eb0003055bdfbe6374", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=de8066f73f8a3ed856d4bbc7445ab9c2212d5466", "patch": "@@ -1310,7 +1310,7 @@ fn is_useful_specialized<'p, 'a, 'tcx>(\n /// Returns `None` in case of a catch-all, which can't be specialized.\n fn pat_constructors<'tcx>(cx: &mut MatchCheckCtxt<'_, 'tcx>,\n                           pat: &Pattern<'tcx>,\n-                          pcx: PatternContext<'_>)\n+                          pcx: PatternContext<'tcx>)\n                           -> Option<Vec<Constructor<'tcx>>>\n {\n     match *pat.kind {"}, {"sha": "d138ce753b07e4be6eb18047e728050834faf07f", "filename": "src/librustc_traits/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8066f73f8a3ed856d4bbc7445ab9c2212d5466/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs?ref=de8066f73f8a3ed856d4bbc7445ab9c2212d5466", "patch": "@@ -37,8 +37,7 @@ fn normalize_ty_after_erasing_regions<'tcx>(\n                 );\n \n                 let normalized_value = infcx.resolve_vars_if_possible(&normalized_value);\n-                let normalized_value = infcx.tcx.erase_regions(&normalized_value);\n-                tcx.lift_to_global(&normalized_value).unwrap()\n+                infcx.tcx.erase_regions(&normalized_value)\n             }\n             Err(NoSolution) => bug!(\"could not fully normalize `{:?}`\", value),\n         }"}]}