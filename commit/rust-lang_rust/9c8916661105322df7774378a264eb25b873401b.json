{"sha": "9c8916661105322df7774378a264eb25b873401b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljODkxNjY2MTEwNTMyMmRmNzc3NDM3OGEyNjRlYjI1Yjg3MzQwMWI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-12-27T21:12:11Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-12-29T00:24:46Z"}, "message": "Restore --crate-type=metadata as an alias for --crate-type=rlib,--emit=metadata + a warning", "tree": {"sha": "8596c0ced24e9e31b833f242af416d8184eae27c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8596c0ced24e9e31b833f242af416d8184eae27c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c8916661105322df7774378a264eb25b873401b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c8916661105322df7774378a264eb25b873401b", "html_url": "https://github.com/rust-lang/rust/commit/9c8916661105322df7774378a264eb25b873401b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c8916661105322df7774378a264eb25b873401b/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71f161c8876fd7996503a7bd7d499c6e67bf956e", "url": "https://api.github.com/repos/rust-lang/rust/commits/71f161c8876fd7996503a7bd7d499c6e67bf956e", "html_url": "https://github.com/rust-lang/rust/commit/71f161c8876fd7996503a7bd7d499c6e67bf956e"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "4cdf821c925eb5395896437b1f4fb479958e015e", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9c8916661105322df7774378a264eb25b873401b/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c8916661105322df7774378a264eb25b873401b/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=9c8916661105322df7774378a264eb25b873401b", "patch": "@@ -1296,7 +1296,7 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n     };\n \n     let unparsed_crate_types = matches.opt_strs(\"crate-type\");\n-    let crate_types = parse_crate_types_from_list(unparsed_crate_types)\n+    let (crate_types, emit_metadata) = parse_crate_types_from_list(unparsed_crate_types)\n         .unwrap_or_else(|e| early_error(error_format, &e[..]));\n \n     let mut lint_opts = vec![];\n@@ -1343,7 +1343,9 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n             }\n         }\n     };\n-    if output_types.is_empty() {\n+    if emit_metadata {\n+        output_types.insert(OutputType::Metadata, None);\n+    } else if output_types.is_empty() {\n         output_types.insert(OutputType::Exe, None);\n     }\n \n@@ -1545,8 +1547,10 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n     cfg)\n }\n \n-pub fn parse_crate_types_from_list(list_list: Vec<String>) -> Result<Vec<CrateType>, String> {\n+pub fn parse_crate_types_from_list(list_list: Vec<String>)\n+                                   -> Result<(Vec<CrateType>, bool), String> {\n     let mut crate_types: Vec<CrateType> = Vec::new();\n+    let mut emit_metadata = false;\n     for unparsed_crate_type in &list_list {\n         for part in unparsed_crate_type.split(',') {\n             let new_part = match part {\n@@ -1557,6 +1561,13 @@ pub fn parse_crate_types_from_list(list_list: Vec<String>) -> Result<Vec<CrateTy\n                 \"cdylib\"    => CrateTypeCdylib,\n                 \"bin\"       => CrateTypeExecutable,\n                 \"proc-macro\" => CrateTypeProcMacro,\n+                // FIXME(#38640) remove this when Cargo is fixed.\n+                \"metadata\"  => {\n+                    early_warn(ErrorOutputType::default(), \"--crate-type=metadata is deprecated, \\\n+                                                            prefer --emit=metadata\");\n+                    emit_metadata = true;\n+                    CrateTypeRlib\n+                }\n                 _ => {\n                     return Err(format!(\"unknown crate type: `{}`\",\n                                        part));\n@@ -1568,7 +1579,7 @@ pub fn parse_crate_types_from_list(list_list: Vec<String>) -> Result<Vec<CrateTy\n         }\n     }\n \n-    return Ok(crate_types);\n+    return Ok((crate_types, emit_metadata));\n }\n \n pub mod nightly_options {"}]}