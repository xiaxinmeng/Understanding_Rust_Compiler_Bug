{"sha": "94260fb91d3e8a11f39eafc1c21bc974713db166", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MjYwZmI5MWQzZThhMTFmMzllYWZjMWMyMWJjOTc0NzEzZGIxNjY=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-17T18:44:35Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-17T18:44:50Z"}, "message": "Using move-mode for spawn thunks to avoid race conditions.", "tree": {"sha": "f30b13600c03592562086b75135d036907f712e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f30b13600c03592562086b75135d036907f712e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94260fb91d3e8a11f39eafc1c21bc974713db166", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94260fb91d3e8a11f39eafc1c21bc974713db166", "html_url": "https://github.com/rust-lang/rust/commit/94260fb91d3e8a11f39eafc1c21bc974713db166", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94260fb91d3e8a11f39eafc1c21bc974713db166/comments", "author": null, "committer": null, "parents": [{"sha": "1d7ca9c1897260c30ba236652c2043e670577fe4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d7ca9c1897260c30ba236652c2043e670577fe4", "html_url": "https://github.com/rust-lang/rust/commit/1d7ca9c1897260c30ba236652c2043e670577fe4"}], "stats": {"total": 91, "additions": 60, "deletions": 31}, "files": [{"sha": "d010afc5217a0be5c72e715e4b943168378adfcf", "filename": "src/lib/task.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Flib%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Flib%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftask.rs?ref=94260fb91d3e8a11f39eafc1c21bc974713db166", "patch": "@@ -75,21 +75,22 @@ fn set_min_stack(stack_size : uint) {\n     rustrt::set_min_stack(stack_size);\n }\n \n-fn _spawn(thunk : fn() -> ()) -> task {\n+fn _spawn(thunk : -fn() -> ()) -> task {\n     spawn(thunk)\n }\n \n-fn spawn(thunk : fn() -> ()) -> task {\n+fn spawn(thunk : -fn() -> ()) -> task {\n     spawn_inner(thunk, none)\n }\n \n-fn spawn_notify(thunk : fn() -> (), notify : _chan<task_notification>)\n+fn spawn_notify(thunk : -fn() -> (), notify : _chan<task_notification>)\n     -> task {\n     spawn_inner(thunk, some(notify))\n }\n \n // FIXME: make this a fn~ once those are supported.\n-fn spawn_inner(thunk : fn() -> (), notify : option<_chan<task_notification>>)\n+fn spawn_inner(thunk : -fn() -> (),\n+               notify : option<_chan<task_notification>>)\n     -> task_id {\n     let id = rustrt::new_task();\n "}, {"sha": "2b4d1f2714a0e9cc484ac93dc2257df3d3f927a7", "filename": "src/lib/test.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Flib%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Flib%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftest.rs?ref=94260fb91d3e8a11f39eafc1c21bc974713db166", "patch": "@@ -336,13 +336,16 @@ fn run_test(test: &test_desc, to_task: &test_to_task) -> test_future {\n // we've got to treat our test functions as unsafe pointers.  This function\n // only works with functions that don't contain closures.\n fn default_test_to_task(f: &fn()) -> task_id {\n+    /*\n     fn run_task(fptr: *mutable fn() ) {\n         configure_test_task();\n         // Run the test\n         (*fptr)()\n     }\n     let fptr = ptr::addr_of(f);\n-    ret task::_spawn(bind run_task(fptr));\n+    */\n+    //ret task::_spawn(bind run_task(fptr));\n+    task::spawn(f)\n }\n \n // Call from within a test task to make sure it's set up correctly"}, {"sha": "48e1b4d8087fd05b63ed8f8ece30de4263e43ff4", "filename": "src/test/bench/task-perf-spawnalot.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs?ref=94260fb91d3e8a11f39eafc1c21bc974713db166", "patch": "@@ -7,7 +7,8 @@ import std::str;\n fn f(n: uint) {\n     let i = 0u;\n     while i < n {\n-        task::join_id(task::_spawn(bind g()));\n+        let thunk = g;\n+        task::join_id(task::spawn(thunk));\n         i += 1u;\n     }\n }\n@@ -23,7 +24,7 @@ fn main(args: [str]) {\n     };\n     let i = 0u;\n     while i < n {\n-        task::_spawn(bind f(n));\n+        task::spawn(bind f(n));\n         i += 1u;\n     }\n }"}, {"sha": "54bfae13c236b701bb977e54c3d2639b5aecf568", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=94260fb91d3e8a11f39eafc1c21bc974713db166", "patch": "@@ -77,7 +77,7 @@ mod map_reduce {\n     fn start_mappers(ctrl: _chan<ctrl_proto>, inputs: &[str]) -> [task_id] {\n         let tasks = ~[];\n         for i: str in inputs {\n-            tasks += ~[task::_spawn(bind map_task(ctrl, i))];\n+            tasks += ~[task::spawn(bind map_task(ctrl, i))];\n         }\n         ret tasks;\n     }\n@@ -179,7 +179,7 @@ mod map_reduce {\n                     // log_err \"creating new reducer for \" + k;\n                     let p = mk_port();\n                     tasks +=\n-                        ~[task::_spawn(bind reduce_task(k, p.mk_chan()))];\n+                        ~[task::spawn(bind reduce_task(k, p.mk_chan()))];\n                     c = p.recv();\n                     reducers.insert(k, c);\n                   }"}, {"sha": "e3122b283b138f8e3b4ca3975daf5ac7e5c43b03", "filename": "src/test/run-fail/linked-failure.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure.rs?ref=94260fb91d3e8a11f39eafc1c21bc974713db166", "patch": "@@ -11,6 +11,7 @@ fn child() { assert (1 == 2); }\n \n fn main() {\n     let p = mk_port::<int>();\n-    task::_spawn(bind child());\n+    let f = child;\n+    task::_spawn(f);\n     let x = p.recv();\n }"}, {"sha": "8fab2a6853983629f2fa5e7303382e1c36d7ef38", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=94260fb91d3e8a11f39eafc1c21bc974713db166", "patch": "@@ -85,8 +85,9 @@ fn test_ptr() {\n \n fn test_task() {\n     fn f() { }\n-    let t1 = task::_spawn(bind f());\n-    let t2 = task::_spawn(bind f());\n+    let f1 = f, f2 = f;\n+    let t1 = task::spawn(f1);\n+    let t2 = task::spawn(f2);\n \n     assert t1 == t1;\n     assert t1 != t2;"}, {"sha": "3487c1a7f37993e846de91832d40af514b6ede01", "filename": "src/test/run-pass/issue-506.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Ftest%2Frun-pass%2Fissue-506.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Ftest%2Frun-pass%2Fissue-506.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-506.rs?ref=94260fb91d3e8a11f39eafc1c21bc974713db166", "patch": "@@ -13,4 +13,7 @@ fn yield_wrap() {\n     rustrt::task_yield();\n }\n \n-fn main() { task::_spawn(bind yield_wrap()); }\n+fn main() {\n+    let f = yield_wrap;\n+    task::_spawn(f);\n+}"}, {"sha": "5545aadb1fbd9c8195604ea0a68cdb6b67ede91a", "filename": "src/test/run-pass/join.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Ftest%2Frun-pass%2Fjoin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Ftest%2Frun-pass%2Fjoin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fjoin.rs?ref=94260fb91d3e8a11f39eafc1c21bc974713db166", "patch": "@@ -5,7 +5,8 @@ use std;\n import std::task::*;\n \n fn main() {\n-    let other = _spawn(bind child());\n+    let f = child;\n+    let other = _spawn(f);\n     log_err \"1\";\n     yield();\n     join_id(other);"}, {"sha": "2b19e66d67332b215160fc86b83e3c60ba40a031", "filename": "src/test/run-pass/task-comm-1.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs?ref=94260fb91d3e8a11f39eafc1c21bc974713db166", "patch": "@@ -1,10 +1,15 @@\n use std;\n \n-import std::task::_spawn;\n+import std::task::spawn;\n import std::task::join_id;\n \n fn main() { test00(); }\n \n fn start() { log \"Started / Finished task.\"; }\n \n-fn test00() { let t = _spawn(bind start()); join_id(t); log \"Completing.\"; }\n+fn test00() {\n+    let f = start;\n+    let t = spawn(f);\n+    join_id(t);\n+    log \"Completing.\";\n+}"}, {"sha": "c468d1c89d6b568a7fa8160f226b33a3368e9bc9", "filename": "src/test/run-pass/task-comm.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm.rs?ref=94260fb91d3e8a11f39eafc1c21bc974713db166", "patch": "@@ -37,7 +37,7 @@ fn test00() {\n     let tasks = [];\n     while i < number_of_tasks {\n         i = i + 1;\n-        tasks += [task::_spawn(bind test00_start(ch, i, number_of_messages))];\n+        tasks += [task::spawn(bind test00_start(ch, i, number_of_messages))];\n     }\n \n     let sum: int = 0;\n@@ -96,7 +96,11 @@ fn test04_start() {\n fn test04() {\n     log \"Spawning lots of tasks.\";\n     let i: int = 4;\n-    while i > 0 { i = i - 1; task::_spawn(bind test04_start()); }\n+    while i > 0 {\n+        i = i - 1;\n+        let f = test04_start;\n+        task::spawn(f);\n+    }\n     log \"Finishing up.\";\n }\n \n@@ -111,7 +115,7 @@ fn test05_start(ch: _chan<int>) {\n fn test05() {\n     let po = comm::mk_port();\n     let ch = po.mk_chan();\n-    task::_spawn(bind test05_start(ch));\n+    task::spawn(bind test05_start(ch));\n     let value: int;\n     value = po.recv();\n     value = po.recv();\n@@ -134,7 +138,7 @@ fn test06() {\n \n     let tasks = [];\n     while i < number_of_tasks {\n-        i = i + 1; tasks += [task::_spawn(bind test06_start(i))]; }\n+        i = i + 1; tasks += [task::spawn(bind test06_start(i))]; }\n \n \n     for t: task_id in tasks { task::join_id(t); }"}, {"sha": "3100d6d3d3be0198ad7fdfd8bf96d9cb181ebe62", "filename": "src/test/run-pass/task-compare.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Ftest%2Frun-pass%2Ftask-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Ftest%2Frun-pass%2Ftask-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-compare.rs?ref=94260fb91d3e8a11f39eafc1c21bc974713db166", "patch": "@@ -14,8 +14,9 @@ fn main() {\n     let t1;\n     let t2;\n \n-    t1 = task::_spawn(bind child());\n-    t2 = task::_spawn(bind child());\n+    let c1 = child, c2 = child;\n+    t1 = task::_spawn(c1);\n+    t2 = task::_spawn(c2);\n \n     assert (t1 == t1);\n     assert (t1 != t2);"}, {"sha": "cfed8c136ab71ee7299a805d0d196a4351245ec5", "filename": "src/test/run-pass/task-killjoin.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs?ref=94260fb91d3e8a11f39eafc1c21bc974713db166", "patch": "@@ -24,12 +24,14 @@ fn supervisor() {\n     // Unsupervise this task so the process doesn't return a failure status as\n     // a result of the main task being killed.\n     task::unsupervise();\n-    let t = task::_spawn(bind supervised());\n+    let f = supervised;\n+    let t = task::_spawn(supervised);\n     task::join_id(t);\n }\n \n fn main() {\n-    let dom2 = task::_spawn(bind supervisor());\n+    let f = supervisor;\n+    let dom2 = task::_spawn(f);\n     task::join_id(dom2);\n }\n "}, {"sha": "8de4b6c411f064777f3828012e9da47510c69996", "filename": "src/test/run-pass/yield.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Ftest%2Frun-pass%2Fyield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Ftest%2Frun-pass%2Fyield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield.rs?ref=94260fb91d3e8a11f39eafc1c21bc974713db166", "patch": "@@ -4,7 +4,8 @@ import std::task;\n import std::task::*;\n \n fn main() {\n-    let other = task::_spawn(bind child());\n+    let f = child;\n+    let other = task::spawn(f);\n     log_err \"1\";\n     yield();\n     log_err \"2\";"}, {"sha": "e53591dbe1a0cafc8ed5c7c5dcf24e4542cd6c95", "filename": "src/test/run-pass/yield1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Ftest%2Frun-pass%2Fyield1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Ftest%2Frun-pass%2Fyield1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield1.rs?ref=94260fb91d3e8a11f39eafc1c21bc974713db166", "patch": "@@ -4,7 +4,8 @@ import std::task;\n import std::task::*;\n \n fn main() {\n-    let other = task::_spawn(bind child());\n+    let c = child;\n+    let other = task::spawn(c);\n     log_err \"1\"; yield();\n     join_id(other);\n }"}, {"sha": "819f6d79cacca403f7e8307f3e9987d9d12a2005", "filename": "src/test/run-pass/yield2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Ftest%2Frun-pass%2Fyield2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Ftest%2Frun-pass%2Fyield2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield2.rs?ref=94260fb91d3e8a11f39eafc1c21bc974713db166", "patch": "@@ -4,4 +4,4 @@ use std;\n fn main() {\n     let i: int = 0;\n     while i < 100 { i = i + 1; log_err i; std::task::yield(); }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "6e6c2e0673fcb83878acb5f34ce6990cb9cca87a", "filename": "src/test/stdtest/task.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Ftest%2Fstdtest%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94260fb91d3e8a11f39eafc1c21bc974713db166/src%2Ftest%2Fstdtest%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ftask.rs?ref=94260fb91d3e8a11f39eafc1c21bc974713db166", "patch": "@@ -8,7 +8,8 @@ fn test_sleep() { task::sleep(1000000u); }\n #[test]\n fn test_unsupervise() {\n     fn f() { task::unsupervise(); fail; }\n-    task::_spawn(bind f());\n+    let foo = f;\n+    task::_spawn(foo);\n }\n \n #[test]\n@@ -30,7 +31,8 @@ fn test_join() {\n #[test]\n fn test_lib_spawn() {\n     fn foo() { log_err \"Hello, World!\"; }\n-    task::_spawn(foo);\n+    let f = foo;\n+    task::_spawn(f);\n }\n \n #[test]\n@@ -44,7 +46,8 @@ fn test_join_chan() {\n     fn winner() { }\n \n     let p = comm::mk_port::<task::task_notification>();\n-    task::spawn_notify(bind winner(), p.mk_chan());\n+    let f = winner;\n+    task::spawn_notify(f, p.mk_chan());\n     let s = p.recv();\n     log_err \"received task status message\";\n     log_err s;\n@@ -59,7 +62,8 @@ fn test_join_chan_fail() {\n     fn failer() { task::unsupervise(); fail }\n \n     let p = comm::mk_port::<task::task_notification>();\n-    task::spawn_notify(bind failer(), p.mk_chan());\n+    let f = failer;\n+    task::spawn_notify(f, p.mk_chan());\n     let s = p.recv();\n     log_err \"received task status message\";\n     log_err s;"}]}