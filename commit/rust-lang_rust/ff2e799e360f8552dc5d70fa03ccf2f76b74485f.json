{"sha": "ff2e799e360f8552dc5d70fa03ccf2f76b74485f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMmU3OTllMzYwZjg1NTJkYzVkNzBmYTAzY2NmMmY3NmI3NDQ4NWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-17T20:12:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-17T20:12:14Z"}, "message": "Auto merge of #1237 - RalfJung:rustup, r=RalfJung\n\nrustup; remove no longer existing intrinsics", "tree": {"sha": "037b890aa848866f771cedc82b5e28b2017f2be3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/037b890aa848866f771cedc82b5e28b2017f2be3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff2e799e360f8552dc5d70fa03ccf2f76b74485f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff2e799e360f8552dc5d70fa03ccf2f76b74485f", "html_url": "https://github.com/rust-lang/rust/commit/ff2e799e360f8552dc5d70fa03ccf2f76b74485f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff2e799e360f8552dc5d70fa03ccf2f76b74485f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12b7cf877b35b8309a9df8dbd6621edd5998fe95", "url": "https://api.github.com/repos/rust-lang/rust/commits/12b7cf877b35b8309a9df8dbd6621edd5998fe95", "html_url": "https://github.com/rust-lang/rust/commit/12b7cf877b35b8309a9df8dbd6621edd5998fe95"}, {"sha": "b82cf36117dc23f18e39c4136aa63e99bc48ae03", "url": "https://api.github.com/repos/rust-lang/rust/commits/b82cf36117dc23f18e39c4136aa63e99bc48ae03", "html_url": "https://github.com/rust-lang/rust/commit/b82cf36117dc23f18e39c4136aa63e99bc48ae03"}], "stats": {"total": 68, "additions": 2, "deletions": 66}, "files": [{"sha": "1c3f12298f86ec89b06bc0de6fb3a31e7bf35fcb", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2e799e360f8552dc5d70fa03ccf2f76b74485f/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/ff2e799e360f8552dc5d70fa03ccf2f76b74485f/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=ff2e799e360f8552dc5d70fa03ccf2f76b74485f", "patch": "@@ -1 +1 @@\n-dd67187965e136bff1ed05e035293441c60f0790\n+660326e9791d5caf3186b14521498c2584a494ab"}, {"sha": "7f437332d932785ea51290cf7250a206ff22f843", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 65, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/ff2e799e360f8552dc5d70fa03ccf2f76b74485f/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2e799e360f8552dc5d70fa03ccf2f76b74485f/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=ff2e799e360f8552dc5d70fa03ccf2f76b74485f", "patch": "@@ -4,7 +4,7 @@ use std::convert::TryFrom;\n use rustc::mir;\n use rustc::mir::interpret::{InterpResult, PointerArithmetic};\n use rustc::ty;\n-use rustc::ty::layout::{self, Align, LayoutOf, Size};\n+use rustc::ty::layout::{Align, LayoutOf, Size};\n use rustc_apfloat::Float;\n use rustc_span::source_map::Span;\n \n@@ -384,37 +384,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_immediate(*b, dest)?;\n             }\n \n-            \"init\" => {\n-                // Check fast path: we don't want to force an allocation in case the destination is a simple value,\n-                // but we also do not want to create a new allocation with 0s and then copy that over.\n-                // FIXME: We do not properly validate in case of ZSTs and when doing it in memory!\n-                // However, this only affects direct calls of the intrinsic; calls to the stable\n-                // functions wrapping them do get their validation.\n-                // FIXME: should we check that the destination pointer is aligned even for ZSTs?\n-                if !dest.layout.is_zst() {\n-                    match dest.layout.abi {\n-                        layout::Abi::Scalar(ref s) => {\n-                            let x = Scalar::from_int(0, s.value.size(this));\n-                            this.write_scalar(x, dest)?;\n-                        }\n-                        layout::Abi::ScalarPair(ref s1, ref s2) => {\n-                            let x = Scalar::from_int(0, s1.value.size(this));\n-                            let y = Scalar::from_int(0, s2.value.size(this));\n-                            this.write_immediate(Immediate::ScalarPair(x.into(), y.into()), dest)?;\n-                        }\n-                        _ => {\n-                            // Do it in memory\n-                            let mplace = this.force_allocation(dest)?;\n-                            assert!(!mplace.layout.is_unsized());\n-                            this.memory.write_bytes(\n-                                mplace.ptr,\n-                                iter::repeat(0u8).take(dest.layout.size.bytes() as usize),\n-                            )?;\n-                        }\n-                    }\n-                }\n-            }\n-\n             \"pref_align_of\" => {\n                 let ty = substs.type_at(0);\n                 let layout = this.layout_of(ty)?;\n@@ -518,39 +487,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_uint(align.bytes(), ptr_size), dest)?;\n             }\n \n-            \"uninit\" => {\n-                // Check fast path: we don't want to force an allocation in case the destination is a simple value,\n-                // but we also do not want to create a new allocation with 0s and then copy that over.\n-                // FIXME: We do not properly validate in case of ZSTs and when doing it in memory!\n-                // However, this only affects direct calls of the intrinsic; calls to the stable\n-                // functions wrapping them do get their validation.\n-                // FIXME: should we check alignment for ZSTs?\n-                if !dest.layout.is_zst() {\n-                    match dest.layout.abi {\n-                        layout::Abi::Scalar(..) => {\n-                            let x = ScalarMaybeUndef::Undef;\n-                            this.write_immediate(Immediate::Scalar(x), dest)?;\n-                        }\n-                        layout::Abi::ScalarPair(..) => {\n-                            let x = ScalarMaybeUndef::Undef;\n-                            this.write_immediate(Immediate::ScalarPair(x, x), dest)?;\n-                        }\n-                        _ => {\n-                            // Do it in memory\n-                            let mplace = this.force_allocation(dest)?;\n-                            assert!(!mplace.layout.is_unsized());\n-                            let ptr = mplace.ptr.assert_ptr();\n-                            // We know the return place is in-bounds\n-                            this.memory.get_raw_mut(ptr.alloc_id)?.mark_definedness(\n-                                ptr,\n-                                dest.layout.size,\n-                                false,\n-                            );\n-                        }\n-                    }\n-                }\n-            }\n-\n             \"write_bytes\" => {\n                 let ty = substs.type_at(0);\n                 let ty_layout = this.layout_of(ty)?;"}]}