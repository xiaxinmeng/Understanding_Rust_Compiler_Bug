{"sha": "cc9b259b5e94e4543b96dca236e3a1af5ec496c9", "node_id": "C_kwDOAAsO6NoAKGNjOWIyNTliNWU5NGU0NTQzYjk2ZGNhMjM2ZTNhMWFmNWVjNDk2Yzk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-09T13:45:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-09T13:45:27Z"}, "message": "Auto merge of #103723 - CastilloDel:master, r=jackh726\n\nRemove allow(rustc::potential_query_instability) in rustc_trait_selection\n\nRelated to https://github.com/rust-lang/rust/issues/84447\n\nThis PR needs to be benchmarked to check for regressions.", "tree": {"sha": "602466790f52475ce5c9039e86d02fe0de375ab1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/602466790f52475ce5c9039e86d02fe0de375ab1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc9b259b5e94e4543b96dca236e3a1af5ec496c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc9b259b5e94e4543b96dca236e3a1af5ec496c9", "html_url": "https://github.com/rust-lang/rust/commit/cc9b259b5e94e4543b96dca236e3a1af5ec496c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc9b259b5e94e4543b96dca236e3a1af5ec496c9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0aaad9e757207657064d70bf9e6c1e6eb327bf15", "url": "https://api.github.com/repos/rust-lang/rust/commits/0aaad9e757207657064d70bf9e6c1e6eb327bf15", "html_url": "https://github.com/rust-lang/rust/commit/0aaad9e757207657064d70bf9e6c1e6eb327bf15"}, {"sha": "755ca4b9aa064b77fa8a0f6cdaf050b768d844bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/755ca4b9aa064b77fa8a0f6cdaf050b768d844bc", "html_url": "https://github.com/rust-lang/rust/commit/755ca4b9aa064b77fa8a0f6cdaf050b768d844bc"}], "stats": {"total": 67, "additions": 37, "deletions": 30}, "files": [{"sha": "04bf7c83b3208db9f56a14829de908370d9124fe", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc9b259b5e94e4543b96dca236e3a1af5ec496c9/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9b259b5e94e4543b96dca236e3a1af5ec496c9/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=cc9b259b5e94e4543b96dca236e3a1af5ec496c9", "patch": "@@ -1,7 +1,7 @@\n use super::potentially_plural_count;\n use crate::errors::LifetimesOrBoundsMismatchOnTrait;\n use hir::def_id::{DefId, LocalDefId};\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxIndexSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticId, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -256,7 +256,7 @@ fn compare_predicate_entailment<'tcx>(\n     // Compute placeholder form of impl and trait method tys.\n     let tcx = infcx.tcx;\n \n-    let mut wf_tys = FxHashSet::default();\n+    let mut wf_tys = FxIndexSet::default();\n \n     let impl_sig = infcx.replace_bound_vars_with_fresh_vars(\n         impl_m_span,\n@@ -479,7 +479,7 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n     let trait_sig = ocx.normalize(norm_cause.clone(), param_env, unnormalized_trait_sig);\n     let trait_return_ty = trait_sig.output();\n \n-    let wf_tys = FxHashSet::from_iter(\n+    let wf_tys = FxIndexSet::from_iter(\n         unnormalized_trait_sig.inputs_and_output.iter().chain(trait_sig.inputs_and_output.iter()),\n     );\n "}, {"sha": "6a12db9d36ade2bd13f39124b8042617a0dede7a", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cc9b259b5e94e4543b96dca236e3a1af5ec496c9/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9b259b5e94e4543b96dca236e3a1af5ec496c9/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=cc9b259b5e94e4543b96dca236e3a1af5ec496c9", "patch": "@@ -1,7 +1,7 @@\n use crate::constrained_generic_params::{identify_constrained_generic_params, Parameter};\n use hir::def::DefKind;\n use rustc_ast as ast;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -412,7 +412,7 @@ fn check_gat_where_clauses(tcx: TyCtxt<'_>, associated_items: &[hir::TraitItemRe\n                                 .iter()\n                                 .copied()\n                                 .collect::<Vec<_>>(),\n-                            &FxHashSet::default(),\n+                            &FxIndexSet::default(),\n                             gat_def_id.def_id,\n                             gat_generics,\n                         )\n@@ -462,10 +462,10 @@ fn check_gat_where_clauses(tcx: TyCtxt<'_>, associated_items: &[hir::TraitItemRe\n             .into_iter()\n             .filter(|clause| match clause.kind().skip_binder() {\n                 ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(a, b)) => {\n-                    !region_known_to_outlive(tcx, gat_hir, param_env, &FxHashSet::default(), a, b)\n+                    !region_known_to_outlive(tcx, gat_hir, param_env, &FxIndexSet::default(), a, b)\n                 }\n                 ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(a, b)) => {\n-                    !ty_known_to_outlive(tcx, gat_hir, param_env, &FxHashSet::default(), a, b)\n+                    !ty_known_to_outlive(tcx, gat_hir, param_env, &FxIndexSet::default(), a, b)\n                 }\n                 _ => bug!(\"Unexpected PredicateKind\"),\n             })\n@@ -547,7 +547,7 @@ fn gather_gat_bounds<'tcx, T: TypeFoldable<'tcx>>(\n     param_env: ty::ParamEnv<'tcx>,\n     item_hir: hir::HirId,\n     to_check: T,\n-    wf_tys: &FxHashSet<Ty<'tcx>>,\n+    wf_tys: &FxIndexSet<Ty<'tcx>>,\n     gat_def_id: LocalDefId,\n     gat_generics: &'tcx ty::Generics,\n ) -> Option<FxHashSet<ty::Predicate<'tcx>>> {\n@@ -654,7 +654,7 @@ fn ty_known_to_outlive<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     id: hir::HirId,\n     param_env: ty::ParamEnv<'tcx>,\n-    wf_tys: &FxHashSet<Ty<'tcx>>,\n+    wf_tys: &FxIndexSet<Ty<'tcx>>,\n     ty: Ty<'tcx>,\n     region: ty::Region<'tcx>,\n ) -> bool {\n@@ -671,7 +671,7 @@ fn region_known_to_outlive<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     id: hir::HirId,\n     param_env: ty::ParamEnv<'tcx>,\n-    wf_tys: &FxHashSet<Ty<'tcx>>,\n+    wf_tys: &FxIndexSet<Ty<'tcx>>,\n     region_a: ty::Region<'tcx>,\n     region_b: ty::Region<'tcx>,\n ) -> bool {\n@@ -695,7 +695,7 @@ fn resolve_regions_with_wf_tys<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     id: hir::HirId,\n     param_env: ty::ParamEnv<'tcx>,\n-    wf_tys: &FxHashSet<Ty<'tcx>>,\n+    wf_tys: &FxIndexSet<Ty<'tcx>>,\n     add_constraints: impl for<'a> FnOnce(&'a InferCtxt<'tcx>, &'a RegionBoundPairs<'tcx>),\n ) -> bool {\n     // Unfortunately, we have to use a new `InferCtxt` each call, because"}, {"sha": "ccba197dc80b75c58bdb415410ed38ef4a406751", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc9b259b5e94e4543b96dca236e3a1af5ec496c9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9b259b5e94e4543b96dca236e3a1af5ec496c9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=cc9b259b5e94e4543b96dca236e3a1af5ec496c9", "patch": "@@ -10,6 +10,7 @@ pub(crate) use self::undo_log::{InferCtxtUndoLogs, Snapshot, UndoLog};\n \n use crate::traits::{self, ObligationCause, PredicateObligations, TraitEngine, TraitEngineExt};\n \n+use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::undo_log::Rollback;\n@@ -294,7 +295,7 @@ pub struct InferCtxt<'tcx> {\n \n     /// the set of predicates on which errors have been reported, to\n     /// avoid reporting the same error twice.\n-    pub reported_trait_errors: RefCell<FxHashMap<Span, Vec<ty::Predicate<'tcx>>>>,\n+    pub reported_trait_errors: RefCell<FxIndexMap<Span, Vec<ty::Predicate<'tcx>>>>,\n \n     pub reported_closure_mismatch: RefCell<FxHashSet<(Span, Option<Span>)>>,\n "}, {"sha": "2dce18e2d3cad263dc36aeacd3469aa18c1ec9ac", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc9b259b5e94e4543b96dca236e3a1af5ec496c9/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9b259b5e94e4543b96dca236e3a1af5ec496c9/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=cc9b259b5e94e4543b96dca236e3a1af5ec496c9", "patch": "@@ -10,7 +10,6 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![allow(rustc::potential_query_instability)]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]"}, {"sha": "188f8bb7e2a58cd9815015a278b35dc4154936e9", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc9b259b5e94e4543b96dca236e3a1af5ec496c9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9b259b5e94e4543b96dca236e3a1af5ec496c9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=cc9b259b5e94e4543b96dca236e3a1af5ec496c9", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::ty::fold::{TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{PolyTraitRef, Region, RegionVid};\n \n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n \n use std::collections::hash_map::Entry;\n use std::collections::VecDeque;\n@@ -27,8 +27,8 @@ pub enum RegionTarget<'tcx> {\n \n #[derive(Default, Debug, Clone)]\n pub struct RegionDeps<'tcx> {\n-    larger: FxHashSet<RegionTarget<'tcx>>,\n-    smaller: FxHashSet<RegionTarget<'tcx>>,\n+    larger: FxIndexSet<RegionTarget<'tcx>>,\n+    smaller: FxIndexSet<RegionTarget<'tcx>>,\n }\n \n pub enum AutoTraitResult<A> {\n@@ -266,7 +266,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n         }));\n \n         let computed_preds = param_env.caller_bounds().iter();\n-        let mut user_computed_preds: FxHashSet<_> = user_env.caller_bounds().iter().collect();\n+        let mut user_computed_preds: FxIndexSet<_> = user_env.caller_bounds().iter().collect();\n \n         let mut new_env = param_env;\n         let dummy_cause = ObligationCause::dummy();\n@@ -389,7 +389,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n     /// not just one specific lifetime (e.g., `'static`).\n     fn add_user_pred(\n         &self,\n-        user_computed_preds: &mut FxHashSet<ty::Predicate<'tcx>>,\n+        user_computed_preds: &mut FxIndexSet<ty::Predicate<'tcx>>,\n         new_pred: ty::Predicate<'tcx>,\n     ) {\n         let mut should_add_new = true;\n@@ -585,7 +585,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n         &self,\n         ty: Ty<'_>,\n         nested: impl Iterator<Item = Obligation<'tcx, ty::Predicate<'tcx>>>,\n-        computed_preds: &mut FxHashSet<ty::Predicate<'tcx>>,\n+        computed_preds: &mut FxIndexSet<ty::Predicate<'tcx>>,\n         fresh_preds: &mut FxHashSet<ty::Predicate<'tcx>>,\n         predicates: &mut VecDeque<ty::PolyTraitPredicate<'tcx>>,\n         select: &mut SelectionContext<'_, 'tcx>,"}, {"sha": "ae29c9f5617911245a6d733ddab8647f1d45204b", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc9b259b5e94e4543b96dca236e3a1af5ec496c9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9b259b5e94e4543b96dca236e3a1af5ec496c9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=cc9b259b5e94e4543b96dca236e3a1af5ec496c9", "patch": "@@ -4,7 +4,7 @@ use std::fmt::Debug;\n use super::TraitEngine;\n use super::{ChalkFulfillmentContext, FulfillmentContext};\n use crate::infer::InferCtxtExt;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_infer::infer::at::ToTrace;\n use rustc_infer::infer::canonical::{\n@@ -154,10 +154,10 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         span: Span,\n         def_id: LocalDefId,\n-    ) -> FxHashSet<Ty<'tcx>> {\n+    ) -> FxIndexSet<Ty<'tcx>> {\n         let tcx = self.infcx.tcx;\n         let assumed_wf_types = tcx.assumed_wf_types(def_id);\n-        let mut implied_bounds = FxHashSet::default();\n+        let mut implied_bounds = FxIndexSet::default();\n         let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n         let cause = ObligationCause::misc(span, hir_id);\n         for ty in assumed_wf_types {"}, {"sha": "e64586407c923c1b2d78e8fcdcc028158161f8d3", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc9b259b5e94e4543b96dca236e3a1af5ec496c9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9b259b5e94e4543b96dca236e3a1af5ec496c9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=cc9b259b5e94e4543b96dca236e3a1af5ec496c9", "patch": "@@ -15,7 +15,7 @@ use crate::traits::query::normalize::AtExt as _;\n use crate::traits::specialize::to_pretty_impl_header;\n use on_unimplemented::OnUnimplementedNote;\n use on_unimplemented::TypeErrCtxtExt as _;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n use rustc_errors::{\n     pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n     MultiSpan, Style,\n@@ -379,7 +379,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             index: Option<usize>, // None if this is an old error\n         }\n \n-        let mut error_map: FxHashMap<_, Vec<_>> = self\n+        let mut error_map: FxIndexMap<_, Vec<_>> = self\n             .reported_trait_errors\n             .borrow()\n             .iter()"}, {"sha": "e1092a788e32b5df96786eb40146d485a096a43f", "filename": "compiler/rustc_trait_selection/src/traits/outlives_bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc9b259b5e94e4543b96dca236e3a1af5ec496c9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9b259b5e94e4543b96dca236e3a1af5ec496c9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs?ref=cc9b259b5e94e4543b96dca236e3a1af5ec496c9", "patch": "@@ -2,7 +2,7 @@ use crate::infer::InferCtxt;\n use crate::traits::query::type_op::{self, TypeOp, TypeOpOutput};\n use crate::traits::query::NoSolution;\n use crate::traits::ObligationCause;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir as hir;\n use rustc_hir::HirId;\n use rustc_middle::ty::{self, ParamEnv, Ty};\n@@ -22,7 +22,7 @@ pub trait InferCtxtExt<'a, 'tcx> {\n         &'a self,\n         param_env: ty::ParamEnv<'tcx>,\n         body_id: hir::HirId,\n-        tys: FxHashSet<Ty<'tcx>>,\n+        tys: FxIndexSet<Ty<'tcx>>,\n     ) -> Bounds<'a, 'tcx>;\n }\n \n@@ -103,7 +103,7 @@ impl<'a, 'tcx: 'a> InferCtxtExt<'a, 'tcx> for InferCtxt<'tcx> {\n         &'a self,\n         param_env: ParamEnv<'tcx>,\n         body_id: HirId,\n-        tys: FxHashSet<Ty<'tcx>>,\n+        tys: FxIndexSet<Ty<'tcx>>,\n     ) -> Bounds<'a, 'tcx> {\n         tys.into_iter()\n             .map(move |ty| {"}, {"sha": "de158a15d54b8563d1c514e287744bf5c24103f7", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cc9b259b5e94e4543b96dca236e3a1af5ec496c9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9b259b5e94e4543b96dca236e3a1af5ec496c9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=cc9b259b5e94e4543b96dca236e3a1af5ec496c9", "patch": "@@ -2,6 +2,12 @@\n //!\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/resolution.html#selection\n \n+// FIXME: The `map` field in ProvisionalEvaluationCache should be changed to\n+// a `FxIndexMap` to avoid query instability, but right now it causes a perf regression. This would be\n+// fixed or at least lightened by the addition of the `drain_filter` method to `FxIndexMap`\n+// Relevant: https://github.com/rust-lang/rust/pull/103723 and https://github.com/bluss/indexmap/issues/242\n+#![allow(rustc::potential_query_instability)]\n+\n use self::EvaluationResult::*;\n use self::SelectionCandidate::*;\n \n@@ -24,7 +30,8 @@ use crate::traits::error_reporting::TypeErrCtxtExt;\n use crate::traits::project::ProjectAndUnifyResult;\n use crate::traits::project::ProjectionCacheKeyExt;\n use crate::traits::ProjectionCacheKey;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::{Diagnostic, ErrorGuaranteed};\n use rustc_hir as hir;"}, {"sha": "43819b3f490b1907655d5da45d252cff2210803c", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc9b259b5e94e4543b96dca236e3a1af5ec496c9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc9b259b5e94e4543b96dca236e3a1af5ec496c9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=cc9b259b5e94e4543b96dca236e3a1af5ec496c9", "patch": "@@ -16,7 +16,7 @@ use crate::errors::NegativePositiveConflict;\n use crate::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n use crate::traits::select::IntercrateAmbiguityCause;\n use crate::traits::{self, coherence, FutureCompatOverlapErrorKind, ObligationCause};\n-use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_errors::{struct_span_err, DiagnosticBuilder, EmissionGuarantee};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::ty::{self, ImplSubject, TyCtxt};\n@@ -435,7 +435,7 @@ pub(crate) fn to_pretty_impl_header(tcx: TyCtxt<'_>, impl_def_id: DefId) -> Opti\n \n     // FIXME: Currently only handles ?Sized.\n     //        Needs to support ?Move and ?DynSized when they are implemented.\n-    let mut types_without_default_bounds = FxHashSet::default();\n+    let mut types_without_default_bounds = FxIndexSet::default();\n     let sized_trait = tcx.lang_items().sized_trait();\n \n     if !substs.is_empty() {"}]}