{"sha": "221c940bf34887bb3f1900b757f8245ad23e8ef4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMWM5NDBiZjM0ODg3YmIzZjE5MDBiNzU3ZjgyNDVhZDIzZThlZjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-28T19:52:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-28T19:52:03Z"}, "message": "Auto merge of #32561 - steveklabnik:rollup, r=steveklabnik\n\nRollup of 7 pull requests\n\n- Successful merges: #32177, #32235, #32472, #32504, #32507, #32509, #32534\n- Failed merges:", "tree": {"sha": "7712d6dfd8920c7648e5d7583cc6177e0935a20d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7712d6dfd8920c7648e5d7583cc6177e0935a20d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/221c940bf34887bb3f1900b757f8245ad23e8ef4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/221c940bf34887bb3f1900b757f8245ad23e8ef4", "html_url": "https://github.com/rust-lang/rust/commit/221c940bf34887bb3f1900b757f8245ad23e8ef4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/221c940bf34887bb3f1900b757f8245ad23e8ef4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f131fbe7799b9c3d4a775798b90760f7c11ef33", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f131fbe7799b9c3d4a775798b90760f7c11ef33", "html_url": "https://github.com/rust-lang/rust/commit/1f131fbe7799b9c3d4a775798b90760f7c11ef33"}, {"sha": "9eea1d7494277fdf8dfddf93fdfdc27130c31971", "url": "https://api.github.com/repos/rust-lang/rust/commits/9eea1d7494277fdf8dfddf93fdfdc27130c31971", "html_url": "https://github.com/rust-lang/rust/commit/9eea1d7494277fdf8dfddf93fdfdc27130c31971"}], "stats": {"total": 117, "additions": 73, "deletions": 44}, "files": [{"sha": "8f721709b9ff149079d580baba94e3df1d4ead0d", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/221c940bf34887bb3f1900b757f8245ad23e8ef4/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/221c940bf34887bb3f1900b757f8245ad23e8ef4/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=221c940bf34887bb3f1900b757f8245ad23e8ef4", "patch": "@@ -132,8 +132,8 @@ Some common make targets are:\n - `make check-stage1-std NO_REBUILD=1` - test the standard library without\n   rebuilding the entire compiler\n - `make check TESTNAME=<substring-of-test-name>` - Run a matching set of tests.\n-  - `TESTNAME` should be a substring of the tests to match against e.g. it could \n-    be the fully qualified test name, or just a part of it. \n+  - `TESTNAME` should be a substring of the tests to match against e.g. it could\n+    be the fully qualified test name, or just a part of it.\n     `TESTNAME=collections::hash::map::test_map::test_capacity_not_less_than_len`\n     or `TESTNAME=test_capacity_not_less_than_len`.\n - `make check-stage1-rpass TESTNAME=<substring-of-test-name>` - Run a single"}, {"sha": "7d03d2991abdcc5133d753b77ba8e7deaf634826", "filename": "src/doc/book/casting-between-types.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Fdoc%2Fbook%2Fcasting-between-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Fdoc%2Fbook%2Fcasting-between-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fcasting-between-types.md?ref=221c940bf34887bb3f1900b757f8245ad23e8ef4", "patch": "@@ -17,12 +17,12 @@ function result.\n The most common case of coercion is removing mutability from a reference:\n \n  * `&mut T` to `&T`\n- \n+\n An analogous conversion is to remove mutability from a\n [raw pointer](raw-pointers.md):\n \n  * `*mut T` to `*const T`\n- \n+\n References can also be coerced to raw pointers:\n \n  * `&T` to `*const T`\n@@ -32,7 +32,7 @@ References can also be coerced to raw pointers:\n Custom coercions may be defined using [`Deref`](deref-coercions.md).\n \n Coercion is transitive.\n- \n+\n # `as`\n \n The `as` keyword does safe casting:\n@@ -64,7 +64,7 @@ A cast `e as U` is also valid in any of the following cases:\n     and `U` is an integer type; *enum-cast*\n  * `e` has type `bool` or `char` and `U` is an integer type; *prim-int-cast*\n  * `e` has type `u8` and `U` is `char`; *u8-char-cast*\n- \n+\n For example\n \n ```rust\n@@ -98,9 +98,9 @@ The semantics of numeric casts are:\n \n [float-int]: https://github.com/rust-lang/rust/issues/10184\n [float-float]: https://github.com/rust-lang/rust/issues/15536\n- \n+\n ## Pointer casts\n- \n+\n Perhaps surprisingly, it is safe to cast [raw pointers](raw-pointers.md) to and\n from integers, and to cast between pointers to different types subject to\n some constraints. It is only unsafe to dereference the pointer:\n@@ -114,7 +114,7 @@ let b = a as u32;\n \n * `e` has type `*T`, `U` has type `*U_0`, and either `U_0: Sized` or\n   `unsize_kind(T) == unsize_kind(U_0)`; a *ptr-ptr-cast*\n-  \n+\n * `e` has type `*T` and `U` is a numeric type, while `T: Sized`; *ptr-addr-cast*\n \n * `e` is an integer and `U` is `*U_0`, while `U_0: Sized`; *addr-ptr-cast*"}, {"sha": "2afe995aeea9a404e845313cbdbe7fa4d2165b10", "filename": "src/doc/book/closures.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Fdoc%2Fbook%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Fdoc%2Fbook%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fclosures.md?ref=221c940bf34887bb3f1900b757f8245ad23e8ef4", "patch": "@@ -502,5 +502,5 @@ assert_eq!(6, answer);\n ```\n \n By making the inner closure a `move Fn`, we create a new stack frame for our\n-closure. By `Box`ing it up, we\u2019ve given it a known size, and allowing it to\n+closure. By `Box`ing it up, we\u2019ve given it a known size, allowing it to\n escape our stack frame."}, {"sha": "08ff3894c9db57fcb4d7e062a76f30532952c20d", "filename": "src/doc/book/const-and-static.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Fdoc%2Fbook%2Fconst-and-static.md", "raw_url": "https://github.com/rust-lang/rust/raw/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Fdoc%2Fbook%2Fconst-and-static.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fconst-and-static.md?ref=221c940bf34887bb3f1900b757f8245ad23e8ef4", "patch": "@@ -72,7 +72,7 @@ a [`Drop`][drop] implementation.\n # Initializing\n \n Both `const` and `static` have requirements for giving them a value. They must\n-be given a value that\u2019s a constant expression. In other words, you cannot use \n+be given a value that\u2019s a constant expression. In other words, you cannot use\n the result of a function call or anything similarly complex or at runtime.\n \n # Which construct should I use?"}, {"sha": "16c43b5e7a5695bbbc5477b5ee68a9b2c2d7939b", "filename": "src/doc/book/getting-started.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Fdoc%2Fbook%2Fgetting-started.md", "raw_url": "https://github.com/rust-lang/rust/raw/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Fdoc%2Fbook%2Fgetting-started.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fgetting-started.md?ref=221c940bf34887bb3f1900b757f8245ad23e8ef4", "patch": "@@ -417,7 +417,7 @@ first. This leaves the top-level project directory (in this case,\n to your code. In this way, using Cargo helps you keep your projects nice and\n tidy. There's a place for everything, and everything is in its place.\n \n-Now, copy *main.rs* to the *src* directory, and delete the compiled file you\n+Now, move *main.rs* into the *src* directory, and delete the compiled file you\n created with `rustc`. As usual, replace `main` with `main.exe` if you're on\n Windows.\n "}, {"sha": "c16e2ea4535e9a0f4e34e74be56c3e2d5d6a0b64", "filename": "src/doc/book/macros.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Fdoc%2Fbook%2Fmacros.md", "raw_url": "https://github.com/rust-lang/rust/raw/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Fdoc%2Fbook%2Fmacros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fmacros.md?ref=221c940bf34887bb3f1900b757f8245ad23e8ef4", "patch": "@@ -337,8 +337,8 @@ fn main() {\n }\n ```\n \n-Instead you need to pass the variable name into the invocation, so it\u2019s tagged\n-with the right syntax context.\n+Instead you need to pass the variable name into the invocation, so that it\u2019s\n+tagged with the right syntax context.\n \n ```rust\n macro_rules! foo {\n@@ -470,7 +470,7 @@ which syntactic form it matches.\n * `ty`: a type. Examples: `i32`; `Vec<(char, String)>`; `&T`.\n * `pat`: a pattern. Examples: `Some(t)`; `(17, 'a')`; `_`.\n * `stmt`: a single statement. Example: `let x = 3`.\n-* `block`: a brace-delimited sequence of statements. Example:\n+* `block`: a brace-delimited sequence of statements and optionally an expression. Example:\n   `{ log(error, \"hi\"); return 12; }`.\n * `item`: an [item][item]. Examples: `fn foo() { }`; `struct Bar;`.\n * `meta`: a \"meta item\", as found in attributes. Example: `cfg(target_os = \"windows\")`."}, {"sha": "d01a20083efb580f86c670beb7b9361ac26afe7d", "filename": "src/doc/book/match.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Fdoc%2Fbook%2Fmatch.md", "raw_url": "https://github.com/rust-lang/rust/raw/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Fdoc%2Fbook%2Fmatch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fmatch.md?ref=221c940bf34887bb3f1900b757f8245ad23e8ef4", "patch": "@@ -28,8 +28,8 @@ patterns][patterns] that covers all the patterns that are possible here.\n \n [patterns]: patterns.html\n \n-One of the many advantages of `match` is it enforces \u2018exhaustiveness checking\u2019. \n-For example if we remove the last arm with the underscore `_`, the compiler will \n+One of the many advantages of `match` is it enforces \u2018exhaustiveness checking\u2019.\n+For example if we remove the last arm with the underscore `_`, the compiler will\n give us an error:\n \n ```text\n@@ -58,7 +58,7 @@ let number = match x {\n };\n ```\n \n-Sometimes it\u2019s a nice way of converting something from one type to another; in \n+Sometimes it\u2019s a nice way of converting something from one type to another; in\n this example the integers are converted to `String`.\n \n # Matching on enums\n@@ -90,7 +90,7 @@ fn process_message(msg: Message) {\n \n Again, the Rust compiler checks exhaustiveness, so it demands that you\n have a match arm for every variant of the enum. If you leave one off, it\n-will give you a compile-time error unless you use `_` or provide all possible \n+will give you a compile-time error unless you use `_` or provide all possible\n arms.\n \n Unlike the previous uses of `match`, you can\u2019t use the normal `if`"}, {"sha": "f8938be30ed49f7d94ff56126de9eaf8ebcd780c", "filename": "src/doc/book/ownership.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Fdoc%2Fbook%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Fdoc%2Fbook%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fownership.md?ref=221c940bf34887bb3f1900b757f8245ad23e8ef4", "patch": "@@ -124,7 +124,7 @@ special annotation here, it\u2019s the default thing that Rust does.\n ## The details\n \n The reason that we cannot use a binding after we\u2019ve moved it is subtle, but\n-important. \n+important.\n \n When we write code like this:\n \n@@ -148,7 +148,7 @@ The first line allocates memory for the vector object `v` on the stack like\n it does for `x` above. But in addition to that it also allocates some memory\n on the [heap][sh] for the actual data (`[1, 2, 3]`). Rust copies the address\n of this heap allocation to an internal pointer, which is part of the vector\n-object placed on the stack (let's call it the data pointer). \n+object placed on the stack (let's call it the data pointer).\n \n It is worth pointing out (even at the risk of stating the obvious) that the\n vector object and its data live in separate memory regions instead of being a\n@@ -163,7 +163,7 @@ does not create a copy of the heap allocation containing the actual data.\n Which means that there would be two pointers to the contents of the vector\n both pointing to the same memory allocation on the heap. It would violate\n Rust\u2019s safety guarantees by introducing a data race if one could access both\n-`v` and `v2` at the same time. \n+`v` and `v2` at the same time.\n \n For example if we truncated the vector to just two elements through `v2`:\n "}, {"sha": "69040931de676584f6037480d2f6ba35dcb32e89", "filename": "src/doc/book/primitive-types.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Fdoc%2Fbook%2Fprimitive-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Fdoc%2Fbook%2Fprimitive-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fprimitive-types.md?ref=221c940bf34887bb3f1900b757f8245ad23e8ef4", "patch": "@@ -164,7 +164,7 @@ copying. For example, you might want to reference only one line of a file read\n into memory. By nature, a slice is not created directly, but from an existing\n variable binding. Slices have a defined length, can be mutable or immutable.\n \n-Internally, slices are represented as a pointer to the beginning of the data \n+Internally, slices are represented as a pointer to the beginning of the data\n and a length.\n \n ## Slicing syntax"}, {"sha": "6ac701e29698594ceb32f3cc634ba57d17b6d5b1", "filename": "src/doc/book/vectors.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Fdoc%2Fbook%2Fvectors.md", "raw_url": "https://github.com/rust-lang/rust/raw/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Fdoc%2Fbook%2Fvectors.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fvectors.md?ref=221c940bf34887bb3f1900b757f8245ad23e8ef4", "patch": "@@ -116,7 +116,7 @@ for i in v {\n ```\n \n Note: You cannot use the vector again once you have iterated by taking ownership of the vector.\n-You can iterate the vector multiple times by taking a reference to the vector whilst iterating. \n+You can iterate the vector multiple times by taking a reference to the vector whilst iterating.\n For example, the following code does not compile.\n \n ```rust,ignore"}, {"sha": "1dac7dca3485b0f0e7569ef0341b1d1baa7fbfde", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=221c940bf34887bb3f1900b757f8245ad23e8ef4", "patch": "@@ -107,7 +107,7 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n /// use std::thread;\n ///\n /// fn main() {\n-///     let numbers: Vec<_> = (0..100u32).collect();\n+///     let numbers: Vec<_> = (0..100).collect();\n ///     let shared_numbers = Arc::new(numbers);\n ///\n ///     for _ in 0..10 {\n@@ -1118,7 +1118,7 @@ mod tests {\n \n     #[test]\n     fn test_strong_count() {\n-        let a = Arc::new(0u32);\n+        let a = Arc::new(0);\n         assert!(Arc::strong_count(&a) == 1);\n         let w = Arc::downgrade(&a);\n         assert!(Arc::strong_count(&a) == 1);\n@@ -1135,7 +1135,7 @@ mod tests {\n \n     #[test]\n     fn test_weak_count() {\n-        let a = Arc::new(0u32);\n+        let a = Arc::new(0);\n         assert!(Arc::strong_count(&a) == 1);\n         assert!(Arc::weak_count(&a) == 0);\n         let w = Arc::downgrade(&a);\n@@ -1161,7 +1161,7 @@ mod tests {\n \n     #[test]\n     fn show_arc() {\n-        let a = Arc::new(5u32);\n+        let a = Arc::new(5);\n         assert_eq!(format!(\"{:?}\", a), \"5\");\n     }\n "}, {"sha": "da803f57a59d3a2324ca9e0189975861745ab61b", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=221c940bf34887bb3f1900b757f8245ad23e8ef4", "patch": "@@ -1014,7 +1014,7 @@ mod tests {\n \n     #[test]\n     fn test_strong_count() {\n-        let a = Rc::new(0u32);\n+        let a = Rc::new(0);\n         assert!(Rc::strong_count(&a) == 1);\n         let w = Rc::downgrade(&a);\n         assert!(Rc::strong_count(&a) == 1);\n@@ -1031,7 +1031,7 @@ mod tests {\n \n     #[test]\n     fn test_weak_count() {\n-        let a = Rc::new(0u32);\n+        let a = Rc::new(0);\n         assert!(Rc::strong_count(&a) == 1);\n         assert!(Rc::weak_count(&a) == 0);\n         let w = Rc::downgrade(&a);"}, {"sha": "85a4fa82e2a34e82171d58833de5b90a42414e93", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=221c940bf34887bb3f1900b757f8245ad23e8ef4", "patch": "@@ -1305,10 +1305,10 @@ mod tests {\n         //\n         // https://github.com/rust-lang/rust/issues/26021\n         let mut v1 = LinkedList::new();\n-        v1.push_front(1u8);\n-        v1.push_front(1u8);\n-        v1.push_front(1u8);\n-        v1.push_front(1u8);\n+        v1.push_front(1);\n+        v1.push_front(1);\n+        v1.push_front(1);\n+        v1.push_front(1);\n         let _ = v1.split_off(3); // Dropping this now should not cause laundry consumption\n         assert_eq!(v1.len(), 3);\n \n@@ -1319,10 +1319,10 @@ mod tests {\n     #[test]\n     fn test_split_off() {\n         let mut v1 = LinkedList::new();\n-        v1.push_front(1u8);\n-        v1.push_front(1u8);\n-        v1.push_front(1u8);\n-        v1.push_front(1u8);\n+        v1.push_front(1);\n+        v1.push_front(1);\n+        v1.push_front(1);\n+        v1.push_front(1);\n \n         // test all splits\n         for ix in 0..1 + v1.len() {"}, {"sha": "ca2ee0c512bfeead070f6f417b659404b4443478", "filename": "src/libcollectionstest/slice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Flibcollectionstest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Flibcollectionstest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fslice.rs?ref=221c940bf34887bb3f1900b757f8245ad23e8ef4", "patch": "@@ -267,9 +267,9 @@ fn test_swap_remove_fail() {\n fn test_swap_remove_noncopyable() {\n     // Tests that we don't accidentally run destructors twice.\n     let mut v: Vec<Box<_>> = Vec::new();\n-    v.push(box 0u8);\n-    v.push(box 0u8);\n-    v.push(box 0u8);\n+    v.push(box 0);\n+    v.push(box 0);\n+    v.push(box 0);\n     let mut _e = v.swap_remove(0);\n     assert_eq!(v.len(), 2);\n     _e = v.swap_remove(1);\n@@ -884,7 +884,7 @@ fn test_overflow_does_not_cause_segfault_managed() {\n \n #[test]\n fn test_mut_split_at() {\n-    let mut values = [1u8,2,3,4,5];\n+    let mut values = [1,2,3,4,5];\n     {\n         let (left, right) = values.split_at_mut(2);\n         {"}, {"sha": "bef6c1ed43aa6a08438152fb6ae93776e8256d26", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=221c940bf34887bb3f1900b757f8245ad23e8ef4", "patch": "@@ -327,6 +327,30 @@ fn main() {\n     <Test as Trait1>::foo()\n }\n ```\n+\n+One last example:\n+\n+```\n+trait F {\n+    fn m(&self);\n+}\n+\n+trait G {\n+    fn m(&self);\n+}\n+\n+struct X;\n+\n+impl F for X { fn m(&self) { println!(\"I am F\"); } }\n+impl G for X { fn m(&self) { println!(\"I am G\"); } }\n+\n+fn main() {\n+    let f = X;\n+\n+    F::m(&f); // it displays \"I am F\"\n+    G::m(&f); // it displays \"I am G\"\n+}\n+```\n \"##,\n \n E0035: r##\""}, {"sha": "b543240c15afb898ff98b5027ef0cbe703711792", "filename": "src/libstd/sync/barrier.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Flibstd%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221c940bf34887bb3f1900b757f8245ad23e8ef4/src%2Flibstd%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fbarrier.rs?ref=221c940bf34887bb3f1900b757f8245ad23e8ef4", "patch": "@@ -17,16 +17,21 @@ use sync::{Mutex, Condvar};\n /// use std::sync::{Arc, Barrier};\n /// use std::thread;\n ///\n+/// let mut handles = Vec::with_capacity(10);\n /// let barrier = Arc::new(Barrier::new(10));\n /// for _ in 0..10 {\n ///     let c = barrier.clone();\n ///     // The same messages will be printed together.\n ///     // You will NOT see any interleaving.\n-///     thread::spawn(move|| {\n+///     handles.push(thread::spawn(move|| {\n ///         println!(\"before wait\");\n ///         c.wait();\n ///         println!(\"after wait\");\n-///     });\n+///     }));\n+/// }\n+/// // Wait for other threads to finish.\n+/// for handle in handles {\n+///     handle.join().unwrap();\n /// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}