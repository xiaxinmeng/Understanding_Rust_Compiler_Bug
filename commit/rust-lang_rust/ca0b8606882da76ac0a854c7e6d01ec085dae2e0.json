{"sha": "ca0b8606882da76ac0a854c7e6d01ec085dae2e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMGI4NjA2ODgyZGE3NmFjMGE4NTRjN2U2ZDAxZWMwODVkYWUyZTA=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-10-02T10:00:28Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-10-02T10:00:28Z"}, "message": "Format repeated element array literals", "tree": {"sha": "6df3eb18f8882d53f4bc06b4363499ec07842e08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6df3eb18f8882d53f4bc06b4363499ec07842e08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca0b8606882da76ac0a854c7e6d01ec085dae2e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca0b8606882da76ac0a854c7e6d01ec085dae2e0", "html_url": "https://github.com/rust-lang/rust/commit/ca0b8606882da76ac0a854c7e6d01ec085dae2e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca0b8606882da76ac0a854c7e6d01ec085dae2e0/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84718b5b90221597204de9f010d3079f91f7b9f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/84718b5b90221597204de9f010d3079f91f7b9f3", "html_url": "https://github.com/rust-lang/rust/commit/84718b5b90221597204de9f010d3079f91f7b9f3"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "8d375a8b586680c3f02aa8deaa2fc364b261ec38", "filename": "src/expr.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ca0b8606882da76ac0a854c7e6d01ec085dae2e0/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca0b8606882da76ac0a854c7e6d01ec085dae2e0/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=ca0b8606882da76ac0a854c7e6d01ec085dae2e0", "patch": "@@ -183,11 +183,13 @@ impl Rewrite for ast::Expr {\n             ast::Expr_::ExprIndex(ref expr, ref index) => {\n                 rewrite_index(expr, index, context, width, offset)\n             }\n+            ast::Expr_::ExprRepeat(ref expr, ref repeats) => {\n+                rewrite_repeats(expr, repeats, context, width, offset)\n+            }\n             // We do not format these expressions yet, but they should still\n             // satisfy our width restrictions.\n             ast::Expr_::ExprInPlace(..) |\n-            ast::Expr_::ExprInlineAsm(..) |\n-            ast::Expr_::ExprRepeat(..) => {\n+            ast::Expr_::ExprInlineAsm(..) => {\n                 wrap_str(context.snippet(self.span),\n                          context.config.max_width,\n                          width,\n@@ -197,6 +199,38 @@ impl Rewrite for ast::Expr {\n     }\n }\n \n+fn rewrite_repeats(expr: &ast::Expr,\n+                   index: &ast::Expr,\n+                   context: &RewriteContext,\n+                   width: usize,\n+                   offset: Indent)\n+                   -> Option<String> {\n+    let max_width = try_opt!(width.checked_sub(\"[; ]\".len()));\n+\n+    binary_search(1,\n+                  max_width,\n+                  |expr_budget| {\n+                      let expr_str = match expr.rewrite(context, expr_budget, offset + \"[\".len()) {\n+                          Some(result) => result,\n+                          None => return Err(Ordering::Greater),\n+                      };\n+\n+                      let last_line_width = last_line_width(&expr_str);\n+                      let index_budget = match max_width.checked_sub(last_line_width) {\n+                          Some(b) => b,\n+                          None => return Err(Ordering::Less),\n+                      };\n+                      let index_indent = offset + last_line_width + \"[; \".len();\n+\n+                      let index_str = match index.rewrite(context, index_budget, index_indent) {\n+                          Some(result) => result,\n+                          None => return Err(Ordering::Less),\n+                      };\n+\n+                      Ok(format!(\"[{}; {}]\", expr_str, index_str))\n+                  })\n+}\n+\n fn rewrite_index(expr: &ast::Expr,\n                  index: &ast::Expr,\n                  context: &RewriteContext,"}, {"sha": "45f688693f6d03dae6d63383f4847e3200f038a4", "filename": "tests/source/expr.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca0b8606882da76ac0a854c7e6d01ec085dae2e0/tests%2Fsource%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca0b8606882da76ac0a854c7e6d01ec085dae2e0/tests%2Fsource%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr.rs?ref=ca0b8606882da76ac0a854c7e6d01ec085dae2e0", "patch": "@@ -202,3 +202,8 @@ fn indices() {\n     let x = (aaaaaaaaaaaaaaaaaaaaaaaaaaaa+bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb+cccccccccccccccc) [ x + y + z ];\n     let y = (aaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb + cccccccccccccccc)[ xxxxx + yyyyy + zzzzz ];\n }\n+\n+fn repeats() {\n+    let x = [aaaaaaaaaaaaaaaaaaaaaaaaaaaa+bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb+cccccccccccccccc; x + y + z ];\n+    let y = [aaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb + cccccccccccccccc; xxxxx + yyyyy + zzzzz ];\n+}"}, {"sha": "6fe472c114e36e2d4f55ac4971a9a99838a1aa3f", "filename": "tests/target/expr.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca0b8606882da76ac0a854c7e6d01ec085dae2e0/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca0b8606882da76ac0a854c7e6d01ec085dae2e0/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=ca0b8606882da76ac0a854c7e6d01ec085dae2e0", "patch": "@@ -216,3 +216,11 @@ fn indices() {\n     let y = (aaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb +\n              cccccccccccccccc)[xxxxx + yyyyy + zzzzz];\n }\n+\n+fn repeats() {\n+    let x = [aaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb + cccccccccccccccc; x +\n+                                                                                                y +\n+                                                                                                z];\n+    let y = [aaaaaaaaaaaaaaaaaaaaaaaaaaaa + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb +\n+             cccccccccccccccc; xxxxx + yyyyy + zzzzz];\n+}"}]}