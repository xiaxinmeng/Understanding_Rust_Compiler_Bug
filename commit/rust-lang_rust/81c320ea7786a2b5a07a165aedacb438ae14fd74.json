{"sha": "81c320ea7786a2b5a07a165aedacb438ae14fd74", "node_id": "C_kwDOAAsO6NoAKDgxYzMyMGVhNzc4NmEyYjVhMDdhMTY1YWVkYWNiNDM4YWUxNGZkNzQ", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-04-09T21:07:18Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-04-09T21:22:14Z"}, "message": "Fix some clippy::complexity", "tree": {"sha": "308dc087deac08d0d14d4b635760565f3ccab06a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/308dc087deac08d0d14d4b635760565f3ccab06a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81c320ea7786a2b5a07a165aedacb438ae14fd74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81c320ea7786a2b5a07a165aedacb438ae14fd74", "html_url": "https://github.com/rust-lang/rust/commit/81c320ea7786a2b5a07a165aedacb438ae14fd74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81c320ea7786a2b5a07a165aedacb438ae14fd74/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fceb0f6456d4bf526634ef8a3759c0c98ffaa79", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fceb0f6456d4bf526634ef8a3759c0c98ffaa79", "html_url": "https://github.com/rust-lang/rust/commit/6fceb0f6456d4bf526634ef8a3759c0c98ffaa79"}], "stats": {"total": 125, "additions": 62, "deletions": 63}, "files": [{"sha": "b0c0ee942ea8f5074cb2e6bfd8792395e8efe411", "filename": "compiler/rustc_abi/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flib.rs?ref=81c320ea7786a2b5a07a165aedacb438ae14fd74", "patch": "@@ -1176,7 +1176,7 @@ impl FieldsShape {\n \n     /// Gets source indices of the fields by increasing offsets.\n     #[inline]\n-    pub fn index_by_increasing_offset<'a>(&'a self) -> impl Iterator<Item = usize> + 'a {\n+    pub fn index_by_increasing_offset(&self) -> impl Iterator<Item = usize> + '_ {\n         let mut inverse_small = [0u8; 64];\n         let mut inverse_big = IndexVec::new();\n         let use_small = self.count() <= inverse_small.len();"}, {"sha": "1389acabfcbd55e34c7a876009b8d821d70f75c5", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=81c320ea7786a2b5a07a165aedacb438ae14fd74", "patch": "@@ -691,7 +691,7 @@ fn validate_generic_param_order(\n                 GenericParamKind::Lifetime => (),\n                 GenericParamKind::Const { ty: _, kw_span: _, default: Some(default) } => {\n                     ordered_params += \" = \";\n-                    ordered_params += &pprust::expr_to_string(&*default.value);\n+                    ordered_params += &pprust::expr_to_string(&default.value);\n                 }\n                 GenericParamKind::Const { ty: _, kw_span: _, default: None } => (),\n             }"}, {"sha": "007d64f681f76d156cab9e4c1afdca08a8626e6c", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=81c320ea7786a2b5a07a165aedacb438ae14fd74", "patch": "@@ -404,11 +404,14 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     );\n                 } else {\n                     // And if it isn't, cancel the early-pass warning.\n-                    self.sess\n+                    if let Some(err) = self\n+                        .sess\n                         .parse_sess\n                         .span_diagnostic\n                         .steal_diagnostic(e.span, StashKey::EarlySyntaxWarning)\n-                        .map(|err| err.cancel());\n+                    {\n+                        err.cancel()\n+                    }\n                 }\n             }\n             ast::ExprKind::TryBlock(_) => {"}, {"sha": "9b3b1d7a8e30f220dd08ecd608bd5a0a0ff97f0f", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=81c320ea7786a2b5a07a165aedacb438ae14fd74", "patch": "@@ -988,7 +988,9 @@ impl<'a> State<'a> {\n \n     pub fn print_assoc_constraint(&mut self, constraint: &ast::AssocConstraint) {\n         self.print_ident(constraint.ident);\n-        constraint.gen_args.as_ref().map(|args| self.print_generic_args(args, false));\n+        if let Some(args) = constraint.gen_args.as_ref() {\n+            self.print_generic_args(args, false)\n+        }\n         self.space();\n         match &constraint.kind {\n             ast::AssocConstraintKind::Equality { term } => {"}, {"sha": "9ff401c3c7aad19d78a73c057b4001bce31d123e", "filename": "compiler/rustc_data_structures/src/graph/implementation/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fimplementation%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fimplementation%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fimplementation%2Fmod.rs?ref=81c320ea7786a2b5a07a165aedacb438ae14fd74", "patch": "@@ -206,17 +206,11 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n         AdjacentEdges { graph: self, direction, next: first_edge }\n     }\n \n-    pub fn successor_nodes<'a>(\n-        &'a self,\n-        source: NodeIndex,\n-    ) -> impl Iterator<Item = NodeIndex> + 'a {\n+    pub fn successor_nodes(&self, source: NodeIndex) -> impl Iterator<Item = NodeIndex> + '_ {\n         self.outgoing_edges(source).targets()\n     }\n \n-    pub fn predecessor_nodes<'a>(\n-        &'a self,\n-        target: NodeIndex,\n-    ) -> impl Iterator<Item = NodeIndex> + 'a {\n+    pub fn predecessor_nodes(&self, target: NodeIndex) -> impl Iterator<Item = NodeIndex> + '_ {\n         self.incoming_edges(target).sources()\n     }\n "}, {"sha": "ef37a606f313e59221624f90bd2a8e272b3dea11", "filename": "compiler/rustc_data_structures/src/memmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_data_structures%2Fsrc%2Fmemmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_data_structures%2Fsrc%2Fmemmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fmemmap.rs?ref=81c320ea7786a2b5a07a165aedacb438ae14fd74", "patch": "@@ -40,7 +40,7 @@ impl Deref for Mmap {\n \n impl AsRef<[u8]> for Mmap {\n     fn as_ref(&self) -> &[u8] {\n-        &*self.0\n+        &self.0\n     }\n }\n "}, {"sha": "3ed1de1bc3ca1ebbd712c3f847e95d5c6aca5a95", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=81c320ea7786a2b5a07a165aedacb438ae14fd74", "patch": "@@ -312,14 +312,14 @@ impl<CTX> HashStable<CTX> for ::std::num::NonZeroUsize {\n \n impl<CTX> HashStable<CTX> for f32 {\n     fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n-        let val: u32 = unsafe { ::std::mem::transmute(*self) };\n+        let val: u32 = self.to_bits();\n         val.hash_stable(ctx, hasher);\n     }\n }\n \n impl<CTX> HashStable<CTX> for f64 {\n     fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n-        let val: u64 = unsafe { ::std::mem::transmute(*self) };\n+        let val: u64 = self.to_bits();\n         val.hash_stable(ctx, hasher);\n     }\n }"}, {"sha": "7ff1339c5ab34c554f9ee754f42e403fad0ed79a", "filename": "compiler/rustc_data_structures/src/stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_data_structures%2Fsrc%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_data_structures%2Fsrc%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstack.rs?ref=81c320ea7786a2b5a07a165aedacb438ae14fd74", "patch": "@@ -5,7 +5,7 @@ const RED_ZONE: usize = 100 * 1024; // 100k\n \n // Only the first stack that is pushed, grows exponentially (2^n * STACK_PER_RECURSION) from then\n // on. This flag has performance relevant characteristics. Don't set it too high.\n-const STACK_PER_RECURSION: usize = 1 * 1024 * 1024; // 1MB\n+const STACK_PER_RECURSION: usize = 1024 * 1024; // 1MB\n \n /// Grows the stack on demand to prevent stack overflow. Call this in strategic locations\n /// to \"break up\" recursive calls. E.g. almost any call to `visit_expr` or equivalent can benefit"}, {"sha": "1783b4b357257aa5789e2b3601e069d772d79e98", "filename": "compiler/rustc_data_structures/src/sync/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fvec.rs?ref=81c320ea7786a2b5a07a165aedacb438ae14fd74", "patch": "@@ -84,7 +84,7 @@ impl<T: Copy> AppendOnlyVec<T> {\n     }\n \n     pub fn iter(&self) -> impl Iterator<Item = T> + '_ {\n-        (0..).map(|i| self.get(i)).take_while(|o| o.is_some()).filter_map(|o| o)\n+        (0..).map(|i| self.get(i)).take_while(|o| o.is_some()).flatten()\n     }\n }\n "}, {"sha": "6c8d541463158398178f6a9cc927c537c8cd2431", "filename": "compiler/rustc_data_structures/src/unord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs?ref=81c320ea7786a2b5a07a165aedacb438ae14fd74", "patch": "@@ -224,7 +224,7 @@ impl<V: Eq + Hash> UnordSet<V> {\n     }\n \n     #[inline]\n-    pub fn items<'a>(&'a self) -> UnordItems<&'a V, impl Iterator<Item = &'a V>> {\n+    pub fn items(&self) -> UnordItems<&V, impl Iterator<Item = &V>> {\n         UnordItems(self.inner.iter())\n     }\n \n@@ -415,7 +415,7 @@ impl<K: Eq + Hash, V> UnordMap<K, V> {\n     }\n \n     #[inline]\n-    pub fn items<'a>(&'a self) -> UnordItems<(&'a K, &'a V), impl Iterator<Item = (&'a K, &'a V)>> {\n+    pub fn items(&self) -> UnordItems<(&K, &V), impl Iterator<Item = (&K, &V)>> {\n         UnordItems(self.inner.iter())\n     }\n "}, {"sha": "e09ef34b93dbc405ae0a0105bb42c0ff23e318ff", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=81c320ea7786a2b5a07a165aedacb438ae14fd74", "patch": "@@ -956,7 +956,7 @@ impl Diagnostic {\n     // Exact iteration order of diagnostic arguments shouldn't make a difference to output because\n     // they're only used in interpolation.\n     #[allow(rustc::potential_query_instability)]\n-    pub fn args<'a>(&'a self) -> impl Iterator<Item = DiagnosticArg<'a, 'static>> {\n+    pub fn args(&self) -> impl Iterator<Item = DiagnosticArg<'_, 'static>> {\n         self.args.iter()\n     }\n "}, {"sha": "81e8bcbf7cd54995dad10c325589cc7dd5a15109", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=81c320ea7786a2b5a07a165aedacb438ae14fd74", "patch": "@@ -1407,7 +1407,7 @@ impl EmitterWriter {\n                 // Account for newlines to align output to its label.\n                 for (line, text) in normalize_whitespace(&text).lines().enumerate() {\n                     buffer.append(\n-                        0 + line,\n+                        line,\n                         &format!(\n                             \"{}{}\",\n                             if line == 0 { String::new() } else { \" \".repeat(label_width) },\n@@ -1918,7 +1918,7 @@ impl EmitterWriter {\n                         let last_line = unhighlighted_lines.pop();\n                         let first_line = unhighlighted_lines.drain(..).next();\n \n-                        first_line.map(|(p, l)| {\n+                        if let Some((p, l)) = first_line {\n                             self.draw_code_line(\n                                 &mut buffer,\n                                 &mut row_num,\n@@ -1930,12 +1930,12 @@ impl EmitterWriter {\n                                 &file_lines,\n                                 is_multiline,\n                             )\n-                        });\n+                        }\n \n                         buffer.puts(row_num, max_line_num_len - 1, \"...\", Style::LineNumber);\n                         row_num += 1;\n \n-                        last_line.map(|(p, l)| {\n+                        if let Some((p, l)) = last_line {\n                             self.draw_code_line(\n                                 &mut buffer,\n                                 &mut row_num,\n@@ -1947,7 +1947,7 @@ impl EmitterWriter {\n                                 &file_lines,\n                                 is_multiline,\n                             )\n-                        });\n+                        }\n                     }\n                 }\n "}, {"sha": "4ff8e409d88e3f2cb4d90dc3226557256ec23fac", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=81c320ea7786a2b5a07a165aedacb438ae14fd74", "patch": "@@ -466,7 +466,7 @@ impl<'a> StripUnconfigured<'a> {\n         //\n         // N.B., this is intentionally not part of the visit_expr() function\n         //     in order for filter_map_expr() to be able to avoid this check\n-        if let Some(attr) = expr.attrs().iter().find(|a| is_cfg(*a)) {\n+        if let Some(attr) = expr.attrs().iter().find(|a| is_cfg(a)) {\n             self.sess.emit_err(RemoveExprNotSupported { span: attr.span });\n         }\n "}, {"sha": "fb3a00d86d4f73a45f12b3cc796aa6bb4e388d64", "filename": "compiler/rustc_expand/src/mbe/metavar_expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs?ref=81c320ea7786a2b5a07a165aedacb438ae14fd74", "patch": "@@ -41,7 +41,7 @@ impl MetaVarExpr {\n         };\n         check_trailing_token(&mut tts, sess)?;\n         let mut iter = args.trees();\n-        let rslt = match &*ident.as_str() {\n+        let rslt = match ident.as_str() {\n             \"count\" => parse_count(&mut iter, sess, ident.span)?,\n             \"ignore\" => MetaVarExpr::Ignore(parse_ident(&mut iter, sess, ident.span)?),\n             \"index\" => MetaVarExpr::Index(parse_depth(&mut iter, sess, ident.span)?),"}, {"sha": "8f91a96f964aba3bb73297faaa5f23484c188c72", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=81c320ea7786a2b5a07a165aedacb438ae14fd74", "patch": "@@ -49,7 +49,7 @@ impl LanguageItems {\n         self.get(it).ok_or_else(|| LangItemError(it))\n     }\n \n-    pub fn iter<'a>(&'a self) -> impl Iterator<Item = (LangItem, DefId)> + 'a {\n+    pub fn iter(&self) -> impl Iterator<Item = (LangItem, DefId)> + '_ {\n         self.items\n             .iter()\n             .enumerate()"}, {"sha": "271ab830694bb522381a569a848253dc7018b53e", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=81c320ea7786a2b5a07a165aedacb438ae14fd74", "patch": "@@ -1850,7 +1850,7 @@ impl<R: Idx, C: Idx> SparseBitMatrix<R, C> {\n \n     /// Iterates through all the columns set to true in a given row of\n     /// the matrix.\n-    pub fn iter<'a>(&'a self, row: R) -> impl Iterator<Item = C> + 'a {\n+    pub fn iter(&self, row: R) -> impl Iterator<Item = C> + '_ {\n         self.row(row).into_iter().flat_map(|r| r.iter())\n     }\n "}, {"sha": "ae2f52c513e9f4398526ad0ebd9a1a97702282c4", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=81c320ea7786a2b5a07a165aedacb438ae14fd74", "patch": "@@ -201,18 +201,15 @@ impl<I: Idx, T> IndexVec<I, T> {\n     }\n \n     #[inline]\n-    pub fn drain<'a, R: RangeBounds<usize>>(\n-        &'a mut self,\n-        range: R,\n-    ) -> impl Iterator<Item = T> + 'a {\n+    pub fn drain<R: RangeBounds<usize>>(&mut self, range: R) -> impl Iterator<Item = T> + '_ {\n         self.raw.drain(range)\n     }\n \n     #[inline]\n-    pub fn drain_enumerated<'a, R: RangeBounds<usize>>(\n-        &'a mut self,\n+    pub fn drain_enumerated<R: RangeBounds<usize>>(\n+        &mut self,\n         range: R,\n-    ) -> impl Iterator<Item = (I, T)> + 'a {\n+    ) -> impl Iterator<Item = (I, T)> + '_ {\n         let begin = match range.start_bound() {\n             std::ops::Bound::Included(i) => *i,\n             std::ops::Bound::Excluded(i) => i.checked_add(1).unwrap(),"}, {"sha": "4540ded0f41a33dd29a6fcadc7c8e840f9341d96", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic_builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs?ref=81c320ea7786a2b5a07a165aedacb438ae14fd74", "patch": "@@ -119,7 +119,7 @@ impl DiagnosticDeriveBuilder {\n impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n     /// Generates calls to `code` and similar functions based on the attributes on the type or\n     /// variant.\n-    pub fn preamble<'s>(&mut self, variant: &VariantInfo<'s>) -> TokenStream {\n+    pub fn preamble(&mut self, variant: &VariantInfo<'_>) -> TokenStream {\n         let ast = variant.ast();\n         let attrs = &ast.attrs;\n         let preamble = attrs.iter().map(|attr| {\n@@ -133,7 +133,7 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n \n     /// Generates calls to `span_label` and similar functions based on the attributes on fields or\n     /// calls to `set_arg` when no attributes are present.\n-    pub fn body<'s>(&mut self, variant: &VariantInfo<'s>) -> TokenStream {\n+    pub fn body(&mut self, variant: &VariantInfo<'_>) -> TokenStream {\n         let mut body = quote! {};\n         // Generate `set_arg` calls first..\n         for binding in variant.bindings().iter().filter(|bi| should_generate_set_arg(bi.ast())) {"}, {"sha": "56755e588cb45604568c04e1781da272e12b60d3", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=81c320ea7786a2b5a07a165aedacb438ae14fd74", "patch": "@@ -915,7 +915,7 @@ pub enum LocalInfo<'tcx> {\n \n impl<'tcx> LocalDecl<'tcx> {\n     pub fn local_info(&self) -> &LocalInfo<'tcx> {\n-        &**self.local_info.as_ref().assert_crate_local()\n+        &self.local_info.as_ref().assert_crate_local()\n     }\n \n     /// Returns `true` only if local is a binding that can itself be"}, {"sha": "6a8ae525069c0f8eaa65c8f6bb5ea8c76347f938", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=81c320ea7786a2b5a07a165aedacb438ae14fd74", "patch": "@@ -923,7 +923,7 @@ impl ObjectSafetyViolation {\n                 }\n             }\n             ObjectSafetyViolation::SupertraitNonLifetimeBinder(_) => {\n-                format!(\"where clause cannot reference non-lifetime `for<...>` variables\").into()\n+                \"where clause cannot reference non-lifetime `for<...>` variables\".into()\n             }\n             ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod(_), _) => {\n                 format!(\"associated function `{}` has no `self` parameter\", name).into()"}, {"sha": "9c350fb5a137c0e7516f84a001bbac5181303ca0", "filename": "compiler/rustc_middle/src/traits/solve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs?ref=81c320ea7786a2b5a07a165aedacb438ae14fd74", "patch": "@@ -105,7 +105,7 @@ impl<'tcx> std::ops::Deref for ExternalConstraints<'tcx> {\n     type Target = ExternalConstraintsData<'tcx>;\n \n     fn deref(&self) -> &Self::Target {\n-        &*self.0\n+        &self.0\n     }\n }\n "}, {"sha": "c312aaf6819aa955530b1485da845724a72955e2", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=81c320ea7786a2b5a07a165aedacb438ae14fd74", "patch": "@@ -924,7 +924,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             crate_name,\n             // Don't print the whole stable crate id. That's just\n             // annoying in debug output.\n-            stable_crate_id.to_u64() >> 8 * 6,\n+            stable_crate_id.to_u64() >> (8 * 6),\n             self.def_path(def_id).to_string_no_crate_verbose()\n         )\n     }\n@@ -2379,7 +2379,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {\n         let map = self.in_scope_traits_map(id.owner)?;\n         let candidates = map.get(&id.local_id)?;\n-        Some(&*candidates)\n+        Some(candidates)\n     }\n \n     pub fn named_bound_var(self, id: HirId) -> Option<resolve_bound_vars::ResolvedArg> {"}, {"sha": "1f027c08fc3b5fe8e3fd7a52e124ea93d907eaca", "filename": "compiler/rustc_parse/src/lexer/unicode_chars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs?ref=81c320ea7786a2b5a07a165aedacb438ae14fd74", "patch": "@@ -336,8 +336,8 @@ const ASCII_ARRAY: &[(&str, &str, Option<token::TokenKind>)] = &[\n     (\"\\\"\", \"Quotation Mark\", None),\n ];\n \n-pub(super) fn check_for_substitution<'a>(\n-    reader: &StringReader<'a>,\n+pub(super) fn check_for_substitution(\n+    reader: &StringReader<'_>,\n     pos: BytePos,\n     ch: char,\n     count: usize,"}, {"sha": "f8ef1307c988e187d13ea1035fbf2b3594b94f15", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=81c320ea7786a2b5a07a165aedacb438ae14fd74", "patch": "@@ -53,7 +53,7 @@ impl<'a> Parser<'a> {\n                 let snapshot = self.create_snapshot_for_diagnostic();\n                 match self.parse_ty() {\n                     Ok(p) => {\n-                        if let TyKind::ImplTrait(_, bounds) = &(*p).kind {\n+                        if let TyKind::ImplTrait(_, bounds) = &p.kind {\n                             let span = impl_span.to(self.token.span.shrink_to_lo());\n                             let mut err = self.struct_span_err(\n                                 span,"}, {"sha": "29f6a07e81bebac0b9852753af5ea24197fb1ffa", "filename": "compiler/rustc_query_system/src/query/caches.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs?ref=81c320ea7786a2b5a07a165aedacb438ae14fd74", "patch": "@@ -136,7 +136,9 @@ where\n     }\n \n     fn iter(&self, f: &mut dyn FnMut(&Self::Key, &Self::Value, DepNodeIndex)) {\n-        self.cache.lock().as_ref().map(|value| f(&(), &value.0, value.1));\n+        if let Some(value) = self.cache.lock().as_ref() {\n+            f(&(), &value.0, value.1)\n+        }\n     }\n }\n "}, {"sha": "d4eba495dcdcd2dc3a3ae55f73f4ecdbc1117a75", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=81c320ea7786a2b5a07a165aedacb438ae14fd74", "patch": "@@ -1426,7 +1426,7 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n         opt::opt_s(\n             \"\",\n             \"edition\",\n-            &*EDITION_STRING,\n+            &EDITION_STRING,\n             EDITION_NAME_LIST,\n         ),\n         opt::multi_s("}, {"sha": "15e27952cf50f34a873b5fccd6e7c3bd29c08f74", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=81c320ea7786a2b5a07a165aedacb438ae14fd74", "patch": "@@ -84,12 +84,12 @@ impl SymbolGallery {\n \n /// Construct a diagnostic for a language feature error due to the given `span`.\n /// The `feature`'s `Symbol` is the one you used in `active.rs` and `rustc_span::symbols`.\n-pub fn feature_err<'a>(\n-    sess: &'a ParseSess,\n+pub fn feature_err(\n+    sess: &ParseSess,\n     feature: Symbol,\n     span: impl Into<MultiSpan>,\n     explain: impl Into<DiagnosticMessage>,\n-) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n     feature_err_issue(sess, feature, span, GateIssue::Language, explain)\n }\n \n@@ -98,20 +98,21 @@ pub fn feature_err<'a>(\n /// This variant allows you to control whether it is a library or language feature.\n /// Almost always, you want to use this for a language feature. If so, prefer `feature_err`.\n #[track_caller]\n-pub fn feature_err_issue<'a>(\n-    sess: &'a ParseSess,\n+pub fn feature_err_issue(\n+    sess: &ParseSess,\n     feature: Symbol,\n     span: impl Into<MultiSpan>,\n     issue: GateIssue,\n     explain: impl Into<DiagnosticMessage>,\n-) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n     let span = span.into();\n \n     // Cancel an earlier warning for this same error, if it exists.\n     if let Some(span) = span.primary_span() {\n-        sess.span_diagnostic\n-            .steal_diagnostic(span, StashKey::EarlySyntaxWarning)\n-            .map(|err| err.cancel());\n+        if let Some(err) = sess.span_diagnostic.steal_diagnostic(span, StashKey::EarlySyntaxWarning)\n+        {\n+            err.cancel()\n+        }\n     }\n \n     let mut err = sess.create_err(FeatureGateError { span, explain: explain.into() });"}, {"sha": "aa8859ed1a358e4871209ca000ad8adf4664a051", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c320ea7786a2b5a07a165aedacb438ae14fd74/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=81c320ea7786a2b5a07a165aedacb438ae14fd74", "patch": "@@ -1353,16 +1353,16 @@ impl Clone for SourceFile {\n         Self {\n             name: self.name.clone(),\n             src: self.src.clone(),\n-            src_hash: self.src_hash.clone(),\n+            src_hash: self.src_hash,\n             external_src: Lock::new(self.external_src.borrow().clone()),\n-            start_pos: self.start_pos.clone(),\n-            end_pos: self.end_pos.clone(),\n+            start_pos: self.start_pos,\n+            end_pos: self.end_pos,\n             lines: Lock::new(self.lines.borrow().clone()),\n             multibyte_chars: self.multibyte_chars.clone(),\n             non_narrow_chars: self.non_narrow_chars.clone(),\n             normalized_pos: self.normalized_pos.clone(),\n-            name_hash: self.name_hash.clone(),\n-            cnum: self.cnum.clone(),\n+            name_hash: self.name_hash,\n+            cnum: self.cnum,\n         }\n     }\n }"}]}