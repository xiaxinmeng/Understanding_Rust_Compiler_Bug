{"sha": "9301e2e65d6fda364a4d9be5eb1b37fad6a43536", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMDFlMmU2NWQ2ZmRhMzY0YTRkOWJlNWViMWIzN2ZhZDZhNDM1MzY=", "commit": {"author": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2016-12-19T04:07:27Z"}, "committer": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2016-12-23T19:51:46Z"}, "message": "Comparison between IpAddr and Ipv[46]Addr.", "tree": {"sha": "b783cb1fb6d04863f72e54e1de6c3144db74e75b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b783cb1fb6d04863f72e54e1de6c3144db74e75b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9301e2e65d6fda364a4d9be5eb1b37fad6a43536", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9301e2e65d6fda364a4d9be5eb1b37fad6a43536", "html_url": "https://github.com/rust-lang/rust/commit/9301e2e65d6fda364a4d9be5eb1b37fad6a43536", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9301e2e65d6fda364a4d9be5eb1b37fad6a43536/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00b4019f28f3e7f9ae3990ed871cb4917fd9e659", "url": "https://api.github.com/repos/rust-lang/rust/commits/00b4019f28f3e7f9ae3990ed871cb4917fd9e659", "html_url": "https://github.com/rust-lang/rust/commit/00b4019f28f3e7f9ae3990ed871cb4917fd9e659"}], "stats": {"total": 104, "additions": 100, "deletions": 4}, "files": [{"sha": "e409ad95cf862b861d2beb0e5cf67cd28384f17a", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 100, "deletions": 4, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/9301e2e65d6fda364a4d9be5eb1b37fad6a43536/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9301e2e65d6fda364a4d9be5eb1b37fad6a43536/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=9301e2e65d6fda364a4d9be5eb1b37fad6a43536", "patch": "@@ -551,6 +551,26 @@ impl PartialEq for Ipv4Addr {\n     }\n }\n \n+#[stable(feature = \"ip_cmp\", since = \"1.15.0\")]\n+impl PartialEq<Ipv4Addr> for IpAddr {\n+    fn eq(&self, other: &Ipv4Addr) -> bool {\n+        match *self {\n+            IpAddr::V4(ref v4) => v4 == other,\n+            IpAddr::V6(_) => false,\n+        }\n+    }\n+}\n+\n+#[stable(feature = \"ip_cmp\", since = \"1.15.0\")]\n+impl PartialEq<IpAddr> for Ipv4Addr {\n+    fn eq(&self, other: &IpAddr) -> bool {\n+        match *other {\n+            IpAddr::V4(ref v4) => self == v4,\n+            IpAddr::V6(_) => false,\n+        }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Eq for Ipv4Addr {}\n \n@@ -568,6 +588,26 @@ impl PartialOrd for Ipv4Addr {\n     }\n }\n \n+#[stable(feature = \"ip_cmp\", since = \"1.15.0\")]\n+impl PartialOrd<Ipv4Addr> for IpAddr {\n+    fn partial_cmp(&self, other: &Ipv4Addr) -> Option<Ordering> {\n+        match *self {\n+            IpAddr::V4(ref v4) => v4.partial_cmp(other),\n+            IpAddr::V6(_) => Some(Ordering::Greater),\n+        }\n+    }\n+}\n+\n+#[stable(feature = \"ip_cmp\", since = \"1.15.0\")]\n+impl PartialOrd<IpAddr> for Ipv4Addr {\n+    fn partial_cmp(&self, other: &IpAddr) -> Option<Ordering> {\n+        match *other {\n+            IpAddr::V4(ref v4) => self.partial_cmp(v4),\n+            IpAddr::V6(_) => Some(Ordering::Less),\n+        }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Ord for Ipv4Addr {\n     fn cmp(&self, other: &Ipv4Addr) -> Ordering {\n@@ -1026,6 +1066,26 @@ impl PartialEq for Ipv6Addr {\n     }\n }\n \n+#[stable(feature = \"ip_cmp\", since = \"1.15.0\")]\n+impl PartialEq<IpAddr> for Ipv6Addr {\n+    fn eq(&self, other: &IpAddr) -> bool {\n+        match *other {\n+            IpAddr::V4(_) => false,\n+            IpAddr::V6(ref v6) => self == v6,\n+        }\n+    }\n+}\n+\n+#[stable(feature = \"ip_cmp\", since = \"1.15.0\")]\n+impl PartialEq<Ipv6Addr> for IpAddr {\n+    fn eq(&self, other: &Ipv6Addr) -> bool {\n+        match *self {\n+            IpAddr::V4(_) => false,\n+            IpAddr::V6(ref v6) => v6 == other,\n+        }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Eq for Ipv6Addr {}\n \n@@ -1043,6 +1103,26 @@ impl PartialOrd for Ipv6Addr {\n     }\n }\n \n+#[stable(feature = \"ip_cmp\", since = \"1.15.0\")]\n+impl PartialOrd<Ipv6Addr> for IpAddr {\n+    fn partial_cmp(&self, other: &Ipv6Addr) -> Option<Ordering> {\n+        match *self {\n+            IpAddr::V4(_) => Some(Ordering::Less),\n+            IpAddr::V6(ref v6) => v6.partial_cmp(other),\n+        }\n+    }\n+}\n+\n+#[stable(feature = \"ip_cmp\", since = \"1.15.0\")]\n+impl PartialOrd<IpAddr> for Ipv6Addr {\n+    fn partial_cmp(&self, other: &IpAddr) -> Option<Ordering> {\n+        match *other {\n+            IpAddr::V4(_) => Some(Ordering::Greater),\n+            IpAddr::V6(ref v6) => self.partial_cmp(v6),\n+        }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Ord for Ipv6Addr {\n     fn cmp(&self, other: &Ipv6Addr) -> Ordering {\n@@ -1444,10 +1524,26 @@ mod tests {\n     }\n \n     #[test]\n-    fn ord() {\n-        assert!(Ipv4Addr::new(100, 64, 3, 3) < Ipv4Addr::new(192, 0, 2, 2));\n-        assert!(\"2001:db8:f00::1002\".parse::<Ipv6Addr>().unwrap() <\n-                \"2001:db8:f00::2001\".parse::<Ipv6Addr>().unwrap());\n+    fn cmp() {\n+        let v41 = Ipv4Addr::new(100, 64, 3, 3);\n+        let v42 = Ipv4Addr::new(192, 0, 2, 2);\n+        let v61 = \"2001:db8:f00::1002\".parse::<Ipv6Addr>().unwrap();\n+        let v62 = \"2001:db8:f00::2001\".parse::<Ipv6Addr>().unwrap();\n+        assert!(v41 < v42);\n+        assert!(v61 < v62);\n+\n+        assert_eq!(v41, IpAddr::V4(v41));\n+        assert_eq!(v61, IpAddr::V6(v61));\n+        assert!(v41 != IpAddr::V4(v42));\n+        assert!(v61 != IpAddr::V6(v62));\n+\n+        assert!(v41 < IpAddr::V4(v42));\n+        assert!(v61 < IpAddr::V6(v62));\n+        assert!(IpAddr::V4(v41) < v42);\n+        assert!(IpAddr::V6(v61) < v62);\n+\n+        assert!(v41 < IpAddr::V6(v61));\n+        assert!(IpAddr::V4(v41) < v61);\n     }\n \n     #[test]"}]}