{"sha": "540bd986aac6f50363848f37ab1bb9e6eb408170", "node_id": "C_kwDOAAsO6NoAKDU0MGJkOTg2YWFjNmY1MDM2Mzg0OGYzN2FiMWJiOWU2ZWI0MDgxNzA", "commit": {"author": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2023-02-16T05:07:18Z"}, "committer": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2023-02-16T11:18:08Z"}, "message": "Do not ICE on unmet trait alias bounds", "tree": {"sha": "34d9fdccf2ab3299b996b078ea61ba0bba08796a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34d9fdccf2ab3299b996b078ea61ba0bba08796a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/540bd986aac6f50363848f37ab1bb9e6eb408170", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJFBAABCAAvFiEEvrRBFuOXsbT1OVTHfUwvbCISJTIFAmPuEPARHGVnZ3lhbEBn\nbWFpbC5jb20ACgkQfUwvbCISJTIgtw//c5Fv6wianpDzzvelbzbrXOu1vphQhfjo\nnVZAbspmEbIF7WPIQyWlS84Dmc2q7mBSzvG5XIKWSfVW4poiUliXMNExQo82Cvk0\nHkEBlEt7NzrkD9K9+kepZAzQJq9FaBcZfXGSOb6itkuN8HxGVgr4aMu+ye6WoM/o\nKOUvxuyzzt0H8vELmda0MBtU+KJr3yl/Sa0xkCIl/ErLaZRIaCZ02JF3LqFJJoGy\nxBTtiJg9Edd8PWGqr3Jlx0Sb0c9xuGlxMU/f0DTEUTVK9U9Jwm2Uz58sKczByrVU\nQAURltKI1UtBlm7Fdz6yzwF+cXifCCGawJJXwA7ovKzzDHPsjLZ6H2DSNqlWJVHS\nSm5SQdoWLxoRFWddI5onItzEu/gMTCmJqH35NKtAPaom2b1hhKFJn8DeYe3ILqqG\nHlbgSxwJ8Ni9AnNDYuiF/k8pxl8o6nowk7rw7+49PIul56f70PoTJy1fD4yAmEga\nBA353Z4EicoptMLP0Iv5jaIm8f8fOy5HgQ9GsdtbHHLgukvGNZfRjxlCyb1Cf+ZG\nl2ntSHKqMQRlqeFGs5v5nX+ndvo30NpLh/3d/Yln/auJH0avmqDOwDQSIzck7NWX\nIf99nrhLGv05gGwqT5GvmvPc+psqRFwM3P1RKlcvJOiv4v2msQhUlyv1S4m4KCHj\nblJ0vBaj3YI=\n=MLBz\n-----END PGP SIGNATURE-----", "payload": "tree 34d9fdccf2ab3299b996b078ea61ba0bba08796a\nparent 999ac5f7770bff68bd65f490990d32c3ec1faaa6\nauthor Alan Egerton <eggyal@gmail.com> 1676524038 +0000\ncommitter Alan Egerton <eggyal@gmail.com> 1676546288 +0000\n\nDo not ICE on unmet trait alias bounds\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/540bd986aac6f50363848f37ab1bb9e6eb408170", "html_url": "https://github.com/rust-lang/rust/commit/540bd986aac6f50363848f37ab1bb9e6eb408170", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/540bd986aac6f50363848f37ab1bb9e6eb408170/comments", "author": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "999ac5f7770bff68bd65f490990d32c3ec1faaa6", "url": "https://api.github.com/repos/rust-lang/rust/commits/999ac5f7770bff68bd65f490990d32c3ec1faaa6", "html_url": "https://github.com/rust-lang/rust/commit/999ac5f7770bff68bd65f490990d32c3ec1faaa6"}], "stats": {"total": 47, "additions": 41, "deletions": 6}, "files": [{"sha": "d13d8ff8270a9caade57d38768ffada85074ea0e", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/540bd986aac6f50363848f37ab1bb9e6eb408170/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540bd986aac6f50363848f37ab1bb9e6eb408170/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=540bd986aac6f50363848f37ab1bb9e6eb408170", "patch": "@@ -477,12 +477,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // This is the \"trait\" (meaning, the predicate \"proved\" by this `impl`) which provides the `Self` type we care about.\n         // For the purposes of this function, we hope that it is a `struct` type, and that our current `expr` is a literal of\n         // that struct type.\n-        let impl_trait_self_ref: Option<ty::TraitRef<'tcx>> =\n-            self.tcx.impl_trait_ref(obligation.impl_def_id).map(|impl_def| impl_def.skip_binder());\n-\n-        let Some(impl_trait_self_ref) = impl_trait_self_ref else {\n-            // It is possible that this is absent. In this case, we make no progress.\n-            return Err(expr);\n+        let impl_trait_self_ref = if self.tcx.is_trait_alias(obligation.impl_def_id) {\n+            self.tcx.mk_trait_ref(\n+                obligation.impl_def_id,\n+                ty::InternalSubsts::identity_for_item(self.tcx, obligation.impl_def_id),\n+            )\n+        } else {\n+            self.tcx\n+                .impl_trait_ref(obligation.impl_def_id)\n+                .map(|impl_def| impl_def.skip_binder())\n+                // It is possible that this is absent. In this case, we make no progress.\n+                .ok_or(expr)?\n         };\n \n         // We only really care about the `Self` type itself, which we extract from the ref."}, {"sha": "d254c0ae3ef92ce070e54de23857ad294a6fabf0", "filename": "tests/ui/traits/alias/issue-108072-unmet-trait-alias-bound.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/540bd986aac6f50363848f37ab1bb9e6eb408170/tests%2Fui%2Ftraits%2Falias%2Fissue-108072-unmet-trait-alias-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/540bd986aac6f50363848f37ab1bb9e6eb408170/tests%2Fui%2Ftraits%2Falias%2Fissue-108072-unmet-trait-alias-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Falias%2Fissue-108072-unmet-trait-alias-bound.rs?ref=540bd986aac6f50363848f37ab1bb9e6eb408170", "patch": "@@ -0,0 +1,11 @@\n+// Regression test for #108072: do not ICE upon unmet trait alias constraint\n+\n+#![feature(trait_alias)]\n+\n+trait IteratorAlias = Iterator;\n+\n+fn f(_: impl IteratorAlias) {}\n+\n+fn main() {\n+    f(()) //~ `()` is not an iterator\n+}"}, {"sha": "39f974f962c2ba893e34408102e467402af6361f", "filename": "tests/ui/traits/alias/issue-108072-unmet-trait-alias-bound.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/540bd986aac6f50363848f37ab1bb9e6eb408170/tests%2Fui%2Ftraits%2Falias%2Fissue-108072-unmet-trait-alias-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/540bd986aac6f50363848f37ab1bb9e6eb408170/tests%2Fui%2Ftraits%2Falias%2Fissue-108072-unmet-trait-alias-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Falias%2Fissue-108072-unmet-trait-alias-bound.stderr?ref=540bd986aac6f50363848f37ab1bb9e6eb408170", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: `()` is not an iterator\n+  --> $DIR/issue-108072-unmet-trait-alias-bound.rs:10:7\n+   |\n+LL |     f(())\n+   |     - ^^ `()` is not an iterator\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Iterator` is not implemented for `()`\n+   = note: required for `()` to implement `IteratorAlias`\n+note: required by a bound in `f`\n+  --> $DIR/issue-108072-unmet-trait-alias-bound.rs:7:14\n+   |\n+LL | fn f(_: impl IteratorAlias) {}\n+   |              ^^^^^^^^^^^^^ required by this bound in `f`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}