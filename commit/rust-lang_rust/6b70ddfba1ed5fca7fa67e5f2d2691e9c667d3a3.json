{"sha": "6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNzBkZGZiYTFlZDVmY2E3ZmE2N2U1ZjJkMjY5MWU5YzY2N2QzYTM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-18T18:52:23Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-24T21:21:57Z"}, "message": "Remove io::read_error\n\nThe general idea is to remove conditions completely from I/O, so in the meantime\nremove the read_error condition to mean the same thing as the io_error condition.", "tree": {"sha": "c5f2dbd75d45048ff68121ac870bde1ae34d2cd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5f2dbd75d45048ff68121ac870bde1ae34d2cd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3", "html_url": "https://github.com/rust-lang/rust/commit/6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e117aa0e2a4121aab101cb7526a5e79812bfb76e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e117aa0e2a4121aab101cb7526a5e79812bfb76e", "html_url": "https://github.com/rust-lang/rust/commit/e117aa0e2a4121aab101cb7526a5e79812bfb76e"}], "stats": {"total": 94, "additions": 42, "deletions": 52}, "files": [{"sha": "c77e3b91609901a134fabb2a5c82e0d7c6078b48", "filename": "src/libstd/rt/io/extensions.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3/src%2Flibstd%2Frt%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3/src%2Flibstd%2Frt%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fextensions.rs?ref=6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3", "patch": "@@ -18,7 +18,7 @@ use int;\n use iter::Iterator;\n use vec;\n use rt::io::{Reader, Writer, Decorator};\n-use rt::io::{read_error, standard_error, EndOfFile, DEFAULT_BUF_SIZE};\n+use rt::io::{io_error, standard_error, EndOfFile, DEFAULT_BUF_SIZE};\n use option::{Option, Some, None};\n use unstable::finally::Finally;\n use cast;\n@@ -41,17 +41,17 @@ pub trait ReaderUtil {\n     ///\n     /// # Failure\n     ///\n-    /// Raises the same conditions as `read`. Additionally raises `read_error`\n-    /// on EOF. If `read_error` is handled then `push_bytes` may push less\n+    /// Raises the same conditions as `read`. Additionally raises `io_error`\n+    /// on EOF. If `io_error` is handled then `push_bytes` may push less\n     /// than the requested number of bytes.\n     fn push_bytes(&mut self, buf: &mut ~[u8], len: uint);\n \n     /// Reads `len` bytes and gives you back a new vector of length `len`\n     ///\n     /// # Failure\n     ///\n-    /// Raises the same conditions as `read`. Additionally raises `read_error`\n-    /// on EOF. If `read_error` is handled then the returned vector may\n+    /// Raises the same conditions as `read`. Additionally raises `io_error`\n+    /// on EOF. If `io_error` is handled then the returned vector may\n     /// contain less than the requested number of bytes.\n     fn read_bytes(&mut self, len: uint) -> ~[u8];\n \n@@ -314,7 +314,7 @@ impl<T: Reader> ReaderUtil for T {\n                             total_read += nread;\n                         }\n                         None => {\n-                            read_error::cond.raise(standard_error(EndOfFile));\n+                            io_error::cond.raise(standard_error(EndOfFile));\n                             break;\n                         }\n                     }\n@@ -334,11 +334,11 @@ impl<T: Reader> ReaderUtil for T {\n     fn read_to_end(&mut self) -> ~[u8] {\n         let mut buf = vec::with_capacity(DEFAULT_BUF_SIZE);\n         let mut keep_reading = true;\n-        do read_error::cond.trap(|e| {\n+        do io_error::cond.trap(|e| {\n             if e.kind == EndOfFile {\n                 keep_reading = false;\n             } else {\n-                read_error::cond.raise(e)\n+                io_error::cond.raise(e)\n             }\n         }).inside {\n             while keep_reading {\n@@ -641,7 +641,7 @@ mod test {\n     use cell::Cell;\n     use rt::io::mem::{MemReader, MemWriter};\n     use rt::io::mock::MockReader;\n-    use rt::io::{read_error, placeholder_error};\n+    use rt::io::{io_error, placeholder_error};\n \n     #[test]\n     fn read_byte() {\n@@ -681,10 +681,10 @@ mod test {\n     fn read_byte_error() {\n         let mut reader = MockReader::new();\n         reader.read = |_| {\n-            read_error::cond.raise(placeholder_error());\n+            io_error::cond.raise(placeholder_error());\n             None\n         };\n-        do read_error::cond.trap(|_| {\n+        do io_error::cond.trap(|_| {\n         }).inside {\n             let byte = reader.read_byte();\n             assert!(byte == None);\n@@ -722,11 +722,11 @@ mod test {\n     fn bytes_error() {\n         let mut reader = MockReader::new();\n         reader.read = |_| {\n-            read_error::cond.raise(placeholder_error());\n+            io_error::cond.raise(placeholder_error());\n             None\n         };\n         let mut it = reader.bytes();\n-        do read_error::cond.trap(|_| ()).inside {\n+        do io_error::cond.trap(|_| ()).inside {\n             let byte = it.next();\n             assert!(byte == None);\n         }\n@@ -765,7 +765,7 @@ mod test {\n     #[test]\n     fn read_bytes_eof() {\n         let mut reader = MemReader::new(~[10, 11]);\n-        do read_error::cond.trap(|_| {\n+        do io_error::cond.trap(|_| {\n         }).inside {\n             assert!(reader.read_bytes(4) == ~[10, 11]);\n         }\n@@ -806,7 +806,7 @@ mod test {\n     fn push_bytes_eof() {\n         let mut reader = MemReader::new(~[10, 11]);\n         let mut buf = ~[8, 9];\n-        do read_error::cond.trap(|_| {\n+        do io_error::cond.trap(|_| {\n         }).inside {\n             reader.push_bytes(&mut buf, 4);\n             assert!(buf == ~[8, 9, 10, 11]);\n@@ -824,13 +824,13 @@ mod test {\n                     buf[0] = 10;\n                     Some(1)\n                 } else {\n-                    read_error::cond.raise(placeholder_error());\n+                    io_error::cond.raise(placeholder_error());\n                     None\n                 }\n             }\n         };\n         let mut buf = ~[8, 9];\n-        do read_error::cond.trap(|_| { } ).inside {\n+        do io_error::cond.trap(|_| { } ).inside {\n             reader.push_bytes(&mut buf, 4);\n         }\n         assert!(buf == ~[8, 9, 10]);\n@@ -850,7 +850,7 @@ mod test {\n                     buf[0] = 10;\n                     Some(1)\n                 } else {\n-                    read_error::cond.raise(placeholder_error());\n+                    io_error::cond.raise(placeholder_error());\n                     None\n                 }\n             }\n@@ -903,7 +903,7 @@ mod test {\n                     buf[1] = 11;\n                     Some(2)\n                 } else {\n-                    read_error::cond.raise(placeholder_error());\n+                    io_error::cond.raise(placeholder_error());\n                     None\n                 }\n             }"}, {"sha": "381fa9f2d073a7c3433cc97100ee423ee181811a", "filename": "src/libstd/rt/io/file.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Ffile.rs?ref=6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3", "patch": "@@ -19,7 +19,7 @@ on a `ToCStr` object. This trait is already defined for common\n objects such as strings and `Path` instances.\n \n All operations in this module, including those as part of `FileStream` et al\n-block the task during execution. Most will raise `std::rt::io::{io_error,read_error}`\n+block the task during execution. Most will raise `std::rt::io::{io_error,io_error}`\n conditions in the event of failure.\n \n Also included in this module are the `FileInfo` and `DirectoryInfo` traits. When\n@@ -35,7 +35,7 @@ use c_str::ToCStr;\n use super::{Reader, Writer, Seek};\n use super::{SeekStyle, Read, Write};\n use rt::rtio::{RtioFileStream, IoFactory, with_local_io};\n-use rt::io::{io_error, read_error, EndOfFile,\n+use rt::io::{io_error, EndOfFile,\n             FileMode, FileAccess, FileStat, IoError,\n             PathAlreadyExists, PathDoesntExist,\n             MismatchedFileTypeForOperation, ignore_io_error};\n@@ -361,7 +361,7 @@ impl Reader for FileStream {\n             Err(ioerr) => {\n                 // EOF is indicated by returning None\n                 if ioerr.kind != EndOfFile {\n-                    read_error::cond.raise(ioerr);\n+                    io_error::cond.raise(ioerr);\n                 }\n                 return None;\n             }\n@@ -388,7 +388,7 @@ impl Writer for FileStream {\n         match self.fd.flush() {\n             Ok(_) => (),\n             Err(ioerr) => {\n-                read_error::cond.raise(ioerr);\n+                io_error::cond.raise(ioerr);\n             }\n         }\n     }\n@@ -401,7 +401,7 @@ impl Seek for FileStream {\n         match res {\n             Ok(cursor) => cursor,\n             Err(ioerr) => {\n-                read_error::cond.raise(ioerr);\n+                io_error::cond.raise(ioerr);\n                 return -1;\n             }\n         }\n@@ -415,7 +415,7 @@ impl Seek for FileStream {\n                 ()\n             },\n             Err(ioerr) => {\n-                read_error::cond.raise(ioerr);\n+                io_error::cond.raise(ioerr);\n             }\n         }\n     }"}, {"sha": "7f5b01bb1ece9c94f82f9714daa7cde7e6450331", "filename": "src/libstd/rt/io/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fmod.rs?ref=6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3", "patch": "@@ -404,12 +404,6 @@ condition! {\n     pub io_error: IoError -> ();\n }\n \n-// XXX: Can't put doc comments on macros\n-// Raised by `read` on error\n-condition! {\n-    pub read_error: IoError -> ();\n-}\n-\n /// Helper for wrapper calls where you want to\n /// ignore any io_errors that might be raised\n pub fn ignore_io_error<T>(cb: &fn() -> T) -> T {\n@@ -429,7 +423,7 @@ pub trait Reader {\n     ///\n     /// # Failure\n     ///\n-    /// Raises the `read_error` condition on error. If the condition\n+    /// Raises the `io_error` condition on error. If the condition\n     /// is handled then no guarantee is made about the number of bytes\n     /// read and the contents of `buf`. If the condition is handled\n     /// returns `None` (XXX see below)."}, {"sha": "4e841b36a5d3739d22578cb7077a6a09c845450a", "filename": "src/libstd/rt/io/net/tcp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs?ref=6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3", "patch": "@@ -12,7 +12,7 @@ use option::{Option, Some, None};\n use result::{Ok, Err};\n use rt::io::net::ip::SocketAddr;\n use rt::io::{Reader, Writer, Listener, Acceptor};\n-use rt::io::{io_error, read_error, EndOfFile};\n+use rt::io::{io_error, EndOfFile};\n use rt::rtio::{IoFactory, with_local_io,\n                RtioSocket, RtioTcpListener, RtioTcpAcceptor, RtioTcpStream};\n \n@@ -67,7 +67,7 @@ impl Reader for TcpStream {\n             Err(ioerr) => {\n                 // EOF is indicated by returning None\n                 if ioerr.kind != EndOfFile {\n-                    read_error::cond.raise(ioerr);\n+                    io_error::cond.raise(ioerr);\n                 }\n                 return None;\n             }\n@@ -308,7 +308,7 @@ mod test {\n                 let mut buf = [0];\n                 let nread = stream.read(buf);\n                 assert!(nread.is_none());\n-                do read_error::cond.trap(|e| {\n+                do io_error::cond.trap(|e| {\n                     if cfg!(windows) {\n                         assert_eq!(e.kind, NotConnected);\n                     } else {\n@@ -343,7 +343,7 @@ mod test {\n                 let mut buf = [0];\n                 let nread = stream.read(buf);\n                 assert!(nread.is_none());\n-                do read_error::cond.trap(|e| {\n+                do io_error::cond.trap(|e| {\n                     if cfg!(windows) {\n                         assert_eq!(e.kind, NotConnected);\n                     } else {"}, {"sha": "2e4ae95d98eea83f656953997d9a590cb2bb3893", "filename": "src/libstd/rt/io/net/udp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3/src%2Flibstd%2Frt%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3/src%2Flibstd%2Frt%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Fudp.rs?ref=6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3", "patch": "@@ -12,7 +12,7 @@ use option::{Option, Some, None};\n use result::{Ok, Err};\n use rt::io::net::ip::SocketAddr;\n use rt::io::{Reader, Writer};\n-use rt::io::{io_error, read_error, EndOfFile};\n+use rt::io::{io_error, EndOfFile};\n use rt::rtio::{RtioSocket, RtioUdpSocket, IoFactory, with_local_io};\n \n pub struct UdpSocket {\n@@ -38,7 +38,7 @@ impl UdpSocket {\n             Err(ioerr) => {\n                 // EOF is indicated by returning None\n                 if ioerr.kind != EndOfFile {\n-                    read_error::cond.raise(ioerr);\n+                    io_error::cond.raise(ioerr);\n                 }\n                 None\n             }"}, {"sha": "52699964b62418e17273570bb42ecc24956254f2", "filename": "src/libstd/rt/io/option.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3/src%2Flibstd%2Frt%2Fio%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3/src%2Flibstd%2Frt%2Fio%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Foption.rs?ref=6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3", "patch": "@@ -16,7 +16,7 @@\n \n use option::*;\n use super::{Reader, Writer, Listener, Acceptor, Seek, SeekStyle};\n-use super::{standard_error, PreviousIoError, io_error, read_error, IoError};\n+use super::{standard_error, PreviousIoError, io_error, IoError};\n \n fn prev_io_error() -> IoError {\n     standard_error(PreviousIoError)\n@@ -43,7 +43,7 @@ impl<R: Reader> Reader for Option<R> {\n         match *self {\n             Some(ref mut reader) => reader.read(buf),\n             None => {\n-                read_error::cond.raise(prev_io_error());\n+                io_error::cond.raise(prev_io_error());\n                 None\n             }\n         }\n@@ -107,7 +107,7 @@ mod test {\n     use option::*;\n     use super::super::mem::*;\n     use rt::test::*;\n-    use super::super::{PreviousIoError, io_error, read_error};\n+    use super::super::{PreviousIoError, io_error, io_error};\n \n     #[test]\n     fn test_option_writer() {\n@@ -161,7 +161,7 @@ mod test {\n         let mut buf = [];\n \n         let mut called = false;\n-        do read_error::cond.trap(|err| {\n+        do io_error::cond.trap(|err| {\n             assert_eq!(err.kind, PreviousIoError);\n             called = true;\n         }).inside {"}, {"sha": "eba58b97c4df453d002d9f57b56eac2e038fcbe7", "filename": "src/libstd/rt/io/pipe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3/src%2Flibstd%2Frt%2Fio%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3/src%2Flibstd%2Frt%2Fio%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fpipe.rs?ref=6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3", "patch": "@@ -15,7 +15,7 @@\n \n use prelude::*;\n use super::{Reader, Writer};\n-use rt::io::{io_error, read_error, EndOfFile};\n+use rt::io::{io_error, EndOfFile};\n use rt::rtio::RtioPipe;\n \n pub struct PipeStream {\n@@ -35,7 +35,7 @@ impl Reader for PipeStream {\n             Err(ioerr) => {\n                 // EOF is indicated by returning None\n                 if ioerr.kind != EndOfFile {\n-                    read_error::cond.raise(ioerr);\n+                    io_error::cond.raise(ioerr);\n                 }\n                 return None;\n             }"}, {"sha": "047fc541ba8b37e3509882c72ee2c1a76649839d", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3", "patch": "@@ -93,7 +93,7 @@ pub fn expand_include_str(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     let file = get_single_str_from_tts(cx, sp, tts, \"include_str!\");\n     let file = res_rel_file(cx, sp, &Path::new(file));\n     let mut error = None;\n-    let bytes = do io::read_error::cond.trap(|e| error = Some(e)).inside {\n+    let bytes = do io::io_error::cond.trap(|e| error = Some(e)).inside {\n         file.open_reader(io::Open).read_to_end()\n     };\n     match error {\n@@ -120,10 +120,8 @@ pub fn expand_include_bin(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree])\n     let file = res_rel_file(cx, sp, &Path::new(file));\n \n     let mut error = None;\n-    let bytes = do io::read_error::cond.trap(|e| error = Some(e)).inside {\n-        do io::io_error::cond.trap(|e| error = Some(e)).inside {\n-            file.open_reader(io::Open).read_to_end()\n-        }\n+    let bytes = do io::io_error::cond.trap(|e| error = Some(e)).inside {\n+        file.open_reader(io::Open).read_to_end()\n     };\n     match error {\n         Some(e) => {"}, {"sha": "fad9eab75420042877630cfcd5ff59375e277992", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=6b70ddfba1ed5fca7fa67e5f2d2691e9c667d3a3", "patch": "@@ -271,9 +271,7 @@ pub fn file_to_filemap(sess: @mut ParseSess, path: &Path, spanopt: Option<Span>)\n     };\n     let mut error = None;\n     let bytes = do io::io_error::cond.trap(|e| error = Some(e)).inside {\n-        do io::read_error::cond.trap(|e| error = Some(e)).inside {\n-            path.open_reader(io::Open).read_to_end()\n-        }\n+        path.open_reader(io::Open).read_to_end()\n     };\n     match error {\n         Some(e) => {"}]}