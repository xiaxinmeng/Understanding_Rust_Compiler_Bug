{"sha": "acfb2c45ba337b3265ab35dee5c94d3641c3ccf7", "node_id": "C_kwDOAAsO6NoAKGFjZmIyYzQ1YmEzMzdiMzI2NWFiMzVkZWU1Yzk0ZDM2NDFjM2NjZjc", "commit": {"author": {"name": "Centri3", "email": "114838443+Centri3@users.noreply.github.com", "date": "2023-04-18T07:14:00Z"}, "committer": {"name": "Centri3", "email": "114838443+Centri3@users.noreply.github.com", "date": "2023-04-25T10:06:11Z"}, "message": "don't check if from macro invocation", "tree": {"sha": "362ba53ffa1d98dd5a86e39d2b4b43cb6c88bc05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/362ba53ffa1d98dd5a86e39d2b4b43cb6c88bc05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acfb2c45ba337b3265ab35dee5c94d3641c3ccf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acfb2c45ba337b3265ab35dee5c94d3641c3ccf7", "html_url": "https://github.com/rust-lang/rust/commit/acfb2c45ba337b3265ab35dee5c94d3641c3ccf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acfb2c45ba337b3265ab35dee5c94d3641c3ccf7/comments", "author": {"login": "Centri3", "id": 114838443, "node_id": "U_kgDOBthLqw", "avatar_url": "https://avatars.githubusercontent.com/u/114838443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centri3", "html_url": "https://github.com/Centri3", "followers_url": "https://api.github.com/users/Centri3/followers", "following_url": "https://api.github.com/users/Centri3/following{/other_user}", "gists_url": "https://api.github.com/users/Centri3/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centri3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centri3/subscriptions", "organizations_url": "https://api.github.com/users/Centri3/orgs", "repos_url": "https://api.github.com/users/Centri3/repos", "events_url": "https://api.github.com/users/Centri3/events{/privacy}", "received_events_url": "https://api.github.com/users/Centri3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centri3", "id": 114838443, "node_id": "U_kgDOBthLqw", "avatar_url": "https://avatars.githubusercontent.com/u/114838443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centri3", "html_url": "https://github.com/Centri3", "followers_url": "https://api.github.com/users/Centri3/followers", "following_url": "https://api.github.com/users/Centri3/following{/other_user}", "gists_url": "https://api.github.com/users/Centri3/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centri3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centri3/subscriptions", "organizations_url": "https://api.github.com/users/Centri3/orgs", "repos_url": "https://api.github.com/users/Centri3/repos", "events_url": "https://api.github.com/users/Centri3/events{/privacy}", "received_events_url": "https://api.github.com/users/Centri3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4f2c48d9bed4146b1b317e17854f1cefcaf0f42", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4f2c48d9bed4146b1b317e17854f1cefcaf0f42", "html_url": "https://github.com/rust-lang/rust/commit/c4f2c48d9bed4146b1b317e17854f1cefcaf0f42"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "c8ea151ffce2690d20b84ef34251d6abda52fcd5", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acfb2c45ba337b3265ab35dee5c94d3641c3ccf7/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfb2c45ba337b3265ab35dee5c94d3641c3ccf7/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=acfb2c45ba337b3265ab35dee5c94d3641c3ccf7", "patch": "@@ -253,6 +253,10 @@ impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n         use rustc_ast::LitKind;\n \n+        if e.span.from_expansion() {\n+            return;\n+        }\n+\n         if_chain! {\n             // Find std::str::converts::from_utf8\n             if let Some(args) = match_function_call(cx, e, &paths::STR_FROM_UTF8);"}, {"sha": "14cb799d916374791639f95bc32255884d552cc1", "filename": "tests/ui/string_lit_as_bytes.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/acfb2c45ba337b3265ab35dee5c94d3641c3ccf7/tests%2Fui%2Fstring_lit_as_bytes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/acfb2c45ba337b3265ab35dee5c94d3641c3ccf7/tests%2Fui%2Fstring_lit_as_bytes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_lit_as_bytes.fixed?ref=acfb2c45ba337b3265ab35dee5c94d3641c3ccf7", "patch": "@@ -3,6 +3,12 @@\n #![allow(dead_code, unused_variables)]\n #![warn(clippy::string_lit_as_bytes)]\n \n+macro_rules! b {\n+    ($b:literal) => {\n+        const C: &[u8] = $b.as_bytes();\n+    }\n+}\n+\n fn str_lit_as_bytes() {\n     let bs = b\"hello there\";\n \n@@ -11,6 +17,8 @@ fn str_lit_as_bytes() {\n     let bs = b\"lit to string\".to_vec();\n     let bs = b\"lit to owned\".to_vec();\n \n+    b!(\"aaa\");\n+\n     // no warning, because these cannot be written as byte string literals:\n     let ubs = \"\u2603\".as_bytes();\n     let ubs = \"hello there! this is a very long string\".as_bytes();"}, {"sha": "44b468e6bf0c4ec0121d48b0cf6800cfbe2eacce", "filename": "tests/ui/string_lit_as_bytes.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/acfb2c45ba337b3265ab35dee5c94d3641c3ccf7/tests%2Fui%2Fstring_lit_as_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfb2c45ba337b3265ab35dee5c94d3641c3ccf7/tests%2Fui%2Fstring_lit_as_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_lit_as_bytes.rs?ref=acfb2c45ba337b3265ab35dee5c94d3641c3ccf7", "patch": "@@ -3,6 +3,12 @@\n #![allow(dead_code, unused_variables)]\n #![warn(clippy::string_lit_as_bytes)]\n \n+macro_rules! b {\n+    ($b:literal) => {\n+        const C: &[u8] = $b.as_bytes();\n+    }\n+}\n+\n fn str_lit_as_bytes() {\n     let bs = \"hello there\".as_bytes();\n \n@@ -11,6 +17,8 @@ fn str_lit_as_bytes() {\n     let bs = \"lit to string\".to_string().into_bytes();\n     let bs = \"lit to owned\".to_owned().into_bytes();\n \n+    b!(\"aaa\");\n+\n     // no warning, because these cannot be written as byte string literals:\n     let ubs = \"\u2603\".as_bytes();\n     let ubs = \"hello there! this is a very long string\".as_bytes();"}, {"sha": "5be3eb9f2fff6e9d3857b1f6b2ca5d5d235ce05a", "filename": "tests/ui/string_lit_as_bytes.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/acfb2c45ba337b3265ab35dee5c94d3641c3ccf7/tests%2Fui%2Fstring_lit_as_bytes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acfb2c45ba337b3265ab35dee5c94d3641c3ccf7/tests%2Fui%2Fstring_lit_as_bytes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_lit_as_bytes.stderr?ref=acfb2c45ba337b3265ab35dee5c94d3641c3ccf7", "patch": "@@ -1,37 +1,37 @@\n error: calling `as_bytes()` on a string literal\n-  --> $DIR/string_lit_as_bytes.rs:7:14\n+  --> $DIR/string_lit_as_bytes.rs:13:14\n    |\n LL |     let bs = \"hello there\".as_bytes();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using a byte string literal instead: `b\"hello there\"`\n    |\n    = note: `-D clippy::string-lit-as-bytes` implied by `-D warnings`\n \n error: calling `as_bytes()` on a string literal\n-  --> $DIR/string_lit_as_bytes.rs:9:14\n+  --> $DIR/string_lit_as_bytes.rs:15:14\n    |\n LL |     let bs = r###\"raw string with 3# plus \" \"\"###.as_bytes();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using a byte string literal instead: `br###\"raw string with 3# plus \" \"\"###`\n \n error: calling `into_bytes()` on a string literal\n-  --> $DIR/string_lit_as_bytes.rs:11:14\n+  --> $DIR/string_lit_as_bytes.rs:17:14\n    |\n LL |     let bs = \"lit to string\".to_string().into_bytes();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using a byte string literal instead: `b\"lit to string\".to_vec()`\n \n error: calling `into_bytes()` on a string literal\n-  --> $DIR/string_lit_as_bytes.rs:12:14\n+  --> $DIR/string_lit_as_bytes.rs:18:14\n    |\n LL |     let bs = \"lit to owned\".to_owned().into_bytes();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using a byte string literal instead: `b\"lit to owned\".to_vec()`\n \n error: calling `as_bytes()` on `include_str!(..)`\n-  --> $DIR/string_lit_as_bytes.rs:25:22\n+  --> $DIR/string_lit_as_bytes.rs:33:22\n    |\n LL |     let includestr = include_str!(\"string_lit_as_bytes.rs\").as_bytes();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `include_bytes!(..)` instead: `include_bytes!(\"string_lit_as_bytes.rs\")`\n \n error: calling `as_bytes()` on a string literal\n-  --> $DIR/string_lit_as_bytes.rs:27:13\n+  --> $DIR/string_lit_as_bytes.rs:35:13\n    |\n LL |     let _ = \"string with newline/t/n\".as_bytes();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using a byte string literal instead: `b\"string with newline/t/n\"`"}]}