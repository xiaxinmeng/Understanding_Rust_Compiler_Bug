{"sha": "e34183218ceb840c3b20a707ed79e57bdf9f90b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNDE4MzIxOGNlYjg0MGMzYjIwYTcwN2VkNzllNTdiZGY5ZjkwYjc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-28T14:54:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-28T14:54:00Z"}, "message": "Merge #6387\n\n6387: do not use associated types placeholder for inlay hint  r=flodiebold a=bnjjj\n\n\r\nclose #6191\n\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "8cc60eb5258a50481b5dd08eb2261be2c0d4e6cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cc60eb5258a50481b5dd08eb2261be2c0d4e6cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e34183218ceb840c3b20a707ed79e57bdf9f90b7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfmYYICRBK7hj4Ov3rIwAAdHIIAE1P0qVe7JOv7yNCrtyu+/Kw\nqzsIM3pRJTo++p+HXg1ZNmUaFIIqkUSsZ1qqOrMt/s/VLQX5E15J/ZkqllkK2NYw\nDIcoGYM0EUopXVQEeveS9l1fGcDjEo/EJUYMHDg4fUbJgJF+Pcyzgxmxbmx2+44m\n//aK7kI3Y8rD+v2vh7xMPgpdUjDGae8kkIlMMm1f4eiwTn8Hk29+UxZrALxq2To0\nSHpf0z74aRdbMgACRZYQjdjIueo5CCfBdm3uvGJM9QTEF9PUy7mpJqMgPdOFC1NT\n1FL7Bi149b+02MS70f6NHcfsE1VN9JWJy1RI7jQ5vbt4k3G5qNcx9aiEyeBBicc=\n=xcax\n-----END PGP SIGNATURE-----\n", "payload": "tree 8cc60eb5258a50481b5dd08eb2261be2c0d4e6cf\nparent 85cda15b62b6b3c0d633eee1458b01a8abc759e6\nparent ec3638adb93ea425f825cc976bcae816f7e5c50b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1603896840 +0000\ncommitter GitHub <noreply@github.com> 1603896840 +0000\n\nMerge #6387\n\n6387: do not use associated types placeholder for inlay hint  r=flodiebold a=bnjjj\n\n\r\nclose #6191\n\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e34183218ceb840c3b20a707ed79e57bdf9f90b7", "html_url": "https://github.com/rust-lang/rust/commit/e34183218ceb840c3b20a707ed79e57bdf9f90b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e34183218ceb840c3b20a707ed79e57bdf9f90b7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85cda15b62b6b3c0d633eee1458b01a8abc759e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/85cda15b62b6b3c0d633eee1458b01a8abc759e6", "html_url": "https://github.com/rust-lang/rust/commit/85cda15b62b6b3c0d633eee1458b01a8abc759e6"}, {"sha": "ec3638adb93ea425f825cc976bcae816f7e5c50b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec3638adb93ea425f825cc976bcae816f7e5c50b", "html_url": "https://github.com/rust-lang/rust/commit/ec3638adb93ea425f825cc976bcae816f7e5c50b"}], "stats": {"total": 85, "additions": 72, "deletions": 13}, "files": [{"sha": "822ef4477ebb45989aef72ed1ef7b84f80bac5cc", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 47, "deletions": 9, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e34183218ceb840c3b20a707ed79e57bdf9f90b7/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e34183218ceb840c3b20a707ed79e57bdf9f90b7/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=e34183218ceb840c3b20a707ed79e57bdf9f90b7", "patch": "@@ -82,6 +82,20 @@ pub trait HirDisplay {\n         };\n         Ok(result)\n     }\n+\n+    /// Returns a String representation of `self` for test purposes\n+    fn display_test<'a>(&'a self, db: &'a dyn HirDatabase) -> HirDisplayWrapper<'a, Self>\n+    where\n+        Self: Sized,\n+    {\n+        HirDisplayWrapper {\n+            db,\n+            t: self,\n+            max_size: None,\n+            omit_verbose_types: false,\n+            display_target: DisplayTarget::Test,\n+        }\n+    }\n }\n \n impl<'a> HirFormatter<'a> {\n@@ -134,12 +148,17 @@ enum DisplayTarget {\n     /// Display types for inserting them in source files.\n     /// The generated code should compile, so paths need to be qualified.\n     SourceCode { module_id: ModuleId },\n+    /// Only for test purpose to keep real types\n+    Test,\n }\n \n impl DisplayTarget {\n     fn is_source_code(&self) -> bool {\n         matches!(self, Self::SourceCode {..})\n     }\n+    fn is_test(&self) -> bool {\n+        matches!(self, Self::Test)\n+    }\n }\n \n #[derive(Debug)]\n@@ -313,14 +332,18 @@ impl HirDisplay for ApplicationTy {\n                     let ret_display = if f.omit_verbose_types() {\n                         ret.display_truncated(f.db, f.max_size)\n                     } else {\n-                        ret.display(f.db)\n+                        if f.display_target.is_test() {\n+                            ret.display_test(f.db)\n+                        } else {\n+                            ret.display(f.db)\n+                        }\n                     };\n                     write!(f, \" -> {}\", ret_display)?;\n                 }\n             }\n             TypeCtor::Adt(def_id) => {\n                 match f.display_target {\n-                    DisplayTarget::Diagnostics => {\n+                    DisplayTarget::Diagnostics | DisplayTarget::Test => {\n                         let name = match def_id {\n                             AdtId::StructId(it) => f.db.struct_data(it).name.clone(),\n                             AdtId::UnionId(it) => f.db.union_data(it).name.clone(),\n@@ -389,12 +412,23 @@ impl HirDisplay for ApplicationTy {\n                     _ => panic!(\"not an associated type\"),\n                 };\n                 let trait_ = f.db.trait_data(trait_);\n-                let type_alias = f.db.type_alias_data(type_alias);\n-                write!(f, \"{}::{}\", trait_.name, type_alias.name)?;\n-                if self.parameters.len() > 0 {\n-                    write!(f, \"<\")?;\n-                    f.write_joined(&*self.parameters.0, \", \")?;\n-                    write!(f, \">\")?;\n+                let type_alias_data = f.db.type_alias_data(type_alias);\n+\n+                // Use placeholder associated types when the target is test (https://rust-lang.github.io/chalk/book/clauses/type_equality.html#placeholder-associated-types)\n+                if f.display_target.is_test() {\n+                    write!(f, \"{}::{}\", trait_.name, type_alias_data.name)?;\n+                    if self.parameters.len() > 0 {\n+                        write!(f, \"<\")?;\n+                        f.write_joined(&*self.parameters.0, \", \")?;\n+                        write!(f, \">\")?;\n+                    }\n+                } else {\n+                    let projection_ty = ProjectionTy {\n+                        associated_ty: type_alias,\n+                        parameters: self.parameters.clone(),\n+                    };\n+\n+                    projection_ty.hir_fmt(f)?;\n                 }\n             }\n             TypeCtor::ForeignType(type_alias) => {\n@@ -442,7 +476,11 @@ impl HirDisplay for ApplicationTy {\n                     let ret_display = if f.omit_verbose_types() {\n                         sig.ret().display_truncated(f.db, f.max_size)\n                     } else {\n-                        sig.ret().display(f.db)\n+                        if f.display_target.is_test() {\n+                            sig.ret().display_test(f.db)\n+                        } else {\n+                            sig.ret().display(f.db)\n+                        }\n                     };\n                     write!(f, \" -> {}\", ret_display)?;\n                 } else {"}, {"sha": "104ef334c6897deb729185e81dd3e85f18963d0b", "filename": "crates/hir_ty/src/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e34183218ceb840c3b20a707ed79e57bdf9f90b7/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e34183218ceb840c3b20a707ed79e57bdf9f90b7/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests.rs?ref=e34183218ceb840c3b20a707ed79e57bdf9f90b7", "patch": "@@ -74,7 +74,7 @@ fn check_types_impl(ra_fixture: &str, display_source: bool) {\n                 let module = db.module_for_file(file_id);\n                 ty.display_source_code(&db, module).unwrap()\n             } else {\n-                ty.display(&db).to_string()\n+                ty.display_test(&db).to_string()\n             };\n             assert_eq!(expected, actual);\n             checked_one = true;\n@@ -163,7 +163,7 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n                 macro_prefix,\n                 range,\n                 ellipsize(text, 15),\n-                ty.display(&db)\n+                ty.display_test(&db)\n             );\n         }\n         if include_mismatches {\n@@ -179,8 +179,8 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n                     \"{}{:?}: expected {}, got {}\\n\",\n                     macro_prefix,\n                     range,\n-                    mismatch.expected.display(&db),\n-                    mismatch.actual.display(&db),\n+                    mismatch.expected.display_test(&db),\n+                    mismatch.actual.display_test(&db),\n                 );\n             }\n         }"}, {"sha": "adb93efd7e1b1140195ae3c4c2b1d978b1cefe2c", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e34183218ceb840c3b20a707ed79e57bdf9f90b7/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e34183218ceb840c3b20a707ed79e57bdf9f90b7/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=e34183218ceb840c3b20a707ed79e57bdf9f90b7", "patch": "@@ -1235,4 +1235,25 @@ fn main() {\n \"#,\n         );\n     }\n+\n+    #[test]\n+    fn infer_call_method_return_associated_types_with_generic() {\n+        check(\n+            r#\"\n+            pub trait Default {\n+                fn default() -> Self;\n+            }\n+            pub trait Foo {\n+                type Bar: Default;\n+            }\n+\n+            pub fn quux<T: Foo>() -> T::Bar {\n+                let y = Default::default();\n+                  //^ <T as Foo>::Bar\n+\n+                y\n+            }\n+            \"#,\n+        );\n+    }\n }"}]}