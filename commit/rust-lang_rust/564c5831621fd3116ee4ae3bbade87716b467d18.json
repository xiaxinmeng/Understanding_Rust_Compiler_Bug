{"sha": "564c5831621fd3116ee4ae3bbade87716b467d18", "node_id": "C_kwDOAAsO6NoAKDU2NGM1ODMxNjIxZmQzMTE2ZWU0YWUzYmJhZGU4NzcxNmI0NjdkMTg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-29T15:11:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-29T15:11:54Z"}, "message": "Rollup merge of #95422 - TaKO8Ki:use-format-args-capture-and-remove-unnecessary-nesting-in-rustc-typeck, r=petrochenkov\n\nRefactor: Use `format-args-capture` and remove an unnecessary nested block", "tree": {"sha": "9dd68b43beef1d79085a55178ab121f69d19a898", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dd68b43beef1d79085a55178ab121f69d19a898"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/564c5831621fd3116ee4ae3bbade87716b467d18", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiQyG6CRBK7hj4Ov3rIwAA2PMIAGFvodEQ582MjYrg0Pn/RL0J\nak6qv35M3uD+F9/viLUo4iYOrZ0j7/VCuARNk20MtAolNu0K655Gy1XXbhn8syZq\n5r60BlRsaiK4OSoF1X4kD5NQT9r/Xi+2bwMpc8ogMWDdzJir+BOoPDI7LLnh0jzn\nOIsBYE5d3AqTasjmH0/0GpXtNRIgqg3vyWtJFjZDDLy+iBOcKlHrWruV7O8gHzJa\nhwYmrPwxBCtanzBl5Ar0rAZnSs8di8gEtHg6qZMolDmL0cLQufaQtkzV4pNXny67\neNybYJylU3ojXNLkzwiiYfgXNykQxOlNhqP1iA/eEyTMLUKdVTexIPXmzWMGBlc=\n=ZnfB\n-----END PGP SIGNATURE-----\n", "payload": "tree 9dd68b43beef1d79085a55178ab121f69d19a898\nparent eceb173de9ee0cad205a139249a4d043fe251e0e\nparent f2506c911b9656c20a33a908fd14b5617b486096\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648566714 +0200\ncommitter GitHub <noreply@github.com> 1648566714 +0200\n\nRollup merge of #95422 - TaKO8Ki:use-format-args-capture-and-remove-unnecessary-nesting-in-rustc-typeck, r=petrochenkov\n\nRefactor: Use `format-args-capture` and remove an unnecessary nested block\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/564c5831621fd3116ee4ae3bbade87716b467d18", "html_url": "https://github.com/rust-lang/rust/commit/564c5831621fd3116ee4ae3bbade87716b467d18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/564c5831621fd3116ee4ae3bbade87716b467d18/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eceb173de9ee0cad205a139249a4d043fe251e0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/eceb173de9ee0cad205a139249a4d043fe251e0e", "html_url": "https://github.com/rust-lang/rust/commit/eceb173de9ee0cad205a139249a4d043fe251e0e"}, {"sha": "f2506c911b9656c20a33a908fd14b5617b486096", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2506c911b9656c20a33a908fd14b5617b486096", "html_url": "https://github.com/rust-lang/rust/commit/f2506c911b9656c20a33a908fd14b5617b486096"}], "stats": {"total": 60, "additions": 28, "deletions": 32}, "files": [{"sha": "9b37985ce49329026dde73a4a15ced77df9d31d3", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 28, "deletions": 32, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/564c5831621fd3116ee4ae3bbade87716b467d18/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/564c5831621fd3116ee4ae3bbade87716b467d18/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=564c5831621fd3116ee4ae3bbade87716b467d18", "patch": "@@ -299,52 +299,52 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     IsAssign::No => {\n                         let (message, missing_trait, use_output) = match op.node {\n                             hir::BinOpKind::Add => (\n-                                format!(\"cannot add `{}` to `{}`\", rhs_ty, lhs_ty),\n+                                format!(\"cannot add `{rhs_ty}` to `{lhs_ty}`\"),\n                                 Some(\"std::ops::Add\"),\n                                 true,\n                             ),\n                             hir::BinOpKind::Sub => (\n-                                format!(\"cannot subtract `{}` from `{}`\", rhs_ty, lhs_ty),\n+                                format!(\"cannot subtract `{rhs_ty}` from `{lhs_ty}`\"),\n                                 Some(\"std::ops::Sub\"),\n                                 true,\n                             ),\n                             hir::BinOpKind::Mul => (\n-                                format!(\"cannot multiply `{}` by `{}`\", lhs_ty, rhs_ty),\n+                                format!(\"cannot multiply `{lhs_ty}` by `{rhs_ty}`\"),\n                                 Some(\"std::ops::Mul\"),\n                                 true,\n                             ),\n                             hir::BinOpKind::Div => (\n-                                format!(\"cannot divide `{}` by `{}`\", lhs_ty, rhs_ty),\n+                                format!(\"cannot divide `{lhs_ty}` by `{rhs_ty}`\"),\n                                 Some(\"std::ops::Div\"),\n                                 true,\n                             ),\n                             hir::BinOpKind::Rem => (\n-                                format!(\"cannot mod `{}` by `{}`\", lhs_ty, rhs_ty),\n+                                format!(\"cannot mod `{lhs_ty}` by `{rhs_ty}`\"),\n                                 Some(\"std::ops::Rem\"),\n                                 true,\n                             ),\n                             hir::BinOpKind::BitAnd => (\n-                                format!(\"no implementation for `{} & {}`\", lhs_ty, rhs_ty),\n+                                format!(\"no implementation for `{lhs_ty} & {rhs_ty}`\"),\n                                 Some(\"std::ops::BitAnd\"),\n                                 true,\n                             ),\n                             hir::BinOpKind::BitXor => (\n-                                format!(\"no implementation for `{} ^ {}`\", lhs_ty, rhs_ty),\n+                                format!(\"no implementation for `{lhs_ty} ^ {rhs_ty}`\"),\n                                 Some(\"std::ops::BitXor\"),\n                                 true,\n                             ),\n                             hir::BinOpKind::BitOr => (\n-                                format!(\"no implementation for `{} | {}`\", lhs_ty, rhs_ty),\n+                                format!(\"no implementation for `{lhs_ty} | {rhs_ty}`\"),\n                                 Some(\"std::ops::BitOr\"),\n                                 true,\n                             ),\n                             hir::BinOpKind::Shl => (\n-                                format!(\"no implementation for `{} << {}`\", lhs_ty, rhs_ty),\n+                                format!(\"no implementation for `{lhs_ty} << {rhs_ty}`\"),\n                                 Some(\"std::ops::Shl\"),\n                                 true,\n                             ),\n                             hir::BinOpKind::Shr => (\n-                                format!(\"no implementation for `{} >> {}`\", lhs_ty, rhs_ty),\n+                                format!(\"no implementation for `{lhs_ty} >> {rhs_ty}`\"),\n                                 Some(\"std::ops::Shr\"),\n                                 true,\n                             ),\n@@ -477,8 +477,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 // When we know that a missing bound is responsible, we don't show\n                                 // this note as it is redundant.\n                                 err.note(&format!(\n-                                    \"the trait `{}` is not implemented for `{}`\",\n-                                    missing_trait, lhs_ty\n+                                    \"the trait `{missing_trait}` is not implemented for `{lhs_ty}`\"\n                                 ));\n                             }\n                         } else {\n@@ -679,19 +678,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     };\n                     let mut visitor = TypeParamVisitor(vec![]);\n                     visitor.visit_ty(operand_ty);\n-                    if let [ty] = &visitor.0[..] {\n-                        if let ty::Param(p) = *operand_ty.kind() {\n-                            suggest_constraining_param(\n-                                self.tcx,\n-                                self.body_id,\n-                                &mut err,\n-                                *ty,\n-                                operand_ty,\n-                                missing_trait,\n-                                p,\n-                                true,\n-                            );\n-                        }\n+                    if let [ty] = &visitor.0[..] && let ty::Param(p) = *operand_ty.kind() {\n+                        suggest_constraining_param(\n+                            self.tcx,\n+                            self.body_id,\n+                            &mut err,\n+                            *ty,\n+                            operand_ty,\n+                            missing_trait,\n+                            p,\n+                            true,\n+                        );\n                     }\n \n                     let sp = self.tcx.sess.source_map().start_point(ex.span);\n@@ -722,10 +719,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     err.span_suggestion(\n                                         ex.span,\n                                         &format!(\n-                                            \"you may have meant the maximum value of `{}`\",\n-                                            actual\n+                                            \"you may have meant the maximum value of `{actual}`\",\n                                         ),\n-                                        format!(\"{}::MAX\", actual),\n+                                        format!(\"{actual}::MAX\"),\n                                         Applicability::MaybeIncorrect,\n                                     );\n                                 }\n@@ -988,7 +984,7 @@ fn suggest_constraining_param(\n     set_output: bool,\n ) {\n     let hir = tcx.hir();\n-    let msg = &format!(\"`{}` might need a bound for `{}`\", lhs_ty, missing_trait);\n+    let msg = &format!(\"`{lhs_ty}` might need a bound for `{missing_trait}`\");\n     // Try to find the def-id and details for the parameter p. We have only the index,\n     // so we have to find the enclosing function's def-id, then look through its declared\n     // generic parameters to get the declaration.\n@@ -1002,13 +998,13 @@ fn suggest_constraining_param(\n         .as_ref()\n         .and_then(|node| node.generics())\n     {\n-        let output = if set_output { format!(\"<Output = {}>\", rhs_ty) } else { String::new() };\n+        let output = if set_output { format!(\"<Output = {rhs_ty}>\") } else { String::new() };\n         suggest_constraining_type_param(\n             tcx,\n             generics,\n             &mut err,\n-            &format!(\"{}\", lhs_ty),\n-            &format!(\"{}{}\", missing_trait, output),\n+            &lhs_ty.to_string(),\n+            &format!(\"{missing_trait}{output}\"),\n             None,\n         );\n     } else {"}]}