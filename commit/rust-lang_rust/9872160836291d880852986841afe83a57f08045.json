{"sha": "9872160836291d880852986841afe83a57f08045", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NzIxNjA4MzYyOTFkODgwODUyOTg2ODQxYWZlODNhNTdmMDgwNDU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-03-27T19:16:37Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-05-22T08:54:05Z"}, "message": "Allow let bindings in const fn and constants", "tree": {"sha": "8dcda1ef8b6ca6c7a00c0fe1dd49d9baed8ac26d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dcda1ef8b6ca6c7a00c0fe1dd49d9baed8ac26d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9872160836291d880852986841afe83a57f08045", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJgBAABCgBKFiEEvpMjxK4/cnPNfesJHVy0/Fl8MAQFAlsD2q0sHGdpdC1uby1y\nZXBseS05ODc5MTY1NzE2NDc5NDEzMTMxQG9saS1vYmsuZGUACgkQHVy0/Fl8MASD\nCA/+LnNFVQWtfgiJV5IJeTf8C16kv/Suk/EkiO7FHOLXGbHRV8B4E1E5xgSEcrlj\noXXDR2+G33NrP2YI241pRlc1c8jMzOMW2m9LyyEDOcrLsUpZFHvWbT/cDobvo1+z\nT8AS/n4qYb4m3tbFrwGzU2HagyXd9XTx8wGV6mhf5LTgNdaSEOT2yYtYtD4qvsfJ\n9nAgDvFR0yrgs70svYZPpM9Nn735932vEEhjZNg8ozOcLBZyQsaxFDnpouOshl4B\nUTSWMsp01By6LFJB1Km59ShPdxjNhikccfvPF2IEu5XVPo92BrrQI0g5G+rxnrIN\n0LshpTPQQtNv0Sun1ISOFrkkUOllCDqDoq7KaLpzqO3DrBTKRtT89Vciu8I9YKRV\nYy927idCVyJnYv0nas3RrOn4NxcJV8T49ZHrHaSSCExhBsvGH9+oGAFcBRZ8sjVT\nn4BTT5YDU1m95Yb2m67GfkgT77uRW2eZeBgksCYjQ0BoszBhlCsCgn16JJLp0H0C\noBmt6cek7O9UCy1wJFxBLqBfgGWlsfij8dXNpnXNjGKz2ZNCkbozbzSTW9xhAl2u\nsnLiazDBGAVeR+6+e1fiOr6TMvhiPlNsoy4q6m4hG/4vfte2VToQqcHx6fuq+JFB\nKPiIE4shcK4vX7iKKaZcNlLFPbeptTKf2+BNLc4Hsh2K7sY=\n=WChI\n-----END PGP SIGNATURE-----", "payload": "tree 8dcda1ef8b6ca6c7a00c0fe1dd49d9baed8ac26d\nparent 6835748725b9bd892d5b64d20ded4ced973ed3b7\nauthor Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1522178197 +0200\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1526979245 +0200\n\nAllow let bindings in const fn and constants\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9872160836291d880852986841afe83a57f08045", "html_url": "https://github.com/rust-lang/rust/commit/9872160836291d880852986841afe83a57f08045", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9872160836291d880852986841afe83a57f08045/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6835748725b9bd892d5b64d20ded4ced973ed3b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6835748725b9bd892d5b64d20ded4ced973ed3b7", "html_url": "https://github.com/rust-lang/rust/commit/6835748725b9bd892d5b64d20ded4ced973ed3b7"}], "stats": {"total": 211, "additions": 193, "deletions": 18}, "files": [{"sha": "e79f3ac9d112bd2a2fb0111e51e72c61eea68276", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 43, "deletions": 18, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/9872160836291d880852986841afe83a57f08045/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9872160836291d880852986841afe83a57f08045/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=9872160836291d880852986841afe83a57f08045", "patch": "@@ -32,7 +32,7 @@ use rustc::middle::lang_items;\n use rustc_target::spec::abi::Abi;\n use syntax::attr;\n use syntax::ast::LitKind;\n-use syntax::feature_gate::UnstableFeatures;\n+use syntax::feature_gate::{UnstableFeatures, emit_feature_err, GateIssue};\n use syntax_pos::{Span, DUMMY_SP};\n \n use std::fmt;\n@@ -120,8 +120,7 @@ struct Qualifier<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     rpo: ReversePostorder<'a, 'tcx>,\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    temp_qualif: IndexVec<Local, Option<Qualif>>,\n-    return_qualif: Option<Qualif>,\n+    local_qualif: IndexVec<Local, Option<Qualif>>,\n     qualif: Qualif,\n     const_fn_arg_vars: BitVector,\n     temp_promotion_state: IndexVec<Local, TempState>,\n@@ -140,11 +139,11 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n \n         let param_env = tcx.param_env(def_id);\n \n-        let mut temp_qualif = IndexVec::from_elem(None, &mir.local_decls);\n+        let mut local_qualif = IndexVec::from_elem(None, &mir.local_decls);\n         for arg in mir.args_iter() {\n             let mut qualif = Qualif::NEEDS_DROP;\n             qualif.restrict(mir.local_decls[arg].ty, tcx, param_env);\n-            temp_qualif[arg] = Some(qualif);\n+            local_qualif[arg] = Some(qualif);\n         }\n \n         Qualifier {\n@@ -155,8 +154,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n             rpo,\n             tcx,\n             param_env,\n-            temp_qualif,\n-            return_qualif: None,\n+            local_qualif,\n             qualif: Qualif::empty(),\n             const_fn_arg_vars: BitVector::new(mir.local_decls.len()),\n             temp_promotion_state: temps,\n@@ -191,6 +189,11 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n     fn statement_like(&mut self) {\n         self.add(Qualif::NOT_CONST);\n         if self.mode != Mode::Fn {\n+            if self.span.allows_unstable() {\n+                emit_feature_err(&self.tcx.sess.parse_sess, \"const_let\",\n+                                self.span, GateIssue::Language,\n+                                \"statements in const fn are unstable\");\n+            }\n             let mut err = struct_span_err!(\n                 self.tcx.sess,\n                 self.span,\n@@ -266,6 +269,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n \n     /// Assign the current qualification to the given destination.\n     fn assign(&mut self, dest: &Place<'tcx>, location: Location) {\n+        trace!(\"assign: {:?}\", dest);\n         let qualif = self.qualif;\n         let span = self.span;\n         let store = |slot: &mut Option<Qualif>| {\n@@ -281,28 +285,34 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n                 if self.mir.local_kind(index) == LocalKind::Temp\n                 && self.temp_promotion_state[index].is_promotable() {\n                     debug!(\"store to promotable temp {:?}\", index);\n-                    store(&mut self.temp_qualif[index]);\n+                    store(&mut self.local_qualif[index]);\n                 }\n             }\n             return;\n         }\n \n         match *dest {\n+            Place::Local(index) if (self.mir.local_kind(index) == LocalKind::Var ||\n+                                   self.mir.local_kind(index) == LocalKind::Arg) &&\n+                                   self.tcx.sess.features_untracked().const_let => {\n+                debug!(\"store to var {:?}\", index);\n+                self.local_qualif[index] = Some(self.qualif);\n+            }\n             Place::Local(index) if self.mir.local_kind(index) == LocalKind::Temp => {\n                 debug!(\"store to temp {:?}\", index);\n-                store(&mut self.temp_qualif[index])\n+                store(&mut self.local_qualif[index])\n             }\n             Place::Local(index) if self.mir.local_kind(index) == LocalKind::ReturnPointer => {\n                 debug!(\"store to return place {:?}\", index);\n-                store(&mut self.return_qualif)\n+                store(&mut self.local_qualif[RETURN_PLACE])\n             }\n \n             Place::Projection(box Projection {\n                 base: Place::Local(index),\n                 elem: ProjectionElem::Deref\n             }) if self.mir.local_kind(index) == LocalKind::Temp\n                && self.mir.local_decls[index].ty.is_box()\n-               && self.temp_qualif[index].map_or(false, |qualif| {\n+               && self.local_qualif[index].map_or(false, |qualif| {\n                     qualif.intersects(Qualif::NOT_CONST)\n                }) => {\n                 // Part of `box expr`, we should've errored\n@@ -355,10 +365,13 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n                 TerminatorKind::FalseUnwind { .. } => None,\n \n                 TerminatorKind::Return => {\n+                    if self.tcx.sess.features_untracked().const_let {\n+                        break;\n+                    }\n                     // Check for unused values. This usually means\n                     // there are extra statements in the AST.\n                     for temp in mir.temps_iter() {\n-                        if self.temp_qualif[temp].is_none() {\n+                        if self.local_qualif[temp].is_none() {\n                             continue;\n                         }\n \n@@ -408,7 +421,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n             }\n         }\n \n-        self.qualif = self.return_qualif.unwrap_or(Qualif::NOT_CONST);\n+        self.qualif = self.local_qualif[RETURN_PLACE].unwrap_or(Qualif::NOT_CONST);\n \n         // Account for errors in consts by using the\n         // conservative type qualification instead.\n@@ -453,9 +466,15 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             LocalKind::ReturnPointer => {\n                 self.not_const();\n             }\n-            LocalKind::Var => {\n+            LocalKind::Var if !self.tcx.sess.features_untracked().const_let => {\n+                if self.mode != Mode::Fn && self.span.allows_unstable() {\n+                    emit_feature_err(&self.tcx.sess.parse_sess, \"const_let\",\n+                                    self.span, GateIssue::Language,\n+                                    \"let bindings in const fn are unstable\");\n+                }\n                 self.add(Qualif::NOT_CONST);\n             }\n+            LocalKind::Var |\n             LocalKind::Arg |\n             LocalKind::Temp => {\n                 if let LocalKind::Arg = kind {\n@@ -466,7 +485,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     self.add(Qualif::NOT_PROMOTABLE);\n                 }\n \n-                if let Some(qualif) = self.temp_qualif[local] {\n+                if let Some(qualif) = self.local_qualif[local] {\n                     self.add(qualif);\n                 } else {\n                     self.not_const();\n@@ -588,7 +607,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n \n                 // Mark the consumed locals to indicate later drops are noops.\n                 if let Operand::Move(Place::Local(local)) = *operand {\n-                    self.temp_qualif[local] = self.temp_qualif[local].map(|q|\n+                    self.local_qualif[local] = self.local_qualif[local].map(|q|\n                         q - Qualif::NEEDS_DROP\n                     );\n                 }\n@@ -1033,7 +1052,7 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n                 // HACK(eddyb) Emulate a bit of dataflow analysis,\n                 // conservatively, that drop elaboration will do.\n                 let needs_drop = if let Place::Local(local) = *place {\n-                    if self.temp_qualif[local].map_or(true, |q| q.intersects(Qualif::NEEDS_DROP)) {\n+                    if self.local_qualif[local].map_or(true, |q| q.intersects(Qualif::NEEDS_DROP)) {\n                         Some(self.mir.local_decls[local].source_info.span)\n                     } else {\n                         None\n@@ -1070,7 +1089,8 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n         // Check the allowed const fn argument forms.\n         if let (Mode::ConstFn, &Place::Local(index)) = (self.mode, dest) {\n             if self.mir.local_kind(index) == LocalKind::Var &&\n-               self.const_fn_arg_vars.insert(index.index()) {\n+               self.const_fn_arg_vars.insert(index.index()) &&\n+               !self.tcx.sess.features_untracked().const_let {\n \n                 // Direct use of an argument is permitted.\n                 match *rvalue {\n@@ -1086,6 +1106,11 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n                 // Avoid a generic error for other uses of arguments.\n                 if self.qualif.intersects(Qualif::FN_ARGUMENT) {\n                     let decl = &self.mir.local_decls[index];\n+                    if decl.source_info.span.allows_unstable() {\n+                        emit_feature_err(&self.tcx.sess.parse_sess, \"const_let\",\n+                                        decl.source_info.span, GateIssue::Language,\n+                                        \"locals and patterns in const fn are unstable\");\n+                    }\n                     let mut err = struct_span_err!(\n                         self.tcx.sess,\n                         decl.source_info.span,"}, {"sha": "3a02646d0af5f133e005761ca1f821739d3d559e", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9872160836291d880852986841afe83a57f08045/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9872160836291d880852986841afe83a57f08045/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=9872160836291d880852986841afe83a57f08045", "patch": "@@ -214,6 +214,9 @@ declare_features! (\n     // Allows the definition of `const fn` functions.\n     (active, const_fn, \"1.2.0\", Some(24111), None),\n \n+    // Allows let bindings and destructuring in `const fn` functions and constants.\n+    (active, const_let, \"1.22.1\", Some(48821), None),\n+\n     // Allows using #[prelude_import] on glob `use` items.\n     //\n     // rustc internal"}, {"sha": "e233107169c75828609e147536766195843c158b", "filename": "src/test/run-pass/ctfe/const-block-non-item-statement-3.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9872160836291d880852986841afe83a57f08045/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9872160836291d880852986841afe83a57f08045/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement-3.rs?ref=9872160836291d880852986841afe83a57f08045", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_let)]\n+\n+type Array = [u32; {  let x = 2; 5 }];\n+\n+pub fn main() {}"}, {"sha": "b5a9bfb45a1b41f72edcef3d2369f858c0c16062", "filename": "src/test/run-pass/ctfe/const-block-non-item-statement.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9872160836291d880852986841afe83a57f08045/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9872160836291d880852986841afe83a57f08045/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement.rs?ref=9872160836291d880852986841afe83a57f08045", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_let)]\n+\n+enum Foo {\n+    Bar = { let x = 1; 3 }\n+}\n+\n+pub fn main() {}"}, {"sha": "a73a15b176277198adea7fd6e14dec69fd0304b6", "filename": "src/test/run-pass/ctfe/const-fn-destructuring-arg.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9872160836291d880852986841afe83a57f08045/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-fn-destructuring-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9872160836291d880852986841afe83a57f08045/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-fn-destructuring-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-fn-destructuring-arg.rs?ref=9872160836291d880852986841afe83a57f08045", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// test that certain things are disallowed in const fn signatures\n+\n+#![feature(const_fn, const_let)]\n+\n+// no destructuring\n+const fn i((\n+            a,\n+            b\n+           ): (u32, u32)) -> u32 {\n+    a + b\n+}\n+\n+fn main() {}"}, {"sha": "27796a5feea289d40317667b1d8481fc16d401db", "filename": "src/test/run-pass/ctfe/issue-37550.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9872160836291d880852986841afe83a57f08045/src%2Ftest%2Frun-pass%2Fctfe%2Fissue-37550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9872160836291d880852986841afe83a57f08045/src%2Ftest%2Frun-pass%2Fctfe%2Fissue-37550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fissue-37550.rs?ref=9872160836291d880852986841afe83a57f08045", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_fn, const_let)]\n+\n+const fn x() {\n+    let t = true;\n+    let x = || t;\n+}\n+\n+fn main() {}"}, {"sha": "8c153315c25aab50cc537621985d62db87ea66d7", "filename": "src/test/run-pass/ctfe/locals-in-const-fn.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/9872160836291d880852986841afe83a57f08045/src%2Ftest%2Frun-pass%2Fctfe%2Flocals-in-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9872160836291d880852986841afe83a57f08045/src%2Ftest%2Frun-pass%2Fctfe%2Flocals-in-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Flocals-in-const-fn.rs?ref=9872160836291d880852986841afe83a57f08045", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// https://github.com/rust-lang/rust/issues/48821\n+\n+#![feature(const_fn, const_let)]\n+\n+const fn foo(i: usize) -> usize {\n+    let x = i;\n+    x\n+}\n+\n+static FOO: usize = foo(42);\n+\n+const fn bar(mut i: usize) -> usize {\n+    i += 8;\n+    let x = &i;\n+    *x\n+}\n+\n+static BAR: usize = bar(42);\n+\n+const fn boo(mut i: usize) -> usize {\n+    {\n+        let mut x = i;\n+        x += 10;\n+        i = x;\n+    }\n+    i\n+}\n+\n+static BOO: usize = boo(42);\n+\n+fn main() {\n+    assert!(FOO == 42);\n+    assert!(BAR == 50);\n+    assert!(BOO == 52);\n+}"}, {"sha": "04d2fd5ccd189d1329f12edad92203a81f04dbfd", "filename": "src/test/ui/feature-gate-const_let.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9872160836291d880852986841afe83a57f08045/src%2Ftest%2Fui%2Ffeature-gate-const_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9872160836291d880852986841afe83a57f08045/src%2Ftest%2Fui%2Ffeature-gate-const_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-const_let.rs?ref=9872160836291d880852986841afe83a57f08045", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test use of const let without feature gate.\n+\n+#![feature(const_fn)]\n+\n+const fn foo() -> usize {\n+    let x = 42; //~ ERROR blocks in constant functions are limited to items and tail expressions\n+    42\n+}\n+\n+fn main() {}"}, {"sha": "a07281ded8db6efc46822ac545f9c4dcc75c8ddc", "filename": "src/test/ui/feature-gate-const_let.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9872160836291d880852986841afe83a57f08045/src%2Ftest%2Fui%2Ffeature-gate-const_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9872160836291d880852986841afe83a57f08045/src%2Ftest%2Fui%2Ffeature-gate-const_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-const_let.stderr?ref=9872160836291d880852986841afe83a57f08045", "patch": "@@ -0,0 +1,9 @@\n+error[E0016]: blocks in constant functions are limited to items and tail expressions\n+  --> $DIR/feature-gate-const_let.rs:16:13\n+   |\n+LL |     let x = 42; //~ ERROR blocks in constant functions are limited to items and tail expressions\n+   |             ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0016`."}]}