{"sha": "ee567fe1b1188077743263bebfefc3d2b7cdbcd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlNTY3ZmUxYjExODgwNzc3NDMyNjNiZWJmZWZjM2QyYjdjZGJjZDI=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-11T08:38:54Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-30T17:54:21Z"}, "message": "Remove StableVec.", "tree": {"sha": "03c3f9e6c0bf0d0f1abb769af2b31aee3266224c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03c3f9e6c0bf0d0f1abb769af2b31aee3266224c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee567fe1b1188077743263bebfefc3d2b7cdbcd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee567fe1b1188077743263bebfefc3d2b7cdbcd2", "html_url": "https://github.com/rust-lang/rust/commit/ee567fe1b1188077743263bebfefc3d2b7cdbcd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee567fe1b1188077743263bebfefc3d2b7cdbcd2/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10fb4b2fe538df29ee9729f060db0ca74f6c28fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/10fb4b2fe538df29ee9729f060db0ca74f6c28fb", "html_url": "https://github.com/rust-lang/rust/commit/10fb4b2fe538df29ee9729f060db0ca74f6c28fb"}], "stats": {"total": 50, "additions": 9, "deletions": 41}, "files": [{"sha": "a9950b82928bcd37ca04f364020b03ed3306fda0", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee567fe1b1188077743263bebfefc3d2b7cdbcd2/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee567fe1b1188077743263bebfefc3d2b7cdbcd2/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=ee567fe1b1188077743263bebfefc3d2b7cdbcd2", "patch": "@@ -44,7 +44,6 @@ use rustc_ast::{self as ast, *};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_data_structures::stable_hasher::StableVec;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n@@ -506,7 +505,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         for (k, v) in self.resolver.trait_map().into_iter() {\n             if let Some(Some(hir_id)) = self.node_id_to_hir_id.get(k) {\n                 let map = trait_map.entry(hir_id.owner).or_default();\n-                map.insert(hir_id.local_id, StableVec::new(v.to_vec()));\n+                map.insert(hir_id.local_id, v.into_boxed_slice());\n             }\n         }\n "}, {"sha": "18b352cf3b0b9152f42eb6c43dfd536c92f4e1dd", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ee567fe1b1188077743263bebfefc3d2b7cdbcd2/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee567fe1b1188077743263bebfefc3d2b7cdbcd2/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=ee567fe1b1188077743263bebfefc3d2b7cdbcd2", "patch": "@@ -550,35 +550,3 @@ pub fn hash_stable_hashmap<HCX, K, V, R, SK, F>(\n     entries.sort_unstable_by(|&(ref sk1, _), &(ref sk2, _)| sk1.cmp(sk2));\n     entries.hash_stable(hcx, hasher);\n }\n-\n-/// A vector container that makes sure that its items are hashed in a stable\n-/// order.\n-#[derive(Debug)]\n-pub struct StableVec<T>(Vec<T>);\n-\n-impl<T> StableVec<T> {\n-    pub fn new(v: Vec<T>) -> Self {\n-        StableVec(v)\n-    }\n-}\n-\n-impl<T> ::std::ops::Deref for StableVec<T> {\n-    type Target = Vec<T>;\n-\n-    fn deref(&self) -> &Vec<T> {\n-        &self.0\n-    }\n-}\n-\n-impl<T, HCX> HashStable<HCX> for StableVec<T>\n-where\n-    T: HashStable<HCX> + ToStableHashKey<HCX>,\n-{\n-    fn hash_stable(&self, hcx: &mut HCX, hasher: &mut StableHasher) {\n-        let StableVec(ref v) = *self;\n-\n-        let mut sorted: Vec<_> = v.iter().map(|x| x.to_stable_hash_key(hcx)).collect();\n-        sorted.sort_unstable();\n-        sorted.hash_stable(hcx, hasher);\n-    }\n-}"}, {"sha": "54559281d0aee990515dc1a51330ea379c9da768", "filename": "compiler/rustc_hir/src/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee567fe1b1188077743263bebfefc3d2b7cdbcd2/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee567fe1b1188077743263bebfefc3d2b7cdbcd2/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Farena.rs?ref=ee567fe1b1188077743263bebfefc3d2b7cdbcd2", "patch": "@@ -43,6 +43,7 @@ macro_rules! arena_types {\n             [] stmt: rustc_hir::Stmt<$tcx>,\n             [] field_def: rustc_hir::FieldDef<$tcx>,\n             [] trait_item_ref: rustc_hir::TraitItemRef,\n+            [] trait_candidate: rustc_hir::TraitCandidate,\n             [] ty: rustc_hir::Ty<$tcx>,\n             [] type_binding: rustc_hir::TypeBinding<$tcx>,\n             [] variant: rustc_hir::Variant<$tcx>,"}, {"sha": "e9055c9541086af692da936dbe70a89bfe3ce79d", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee567fe1b1188077743263bebfefc3d2b7cdbcd2/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee567fe1b1188077743263bebfefc3d2b7cdbcd2/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=ee567fe1b1188077743263bebfefc3d2b7cdbcd2", "patch": "@@ -11,7 +11,6 @@ pub use rustc_ast::{BorrowKind, ImplPolarity, IsAuto};\n pub use rustc_ast::{CaptureBy, Movability, Mutability};\n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::stable_hasher::StableVec;\n use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n use rustc_macros::HashStable_Generic;\n use rustc_span::source_map::Spanned;\n@@ -662,7 +661,7 @@ pub struct Crate<'hir> {\n \n     /// Map indicating what traits are in scope for places where this\n     /// is relevant; generated by resolve.\n-    pub trait_map: FxHashMap<LocalDefId, FxHashMap<ItemLocalId, StableVec<TraitCandidate>>>,\n+    pub trait_map: FxHashMap<LocalDefId, FxHashMap<ItemLocalId, Box<[TraitCandidate]>>>,\n \n     /// Collected attributes from HIR nodes.\n     pub attrs: BTreeMap<HirId, &'hir [Attribute]>,"}, {"sha": "d8a18b5a2d30dbb319892f602d28eac320cfc318", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee567fe1b1188077743263bebfefc3d2b7cdbcd2/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee567fe1b1188077743263bebfefc3d2b7cdbcd2/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=ee567fe1b1188077743263bebfefc3d2b7cdbcd2", "patch": "@@ -1133,7 +1133,7 @@ rustc_queries! {\n         desc { \"computing whether impls specialize one another\" }\n     }\n     query in_scope_traits_map(_: LocalDefId)\n-        -> Option<&'tcx FxHashMap<ItemLocalId, StableVec<TraitCandidate>>> {\n+        -> Option<&'tcx FxHashMap<ItemLocalId, Box<[TraitCandidate]>>> {\n         desc { \"traits in scope at a block\" }\n     }\n "}, {"sha": "f185a7f54e503605e06cdf5e8b9482732978bb85", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee567fe1b1188077743263bebfefc3d2b7cdbcd2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee567fe1b1188077743263bebfefc3d2b7cdbcd2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=ee567fe1b1188077743263bebfefc3d2b7cdbcd2", "patch": "@@ -30,7 +30,7 @@ use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::sharded::{IntoPointer, ShardedHashMap};\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher, StableVec};\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{self, Lock, Lrc, WorkerLocal};\n use rustc_errors::ErrorReported;\n@@ -2638,8 +2638,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         struct_lint_level(self.sess, lint, level, src, None, decorate);\n     }\n \n-    pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx StableVec<TraitCandidate>> {\n-        self.in_scope_traits_map(id.owner).and_then(|map| map.get(&id.local_id))\n+    pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {\n+        let map = self.in_scope_traits_map(id.owner)?;\n+        let candidates = map.get(&id.local_id)?;\n+        Some(&*candidates)\n     }\n \n     pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {"}, {"sha": "a5b540dcb70cd55438db56ecf94148789938fd50", "filename": "compiler/rustc_middle/src/ty/query/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee567fe1b1188077743263bebfefc3d2b7cdbcd2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee567fe1b1188077743263bebfefc3d2b7cdbcd2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs?ref=ee567fe1b1188077743263bebfefc3d2b7cdbcd2", "patch": "@@ -34,7 +34,6 @@ use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::util::AlwaysRequiresDrop;\n use crate::ty::{self, AdtSizedConstraint, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n-use rustc_data_structures::stable_hasher::StableVec;\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;"}]}