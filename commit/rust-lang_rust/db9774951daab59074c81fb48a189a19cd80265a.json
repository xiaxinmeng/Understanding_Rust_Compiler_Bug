{"sha": "db9774951daab59074c81fb48a189a19cd80265a", "node_id": "C_kwDOAAsO6NoAKGRiOTc3NDk1MWRhYWI1OTA3NGM4MWZiNDhhMTg5YTE5Y2Q4MDI2NWE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-30T16:50:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-30T16:50:09Z"}, "message": "Rollup merge of #107172 - cjgillot:no-nal, r=nagisa\n\nReimplement NormalizeArrayLen based on SsaLocals\n\nBased on https://github.com/rust-lang/rust/pull/106908\nFixes https://github.com/rust-lang/rust/issues/105929\n\nOnly the last commit \"Reimplement NormalizeArrayLen\" is relevant.", "tree": {"sha": "320e0300371825a636906150a3f069459447cc4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/320e0300371825a636906150a3f069459447cc4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db9774951daab59074c81fb48a189a19cd80265a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj1/VBCRBK7hj4Ov3rIwAAzHsIABY7kHLuCBc3BA+oCaU+tfC4\nnKo15FeuXzioW3IlNXZOh0w4GfPeAtokOio0H+UE/vi3Wo5JcHurfAhs8/3Y0oMS\nujASmeqc6fM3657LURqoO5r3YpbsY3jPO5iDVeS7B42mQCciTXKkW62tTWKnhLdT\nPrxOD6IQKzuwwU0XzZwRWZH7bJbd/1A1K+Fr/qZXpAbZnB4fo0URSc3BtoSuhXIG\nI+Mh1IP0AtrZTu6X/7OtM5EnWkLluthJsZVJ50PrRgaH9fPeLVOPxzJOPxO6R3e6\n5XiLWmUk4dCG8Z5t3yhp4OonbJnIBai9lOTP6OBp8tjaYn5vcEZrFsf+BjlPMh4=\n=YXHB\n-----END PGP SIGNATURE-----\n", "payload": "tree 320e0300371825a636906150a3f069459447cc4e\nparent 4ac1796267c3af95cb97d630639d8938237586f6\nparent b456307cb10584f8ac48492500f0a1bca15d1adb\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1675097409 +0100\ncommitter GitHub <noreply@github.com> 1675097409 +0100\n\nRollup merge of #107172 - cjgillot:no-nal, r=nagisa\n\nReimplement NormalizeArrayLen based on SsaLocals\n\nBased on https://github.com/rust-lang/rust/pull/106908\nFixes https://github.com/rust-lang/rust/issues/105929\n\nOnly the last commit \"Reimplement NormalizeArrayLen\" is relevant.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db9774951daab59074c81fb48a189a19cd80265a", "html_url": "https://github.com/rust-lang/rust/commit/db9774951daab59074c81fb48a189a19cd80265a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db9774951daab59074c81fb48a189a19cd80265a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ac1796267c3af95cb97d630639d8938237586f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ac1796267c3af95cb97d630639d8938237586f6", "html_url": "https://github.com/rust-lang/rust/commit/4ac1796267c3af95cb97d630639d8938237586f6"}, {"sha": "b456307cb10584f8ac48492500f0a1bca15d1adb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b456307cb10584f8ac48492500f0a1bca15d1adb", "html_url": "https://github.com/rust-lang/rust/commit/b456307cb10584f8ac48492500f0a1bca15d1adb"}], "stats": {"total": 627, "additions": 191, "deletions": 436}, "files": [{"sha": "cbebca15483de9da56b1b1f9b55a21c3b173dcb6", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9774951daab59074c81fb48a189a19cd80265a/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9774951daab59074c81fb48a189a19cd80265a/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=db9774951daab59074c81fb48a189a19cd80265a", "patch": "@@ -548,13 +548,13 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         &[\n             &reveal_all::RevealAll, // has to be done before inlining, since inlined code is in RevealAll mode.\n             &lower_slice_len::LowerSliceLenCalls, // has to be done before inlining, otherwise actual call will be almost always inlined. Also simple, so can just do first\n-            &normalize_array_len::NormalizeArrayLen, // has to run after `slice::len` lowering\n             &unreachable_prop::UnreachablePropagation,\n             &uninhabited_enum_branching::UninhabitedEnumBranching,\n             &o1(simplify::SimplifyCfg::new(\"after-uninhabited-enum-branching\")),\n             &inline::Inline,\n             &remove_storage_markers::RemoveStorageMarkers,\n             &remove_zsts::RemoveZsts,\n+            &normalize_array_len::NormalizeArrayLen, // has to run after `slice::len` lowering\n             &const_goto::ConstGoto,\n             &remove_unneeded_drops::RemoveUnneededDrops,\n             &sroa::ScalarReplacementOfAggregates,"}, {"sha": "b36c8a0bd5369b45fbb2864b5302957c576c4d7c", "filename": "compiler/rustc_mir_transform/src/normalize_array_len.rs", "status": "modified", "additions": 69, "deletions": 253, "changes": 322, "blob_url": "https://github.com/rust-lang/rust/blob/db9774951daab59074c81fb48a189a19cd80265a/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9774951daab59074c81fb48a189a19cd80265a/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs?ref=db9774951daab59074c81fb48a189a19cd80265a", "patch": "@@ -1,288 +1,104 @@\n //! This pass eliminates casting of arrays into slices when their length\n //! is taken using `.len()` method. Handy to preserve information in MIR for const prop\n \n+use crate::ssa::SsaLocals;\n use crate::MirPass;\n-use rustc_data_structures::fx::FxIndexMap;\n-use rustc_data_structures::intern::Interned;\n-use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n+use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::{self, ReErased, Region, TyCtxt};\n-\n-const MAX_NUM_BLOCKS: usize = 800;\n-const MAX_NUM_LOCALS: usize = 3000;\n+use rustc_middle::ty::{self, TyCtxt};\n+use rustc_mir_dataflow::impls::borrowed_locals;\n \n pub struct NormalizeArrayLen;\n \n impl<'tcx> MirPass<'tcx> for NormalizeArrayLen {\n     fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n-        // See #105929\n-        sess.mir_opt_level() >= 4 && sess.opts.unstable_opts.unsound_mir_opts\n+        sess.mir_opt_level() >= 3\n     }\n \n+    #[instrument(level = \"trace\", skip(self, tcx, body))]\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        // early returns for edge cases of highly unrolled functions\n-        if body.basic_blocks.len() > MAX_NUM_BLOCKS {\n-            return;\n-        }\n-        if body.local_decls.len() > MAX_NUM_LOCALS {\n-            return;\n-        }\n+        debug!(def_id = ?body.source.def_id());\n         normalize_array_len_calls(tcx, body)\n     }\n }\n \n-pub fn normalize_array_len_calls<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-    // We don't ever touch terminators, so no need to invalidate the CFG cache\n-    let basic_blocks = body.basic_blocks.as_mut_preserves_cfg();\n-    let local_decls = &mut body.local_decls;\n+fn normalize_array_len_calls<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+    let param_env = tcx.param_env_reveal_all_normalized(body.source.def_id());\n+    let borrowed_locals = borrowed_locals(body);\n+    let ssa = SsaLocals::new(tcx, param_env, body, &borrowed_locals);\n \n-    // do a preliminary analysis to see if we ever have locals of type `[T;N]` or `&[T;N]`\n-    let mut interesting_locals = BitSet::new_empty(local_decls.len());\n-    for (local, decl) in local_decls.iter_enumerated() {\n-        match decl.ty.kind() {\n-            ty::Array(..) => {\n-                interesting_locals.insert(local);\n-            }\n-            ty::Ref(.., ty, Mutability::Not) => match ty.kind() {\n-                ty::Array(..) => {\n-                    interesting_locals.insert(local);\n-                }\n-                _ => {}\n-            },\n-            _ => {}\n-        }\n-    }\n-    if interesting_locals.is_empty() {\n-        // we have found nothing to analyze\n-        return;\n-    }\n-    let num_intesting_locals = interesting_locals.count();\n-    let mut state = FxIndexMap::with_capacity_and_hasher(num_intesting_locals, Default::default());\n-    let mut patches_scratchpad =\n-        FxIndexMap::with_capacity_and_hasher(num_intesting_locals, Default::default());\n-    let mut replacements_scratchpad =\n-        FxIndexMap::with_capacity_and_hasher(num_intesting_locals, Default::default());\n-    for block in basic_blocks {\n-        // make length calls for arrays [T; N] not to decay into length calls for &[T]\n-        // that forbids constant propagation\n-        normalize_array_len_call(\n-            tcx,\n-            block,\n-            local_decls,\n-            &interesting_locals,\n-            &mut state,\n-            &mut patches_scratchpad,\n-            &mut replacements_scratchpad,\n-        );\n-        state.clear();\n-        patches_scratchpad.clear();\n-        replacements_scratchpad.clear();\n-    }\n-}\n+    let slice_lengths = compute_slice_length(tcx, &ssa, body);\n+    debug!(?slice_lengths);\n \n-struct Patcher<'a, 'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-    patches_scratchpad: &'a FxIndexMap<usize, usize>,\n-    replacements_scratchpad: &'a mut FxIndexMap<usize, Local>,\n-    local_decls: &'a mut IndexVec<Local, LocalDecl<'tcx>>,\n-    statement_idx: usize,\n+    Replacer { tcx, slice_lengths }.visit_body_preserves_cfg(body);\n }\n \n-impl<'tcx> Patcher<'_, 'tcx> {\n-    fn patch_expand_statement(\n-        &mut self,\n-        statement: &mut Statement<'tcx>,\n-    ) -> Option<std::vec::IntoIter<Statement<'tcx>>> {\n-        let idx = self.statement_idx;\n-        if let Some(len_statemnt_idx) = self.patches_scratchpad.get(&idx).copied() {\n-            let mut statements = Vec::with_capacity(2);\n-\n-            // we are at statement that performs a cast. The only sound way is\n-            // to create another local that performs a similar copy without a cast and then\n-            // use this copy in the Len operation\n-\n-            match &statement.kind {\n-                StatementKind::Assign(box (\n-                    ..,\n-                    Rvalue::Cast(\n-                        CastKind::Pointer(ty::adjustment::PointerCast::Unsize),\n-                        operand,\n-                        _,\n-                    ),\n-                )) => {\n-                    match operand {\n-                        Operand::Copy(place) | Operand::Move(place) => {\n-                            // create new local\n-                            let ty = operand.ty(self.local_decls, self.tcx);\n-                            let local_decl = LocalDecl::with_source_info(ty, statement.source_info);\n-                            let local = self.local_decls.push(local_decl);\n-                            // make it live\n-                            let mut make_live_statement = statement.clone();\n-                            make_live_statement.kind = StatementKind::StorageLive(local);\n-                            statements.push(make_live_statement);\n-                            // copy into it\n-\n-                            let operand = Operand::Copy(*place);\n-                            let mut make_copy_statement = statement.clone();\n-                            let assign_to = Place::from(local);\n-                            let rvalue = Rvalue::Use(operand);\n-                            make_copy_statement.kind =\n-                                StatementKind::Assign(Box::new((assign_to, rvalue)));\n-                            statements.push(make_copy_statement);\n-\n-                            // to reorder we have to copy and make NOP\n-                            statements.push(statement.clone());\n-                            statement.make_nop();\n-\n-                            self.replacements_scratchpad.insert(len_statemnt_idx, local);\n-                        }\n-                        _ => {\n-                            unreachable!(\"it's a bug in the implementation\")\n-                        }\n-                    }\n-                }\n-                _ => {\n-                    unreachable!(\"it's a bug in the implementation\")\n+fn compute_slice_length<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    ssa: &SsaLocals,\n+    body: &Body<'tcx>,\n+) -> IndexVec<Local, Option<ty::Const<'tcx>>> {\n+    let mut slice_lengths = IndexVec::from_elem(None, &body.local_decls);\n+\n+    for (local, rvalue) in ssa.assignments(body) {\n+        match rvalue {\n+            Rvalue::Cast(\n+                CastKind::Pointer(ty::adjustment::PointerCast::Unsize),\n+                operand,\n+                cast_ty,\n+            ) => {\n+                let operand_ty = operand.ty(body, tcx);\n+                debug!(?operand_ty);\n+                if let Some(operand_ty) = operand_ty.builtin_deref(true)\n+                    && let ty::Array(_, len) = operand_ty.ty.kind()\n+                    && let Some(cast_ty) = cast_ty.builtin_deref(true)\n+                    && let ty::Slice(..) = cast_ty.ty.kind()\n+                {\n+                    slice_lengths[local] = Some(*len);\n                 }\n             }\n-\n-            self.statement_idx += 1;\n-\n-            Some(statements.into_iter())\n-        } else if let Some(local) = self.replacements_scratchpad.get(&idx).copied() {\n-            let mut statements = Vec::with_capacity(2);\n-\n-            match &statement.kind {\n-                StatementKind::Assign(box (into, Rvalue::Len(place))) => {\n-                    let add_deref = if let Some(..) = place.as_local() {\n-                        false\n-                    } else if let Some(..) = place.local_or_deref_local() {\n-                        true\n-                    } else {\n-                        unreachable!(\"it's a bug in the implementation\")\n-                    };\n-                    // replace len statement\n-                    let mut len_statement = statement.clone();\n-                    let mut place = Place::from(local);\n-                    if add_deref {\n-                        place = self.tcx.mk_place_deref(place);\n-                    }\n-                    len_statement.kind =\n-                        StatementKind::Assign(Box::new((*into, Rvalue::Len(place))));\n-                    statements.push(len_statement);\n-\n-                    // make temporary dead\n-                    let mut make_dead_statement = statement.clone();\n-                    make_dead_statement.kind = StatementKind::StorageDead(local);\n-                    statements.push(make_dead_statement);\n-\n-                    // make original statement NOP\n-                    statement.make_nop();\n+            // The length information is stored in the fat pointer, so we treat `operand` as a value.\n+            Rvalue::Use(operand) => {\n+                if let Some(rhs) = operand.place() && let Some(rhs) = rhs.as_local() {\n+                    slice_lengths[local] = slice_lengths[rhs];\n                 }\n-                _ => {\n-                    unreachable!(\"it's a bug in the implementation\")\n+            }\n+            // The length information is stored in the fat pointer.\n+            // Reborrowing copies length information from one pointer to the other.\n+            Rvalue::Ref(_, _, rhs) | Rvalue::AddressOf(_, rhs) => {\n+                if let [PlaceElem::Deref] = rhs.projection[..] {\n+                    slice_lengths[local] = slice_lengths[rhs.local];\n                 }\n             }\n-\n-            self.statement_idx += 1;\n-\n-            Some(statements.into_iter())\n-        } else {\n-            self.statement_idx += 1;\n-            None\n+            _ => {}\n         }\n     }\n+\n+    slice_lengths\n }\n \n-fn normalize_array_len_call<'tcx>(\n+struct Replacer<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    block: &mut BasicBlockData<'tcx>,\n-    local_decls: &mut IndexVec<Local, LocalDecl<'tcx>>,\n-    interesting_locals: &BitSet<Local>,\n-    state: &mut FxIndexMap<Local, usize>,\n-    patches_scratchpad: &mut FxIndexMap<usize, usize>,\n-    replacements_scratchpad: &mut FxIndexMap<usize, Local>,\n-) {\n-    for (statement_idx, statement) in block.statements.iter_mut().enumerate() {\n-        match &mut statement.kind {\n-            StatementKind::Assign(box (place, rvalue)) => {\n-                match rvalue {\n-                    Rvalue::Cast(\n-                        CastKind::Pointer(ty::adjustment::PointerCast::Unsize),\n-                        operand,\n-                        cast_ty,\n-                    ) => {\n-                        let Some(local) = place.as_local() else { return };\n-                        match operand {\n-                            Operand::Copy(place) | Operand::Move(place) => {\n-                                let Some(operand_local) = place.local_or_deref_local() else { return; };\n-                                if !interesting_locals.contains(operand_local) {\n-                                    return;\n-                                }\n-                                let operand_ty = local_decls[operand_local].ty;\n-                                match (operand_ty.kind(), cast_ty.kind()) {\n-                                    (ty::Array(of_ty_src, ..), ty::Slice(of_ty_dst)) => {\n-                                        if of_ty_src == of_ty_dst {\n-                                            // this is a cast from [T; N] into [T], so we are good\n-                                            state.insert(local, statement_idx);\n-                                        }\n-                                    }\n-                                    // current way of patching doesn't allow to work with `mut`\n-                                    (\n-                                        ty::Ref(\n-                                            Region(Interned(ReErased, _)),\n-                                            operand_ty,\n-                                            Mutability::Not,\n-                                        ),\n-                                        ty::Ref(\n-                                            Region(Interned(ReErased, _)),\n-                                            cast_ty,\n-                                            Mutability::Not,\n-                                        ),\n-                                    ) => {\n-                                        match (operand_ty.kind(), cast_ty.kind()) {\n-                                            // current way of patching doesn't allow to work with `mut`\n-                                            (ty::Array(of_ty_src, ..), ty::Slice(of_ty_dst)) => {\n-                                                if of_ty_src == of_ty_dst {\n-                                                    // this is a cast from [T; N] into [T], so we are good\n-                                                    state.insert(local, statement_idx);\n-                                                }\n-                                            }\n-                                            _ => {}\n-                                        }\n-                                    }\n-                                    _ => {}\n-                                }\n-                            }\n-                            _ => {}\n-                        }\n-                    }\n-                    Rvalue::Len(place) => {\n-                        let Some(local) = place.local_or_deref_local() else {\n-                            return;\n-                        };\n-                        if let Some(cast_statement_idx) = state.get(&local).copied() {\n-                            patches_scratchpad.insert(cast_statement_idx, statement_idx);\n-                        }\n-                    }\n-                    _ => {\n-                        // invalidate\n-                        state.remove(&place.local);\n-                    }\n-                }\n-            }\n-            _ => {}\n-        }\n-    }\n+    slice_lengths: IndexVec<Local, Option<ty::Const<'tcx>>>,\n+}\n \n-    let mut patcher = Patcher {\n-        tcx,\n-        patches_scratchpad: &*patches_scratchpad,\n-        replacements_scratchpad,\n-        local_decls,\n-        statement_idx: 0,\n-    };\n+impl<'tcx> MutVisitor<'tcx> for Replacer<'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n \n-    block.expand_statements(|st| patcher.patch_expand_statement(st));\n+    fn visit_rvalue(&mut self, rvalue: &mut Rvalue<'tcx>, loc: Location) {\n+        if let Rvalue::Len(place) = rvalue\n+            && let [PlaceElem::Deref] = &place.projection[..]\n+            && let Some(len) = self.slice_lengths[place.local]\n+        {\n+            *rvalue = Rvalue::Use(Operand::Constant(Box::new(Constant {\n+                span: rustc_span::DUMMY_SP,\n+                user_ty: None,\n+                literal: ConstantKind::from_const(len, self.tcx),\n+            })));\n+        }\n+        self.super_rvalue(rvalue, loc);\n+    }\n }"}, {"sha": "38d402b8f21610381d70f397bae53822793f76e9", "filename": "tests/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db9774951daab59074c81fb48a189a19cd80265a/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/db9774951daab59074c81fb48a189a19cd80265a/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff?ref=db9774951daab59074c81fb48a189a19cd80265a", "patch": "@@ -33,11 +33,11 @@\n           StorageLive(_4);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n           StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n           _5 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-          _6 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+          _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n -         _7 = Lt(_5, _6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n -         assert(move _7, \"index out of bounds: the length is {} but the index is {}\", move _6, _5) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         _7 = Lt(const 3_usize, _6);      // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         assert(move _7, \"index out of bounds: the length is {} but the index is {}\", move _6, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         _7 = const false;                // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         assert(const false, \"index out of bounds: the length is {} but the index is {}\", const 3_usize, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n       }\n   \n       bb1: {"}, {"sha": "38d402b8f21610381d70f397bae53822793f76e9", "filename": "tests/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db9774951daab59074c81fb48a189a19cd80265a/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/db9774951daab59074c81fb48a189a19cd80265a/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff?ref=db9774951daab59074c81fb48a189a19cd80265a", "patch": "@@ -33,11 +33,11 @@\n           StorageLive(_4);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n           StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n           _5 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n-          _6 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n+          _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n -         _7 = Lt(_5, _6);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n -         assert(move _7, \"index out of bounds: the length is {} but the index is {}\", move _6, _5) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         _7 = Lt(const 3_usize, _6);      // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n-+         assert(move _7, \"index out of bounds: the length is {} but the index is {}\", move _6, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         _7 = const false;                // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n++         assert(const false, \"index out of bounds: the length is {} but the index is {}\", const 3_usize, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:18: +3:25\n       }\n   \n       bb1: {"}, {"sha": "fbbfd4ceb112ba59980ecfd1da1ae8f1d28f4cc6", "filename": "tests/mir-opt/issue_76432.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db9774951daab59074c81fb48a189a19cd80265a/tests%2Fmir-opt%2Fissue_76432.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9774951daab59074c81fb48a189a19cd80265a/tests%2Fmir-opt%2Fissue_76432.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_76432.rs?ref=db9774951daab59074c81fb48a189a19cd80265a", "patch": "@@ -1,3 +1,4 @@\n+// compile-flags: -Zmir-enable-passes=-NormalizeArrayLen\n // Check that we do not insert StorageDead at each target if StorageDead was never seen\n \n // EMIT_MIR issue_76432.test.SimplifyComparisonIntegral.diff"}, {"sha": "59de067f4a4f8c9773ff04726b13cbd9e8aab13f", "filename": "tests/mir-opt/lower_array_len.array_bound.NormalizeArrayLen.diff", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db9774951daab59074c81fb48a189a19cd80265a/tests%2Fmir-opt%2Flower_array_len.array_bound.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/db9774951daab59074c81fb48a189a19cd80265a/tests%2Fmir-opt%2Flower_array_len.array_bound.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_array_len.array_bound.NormalizeArrayLen.diff?ref=db9774951daab59074c81fb48a189a19cd80265a", "patch": "@@ -13,7 +13,6 @@\n       let _8: usize;                       // in scope 0 at $DIR/lower_array_len.rs:+2:15: +2:20\n       let mut _9: usize;                   // in scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n       let mut _10: bool;                   // in scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n-+     let mut _11: &[u8; N];               // in scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n   \n       bb0: {\n           StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:+1:8: +1:27\n@@ -23,13 +22,10 @@\n           StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n           StorageLive(_7);                 // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n           _7 = &(*_2);                     // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-+         StorageLive(_11);                // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-+         _11 = _7;                        // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n           _6 = move _7 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n           StorageDead(_7);                 // scope 0 at $DIR/lower_array_len.rs:+1:20: +1:21\n -         _5 = Len((*_6));                 // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-+         _5 = Len((*_11));                // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-+         StorageDead(_11);                // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n++         _5 = const N;                    // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n           goto -> bb1;                     // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n       }\n   "}, {"sha": "17574b1b635681aee95cfd859ad695a51f61e153", "filename": "tests/mir-opt/lower_array_len.array_bound_mut.NormalizeArrayLen.diff", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db9774951daab59074c81fb48a189a19cd80265a/tests%2Fmir-opt%2Flower_array_len.array_bound_mut.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/db9774951daab59074c81fb48a189a19cd80265a/tests%2Fmir-opt%2Flower_array_len.array_bound_mut.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_array_len.array_bound_mut.NormalizeArrayLen.diff?ref=db9774951daab59074c81fb48a189a19cd80265a", "patch": "@@ -16,7 +16,6 @@\n       let _11: usize;                      // in scope 0 at $DIR/lower_array_len.rs:+4:15: +4:16\n       let mut _12: usize;                  // in scope 0 at $DIR/lower_array_len.rs:+4:9: +4:17\n       let mut _13: bool;                   // in scope 0 at $DIR/lower_array_len.rs:+4:9: +4:17\n-+     let mut _14: &[u8; N];               // in scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n   \n       bb0: {\n           StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:+1:8: +1:27\n@@ -26,13 +25,10 @@\n           StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n           StorageLive(_7);                 // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n           _7 = &(*_2);                     // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-+         StorageLive(_14);                // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-+         _14 = _7;                        // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n           _6 = move _7 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n           StorageDead(_7);                 // scope 0 at $DIR/lower_array_len.rs:+1:20: +1:21\n -         _5 = Len((*_6));                 // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-+         _5 = Len((*_14));                // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-+         StorageDead(_14);                // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n++         _5 = const N;                    // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n           goto -> bb1;                     // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n       }\n   "}, {"sha": "66feff62f424680192a6bb3549433058facf6d2a", "filename": "tests/mir-opt/lower_array_len.array_len.NormalizeArrayLen.diff", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db9774951daab59074c81fb48a189a19cd80265a/tests%2Fmir-opt%2Flower_array_len.array_len.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/db9774951daab59074c81fb48a189a19cd80265a/tests%2Fmir-opt%2Flower_array_len.array_len.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_array_len.array_len.NormalizeArrayLen.diff?ref=db9774951daab59074c81fb48a189a19cd80265a", "patch": "@@ -6,19 +6,15 @@\n       let mut _0: usize;                   // return place in scope 0 at $DIR/lower_array_len.rs:+0:52: +0:57\n       let mut _2: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n       let mut _3: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-+     let mut _4: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n           StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n           _3 = &(*_1);                     // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-+         StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-+         _4 = _3;                         // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n           _2 = move _3 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n           StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:+1:7: +1:8\n -         _0 = Len((*_2));                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-+         _0 = Len((*_4));                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-+         StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n++         _0 = const N;                    // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n           goto -> bb1;                     // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n       }\n   "}, {"sha": "c0a277edc46700ea9ece6e395f77f5bb1a4430bd", "filename": "tests/mir-opt/lower_array_len.array_len_by_value.NormalizeArrayLen.diff", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db9774951daab59074c81fb48a189a19cd80265a/tests%2Fmir-opt%2Flower_array_len.array_len_by_value.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/db9774951daab59074c81fb48a189a19cd80265a/tests%2Fmir-opt%2Flower_array_len.array_len_by_value.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_array_len.array_len_by_value.NormalizeArrayLen.diff?ref=db9774951daab59074c81fb48a189a19cd80265a", "patch": "@@ -6,19 +6,15 @@\n       let mut _0: usize;                   // return place in scope 0 at $DIR/lower_array_len.rs:+0:60: +0:65\n       let mut _2: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n       let mut _3: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-+     let mut _4: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n           StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n           _3 = &_1;                        // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-+         StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-+         _4 = _3;                         // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n           _2 = move _3 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n           StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:+1:7: +1:8\n -         _0 = Len((*_2));                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-+         _0 = Len((*_4));                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-+         StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n++         _0 = const N;                    // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n           goto -> bb1;                     // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n       }\n   "}, {"sha": "8b35fd57fa016bdcd8974197bf679f060ebee01c", "filename": "tests/mir-opt/lower_array_len.array_len_raw.NormalizeArrayLen.diff", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/db9774951daab59074c81fb48a189a19cd80265a/tests%2Fmir-opt%2Flower_array_len.array_len_raw.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/db9774951daab59074c81fb48a189a19cd80265a/tests%2Fmir-opt%2Flower_array_len.array_len_raw.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_array_len.array_len_raw.NormalizeArrayLen.diff?ref=db9774951daab59074c81fb48a189a19cd80265a", "patch": "@@ -0,0 +1,50 @@\n+- // MIR for `array_len_raw` before NormalizeArrayLen\n++ // MIR for `array_len_raw` after NormalizeArrayLen\n+  \n+  fn array_len_raw(_1: [u8; N]) -> usize {\n+      debug arr => _1;                     // in scope 0 at $DIR/lower_array_len.rs:+0:38: +0:41\n+      let mut _0: usize;                   // return place in scope 0 at $DIR/lower_array_len.rs:+0:55: +0:60\n+      let _2: &[u8];                       // in scope 0 at $DIR/lower_array_len.rs:+1:9: +1:12\n+      let mut _3: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:+1:21: +1:25\n+      let _4: &[u8; N];                    // in scope 0 at $DIR/lower_array_len.rs:+1:21: +1:25\n+      let mut _6: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:+3:5: +3:27\n+      let _7: &[u8];                       // in scope 0 at $DIR/lower_array_len.rs:+3:14: +3:19\n+      scope 1 {\n+          debug arr => _2;                 // in scope 1 at $DIR/lower_array_len.rs:+1:9: +1:12\n+          let _5: *const [u8];             // in scope 1 at $DIR/lower_array_len.rs:+2:9: +2:12\n+          scope 2 {\n+              debug arr => _5;             // in scope 2 at $DIR/lower_array_len.rs:+2:9: +2:12\n+              scope 3 {\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/lower_array_len.rs:+1:9: +1:12\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:+1:21: +1:25\n+          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:+1:21: +1:25\n+          _4 = &_1;                        // scope 0 at $DIR/lower_array_len.rs:+1:21: +1:25\n+          _3 = &(*_4);                     // scope 0 at $DIR/lower_array_len.rs:+1:21: +1:25\n+          _2 = move _3 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:+1:21: +1:25\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:+1:24: +1:25\n+          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:+1:25: +1:26\n+          StorageLive(_5);                 // scope 1 at $DIR/lower_array_len.rs:+2:9: +2:12\n+          _5 = &raw const (*_2);           // scope 1 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+          StorageLive(_6);                 // scope 2 at $DIR/lower_array_len.rs:+3:5: +3:27\n+          StorageLive(_7);                 // scope 2 at $DIR/lower_array_len.rs:+3:14: +3:19\n+          _7 = &(*_5);                     // scope 3 at $DIR/lower_array_len.rs:+3:14: +3:19\n+          _6 = &(*_7);                     // scope 2 at $DIR/lower_array_len.rs:+3:5: +3:27\n+-         _0 = Len((*_6));                 // scope 2 at $DIR/lower_array_len.rs:+3:5: +3:27\n++         _0 = const N;                    // scope 2 at $DIR/lower_array_len.rs:+3:5: +3:27\n+          goto -> bb1;                     // scope 2 at $DIR/lower_array_len.rs:+3:5: +3:27\n+      }\n+  \n+      bb1: {\n+          StorageDead(_6);                 // scope 2 at $DIR/lower_array_len.rs:+3:26: +3:27\n+          StorageDead(_5);                 // scope 1 at $DIR/lower_array_len.rs:+4:1: +4:2\n+          StorageDead(_2);                 // scope 0 at $DIR/lower_array_len.rs:+4:1: +4:2\n+          StorageDead(_7);                 // scope 0 at $DIR/lower_array_len.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/lower_array_len.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "8bdd2ede6bc41b6ee3f78ccb40b8b4d2254225d5", "filename": "tests/mir-opt/lower_array_len.array_len_reborrow.NormalizeArrayLen.diff", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/db9774951daab59074c81fb48a189a19cd80265a/tests%2Fmir-opt%2Flower_array_len.array_len_reborrow.NormalizeArrayLen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/db9774951daab59074c81fb48a189a19cd80265a/tests%2Fmir-opt%2Flower_array_len.array_len_reborrow.NormalizeArrayLen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_array_len.array_len_reborrow.NormalizeArrayLen.diff?ref=db9774951daab59074c81fb48a189a19cd80265a", "patch": "@@ -0,0 +1,44 @@\n+- // MIR for `array_len_reborrow` before NormalizeArrayLen\n++ // MIR for `array_len_reborrow` after NormalizeArrayLen\n+  \n+  fn array_len_reborrow(_1: [u8; N]) -> usize {\n+      debug arr => _1;                     // in scope 0 at $DIR/lower_array_len.rs:+0:43: +0:50\n+      let mut _0: usize;                   // return place in scope 0 at $DIR/lower_array_len.rs:+0:64: +0:69\n+      let _2: &mut [u8];                   // in scope 0 at $DIR/lower_array_len.rs:+1:9: +1:12\n+      let mut _3: &mut [u8; N];            // in scope 0 at $DIR/lower_array_len.rs:+1:25: +1:33\n+      let mut _4: &mut [u8; N];            // in scope 0 at $DIR/lower_array_len.rs:+1:25: +1:33\n+      let mut _6: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:+3:5: +3:14\n+      scope 1 {\n+          debug arr => _2;                 // in scope 1 at $DIR/lower_array_len.rs:+1:9: +1:12\n+          let _5: &[u8];                   // in scope 1 at $DIR/lower_array_len.rs:+2:9: +2:12\n+          scope 2 {\n+              debug arr => _5;             // in scope 2 at $DIR/lower_array_len.rs:+2:9: +2:12\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/lower_array_len.rs:+1:9: +1:12\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:+1:25: +1:33\n+          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:+1:25: +1:33\n+          _4 = &mut _1;                    // scope 0 at $DIR/lower_array_len.rs:+1:25: +1:33\n+          _3 = &mut (*_4);                 // scope 0 at $DIR/lower_array_len.rs:+1:25: +1:33\n+          _2 = move _3 as &mut [u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:+1:25: +1:33\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:+1:32: +1:33\n+          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:+1:33: +1:34\n+          StorageLive(_5);                 // scope 1 at $DIR/lower_array_len.rs:+2:9: +2:12\n+          _5 = &(*_2);                     // scope 1 at $DIR/lower_array_len.rs:+2:15: +2:20\n+          StorageLive(_6);                 // scope 2 at $DIR/lower_array_len.rs:+3:5: +3:14\n+          _6 = &(*_5);                     // scope 2 at $DIR/lower_array_len.rs:+3:5: +3:14\n+-         _0 = Len((*_6));                 // scope 2 at $DIR/lower_array_len.rs:+3:5: +3:14\n++         _0 = const N;                    // scope 2 at $DIR/lower_array_len.rs:+3:5: +3:14\n+          goto -> bb1;                     // scope 2 at $DIR/lower_array_len.rs:+3:5: +3:14\n+      }\n+  \n+      bb1: {\n+          StorageDead(_6);                 // scope 2 at $DIR/lower_array_len.rs:+3:13: +3:14\n+          StorageDead(_5);                 // scope 1 at $DIR/lower_array_len.rs:+4:1: +4:2\n+          StorageDead(_2);                 // scope 0 at $DIR/lower_array_len.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/lower_array_len.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "972d46cb8e2bd284976d1bdee770da63aa3a7f86", "filename": "tests/mir-opt/lower_array_len.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/db9774951daab59074c81fb48a189a19cd80265a/tests%2Fmir-opt%2Flower_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9774951daab59074c81fb48a189a19cd80265a/tests%2Fmir-opt%2Flower_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_array_len.rs?ref=db9774951daab59074c81fb48a189a19cd80265a", "patch": "@@ -31,10 +31,26 @@ pub fn array_len_by_value<const N: usize>(arr: [u8; N]) -> usize {\n     arr.len()\n }\n \n+// EMIT_MIR lower_array_len.array_len_reborrow.NormalizeArrayLen.diff\n+pub fn array_len_reborrow<const N: usize>(mut arr: [u8; N]) -> usize {\n+    let arr: &mut [_] = &mut arr;\n+    let arr = &*arr;\n+    arr.len()\n+}\n+\n+// EMIT_MIR lower_array_len.array_len_raw.NormalizeArrayLen.diff\n+pub fn array_len_raw<const N: usize>(arr: [u8; N]) -> usize {\n+    let arr: &[_] = &arr;\n+    let arr = std::ptr::addr_of!(*arr);\n+    unsafe { &*arr }.len()\n+}\n+\n fn main() {\n     let _ = array_bound(3, &[0, 1, 2, 3]);\n     let mut tmp = [0, 1, 2, 3, 4];\n     let _ = array_bound_mut(3, &mut [0, 1, 2, 3]);\n     let _ = array_len(&[0]);\n     let _ = array_len_by_value([0, 2]);\n+    let _ = array_len_reborrow([0, 2]);\n+    let _ = array_len_raw([0, 2]);\n }"}, {"sha": "dee1d538395ef86b9b5ec4b86666ae6478b72943", "filename": "tests/mir-opt/lower_array_len_e2e.array_bound.PreCodegen.after.mir", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4ac1796267c3af95cb97d630639d8938237586f6/tests%2Fmir-opt%2Flower_array_len_e2e.array_bound.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4ac1796267c3af95cb97d630639d8938237586f6/tests%2Fmir-opt%2Flower_array_len_e2e.array_bound.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_array_len_e2e.array_bound.PreCodegen.after.mir?ref=4ac1796267c3af95cb97d630639d8938237586f6", "patch": "@@ -1,41 +0,0 @@\n-// MIR for `array_bound` after PreCodegen\n-\n-fn array_bound(_1: usize, _2: &[u8; N]) -> u8 {\n-    debug index => _1;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+0:36: +0:41\n-    debug slice => _2;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+0:50: +0:55\n-    let mut _0: u8;                      // return place in scope 0 at $DIR/lower_array_len_e2e.rs:+0:70: +0:72\n-    let mut _3: bool;                    // in scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n-    let mut _4: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n-    let mut _5: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n-    let mut _6: bool;                    // in scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n-\n-    bb0: {\n-        StorageLive(_3);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n-        StorageLive(_4);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n-        _4 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n-        _3 = Lt(_1, move _4);            // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n-        StorageDead(_4);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:26: +1:27\n-        switchInt(move _3) -> [0: bb3, otherwise: bb1]; // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n-    }\n-\n-    bb1: {\n-        _5 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n-        _6 = Lt(_1, _5);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n-        assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _1) -> bb2; // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n-    }\n-\n-    bb2: {\n-        _0 = (*_2)[_1];                  // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n-        goto -> bb4;                     // scope 0 at $DIR/lower_array_len_e2e.rs:+1:5: +5:6\n-    }\n-\n-    bb3: {\n-        _0 = const 42_u8;                // scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:11\n-        goto -> bb4;                     // scope 0 at $DIR/lower_array_len_e2e.rs:+1:5: +5:6\n-    }\n-\n-    bb4: {\n-        StorageDead(_3);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+5:5: +5:6\n-        return;                          // scope 0 at $DIR/lower_array_len_e2e.rs:+6:2: +6:2\n-    }\n-}"}, {"sha": "e35fe758ab12ddea899bddedcba028e5e02fc4c3", "filename": "tests/mir-opt/lower_array_len_e2e.array_bound_mut.PreCodegen.after.mir", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4ac1796267c3af95cb97d630639d8938237586f6/tests%2Fmir-opt%2Flower_array_len_e2e.array_bound_mut.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4ac1796267c3af95cb97d630639d8938237586f6/tests%2Fmir-opt%2Flower_array_len_e2e.array_bound_mut.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_array_len_e2e.array_bound_mut.PreCodegen.after.mir?ref=4ac1796267c3af95cb97d630639d8938237586f6", "patch": "@@ -1,54 +0,0 @@\n-// MIR for `array_bound_mut` after PreCodegen\n-\n-fn array_bound_mut(_1: usize, _2: &mut [u8; N]) -> u8 {\n-    debug index => _1;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+0:40: +0:45\n-    debug slice => _2;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+0:54: +0:59\n-    let mut _0: u8;                      // return place in scope 0 at $DIR/lower_array_len_e2e.rs:+0:78: +0:80\n-    let mut _3: bool;                    // in scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n-    let mut _4: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n-    let mut _5: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n-    let mut _6: bool;                    // in scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n-    let _7: usize;                       // in scope 0 at $DIR/lower_array_len_e2e.rs:+4:15: +4:16\n-    let mut _8: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n-    let mut _9: bool;                    // in scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n-\n-    bb0: {\n-        StorageLive(_3);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n-        StorageLive(_4);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n-        _4 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n-        _3 = Lt(_1, move _4);            // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n-        StorageDead(_4);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:26: +1:27\n-        switchInt(move _3) -> [0: bb3, otherwise: bb1]; // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n-    }\n-\n-    bb1: {\n-        _5 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n-        _6 = Lt(_1, _5);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n-        assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _1) -> bb2; // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n-    }\n-\n-    bb2: {\n-        _0 = (*_2)[_1];                  // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n-        goto -> bb5;                     // scope 0 at $DIR/lower_array_len_e2e.rs:+1:5: +7:6\n-    }\n-\n-    bb3: {\n-        StorageLive(_7);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+4:15: +4:16\n-        _7 = const 0_usize;              // scope 0 at $DIR/lower_array_len_e2e.rs:+4:15: +4:16\n-        _8 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n-        _9 = Lt(const 0_usize, _8);      // scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n-        assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, const 0_usize) -> bb4; // scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n-    }\n-\n-    bb4: {\n-        (*_2)[_7] = const 42_u8;         // scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:22\n-        StorageDead(_7);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+4:22: +4:23\n-        _0 = const 42_u8;                // scope 0 at $DIR/lower_array_len_e2e.rs:+6:9: +6:11\n-        goto -> bb5;                     // scope 0 at $DIR/lower_array_len_e2e.rs:+1:5: +7:6\n-    }\n-\n-    bb5: {\n-        StorageDead(_3);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+7:5: +7:6\n-        return;                          // scope 0 at $DIR/lower_array_len_e2e.rs:+8:2: +8:2\n-    }\n-}"}, {"sha": "4b19f6795588960697bef697eaee8f8cbd6010bb", "filename": "tests/mir-opt/lower_array_len_e2e.array_len.PreCodegen.after.mir", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4ac1796267c3af95cb97d630639d8938237586f6/tests%2Fmir-opt%2Flower_array_len_e2e.array_len.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4ac1796267c3af95cb97d630639d8938237586f6/tests%2Fmir-opt%2Flower_array_len_e2e.array_len.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_array_len_e2e.array_len.PreCodegen.after.mir?ref=4ac1796267c3af95cb97d630639d8938237586f6", "patch": "@@ -1,11 +0,0 @@\n-// MIR for `array_len` after PreCodegen\n-\n-fn array_len(_1: &[u8; N]) -> usize {\n-    debug arr => _1;                     // in scope 0 at $DIR/lower_array_len_e2e.rs:+0:34: +0:37\n-    let mut _0: usize;                   // return place in scope 0 at $DIR/lower_array_len_e2e.rs:+0:52: +0:57\n-\n-    bb0: {\n-        _0 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+1:5: +1:14\n-        return;                          // scope 0 at $DIR/lower_array_len_e2e.rs:+2:2: +2:2\n-    }\n-}"}, {"sha": "4dc0ba9a268ea1bf8a35d024eff98b70eddc87a3", "filename": "tests/mir-opt/lower_array_len_e2e.array_len_by_value.PreCodegen.after.mir", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4ac1796267c3af95cb97d630639d8938237586f6/tests%2Fmir-opt%2Flower_array_len_e2e.array_len_by_value.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4ac1796267c3af95cb97d630639d8938237586f6/tests%2Fmir-opt%2Flower_array_len_e2e.array_len_by_value.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_array_len_e2e.array_len_by_value.PreCodegen.after.mir?ref=4ac1796267c3af95cb97d630639d8938237586f6", "patch": "@@ -1,11 +0,0 @@\n-// MIR for `array_len_by_value` after PreCodegen\n-\n-fn array_len_by_value(_1: [u8; N]) -> usize {\n-    debug arr => _1;                     // in scope 0 at $DIR/lower_array_len_e2e.rs:+0:43: +0:46\n-    let mut _0: usize;                   // return place in scope 0 at $DIR/lower_array_len_e2e.rs:+0:60: +0:65\n-\n-    bb0: {\n-        _0 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+1:5: +1:14\n-        return;                          // scope 0 at $DIR/lower_array_len_e2e.rs:+2:2: +2:2\n-    }\n-}"}, {"sha": "d8e4e521ee6820b91fb3dc9ee41f8f5310bebb71", "filename": "tests/mir-opt/lower_array_len_e2e.rs", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4ac1796267c3af95cb97d630639d8938237586f6/tests%2Fmir-opt%2Flower_array_len_e2e.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac1796267c3af95cb97d630639d8938237586f6/tests%2Fmir-opt%2Flower_array_len_e2e.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_array_len_e2e.rs?ref=4ac1796267c3af95cb97d630639d8938237586f6", "patch": "@@ -1,39 +0,0 @@\n-// compile-flags: -Z mir-opt-level=4 -Zunsound-mir-opts\n-\n-// EMIT_MIR lower_array_len_e2e.array_bound.PreCodegen.after.mir\n-pub fn array_bound<const N: usize>(index: usize, slice: &[u8; N]) -> u8 {\n-    if index < slice.len() {\n-        slice[index]\n-    } else {\n-        42\n-    }\n-}\n-\n-// EMIT_MIR lower_array_len_e2e.array_bound_mut.PreCodegen.after.mir\n-pub fn array_bound_mut<const N: usize>(index: usize, slice: &mut [u8; N]) -> u8 {\n-    if index < slice.len() {\n-        slice[index]\n-    } else {\n-        slice[0] = 42;\n-\n-        42\n-    }\n-}\n-\n-// EMIT_MIR lower_array_len_e2e.array_len.PreCodegen.after.mir\n-pub fn array_len<const N: usize>(arr: &[u8; N]) -> usize {\n-    arr.len()\n-}\n-\n-// EMIT_MIR lower_array_len_e2e.array_len_by_value.PreCodegen.after.mir\n-pub fn array_len_by_value<const N: usize>(arr: [u8; N]) -> usize {\n-    arr.len()\n-}\n-\n-fn main() {\n-    let _ = array_bound(3, &[0, 1, 2, 3]);\n-    let mut tmp = [0, 1, 2, 3, 4];\n-    let _ = array_bound_mut(3, &mut [0, 1, 2, 3]);\n-    let _ = array_len(&[0]);\n-    let _ = array_len_by_value([0, 2]);\n-}"}]}