{"sha": "e8de57c20dd9e529d6f27d35ad70bf9f9ce9f832", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ZGU1N2MyMGRkOWU1MjlkNmYyN2QzNWFkNzBiZjlmOWNlOWY4MzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-29T14:29:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-29T14:29:30Z"}, "message": "Auto merge of #6212 - ThibsG:MacroTopLevelRefArg, r=flip1995\n\nNo lint in macro for `toplevel_ref_arg`\n\nDo not lint when the span is from a macro.\n\nQuestion: shouldn't we extend this for external macros also ?\n\nFixes: #5849\n\nchangelog: none", "tree": {"sha": "06784b9cddb432e7010d28ca93d558a975d5ed46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06784b9cddb432e7010d28ca93d558a975d5ed46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8de57c20dd9e529d6f27d35ad70bf9f9ce9f832", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8de57c20dd9e529d6f27d35ad70bf9f9ce9f832", "html_url": "https://github.com/rust-lang/rust/commit/e8de57c20dd9e529d6f27d35ad70bf9f9ce9f832", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8de57c20dd9e529d6f27d35ad70bf9f9ce9f832/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d5cd6eb8dc2618a289d838ca7e3f0b6d0053ba0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d5cd6eb8dc2618a289d838ca7e3f0b6d0053ba0", "html_url": "https://github.com/rust-lang/rust/commit/6d5cd6eb8dc2618a289d838ca7e3f0b6d0053ba0"}, {"sha": "bab338685f42e4b184c0f645c3a1a24a79890e17", "url": "https://api.github.com/repos/rust-lang/rust/commits/bab338685f42e4b184c0f645c3a1a24a79890e17", "html_url": "https://github.com/rust-lang/rust/commit/bab338685f42e4b184c0f645c3a1a24a79890e17"}], "stats": {"total": 131, "additions": 119, "deletions": 12}, "files": [{"sha": "308e92057b751cecf7f8e2c5f13fb54904c43ec2", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e8de57c20dd9e529d6f27d35ad70bf9f9ce9f832/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8de57c20dd9e529d6f27d35ad70bf9f9ce9f832/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=e8de57c20dd9e529d6f27d35ad70bf9f9ce9f832", "patch": "@@ -7,6 +7,7 @@ use rustc_hir::{\n     StmtKind, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::hygiene::DesugaringKind;\n@@ -271,13 +272,16 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n         k: FnKind<'tcx>,\n         decl: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n-        _: Span,\n+        span: Span,\n         _: HirId,\n     ) {\n         if let FnKind::Closure(_) = k {\n             // Does not apply to closures\n             return;\n         }\n+        if in_external_macro(cx.tcx.sess, span) {\n+            return;\n+        }\n         for arg in iter_input_pats(decl, body) {\n             if let PatKind::Binding(BindingAnnotation::Ref | BindingAnnotation::RefMut, ..) = arg.pat.kind {\n                 span_lint(\n@@ -293,13 +297,16 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n \n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n         if_chain! {\n+            if !in_external_macro(cx.tcx.sess, stmt.span);\n             if let StmtKind::Local(ref local) = stmt.kind;\n             if let PatKind::Binding(an, .., name, None) = local.pat.kind;\n             if let Some(ref init) = local.init;\n             if !higher::is_from_for_desugar(local);\n             then {\n                 if an == BindingAnnotation::Ref || an == BindingAnnotation::RefMut {\n-                    let sugg_init = if init.span.from_expansion() {\n+                    // use the macro callsite when the init span (but not the whole local span)\n+                    // comes from an expansion like `vec![1, 2, 3]` in `let ref _ = vec![1, 2, 3];`\n+                    let sugg_init = if init.span.from_expansion() && !local.span.from_expansion() {\n                         Sugg::hir_with_macro_callsite(cx, init, \"..\")\n                     } else {\n                         Sugg::hir(cx, init, \"..\")\n@@ -310,7 +317,7 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n                         (\"\", sugg_init.addr())\n                     };\n                     let tyopt = if let Some(ref ty) = local.ty {\n-                        format!(\": &{mutopt}{ty}\", mutopt=mutopt, ty=snippet(cx, ty.span, \"_\"))\n+                        format!(\": &{mutopt}{ty}\", mutopt=mutopt, ty=snippet(cx, ty.span, \"..\"))\n                     } else {\n                         String::new()\n                     };\n@@ -326,7 +333,7 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n                                 \"try\",\n                                 format!(\n                                     \"let {name}{tyopt} = {initref};\",\n-                                    name=snippet(cx, name.span, \"_\"),\n+                                    name=snippet(cx, name.span, \"..\"),\n                                     tyopt=tyopt,\n                                     initref=initref,\n                                 ),"}, {"sha": "93303865e178ec0dfb8d24638adfe76ee99c50b3", "filename": "tests/ui/auxiliary/macro_rules.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e8de57c20dd9e529d6f27d35ad70bf9f9ce9f832/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8de57c20dd9e529d6f27d35ad70bf9f9ce9f832/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs?ref=e8de57c20dd9e529d6f27d35ad70bf9f9ce9f832", "patch": "@@ -56,3 +56,17 @@ macro_rules! option_env_unwrap_external {\n         option_env!($env).expect($message)\n     };\n }\n+\n+#[macro_export]\n+macro_rules! ref_arg_binding {\n+    () => {\n+        let ref _y = 42;\n+    };\n+}\n+\n+#[macro_export]\n+macro_rules! ref_arg_function {\n+    () => {\n+        fn fun_example(ref _x: usize) {}\n+    };\n+}"}, {"sha": "b129d95c5602fd4d62e626d8f3c50517ea85d3f3", "filename": "tests/ui/toplevel_ref_arg.fixed", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e8de57c20dd9e529d6f27d35ad70bf9f9ce9f832/tests%2Fui%2Ftoplevel_ref_arg.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e8de57c20dd9e529d6f27d35ad70bf9f9ce9f832/tests%2Fui%2Ftoplevel_ref_arg.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg.fixed?ref=e8de57c20dd9e529d6f27d35ad70bf9f9ce9f832", "patch": "@@ -1,7 +1,17 @@\n // run-rustfix\n+// aux-build:macro_rules.rs\n \n #![warn(clippy::toplevel_ref_arg)]\n \n+#[macro_use]\n+extern crate macro_rules;\n+\n+macro_rules! gen_binding {\n+    () => {\n+        let _y = &42;\n+    };\n+}\n+\n fn main() {\n     // Closures should not warn\n     let y = |ref x| println!(\"{:?}\", x);\n@@ -26,4 +36,15 @@ fn main() {\n \n     // ok\n     for ref _x in 0..10 {}\n+\n+    // lint in macro\n+    #[allow(unused)]\n+    {\n+        gen_binding!();\n+    }\n+\n+    // do not lint in external macro\n+    {\n+        ref_arg_binding!();\n+    }\n }"}, {"sha": "73eb4ff7306f715832668d8fb6b0e05dbd169309", "filename": "tests/ui/toplevel_ref_arg.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e8de57c20dd9e529d6f27d35ad70bf9f9ce9f832/tests%2Fui%2Ftoplevel_ref_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8de57c20dd9e529d6f27d35ad70bf9f9ce9f832/tests%2Fui%2Ftoplevel_ref_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg.rs?ref=e8de57c20dd9e529d6f27d35ad70bf9f9ce9f832", "patch": "@@ -1,7 +1,17 @@\n // run-rustfix\n+// aux-build:macro_rules.rs\n \n #![warn(clippy::toplevel_ref_arg)]\n \n+#[macro_use]\n+extern crate macro_rules;\n+\n+macro_rules! gen_binding {\n+    () => {\n+        let ref _y = 42;\n+    };\n+}\n+\n fn main() {\n     // Closures should not warn\n     let y = |ref x| println!(\"{:?}\", x);\n@@ -26,4 +36,15 @@ fn main() {\n \n     // ok\n     for ref _x in 0..10 {}\n+\n+    // lint in macro\n+    #[allow(unused)]\n+    {\n+        gen_binding!();\n+    }\n+\n+    // do not lint in external macro\n+    {\n+        ref_arg_binding!();\n+    }\n }"}, {"sha": "15cb933fedc9e78f34b2511d5d8650c3934bed93", "filename": "tests/ui/toplevel_ref_arg.stderr", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e8de57c20dd9e529d6f27d35ad70bf9f9ce9f832/tests%2Fui%2Ftoplevel_ref_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8de57c20dd9e529d6f27d35ad70bf9f9ce9f832/tests%2Fui%2Ftoplevel_ref_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg.stderr?ref=e8de57c20dd9e529d6f27d35ad70bf9f9ce9f832", "patch": "@@ -1,34 +1,45 @@\n error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n-  --> $DIR/toplevel_ref_arg.rs:10:9\n+  --> $DIR/toplevel_ref_arg.rs:20:9\n    |\n LL |     let ref _x = 1;\n    |     ----^^^^^^----- help: try: `let _x = &1;`\n    |\n    = note: `-D clippy::toplevel-ref-arg` implied by `-D warnings`\n \n error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n-  --> $DIR/toplevel_ref_arg.rs:12:9\n+  --> $DIR/toplevel_ref_arg.rs:22:9\n    |\n LL |     let ref _y: (&_, u8) = (&1, 2);\n    |     ----^^^^^^--------------------- help: try: `let _y: &(&_, u8) = &(&1, 2);`\n \n error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n-  --> $DIR/toplevel_ref_arg.rs:14:9\n+  --> $DIR/toplevel_ref_arg.rs:24:9\n    |\n LL |     let ref _z = 1 + 2;\n    |     ----^^^^^^--------- help: try: `let _z = &(1 + 2);`\n \n error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n-  --> $DIR/toplevel_ref_arg.rs:16:9\n+  --> $DIR/toplevel_ref_arg.rs:26:9\n    |\n LL |     let ref mut _z = 1 + 2;\n    |     ----^^^^^^^^^^--------- help: try: `let _z = &mut (1 + 2);`\n \n error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n-  --> $DIR/toplevel_ref_arg.rs:21:9\n+  --> $DIR/toplevel_ref_arg.rs:31:9\n    |\n LL |     let ref _x = vec![1, 2, 3];\n    |     ----^^^^^^----------------- help: try: `let _x = &vec![1, 2, 3];`\n \n-error: aborting due to 5 previous errors\n+error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n+  --> $DIR/toplevel_ref_arg.rs:11:13\n+   |\n+LL |         let ref _y = 42;\n+   |         ----^^^^^^------ help: try: `let _y = &42;`\n+...\n+LL |         gen_binding!();\n+   |         --------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 6 previous errors\n "}, {"sha": "1a493fbce0ef31d8f16b481dd29c441e2d67e05c", "filename": "tests/ui/toplevel_ref_arg_non_rustfix.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e8de57c20dd9e529d6f27d35ad70bf9f9ce9f832/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8de57c20dd9e529d6f27d35ad70bf9f9ce9f832/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.rs?ref=e8de57c20dd9e529d6f27d35ad70bf9f9ce9f832", "patch": "@@ -1,11 +1,33 @@\n+// aux-build:macro_rules.rs\n+\n #![warn(clippy::toplevel_ref_arg)]\n #![allow(unused)]\n \n+#[macro_use]\n+extern crate macro_rules;\n+\n fn the_answer(ref mut x: u8) {\n     *x = 42;\n }\n \n+macro_rules! gen_function {\n+    () => {\n+        fn fun_example(ref _x: usize) {}\n+    };\n+}\n+\n fn main() {\n     let mut x = 0;\n     the_answer(x);\n+\n+    // lint in macro\n+    #[allow(unused)]\n+    {\n+        gen_function!();\n+    }\n+\n+    // do not lint in external macro\n+    {\n+        ref_arg_function!();\n+    }\n }"}, {"sha": "6c36141a58c6557ad5db5788556876b512e68340", "filename": "tests/ui/toplevel_ref_arg_non_rustfix.stderr", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e8de57c20dd9e529d6f27d35ad70bf9f9ce9f832/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8de57c20dd9e529d6f27d35ad70bf9f9ce9f832/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.stderr?ref=e8de57c20dd9e529d6f27d35ad70bf9f9ce9f832", "patch": "@@ -1,10 +1,21 @@\n error: `ref` directly on a function argument is ignored. Consider using a reference type instead.\n-  --> $DIR/toplevel_ref_arg_non_rustfix.rs:4:15\n+  --> $DIR/toplevel_ref_arg_non_rustfix.rs:9:15\n    |\n LL | fn the_answer(ref mut x: u8) {\n    |               ^^^^^^^^^\n    |\n    = note: `-D clippy::toplevel-ref-arg` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: `ref` directly on a function argument is ignored. Consider using a reference type instead.\n+  --> $DIR/toplevel_ref_arg_non_rustfix.rs:15:24\n+   |\n+LL |         fn fun_example(ref _x: usize) {}\n+   |                        ^^^^^^\n+...\n+LL |         gen_function!();\n+   |         ---------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n "}]}