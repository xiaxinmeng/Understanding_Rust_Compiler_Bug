{"sha": "9ba92972ed6a1a39afa5993da97e016eea907be2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliYTkyOTcyZWQ2YTFhMzlhZmE1OTkzZGE5N2UwMTZlZWE5MDdiZTI=", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2021-03-24T15:54:20Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2021-03-24T16:54:13Z"}, "message": "Don't call `item` on modules for json renderer\n\nCloses #80664", "tree": {"sha": "5559412e5521051f794cf4254f9ec335b0e80810", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5559412e5521051f794cf4254f9ec335b0e80810"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ba92972ed6a1a39afa5993da97e016eea907be2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ba92972ed6a1a39afa5993da97e016eea907be2", "html_url": "https://github.com/rust-lang/rust/commit/9ba92972ed6a1a39afa5993da97e016eea907be2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ba92972ed6a1a39afa5993da97e016eea907be2/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce21447c01c8ea6ce4f4c9dd2c18266439200f1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce21447c01c8ea6ce4f4c9dd2c18266439200f1d", "html_url": "https://github.com/rust-lang/rust/commit/ce21447c01c8ea6ce4f4c9dd2c18266439200f1d"}], "stats": {"total": 67, "additions": 64, "deletions": 3}, "files": [{"sha": "4e0f3a4e3c31737208e477adb5abdef1d86037c5", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9ba92972ed6a1a39afa5993da97e016eea907be2/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba92972ed6a1a39afa5993da97e016eea907be2/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=9ba92972ed6a1a39afa5993da97e016eea907be2", "patch": "@@ -13,6 +13,11 @@ crate trait FormatRenderer<'tcx>: Sized {\n     /// Gives a description of the renderer. Used for performance profiling.\n     fn descr() -> &'static str;\n \n+    /// Whether to call `item` recursivly for modules\n+    ///\n+    /// This is true for html, and false for json. See #80664\n+    const RUN_ON_MODULE: bool;\n+\n     /// Sets up any state required for the renderer. When this is called the cache has already been\n     /// populated.\n     fn init(\n@@ -68,7 +73,7 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n \n     let unknown = Symbol::intern(\"<unknown item>\");\n     while let Some((mut cx, item)) = work.pop() {\n-        if item.is_mod() {\n+        if item.is_mod() && T::RUN_ON_MODULE {\n             // modules are special because they add a namespace. We also need to\n             // recurse into the items of the module as well.\n             let name = item.name.as_ref().unwrap().to_string();"}, {"sha": "0ffb4d616da1a1f0ad76444eec83651a55e2daa9", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ba92972ed6a1a39afa5993da97e016eea907be2/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba92972ed6a1a39afa5993da97e016eea907be2/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=9ba92972ed6a1a39afa5993da97e016eea907be2", "patch": "@@ -290,6 +290,8 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         \"html\"\n     }\n \n+    const RUN_ON_MODULE: bool = true;\n+\n     fn init(\n         mut krate: clean::Crate,\n         options: RenderOptions,"}, {"sha": "6da0d8816408c1220507930f57d0096e156a25f6", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ba92972ed6a1a39afa5993da97e016eea907be2/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba92972ed6a1a39afa5993da97e016eea907be2/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=9ba92972ed6a1a39afa5993da97e016eea907be2", "patch": "@@ -179,7 +179,8 @@ fn from_clean_item_kind(item: clean::ItemKind, tcx: TyCtxt<'_>, name: &Option<Sy\n             bounds: g.into_iter().map(Into::into).collect(),\n             default: t.map(Into::into),\n         },\n-        StrippedItem(inner) => from_clean_item_kind(*inner, tcx, name),\n+        // `convert_item` early returns `None` for striped items\n+        StrippedItem(_) => unreachable!(),\n         PrimitiveItem(_) | KeywordItem(_) => {\n             panic!(\"{:?} is not supported for JSON output\", item)\n         }"}, {"sha": "5d9c598549e0e298f297f5180b5e7132b8865dc0", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ba92972ed6a1a39afa5993da97e016eea907be2/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba92972ed6a1a39afa5993da97e016eea907be2/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=9ba92972ed6a1a39afa5993da97e016eea907be2", "patch": "@@ -129,6 +129,8 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n         \"json\"\n     }\n \n+    const RUN_ON_MODULE: bool = false;\n+\n     fn init(\n         krate: clean::Crate,\n         options: RenderOptions,\n@@ -169,8 +171,10 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                 e.impls = self.get_impls(id)\n             }\n             let removed = self.index.borrow_mut().insert(from_def_id(id), new_item.clone());\n+\n             // FIXME(adotinthevoid): Currently, the index is duplicated. This is a sanity check\n-            // to make sure the items are unique.\n+            // to make sure the items are unique. The main place this happens is when an item, is\n+            // reexported in more than one place. See `rustdoc-json/reexport/in_root_and_mod`\n             if let Some(old_item) = removed {\n                 assert_eq!(old_item, new_item);\n             }"}, {"sha": "e3cecbdd7ff2fbc3a9913a1200edbfe9c47e4356", "filename": "src/test/rustdoc-json/reexport/in_root_and_mod.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9ba92972ed6a1a39afa5993da97e016eea907be2/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba92972ed6a1a39afa5993da97e016eea907be2/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod.rs?ref=9ba92972ed6a1a39afa5993da97e016eea907be2", "patch": "@@ -0,0 +1,15 @@\n+#![feature(no_core)]\n+#![no_core]\n+\n+mod foo {\n+    // @set foo_id = in_root_and_mod.json \"$.index[*][?(@.name=='Foo')].id\"\n+    pub struct Foo;\n+}\n+\n+// @has - \"$.index[*][?(@.name=='in_root_and_mod')].inner.items[*]\" $foo_id\n+pub use foo::Foo;\n+\n+pub mod bar {\n+    // @has - \"$.index[*][?(@.name=='bar')].inner.items[*]\" $foo_id\n+    pub use crate::foo::Foo;\n+}"}, {"sha": "8adb05f7be88b9d37570dc05f493529db946edd8", "filename": "src/test/rustdoc-json/reexport/in_root_and_mod_pub.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9ba92972ed6a1a39afa5993da97e016eea907be2/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod_pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba92972ed6a1a39afa5993da97e016eea907be2/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod_pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod_pub.rs?ref=9ba92972ed6a1a39afa5993da97e016eea907be2", "patch": "@@ -0,0 +1,20 @@\n+#![feature(no_core)]\n+#![no_core]\n+\n+pub mod foo {\n+    // @set bar_id = in_root_and_mod_pub.json \"$.index[*][?(@.name=='Bar')].id\"\n+    // @has - \"$.index[*][?(@.name=='foo')].inner.items[*]\" $bar_id\n+    pub struct Bar;\n+}\n+\n+// @set root_import_id = - \"$.index[*][?(@.inner.span=='foo::Bar')].id\"\n+// @is - \"$.index[*][?(@.inner.span=='foo::Bar')].inner.id\" $bar_id\n+// @has - \"$.index[*][?(@.name=='in_root_and_mod_pub')].inner.items[*]\" $root_import_id\n+pub use foo::Bar;\n+\n+pub mod baz {\n+    // @set baz_import_id = - \"$.index[*][?(@.inner.span=='crate::foo::Bar')].id\"\n+    // @is - \"$.index[*][?(@.inner.span=='crate::foo::Bar')].inner.id\" $bar_id\n+    // @has - \"$.index[*][?(@.name=='baz')].inner.items[*]\" $baz_import_id\n+    pub use crate::foo::Bar;\n+}"}, {"sha": "fb8296f23374ae3bd20358c42ba36a3055ec8a1c", "filename": "src/test/rustdoc-json/reexport/rename_private.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9ba92972ed6a1a39afa5993da97e016eea907be2/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ba92972ed6a1a39afa5993da97e016eea907be2/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_private.rs?ref=9ba92972ed6a1a39afa5993da97e016eea907be2", "patch": "@@ -0,0 +1,14 @@\n+// edition:2018\n+\n+#![no_core]\n+#![feature(no_core)]\n+// @!has rename_private.json \"$.index[*][?(@.name=='inner')]\"\n+mod inner {\n+    // @!has - \"$.index[*][?(@.name=='Public')]\"\n+    pub struct Public;\n+}\n+\n+// @set newname_id = - \"$.index[*][?(@.name=='NewName')].id\"\n+// @is - \"$.index[*][?(@.name=='NewName')].kind\" \\\"struct\\\"\n+// @has - \"$.index[*][?(@.name=='rename_private')].inner.items[*]\" $newname_id\n+pub use inner::Public as NewName;"}]}