{"sha": "1ac01e16cf8d85334c25d68fc31db1beac740fc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYzAxZTE2Y2Y4ZDg1MzM0YzI1ZDY4ZmMzMWRiMWJlYWM3NDBmYzA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-07-16T22:33:30Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-07-16T22:34:25Z"}, "message": "Ensure that functions that should return a value do; issue 41", "tree": {"sha": "3dad7060b44ff869681749f9d5eb14bff7d33fc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dad7060b44ff869681749f9d5eb14bff7d33fc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ac01e16cf8d85334c25d68fc31db1beac740fc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ac01e16cf8d85334c25d68fc31db1beac740fc0", "html_url": "https://github.com/rust-lang/rust/commit/1ac01e16cf8d85334c25d68fc31db1beac740fc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ac01e16cf8d85334c25d68fc31db1beac740fc0/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d413af822aa6249c83efa0fec6fef2570bee232", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d413af822aa6249c83efa0fec6fef2570bee232", "html_url": "https://github.com/rust-lang/rust/commit/4d413af822aa6249c83efa0fec6fef2570bee232"}], "stats": {"total": 51, "additions": 45, "deletions": 6}, "files": [{"sha": "62ae1f677beb3e184214adb6b3cc831d6a68b52d", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1ac01e16cf8d85334c25d68fc31db1beac740fc0/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/1ac01e16cf8d85334c25d68fc31db1beac740fc0/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=1ac01e16cf8d85334c25d68fc31db1beac740fc0", "patch": "@@ -13,7 +13,8 @@ type ltype =\n \n type fn_ctx = {\n   fnctx_return_type: Ast.ty;\n-  fnctx_is_iter: bool\n+  fnctx_is_iter: bool;\n+  mutable fnctx_just_saw_ret: bool\n }\n \n exception Type_error of string * Ast.ty\n@@ -627,10 +628,19 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n   (* Again as above, we explicitly curry [fn_ctx] to avoid threading it\n    * through these functions. *)\n   let check_stmt (fn_ctx:fn_ctx) : (Ast.stmt -> unit) =\n+    let check_ret (stmt:Ast.stmt) : unit =\n+      fn_ctx.fnctx_just_saw_ret <-\n+        match stmt.Common.node with\n+            Ast.STMT_ret _ | Ast.STMT_be _ | Ast.STMT_fail\n+          | Ast.STMT_yield _ -> true\n+          | _ -> false\n+    in\n+\n     let rec check_block (block:Ast.block) : unit =\n       Array.iter check_stmt block.Common.node\n \n     and check_stmt (stmt:Ast.stmt) : unit =\n+      check_ret stmt;\n       match stmt.Common.node with\n           Ast.STMT_spawn (dst, _, callee, args) ->\n             infer_lval Ast.TY_task dst;\n@@ -841,7 +851,11 @@ let process_crate (cx:Semant.ctxt) (crate:Ast.crate) : unit =\n \n   let visitor (cx:Semant.ctxt) (inner:Walk.visitor) : Walk.visitor =\n     let push_fn_ctx (ret_ty:Ast.ty) (is_iter:bool) =\n-      let fn_ctx = { fnctx_return_type = ret_ty; fnctx_is_iter = is_iter } in\n+      let fn_ctx = {\n+        fnctx_return_type = ret_ty;\n+        fnctx_is_iter = is_iter;\n+        fnctx_just_saw_ret = false\n+      } in\n       Stack.push fn_ctx fn_ctx_stack\n     in\n \n@@ -852,10 +866,19 @@ let process_crate (cx:Semant.ctxt) (crate:Ast.crate) : unit =\n       push_fn_ctx (Common.option_get ret_ty) is_iter\n     in\n \n+    let finish_function (item_id:Common.node_id) =\n+      let fn_ctx = Stack.pop fn_ctx_stack in\n+      if not fn_ctx.fnctx_just_saw_ret &&\n+          fn_ctx.fnctx_return_type <> Ast.TY_nil &&\n+          not fn_ctx.fnctx_is_iter then\n+        Common.err (Some item_id) \"this function must return a value\"\n+    in\n+\n     let visit_mod_item_pre _ _ item =\n       let { Common.node = item; Common.id = item_id } = item in\n       match item.Ast.decl_item with\n-          Ast.MOD_ITEM_fn _ ->\n+          Ast.MOD_ITEM_fn _ when\n+              not (Hashtbl.mem cx.Semant.ctxt_required_items item_id) ->\n             let fn_ty = Hashtbl.find cx.Semant.ctxt_all_item_types item_id in\n             begin\n               match fn_ty with\n@@ -867,9 +890,12 @@ let process_crate (cx:Semant.ctxt) (crate:Ast.crate) : unit =\n         | _ -> ()\n     in\n     let visit_mod_item_post _ _ item =\n-      verify_main item.Common.id;\n+      let item_id = item.Common.id in\n+      verify_main item_id;\n       match item.Common.node.Ast.decl_item with\n-          Ast.MOD_ITEM_fn _ -> ignore (Stack.pop fn_ctx_stack)\n+          Ast.MOD_ITEM_fn _ when\n+              not (Hashtbl.mem cx.Semant.ctxt_required_items item_id) ->\n+            finish_function item_id\n         | _ -> ()\n     in\n \n@@ -884,7 +910,7 @@ let process_crate (cx:Semant.ctxt) (crate:Ast.crate) : unit =\n               \"Type.visit_obj_fn_pre: item doesn't have an object type (%a)\"\n               Ast.sprintf_ty obj_ty\n     in\n-    let visit_obj_fn_post _ _ _ = ignore (Stack.pop fn_ctx_stack) in\n+    let visit_obj_fn_post _ _ item = finish_function (item.Common.id) in\n \n     let visit_obj_drop_pre _ _ = push_fn_ctx Ast.TY_nil false in\n     let visit_obj_drop_post _ _ = ignore (Stack.pop fn_ctx_stack) in"}, {"sha": "e171e617b945ea41ddd4c20b0f26c229c04974cf", "filename": "src/lib/_io.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ac01e16cf8d85334c25d68fc31db1beac740fc0/src%2Flib%2F_io.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ac01e16cf8d85334c25d68fc31db1beac740fc0/src%2Flib%2F_io.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_io.rs?ref=1ac01e16cf8d85334c25d68fc31db1beac740fc0", "patch": "@@ -15,6 +15,7 @@ fn new_buf() -> vec[u8] {\n   }\n   // FIXME (issue #93): should be:\n   // ret _vec.alloc[u8](default_bufsz());\n+  ret v;\n }\n \n fn new_buf_reader(str s) -> buf_reader {"}, {"sha": "062d8bf146f21f4011dbffc994164d7615b286e4", "filename": "src/lib/_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ac01e16cf8d85334c25d68fc31db1beac740fc0/src%2Flib%2F_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ac01e16cf8d85334c25d68fc31db1beac740fc0/src%2Flib%2F_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_str.rs?ref=1ac01e16cf8d85334c25d68fc31db1beac740fc0", "patch": "@@ -9,6 +9,7 @@ native \"rust\" mod rustrt {\n }\n \n fn is_utf8(vec[u8] v) -> bool {\n+  fail; // FIXME\n }\n \n fn alloc(uint n_bytes) -> str {"}, {"sha": "82d4cf6fa3c0b5ce32f14f5506699be13dca42ca", "filename": "src/test/compile-fail/impure-pred.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ac01e16cf8d85334c25d68fc31db1beac740fc0/src%2Ftest%2Fcompile-fail%2Fimpure-pred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ac01e16cf8d85334c25d68fc31db1beac740fc0/src%2Ftest%2Fcompile-fail%2Fimpure-pred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpure-pred.rs?ref=1ac01e16cf8d85334c25d68fc31db1beac740fc0", "patch": "@@ -9,6 +9,7 @@ io fn lt(int a, int b) -> bool {\n   let port[int] p = port();\n   let chan[int] c = chan(p);\n   c <| 10;\n+  ret true;\n }\n \n fn main() {"}, {"sha": "34fb4105b8e00620331b3e85c00149e7a50cd372", "filename": "src/test/compile-fail/missing-return.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1ac01e16cf8d85334c25d68fc31db1beac740fc0/src%2Ftest%2Fcompile-fail%2Fmissing-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ac01e16cf8d85334c25d68fc31db1beac740fc0/src%2Ftest%2Fcompile-fail%2Fmissing-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing-return.rs?ref=1ac01e16cf8d85334c25d68fc31db1beac740fc0", "patch": "@@ -0,0 +1,9 @@\n+// error-pattern: return\n+\n+fn f() -> int {\n+}\n+\n+fn main() {\n+  f();\n+}\n+"}, {"sha": "3687de7a71507eb6905ddfa55b62d85cdde1d2be", "filename": "src/test/run-pass/complex.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ac01e16cf8d85334c25d68fc31db1beac740fc0/src%2Ftest%2Frun-pass%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ac01e16cf8d85334c25d68fc31db1beac740fc0/src%2Ftest%2Frun-pass%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomplex.rs?ref=1ac01e16cf8d85334c25d68fc31db1beac740fc0", "patch": "@@ -21,6 +21,7 @@ fn foo(int x) -> int {\n   let t z;\n   z = 0x55;\n   foo(z);\n+  ret 0;\n }\n \n fn main() {"}]}