{"sha": "a36ff81753165b41eef78fccbde4ea11e2a32d7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzNmZmODE3NTMxNjViNDFlZWY3OGZjY2JkZTRlYTExZTJhMzJkN2I=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-08-20T14:09:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-20T14:09:35Z"}, "message": "Rollup merge of #35800 - matthew-piziak:mul-div-examples, r=steveklabnik\n\ndemonstrate `RHS != Self` use cases for `Mul` and `Div`\n\nVector-scalar multipication is a good usecase for this. Thanks #rust!", "tree": {"sha": "63be5c1e97cb7fc1480aa99017db5bbf20d823ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63be5c1e97cb7fc1480aa99017db5bbf20d823ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a36ff81753165b41eef78fccbde4ea11e2a32d7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a36ff81753165b41eef78fccbde4ea11e2a32d7b", "html_url": "https://github.com/rust-lang/rust/commit/a36ff81753165b41eef78fccbde4ea11e2a32d7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a36ff81753165b41eef78fccbde4ea11e2a32d7b/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad17e0c277b74a33aa8a20f4e66627260bc87232", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad17e0c277b74a33aa8a20f4e66627260bc87232", "html_url": "https://github.com/rust-lang/rust/commit/ad17e0c277b74a33aa8a20f4e66627260bc87232"}, {"sha": "9563f14eb5d77d992f7cde5db227f8c83351427b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9563f14eb5d77d992f7cde5db227f8c83351427b", "html_url": "https://github.com/rust-lang/rust/commit/9563f14eb5d77d992f7cde5db227f8c83351427b"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "34d1109577ebadc8fafc26d7231ae64088e39139", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/a36ff81753165b41eef78fccbde4ea11e2a32d7b/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a36ff81753165b41eef78fccbde4ea11e2a32d7b/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=a36ff81753165b41eef78fccbde4ea11e2a32d7b", "patch": "@@ -319,6 +319,37 @@ sub_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///     Foo * Foo;\n /// }\n /// ```\n+///\n+/// Note that `RHS = Self` by default, but this is not mandatory. Here is an\n+/// implementation which enables multiplication of vectors by scalars, as is\n+/// done in linear algebra.\n+///\n+/// ```\n+/// use std::ops::Mul;\n+///\n+/// struct Scalar {value: usize};\n+///\n+/// #[derive(Debug)]\n+/// struct Vector {value: Vec<usize>};\n+///\n+/// impl Mul<Vector> for Scalar {\n+///     type Output = Vector;\n+///\n+///     fn mul(self, rhs: Vector) -> Vector {\n+///         Vector {value: rhs.value.iter().map(|v| self.value * v).collect()}\n+///     }\n+/// }\n+///\n+/// impl PartialEq<Vector> for Vector {\n+///     fn eq(&self, other: &Self) -> bool {\n+///         self.value == other.value\n+///     }\n+/// }\n+///\n+/// let scalar = Scalar{value: 3};\n+/// let vector = Vector{value: vec![2, 4, 6]};\n+/// assert_eq!(scalar * vector, Vector{value: vec![6, 12, 18]});\n+/// ```\n #[lang = \"mul\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Mul<RHS=Self> {\n@@ -373,6 +404,37 @@ mul_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///     Foo / Foo;\n /// }\n /// ```\n+///\n+/// Note that `RHS = Self` by default, but this is not mandatory. Here is an\n+/// implementation which enables division of vectors by scalars, as is done in\n+/// linear algebra.\n+///\n+/// ```\n+/// use std::ops::Div;\n+///\n+/// struct Scalar {value: f32};\n+///\n+/// #[derive(Debug)]\n+/// struct Vector {value: Vec<f32>};\n+///\n+/// impl Div<Scalar> for Vector {\n+///     type Output = Vector;\n+///\n+///     fn div(self, rhs: Scalar) -> Vector {\n+///         Vector {value: self.value.iter().map(|v| v / rhs.value).collect()}\n+///     }\n+/// }\n+///\n+/// impl PartialEq<Vector> for Vector {\n+///     fn eq(&self, other: &Self) -> bool {\n+///         self.value == other.value\n+///     }\n+/// }\n+///\n+/// let scalar = Scalar{value: 2f32};\n+/// let vector = Vector{value: vec![2f32, 4f32, 6f32]};\n+/// assert_eq!(vector / scalar, Vector{value: vec![1f32, 2f32, 3f32]});\n+/// ```\n #[lang = \"div\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Div<RHS=Self> {"}]}