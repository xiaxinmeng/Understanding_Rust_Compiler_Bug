{"sha": "50d9473856a0dd138c6e293d8d0882756eb5d68a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZDk0NzM4NTZhMGRkMTM4YzZlMjkzZDhkMDg4Mjc1NmViNWQ2OGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-25T16:21:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-25T16:21:26Z"}, "message": "Auto merge of #3808 - mikerite:useless-format-suggestions, r=oli-obk\n\nFix `useless_format` suggestions", "tree": {"sha": "be7183491710ca23ae98b9a4a834f661f811b726", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be7183491710ca23ae98b9a4a834f661f811b726"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50d9473856a0dd138c6e293d8d0882756eb5d68a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50d9473856a0dd138c6e293d8d0882756eb5d68a", "html_url": "https://github.com/rust-lang/rust/commit/50d9473856a0dd138c6e293d8d0882756eb5d68a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50d9473856a0dd138c6e293d8d0882756eb5d68a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2141ebf69581ab3865ea8c83545e1941dd4d38af", "url": "https://api.github.com/repos/rust-lang/rust/commits/2141ebf69581ab3865ea8c83545e1941dd4d38af", "html_url": "https://github.com/rust-lang/rust/commit/2141ebf69581ab3865ea8c83545e1941dd4d38af"}, {"sha": "0182a6640e27aacd11782e3d4344c4564c1f8bc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0182a6640e27aacd11782e3d4344c4564c1f8bc8", "html_url": "https://github.com/rust-lang/rust/commit/0182a6640e27aacd11782e3d4344c4564c1f8bc8"}], "stats": {"total": 156, "additions": 104, "deletions": 52}, "files": [{"sha": "ac9286454878432c0ef7d71f4f0483d6b46d833a", "filename": "ci/base-tests.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50d9473856a0dd138c6e293d8d0882756eb5d68a/ci%2Fbase-tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/50d9473856a0dd138c6e293d8d0882756eb5d68a/ci%2Fbase-tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fbase-tests.sh?ref=50d9473856a0dd138c6e293d8d0882756eb5d68a", "patch": "@@ -59,7 +59,7 @@ rustup override set nightly\n # avoid loop spam and allow cmds with exit status != 0\n set +ex\n \n-for file in `find tests -not -path \"tests/ui/format.rs\" -not -path \"tests/ui/formatting.rs\" -not -path \"tests/ui/empty_line_after_outer_attribute.rs\" -not -path \"tests/ui/double_parens.rs\" -not -path \"tests/ui/doc.rs\" -not -path \"tests/ui/unused_unit.rs\" | grep \"\\.rs$\"` ; do\n+for file in `find tests -not -path \"tests/ui/formatting.rs\" -not -path \"tests/ui/empty_line_after_outer_attribute.rs\" -not -path \"tests/ui/double_parens.rs\" -not -path \"tests/ui/doc.rs\" -not -path \"tests/ui/unused_unit.rs\" | grep \"\\.rs$\"` ; do\n   rustfmt ${file} --check\n   if [ $? -ne 0 ]; then\n     echo \"${file} needs reformatting!\""}, {"sha": "ba956b77f46e4f039c2bd23089f69335036cb901", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/50d9473856a0dd138c6e293d8d0882756eb5d68a/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d9473856a0dd138c6e293d8d0882756eb5d68a/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=50d9473856a0dd138c6e293d8d0882756eb5d68a", "patch": "@@ -5,11 +5,12 @@ use crate::utils::{\n };\n use if_chain::if_chain;\n use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::ty;\n use rustc::{declare_tool_lint, lint_array};\n use rustc_errors::Applicability;\n use syntax::ast::LitKind;\n+use syntax::source_map::Span;\n \n /// **What it does:** Checks for the use of `format!(\"string literal with no\n /// argument\")` and `format!(\"{}\", foo)` where `foo` is a string.\n@@ -82,14 +83,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                                 }\n                             };\n \n-                            span_lint_and_then(cx, USELESS_FORMAT, span, \"useless use of `format!`\", |db| {\n-                                db.span_suggestion(\n-                                    expr.span,\n-                                    message,\n-                                    sugg,\n-                                    Applicability::MachineApplicable,\n-                                );\n-                            });\n+                            span_useless_format(cx, span, message, sugg);\n                         }\n                     }\n                 },\n@@ -98,14 +92,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     if let ExprKind::Tup(ref tup) = matchee.node {\n                         if tup.is_empty() {\n                             let sugg = format!(\"{}.to_string()\", snippet(cx, expr.span, \"<expr>\").into_owned());\n-                            span_lint_and_then(cx, USELESS_FORMAT, span, \"useless use of `format!`\", |db| {\n-                                db.span_suggestion(\n-                                    span,\n-                                    \"consider using .to_string()\",\n-                                    sugg,\n-                                    Applicability::MachineApplicable, // snippet\n-                                );\n-                            });\n+                            span_useless_format(cx, span, \"consider using .to_string()\", sugg);\n                         }\n                     }\n                 },\n@@ -115,6 +102,25 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     }\n }\n \n+fn span_useless_format<'a, 'tcx: 'a, T: LintContext<'tcx>>(cx: &'a T, span: Span, help: &str, mut sugg: String) {\n+    let to_replace = span.source_callsite();\n+\n+    // The callsite span contains the statement semicolon for some reason.\n+    let snippet = snippet(cx, to_replace, \"..\");\n+    if snippet.ends_with(';') {\n+        sugg.push(';');\n+    }\n+\n+    span_lint_and_then(cx, USELESS_FORMAT, span, \"useless use of `format!`\", |db| {\n+        db.span_suggestion(\n+            to_replace,\n+            help,\n+            sugg,\n+            Applicability::MachineApplicable, // snippet\n+        );\n+    });\n+}\n+\n /// Checks if the expressions matches `&[\"\"]`\n fn check_single_piece(expr: &Expr) -> bool {\n     if_chain! {"}, {"sha": "2200552430acdf213a59e0d5f2a6c1d223c0f11e", "filename": "tests/ui/format.fixed", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/50d9473856a0dd138c6e293d8d0882756eb5d68a/tests%2Fui%2Fformat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50d9473856a0dd138c6e293d8d0882756eb5d68a/tests%2Fui%2Fformat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.fixed?ref=50d9473856a0dd138c6e293d8d0882756eb5d68a", "patch": "@@ -0,0 +1,60 @@\n+// run-rustfix\n+\n+#![allow(clippy::print_literal)]\n+#![warn(clippy::useless_format)]\n+\n+struct Foo(pub String);\n+\n+macro_rules! foo {\n+  ($($t:tt)*) => (Foo(format!($($t)*)))\n+}\n+\n+fn main() {\n+    \"foo\".to_string();\n+\n+    \"foo\".to_string();\n+    format!(\"{:?}\", \"foo\"); // don't warn about debug\n+    format!(\"{:8}\", \"foo\");\n+    format!(\"{:width$}\", \"foo\", width = 8);\n+    \"foo\".to_string(); // warn when the format makes no difference\n+    \"foo\".to_string(); // warn when the format makes no difference\n+    format!(\"foo {}\", \"bar\");\n+    format!(\"{} bar\", \"foo\");\n+\n+    let arg: String = \"\".to_owned();\n+    arg.to_string();\n+    format!(\"{:?}\", arg); // don't warn about debug\n+    format!(\"{:8}\", arg);\n+    format!(\"{:width$}\", arg, width = 8);\n+    arg.to_string(); // warn when the format makes no difference\n+    arg.to_string(); // warn when the format makes no difference\n+    format!(\"foo {}\", arg);\n+    format!(\"{} bar\", arg);\n+\n+    // we don\u2019t want to warn for non-string args, see #697\n+    format!(\"{}\", 42);\n+    format!(\"{:?}\", 42);\n+    format!(\"{:+}\", 42);\n+    format!(\"foo {}\", 42);\n+    format!(\"{} bar\", 42);\n+\n+    // we only want to warn about `format!` itself\n+    println!(\"foo\");\n+    println!(\"{}\", \"foo\");\n+    println!(\"foo {}\", \"foo\");\n+    println!(\"{}\", 42);\n+    println!(\"foo {}\", 42);\n+\n+    // A format! inside a macro should not trigger a warning\n+    foo!(\"should not warn\");\n+\n+    // precision on string means slicing without panicking on size:\n+    format!(\"{:.1}\", \"foo\"); // could be \"foo\"[..1]\n+    format!(\"{:.10}\", \"foo\"); // could not be \"foo\"[..10]\n+    format!(\"{:.prec$}\", \"foo\", prec = 1);\n+    format!(\"{:.prec$}\", \"foo\", prec = 10);\n+\n+    42.to_string();\n+    let x = std::path::PathBuf::from(\"/bar/foo/qux\");\n+    x.display().to_string();\n+}"}, {"sha": "e974a4957eaaa0406bd8d14ea44f306993c3ec97", "filename": "tests/ui/format.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50d9473856a0dd138c6e293d8d0882756eb5d68a/tests%2Fui%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d9473856a0dd138c6e293d8d0882756eb5d68a/tests%2Fui%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.rs?ref=50d9473856a0dd138c6e293d8d0882756eb5d68a", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n #![allow(clippy::print_literal)]\n #![warn(clippy::useless_format)]\n "}, {"sha": "236ac74b2e92e59922ef03aa4b15a2784012ebd3", "filename": "tests/ui/format.stderr", "status": "modified", "additions": 18, "deletions": 34, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/50d9473856a0dd138c6e293d8d0882756eb5d68a/tests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50d9473856a0dd138c6e293d8d0882756eb5d68a/tests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.stderr?ref=50d9473856a0dd138c6e293d8d0882756eb5d68a", "patch": "@@ -1,74 +1,58 @@\n error: useless use of `format!`\n-  --> $DIR/format.rs:11:5\n+  --> $DIR/format.rs:13:5\n    |\n LL |     format!(\"foo\");\n-   |     ^^^^^^^^^^^^^^^ help: consider using .to_string(): `\"foo\".to_string()`\n+   |     ^^^^^^^^^^^^^^^ help: consider using .to_string(): `\"foo\".to_string();`\n    |\n    = note: `-D clippy::useless-format` implied by `-D warnings`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:13:5\n+  --> $DIR/format.rs:15:5\n    |\n LL |     format!(\"{}\", \"foo\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `\"foo\".to_string()`\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `\"foo\".to_string();`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:17:5\n+  --> $DIR/format.rs:19:5\n    |\n LL |     format!(\"{:+}\", \"foo\"); // warn when the format makes no difference\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `\"foo\".to_string()`\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `\"foo\".to_string();`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:18:5\n+  --> $DIR/format.rs:20:5\n    |\n LL |     format!(\"{:<}\", \"foo\"); // warn when the format makes no difference\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `\"foo\".to_string()`\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `\"foo\".to_string();`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:23:5\n+  --> $DIR/format.rs:25:5\n    |\n LL |     format!(\"{}\", arg);\n-   |     ^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `arg.to_string()`\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   |     ^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `arg.to_string();`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:27:5\n+  --> $DIR/format.rs:29:5\n    |\n LL |     format!(\"{:+}\", arg); // warn when the format makes no difference\n-   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `arg.to_string()`\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `arg.to_string();`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:28:5\n+  --> $DIR/format.rs:30:5\n    |\n LL |     format!(\"{:<}\", arg); // warn when the format makes no difference\n-   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `arg.to_string()`\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `arg.to_string();`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:55:5\n+  --> $DIR/format.rs:57:5\n    |\n LL |     format!(\"{}\", 42.to_string());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: `to_string()` is enough: `42.to_string()`\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: `to_string()` is enough: `42.to_string();`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:57:5\n+  --> $DIR/format.rs:59:5\n    |\n LL |     format!(\"{}\", x.display().to_string());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: `to_string()` is enough: `x.display().to_string()`\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: `to_string()` is enough: `x.display().to_string();`\n \n error: aborting due to 9 previous errors\n "}]}