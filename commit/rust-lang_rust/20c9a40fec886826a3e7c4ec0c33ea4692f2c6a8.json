{"sha": "20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwYzlhNDBmZWM4ODY4MjZhM2U3YzRlYzBjMzNlYTQ2OTJmMmM2YTg=", "commit": {"author": {"name": "Maxim Zholobak", "email": "maxim.zholobak@grammarly.com", "date": "2020-02-22T14:07:05Z"}, "committer": {"name": "Maxim Zholobak", "email": "maxim.zholobak@grammarly.com", "date": "2020-02-22T14:17:31Z"}, "message": "Rename CodeMap to SourceMap follow up", "tree": {"sha": "932068f21449f5ed9dbe9aef74563c1f072a54e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/932068f21449f5ed9dbe9aef74563c1f072a54e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8", "html_url": "https://github.com/rust-lang/rust/commit/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/comments", "author": {"login": "Menschenkindlein", "id": 581380, "node_id": "MDQ6VXNlcjU4MTM4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/581380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Menschenkindlein", "html_url": "https://github.com/Menschenkindlein", "followers_url": "https://api.github.com/users/Menschenkindlein/followers", "following_url": "https://api.github.com/users/Menschenkindlein/following{/other_user}", "gists_url": "https://api.github.com/users/Menschenkindlein/gists{/gist_id}", "starred_url": "https://api.github.com/users/Menschenkindlein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Menschenkindlein/subscriptions", "organizations_url": "https://api.github.com/users/Menschenkindlein/orgs", "repos_url": "https://api.github.com/users/Menschenkindlein/repos", "events_url": "https://api.github.com/users/Menschenkindlein/events{/privacy}", "received_events_url": "https://api.github.com/users/Menschenkindlein/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Menschenkindlein", "id": 581380, "node_id": "MDQ6VXNlcjU4MTM4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/581380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Menschenkindlein", "html_url": "https://github.com/Menschenkindlein", "followers_url": "https://api.github.com/users/Menschenkindlein/followers", "following_url": "https://api.github.com/users/Menschenkindlein/following{/other_user}", "gists_url": "https://api.github.com/users/Menschenkindlein/gists{/gist_id}", "starred_url": "https://api.github.com/users/Menschenkindlein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Menschenkindlein/subscriptions", "organizations_url": "https://api.github.com/users/Menschenkindlein/orgs", "repos_url": "https://api.github.com/users/Menschenkindlein/repos", "events_url": "https://api.github.com/users/Menschenkindlein/events{/privacy}", "received_events_url": "https://api.github.com/users/Menschenkindlein/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03d2f5cd6c634b1fdcd26b036009aa4dce37fdfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/03d2f5cd6c634b1fdcd26b036009aa4dce37fdfc", "html_url": "https://github.com/rust-lang/rust/commit/03d2f5cd6c634b1fdcd26b036009aa4dce37fdfc"}], "stats": {"total": 226, "additions": 113, "deletions": 113}, "files": [{"sha": "1a9c5d1f13fe1608e23a1c385edf2ec3deeb289d", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8", "patch": "@@ -149,7 +149,7 @@ impl<'a> StableHashingContext<'a> {\n     #[inline]\n     pub fn source_map(&mut self) -> &mut CachingSourceMapView<'a> {\n         match self.caching_source_map {\n-            Some(ref mut cm) => cm,\n+            Some(ref mut sm) => sm,\n             ref mut none => {\n                 *none = Some(CachingSourceMapView::new(self.raw_source_map));\n                 none.as_mut().unwrap()"}, {"sha": "7b5faa2423aea80b0f2c0c398dfb85a77e3af50e", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8", "patch": "@@ -106,10 +106,10 @@ pub fn report_unstable(\n     };\n \n     let msp: MultiSpan = span.into();\n-    let cm = &sess.parse_sess.source_map();\n+    let sm = &sess.parse_sess.source_map();\n     let span_key = msp.primary_span().and_then(|sp: Span| {\n         if !sp.is_dummy() {\n-            let file = cm.lookup_char_pos(sp.lo()).file;\n+            let file = sm.lookup_char_pos(sp.lo()).file;\n             if file.name.is_macros() { None } else { Some(span) }\n         } else {\n             None"}, {"sha": "2f7d33b97ce260ba16c100b217c92e5d33389b55", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8", "patch": "@@ -47,15 +47,15 @@ pub struct NoAnn;\n impl PpAnn for NoAnn {}\n \n pub struct Comments<'a> {\n-    cm: &'a SourceMap,\n+    sm: &'a SourceMap,\n     comments: Vec<comments::Comment>,\n     current: usize,\n }\n \n impl<'a> Comments<'a> {\n-    pub fn new(cm: &'a SourceMap, filename: FileName, input: String) -> Comments<'a> {\n-        let comments = comments::gather_comments(cm, filename, input);\n-        Comments { cm, comments, current: 0 }\n+    pub fn new(sm: &'a SourceMap, filename: FileName, input: String) -> Comments<'a> {\n+        let comments = comments::gather_comments(sm, filename, input);\n+        Comments { sm, comments, current: 0 }\n     }\n \n     pub fn next(&self) -> Option<comments::Comment> {\n@@ -71,8 +71,8 @@ impl<'a> Comments<'a> {\n             if cmnt.style != comments::Trailing {\n                 return None;\n             }\n-            let span_line = self.cm.lookup_char_pos(span.hi());\n-            let comment_line = self.cm.lookup_char_pos(cmnt.pos);\n+            let span_line = self.sm.lookup_char_pos(span.hi());\n+            let comment_line = self.sm.lookup_char_pos(cmnt.pos);\n             let next = next_pos.unwrap_or_else(|| cmnt.pos + BytePos(1));\n             if span.hi() < cmnt.pos && cmnt.pos < next && span_line.line == comment_line.line {\n                 return Some(cmnt);\n@@ -95,7 +95,7 @@ crate const INDENT_UNIT: usize = 4;\n /// Requires you to pass an input filename and reader so that\n /// it can scan the input text for comments to copy forward.\n pub fn print_crate<'a>(\n-    cm: &'a SourceMap,\n+    sm: &'a SourceMap,\n     krate: &ast::Crate,\n     filename: FileName,\n     input: String,\n@@ -106,7 +106,7 @@ pub fn print_crate<'a>(\n ) -> String {\n     let mut s = State {\n         s: pp::mk_printer(),\n-        comments: Some(Comments::new(cm, filename, input)),\n+        comments: Some(Comments::new(sm, filename, input)),\n         ann,\n         is_expanded,\n     };\n@@ -522,8 +522,8 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n                 self.hardbreak();\n             }\n         }\n-        if let Some(cm) = self.comments() {\n-            cm.current += 1;\n+        if let Some(cmnts) = self.comments() {\n+            cmnts.current += 1;\n         }\n     }\n "}, {"sha": "236a7243998f6a0ee0dd6f11250a9ffd6b41a344", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8", "patch": "@@ -452,8 +452,8 @@ pub fn print_after_hir_lowering<'tcx>(\n             call_with_pp_support_hir(&s, tcx, move |annotation, krate| {\n                 debug!(\"pretty printing source code {:?}\", s);\n                 let sess = annotation.sess();\n-                let cm = sess.source_map();\n-                *out = pprust_hir::print_crate(cm, krate, src_name, src, annotation.pp_ann())\n+                let sm = sess.source_map();\n+                *out = pprust_hir::print_crate(sm, krate, src_name, src, annotation.pp_ann())\n             })\n         }\n "}, {"sha": "1f6e268b5065fc157b9eea0a25088661924086e5", "filename": "src/librustc_errors/json.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_errors%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_errors%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fjson.rs?ref=20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8", "patch": "@@ -373,13 +373,13 @@ impl DiagnosticSpan {\n \n impl DiagnosticSpanLine {\n     fn line_from_source_file(\n-        fm: &rustc_span::SourceFile,\n+        sf: &rustc_span::SourceFile,\n         index: usize,\n         h_start: usize,\n         h_end: usize,\n     ) -> DiagnosticSpanLine {\n         DiagnosticSpanLine {\n-            text: fm.get_line(index).map_or(String::new(), |l| l.into_owned()),\n+            text: sf.get_line(index).map_or(String::new(), |l| l.into_owned()),\n             highlight_start: h_start,\n             highlight_end: h_end,\n         }\n@@ -392,13 +392,13 @@ impl DiagnosticSpanLine {\n         je.sm\n             .span_to_lines(span)\n             .map(|lines| {\n-                let fm = &*lines.file;\n+                let sf = &*lines.file;\n                 lines\n                     .lines\n                     .iter()\n                     .map(|line| {\n                         DiagnosticSpanLine::line_from_source_file(\n-                            fm,\n+                            sf,\n                             line.line_index,\n                             line.start_col.0 + 1,\n                             line.end_col.0 + 1,"}, {"sha": "1a0fe3435213000aa14b28b55f426860b6b5a245", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8", "patch": "@@ -144,7 +144,7 @@ pub struct SubstitutionPart {\n impl CodeSuggestion {\n     /// Returns the assembled code suggestions, whether they should be shown with an underline\n     /// and whether the substitution only differs in capitalization.\n-    pub fn splice_lines(&self, cm: &SourceMap) -> Vec<(String, Vec<SubstitutionPart>, bool)> {\n+    pub fn splice_lines(&self, sm: &SourceMap) -> Vec<(String, Vec<SubstitutionPart>, bool)> {\n         use rustc_span::{CharPos, Pos};\n \n         fn push_trailing(\n@@ -176,7 +176,7 @@ impl CodeSuggestion {\n             .filter(|subst| {\n                 // Suggestions coming from macros can have malformed spans. This is a heavy\n                 // handed approach to avoid ICEs by ignoring the suggestion outright.\n-                let invalid = subst.parts.iter().any(|item| cm.is_valid_span(item.span).is_err());\n+                let invalid = subst.parts.iter().any(|item| sm.is_valid_span(item.span).is_err());\n                 if invalid {\n                     debug!(\"splice_lines: suggestion contains an invalid span: {:?}\", subst);\n                 }\n@@ -193,7 +193,7 @@ impl CodeSuggestion {\n                 let hi = substitution.parts.iter().map(|part| part.span.hi()).max()?;\n                 let bounding_span = Span::with_root_ctxt(lo, hi);\n                 // The different spans might belong to different contexts, if so ignore suggestion.\n-                let lines = cm.span_to_lines(bounding_span).ok()?;\n+                let lines = sm.span_to_lines(bounding_span).ok()?;\n                 assert!(!lines.lines.is_empty());\n \n                 // To build up the result, we do this for each span:\n@@ -205,36 +205,36 @@ impl CodeSuggestion {\n                 // - splice in the span substitution\n                 //\n                 // Finally push the trailing line segment of the last span\n-                let fm = &lines.file;\n-                let mut prev_hi = cm.lookup_char_pos(bounding_span.lo());\n+                let sf = &lines.file;\n+                let mut prev_hi = sm.lookup_char_pos(bounding_span.lo());\n                 prev_hi.col = CharPos::from_usize(0);\n \n-                let mut prev_line = fm.get_line(lines.lines[0].line_index);\n+                let mut prev_line = sf.get_line(lines.lines[0].line_index);\n                 let mut buf = String::new();\n \n                 for part in &substitution.parts {\n-                    let cur_lo = cm.lookup_char_pos(part.span.lo());\n+                    let cur_lo = sm.lookup_char_pos(part.span.lo());\n                     if prev_hi.line == cur_lo.line {\n                         push_trailing(&mut buf, prev_line.as_ref(), &prev_hi, Some(&cur_lo));\n                     } else {\n                         push_trailing(&mut buf, prev_line.as_ref(), &prev_hi, None);\n                         // push lines between the previous and current span (if any)\n                         for idx in prev_hi.line..(cur_lo.line - 1) {\n-                            if let Some(line) = fm.get_line(idx) {\n+                            if let Some(line) = sf.get_line(idx) {\n                                 buf.push_str(line.as_ref());\n                                 buf.push('\\n');\n                             }\n                         }\n-                        if let Some(cur_line) = fm.get_line(cur_lo.line - 1) {\n+                        if let Some(cur_line) = sf.get_line(cur_lo.line - 1) {\n                             let end = std::cmp::min(cur_line.len(), cur_lo.col.to_usize());\n                             buf.push_str(&cur_line[..end]);\n                         }\n                     }\n                     buf.push_str(&part.snippet);\n-                    prev_hi = cm.lookup_char_pos(part.span.hi());\n-                    prev_line = fm.get_line(prev_hi.line - 1);\n+                    prev_hi = sm.lookup_char_pos(part.span.hi());\n+                    prev_line = sf.get_line(prev_hi.line - 1);\n                 }\n-                let only_capitalization = is_case_difference(cm, &buf, bounding_span);\n+                let only_capitalization = is_case_difference(sm, &buf, bounding_span);\n                 // if the replacement already ends with a newline, don't print the next line\n                 if !buf.ends_with('\\n') {\n                     push_trailing(&mut buf, prev_line.as_ref(), &prev_hi, None);\n@@ -363,23 +363,23 @@ impl Handler {\n         color_config: ColorConfig,\n         can_emit_warnings: bool,\n         treat_err_as_bug: Option<usize>,\n-        cm: Option<Lrc<SourceMap>>,\n+        sm: Option<Lrc<SourceMap>>,\n     ) -> Self {\n         Self::with_tty_emitter_and_flags(\n             color_config,\n-            cm,\n+            sm,\n             HandlerFlags { can_emit_warnings, treat_err_as_bug, ..Default::default() },\n         )\n     }\n \n     pub fn with_tty_emitter_and_flags(\n         color_config: ColorConfig,\n-        cm: Option<Lrc<SourceMap>>,\n+        sm: Option<Lrc<SourceMap>>,\n         flags: HandlerFlags,\n     ) -> Self {\n         let emitter = Box::new(EmitterWriter::stderr(\n             color_config,\n-            cm,\n+            sm,\n             false,\n             false,\n             None,"}, {"sha": "c9faa299d372e0f2e2aad6f3081b02fe8365550b", "filename": "src/librustc_hir/print.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_hir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_hir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fprint.rs?ref=20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8", "patch": "@@ -140,13 +140,13 @@ pub const INDENT_UNIT: usize = 4;\n /// Requires you to pass an input filename and reader so that\n /// it can scan the input text for comments to copy forward.\n pub fn print_crate<'a>(\n-    cm: &'a SourceMap,\n+    sm: &'a SourceMap,\n     krate: &hir::Crate<'_>,\n     filename: FileName,\n     input: String,\n     ann: &'a dyn PpAnn,\n ) -> String {\n-    let mut s = State::new_from_input(cm, filename, input, ann);\n+    let mut s = State::new_from_input(sm, filename, input, ann);\n \n     // When printing the AST, we sometimes need to inject `#[no_std]` here.\n     // Since you can't compile the HIR, it's not necessary.\n@@ -158,12 +158,12 @@ pub fn print_crate<'a>(\n \n impl<'a> State<'a> {\n     pub fn new_from_input(\n-        cm: &'a SourceMap,\n+        sm: &'a SourceMap,\n         filename: FileName,\n         input: String,\n         ann: &'a dyn PpAnn,\n     ) -> State<'a> {\n-        State { s: pp::mk_printer(), comments: Some(Comments::new(cm, filename, input)), ann }\n+        State { s: pp::mk_printer(), comments: Some(Comments::new(sm, filename, input)), ann }\n     }\n }\n "}, {"sha": "008658dff425ba3c8591ebbad4b4e40eb65b1a78", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8", "patch": "@@ -194,7 +194,7 @@ fn msg_span_from_early_bound_and_free_regions(\n     tcx: TyCtxt<'tcx>,\n     region: ty::Region<'tcx>,\n ) -> (String, Option<Span>) {\n-    let cm = tcx.sess.source_map();\n+    let sm = tcx.sess.source_map();\n \n     let scope = region.free_region_binding_scope(tcx);\n     let node = tcx.hir().as_local_hir_id(scope).unwrap_or(hir::DUMMY_HIR_ID);\n@@ -207,7 +207,7 @@ fn msg_span_from_early_bound_and_free_regions(\n     };\n     let (prefix, span) = match *region {\n         ty::ReEarlyBound(ref br) => {\n-            let mut sp = cm.def_span(tcx.hir().span(node));\n+            let mut sp = sm.def_span(tcx.hir().span(node));\n             if let Some(param) =\n                 tcx.hir().get_generics(scope).and_then(|generics| generics.get_named(br.name))\n             {\n@@ -216,7 +216,7 @@ fn msg_span_from_early_bound_and_free_regions(\n             (format!(\"the lifetime `{}` as defined on\", br.name), sp)\n         }\n         ty::ReFree(ty::FreeRegion { bound_region: ty::BoundRegion::BrNamed(_, name), .. }) => {\n-            let mut sp = cm.def_span(tcx.hir().span(node));\n+            let mut sp = sm.def_span(tcx.hir().span(node));\n             if let Some(param) =\n                 tcx.hir().get_generics(scope).and_then(|generics| generics.get_named(name))\n             {\n@@ -230,7 +230,7 @@ fn msg_span_from_early_bound_and_free_regions(\n             }\n             _ => (\n                 format!(\"the lifetime `{}` as defined on\", region),\n-                cm.def_span(tcx.hir().span(node)),\n+                sm.def_span(tcx.hir().span(node)),\n             ),\n         },\n         _ => bug!(),"}, {"sha": "3ae97ed5f88229331505f2b2d5087f648d8c6f44", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8", "patch": "@@ -1625,10 +1625,10 @@ impl<'a> Parser<'a> {\n         let hi = self.token.span;\n \n         if require_comma {\n-            let cm = self.sess.source_map();\n+            let sm = self.sess.source_map();\n             self.expect_one_of(&[token::Comma], &[token::CloseDelim(token::Brace)]).map_err(\n                 |mut err| {\n-                    match (cm.span_to_lines(expr.span), cm.span_to_lines(arm_start_span)) {\n+                    match (sm.span_to_lines(expr.span), sm.span_to_lines(arm_start_span)) {\n                         (Ok(ref expr_lines), Ok(ref arm_start_lines))\n                             if arm_start_lines.lines[0].end_col == expr_lines.lines[0].end_col\n                                 && expr_lines.lines.len() == 2"}, {"sha": "f0bb3cd08ad826b3c6b936d21a360c60c2c800eb", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8", "patch": "@@ -144,11 +144,11 @@ enum LiveNodeKind {\n }\n \n fn live_node_kind_to_string(lnk: LiveNodeKind, tcx: TyCtxt<'_>) -> String {\n-    let cm = tcx.sess.source_map();\n+    let sm = tcx.sess.source_map();\n     match lnk {\n-        UpvarNode(s) => format!(\"Upvar node [{}]\", cm.span_to_string(s)),\n-        ExprNode(s) => format!(\"Expr node [{}]\", cm.span_to_string(s)),\n-        VarDefNode(s) => format!(\"Var def node [{}]\", cm.span_to_string(s)),\n+        UpvarNode(s) => format!(\"Upvar node [{}]\", sm.span_to_string(s)),\n+        ExprNode(s) => format!(\"Expr node [{}]\", sm.span_to_string(s)),\n+        VarDefNode(s) => format!(\"Var def node [{}]\", sm.span_to_string(s)),\n         ExitNode => \"Exit node\".to_owned(),\n     }\n }"}, {"sha": "7c48ccfaddd3addcc7f31044ac078219556f58c5", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8", "patch": "@@ -90,9 +90,9 @@ impl<'tcx> Into<MissingLifetimeSpot<'tcx>> for &'tcx hir::Generics<'tcx> {\n /// *Attention*: the method used is very fragile since it essentially duplicates the work of the\n /// parser. If you need to use this function or something similar, please consider updating the\n /// `source_map` functions and this function to something more robust.\n-fn reduce_impl_span_to_impl_keyword(cm: &SourceMap, impl_span: Span) -> Span {\n-    let impl_span = cm.span_until_char(impl_span, '<');\n-    let impl_span = cm.span_until_whitespace(impl_span);\n+fn reduce_impl_span_to_impl_keyword(sm: &SourceMap, impl_span: Span) -> Span {\n+    let impl_span = sm.span_until_char(impl_span, '<');\n+    let impl_span = sm.span_until_whitespace(impl_span);\n     impl_span\n }\n \n@@ -136,14 +136,14 @@ impl<'a> Resolver<'a> {\n                 );\n                 err.span_label(span, format!(\"use of generic parameter from outer function\"));\n \n-                let cm = self.session.source_map();\n+                let sm = self.session.source_map();\n                 match outer_res {\n                     Res::SelfTy(maybe_trait_defid, maybe_impl_defid) => {\n                         if let Some(impl_span) =\n                             maybe_impl_defid.and_then(|def_id| self.definitions.opt_span(def_id))\n                         {\n                             err.span_label(\n-                                reduce_impl_span_to_impl_keyword(cm, impl_span),\n+                                reduce_impl_span_to_impl_keyword(sm, impl_span),\n                                 \"`Self` type implicitly declared here, by this `impl`\",\n                             );\n                         }\n@@ -180,15 +180,15 @@ impl<'a> Resolver<'a> {\n                     // Try to retrieve the span of the function signature and generate a new\n                     // message with a local type or const parameter.\n                     let sugg_msg = &format!(\"try using a local generic parameter instead\");\n-                    if let Some((sugg_span, snippet)) = cm.generate_local_type_param_snippet(span) {\n+                    if let Some((sugg_span, snippet)) = sm.generate_local_type_param_snippet(span) {\n                         // Suggest the modification to the user\n                         err.span_suggestion(\n                             sugg_span,\n                             sugg_msg,\n                             snippet,\n                             Applicability::MachineApplicable,\n                         );\n-                    } else if let Some(sp) = cm.generate_fn_name_span(span) {\n+                    } else if let Some(sp) = sm.generate_fn_name_span(span) {\n                         err.span_label(\n                             sp,\n                             format!(\"try adding a local generic parameter in this method instead\"),"}, {"sha": "6a6fba8270b4306343c4b5c3333048509e1bed0f", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8", "patch": "@@ -725,21 +725,21 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n \n     /// Only used in a specific case of type ascription suggestions\n     fn get_colon_suggestion_span(&self, start: Span) -> Span {\n-        let cm = self.r.session.source_map();\n-        start.to(cm.next_point(start))\n+        let sm = self.r.session.source_map();\n+        start.to(sm.next_point(start))\n     }\n \n     fn type_ascription_suggestion(&self, err: &mut DiagnosticBuilder<'_>, base_span: Span) {\n-        let cm = self.r.session.source_map();\n-        let base_snippet = cm.span_to_snippet(base_span);\n+        let sm = self.r.session.source_map();\n+        let base_snippet = sm.span_to_snippet(base_span);\n         if let Some(sp) = self.diagnostic_metadata.current_type_ascription.last() {\n             let mut sp = *sp;\n             loop {\n                 // Try to find the `:`; bail on first non-':' / non-whitespace.\n-                sp = cm.next_point(sp);\n-                if let Ok(snippet) = cm.span_to_snippet(sp.to(cm.next_point(sp))) {\n-                    let line_sp = cm.lookup_char_pos(sp.hi()).line;\n-                    let line_base_sp = cm.lookup_char_pos(base_span.lo()).line;\n+                sp = sm.next_point(sp);\n+                if let Ok(snippet) = sm.span_to_snippet(sp.to(sm.next_point(sp))) {\n+                    let line_sp = sm.lookup_char_pos(sp.hi()).line;\n+                    let line_base_sp = sm.lookup_char_pos(base_span.lo()).line;\n                     if snippet == \":\" {\n                         let mut show_label = true;\n                         if line_sp != line_base_sp {\n@@ -753,7 +753,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                             let colon_sp = self.get_colon_suggestion_span(sp);\n                             let after_colon_sp =\n                                 self.get_colon_suggestion_span(colon_sp.shrink_to_hi());\n-                            if !cm\n+                            if !sm\n                                 .span_to_snippet(after_colon_sp)\n                                 .map(|s| s == \" \")\n                                 .unwrap_or(false)\n@@ -770,8 +770,8 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                                 let mut sp = after_colon_sp;\n                                 for _ in 0..100 {\n                                     // Try to find an assignment\n-                                    sp = cm.next_point(sp);\n-                                    let snippet = cm.span_to_snippet(sp.to(cm.next_point(sp)));\n+                                    sp = sm.next_point(sp);\n+                                    let snippet = sm.span_to_snippet(sp.to(sm.next_point(sp)));\n                                     match snippet {\n                                         Ok(ref x) if x.as_str() == \"=\" => {\n                                             err.span_suggestion("}, {"sha": "41325c1307f8eddf94fc87ce3041ad4c6c40ad31", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8", "patch": "@@ -1233,8 +1233,8 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n         let qualname =\n             format!(\"::{}\", self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(id)));\n \n-        let cm = self.tcx.sess.source_map();\n-        let filename = cm.span_to_filename(span);\n+        let sm = self.tcx.sess.source_map();\n+        let filename = sm.span_to_filename(span);\n         let data_id = id_from_node_id(id, &self.save_ctxt);\n         let children = m.items.iter().map(|i| id_from_node_id(i.id, &self.save_ctxt)).collect();\n         let span = self.span_from_span(span);"}, {"sha": "43a0cfecd3ed00feff03fa34b8556bd99bb14ff6", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8", "patch": "@@ -66,9 +66,9 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n     fn span_from_span(&self, span: Span) -> SpanData {\n         use rls_span::{Column, Row};\n \n-        let cm = self.tcx.sess.source_map();\n-        let start = cm.lookup_char_pos(span.lo());\n-        let end = cm.lookup_char_pos(span.hi());\n+        let sm = self.tcx.sess.source_map();\n+        let start = sm.lookup_char_pos(span.lo());\n+        let end = sm.lookup_char_pos(span.hi());\n \n         SpanData {\n             file_name: start.file.name.to_string().into(),\n@@ -258,8 +258,8 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                     self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id))\n                 );\n \n-                let cm = self.tcx.sess.source_map();\n-                let filename = cm.span_to_filename(m.inner);\n+                let sm = self.tcx.sess.source_map();\n+                let filename = sm.span_to_filename(m.inner);\n \n                 filter!(self.span_utils, item.ident.span);\n "}, {"sha": "72b34cff5513693837c0df2a9fd0f7e12ecf0ee7", "filename": "src/librustc_session/parse.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_session%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_session%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fparse.rs?ref=20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8", "patch": "@@ -124,9 +124,9 @@ pub struct ParseSess {\n \n impl ParseSess {\n     pub fn new(file_path_mapping: FilePathMapping) -> Self {\n-        let cm = Lrc::new(SourceMap::new(file_path_mapping));\n-        let handler = Handler::with_tty_emitter(ColorConfig::Auto, true, None, Some(cm.clone()));\n-        ParseSess::with_span_handler(handler, cm)\n+        let sm = Lrc::new(SourceMap::new(file_path_mapping));\n+        let handler = Handler::with_tty_emitter(ColorConfig::Auto, true, None, Some(sm.clone()));\n+        ParseSess::with_span_handler(handler, sm)\n     }\n \n     pub fn with_span_handler(handler: Handler, source_map: Lrc<SourceMap>) -> Self {\n@@ -148,9 +148,9 @@ impl ParseSess {\n     }\n \n     pub fn with_silent_emitter() -> Self {\n-        let cm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n+        let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let handler = Handler::with_emitter(false, None, Box::new(SilentEmitter));\n-        ParseSess::with_span_handler(handler, cm)\n+        ParseSess::with_span_handler(handler, sm)\n     }\n \n     #[inline]"}, {"sha": "d6725160a5d022939ecf7e84d315b77258344a8a", "filename": "src/librustc_span/caching_source_map_view.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_span%2Fcaching_source_map_view.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_span%2Fcaching_source_map_view.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fcaching_source_map_view.rs?ref=20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8", "patch": "@@ -13,14 +13,14 @@ struct CacheEntry {\n }\n \n #[derive(Clone)]\n-pub struct CachingSourceMapView<'cm> {\n-    source_map: &'cm SourceMap,\n+pub struct CachingSourceMapView<'sm> {\n+    source_map: &'sm SourceMap,\n     line_cache: [CacheEntry; 3],\n     time_stamp: usize,\n }\n \n-impl<'cm> CachingSourceMapView<'cm> {\n-    pub fn new(source_map: &'cm SourceMap) -> CachingSourceMapView<'cm> {\n+impl<'sm> CachingSourceMapView<'sm> {\n+    pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {\n         let files = source_map.files();\n         let first_file = files[0].clone();\n         let entry = CacheEntry {"}, {"sha": "c289176c3038c64103abdeddfa0d97423d40d0ab", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8", "patch": "@@ -324,13 +324,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         hir_id: hir::HirId,\n         sp: Span,\n     ) -> bool {\n-        let cm = self.sess().source_map();\n+        let sm = self.sess().source_map();\n         let parent_id = self.tcx.hir().get_parent_node(hir_id);\n         if let Some(parent) = self.tcx.hir().find(parent_id) {\n             // Account for fields\n             if let Node::Expr(hir::Expr { kind: hir::ExprKind::Struct(_, fields, ..), .. }) = parent\n             {\n-                if let Ok(src) = cm.span_to_snippet(sp) {\n+                if let Ok(src) = sm.span_to_snippet(sp) {\n                     for field in *fields {\n                         if field.ident.as_str() == src && field.is_shorthand {\n                             return true;\n@@ -364,9 +364,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         checked_ty: Ty<'tcx>,\n         expected: Ty<'tcx>,\n     ) -> Option<(Span, &'static str, String)> {\n-        let cm = self.sess().source_map();\n+        let sm = self.sess().source_map();\n         let sp = expr.span;\n-        if !cm.span_to_filename(sp).is_real() {\n+        if !sm.span_to_filename(sp).is_real() {\n             // Ignore if span is from within a macro #41858, #58298. We previously used the macro\n             // call span, but that breaks down when the type error comes from multiple calls down.\n             return None;\n@@ -388,7 +388,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     if arr == self.tcx.types.u8 =>\n                 {\n                     if let hir::ExprKind::Lit(_) = expr.kind {\n-                        if let Ok(src) = cm.span_to_snippet(sp) {\n+                        if let Ok(src) = sm.span_to_snippet(sp) {\n                             if src.starts_with(\"b\\\"\") {\n                                 return Some((\n                                     sp,\n@@ -403,7 +403,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     if arr == self.tcx.types.u8 =>\n                 {\n                     if let hir::ExprKind::Lit(_) = expr.kind {\n-                        if let Ok(src) = cm.span_to_snippet(sp) {\n+                        if let Ok(src) = sm.span_to_snippet(sp) {\n                             if src.starts_with(\"\\\"\") {\n                                 return Some((\n                                     sp,\n@@ -450,7 +450,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             sugg_sp = arg.span;\n                         }\n                     }\n-                    if let Ok(src) = cm.span_to_snippet(sugg_sp) {\n+                    if let Ok(src) = sm.span_to_snippet(sugg_sp) {\n                         let needs_parens = match expr.kind {\n                             // parenthesize if needed (Issue #46756)\n                             hir::ExprKind::Cast(_, _) | hir::ExprKind::Binary(_, _, _) => true,\n@@ -480,7 +480,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 //                                   |     |\n                                 //    consider dereferencing here: `*opt`  |\n                                 // expected mutable reference, found enum `Option`\n-                                if let Ok(src) = cm.span_to_snippet(left_expr.span) {\n+                                if let Ok(src) = sm.span_to_snippet(left_expr.span) {\n                                     return Some((\n                                         left_expr.span,\n                                         \"consider dereferencing here to assign to the mutable \\\n@@ -516,8 +516,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             {\n                 // We have `&T`, check if what was expected was `T`. If so,\n                 // we may want to suggest removing a `&`.\n-                if !cm.span_to_filename(expr.span).is_real() {\n-                    if let Ok(code) = cm.span_to_snippet(sp) {\n+                if !sm.span_to_filename(expr.span).is_real() {\n+                    if let Ok(code) = sm.span_to_snippet(sp) {\n                         if code.chars().next() == Some('&') {\n                             return Some((\n                                 sp,\n@@ -528,7 +528,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     return None;\n                 }\n-                if let Ok(code) = cm.span_to_snippet(expr.span) {\n+                if let Ok(code) = sm.span_to_snippet(expr.span) {\n                     return Some((sp, \"consider removing the borrow\", code));\n                 }\n             }\n@@ -562,7 +562,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let is_copy = self.infcx.type_is_copy_modulo_regions(self.param_env, expected, sp);\n \n                 if is_copy && impls_deref {\n-                    if let Ok(code) = cm.span_to_snippet(sp) {\n+                    if let Ok(code) = sm.span_to_snippet(sp) {\n                         let message = if checked_ty.is_region_ptr() {\n                             \"consider dereferencing the borrow\"\n                         } else {"}, {"sha": "a8e5a0ddf26869f341c63d8269a8e04deaf431be", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8", "patch": "@@ -33,8 +33,8 @@ impl ItemLikeVisitor<'v> for OrphanChecker<'tcx> {\n             );\n             let trait_ref = self.tcx.impl_trait_ref(def_id).unwrap();\n             let trait_def_id = trait_ref.def_id;\n-            let cm = self.tcx.sess.source_map();\n-            let sp = cm.def_span(item.span);\n+            let sm = self.tcx.sess.source_map();\n+            let sp = sm.def_span(item.span);\n             match traits::orphan_check(self.tcx, def_id) {\n                 Ok(()) => {}\n                 Err(traits::OrphanCheckErr::NonLocalInputType(tys)) => {"}, {"sha": "50c780e9ecb52e77e46f6c504b1c2c5a21e5c900", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8", "patch": "@@ -263,9 +263,9 @@ impl Clean<Item> for doctree::Module<'_> {\n         // determine if we should display the inner contents or\n         // the outer `mod` item for the source code.\n         let whence = {\n-            let cm = cx.sess().source_map();\n-            let outer = cm.lookup_char_pos(self.where_outer.lo());\n-            let inner = cm.lookup_char_pos(self.where_inner.lo());\n+            let sm = cx.sess().source_map();\n+            let outer = sm.lookup_char_pos(self.where_outer.lo());\n+            let inner = sm.lookup_char_pos(self.where_inner.lo());\n             if outer.file.start_pos == inner.file.start_pos {\n                 // mod foo { ... }\n                 self.where_outer\n@@ -1917,10 +1917,10 @@ impl Clean<Span> for rustc_span::Span {\n             return Span::empty();\n         }\n \n-        let cm = cx.sess().source_map();\n-        let filename = cm.span_to_filename(*self);\n-        let lo = cm.lookup_char_pos(self.lo());\n-        let hi = cm.lookup_char_pos(self.hi());\n+        let sm = cx.sess().source_map();\n+        let filename = sm.span_to_filename(*self);\n+        let lo = sm.lookup_char_pos(self.lo());\n+        let hi = sm.lookup_char_pos(self.hi());\n         Span {\n             filename,\n             loline: lo.line,"}, {"sha": "8c4e65765d32f63df410be5754ff3f40c4eec906", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8", "patch": "@@ -177,7 +177,7 @@ pub fn new_handler(\n             Box::new(\n                 EmitterWriter::stderr(\n                     color_config,\n-                    source_map.map(|cm| cm as _),\n+                    source_map.map(|sm| sm as _),\n                     short,\n                     debugging_opts.teach,\n                     debugging_opts.terminal_width,"}, {"sha": "849c5c3e0722030058f1c90d276f78c210a4a924", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8", "patch": "@@ -38,11 +38,11 @@ pub fn render_with_highlighting(\n     }\n \n     let sess = ParseSess::with_silent_emitter();\n-    let fm = sess\n+    let sf = sess\n         .source_map()\n         .new_source_file(FileName::Custom(String::from(\"rustdoc-highlighting\")), src.to_owned());\n     let highlight_result = rustc_driver::catch_fatal_errors(|| {\n-        let lexer = lexer::StringReader::new(&sess, fm, None);\n+        let lexer = lexer::StringReader::new(&sess, sf, None);\n         let mut classifier = Classifier::new(lexer, sess.source_map());\n \n         let mut highlighted_source = vec![];"}, {"sha": "a6dad3c392044399c3c7b3009758c296973f6ad9", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8", "patch": "@@ -32,9 +32,9 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n \n         let emitter = BufferEmitter { messages: Lrc::clone(&buffered_messages) };\n \n-        let cm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n+        let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let handler = Handler::with_emitter(false, None, Box::new(emitter));\n-        let sess = ParseSess::with_span_handler(handler, cm);\n+        let sess = ParseSess::with_span_handler(handler, sm);\n         let source_file = sess.source_map().new_source_file(\n             FileName::Custom(String::from(\"doctest\")),\n             dox[code_block.code].to_owned(),"}, {"sha": "5dd7bd82755752e8ef5eb290bc86ad9a22d8879f", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8", "patch": "@@ -402,12 +402,12 @@ pub fn make_test(\n \n             // Any errors in parsing should also appear when the doctest is compiled for real, so just\n             // send all the errors that libsyntax emits directly into a `Sink` instead of stderr.\n-            let cm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n+            let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n             let emitter =\n                 EmitterWriter::new(box io::sink(), None, false, false, false, None, false);\n             // FIXME(misdreavus): pass `-Z treat-err-as-bug` to the doctest parser\n             let handler = Handler::with_emitter(false, None, box emitter);\n-            let sess = ParseSess::with_span_handler(handler, cm);\n+            let sess = ParseSess::with_span_handler(handler, sm);\n \n             let mut found_main = false;\n             let mut found_extern_crate = cratename.is_none();"}, {"sha": "0e42ae11fa2faaa07e77d1e050cd329c930ef131", "filename": "src/libsyntax/util/comments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibsyntax%2Futil%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8/src%2Flibsyntax%2Futil%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fcomments.rs?ref=20c9a40fec886826a3e7c4ec0c33ea4692f2c6a8", "patch": "@@ -189,8 +189,8 @@ fn split_block_comment_into_lines(text: &str, col: CharPos) -> Vec<String> {\n // it appears this function is called only from pprust... that's\n // probably not a good thing.\n pub fn gather_comments(sm: &SourceMap, path: FileName, src: String) -> Vec<Comment> {\n-    let cm = SourceMap::new(sm.path_mapping().clone());\n-    let source_file = cm.new_source_file(path, src);\n+    let sm = SourceMap::new(sm.path_mapping().clone());\n+    let source_file = sm.new_source_file(path, src);\n     let text = (*source_file.src.as_ref().unwrap()).clone();\n \n     let text: &str = text.as_str();"}]}