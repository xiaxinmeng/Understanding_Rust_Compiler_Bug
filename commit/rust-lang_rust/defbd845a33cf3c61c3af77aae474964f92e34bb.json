{"sha": "defbd845a33cf3c61c3af77aae474964f92e34bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZmJkODQ1YTMzY2YzYzYxYzNhZjc3YWFlNDc0OTY0ZjkyZTM0YmI=", "commit": {"author": {"name": "Nathan West", "email": "Lucretiel@gmail.com", "date": "2020-05-20T20:29:36Z"}, "committer": {"name": "Nathan West", "email": "Lucretiel@gmail.com", "date": "2020-05-29T04:50:35Z"}, "message": "Added fast-path, tests", "tree": {"sha": "1ddf044b21281d34ae83c1e5f04b30e39cd57f8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ddf044b21281d34ae83c1e5f04b30e39cd57f8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/defbd845a33cf3c61c3af77aae474964f92e34bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/defbd845a33cf3c61c3af77aae474964f92e34bb", "html_url": "https://github.com/rust-lang/rust/commit/defbd845a33cf3c61c3af77aae474964f92e34bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/defbd845a33cf3c61c3af77aae474964f92e34bb/comments", "author": {"login": "Lucretiel", "id": 1823405, "node_id": "MDQ6VXNlcjE4MjM0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1823405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lucretiel", "html_url": "https://github.com/Lucretiel", "followers_url": "https://api.github.com/users/Lucretiel/followers", "following_url": "https://api.github.com/users/Lucretiel/following{/other_user}", "gists_url": "https://api.github.com/users/Lucretiel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lucretiel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lucretiel/subscriptions", "organizations_url": "https://api.github.com/users/Lucretiel/orgs", "repos_url": "https://api.github.com/users/Lucretiel/repos", "events_url": "https://api.github.com/users/Lucretiel/events{/privacy}", "received_events_url": "https://api.github.com/users/Lucretiel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Lucretiel", "id": 1823405, "node_id": "MDQ6VXNlcjE4MjM0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1823405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lucretiel", "html_url": "https://github.com/Lucretiel", "followers_url": "https://api.github.com/users/Lucretiel/followers", "following_url": "https://api.github.com/users/Lucretiel/following{/other_user}", "gists_url": "https://api.github.com/users/Lucretiel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lucretiel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lucretiel/subscriptions", "organizations_url": "https://api.github.com/users/Lucretiel/orgs", "repos_url": "https://api.github.com/users/Lucretiel/repos", "events_url": "https://api.github.com/users/Lucretiel/events{/privacy}", "received_events_url": "https://api.github.com/users/Lucretiel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "813ce7a688f716e53f3dd22a89ec059af3b67c13", "url": "https://api.github.com/repos/rust-lang/rust/commits/813ce7a688f716e53f3dd22a89ec059af3b67c13", "html_url": "https://github.com/rust-lang/rust/commit/813ce7a688f716e53f3dd22a89ec059af3b67c13"}], "stats": {"total": 74, "additions": 54, "deletions": 20}, "files": [{"sha": "2febe157a506dc0aafa38c59230d86ae8b3d6211", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 54, "deletions": 20, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/defbd845a33cf3c61c3af77aae474964f92e34bb/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/defbd845a33cf3c61c3af77aae474964f92e34bb/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=defbd845a33cf3c61c3af77aae474964f92e34bb", "patch": "@@ -600,17 +600,23 @@ impl fmt::Display for SocketAddr {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for SocketAddrV4 {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        const IPV4_SOCKET_BUF_LEN: usize = 21;\n-        let mut buf = [0; IPV4_SOCKET_BUF_LEN];\n-        let mut buf_slice = &mut buf[..];\n-\n-        // Unwrap is fine because writing to a buffer is infallible\n-        write!(buf_slice, \"{}:{}\", self.ip(), self.port()).unwrap();\n-        let len = IPV4_SOCKET_BUF_LEN - buf_slice.len();\n-\n-        // This unsafe is OK because we know what is being written to the buffer\n-        let buf = unsafe { crate::str::from_utf8_unchecked(&buf[..len]) };\n-        f.pad(buf)\n+        // Fast path: if there's no alignment stuff, write to the output buffer\n+        // directly\n+        if f.precision().is_none() && f.width().is_none() {\n+            write!(f, \"{}:{}\", self.ip(), self.port())\n+        } else {\n+            const IPV4_SOCKET_BUF_LEN: usize = 21;\n+            let mut buf = [0; IPV4_SOCKET_BUF_LEN];\n+            let mut buf_slice = &mut buf[..];\n+\n+            // Unwrap is fine because writing to a buffer is infallible\n+            write!(buf_slice, \"{}:{}\", self.ip(), self.port()).unwrap();\n+            let len = IPV4_SOCKET_BUF_LEN - buf_slice.len();\n+\n+            // This unsafe is OK because we know what is being written to the buffer\n+            let buf = unsafe { crate::str::from_utf8_unchecked(&buf[..len]) };\n+            f.pad(buf)\n+        }\n     }\n }\n \n@@ -624,21 +630,27 @@ impl fmt::Debug for SocketAddrV4 {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for SocketAddrV6 {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        const IPV6_SOCKET_BUF_LEN: usize = (4 * 8)  // The address\n+        // Fast path: if there's no alignment stuff, write to the output\n+        // buffer directly\n+        if f.precision().is_none() && f.width().is_none() {\n+            write!(f, \"[{}]:{}\", self.ip(), self.port())\n+        } else {\n+            const IPV6_SOCKET_BUF_LEN: usize = (4 * 8)  // The address\n             + 7  // The colon separators\n             + 2  // The brackets\n             + 1 + 5; // The port\n \n-        let mut buf = [0; IPV6_SOCKET_BUF_LEN];\n-        let mut buf_slice = &mut buf[..];\n+            let mut buf = [0; IPV6_SOCKET_BUF_LEN];\n+            let mut buf_slice = &mut buf[..];\n \n-        // Unwrap is fine because writing to a buffer is infallible\n-        write!(buf_slice, \"[{}]:{}\", self.ip(), self.port()).unwrap();\n-        let len = IPV6_SOCKET_BUF_LEN - buf_slice.len();\n+            // Unwrap is fine because writing to a buffer is infallible\n+            write!(buf_slice, \"[{}]:{}\", self.ip(), self.port()).unwrap();\n+            let len = IPV6_SOCKET_BUF_LEN - buf_slice.len();\n \n-        // This unsafe is OK because we know what is being written to the buffer\n-        let buf = unsafe { crate::str::from_utf8_unchecked(&buf[..len]) };\n-        f.pad(buf)\n+            // This unsafe is OK because we know what is being written to the buffer\n+            let buf = unsafe { crate::str::from_utf8_unchecked(&buf[..len]) };\n+            f.pad(buf)\n+        }\n     }\n }\n \n@@ -1192,6 +1204,28 @@ mod tests {\n         assert!(v6.is_ipv6());\n     }\n \n+    #[test]\n+    fn socket_v4_to_str() {\n+        let socket = SocketAddrV4::new(Ipv4Addr::new(192, 168, 0, 1), 8080);\n+\n+        assert_eq!(format!(\"{}\", socket), \"192.168.0.1:8080\");\n+        assert_eq!(format!(\"{:<20}\", socket), \"192.168.0.1:8080    \");\n+        assert_eq!(format!(\"{:>20}\", socket), \"    192.168.0.1:8080\");\n+        assert_eq!(format!(\"{:^20}\", socket), \"  192.168.0.1:8080  \");\n+        assert_eq!(format!(\"{:.10}\", socket), \"192.168.0.\");\n+    }\n+\n+    #[test]\n+    fn socket_v6_to_str() {\n+        let socket: SocketAddrV6 = \"[2a02:6b8:0:1::1]:53\".parse().unwrap();\n+\n+        assert_eq!(format!(\"{}\", socket), \"[2a02:6b8:0:1::1]:53\");\n+        assert_eq!(format!(\"{:<24}\", socket), \"[2a02:6b8:0:1::1]:53    \");\n+        assert_eq!(format!(\"{:>24}\", socket), \"    [2a02:6b8:0:1::1]:53\");\n+        assert_eq!(format!(\"{:^24}\", socket), \"  [2a02:6b8:0:1::1]:53  \");\n+        assert_eq!(format!(\"{:.15}\", socket), \"[2a02:6b8:0:1::\");\n+    }\n+\n     #[test]\n     fn compare() {\n         let v4_1 = \"224.120.45.1:23456\".parse::<SocketAddrV4>().unwrap();"}]}