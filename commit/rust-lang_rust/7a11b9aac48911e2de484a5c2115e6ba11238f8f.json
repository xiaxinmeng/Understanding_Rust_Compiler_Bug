{"sha": "7a11b9aac48911e2de484a5c2115e6ba11238f8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMTFiOWFhYzQ4OTExZTJkZTQ4NGE1YzIxMTVlNmJhMTEyMzhmOGY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2015-01-01T17:43:48Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2015-01-01T17:43:48Z"}, "message": "debuginfo: Fix an ICE related to local variables in unreachable code.", "tree": {"sha": "b9a00a977a828c6720085f80c1439bc1cc5bf229", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9a00a977a828c6720085f80c1439bc1cc5bf229"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a11b9aac48911e2de484a5c2115e6ba11238f8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a11b9aac48911e2de484a5c2115e6ba11238f8f", "html_url": "https://github.com/rust-lang/rust/commit/7a11b9aac48911e2de484a5c2115e6ba11238f8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a11b9aac48911e2de484a5c2115e6ba11238f8f/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c594959cdff07b5545747809bb045bfa2868ebcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c594959cdff07b5545747809bb045bfa2868ebcc", "html_url": "https://github.com/rust-lang/rust/commit/c594959cdff07b5545747809bb045bfa2868ebcc"}], "stats": {"total": 96, "additions": 91, "deletions": 5}, "files": [{"sha": "95b8fdb2ec9993bb2b0c13927c7c5de1a6027d45", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a11b9aac48911e2de484a5c2115e6ba11238f8f/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a11b9aac48911e2de484a5c2115e6ba11238f8f/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=7a11b9aac48911e2de484a5c2115e6ba11238f8f", "patch": "@@ -853,7 +853,7 @@ pub fn create_global_var_metadata(cx: &CrateContext,\n /// local in `bcx.fcx.lllocals`.\n /// Adds the created metadata nodes directly to the crate's IR.\n pub fn create_local_var_metadata(bcx: Block, local: &ast::Local) {\n-    if fn_should_be_ignored(bcx.fcx) {\n+    if bcx.unreachable.get() || fn_should_be_ignored(bcx.fcx) {\n         return;\n     }\n \n@@ -897,7 +897,7 @@ pub fn create_captured_var_metadata<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                                 env_index: uint,\n                                                 captured_by_ref: bool,\n                                                 span: Span) {\n-    if fn_should_be_ignored(bcx.fcx) {\n+    if bcx.unreachable.get() || fn_should_be_ignored(bcx.fcx) {\n         return;\n     }\n \n@@ -980,7 +980,7 @@ pub fn create_captured_var_metadata<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n pub fn create_match_binding_metadata<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                                  variable_ident: ast::Ident,\n                                                  binding: BindingInfo<'tcx>) {\n-    if fn_should_be_ignored(bcx.fcx) {\n+    if bcx.unreachable.get() || fn_should_be_ignored(bcx.fcx) {\n         return;\n     }\n \n@@ -1020,7 +1020,7 @@ pub fn create_match_binding_metadata<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n /// argument in `bcx.fcx.lllocals`.\n /// Adds the created metadata nodes directly to the crate's IR.\n pub fn create_argument_metadata(bcx: Block, arg: &ast::Arg) {\n-    if fn_should_be_ignored(bcx.fcx) {\n+    if bcx.unreachable.get() || fn_should_be_ignored(bcx.fcx) {\n         return;\n     }\n \n@@ -1074,7 +1074,7 @@ pub fn create_argument_metadata(bcx: Block, arg: &ast::Arg) {\n /// loop variable in `bcx.fcx.lllocals`.\n /// Adds the created metadata nodes directly to the crate's IR.\n pub fn create_for_loop_var_metadata(bcx: Block, pat: &ast::Pat) {\n-    if fn_should_be_ignored(bcx.fcx) {\n+    if bcx.unreachable.get() || fn_should_be_ignored(bcx.fcx) {\n         return;\n     }\n "}, {"sha": "c15dcd1958f1c5f628cda23a78d6dbf8ea34a1b8", "filename": "src/test/debuginfo/unreachable-locals.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/7a11b9aac48911e2de484a5c2115e6ba11238f8f/src%2Ftest%2Fdebuginfo%2Funreachable-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a11b9aac48911e2de484a5c2115e6ba11238f8f/src%2Ftest%2Fdebuginfo%2Funreachable-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Funreachable-locals.rs?ref=7a11b9aac48911e2de484a5c2115e6ba11238f8f", "patch": "@@ -0,0 +1,86 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-android: FIXME(#10381)\n+// min-lldb-version: 310\n+\n+// compile-flags:-g\n+\n+#![allow(unused_variables)]\n+#![omit_gdb_pretty_printer_section]\n+\n+// No need to actually run the debugger, just make sure that the compiler can\n+// handle locals in unreachable code.\n+\n+fn after_return() {\n+    return;\n+    let x = \"0\";\n+    let (ref y,z) = (1i32, 2u32);\n+    match (20i32, 'c') {\n+        (a, ref b) => {}\n+    }\n+    for a in [111i32].iter() {}\n+}\n+\n+fn after_panic() {\n+    panic!();\n+    let x = \"0\";\n+    let (ref y,z) = (1i32, 2u32);\n+    match (20i32, 'c') {\n+        (a, ref b) => {}\n+    }\n+    for a in [111i32].iter() {}\n+}\n+\n+fn after_diverging_function() {\n+    diverge();\n+    let x = \"0\";\n+    let (ref y,z) = (1i32, 2u32);\n+    match (20i32, 'c') {\n+        (a, ref b) => {}\n+    }\n+    for a in [111i32].iter() {}\n+}\n+\n+fn after_break() {\n+    loop {\n+        break;\n+        let x = \"0\";\n+        let (ref y,z) = (1i32, 2u32);\n+        match (20i32, 'c') {\n+            (a, ref b) => {}\n+        }\n+        for a in [111i32].iter() {}\n+    }\n+}\n+\n+fn after_continue() {\n+    for _ in range(0, 10i32) {\n+        break;\n+        let x = \"0\";\n+        let (ref y,z) = (1i32, 2u32);\n+        match (20i32, 'c') {\n+            (a, ref b) => {}\n+        }\n+        for a in [111i32].iter() {}\n+    }\n+}\n+\n+fn main() {\n+    after_return();\n+    after_panic();\n+    after_diverging_function();\n+    after_break();\n+    after_continue();\n+}\n+\n+fn diverge() -> ! {\n+    panic!();\n+}"}]}