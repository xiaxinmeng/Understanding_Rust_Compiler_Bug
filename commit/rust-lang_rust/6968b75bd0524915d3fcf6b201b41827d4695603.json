{"sha": "6968b75bd0524915d3fcf6b201b41827d4695603", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NjhiNzViZDA1MjQ5MTVkM2ZjZjZiMjAxYjQxODI3ZDQ2OTU2MDM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-07-29T00:24:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-29T00:24:17Z"}, "message": "Rollup merge of #74707 - matklad:split_once, r=dtolnay\n\nAdd str::[r]split_once\n\nThis is useful for quick&dirty parsing of key: value config pairs. Used a bunch in Cargo and rust-analyzer:\n\n* https://github.com/rust-lang/cargo/search?q=splitn%282&unscoped_q=splitn%282\n* https://github.com/rust-analyzer/rust-analyzer/search?q=split_delim&unscoped_q=split_delim\n\nIn theory, once const-generics are done, this functionality could be achieved without a dedicated method with\n\n```rust\nmatch s.splitn(delimier, 2).collect_array::<2>() {\n  Some([prefix, suffix]) => todo!(),\n  None => todo!(),\n}\n```\n\nEven in that world, having a dedicated method seems clearer on the intention.\n\nI am not sure about naming -- this is something I've just came up with yesterday, I don't know off the top of my head analogs in other languages.\n\nIf T-libs thinks this is a reasonable API to have, I'll open a tracking issue and add more thorough tests.", "tree": {"sha": "28c242417d38f01677cb0d1a66e616d71cb2fdaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28c242417d38f01677cb0d1a66e616d71cb2fdaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6968b75bd0524915d3fcf6b201b41827d4695603", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfIMGxCRBK7hj4Ov3rIwAAdHIIAGR9ccCXUFHqjUMkKKCJ26hG\n/u/HCkDp/wBkAUtQDu+LF/KWBI0tqYIrurl24DcCLOum/MoUifj/pdyyH7YmcQmY\nx8Tluij0G2FbjDwNLzSzW8AIgoACQFax3TROYqBwY/n2QLC+ERehs1UxLwiCg1jp\n2i2VyqeeURT32fDZfpKMBsQtJeZtK/eNcL1mq1TWcaByftOUUIcrgV24NXk5RhYE\nHu5I7RxeWKoNMknHZTpgzs0ApCxGc8kt943KwKZZgB92s8JdoWWPGJQhIFRPk+4m\nUjQdAoThL75w+wMy5vwKpzg1Na1hEE5ihML3wuMGrgatMj+85oIZu+Gm944bcUc=\n=duTE\n-----END PGP SIGNATURE-----\n", "payload": "tree 28c242417d38f01677cb0d1a66e616d71cb2fdaf\nparent 157975c6c40b02e56e931617f1d6c8148bc7d2bd\nparent 6e9dc7d9ff806eb3a0b99ffd10892dac8e6f9739\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1595982257 +0900\ncommitter GitHub <noreply@github.com> 1595982257 +0900\n\nRollup merge of #74707 - matklad:split_once, r=dtolnay\n\nAdd str::[r]split_once\n\nThis is useful for quick&dirty parsing of key: value config pairs. Used a bunch in Cargo and rust-analyzer:\n\n* https://github.com/rust-lang/cargo/search?q=splitn%282&unscoped_q=splitn%282\n* https://github.com/rust-analyzer/rust-analyzer/search?q=split_delim&unscoped_q=split_delim\n\nIn theory, once const-generics are done, this functionality could be achieved without a dedicated method with\n\n```rust\nmatch s.splitn(delimier, 2).collect_array::<2>() {\n  Some([prefix, suffix]) => todo!(),\n  None => todo!(),\n}\n```\n\nEven in that world, having a dedicated method seems clearer on the intention.\n\nI am not sure about naming -- this is something I've just came up with yesterday, I don't know off the top of my head analogs in other languages.\n\nIf T-libs thinks this is a reasonable API to have, I'll open a tracking issue and add more thorough tests.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6968b75bd0524915d3fcf6b201b41827d4695603", "html_url": "https://github.com/rust-lang/rust/commit/6968b75bd0524915d3fcf6b201b41827d4695603", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6968b75bd0524915d3fcf6b201b41827d4695603/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "157975c6c40b02e56e931617f1d6c8148bc7d2bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/157975c6c40b02e56e931617f1d6c8148bc7d2bd", "html_url": "https://github.com/rust-lang/rust/commit/157975c6c40b02e56e931617f1d6c8148bc7d2bd"}, {"sha": "6e9dc7d9ff806eb3a0b99ffd10892dac8e6f9739", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e9dc7d9ff806eb3a0b99ffd10892dac8e6f9739", "html_url": "https://github.com/rust-lang/rust/commit/6e9dc7d9ff806eb3a0b99ffd10892dac8e6f9739"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "fa20a46671591f4aef2c91dc1735ffc533d5a058", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6968b75bd0524915d3fcf6b201b41827d4695603/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6968b75bd0524915d3fcf6b201b41827d4695603/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=6968b75bd0524915d3fcf6b201b41827d4695603", "patch": "@@ -6,6 +6,7 @@\n #![feature(map_first_last)]\n #![feature(new_uninit)]\n #![feature(pattern)]\n+#![feature(str_split_once)]\n #![feature(trusted_len)]\n #![feature(try_reserve)]\n #![feature(unboxed_closures)]"}, {"sha": "b20cf076aca3cac5dacea42cfc143ea5525b93fd", "filename": "library/alloc/tests/str.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6968b75bd0524915d3fcf6b201b41827d4695603/library%2Falloc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6968b75bd0524915d3fcf6b201b41827d4695603/library%2Falloc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstr.rs?ref=6968b75bd0524915d3fcf6b201b41827d4695603", "patch": "@@ -1318,6 +1318,30 @@ fn test_rsplitn() {\n     assert_eq!(split, [\"mb\\n\", \"\\nM\u00e4ry h\u00e4d \u00e4 little l\u00e4mb\\nLittle l\"]);\n }\n \n+#[test]\n+fn test_split_once() {\n+    assert_eq!(\"\".split_once(\"->\"), None);\n+    assert_eq!(\"-\".split_once(\"->\"), None);\n+    assert_eq!(\"->\".split_once(\"->\"), Some((\"\", \"\")));\n+    assert_eq!(\"a->\".split_once(\"->\"), Some((\"a\", \"\")));\n+    assert_eq!(\"->b\".split_once(\"->\"), Some((\"\", \"b\")));\n+    assert_eq!(\"a->b\".split_once(\"->\"), Some((\"a\", \"b\")));\n+    assert_eq!(\"a->b->c\".split_once(\"->\"), Some((\"a\", \"b->c\")));\n+    assert_eq!(\"---\".split_once(\"--\"), Some((\"\", \"-\")));\n+}\n+\n+#[test]\n+fn test_rsplit_once() {\n+    assert_eq!(\"\".rsplit_once(\"->\"), None);\n+    assert_eq!(\"-\".rsplit_once(\"->\"), None);\n+    assert_eq!(\"->\".rsplit_once(\"->\"), Some((\"\", \"\")));\n+    assert_eq!(\"a->\".rsplit_once(\"->\"), Some((\"a\", \"\")));\n+    assert_eq!(\"->b\".rsplit_once(\"->\"), Some((\"\", \"b\")));\n+    assert_eq!(\"a->b\".rsplit_once(\"->\"), Some((\"a\", \"b\")));\n+    assert_eq!(\"a->b->c\".rsplit_once(\"->\"), Some((\"a->b\", \"c\")));\n+    assert_eq!(\"---\".rsplit_once(\"--\"), Some((\"-\", \"\")));\n+}\n+\n #[test]\n fn test_split_whitespace() {\n     let data = \"\\n \\tM\u00e4ry   h\u00e4d\\t\u00e4  little l\u00e4mb\\nLittle l\u00e4mb\\n\";"}, {"sha": "9d7e38d0e183100b6cd79dbd775dfd39f4dc5852", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6968b75bd0524915d3fcf6b201b41827d4695603/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6968b75bd0524915d3fcf6b201b41827d4695603/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=6968b75bd0524915d3fcf6b201b41827d4695603", "patch": "@@ -3610,6 +3610,47 @@ impl str {\n         RSplitN(self.splitn(n, pat).0)\n     }\n \n+    /// Splits the string on the first occurrence of the specified delimiter and\n+    /// returns prefix before delimiter and suffix after delimiter.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_split_once)]\n+    ///\n+    /// assert_eq!(\"cfg\".split_once('='), None);\n+    /// assert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\n+    /// assert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n+    /// ```\n+    #[unstable(feature = \"str_split_once\", reason = \"newly added\", issue = \"74773\")]\n+    #[inline]\n+    pub fn split_once<'a, P: Pattern<'a>>(&'a self, delimiter: P) -> Option<(&'a str, &'a str)> {\n+        let (start, end) = delimiter.into_searcher(self).next_match()?;\n+        Some((&self[..start], &self[end..]))\n+    }\n+\n+    /// Splits the string on the last occurrence of the specified delimiter and\n+    /// returns prefix before delimiter and suffix after delimiter.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_split_once)]\n+    ///\n+    /// assert_eq!(\"cfg\".rsplit_once('='), None);\n+    /// assert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\n+    /// assert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n+    /// ```\n+    #[unstable(feature = \"str_split_once\", reason = \"newly added\", issue = \"74773\")]\n+    #[inline]\n+    pub fn rsplit_once<'a, P>(&'a self, delimiter: P) -> Option<(&'a str, &'a str)>\n+    where\n+        P: Pattern<'a, Searcher: ReverseSearcher<'a>>,\n+    {\n+        let (start, end) = delimiter.into_searcher(self).next_match_back()?;\n+        Some((&self[..start], &self[end..]))\n+    }\n+\n     /// An iterator over the disjoint matches of a pattern within the given string\n     /// slice.\n     ///"}]}