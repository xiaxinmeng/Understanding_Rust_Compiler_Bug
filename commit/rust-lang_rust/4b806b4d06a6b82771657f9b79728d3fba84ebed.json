{"sha": "4b806b4d06a6b82771657f9b79728d3fba84ebed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiODA2YjRkMDZhNmI4Mjc3MTY1N2Y5Yjc5NzI4ZDNmYmE4NGViZWQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-08T12:04:46Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-08T16:22:23Z"}, "message": "std: remove each_char* fns and methods from str, replaced by iterators.", "tree": {"sha": "94d877c67441c10a55d343566664766ce0b82cbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94d877c67441c10a55d343566664766ce0b82cbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b806b4d06a6b82771657f9b79728d3fba84ebed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b806b4d06a6b82771657f9b79728d3fba84ebed", "html_url": "https://github.com/rust-lang/rust/commit/4b806b4d06a6b82771657f9b79728d3fba84ebed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b806b4d06a6b82771657f9b79728d3fba84ebed/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "513d2292e5a743e630ceece06255528c1902ac01", "url": "https://api.github.com/repos/rust-lang/rust/commits/513d2292e5a743e630ceece06255528c1902ac01", "html_url": "https://github.com/rust-lang/rust/commit/513d2292e5a743e630ceece06255528c1902ac01"}], "stats": {"total": 229, "additions": 80, "deletions": 149}, "files": [{"sha": "1015373d7ce9e960ec1a765b858f5e864d0d313d", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4b806b4d06a6b82771657f9b79728d3fba84ebed/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b806b4d06a6b82771657f9b79728d3fba84ebed/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=4b806b4d06a6b82771657f9b79728d3fba84ebed", "patch": "@@ -22,6 +22,7 @@ use procsrv;\n use util;\n use util::logv;\n \n+use core::iterator::IteratorUtil;\n use core::io;\n use core::os;\n use core::str;\n@@ -780,7 +781,7 @@ fn _arm_exec_compiled_test(config: &config, props: &TestProps,\n                      Some(~\"\"));\n \n     let mut exitcode : int = 0;\n-    for str::each_char(exitcode_out) |c| {\n+    for exitcode_out.iter().advance |c| {\n         if !c.is_digit() { break; }\n         exitcode = exitcode * 10 + match c {\n             '0' .. '9' => c as int - ('0' as int),"}, {"sha": "160827327150163b358cddd7906b517b998c4184", "filename": "src/libextra/fileinput.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4b806b4d06a6b82771657f9b79728d3fba84ebed/src%2Flibextra%2Ffileinput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b806b4d06a6b82771657f9b79728d3fba84ebed/src%2Flibextra%2Ffileinput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffileinput.rs?ref=4b806b4d06a6b82771657f9b79728d3fba84ebed", "patch": "@@ -414,6 +414,7 @@ mod test {\n \n     use super::{FileInput, pathify, input_vec, input_vec_state};\n \n+    use core::iterator::IteratorUtil;\n     use core::io;\n     use core::str;\n     use core::uint;\n@@ -455,7 +456,7 @@ mod test {\n \n         let fi = FileInput::from_vec(copy filenames);\n \n-        for \"012\".each_chari |line, c| {\n+        for \"012\".iter().enumerate().advance |(line, c)| {\n             assert_eq!(fi.read_byte(), c as int);\n             assert_eq!(fi.state().line_num, line);\n             assert_eq!(fi.state().line_num_file, 0);"}, {"sha": "fc1597ffed4456947aef9052bf38381c79b0d0ae", "filename": "src/libextra/json.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b806b4d06a6b82771657f9b79728d3fba84ebed/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b806b4d06a6b82771657f9b79728d3fba84ebed/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=4b806b4d06a6b82771657f9b79728d3fba84ebed", "patch": "@@ -18,6 +18,7 @@\n \n use core::prelude::*;\n \n+use core::iterator::IteratorUtil;\n use core::char;\n use core::float;\n use core::hashmap::HashMap;\n@@ -58,7 +59,7 @@ pub struct Error {\n \n fn escape_str(s: &str) -> ~str {\n     let mut escaped = ~\"\\\"\";\n-    for str::each_char(s) |c| {\n+    for s.iter().advance |c| {\n         match c {\n           '\"' => escaped += \"\\\\\\\"\",\n           '\\\\' => escaped += \"\\\\\\\\\",\n@@ -913,7 +914,8 @@ impl serialize::Decoder for Decoder {\n \n     fn read_char(&mut self) -> char {\n         let mut v = ~[];\n-        for str::each_char(self.read_str()) |c| { v.push(c) }\n+        let s = self.read_str();\n+        for s.iter().advance |c| { v.push(c) }\n         if v.len() != 1 { fail!(\"string must have one character\") }\n         v[0]\n     }"}, {"sha": "f26019d928208014496fc591b7cd18da8b7209b3", "filename": "src/libextra/net_url.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4b806b4d06a6b82771657f9b79728d3fba84ebed/src%2Flibextra%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b806b4d06a6b82771657f9b79728d3fba84ebed/src%2Flibextra%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnet_url.rs?ref=4b806b4d06a6b82771657f9b79728d3fba84ebed", "patch": "@@ -14,6 +14,7 @@\n \n use core::prelude::*;\n \n+use core::iterator::IteratorUtil;\n use core::cmp::Eq;\n use core::io::{Reader, ReaderUtil};\n use core::io;\n@@ -358,7 +359,7 @@ pub fn query_to_str(query: &Query) -> ~str {\n \n // returns the scheme and the rest of the url, or a parsing error\n pub fn get_scheme(rawurl: &str) -> Result<(~str, ~str), ~str> {\n-    for str::each_chari(rawurl) |i,c| {\n+    for rawurl.iter().enumerate().advance |(i,c)| {\n         match c {\n           'A' .. 'Z' | 'a' .. 'z' => loop,\n           '0' .. '9' | '+' | '-' | '.' => {\n@@ -418,7 +419,7 @@ fn get_authority(rawurl: &str) ->\n     let mut colon_count = 0;\n     let mut (pos, begin, end) = (0, 2, len);\n \n-    for str::each_chari(rawurl) |i,c| {\n+    for rawurl.iter().enumerate().advance |(i,c)| {\n         if i < 2 { loop; } // ignore the leading //\n \n         // deal with input class first\n@@ -562,7 +563,7 @@ fn get_path(rawurl: &str, authority: bool) ->\n     Result<(~str, ~str), ~str> {\n     let len = str::len(rawurl);\n     let mut end = len;\n-    for str::each_chari(rawurl) |i,c| {\n+    for rawurl.iter().enumerate().advance |(i,c)| {\n         match c {\n           'A' .. 'Z' | 'a' .. 'z' | '0' .. '9' | '&' |'\\'' | '(' | ')' | '.'\n           | '@' | ':' | '%' | '/' | '+' | '!' | '*' | ',' | ';' | '='"}, {"sha": "29e7ba0e62f7d47a1b78c4e8972fee7d39ee35d7", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4b806b4d06a6b82771657f9b79728d3fba84ebed/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b806b4d06a6b82771657f9b79728d3fba84ebed/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=4b806b4d06a6b82771657f9b79728d3fba84ebed", "patch": "@@ -22,6 +22,7 @@ use middle::trans::common::CrateContext;\n use middle::ty;\n use util::ppaux;\n \n+use core::iterator::IteratorUtil;\n use core::char;\n use core::hash::Streaming;\n use core::hash;\n@@ -636,7 +637,7 @@ pub fn get_symbol_hash(ccx: @CrateContext, t: ty::t) -> @str {\n // gas accepts the following characters in symbols: a-z, A-Z, 0-9, ., _, $\n pub fn sanitize(s: &str) -> ~str {\n     let mut result = ~\"\";\n-    for str::each_char(s) |c| {\n+    for s.iter().advance |c| {\n         match c {\n             // Escape these with $ sequences\n             '@' => result += \"$SP$\","}, {"sha": "7946f7e4f13f6b1cc9c5a4f01b54cf34b8506529", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4b806b4d06a6b82771657f9b79728d3fba84ebed/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b806b4d06a6b82771657f9b79728d3fba84ebed/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=4b806b4d06a6b82771657f9b79728d3fba84ebed", "patch": "@@ -43,6 +43,7 @@ fn main () {\n use cast;\n use cmp;\n use int;\n+use iterator::IteratorUtil;\n use local_data;\n use prelude::*;\n use str;\n@@ -479,7 +480,7 @@ impl<R: Rng> RngUtil for R {\n     fn gen_char_from(&mut self, chars: &str) -> char {\n         assert!(!chars.is_empty());\n         let mut cs = ~[];\n-        for str::each_char(chars) |c| { cs.push(c) }\n+        for chars.iter().advance |c| { cs.push(c) }\n         self.choose(cs)\n     }\n "}, {"sha": "46f69d020d1ec7155bc29040785da0aaae877b45", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4b806b4d06a6b82771657f9b79728d3fba84ebed/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b806b4d06a6b82771657f9b79728d3fba84ebed/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=4b806b4d06a6b82771657f9b79728d3fba84ebed", "patch": "@@ -22,6 +22,7 @@ use intrinsic;\n use intrinsic::{TyDesc, TyVisitor, visit_tydesc};\n use intrinsic::Opaque;\n use io::{Writer, WriterUtil};\n+use iterator::IteratorUtil;\n use libc::c_void;\n use managed;\n use ptr;\n@@ -209,7 +210,7 @@ impl ReprVisitor {\n \n     pub fn write_escaped_slice(&self, slice: &str) {\n         self.writer.write_char('\"');\n-        for slice.each_char |ch| {\n+        for slice.iter().advance |ch| {\n             self.writer.write_escaped_char(ch);\n         }\n         self.writer.write_char('\"');"}, {"sha": "739825ff0c58fd11b881168f7deb3caa68dc2e17", "filename": "src/libstd/str.rs", "status": "modified", "additions": 57, "deletions": 136, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/4b806b4d06a6b82771657f9b79728d3fba84ebed/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b806b4d06a6b82771657f9b79728d3fba84ebed/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=4b806b4d06a6b82771657f9b79728d3fba84ebed", "patch": "@@ -25,7 +25,7 @@ use clone::Clone;\n use cmp::{TotalOrd, Ordering, Less, Equal, Greater};\n use container::Container;\n use iter::Times;\n-use iterator::Iterator;\n+use iterator::{Iterator, IteratorUtil};\n use libc;\n use option::{None, Option, Some};\n use old_iter::{BaseIter, EqIter};\n@@ -608,11 +608,7 @@ pub fn byte_slice_no_callback<'a>(s: &'a str) -> &'a [u8] {\n \n /// Convert a string to a unique vector of characters\n pub fn to_chars(s: &str) -> ~[char] {\n-    let mut buf = ~[];\n-    for each_char(s) |c| {\n-        buf.push(c);\n-    }\n-    buf\n+    s.iter().collect()\n }\n \n /**\n@@ -856,12 +852,12 @@ pub fn levdistance(s: &str, t: &str) -> uint {\n \n     let mut dcol = vec::from_fn(tlen + 1, |x| x);\n \n-    for s.each_chari |i, sc| {\n+    for s.iter().enumerate().advance |(i, sc)| {\n \n         let mut current = i;\n         dcol[0] = current + 1;\n \n-        for t.each_chari |j, tc| {\n+        for t.iter().enumerate().advance |(j, tc)| {\n \n             let next = dcol[j + 1];\n \n@@ -943,7 +939,7 @@ pub fn each_split_within<'a>(ss: &'a str,\n     let mut cont = true;\n     let slice: &fn() = || { cont = it(slice(ss, slice_start, last_end)) };\n \n-    let machine: &fn(uint, char) -> bool = |i, c| {\n+    let machine: &fn((uint, char)) -> bool = |(i, c)| {\n         let whitespace = if char::is_whitespace(c)       { Ws }       else { Cr };\n         let limit      = if (i - slice_start + 1) <= lim { UnderLim } else { OverLim };\n \n@@ -968,12 +964,12 @@ pub fn each_split_within<'a>(ss: &'a str,\n         cont\n     };\n \n-    str::each_chari(ss, machine);\n+    ss.iter().enumerate().advance(machine);\n \n     // Let the automaton 'run out' by supplying trailing whitespace\n     let mut fake_i = ss.len();\n     while cont && match state { B | C => true, A => false } {\n-        machine(fake_i, ' ');\n+        machine((fake_i, ' '));\n         fake_i += 1;\n     }\n     return cont;\n@@ -1247,7 +1243,7 @@ pub fn any(ss: &str, pred: &fn(char) -> bool) -> bool {\n pub fn map(ss: &str, ff: &fn(char) -> char) -> ~str {\n     let mut result = ~\"\";\n     reserve(&mut result, len(ss));\n-    for ss.each_char |cc| {\n+    for ss.iter().advance |cc| {\n         str::push_char(&mut result, ff(cc));\n     }\n     result\n@@ -1289,55 +1285,6 @@ pub fn eachi_reverse(s: &str, it: &fn(uint, u8) -> bool) -> bool {\n     return true;\n }\n \n-/// Iterate over each char of a string, without allocating\n-#[inline(always)]\n-pub fn each_char(s: &str, it: &fn(char) -> bool) -> bool {\n-    let mut i = 0;\n-    let len = len(s);\n-    while i < len {\n-        let CharRange {ch, next} = char_range_at(s, i);\n-        if !it(ch) { return false; }\n-        i = next;\n-    }\n-    return true;\n-}\n-\n-/// Iterates over the chars in a string, with indices\n-#[inline(always)]\n-pub fn each_chari(s: &str, it: &fn(uint, char) -> bool) -> bool {\n-    let mut pos = 0;\n-    let mut ch_pos = 0u;\n-    let len = s.len();\n-    while pos < len {\n-        let CharRange {ch, next} = char_range_at(s, pos);\n-        pos = next;\n-        if !it(ch_pos, ch) { return false; }\n-        ch_pos += 1u;\n-    }\n-    return true;\n-}\n-\n-/// Iterates over the chars in a string in reverse\n-#[inline(always)]\n-pub fn each_char_reverse(s: &str, it: &fn(char) -> bool) -> bool {\n-    each_chari_reverse(s, |_, c| it(c))\n-}\n-\n-/// Iterates over the chars in a string in reverse, with indices\n-#[inline(always)]\n-pub fn each_chari_reverse(s: &str, it: &fn(uint, char) -> bool) -> bool {\n-    let mut pos = s.len();\n-    let mut ch_pos = s.char_len();\n-    while pos > 0 {\n-        let CharRange {ch, next} = char_range_at_reverse(s, pos);\n-        pos = next;\n-        ch_pos -= 1;\n-\n-        if !it(ch_pos, ch) { return false; }\n-    }\n-    return true;\n-}\n-\n /*\n Section: Searching\n */\n@@ -1880,7 +1827,7 @@ pub fn is_utf16(v: &[u16]) -> bool {\n /// Converts to a vector of `u16` encoded as UTF-16\n pub fn to_utf16(s: &str) -> ~[u16] {\n     let mut u = ~[];\n-    for s.each_char |ch| {\n+    for s.iter().advance |ch| {\n         // Arithmetic with u32 literals is easier on the eyes than chars.\n         let mut ch = ch as u32;\n \n@@ -2396,7 +2343,7 @@ pub fn capacity(s: &const ~str) -> uint {\n pub fn escape_default(s: &str) -> ~str {\n     let mut out: ~str = ~\"\";\n     reserve_at_least(&mut out, str::len(s));\n-    for s.each_char |c| {\n+    for s.iter().advance |c| {\n         push_str(&mut out, char::escape_default(c));\n     }\n     out\n@@ -2406,7 +2353,7 @@ pub fn escape_default(s: &str) -> ~str {\n pub fn escape_unicode(s: &str) -> ~str {\n     let mut out: ~str = ~\"\";\n     reserve_at_least(&mut out, str::len(s));\n-    for s.each_char |c| {\n+    for s.iter().advance |c| {\n         push_str(&mut out, char::escape_unicode(c));\n     }\n     out\n@@ -2608,15 +2555,12 @@ pub trait StrSlice<'self> {\n     fn any(&self, it: &fn(char) -> bool) -> bool;\n     fn contains<'a>(&self, needle: &'a str) -> bool;\n     fn contains_char(&self, needle: char) -> bool;\n-    fn char_iter(&self) -> StrCharIterator<'self>;\n+    fn iter(&self) -> StrCharIterator<'self>;\n+    fn rev_iter(&self) -> StrCharRevIterator<'self>;\n     fn each(&self, it: &fn(u8) -> bool) -> bool;\n     fn eachi(&self, it: &fn(uint, u8) -> bool) -> bool;\n     fn each_reverse(&self, it: &fn(u8) -> bool) -> bool;\n     fn eachi_reverse(&self, it: &fn(uint, u8) -> bool) -> bool;\n-    fn each_char(&self, it: &fn(char) -> bool) -> bool;\n-    fn each_chari(&self, it: &fn(uint, char) -> bool) -> bool;\n-    fn each_char_reverse(&self, it: &fn(char) -> bool) -> bool;\n-    fn each_chari_reverse(&self, it: &fn(uint, char) -> bool) -> bool;\n     fn ends_with(&self, needle: &str) -> bool;\n     fn is_empty(&self) -> bool;\n     fn is_whitespace(&self) -> bool;\n@@ -2670,12 +2614,19 @@ impl<'self> StrSlice<'self> for &'self str {\n     }\n \n     #[inline]\n-    fn char_iter(&self) -> StrCharIterator<'self> {\n+    fn iter(&self) -> StrCharIterator<'self> {\n         StrCharIterator {\n             index: 0,\n             string: *self\n         }\n     }\n+    #[inline]\n+    fn rev_iter(&self) -> StrCharRevIterator<'self> {\n+        StrCharRevIterator {\n+            index: self.len(),\n+            string: *self\n+        }\n+    }\n \n     /// Iterate over the bytes in a string\n     #[inline]\n@@ -2691,25 +2642,6 @@ impl<'self> StrSlice<'self> for &'self str {\n     fn eachi_reverse(&self, it: &fn(uint, u8) -> bool) -> bool {\n         eachi_reverse(*self, it)\n     }\n-    /// Iterate over the chars in a string\n-    #[inline]\n-    fn each_char(&self, it: &fn(char) -> bool) -> bool { each_char(*self, it) }\n-    /// Iterate over the chars in a string, with indices\n-    #[inline]\n-    fn each_chari(&self, it: &fn(uint, char) -> bool) -> bool {\n-        each_chari(*self, it)\n-    }\n-    /// Iterate over the chars in a string in reverse\n-    #[inline]\n-    fn each_char_reverse(&self, it: &fn(char) -> bool) -> bool {\n-        each_char_reverse(*self, it)\n-    }\n-    /// Iterate over the chars in a string in reverse, with indices from the\n-    /// end\n-    #[inline]\n-    fn each_chari_reverse(&self, it: &fn(uint, char) -> bool) -> bool {\n-        each_chari_reverse(*self, it)\n-    }\n     /// Returns true if one string ends with another\n     #[inline]\n     fn ends_with(&self, needle: &str) -> bool {\n@@ -2880,6 +2812,25 @@ impl<'self> Iterator<char> for StrCharIterator<'self> {\n         }\n     }\n }\n+/// External iterator for a string's characters in reverse order. Use\n+/// with the `std::iterator` module.\n+pub struct StrCharRevIterator<'self> {\n+    priv index: uint,\n+    priv string: &'self str,\n+}\n+\n+impl<'self> Iterator<char> for StrCharRevIterator<'self> {\n+    #[inline]\n+    fn next(&mut self) -> Option<char> {\n+        if self.index > 0 {\n+            let CharRange {ch, next} = char_range_at_reverse(self.string, self.index);\n+            self.index = next;\n+            Some(ch)\n+        } else {\n+            None\n+        }\n+    }\n+}\n \n #[cfg(test)]\n mod tests {\n@@ -4067,52 +4018,6 @@ mod tests {\n         }\n     }\n \n-    #[test]\n-    fn test_each_char() {\n-        let s = ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n-        let v = ~['\u0e28','\u0e44','\u0e17','\u0e22','\u4e2d','\u534e','V','i','\u1ec7','t',' ','N','a','m'];\n-        let mut pos = 0;\n-        for s.each_char |ch| {\n-            assert_eq!(ch, v[pos]);\n-            pos += 1;\n-        }\n-    }\n-\n-    #[test]\n-    fn test_each_chari() {\n-        let s = ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n-        let v = ~['\u0e28','\u0e44','\u0e17','\u0e22','\u4e2d','\u534e','V','i','\u1ec7','t',' ','N','a','m'];\n-        let mut pos = 0;\n-        for s.each_chari |i, ch| {\n-            assert_eq!(pos, i);\n-            assert_eq!(ch, v[pos]);\n-            pos += 1;\n-        }\n-    }\n-\n-    #[test]\n-    fn test_each_char_reverse() {\n-        let s = ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n-        let v = ~['\u0e28','\u0e44','\u0e17','\u0e22','\u4e2d','\u534e','V','i','\u1ec7','t',' ','N','a','m'];\n-        let mut pos = v.len();\n-        for s.each_char_reverse |ch| {\n-            pos -= 1;\n-            assert_eq!(ch, v[pos]);\n-        }\n-    }\n-\n-    #[test]\n-    fn test_each_chari_reverse() {\n-        let s = ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n-        let v = ~['\u0e28','\u0e44','\u0e17','\u0e22','\u4e2d','\u534e','V','i','\u1ec7','t',' ','N','a','m'];\n-        let mut pos = v.len();\n-        for s.each_chari_reverse |i, ch| {\n-            pos -= 1;\n-            assert_eq!(pos, i);\n-            assert_eq!(ch, v[pos]);\n-        }\n-    }\n-\n     #[test]\n     fn test_escape_unicode() {\n         assert_eq!(escape_unicode(\"abc\"), ~\"\\\\x61\\\\x62\\\\x63\");\n@@ -4168,7 +4073,23 @@ mod tests {\n         let v = ~['\u0e28','\u0e44','\u0e17','\u0e22','\u4e2d','\u534e','V','i','\u1ec7','t',' ','N','a','m'];\n \n         let mut pos = 0;\n-        let mut it = s.char_iter();\n+        let mut it = s.iter();\n+\n+        for it.advance |c| {\n+            assert_eq!(c, v[pos]);\n+            pos += 1;\n+        }\n+        assert_eq!(pos, v.len());\n+    }\n+\n+    #[test]\n+    fn test_rev_iterator() {\n+        use iterator::*;\n+        let s = ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n+        let v = ~['m', 'a', 'N', ' ', 't', '\u1ec7','i','V','\u534e','\u4e2d','\u0e22','\u0e17','\u0e44','\u0e28'];\n+\n+        let mut pos = 0;\n+        let mut it = s.rev_iter();\n \n         for it.advance |c| {\n             assert_eq!(c, v[pos]);"}, {"sha": "22b9e7d6c5e8017c557803824d2b720eb2c5db5f", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4b806b4d06a6b82771657f9b79728d3fba84ebed/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b806b4d06a6b82771657f9b79728d3fba84ebed/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=4b806b4d06a6b82771657f9b79728d3fba84ebed", "patch": "@@ -21,6 +21,7 @@ use parse::token;\n use parse::token::{get_ident_interner};\n use parse;\n \n+use core::iterator::IteratorUtil;\n use core::io;\n use core::str;\n use core::uint;\n@@ -78,7 +79,7 @@ pub fn strip_doc_comment_decoration(comment: &str) -> ~str {\n             if line.trim().is_empty() {\n                 loop;\n             }\n-            for line.each_chari |j, c| {\n+            for line.iter().enumerate().advance |(j, c)| {\n                 if j >= i {\n                     break;\n                 }\n@@ -91,7 +92,7 @@ pub fn strip_doc_comment_decoration(comment: &str) -> ~str {\n \n         return do lines.map |line| {\n             let mut chars = ~[];\n-            for str::each_char(*line) |c| { chars.push(c) }\n+            for line.iter().advance |c| { chars.push(c) }\n             if i > chars.len() {\n                 ~\"\"\n             } else {"}, {"sha": "fcebb528c10afbf91381f89d23728459aa418afb", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4b806b4d06a6b82771657f9b79728d3fba84ebed/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b806b4d06a6b82771657f9b79728d3fba84ebed/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=4b806b4d06a6b82771657f9b79728d3fba84ebed", "patch": "@@ -14,6 +14,7 @@\n \n extern mod extra;\n \n+use std::iterator::IteratorUtil;\n use std::io::ReaderUtil;\n use std::io;\n use std::str;\n@@ -67,7 +68,7 @@ fn read_board_grid<rdr:'static + io::Reader>(in: rdr) -> ~[~[square]] {\n     let mut grid = ~[];\n     for in.each_line |line| {\n         let mut row = ~[];\n-        for str::each_char(line) |c| {\n+        for line.iter().advance |c| {\n             row.push(square_from_char(c))\n         }\n         grid.push(row)"}]}