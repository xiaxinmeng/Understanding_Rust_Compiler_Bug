{"sha": "ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhNzZjN2UwMTQ4Zjg3ODc2ZGJmOGFkMWY3ZGQxM2ZiOWYyNjg0ODE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-07T14:58:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-07T14:58:27Z"}, "message": "Auto merge of #36945 - alexcrichton:proc-macro-rename, r=nrc\n\nrustc: Rename rustc_macro to proc_macro\n\nThis commit blanket renames the `rustc_macro` infrastructure to `proc_macro`,\nwhich reflects the general consensus of #35900. A follow up PR to Cargo will be\nrequired to purge the `rustc-macro` name as well.", "tree": {"sha": "b3fe68f91bf2ccd90a3ba49a1ff5a87d5edbac2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3fe68f91bf2ccd90a3ba49a1ff5a87d5edbac2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "html_url": "https://github.com/rust-lang/rust/commit/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e51190cf07eb4e817d35c7d45eb89ec5a1ae8ddc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e51190cf07eb4e817d35c7d45eb89ec5a1ae8ddc", "html_url": "https://github.com/rust-lang/rust/commit/e51190cf07eb4e817d35c7d45eb89ec5a1ae8ddc"}, {"sha": "2148bdfcc7ea7b9614d8cbe596cbe7bb75b57cd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2148bdfcc7ea7b9614d8cbe596cbe7bb75b57cd1", "html_url": "https://github.com/rust-lang/rust/commit/2148bdfcc7ea7b9614d8cbe596cbe7bb75b57cd1"}], "stats": {"total": 1226, "additions": 612, "deletions": 614}, "files": [{"sha": "efe7a57980186108ada33083bb27d91d4a643849", "filename": "mk/crates.mk", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -59,8 +59,8 @@ RUSTC_CRATES := rustc rustc_typeck rustc_mir rustc_borrowck rustc_resolve rustc_\n                 rustc_trans rustc_back rustc_llvm rustc_privacy rustc_lint \\\n                 rustc_data_structures rustc_platform_intrinsics rustc_errors \\\n                 rustc_plugin rustc_metadata rustc_passes rustc_save_analysis \\\n-                rustc_const_eval rustc_const_math rustc_incremental rustc_macro\n-HOST_CRATES := syntax syntax_ext proc_macro syntax_pos $(RUSTC_CRATES) rustdoc fmt_macros \\\n+                rustc_const_eval rustc_const_math rustc_incremental proc_macro\n+HOST_CRATES := syntax syntax_ext proc_macro_plugin syntax_pos $(RUSTC_CRATES) rustdoc fmt_macros \\\n \t\tflate arena graphviz log serialize\n TOOLS := compiletest rustdoc rustc rustbook error_index_generator\n \n@@ -101,8 +101,8 @@ DEPS_term := std\n DEPS_test := std getopts term native:rust_test_helpers\n \n DEPS_syntax := std term serialize log arena libc rustc_bitflags rustc_unicode rustc_errors syntax_pos\n-DEPS_syntax_ext := syntax syntax_pos rustc_errors fmt_macros rustc_macro\n-DEPS_proc_macro := syntax syntax_pos rustc_plugin log\n+DEPS_syntax_ext := syntax syntax_pos rustc_errors fmt_macros proc_macro\n+DEPS_proc_macro_plugin := syntax syntax_pos rustc_plugin log\n DEPS_syntax_pos := serialize\n \n DEPS_rustc_const_math := std syntax log serialize\n@@ -118,15 +118,15 @@ DEPS_rustc_data_structures := std log serialize libc\n DEPS_rustc_driver := arena flate getopts graphviz libc rustc rustc_back rustc_borrowck \\\n                      rustc_typeck rustc_mir rustc_resolve log syntax serialize rustc_llvm \\\n                      rustc_trans rustc_privacy rustc_lint rustc_plugin \\\n-                     rustc_metadata syntax_ext proc_macro \\\n+                     rustc_metadata syntax_ext proc_macro_plugin \\\n                      rustc_passes rustc_save_analysis rustc_const_eval \\\n-                     rustc_incremental syntax_pos rustc_errors rustc_macro\n+                     rustc_incremental syntax_pos rustc_errors proc_macro\n DEPS_rustc_errors := log libc serialize syntax_pos\n DEPS_rustc_lint := rustc log syntax syntax_pos rustc_const_eval\n DEPS_rustc_llvm := native:rustllvm libc std rustc_bitflags\n-DEPS_rustc_macro := std syntax\n+DEPS_proc_macro := std syntax\n DEPS_rustc_metadata := rustc syntax syntax_pos rustc_errors rustc_const_math \\\n-\t\t\trustc_macro syntax_ext\n+\t\t\tproc_macro syntax_ext\n DEPS_rustc_passes := syntax syntax_pos rustc core rustc_const_eval rustc_errors\n DEPS_rustc_mir := rustc syntax syntax_pos rustc_const_math rustc_const_eval rustc_bitflags\n DEPS_rustc_resolve := arena rustc log syntax syntax_pos rustc_errors"}, {"sha": "7ce65d0fe4dbcb98a66143d5790ca009abde5768", "filename": "src/libproc_macro/Cargo.toml", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibproc_macro%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibproc_macro%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2FCargo.toml?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -4,12 +4,8 @@ name = \"proc_macro\"\n version = \"0.0.0\"\n \n [lib]\n-name = \"proc_macro\"\n path = \"lib.rs\"\n crate-type = [\"dylib\"]\n \n [dependencies]\n-log = { path = \"../liblog\" }\n-rustc_plugin = { path = \"../librustc_plugin\" }\n syntax = { path = \"../libsyntax\" }\n-syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "4b9b92fb3bbbacb126e808560b2a38322a24ab70", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 140, "deletions": 110, "changes": 250, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -8,130 +8,160 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! # Proc_Macro\n+//! A support library for macro authors when defining new macros.\n //!\n-//! A library for procedural macro writers.\n+//! This library, provided by the standard distribution, provides the types\n+//! consumed in the interfaces of procedurally defined macro definitions.\n+//! Currently the primary use of this crate is to provide the ability to define\n+//! new custom derive modes through `#[proc_macro_derive]`.\n //!\n-//! ## Usage\n-//! This package provides the `qquote!` macro for syntax creation, and the prelude\n-//! (at libproc_macro::prelude) provides a number of operations:\n-//! - `concat`, for concatenating two TokenStreams.\n-//! - `ident_eq`, for checking if two identifiers are equal regardless of syntax context.\n-//! - `str_to_token_ident`, for converting an `&str` into a Token.\n-//! - `keyword_to_token_delim`, for converting a `parse::token::keywords::Keyword` into a\n-//!    Token.\n-//! - `build_delimited`, for creating a new TokenStream from an existing one and a delimiter\n-//!    by wrapping the TokenStream in the delimiter.\n-//! - `build_bracket_delimited`, `build_brace_delimited`, and `build_paren_delimited`, for\n-//!    easing the above.\n-//! - `build_empty_args`, which returns a TokenStream containing `()`.\n-//! - `lex`, which takes an `&str` and returns the TokenStream it represents.\n+//! Added recently as part of [RFC 1681] this crate is currently *unstable* and\n+//! requires the `#![feature(proc_macro_lib)]` directive to use.\n //!\n-//! The `qquote!` macro also imports `syntax::ext::proc_macro_shim::prelude::*`, so you\n-//! will need to `extern crate syntax` for usage. (This is a temporary solution until more\n-//! of the external API in libproc_macro is stabilized to support the token construction\n-//! operations that the qausiquoter relies on.) The shim file also provides additional\n-//! operations, such as `build_block_emitter` (as used in the `cond` example below).\n-//!\n-//! ## TokenStreams\n-//!\n-//! TokenStreams serve as the basis of the macro system. They are, in essence, vectors of\n-//! TokenTrees, where indexing treats delimited values as a single term. That is, the term\n-//! `even(a+c) && even(b)` will be indexibly encoded as `even | (a+c) | even | (b)` where,\n-//! in reality, `(a+c)` is actually a decorated pointer to `a | + | c`.\n-//!\n-//! If a user has a TokenStream that is a single, delimited value, they can use\n-//! `maybe_delimited` to destruct it and receive the internal vector as a new TokenStream\n-//! as:\n-//! ```\n-//! `(a+c)`.maybe_delimited() ~> Some(a | + | c)`\n-//! ```\n-//!\n-//! Check the TokenStream documentation for more information; the structure also provides\n-//! cheap concatenation and slicing.\n-//!\n-//! ## Quasiquotation\n-//!\n-//! The quasiquoter creates output that, when run, constructs the tokenstream specified as\n-//! input. For example, `qquote!(5 + 5)` will produce a program, that, when run, will\n-//! construct the TokenStream `5 | + | 5`.\n-//!\n-//! ### Unquoting\n-//!\n-//! Unquoting is currently done as `unquote`, and works by taking the single next\n-//! TokenTree in the TokenStream as the unquoted term. Ergonomically, `unquote(foo)` works\n-//! fine, but `unquote foo` is also supported.\n-//!\n-//! A simple example might be:\n-//!\n-//!```\n-//!fn double(tmp: TokenStream) -> TokenStream {\n-//!    qquote!(unquote(tmp) * 2)\n-//!}\n-//!```\n-//!\n-//! ### Large Example: Implementing Scheme's `cond`\n-//!\n-//! Below is the full implementation of Scheme's `cond` operator.\n-//!\n-//! ```\n-//! fn cond_rec(input: TokenStream) -> TokenStream {\n-//!   if input.is_empty() { return quote!(); }\n-//!\n-//!   let next = input.slice(0..1);\n-//!   let rest = input.slice_from(1..);\n-//!\n-//!   let clause : TokenStream = match next.maybe_delimited() {\n-//!     Some(ts) => ts,\n-//!     _ => panic!(\"Invalid input\"),\n-//!   };\n-//!\n-//!   // clause is ([test]) [rhs]\n-//!   if clause.len() < 2 { panic!(\"Invalid macro usage in cond: {:?}\", clause) }\n-//!\n-//!   let test: TokenStream = clause.slice(0..1);\n-//!   let rhs: TokenStream = clause.slice_from(1..);\n-//!\n-//!   if ident_eq(&test[0], str_to_ident(\"else\")) || rest.is_empty() {\n-//!     quote!({unquote(rhs)})\n-//!   } else {\n-//!     quote!({if unquote(test) { unquote(rhs) } else { cond!(unquote(rest)) } })\n-//!   }\n-//! }\n-//! ```\n+//! [RFC 1681]: https://github.com/rust-lang/rfcs/blob/master/text/1681-macros-1.1.md\n //!\n+//! Note that this crate is intentionally very bare-bones currently. The main\n+//! type, `TokenStream`, only supports `fmt::Display` and `FromStr`\n+//! implementations, indicating that it can only go to and come from a string.\n+//! This functionality is intended to be expanded over time as more surface\n+//! area for macro authors is stabilized.\n \n #![crate_name = \"proc_macro\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n-#![feature(plugin_registrar)]\n-#![crate_type = \"dylib\"]\n+#![unstable(feature = \"proc_macro_lib\", issue = \"27812\")]\n #![crate_type = \"rlib\"]\n-#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![crate_type = \"dylib\"]\n #![cfg_attr(not(stage0), deny(warnings))]\n+#![deny(missing_docs)]\n \n-#![feature(staged_api)]\n-#![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n+#![feature(staged_api)]\n+#![feature(lang_items)]\n \n-extern crate rustc_plugin;\n extern crate syntax;\n-extern crate syntax_pos;\n-#[macro_use] extern crate log;\n \n-mod qquote;\n-pub mod build;\n-pub mod parse;\n-pub mod prelude;\n-use qquote::qquote;\n+use std::fmt;\n+use std::str::FromStr;\n+\n+use syntax::ast;\n+use syntax::parse;\n+use syntax::ptr::P;\n+\n+/// The main type provided by this crate, representing an abstract stream of\n+/// tokens.\n+///\n+/// This is both the input and output of `#[proc_macro_derive]` definitions.\n+/// Currently it's required to be a list of valid Rust items, but this\n+/// restriction may be lifted in the future.\n+///\n+/// The API of this type is intentionally bare-bones, but it'll be expanded over\n+/// time!\n+pub struct TokenStream {\n+    inner: Vec<P<ast::Item>>,\n+}\n+\n+/// Error returned from `TokenStream::from_str`.\n+#[derive(Debug)]\n+pub struct LexError {\n+    _inner: (),\n+}\n+\n+/// Permanently unstable internal implementation details of this crate. This\n+/// should not be used.\n+///\n+/// These methods are used by the rest of the compiler to generate instances of\n+/// `TokenStream` to hand to macro definitions, as well as consume the output.\n+///\n+/// Note that this module is also intentionally separate from the rest of the\n+/// crate. This allows the `#[unstable]` directive below to naturally apply to\n+/// all of the contents.\n+#[unstable(feature = \"proc_macro_internals\", issue = \"27812\")]\n+#[doc(hidden)]\n+pub mod __internal {\n+    use std::cell::Cell;\n+\n+    use syntax::ast;\n+    use syntax::ptr::P;\n+    use syntax::parse::ParseSess;\n+    use super::TokenStream;\n+\n+    pub fn new_token_stream(item: P<ast::Item>) -> TokenStream {\n+        TokenStream { inner: vec![item] }\n+    }\n \n-use rustc_plugin::Registry;\n+    pub fn token_stream_items(stream: TokenStream) -> Vec<P<ast::Item>> {\n+        stream.inner\n+    }\n \n-// ____________________________________________________________________________________________\n-// Main macro definition\n+    pub trait Registry {\n+        fn register_custom_derive(&mut self,\n+                                  trait_name: &str,\n+                                  expand: fn(TokenStream) -> TokenStream);\n+    }\n+\n+    // Emulate scoped_thread_local!() here essentially\n+    thread_local! {\n+        static CURRENT_SESS: Cell<*const ParseSess> = Cell::new(0 as *const _);\n+    }\n+\n+    pub fn set_parse_sess<F, R>(sess: &ParseSess, f: F) -> R\n+        where F: FnOnce() -> R\n+    {\n+        struct Reset { prev: *const ParseSess }\n+\n+        impl Drop for Reset {\n+            fn drop(&mut self) {\n+                CURRENT_SESS.with(|p| p.set(self.prev));\n+            }\n+        }\n+\n+        CURRENT_SESS.with(|p| {\n+            let _reset = Reset { prev: p.get() };\n+            p.set(sess);\n+            f()\n+        })\n+    }\n+\n+    pub fn with_parse_sess<F, R>(f: F) -> R\n+        where F: FnOnce(&ParseSess) -> R\n+    {\n+        let p = CURRENT_SESS.with(|p| p.get());\n+        assert!(!p.is_null());\n+        f(unsafe { &*p })\n+    }\n+}\n+\n+impl FromStr for TokenStream {\n+    type Err = LexError;\n+\n+    fn from_str(src: &str) -> Result<TokenStream, LexError> {\n+        __internal::with_parse_sess(|sess| {\n+            let src = src.to_string();\n+            let cfg = Vec::new();\n+            let name = \"<proc-macro source code>\".to_string();\n+            let mut parser = parse::new_parser_from_source_str(sess, cfg, name,\n+                                                               src);\n+            let mut ret = TokenStream { inner: Vec::new() };\n+            loop {\n+                match parser.parse_item() {\n+                    Ok(Some(item)) => ret.inner.push(item),\n+                    Ok(None) => return Ok(ret),\n+                    Err(mut err) => {\n+                        err.cancel();\n+                        return Err(LexError { _inner: () })\n+                    }\n+                }\n+            }\n+        })\n+    }\n+}\n \n-#[plugin_registrar]\n-pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_macro(\"qquote\", qquote);\n+impl fmt::Display for TokenStream {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        for item in self.inner.iter() {\n+            let item = syntax::print::pprust::item_to_string(item);\n+            try!(f.write_str(&item));\n+            try!(f.write_str(\"\\n\"));\n+        }\n+        Ok(())\n+    }\n }"}, {"sha": "70bb86d0f587d4447cb2f6479333c48b73d78628", "filename": "src/libproc_macro_plugin/Cargo.toml", "status": "renamed", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibproc_macro_plugin%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibproc_macro_plugin%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro_plugin%2FCargo.toml?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -1,12 +1,14 @@\n [package]\n authors = [\"The Rust Project Developers\"]\n-name = \"rustc_macro\"\n+name = \"proc_macro_plugin\"\n version = \"0.0.0\"\n \n [lib]\n-name = \"rustc_macro\"\n path = \"lib.rs\"\n crate-type = [\"dylib\"]\n \n [dependencies]\n+log = { path = \"../liblog\" }\n+rustc_plugin = { path = \"../librustc_plugin\" }\n syntax = { path = \"../libsyntax\" }\n+syntax_pos = { path = \"../libsyntax_pos\" }", "previous_filename": "src/librustc_macro/Cargo.toml"}, {"sha": "7b7590b863b71aa5e5eba1e63d13a5f707dea352", "filename": "src/libproc_macro_plugin/build.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibproc_macro_plugin%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibproc_macro_plugin%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro_plugin%2Fbuild.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "previous_filename": "src/libproc_macro/build.rs"}, {"sha": "e82e97b5134aa8142bc7681021ab2718b133b59c", "filename": "src/libproc_macro_plugin/lib.rs", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibproc_macro_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibproc_macro_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro_plugin%2Flib.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -0,0 +1,137 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! # Proc_Macro\n+//!\n+//! A library for procedural macro writers.\n+//!\n+//! ## Usage\n+//! This package provides the `qquote!` macro for syntax creation, and the prelude\n+//! (at libproc_macro::prelude) provides a number of operations:\n+//! - `concat`, for concatenating two TokenStreams.\n+//! - `ident_eq`, for checking if two identifiers are equal regardless of syntax context.\n+//! - `str_to_token_ident`, for converting an `&str` into a Token.\n+//! - `keyword_to_token_delim`, for converting a `parse::token::keywords::Keyword` into a\n+//!    Token.\n+//! - `build_delimited`, for creating a new TokenStream from an existing one and a delimiter\n+//!    by wrapping the TokenStream in the delimiter.\n+//! - `build_bracket_delimited`, `build_brace_delimited`, and `build_paren_delimited`, for\n+//!    easing the above.\n+//! - `build_empty_args`, which returns a TokenStream containing `()`.\n+//! - `lex`, which takes an `&str` and returns the TokenStream it represents.\n+//!\n+//! The `qquote!` macro also imports `syntax::ext::proc_macro_shim::prelude::*`, so you\n+//! will need to `extern crate syntax` for usage. (This is a temporary solution until more\n+//! of the external API in libproc_macro is stabilized to support the token construction\n+//! operations that the qausiquoter relies on.) The shim file also provides additional\n+//! operations, such as `build_block_emitter` (as used in the `cond` example below).\n+//!\n+//! ## TokenStreams\n+//!\n+//! TokenStreams serve as the basis of the macro system. They are, in essence, vectors of\n+//! TokenTrees, where indexing treats delimited values as a single term. That is, the term\n+//! `even(a+c) && even(b)` will be indexibly encoded as `even | (a+c) | even | (b)` where,\n+//! in reality, `(a+c)` is actually a decorated pointer to `a | + | c`.\n+//!\n+//! If a user has a TokenStream that is a single, delimited value, they can use\n+//! `maybe_delimited` to destruct it and receive the internal vector as a new TokenStream\n+//! as:\n+//! ```\n+//! `(a+c)`.maybe_delimited() ~> Some(a | + | c)`\n+//! ```\n+//!\n+//! Check the TokenStream documentation for more information; the structure also provides\n+//! cheap concatenation and slicing.\n+//!\n+//! ## Quasiquotation\n+//!\n+//! The quasiquoter creates output that, when run, constructs the tokenstream specified as\n+//! input. For example, `qquote!(5 + 5)` will produce a program, that, when run, will\n+//! construct the TokenStream `5 | + | 5`.\n+//!\n+//! ### Unquoting\n+//!\n+//! Unquoting is currently done as `unquote`, and works by taking the single next\n+//! TokenTree in the TokenStream as the unquoted term. Ergonomically, `unquote(foo)` works\n+//! fine, but `unquote foo` is also supported.\n+//!\n+//! A simple example might be:\n+//!\n+//!```\n+//!fn double(tmp: TokenStream) -> TokenStream {\n+//!    qquote!(unquote(tmp) * 2)\n+//!}\n+//!```\n+//!\n+//! ### Large Example: Implementing Scheme's `cond`\n+//!\n+//! Below is the full implementation of Scheme's `cond` operator.\n+//!\n+//! ```\n+//! fn cond_rec(input: TokenStream) -> TokenStream {\n+//!   if input.is_empty() { return quote!(); }\n+//!\n+//!   let next = input.slice(0..1);\n+//!   let rest = input.slice_from(1..);\n+//!\n+//!   let clause : TokenStream = match next.maybe_delimited() {\n+//!     Some(ts) => ts,\n+//!     _ => panic!(\"Invalid input\"),\n+//!   };\n+//!\n+//!   // clause is ([test]) [rhs]\n+//!   if clause.len() < 2 { panic!(\"Invalid macro usage in cond: {:?}\", clause) }\n+//!\n+//!   let test: TokenStream = clause.slice(0..1);\n+//!   let rhs: TokenStream = clause.slice_from(1..);\n+//!\n+//!   if ident_eq(&test[0], str_to_ident(\"else\")) || rest.is_empty() {\n+//!     quote!({unquote(rhs)})\n+//!   } else {\n+//!     quote!({if unquote(test) { unquote(rhs) } else { cond!(unquote(rest)) } })\n+//!   }\n+//! }\n+//! ```\n+//!\n+\n+#![crate_name = \"proc_macro_plugin\"]\n+#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n+#![feature(plugin_registrar)]\n+#![crate_type = \"dylib\"]\n+#![crate_type = \"rlib\"]\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![cfg_attr(not(stage0), deny(warnings))]\n+\n+#![feature(staged_api)]\n+#![feature(rustc_diagnostic_macros)]\n+#![feature(rustc_private)]\n+\n+extern crate rustc_plugin;\n+extern crate syntax;\n+extern crate syntax_pos;\n+#[macro_use] extern crate log;\n+\n+mod qquote;\n+pub mod build;\n+pub mod parse;\n+pub mod prelude;\n+use qquote::qquote;\n+\n+use rustc_plugin::Registry;\n+\n+// ____________________________________________________________________________________________\n+// Main macro definition\n+\n+#[plugin_registrar]\n+pub fn plugin_registrar(reg: &mut Registry) {\n+    reg.register_macro(\"qquote\", qquote);\n+}"}, {"sha": "9af8a68cdcf497887b75e09a94f5917215d33bee", "filename": "src/libproc_macro_plugin/parse.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibproc_macro_plugin%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibproc_macro_plugin%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro_plugin%2Fparse.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "previous_filename": "src/libproc_macro/parse.rs"}, {"sha": "4c0c8ba6c6684b1c375236a4e13fefa2a5cbcfab", "filename": "src/libproc_macro_plugin/prelude.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibproc_macro_plugin%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibproc_macro_plugin%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro_plugin%2Fprelude.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "previous_filename": "src/libproc_macro/prelude.rs"}, {"sha": "b73d085656e6ee935386233ce6ea3bc5b72a1026", "filename": "src/libproc_macro_plugin/qquote.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibproc_macro_plugin%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibproc_macro_plugin%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro_plugin%2Fqquote.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -51,7 +51,7 @@ pub fn qquote<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[TokenTree])\n     let output = qquoter(cx, TokenStream::from_tts(tts.clone().to_owned()));\n     debug!(\"\\nQQ out: {}\\n\", pprust::tts_to_string(&output.to_tts()[..]));\n     let imports = concat(lex(\"use syntax::ext::proc_macro_shim::prelude::*;\"),\n-                         lex(\"use proc_macro::prelude::*;\"));\n+                         lex(\"use proc_macro_plugin::prelude::*;\"));\n     build_block_emitter(cx, sp, build_brace_delimited(concat(imports, output)))\n }\n \n@@ -219,7 +219,7 @@ fn convert_complex_tts<'cx>(cx: &'cx mut ExtCtxt, tts: Vec<QTT>) -> (Bindings, T\n \n                 let sep = build_delim_tok(qdl.delim);\n \n-                pushes.push(build_mod_call(vec![str_to_ident(\"proc_macro\"),\n+                pushes.push(build_mod_call(vec![str_to_ident(\"proc_macro_plugin\"),\n                                                str_to_ident(\"build\"),\n                                                str_to_ident(\"build_delimited\")],\n                                           concat(from_tokens(vec![Token::Ident(new_id)]),", "previous_filename": "src/libproc_macro/qquote.rs"}, {"sha": "656d3146fe5d124c314f664e6444fd06efe6df2a", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -141,12 +141,12 @@ fn calculate_type(sess: &session::Session,\n         }\n \n         // Everything else falls through below. This will happen either with the\n-        // `-C prefer-dynamic` or because we're a rustc-macro crate. Note that\n-        // rustc-macro crates are required to be dylibs, and they're currently\n+        // `-C prefer-dynamic` or because we're a proc-macro crate. Note that\n+        // proc-macro crates are required to be dylibs, and they're currently\n         // required to link to libsyntax as well.\n         config::CrateTypeExecutable |\n         config::CrateTypeDylib |\n-        config::CrateTypeRustcMacro => {},\n+        config::CrateTypeProcMacro => {},\n     }\n \n     let mut formats = FnvHashMap();"}, {"sha": "a476d0f6f30a673056748841055513c5a2189c31", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -139,7 +139,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n     fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> ReachableContext<'a, 'tcx> {\n         let any_library = tcx.sess.crate_types.borrow().iter().any(|ty| {\n             *ty == config::CrateTypeRlib || *ty == config::CrateTypeDylib ||\n-            *ty == config::CrateTypeRustcMacro\n+            *ty == config::CrateTypeProcMacro\n         });\n         ReachableContext {\n             tcx: tcx,"}, {"sha": "2c08e17f8f1a5c8e4ed66272c6fe10ca8cd30f39", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -71,7 +71,7 @@ fn verify(sess: &Session, items: &lang_items::LanguageItems) {\n     let needs_check = sess.crate_types.borrow().iter().any(|kind| {\n         match *kind {\n             config::CrateTypeDylib |\n-            config::CrateTypeRustcMacro |\n+            config::CrateTypeProcMacro |\n             config::CrateTypeCdylib |\n             config::CrateTypeExecutable |\n             config::CrateTypeStaticlib => true,"}, {"sha": "0ad53529dd11d4594905b8faeaa489d02966af19", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -482,7 +482,7 @@ pub enum CrateType {\n     CrateTypeRlib,\n     CrateTypeStaticlib,\n     CrateTypeCdylib,\n-    CrateTypeRustcMacro,\n+    CrateTypeProcMacro,\n }\n \n #[derive(Clone, Hash)]\n@@ -972,8 +972,8 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n     if sess.opts.debug_assertions {\n         ret.push(attr::mk_word_item(InternedString::new(\"debug_assertions\")));\n     }\n-    if sess.opts.crate_types.contains(&CrateTypeRustcMacro) {\n-        ret.push(attr::mk_word_item(InternedString::new(\"rustc_macro\")));\n+    if sess.opts.crate_types.contains(&CrateTypeProcMacro) {\n+        ret.push(attr::mk_word_item(InternedString::new(\"proc_macro\")));\n     }\n     return ret;\n }\n@@ -1546,7 +1546,7 @@ pub fn parse_crate_types_from_list(list_list: Vec<String>) -> Result<Vec<CrateTy\n                 \"dylib\"     => CrateTypeDylib,\n                 \"cdylib\"    => CrateTypeCdylib,\n                 \"bin\"       => CrateTypeExecutable,\n-                \"rustc-macro\" => CrateTypeRustcMacro,\n+                \"proc-macro\" => CrateTypeProcMacro,\n                 _ => {\n                     return Err(format!(\"unknown crate type: `{}`\",\n                                        part));\n@@ -1630,7 +1630,7 @@ impl fmt::Display for CrateType {\n             CrateTypeRlib => \"rlib\".fmt(f),\n             CrateTypeStaticlib => \"staticlib\".fmt(f),\n             CrateTypeCdylib => \"cdylib\".fmt(f),\n-            CrateTypeRustcMacro => \"rustc-macro\".fmt(f),\n+            CrateTypeProcMacro => \"proc-macro\".fmt(f),\n         }\n     }\n }"}, {"sha": "d371cc2f8ade918c7509e99cf8e8a47b3b05b962", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -493,7 +493,7 @@ pub struct GlobalCtxt<'tcx> {\n     pub layout_depth: Cell<usize>,\n \n     /// Map from function to the `#[derive]` mode that it's defining. Only used\n-    /// by `rustc-macro` crates.\n+    /// by `proc-macro` crates.\n     pub derive_macros: RefCell<NodeMap<token::InternedString>>,\n }\n "}, {"sha": "98e2aa881891d26a9cfd9da9885da0c43146a3b0", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -13,25 +13,25 @@ arena = { path = \"../libarena\" }\n flate = { path = \"../libflate\" }\n graphviz = { path = \"../libgraphviz\" }\n log = { path = \"../liblog\" }\n+proc_macro_plugin = { path = \"../libproc_macro_plugin\" }\n rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n rustc_borrowck = { path = \"../librustc_borrowck\" }\n rustc_const_eval = { path = \"../librustc_const_eval\" }\n rustc_errors = { path = \"../librustc_errors\" }\n+rustc_incremental = { path = \"../librustc_incremental\" }\n rustc_lint = { path = \"../librustc_lint\" }\n rustc_llvm = { path = \"../librustc_llvm\" }\n+rustc_metadata = { path = \"../librustc_metadata\" }\n rustc_mir = { path = \"../librustc_mir\" }\n-rustc_plugin = { path = \"../librustc_plugin\" }\n rustc_passes = { path = \"../librustc_passes\" }\n+rustc_plugin = { path = \"../librustc_plugin\" }\n rustc_privacy = { path = \"../librustc_privacy\" }\n-rustc_incremental = { path = \"../librustc_incremental\" }\n rustc_resolve = { path = \"../librustc_resolve\" }\n rustc_save_analysis = { path = \"../librustc_save_analysis\" }\n rustc_trans = { path = \"../librustc_trans\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n-rustc_metadata = { path = \"../librustc_metadata\" }\n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_ext = { path = \"../libsyntax_ext\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-proc_macro = { path = \"../libproc_macro\" }"}, {"sha": "ea42f7ba93e447486cd99f41071ec8b155430f46", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -710,14 +710,14 @@ pub fn phase_2_configure_and_expand<'a, F>(sess: &Session,\n         krate = time(time_passes, \"maybe creating a macro crate\", || {\n             let crate_types = sess.crate_types.borrow();\n             let num_crate_types = crate_types.len();\n-            let is_rustc_macro_crate = crate_types.contains(&config::CrateTypeRustcMacro);\n-            syntax_ext::rustc_macro_registrar::modify(&sess.parse_sess,\n-                                                      &mut resolver,\n-                                                      krate,\n-                                                      is_rustc_macro_crate,\n-                                                      num_crate_types,\n-                                                      sess.diagnostic(),\n-                                                      &sess.features.borrow())\n+            let is_proc_macro_crate = crate_types.contains(&config::CrateTypeProcMacro);\n+            syntax_ext::proc_macro_registrar::modify(&sess.parse_sess,\n+                                                     &mut resolver,\n+                                                     krate,\n+                                                     is_proc_macro_crate,\n+                                                     num_crate_types,\n+                                                     sess.diagnostic(),\n+                                                     &sess.features.borrow())\n         });\n     }\n \n@@ -1181,8 +1181,8 @@ pub fn collect_crate_types(session: &Session, attrs: &[ast::Attribute]) -> Vec<c\n                          Some(ref n) if *n == \"staticlib\" => {\n                              Some(config::CrateTypeStaticlib)\n                          }\n-                         Some(ref n) if *n == \"rustc-macro\" => {\n-                             Some(config::CrateTypeRustcMacro)\n+                         Some(ref n) if *n == \"proc-macro\" => {\n+                             Some(config::CrateTypeProcMacro)\n                          }\n                          Some(ref n) if *n == \"bin\" => Some(config::CrateTypeExecutable),\n                          Some(_) => {"}, {"sha": "1f3b705671db789c6c47cf676d967a1304e675db", "filename": "src/librustc_macro/lib.rs", "status": "removed", "additions": 0, "deletions": 169, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/e51190cf07eb4e817d35c7d45eb89ec5a1ae8ddc/src%2Flibrustc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e51190cf07eb4e817d35c7d45eb89ec5a1ae8ddc/src%2Flibrustc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macro%2Flib.rs?ref=e51190cf07eb4e817d35c7d45eb89ec5a1ae8ddc", "patch": "@@ -1,169 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! A support library for macro authors when defining new macros.\n-//!\n-//! This library, provided by the standard distribution, provides the types\n-//! consumed in the interfaces of procedurally defined macro definitions.\n-//! Currently the primary use of this crate is to provide the ability to define\n-//! new custom derive modes through `#[rustc_macro_derive]`.\n-//!\n-//! Added recently as part of [RFC 1681] this crate is currently *unstable* and\n-//! requires the `#![feature(rustc_macro_lib)]` directive to use. Eventually,\n-//! though, it is intended for this crate to become stable to use (perhaps under\n-//! a different name).\n-//!\n-//! [RFC 1681]: https://github.com/rust-lang/rfcs/blob/master/text/1681-macros-1.1.md\n-//!\n-//! Note that this crate is intentionally very bare-bones currently. The main\n-//! type, `TokenStream`, only supports `fmt::Display` and `FromStr`\n-//! implementations, indicating that it can only go to and come from a string.\n-//! This functionality is intended to be expanded over time as more surface\n-//! area for macro authors is stabilized.\n-\n-#![crate_name = \"rustc_macro\"]\n-#![unstable(feature = \"rustc_macro_lib\", issue = \"27812\")]\n-#![crate_type = \"rlib\"]\n-#![crate_type = \"dylib\"]\n-#![cfg_attr(not(stage0), deny(warnings))]\n-#![deny(missing_docs)]\n-\n-#![feature(rustc_private)]\n-#![feature(staged_api)]\n-#![feature(lang_items)]\n-\n-extern crate syntax;\n-\n-use std::fmt;\n-use std::str::FromStr;\n-\n-use syntax::ast;\n-use syntax::parse;\n-use syntax::ptr::P;\n-\n-/// The main type provided by this crate, representing an abstract stream of\n-/// tokens.\n-///\n-/// This is both the input and output of `#[rustc_macro_derive]` definitions.\n-/// Currently it's required to be a list of valid Rust items, but this\n-/// restriction may be lifted in the future.\n-///\n-/// The API of this type is intentionally bare-bones, but it'll be expanded over\n-/// time!\n-pub struct TokenStream {\n-    inner: Vec<P<ast::Item>>,\n-}\n-\n-/// Error returned from `TokenStream::from_str`.\n-#[derive(Debug)]\n-pub struct LexError {\n-    _inner: (),\n-}\n-\n-/// Permanently unstable internal implementation details of this crate. This\n-/// should not be used.\n-///\n-/// These methods are used by the rest of the compiler to generate instances of\n-/// `TokenStream` to hand to macro definitions, as well as consume the output.\n-///\n-/// Note that this module is also intentionally separate from the rest of the\n-/// crate. This allows the `#[unstable]` directive below to naturally apply to\n-/// all of the contents.\n-#[unstable(feature = \"rustc_macro_internals\", issue = \"27812\")]\n-#[doc(hidden)]\n-pub mod __internal {\n-    use std::cell::Cell;\n-\n-    use syntax::ast;\n-    use syntax::ptr::P;\n-    use syntax::parse::ParseSess;\n-    use super::TokenStream;\n-\n-    pub fn new_token_stream(item: P<ast::Item>) -> TokenStream {\n-        TokenStream { inner: vec![item] }\n-    }\n-\n-    pub fn token_stream_items(stream: TokenStream) -> Vec<P<ast::Item>> {\n-        stream.inner\n-    }\n-\n-    pub trait Registry {\n-        fn register_custom_derive(&mut self,\n-                                  trait_name: &str,\n-                                  expand: fn(TokenStream) -> TokenStream);\n-    }\n-\n-    // Emulate scoped_thread_local!() here essentially\n-    thread_local! {\n-        static CURRENT_SESS: Cell<*const ParseSess> = Cell::new(0 as *const _);\n-    }\n-\n-    pub fn set_parse_sess<F, R>(sess: &ParseSess, f: F) -> R\n-        where F: FnOnce() -> R\n-    {\n-        struct Reset { prev: *const ParseSess }\n-\n-        impl Drop for Reset {\n-            fn drop(&mut self) {\n-                CURRENT_SESS.with(|p| p.set(self.prev));\n-            }\n-        }\n-\n-        CURRENT_SESS.with(|p| {\n-            let _reset = Reset { prev: p.get() };\n-            p.set(sess);\n-            f()\n-        })\n-    }\n-\n-    pub fn with_parse_sess<F, R>(f: F) -> R\n-        where F: FnOnce(&ParseSess) -> R\n-    {\n-        let p = CURRENT_SESS.with(|p| p.get());\n-        assert!(!p.is_null());\n-        f(unsafe { &*p })\n-    }\n-}\n-\n-impl FromStr for TokenStream {\n-    type Err = LexError;\n-\n-    fn from_str(src: &str) -> Result<TokenStream, LexError> {\n-        __internal::with_parse_sess(|sess| {\n-            let src = src.to_string();\n-            let cfg = Vec::new();\n-            let name = \"<rustc-macro source code>\".to_string();\n-            let mut parser = parse::new_parser_from_source_str(sess, cfg, name,\n-                                                               src);\n-            let mut ret = TokenStream { inner: Vec::new() };\n-            loop {\n-                match parser.parse_item() {\n-                    Ok(Some(item)) => ret.inner.push(item),\n-                    Ok(None) => return Ok(ret),\n-                    Err(mut err) => {\n-                        err.cancel();\n-                        return Err(LexError { _inner: () })\n-                    }\n-                }\n-            }\n-        })\n-    }\n-}\n-\n-impl fmt::Display for TokenStream {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        for item in self.inner.iter() {\n-            let item = syntax::print::pprust::item_to_string(item);\n-            try!(f.write_str(&item));\n-            try!(f.write_str(\"\\n\"));\n-        }\n-        Ok(())\n-    }\n-}"}, {"sha": "6f7f03ca216b9a3c83543c1448358e278f962285", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -11,13 +11,13 @@ crate-type = [\"dylib\"]\n [dependencies]\n flate = { path = \"../libflate\" }\n log = { path = \"../liblog\" }\n+proc_macro = { path = \"../libproc_macro\" }\n rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_llvm = { path = \"../librustc_llvm\" }\n-rustc_macro = { path = \"../librustc_macro\" }\n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_ext = { path = \"../libsyntax_ext\" }"}, {"sha": "a57207dc089b9c8e17e0c755cc09a757d9a1bc86", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -311,7 +311,7 @@ impl<'a> CrateReader<'a> {\n         let cnum_map = self.resolve_crate_deps(root, &crate_root, &metadata, cnum, span);\n \n         if crate_root.macro_derive_registrar.is_some() {\n-            self.sess.span_err(span, \"crates of the `rustc-macro` crate type \\\n+            self.sess.span_err(span, \"crates of the `proc-macro` crate type \\\n                                       cannot be linked at runtime\");\n         }\n \n@@ -609,11 +609,11 @@ impl<'a> CrateReader<'a> {\n         match root.macro_derive_registrar {\n             Some(id) => ret.custom_derive_registrar = Some(id),\n \n-            // If this crate is not a rustc-macro crate then we might be able to\n+            // If this crate is not a proc-macro crate then we might be able to\n             // register it with the local crate store to prevent loading the\n             // metadata twice.\n             //\n-            // If it's a rustc-macro crate, though, then we definitely don't\n+            // If it's a proc-macro crate, though, then we definitely don't\n             // want to register it with the local crate store as we're just\n             // going to use it as we would a plugin.\n             None => {\n@@ -625,11 +625,11 @@ impl<'a> CrateReader<'a> {\n         self.cstore.add_used_for_derive_macros(item);\n         ret.dylib = ekrate.dylib.clone();\n         if ret.dylib.is_none() {\n-            span_bug!(item.span, \"rustc-macro crate not dylib\");\n+            span_bug!(item.span, \"proc-macro crate not dylib\");\n         }\n \n         if ekrate.target_only {\n-            let message = format!(\"rustc-macro crate is not available for \\\n+            let message = format!(\"proc-macro crate is not available for \\\n                                    triple `{}` (only found {})\",\n                                   config::host_triple(),\n                                   self.sess.opts.target_triple);\n@@ -804,7 +804,7 @@ impl<'a> CrateReader<'a> {\n             match *ct {\n                 config::CrateTypeExecutable => need_exe_alloc = true,\n                 config::CrateTypeDylib |\n-                config::CrateTypeRustcMacro |\n+                config::CrateTypeProcMacro |\n                 config::CrateTypeCdylib |\n                 config::CrateTypeStaticlib => need_lib_alloc = true,\n                 config::CrateTypeRlib => {}"}, {"sha": "21630dde5f52bc56f263cb268665f233cd073798", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -23,7 +23,7 @@ use rustc::traits::specialization_graph;\n use rustc::ty::{self, Ty, TyCtxt};\n \n use rustc::mir::mir_map::MirMap;\n-use rustc::session::config::{self, CrateTypeRustcMacro};\n+use rustc::session::config::{self, CrateTypeProcMacro};\n use rustc::util::nodemap::{FnvHashMap, NodeSet};\n \n use rustc_serialize::{Encodable, Encoder, SpecializedEncoder, opaque};\n@@ -1283,7 +1283,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         let tcx = self.tcx;\n         let link_meta = self.link_meta;\n-        let is_rustc_macro = tcx.sess.crate_types.borrow().contains(&CrateTypeRustcMacro);\n+        let is_proc_macro = tcx.sess.crate_types.borrow().contains(&CrateTypeProcMacro);\n         let root = self.lazy(&CrateRoot {\n             rustc_version: rustc_version(),\n             name: link_meta.crate_name.clone(),\n@@ -1294,7 +1294,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             plugin_registrar_fn: tcx.sess.plugin_registrar_fn.get().map(|id| {\n                 tcx.map.local_def_id(id).index\n             }),\n-            macro_derive_registrar: if is_rustc_macro {\n+            macro_derive_registrar: if is_proc_macro {\n                 let id = tcx.sess.derive_registrar_fn.get().unwrap();\n                 Some(tcx.map.local_def_id(id).index)\n             } else {"}, {"sha": "acaafb35425d040c5913c37a39dad658abb494ec", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -17,15 +17,15 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![cfg_attr(not(stage0), deny(warnings))]\n \n+#![feature(box_patterns)]\n #![feature(conservative_impl_trait)]\n #![feature(core_intrinsics)]\n-#![feature(box_patterns)]\n #![feature(dotdot_in_tuple_patterns)]\n+#![feature(proc_macro_internals)]\n+#![feature(proc_macro_lib)]\n #![feature(question_mark)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(rustc_macro_lib)]\n-#![feature(rustc_macro_internals)]\n #![feature(rustc_private)]\n #![feature(specialization)]\n #![feature(staged_api)]\n@@ -37,14 +37,14 @@ extern crate flate;\n extern crate serialize as rustc_serialize; // used by deriving\n extern crate rustc_errors as errors;\n extern crate syntax_ext;\n+extern crate proc_macro;\n \n #[macro_use]\n extern crate rustc;\n-extern crate rustc_data_structures;\n extern crate rustc_back;\n-extern crate rustc_llvm;\n-extern crate rustc_macro;\n extern crate rustc_const_math;\n+extern crate rustc_data_structures;\n+extern crate rustc_llvm;\n \n mod diagnostics;\n "}, {"sha": "7cd03b2d5b9411da4c2e073034598b1d5725b700", "filename": "src/librustc_metadata/macro_import.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc_metadata%2Fmacro_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc_metadata%2Fmacro_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fmacro_import.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -17,13 +17,13 @@ use std::mem;\n \n use creader::{CrateLoader, Macros};\n \n+use proc_macro::TokenStream;\n+use proc_macro::__internal::Registry;\n use rustc::hir::def_id::DefIndex;\n use rustc::middle::cstore::{LoadedMacro, LoadedMacroKind};\n use rustc::session::Session;\n use rustc::util::nodemap::FnvHashMap;\n use rustc_back::dynamic_lib::DynamicLibrary;\n-use rustc_macro::TokenStream;\n-use rustc_macro::__internal::Registry;\n use syntax::ast;\n use syntax::attr;\n use syntax::parse::token;\n@@ -145,13 +145,13 @@ impl<'a> CrateLoader<'a> {\n             assert_eq!(ret.len(), 0);\n \n             if let ImportSelection::Some(..) = import {\n-                self.sess.span_err(vi.span, \"`rustc-macro` crates cannot be \\\n+                self.sess.span_err(vi.span, \"`proc-macro` crates cannot be \\\n                                              selectively imported from, must \\\n                                              use `#[macro_use]`\");\n             }\n \n             if reexport.len() > 0 {\n-                self.sess.span_err(vi.span, \"`rustc-macro` crates cannot be \\\n+                self.sess.span_err(vi.span, \"`proc-macro` crates cannot be \\\n                                              reexported from\");\n             }\n "}, {"sha": "9149202c1c1bb516526e7d517b9a41200ccf10b5", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -507,10 +507,10 @@ impl<'b> Resolver<'b> {\n     }\n \n     fn insert_custom_derive(&mut self, name: &str, ext: Rc<MultiItemModifier>, sp: Span) {\n-        if !self.session.features.borrow().rustc_macro {\n+        if !self.session.features.borrow().proc_macro {\n             let sess = &self.session.parse_sess;\n             let msg = \"loading custom derive macro crates is experimentally supported\";\n-            emit_feature_err(sess, \"rustc_macro\", sp, feature_gate::GateIssue::Language, msg);\n+            emit_feature_err(sess, \"proc_macro\", sp, feature_gate::GateIssue::Language, msg);\n         }\n         if self.derive_modes.insert(token::intern(name), ext).is_some() {\n             self.session.span_err(sp, &format!(\"cannot shadow existing derive mode `{}`\", name));"}, {"sha": "5a8c5cb4b82c6f3543abc27ac041b773edcfe113", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -239,7 +239,7 @@ pub fn invalid_output_for_target(sess: &Session,\n     match (sess.target.target.options.dynamic_linking,\n            sess.target.target.options.executables, crate_type) {\n         (false, _, config::CrateTypeCdylib) |\n-        (false, _, config::CrateTypeRustcMacro) |\n+        (false, _, config::CrateTypeProcMacro) |\n         (false, _, config::CrateTypeDylib) => true,\n         (_, false, config::CrateTypeExecutable) => true,\n         _ => false\n@@ -263,7 +263,7 @@ pub fn filename_for_input(sess: &Session,\n             outputs.out_directory.join(&format!(\"lib{}.rlib\", libname))\n         }\n         config::CrateTypeCdylib |\n-        config::CrateTypeRustcMacro |\n+        config::CrateTypeProcMacro |\n         config::CrateTypeDylib => {\n             let (prefix, suffix) = (&sess.target.target.options.dll_prefix,\n                                     &sess.target.target.options.dll_suffix);\n@@ -295,7 +295,7 @@ pub fn each_linked_rlib(sess: &Session,\n     let fmts = fmts.get(&config::CrateTypeExecutable)\n                    .or_else(|| fmts.get(&config::CrateTypeStaticlib))\n                    .or_else(|| fmts.get(&config::CrateTypeCdylib))\n-                   .or_else(|| fmts.get(&config::CrateTypeRustcMacro));\n+                   .or_else(|| fmts.get(&config::CrateTypeProcMacro));\n     let fmts = fmts.unwrap_or_else(|| {\n         bug!(\"could not find formats for rlibs\")\n     });\n@@ -736,7 +736,7 @@ fn link_args(cmd: &mut Linker,\n     // executable. This metadata is in a separate object file from the main\n     // object file, so we link that in here.\n     if crate_type == config::CrateTypeDylib ||\n-       crate_type == config::CrateTypeRustcMacro {\n+       crate_type == config::CrateTypeProcMacro {\n         cmd.add_object(&outputs.with_extension(\"metadata.o\"));\n     }\n "}, {"sha": "3222571a76e17e0dc4a9332cb1395d15725b813f", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -245,7 +245,7 @@ impl<'a> Linker for GnuLinker<'a> {\n         // have far more public symbols than we actually want to export, so we\n         // hide them all here.\n         if crate_type == CrateType::CrateTypeDylib ||\n-           crate_type == CrateType::CrateTypeRustcMacro {\n+           crate_type == CrateType::CrateTypeProcMacro {\n             return\n         }\n \n@@ -450,7 +450,7 @@ fn exported_symbols(scx: &SharedCrateContext,\n     // See explanation in GnuLinker::export_symbols, for\n     // why we don't ever need dylib symbols on non-MSVC.\n     if crate_type == CrateType::CrateTypeDylib ||\n-       crate_type == CrateType::CrateTypeRustcMacro {\n+       crate_type == CrateType::CrateTypeProcMacro {\n         if !scx.sess().target.target.options.is_like_msvc {\n             return vec![];\n         }"}, {"sha": "3abe7626efc6ef922a277dcec9c17df2664e8090", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -862,7 +862,7 @@ impl<'feat> ExpansionConfig<'feat> {\n         fn enable_allow_internal_unstable = allow_internal_unstable,\n         fn enable_custom_derive = custom_derive,\n         fn enable_pushpop_unsafe = pushpop_unsafe,\n-        fn enable_rustc_macro = rustc_macro,\n+        fn enable_proc_macro = proc_macro,\n     }\n }\n "}, {"sha": "9eed1d61244a49b80585992374881bbac9d236f8", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -292,7 +292,7 @@ declare_features! (\n     (active, item_like_imports, \"1.13.0\", Some(35120)),\n \n     // Macros 1.1\n-    (active, rustc_macro, \"1.13.0\", Some(35900)),\n+    (active, proc_macro, \"1.13.0\", Some(35900)),\n \n     // Allows untagged unions `union U { ... }`\n     (active, untagged_unions, \"1.13.0\", Some(32836)),\n@@ -576,10 +576,10 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGat\n                                    is an experimental feature\",\n                                   cfg_fn!(linked_from))),\n \n-    (\"rustc_macro_derive\", Normal, Gated(\"rustc_macro\",\n-                                         \"the `#[rustc_macro_derive]` attribute \\\n-                                          is an experimental feature\",\n-                                         cfg_fn!(rustc_macro))),\n+    (\"proc_macro_derive\", Normal, Gated(\"proc_macro\",\n+                                        \"the `#[proc_macro_derive]` attribute \\\n+                                         is an experimental feature\",\n+                                        cfg_fn!(proc_macro))),\n \n     (\"rustc_copy_clone_marker\", Whitelisted, Gated(\"rustc_attrs\",\n                                                    \"internal implementation detail\",\n@@ -658,7 +658,7 @@ const GATED_CFGS: &'static [(&'static str, &'static str, fn(&Features) -> bool)]\n     (\"target_vendor\", \"cfg_target_vendor\", cfg_fn!(cfg_target_vendor)),\n     (\"target_thread_local\", \"cfg_target_thread_local\", cfg_fn!(cfg_target_thread_local)),\n     (\"target_has_atomic\", \"cfg_target_has_atomic\", cfg_fn!(cfg_target_has_atomic)),\n-    (\"rustc_macro\", \"rustc_macro\", cfg_fn!(rustc_macro)),\n+    (\"proc_macro\", \"proc_macro\", cfg_fn!(proc_macro)),\n ];\n \n #[derive(Debug, Eq, PartialEq)]"}, {"sha": "960db792a623e4c2a1ab38cb60b12ba37481ff41", "filename": "src/libsyntax_ext/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibsyntax_ext%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibsyntax_ext%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2FCargo.toml?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -11,7 +11,7 @@ crate-type = [\"dylib\"]\n [dependencies]\n fmt_macros = { path = \"../libfmt_macros\" }\n log = { path = \"../liblog\" }\n+proc_macro = { path = \"../libproc_macro\" }\n rustc_errors = { path = \"../librustc_errors\" }\n-rustc_macro = { path = \"../librustc_macro\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "f8cb1294a6663ea91024fb96f3c1ad0bdc35c476", "filename": "src/libsyntax_ext/deriving/custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -11,7 +11,7 @@\n use std::panic;\n \n use errors::FatalError;\n-use rustc_macro::{TokenStream, __internal};\n+use proc_macro::{TokenStream, __internal};\n use syntax::ast::{self, ItemKind};\n use syntax::codemap::{ExpnInfo, MacroAttribute, NameAndSpan, Span};\n use syntax::ext::base::*;"}, {"sha": "e9d2c0a503be9718faf110745c9e55398ec55ce8", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -20,8 +20,8 @@\n #![cfg_attr(not(stage0), deny(warnings))]\n \n #![feature(dotdot_in_tuple_patterns)]\n-#![feature(rustc_macro_lib)]\n-#![feature(rustc_macro_internals)]\n+#![feature(proc_macro_lib)]\n+#![feature(proc_macro_internals)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n \n@@ -31,7 +31,7 @@ extern crate log;\n #[macro_use]\n extern crate syntax;\n extern crate syntax_pos;\n-extern crate rustc_macro;\n+extern crate proc_macro;\n extern crate rustc_errors as errors;\n \n mod asm;\n@@ -43,7 +43,7 @@ mod format;\n mod log_syntax;\n mod trace_macros;\n \n-pub mod rustc_macro_registrar;\n+pub mod proc_macro_registrar;\n \n // for custom_derive\n pub mod deriving;"}, {"sha": "b96fb08e59e6edcdd5b7813c6e6b3d8582575e78", "filename": "src/libsyntax_ext/proc_macro_registrar.rs", "status": "renamed", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -36,45 +36,45 @@ struct CollectCustomDerives<'a> {\n     derives: Vec<CustomDerive>,\n     in_root: bool,\n     handler: &'a errors::Handler,\n-    is_rustc_macro_crate: bool,\n+    is_proc_macro_crate: bool,\n }\n \n pub fn modify(sess: &ParseSess,\n               resolver: &mut ::syntax::ext::base::Resolver,\n               mut krate: ast::Crate,\n-              is_rustc_macro_crate: bool,\n+              is_proc_macro_crate: bool,\n               num_crate_types: usize,\n               handler: &errors::Handler,\n               features: &Features) -> ast::Crate {\n-    let ecfg = ExpansionConfig::default(\"rustc_macro\".to_string());\n+    let ecfg = ExpansionConfig::default(\"proc_macro\".to_string());\n     let mut cx = ExtCtxt::new(sess, Vec::new(), ecfg, resolver);\n \n     let mut collect = CollectCustomDerives {\n         derives: Vec::new(),\n         in_root: true,\n         handler: handler,\n-        is_rustc_macro_crate: is_rustc_macro_crate,\n+        is_proc_macro_crate: is_proc_macro_crate,\n     };\n     visit::walk_crate(&mut collect, &krate);\n \n-    if !is_rustc_macro_crate {\n+    if !is_proc_macro_crate {\n         return krate\n-    } else if !features.rustc_macro {\n-        let mut err = handler.struct_err(\"the `rustc-macro` crate type is \\\n+    } else if !features.proc_macro {\n+        let mut err = handler.struct_err(\"the `proc-macro` crate type is \\\n                                           experimental\");\n-        err.help(\"add #![feature(rustc_macro)] to the crate attributes to \\\n+        err.help(\"add #![feature(proc_macro)] to the crate attributes to \\\n                   enable\");\n         err.emit();\n     }\n \n     if num_crate_types > 1 {\n-        handler.err(\"cannot mix `rustc-macro` crate type with others\");\n+        handler.err(\"cannot mix `proc-macro` crate type with others\");\n     }\n \n     krate.module.items.push(mk_registrar(&mut cx, &collect.derives));\n \n     if krate.exported_macros.len() > 0 {\n-        handler.err(\"cannot export macro_rules! macros from a `rustc-macro` \\\n+        handler.err(\"cannot export macro_rules! macros from a `proc-macro` \\\n                      crate type currently\");\n     }\n \n@@ -83,13 +83,13 @@ pub fn modify(sess: &ParseSess,\n \n impl<'a> CollectCustomDerives<'a> {\n     fn check_not_pub_in_root(&self, vis: &ast::Visibility, sp: Span) {\n-        if self.is_rustc_macro_crate &&\n+        if self.is_proc_macro_crate &&\n            self.in_root &&\n            *vis == ast::Visibility::Public {\n             self.handler.span_err(sp,\n-                                  \"`rustc-macro` crate types cannot \\\n+                                  \"`proc-macro` crate types cannot \\\n                                    export any items other than functions \\\n-                                   tagged with `#[rustc_macro_derive]` \\\n+                                   tagged with `#[proc_macro_derive]` \\\n                                    currently\");\n         }\n     }\n@@ -100,7 +100,7 @@ impl<'a> Visitor for CollectCustomDerives<'a> {\n         // First up, make sure we're checking a bare function. If we're not then\n         // we're just not interested in this item.\n         //\n-        // If we find one, try to locate a `#[rustc_macro_derive]` attribute on\n+        // If we find one, try to locate a `#[proc_macro_derive]` attribute on\n         // it.\n         match item.node {\n             ast::ItemKind::Fn(..) => {}\n@@ -111,7 +111,7 @@ impl<'a> Visitor for CollectCustomDerives<'a> {\n         }\n \n         let mut attrs = item.attrs.iter()\n-                            .filter(|a| a.check_name(\"rustc_macro_derive\"));\n+                            .filter(|a| a.check_name(\"proc_macro_derive\"));\n         let attr = match attrs.next() {\n             Some(attr) => attr,\n             None => {\n@@ -121,25 +121,25 @@ impl<'a> Visitor for CollectCustomDerives<'a> {\n         };\n \n         if let Some(a) = attrs.next() {\n-            self.handler.span_err(a.span(), \"multiple `#[rustc_macro_derive]` \\\n+            self.handler.span_err(a.span(), \"multiple `#[proc_macro_derive]` \\\n                                              attributes found\");\n         }\n \n-        if !self.is_rustc_macro_crate {\n+        if !self.is_proc_macro_crate {\n             self.handler.span_err(attr.span(),\n-                                  \"the `#[rustc_macro_derive]` attribute is \\\n-                                   only usable with crates of the `rustc-macro` \\\n+                                  \"the `#[proc_macro_derive]` attribute is \\\n+                                   only usable with crates of the `proc-macro` \\\n                                    crate type\");\n         }\n \n-        // Once we've located the `#[rustc_macro_derive]` attribute, verify\n-        // that it's of the form `#[rustc_macro_derive(Foo)]`\n+        // Once we've located the `#[proc_macro_derive]` attribute, verify\n+        // that it's of the form `#[proc_macro_derive(Foo)]`\n         let list = match attr.meta_item_list() {\n             Some(list) => list,\n             None => {\n                 self.handler.span_err(attr.span(),\n                                       \"attribute must be of form: \\\n-                                       #[rustc_macro_derive(TraitName)]\");\n+                                       #[proc_macro_derive(TraitName)]\");\n                 return\n             }\n         };\n@@ -177,7 +177,7 @@ impl<'a> Visitor for CollectCustomDerives<'a> {\n                 function_name: item.ident,\n             });\n         } else {\n-            let msg = \"functions tagged with `#[rustc_macro_derive]` must \\\n+            let msg = \"functions tagged with `#[proc_macro_derive]` must \\\n                        currently reside in the root of the crate\";\n             self.handler.span_err(item.span, msg);\n         }\n@@ -202,9 +202,9 @@ impl<'a> Visitor for CollectCustomDerives<'a> {\n // Creates a new module which looks like:\n //\n //      mod $gensym {\n-//          extern crate rustc_macro;\n+//          extern crate proc_macro;\n //\n-//          use rustc_macro::__internal::Registry;\n+//          use proc_macro::__internal::Registry;\n //\n //          #[plugin_registrar]\n //          fn registrar(registrar: &mut Registry) {\n@@ -218,16 +218,16 @@ fn mk_registrar(cx: &mut ExtCtxt,\n     let eid = cx.codemap().record_expansion(ExpnInfo {\n         call_site: DUMMY_SP,\n         callee: NameAndSpan {\n-            format: MacroAttribute(token::intern(\"rustc_macro\")),\n+            format: MacroAttribute(token::intern(\"proc_macro\")),\n             span: None,\n             allow_internal_unstable: true,\n         }\n     });\n     let span = Span { expn_id: eid, ..DUMMY_SP };\n \n-    let rustc_macro = token::str_to_ident(\"rustc_macro\");\n+    let proc_macro = token::str_to_ident(\"proc_macro\");\n     let krate = cx.item(span,\n-                        rustc_macro,\n+                        proc_macro,\n                         Vec::new(),\n                         ast::ItemKind::ExternCrate(None));\n \n@@ -241,7 +241,7 @@ fn mk_registrar(cx: &mut ExtCtxt,\n         (path, trait_name)\n     }).map(|(path, trait_name)| {\n         let registrar = cx.expr_ident(span, registrar);\n-        let ufcs_path = cx.path(span, vec![rustc_macro, __internal, registry,\n+        let ufcs_path = cx.path(span, vec![proc_macro, __internal, registry,\n                                            register_custom_derive]);\n         cx.expr_call(span,\n                      cx.expr_path(ufcs_path),\n@@ -250,7 +250,7 @@ fn mk_registrar(cx: &mut ExtCtxt,\n         cx.stmt_expr(expr)\n     }).collect::<Vec<_>>();\n \n-    let path = cx.path(span, vec![rustc_macro, __internal, registry]);\n+    let path = cx.path(span, vec![proc_macro, __internal, registry]);\n     let registrar_path = cx.ty_path(path);\n     let arg_ty = cx.ty_rptr(span, registrar_path, None, ast::Mutability::Mutable);\n     let func = cx.item_fn(span,", "previous_filename": "src/libsyntax_ext/rustc_macro_registrar.rs"}, {"sha": "192d14b8fb1583cfb92d42296c58eb472ba6fa2a", "filename": "src/rustc/Cargo.lock", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Frustc%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Frustc%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2FCargo.lock?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -43,6 +43,13 @@ version = \"0.0.0\"\n [[package]]\n name = \"proc_macro\"\n version = \"0.0.0\"\n+dependencies = [\n+ \"syntax 0.0.0\",\n+]\n+\n+[[package]]\n+name = \"proc_macro_plugin\"\n+version = \"0.0.0\"\n dependencies = [\n  \"log 0.0.0\",\n  \"rustc_plugin 0.0.0\",\n@@ -137,7 +144,7 @@ dependencies = [\n  \"flate 0.0.0\",\n  \"graphviz 0.0.0\",\n  \"log 0.0.0\",\n- \"proc_macro 0.0.0\",\n+ \"proc_macro_plugin 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_borrowck 0.0.0\",\n@@ -204,26 +211,19 @@ dependencies = [\n  \"rustc_bitflags 0.0.0\",\n ]\n \n-[[package]]\n-name = \"rustc_macro\"\n-version = \"0.0.0\"\n-dependencies = [\n- \"syntax 0.0.0\",\n-]\n-\n [[package]]\n name = \"rustc_metadata\"\n version = \"0.0.0\"\n dependencies = [\n  \"flate 0.0.0\",\n  \"log 0.0.0\",\n+ \"proc_macro 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"rustc_llvm 0.0.0\",\n- \"rustc_macro 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_ext 0.0.0\",\n@@ -396,8 +396,8 @@ version = \"0.0.0\"\n dependencies = [\n  \"fmt_macros 0.0.0\",\n  \"log 0.0.0\",\n+ \"proc_macro 0.0.0\",\n  \"rustc_errors 0.0.0\",\n- \"rustc_macro 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]"}, {"sha": "b03e1e4f919282d5f95d0dcd3f5e2fcef3670dda", "filename": "src/test/compile-fail-fulldeps/proc-macro/at-the-root.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fat-the-root.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fat-the-root.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fat-the-root.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_type = \"rustc-macro\"]\n-#![feature(rustc_macro)]\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro)]\n \n-extern crate rustc_macro;\n+extern crate proc_macro;\n \n-pub mod a { //~ `rustc-macro` crate types cannot export any items\n-    use rustc_macro::TokenStream;\n+pub mod a { //~ `proc-macro` crate types cannot export any items\n+    use proc_macro::TokenStream;\n \n-    #[rustc_macro_derive(B)]\n+    #[proc_macro_derive(B)]\n     pub fn bar(a: TokenStream) -> TokenStream {\n     //~^ ERROR: must currently reside in the root of the crate\n         a", "previous_filename": "src/test/compile-fail-fulldeps/rustc-macro/at-the-root.rs"}, {"sha": "d1b2aa330ed5aec842b8f5343e592cffa4659370", "filename": "src/test/compile-fail-fulldeps/proc-macro/attribute.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattribute.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro)]\n+\n+extern crate proc_macro;\n+\n+#[proc_macro_derive]\n+//~^ ERROR: attribute must be of form: #[proc_macro_derive(TraitName)]\n+pub fn foo1(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n+    input\n+}\n+\n+#[proc_macro_derive = \"foo\"]\n+//~^ ERROR: attribute must be of form: #[proc_macro_derive(TraitName)]\n+pub fn foo2(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n+    input\n+}\n+\n+#[proc_macro_derive(\n+    a = \"b\"\n+)]\n+//~^^ ERROR: must only be one word\n+pub fn foo3(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n+    input\n+}\n+\n+#[proc_macro_derive(b, c)]\n+//~^ ERROR: attribute must only have one argument\n+pub fn foo4(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n+    input\n+}\n+\n+#[proc_macro_derive(d(e))]\n+//~^ ERROR: must only be one word\n+pub fn foo5(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n+    input\n+}"}, {"sha": "4aa4238611d8947a1488f1956f42e70c5666adce", "filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/derive-a-2.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-a-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-a-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-a-2.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -11,15 +11,15 @@\n // force-host\n // no-prefer-dynamic\n \n-#![feature(rustc_macro)]\n-#![feature(rustc_macro_lib)]\n-#![crate_type = \"rustc-macro\"]\n+#![feature(proc_macro)]\n+#![feature(proc_macro_lib)]\n+#![crate_type = \"proc-macro\"]\n \n-extern crate rustc_macro;\n+extern crate proc_macro;\n \n-use rustc_macro::TokenStream;\n+use proc_macro::TokenStream;\n \n-#[rustc_macro_derive(A)]\n+#[proc_macro_derive(A)]\n pub fn derive_a(input: TokenStream) -> TokenStream {\n     input\n }", "previous_filename": "src/test/compile-fail-fulldeps/rustc-macro/auxiliary/derive-a-2.rs"}, {"sha": "4aa4238611d8947a1488f1956f42e70c5666adce", "filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/derive-a.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-a.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -11,15 +11,15 @@\n // force-host\n // no-prefer-dynamic\n \n-#![feature(rustc_macro)]\n-#![feature(rustc_macro_lib)]\n-#![crate_type = \"rustc-macro\"]\n+#![feature(proc_macro)]\n+#![feature(proc_macro_lib)]\n+#![crate_type = \"proc-macro\"]\n \n-extern crate rustc_macro;\n+extern crate proc_macro;\n \n-use rustc_macro::TokenStream;\n+use proc_macro::TokenStream;\n \n-#[rustc_macro_derive(A)]\n+#[proc_macro_derive(A)]\n pub fn derive_a(input: TokenStream) -> TokenStream {\n     input\n }", "previous_filename": "src/test/compile-fail-fulldeps/rustc-macro/auxiliary/derive-a.rs"}, {"sha": "aae8b63e25354d6a13771911f8b9323bd303d729", "filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/derive-bad.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-bad.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -11,15 +11,15 @@\n // no-prefer-dynamic\n // force-host\n \n-#![feature(rustc_macro)]\n-#![feature(rustc_macro_lib)]\n-#![crate_type = \"rustc-macro\"]\n+#![feature(proc_macro)]\n+#![feature(proc_macro_lib)]\n+#![crate_type = \"proc-macro\"]\n \n-extern crate rustc_macro;\n+extern crate proc_macro;\n \n-use rustc_macro::TokenStream;\n+use proc_macro::TokenStream;\n \n-#[rustc_macro_derive(A)]\n+#[proc_macro_derive(A)]\n pub fn derive_a(_input: TokenStream) -> TokenStream {\n     \"struct A { inner }\".parse().unwrap()\n }", "previous_filename": "src/test/compile-fail-fulldeps/rustc-macro/auxiliary/derive-bad.rs"}, {"sha": "f426fe5437671ccd2e66d023af44cc675f0cf45f", "filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/derive-panic.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-panic.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -11,15 +11,15 @@\n // no-prefer-dynamic\n // force-host\n \n-#![feature(rustc_macro)]\n-#![feature(rustc_macro_lib)]\n-#![crate_type = \"rustc-macro\"]\n+#![feature(proc_macro)]\n+#![feature(proc_macro_lib)]\n+#![crate_type = \"proc-macro\"]\n \n-extern crate rustc_macro;\n+extern crate proc_macro;\n \n-use rustc_macro::TokenStream;\n+use proc_macro::TokenStream;\n \n-#[rustc_macro_derive(A)]\n+#[proc_macro_derive(A)]\n pub fn derive_a(_input: TokenStream) -> TokenStream {\n     panic!(\"nope!\");\n }", "previous_filename": "src/test/compile-fail-fulldeps/rustc-macro/auxiliary/derive-panic.rs"}, {"sha": "d8952e3478b6c3a36b017a91c5df2c96c7c397c1", "filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/derive-unstable-2.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-unstable-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-unstable-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-unstable-2.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -11,15 +11,15 @@\n // force-host\n // no-prefer-dynamic\n \n-#![feature(rustc_macro)]\n-#![feature(rustc_macro_lib)]\n-#![crate_type = \"rustc-macro\"]\n+#![feature(proc_macro)]\n+#![feature(proc_macro_lib)]\n+#![crate_type = \"proc-macro\"]\n \n-extern crate rustc_macro;\n+extern crate proc_macro;\n \n-use rustc_macro::TokenStream;\n+use proc_macro::TokenStream;\n \n-#[rustc_macro_derive(Unstable)]\n+#[proc_macro_derive(Unstable)]\n pub fn derive(_input: TokenStream) -> TokenStream {\n \n     \"", "previous_filename": "src/test/compile-fail-fulldeps/rustc-macro/auxiliary/derive-unstable-2.rs"}, {"sha": "1187b5102e23fa6a29a3d7a52995eb3be85c6e81", "filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/derive-unstable.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-unstable.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -11,15 +11,15 @@\n // force-host\n // no-prefer-dynamic\n \n-#![feature(rustc_macro)]\n-#![feature(rustc_macro_lib)]\n-#![crate_type = \"rustc-macro\"]\n+#![feature(proc_macro)]\n+#![feature(proc_macro_lib)]\n+#![crate_type = \"proc-macro\"]\n \n-extern crate rustc_macro;\n+extern crate proc_macro;\n \n-use rustc_macro::TokenStream;\n+use proc_macro::TokenStream;\n \n-#[rustc_macro_derive(Unstable)]\n+#[proc_macro_derive(Unstable)]\n pub fn derive(_input: TokenStream) -> TokenStream {\n \n     \"unsafe fn foo() -> u32 { ::std::intrinsics::init() }\".parse().unwrap()", "previous_filename": "src/test/compile-fail-fulldeps/rustc-macro/auxiliary/derive-unstable.rs"}, {"sha": "f6f1be37fc3c95c073b7da1fef9b935ad9484958", "filename": "src/test/compile-fail-fulldeps/proc-macro/cannot-link.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fcannot-link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fcannot-link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fcannot-link.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -11,6 +11,6 @@\n // aux-build:derive-a.rs\n \n extern crate derive_a;\n-//~^ ERROR: crates of the `rustc-macro` crate type cannot be linked at runtime\n+//~^ ERROR: crates of the `proc-macro` crate type cannot be linked at runtime\n \n fn main() {}", "previous_filename": "src/test/compile-fail-fulldeps/rustc-macro/cannot-link.rs"}, {"sha": "420249b258135de44da4b7b86baa1813cc2a1327", "filename": "src/test/compile-fail-fulldeps/proc-macro/define-two.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fdefine-two.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fdefine-two.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fdefine-two.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -10,19 +10,19 @@\n \n // no-prefer-dynamic\n \n-#![crate_type = \"rustc-macro\"]\n-#![feature(rustc_macro)]\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro)]\n \n-extern crate rustc_macro;\n+extern crate proc_macro;\n \n-use rustc_macro::TokenStream;\n+use proc_macro::TokenStream;\n \n-#[rustc_macro_derive(A)]\n+#[proc_macro_derive(A)]\n pub fn foo(input: TokenStream) -> TokenStream {\n     input\n }\n \n-#[rustc_macro_derive(A)] //~ ERROR: derive mode defined twice in this crate\n+#[proc_macro_derive(A)] //~ ERROR: derive mode defined twice in this crate\n pub fn bar(input: TokenStream) -> TokenStream {\n     input\n }", "previous_filename": "src/test/compile-fail-fulldeps/rustc-macro/define-two.rs"}, {"sha": "4cc6b9f984c949d9825a542824a5f62f972489dc", "filename": "src/test/compile-fail-fulldeps/proc-macro/derive-bad.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fderive-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fderive-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fderive-bad.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:derive-bad.rs\n \n-#![feature(rustc_macro)]\n+#![feature(proc_macro)]\n \n #[macro_use]\n extern crate derive_bad;", "previous_filename": "src/test/compile-fail-fulldeps/rustc-macro/derive-bad.rs"}, {"sha": "eb0bb00be91750817c45515cfba731de58183b10", "filename": "src/test/compile-fail-fulldeps/proc-macro/derive-still-gated.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fderive-still-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fderive-still-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fderive-still-gated.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:derive-a.rs\n \n-#![feature(rustc_macro)]\n+#![feature(proc_macro)]\n #![allow(warnings)]\n \n #[macro_use]", "previous_filename": "src/test/compile-fail-fulldeps/rustc-macro/derive-still-gated.rs"}, {"sha": "23dcbe03b5feefcca465aa3595b22599f0fbe94e", "filename": "src/test/compile-fail-fulldeps/proc-macro/expand-to-unstable-2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fexpand-to-unstable-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fexpand-to-unstable-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fexpand-to-unstable-2.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:derive-unstable-2.rs\n \n-#![feature(rustc_macro)]\n+#![feature(proc_macro)]\n #![allow(warnings)]\n \n #[macro_use]", "previous_filename": "src/test/compile-fail-fulldeps/rustc-macro/expand-to-unstable-2.rs"}, {"sha": "fb86f6f1b6574851ba0031649c6bebb4c4dabb31", "filename": "src/test/compile-fail-fulldeps/proc-macro/expand-to-unstable.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fexpand-to-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fexpand-to-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fexpand-to-unstable.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:derive-unstable.rs\n \n-#![feature(rustc_macro)]\n+#![feature(proc_macro)]\n #![allow(warnings)]\n \n #[macro_use]", "previous_filename": "src/test/compile-fail-fulldeps/rustc-macro/expand-to-unstable.rs"}, {"sha": "48b73e733318514fc6fc9203b125cfa525164a98", "filename": "src/test/compile-fail-fulldeps/proc-macro/export-macro.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fexport-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fexport-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fexport-macro.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: cannot export macro_rules! macros from a `rustc-macro` crate\n+// error-pattern: cannot export macro_rules! macros from a `proc-macro` crate\n \n-#![crate_type = \"rustc-macro\"]\n-#![feature(rustc_macro)]\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro)]\n \n #[macro_export]\n macro_rules! foo {", "previous_filename": "src/test/compile-fail-fulldeps/rustc-macro/export-macro.rs"}, {"sha": "41b94d04e8c73cca82b90f745c464a66c6d8f7dc", "filename": "src/test/compile-fail-fulldeps/proc-macro/exports.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fexports.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_type = \"rustc-macro\"]\n+#![crate_type = \"proc-macro\"]\n #![allow(warnings)]\n \n pub fn a() {} //~ ERROR: cannot export any items", "previous_filename": "src/test/compile-fail-fulldeps/rustc-macro/exports.rs"}, {"sha": "f5618fc6425e2869481281f3e01081771e6eed00", "filename": "src/test/compile-fail-fulldeps/proc-macro/feature-gate-1.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ffeature-gate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ffeature-gate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ffeature-gate-1.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: the `rustc-macro` crate type is experimental\n+// error-pattern: the `proc-macro` crate type is experimental\n \n-#![crate_type = \"rustc-macro\"]\n+#![crate_type = \"proc-macro\"]", "previous_filename": "src/test/compile-fail-fulldeps/rustc-macro/feature-gate-1.rs"}, {"sha": "9c4053266f471c02931550515786d17f1211904d", "filename": "src/test/compile-fail-fulldeps/proc-macro/feature-gate-2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ffeature-gate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ffeature-gate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ffeature-gate-2.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate rustc_macro; //~ ERROR: use of unstable library feature\n+extern crate proc_macro; //~ ERROR: use of unstable library feature\n \n fn main() {}", "previous_filename": "src/test/compile-fail-fulldeps/rustc-macro/feature-gate-2.rs"}, {"sha": "bb6b575962250d5c689f214a50b1145abf7ac642", "filename": "src/test/compile-fail-fulldeps/proc-macro/feature-gate-3.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ffeature-gate-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ffeature-gate-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ffeature-gate-3.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_type = \"rustc-macro\"]\n+#![crate_type = \"proc-macro\"]\n \n-#[rustc_macro_derive(Foo)] //~ ERROR: is an experimental feature\n+#[proc_macro_derive(Foo)] //~ ERROR: is an experimental feature\n pub fn foo() {\n }", "previous_filename": "src/test/compile-fail-fulldeps/rustc-macro/feature-gate-3.rs"}, {"sha": "0fdd13bc30cce38eae17dfb62832cac69e98ce98", "filename": "src/test/compile-fail-fulldeps/proc-macro/feature-gate-4.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ffeature-gate-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ffeature-gate-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ffeature-gate-4.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "previous_filename": "src/test/compile-fail-fulldeps/rustc-macro/feature-gate-4.rs"}, {"sha": "672579ce8f14b83cc7ff110305f792f331028fc2", "filename": "src/test/compile-fail-fulldeps/proc-macro/feature-gate-5.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ffeature-gate-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ffeature-gate-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ffeature-gate-5.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(rustc_macro)] //~ ERROR: experimental and subject to change\n+#[cfg(proc_macro)] //~ ERROR: experimental and subject to change\n fn foo() {}", "previous_filename": "src/test/compile-fail-fulldeps/rustc-macro/feature-gate-5.rs"}, {"sha": "8f907183cc39b2b349d59c6745737b5b317605ba", "filename": "src/test/compile-fail-fulldeps/proc-macro/import.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fimport.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:derive-a.rs\n \n-#![feature(rustc_macro)]\n+#![feature(proc_macro)]\n #![allow(warnings)]\n \n #[macro_use]", "previous_filename": "src/test/compile-fail-fulldeps/rustc-macro/import.rs"}, {"sha": "39c27e82fa5b3dd9b538747d181802fa93264442", "filename": "src/test/compile-fail-fulldeps/proc-macro/load-panic.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fload-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fload-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fload-panic.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:derive-panic.rs\n \n-#![feature(rustc_macro)]\n+#![feature(proc_macro)]\n \n #[macro_use]\n extern crate derive_panic;", "previous_filename": "src/test/compile-fail-fulldeps/rustc-macro/load-panic.rs"}, {"sha": "44397cdde0c0a22795efc98a34181f4be76ef8ec", "filename": "src/test/compile-fail-fulldeps/proc-macro/require-rustc-macro-crate-type.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Frequire-rustc-macro-crate-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Frequire-rustc-macro-crate-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Frequire-rustc-macro-crate-type.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_macro)]\n+#![feature(proc_macro)]\n \n-extern crate rustc_macro;\n+extern crate proc_macro;\n \n-#[rustc_macro_derive(Foo)]\n-//~^ ERROR: only usable with crates of the `rustc-macro` crate type\n-pub fn foo(a: rustc_macro::TokenStream) -> rustc_macro::TokenStream {\n+#[proc_macro_derive(Foo)]\n+//~^ ERROR: only usable with crates of the `proc-macro` crate type\n+pub fn foo(a: proc_macro::TokenStream) -> proc_macro::TokenStream {\n     a\n }\n ", "previous_filename": "src/test/compile-fail-fulldeps/rustc-macro/require-rustc-macro-crate-type.rs"}, {"sha": "5cb2cc59aab9b3bc651ad832b336aaff794021ac", "filename": "src/test/compile-fail-fulldeps/proc-macro/shadow-builtin.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fshadow-builtin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fshadow-builtin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fshadow-builtin.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_type = \"rustc-macro\"]\n-#![feature(rustc_macro)]\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro)]\n \n-extern crate rustc_macro;\n+extern crate proc_macro;\n \n-use rustc_macro::TokenStream;\n+use proc_macro::TokenStream;\n \n-#[rustc_macro_derive(PartialEq)]\n+#[proc_macro_derive(PartialEq)]\n //~^ ERROR: cannot override a built-in #[derive] mode\n pub fn foo(input: TokenStream) -> TokenStream {\n     input", "previous_filename": "src/test/compile-fail-fulldeps/rustc-macro/shadow-builtin.rs"}, {"sha": "7b1a73d50f6e0bbd43bbbf2a48909e1e143e7697", "filename": "src/test/compile-fail-fulldeps/proc-macro/shadow.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fshadow.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -11,7 +11,7 @@\n // aux-build:derive-a.rs\n // aux-build:derive-a-2.rs\n \n-#![feature(rustc_macro)]\n+#![feature(proc_macro)]\n \n #[macro_use]\n extern crate derive_a;", "previous_filename": "src/test/compile-fail-fulldeps/rustc-macro/shadow.rs"}, {"sha": "468c970599e84381028625d9ee9821b8e10bdfcc", "filename": "src/test/compile-fail-fulldeps/proc-macro/signature.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fsignature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fsignature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fsignature.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -8,17 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_type = \"rustc-macro\"]\n-#![feature(rustc_macro)]\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro)]\n #![allow(warnings)]\n \n-extern crate rustc_macro;\n+extern crate proc_macro;\n \n-#[rustc_macro_derive(A)]\n+#[proc_macro_derive(A)]\n unsafe extern fn foo(a: i32, b: u32) -> u32 {\n     //~^ ERROR: mismatched types\n     //~| NOTE: expected normal fn, found unsafe fn\n-    //~| NOTE: expected type `fn(rustc_macro::TokenStream) -> rustc_macro::TokenStream`\n+    //~| NOTE: expected type `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n     //~| NOTE: found type `unsafe extern \"C\" fn(i32, u32) -> u32 {foo}`\n     loop {}\n }", "previous_filename": "src/test/compile-fail-fulldeps/rustc-macro/signature.rs"}, {"sha": "db646fb781544590fac1a9df423fa6bacc06c60e", "filename": "src/test/compile-fail-fulldeps/proc-macro/two-crate-types-1.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ftwo-crate-types-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ftwo-crate-types-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ftwo-crate-types-1.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: cannot mix `rustc-macro` crate type with others\n+// error-pattern: cannot mix `proc-macro` crate type with others\n \n-#![crate_type = \"rustc-macro\"]\n+#![crate_type = \"proc-macro\"]\n #![crate_type = \"rlib\"]", "previous_filename": "src/test/compile-fail-fulldeps/rustc-macro/two-crate-types-1.rs"}, {"sha": "97b0f8446043dd39da3fedae91a06b3a562061fa", "filename": "src/test/compile-fail-fulldeps/proc-macro/two-crate-types-2.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ftwo-crate-types-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ftwo-crate-types-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Ftwo-crate-types-2.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: cannot mix `rustc-macro` crate type with others\n-// compile-flags: --crate-type rlib --crate-type rustc-macro\n+// error-pattern: cannot mix `proc-macro` crate type with others\n+// compile-flags: --crate-type rlib --crate-type proc-macro", "previous_filename": "src/test/compile-fail-fulldeps/rustc-macro/two-crate-types-2.rs"}, {"sha": "7740238aeacc96f23246a0a283266a2e2f261c07", "filename": "src/test/compile-fail-fulldeps/rustc-macro/attribute.rs", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e51190cf07eb4e817d35c7d45eb89ec5a1ae8ddc/src%2Ftest%2Fcompile-fail-fulldeps%2Frustc-macro%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e51190cf07eb4e817d35c7d45eb89ec5a1ae8ddc/src%2Ftest%2Fcompile-fail-fulldeps%2Frustc-macro%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Frustc-macro%2Fattribute.rs?ref=e51190cf07eb4e817d35c7d45eb89ec5a1ae8ddc", "patch": "@@ -1,46 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![crate_type = \"rustc-macro\"]\n-#![feature(rustc_macro)]\n-\n-extern crate rustc_macro;\n-\n-#[rustc_macro_derive]\n-//~^ ERROR: attribute must be of form: #[rustc_macro_derive(TraitName)]\n-pub fn foo1(input: rustc_macro::TokenStream) -> rustc_macro::TokenStream {\n-    input\n-}\n-\n-#[rustc_macro_derive = \"foo\"]\n-//~^ ERROR: attribute must be of form: #[rustc_macro_derive(TraitName)]\n-pub fn foo2(input: rustc_macro::TokenStream) -> rustc_macro::TokenStream {\n-    input\n-}\n-\n-#[rustc_macro_derive(\n-    a = \"b\"\n-)]\n-//~^^ ERROR: must only be one word\n-pub fn foo3(input: rustc_macro::TokenStream) -> rustc_macro::TokenStream {\n-    input\n-}\n-\n-#[rustc_macro_derive(b, c)]\n-//~^ ERROR: attribute must only have one argument\n-pub fn foo4(input: rustc_macro::TokenStream) -> rustc_macro::TokenStream {\n-    input\n-}\n-\n-#[rustc_macro_derive(d(e))]\n-//~^ ERROR: must only be one word\n-pub fn foo5(input: rustc_macro::TokenStream) -> rustc_macro::TokenStream {\n-    input\n-}"}, {"sha": "e3a6776c8080b5426e1af2ffb476e8c4a34a11cd", "filename": "src/test/run-make/rustc-macro-dep-files/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-make%2Frustc-macro-dep-files%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-make%2Frustc-macro-dep-files%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustc-macro-dep-files%2FMakefile?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -3,4 +3,4 @@\n all:\n \t$(RUSTC) foo.rs\n \t$(RUSTC) bar.rs --emit dep-info\n-\tgrep \"rustc-macro source\" $(TMPDIR)/bar.d && exit 1 || exit 0\n+\tgrep \"proc-macro source\" $(TMPDIR)/bar.d && exit 1 || exit 0"}, {"sha": "a2db98049d28705e9209bb14cbdfbf7080fea5ec", "filename": "src/test/run-make/rustc-macro-dep-files/bar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-make%2Frustc-macro-dep-files%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-make%2Frustc-macro-dep-files%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustc-macro-dep-files%2Fbar.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_macro)]\n+#![feature(proc_macro)]\n \n #[macro_use]\n extern crate foo;"}, {"sha": "bd9e9158c505229a462d2527e64f9fe495b8859b", "filename": "src/test/run-make/rustc-macro-dep-files/foo.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-make%2Frustc-macro-dep-files%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-make%2Frustc-macro-dep-files%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustc-macro-dep-files%2Ffoo.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_type = \"rustc-macro\"]\n-#![feature(rustc_macro)]\n-#![feature(rustc_macro_lib)]\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro)]\n+#![feature(proc_macro_lib)]\n \n-extern crate rustc_macro;\n+extern crate proc_macro;\n \n-use rustc_macro::TokenStream;\n+use proc_macro::TokenStream;\n \n-#[rustc_macro_derive(A)]\n+#[proc_macro_derive(A)]\n pub fn derive(input: TokenStream) -> TokenStream {\n     let input = input.to_string();\n     assert!(input.contains(\"struct A;\"));"}, {"sha": "78589546084e5a120392ae293c08e32f29c7a60b", "filename": "src/test/run-pass-fulldeps/auxiliary/cond_noprelude_plugin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcond_noprelude_plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcond_noprelude_plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcond_noprelude_plugin.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -12,13 +12,13 @@\n #![feature(plugin)]\n #![feature(plugin_registrar)]\n #![feature(rustc_private)]\n-#![plugin(proc_macro)]\n+#![plugin(proc_macro_plugin)]\n \n extern crate rustc_plugin;\n-extern crate proc_macro;\n+extern crate proc_macro_plugin;\n extern crate syntax;\n \n-use proc_macro::build::ident_eq;\n+use proc_macro_plugin::build::ident_eq;\n \n use syntax::ext::base::{ExtCtxt, MacResult};\n use syntax::ext::proc_macro_shim::build_block_emitter;"}, {"sha": "11322bf76ffc3dfa0837b69c44de86f43b4aca8a", "filename": "src/test/run-pass-fulldeps/auxiliary/cond_plugin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcond_plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcond_plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcond_plugin.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -12,13 +12,13 @@\n #![feature(plugin)]\n #![feature(plugin_registrar)]\n #![feature(rustc_private)]\n-#![plugin(proc_macro)]\n+#![plugin(proc_macro_plugin)]\n \n extern crate rustc_plugin;\n-extern crate proc_macro;\n+extern crate proc_macro_plugin;\n extern crate syntax;\n \n-use proc_macro::prelude::*;\n+use proc_macro_plugin::prelude::*;\n \n use rustc_plugin::Registry;\n "}, {"sha": "232a7166e3b02c075c22cdbb5693862959191146", "filename": "src/test/run-pass-fulldeps/auxiliary/cond_prelude_plugin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcond_prelude_plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcond_prelude_plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcond_prelude_plugin.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -12,14 +12,14 @@\n #![feature(plugin)]\n #![feature(plugin_registrar)]\n #![feature(rustc_private)]\n-#![plugin(proc_macro)]\n+#![plugin(proc_macro_plugin)]\n \n extern crate rustc_plugin;\n-extern crate proc_macro;\n+extern crate proc_macro_plugin;\n extern crate syntax;\n \n use syntax::ext::proc_macro_shim::prelude::*;\n-use proc_macro::prelude::*;\n+use proc_macro_plugin::prelude::*;\n \n use rustc_plugin::Registry;\n "}, {"sha": "961df6d5c0c54df4e4180752d5c3b9a89d0fdab2", "filename": "src/test/run-pass-fulldeps/auxiliary/proc_macro_def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fproc_macro_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fproc_macro_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fproc_macro_def.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -10,11 +10,11 @@\n \n #![feature(plugin, plugin_registrar, rustc_private)]\n \n-extern crate proc_macro;\n+extern crate proc_macro_plugin;\n extern crate rustc_plugin;\n extern crate syntax;\n \n-use proc_macro::prelude::*;\n+use proc_macro_plugin::prelude::*;\n use rustc_plugin::Registry;\n use syntax::ext::base::SyntaxExtension;\n use syntax::ext::proc_macro_shim::prelude::*;"}, {"sha": "a5ac546cba49332867415576394a3d93c35cae3a", "filename": "src/test/run-pass-fulldeps/macro-quote-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-quote-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-quote-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-quote-1.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -12,10 +12,10 @@\n \n #![feature(plugin)]\n #![feature(rustc_private)]\n-#![plugin(proc_macro)]\n+#![plugin(proc_macro_plugin)]\n \n-extern crate proc_macro;\n-use proc_macro::prelude::*;\n+extern crate proc_macro_plugin;\n+use proc_macro_plugin::prelude::*;\n \n extern crate syntax;\n use syntax::ast::Ident;"}, {"sha": "e82282f3d8c583c03d33673d2638470f8e20f44d", "filename": "src/test/run-pass-fulldeps/proc-macro/add-impl.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fadd-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fadd-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fadd-impl.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:add-impl.rs\n \n-#![feature(rustc_macro)]\n+#![feature(proc_macro)]\n \n #[macro_use]\n extern crate add_impl;", "previous_filename": "src/test/run-pass-fulldeps/rustc-macro/add-impl.rs"}, {"sha": "f062111df9daf486c1863067c9c0a908f7c46ca9", "filename": "src/test/run-pass-fulldeps/proc-macro/append-impl.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fappend-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fappend-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fappend-impl.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:append-impl.rs\n \n-#![feature(rustc_macro)]\n+#![feature(proc_macro)]\n #![allow(warnings)]\n \n #[macro_use]", "previous_filename": "src/test/run-pass-fulldeps/rustc-macro/append-impl.rs"}, {"sha": "99586b0bb493a4f9bb33136a057d62d42aff2e9b", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/add-impl.rs", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fadd-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fadd-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fadd-impl.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -10,16 +10,16 @@\n \n // no-prefer-dynamic\n \n-#![crate_type = \"rustc-macro\"]\n-#![feature(rustc_macro)]\n-#![feature(rustc_macro_lib)]\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro)]\n+#![feature(proc_macro_lib)]\n \n-extern crate rustc_macro;\n+extern crate proc_macro;\n \n-use rustc_macro::TokenStream;\n+use proc_macro::TokenStream;\n \n-#[rustc_macro_derive(AddImpl)]\n-// #[cfg(rustc_macro)]\n+#[proc_macro_derive(AddImpl)]\n+// #[cfg(proc_macro)]\n pub fn derive(input: TokenStream) -> TokenStream {\n     (input.to_string() + \"\n         impl B {", "previous_filename": "src/test/run-pass-fulldeps/rustc-macro/auxiliary/add-impl.rs"}, {"sha": "27c3d643ca4ff14f8051a702033e1ae0d7b007bf", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/append-impl.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fappend-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fappend-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fappend-impl.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -11,15 +11,15 @@\n // force-host\n // no-prefer-dynamic\n \n-#![feature(rustc_macro)]\n-#![feature(rustc_macro_lib)]\n-#![crate_type = \"rustc-macro\"]\n+#![feature(proc_macro)]\n+#![feature(proc_macro_lib)]\n+#![crate_type = \"proc-macro\"]\n \n-extern crate rustc_macro;\n+extern crate proc_macro;\n \n-use rustc_macro::TokenStream;\n+use proc_macro::TokenStream;\n \n-#[rustc_macro_derive(Append)]\n+#[proc_macro_derive(Append)]\n pub fn derive_a(input: TokenStream) -> TokenStream {\n     let mut input = input.to_string();\n     input.push_str(\"", "previous_filename": "src/test/run-pass-fulldeps/rustc-macro/auxiliary/append-impl.rs"}, {"sha": "c2de173568b48924fbd778bd88c7b14957616dea", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/derive-a.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-a.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -10,15 +10,15 @@\n \n // no-prefer-dynamic\n \n-#![crate_type = \"rustc-macro\"]\n-#![feature(rustc_macro)]\n-#![feature(rustc_macro_lib)]\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro)]\n+#![feature(proc_macro_lib)]\n \n-extern crate rustc_macro;\n+extern crate proc_macro;\n \n-use rustc_macro::TokenStream;\n+use proc_macro::TokenStream;\n \n-#[rustc_macro_derive(A)]\n+#[proc_macro_derive(A)]\n pub fn derive(input: TokenStream) -> TokenStream {\n     let input = input.to_string();\n     assert!(input.contains(\"struct A;\"));", "previous_filename": "src/test/run-pass-fulldeps/rustc-macro/auxiliary/derive-a.rs"}, {"sha": "b9e31fc332959c326d569ae0d1c66805c8c6668d", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/derive-atob.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-atob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-atob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-atob.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -10,15 +10,15 @@\n \n // no-prefer-dynamic\n \n-#![crate_type = \"rustc-macro\"]\n-#![feature(rustc_macro)]\n-#![feature(rustc_macro_lib)]\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro)]\n+#![feature(proc_macro_lib)]\n \n-extern crate rustc_macro;\n+extern crate proc_macro;\n \n-use rustc_macro::TokenStream;\n+use proc_macro::TokenStream;\n \n-#[rustc_macro_derive(AToB)]\n+#[proc_macro_derive(AToB)]\n pub fn derive(input: TokenStream) -> TokenStream {\n     let input = input.to_string();\n     assert_eq!(input, \"struct A;\\n\");", "previous_filename": "src/test/run-pass-fulldeps/rustc-macro/auxiliary/derive-atob.rs"}, {"sha": "50f1a390b2939fcf566cc10784d78b095e3104d3", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/derive-ctod.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-ctod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-ctod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-ctod.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -10,15 +10,15 @@\n \n // no-prefer-dynamic\n \n-#![crate_type = \"rustc-macro\"]\n-#![feature(rustc_macro)]\n-#![feature(rustc_macro_lib)]\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro)]\n+#![feature(proc_macro_lib)]\n \n-extern crate rustc_macro;\n+extern crate proc_macro;\n \n-use rustc_macro::TokenStream;\n+use proc_macro::TokenStream;\n \n-#[rustc_macro_derive(CToD)]\n+#[proc_macro_derive(CToD)]\n pub fn derive(input: TokenStream) -> TokenStream {\n     let input = input.to_string();\n     assert_eq!(input, \"struct C;\\n\");", "previous_filename": "src/test/run-pass-fulldeps/rustc-macro/auxiliary/derive-ctod.rs"}, {"sha": "bd283ca57ebd91ae577397dd852348e7dea80b3b", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/derive-same-struct.rs", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-same-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-same-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-same-struct.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -9,23 +9,23 @@\n // except according to those terms.\n \n // no-prefer-dynamic\n-// compile-flags:--crate-type rustc-macro\n+// compile-flags:--crate-type proc-macro\n \n-#![feature(rustc_macro)]\n-#![feature(rustc_macro_lib)]\n+#![feature(proc_macro)]\n+#![feature(proc_macro_lib)]\n \n-extern crate rustc_macro;\n+extern crate proc_macro;\n \n-use rustc_macro::TokenStream;\n+use proc_macro::TokenStream;\n \n-#[rustc_macro_derive(AToB)]\n+#[proc_macro_derive(AToB)]\n pub fn derive1(input: TokenStream) -> TokenStream {\n     println!(\"input1: {:?}\", input.to_string());\n     assert_eq!(input.to_string(), \"#[derive(BToC)]\\nstruct A;\\n\");\n     \"#[derive(BToC)] struct B;\".parse().unwrap()\n }\n \n-#[rustc_macro_derive(BToC)]\n+#[proc_macro_derive(BToC)]\n pub fn derive2(input: TokenStream) -> TokenStream {\n     assert_eq!(input.to_string(), \"struct B;\\n\");\n     \"struct C;\".parse().unwrap()", "previous_filename": "src/test/run-pass-fulldeps/rustc-macro/auxiliary/derive-same-struct.rs"}, {"sha": "155b125690cc124bf9dac4af8545be3f3133ba9d", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/expand-with-a-macro.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fexpand-with-a-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fexpand-with-a-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fexpand-with-a-macro.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -10,16 +10,16 @@\n \n // no-prefer-dynamic\n \n-#![crate_type = \"rustc-macro\"]\n-#![feature(rustc_macro)]\n-#![feature(rustc_macro_lib)]\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro)]\n+#![feature(proc_macro_lib)]\n #![deny(warnings)]\n \n-extern crate rustc_macro;\n+extern crate proc_macro;\n \n-use rustc_macro::TokenStream;\n+use proc_macro::TokenStream;\n \n-#[rustc_macro_derive(A)]\n+#[proc_macro_derive(A)]\n pub fn derive(input: TokenStream) -> TokenStream {\n     let input = input.to_string();\n     assert!(input.contains(\"struct A;\"));", "previous_filename": "src/test/run-pass-fulldeps/rustc-macro/auxiliary/expand-with-a-macro.rs"}, {"sha": "b3edc8f1c310dd4f31cb1ebb07fc91dd5818e571", "filename": "src/test/run-pass-fulldeps/proc-macro/derive-same-struct.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-same-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-same-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-same-struct.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:derive-same-struct.rs\n \n-#![feature(rustc_macro)]\n+#![feature(proc_macro)]\n \n #[macro_use]\n extern crate derive_same_struct;", "previous_filename": "src/test/run-pass-fulldeps/rustc-macro/derive-same-struct.rs"}, {"sha": "16f3535adae3bcde9551fac123c8e5ee38386a35", "filename": "src/test/run-pass-fulldeps/proc-macro/expand-with-a-macro.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fexpand-with-a-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fexpand-with-a-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fexpand-with-a-macro.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -11,7 +11,7 @@\n // aux-build:expand-with-a-macro.rs\n // ignore-stage1\n \n-#![feature(rustc_macro)]\n+#![feature(proc_macro)]\n #![deny(warnings)]\n \n #[macro_use]", "previous_filename": "src/test/run-pass-fulldeps/rustc-macro/expand-with-a-macro.rs"}, {"sha": "56f9768764c1758df576f0d72a450b5be2852a91", "filename": "src/test/run-pass-fulldeps/proc-macro/load-two.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fload-two.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fload-two.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fload-two.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -11,7 +11,7 @@\n // aux-build:derive-atob.rs\n // aux-build:derive-ctod.rs\n \n-#![feature(rustc_macro)]\n+#![feature(proc_macro)]\n \n #[macro_use]\n extern crate derive_atob;", "previous_filename": "src/test/run-pass-fulldeps/rustc-macro/load-two.rs"}, {"sha": "cd7edb726447bc909a8ef5cadc04e275fdd09a2f", "filename": "src/test/run-pass-fulldeps/proc-macro/smoke.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fsmoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fsmoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fsmoke.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -11,7 +11,7 @@\n // aux-build:derive-a.rs\n // ignore-stage1\n \n-#![feature(rustc_macro)]\n+#![feature(proc_macro)]\n \n #[macro_use]\n extern crate derive_a;", "previous_filename": "src/test/run-pass-fulldeps/rustc-macro/smoke.rs"}, {"sha": "fe80a90955045938b48a38f8de4ebd708d354bb5", "filename": "src/test/rustdoc/rustc-macro-crate.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frustdoc%2Frustc-macro-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftest%2Frustdoc%2Frustc-macro-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frustc-macro-crate.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -10,15 +10,15 @@\n \n // no-prefer-dynamic\n \n-#![feature(rustc_macro)]\n-#![feature(rustc_macro_lib)]\n-#![crate_type = \"rustc-macro\"]\n+#![feature(proc_macro)]\n+#![feature(proc_macro_lib)]\n+#![crate_type = \"proc-macro\"]\n \n-extern crate rustc_macro;\n+extern crate proc_macro;\n \n-use rustc_macro::TokenStream;\n+use proc_macro::TokenStream;\n \n-#[rustc_macro_derive(Foo)]\n+#[proc_macro_derive(Foo)]\n pub fn foo(input: TokenStream) -> TokenStream {\n     input\n }"}, {"sha": "633ff6271b7cc161574a337f02ed252a54c25bf6", "filename": "src/tools/cargotest/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftools%2Fcargotest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftools%2Fcargotest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2Fmain.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -24,7 +24,7 @@ struct Test {\n const TEST_REPOS: &'static [Test] = &[Test {\n                                           name: \"cargo\",\n                                           repo: \"https://github.com/rust-lang/cargo\",\n-                                          sha: \"d8936af1390ab0844e5e68b459214f2529c9f647\",\n+                                          sha: \"d3bad1ab29efae414e9b4c24534b2d02b3a59782\",\n                                           lock: None,\n                                       },\n                                       Test {"}, {"sha": "a7784e65c5b1c5d2fcb91a2319bc1f8833a42b26", "filename": "src/tools/tidy/src/cargo.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca76c7e0148f87876dbf8ad1f7dd13fb9f268481/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs?ref=ca76c7e0148f87876dbf8ad1f7dd13fb9f268481", "patch": "@@ -88,9 +88,11 @@ fn verify(tomlfile: &Path, libfile: &Path, bad: &mut bool) {\n             continue\n         }\n \n-        // We want the compiler to depend on the proc_macro crate so that it is built and\n-        // included in the end, but we don't want to actually use it in the compiler.\n-        if toml.contains(\"name = \\\"rustc_driver\\\"\") && krate == \"proc_macro\" {\n+        // We want the compiler to depend on the proc_macro_plugin crate so\n+        // that it is built and included in the end, but we don't want to\n+        // actually use it in the compiler.\n+        if toml.contains(\"name = \\\"rustc_driver\\\"\") &&\n+           krate == \"proc_macro_plugin\" {\n             continue\n         }\n "}]}