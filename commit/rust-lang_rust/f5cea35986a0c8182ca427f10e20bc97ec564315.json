{"sha": "f5cea35986a0c8182ca427f10e20bc97ec564315", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1Y2VhMzU5ODZhMGM4MTgyY2E0MjdmMTBlMjBiYzk3ZWM1NjQzMTU=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-03T10:39:10Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-12T07:59:54Z"}, "message": "Add checks for function parameters", "tree": {"sha": "80179332f09f6ad3bde913c9b6814ef2f2159dec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80179332f09f6ad3bde913c9b6814ef2f2159dec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5cea35986a0c8182ca427f10e20bc97ec564315", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5cea35986a0c8182ca427f10e20bc97ec564315", "html_url": "https://github.com/rust-lang/rust/commit/f5cea35986a0c8182ca427f10e20bc97ec564315", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5cea35986a0c8182ca427f10e20bc97ec564315/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4039176ec63e5c75d76398f2debe26ac6fa59cbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/4039176ec63e5c75d76398f2debe26ac6fa59cbc", "html_url": "https://github.com/rust-lang/rust/commit/4039176ec63e5c75d76398f2debe26ac6fa59cbc"}], "stats": {"total": 101, "additions": 94, "deletions": 7}, "files": [{"sha": "24fff690a7422fb4a6cda4bd3f33d72a059ed486", "filename": "crates/hir_ty/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5cea35986a0c8182ca427f10e20bc97ec564315/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cea35986a0c8182ca427f10e20bc97ec564315/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs?ref=f5cea35986a0c8182ca427f10e20bc97ec564315", "patch": "@@ -269,6 +269,7 @@ pub struct IncorrectCase {\n     pub file: HirFileId,\n     pub ident: SyntaxNodePtr,\n     pub expected_case: CaseType,\n+    pub ident_type: String,\n     pub ident_text: String,\n     pub suggested_text: String,\n }\n@@ -280,7 +281,8 @@ impl Diagnostic for IncorrectCase {\n \n     fn message(&self) -> String {\n         format!(\n-            \"Argument `{}` should have a {} name, e.g. `{}`\",\n+            \"{} `{}` should have a {} name, e.g. `{}`\",\n+            self.ident_type,\n             self.ident_text,\n             self.expected_case.to_string(),\n             self.suggested_text"}, {"sha": "083df37726b50c344e0525b274739ad4bc0228ff", "filename": "crates/hir_ty/src/diagnostics/decl_check.rs", "status": "modified", "additions": 91, "deletions": 6, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/f5cea35986a0c8182ca427f10e20bc97ec564315/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5cea35986a0c8182ca427f10e20bc97ec564315/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs?ref=f5cea35986a0c8182ca427f10e20bc97ec564315", "patch": "@@ -21,7 +21,10 @@ use hir_def::{\n     AdtId, FunctionId, Lookup, ModuleDefId,\n };\n use hir_expand::{diagnostics::DiagnosticSink, name::Name};\n-use syntax::{ast::NameOwner, AstPtr};\n+use syntax::{\n+    ast::{self, NameOwner},\n+    AstPtr,\n+};\n \n use crate::{\n     db::HirDatabase,\n@@ -122,14 +125,16 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             } else {\n                 // We don't want rust-analyzer to panic over this, but it is definitely some kind of error in the logic.\n                 log::error!(\n-                    \"Replacement was generated for a function without a name: {:?}\",\n+                    \"Replacement ({:?}) was generated for a function without a name: {:?}\",\n+                    replacement,\n                     fn_src\n                 );\n                 return;\n             };\n \n             let diagnostic = IncorrectCase {\n                 file: fn_src.file_id,\n+                ident_type: \"Function\".to_string(),\n                 ident: AstPtr::new(&ast_ptr).into(),\n                 expected_case: replacement.expected_case,\n                 ident_text: replacement.current_name.to_string(),\n@@ -139,15 +144,71 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             self.sink.push(diagnostic);\n         }\n \n-        // let item_tree = db.item_tree(loc.id.file_id);\n-        // let fn_def = &item_tree[fn_loc.id.value];\n-        // let (_, source_map) = db.body_with_source_map(func.into());\n+        let fn_params_list = match fn_src.value.param_list() {\n+            Some(params) => params,\n+            None => {\n+                if !fn_param_replacements.is_empty() {\n+                    log::error!(\n+                        \"Replacements ({:?}) were generated for a function parameters which had no parameters list: {:?}\",\n+                        fn_param_replacements, fn_src\n+                    );\n+                }\n+                return;\n+            }\n+        };\n+        let mut fn_params_iter = fn_params_list.params();\n+        for param_to_rename in fn_param_replacements {\n+            // We assume that parameters in replacement are in the same order as in the\n+            // actual params list, but just some of them (ones that named correctly) are skipped.\n+            let ast_ptr = loop {\n+                match fn_params_iter.next() {\n+                    Some(element)\n+                        if pat_equals_to_name(element.pat(), &param_to_rename.current_name) =>\n+                    {\n+                        break element.pat().unwrap()\n+                    }\n+                    Some(_) => {}\n+                    None => {\n+                        log::error!(\n+                            \"Replacement ({:?}) was generated for a function parameter which was not found: {:?}\",\n+                            param_to_rename, fn_src\n+                        );\n+                        return;\n+                    }\n+                }\n+            };\n+\n+            let diagnostic = IncorrectCase {\n+                file: fn_src.file_id,\n+                ident_type: \"Argument\".to_string(),\n+                ident: AstPtr::new(&ast_ptr).into(),\n+                expected_case: param_to_rename.expected_case,\n+                ident_text: param_to_rename.current_name.to_string(),\n+                suggested_text: param_to_rename.suggested_text,\n+            };\n+\n+            self.sink.push(diagnostic);\n+        }\n     }\n \n     fn validate_adt(&mut self, db: &dyn HirDatabase, adt: AdtId) {}\n }\n \n+fn pat_equals_to_name(pat: Option<ast::Pat>, name: &Name) -> bool {\n+    if let Some(ast::Pat::IdentPat(ident)) = pat {\n+        ident.to_string() == name.to_string()\n+    } else {\n+        false\n+    }\n+}\n+\n fn to_lower_snake_case(ident: &str) -> Option<String> {\n+    // First, assume that it's UPPER_SNAKE_CASE.\n+    if let Some(normalized) = to_lower_snake_case_from_upper_snake_case(ident) {\n+        return Some(normalized);\n+    }\n+\n+    // Otherwise, assume that it's CamelCase.\n     let lower_snake_case = stdx::to_lower_snake_case(ident);\n \n     if lower_snake_case == ident {\n@@ -157,6 +218,17 @@ fn to_lower_snake_case(ident: &str) -> Option<String> {\n     }\n }\n \n+fn to_lower_snake_case_from_upper_snake_case(ident: &str) -> Option<String> {\n+    let is_upper_snake_case = ident.chars().all(|c| c.is_ascii_uppercase() || c == '_');\n+\n+    if is_upper_snake_case {\n+        let string = ident.chars().map(|c| c.to_ascii_lowercase()).collect();\n+        Some(string)\n+    } else {\n+        None\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::diagnostics::tests::check_diagnostics;\n@@ -166,7 +238,20 @@ mod tests {\n         check_diagnostics(\n             r#\"\n fn NonSnakeCaseName() {}\n-// ^^^^^^^^^^^^^^^^ Argument `NonSnakeCaseName` should have a snake_case name, e.g. `non_snake_case_name`\n+// ^^^^^^^^^^^^^^^^ Function `NonSnakeCaseName` should have a snake_case name, e.g. `non_snake_case_name`\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn incorrect_function_params() {\n+        check_diagnostics(\n+            r#\"\n+fn foo(SomeParam: u8) {}\n+    // ^^^^^^^^^ Argument `SomeParam` should have a snake_case name, e.g. `some_param`\n+\n+fn foo2(ok_param: &str, CAPS_PARAM: u8) {}\n+                     // ^^^^^^^^^^ Argument `CAPS_PARAM` should have a snake_case name, e.g. `caps_param`\n \"#,\n         );\n     }"}]}