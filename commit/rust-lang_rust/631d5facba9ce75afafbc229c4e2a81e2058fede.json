{"sha": "631d5facba9ce75afafbc229c4e2a81e2058fede", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMWQ1ZmFjYmE5Y2U3NWFmYWZiYzIyOWM0ZTJhODFlMjA1OGZlZGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-23T09:52:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-23T09:52:54Z"}, "message": "Auto merge of #914 - christianpoveda:use-host-rng, r=RalfJung\n\nUse host's rng when communication is enabled\n\nThis uses the host's randomness when the communication enabled flag is used. I am not sure about the error handling. I was thinking about fallbacking to `rand` if `getrandom` fails and also print something so the user knows miri is not using the host's rng because it failed. Let me know what you think.\n\nRelated issue: https://github.com/rust-lang/miri/issues/800.\n\nr? @RalfJung @oli-obk", "tree": {"sha": "d7a45752106e0d5f61709205832a6e3119a4cd8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7a45752106e0d5f61709205832a6e3119a4cd8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/631d5facba9ce75afafbc229c4e2a81e2058fede", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/631d5facba9ce75afafbc229c4e2a81e2058fede", "html_url": "https://github.com/rust-lang/rust/commit/631d5facba9ce75afafbc229c4e2a81e2058fede", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/631d5facba9ce75afafbc229c4e2a81e2058fede/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d77fe6c63ca4c50b207a1161def90c9e57368d5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d77fe6c63ca4c50b207a1161def90c9e57368d5b", "html_url": "https://github.com/rust-lang/rust/commit/d77fe6c63ca4c50b207a1161def90c9e57368d5b"}, {"sha": "f53b5b0fb4cc9a716eb27929c3829f096e90b6eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f53b5b0fb4cc9a716eb27929c3829f096e90b6eb", "html_url": "https://github.com/rust-lang/rust/commit/f53b5b0fb4cc9a716eb27929c3829f096e90b6eb"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "1ab0580cc63155286774d30cda388811be95c323", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/631d5facba9ce75afafbc229c4e2a81e2058fede/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/631d5facba9ce75afafbc229c4e2a81e2058fede/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=631d5facba9ce75afafbc229c4e2a81e2058fede", "patch": "@@ -35,6 +35,7 @@ byteorder = { version = \"1.1\", features = [\"i128\"]}\n cargo_metadata = { version = \"0.8\", optional = true }\n directories = { version = \"2.0\", optional = true }\n rustc_version = { version = \"0.2.3\", optional = true }\n+getrandom = \"0.1.10\"\n env_logger = \"0.6\"\n log = \"0.4\"\n shell-escape = \"0.1.4\""}, {"sha": "502c562d135721e1b4ab2c4215ceadec9a5e400f", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/631d5facba9ce75afafbc229c4e2a81e2058fede/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/631d5facba9ce75afafbc229c4e2a81e2058fede/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=631d5facba9ce75afafbc229c4e2a81e2058fede", "patch": "@@ -158,8 +158,8 @@ Several `-Z` flags are relevant for Miri:\n   will miss bugs in your program.  However, this can also help to make Miri run\n   faster.\n * `-Zmiri-enable-communication` enables communication between the host\n-  environment and Miri, i.e., all the host environment variables are available\n-  during Miri runtime.\n+  environment and Miri, i.e., Miri uses the host's random number generator and \n+  all the host environment variables are available during runtime.\n * `-Zmir-opt-level` controls how many MIR optimizations are performed.  Miri\n   overrides the default to be `0`; be advised that using any higher level can\n   make Miri miss bugs in your program because they got optimized away."}, {"sha": "330d6bc996b78e3061416a48cdbe7e7246f0d897", "filename": "src/helpers.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/631d5facba9ce75afafbc229c4e2a81e2058fede/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/631d5facba9ce75afafbc229c4e2a81e2058fede/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=631d5facba9ce75afafbc229c4e2a81e2058fede", "patch": "@@ -97,9 +97,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             Align::from_bytes(1).unwrap()\n         )?.expect(\"we already checked for size 0\");\n \n-        let rng = this.memory_mut().extra.rng.get_mut();\n         let mut data = vec![0; len];\n-        rng.fill_bytes(&mut data);\n+\n+        if this.machine.communicate {\n+            // Fill the buffer using the host's rng.\n+            getrandom::getrandom(&mut data)\n+                .map_err(|err| err_unsup_format!(\"getrandom failed: {}\", err))?;\n+        }\n+        else {\n+            let rng = this.memory_mut().extra.rng.get_mut();\n+            rng.fill_bytes(&mut data);\n+        }\n \n         let tcx = &{this.tcx.tcx};\n         this.memory_mut().get_mut(ptr.alloc_id)?.write_bytes(tcx, ptr, &data)"}, {"sha": "8989062b513a9d92d220ffe0de4a419364e92b54", "filename": "src/machine.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/631d5facba9ce75afafbc229c4e2a81e2058fede/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/631d5facba9ce75afafbc229c4e2a81e2058fede/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=631d5facba9ce75afafbc229c4e2a81e2058fede", "patch": "@@ -93,7 +93,8 @@ pub struct Evaluator<'tcx> {\n     /// TLS state.\n     pub(crate) tls: TlsData<'tcx>,\n \n-    /// If enabled, the `env_vars` field is populated with the host env vars during initialization.\n+    /// If enabled, the `env_vars` field is populated with the host env vars during initialization\n+    /// and random number generation is delegated to the host.\n     pub(crate) communicate: bool,\n }\n "}]}