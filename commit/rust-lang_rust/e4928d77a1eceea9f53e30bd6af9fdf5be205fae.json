{"sha": "e4928d77a1eceea9f53e30bd6af9fdf5be205fae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0OTI4ZDc3YTFlY2VlYTlmNTNlMzBiZDZhZjlmZGY1YmUyMDVmYWU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-24T08:06:07Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-24T08:06:07Z"}, "message": "Use correct type in diagnostics again", "tree": {"sha": "b828c62481db8a81a23d13e1fe97a4f671955f1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b828c62481db8a81a23d13e1fe97a4f671955f1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4928d77a1eceea9f53e30bd6af9fdf5be205fae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4928d77a1eceea9f53e30bd6af9fdf5be205fae", "html_url": "https://github.com/rust-lang/rust/commit/e4928d77a1eceea9f53e30bd6af9fdf5be205fae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4928d77a1eceea9f53e30bd6af9fdf5be205fae/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bc54d427377d3f5d949434a9eb8a9ba71db69a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bc54d427377d3f5d949434a9eb8a9ba71db69a4", "html_url": "https://github.com/rust-lang/rust/commit/2bc54d427377d3f5d949434a9eb8a9ba71db69a4"}], "stats": {"total": 103, "additions": 50, "deletions": 53}, "files": [{"sha": "3c8671486bf8fc837270af05bd58ebe506f48c6e", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 45, "deletions": 48, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/e4928d77a1eceea9f53e30bd6af9fdf5be205fae/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4928d77a1eceea9f53e30bd6af9fdf5be205fae/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=e4928d77a1eceea9f53e30bd6af9fdf5be205fae", "patch": "@@ -89,11 +89,42 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n         self.infcx.tcx\n     }\n \n-    fn search_for_structural_match_violation(\n-        &self,\n-        ty: Ty<'tcx>,\n-    ) -> Option<traits::NonStructuralMatchTy<'tcx>> {\n-        traits::search_for_structural_match_violation(self.id, self.span, self.tcx(), ty)\n+    fn search_for_structural_match_violation(&self, ty: Ty<'tcx>) -> Option<String> {\n+        traits::search_for_structural_match_violation(self.id, self.span, self.tcx(), ty).map(\n+            |non_sm_ty| {\n+                with_no_trimmed_paths(|| match non_sm_ty {\n+                    traits::NonStructuralMatchTy::Adt(adt_def) => {\n+                        let path = self.tcx().def_path_str(adt_def.did);\n+                        format!(\n+                            \"to use a constant of type `{}` in a pattern, \\\n+                         `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n+                            path, path,\n+                        )\n+                    }\n+                    traits::NonStructuralMatchTy::Dynamic => {\n+                        \"trait objects cannot be used in patterns\".to_string()\n+                    }\n+                    traits::NonStructuralMatchTy::Opaque => {\n+                        \"opaque types cannot be used in patterns\".to_string()\n+                    }\n+                    traits::NonStructuralMatchTy::Generator => {\n+                        \"generators cannot be used in patterns\".to_string()\n+                    }\n+                    traits::NonStructuralMatchTy::Closure => {\n+                        \"closures cannot be used in patterns\".to_string()\n+                    }\n+                    traits::NonStructuralMatchTy::Param => {\n+                        bug!(\"use of a constant whose type is a parameter inside a pattern\")\n+                    }\n+                    traits::NonStructuralMatchTy::Projection => {\n+                        bug!(\"use of a constant whose type is a projection inside a pattern\")\n+                    }\n+                    traits::NonStructuralMatchTy::Foreign => {\n+                        bug!(\"use of a value of a foreign type inside a pattern\")\n+                    }\n+                })\n+            },\n+        )\n     }\n \n     fn type_marked_structural(&self, ty: Ty<'tcx>) -> bool {\n@@ -135,39 +166,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 return inlined_const_as_pat;\n             }\n \n-            if let Some(non_sm_ty) = structural {\n-                let msg = with_no_trimmed_paths(|| match non_sm_ty {\n-                    traits::NonStructuralMatchTy::Adt(adt_def) => {\n-                        let path = self.tcx().def_path_str(adt_def.did);\n-                        format!(\n-                            \"to use a constant of type `{}` in a pattern, \\\n-                             `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n-                            path, path,\n-                        )\n-                    }\n-                    traits::NonStructuralMatchTy::Dynamic => {\n-                        \"trait objects cannot be used in patterns\".to_string()\n-                    }\n-                    traits::NonStructuralMatchTy::Opaque => {\n-                        \"opaque types cannot be used in patterns\".to_string()\n-                    }\n-                    traits::NonStructuralMatchTy::Generator => {\n-                        \"generators cannot be used in patterns\".to_string()\n-                    }\n-                    traits::NonStructuralMatchTy::Closure => {\n-                        \"closures cannot be used in patterns\".to_string()\n-                    }\n-                    traits::NonStructuralMatchTy::Param => {\n-                        bug!(\"use of a constant whose type is a parameter inside a pattern\")\n-                    }\n-                    traits::NonStructuralMatchTy::Projection => {\n-                        bug!(\"use of a constant whose type is a projection inside a pattern\")\n-                    }\n-                    traits::NonStructuralMatchTy::Foreign => {\n-                        bug!(\"use of a value of a foreign type inside a pattern\")\n-                    }\n-                });\n-\n+            if let Some(msg) = structural {\n                 if !self.type_may_have_partial_eq_impl(cv.ty) {\n                     // span_fatal avoids ICE from resolution of non-existent method (rare case).\n                     self.tcx().sess.span_fatal(self.span, &msg);\n@@ -272,11 +271,9 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                     // `search_for_structural_match_violation` and then remove this condition.\n                     && self.search_for_structural_match_violation(cv.ty).is_some() =>\n             {\n-                let msg = format!(\n-                    \"to use a constant of type `{}` in a pattern, \\\n-                    `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n-                    cv.ty, cv.ty,\n-                );\n+                // Obtain the actual type that isn't annotated. If we just looked at `cv.ty` we\n+                // could get `Option<NonStructEq>`, even though `Option` is annotated with derive.\n+                let msg = self.search_for_structural_match_violation(cv.ty).unwrap();\n                 self.saw_const_match_error.set(true);\n                 if self.include_lint_checks {\n                     tcx.sess.span_err(self.span, &msg);\n@@ -512,11 +509,11 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n             && self.search_for_structural_match_violation(cv.ty).is_some()\n         {\n             self.saw_const_match_lint.set(true);\n-            let msg = format!(\n-                \"to use a constant of type `{}` in a pattern, \\\n-                 the constant's initializer must be trivial or all types \\\n-                 in the constant must be annotated with `#[derive(PartialEq, Eq)]`\",\n-                cv.ty,\n+            // Obtain the actual type that isn't annotated. If we just looked at `cv.ty` we\n+            // could get `Option<NonStructEq>`, even though `Option` is annotated with derive.\n+            let msg = self.search_for_structural_match_violation(cv.ty).unwrap().replace(\n+                \"in a pattern,\",\n+                \"in a pattern, the constant's initializer must be trivial or\",\n             );\n             tcx.struct_span_lint_hir(\n                 lint::builtin::NONTRIVIAL_STRUCTURAL_MATCH,"}, {"sha": "e51d6f916498ef4cb36f416d7a7feba1afa7fdb7", "filename": "src/test/ui/consts/const_in_pattern/custom-eq-branch-warn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4928d77a1eceea9f53e30bd6af9fdf5be205fae/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4928d77a1eceea9f53e30bd6af9fdf5be205fae/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.stderr?ref=e4928d77a1eceea9f53e30bd6af9fdf5be205fae", "patch": "@@ -1,4 +1,4 @@\n-warning: to use a constant of type `Foo` in a pattern, the constant's initializer must be trivial or all types in the constant must be annotated with `#[derive(PartialEq, Eq)]`\n+warning: to use a constant of type `CustomEq` in a pattern, the constant's initializer must be trivial or `CustomEq` must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/custom-eq-branch-warn.rs:29:9\n    |\n LL |         BAR_BAZ => panic!(),"}, {"sha": "95cfa4a9ebe95a24b6f29a0f4e0998e68d14f747", "filename": "src/test/ui/consts/const_in_pattern/reject_non_partial_eq.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4928d77a1eceea9f53e30bd6af9fdf5be205fae/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_partial_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4928d77a1eceea9f53e30bd6af9fdf5be205fae/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_partial_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_partial_eq.stderr?ref=e4928d77a1eceea9f53e30bd6af9fdf5be205fae", "patch": "@@ -1,4 +1,4 @@\n-error: to use a constant of type `Option<NoPartialEq>` in a pattern, `Option<NoPartialEq>` must be annotated with `#[derive(PartialEq, Eq)]`\n+error: to use a constant of type `NoPartialEq` in a pattern, `NoPartialEq` must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/reject_non_partial_eq.rs:28:9\n    |\n LL |         NO_PARTIAL_EQ_NONE => println!(\"NO_PARTIAL_EQ_NONE\"),"}, {"sha": "a24c8d181843d9973e2a238c0bf6f2ecd0b48b4f", "filename": "src/test/ui/consts/const_in_pattern/warn_corner_cases.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4928d77a1eceea9f53e30bd6af9fdf5be205fae/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fwarn_corner_cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4928d77a1eceea9f53e30bd6af9fdf5be205fae/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fwarn_corner_cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fwarn_corner_cases.stderr?ref=e4928d77a1eceea9f53e30bd6af9fdf5be205fae", "patch": "@@ -1,4 +1,4 @@\n-warning: to use a constant of type `Option<NoDerive>` in a pattern, the constant's initializer must be trivial or all types in the constant must be annotated with `#[derive(PartialEq, Eq)]`\n+warning: to use a constant of type `NoDerive` in a pattern, the constant's initializer must be trivial or `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/warn_corner_cases.rs:26:47\n    |\n LL |     match None { Some(_) => panic!(\"whoops\"), INDEX => dbg!(INDEX), };\n@@ -8,7 +8,7 @@ LL |     match None { Some(_) => panic!(\"whoops\"), INDEX => dbg!(INDEX), };\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #73448 <https://github.com/rust-lang/rust/issues/73448>\n \n-warning: to use a constant of type `Option<NoDerive>` in a pattern, the constant's initializer must be trivial or all types in the constant must be annotated with `#[derive(PartialEq, Eq)]`\n+warning: to use a constant of type `NoDerive` in a pattern, the constant's initializer must be trivial or `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/warn_corner_cases.rs:32:47\n    |\n LL |     match None { Some(_) => panic!(\"whoops\"), CALL => dbg!(CALL), };\n@@ -17,7 +17,7 @@ LL |     match None { Some(_) => panic!(\"whoops\"), CALL => dbg!(CALL), };\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #73448 <https://github.com/rust-lang/rust/issues/73448>\n \n-warning: to use a constant of type `Option<NoDerive>` in a pattern, the constant's initializer must be trivial or all types in the constant must be annotated with `#[derive(PartialEq, Eq)]`\n+warning: to use a constant of type `NoDerive` in a pattern, the constant's initializer must be trivial or `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/warn_corner_cases.rs:38:47\n    |\n LL |     match None { Some(_) => panic!(\"whoops\"), METHOD_CALL => dbg!(METHOD_CALL), };"}]}