{"sha": "8b702e02c06aa5af92f213ce69e810e35dd606db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNzAyZTAyYzA2YWE1YWY5MmYyMTNjZTY5ZTgxMGUzNWRkNjA2ZGI=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-01-16T02:43:23Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-01-16T15:07:09Z"}, "message": "Support non-stage0 check", "tree": {"sha": "5e22b28a112b60f76f3e3cc055de8ac57c784ea5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e22b28a112b60f76f3e3cc055de8ac57c784ea5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b702e02c06aa5af92f213ce69e810e35dd606db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b702e02c06aa5af92f213ce69e810e35dd606db", "html_url": "https://github.com/rust-lang/rust/commit/8b702e02c06aa5af92f213ce69e810e35dd606db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b702e02c06aa5af92f213ce69e810e35dd606db/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcbd305ee93f49f19313b9bbeaa25ba8837030d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcbd305ee93f49f19313b9bbeaa25ba8837030d9", "html_url": "https://github.com/rust-lang/rust/commit/fcbd305ee93f49f19313b9bbeaa25ba8837030d9"}], "stats": {"total": 36, "additions": 23, "deletions": 13}, "files": [{"sha": "8d63473acace54cb469eb458fc38a54a5b22edd4", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8b702e02c06aa5af92f213ce69e810e35dd606db/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b702e02c06aa5af92f213ce69e810e35dd606db/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=8b702e02c06aa5af92f213ce69e810e35dd606db", "patch": "@@ -73,7 +73,7 @@ impl Step for Std {\n \n     fn run(self, builder: &Builder<'_>) {\n         let target = self.target;\n-        let compiler = builder.compiler(0, builder.config.build);\n+        let compiler = builder.compiler(builder.top_stage, builder.config.build);\n \n         let mut cargo = builder.cargo(\n             compiler,\n@@ -94,9 +94,13 @@ impl Step for Std {\n             true,\n         );\n \n-        let libdir = builder.sysroot_libdir(compiler, target);\n-        let hostdir = builder.sysroot_libdir(compiler, compiler.host);\n-        add_to_sysroot(&builder, &libdir, &hostdir, &libstd_stamp(builder, compiler, target));\n+        // We skip populating the sysroot in non-zero stage because that'll lead\n+        // to rlib/rmeta conflicts if std gets built during this session.\n+        if compiler.stage == 0 {\n+            let libdir = builder.sysroot_libdir(compiler, target);\n+            let hostdir = builder.sysroot_libdir(compiler, compiler.host);\n+            add_to_sysroot(&builder, &libdir, &hostdir, &libstd_stamp(builder, compiler, target));\n+        }\n \n         // Then run cargo again, once we've put the rmeta files for the library\n         // crates into the sysroot. This is needed because e.g., core's tests\n@@ -163,10 +167,20 @@ impl Step for Rustc {\n     /// the `compiler` targeting the `target` architecture. The artifacts\n     /// created will also be linked into the sysroot directory.\n     fn run(self, builder: &Builder<'_>) {\n-        let compiler = builder.compiler(0, builder.config.build);\n+        let compiler = builder.compiler(builder.top_stage, builder.config.build);\n         let target = self.target;\n \n-        builder.ensure(Std { target });\n+        if compiler.stage != 0 {\n+            // If we're not in stage 0, then we won't have a std from the beta\n+            // compiler around. That means we need to make sure there's one in\n+            // the sysroot for the compiler to find. Otherwise, we're going to\n+            // fail when building crates that need to generate code (e.g., build\n+            // scripts and their dependencies).\n+            builder.ensure(crate::compile::Std { target: compiler.host, compiler });\n+            builder.ensure(crate::compile::Std { target, compiler });\n+        } else {\n+            builder.ensure(Std { target });\n+        }\n \n         let mut cargo = builder.cargo(\n             compiler,\n@@ -225,7 +239,7 @@ impl Step for CodegenBackend {\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n-        let compiler = builder.compiler(0, builder.config.build);\n+        let compiler = builder.compiler(builder.top_stage, builder.config.build);\n         let target = self.target;\n         let backend = self.backend;\n \n@@ -280,7 +294,7 @@ macro_rules! tool_check_step {\n             }\n \n             fn run(self, builder: &Builder<'_>) {\n-                let compiler = builder.compiler(0, builder.config.build);\n+                let compiler = builder.compiler(builder.top_stage, builder.config.build);\n                 let target = self.target;\n \n                 builder.ensure(Rustc { target });"}, {"sha": "55062e11e029a75b7fee5e020cee491f5ed6e638", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b702e02c06aa5af92f213ce69e810e35dd606db/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b702e02c06aa5af92f213ce69e810e35dd606db/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=8b702e02c06aa5af92f213ce69e810e35dd606db", "patch": "@@ -614,14 +614,10 @@ Arguments:\n         };\n \n         if let Subcommand::Check { .. } = &cmd {\n-            if matches.opt_str(\"stage\").is_some() {\n-                println!(\"--stage not supported for x.py check, always treated as stage 0\");\n-                process::exit(1);\n-            }\n             if matches.opt_str(\"keep-stage\").is_some()\n                 || matches.opt_str(\"keep-stage-std\").is_some()\n             {\n-                println!(\"--keep-stage not supported for x.py check, only one stage available\");\n+                println!(\"--keep-stage not yet supported for x.py check\");\n                 process::exit(1);\n             }\n         }"}]}