{"sha": "8adfd02368343636fe83b68e35c3b8e2db0f0e02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZGZkMDIzNjgzNDM2MzZmZTgzYjY4ZTM1YzNiOGUyZGIwZjBlMDI=", "commit": {"author": {"name": "Julian Orth", "email": "ju.orth@gmail.com", "date": "2014-10-17T21:37:24Z"}, "committer": {"name": "Julian Orth", "email": "ju.orth@gmail.com", "date": "2014-10-25T07:06:35Z"}, "message": "Make UdpStream block until the next non-empty msg.", "tree": {"sha": "81aa1c03f7b5df118ad1fd0dac4194390db9e430", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81aa1c03f7b5df118ad1fd0dac4194390db9e430"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8adfd02368343636fe83b68e35c3b8e2db0f0e02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8adfd02368343636fe83b68e35c3b8e2db0f0e02", "html_url": "https://github.com/rust-lang/rust/commit/8adfd02368343636fe83b68e35c3b8e2db0f0e02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8adfd02368343636fe83b68e35c3b8e2db0f0e02/comments", "author": {"login": "mahkoh", "id": 1882250, "node_id": "MDQ6VXNlcjE4ODIyNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1882250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahkoh", "html_url": "https://github.com/mahkoh", "followers_url": "https://api.github.com/users/mahkoh/followers", "following_url": "https://api.github.com/users/mahkoh/following{/other_user}", "gists_url": "https://api.github.com/users/mahkoh/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahkoh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahkoh/subscriptions", "organizations_url": "https://api.github.com/users/mahkoh/orgs", "repos_url": "https://api.github.com/users/mahkoh/repos", "events_url": "https://api.github.com/users/mahkoh/events{/privacy}", "received_events_url": "https://api.github.com/users/mahkoh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mahkoh", "id": 1882250, "node_id": "MDQ6VXNlcjE4ODIyNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1882250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahkoh", "html_url": "https://github.com/mahkoh", "followers_url": "https://api.github.com/users/mahkoh/followers", "following_url": "https://api.github.com/users/mahkoh/following{/other_user}", "gists_url": "https://api.github.com/users/mahkoh/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahkoh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahkoh/subscriptions", "organizations_url": "https://api.github.com/users/mahkoh/orgs", "repos_url": "https://api.github.com/users/mahkoh/repos", "events_url": "https://api.github.com/users/mahkoh/events{/privacy}", "received_events_url": "https://api.github.com/users/mahkoh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "172b59abe510dde5826fec24377f208a19418c04", "url": "https://api.github.com/repos/rust-lang/rust/commits/172b59abe510dde5826fec24377f208a19418c04", "html_url": "https://github.com/rust-lang/rust/commit/172b59abe510dde5826fec24377f208a19418c04"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "651cb9f596d010c6c998bc5e03dd73f128c95ebb", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8adfd02368343636fe83b68e35c3b8e2db0f0e02/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adfd02368343636fe83b68e35c3b8e2db0f0e02/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=8adfd02368343636fe83b68e35c3b8e2db0f0e02", "patch": "@@ -225,13 +225,15 @@ impl UdpStream {\n }\n \n impl Reader for UdpStream {\n+    /// Returns the next non-empty message from the specified address.\n     fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> {\n         let peer = self.connected_to;\n         self.as_socket(|sock| {\n-            match sock.recv_from(buf) {\n-                Ok((_nread, src)) if src != peer => Ok(0),\n-                Ok((nread, _src)) => Ok(nread),\n-                Err(e) => Err(e),\n+            loop {\n+                let (nread, src) = try!(sock.recv_from(buf));\n+                if nread > 0 && src == peer {\n+                    return Ok(nread);\n+                }\n             }\n         })\n     }\n@@ -337,19 +339,24 @@ mod test {\n     fn stream_smoke_test_ip4() {\n         let server_ip = next_test_ip4();\n         let client_ip = next_test_ip4();\n+        let dummy_ip = next_test_ip4();\n         let (tx1, rx1) = channel();\n         let (tx2, rx2) = channel();\n \n         spawn(proc() {\n-            match UdpSocket::bind(client_ip) {\n-                Ok(client) => {\n-                    let client = box client;\n-                    let mut stream = client.connect(server_ip);\n-                    rx1.recv();\n-                    stream.write([99]).unwrap();\n+            let send_as = |ip, val: &[u8]| {\n+                match UdpSocket::bind(ip) {\n+                    Ok(client) => {\n+                        let client = box client;\n+                        let mut stream = client.connect(server_ip);\n+                        stream.write(val).unwrap();\n+                    }\n+                    Err(..) => fail!()\n                 }\n-                Err(..) => fail!()\n-            }\n+            };\n+            rx1.recv();\n+            send_as(dummy_ip, [98]);\n+            send_as(client_ip, [99]);\n             tx2.send(());\n         });\n \n@@ -364,7 +371,7 @@ mod test {\n                         assert_eq!(nread, 1);\n                         assert_eq!(buf[0], 99);\n                     }\n-                    Err(..) => fail!()\n+                    Err(..) => fail!(),\n                 }\n             }\n             Err(..) => fail!()"}]}