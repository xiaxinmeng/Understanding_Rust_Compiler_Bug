{"sha": "ad27e2625a84662b49af3f73b40488e8bdcc46e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMjdlMjYyNWE4NDY2MmI0OWFmM2Y3M2I0MDQ4OGU4YmRjYzQ2ZTM=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2014-07-10T22:09:21Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2014-07-18T18:58:45Z"}, "message": "librustc: Set enum discriminant only after field translation.", "tree": {"sha": "57c7ae00c0bbe203d51904636c120adb7f2dd7de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57c7ae00c0bbe203d51904636c120adb7f2dd7de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad27e2625a84662b49af3f73b40488e8bdcc46e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad27e2625a84662b49af3f73b40488e8bdcc46e3", "html_url": "https://github.com/rust-lang/rust/commit/ad27e2625a84662b49af3f73b40488e8bdcc46e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad27e2625a84662b49af3f73b40488e8bdcc46e3/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27748b09d8bb69d7f7a105aa8dd22de439c17c6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/27748b09d8bb69d7f7a105aa8dd22de439c17c6c", "html_url": "https://github.com/rust-lang/rust/commit/27748b09d8bb69d7f7a105aa8dd22de439c17c6c"}], "stats": {"total": 45, "additions": 20, "deletions": 25}, "files": [{"sha": "54c30e721548d4b93073bbe58db8f9691b1ef84d", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad27e2625a84662b49af3f73b40488e8bdcc46e3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad27e2625a84662b49af3f73b40488e8bdcc46e3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=ad27e2625a84662b49af3f73b40488e8bdcc46e3", "patch": "@@ -674,11 +674,10 @@ pub fn trans_case<'a>(bcx: &'a Block<'a>, r: &Repr, discr: Disr)\n }\n \n /**\n- * Begin initializing a new value of the given case of the given\n- * representation.  The fields, if any, should then be initialized via\n- * `trans_field_ptr`.\n+ * Set the discriminant for a new value of the given case of the given\n+ * representation.\n  */\n-pub fn trans_start_init(bcx: &Block, r: &Repr, val: ValueRef, discr: Disr) {\n+pub fn trans_set_discr(bcx: &Block, r: &Repr, val: ValueRef, discr: Disr) {\n     match *r {\n         CEnum(ity, min, max) => {\n             assert_discr_in_range(ity, min, max, discr);"}, {"sha": "7d7922ebfa90c56be16c22103456a4ac6b9f7c02", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad27e2625a84662b49af3f73b40488e8bdcc46e3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad27e2625a84662b49af3f73b40488e8bdcc46e3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=ad27e2625a84662b49af3f73b40488e8bdcc46e3", "patch": "@@ -1735,14 +1735,12 @@ pub fn trans_named_tuple_constructor<'a>(mut bcx: &'a Block<'a>,\n \n     if !type_is_zero_size(ccx, result_ty) {\n         let repr = adt::represent_type(ccx, result_ty);\n-        adt::trans_start_init(bcx, &*repr, llresult, disr);\n \n         match args {\n             callee::ArgExprs(exprs) => {\n-                for (i, expr) in exprs.iter().enumerate() {\n-                    let lldestptr = adt::trans_field_ptr(bcx, &*repr, llresult, disr, i);\n-                    bcx = expr::trans_into(bcx, *expr, expr::SaveIn(lldestptr));\n-                }\n+                let fields = exprs.iter().map(|x| *x).enumerate().collect::<Vec<_>>();\n+                bcx = expr::trans_adt(bcx, &*repr, disr, fields.as_slice(),\n+                                      None, expr::SaveIn(llresult));\n             }\n             _ => ccx.sess().bug(\"expected expr as arguments for variant/struct tuple constructor\")\n         }\n@@ -1800,7 +1798,6 @@ fn trans_enum_variant_or_tuple_like_struct(ccx: &CrateContext,\n \n     if !type_is_zero_size(fcx.ccx, result_ty) {\n         let repr = adt::represent_type(ccx, result_ty);\n-        adt::trans_start_init(bcx, &*repr, fcx.llretptr.get().unwrap(), disr);\n         for (i, arg_datum) in arg_datums.move_iter().enumerate() {\n             let lldestptr = adt::trans_field_ptr(bcx,\n                                                  &*repr,\n@@ -1809,6 +1806,7 @@ fn trans_enum_variant_or_tuple_like_struct(ccx: &CrateContext,\n                                                  i);\n             arg_datum.store_to(bcx, lldestptr);\n         }\n+        adt::trans_set_discr(bcx, &*repr, fcx.llretptr.get().unwrap(), disr);\n     }\n \n     finish_fn(&fcx, bcx, result_ty);"}, {"sha": "ed6050b6543bc40c5235c4a624d6736e2600e1bb", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad27e2625a84662b49af3f73b40488e8bdcc46e3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad27e2625a84662b49af3f73b40488e8bdcc46e3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=ad27e2625a84662b49af3f73b40488e8bdcc46e3", "patch": "@@ -502,7 +502,6 @@ pub fn trans_unboxed_closure<'a>(\n     let repr = adt::represent_type(bcx.ccx(), node_id_type(bcx, id));\n \n     // Create the closure.\n-    adt::trans_start_init(bcx, &*repr, dest_addr, 0);\n     for freevar in freevars_ptr.iter() {\n         let datum = expr::trans_local_var(bcx, freevar.def);\n         let upvar_slot_dest = adt::trans_field_ptr(bcx,\n@@ -512,6 +511,7 @@ pub fn trans_unboxed_closure<'a>(\n                                                    0);\n         bcx = datum.store_to(bcx, upvar_slot_dest);\n     }\n+    adt::trans_set_discr(bcx, &*repr, dest_addr, 0);\n \n     bcx\n }"}, {"sha": "68f577faefed0521a7295b3ea8d552153e7bf22c", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ad27e2625a84662b49af3f73b40488e8bdcc46e3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad27e2625a84662b49af3f73b40488e8bdcc46e3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=ad27e2625a84662b49af3f73b40488e8bdcc46e3", "patch": "@@ -876,8 +876,8 @@ fn trans_def_dps_unadjusted<'a>(\n                 // Nullary variant.\n                 let ty = expr_ty(bcx, ref_expr);\n                 let repr = adt::represent_type(bcx.ccx(), ty);\n-                adt::trans_start_init(bcx, &*repr, lldest,\n-                                      variant_info.disr_val);\n+                adt::trans_set_discr(bcx, &*repr, lldest,\n+                                     variant_info.disr_val);\n                 return bcx;\n             }\n         }\n@@ -886,7 +886,7 @@ fn trans_def_dps_unadjusted<'a>(\n             match ty::get(ty).sty {\n                 ty::ty_struct(did, _) if ty::has_dtor(bcx.tcx(), did) => {\n                     let repr = adt::represent_type(bcx.ccx(), ty);\n-                    adt::trans_start_init(bcx, &*repr, lldest, 0);\n+                    adt::trans_set_discr(bcx, &*repr, lldest, 0);\n                 }\n                 _ => {}\n             }\n@@ -1098,7 +1098,7 @@ fn trans_rec_or_struct<'a>(\n  * Note that `fields` may be empty; the base expression must always be\n  * evaluated for side-effects.\n  */\n-struct StructBaseInfo {\n+pub struct StructBaseInfo {\n     /// The base expression; will be evaluated after all explicit fields.\n     expr: Gc<ast::Expr>,\n     /// The indices of fields to copy paired with their types.\n@@ -1114,14 +1114,12 @@ struct StructBaseInfo {\n  * - `optbase` contains information on the base struct (if any) from\n  * which remaining fields are copied; see comments on `StructBaseInfo`.\n  */\n-fn trans_adt<'a>(\n-             bcx: &'a Block<'a>,\n-             repr: &adt::Repr,\n-             discr: ty::Disr,\n-             fields: &[(uint, Gc<ast::Expr>)],\n-             optbase: Option<StructBaseInfo>,\n-             dest: Dest)\n-             -> &'a Block<'a> {\n+pub fn trans_adt<'a>(bcx: &'a Block<'a>,\n+                     repr: &adt::Repr,\n+                     discr: ty::Disr,\n+                     fields: &[(uint, Gc<ast::Expr>)],\n+                     optbase: Option<StructBaseInfo>,\n+                     dest: Dest) -> &'a Block<'a> {\n     let _icx = push_ctxt(\"trans_adt\");\n     let fcx = bcx.fcx;\n     let mut bcx = bcx;\n@@ -1143,8 +1141,6 @@ fn trans_adt<'a>(\n     // failure occur before the ADT as a whole is ready.\n     let custom_cleanup_scope = fcx.push_custom_cleanup_scope();\n \n-    adt::trans_start_init(bcx, repr, addr, discr);\n-\n     for &(i, ref e) in fields.iter() {\n         let dest = adt::trans_field_ptr(bcx, repr, addr, discr, i);\n         let e_ty = expr_ty_adjusted(bcx, &**e);\n@@ -1166,6 +1162,8 @@ fn trans_adt<'a>(\n         }\n     }\n \n+    adt::trans_set_discr(bcx, repr, addr, discr);\n+\n     fcx.pop_custom_cleanup_scope(custom_cleanup_scope);\n \n     return bcx;"}]}