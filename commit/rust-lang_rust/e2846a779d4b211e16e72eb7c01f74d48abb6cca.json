{"sha": "e2846a779d4b211e16e72eb7c01f74d48abb6cca", "node_id": "C_kwDOAAsO6NoAKGUyODQ2YTc3OWQ0YjIxMWUxNmU3MmViN2MwMWY3NGQ0OGFiYjZjY2E", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-25T02:06:23Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-01T23:12:10Z"}, "message": "Implement `@snapshot` check for htmldocck\n\nThis form of check allows performing snapshot tests (\u00e0 la `src/test/ui`)\non rustdoc HTML output, making it easier to create and update tests.\n\nSee this Zulip thread [1] for more information about the motivation for\nthis change.\n\n[1]: https://zulip-archive.rust-lang.org/stream/266220-rustdoc/topic/HTML.20snapshot.20tests.html#262651142", "tree": {"sha": "26a693e07195b0cc7d94e759972d43c9b4ede4bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26a693e07195b0cc7d94e759972d43c9b4ede4bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2846a779d4b211e16e72eb7c01f74d48abb6cca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2846a779d4b211e16e72eb7c01f74d48abb6cca", "html_url": "https://github.com/rust-lang/rust/commit/e2846a779d4b211e16e72eb7c01f74d48abb6cca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2846a779d4b211e16e72eb7c01f74d48abb6cca/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "html_url": "https://github.com/rust-lang/rust/commit/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2"}], "stats": {"total": 92, "additions": 82, "deletions": 10}, "files": [{"sha": "48a341ffe083710770023c465dfe4b5d03a2b40c", "filename": "src/etc/htmldocck.py", "status": "modified", "additions": 76, "deletions": 4, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/e2846a779d4b211e16e72eb7c01f74d48abb6cca/src%2Fetc%2Fhtmldocck.py", "raw_url": "https://github.com/rust-lang/rust/raw/e2846a779d4b211e16e72eb7c01f74d48abb6cca/src%2Fetc%2Fhtmldocck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fhtmldocck.py?ref=e2846a779d4b211e16e72eb7c01f74d48abb6cca", "patch": "@@ -90,10 +90,20 @@\n   highlights for example. If you want to simply check for the presence of\n   a given node or attribute, use an empty string (`\"\"`) as a `PATTERN`.\n \n-* `@count PATH XPATH COUNT' checks for the occurrence of the given XPath\n+* `@count PATH XPATH COUNT` checks for the occurrence of the given XPath\n   in the specified file. The number of occurrences must match the given\n   count.\n \n+* `@snapshot NAME PATH XPATH` creates a snapshot test named NAME.\n+  A snapshot test captures a subtree of the DOM, at the location\n+  determined by the XPath, and compares it to a pre-recorded value\n+  in a file. The file's name is the test's name with the `.rs` extension\n+  replaced with `.NAME.html`, where NAME is the snapshot's name.\n+\n+  htmldocck supports the `--bless` option to accept the current subtree\n+  as expected, saving it to the file determined by the snapshot's name.\n+  compiletest's `--bless` flag is forwarded to htmldocck.\n+\n * `@has-dir PATH` checks for the existence of the given directory.\n \n All conditions can be negated with `!`. `@!has foo/type.NoSuch.html`\n@@ -137,6 +147,10 @@\n \n channel = os.environ[\"DOC_RUST_LANG_ORG_CHANNEL\"]\n \n+# Initialized in main\n+rust_test_path = None\n+bless = None\n+\n class CustomHTMLParser(HTMLParser):\n     \"\"\"simplified HTML parser.\n \n@@ -387,6 +401,32 @@ def get_tree_count(tree, path):\n     return len(tree.findall(path))\n \n \n+def check_snapshot(snapshot_name, tree):\n+    assert rust_test_path.endswith('.rs')\n+    snapshot_path = '{}.{}.{}'.format(rust_test_path[:-3], snapshot_name, 'html')\n+    try:\n+        with open(snapshot_path, 'r') as snapshot_file:\n+            expected_str = snapshot_file.read()\n+    except FileNotFoundError:\n+        if bless:\n+            expected_str = None\n+        else:\n+            raise FailedCheck('No saved snapshot value')\n+\n+    actual_str = ET.tostring(tree).decode('utf-8')\n+\n+    if expected_str != actual_str:\n+        if bless:\n+            with open(snapshot_path, 'w') as snapshot_file:\n+                snapshot_file.write(actual_str)\n+        else:\n+            print('--- expected ---\\n')\n+            print(expected_str)\n+            print('\\n\\n--- actual ---\\n')\n+            print(actual_str)\n+            print()\n+            raise FailedCheck('Actual snapshot value is different than expected')\n+\n def stderr(*args):\n     if sys.version_info.major < 3:\n         file = codecs.getwriter('utf-8')(sys.stderr)\n@@ -448,6 +488,28 @@ def check_command(c, cache):\n                 ret = expected == found\n             else:\n                 raise InvalidCheck('Invalid number of @{} arguments'.format(c.cmd))\n+\n+        elif c.cmd == 'snapshot':  # snapshot test\n+            if len(c.args) == 3:  # @snapshot <snapshot-name> <html-path> <xpath>\n+                [snapshot_name, html_path, pattern] = c.args\n+                tree = cache.get_tree(html_path)\n+                xpath = normalize_xpath(pattern)\n+                subtrees = tree.findall(xpath)\n+                if len(subtrees) == 1:\n+                    [subtree] = subtrees\n+                    try:\n+                        check_snapshot(snapshot_name, subtree)\n+                        ret = True\n+                    except FailedCheck as err:\n+                        cerr = str(err)\n+                        ret = False\n+                elif len(subtrees) == 0:\n+                    raise FailedCheck('XPATH did not match')\n+                else:\n+                    raise FailedCheck('Expected 1 match, but found {}'.format(len(subtrees)))\n+            else:\n+                raise InvalidCheck('Invalid number of @{} arguments'.format(c.cmd))\n+\n         elif c.cmd == 'has-dir':  # has-dir test\n             if len(c.args) == 1:  # @has-dir <path> = has-dir test\n                 try:\n@@ -458,11 +520,13 @@ def check_command(c, cache):\n                     ret = False\n             else:\n                 raise InvalidCheck('Invalid number of @{} arguments'.format(c.cmd))\n+\n         elif c.cmd == 'valid-html':\n             raise InvalidCheck('Unimplemented @valid-html')\n \n         elif c.cmd == 'valid-links':\n             raise InvalidCheck('Unimplemented @valid-links')\n+\n         else:\n             raise InvalidCheck('Unrecognized @{}'.format(c.cmd))\n \n@@ -483,11 +547,19 @@ def check(target, commands):\n \n \n if __name__ == '__main__':\n-    if len(sys.argv) != 3:\n-        stderr('Usage: {} <doc dir> <template>'.format(sys.argv[0]))\n+    if len(sys.argv) not in [3, 4]:\n+        stderr('Usage: {} <doc dir> <template> [--bless]'.format(sys.argv[0]))\n         raise SystemExit(1)\n \n-    check(sys.argv[1], get_commands(sys.argv[2]))\n+    rust_test_path = sys.argv[2]\n+    if len(sys.argv) > 3 and sys.argv[3] == '--bless':\n+        bless = True\n+    else:\n+        # We only support `--bless` at the end of the arguments.\n+        # This assert is to prevent silent failures.\n+        assert '--bless' not in sys.argv\n+        bless = False\n+    check(sys.argv[1], get_commands(rust_test_path))\n     if ERR_COUNT:\n         stderr(\"\\nEncountered {} errors\".format(ERR_COUNT))\n         raise SystemExit(1)"}, {"sha": "d0ad4b80cdefe5602fa40a20a2bf76f34742f63f", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e2846a779d4b211e16e72eb7c01f74d48abb6cca/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2846a779d4b211e16e72eb7c01f74d48abb6cca/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=e2846a779d4b211e16e72eb7c01f74d48abb6cca", "patch": "@@ -2217,12 +2217,12 @@ impl<'test> TestCx<'test> {\n             self.check_rustdoc_test_option(proc_res);\n         } else {\n             let root = self.config.find_rust_src_root().unwrap();\n-            let res = self.cmd2procres(\n-                Command::new(&self.config.docck_python)\n-                    .arg(root.join(\"src/etc/htmldocck.py\"))\n-                    .arg(&out_dir)\n-                    .arg(&self.testpaths.file),\n-            );\n+            let mut cmd = Command::new(&self.config.docck_python);\n+            cmd.arg(root.join(\"src/etc/htmldocck.py\")).arg(&out_dir).arg(&self.testpaths.file);\n+            if self.config.bless {\n+                cmd.arg(\"--bless\");\n+            }\n+            let res = self.cmd2procres(&mut cmd);\n             if !res.status.success() {\n                 self.fatal_proc_rec_with_ctx(\"htmldocck failed!\", &res, |mut this| {\n                     this.compare_to_default_rustdoc(&out_dir)"}]}