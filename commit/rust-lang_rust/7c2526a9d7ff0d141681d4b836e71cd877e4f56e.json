{"sha": "7c2526a9d7ff0d141681d4b836e71cd877e4f56e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMjUyNmE5ZDdmZjBkMTQxNjgxZDRiODM2ZTcxY2Q4NzdlNGY1NmU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-11-12T22:18:47Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-11-24T16:26:01Z"}, "message": "Be more obvious when suggesting dereference\n\nInclude enclosing span when suggesting dereference on a span that is\nalready a reference:\n\n```\nerror: non-reference pattern used to match a reference (see issue #42640)\n  --> dont-suggest-dereference-on-arg.rs:16:19\n   |\n16 |         .filter(|&(ref a, _)| foo(a))\n   |                  ^^^^^^^^^^^ help: consider using: `&&(ref k, _)`\n   |\n   = help: add #![feature(match_default_bindings)] to the crate attributes to enable\n```", "tree": {"sha": "44371fe9d23362f5d28f39c22d047676f6da302c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44371fe9d23362f5d28f39c22d047676f6da302c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c2526a9d7ff0d141681d4b836e71cd877e4f56e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c2526a9d7ff0d141681d4b836e71cd877e4f56e", "html_url": "https://github.com/rust-lang/rust/commit/7c2526a9d7ff0d141681d4b836e71cd877e4f56e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c2526a9d7ff0d141681d4b836e71cd877e4f56e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71da1c21ebc79f19e749344c8b4e2c13f533872e", "url": "https://api.github.com/repos/rust-lang/rust/commits/71da1c21ebc79f19e749344c8b4e2c13f533872e", "html_url": "https://github.com/rust-lang/rust/commit/71da1c21ebc79f19e749344c8b4e2c13f533872e"}], "stats": {"total": 75, "additions": 66, "deletions": 9}, "files": [{"sha": "fbfc97d33c5c8bf86e3ce107de696ac2f7448df3", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7c2526a9d7ff0d141681d4b836e71cd877e4f56e/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c2526a9d7ff0d141681d4b836e71cd877e4f56e/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=7c2526a9d7ff0d141681d4b836e71cd877e4f56e", "patch": "@@ -23,7 +23,9 @@ use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::cmp;\n use syntax::ast;\n use syntax::codemap::Spanned;\n+use syntax::errors::DiagnosticBuilder;\n use syntax::feature_gate;\n+use syntax::parse::ParseSess;\n use syntax::ptr::P;\n use syntax_pos::Span;\n \n@@ -120,17 +122,32 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         .pat_adjustments_mut()\n                         .insert(pat.hir_id, pat_adjustments);\n                 } else {\n-                    let mut err = feature_gate::feature_err(\n-                        &tcx.sess.parse_sess,\n-                        \"match_default_bindings\",\n-                        pat.span,\n-                        feature_gate::GateIssue::Language,\n-                        \"non-reference pattern used to match a reference\",\n-                    );\n+                    fn feature_err<'a>(sp: Span, sess: &'a ParseSess) -> DiagnosticBuilder<'a> {\n+                        feature_gate::feature_err(\n+                            sess,\n+                            \"match_default_bindings\",\n+                            sp,\n+                            feature_gate::GateIssue::Language,\n+                            \"non-reference pattern used to match a reference\",\n+                        )\n+                    }\n                     if let Ok(snippet) = tcx.sess.codemap().span_to_snippet(pat.span) {\n-                        err.span_suggestion(pat.span, \"consider using\", format!(\"&{}\", &snippet));\n+                        // The following is a bit of a hack. We probably should check the AST for\n+                        // this instead, but this should be good enough for the expected cases.\n+                        let prev_span = pat.span.prev_point();\n+                        let (sp, sugg) = match tcx.sess.codemap().span_to_snippet(prev_span) {\n+                            // Make the suggestion more obvious when having `&(_, _)`\n+                            Ok(ref prev) if &*prev == \"&\" => {\n+                                (prev_span.to(pat.span), format!(\"&&{}\", &snippet)),\n+                            }\n+                            _ => (pat.span, format!(\"&{}\", &snippet)),\n+                        };\n+                        let mut err = feature_err(sp, &tcx.sess.parse_sess);\n+                        err.span_suggestion(sp, \"consider using a reference\", sugg);\n+                        err.emit();\n+                    } else {\n+                        feature_err(pat.span, &tcx.sess.parse_sess).emit();\n                     }\n-                    err.emit();\n                 }\n             }\n         }"}, {"sha": "40a7917613f1ed4080b493989aa641947cc00d1d", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7c2526a9d7ff0d141681d4b836e71cd877e4f56e/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c2526a9d7ff0d141681d4b836e71cd877e4f56e/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=7c2526a9d7ff0d141681d4b836e71cd877e4f56e", "patch": "@@ -159,6 +159,18 @@ impl Span {\n         Span::new(BytePos(lo), BytePos(lo), span.ctxt)\n     }\n \n+    /// Returns a new span representing the previous character after the start-point of this span\n+    pub fn prev_point(self) -> Span {\n+        let span = self.data();\n+        let span_lo = span.lo.0;\n+        let lo = if span_lo == 0 {\n+            0\n+        } else {\n+            span_lo - 1\n+        };\n+        Span::new(BytePos(lo), BytePos(span_lo), span.ctxt)\n+    }\n+\n     /// Returns `self` if `self` is not the dummy span, and `other` otherwise.\n     pub fn substitute_dummy(self, other: Span) -> Span {\n         if self.source_equal(&DUMMY_SP) { other } else { self }"}, {"sha": "2a9ea464416dae1c43f20bbcd0686bdd0ed8a976", "filename": "src/test/ui/suggestions/dont-suggest-dereference-on-arg.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7c2526a9d7ff0d141681d4b836e71cd877e4f56e/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-dereference-on-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c2526a9d7ff0d141681d4b836e71cd877e4f56e/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-dereference-on-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-dereference-on-arg.rs?ref=7c2526a9d7ff0d141681d4b836e71cd877e4f56e", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo(s: &str) -> bool { true }\n+\n+fn main() {\n+    let x = vec![(String::new(), String::new())];\n+    x.iter()\n+        .filter(|&(ref a, _)| foo(a))\n+        .collect();\n+}"}, {"sha": "fc1eb335d0586426c0df7b6282e2b97c4886d095", "filename": "src/test/ui/suggestions/dont-suggest-dereference-on-arg.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7c2526a9d7ff0d141681d4b836e71cd877e4f56e/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-dereference-on-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c2526a9d7ff0d141681d4b836e71cd877e4f56e/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-dereference-on-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-dereference-on-arg.stderr?ref=7c2526a9d7ff0d141681d4b836e71cd877e4f56e", "patch": "@@ -0,0 +1,10 @@\n+error: non-reference pattern used to match a reference (see issue #42640)\n+  --> dont-suggest-dereference-on-arg.rs:16:19\n+   |\n+16 |         .filter(|&(ref a, _)| foo(a))\n+   |                  ^^^^^^^^^^^ help: consider using: `&&(ref k, _)`\n+   |\n+   = help: add #![feature(match_default_bindings)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}]}