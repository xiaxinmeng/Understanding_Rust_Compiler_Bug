{"sha": "cd5e4c21ee1355603bea8c6b478678a51b45b277", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNWU0YzIxZWUxMzU1NjAzYmVhOGM2YjQ3ODY3OGE1MWI0NWIyNzc=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-08-22T09:41:49Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-08-22T09:41:49Z"}, "message": "Add skeleton of copy glue that actually copies", "tree": {"sha": "4b6979788e97650f998a06fc34579cf8c64c7626", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b6979788e97650f998a06fc34579cf8c64c7626"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd5e4c21ee1355603bea8c6b478678a51b45b277", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd5e4c21ee1355603bea8c6b478678a51b45b277", "html_url": "https://github.com/rust-lang/rust/commit/cd5e4c21ee1355603bea8c6b478678a51b45b277", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd5e4c21ee1355603bea8c6b478678a51b45b277/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7588a895538800ffe88e2a4273a47020fec42e7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7588a895538800ffe88e2a4273a47020fec42e7d", "html_url": "https://github.com/rust-lang/rust/commit/7588a895538800ffe88e2a4273a47020fec42e7d"}], "stats": {"total": 99, "additions": 82, "deletions": 17}, "files": [{"sha": "2e2bddba592c5a1bd42bbfc0d4a1947561be0672", "filename": "src/comp/back/abi.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd5e4c21ee1355603bea8c6b478678a51b45b277/src%2Fcomp%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5e4c21ee1355603bea8c6b478678a51b45b277/src%2Fcomp%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fabi.rs?ref=cd5e4c21ee1355603bea8c6b478678a51b45b277", "patch": "@@ -52,10 +52,9 @@ const tydesc_field_align: int = 2;\n const tydesc_field_take_glue: int = 3;\n const tydesc_field_drop_glue: int = 4;\n const tydesc_field_free_glue: int = 5;\n-const tydesc_field_sever_glue: int = 6;\n-const tydesc_field_mark_glue: int = 7;\n-// FIXME no longer used in rustc, drop when rustboot is gone\n-const tydesc_field_obj_drop_glue: int = 8;\n+const tydesc_field_copy_glue: int = 6;\n+const tydesc_field_sever_glue: int = 7;\n+const tydesc_field_mark_glue: int = 8;\n const tydesc_field_is_stateful: int = 9;\n const tydesc_field_cmp_glue: int = 10;\n const tydesc_field_shape: int = 11;"}, {"sha": "4825730d7e8fa7e13dc4d4b81f835a92dadf8152", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 53, "deletions": 11, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/cd5e4c21ee1355603bea8c6b478678a51b45b277/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5e4c21ee1355603bea8c6b478678a51b45b277/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=cd5e4c21ee1355603bea8c6b478678a51b45b277", "patch": "@@ -1120,12 +1120,16 @@ fn declare_tydesc(cx: &@local_ctxt, sp: &span, t: &ty::t, ty_params: &[uint])\n           mutable drop_glue: none::<ValueRef>,\n           mutable free_glue: none::<ValueRef>,\n           mutable cmp_glue: none::<ValueRef>,\n+          mutable copy_glue: none::<ValueRef>,\n           ty_params: ty_params};\n     log \"--- declare_tydesc \" + ty_to_str(cx.ccx.tcx, t);\n     ret info;\n }\n \n-type make_generic_glue_helper_fn = fn(&@block_ctxt, ValueRef, &ty::t);\n+tag glue_helper {\n+    default_helper(fn(&@block_ctxt, ValueRef, &ty::t));\n+    copy_helper(fn(&@block_ctxt, ValueRef, ValueRef, &ty::t));\n+}\n \n fn declare_generic_glue(cx: &@local_ctxt, t: &ty::t, llfnty: TypeRef,\n                         name: &str) -> ValueRef {\n@@ -1141,7 +1145,7 @@ fn declare_generic_glue(cx: &@local_ctxt, t: &ty::t, llfnty: TypeRef,\n \n fn make_generic_glue_inner(cx: &@local_ctxt, sp: &span, t: &ty::t,\n                            llfn: ValueRef,\n-                           helper: &make_generic_glue_helper_fn,\n+                           helper: &glue_helper,\n                            ty_params: &[uint]) -> ValueRef {\n     let fcx = new_fn_ctxt(cx, sp, llfn);\n     llvm::LLVMSetLinkage(llfn,\n@@ -1177,13 +1181,22 @@ fn make_generic_glue_inner(cx: &@local_ctxt, sp: &span, t: &ty::t,\n     let lltop = bcx.llbb;\n     let llrawptr0 = llvm::LLVMGetParam(llfn, 4u);\n     let llval0 = bcx.build.BitCast(llrawptr0, llty);\n-    helper(bcx, llval0, t);\n+    alt helper {\n+      default_helper(helper) {\n+        helper(bcx, llval0, t);\n+      }\n+      copy_helper(helper) {\n+        let llrawptr1 = llvm::LLVMGetParam(llfn, 4u);\n+        let llval1 = bcx.build.BitCast(llrawptr1, llty);\n+        helper(bcx, llval0, llval1, t);\n+      }\n+    }\n     finish_fn(fcx, lltop);\n     ret llfn;\n }\n \n fn make_generic_glue(cx: &@local_ctxt, sp: &span, t: &ty::t, llfn: ValueRef,\n-                     helper: &make_generic_glue_helper_fn, ty_params: &[uint],\n+                     helper: &glue_helper, ty_params: &[uint],\n                      name: &str) -> ValueRef {\n     if !cx.ccx.sess.get_opts().stats {\n         ret make_generic_glue_inner(cx, sp, t, llfn, helper, ty_params);\n@@ -1201,6 +1214,7 @@ fn emit_tydescs(ccx: &@crate_ctxt) {\n     for each pair: @{key: ty::t, val: @tydesc_info} in ccx.tydescs.items() {\n         let glue_fn_ty = T_ptr(T_glue_fn(*ccx));\n         let cmp_fn_ty = T_ptr(T_cmp_glue_fn(*ccx));\n+        let copy_fn_ty = T_ptr(T_copy_glue_fn(*ccx));\n         let ti = pair.val;\n         let take_glue =\n             alt { ti.take_glue } {\n@@ -1222,6 +1236,11 @@ fn emit_tydescs(ccx: &@crate_ctxt) {\n               none. { ccx.stats.n_null_glues += 1u; C_null(cmp_fn_ty) }\n               some(v) { ccx.stats.n_real_glues += 1u; v }\n             };\n+        let copy_glue =\n+            alt { ti.copy_glue } {\n+              none. { ccx.stats.n_null_glues += 1u; C_null(copy_fn_ty) }\n+              some(v) { ccx.stats.n_real_glues += 1u; v }\n+            };\n \n         let shape = shape::shape_of(ccx, pair.key);\n         let shape_tables =\n@@ -1236,9 +1255,9 @@ fn emit_tydescs(ccx: &@crate_ctxt) {\n                             take_glue, // take_glue\n                             drop_glue, // drop_glue\n                             free_glue, // free_glue\n+                            copy_glue, // copy_glue\n                             C_null(glue_fn_ty), // sever_glue\n                             C_null(glue_fn_ty), // mark_glue\n-                            C_null(glue_fn_ty), // obj_drop_glue\n                             C_null(glue_fn_ty), // is_stateful\n                             cmp_glue, // cmp_glue\n                             C_shape(ccx, shape), // shape\n@@ -1253,6 +1272,11 @@ fn emit_tydescs(ccx: &@crate_ctxt) {\n     }\n }\n \n+fn make_copy_glue(cx: &@block_ctxt, dst: ValueRef, src: ValueRef, t: &ty::t) {\n+    let bcx = memmove_ty(cx, dst, src, t).bcx;\n+    build_return(bcx);\n+}\n+\n fn make_take_glue(cx: &@block_ctxt, v: ValueRef, t: &ty::t) {\n     // NB: v is an *alias* of type t here, not a direct value.\n \n@@ -1970,6 +1994,7 @@ fn lazily_emit_all_tydesc_glue(cx: &@block_ctxt,\n     lazily_emit_tydesc_glue(cx, abi::tydesc_field_drop_glue, static_ti);\n     lazily_emit_tydesc_glue(cx, abi::tydesc_field_free_glue, static_ti);\n     lazily_emit_tydesc_glue(cx, abi::tydesc_field_cmp_glue, static_ti);\n+    lazily_emit_tydesc_glue(cx, abi::tydesc_field_copy_glue, static_ti);\n }\n \n fn lazily_emit_all_generic_info_tydesc_glues(cx: &@block_ctxt,\n@@ -1995,7 +2020,8 @@ fn lazily_emit_tydesc_glue(cx: &@block_ctxt, field: int,\n                     declare_generic_glue(lcx, ti.ty, T_glue_fn(*lcx.ccx),\n                                          \"take\");\n                 ti.take_glue = some::<ValueRef>(glue_fn);\n-                make_generic_glue(lcx, cx.sp, ti.ty, glue_fn, make_take_glue,\n+                make_generic_glue(lcx, cx.sp, ti.ty, glue_fn,\n+                                  default_helper(make_take_glue),\n                                   ti.ty_params, \"take\");\n                 log #fmt[\"--- lazily_emit_tydesc_glue TAKE %s\",\n                          ty_to_str(bcx_tcx(cx), ti.ty)];\n@@ -2012,13 +2038,14 @@ fn lazily_emit_tydesc_glue(cx: &@block_ctxt, field: int,\n                     declare_generic_glue(lcx, ti.ty, T_glue_fn(*lcx.ccx),\n                                          \"drop\");\n                 ti.drop_glue = some::<ValueRef>(glue_fn);\n-                make_generic_glue(lcx, cx.sp, ti.ty, glue_fn, make_drop_glue,\n+                make_generic_glue(lcx, cx.sp, ti.ty, glue_fn,\n+                                  default_helper(make_drop_glue),\n                                   ti.ty_params, \"drop\");\n                 log #fmt[\"--- lazily_emit_tydesc_glue DROP %s\",\n                          ty_to_str(bcx_tcx(cx), ti.ty)];\n               }\n             }\n-        } else if field == abi::tydesc_field_free_glue {\n+         } else if field == abi::tydesc_field_free_glue {\n             alt { ti.free_glue } {\n               some(_) { }\n               none. {\n@@ -2029,7 +2056,8 @@ fn lazily_emit_tydesc_glue(cx: &@block_ctxt, field: int,\n                     declare_generic_glue(lcx, ti.ty, T_glue_fn(*lcx.ccx),\n                                          \"free\");\n                 ti.free_glue = some::<ValueRef>(glue_fn);\n-                make_generic_glue(lcx, cx.sp, ti.ty, glue_fn, make_free_glue,\n+                make_generic_glue(lcx, cx.sp, ti.ty, glue_fn,\n+                                  default_helper(make_free_glue),\n                                   ti.ty_params, \"free\");\n                 log #fmt[\"--- lazily_emit_tydesc_glue FREE %s\",\n                          ty_to_str(bcx_tcx(cx), ti.ty)];\n@@ -2046,6 +2074,21 @@ fn lazily_emit_tydesc_glue(cx: &@block_ctxt, field: int,\n                          ty_to_str(bcx_tcx(cx), ti.ty)];\n               }\n             }\n+        } else if field == abi::tydesc_field_copy_glue {\n+            alt { ti.copy_glue } {\n+              some(_) {}\n+              none. {\n+                let lcx = cx.fcx.lcx;\n+                let glue_fn =\n+                    declare_generic_glue(lcx, ti.ty, T_copy_glue_fn(*lcx.ccx),\n+                                         \"copy\");\n+                ti.copy_glue = some(glue_fn);\n+                make_generic_glue(lcx, cx.sp, ti.ty, glue_fn,\n+                                  copy_helper(make_copy_glue),\n+                                  ti.ty_params, \"copy\");\n+                \n+              }\n+            }\n         }\n       }\n     }\n@@ -2065,8 +2108,6 @@ fn call_tydesc_glue_full(cx: &@block_ctxt, v: ValueRef, tydesc: ValueRef,\n             static_glue_fn = sti.drop_glue;\n         } else if field == abi::tydesc_field_free_glue {\n             static_glue_fn = sti.free_glue;\n-        } else if field == abi::tydesc_field_cmp_glue {\n-            static_glue_fn = sti.cmp_glue;\n         }\n       }\n     }\n@@ -2787,6 +2828,7 @@ mod ivec {\n         lazily_emit_tydesc_glue(bcx, abi::tydesc_field_take_glue, none);\n         lazily_emit_tydesc_glue(bcx, abi::tydesc_field_drop_glue, none);\n         lazily_emit_tydesc_glue(bcx, abi::tydesc_field_free_glue, none);\n+        lazily_emit_tydesc_glue(bcx, abi::tydesc_field_copy_glue, none);\n         let rhs_len_and_data = get_len_and_data(bcx, rhs, unit_ty);\n         let rhs_len = rhs_len_and_data.len;\n         let rhs_data = rhs_len_and_data.data;"}, {"sha": "3f6e74783333519a90f3da0068f91a4c9acea0db", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cd5e4c21ee1355603bea8c6b478678a51b45b277/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5e4c21ee1355603bea8c6b478678a51b45b277/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=cd5e4c21ee1355603bea8c6b478678a51b45b277", "patch": "@@ -85,6 +85,7 @@ type tydesc_info =\n      mutable drop_glue: option::t<ValueRef>,\n      mutable free_glue: option::t<ValueRef>,\n      mutable cmp_glue: option::t<ValueRef>,\n+     mutable copy_glue: option::t<ValueRef>,\n      ty_params: [uint]};\n \n /*\n@@ -605,6 +606,14 @@ fn T_cmp_glue_fn(cx: &crate_ctxt) -> TypeRef {\n     ret t;\n }\n \n+fn T_copy_glue_fn(cx: &crate_ctxt) -> TypeRef {\n+    let s = \"copy_glue_fn\";\n+    if cx.tn.name_has_type(s) { ret cx.tn.get_type(s); }\n+    let t = T_tydesc_field(cx, abi::tydesc_field_copy_glue);\n+    cx.tn.associate(s, t);\n+    ret t;\n+}\n+\n fn T_tydesc(taskptr_type: TypeRef) -> TypeRef {\n     let tydesc = T_named_struct(\"tydesc\");\n     let tydescpp = T_ptr(T_ptr(tydesc));\n@@ -615,10 +624,13 @@ fn T_tydesc(taskptr_type: TypeRef) -> TypeRef {\n     let cmp_glue_fn_ty =\n         T_ptr(T_fn([T_ptr(T_i1()), taskptr_type, T_ptr(tydesc), tydescpp,\n                     pvoid, pvoid, T_i8()], T_void()));\n+    let copy_glue_fn_ty =\n+        T_ptr(T_fn([T_ptr(T_nil()), taskptr_type, T_ptr(T_nil()), tydescpp,\n+                    pvoid, pvoid], T_void()));\n \n     let elems =\n         [tydescpp, T_int(), T_int(), glue_fn_ty, glue_fn_ty, glue_fn_ty,\n-         glue_fn_ty, glue_fn_ty, glue_fn_ty, glue_fn_ty, cmp_glue_fn_ty,\n+         copy_glue_fn_ty, glue_fn_ty, glue_fn_ty, glue_fn_ty, cmp_glue_fn_ty,\n          T_ptr(T_i8()), T_ptr(T_i8()), T_int()];\n     set_struct_body(tydesc, elems);\n     ret tydesc;\n@@ -892,3 +904,13 @@ fn C_shape(ccx: &@crate_ctxt, bytes: &[u8]) -> ValueRef {\n     ret llvm::LLVMConstPointerCast(llglobal, T_ptr(T_i8()));\n }\n \n+//\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:\n+//"}, {"sha": "dd9f1d0cbc89bf0ca4dda4197a8b2be09157d74e", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd5e4c21ee1355603bea8c6b478678a51b45b277/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/cd5e4c21ee1355603bea8c6b478678a51b45b277/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=cd5e4c21ee1355603bea8c6b478678a51b45b277", "patch": "@@ -257,6 +257,8 @@ struct rust_timer {\n \n typedef void CDECL (glue_fn)(void *, rust_task *, void *,\n                              const type_desc **, void *);\n+typedef void CDECL (copy_glue_fn)(void *, rust_task *, void *,\n+                                  const type_desc **, void *, void *);\n typedef void CDECL (cmp_glue_fn)(void *, rust_task *, void *,\n                                  const type_desc **,\n                                  void *, void *, int8_t);\n@@ -275,9 +277,9 @@ struct type_desc {\n     glue_fn *take_glue;\n     glue_fn *drop_glue;\n     glue_fn *free_glue;\n+    copy_glue_fn *copy_glue;\n     glue_fn *sever_glue;    // For GC.\n     glue_fn *mark_glue;     // For GC.\n-    glue_fn *obj_drop_glue; // For custom destructors.\n     uintptr_t is_stateful;\n     cmp_glue_fn *cmp_glue;\n     const uint8_t *shape;"}]}