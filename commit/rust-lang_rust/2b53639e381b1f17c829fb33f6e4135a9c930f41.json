{"sha": "2b53639e381b1f17c829fb33f6e4135a9c930f41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiNTM2MzllMzgxYjFmMTdjODI5ZmIzM2Y2ZTQxMzVhOWM5MzBmNDE=", "commit": {"author": {"name": "David Lattimore", "email": "dml@google.com", "date": "2020-07-21T11:32:09Z"}, "committer": {"name": "David Lattimore", "email": "dml@google.com", "date": "2020-07-24T11:34:00Z"}, "message": "SSR: Use expect! in tests", "tree": {"sha": "f286ae448454f1e490610ba81b30cbefc030f17a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f286ae448454f1e490610ba81b30cbefc030f17a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b53639e381b1f17c829fb33f6e4135a9c930f41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b53639e381b1f17c829fb33f6e4135a9c930f41", "html_url": "https://github.com/rust-lang/rust/commit/2b53639e381b1f17c829fb33f6e4135a9c930f41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b53639e381b1f17c829fb33f6e4135a9c930f41/comments", "author": {"login": "davidlattimore", "id": 8983542, "node_id": "MDQ6VXNlcjg5ODM1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/8983542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidlattimore", "html_url": "https://github.com/davidlattimore", "followers_url": "https://api.github.com/users/davidlattimore/followers", "following_url": "https://api.github.com/users/davidlattimore/following{/other_user}", "gists_url": "https://api.github.com/users/davidlattimore/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidlattimore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidlattimore/subscriptions", "organizations_url": "https://api.github.com/users/davidlattimore/orgs", "repos_url": "https://api.github.com/users/davidlattimore/repos", "events_url": "https://api.github.com/users/davidlattimore/events{/privacy}", "received_events_url": "https://api.github.com/users/davidlattimore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidlattimore", "id": 8983542, "node_id": "MDQ6VXNlcjg5ODM1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/8983542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidlattimore", "html_url": "https://github.com/davidlattimore", "followers_url": "https://api.github.com/users/davidlattimore/followers", "following_url": "https://api.github.com/users/davidlattimore/following{/other_user}", "gists_url": "https://api.github.com/users/davidlattimore/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidlattimore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidlattimore/subscriptions", "organizations_url": "https://api.github.com/users/davidlattimore/orgs", "repos_url": "https://api.github.com/users/davidlattimore/repos", "events_url": "https://api.github.com/users/davidlattimore/events{/privacy}", "received_events_url": "https://api.github.com/users/davidlattimore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc0a378070676d7b3a028f770ec6e74c5bf7ca96", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc0a378070676d7b3a028f770ec6e74c5bf7ca96", "html_url": "https://github.com/rust-lang/rust/commit/bc0a378070676d7b3a028f770ec6e74c5bf7ca96"}], "stats": {"total": 75, "additions": 38, "deletions": 37}, "files": [{"sha": "8bed2b1afcd8e44fd312f6ac59fa59278c7535c5", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b53639e381b1f17c829fb33f6e4135a9c930f41/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2b53639e381b1f17c829fb33f6e4135a9c930f41/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2b53639e381b1f17c829fb33f6e4135a9c930f41", "patch": "@@ -1164,6 +1164,7 @@ dependencies = [\n name = \"ra_ssr\"\n version = \"0.1.0\"\n dependencies = [\n+ \"expect\",\n  \"ra_db\",\n  \"ra_hir\",\n  \"ra_ide_db\","}, {"sha": "84e4b171e1beb4bc4b729334c10695719ba1cf47", "filename": "crates/ra_ssr/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2b53639e381b1f17c829fb33f6e4135a9c930f41/crates%2Fra_ssr%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2b53639e381b1f17c829fb33f6e4135a9c930f41/crates%2Fra_ssr%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2FCargo.toml?ref=2b53639e381b1f17c829fb33f6e4135a9c930f41", "patch": "@@ -18,3 +18,6 @@ ra_ide_db = { path = \"../ra_ide_db\" }\n hir = { path = \"../ra_hir\", package = \"ra_hir\" }\n rustc-hash = \"1.1.0\"\n test_utils = { path = \"../test_utils\" }\n+\n+[dev-dependencies]\n+expect = { path = \"../expect\" }"}, {"sha": "9f53065929bfb129d1026eb512e004d6b544b0ec", "filename": "crates/ra_ssr/src/tests.rs", "status": "modified", "additions": 34, "deletions": 37, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/2b53639e381b1f17c829fb33f6e4135a9c930f41/crates%2Fra_ssr%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b53639e381b1f17c829fb33f6e4135a9c930f41/crates%2Fra_ssr%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Ftests.rs?ref=2b53639e381b1f17c829fb33f6e4135a9c930f41", "patch": "@@ -1,4 +1,5 @@\n use crate::{MatchFinder, SsrRule};\n+use expect::{expect, Expect};\n use ra_db::{FileId, SourceDatabaseExt};\n use test_utils::mark;\n \n@@ -61,16 +62,11 @@ fn single_file(code: &str) -> (ra_ide_db::RootDatabase, FileId) {\n     ra_ide_db::RootDatabase::with_single_file(code)\n }\n \n-fn assert_ssr_transform(rule: &str, input: &str, result: &str) {\n-    assert_ssr_transforms(&[rule], input, result);\n+fn assert_ssr_transform(rule: &str, input: &str, expected: Expect) {\n+    assert_ssr_transforms(&[rule], input, expected);\n }\n \n-fn normalize_code(code: &str) -> String {\n-    let (db, file_id) = single_file(code);\n-    db.file_text(file_id).to_string()\n-}\n-\n-fn assert_ssr_transforms(rules: &[&str], input: &str, result: &str) {\n+fn assert_ssr_transforms(rules: &[&str], input: &str, expected: Expect) {\n     let (db, file_id) = single_file(input);\n     let mut match_finder = MatchFinder::new(&db);\n     for rule in rules {\n@@ -80,12 +76,9 @@ fn assert_ssr_transforms(rules: &[&str], input: &str, result: &str) {\n     if let Some(edits) = match_finder.edits_for_file(file_id) {\n         // Note, db.file_text is not necessarily the same as `input`, since fixture parsing alters\n         // stuff.\n-        let mut after = db.file_text(file_id).to_string();\n-        edits.apply(&mut after);\n-        // Likewise, we need to make sure that whatever transformations fixture parsing applies,\n-        // also get applied to our expected result.\n-        let result = normalize_code(result);\n-        assert_eq!(after, result);\n+        let mut actual = db.file_text(file_id).to_string();\n+        edits.apply(&mut actual);\n+        expected.assert_eq(&actual);\n     } else {\n         panic!(\"No edits were made\");\n     }\n@@ -149,7 +142,7 @@ fn ssr_function_to_method() {\n     assert_ssr_transform(\n         \"my_function($a, $b) ==>> ($a).my_method($b)\",\n         \"fn my_function() {} fn main() { loop { my_function( other_func(x, y), z + w) } }\",\n-        \"fn my_function() {} fn main() { loop { (other_func(x, y)).my_method(z + w) } }\",\n+        expect![[\"fn my_function() {} fn main() { loop { (other_func(x, y)).my_method(z + w) } }\"]],\n     )\n }\n \n@@ -158,7 +151,7 @@ fn ssr_nested_function() {\n     assert_ssr_transform(\n         \"foo($a, $b, $c) ==>> bar($c, baz($a, $b))\",\n         \"fn foo() {} fn main { foo  (x + value.method(b), x+y-z, true && false) }\",\n-        \"fn foo() {} fn main { bar(true && false, baz(x + value.method(b), x+y-z)) }\",\n+        expect![[\"fn foo() {} fn main { bar(true && false, baz(x + value.method(b), x+y-z)) }\"]],\n     )\n }\n \n@@ -167,7 +160,7 @@ fn ssr_expected_spacing() {\n     assert_ssr_transform(\n         \"foo($x) + bar() ==>> bar($x)\",\n         \"fn foo() {} fn bar() {} fn main() { foo(5) + bar() }\",\n-        \"fn foo() {} fn bar() {} fn main() { bar(5) }\",\n+        expect![[\"fn foo() {} fn bar() {} fn main() { bar(5) }\"]],\n     );\n }\n \n@@ -176,7 +169,7 @@ fn ssr_with_extra_space() {\n     assert_ssr_transform(\n         \"foo($x  ) +    bar() ==>> bar($x)\",\n         \"fn foo() {} fn bar() {} fn main() { foo(  5 )  +bar(   ) }\",\n-        \"fn foo() {} fn bar() {} fn main() { bar(5) }\",\n+        expect![[\"fn foo() {} fn bar() {} fn main() { bar(5) }\"]],\n     );\n }\n \n@@ -185,7 +178,7 @@ fn ssr_keeps_nested_comment() {\n     assert_ssr_transform(\n         \"foo($x) ==>> bar($x)\",\n         \"fn foo() {} fn main() { foo(other(5 /* using 5 */)) }\",\n-        \"fn foo() {} fn main() { bar(other(5 /* using 5 */)) }\",\n+        expect![[\"fn foo() {} fn main() { bar(other(5 /* using 5 */)) }\"]],\n     )\n }\n \n@@ -194,7 +187,7 @@ fn ssr_keeps_comment() {\n     assert_ssr_transform(\n         \"foo($x) ==>> bar($x)\",\n         \"fn foo() {} fn main() { foo(5 /* using 5 */) }\",\n-        \"fn foo() {} fn main() { bar(5)/* using 5 */ }\",\n+        expect![[\"fn foo() {} fn main() { bar(5)/* using 5 */ }\"]],\n     )\n }\n \n@@ -203,7 +196,7 @@ fn ssr_struct_lit() {\n     assert_ssr_transform(\n         \"foo{a: $a, b: $b} ==>> foo::new($a, $b)\",\n         \"fn foo() {} fn main() { foo{b:2, a:1} }\",\n-        \"fn foo() {} fn main() { foo::new(1, 2) }\",\n+        expect![[\"fn foo() {} fn main() { foo::new(1, 2) }\"]],\n     )\n }\n \n@@ -417,7 +410,7 @@ fn replace_function_call() {\n     assert_ssr_transform(\n         \"foo() ==>> bar()\",\n         \"fn foo() {} fn f1() {foo(); foo();}\",\n-        \"fn foo() {} fn f1() {bar(); bar();}\",\n+        expect![[\"fn foo() {} fn f1() {bar(); bar();}\"]],\n     );\n }\n \n@@ -426,7 +419,7 @@ fn replace_function_call_with_placeholders() {\n     assert_ssr_transform(\n         \"foo($a, $b) ==>> bar($b, $a)\",\n         \"fn foo() {} fn f1() {foo(5, 42)}\",\n-        \"fn foo() {} fn f1() {bar(42, 5)}\",\n+        expect![[\"fn foo() {} fn f1() {bar(42, 5)}\"]],\n     );\n }\n \n@@ -435,7 +428,7 @@ fn replace_nested_function_calls() {\n     assert_ssr_transform(\n         \"foo($a) ==>> bar($a)\",\n         \"fn foo() {} fn f1() {foo(foo(42))}\",\n-        \"fn foo() {} fn f1() {bar(bar(42))}\",\n+        expect![[\"fn foo() {} fn f1() {bar(bar(42))}\"]],\n     );\n }\n \n@@ -444,7 +437,7 @@ fn replace_type() {\n     assert_ssr_transform(\n         \"Result<(), $a> ==>> Option<$a>\",\n         \"struct Result<T, E> {} fn f1() -> Result<(), Vec<Error>> {foo()}\",\n-        \"struct Result<T, E> {} fn f1() -> Option<Vec<Error>> {foo()}\",\n+        expect![[\"struct Result<T, E> {} fn f1() -> Option<Vec<Error>> {foo()}\"]],\n     );\n }\n \n@@ -453,7 +446,7 @@ fn replace_struct_init() {\n     assert_ssr_transform(\n         \"Foo {a: $a, b: $b} ==>> Foo::new($a, $b)\",\n         \"struct Foo {} fn f1() {Foo{b: 1, a: 2}}\",\n-        \"struct Foo {} fn f1() {Foo::new(2, 1)}\",\n+        expect![[\"struct Foo {} fn f1() {Foo::new(2, 1)}\"]],\n     );\n }\n \n@@ -462,12 +455,12 @@ fn replace_macro_invocations() {\n     assert_ssr_transform(\n         \"try!($a) ==>> $a?\",\n         \"macro_rules! try {() => {}} fn f1() -> Result<(), E> {bar(try!(foo()));}\",\n-        \"macro_rules! try {() => {}} fn f1() -> Result<(), E> {bar(foo()?);}\",\n+        expect![[\"macro_rules! try {() => {}} fn f1() -> Result<(), E> {bar(foo()?);}\"]],\n     );\n     assert_ssr_transform(\n         \"foo!($a($b)) ==>> foo($b, $a)\",\n         \"macro_rules! foo {() => {}} fn f1() {foo!(abc(def() + 2));}\",\n-        \"macro_rules! foo {() => {}} fn f1() {foo(def() + 2, abc);}\",\n+        expect![[\"macro_rules! foo {() => {}} fn f1() {foo(def() + 2, abc);}\"]],\n     );\n }\n \n@@ -476,12 +469,12 @@ fn replace_binary_op() {\n     assert_ssr_transform(\n         \"$a + $b ==>> $b + $a\",\n         \"fn f() {2 * 3 + 4 * 5}\",\n-        \"fn f() {4 * 5 + 2 * 3}\",\n+        expect![[\"fn f() {4 * 5 + 2 * 3}\"]],\n     );\n     assert_ssr_transform(\n         \"$a + $b ==>> $b + $a\",\n         \"fn f() {1 + 2 + 3 + 4}\",\n-        \"fn f() {4 + 3 + 2 + 1}\",\n+        expect![[\"fn f() {4 + 3 + 2 + 1}\"]],\n     );\n }\n \n@@ -495,7 +488,7 @@ fn multiple_rules() {\n     assert_ssr_transforms(\n         &[\"$a + 1 ==>> add_one($a)\", \"$a + $b ==>> add($a, $b)\"],\n         \"fn f() -> i32 {3 + 2 + 1}\",\n-        \"fn f() -> i32 {add_one(add(3, 2))}\",\n+        expect![[\"fn f() -> i32 {add_one(add(3, 2))}\"]],\n     )\n }\n \n@@ -527,12 +520,14 @@ fn replace_within_macro_expansion() {\n             macro_rules! macro1 {\n                 ($a:expr) => {$a}\n             }\n-            fn f() {macro1!(5.x().foo().o2())}\"#,\n-        r#\"\n+            fn f() {macro1!(5.x().foo().o2())}\n+            \"#,\n+        expect![[r#\"\n             macro_rules! macro1 {\n                 ($a:expr) => {$a}\n             }\n-            fn f() {macro1!(bar(5.x()).o2())}\"#,\n+            fn f() {macro1!(bar(5.x()).o2())}\n+            \"#]],\n     )\n }\n \n@@ -544,12 +539,14 @@ fn preserves_whitespace_within_macro_expansion() {\n             macro_rules! macro1 {\n                 ($a:expr) => {$a}\n             }\n-            fn f() {macro1!(1   *   2 + 3 + 4}\"#,\n-        r#\"\n+            fn f() {macro1!(1   *   2 + 3 + 4}\n+            \"#,\n+        expect![[r#\"\n             macro_rules! macro1 {\n                 ($a:expr) => {$a}\n             }\n-            fn f() {macro1!(4 - 3 - 1   *   2}\"#,\n+            fn f() {macro1!(4 - 3 - 1   *   2}\n+            \"#]],\n     )\n }\n "}]}