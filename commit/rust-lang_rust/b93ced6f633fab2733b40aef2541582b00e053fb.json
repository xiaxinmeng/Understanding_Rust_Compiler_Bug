{"sha": "b93ced6f633fab2733b40aef2541582b00e053fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5M2NlZDZmNjMzZmFiMjczM2I0MGFlZjI1NDE1ODJiMDBlMDUzZmI=", "commit": {"author": {"name": "Matthias Einwag", "email": "matthias.einwag@live.com", "date": "2020-09-23T06:12:51Z"}, "committer": {"name": "Matthias Einwag", "email": "matthias.einwag@live.com", "date": "2020-09-23T06:12:51Z"}, "message": "Allow to use a Github Auth token for fetching releases\n\nThis change allows to use a authorization token provided by Github in\norder to fetch metadata for a RA release. Using an authorization token\nprevents to get rate-limited in environments where lots of RA users use\na shared client IP (e.g. behind a company NAT).\n\nThe auth token is stored in `ExtensionContext.globalState`.\nAs far as I could observe through testing with a local WSL2 environment\nthat state is synced between an extension installed locally and a remote\nversion.\n\nThe change provides no explicit command to query for an auth token.\nHowever in case a download fails it will provide a retry option as well\nas an option to enter the auth token. This should be more discoverable\nfor most users.\n\nCloses #3688", "tree": {"sha": "d4f100e94e0f8cbece5fddc76385f42cdd181e45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4f100e94e0f8cbece5fddc76385f42cdd181e45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b93ced6f633fab2733b40aef2541582b00e053fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b93ced6f633fab2733b40aef2541582b00e053fb", "html_url": "https://github.com/rust-lang/rust/commit/b93ced6f633fab2733b40aef2541582b00e053fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b93ced6f633fab2733b40aef2541582b00e053fb/comments", "author": {"login": "Matthias247", "id": 6330334, "node_id": "MDQ6VXNlcjYzMzAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6330334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Matthias247", "html_url": "https://github.com/Matthias247", "followers_url": "https://api.github.com/users/Matthias247/followers", "following_url": "https://api.github.com/users/Matthias247/following{/other_user}", "gists_url": "https://api.github.com/users/Matthias247/gists{/gist_id}", "starred_url": "https://api.github.com/users/Matthias247/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Matthias247/subscriptions", "organizations_url": "https://api.github.com/users/Matthias247/orgs", "repos_url": "https://api.github.com/users/Matthias247/repos", "events_url": "https://api.github.com/users/Matthias247/events{/privacy}", "received_events_url": "https://api.github.com/users/Matthias247/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Matthias247", "id": 6330334, "node_id": "MDQ6VXNlcjYzMzAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6330334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Matthias247", "html_url": "https://github.com/Matthias247", "followers_url": "https://api.github.com/users/Matthias247/followers", "following_url": "https://api.github.com/users/Matthias247/following{/other_user}", "gists_url": "https://api.github.com/users/Matthias247/gists{/gist_id}", "starred_url": "https://api.github.com/users/Matthias247/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Matthias247/subscriptions", "organizations_url": "https://api.github.com/users/Matthias247/orgs", "repos_url": "https://api.github.com/users/Matthias247/repos", "events_url": "https://api.github.com/users/Matthias247/events{/privacy}", "received_events_url": "https://api.github.com/users/Matthias247/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcdedbb3d5a45ea974cc5f8e9068e9604c43a757", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcdedbb3d5a45ea974cc5f8e9068e9604c43a757", "html_url": "https://github.com/rust-lang/rust/commit/bcdedbb3d5a45ea974cc5f8e9068e9604c43a757"}], "stats": {"total": 76, "additions": 72, "deletions": 4}, "files": [{"sha": "8c1610570631b55b2fc58d6c4d556fb88428693e", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 53, "deletions": 2, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/b93ced6f633fab2733b40aef2541582b00e053fb/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b93ced6f633fab2733b40aef2541582b00e053fb/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=b93ced6f633fab2733b40aef2541582b00e053fb", "patch": "@@ -173,7 +173,9 @@ async function bootstrapExtension(config: Config, state: PersistentState): Promi\n         if (!shouldCheckForNewNightly) return;\n     }\n \n-    const release = await fetchRelease(\"nightly\").catch((e) => {\n+    const release = await performDownloadWithRetryDialog(async () => {\n+        return await fetchRelease(\"nightly\", state.githubToken);\n+    }, state).catch((e) => {\n         log.error(e);\n         if (state.releaseId === undefined) { // Show error only for the initial download\n             vscode.window.showErrorMessage(`Failed to download rust-analyzer nightly ${e}`);\n@@ -308,7 +310,10 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n         if (userResponse !== \"Download now\") return dest;\n     }\n \n-    const release = await fetchRelease(config.package.releaseTag);\n+    const releaseTag = config.package.releaseTag;\n+    const release = await performDownloadWithRetryDialog(async () => {\n+        return await fetchRelease(releaseTag, state.githubToken);\n+    }, state);\n     const artifact = release.assets.find(artifact => artifact.name === `rust-analyzer-${platform}.gz`);\n     assert(!!artifact, `Bad release: ${JSON.stringify(release)}`);\n \n@@ -333,3 +338,49 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n     await state.updateServerVersion(config.package.version);\n     return dest;\n }\n+\n+async function performDownloadWithRetryDialog<T>(downloadFunc: () => Promise<T>, state: PersistentState): Promise<T> {\n+    while (true) {\n+        try {\n+            return await downloadFunc();\n+        } catch (e) {\n+            let selected = await vscode.window.showErrorMessage(\"Failed perform download: \" + e.message, {}, {\n+                title: \"Update Github Auth Token\",\n+                updateToken: true,\n+            }, {\n+                title: \"Retry download\",\n+                retry: true,\n+            }, {\n+                title: \"Dismiss\",\n+            });\n+    \n+            if (selected?.updateToken) {\n+                await queryForGithubToken(state);\n+                continue;\n+            } else if (selected?.retry) {\n+                continue;\n+            }\n+            throw e;\n+        };\n+    }\n+\n+}\n+\n+async function queryForGithubToken(state: PersistentState): Promise<void> {\n+    const githubTokenOptions: vscode.InputBoxOptions = {\n+        value: state.githubToken,\n+        password: true,\n+        prompt: `\n+            This dialog allows to store a Github authorization token.\n+            The usage of an authorization token allows will increase the rate\n+            limit on the use of Github APIs and can thereby prevent getting\n+            throttled.\n+            Auth tokens can be obtained at https://github.com/settings/tokens`,\n+    };\n+\n+    const newToken = await vscode.window.showInputBox(githubTokenOptions);\n+    if (newToken) {\n+        log.info(\"Storing new github token\");\n+        await state.updateGithubToken(newToken);\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "d6194b63e4bb1c7665283d3c27320b872e13c77b", "filename": "editors/code/src/net.ts", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b93ced6f633fab2733b40aef2541582b00e053fb/editors%2Fcode%2Fsrc%2Fnet.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b93ced6f633fab2733b40aef2541582b00e053fb/editors%2Fcode%2Fsrc%2Fnet.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fnet.ts?ref=b93ced6f633fab2733b40aef2541582b00e053fb", "patch": "@@ -18,7 +18,8 @@ const OWNER = \"rust-analyzer\";\n const REPO = \"rust-analyzer\";\n \n export async function fetchRelease(\n-    releaseTag: string\n+    releaseTag: string,\n+    githubToken: string | null | undefined,\n ): Promise<GithubRelease> {\n \n     const apiEndpointPath = `/repos/${OWNER}/${REPO}/releases/tags/${releaseTag}`;\n@@ -27,7 +28,12 @@ export async function fetchRelease(\n \n     log.debug(\"Issuing request for released artifacts metadata to\", requestUrl);\n \n-    const response = await fetch(requestUrl, { headers: { Accept: \"application/vnd.github.v3+json\" } });\n+    var headers: any = { Accept: \"application/vnd.github.v3+json\" };\n+    if (githubToken != null) {\n+        headers.Authorization = \"token \" + githubToken;\n+    }\n+\n+    const response = await fetch(requestUrl, { headers: headers });\n \n     if (!response.ok) {\n         log.error(\"Error fetching artifact release info\", {"}, {"sha": "afb6525899170a22889d59ad049cef8efee857f9", "filename": "editors/code/src/persistent_state.ts", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b93ced6f633fab2733b40aef2541582b00e053fb/editors%2Fcode%2Fsrc%2Fpersistent_state.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b93ced6f633fab2733b40aef2541582b00e053fb/editors%2Fcode%2Fsrc%2Fpersistent_state.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fpersistent_state.ts?ref=b93ced6f633fab2733b40aef2541582b00e053fb", "patch": "@@ -38,4 +38,15 @@ export class PersistentState {\n     async updateServerVersion(value: string | undefined) {\n         await this.globalState.update(\"serverVersion\", value);\n     }\n+\n+    /**\n+     * Github authorization token.\n+     * This is used for API requests against the Github API.\n+     */\n+    get githubToken(): string | undefined {\n+        return this.globalState.get(\"githubToken\");\n+    }\n+    async updateGithubToken(value: string | undefined) {\n+        await this.globalState.update(\"githubToken\", value);\n+    }\n }"}]}