{"sha": "7260be49fc8cf2b8f3e09c25cc4db55df4ac5d74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNjBiZTQ5ZmM4Y2YyYjhmM2UwOWMyNWNjNGRiNTVkZjRhYzVkNzQ=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-05-18T08:43:59Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-05-18T08:43:59Z"}, "message": "Merge pull request #58 from Manishearth/mut_mut\n\nmut_mut now more robust (thanks to Manishearth, see issue #9)", "tree": {"sha": "592480cab36db22fb5e46b87478e3729426ce44e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/592480cab36db22fb5e46b87478e3729426ce44e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7260be49fc8cf2b8f3e09c25cc4db55df4ac5d74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7260be49fc8cf2b8f3e09c25cc4db55df4ac5d74", "html_url": "https://github.com/rust-lang/rust/commit/7260be49fc8cf2b8f3e09c25cc4db55df4ac5d74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7260be49fc8cf2b8f3e09c25cc4db55df4ac5d74/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "887c518d07db67fa87bffe04c42963e3108726fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/887c518d07db67fa87bffe04c42963e3108726fd", "html_url": "https://github.com/rust-lang/rust/commit/887c518d07db67fa87bffe04c42963e3108726fd"}, {"sha": "1f8453ab73ef40a33e04c95349c6d3c638e576ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f8453ab73ef40a33e04c95349c6d3c638e576ae", "html_url": "https://github.com/rust-lang/rust/commit/1f8453ab73ef40a33e04c95349c6d3c638e576ae"}], "stats": {"total": 48, "additions": 29, "deletions": 19}, "files": [{"sha": "d77a40a4ea519c4530ae633832d3279e85a3493e", "filename": "src/mut_mut.rs", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7260be49fc8cf2b8f3e09c25cc4db55df4ac5d74/src%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7260be49fc8cf2b8f3e09c25cc4db55df4ac5d74/src%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_mut.rs?ref=7260be49fc8cf2b8f3e09c25cc4db55df4ac5d74", "patch": "@@ -1,11 +1,7 @@\n use syntax::ptr::P;\n-use syntax::ast;\n use syntax::ast::*;\n-use syntax::ast_util::{is_comparison_binop, binop_to_string};\n-use syntax::visit::{FnKind};\n-use rustc::lint::{Context, LintPass, LintArray, Lint, Level};\n-use rustc::middle::ty::{self, expr_ty, ty_str, ty_ptr, ty_rptr, ty_float};\n-use syntax::codemap::{Span, Spanned};\n+use rustc::lint::{Context, LintPass, LintArray, Lint};\n+use rustc::middle::ty::{expr_ty, sty, ty_ptr, ty_rptr, mt};\n \n declare_lint!(pub MUT_MUT, Warn,\n               \"Warn on usage of double-mut refs, e.g. '&mut &mut ...'\");\n@@ -27,25 +23,34 @@ impl LintPass for MutMut {\n \t\t\t}\n \t\t}\n \t\t\n-\t\tif unwrap_addr(expr).and_then(unwrap_addr).is_some() {\n-\t\t\tcx.span_lint(MUT_MUT, expr.span, \n-\t\t\t\t\"We're not sure what this means, so if you know, please tell us.\")\n-\t\t}\n+\t\tunwrap_addr(expr).map(|e| {\n+\t\t\tif unwrap_addr(e).is_some() {\n+\t\t\t\tcx.span_lint(MUT_MUT, expr.span, \n+\t\t\t\t\t\"We're not sure what this means, so if you know, please tell us.\")\n+\t\t\t} else {\n+\t\t\t\tmatch expr_ty(cx.tcx, e).sty {\n+\t\t\t\t\tty_ptr(mt{ty: _, mutbl: MutMutable}) |\n+\t\t\t\t\tty_rptr(_, mt{ty: _, mutbl: MutMutable}) => \n+\t\t\t\t\t\tcx.span_lint(MUT_MUT, expr.span,\n+\t\t\t\t\t\t\t\"This expression mutably borrows a mutable reference. Consider direct reborrowing\"),\n+\t\t\t\t\t_ => ()\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n \t}\n \t\n \tfn check_ty(&mut self, cx: &Context, ty: &Ty) {\n-\t\t\n-\t\tfn unwrap_mut(ty : &Ty) -> Option<&Ty> {\n-\t\t\tmatch ty.node {\n-\t\t\t\tTyPtr(MutTy{ ty: ref pty, mutbl: MutMutable }) => Option::Some(pty),\n-\t\t\t\tTyRptr(_, MutTy{ ty: ref pty, mutbl: MutMutable }) => Option::Some(pty),\n-\t\t\t\t_ => Option::None\n-\t\t\t}\n-\t\t}\n-\t\t\n \t\tif unwrap_mut(ty).and_then(unwrap_mut).is_some() {\n \t\t\tcx.span_lint(MUT_MUT, ty.span, \n \t\t\t\t\"We're not sure what this means, so if you know, please tell us.\")\n \t\t}\n \t}\n }\n+\n+fn unwrap_mut(ty : &Ty) -> Option<&Ty> {\n+\tmatch ty.node {\n+\t\tTyPtr(MutTy{ ty: ref pty, mutbl: MutMutable }) => Option::Some(pty),\n+\t\tTyRptr(_, MutTy{ ty: ref pty, mutbl: MutMutable }) => Option::Some(pty),\n+\t\t_ => Option::None\n+\t}\n+}"}, {"sha": "65e3762e2c4025577c1a60b4e18aac2e6581ad3a", "filename": "tests/compile-fail/mut_mut.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7260be49fc8cf2b8f3e09c25cc4db55df4ac5d74/tests%2Fcompile-fail%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7260be49fc8cf2b8f3e09c25cc4db55df4ac5d74/tests%2Fcompile-fail%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmut_mut.rs?ref=7260be49fc8cf2b8f3e09c25cc4db55df4ac5d74", "patch": "@@ -7,8 +7,13 @@ fn fun(x : &mut &mut u32) -> bool { //~ERROR\n }\n \n #[deny(mut_mut)]\n+#[allow(unused_mut, unused_variables)]\n fn main() {\n \tlet mut x = &mut &mut 1u32; //~ERROR\n+\t{\n+\t\tlet mut y = &mut x; //~ERROR\n+\t}\n+\t\n \tif fun(x) {\n \t\tlet y : &mut &mut &mut u32 = &mut &mut &mut 2; \n \t\t\t //~^ ERROR"}]}