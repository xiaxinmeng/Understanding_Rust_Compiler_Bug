{"sha": "e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f", "node_id": "C_kwDOAAsO6NoAKGU0MTQ5MWZlMDVhNmExMWE4OWI3YzQ5NGVhMGQ5NWQzYjMyYTZiMGY", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-14T21:28:48Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-15T19:58:35Z"}, "message": "ImplTraitPlaceholder -> is_impl_trait_in_trait", "tree": {"sha": "ded5c2cec178eb644addc00f774432f14489244f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ded5c2cec178eb644addc00f774432f14489244f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmQSI2sACgkQgTGiTgx5\n76/pWQ/8DJEFAYfF0oKP79AUEIjFS5OqvjEHzI5UJ4W7YlW/cAf4w+uvFcIVGPUz\nTRGt02vRbj8JcCH6n+zZABwUzNDuru3UhOSgpQxLNYDWag2uVSMFrcPXKmurP2Gp\n3d/Sctd9uRSCmNYqP+6Iy7BB88u4+vQrhlEg0x3o9Q/KZb4/Vz6SdEqtn3lTtd+L\nWJ5HjXt/nYclfckhpbutIjpxsNau4vVkvz7u0uXiHPT9WQRWzieWbhLjrzPj3bAF\naiuPu84qgi90qSG1oE1GWtX1srFQQCVq+OPFf4Xwngqd0S+kpEFoDMO4ovbshTvg\n94WFtjx9o+tvJQxTnh2y/Z9a0qY8Bzt8Qwqi2OlQgPNiCqp5gHjx99OW6x+9BBOS\novsp8VaSihucva4ZMfSJcSVZej9lce4pSjzDSz9cVp11un/wBx/EX4ZK/BRl4bmI\na6ylWe/FRd35YJ+9QAxB9tMryqq0dHtWqDj9/rWQH2D+ou1MmhnofkZtcor2/HNr\niWu2e0a5j62YN/zkbrXOBMjcQ9a3iHixgq3V3X9ax8rN13PDtFrPymt0g8c7vKm4\nlYQGuNIEaVtCTCMWgZpAp2uQOmlJRHLyZJusbRtIHDzsXKohzeLEhRHT+ysb/cqw\nzEapD+7ah5WLOXrFXXl3I8/rQVXTurX+Iea9ZnAMb2kvLh+KMdM=\n=+eb8\n-----END PGP SIGNATURE-----", "payload": "tree ded5c2cec178eb644addc00f774432f14489244f\nparent 39d19ca9f22901a9460b5dcd9897bed969809fc4\nauthor Santiago Pastorino <spastorino@gmail.com> 1678829328 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1678910315 -0300\n\nImplTraitPlaceholder -> is_impl_trait_in_trait\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f", "html_url": "https://github.com/rust-lang/rust/commit/e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39d19ca9f22901a9460b5dcd9897bed969809fc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/39d19ca9f22901a9460b5dcd9897bed969809fc4", "html_url": "https://github.com/rust-lang/rust/commit/39d19ca9f22901a9460b5dcd9897bed969809fc4"}], "stats": {"total": 75, "additions": 41, "deletions": 34}, "files": [{"sha": "1687aff56d68c3a160f446d0a09e4ea681da72d0", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f", "patch": "@@ -1,7 +1,6 @@\n use crate::autoderef::Autoderef;\n use crate::constrained_generic_params::{identify_constrained_generic_params, Parameter};\n \n-use hir::def::DefKind;\n use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n@@ -1549,7 +1548,12 @@ fn check_return_position_impl_trait_in_trait_bounds<'tcx>(\n         for arg in fn_output.walk() {\n             if let ty::GenericArgKind::Type(ty) = arg.unpack()\n                 && let ty::Alias(ty::Opaque, proj) = ty.kind()\n-                && tcx.def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder\n+                // FIXME(-Zlower-impl-trait-in-trait-to-assoc-ty) we should just check\n+                // `tcx.def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder`. Right now\n+                // `check_associated_type_bounds` is not called for RPITITs synthesized as\n+                // associated types. See `check_mod_type_wf` to see how synthesized associated\n+                // types are missed due to iterating over HIR.\n+                && tcx.is_impl_trait_in_trait(proj.def_id)\n                 && tcx.impl_trait_in_trait_parent_fn(proj.def_id) == fn_def_id.to_def_id()\n             {\n                 let span = tcx.def_span(proj.def_id);"}, {"sha": "361e8948e851a4b066d3953261b9153d193e3e40", "filename": "compiler/rustc_hir_analysis/src/variance/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs?ref=e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f", "patch": "@@ -112,10 +112,14 @@ fn variance_of_opaque(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[ty::Varianc\n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n             match t.kind() {\n                 ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n-                    if matches!(\n-                        self.tcx.def_kind(*def_id),\n-                        DefKind::OpaqueTy | DefKind::ImplTraitPlaceholder\n-                    ) =>\n+                    if matches!(self.tcx.def_kind(*def_id), DefKind::OpaqueTy) =>\n+                {\n+                    self.visit_opaque(*def_id, substs)\n+                }\n+                // FIXME(-Zlower-impl-trait-in-trait-to-assoc-ty) check whether this is necessary\n+                // at all for RPITITs.\n+                ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n+                    if self.tcx.is_impl_trait_in_trait(*def_id) =>\n                 {\n                     self.visit_opaque(*def_id, substs)\n                 }"}, {"sha": "c47a00139bbd21bb34cf3969c7f9ff97bf4cd541", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f", "patch": "@@ -2,7 +2,6 @@\n \n use super::{check_fn, Expectation, FnCtxt, GeneratorTypes};\n \n-use hir::def::DefKind;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n@@ -713,14 +712,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .subst_iter_copied(self.tcx, substs)\n                 .find_map(|(p, s)| get_future_output(p, s))?,\n             ty::Error(_) => return None,\n-            ty::Alias(ty::Projection, proj)\n-                if self.tcx.def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder =>\n-            {\n-                self.tcx\n-                    .bound_explicit_item_bounds(proj.def_id)\n-                    .subst_iter_copied(self.tcx, proj.substs)\n-                    .find_map(|(p, s)| get_future_output(p, s))?\n-            }\n+            ty::Alias(ty::Projection, proj) if self.tcx.is_impl_trait_in_trait(proj.def_id) => self\n+                .tcx\n+                .bound_explicit_item_bounds(proj.def_id)\n+                .subst_iter_copied(self.tcx, proj.substs)\n+                .find_map(|(p, s)| get_future_output(p, s))?,\n             _ => span_bug!(\n                 self.tcx.def_span(expr_def_id),\n                 \"async fn generator return type not an inference variable: {ret_ty}\""}, {"sha": "c89a45dbb00fbcffff8275c07c9c60765778c9de", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f", "patch": "@@ -359,10 +359,12 @@ impl<'tcx> InferCtxt<'tcx> {\n     pub fn get_impl_future_output_ty(&self, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n         let (def_id, substs) = match *ty.kind() {\n             ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n-                if matches!(\n-                    self.tcx.def_kind(def_id),\n-                    DefKind::OpaqueTy | DefKind::ImplTraitPlaceholder\n-                ) =>\n+                if matches!(self.tcx.def_kind(def_id), DefKind::OpaqueTy) =>\n+            {\n+                (def_id, substs)\n+            }\n+            ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n+                if self.tcx.is_impl_trait_in_trait(def_id) =>\n             {\n                 (def_id, substs)\n             }\n@@ -1754,8 +1756,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                                 )\n                             }\n                             (true, ty::Alias(ty::Projection, proj))\n-                                if self.tcx.def_kind(proj.def_id)\n-                                    == DefKind::ImplTraitPlaceholder =>\n+                                if self.tcx.is_impl_trait_in_trait(proj.def_id) =>\n                             {\n                                 let sm = self.tcx.sess.source_map();\n                                 let pos = sm.lookup_char_pos(self.tcx.def_span(proj.def_id).lo());"}, {"sha": "b38bbdfe7bb8b9ec4ad55835715a7b82347efa95", "filename": "compiler/rustc_infer/src/infer/error_reporting/note_and_explain.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs?ref=e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f", "patch": "@@ -1,7 +1,7 @@\n use super::TypeErrCtxt;\n use rustc_errors::Applicability::{MachineApplicable, MaybeIncorrect};\n use rustc_errors::{pluralize, Diagnostic, MultiSpan};\n-use rustc_hir::{self as hir, def::DefKind};\n+use rustc_hir as hir;\n use rustc_middle::traits::ObligationCauseCode;\n use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::print::Printer;\n@@ -75,7 +75,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                         diag.note(\"an associated type was expected, but a different one was found\");\n                     }\n                     (ty::Param(p), ty::Alias(ty::Projection, proj)) | (ty::Alias(ty::Projection, proj), ty::Param(p))\n-                        if tcx.def_kind(proj.def_id) != DefKind::ImplTraitPlaceholder =>\n+                        if !tcx.is_impl_trait_in_trait(proj.def_id) =>\n                     {\n                         let p_def_id = tcx\n                             .generics_of(body_owner_def_id)\n@@ -222,7 +222,7 @@ impl<T> Trait<T> for X {\n                             diag.span_label(p_span, \"this type parameter\");\n                         }\n                     }\n-                    (ty::Alias(ty::Projection, proj_ty), _) if tcx.def_kind(proj_ty.def_id) != DefKind::ImplTraitPlaceholder => {\n+                    (ty::Alias(ty::Projection, proj_ty), _) if !tcx.is_impl_trait_in_trait(proj_ty.def_id) => {\n                         self.expected_projection(\n                             diag,\n                             proj_ty,\n@@ -231,7 +231,7 @@ impl<T> Trait<T> for X {\n                             cause.code(),\n                         );\n                     }\n-                    (_, ty::Alias(ty::Projection, proj_ty)) if tcx.def_kind(proj_ty.def_id) != DefKind::ImplTraitPlaceholder => {\n+                    (_, ty::Alias(ty::Projection, proj_ty)) if !tcx.is_impl_trait_in_trait(proj_ty.def_id) => {\n                         let msg = format!(\n                             \"consider constraining the associated type `{}` to `{}`\",\n                             values.found, values.expected,"}, {"sha": "cf7b364c678540918ffbbd3c42e64c4c74845c6e", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f", "patch": "@@ -1,7 +1,6 @@\n use crate::errors::OpaqueHiddenTypeDiag;\n use crate::infer::{DefiningAnchor, InferCtxt, InferOk};\n use crate::traits;\n-use hir::def::DefKind;\n use hir::def_id::{DefId, LocalDefId};\n use hir::OpaqueTyOrigin;\n use rustc_data_structures::sync::Lrc;\n@@ -481,9 +480,7 @@ where\n                 }\n             }\n \n-            ty::Alias(ty::Projection, proj)\n-                if self.tcx.def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder =>\n-            {\n+            ty::Alias(ty::Projection, proj) if self.tcx.is_impl_trait_in_trait(proj.def_id) => {\n                 // Skip lifetime parameters that are not captures.\n                 let variances = self.tcx.variances_of(proj.def_id);\n \n@@ -563,8 +560,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                     // FIXME(RPITIT): Don't replace RPITITs with inference vars.\n                     ty::Alias(ty::Projection, projection_ty)\n                         if !projection_ty.has_escaping_bound_vars()\n-                            && tcx.def_kind(projection_ty.def_id)\n-                                != DefKind::ImplTraitPlaceholder =>\n+                            && !tcx.is_impl_trait_in_trait(projection_ty.def_id) =>\n                     {\n                         self.infer_projection(\n                             param_env,"}, {"sha": "6ef8384d0107a5c75875f1ee0b1b269040e24117", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f", "patch": "@@ -2578,6 +2578,10 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         let Some(trait_item_def_id) = item.trait_item_def_id else { return false; };\n \n+        if self.lower_impl_trait_in_trait_to_assoc_ty() {\n+            return !self.associated_items_for_impl_trait_in_trait(trait_item_def_id).is_empty();\n+        }\n+\n         // FIXME(RPITIT): This does a somewhat manual walk through the signature\n         // of the trait fn to look for any RPITITs, but that's kinda doing a lot\n         // of work. We can probably remove this when we refactor RPITITs to be"}, {"sha": "fffdbfc9660bb1651794167f8c19b0319c42fb60", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f", "patch": "@@ -728,7 +728,7 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             ty::Alias(ty::Projection, ref data) => {\n                 if !(self.should_print_verbose() || NO_QUERIES.with(|q| q.get()))\n-                    && self.tcx().def_kind(data.def_id) == DefKind::ImplTraitPlaceholder\n+                    && self.tcx().is_impl_trait_in_trait(data.def_id)\n                 {\n                     return self.pretty_print_opaque_impl_type(data.def_id, data.substs);\n                 } else {"}, {"sha": "ad05b68f1b4799faa06a7f83b0efaf5b15b007cc", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f", "patch": "@@ -268,7 +268,9 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ImplTraitInTraitFinder<'_, 'tcx> {\n \n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> std::ops::ControlFlow<Self::BreakTy> {\n         if let ty::Alias(ty::Projection, alias_ty) = *ty.kind()\n-            && self.tcx.def_kind(alias_ty.def_id) == DefKind::ImplTraitPlaceholder\n+            // FIXME(-Zlower-impl-trait-in-trait-to-assoc-ty) need to project to the opaque, could\n+            // get it via type_of + subst.\n+            && self.tcx.is_impl_trait_in_trait(alias_ty.def_id)\n             && self.tcx.impl_trait_in_trait_parent_fn(alias_ty.def_id) == self.fn_def_id\n             && self.seen.insert(alias_ty.def_id)\n         {"}, {"sha": "989e091a0d2d8235cb699e313112693cad20169d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e41491fe05a6a11a89b7c494ea0d95d3b32a6b0f", "patch": "@@ -426,7 +426,7 @@ fn clean_projection<'tcx>(\n     cx: &mut DocContext<'tcx>,\n     def_id: Option<DefId>,\n ) -> Type {\n-    if cx.tcx.def_kind(ty.skip_binder().def_id) == DefKind::ImplTraitPlaceholder {\n+    if cx.tcx.is_impl_trait_in_trait(ty.skip_binder().def_id) {\n         let bounds = cx\n             .tcx\n             .explicit_item_bounds(ty.skip_binder().def_id)"}]}