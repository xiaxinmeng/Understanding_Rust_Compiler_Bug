{"sha": "296489c89268e56abb8f6050842d006b16ed4f09", "node_id": "C_kwDOAAsO6NoAKDI5NjQ4OWM4OTI2OGU1NmFiYjhmNjA1MDg0MmQwMDZiMTZlZDRmMDk", "commit": {"author": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2022-10-20T21:45:09Z"}, "committer": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2022-11-03T15:17:42Z"}, "message": "Fix Access Violation when using lld & ThinLTO on windows-msvc\n\nUsers report an AV at runtime of the compiled binary when using lld and\nThinLTO on windows-msvc. The AV occurs when accessing a static value\nwhich is defined in one crate but used in another. Based on the\ndisassembly of the cross-crate use, it appears that the use is not\ncorrectly linked with the definition and is instead assigned a garbage\npointer value.\n\nIf we look at the symbol tables for each crates' obj file, we can see\nwhat is happening:\n\n*lib.obj*:\n\n```\nCOFF SYMBOL TABLE\n...\n00E 00000000 SECT2  notype       External     | _ZN10reproducer7memrchr2FN17h612b61ca0e168901E\n...\n```\n\n*bin.obj*:\n\n```\nCOFF SYMBOL TABLE\n...\n010 00000000 UNDEF  notype       External     | __imp__ZN10reproducer7memrchr2FN17h612b61ca0e168901E\n...\n```\n\nThe use of the symbol has the \"import\" style symbol name but the\ndeclaration doesn't generate any symbol with the same name. As a result,\nlinking the files generates a warning from lld:\n\n> rust-lld: warning: bin.obj: locally defined symbol imported: reproducer::memrchr::FN::h612b61ca0e168901 (defined in lib.obj) [LNK4217]\n\nand the symbol reference remains undefined at runtime leading to the AV.\n\nTo fix this, we just need to detect that we are performing ThinLTO (and\nthus, static linking) and omit the `dllimport` attribute on the extern\nitem in LLVM IR.", "tree": {"sha": "58e86628f3e54b2df0b0f122686d7ceb69f978c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58e86628f3e54b2df0b0f122686d7ceb69f978c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/296489c89268e56abb8f6050842d006b16ed4f09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/296489c89268e56abb8f6050842d006b16ed4f09", "html_url": "https://github.com/rust-lang/rust/commit/296489c89268e56abb8f6050842d006b16ed4f09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/296489c89268e56abb8f6050842d006b16ed4f09/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf6efe8137d88237b7e280a22eaea2f2193da47d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf6efe8137d88237b7e280a22eaea2f2193da47d", "html_url": "https://github.com/rust-lang/rust/commit/cf6efe8137d88237b7e280a22eaea2f2193da47d"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "bf5ac4e503e3f65c4e691ad6d0a1b6b782aef95d", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/296489c89268e56abb8f6050842d006b16ed4f09/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296489c89268e56abb8f6050842d006b16ed4f09/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=296489c89268e56abb8f6050842d006b16ed4f09", "patch": "@@ -19,6 +19,7 @@ use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::{self, Instance, Ty};\n use rustc_middle::{bug, span_bug};\n+use rustc_session::config::Lto;\n use rustc_target::abi::{\n     AddressSpace, Align, HasDataLayout, Primitive, Scalar, Size, WrappingRange,\n };\n@@ -303,7 +304,8 @@ impl<'ll> CodegenCx<'ll, '_> {\n                 // ThinLTO can't handle this workaround in all cases, so we don't\n                 // emit the attrs. Instead we make them unnecessary by disallowing\n                 // dynamic linking when linker plugin based LTO is enabled.\n-                !self.tcx.sess.opts.cg.linker_plugin_lto.enabled();\n+                !self.tcx.sess.opts.cg.linker_plugin_lto.enabled() &&\n+                self.tcx.sess.lto() != Lto::Thin;\n \n             // If this assertion triggers, there's something wrong with commandline\n             // argument validation."}, {"sha": "0b6ab4f7ecb3bb9342d255df88aa7344531c59d1", "filename": "src/test/codegen/issue-81408-dllimport-thinlto-windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/296489c89268e56abb8f6050842d006b16ed4f09/src%2Ftest%2Fcodegen%2Fissue-81408-dllimport-thinlto-windows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296489c89268e56abb8f6050842d006b16ed4f09/src%2Ftest%2Fcodegen%2Fissue-81408-dllimport-thinlto-windows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-81408-dllimport-thinlto-windows.rs?ref=296489c89268e56abb8f6050842d006b16ed4f09", "patch": "@@ -8,7 +8,7 @@\n extern crate static_dllimport_aux;\n \n // CHECK-LABEL: @{{.+}}CROSS_CRATE_STATIC_ITEM{{.+}} =\n-// CHECK-SAME: external dllimport local_unnamed_addr global %\"{{.+}}::AtomicPtr\n+// CHECK-SAME: external local_unnamed_addr global %\"{{.+}}AtomicPtr\n \n pub fn main() {\n     static_dllimport_aux::memrchr();"}]}