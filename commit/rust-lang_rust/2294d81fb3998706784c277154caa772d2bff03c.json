{"sha": "2294d81fb3998706784c277154caa772d2bff03c", "node_id": "C_kwDOAAsO6NoAKDIyOTRkODFmYjM5OTg3MDY3ODRjMjc3MTU0Y2FhNzcyZDJiZmYwM2M", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-20T06:50:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-20T06:50:58Z"}, "message": "Rollup merge of #111491 - compiler-errors:nested-fut-must-use, r=wesleywiser\n\nDont check `must_use` on nested `impl Future` from fn\n\nFixes (but does not close, per beta policy) #111484\n\nAlso fixes a `FIXME` left in the code about (presumably) false-positives on non-async `#[must_use] fn() -> impl Future` cases, though if that's not desirable to include in the beta backport then I can certainly revert it.\n\nBeta nominating as it fixes a beta ICE.", "tree": {"sha": "122b9ce658e7e7ad2392a0cdc727ff5e696bb452", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/122b9ce658e7e7ad2392a0cdc727ff5e696bb452"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2294d81fb3998706784c277154caa772d2bff03c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkaG3SCRBK7hj4Ov3rIwAA2/sIAIrVd+3barN/B9wFNvkKs6SN\n849qujN0rMg9XNqnELrpus0fQ7hNYz2Kptjl+GCYbfUyqO3XKoDhClPGSc8Lv/vy\nVo1BQW76z6UxgUUzqzJB749uB/R4+BflqG9X0bC/j9aLGSa3yVyUO2Ld0PR+l0pF\n7gl1wySG6wEXFiDfCYh/EUXGIxJcsPUkZ/tnOuI4BOCgttTMoufHiYAK60lKSzOB\npPGMBSCM7f7CE/5BhEd/MzClvQLEl/Fe9S2TBQOtm1R6aAwCfoe3Nbuehx85FqH2\nSH0H5FlAGmyHD3QeMPBgIQYVHXUrU936dUQi0ypuMkuc0+Ls+P6VzNme6+iF11k=\n=rVUw\n-----END PGP SIGNATURE-----\n", "payload": "tree 122b9ce658e7e7ad2392a0cdc727ff5e696bb452\nparent 7047d97e012d5ed90cf2837c361150bc149837b4\nparent 926e874fd1dccc208bf63db7a4288adf46caa3c3\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1684565458 +0530\ncommitter GitHub <noreply@github.com> 1684565458 +0530\n\nRollup merge of #111491 - compiler-errors:nested-fut-must-use, r=wesleywiser\n\nDont check `must_use` on nested `impl Future` from fn\n\nFixes (but does not close, per beta policy) #111484\n\nAlso fixes a `FIXME` left in the code about (presumably) false-positives on non-async `#[must_use] fn() -> impl Future` cases, though if that's not desirable to include in the beta backport then I can certainly revert it.\n\nBeta nominating as it fixes a beta ICE.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2294d81fb3998706784c277154caa772d2bff03c", "html_url": "https://github.com/rust-lang/rust/commit/2294d81fb3998706784c277154caa772d2bff03c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2294d81fb3998706784c277154caa772d2bff03c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7047d97e012d5ed90cf2837c361150bc149837b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7047d97e012d5ed90cf2837c361150bc149837b4", "html_url": "https://github.com/rust-lang/rust/commit/7047d97e012d5ed90cf2837c361150bc149837b4"}, {"sha": "926e874fd1dccc208bf63db7a4288adf46caa3c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/926e874fd1dccc208bf63db7a4288adf46caa3c3", "html_url": "https://github.com/rust-lang/rust/commit/926e874fd1dccc208bf63db7a4288adf46caa3c3"}], "stats": {"total": 46, "additions": 32, "deletions": 14}, "files": [{"sha": "0fe140e08d26ac945be5271370cbb45a27c4d6fa", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2294d81fb3998706784c277154caa772d2bff03c/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2294d81fb3998706784c277154caa772d2bff03c/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=2294d81fb3998706784c277154caa772d2bff03c", "patch": "@@ -103,8 +103,10 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n             && let ty = cx.typeck_results().expr_ty(&await_expr)\n             && let ty::Alias(ty::Opaque, ty::AliasTy { def_id: future_def_id, .. }) = ty.kind()\n             && cx.tcx.ty_is_opaque_future(ty)\n-            // FIXME: This also includes non-async fns that return `impl Future`.\n             && let async_fn_def_id = cx.tcx.parent(*future_def_id)\n+            && matches!(cx.tcx.def_kind(async_fn_def_id), DefKind::Fn | DefKind::AssocFn)\n+            // Check that this `impl Future` actually comes from an `async fn`\n+            && cx.tcx.asyncness(async_fn_def_id).is_async()\n             && check_must_use_def(\n                 cx,\n                 async_fn_def_id,"}, {"sha": "f773f09c3821b2a86a68912224e854d0ad7205a0", "filename": "tests/ui/lint/unused/auxiliary/must-use-foreign.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2294d81fb3998706784c277154caa772d2bff03c/tests%2Fui%2Flint%2Funused%2Fauxiliary%2Fmust-use-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2294d81fb3998706784c277154caa772d2bff03c/tests%2Fui%2Flint%2Funused%2Fauxiliary%2Fmust-use-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Fauxiliary%2Fmust-use-foreign.rs?ref=2294d81fb3998706784c277154caa772d2bff03c", "patch": "@@ -0,0 +1,12 @@\n+// edition:2021\n+\n+use std::future::Future;\n+\n+pub struct Manager;\n+\n+impl Manager {\n+    #[must_use]\n+    pub async fn new() -> (Self, impl Future<Output = ()>) {\n+        (Manager, async {})\n+    }\n+}"}, {"sha": "21a1105856218156707733278af32023d689a17a", "filename": "tests/ui/lint/unused/must-use-foreign.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2294d81fb3998706784c277154caa772d2bff03c/tests%2Fui%2Flint%2Funused%2Fmust-use-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2294d81fb3998706784c277154caa772d2bff03c/tests%2Fui%2Flint%2Funused%2Fmust-use-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Fmust-use-foreign.rs?ref=2294d81fb3998706784c277154caa772d2bff03c", "patch": "@@ -0,0 +1,15 @@\n+// edition:2021\n+// aux-build:must-use-foreign.rs\n+// check-pass\n+\n+extern crate must_use_foreign;\n+\n+use must_use_foreign::Manager;\n+\n+async fn async_main() {\n+    Manager::new().await.1.await;\n+}\n+\n+fn main() {\n+    let _ = async_main();\n+}"}, {"sha": "6355f47f037c75a5ca618b1fb429e8f9feedff87", "filename": "tests/ui/lint/unused/unused-async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2294d81fb3998706784c277154caa772d2bff03c/tests%2Fui%2Flint%2Funused%2Funused-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2294d81fb3998706784c277154caa772d2bff03c/tests%2Fui%2Flint%2Funused%2Funused-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Funused-async.rs?ref=2294d81fb3998706784c277154caa772d2bff03c", "patch": "@@ -33,7 +33,7 @@ async fn test() {\n     foo().await; //~ ERROR unused output of future returned by `foo` that must be used\n     bar(); //~ ERROR unused return value of `bar` that must be used\n     //~^ ERROR unused implementer of `Future` that must be used\n-    bar().await; //~ ERROR unused output of future returned by `bar` that must be used\n+    bar().await; // ok, it's not an async fn\n     baz(); //~ ERROR unused implementer of `Future` that must be used\n     baz().await; // ok\n }"}, {"sha": "e93a40658f3c2f634754cdc4cbfcfe2c65fd49b3", "filename": "tests/ui/lint/unused/unused-async.stderr", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2294d81fb3998706784c277154caa772d2bff03c/tests%2Fui%2Flint%2Funused%2Funused-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2294d81fb3998706784c277154caa772d2bff03c/tests%2Fui%2Flint%2Funused%2Funused-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Funused-async.stderr?ref=2294d81fb3998706784c277154caa772d2bff03c", "patch": "@@ -52,17 +52,6 @@ help: use `let _ = ...` to ignore the resulting value\n LL |     let _ = bar();\n    |     +++++++\n \n-error: unused output of future returned by `bar` that must be used\n-  --> $DIR/unused-async.rs:36:5\n-   |\n-LL |     bar().await;\n-   |     ^^^^^^^^^^^\n-   |\n-help: use `let _ = ...` to ignore the resulting value\n-   |\n-LL |     let _ = bar().await;\n-   |     +++++++\n-\n error: unused implementer of `Future` that must be used\n   --> $DIR/unused-async.rs:37:5\n    |\n@@ -71,5 +60,5 @@ LL |     baz();\n    |\n    = note: futures do nothing unless you `.await` or poll them\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 6 previous errors\n "}]}