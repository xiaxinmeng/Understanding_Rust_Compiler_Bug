{"sha": "81df89fc2d6ba1b55ab20b0615b8523a6e90963f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZGY4OWZjMmQ2YmExYjU1YWIyMGIwNjE1Yjg1MjNhNmU5MDk2M2Y=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-08-01T18:43:57Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2016-08-03T12:08:47Z"}, "message": "remove the ExecutionEngine binding\n\nthe code has no tests and will just bitrot by itself.\n\nthis is a [breaking-change]", "tree": {"sha": "c12eab1248b730c5b14135121aff146348fb127a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c12eab1248b730c5b14135121aff146348fb127a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81df89fc2d6ba1b55ab20b0615b8523a6e90963f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81df89fc2d6ba1b55ab20b0615b8523a6e90963f", "html_url": "https://github.com/rust-lang/rust/commit/81df89fc2d6ba1b55ab20b0615b8523a6e90963f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81df89fc2d6ba1b55ab20b0615b8523a6e90963f/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "32e462ef99e2f61b75e2b0ef37048d50ad8ccf6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/32e462ef99e2f61b75e2b0ef37048d50ad8ccf6c", "html_url": "https://github.com/rust-lang/rust/commit/32e462ef99e2f61b75e2b0ef37048d50ad8ccf6c"}], "stats": {"total": 125, "additions": 2, "deletions": 123}, "files": [{"sha": "b50dbd01ad0cc0071bcf20cf8b5ba366ca724dc2", "filename": "mk/rustllvm.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81df89fc2d6ba1b55ab20b0615b8523a6e90963f/mk%2Frustllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/81df89fc2d6ba1b55ab20b0615b8523a6e90963f/mk%2Frustllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frustllvm.mk?ref=81df89fc2d6ba1b55ab20b0615b8523a6e90963f", "patch": "@@ -24,7 +24,7 @@ LLVM_EXTRA_INCDIRS_$(1)= $$(call CFG_CC_INCLUDE_$(1),$(S)src/llvm/include) \\\n endif\n \n RUSTLLVM_OBJS_CS_$(1) := $$(addprefix rustllvm/, \\\n-\tExecutionEngineWrapper.cpp RustWrapper.cpp PassWrapper.cpp \\\n+\tRustWrapper.cpp PassWrapper.cpp \\\n \tArchiveWrapper.cpp)\n \n RUSTLLVM_INCS_$(1) = $$(LLVM_EXTRA_INCDIRS_$(1)) \\"}, {"sha": "b8548aaec5bd74d023d99016d3042f1c220913aa", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81df89fc2d6ba1b55ab20b0615b8523a6e90963f/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81df89fc2d6ba1b55ab20b0615b8523a6e90963f/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=81df89fc2d6ba1b55ab20b0615b8523a6e90963f", "patch": "@@ -112,8 +112,7 @@ fn main() {\n         cfg.flag(&flag);\n     }\n \n-    cfg.file(\"../rustllvm/ExecutionEngineWrapper.cpp\")\n-       .file(\"../rustllvm/PassWrapper.cpp\")\n+    cfg.file(\"../rustllvm/PassWrapper.cpp\")\n        .file(\"../rustllvm/RustWrapper.cpp\")\n        .file(\"../rustllvm/ArchiveWrapper.cpp\")\n        .cpp(true)"}, {"sha": "de82778bc5e32ac18bf2016d09c6b6f110207f63", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/81df89fc2d6ba1b55ab20b0615b8523a6e90963f/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81df89fc2d6ba1b55ab20b0615b8523a6e90963f/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=81df89fc2d6ba1b55ab20b0615b8523a6e90963f", "patch": "@@ -1099,15 +1099,6 @@ extern {\n                                          Name: *const c_char);\n     pub fn LLVMDisposeBuilder(Builder: BuilderRef);\n \n-    /* Execution engine */\n-    pub fn LLVMBuildExecutionEngine(Mod: ModuleRef) -> ExecutionEngineRef;\n-    pub fn LLVMDisposeExecutionEngine(EE: ExecutionEngineRef);\n-    pub fn LLVMExecutionEngineFinalizeObject(EE: ExecutionEngineRef);\n-    pub fn LLVMRustLoadDynamicLibrary(path: *const c_char) -> Bool;\n-    pub fn LLVMExecutionEngineAddModule(EE: ExecutionEngineRef, M: ModuleRef);\n-    pub fn LLVMExecutionEngineRemoveModule(EE: ExecutionEngineRef, M: ModuleRef)\n-                                           -> Bool;\n-\n     /* Metadata */\n     pub fn LLVMSetCurrentDebugLocation(Builder: BuilderRef, L: ValueRef);\n     pub fn LLVMGetCurrentDebugLocation(Builder: BuilderRef) -> ValueRef;"}, {"sha": "b26ab44601998d9dd89d81d92eae1ac0b7d70760", "filename": "src/rustllvm/ExecutionEngineWrapper.cpp", "status": "removed", "additions": 0, "deletions": 111, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/32e462ef99e2f61b75e2b0ef37048d50ad8ccf6c/src%2Frustllvm%2FExecutionEngineWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/32e462ef99e2f61b75e2b0ef37048d50ad8ccf6c/src%2Frustllvm%2FExecutionEngineWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FExecutionEngineWrapper.cpp?ref=32e462ef99e2f61b75e2b0ef37048d50ad8ccf6c", "patch": "@@ -1,111 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#include \"rustllvm.h\"\n-\n-#include \"llvm/ExecutionEngine/SectionMemoryManager.h\"\n-\n-using namespace llvm;\n-using namespace llvm::sys;\n-using namespace llvm::object;\n-\n-class RustJITMemoryManager : public SectionMemoryManager\n-{\n-    typedef SectionMemoryManager Base;\n-\n-    public:\n-\n-    RustJITMemoryManager() {}\n-\n-    uint64_t getSymbolAddress(const std::string &Name) override\n-    {\n-        return Base::getSymbolAddress(Name);\n-    }\n-};\n-\n-DEFINE_SIMPLE_CONVERSION_FUNCTIONS(RustJITMemoryManager, LLVMRustJITMemoryManagerRef)\n-\n-extern \"C\" LLVMBool LLVMRustLoadDynamicLibrary(const char *path)\n-{\n-    std::string err;\n-    DynamicLibrary lib = DynamicLibrary::getPermanentLibrary(path, &err);\n-\n-    if (!lib.isValid())\n-        LLVMRustSetLastError(err.c_str());\n-\n-    return lib.isValid();\n-}\n-\n-// Calls LLVMAddModule;\n-// exists for consistency with LLVMExecutionEngineRemoveModule\n-extern \"C\" void LLVMExecutionEngineAddModule(\n-    LLVMExecutionEngineRef eeref, LLVMModuleRef mref)\n-{\n-#ifdef _WIN32\n-    // On Windows, MCJIT must generate ELF objects\n-    std::string target = getProcessTriple();\n-    target += \"-elf\";\n-    target = Triple::normalize(target);\n-    unwrap(mref)->setTargetTriple(target);\n-#endif\n-    LLVMAddModule(eeref, mref);\n-}\n-\n-// LLVMRemoveModule exists in LLVM's C bindings,\n-// but it requires pointless parameters\n-extern \"C\" LLVMBool LLVMExecutionEngineRemoveModule(\n-    LLVMExecutionEngineRef eeref, LLVMModuleRef mref)\n-{\n-    ExecutionEngine *ee = unwrap(eeref);\n-    Module *m = unwrap(mref);\n-\n-    return ee->removeModule(m);\n-}\n-\n-extern \"C\" LLVMExecutionEngineRef LLVMBuildExecutionEngine(LLVMModuleRef mod)\n-{\n-    // These are necessary for code generation to work properly.\n-    InitializeNativeTarget();\n-    InitializeNativeTargetAsmPrinter();\n-    InitializeNativeTargetAsmParser();\n-\n-#ifdef _WIN32\n-    // On Windows, MCJIT must generate ELF objects\n-    std::string target = getProcessTriple();\n-    target += \"-elf\";\n-    target = Triple::normalize(target);\n-    unwrap(mod)->setTargetTriple(target);\n-#endif\n-\n-    std::string error_str;\n-    TargetOptions options;\n-\n-    RustJITMemoryManager *mm = new RustJITMemoryManager;\n-\n-    ExecutionEngine *ee =\n-        EngineBuilder(std::unique_ptr<Module>(unwrap(mod)))\n-            .setMCJITMemoryManager(std::unique_ptr<RustJITMemoryManager>(mm))\n-            .setEngineKind(EngineKind::JIT)\n-            .setErrorStr(&error_str)\n-            .setTargetOptions(options)\n-            .create();\n-\n-    if (!ee)\n-        LLVMRustSetLastError(error_str.c_str());\n-\n-    return wrap(ee);\n-}\n-\n-extern \"C\" void LLVMExecutionEngineFinalizeObject(LLVMExecutionEngineRef eeref)\n-{\n-    ExecutionEngine *ee = unwrap(eeref);\n-\n-    ee->finalizeObject();\n-}"}]}