{"sha": "0bcb05cf50624fc54162823f998df40658e158b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiY2IwNWNmNTA2MjRmYzU0MTYyODIzZjk5OGRmNDA2NThlMTU4YjE=", "commit": {"author": {"name": "Stefan Schindler", "email": "dns2utf8@estada.ch", "date": "2016-11-27T14:34:32Z"}, "committer": {"name": "Stefan Schindler", "email": "dns2utf8@estada.ch", "date": "2016-11-27T14:34:32Z"}, "message": "Finishing d2f8fb0a0a9dd from @jseyfried", "tree": {"sha": "5f6201d38b56528016ba574b927d88b38807ee79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f6201d38b56528016ba574b927d88b38807ee79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bcb05cf50624fc54162823f998df40658e158b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bcb05cf50624fc54162823f998df40658e158b1", "html_url": "https://github.com/rust-lang/rust/commit/0bcb05cf50624fc54162823f998df40658e158b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bcb05cf50624fc54162823f998df40658e158b1/comments", "author": {"login": "dns2utf8", "id": 739070, "node_id": "MDQ6VXNlcjczOTA3MA==", "avatar_url": "https://avatars.githubusercontent.com/u/739070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dns2utf8", "html_url": "https://github.com/dns2utf8", "followers_url": "https://api.github.com/users/dns2utf8/followers", "following_url": "https://api.github.com/users/dns2utf8/following{/other_user}", "gists_url": "https://api.github.com/users/dns2utf8/gists{/gist_id}", "starred_url": "https://api.github.com/users/dns2utf8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dns2utf8/subscriptions", "organizations_url": "https://api.github.com/users/dns2utf8/orgs", "repos_url": "https://api.github.com/users/dns2utf8/repos", "events_url": "https://api.github.com/users/dns2utf8/events{/privacy}", "received_events_url": "https://api.github.com/users/dns2utf8/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dns2utf8", "id": 739070, "node_id": "MDQ6VXNlcjczOTA3MA==", "avatar_url": "https://avatars.githubusercontent.com/u/739070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dns2utf8", "html_url": "https://github.com/dns2utf8", "followers_url": "https://api.github.com/users/dns2utf8/followers", "following_url": "https://api.github.com/users/dns2utf8/following{/other_user}", "gists_url": "https://api.github.com/users/dns2utf8/gists{/gist_id}", "starred_url": "https://api.github.com/users/dns2utf8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dns2utf8/subscriptions", "organizations_url": "https://api.github.com/users/dns2utf8/orgs", "repos_url": "https://api.github.com/users/dns2utf8/repos", "events_url": "https://api.github.com/users/dns2utf8/events{/privacy}", "received_events_url": "https://api.github.com/users/dns2utf8/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8614c397313db00e4b4626d1ba77ae00dbf7549", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8614c397313db00e4b4626d1ba77ae00dbf7549", "html_url": "https://github.com/rust-lang/rust/commit/f8614c397313db00e4b4626d1ba77ae00dbf7549"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "482f3f7d839b9db8defa6d2464822898a4e5a4e0", "filename": "src/grammar/verify.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0bcb05cf50624fc54162823f998df40658e158b1/src%2Fgrammar%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bcb05cf50624fc54162823f998df40658e158b1/src%2Fgrammar%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fverify.rs?ref=0bcb05cf50624fc54162823f998df40658e158b1", "patch": "@@ -37,6 +37,8 @@ use syntax::parse::token::{self, BinOpToken, DelimToken, Lit, Token};\n use syntax::parse::lexer::TokenAndSpan;\n use syntax_pos::Pos;\n \n+use syntax::symbol::Symbol;\n+\n fn parse_token_list(file: &str) -> HashMap<String, token::Token> {\n     fn id() -> token::Token {\n         Token::Ident(ast::Ident::with_empty_ctxt(Name(0)))\n@@ -158,7 +160,7 @@ fn fix(mut lit: &str) -> ast::Name {\n     let leading_hashes = count(lit);\n \n     // +1/-1 to adjust for single quotes\n-    parse::token::intern(&lit[leading_hashes + 1..lit.len() - leading_hashes - 1])\n+    Symbol::intern(&lit[leading_hashes + 1..lit.len() - leading_hashes - 1])\n }\n \n /// Assuming a char/byte literal, strip the 'b' prefix and the single quotes.\n@@ -168,7 +170,7 @@ fn fixchar(mut lit: &str) -> ast::Name {\n         lit = &lit[1..];\n     }\n \n-    parse::token::intern(&lit[1..lit.len() - 1])\n+    Symbol::intern(&lit[1..lit.len() - 1])\n }\n \n fn count(lit: &str) -> usize {\n@@ -196,7 +198,7 @@ fn parse_antlr_token(s: &str, tokens: &HashMap<String, token::Token>, surrogate_\n     let not_found = format!(\"didn't find token {:?} in the map\", toknum);\n     let proto_tok = tokens.get(toknum).expect(&not_found[..]);\n \n-    let nm = parse::token::intern(content);\n+    let nm = Symbol::intern(content);\n \n     debug!(\"What we got: content (`{}`), proto: {:?}\", content, proto_tok);\n "}]}