{"sha": "08a58901e8deee22a541ed14f7e6b02e3c57132e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4YTU4OTAxZThkZWVlMjJhNTQxZWQxNGY3ZTZiMDJlM2M1NzEzMmU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-12T11:47:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-12T11:47:56Z"}, "message": "Merge #4858\n\n4858: find_path: return shorter paths for external items r=flodiebold a=jonas-schievink\n\nIf a containing module is already in scope, there's no need to use the full path to the item.\r\n\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/4846\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "21b1df550c05bae5b9d9ff23107e69727605c552", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21b1df550c05bae5b9d9ff23107e69727605c552"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08a58901e8deee22a541ed14f7e6b02e3c57132e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe42tsCRBK7hj4Ov3rIwAAdHIIAB3P4yozt/3tHxOo4DnAKgnU\nqVPI1arBd7dlcFlQCylesxKphQvHBGmMYOcAyjzoSjZ5qn8TtfzlqXN2gX3u7g5O\njkHgV5I0hAhEjGAs4/I09SQgEjhm+kPXEkq8o0cB8FgPfgsbRAvmibGDHUS2SlDt\nQdtWBlszdeqZ+a6UL6W8Il0uYM70MOXGNm+PDcBWYzf5rLe8Y1Ap+8BE43zmU2tG\nsBIA/ln0LtBynvjAn+4YaMG0nyL5wxlworJuZgrDWDXKrfNPIW8jNN5itBdwEUsj\nZhVUR/HVtqcfldd2byPQYDNQH4yD6CMuCL1ChyC4rG8yoUdobrpqEj9b0Ol+IYU=\n=AWdv\n-----END PGP SIGNATURE-----\n", "payload": "tree 21b1df550c05bae5b9d9ff23107e69727605c552\nparent 36353bb1827dbd2efcde2d18c8598c4cc5e2e296\nparent 0231e4ac77dacf6ca30f6b68c6081415f2da54ba\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1591962476 +0000\ncommitter GitHub <noreply@github.com> 1591962476 +0000\n\nMerge #4858\n\n4858: find_path: return shorter paths for external items r=flodiebold a=jonas-schievink\n\nIf a containing module is already in scope, there's no need to use the full path to the item.\r\n\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/4846\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08a58901e8deee22a541ed14f7e6b02e3c57132e", "html_url": "https://github.com/rust-lang/rust/commit/08a58901e8deee22a541ed14f7e6b02e3c57132e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08a58901e8deee22a541ed14f7e6b02e3c57132e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36353bb1827dbd2efcde2d18c8598c4cc5e2e296", "url": "https://api.github.com/repos/rust-lang/rust/commits/36353bb1827dbd2efcde2d18c8598c4cc5e2e296", "html_url": "https://github.com/rust-lang/rust/commit/36353bb1827dbd2efcde2d18c8598c4cc5e2e296"}, {"sha": "0231e4ac77dacf6ca30f6b68c6081415f2da54ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/0231e4ac77dacf6ca30f6b68c6081415f2da54ba", "html_url": "https://github.com/rust-lang/rust/commit/0231e4ac77dacf6ca30f6b68c6081415f2da54ba"}], "stats": {"total": 98, "additions": 77, "deletions": 21}, "files": [{"sha": "06701a8309e78454b006129fa862558031fc8482", "filename": "crates/ra_hir_def/src/find_path.rs", "status": "modified", "additions": 51, "deletions": 8, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/08a58901e8deee22a541ed14f7e6b02e3c57132e/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a58901e8deee22a541ed14f7e6b02e3c57132e/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs?ref=08a58901e8deee22a541ed14f7e6b02e3c57132e", "patch": "@@ -159,10 +159,16 @@ fn find_path_inner(\n         let crate_graph = db.crate_graph();\n         let extern_paths = crate_graph[from.krate].dependencies.iter().filter_map(|dep| {\n             let import_map = db.import_map(dep.crate_id);\n-            import_map.path_of(item).map(|modpath| {\n-                let mut modpath = modpath.clone();\n-                modpath.segments.insert(0, dep.as_name());\n-                modpath\n+            import_map.import_info_for(item).and_then(|info| {\n+                // Determine best path for containing module and append last segment from `info`.\n+                let mut path = find_path_inner(\n+                    db,\n+                    ItemInNs::Types(ModuleDefId::ModuleId(info.container)),\n+                    from,\n+                    best_path_len - 1,\n+                )?;\n+                path.segments.push(info.path.segments.last().unwrap().clone());\n+                Some(path)\n             })\n         });\n \n@@ -299,8 +305,8 @@ mod tests {\n     /// `code` needs to contain a cursor marker; checks that `find_path` for the\n     /// item the `path` refers to returns that same path when called from the\n     /// module the cursor is in.\n-    fn check_found_path(code: &str, path: &str) {\n-        let (db, pos) = TestDB::with_position(code);\n+    fn check_found_path(ra_fixture: &str, path: &str) {\n+        let (db, pos) = TestDB::with_position(ra_fixture);\n         let module = db.module_for_file(pos.file_id);\n         let parsed_path_file = ra_syntax::SourceFile::parse(&format!(\"use {};\", path));\n         let ast_path = parsed_path_file\n@@ -420,15 +426,52 @@ mod tests {\n \n     #[test]\n     fn different_crate_renamed() {\n-        // Even if a local path exists, if the item is defined externally, prefer an external path.\n         let code = r#\"\n             //- /main.rs crate:main deps:std\n             extern crate std as std_renamed;\n             <|>\n             //- /std.rs crate:std\n             pub struct S;\n         \"#;\n-        check_found_path(code, \"std::S\");\n+        check_found_path(code, \"std_renamed::S\");\n+    }\n+\n+    #[test]\n+    fn partially_imported() {\n+        // Tests that short paths are used even for external items, when parts of the path are\n+        // already in scope.\n+        check_found_path(\n+            r#\"\n+            //- /main.rs crate:main deps:ra_syntax\n+\n+            use ra_syntax::ast;\n+            <|>\n+\n+            //- /lib.rs crate:ra_syntax\n+            pub mod ast {\n+                pub enum ModuleItem {\n+                    A, B, C,\n+                }\n+            }\n+        \"#,\n+            \"ast::ModuleItem\",\n+        );\n+\n+        check_found_path(\n+            r#\"\n+            //- /main.rs crate:main deps:ra_syntax\n+\n+            <|>\n+\n+            //- /lib.rs crate:ra_syntax\n+            pub mod ast {\n+                pub enum ModuleItem {\n+                    A, B, C,\n+                }\n+            }\n+        \"#,\n+            \"ra_syntax::ast::ModuleItem\",\n+        );\n     }\n \n     #[test]"}, {"sha": "68e20d06b8b16b1948cc5ea1387babb986b6ef89", "filename": "crates/ra_hir_def/src/import_map.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/08a58901e8deee22a541ed14f7e6b02e3c57132e/crates%2Fra_hir_def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a58901e8deee22a541ed14f7e6b02e3c57132e/crates%2Fra_hir_def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fimport_map.rs?ref=08a58901e8deee22a541ed14f7e6b02e3c57132e", "patch": "@@ -17,6 +17,15 @@ use crate::{\n \n type FxIndexMap<K, V> = IndexMap<K, V, BuildHasherDefault<FxHasher>>;\n \n+/// Item import details stored in the `ImportMap`.\n+#[derive(Debug, Clone, Eq, PartialEq)]\n+pub struct ImportInfo {\n+    /// A path that can be used to import the item, relative to the crate's root.\n+    pub path: ModPath,\n+    /// The module containing this item.\n+    pub container: ModuleId,\n+}\n+\n /// A map from publicly exported items to the path needed to import/name them from a downstream\n /// crate.\n ///\n@@ -26,7 +35,7 @@ type FxIndexMap<K, V> = IndexMap<K, V, BuildHasherDefault<FxHasher>>;\n /// Note that all paths are relative to the containing crate's root, so the crate name still needs\n /// to be prepended to the `ModPath` before the path is valid.\n pub struct ImportMap {\n-    map: FxIndexMap<ItemInNs, ModPath>,\n+    map: FxIndexMap<ItemInNs, ImportInfo>,\n \n     /// List of keys stored in `map`, sorted lexicographically by their `ModPath`. Indexed by the\n     /// values returned by running `fst`.\n@@ -78,12 +87,12 @@ impl ImportMap {\n                     let path = mk_path();\n                     match import_map.entry(item) {\n                         Entry::Vacant(entry) => {\n-                            entry.insert(path);\n+                            entry.insert(ImportInfo { path, container: module });\n                         }\n                         Entry::Occupied(mut entry) => {\n                             // If the new path is shorter, prefer that one.\n-                            if path.len() < entry.get().len() {\n-                                *entry.get_mut() = path;\n+                            if path.len() < entry.get().path.len() {\n+                                *entry.get_mut() = ImportInfo { path, container: module };\n                             } else {\n                                 continue;\n                             }\n@@ -119,7 +128,7 @@ impl ImportMap {\n             let start = last_batch_start;\n             last_batch_start = idx + 1;\n \n-            let key = fst_path(&importables[start].1);\n+            let key = fst_path(&importables[start].1.path);\n \n             builder.insert(key, start as u64).unwrap();\n         }\n@@ -132,6 +141,10 @@ impl ImportMap {\n \n     /// Returns the `ModPath` needed to import/mention `item`, relative to this crate's root.\n     pub fn path_of(&self, item: ItemInNs) -> Option<&ModPath> {\n+        Some(&self.map.get(&item)?.path)\n+    }\n+\n+    pub fn import_info_for(&self, item: ItemInNs) -> Option<&ImportInfo> {\n         self.map.get(&item)\n     }\n }\n@@ -150,13 +163,13 @@ impl fmt::Debug for ImportMap {\n         let mut importable_paths: Vec<_> = self\n             .map\n             .iter()\n-            .map(|(item, modpath)| {\n+            .map(|(item, info)| {\n                 let ns = match item {\n                     ItemInNs::Types(_) => \"t\",\n                     ItemInNs::Values(_) => \"v\",\n                     ItemInNs::Macros(_) => \"m\",\n                 };\n-                format!(\"- {} ({})\", modpath, ns)\n+                format!(\"- {} ({})\", info.path, ns)\n             })\n             .collect();\n \n@@ -171,9 +184,9 @@ fn fst_path(path: &ModPath) -> String {\n     s\n }\n \n-fn cmp((_, lhs): &(&ItemInNs, &ModPath), (_, rhs): &(&ItemInNs, &ModPath)) -> Ordering {\n-    let lhs_str = fst_path(lhs);\n-    let rhs_str = fst_path(rhs);\n+fn cmp((_, lhs): &(&ItemInNs, &ImportInfo), (_, rhs): &(&ItemInNs, &ImportInfo)) -> Ordering {\n+    let lhs_str = fst_path(&lhs.path);\n+    let rhs_str = fst_path(&rhs.path);\n     lhs_str.cmp(&rhs_str)\n }\n \n@@ -243,7 +256,7 @@ pub fn search_dependencies<'a>(\n             let importables = &import_map.importables[indexed_value.value as usize..];\n \n             // Path shared by the importable items in this group.\n-            let path = &import_map.map[&importables[0]];\n+            let path = &import_map.map[&importables[0]].path;\n \n             if query.anchor_end {\n                 // Last segment must match query.\n@@ -256,14 +269,14 @@ pub fn search_dependencies<'a>(\n             // Add the items from this `ModPath` group. Those are all subsequent items in\n             // `importables` whose paths match `path`.\n             let iter = importables.iter().copied().take_while(|item| {\n-                let item_path = &import_map.map[item];\n+                let item_path = &import_map.map[item].path;\n                 fst_path(item_path) == fst_path(path)\n             });\n \n             if query.case_sensitive {\n                 // FIXME: This does not do a subsequence match.\n                 res.extend(iter.filter(|item| {\n-                    let item_path = &import_map.map[item];\n+                    let item_path = &import_map.map[item].path;\n                     item_path.to_string().contains(&query.query)\n                 }));\n             } else {"}]}