{"sha": "759d4e86514de200a6d335518e4e912816f12477", "node_id": "C_kwDOAAsO6NoAKDc1OWQ0ZTg2NTE0ZGUyMDBhNmQzMzU1MThlNGU5MTI4MTZmMTI0Nzc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-13T19:58:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-13T19:58:38Z"}, "message": "Rollup merge of #110277 - Ezrashaw:combine-assoc-fns-dlint, r=lcnr\n\ndead-code-lint: de-dup multiple unused assoc functions\n\nFixes #109600\n\nPrior art: #97853", "tree": {"sha": "7c7d5e7b33d0b7c097aa73ba73047c054d3de078", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c7d5e7b33d0b7c097aa73ba73047c054d3de078"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/759d4e86514de200a6d335518e4e912816f12477", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkOF7uCRBK7hj4Ov3rIwAAZLwIAGMIoglVP/vIAV5l3XVPvDLW\n8wzOgch6DcMIq6PAClLG8vmTHGPkjbP0AVwrsl9+fVLF+CWhfr1/ep8u00sjnfts\nRTsFxU4ENnb0rhC+vRpM0UG9dluzt6lB7mdjuuBUnY0urdac5t2EtGgJqWAfM4yR\nLVg3FozyNM2/9/BxOHW/CJha2N0fagVt/fZCk4CI3kMlGcD1x6a3faD4G3P0PMop\ngJtrR2Haakqqoo9FaSfUHUvFPUMQVzJHvdBCjvXS4LMI1LiIZmKKdztOx/1v91Bm\n7iVI00MXdlOvLxac+4+yglMAjQ1+yRsfApVYEgd1+HXUHoohihy8pFcTqjcb9GM=\n=bVYR\n-----END PGP SIGNATURE-----\n", "payload": "tree 7c7d5e7b33d0b7c097aa73ba73047c054d3de078\nparent e86de74c27c2721abdadc943ea5cc13f9c53b5c1\nparent 2bafc0fcee7c2ef0ea8c8a8af112e07a83304f79\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1681415918 +0200\ncommitter GitHub <noreply@github.com> 1681415918 +0200\n\nRollup merge of #110277 - Ezrashaw:combine-assoc-fns-dlint, r=lcnr\n\ndead-code-lint: de-dup multiple unused assoc functions\n\nFixes #109600\n\nPrior art: #97853\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/759d4e86514de200a6d335518e4e912816f12477", "html_url": "https://github.com/rust-lang/rust/commit/759d4e86514de200a6d335518e4e912816f12477", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/759d4e86514de200a6d335518e4e912816f12477/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e86de74c27c2721abdadc943ea5cc13f9c53b5c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e86de74c27c2721abdadc943ea5cc13f9c53b5c1", "html_url": "https://github.com/rust-lang/rust/commit/e86de74c27c2721abdadc943ea5cc13f9c53b5c1"}, {"sha": "2bafc0fcee7c2ef0ea8c8a8af112e07a83304f79", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bafc0fcee7c2ef0ea8c8a8af112e07a83304f79", "html_url": "https://github.com/rust-lang/rust/commit/2bafc0fcee7c2ef0ea8c8a8af112e07a83304f79"}], "stats": {"total": 235, "additions": 157, "deletions": 78}, "files": [{"sha": "5cfe691df17a14882baf66f212694bc0e112207f", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 42, "deletions": 20, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/759d4e86514de200a6d335518e4e912816f12477/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759d4e86514de200a6d335518e4e912816f12477/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=759d4e86514de200a6d335518e4e912816f12477", "patch": "@@ -700,6 +700,13 @@ impl<'tcx> DeadVisitor<'tcx> {\n             .collect();\n \n         let descr = tcx.def_descr(first_id.to_def_id());\n+        // `impl` blocks are \"batched\" and (unlike other batching) might\n+        // contain different kinds of associated items.\n+        let descr = if dead_codes.iter().any(|did| tcx.def_descr(did.to_def_id()) != descr) {\n+            \"associated item\"\n+        } else {\n+            descr\n+        };\n         let num = dead_codes.len();\n         let multiple = num > 6;\n         let name_list = names.into();\n@@ -712,12 +719,12 @@ impl<'tcx> DeadVisitor<'tcx> {\n \n         let parent_info = if let Some(parent_item) = parent_item {\n             let parent_descr = tcx.def_descr(parent_item.to_def_id());\n-            Some(ParentInfo {\n-                num,\n-                descr,\n-                parent_descr,\n-                span: tcx.def_ident_span(parent_item).unwrap(),\n-            })\n+            let span = if let DefKind::Impl { .. } = tcx.def_kind(parent_item) {\n+                tcx.def_span(parent_item)\n+            } else {\n+                tcx.def_ident_span(parent_item).unwrap()\n+            };\n+            Some(ParentInfo { num, descr, parent_descr, span })\n         } else {\n             None\n         };\n@@ -800,16 +807,7 @@ impl<'tcx> DeadVisitor<'tcx> {\n     }\n \n     fn check_definition(&mut self, def_id: LocalDefId) {\n-        if self.live_symbols.contains(&def_id) {\n-            return;\n-        }\n-        if has_allow_dead_code_or_lang_attr(self.tcx, def_id) {\n-            return;\n-        }\n-        let Some(name) = self.tcx.opt_item_name(def_id.to_def_id()) else {\n-            return\n-        };\n-        if name.as_str().starts_with('_') {\n+        if self.is_live_code(def_id) {\n             return;\n         }\n         match self.tcx.def_kind(def_id) {\n@@ -827,6 +825,18 @@ impl<'tcx> DeadVisitor<'tcx> {\n             _ => {}\n         }\n     }\n+\n+    fn is_live_code(&self, def_id: LocalDefId) -> bool {\n+        // if we cannot get a name for the item, then we just assume that it is\n+        // live. I mean, we can't really emit a lint.\n+        let Some(name) = self.tcx.opt_item_name(def_id.to_def_id()) else {\n+            return true;\n+        };\n+\n+        self.live_symbols.contains(&def_id)\n+            || has_allow_dead_code_or_lang_attr(self.tcx, def_id)\n+            || name.as_str().starts_with('_')\n+    }\n }\n \n fn check_mod_deathness(tcx: TyCtxt<'_>, module: LocalDefId) {\n@@ -836,6 +846,22 @@ fn check_mod_deathness(tcx: TyCtxt<'_>, module: LocalDefId) {\n     let module_items = tcx.hir_module_items(module);\n \n     for item in module_items.items() {\n+        if let hir::ItemKind::Impl(impl_item) = tcx.hir().item(item).kind {\n+            let mut dead_items = Vec::new();\n+            for item in impl_item.items {\n+                let did = item.id.owner_id.def_id;\n+                if !visitor.is_live_code(did) {\n+                    dead_items.push(did)\n+                }\n+            }\n+            visitor.warn_multiple_dead_codes(\n+                &dead_items,\n+                \"used\",\n+                Some(item.owner_id.def_id),\n+                false,\n+            );\n+        }\n+\n         if !live_symbols.contains(&item.owner_id.def_id) {\n             let parent = tcx.local_parent(item.owner_id.def_id);\n             if parent != module && !live_symbols.contains(&parent) {\n@@ -900,10 +926,6 @@ fn check_mod_deathness(tcx: TyCtxt<'_>, module: LocalDefId) {\n         }\n     }\n \n-    for impl_item in module_items.impl_items() {\n-        visitor.check_definition(impl_item.owner_id.def_id);\n-    }\n-\n     for foreign_item in module_items.foreign_items() {\n         visitor.check_definition(foreign_item.owner_id.def_id);\n     }"}, {"sha": "7e485a314c5407e258fa2374fbc5d07a4953f8d5", "filename": "tests/ui/associated-consts/associated-const-dead-code.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/759d4e86514de200a6d335518e4e912816f12477/tests%2Fui%2Fassociated-consts%2Fassociated-const-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/759d4e86514de200a6d335518e4e912816f12477/tests%2Fui%2Fassociated-consts%2Fassociated-const-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-consts%2Fassociated-const-dead-code.stderr?ref=759d4e86514de200a6d335518e4e912816f12477", "patch": "@@ -1,6 +1,8 @@\n error: associated constant `BAR` is never used\n   --> $DIR/associated-const-dead-code.rs:6:11\n    |\n+LL | impl MyFoo {\n+   | ---------- associated constant in this implementation\n LL |     const BAR: u32 = 1;\n    |           ^^^\n    |"}, {"sha": "d75a8e2dd41a87468c8f6dd68d00560dd7a1342b", "filename": "tests/ui/lint/dead-code/issue-85255.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/759d4e86514de200a6d335518e4e912816f12477/tests%2Fui%2Flint%2Fdead-code%2Fissue-85255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759d4e86514de200a6d335518e4e912816f12477/tests%2Fui%2Flint%2Fdead-code%2Fissue-85255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdead-code%2Fissue-85255.rs?ref=759d4e86514de200a6d335518e4e912816f12477", "patch": "@@ -11,8 +11,8 @@ struct Foo {\n struct Bar;\n \n impl Bar {\n-    fn a(&self) -> i32 { 5 } //~ WARNING: method `a` is never used\n-    pub fn b(&self) -> i32 { 6 } //~ WARNING: method `b` is never used\n+    fn a(&self) -> i32 { 5 } //~ WARNING: methods `a` and `b` are never used [dead_code]\n+    pub fn b(&self) -> i32 { 6 }\n }\n \n pub(crate) struct Foo1 {\n@@ -23,8 +23,8 @@ pub(crate) struct Foo1 {\n pub(crate) struct Bar1;\n \n impl Bar1 {\n-    fn a(&self) -> i32 { 5 } //~ WARNING: method `a` is never used\n-    pub fn b(&self) -> i32 { 6 } //~ WARNING: method `b` is never used\n+    fn a(&self) -> i32 { 5 } //~ WARNING: methods `a` and `b` are never used [dead_code]\n+    pub fn b(&self) -> i32 { 6 }\n }\n \n pub(crate) struct Foo2 {\n@@ -35,8 +35,8 @@ pub(crate) struct Foo2 {\n pub(crate) struct Bar2;\n \n impl Bar2 {\n-    fn a(&self) -> i32 { 5 } //~ WARNING: method `a` is never used\n-    pub fn b(&self) -> i32 { 6 } //~ WARNING: method `b` is never used\n+    fn a(&self) -> i32 { 5 } //~ WARNING: methods `a` and `b` are never used [dead_code]\n+    pub fn b(&self) -> i32 { 6 }\n }\n \n "}, {"sha": "d981085a4fa5daca83e7be2845334e7b0ec5f72d", "filename": "tests/ui/lint/dead-code/issue-85255.stderr", "status": "modified", "additions": 24, "deletions": 30, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/759d4e86514de200a6d335518e4e912816f12477/tests%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/759d4e86514de200a6d335518e4e912816f12477/tests%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr?ref=759d4e86514de200a6d335518e4e912816f12477", "patch": "@@ -14,6 +14,16 @@ note: the lint level is defined here\n LL | #![warn(dead_code)]\n    |         ^^^^^^^^^\n \n+warning: methods `a` and `b` are never used\n+  --> $DIR/issue-85255.rs:14:8\n+   |\n+LL | impl Bar {\n+   | -------- methods in this implementation\n+LL |     fn a(&self) -> i32 { 5 }\n+   |        ^\n+LL |     pub fn b(&self) -> i32 { 6 }\n+   |            ^\n+\n warning: fields `a` and `b` are never read\n   --> $DIR/issue-85255.rs:19:5\n    |\n@@ -24,6 +34,16 @@ LL |     a: i32,\n LL |     pub b: i32,\n    |         ^\n \n+warning: methods `a` and `b` are never used\n+  --> $DIR/issue-85255.rs:26:8\n+   |\n+LL | impl Bar1 {\n+   | --------- methods in this implementation\n+LL |     fn a(&self) -> i32 { 5 }\n+   |        ^\n+LL |     pub fn b(&self) -> i32 { 6 }\n+   |            ^\n+\n warning: fields `a` and `b` are never read\n   --> $DIR/issue-85255.rs:31:5\n    |\n@@ -34,41 +54,15 @@ LL |     a: i32,\n LL |     pub b: i32,\n    |         ^\n \n-warning: method `a` is never used\n-  --> $DIR/issue-85255.rs:14:8\n-   |\n-LL |     fn a(&self) -> i32 { 5 }\n-   |        ^\n-\n-warning: method `b` is never used\n-  --> $DIR/issue-85255.rs:15:12\n-   |\n-LL |     pub fn b(&self) -> i32 { 6 }\n-   |            ^\n-\n-warning: method `a` is never used\n-  --> $DIR/issue-85255.rs:26:8\n-   |\n-LL |     fn a(&self) -> i32 { 5 }\n-   |        ^\n-\n-warning: method `b` is never used\n-  --> $DIR/issue-85255.rs:27:12\n-   |\n-LL |     pub fn b(&self) -> i32 { 6 }\n-   |            ^\n-\n-warning: method `a` is never used\n+warning: methods `a` and `b` are never used\n   --> $DIR/issue-85255.rs:38:8\n    |\n+LL | impl Bar2 {\n+   | --------- methods in this implementation\n LL |     fn a(&self) -> i32 { 5 }\n    |        ^\n-\n-warning: method `b` is never used\n-  --> $DIR/issue-85255.rs:39:12\n-   |\n LL |     pub fn b(&self) -> i32 { 6 }\n    |            ^\n \n-warning: 9 warnings emitted\n+warning: 6 warnings emitted\n "}, {"sha": "5c68cf0e18b67011e4821b5c455cb561aa8a3651", "filename": "tests/ui/lint/dead-code/lint-dead-code-3.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/759d4e86514de200a6d335518e4e912816f12477/tests%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/759d4e86514de200a6d335518e4e912816f12477/tests%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.stderr?ref=759d4e86514de200a6d335518e4e912816f12477", "patch": "@@ -10,6 +10,14 @@ note: the lint level is defined here\n LL | #![deny(dead_code)]\n    |         ^^^^^^^^^\n \n+error: method `foo` is never used\n+  --> $DIR/lint-dead-code-3.rs:16:8\n+   |\n+LL | impl Foo {\n+   | -------- method in this implementation\n+LL |     fn foo(&self) {\n+   |        ^^^\n+\n error: function `bar` is never used\n   --> $DIR/lint-dead-code-3.rs:21:4\n    |\n@@ -34,12 +42,6 @@ error: function `blah` is never used\n LL |         fn blah() {}\n    |            ^^^^\n \n-error: method `foo` is never used\n-  --> $DIR/lint-dead-code-3.rs:16:8\n-   |\n-LL |     fn foo(&self) {\n-   |        ^^^\n-\n error: function `free` is never used\n   --> $DIR/lint-dead-code-3.rs:62:8\n    |"}, {"sha": "5b2b76b76ecd4ef78406f538c1ff05bb34a21d79", "filename": "tests/ui/lint/dead-code/lint-dead-code-6.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/759d4e86514de200a6d335518e4e912816f12477/tests%2Fui%2Flint%2Fdead-code%2Flint-dead-code-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759d4e86514de200a6d335518e4e912816f12477/tests%2Fui%2Flint%2Fdead-code%2Flint-dead-code-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdead-code%2Flint-dead-code-6.rs?ref=759d4e86514de200a6d335518e4e912816f12477", "patch": "@@ -2,17 +2,16 @@\n \n struct UnusedStruct; //~ ERROR struct `UnusedStruct` is never constructed\n impl UnusedStruct {\n-    fn unused_impl_fn_1() { //~ ERROR associated function `unused_impl_fn_1` is never used\n+    fn unused_impl_fn_1() {\n+        //~^ ERROR associated functions `unused_impl_fn_1`, `unused_impl_fn_2`, and `unused_impl_fn_3` are never used [dead_code]\n         println!(\"blah\");\n     }\n \n-    fn unused_impl_fn_2(var: i32) { //~ ERROR associated function `unused_impl_fn_2` is never used\n+    fn unused_impl_fn_2(var: i32) {\n         println!(\"foo {}\", var);\n     }\n \n-    fn unused_impl_fn_3( //~ ERROR associated function `unused_impl_fn_3` is never used\n-        var: i32,\n-    ) {\n+    fn unused_impl_fn_3(var: i32) {\n         println!(\"bar {}\", var);\n     }\n }"}, {"sha": "ce41100866ad9430cec5771fe764a9a516dd750f", "filename": "tests/ui/lint/dead-code/lint-dead-code-6.stderr", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/759d4e86514de200a6d335518e4e912816f12477/tests%2Fui%2Flint%2Fdead-code%2Flint-dead-code-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/759d4e86514de200a6d335518e4e912816f12477/tests%2Fui%2Flint%2Fdead-code%2Flint-dead-code-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdead-code%2Flint-dead-code-6.stderr?ref=759d4e86514de200a6d335518e4e912816f12477", "patch": "@@ -10,23 +10,19 @@ note: the lint level is defined here\n LL | #![deny(dead_code)]\n    |         ^^^^^^^^^\n \n-error: associated function `unused_impl_fn_1` is never used\n+error: associated functions `unused_impl_fn_1`, `unused_impl_fn_2`, and `unused_impl_fn_3` are never used\n   --> $DIR/lint-dead-code-6.rs:5:8\n    |\n+LL | impl UnusedStruct {\n+   | ----------------- associated functions in this implementation\n LL |     fn unused_impl_fn_1() {\n    |        ^^^^^^^^^^^^^^^^\n-\n-error: associated function `unused_impl_fn_2` is never used\n-  --> $DIR/lint-dead-code-6.rs:9:8\n-   |\n+...\n LL |     fn unused_impl_fn_2(var: i32) {\n    |        ^^^^^^^^^^^^^^^^\n-\n-error: associated function `unused_impl_fn_3` is never used\n-  --> $DIR/lint-dead-code-6.rs:13:8\n-   |\n-LL |     fn unused_impl_fn_3(\n+...\n+LL |     fn unused_impl_fn_3(var: i32) {\n    |        ^^^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "b111f4b9463c70ad4d6acd964d0ec33ddd96a5c2", "filename": "tests/ui/lint/dead-code/unused-assoc-fns.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/759d4e86514de200a6d335518e4e912816f12477/tests%2Fui%2Flint%2Fdead-code%2Funused-assoc-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759d4e86514de200a6d335518e4e912816f12477/tests%2Fui%2Flint%2Fdead-code%2Funused-assoc-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdead-code%2Funused-assoc-fns.rs?ref=759d4e86514de200a6d335518e4e912816f12477", "patch": "@@ -0,0 +1,35 @@\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+#![deny(unused)]\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn one() {}\n+    //~^ ERROR associated items `one`, `two`, `CONSTANT`, `Type`, and `three` are never used [dead_code]\n+\n+    fn two(&self) {}\n+\n+    // seperation between items\n+    // ...\n+    // ...\n+\n+    fn used() {}\n+\n+    const CONSTANT: usize = 5;\n+\n+    // more seperation\n+    // ...\n+    // ...\n+\n+    type Type = usize;\n+\n+    fn three(&self) {\n+        Foo::one();\n+        // ...\n+    }\n+}\n+\n+fn main() {\n+    Foo::used();\n+}"}, {"sha": "6344a70ea3aee9ccccfe9c9cde40dbc8eeb51a9e", "filename": "tests/ui/lint/dead-code/unused-assoc-fns.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/759d4e86514de200a6d335518e4e912816f12477/tests%2Fui%2Flint%2Fdead-code%2Funused-assoc-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/759d4e86514de200a6d335518e4e912816f12477/tests%2Fui%2Flint%2Fdead-code%2Funused-assoc-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdead-code%2Funused-assoc-fns.stderr?ref=759d4e86514de200a6d335518e4e912816f12477", "patch": "@@ -0,0 +1,29 @@\n+error: associated items `one`, `two`, `CONSTANT`, `Type`, and `three` are never used\n+  --> $DIR/unused-assoc-fns.rs:8:8\n+   |\n+LL | impl Foo {\n+   | -------- associated items in this implementation\n+LL |     fn one() {}\n+   |        ^^^\n+...\n+LL |     fn two(&self) {}\n+   |        ^^^\n+...\n+LL |     const CONSTANT: usize = 5;\n+   |           ^^^^^^^^\n+...\n+LL |     type Type = usize;\n+   |          ^^^^\n+LL |\n+LL |     fn three(&self) {\n+   |        ^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unused-assoc-fns.rs:3:9\n+   |\n+LL | #![deny(unused)]\n+   |         ^^^^^^\n+   = note: `#[deny(dead_code)]` implied by `#[deny(unused)]`\n+\n+error: aborting due to previous error\n+"}]}