{"sha": "ae38698e7fca180d612dc11be12023076e23236c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMzg2OThlN2ZjYTE4MGQ2MTJkYzExYmUxMjAyMzA3NmUyMzIzNmM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-23T07:33:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-23T07:33:54Z"}, "message": "Rollup merge of #73398 - oli-obk:const_raw_ptr_cmp, r=varkor,RalfJung,nagisa\n\nA way forward for pointer equality in const eval\n\nr? @varkor on the first commit and @RalfJung on the second commit\n\ncc #53020", "tree": {"sha": "0d6facabc6acf33196c2d87b81ff79035deffc32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d6facabc6acf33196c2d87b81ff79035deffc32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae38698e7fca180d612dc11be12023076e23236c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe8bBiCRBK7hj4Ov3rIwAAdHIIAJ8w+6A3Vn9orLiSkTf4r4Vv\nbtvTWFwp26qk3G/EKi/IULWNbZjmZYmJX/s+VdjpBFzmsV6RBxu0dfRn6DmU9SQC\njC39zuYsZb7kQmfTUXtai355VZxAl7GXXqC4hXiBEuHxAR+wQ3NpwLFhxSm3rH/v\n9bxAzpr2qN58T4hvrOsdg+xZSOgpmAqqYqw3HpKBmAJYXFemD9awZoAraYWchE6s\nL9i6sm16C4fGrn7HN8Wqd8MKtgpscg4fDg0AuP4xyXYWratax49M8vf6Gq99kxwz\n+ynCCwTh7V3IDf1M3uBKtK5MAhoO0ODk9tsdVLa10hNOQlYtV/1uW5Rnrdag4ZA=\n=sr50\n-----END PGP SIGNATURE-----\n", "payload": "tree 0d6facabc6acf33196c2d87b81ff79035deffc32\nparent 903823c59bcb9890df2a6fadcf7aa22f74eed67f\nparent e465b227d15fec8f16863ba8e77191ceb5c8670b\nauthor Manish Goregaokar <manishsmail@gmail.com> 1592897634 -0700\ncommitter GitHub <noreply@github.com> 1592897634 -0700\n\nRollup merge of #73398 - oli-obk:const_raw_ptr_cmp, r=varkor,RalfJung,nagisa\n\nA way forward for pointer equality in const eval\n\nr? @varkor on the first commit and @RalfJung on the second commit\n\ncc #53020\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae38698e7fca180d612dc11be12023076e23236c", "html_url": "https://github.com/rust-lang/rust/commit/ae38698e7fca180d612dc11be12023076e23236c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae38698e7fca180d612dc11be12023076e23236c/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "903823c59bcb9890df2a6fadcf7aa22f74eed67f", "url": "https://api.github.com/repos/rust-lang/rust/commits/903823c59bcb9890df2a6fadcf7aa22f74eed67f", "html_url": "https://github.com/rust-lang/rust/commit/903823c59bcb9890df2a6fadcf7aa22f74eed67f"}, {"sha": "e465b227d15fec8f16863ba8e77191ceb5c8670b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e465b227d15fec8f16863ba8e77191ceb5c8670b", "html_url": "https://github.com/rust-lang/rust/commit/e465b227d15fec8f16863ba8e77191ceb5c8670b"}], "stats": {"total": 559, "additions": 358, "deletions": 201}, "files": [{"sha": "67ebdcc9f33b10ed9f4bc1e4b9091f6d90f3824f", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -60,7 +60,7 @@ impl<T> RawVec<T, Global> {\n     /// `#[rustc_force_min_const_fn]` attribute which requires conformance\n     /// with `min_const_fn` but does not necessarily allow calling it in\n     /// `stable(...) const fn` / user code not enabling `foo` when\n-    /// `#[rustc_const_unstable(feature = \"foo\", ..)]` is present.\n+    /// `#[rustc_const_unstable(feature = \"foo\", issue = \"01234\")]` is present.\n     pub const NEW: Self = Self::new();\n \n     /// Creates the biggest possible `RawVec` (on the system heap)"}, {"sha": "50e321f9c7158f2fb2ec0b216d2012550d332b3f", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -1012,7 +1012,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::any::type_name`](../../std/any/fn.type_name.html)\n-    #[rustc_const_unstable(feature = \"const_type_name\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_type_name\", issue = \"63084\")]\n     pub fn type_name<T: ?Sized>() -> &'static str;\n \n     /// Gets an identifier which is globally unique to the specified type. This\n@@ -1021,7 +1021,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::any::TypeId::of`](../../std/any/struct.TypeId.html#method.of)\n-    #[rustc_const_unstable(feature = \"const_type_id\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_type_id\", issue = \"41875\")]\n     pub fn type_id<T: ?Sized + 'static>() -> u64;\n \n     /// A guard for unsafe functions that cannot ever be executed if `T` is uninhabited:\n@@ -1931,7 +1931,7 @@ extern \"rust-intrinsic\" {\n     pub fn nontemporal_store<T>(ptr: *mut T, val: T);\n \n     /// See documentation of `<*const T>::offset_from` for details.\n-    #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"41079\")]\n     pub fn ptr_offset_from<T>(ptr: *const T, base: *const T) -> isize;\n \n     /// Internal hook used by Miri to implement unwinding.\n@@ -1948,6 +1948,16 @@ extern \"rust-intrinsic\" {\n     #[cfg(not(bootstrap))]\n     #[lang = \"count_code_region\"]\n     pub fn count_code_region(index: u32);\n+\n+    /// See documentation of `<*const T>::guaranteed_eq` for details.\n+    #[rustc_const_unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n+    #[cfg(not(bootstrap))]\n+    pub fn ptr_guaranteed_eq<T>(ptr: *const T, other: *const T) -> bool;\n+\n+    /// See documentation of `<*const T>::guaranteed_ne` for details.\n+    #[rustc_const_unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n+    #[cfg(not(bootstrap))]\n+    pub fn ptr_guaranteed_ne<T>(ptr: *const T, other: *const T) -> bool;\n }\n \n // Some functions are defined here because they accidentally got made"}, {"sha": "4eb2fdbd07868a83352e199925cc4780e046d19b", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -87,6 +87,7 @@\n #![feature(const_generics)]\n #![feature(const_ptr_offset)]\n #![feature(const_ptr_offset_from)]\n+#![cfg_attr(not(bootstrap), feature(const_raw_ptr_comparison))]\n #![feature(const_result)]\n #![feature(const_slice_from_raw_parts)]\n #![feature(const_slice_ptr_len)]"}, {"sha": "395b3879cfd0cca6c8853b6b7c72f3359a92a0a1", "filename": "src/libcore/ptr/const_ptr.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fconst_ptr.rs?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -295,6 +295,72 @@ impl<T: ?Sized> *const T {\n         intrinsics::ptr_offset_from(self, origin)\n     }\n \n+    /// Returns whether two pointers are guaranteed to be equal.\n+    ///\n+    /// At runtime this function behaves like `self == other`.\n+    /// However, in some contexts (e.g., compile-time evaluation),\n+    /// it is not always possible to determine equality of two pointers, so this function may\n+    /// spuriously return `false` for pointers that later actually turn out to be equal.\n+    /// But when it returns `true`, the pointers are guaranteed to be equal.\n+    ///\n+    /// This function is the mirror of [`guaranteed_ne`], but not its inverse. There are pointer\n+    /// comparisons for which both functions return `false`.\n+    ///\n+    /// [`guaranteed_ne`]: #method.guaranteed_ne\n+    ///\n+    /// The return value may change depending on the compiler version and unsafe code may not\n+    /// rely on the result of this function for soundness. It is suggested to only use this function\n+    /// for performance optimizations where spurious `false` return values by this function do not\n+    /// affect the outcome, but just the performance.\n+    /// The consequences of using this method to make runtime and compile-time code behave\n+    /// differently have not been explored. This method should not be used to introduce such\n+    /// differences, and it should also not be stabilized before we have a better understanding\n+    /// of this issue.\n+    /// ```\n+    #[unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n+    #[rustc_const_unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n+    #[inline]\n+    #[cfg(not(bootstrap))]\n+    pub const fn guaranteed_eq(self, other: *const T) -> bool\n+    where\n+        T: Sized,\n+    {\n+        intrinsics::ptr_guaranteed_eq(self, other)\n+    }\n+\n+    /// Returns whether two pointers are guaranteed to be inequal.\n+    ///\n+    /// At runtime this function behaves like `self != other`.\n+    /// However, in some contexts (e.g., compile-time evaluation),\n+    /// it is not always possible to determine the inequality of two pointers, so this function may\n+    /// spuriously return `false` for pointers that later actually turn out to be inequal.\n+    /// But when it returns `true`, the pointers are guaranteed to be inequal.\n+    ///\n+    /// This function is the mirror of [`guaranteed_eq`], but not its inverse. There are pointer\n+    /// comparisons for which both functions return `false`.\n+    ///\n+    /// [`guaranteed_eq`]: #method.guaranteed_eq\n+    ///\n+    /// The return value may change depending on the compiler version and unsafe code may not\n+    /// rely on the result of this function for soundness. It is suggested to only use this function\n+    /// for performance optimizations where spurious `false` return values by this function do not\n+    /// affect the outcome, but just the performance.\n+    /// The consequences of using this method to make runtime and compile-time code behave\n+    /// differently have not been explored. This method should not be used to introduce such\n+    /// differences, and it should also not be stabilized before we have a better understanding\n+    /// of this issue.\n+    /// ```\n+    #[unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n+    #[rustc_const_unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n+    #[inline]\n+    #[cfg(not(bootstrap))]\n+    pub const fn guaranteed_ne(self, other: *const T) -> bool\n+    where\n+        T: Sized,\n+    {\n+        intrinsics::ptr_guaranteed_ne(self, other)\n+    }\n+\n     /// Calculates the distance between two pointers. The returned value is in\n     /// units of T: the distance in bytes is divided by `mem::size_of::<T>()`.\n     ///"}, {"sha": "b86ef5b13b35344e3de6ad599497006b4e140b98", "filename": "src/libcore/ptr/mut_ptr.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmut_ptr.rs?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -273,6 +273,72 @@ impl<T: ?Sized> *mut T {\n         if self.is_null() { None } else { Some(&mut *self) }\n     }\n \n+    /// Returns whether two pointers are guaranteed to be equal.\n+    ///\n+    /// At runtime this function behaves like `self == other`.\n+    /// However, in some contexts (e.g., compile-time evaluation),\n+    /// it is not always possible to determine equality of two pointers, so this function may\n+    /// spuriously return `false` for pointers that later actually turn out to be equal.\n+    /// But when it returns `true`, the pointers are guaranteed to be equal.\n+    ///\n+    /// This function is the mirror of [`guaranteed_ne`], but not its inverse. There are pointer\n+    /// comparisons for which both functions return `false`.\n+    ///\n+    /// [`guaranteed_ne`]: #method.guaranteed_ne\n+    ///\n+    /// The return value may change depending on the compiler version and unsafe code may not\n+    /// rely on the result of this function for soundness. It is suggested to only use this function\n+    /// for performance optimizations where spurious `false` return values by this function do not\n+    /// affect the outcome, but just the performance.\n+    /// The consequences of using this method to make runtime and compile-time code behave\n+    /// differently have not been explored. This method should not be used to introduce such\n+    /// differences, and it should also not be stabilized before we have a better understanding\n+    /// of this issue.\n+    /// ```\n+    #[unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n+    #[rustc_const_unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n+    #[inline]\n+    #[cfg(not(bootstrap))]\n+    pub const fn guaranteed_eq(self, other: *mut T) -> bool\n+    where\n+        T: Sized,\n+    {\n+        intrinsics::ptr_guaranteed_eq(self as *const _, other as *const _)\n+    }\n+\n+    /// Returns whether two pointers are guaranteed to be inequal.\n+    ///\n+    /// At runtime this function behaves like `self != other`.\n+    /// However, in some contexts (e.g., compile-time evaluation),\n+    /// it is not always possible to determine the inequality of two pointers, so this function may\n+    /// spuriously return `false` for pointers that later actually turn out to be inequal.\n+    /// But when it returns `true`, the pointers are guaranteed to be inequal.\n+    ///\n+    /// This function is the mirror of [`guaranteed_eq`], but not its inverse. There are pointer\n+    /// comparisons for which both functions return `false`.\n+    ///\n+    /// [`guaranteed_eq`]: #method.guaranteed_eq\n+    ///\n+    /// The return value may change depending on the compiler version and unsafe code may not\n+    /// rely on the result of this function for soundness. It is suggested to only use this function\n+    /// for performance optimizations where spurious `false` return values by this function do not\n+    /// affect the outcome, but just the performance.\n+    /// The consequences of using this method to make runtime and compile-time code behave\n+    /// differently have not been explored. This method should not be used to introduce such\n+    /// differences, and it should also not be stabilized before we have a better understanding\n+    /// of this issue.\n+    /// ```\n+    #[unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n+    #[rustc_const_unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n+    #[inline]\n+    #[cfg(not(bootstrap))]\n+    pub const unsafe fn guaranteed_ne(self, other: *mut T) -> bool\n+    where\n+        T: Sized,\n+    {\n+        intrinsics::ptr_guaranteed_ne(self as *const _, other as *const _)\n+    }\n+\n     /// Calculates the distance between two pointers. The returned value is in\n     /// units of T: the distance in bytes is divided by `mem::size_of::<T>()`.\n     ///"}, {"sha": "c69aafe687cf819b47736a615bee8fc6b16597f3", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -5956,10 +5956,18 @@ where\n             return false;\n         }\n \n+        #[cfg(bootstrap)]\n         if self.as_ptr() == other.as_ptr() {\n             return true;\n         }\n \n+        // While performance would suffer if `guaranteed_eq` just returned `false`\n+        // for all arguments, correctness and return value of this function are not affected.\n+        #[cfg(not(bootstrap))]\n+        if self.as_ptr().guaranteed_eq(other.as_ptr()) {\n+            return true;\n+        }\n+\n         self.iter().zip(other.iter()).all(|(x, y)| x == y)\n     }\n }\n@@ -5973,9 +5981,18 @@ where\n         if self.len() != other.len() {\n             return false;\n         }\n+\n+        #[cfg(bootstrap)]\n         if self.as_ptr() == other.as_ptr() {\n             return true;\n         }\n+\n+        // While performance would suffer if `guaranteed_eq` just returned `false`\n+        // for all arguments, correctness and return value of this function are not affected.\n+        #[cfg(not(bootstrap))]\n+        if self.as_ptr().guaranteed_eq(other.as_ptr()) {\n+            return true;\n+        }\n         unsafe {\n             let size = mem::size_of_val(self);\n             memcmp(self.as_ptr() as *const u8, other.as_ptr() as *const u8, size) == 0"}, {"sha": "0a8525f06fa3d7d04d9208188489cd396e00d3c9", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -12,7 +12,7 @@ use log::debug;\n use rustc_ast::ast;\n use rustc_codegen_ssa::base::{compare_simd_types, to_immediate, wants_msvc_seh};\n use rustc_codegen_ssa::common::span_invalid_monomorphization_error;\n-use rustc_codegen_ssa::common::TypeKind;\n+use rustc_codegen_ssa::common::{IntPredicate, TypeKind};\n use rustc_codegen_ssa::glue;\n use rustc_codegen_ssa::mir::operand::{OperandRef, OperandValue};\n use rustc_codegen_ssa::mir::place::PlaceRef;\n@@ -731,6 +731,16 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 return;\n             }\n \n+            \"ptr_guaranteed_eq\" | \"ptr_guaranteed_ne\" => {\n+                let a = args[0].immediate();\n+                let b = args[1].immediate();\n+                if name == \"ptr_guaranteed_eq\" {\n+                    self.icmp(IntPredicate::IntEQ, a, b)\n+                } else {\n+                    self.icmp(IntPredicate::IntNE, a, b)\n+                }\n+            }\n+\n             \"ptr_offset_from\" => {\n                 let ty = substs.type_at(0);\n                 let pointee_size = self.size_of(ty);"}, {"sha": "e2d497a3adab374a18941c0069884f024fcbd873", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -401,9 +401,6 @@ declare_features! (\n     /// Allows dereferencing raw pointers during const eval.\n     (active, const_raw_ptr_deref, \"1.27.0\", Some(51911), None),\n \n-    /// Allows comparing raw pointers during const eval.\n-    (active, const_compare_raw_pointers, \"1.27.0\", Some(53020), None),\n-\n     /// Allows `#[doc(alias = \"...\")]`.\n     (active, doc_alias, \"1.27.0\", Some(50146), None),\n "}, {"sha": "8d410894e8b190083028dac2ac8acdc394ab1f23", "filename": "src/librustc_feature/removed.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Flibrustc_feature%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Flibrustc_feature%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fremoved.rs?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -113,6 +113,11 @@ declare_features! (\n      Some(\"removed in favor of `#![feature(marker_trait_attr)]`\")),\n     /// Allows `#[no_debug]`.\n     (removed, no_debug, \"1.43.0\", Some(29721), None, Some(\"removed due to lack of demand\")),\n+\n+    /// Allows comparing raw pointers during const eval.\n+    (removed, const_compare_raw_pointers, \"1.46.0\", Some(53020), None,\n+     Some(\"cannot be allowed in const eval in any meaningful way\")),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: removed features\n     // -------------------------------------------------------------------------"}, {"sha": "6ac1e6be03674a9e1cc529ea69548b219c73ba0a", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -296,6 +296,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let offset_ptr = ptr.ptr_wrapping_signed_offset(offset_bytes, self);\n                 self.write_scalar(offset_ptr, dest)?;\n             }\n+            sym::ptr_guaranteed_eq | sym::ptr_guaranteed_ne => {\n+                // FIXME: return `true` for at least some comparisons where we can reliably\n+                // determine the result of runtime (in)equality tests at compile-time.\n+                self.write_scalar(Scalar::from_bool(false), dest)?;\n+            }\n             sym::ptr_offset_from => {\n                 let a = self.read_immediate(args[0])?.to_scalar()?;\n                 let b = self.read_immediate(args[1])?.to_scalar()?;"}, {"sha": "45073ab8b4d74601b2a4aabdeae3c9324f57846e", "filename": "src/librustc_mir/transform/check_consts/ops.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -296,18 +296,16 @@ impl NonConstOp for Panic {\n #[derive(Debug)]\n pub struct RawPtrComparison;\n impl NonConstOp for RawPtrComparison {\n-    fn feature_gate() -> Option<Symbol> {\n-        Some(sym::const_compare_raw_pointers)\n-    }\n-\n     fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-        feature_err(\n-            &ccx.tcx.sess.parse_sess,\n-            sym::const_compare_raw_pointers,\n-            span,\n-            &format!(\"comparing raw pointers inside {}\", ccx.const_kind()),\n-        )\n-        .emit();\n+        let mut err = ccx\n+            .tcx\n+            .sess\n+            .struct_span_err(span, \"pointers cannot be reliably compared during const eval.\");\n+        err.note(\n+            \"see issue #53020 <https://github.com/rust-lang/rust/issues/53020> \\\n+            for more information\",\n+        );\n+        err.emit();\n     }\n }\n "}, {"sha": "ac7acff1eca9e0d6e691ee8e05038e0b0b0bd413", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -171,21 +171,6 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     _ => {}\n                 }\n             }\n-            // raw pointer and fn pointer operations are unsafe as it is not clear whether one\n-            // pointer would be \"less\" or \"equal\" to another, because we cannot know where llvm\n-            // or the linker will place various statics in memory. Without this information the\n-            // result of a comparison of addresses would differ between runtime and compile-time.\n-            Rvalue::BinaryOp(_, ref lhs, _)\n-                if self.const_context && self.tcx.features().const_compare_raw_pointers =>\n-            {\n-                if let ty::RawPtr(_) | ty::FnPtr(..) = lhs.ty(self.body, self.tcx).kind {\n-                    self.require_unsafe(\n-                        \"pointer operation\",\n-                        \"operations on pointers in constants\",\n-                        UnsafetyViolationKind::General,\n-                    );\n-                }\n-            }\n             _ => {}\n         }\n         self.super_rvalue(rvalue, location);"}, {"sha": "06d1f36622b94ef101b913a73f293c9c5793b1b7", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -588,6 +588,8 @@ symbols! {\n         proc_macro_non_items,\n         proc_macro_path_invoc,\n         profiler_runtime,\n+        ptr_guaranteed_eq,\n+        ptr_guaranteed_ne,\n         ptr_offset_from,\n         pub_restricted,\n         pure,"}, {"sha": "ef6c7c14404a7239b9bf5b840e7f37f67ed5c66d", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -74,9 +74,8 @@ pub fn intrinsic_operation_unsafety(intrinsic: &str) -> hir::Unsafety {\n         | \"wrapping_add\" | \"wrapping_sub\" | \"wrapping_mul\" | \"saturating_add\"\n         | \"saturating_sub\" | \"rotate_left\" | \"rotate_right\" | \"ctpop\" | \"ctlz\" | \"cttz\"\n         | \"bswap\" | \"bitreverse\" | \"discriminant_value\" | \"type_id\" | \"likely\" | \"unlikely\"\n-        | \"minnumf32\" | \"minnumf64\" | \"maxnumf32\" | \"maxnumf64\" | \"type_name\" => {\n-            hir::Unsafety::Normal\n-        }\n+        | \"ptr_guaranteed_eq\" | \"ptr_guaranteed_ne\" | \"minnumf32\" | \"minnumf64\" | \"maxnumf32\"\n+        | \"maxnumf64\" | \"type_name\" => hir::Unsafety::Normal,\n         _ => hir::Unsafety::Unsafe,\n     }\n }\n@@ -258,6 +257,10 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n                 (1, vec![param(0), param(0)], tcx.intern_tup(&[param(0), tcx.types.bool]))\n             }\n \n+            \"ptr_guaranteed_eq\" | \"ptr_guaranteed_ne\" => {\n+                (1, vec![tcx.mk_imm_ptr(param(0)), tcx.mk_imm_ptr(param(0))], tcx.types.bool)\n+            }\n+\n             \"ptr_offset_from\" => {\n                 (1, vec![tcx.mk_imm_ptr(param(0)), tcx.mk_imm_ptr(param(0))], tcx.types.isize)\n             }"}, {"sha": "3dd9c9c5c39dbc4781a60c55d671057248371d4c", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -10,8 +10,7 @@ use rustc_middle::hir::map::Map;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt, TypeFoldable};\n-use rustc_session::parse::feature_err;\n-use rustc_span::symbol::{sym, Ident};\n+use rustc_span::symbol::Ident;\n use rustc_span::{Span, DUMMY_SP};\n use rustc_trait_selection::traits;\n \n@@ -303,25 +302,22 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n             GenericParamKind::Type { default: Some(ref ty), .. } => icx.to_ty(ty),\n             GenericParamKind::Const { ty: ref hir_ty, .. } => {\n                 let ty = icx.to_ty(hir_ty);\n-                if !tcx.features().const_compare_raw_pointers {\n-                    let err = match ty.peel_refs().kind {\n-                        ty::FnPtr(_) => Some(\"function pointers\"),\n-                        ty::RawPtr(_) => Some(\"raw pointers\"),\n-                        _ => None,\n-                    };\n-                    if let Some(unsupported_type) = err {\n-                        feature_err(\n-                            &tcx.sess.parse_sess,\n-                            sym::const_compare_raw_pointers,\n+                let err = match ty.peel_refs().kind {\n+                    ty::FnPtr(_) => Some(\"function pointers\"),\n+                    ty::RawPtr(_) => Some(\"raw pointers\"),\n+                    _ => None,\n+                };\n+                if let Some(unsupported_type) = err {\n+                    tcx.sess\n+                        .struct_span_err(\n                             hir_ty.span,\n                             &format!(\n-                                \"using {} as const generic parameters is unstable\",\n+                                \"using {} as const generic parameters is forbidden\",\n                                 unsupported_type\n                             ),\n                         )\n                         .emit();\n-                    };\n-                }\n+                };\n                 if traits::search_for_structural_match_violation(param.hir_id, param.span, tcx, ty)\n                     .is_some()\n                 {"}, {"sha": "90c438b05cb816459e5e4a1b9190e11559ea0a1c", "filename": "src/test/ui/const-generics/fn-const-param-call.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -1,15 +1,14 @@\n-// run-pass\n-\n-#![feature(const_generics, const_compare_raw_pointers)]\n+#![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete\n \n fn function() -> u32 {\n     17\n }\n \n-struct Wrapper<const F: fn() -> u32>;\n+struct Wrapper<const F: fn() -> u32>; //~ ERROR: using function pointers as const generic parameters\n \n impl<const F: fn() -> u32> Wrapper<F> {\n+//~^ ERROR: using function pointers as const generic parameters\n     fn call() -> u32 {\n         F()\n     }"}, {"sha": "b5811243caa8a31b1b3bd97804b832c0ef9c4326", "filename": "src/test/ui/const-generics/fn-const-param-call.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.stderr?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -1,11 +1,23 @@\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/fn-const-param-call.rs:3:12\n+  --> $DIR/fn-const-param-call.rs:1:12\n    |\n-LL | #![feature(const_generics, const_compare_raw_pointers)]\n+LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n-warning: 1 warning emitted\n+error: using function pointers as const generic parameters is forbidden\n+  --> $DIR/fn-const-param-call.rs:8:25\n+   |\n+LL | struct Wrapper<const F: fn() -> u32>;\n+   |                         ^^^^^^^^^^^\n+\n+error: using function pointers as const generic parameters is forbidden\n+  --> $DIR/fn-const-param-call.rs:10:15\n+   |\n+LL | impl<const F: fn() -> u32> Wrapper<F> {\n+   |               ^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "14fa3b494b3fcef1dade36b2d5f66352b3d65945", "filename": "src/test/ui/const-generics/fn-const-param-infer.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -1,7 +1,8 @@\n-#![feature(const_generics, const_compare_raw_pointers)]\n+#![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete\n \n struct Checked<const F: fn(usize) -> bool>;\n+//~^ ERROR: using function pointers as const generic parameters\n \n fn not_one(val: usize) -> bool { val != 1 }\n fn not_two(val: usize) -> bool { val != 2 }\n@@ -13,14 +14,14 @@ fn generic<T>(val: usize) -> bool { val != 1 }\n fn main() {\n     let _: Option<Checked<not_one>> = None;\n     let _: Checked<not_one> = Checked::<not_one>;\n-    let _: Checked<not_one> = Checked::<not_two>; //~ mismatched types\n+    let _: Checked<not_one> = Checked::<not_two>;\n \n     let _ = Checked::<generic_arg>;\n     let _ = Checked::<{generic_arg::<usize>}>;\n-    let _ = Checked::<{generic_arg::<u32>}>;  //~ mismatched types\n+    let _ = Checked::<{generic_arg::<u32>}>;\n \n-    let _ = Checked::<generic>; //~ type annotations needed\n+    let _ = Checked::<generic>;\n     let _ = Checked::<{generic::<u16>}>;\n     let _: Checked<{generic::<u16>}> = Checked::<{generic::<u16>}>;\n-    let _: Checked<{generic::<u32>}> = Checked::<{generic::<u16>}>; //~ mismatched types\n+    let _: Checked<{generic::<u32>}> = Checked::<{generic::<u16>}>;\n }"}, {"sha": "7aaa41eb7d7b157f462a9af0a4f450b8cd1c7d47", "filename": "src/test/ui/const-generics/fn-const-param-infer.stderr", "status": "modified", "additions": 6, "deletions": 35, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -1,46 +1,17 @@\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/fn-const-param-infer.rs:1:12\n    |\n-LL | #![feature(const_generics, const_compare_raw_pointers)]\n+LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n-error[E0308]: mismatched types\n-  --> $DIR/fn-const-param-infer.rs:16:31\n+error: using function pointers as const generic parameters is forbidden\n+  --> $DIR/fn-const-param-infer.rs:4:25\n    |\n-LL |     let _: Checked<not_one> = Checked::<not_two>;\n-   |                               ^^^^^^^^^^^^^^^^^^ expected `{not_one as fn(usize) -> bool}`, found `{not_two as fn(usize) -> bool}`\n-   |\n-   = note: expected type `{not_one as fn(usize) -> bool}`\n-              found type `{not_two as fn(usize) -> bool}`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/fn-const-param-infer.rs:20:24\n-   |\n-LL |     let _ = Checked::<{generic_arg::<u32>}>;\n-   |                        ^^^^^^^^^^^^^^^^^^ expected `usize`, found `u32`\n-   |\n-   = note: expected fn pointer `fn(usize) -> _`\n-                 found fn item `fn(u32) -> _ {generic_arg::<u32>}`\n-\n-error[E0282]: type annotations needed\n-  --> $DIR/fn-const-param-infer.rs:22:23\n-   |\n-LL |     let _ = Checked::<generic>;\n-   |                       ^^^^^^^ cannot infer type for type parameter `T` declared on the function `generic`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/fn-const-param-infer.rs:25:40\n-   |\n-LL |     let _: Checked<{generic::<u32>}> = Checked::<{generic::<u16>}>;\n-   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{generic::<u32> as fn(usize) -> bool}`, found `{generic::<u16> as fn(usize) -> bool}`\n-   |\n-   = note: expected type `{generic::<u32> as fn(usize) -> bool}`\n-              found type `{generic::<u16> as fn(usize) -> bool}`\n+LL | struct Checked<const F: fn(usize) -> bool>;\n+   |                         ^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors; 1 warning emitted\n+error: aborting due to previous error; 1 warning emitted\n \n-Some errors have detailed explanations: E0282, E0308.\n-For more information about an error, try `rustc --explain E0282`."}, {"sha": "97ca9d6a44c9e8f38d0527697ad0d3b0a63ea97d", "filename": "src/test/ui/const-generics/raw-ptr-const-param-deref.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -1,12 +1,11 @@\n-// run-pass\n-#![feature(const_generics, const_compare_raw_pointers)]\n+#![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete\n \n const A: u32 = 3;\n \n-struct Const<const P: *const u32>;\n+struct Const<const P: *const u32>; //~ ERROR: using raw pointers as const generic parameters\n \n-impl<const P: *const u32> Const<P> {\n+impl<const P: *const u32> Const<P> { //~ ERROR: using raw pointers as const generic parameters\n     fn get() -> u32 {\n         unsafe {\n             *P"}, {"sha": "1ce8bb9c05423a1a421c0da34280e3b032e638a9", "filename": "src/test/ui/const-generics/raw-ptr-const-param-deref.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.stderr?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -1,11 +1,23 @@\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/raw-ptr-const-param-deref.rs:2:12\n+  --> $DIR/raw-ptr-const-param-deref.rs:1:12\n    |\n-LL | #![feature(const_generics, const_compare_raw_pointers)]\n+LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n-warning: 1 warning emitted\n+error: using raw pointers as const generic parameters is forbidden\n+  --> $DIR/raw-ptr-const-param-deref.rs:6:23\n+   |\n+LL | struct Const<const P: *const u32>;\n+   |                       ^^^^^^^^^^\n+\n+error: using raw pointers as const generic parameters is forbidden\n+  --> $DIR/raw-ptr-const-param-deref.rs:8:15\n+   |\n+LL | impl<const P: *const u32> Const<P> {\n+   |               ^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "237b410e073d6f886b617bfc40f30434b16c7cd7", "filename": "src/test/ui/const-generics/raw-ptr-const-param.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.rs?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -1,9 +1,9 @@\n-#![feature(const_generics, const_compare_raw_pointers)]\n+#![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete\n \n-struct Const<const P: *const u32>;\n+struct Const<const P: *const u32>; //~ ERROR: using raw pointers as const generic parameters\n \n fn main() {\n-    let _: Const<{ 15 as *const _ }> = Const::<{ 10 as *const _ }>; //~ mismatched types\n+    let _: Const<{ 15 as *const _ }> = Const::<{ 10 as *const _ }>;\n     let _: Const<{ 10 as *const _ }> = Const::<{ 10 as *const _ }>;\n }"}, {"sha": "6e64f8a327fd508241b479fe5f4859eb0a12f1b8", "filename": "src/test/ui/const-generics/raw-ptr-const-param.stderr", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -1,21 +1,17 @@\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/raw-ptr-const-param.rs:1:12\n    |\n-LL | #![feature(const_generics, const_compare_raw_pointers)]\n+LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n-error[E0308]: mismatched types\n-  --> $DIR/raw-ptr-const-param.rs:7:40\n+error: using raw pointers as const generic parameters is forbidden\n+  --> $DIR/raw-ptr-const-param.rs:4:23\n    |\n-LL |     let _: Const<{ 15 as *const _ }> = Const::<{ 10 as *const _ }>;\n-   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{0xf as *const u32}`, found `{0xa as *const u32}`\n-   |\n-   = note: expected type `{0xf as *const u32}`\n-              found type `{0xa as *const u32}`\n+LL | struct Const<const P: *const u32>;\n+   |                       ^^^^^^^^^^\n \n error: aborting due to previous error; 1 warning emitted\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "e238e13b8e2da46fff8542ce21a634f011144655", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.rs?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -1,17 +1,6 @@\n-#![feature(const_raw_ptr_to_usize_cast, const_compare_raw_pointers, const_raw_ptr_deref)]\n-\n fn main() {}\n \n // unconst and bad, will thus error in miri\n-const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 }; //~ ERROR any use of this\n-// unconst and bad, will thus error in miri\n-const X2: bool = unsafe { 42 as *const i32 == 43 as *const i32 }; //~ ERROR any use of this\n-// unconst and fine\n-const Y: usize = unsafe { 42usize as *const i32 as usize + 1 };\n-// unconst and bad, will thus error in miri\n-const Y2: usize = unsafe { &1 as *const i32 as usize + 1 }; //~ ERROR any use of this\n-// unconst and fine\n-const Z: i32 = unsafe { *(&1 as *const i32) };\n+const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 }; //~ ERROR cannot be reliably\n // unconst and bad, will thus error in miri\n-const Z2: i32 = unsafe { *(42 as *const i32) }; //~ ERROR any use of this value will cause\n-const Z3: i32 = unsafe { *(44 as *const i32) }; //~ ERROR any use of this value will cause\n+const X2: bool = unsafe { 42 as *const i32 == 43 as *const i32 }; //~ ERROR cannot be reliably"}, {"sha": "21d3f5e7e853651c48fdb33b532c68d8e6543288", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops.stderr", "status": "modified", "additions": 9, "deletions": 35, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -1,44 +1,18 @@\n-error: any use of this value will cause an error\n-  --> $DIR/const_raw_ptr_ops.rs:6:26\n+error: pointers cannot be reliably compared during const eval.\n+  --> $DIR/const_raw_ptr_ops.rs:4:26\n    |\n LL | const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 };\n-   | -------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                          |\n-   |                          \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[deny(const_err)]` on by default\n+   = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n \n-error: any use of this value will cause an error\n-  --> $DIR/const_raw_ptr_ops.rs:8:27\n+error: pointers cannot be reliably compared during const eval.\n+  --> $DIR/const_raw_ptr_ops.rs:6:27\n    |\n LL | const X2: bool = unsafe { 42 as *const i32 == 43 as *const i32 };\n-   | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n-   |                           |\n-   |                           \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n-\n-error: any use of this value will cause an error\n-  --> $DIR/const_raw_ptr_ops.rs:12:28\n-   |\n-LL | const Y2: usize = unsafe { &1 as *const i32 as usize + 1 };\n-   | ---------------------------^^^^^^^^^^^^^^^^^^^^^^^^^-------\n-   |                            |\n-   |                            \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n-\n-error: any use of this value will cause an error\n-  --> $DIR/const_raw_ptr_ops.rs:16:26\n-   |\n-LL | const Z2: i32 = unsafe { *(42 as *const i32) };\n-   | -------------------------^^^^^^^^^^^^^^^^^^^---\n-   |                          |\n-   |                          unable to turn bytes into a pointer\n-\n-error: any use of this value will cause an error\n-  --> $DIR/const_raw_ptr_ops.rs:17:26\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-LL | const Z3: i32 = unsafe { *(44 as *const i32) };\n-   | -------------------------^^^^^^^^^^^^^^^^^^^---\n-   |                          |\n-   |                          unable to turn bytes into a pointer\n+   = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "d2a7623837a23ee612a17f4e491f4cc3db8d0e9d", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops2.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.rs?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -0,0 +1,13 @@\n+#![feature(const_raw_ptr_to_usize_cast, const_raw_ptr_deref)]\n+\n+fn main() {}\n+\n+// unconst and fine\n+const Y: usize = unsafe { 42usize as *const i32 as usize + 1 };\n+// unconst and bad, will thus error in miri\n+const Y2: usize = unsafe { &1 as *const i32 as usize + 1 }; //~ ERROR any use of this\n+// unconst and fine\n+const Z: i32 = unsafe { *(&1 as *const i32) };\n+// unconst and bad, will thus error in miri\n+const Z2: i32 = unsafe { *(42 as *const i32) }; //~ ERROR any use of this value will cause\n+const Z3: i32 = unsafe { *(44 as *const i32) }; //~ ERROR any use of this value will cause"}, {"sha": "93f2261745d6f2fca2431861eb4e65c509b2626a", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops2.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -0,0 +1,28 @@\n+error: any use of this value will cause an error\n+  --> $DIR/const_raw_ptr_ops2.rs:8:28\n+   |\n+LL | const Y2: usize = unsafe { &1 as *const i32 as usize + 1 };\n+   | ---------------------------^^^^^^^^^^^^^^^^^^^^^^^^^-------\n+   |                            |\n+   |                            \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const_raw_ptr_ops2.rs:12:26\n+   |\n+LL | const Z2: i32 = unsafe { *(42 as *const i32) };\n+   | -------------------------^^^^^^^^^^^^^^^^^^^---\n+   |                          |\n+   |                          unable to turn bytes into a pointer\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const_raw_ptr_ops2.rs:13:26\n+   |\n+LL | const Z3: i32 = unsafe { *(44 as *const i32) };\n+   | -------------------------^^^^^^^^^^^^^^^^^^^---\n+   |                          |\n+   |                          unable to turn bytes into a pointer\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "d724fe3060b21b748998189dd2e68a9c14f30d75", "filename": "src/test/ui/consts/const-eval/promoted_raw_ptr_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.rs?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_raw_ptr_to_usize_cast, const_compare_raw_pointers, const_raw_ptr_deref)]\n+#![feature(const_raw_ptr_to_usize_cast, const_raw_ptr_deref)]\n \n fn main() {\n     let x: &'static bool = &(42 as *const i32 == 43 as *const i32);"}, {"sha": "21f11dda5a66729a3339ae446018454657f52417", "filename": "src/test/ui/consts/miri_unleashed/ptr_arith.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -12,7 +12,7 @@ LL |     let _v = x + 0;\n \n warning: skipping const checks\n    |\n-help: skipping check for `const_compare_raw_pointers` feature\n+help: skipping check that does not even have a feature gate\n   --> $DIR/ptr_arith.rs:9:14\n    |\n LL |     let _v = x == x;"}, {"sha": "fd843105daf2a8a3a819a905e49354446536d7ba", "filename": "src/test/ui/consts/miri_unleashed/slice_eq.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fslice_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fslice_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fslice_eq.rs?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -0,0 +1,17 @@\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n+// run-pass\n+\n+#![feature(const_raw_ptr_comparison)]\n+\n+const EMPTY_SLICE: &[i32] = &[];\n+const EMPTY_EQ: bool = EMPTY_SLICE.as_ptr().guaranteed_eq(&[] as *const _);\n+const EMPTY_EQ2: bool = EMPTY_SLICE.as_ptr().guaranteed_ne(&[] as *const _);\n+const EMPTY_NE: bool = EMPTY_SLICE.as_ptr().guaranteed_ne(&[1] as *const _);\n+const EMPTY_NE2: bool = EMPTY_SLICE.as_ptr().guaranteed_eq(&[1] as *const _);\n+\n+fn main() {\n+    assert!(!EMPTY_EQ);\n+    assert!(!EMPTY_EQ2);\n+    assert!(!EMPTY_NE);\n+    assert!(!EMPTY_NE2);\n+}"}, {"sha": "d2edd97efb232e6bd2a34d6053ea5a79f5a4672b", "filename": "src/test/ui/error-codes/E0395.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Ferror-codes%2FE0395.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Ferror-codes%2FE0395.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0395.rs?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -1,10 +1,8 @@\n-// gate-test-const_compare_raw_pointers\n-\n static FOO: i32 = 42;\n static BAR: i32 = 42;\n \n static BAZ: bool = unsafe { (&FOO as *const i32) == (&BAR as *const i32) };\n-//~^ ERROR comparing raw pointers inside static\n+//~^ ERROR pointers cannot be reliably compared during const eval\n \n fn main() {\n }"}, {"sha": "674cc696450290625d5366140775b41f698da39e", "filename": "src/test/ui/error-codes/E0395.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -1,12 +1,10 @@\n-error[E0658]: comparing raw pointers inside static\n-  --> $DIR/E0395.rs:6:29\n+error: pointers cannot be reliably compared during const eval.\n+  --> $DIR/E0395.rs:4:29\n    |\n LL | static BAZ: bool = unsafe { (&FOO as *const i32) == (&BAR as *const i32) };\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n-   = help: add `#![feature(const_compare_raw_pointers)]` to the crate attributes to enable\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "dc602ba7e6f2138d5e3d0321a80dd0eb384d63ba", "filename": "src/test/ui/feature-gates/feature-gate-const_generics-ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.rs?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -1,9 +1,9 @@\n struct ConstFn<const F: fn()>;\n //~^ ERROR const generics are unstable\n-//~^^ ERROR using function pointers as const generic parameters is unstable\n+//~^^ ERROR using function pointers as const generic parameters is forbidden\n \n struct ConstPtr<const P: *const u32>;\n //~^ ERROR const generics are unstable\n-//~^^ ERROR using raw pointers as const generic parameters is unstable\n+//~^^ ERROR using raw pointers as const generic parameters is forbidden\n \n fn main() {}"}, {"sha": "b2c96d3810f980fae1e4543247b354ebfc5bc33e", "filename": "src/test/ui/feature-gates/feature-gate-const_generics-ptr.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.stderr?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -16,23 +16,17 @@ LL | struct ConstPtr<const P: *const u32>;\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n-error[E0658]: using function pointers as const generic parameters is unstable\n+error: using function pointers as const generic parameters is forbidden\n   --> $DIR/feature-gate-const_generics-ptr.rs:1:25\n    |\n LL | struct ConstFn<const F: fn()>;\n    |                         ^^^^\n-   |\n-   = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n-   = help: add `#![feature(const_compare_raw_pointers)]` to the crate attributes to enable\n \n-error[E0658]: using raw pointers as const generic parameters is unstable\n+error: using raw pointers as const generic parameters is forbidden\n   --> $DIR/feature-gate-const_generics-ptr.rs:5:26\n    |\n LL | struct ConstPtr<const P: *const u32>;\n    |                          ^^^^^^^^^^\n-   |\n-   = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n-   = help: add `#![feature(const_compare_raw_pointers)]` to the crate attributes to enable\n \n error: aborting due to 4 previous errors\n "}, {"sha": "d1093c205798a0b8875111e57d65d23625d0e74b", "filename": "src/test/ui/issues/issue-25826.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fissues%2Fissue-25826.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fissues%2Fissue-25826.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25826.rs?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -1,6 +1,6 @@\n fn id<T>(t: T) -> T { t }\n fn main() {\n     const A: bool = unsafe { id::<u8> as *const () < id::<u16> as *const () };\n-    //~^ ERROR comparing raw pointers inside constant\n+    //~^ ERROR pointers cannot be reliably compared during const eval\n     println!(\"{}\", A);\n }"}, {"sha": "67d1b3ab9bed60589b671ed483f99bf91666f6ff", "filename": "src/test/ui/issues/issue-25826.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fissues%2Fissue-25826.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Fissues%2Fissue-25826.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25826.stderr?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -1,12 +1,10 @@\n-error[E0658]: comparing raw pointers inside constant\n+error: pointers cannot be reliably compared during const eval.\n   --> $DIR/issue-25826.rs:3:30\n    |\n LL |     const A: bool = unsafe { id::<u8> as *const () < id::<u16> as *const () };\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n-   = help: add `#![feature(const_compare_raw_pointers)]` to the crate attributes to enable\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "963d892931a7503b874cb5f9cf8d373694ffc01d", "filename": "src/test/ui/unsafe/unsafe-unstable-const-fn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.rs?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -1,13 +1,13 @@\n #![stable(feature = \"foo\", since = \"1.33.0\")]\n #![feature(staged_api)]\n-#![feature(const_compare_raw_pointers)]\n+#![feature(const_raw_ptr_deref)]\n #![feature(const_fn)]\n \n #[stable(feature = \"foo\", since = \"1.33.0\")]\n #[rustc_const_unstable(feature = \"const_foo\", issue = \"none\")]\n-const fn unstable(a: *const i32, b: *const i32) -> bool {\n-    a == b\n-    //~^ pointer operation is unsafe\n+const fn unstable(a: *const i32, b: i32) -> bool {\n+    *a == b\n+    //~^ dereference of raw pointer is unsafe\n }\n \n fn main() {}"}, {"sha": "4642a7a5fc9f83dd3a98a981dc9d19267844a4f7", "filename": "src/test/ui/unsafe/unsafe-unstable-const-fn.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.stderr?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -1,10 +1,10 @@\n-error[E0133]: pointer operation is unsafe and requires unsafe function or block\n+error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n   --> $DIR/unsafe-unstable-const-fn.rs:9:5\n    |\n-LL |     a == b\n-   |     ^^^^^^ pointer operation\n+LL |     *a == b\n+   |     ^^ dereference of raw pointer\n    |\n-   = note: operations on pointers in constants\n+   = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n error: aborting due to previous error\n "}, {"sha": "3fa637b5a696f4824b2b42d60d21ebc40eb973ef", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae38698e7fca180d612dc11be12023076e23236c/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=ae38698e7fca180d612dc11be12023076e23236c", "patch": "@@ -444,10 +444,7 @@ fn map_lib_features(\n                         level: Status::Unstable,\n                         since: None,\n                         has_gate_test: false,\n-                        // FIXME(#57563): #57563 is now used as a common tracking issue,\n-                        // although we would like to have specific tracking issues for each\n-                        // `rustc_const_unstable` in the future.\n-                        tracking_issue: NonZeroU32::new(57563),\n+                        tracking_issue: find_attr_val(line, \"issue\").and_then(handle_issue_none),\n                     };\n                     mf(Ok((feature_name, feature)), file, i + 1);\n                     continue;"}]}