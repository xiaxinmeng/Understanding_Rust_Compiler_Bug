{"sha": "0f0f3138cb80137b9277b29118c05dbff9a8915e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMGYzMTM4Y2I4MDEzN2I5Mjc3YjI5MTE4YzA1ZGJmZjlhODkxNWU=", "commit": {"author": {"name": "Camille Gillot", "email": "gillot.camille@gmail.com", "date": "2021-06-01T07:05:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-01T07:05:22Z"}, "message": "Revert \"Reduce the amount of untracked state in TyCtxt\"", "tree": {"sha": "4809ba7275fdf021453562db97dc0f0e9a5fd598", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4809ba7275fdf021453562db97dc0f0e9a5fd598"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f0f3138cb80137b9277b29118c05dbff9a8915e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgtdwyCRBK7hj4Ov3rIwAAtQwIAAe0xDveqXDmRsICNaVNdBrA\nA0vgOaKYeZ0ixLFrI/BaAq4vFZLgA9KtkZE62yGb4sDmomro5J8Tsb2WeGyoh7l2\nl4LJCnxtaAEbRNsarkvjJr/PtwOsEfKoSno7CDP4F7hzD+BdLoLGFgwkcjlIgAru\nub7pkbGbK9BAM0LlPI6Gt+s08HAIlQQAGpM9vY0CWT5VVbXeeaPClgnbs+wSWYGR\nttN1Pc4DTix6y0jfkSRX/gDnwoUhB2qEYyRUTiBIPXP8wo5QC8F1x8LR01woICTf\nEcMkN8AHeQweuAAxWih1yGQGImaSy7LZu21kftVWhQ3yVhJWQWNjjurfcafGcJE=\n=Jq3P\n-----END PGP SIGNATURE-----\n", "payload": "tree 4809ba7275fdf021453562db97dc0f0e9a5fd598\nparent c9c1f8be3fda5b58520c579451d3f5e20736ec90\nauthor Camille Gillot <gillot.camille@gmail.com> 1622531122 +0200\ncommitter GitHub <noreply@github.com> 1622531122 +0200\n\nRevert \"Reduce the amount of untracked state in TyCtxt\"\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f0f3138cb80137b9277b29118c05dbff9a8915e", "html_url": "https://github.com/rust-lang/rust/commit/0f0f3138cb80137b9277b29118c05dbff9a8915e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f0f3138cb80137b9277b29118c05dbff9a8915e/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9c1f8be3fda5b58520c579451d3f5e20736ec90", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9c1f8be3fda5b58520c579451d3f5e20736ec90", "html_url": "https://github.com/rust-lang/rust/commit/c9c1f8be3fda5b58520c579451d3f5e20736ec90"}], "stats": {"total": 489, "additions": 255, "deletions": 234}, "files": [{"sha": "df7d84419414891b67cc44c1f610316a6211a378", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -3677,7 +3677,6 @@ dependencies = [\n  \"rustc_incremental\",\n  \"rustc_index\",\n  \"rustc_llvm\",\n- \"rustc_metadata\",\n  \"rustc_middle\",\n  \"rustc_serialize\",\n  \"rustc_session\","}, {"sha": "cd27f958e4641868450fbd841313b0b006bc3176", "filename": "compiler/rustc_ast/src/expand/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_ast%2Fsrc%2Fexpand%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_ast%2Fsrc%2Fexpand%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fexpand%2Fallocator.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -1,6 +1,6 @@\n use rustc_span::symbol::{sym, Symbol};\n \n-#[derive(Clone, Debug, Copy, HashStable_Generic)]\n+#[derive(Clone, Copy)]\n pub enum AllocatorKind {\n     Global,\n     Default,"}, {"sha": "6f1772ff8188da778b446e935f5e591dbc3ce8c3", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -43,7 +43,7 @@ use rustc_ast::walk_list;\n use rustc_ast::{self as ast, *};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::captures::Captures;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n@@ -198,7 +198,7 @@ pub trait ResolverAstLowering {\n \n     fn next_node_id(&mut self) -> NodeId;\n \n-    fn take_trait_map(&mut self) -> NodeMap<Vec<hir::TraitCandidate>>;\n+    fn trait_map(&self) -> &NodeMap<Vec<hir::TraitCandidate>>;\n \n     fn opt_local_def_id(&self, node: NodeId) -> Option<LocalDefId>;\n \n@@ -501,13 +501,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let proc_macros =\n             c.proc_macros.iter().map(|id| self.node_id_to_hir_id[*id].unwrap()).collect();\n \n-        let mut trait_map: FxHashMap<_, FxHashMap<_, _>> = FxHashMap::default();\n-        for (k, v) in self.resolver.take_trait_map().into_iter() {\n-            if let Some(Some(hir_id)) = self.node_id_to_hir_id.get(k) {\n-                let map = trait_map.entry(hir_id.owner).or_default();\n-                map.insert(hir_id.local_id, v.into_boxed_slice());\n-            }\n-        }\n+        let trait_map = self\n+            .resolver\n+            .trait_map()\n+            .iter()\n+            .filter_map(|(&k, v)| {\n+                self.node_id_to_hir_id.get(k).and_then(|id| id.as_ref()).map(|id| (*id, v.clone()))\n+            })\n+            .collect();\n \n         let mut def_id_to_hir_id = IndexVec::default();\n "}, {"sha": "357a9f2daf746e67e4f9bdea0e38a37637251e27", "filename": "compiler/rustc_codegen_cranelift/src/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -19,7 +19,7 @@ pub(crate) fn codegen(\n     });\n     if any_dynamic_crate {\n         false\n-    } else if let Some(kind) = tcx.allocator_kind(()) {\n+    } else if let Some(kind) = tcx.allocator_kind() {\n         codegen_inner(module, unwind_context, kind);\n         true\n     } else {"}, {"sha": "4ee887cd5afaef819a65ed333e6bbbed3e8e8b16", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -14,7 +14,6 @@ extern crate rustc_fs_util;\n extern crate rustc_hir;\n extern crate rustc_incremental;\n extern crate rustc_index;\n-extern crate rustc_metadata;\n extern crate rustc_session;\n extern crate rustc_span;\n extern crate rustc_target;"}, {"sha": "ab238244d68d504c983bfff1ffea366fd6eb7c5f", "filename": "compiler/rustc_codegen_cranelift/src/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmetadata.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -10,7 +10,7 @@ pub(crate) fn write_metadata<O: WriteMetadata>(tcx: TyCtxt<'_>, object: &mut O)\n     use std::io::Write;\n \n     let metadata = tcx.encode_metadata();\n-    let mut compressed = rustc_metadata::METADATA_HEADER.to_vec();\n+    let mut compressed = tcx.metadata_encoding_version();\n     FrameEncoder::new(&mut compressed).write_all(&metadata.raw_data).unwrap();\n \n     object.add_rustc_section("}, {"sha": "4999cb3c7ab42e3303e74139aede92b0d88cb0bc", "filename": "compiler/rustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2FCargo.toml?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -27,7 +27,6 @@ rustc_hir = { path = \"../rustc_hir\" }\n rustc_incremental = { path = \"../rustc_incremental\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_llvm = { path = \"../rustc_llvm\" }\n-rustc_metadata = { path = \"../rustc_metadata\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_target = { path = \"../rustc_target\" }"}, {"sha": "893c909b204166eb09dd226a830bb0197ae2fdbe", "filename": "compiler/rustc_codegen_llvm/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -63,7 +63,7 @@ pub fn write_compressed_metadata<'tcx>(\n     let section_name = if tcx.sess.target.is_like_osx { \"__DATA,.rustc\" } else { \".rustc\" };\n \n     let (metadata_llcx, metadata_llmod) = (&*llvm_module.llcx, llvm_module.llmod());\n-    let mut compressed = rustc_metadata::METADATA_HEADER.to_vec();\n+    let mut compressed = tcx.metadata_encoding_version();\n     FrameEncoder::new(&mut compressed).write_all(&metadata.raw_data).unwrap();\n \n     let llmeta = common::bytes_in_context(metadata_llcx, &compressed);"}, {"sha": "14d6f0ba147b53773c15ed6509d46d4270ef4f89", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -180,7 +180,7 @@ fn exported_symbols_provider_local(\n         symbols.push((exported_symbol, SymbolExportLevel::C));\n     }\n \n-    if tcx.allocator_kind(()).is_some() {\n+    if tcx.allocator_kind().is_some() {\n         for method in ALLOCATOR_METHODS {\n             let symbol_name = format!(\"__rust_{}\", method.name);\n             let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(tcx, &symbol_name));"}, {"sha": "b44e74d5ae8209d430a523b82286781049c05aa8", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -517,7 +517,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     });\n     let allocator_module = if any_dynamic_crate {\n         None\n-    } else if let Some(kind) = tcx.allocator_kind(()) {\n+    } else if let Some(kind) = tcx.allocator_kind() {\n         let llmod_id =\n             cgu_name_builder.build_cgu_name(LOCAL_CRATE, &[\"crate\"], Some(\"allocator\")).to_string();\n         let mut modules = backend.new_metadata(tcx, &llmod_id);"}, {"sha": "ff28784a1dc4264b3c9f37fa95419028e16550bd", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -550,3 +550,35 @@ pub fn hash_stable_hashmap<HCX, K, V, R, SK, F>(\n     entries.sort_unstable_by(|&(ref sk1, _), &(ref sk2, _)| sk1.cmp(sk2));\n     entries.hash_stable(hcx, hasher);\n }\n+\n+/// A vector container that makes sure that its items are hashed in a stable\n+/// order.\n+#[derive(Debug)]\n+pub struct StableVec<T>(Vec<T>);\n+\n+impl<T> StableVec<T> {\n+    pub fn new(v: Vec<T>) -> Self {\n+        StableVec(v)\n+    }\n+}\n+\n+impl<T> ::std::ops::Deref for StableVec<T> {\n+    type Target = Vec<T>;\n+\n+    fn deref(&self) -> &Vec<T> {\n+        &self.0\n+    }\n+}\n+\n+impl<T, HCX> HashStable<HCX> for StableVec<T>\n+where\n+    T: HashStable<HCX> + ToStableHashKey<HCX>,\n+{\n+    fn hash_stable(&self, hcx: &mut HCX, hasher: &mut StableHasher) {\n+        let StableVec(ref v) = *self;\n+\n+        let mut sorted: Vec<_> = v.iter().map(|x| x.to_stable_hash_key(hcx)).collect();\n+        sorted.sort_unstable();\n+        sorted.hash_stable(hcx, hasher);\n+    }\n+}"}, {"sha": "b05ca381b8ab6e9263be40f01a2e17fa2258073c", "filename": "compiler/rustc_hir/src/arena.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Farena.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -43,7 +43,6 @@ macro_rules! arena_types {\n             [] stmt: rustc_hir::Stmt<$tcx>,\n             [] field_def: rustc_hir::FieldDef<$tcx>,\n             [] trait_item_ref: rustc_hir::TraitItemRef,\n-            [] trait_candidate: rustc_hir::TraitCandidate,\n             [] ty: rustc_hir::Ty<$tcx>,\n             [] type_binding: rustc_hir::TypeBinding<$tcx>,\n             [] variant: rustc_hir::Variant<$tcx>,"}, {"sha": "77aad0baef523c7a2b501c0f6a97004f129ec907", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -25,7 +25,7 @@ use tracing::debug;\n /// Internally the `DefPathTable` holds a tree of `DefKey`s, where each `DefKey`\n /// stores the `DefIndex` of its parent.\n /// There is one `DefPathTable` for each crate.\n-#[derive(Clone, Default, Debug)]\n+#[derive(Clone, Default)]\n pub struct DefPathTable {\n     index_to_key: IndexVec<DefIndex, DefKey>,\n     def_path_hashes: IndexVec<DefIndex, DefPathHash>,\n@@ -107,7 +107,7 @@ impl DefPathTable {\n /// The definition table containing node definitions.\n /// It holds the `DefPathTable` for `LocalDefId`s/`DefPath`s.\n /// It also stores mappings to convert `LocalDefId`s to/from `HirId`s.\n-#[derive(Clone, Debug)]\n+#[derive(Clone)]\n pub struct Definitions {\n     table: DefPathTable,\n "}, {"sha": "91fd97a0d4020150e23f8ecdca355c43d8957ad8", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -1,7 +1,7 @@\n // ignore-tidy-filelength\n use crate::def::{CtorKind, DefKind, Res};\n use crate::def_id::DefId;\n-crate use crate::hir_id::{HirId, ItemLocalId};\n+crate use crate::hir_id::HirId;\n use crate::{itemlikevisit, LangItem};\n \n use rustc_ast::util::parser::ExprPrecedence;\n@@ -10,7 +10,6 @@ use rustc_ast::{Attribute, FloatTy, IntTy, Label, LitKind, StrStyle, TraitObject\n pub use rustc_ast::{BorrowKind, ImplPolarity, IsAuto};\n pub use rustc_ast::{CaptureBy, Movability, Mutability};\n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n-use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n use rustc_macros::HashStable_Generic;\n use rustc_span::source_map::Spanned;\n@@ -659,9 +658,7 @@ pub struct Crate<'hir> {\n     /// they are declared in the static array generated by proc_macro_harness.\n     pub proc_macros: Vec<HirId>,\n \n-    /// Map indicating what traits are in scope for places where this\n-    /// is relevant; generated by resolve.\n-    pub trait_map: FxHashMap<LocalDefId, FxHashMap<ItemLocalId, Box<[TraitCandidate]>>>,\n+    pub trait_map: BTreeMap<HirId, Vec<TraitCandidate>>,\n \n     /// Collected attributes from HIR nodes.\n     pub attrs: BTreeMap<HirId, &'hir [Attribute]>,"}, {"sha": "680f6af63f26c6528bdf9dacb62f58ac88de2c5a", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -524,7 +524,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n \n             fn path_crate(self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {\n-                Ok(vec![self.tcx.crate_name(cnum).to_string()])\n+                Ok(vec![self.tcx.original_crate_name(cnum).to_string()])\n             }\n             fn path_qualified(\n                 self,"}, {"sha": "dd4caab28dc523906a5877da1df8b06438180028", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -799,7 +799,7 @@ pub fn create_global_ctxt<'tcx>(\n                 query_result_on_disk_cache,\n                 queries.as_dyn(),\n                 &crate_name,\n-                outputs,\n+                &outputs,\n             )\n         })\n     });"}, {"sha": "c1d6a4f1de1ffa4789e366d57de329e711b81dde", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -922,7 +922,7 @@ impl<'tcx> LateContext<'tcx> {\n             }\n \n             fn path_crate(self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {\n-                Ok(vec![self.tcx.crate_name(cnum)])\n+                Ok(vec![self.tcx.original_crate_name(cnum)])\n             }\n \n             fn path_qualified("}, {"sha": "42c32219aba417e4c2b8826c58a0b4ad3aed2187", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -51,12 +51,6 @@ pub struct CStore {\n     unused_externs: Vec<Symbol>,\n }\n \n-impl std::fmt::Debug for CStore {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        f.debug_struct(\"CStore\").finish_non_exhaustive()\n-    }\n-}\n-\n pub struct CrateLoader<'a> {\n     // Immutable configuration.\n     sess: &'a Session,"}, {"sha": "15c9eda9902c412d842dd3f874a9da077d2f5b87", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -31,5 +31,3 @@ mod rmeta;\n pub mod creader;\n pub mod dynamic_lib;\n pub mod locator;\n-\n-pub use rmeta::METADATA_HEADER;"}, {"sha": "02d1cf9aec79f84b997404d4a663fdd295c254c7", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -1,7 +1,7 @@\n use crate::creader::{CStore, LoadedMacro};\n use crate::foreign_modules;\n use crate::native_libs;\n-use crate::rmeta::encoder;\n+use crate::rmeta::{self, encoder};\n \n use rustc_ast as ast;\n use rustc_ast::expand::allocator::AllocatorKind;\n@@ -187,8 +187,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     foreign_modules => { cdata.get_foreign_modules(tcx) }\n     crate_hash => { cdata.root.hash }\n     crate_host_hash => { cdata.host_hash }\n-    crate_name => { cdata.root.name }\n-    is_private_dep => { cdata.private_dep }\n+    original_crate_name => { cdata.root.name }\n \n     extra_filename => { cdata.root.extra_filename.clone() }\n \n@@ -205,6 +204,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         let r = *cdata.dep_kind.lock();\n         r\n     }\n+    crate_name => { cdata.root.name }\n     item_children => {\n         let mut result = SmallVec::<[_; 8]>::new();\n         cdata.each_child_of_item(def_id.index, |child| result.push(child), tcx.sess);\n@@ -477,6 +477,10 @@ impl CrateStore for CStore {\n         self.get_crate_data(cnum).root.name\n     }\n \n+    fn crate_is_private_dep_untracked(&self, cnum: CrateNum) -> bool {\n+        self.get_crate_data(cnum).private_dep\n+    }\n+\n     fn stable_crate_id_untracked(&self, cnum: CrateNum) -> StableCrateId {\n         self.get_crate_data(cnum).root.stable_crate_id\n     }\n@@ -524,6 +528,10 @@ impl CrateStore for CStore {\n         encoder::encode_metadata(tcx)\n     }\n \n+    fn metadata_encoding_version(&self) -> &[u8] {\n+        rmeta::METADATA_HEADER\n+    }\n+\n     fn allocator_kind(&self) -> Option<AllocatorKind> {\n         self.allocator_kind()\n     }"}, {"sha": "5c45e4130d2d7828a403d810d5e34c0ae4a082ed", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -445,7 +445,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     }\n \n     fn encode_def_path_table(&mut self) {\n-        let table = self.tcx.resolutions(()).definitions.def_path_table();\n+        let table = self.tcx.hir().definitions().def_path_table();\n         if self.is_proc_macro {\n             for def_index in std::iter::once(CRATE_DEF_INDEX)\n                 .chain(self.tcx.hir().krate().proc_macros.iter().map(|p| p.owner.local_def_index))\n@@ -1062,7 +1062,7 @@ impl EncodeContext<'a, 'tcx> {\n \n         let data = ModData {\n             reexports,\n-            expansion: tcx.resolutions(()).definitions.expansion_that_defined(local_def_id),\n+            expansion: tcx.hir().definitions().expansion_that_defined(local_def_id),\n         };\n \n         record!(self.tables.kind[def_id] <- EntryKind::Mod(self.lazy(data)));\n@@ -1673,7 +1673,7 @@ impl EncodeContext<'a, 'tcx> {\n             .iter()\n             .map(|&cnum| {\n                 let dep = CrateDep {\n-                    name: self.tcx.crate_name(cnum),\n+                    name: self.tcx.original_crate_name(cnum),\n                     hash: self.tcx.crate_hash(cnum),\n                     host_hash: self.tcx.crate_host_hash(cnum),\n                     kind: self.tcx.dep_kind(cnum),\n@@ -1754,7 +1754,7 @@ impl EncodeContext<'a, 'tcx> {\n             .map(|(trait_def_id, mut impls)| {\n                 // Bring everything into deterministic order for hashing\n                 impls.sort_by_cached_key(|&(index, _)| {\n-                    tcx.hir().def_path_hash(LocalDefId { local_def_index: index })\n+                    tcx.hir().definitions().def_path_hash(LocalDefId { local_def_index: index })\n                 });\n \n                 TraitImpls {"}, {"sha": "9a3a6284c36105abe8fd6911c78d7e74352aa835", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -51,7 +51,7 @@ const METADATA_VERSION: u8 = 5;\n /// This header is followed by the position of the `CrateRoot`,\n /// which is encoded as a 32-bit big-endian unsigned integer,\n /// and further followed by the rustc version string.\n-pub const METADATA_HEADER: &[u8; 8] = &[b'r', b'u', b's', b't', 0, 0, 0, METADATA_VERSION];\n+crate const METADATA_HEADER: &[u8; 8] = &[b'r', b'u', b's', b't', 0, 0, 0, METADATA_VERSION];\n \n /// Additional metadata for a `Lazy<T>` where `T` may not be `Sized`,\n /// e.g. for `Lazy<[T]>`, this is the length (count of `T` values)."}, {"sha": "aa54d1ae7b9d118426d9702dac6384725e0b50c4", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -285,7 +285,7 @@ pub type DepNode = rustc_query_system::dep_graph::DepNode<DepKind>;\n // required that their size stay the same, but we don't want to change\n // it inadvertently. This assert just ensures we're aware of any change.\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-static_assert_size!(DepNode, 18);\n+static_assert_size!(DepNode, 17);\n \n #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n static_assert_size!(DepNode, 24);"}, {"sha": "07b39c97c492a23d88928177f3884accbd0ed318", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 15, "deletions": 35, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -9,7 +9,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::svh::Svh;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n+use rustc_hir::definitions::{DefKey, DefPath, Definitions};\n use rustc_hir::intravisit;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n@@ -154,24 +154,21 @@ impl<'hir> Map<'hir> {\n         self.tcx.hir_crate(())\n     }\n \n+    #[inline]\n+    pub fn definitions(&self) -> &'hir Definitions {\n+        &self.tcx.definitions\n+    }\n+\n     pub fn def_key(&self, def_id: LocalDefId) -> DefKey {\n-        // Accessing the DefKey is ok, since it is part of DefPathHash.\n-        self.tcx.untracked_resolutions.definitions.def_key(def_id)\n+        self.tcx.definitions.def_key(def_id)\n     }\n \n     pub fn def_path_from_hir_id(&self, id: HirId) -> Option<DefPath> {\n         self.opt_local_def_id(id).map(|def_id| self.def_path(def_id))\n     }\n \n     pub fn def_path(&self, def_id: LocalDefId) -> DefPath {\n-        // Accessing the DefPath is ok, since it is part of DefPathHash.\n-        self.tcx.untracked_resolutions.definitions.def_path(def_id)\n-    }\n-\n-    #[inline]\n-    pub fn def_path_hash(self, def_id: LocalDefId) -> DefPathHash {\n-        // Accessing the DefPathHash is ok, it is incr. comp. stable.\n-        self.tcx.untracked_resolutions.definitions.def_path_hash(def_id)\n+        self.tcx.definitions.def_path(def_id)\n     }\n \n     #[inline]\n@@ -187,26 +184,16 @@ impl<'hir> Map<'hir> {\n \n     #[inline]\n     pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<LocalDefId> {\n-        // Create a dependency to the owner to ensure the query gets re-executed when the amount of\n-        // children changes.\n-        self.tcx.ensure().hir_owner_nodes(hir_id.owner);\n-        self.tcx.untracked_resolutions.definitions.opt_hir_id_to_local_def_id(hir_id)\n+        self.tcx.definitions.opt_hir_id_to_local_def_id(hir_id)\n     }\n \n     #[inline]\n     pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {\n-        let ret = self.tcx.untracked_resolutions.definitions.local_def_id_to_hir_id(def_id);\n-        // Create a dependency to the owner to ensure the query gets re-executed when the amount of\n-        // children changes.\n-        self.tcx.ensure().hir_owner_nodes(ret.owner);\n-        ret\n+        self.tcx.definitions.local_def_id_to_hir_id(def_id)\n     }\n \n     pub fn iter_local_def_id(&self) -> impl Iterator<Item = LocalDefId> + '_ {\n-        // Create a dependency to the crate to be sure we reexcute this when the amount of\n-        // definitions change.\n-        self.tcx.ensure().hir_crate(());\n-        self.tcx.untracked_resolutions.definitions.iter_local_def_id()\n+        self.tcx.definitions.iter_local_def_id()\n     }\n \n     pub fn opt_def_kind(&self, local_def_id: LocalDefId) -> Option<DefKind> {\n@@ -945,15 +932,9 @@ impl<'hir> intravisit::Map<'hir> for Map<'hir> {\n pub(super) fn index_hir<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> &'tcx IndexedHir<'tcx> {\n     let _prof_timer = tcx.sess.prof.generic_activity(\"build_hir_map\");\n \n-    // We can access untracked state since we are an eval_always query.\n     let hcx = tcx.create_stable_hashing_context();\n-    let mut collector = NodeCollector::root(\n-        tcx.sess,\n-        &**tcx.arena,\n-        tcx.untracked_crate,\n-        &tcx.untracked_resolutions.definitions,\n-        hcx,\n-    );\n+    let mut collector =\n+        NodeCollector::root(tcx.sess, &**tcx.arena, tcx.untracked_crate, &tcx.definitions, hcx);\n     intravisit::walk_crate(&mut collector, tcx.untracked_crate);\n \n     let map = collector.finalize_and_compute_crate_hash();\n@@ -963,15 +944,14 @@ pub(super) fn index_hir<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> &'tcx IndexedHir<'tc\n pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {\n     assert_eq!(crate_num, LOCAL_CRATE);\n \n-    // We can access untracked state since we are an eval_always query.\n     let mut hcx = tcx.create_stable_hashing_context();\n \n     let mut hir_body_nodes: Vec<_> = tcx\n         .index_hir(())\n         .map\n         .iter_enumerated()\n         .filter_map(|(def_id, hod)| {\n-            let def_path_hash = tcx.untracked_resolutions.definitions.def_path_hash(def_id);\n+            let def_path_hash = tcx.definitions.def_path_hash(def_id);\n             let mut hasher = StableHasher::new();\n             hod.as_ref()?.hash_stable(&mut hcx, &mut hasher);\n             AttributeMap { map: &tcx.untracked_crate.attrs, prefix: def_id }\n@@ -988,7 +968,7 @@ pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {\n         },\n     );\n \n-    let upstream_crates = upstream_crates(&*tcx.untracked_resolutions.cstore);\n+    let upstream_crates = upstream_crates(&*tcx.cstore);\n \n     // We hash the final, remapped names of all local source files so we\n     // don't have to include the path prefix remapping commandline args."}, {"sha": "e88b96bde8877bc0a4dc412005a227c3bd2a878c", "filename": "compiler/rustc_middle/src/middle/cstore.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -182,7 +182,7 @@ pub type MetadataLoaderDyn = dyn MetadataLoader + Sync;\n /// that it's *not* tracked for dependency information throughout compilation\n /// (it'd break incremental compilation) and should only be called pre-HIR (e.g.\n /// during resolve)\n-pub trait CrateStore: std::fmt::Debug {\n+pub trait CrateStore {\n     fn as_any(&self) -> &dyn Any;\n \n     // resolve\n@@ -199,6 +199,7 @@ pub trait CrateStore: std::fmt::Debug {\n \n     // \"queries\" used in resolve that aren't tracked for incremental compilation\n     fn crate_name_untracked(&self, cnum: CrateNum) -> Symbol;\n+    fn crate_is_private_dep_untracked(&self, cnum: CrateNum) -> bool;\n     fn stable_crate_id_untracked(&self, cnum: CrateNum) -> StableCrateId;\n     fn crate_hash_untracked(&self, cnum: CrateNum) -> Svh;\n \n@@ -208,6 +209,7 @@ pub trait CrateStore: std::fmt::Debug {\n \n     // utility functions\n     fn encode_metadata(&self, tcx: TyCtxt<'_>) -> EncodedMetadata;\n+    fn metadata_encoding_version(&self) -> &[u8];\n     fn allocator_kind(&self) -> Option<AllocatorKind>;\n }\n "}, {"sha": "26694afb51391a9959b7e41f1fbb523b5637677c", "filename": "compiler/rustc_middle/src/middle/exported_symbols.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fexported_symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fexported_symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fexported_symbols.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -49,7 +49,7 @@ impl<'tcx> ExportedSymbol<'tcx> {\n pub fn metadata_symbol_name(tcx: TyCtxt<'_>) -> String {\n     format!(\n         \"rust_metadata_{}_{:08x}\",\n-        tcx.crate_name(LOCAL_CRATE),\n+        tcx.original_crate_name(LOCAL_CRATE),\n         tcx.sess.local_stable_crate_id().to_u64(),\n     )\n }"}, {"sha": "9974f2bb8cac312366b3ce174e49169feffdb823", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -14,12 +14,6 @@ rustc_queries! {\n         desc { \"trigger a delay span bug\" }\n     }\n \n-    query resolutions(_: ()) -> &'tcx ty::ResolverOutputs {\n-        eval_always\n-        no_hash\n-        desc { \"get the resolver outputs\" }\n-    }\n-\n     /// Represents crate as a whole (as distinct from the top-level crate module).\n     /// If you call `hir_crate` (e.g., indirectly by calling `tcx.hir().krate()`),\n     /// we will have to assume that any change means that you need to be recompiled.\n@@ -1133,12 +1127,14 @@ rustc_queries! {\n         desc { \"computing whether impls specialize one another\" }\n     }\n     query in_scope_traits_map(_: LocalDefId)\n-        -> Option<&'tcx FxHashMap<ItemLocalId, Box<[TraitCandidate]>>> {\n+        -> Option<&'tcx FxHashMap<ItemLocalId, StableVec<TraitCandidate>>> {\n+        eval_always\n         desc { \"traits in scope at a block\" }\n     }\n \n     query module_exports(def_id: LocalDefId) -> Option<&'tcx [Export<LocalDefId>]> {\n         desc { |tcx| \"looking up items exported by `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n+        eval_always\n     }\n \n     query impl_defaultness(def_id: DefId) -> hir::Defaultness {\n@@ -1252,6 +1248,10 @@ rustc_queries! {\n         eval_always\n         desc { \"looking up the hash of a host version of a crate\" }\n     }\n+    query original_crate_name(_: CrateNum) -> Symbol {\n+        eval_always\n+        desc { \"looking up the original name a crate\" }\n+    }\n     query extra_filename(_: CrateNum) -> String {\n         eval_always\n         desc { \"looking up the extra filename for a crate\" }\n@@ -1328,6 +1328,7 @@ rustc_queries! {\n     }\n \n     query visibility(def_id: DefId) -> ty::Visibility {\n+        eval_always\n         desc { |tcx| \"computing visibility of `{}`\", tcx.def_path_str(def_id) }\n     }\n \n@@ -1352,6 +1353,8 @@ rustc_queries! {\n         desc { |tcx| \"collecting child items of `{}`\", tcx.def_path_str(def_id) }\n     }\n     query extern_mod_stmt_cnum(def_id: LocalDefId) -> Option<CrateNum> {\n+        // This depends on untracked global state (`tcx.extern_crate_map`)\n+        eval_always\n         desc { |tcx| \"computing crate imported by `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n     }\n \n@@ -1412,26 +1415,22 @@ rustc_queries! {\n         eval_always\n         desc { \"generating a postorder list of CrateNums\" }\n     }\n-    /// Returns whether or not the crate with CrateNum 'cnum'\n-    /// is marked as a private dependency\n-    query is_private_dep(c: CrateNum) -> bool {\n-        desc { \"check whether crate {} is a private dependency\", c }\n-    }\n-    query allocator_kind(_: ()) -> Option<AllocatorKind> {\n-        desc { \"allocator kind for the current crate\" }\n-    }\n \n     query upvars_mentioned(def_id: DefId) -> Option<&'tcx FxIndexMap<hir::HirId, hir::Upvar>> {\n         desc { |tcx| \"collecting upvars mentioned in `{}`\", tcx.def_path_str(def_id) }\n         eval_always\n     }\n     query maybe_unused_trait_import(def_id: LocalDefId) -> bool {\n+        eval_always\n         desc { |tcx| \"maybe_unused_trait_import for `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n     }\n     query maybe_unused_extern_crates(_: ()) -> &'tcx [(LocalDefId, Span)] {\n+        eval_always\n         desc { \"looking up all possibly unused extern crates\" }\n     }\n-    query names_imported_by_glob_use(def_id: LocalDefId) -> &'tcx FxHashSet<Symbol> {\n+    query names_imported_by_glob_use(def_id: LocalDefId)\n+        -> &'tcx FxHashSet<Symbol> {\n+        eval_always\n         desc { |tcx| \"names_imported_by_glob_use for `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n     }\n \n@@ -1441,6 +1440,7 @@ rustc_queries! {\n         desc { \"calculating the stability index for the local crate\" }\n     }\n     query all_crate_nums(_: ()) -> &'tcx [CrateNum] {\n+        eval_always\n         desc { \"fetching all foreign CrateNum instances\" }\n     }\n "}, {"sha": "a2b17e97c29d925d3c6d7feb84f62647a3ef8cb8", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 90, "deletions": 60, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -2,12 +2,13 @@\n \n use crate::arena::Arena;\n use crate::dep_graph::DepGraph;\n+use crate::hir::exports::ExportMap;\n use crate::hir::place::Place as HirPlace;\n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::infer::canonical::{Canonical, CanonicalVarInfo, CanonicalVarInfos};\n use crate::lint::{struct_lint_level, LintDiagnosticBuilder, LintLevelSource};\n use crate::middle;\n-use crate::middle::cstore::EncodedMetadata;\n+use crate::middle::cstore::{CrateStoreDyn, EncodedMetadata};\n use crate::middle::resolve_lifetime::{self, LifetimeScopeForPath, ObjectLifetimeDefault};\n use crate::middle::stability;\n use crate::mir::interpret::{self, Allocation, ConstValue, Scalar};\n@@ -20,22 +21,24 @@ use crate::ty::TyKind::*;\n use crate::ty::{\n     self, AdtDef, AdtKind, Binder, BindingMode, BoundVar, CanonicalPolyFnSig, Const, ConstVid,\n     DefIdTree, ExistentialPredicate, FloatTy, FloatVar, FloatVid, GenericParamDefKind, InferConst,\n-    InferTy, IntTy, IntVar, IntVid, List, ParamConst, ParamTy, PolyFnSig, Predicate,\n-    PredicateInner, PredicateKind, ProjectionTy, Region, RegionKind, ReprOptions,\n-    TraitObjectVisitor, Ty, TyKind, TyS, TyVar, TyVid, TypeAndMut, UintTy,\n+    InferTy, IntTy, IntVar, IntVid, List, MainDefinition, ParamConst, ParamTy, PolyFnSig,\n+    Predicate, PredicateInner, PredicateKind, ProjectionTy, Region, RegionKind, ReprOptions,\n+    TraitObjectVisitor, Ty, TyKind, TyS, TyVar, TyVid, TypeAndMut, UintTy, Visibility,\n };\n use rustc_ast as ast;\n+use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::sharded::{IntoPointer, ShardedHashMap};\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher, StableVec};\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{self, Lock, Lrc, WorkerLocal};\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::definitions::Definitions;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{\n@@ -934,6 +937,8 @@ pub struct GlobalCtxt<'tcx> {\n \n     interners: CtxtInterners<'tcx>,\n \n+    pub(crate) cstore: Box<CrateStoreDyn>,\n+\n     pub sess: &'tcx Session,\n \n     /// This only ever stores a `LintStore` but we don't want a dependency on that type here.\n@@ -955,10 +960,21 @@ pub struct GlobalCtxt<'tcx> {\n     /// Common consts, pre-interned for your convenience.\n     pub consts: CommonConsts<'tcx>,\n \n-    /// Output of the resolver.\n-    pub(crate) untracked_resolutions: ty::ResolverOutputs,\n+    /// Visibilities produced by resolver.\n+    pub visibilities: FxHashMap<LocalDefId, Visibility>,\n+\n+    /// Resolutions of `extern crate` items produced by resolver.\n+    extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n+\n+    /// Map indicating what traits are in scope for places where this\n+    /// is relevant; generated by resolve.\n+    trait_map: FxHashMap<LocalDefId, FxHashMap<ItemLocalId, StableVec<TraitCandidate>>>,\n+\n+    /// Export map produced by name resolution.\n+    export_map: ExportMap<LocalDefId>,\n \n     pub(crate) untracked_crate: &'tcx hir::Crate<'tcx>,\n+    pub(crate) definitions: Definitions,\n \n     /// This provides access to the incremental compilation on-disk cache for query results.\n     /// Do not access this directly. It is only meant to be used by\n@@ -969,6 +985,15 @@ pub struct GlobalCtxt<'tcx> {\n     pub queries: &'tcx dyn query::QueryEngine<'tcx>,\n     pub query_caches: query::QueryCaches<'tcx>,\n \n+    maybe_unused_trait_imports: FxHashSet<LocalDefId>,\n+    maybe_unused_extern_crates: Vec<(LocalDefId, Span)>,\n+    /// A map of glob use to a set of names it actually imports. Currently only\n+    /// used in save-analysis.\n+    pub(crate) glob_map: FxHashMap<LocalDefId, FxHashSet<Symbol>>,\n+    /// Extern prelude entries. The value is `true` if the entry was introduced\n+    /// via `extern crate` item and not `--extern` option or compiler built-in.\n+    pub extern_prelude: FxHashMap<Symbol, bool>,\n+\n     // Internal caches for metadata decoding. No need to track deps on this.\n     pub ty_rcache: Lock<FxHashMap<ty::CReaderCacheKey, Ty<'tcx>>>,\n     pub pred_rcache: Lock<FxHashMap<ty::CReaderCacheKey, Predicate<'tcx>>>,\n@@ -984,7 +1009,7 @@ pub struct GlobalCtxt<'tcx> {\n \n     /// The definite name of the current crate after taking into account\n     /// attributes, commandline parameters, etc.\n-    crate_name: Symbol,\n+    pub crate_name: Symbol,\n \n     /// Data layout specification for the current target.\n     pub data_layout: TargetDataLayout,\n@@ -1001,6 +1026,8 @@ pub struct GlobalCtxt<'tcx> {\n     layout_interner: ShardedHashMap<&'tcx Layout, ()>,\n \n     output_filenames: Arc<OutputFilenames>,\n+\n+    pub main_def: Option<MainDefinition>,\n }\n \n impl<'tcx> TyCtxt<'tcx> {\n@@ -1112,7 +1139,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         on_disk_cache: Option<query::OnDiskCache<'tcx>>,\n         queries: &'tcx dyn query::QueryEngine<'tcx>,\n         crate_name: &str,\n-        output_filenames: OutputFilenames,\n+        output_filenames: &OutputFilenames,\n     ) -> GlobalCtxt<'tcx> {\n         let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {\n             s.fatal(&err);\n@@ -1121,19 +1148,35 @@ impl<'tcx> TyCtxt<'tcx> {\n         let common_types = CommonTypes::new(&interners);\n         let common_lifetimes = CommonLifetimes::new(&interners);\n         let common_consts = CommonConsts::new(&interners, &common_types);\n+        let cstore = resolutions.cstore;\n+\n+        let mut trait_map: FxHashMap<_, FxHashMap<_, _>> = FxHashMap::default();\n+        for (hir_id, v) in krate.trait_map.iter() {\n+            let map = trait_map.entry(hir_id.owner).or_default();\n+            map.insert(hir_id.local_id, StableVec::new(v.to_vec()));\n+        }\n \n         GlobalCtxt {\n             sess: s,\n             lint_store,\n+            cstore,\n             arena,\n             interners,\n             dep_graph,\n-            untracked_resolutions: resolutions,\n             prof: s.prof.clone(),\n             types: common_types,\n             lifetimes: common_lifetimes,\n             consts: common_consts,\n+            visibilities: resolutions.visibilities,\n+            extern_crate_map: resolutions.extern_crate_map,\n+            trait_map,\n+            export_map: resolutions.export_map,\n+            maybe_unused_trait_imports: resolutions.maybe_unused_trait_imports,\n+            maybe_unused_extern_crates: resolutions.maybe_unused_extern_crates,\n+            glob_map: resolutions.glob_map,\n+            extern_prelude: resolutions.extern_prelude,\n             untracked_crate: krate,\n+            definitions: resolutions.definitions,\n             on_disk_cache,\n             queries,\n             query_caches: query::QueryCaches::default(),\n@@ -1147,7 +1190,8 @@ impl<'tcx> TyCtxt<'tcx> {\n             stability_interner: Default::default(),\n             const_stability_interner: Default::default(),\n             alloc_map: Lock::new(interpret::AllocMap::new()),\n-            output_filenames: Arc::new(output_filenames),\n+            output_filenames: Arc::new(output_filenames.clone()),\n+            main_def: resolutions.main_def,\n         }\n     }\n \n@@ -1206,17 +1250,16 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.all_crate_nums(())\n     }\n \n+    pub fn allocator_kind(self) -> Option<AllocatorKind> {\n+        self.cstore.allocator_kind()\n+    }\n+\n     pub fn features(self) -> &'tcx rustc_feature::Features {\n         self.features_query(())\n     }\n \n     pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {\n-        // Accessing the DefKey is ok, since it is part of DefPathHash.\n-        if let Some(id) = id.as_local() {\n-            self.untracked_resolutions.definitions.def_key(id)\n-        } else {\n-            self.untracked_resolutions.cstore.def_key(id)\n-        }\n+        if let Some(id) = id.as_local() { self.hir().def_key(id) } else { self.cstore.def_key(id) }\n     }\n \n     /// Converts a `DefId` into its fully expanded `DefPath` (every\n@@ -1225,21 +1268,25 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Note that if `id` is not local to this crate, the result will\n     ///  be a non-local `DefPath`.\n     pub fn def_path(self, id: DefId) -> rustc_hir::definitions::DefPath {\n-        // Accessing the DefPath is ok, since it is part of DefPathHash.\n         if let Some(id) = id.as_local() {\n-            self.untracked_resolutions.definitions.def_path(id)\n+            self.hir().def_path(id)\n         } else {\n-            self.untracked_resolutions.cstore.def_path(id)\n+            self.cstore.def_path(id)\n         }\n     }\n \n+    /// Returns whether or not the crate with CrateNum 'cnum'\n+    /// is marked as a private dependency\n+    pub fn is_private_dep(self, cnum: CrateNum) -> bool {\n+        if cnum == LOCAL_CRATE { false } else { self.cstore.crate_is_private_dep_untracked(cnum) }\n+    }\n+\n     #[inline]\n     pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {\n-        // Accessing the DefPathHash is ok, it is incr. comp. stable.\n         if let Some(def_id) = def_id.as_local() {\n-            self.untracked_resolutions.definitions.def_path_hash(def_id)\n+            self.definitions.def_path_hash(def_id)\n         } else {\n-            self.untracked_resolutions.cstore.def_path_hash(def_id)\n+            self.cstore.def_path_hash(def_id)\n         }\n     }\n \n@@ -1251,10 +1298,9 @@ impl<'tcx> TyCtxt<'tcx> {\n         let (crate_name, stable_crate_id) = if def_id.is_local() {\n             (self.crate_name, self.sess.local_stable_crate_id())\n         } else {\n-            let cstore = &self.untracked_resolutions.cstore;\n             (\n-                cstore.crate_name_untracked(def_id.krate),\n-                cstore.stable_crate_id_untracked(def_id.krate),\n+                self.cstore.crate_name_untracked(def_id.krate),\n+                self.def_path_hash(def_id.krate.as_def_id()).stable_crate_id(),\n             )\n         };\n \n@@ -1268,36 +1314,33 @@ impl<'tcx> TyCtxt<'tcx> {\n         )\n     }\n \n+    pub fn metadata_encoding_version(self) -> Vec<u8> {\n+        self.cstore.metadata_encoding_version().to_vec()\n+    }\n+\n     pub fn encode_metadata(self) -> EncodedMetadata {\n         let _prof_timer = self.prof.verbose_generic_activity(\"generate_crate_metadata\");\n-        self.untracked_resolutions.cstore.encode_metadata(self)\n+        self.cstore.encode_metadata(self)\n     }\n \n     // Note that this is *untracked* and should only be used within the query\n     // system if the result is otherwise tracked through queries\n     pub fn cstore_as_any(self) -> &'tcx dyn Any {\n-        self.untracked_resolutions.cstore.as_any()\n+        self.cstore.as_any()\n     }\n \n     #[inline(always)]\n     pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {\n         let krate = self.gcx.untracked_crate;\n-        let resolutions = &self.gcx.untracked_resolutions;\n \n-        StableHashingContext::new(self.sess, krate, &resolutions.definitions, &*resolutions.cstore)\n+        StableHashingContext::new(self.sess, krate, &self.definitions, &*self.cstore)\n     }\n \n     #[inline(always)]\n     pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {\n         let krate = self.gcx.untracked_crate;\n-        let resolutions = &self.gcx.untracked_resolutions;\n \n-        StableHashingContext::ignore_spans(\n-            self.sess,\n-            krate,\n-            &resolutions.definitions,\n-            &*resolutions.cstore,\n-        )\n+        StableHashingContext::ignore_spans(self.sess, krate, &self.definitions, &*self.cstore)\n     }\n \n     pub fn serialize_query_result_cache(self, encoder: &mut FileEncoder) -> FileEncodeResult {\n@@ -2619,10 +2662,8 @@ impl<'tcx> TyCtxt<'tcx> {\n         struct_lint_level(self.sess, lint, level, src, None, decorate);\n     }\n \n-    pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {\n-        let map = self.in_scope_traits_map(id.owner)?;\n-        let candidates = map.get(&id.local_id)?;\n-        Some(&*candidates)\n+    pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx StableVec<TraitCandidate>> {\n+        self.in_scope_traits_map(id.owner).and_then(|map| map.get(&id.local_id))\n     }\n \n     pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {\n@@ -2752,20 +2793,16 @@ fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {\n }\n \n pub fn provide(providers: &mut ty::query::Providers) {\n-    providers.in_scope_traits_map = |tcx, id| tcx.hir_crate(()).trait_map.get(&id);\n-    providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;\n-    providers.module_exports = |tcx, id| tcx.resolutions(()).export_map.get(&id).map(|v| &v[..]);\n+    providers.in_scope_traits_map = |tcx, id| tcx.gcx.trait_map.get(&id);\n+    providers.module_exports = |tcx, id| tcx.gcx.export_map.get(&id).map(|v| &v[..]);\n     providers.crate_name = |tcx, id| {\n         assert_eq!(id, LOCAL_CRATE);\n         tcx.crate_name\n     };\n-    providers.maybe_unused_trait_import =\n-        |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);\n-    providers.maybe_unused_extern_crates =\n-        |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];\n-    providers.names_imported_by_glob_use = |tcx, id| {\n-        tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())\n-    };\n+    providers.maybe_unused_trait_import = |tcx, id| tcx.maybe_unused_trait_imports.contains(&id);\n+    providers.maybe_unused_extern_crates = |tcx, ()| &tcx.maybe_unused_extern_crates[..];\n+    providers.names_imported_by_glob_use =\n+        |tcx, id| tcx.arena.alloc(tcx.glob_map.get(&id).cloned().unwrap_or_default());\n \n     providers.lookup_stability = |tcx, id| {\n         let id = tcx.hir().local_def_id_to_hir_id(id.expect_local());\n@@ -2779,10 +2816,8 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         let id = tcx.hir().local_def_id_to_hir_id(id.expect_local());\n         tcx.stability().local_deprecation_entry(id)\n     };\n-    providers.extern_mod_stmt_cnum =\n-        |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();\n-    providers.all_crate_nums =\n-        |tcx, ()| tcx.arena.alloc_slice(&tcx.resolutions(()).cstore.crates_untracked());\n+    providers.extern_mod_stmt_cnum = |tcx, id| tcx.extern_crate_map.get(&id).cloned();\n+    providers.all_crate_nums = |tcx, ()| tcx.arena.alloc_slice(&tcx.cstore.crates_untracked());\n     providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();\n     providers.features_query = |tcx, ()| tcx.sess.features_untracked();\n     providers.is_panic_runtime = |tcx, cnum| {\n@@ -2798,9 +2833,4 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         // We want to check if the panic handler was defined in this crate\n         tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())\n     };\n-    providers.is_private_dep = |_tcx, cnum| {\n-        assert_eq!(cnum, LOCAL_CRATE);\n-        false\n-    };\n-    providers.allocator_kind = |tcx, ()| tcx.resolutions(()).cstore.allocator_kind();\n }"}, {"sha": "94e325e9e8784fcf38ae38ce1a962a72ca87d122", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -112,7 +112,6 @@ mod sty;\n \n // Data types\n \n-#[derive(Debug)]\n pub struct ResolverOutputs {\n     pub definitions: rustc_hir::definitions::Definitions,\n     pub cstore: Box<CrateStoreDyn>,\n@@ -128,7 +127,7 @@ pub struct ResolverOutputs {\n     pub main_def: Option<MainDefinition>,\n }\n \n-#[derive(Clone, Copy, Debug)]\n+#[derive(Clone, Copy)]\n pub struct MainDefinition {\n     pub res: Res<ast::NodeId>,\n     pub is_import: bool,\n@@ -1619,7 +1618,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     fn item_name_from_def_id(self, def_id: DefId) -> Option<Symbol> {\n         if def_id.index == CRATE_DEF_INDEX {\n-            Some(self.crate_name(def_id.krate))\n+            Some(self.original_crate_name(def_id.krate))\n         } else {\n             let def_key = self.def_key(def_id);\n             match def_key.disambiguated_data.data {\n@@ -1867,7 +1866,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         match scope.as_local() {\n             // Parsing and expansion aren't incremental, so we don't\n             // need to go through a query for the same-crate case.\n-            Some(scope) => self.resolutions(()).definitions.expansion_that_defined(scope),\n+            Some(scope) => self.hir().definitions().expansion_that_defined(scope),\n             None => self.expn_that_defined(scope),\n         }\n     }\n@@ -1887,7 +1886,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             match ident.span.normalize_to_macros_2_0_and_adjust(self.expansion_that_defined(scope))\n             {\n                 Some(actual_expansion) => {\n-                    self.resolutions(()).definitions.parent_module_of_macro_def(actual_expansion)\n+                    self.hir().definitions().parent_module_of_macro_def(actual_expansion)\n                 }\n                 None => self.parent_module(block).to_def_id(),\n             };"}, {"sha": "f514278a11c932188f418c39fa652ad8aae62bd6", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -452,7 +452,7 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             // Re-exported `extern crate` (#43189).\n             DefPathData::CrateRoot => {\n-                data = DefPathData::TypeNs(self.tcx().crate_name(def_id.krate));\n+                data = DefPathData::TypeNs(self.tcx().original_crate_name(def_id.krate));\n             }\n             _ => {}\n         }\n@@ -2313,7 +2313,7 @@ fn trimmed_def_paths(tcx: TyCtxt<'_>, (): ()) -> FxHashMap<DefId, Symbol> {\n     let unique_symbols_rev: &mut FxHashMap<(Namespace, Symbol), Option<DefId>> =\n         &mut FxHashMap::default();\n \n-    for symbol_set in tcx.resolutions(()).glob_map.values() {\n+    for symbol_set in tcx.glob_map.values() {\n         for symbol in symbol_set {\n             unique_symbols_rev.insert((Namespace::TypeNS, *symbol), None);\n             unique_symbols_rev.insert((Namespace::ValueNS, *symbol), None);"}, {"sha": "bec13da017ea67e725744fd6adb3aa9f127fe87b", "filename": "compiler/rustc_middle/src/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -33,8 +33,8 @@ use crate::traits::{self, ImplSource};\n use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::util::AlwaysRequiresDrop;\n use crate::ty::{self, AdtSizedConstraint, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n-use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n+use rustc_data_structures::stable_hasher::StableVec;\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;"}, {"sha": "ce10744bfb6bab95591301dcca6322d0cf754561", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -641,11 +641,7 @@ impl<'sess> OnDiskCache<'sess> {\n                 debug_assert_ne!(krate, LOCAL_CRATE);\n                 // Try to find a definition in the current session, using the previous `DefIndex`\n                 // as an initial guess.\n-                let opt_def_id = tcx.untracked_resolutions.cstore.def_path_hash_to_def_id(\n-                    krate,\n-                    raw_def_id.index,\n-                    hash,\n-                );\n+                let opt_def_id = tcx.cstore.def_path_hash_to_def_id(krate, raw_def_id.index, hash);\n                 debug!(\"def_path_to_def_id({:?}): opt_def_id = {:?}\", hash, opt_def_id);\n                 e.insert(opt_def_id);\n                 opt_def_id"}, {"sha": "4978cc3606dd69f09ce5ff7fb1336089ba64d453", "filename": "compiler/rustc_mir/src/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -88,7 +88,7 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n     }\n \n     fn path_crate(mut self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {\n-        self.path.push_str(&self.tcx.crate_name(cnum).as_str());\n+        self.path.push_str(&self.tcx.original_crate_name(cnum).as_str());\n         Ok(self)\n     }\n "}, {"sha": "ca6a7561f3e7743050824efa687a101dd8d521a5", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -147,22 +147,19 @@ fn configure_main(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) -> Option<(De\n         Some((tcx.hir().local_def_id(hir_id).to_def_id(), EntryFnType::Start))\n     } else if let Some((hir_id, _)) = visitor.attr_main_fn {\n         Some((tcx.hir().local_def_id(hir_id).to_def_id(), EntryFnType::Main))\n-    } else {\n-        if let Some(main_def) = tcx.resolutions(()).main_def {\n-            if let Some(def_id) = main_def.opt_fn_def_id() {\n-                if main_def.is_import && !tcx.features().imported_main {\n-                    let span = main_def.span;\n-                    feature_err(\n-                        &tcx.sess.parse_sess,\n-                        sym::imported_main,\n-                        span,\n-                        \"using an imported function as entry point `main` is experimental\",\n-                    )\n-                    .emit();\n-                }\n-                return Some((def_id, EntryFnType::Main));\n-            }\n+    } else if let Some(def_id) = tcx.main_def.and_then(|main_def| main_def.opt_fn_def_id()) {\n+        if tcx.main_def.unwrap().is_import && !tcx.features().imported_main {\n+            let span = tcx.main_def.unwrap().span;\n+            feature_err(\n+                &tcx.sess.parse_sess,\n+                sym::imported_main,\n+                span,\n+                \"using an imported function as entry point `main` is experimental\",\n+            )\n+            .emit();\n         }\n+        Some((def_id, EntryFnType::Main))\n+    } else {\n         no_main_err(tcx, visitor);\n         None\n     }\n@@ -212,7 +209,7 @@ fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) {\n         err.note(&note);\n     }\n \n-    if let Some(main_def) = tcx.resolutions(()).main_def {\n+    if let Some(main_def) = tcx.main_def {\n         if main_def.opt_fn_def_id().is_none() {\n             // There is something at `crate::main`, but it is not a function definition.\n             err.span_label(main_def.span, &format!(\"non-function item at `crate::main` is found\"));"}, {"sha": "e64f12ef48f22551473317d9900fc0dccd9bc3db", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -2030,7 +2030,7 @@ pub fn provide(providers: &mut Providers) {\n \n fn visibility(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Visibility {\n     let def_id = def_id.expect_local();\n-    match tcx.resolutions(()).visibilities.get(&def_id) {\n+    match tcx.visibilities.get(&def_id) {\n         Some(vis) => *vis,\n         None => {\n             let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);"}, {"sha": "2517793ecea7059e4c7f6d05daeabcc82b4cccbe", "filename": "compiler/rustc_query_impl/src/profiling_support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -61,7 +61,7 @@ impl<'p, 'c, 'tcx> QueryKeyStringBuilder<'p, 'c, 'tcx> {\n \n         match def_key.disambiguated_data.data {\n             DefPathData::CrateRoot => {\n-                crate_name = self.tcx.crate_name(def_id.krate).as_str();\n+                crate_name = self.tcx.original_crate_name(def_id.krate).as_str();\n                 name = &*crate_name;\n                 dis = \"\";\n                 end_index = 3;"}, {"sha": "e877034bd7b5b28d9a2ebd91900f4f6618000077", "filename": "compiler/rustc_query_impl/src/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_query_impl%2Fsrc%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_query_impl%2Fsrc%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fstats.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -108,7 +108,7 @@ pub fn print_stats(tcx: TyCtxt<'_>) {\n         queries.iter().filter(|q| q.local_def_id_keys.is_some()).collect();\n     def_id_density.sort_by_key(|q| q.local_def_id_keys.unwrap());\n     eprintln!(\"\\nLocal DefId density:\");\n-    let total = tcx.resolutions(()).definitions.def_index_count() as f64;\n+    let total = tcx.hir().definitions().def_index_count() as f64;\n     for q in def_id_density.iter().rev() {\n         let local = q.local_def_id_keys.unwrap();\n         eprintln!(\"   {} - {} = ({}%)\", q.name, local, (local as f64 * 100.0) / total);"}, {"sha": "29d4271c475ddfc6e41a827b9fb7f24f4b3dec9c", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -910,8 +910,6 @@ pub struct Resolver<'a> {\n     extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n     export_map: ExportMap<LocalDefId>,\n     trait_map: NodeMap<Vec<TraitCandidate>>,\n-    #[cfg(debug_assertions)]\n-    took_trait_map: bool,\n \n     /// A map from nodes to anonymous modules.\n     /// Anonymous modules are pseudo-modules that are implicitly created around items\n@@ -1140,13 +1138,8 @@ impl ResolverAstLowering for Resolver<'_> {\n         self.next_node_id()\n     }\n \n-    fn take_trait_map(&mut self) -> NodeMap<Vec<TraitCandidate>> {\n-        #[cfg(debug_assertions)]\n-        {\n-            debug_assert!(!self.took_trait_map);\n-            self.took_trait_map = true;\n-        }\n-        std::mem::take(&mut self.trait_map)\n+    fn trait_map(&self) -> &NodeMap<Vec<TraitCandidate>> {\n+        &self.trait_map\n     }\n \n     fn opt_local_def_id(&self, node: NodeId) -> Option<LocalDefId> {\n@@ -1294,8 +1287,6 @@ impl<'a> Resolver<'a> {\n             extern_crate_map: Default::default(),\n             export_map: FxHashMap::default(),\n             trait_map: Default::default(),\n-            #[cfg(debug_assertions)]\n-            took_trait_map: false,\n             underscore_disambiguator: 0,\n             empty_module,\n             module_map,"}, {"sha": "1addfc8ee67e8f6292540e1de63641caf5a6f1e8", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -254,7 +254,7 @@ impl Printer<'tcx> for SymbolPrinter<'tcx> {\n     }\n \n     fn path_crate(mut self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {\n-        self.write_str(&self.tcx.crate_name(cnum).as_str())?;\n+        self.write_str(&self.tcx.original_crate_name(cnum).as_str())?;\n         Ok(self)\n     }\n     fn path_qualified("}, {"sha": "2ab7461fc6032d49235446b3e604b28d9e126a74", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -594,7 +594,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         self.push(\"C\");\n         let stable_crate_id = self.tcx.def_path_hash(cnum.as_def_id()).stable_crate_id();\n         self.push_disambiguator(stable_crate_id.to_u64());\n-        let name = self.tcx.crate_name(cnum).as_str();\n+        let name = self.tcx.original_crate_name(cnum).as_str();\n         self.push_ident(&name);\n         Ok(self)\n     }"}, {"sha": "3f24a33f7d57074be463fb87460f02063da359e9", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -6,7 +6,6 @@ use rustc_infer::infer::InferCtxt;\n use rustc_middle::ty::{self, TraitRef, Ty, TyCtxt, WithConstness};\n use rustc_middle::ty::{ToPredicate, TypeFoldable};\n use rustc_session::DiagnosticMessageId;\n-use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::Span;\n \n #[derive(Copy, Clone, Debug)]\n@@ -232,8 +231,7 @@ pub fn report_autoderef_recursion_limit_error<'tcx>(tcx: TyCtxt<'tcx>, span: Spa\n         .span_label(span, \"deref recursion limit reached\")\n         .help(&format!(\n             \"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate (`{}`)\",\n-            suggested_limit,\n-            tcx.crate_name(LOCAL_CRATE),\n+            suggested_limit, tcx.crate_name,\n         ))\n         .emit();\n     }"}, {"sha": "8bbd2da5375130f432ce85e73d8e0f6d8f09adf9", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -21,7 +21,6 @@ use rustc_middle::ty::{\n     Infer, InferTy, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n };\n use rustc_middle::ty::{TypeAndMut, TypeckResults};\n-use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, MultiSpan, Span, DUMMY_SP};\n use rustc_target::spec::abi;\n@@ -2314,8 +2313,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let suggested_limit = current_limit * 2;\n         err.help(&format!(\n             \"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate (`{}`)\",\n-            suggested_limit,\n-            self.tcx.crate_name(LOCAL_CRATE),\n+            suggested_limit, self.tcx.crate_name,\n         ));\n     }\n "}, {"sha": "f38c5d8f2f79eb0af9fdc74cec38b71982df7257", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -1,11 +1,12 @@\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use rustc_middle::hir::map as hir_map;\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{\n     self, Binder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt, WithConstness,\n };\n+use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n use rustc_trait_selection::traits;\n \n@@ -387,6 +388,11 @@ fn param_env_reveal_all_normalized(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamE\n     tcx.param_env(def_id).with_reveal_all_normalized(tcx)\n }\n \n+fn original_crate_name(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Symbol {\n+    assert_eq!(crate_num, LOCAL_CRATE);\n+    tcx.crate_name\n+}\n+\n fn instance_def_size_estimate<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance_def: ty::InstanceDef<'tcx>,\n@@ -532,6 +538,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         param_env,\n         param_env_reveal_all_normalized,\n         trait_of_item,\n+        original_crate_name,\n         instance_def_size_estimate,\n         issue33140_self_ty,\n         impl_defaultness,"}, {"sha": "836bed2a156354e43a1c9ca863169fe460d565de", "filename": "compiler/rustc_typeck/src/check_unused.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -116,8 +116,6 @@ fn unused_crates_lint(tcx: TyCtxt<'_>) {\n         crates_to_lint: &mut crates_to_lint,\n     });\n \n-    let extern_prelude = &tcx.resolutions(()).extern_prelude;\n-\n     for extern_crate in &crates_to_lint {\n         let def_id = extern_crate.def_id.expect_local();\n         let id = tcx.hir().local_def_id_to_hir_id(def_id);\n@@ -157,7 +155,7 @@ fn unused_crates_lint(tcx: TyCtxt<'_>) {\n         // If the extern crate isn't in the extern prelude,\n         // there is no way it can be written as an `use`.\n         let orig_name = extern_crate.orig_name.unwrap_or(item.ident.name);\n-        if !extern_prelude.get(&orig_name).map_or(false, |from_item| !from_item) {\n+        if !tcx.extern_prelude.get(&orig_name).map_or(false, |from_item| !from_item) {\n             continue;\n         }\n "}, {"sha": "a14eefaf57147da27b524fbc40631b02d1c64399", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -527,7 +527,7 @@ fn build_static(cx: &mut DocContext<'_>, did: DefId, mutable: bool) -> clean::St\n }\n \n fn build_macro(cx: &mut DocContext<'_>, did: DefId, name: Symbol) -> clean::ItemKind {\n-    let imported_from = cx.tcx.crate_name(did.krate);\n+    let imported_from = cx.tcx.original_crate_name(did.krate);\n     match cx.enter_resolver(|r| r.cstore().load_macro_untracked(did, cx.sess())) {\n         LoadedMacro::MacroDef(def, _) => {\n             let matchers: Vec<Span> = if let ast::ItemKind::MacroDef(ref def) = def.kind {"}, {"sha": "191d8d5a2ea3b8b1ceec2f37691c4afb445f3277", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -9,7 +9,6 @@ use rustc_hir::Node;\n use rustc_middle::middle::privacy::AccessLevel;\n use rustc_middle::ty::TyCtxt;\n use rustc_span;\n-use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Symbol};\n \n@@ -77,7 +76,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             &Spanned { span, node: hir::VisibilityKind::Public },\n             hir::CRATE_HIR_ID,\n             &krate.item,\n-            self.cx.tcx.crate_name(LOCAL_CRATE),\n+            self.cx.tcx.crate_name,\n         );\n         // Attach the crate's exported macros to the top-level module.\n         // In the case of macros 2.0 (`pub macro`), and for built-in `derive`s or attributes as"}, {"sha": "93e70d3792cee969aed769e0c74cc9b59130766f", "filename": "src/test/incremental/hashes/extern_mods.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -21,7 +21,7 @@ extern \"C\" {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg = \"cfail2\")]\n+#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner_nodes\")]\n #[rustc_clean(cfg = \"cfail3\")]\n extern \"C\" {\n     pub fn change_function_name2(c: i64) -> i32;\n@@ -112,7 +112,7 @@ extern \"C\" {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg = \"cfail2\")]\n+#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner_nodes\")]\n #[rustc_clean(cfg = \"cfail3\")]\n extern \"rust-call\" {\n     pub fn change_calling_convention(c: i32);\n@@ -125,7 +125,7 @@ extern \"C\" {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg = \"cfail2\")]\n+#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner_nodes\")]\n #[rustc_clean(cfg = \"cfail3\")]\n extern \"C\" {\n     pub fn make_function_public(c: i32);\n@@ -138,7 +138,7 @@ extern \"C\" {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg = \"cfail2\")]\n+#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner_nodes\")]\n #[rustc_clean(cfg = \"cfail3\")]\n extern \"C\" {\n     pub fn add_function1(c: i32);"}, {"sha": "70ce81bd473df65d7c5c4972862f0f072ead7577", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -23,7 +23,7 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,associated_item_def_ids\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,associated_item_def_ids\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail3\")]\n@@ -85,7 +85,7 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail2\", except=\"associated_item,hir_owner,hir_owner_nodes\")]\n@@ -100,7 +100,7 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_dirty(cfg=\"cfail2\", except=\"type_of,predicates_of,promoted_mir\")]\n@@ -135,7 +135,7 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,associated_item_def_ids\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,associated_item_def_ids\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail2\")]\n@@ -468,7 +468,7 @@ impl Bar<u32> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Bar<u64> {\n     #[rustc_clean(cfg=\"cfail2\", except=\"fn_sig,optimized_mir,typeck\")]"}, {"sha": "d874be060c26a080c8d74fa0bb943450ac31cce0", "filename": "src/test/incremental/hashes/type_defs.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f3138cb80137b9277b29118c05dbff9a8915e/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f3138cb80137b9277b29118c05dbff9a8915e/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs?ref=0f0f3138cb80137b9277b29118c05dbff9a8915e", "patch": "@@ -24,7 +24,7 @@\n type ChangePrimitiveType = i32;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type ChangePrimitiveType = i64;\n \n@@ -35,7 +35,7 @@ type ChangePrimitiveType = i64;\n type ChangeMutability = &'static i32;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type ChangeMutability = &'static mut i32;\n \n@@ -60,7 +60,7 @@ struct Struct2;\n type ChangeTypeStruct = Struct1;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type ChangeTypeStruct = Struct2;\n \n@@ -71,7 +71,7 @@ type ChangeTypeStruct = Struct2;\n type ChangeTypeTuple = (u32, u64);\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type ChangeTypeTuple = (u32, i64);\n \n@@ -91,7 +91,7 @@ enum Enum2 {\n type ChangeTypeEnum = Enum1;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type ChangeTypeEnum = Enum2;\n \n@@ -102,7 +102,7 @@ type ChangeTypeEnum = Enum2;\n type AddTupleField = (i32, i64);\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type AddTupleField = (i32, i64, i16);\n \n@@ -113,7 +113,7 @@ type AddTupleField = (i32, i64, i16);\n type ChangeNestedTupleField = (i32, (i64, i16));\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type ChangeNestedTupleField = (i32, (i64, i8));\n "}]}