{"sha": "938a39ab8950740c9682fc5ef2e270529f103c35", "node_id": "C_kwDOAAsO6NoAKDkzOGEzOWFiODk1MDc0MGM5NjgyZmM1ZWYyZTI3MDUyOWYxMDNjMzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-09T14:11:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-09T14:11:40Z"}, "message": "Auto merge of #13891 - bvanjoi:reverse-whitespace-in-assists, r=Veykril\n\nfix: keep whitespace in extract function handler\n\nFixed #13874", "tree": {"sha": "e30f231eeed18c3be82fa50b792239eb30c14a51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e30f231eeed18c3be82fa50b792239eb30c14a51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/938a39ab8950740c9682fc5ef2e270529f103c35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/938a39ab8950740c9682fc5ef2e270529f103c35", "html_url": "https://github.com/rust-lang/rust/commit/938a39ab8950740c9682fc5ef2e270529f103c35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/938a39ab8950740c9682fc5ef2e270529f103c35/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec968198b98c6291aac6a6aac41c1e194b14e95b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec968198b98c6291aac6a6aac41c1e194b14e95b", "html_url": "https://github.com/rust-lang/rust/commit/ec968198b98c6291aac6a6aac41c1e194b14e95b"}, {"sha": "ae73628f6bf0ee3ac6f571b447972f4f37a39103", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae73628f6bf0ee3ac6f571b447972f4f37a39103", "html_url": "https://github.com/rust-lang/rust/commit/ae73628f6bf0ee3ac6f571b447972f4f37a39103"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "e04a1dabb2c580ee47ec92b629ca83f065878a4c", "filename": "crates/ide-assists/src/handlers/extract_function.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/938a39ab8950740c9682fc5ef2e270529f103c35/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/938a39ab8950740c9682fc5ef2e270529f103c35/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=938a39ab8950740c9682fc5ef2e270529f103c35", "patch": "@@ -1799,7 +1799,8 @@ fn make_body(\n                 })\n                 .collect::<Vec<SyntaxElement>>();\n             let tail_expr = tail_expr.map(|expr| expr.dedent(old_indent).indent(body_indent));\n-            make::hacky_block_expr_with_comments(elements, tail_expr)\n+\n+            make::hacky_block_expr(elements, tail_expr)\n         }\n     };\n \n@@ -1881,7 +1882,7 @@ fn with_tail_expr(block: ast::BlockExpr, tail_expr: ast::Expr) -> ast::BlockExpr\n         elements.push(syntax::NodeOrToken::Node(stmt_tail.syntax().clone()));\n     }\n \n-    make::hacky_block_expr_with_comments(elements, Some(tail_expr))\n+    make::hacky_block_expr(elements, Some(tail_expr))\n }\n \n fn format_type(ty: &hir::Type, ctx: &AssistContext<'_>, module: hir::Module) -> String {\n@@ -4978,9 +4979,8 @@ fn $0fun_name() {\n         );\n     }\n \n-    // FIXME: we do want to preserve whitespace\n     #[test]\n-    fn extract_function_does_not_preserve_whitespace() {\n+    fn extract_function_does_preserve_whitespace() {\n         check_assist(\n             extract_function,\n             r#\"\n@@ -4999,6 +4999,7 @@ fn func() {\n \n fn $0fun_name() {\n     let a = 0;\n+\n     let x = 0;\n }\n \"#,"}, {"sha": "d5b3296980c91398f1b596d20e4b71172ead1e1f", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/938a39ab8950740c9682fc5ef2e270529f103c35/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/938a39ab8950740c9682fc5ef2e270529f103c35/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=938a39ab8950740c9682fc5ef2e270529f103c35", "patch": "@@ -339,21 +339,28 @@ pub fn tail_only_block_expr(tail_expr: ast::Expr) -> ast::BlockExpr {\n }\n \n /// Ideally this function wouldn't exist since it involves manual indenting.\n-/// It differs from `make::block_expr` by also supporting comments.\n+/// It differs from `make::block_expr` by also supporting comments and whitespace.\n ///\n /// FIXME: replace usages of this with the mutable syntax tree API\n-pub fn hacky_block_expr_with_comments(\n+pub fn hacky_block_expr(\n     elements: impl IntoIterator<Item = crate::SyntaxElement>,\n     tail_expr: Option<ast::Expr>,\n ) -> ast::BlockExpr {\n     let mut buf = \"{\\n\".to_string();\n     for node_or_token in elements.into_iter() {\n         match node_or_token {\n             rowan::NodeOrToken::Node(n) => format_to!(buf, \"    {n}\\n\"),\n-            rowan::NodeOrToken::Token(t) if t.kind() == SyntaxKind::COMMENT => {\n-                format_to!(buf, \"    {t}\\n\")\n+            rowan::NodeOrToken::Token(t) => {\n+                let kind = t.kind();\n+                if kind == SyntaxKind::COMMENT {\n+                    format_to!(buf, \"    {t}\\n\")\n+                } else if kind == SyntaxKind::WHITESPACE {\n+                    let content = t.text().trim_matches(|c| c != '\\n');\n+                    if content.len() >= 1 {\n+                        format_to!(buf, \"{}\", &content[1..])\n+                    }\n+                }\n             }\n-            _ => (),\n         }\n     }\n     if let Some(tail_expr) = tail_expr {"}]}