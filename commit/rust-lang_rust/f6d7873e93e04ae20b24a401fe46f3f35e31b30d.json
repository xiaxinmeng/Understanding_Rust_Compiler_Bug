{"sha": "f6d7873e93e04ae20b24a401fe46f3f35e31b30d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZDc4NzNlOTNlMDRhZTIwYjI0YTQwMWZlNDZmM2YzNWUzMWIzMGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-31T04:58:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-31T04:58:10Z"}, "message": "Auto merge of #43546 - nikomatsakis:issue-43132, r=arielb1\n\nsave subobligations in the projection cache\n\nThe projection cache explicitly chose not to \"preserve\" subobligations for projections, since the fulfillment context ought to have been doing so. But for the trait evaluation scheme that causes problems. This PR reproduces subobligations. This has the potential to slow down compilation, but minimal investigation suggests it does not do so.\n\nOne hesitation about this PR: I could not find a way to make a standalone test case for #43132 (but admittedly I did not try very hard).\n\nFixes #43132.\n\nr? @arielb1", "tree": {"sha": "c8bb30356a5b83bfec362bb82b78ac3bc1aa8771", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8bb30356a5b83bfec362bb82b78ac3bc1aa8771"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6d7873e93e04ae20b24a401fe46f3f35e31b30d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6d7873e93e04ae20b24a401fe46f3f35e31b30d", "html_url": "https://github.com/rust-lang/rust/commit/f6d7873e93e04ae20b24a401fe46f3f35e31b30d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6d7873e93e04ae20b24a401fe46f3f35e31b30d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2789db2720109ade328c87f3502dae7356bd825e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2789db2720109ade328c87f3502dae7356bd825e", "html_url": "https://github.com/rust-lang/rust/commit/2789db2720109ade328c87f3502dae7356bd825e"}, {"sha": "2574f31b9b71cd2b37002dbfc9a818c3cc805498", "url": "https://api.github.com/repos/rust-lang/rust/commits/2574f31b9b71cd2b37002dbfc9a818c3cc805498", "html_url": "https://github.com/rust-lang/rust/commit/2574f31b9b71cd2b37002dbfc9a818c3cc805498"}], "stats": {"total": 92, "additions": 86, "deletions": 6}, "files": [{"sha": "7cce9c398bb44cfa16c8feb3e2c6239b9c723c5a", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f6d7873e93e04ae20b24a401fe46f3f35e31b30d/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d7873e93e04ae20b24a401fe46f3f35e31b30d/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=f6d7873e93e04ae20b24a401fe46f3f35e31b30d", "patch": "@@ -462,13 +462,19 @@ fn opt_normalize_projection_type<'a, 'b, 'gcx, 'tcx>(\n             selcx.infcx().report_overflow_error(&obligation, false);\n         }\n         Err(ProjectionCacheEntry::NormalizedTy(ty)) => {\n-            // If we find the value in the cache, then the obligations\n-            // have already been returned from the previous entry (and\n-            // should therefore have been honored).\n+            // If we find the value in the cache, then return it along\n+            // with the obligations that went along with it. Note\n+            // that, when using a fulfillment context, these\n+            // obligations could in principle be ignored: they have\n+            // already been registered when the cache entry was\n+            // created (and hence the new ones will quickly be\n+            // discarded as duplicated). But when doing trait\n+            // evaluation this is not the case, and dropping the trait\n+            // evaluations can causes ICEs (e.g. #43132).\n             debug!(\"opt_normalize_projection_type: \\\n                     found normalized ty `{:?}`\",\n                    ty);\n-            return Some(NormalizedTy { value: ty, obligations: vec![] });\n+            return Some(ty);\n         }\n         Err(ProjectionCacheEntry::Error) => {\n             debug!(\"opt_normalize_projection_type: \\\n@@ -1326,7 +1332,7 @@ enum ProjectionCacheEntry<'tcx> {\n     InProgress,\n     Ambiguous,\n     Error,\n-    NormalizedTy(Ty<'tcx>),\n+    NormalizedTy(NormalizedTy<'tcx>),\n }\n \n // NB: intentionally not Clone\n@@ -1374,7 +1380,7 @@ impl<'tcx> ProjectionCache<'tcx> {\n     fn complete(&mut self, key: ty::ProjectionTy<'tcx>, value: &NormalizedTy<'tcx>) {\n         debug!(\"ProjectionCacheEntry::complete: adding cache entry: key={:?}, value={:?}\",\n                key, value);\n-        let fresh_key = self.map.insert(key, ProjectionCacheEntry::NormalizedTy(value.value));\n+        let fresh_key = self.map.insert(key, ProjectionCacheEntry::NormalizedTy(value.clone()));\n         assert!(!fresh_key, \"never started projecting `{:?}`\", key);\n     }\n "}, {"sha": "64b3b092b89360f0cc033388becd05400a8ba4e8", "filename": "src/test/run-pass/issue-43132.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f6d7873e93e04ae20b24a401fe46f3f35e31b30d/src%2Ftest%2Frun-pass%2Fissue-43132.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d7873e93e04ae20b24a401fe46f3f35e31b30d/src%2Ftest%2Frun-pass%2Fissue-43132.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-43132.rs?ref=f6d7873e93e04ae20b24a401fe46f3f35e31b30d", "patch": "@@ -0,0 +1,74 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(unused)]\n+\n+fn main() {\n+}\n+\n+fn foo() {\n+    let b = mk::<\n+        Forward<(Box<Future<Error = u32>>,)>,\n+    >();\n+    b.map_err(|_| ()).join();\n+}\n+\n+fn mk<T>() -> T {\n+    loop {}\n+}\n+\n+impl<I: Future<Error = E>, E> Future for (I,) {\n+    type Error = E;\n+}\n+\n+struct Forward<T: Future> {\n+    _a: T,\n+}\n+\n+impl<T: Future> Future for Forward<T>\n+where\n+    T::Error: From<u32>,\n+{\n+    type Error = T::Error;\n+}\n+\n+trait Future {\n+    type Error;\n+\n+    fn map_err<F, E>(self, _: F) -> (Self, F)\n+    where\n+        F: FnOnce(Self::Error) -> E,\n+        Self: Sized,\n+    {\n+        loop {}\n+    }\n+\n+    fn join(self) -> (MaybeDone<Self>, ())\n+    where\n+        Self: Sized,\n+    {\n+        loop {}\n+    }\n+}\n+\n+impl<S: ?Sized + Future> Future for Box<S> {\n+    type Error = S::Error;\n+}\n+\n+enum MaybeDone<A: Future> {\n+    _Done(A::Error),\n+}\n+\n+impl<U, A: Future, F> Future for (A, F)\n+where\n+    F: FnOnce(A::Error) -> U,\n+{\n+    type Error = U;\n+}"}]}