{"sha": "40bdbf0f5d1e997891918a2bf8bec5fc61432f05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwYmRiZjBmNWQxZTk5Nzg5MTkxOGEyYmY4YmVjNWZjNjE0MzJmMDU=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-07T14:58:56Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-08-08T02:39:57Z"}, "message": "std: Fix for-range loops that can use iterators\n\nFix inappropriate for-range loops to use for-iterator constructs (or\nother appropriate solution) instead.", "tree": {"sha": "920bcdd76ecbd1665c228f50df526a036660b131", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/920bcdd76ecbd1665c228f50df526a036660b131"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40bdbf0f5d1e997891918a2bf8bec5fc61432f05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40bdbf0f5d1e997891918a2bf8bec5fc61432f05", "html_url": "https://github.com/rust-lang/rust/commit/40bdbf0f5d1e997891918a2bf8bec5fc61432f05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40bdbf0f5d1e997891918a2bf8bec5fc61432f05/comments", "author": null, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "026c1ae3113a6333bace9058d2d38cb7bc1c9cc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/026c1ae3113a6333bace9058d2d38cb7bc1c9cc8", "html_url": "https://github.com/rust-lang/rust/commit/026c1ae3113a6333bace9058d2d38cb7bc1c9cc8"}], "stats": {"total": 75, "additions": 31, "deletions": 44}, "files": [{"sha": "ad950f198ce934f55eb215bb84f3e9185c4eaee6", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/40bdbf0f5d1e997891918a2bf8bec5fc61432f05/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40bdbf0f5d1e997891918a2bf8bec5fc61432f05/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=40bdbf0f5d1e997891918a2bf8bec5fc61432f05", "patch": "@@ -846,22 +846,16 @@ mod tests {\n                 }\n                 assert_eq!(*state, 42);\n                 *state = 31337;\n-                // FIXME: #7372: hits type inference bug with iterators\n                 // send to other readers\n-                for i in range(0u, reader_convos.len()) {\n-                    match reader_convos[i] {\n-                        (ref rc, _) => rc.send(()),\n-                    }\n+                for &(ref rc, _) in reader_convos.iter() {\n+                    rc.send(())\n                 }\n             }\n             let read_mode = arc.downgrade(write_mode);\n             do (&read_mode).read |state| {\n-                // FIXME: #7372: hits type inference bug with iterators\n                 // complete handshake with other readers\n-                for i in range(0u, reader_convos.len()) {\n-                    match reader_convos[i] {\n-                        (_, ref rp) => rp.recv(),\n-                    }\n+                for &(_, ref rp) in reader_convos.iter() {\n+                    rp.recv()\n                 }\n                 wc1.send(()); // tell writer to try again\n                 assert_eq!(*state, 31337);"}, {"sha": "20a3add3e7b3d64e7a79d6b03daaa9af6ada9ec3", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/40bdbf0f5d1e997891918a2bf8bec5fc61432f05/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40bdbf0f5d1e997891918a2bf8bec5fc61432f05/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=40bdbf0f5d1e997891918a2bf8bec5fc61432f05", "patch": "@@ -145,22 +145,24 @@ impl BigBitv {\n         let len = b.storage.len();\n         assert_eq!(self.storage.len(), len);\n         let mut changed = false;\n-        for i in range(0, len) {\n+        for (i, (a, b)) in self.storage.mut_iter()\n+                               .zip(b.storage.iter())\n+                               .enumerate() {\n             let mask = big_mask(nbits, i);\n-            let w0 = self.storage[i] & mask;\n-            let w1 = b.storage[i] & mask;\n+            let w0 = *a & mask;\n+            let w1 = *b & mask;\n             let w = op(w0, w1) & mask;\n             if w0 != w {\n                 changed = true;\n-                self.storage[i] = w;\n+                *a = w;\n             }\n         }\n         changed\n     }\n \n     #[inline]\n     pub fn each_storage(&mut self, op: &fn(v: &mut uint) -> bool) -> bool {\n-        range(0u, self.storage.len()).advance(|i| op(&mut self.storage[i]))\n+        self.storage.mut_iter().advance(|elt| op(elt))\n     }\n \n     #[inline]\n@@ -205,10 +207,9 @@ impl BigBitv {\n \n     #[inline]\n     pub fn equals(&self, b: &BigBitv, nbits: uint) -> bool {\n-        let len = b.storage.len();\n-        for i in range(0, len) {\n+        for (i, elt) in b.storage.iter().enumerate() {\n             let mask = big_mask(nbits, i);\n-            if mask & self.storage[i] != mask & b.storage[i] {\n+            if mask & self.storage[i] != mask & *elt {\n                 return false;\n             }\n         }"}, {"sha": "a601270e8ece16c80c27031c966ed22b69578daa", "filename": "src/libextra/smallintmap.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/40bdbf0f5d1e997891918a2bf8bec5fc61432f05/src%2Flibextra%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40bdbf0f5d1e997891918a2bf8bec5fc61432f05/src%2Flibextra%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsmallintmap.rs?ref=40bdbf0f5d1e997891918a2bf8bec5fc61432f05", "patch": "@@ -28,14 +28,12 @@ pub struct SmallIntMap<T> {\n impl<V> Container for SmallIntMap<V> {\n     /// Return the number of elements in the map\n     fn len(&self) -> uint {\n-        let mut sz = 0;\n-        for i in range(0u, self.v.len()) {\n-            match self.v[i] {\n-                Some(_) => sz += 1,\n-                None => {}\n-            }\n-        }\n-        sz\n+        self.v.iter().count(|elt| elt.is_some())\n+    }\n+\n+    /// Return true if there are no elements in the map\n+    fn is_empty(&self) -> bool {\n+        self.v.iter().all(|elt| elt.is_none())\n     }\n }\n "}, {"sha": "daafdbc37182d581a8fc82c4c36ab2939f70daa2", "filename": "src/libextra/sort.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/40bdbf0f5d1e997891918a2bf8bec5fc61432f05/src%2Flibextra%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40bdbf0f5d1e997891918a2bf8bec5fc61432f05/src%2Flibextra%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsort.rs?ref=40bdbf0f5d1e997891918a2bf8bec5fc61432f05", "patch": "@@ -469,10 +469,7 @@ impl<T:Clone + Ord> MergeState<T> {\n                 base2: uint, len2: uint) {\n         assert!(len1 != 0 && len2 != 0 && base1+len1 == base2);\n \n-        let mut tmp = ~[];\n-        for i in range(base1, base1+len1) {\n-            tmp.push(array[i].clone());\n-        }\n+        let mut tmp = array.slice(base1, base1 + len1).to_owned();\n \n         let mut c1 = 0;\n         let mut c2 = base2;\n@@ -579,10 +576,7 @@ impl<T:Clone + Ord> MergeState<T> {\n                 base2: uint, len2: uint) {\n         assert!(len1 != 1 && len2 != 0 && base1 + len1 == base2);\n \n-        let mut tmp = ~[];\n-        for i in range(base2, base2+len2) {\n-            tmp.push(array[i].clone());\n-        }\n+        let mut tmp = array.slice(base2, base2 + len2).to_owned();\n \n         let mut c1 = base1 + len1 - 1;\n         let mut c2 = len2 - 1;"}, {"sha": "f2470bed7329e81fcd1df99620574989f49607cd", "filename": "src/libstd/at_vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/40bdbf0f5d1e997891918a2bf8bec5fc61432f05/src%2Flibstd%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40bdbf0f5d1e997891918a2bf8bec5fc61432f05/src%2Flibstd%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fat_vec.rs?ref=40bdbf0f5d1e997891918a2bf8bec5fc61432f05", "patch": "@@ -12,7 +12,7 @@\n \n use clone::Clone;\n use container::Container;\n-use iterator::{Iterator, range};\n+use iterator::Iterator;\n use option::{Option, Some, None};\n use sys;\n use unstable::raw::Repr;\n@@ -92,8 +92,8 @@ pub fn append<T:Clone>(lhs: @[T], rhs: &[T]) -> @[T] {\n         for x in lhs.iter() {\n             push((*x).clone());\n         }\n-        for i in range(0u, rhs.len()) {\n-            push(rhs[i].clone());\n+        for elt in rhs.iter() {\n+            push(elt.clone());\n         }\n     }\n }"}, {"sha": "84cba254dcf23599258f50f64fdbfdc1637cff30", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/40bdbf0f5d1e997891918a2bf8bec5fc61432f05/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40bdbf0f5d1e997891918a2bf8bec5fc61432f05/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=40bdbf0f5d1e997891918a2bf8bec5fc61432f05", "patch": "@@ -19,7 +19,7 @@ use container::{Container, Mutable, Map, MutableMap, Set, MutableSet};\n use clone::Clone;\n use cmp::{Eq, Equiv};\n use hash::Hash;\n-use iterator::{Iterator, IteratorUtil, FromIterator, Extendable, range};\n+use iterator::{Iterator, IteratorUtil, FromIterator, Extendable};\n use iterator::{FilterMap, Chain, Repeat, Zip};\n use num;\n use option::{None, Option, Some};\n@@ -265,8 +265,8 @@ impl<K:Hash + Eq,V> Container for HashMap<K, V> {\n impl<K:Hash + Eq,V> Mutable for HashMap<K, V> {\n     /// Clear the map, removing all key-value pairs.\n     fn clear(&mut self) {\n-        for idx in range(0u, self.buckets.len()) {\n-            self.buckets[idx] = None;\n+        for bkt in self.buckets.mut_iter() {\n+            *bkt = None;\n         }\n         self.size = 0;\n     }"}, {"sha": "a5efae542a1ff1dbaf87722707f728b5c799b7dc", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40bdbf0f5d1e997891918a2bf8bec5fc61432f05/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40bdbf0f5d1e997891918a2bf8bec5fc61432f05/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=40bdbf0f5d1e997891918a2bf8bec5fc61432f05", "patch": "@@ -271,8 +271,8 @@ impl<T> TrieNode<T> {\n \n impl<T> TrieNode<T> {\n     fn each<'a>(&'a self, f: &fn(&uint, &'a T) -> bool) -> bool {\n-        for idx in range(0u, self.children.len()) {\n-            match self.children[idx] {\n+        for elt in self.children.iter() {\n+            match *elt {\n                 Internal(ref x) => if !x.each(|i,t| f(i,t)) { return false },\n                 External(k, ref v) => if !f(&k, v) { return false },\n                 Nothing => ()"}, {"sha": "0f6d94bb77107786bfff531ad73645ea73d8f380", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40bdbf0f5d1e997891918a2bf8bec5fc61432f05/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40bdbf0f5d1e997891918a2bf8bec5fc61432f05/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=40bdbf0f5d1e997891918a2bf8bec5fc61432f05", "patch": "@@ -1602,8 +1602,8 @@ impl<T:Clone> OwnedCopyableVector<T> for ~[T] {\n         let new_len = self.len() + rhs.len();\n         self.reserve(new_len);\n \n-        for i in range(0u, rhs.len()) {\n-            self.push(unsafe { raw::get(rhs, i) })\n+        for elt in rhs.iter() {\n+            self.push((*elt).clone())\n         }\n     }\n "}]}