{"sha": "9a2aadf8722339e61f70c1a1b0490d9c791f6e7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMmFhZGY4NzIyMzM5ZTYxZjcwYzFhMWIwNDkwZDljNzkxZjZlN2E=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-08-23T17:39:36Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-08-23T17:39:36Z"}, "message": "Deny `missing_docs_in_private_items` in some modules", "tree": {"sha": "cd6fc5c87a876259bf1c54a4ff999eedb9afc112", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd6fc5c87a876259bf1c54a4ff999eedb9afc112"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a2aadf8722339e61f70c1a1b0490d9c791f6e7a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJXvIp3AAoJEF5CfHlMukXoYYgP/R1KXhsxgAG0sRfl6cXhtlS6\nJGeIxLjVVGQ8OP/3gLBJr27/1VViOIRoHVmCQNKG3edVuoF+YwwIxmPps92DcQM+\nOVPIustp0lZvFk13RdRanMh+4ZAqBiS3rgAOHfpfZv/97wJnFnY1QSvESU4LYKpf\nawlr/gWdTO9UIAHOnZ8KdczIbxeHPbHrHqWBonv8SgcN6CL9n43ibQeONwxn/jpP\nvGM+BGCdDX76chxHaAh/7fI/IX+Md45FcavCByZGY/9htBVn+2rmZq0MfA1w4khX\nU8El7gg7HFMy5j2UH/kUa84vlAsq8ffwujjisyvKcAFut4DVMVx/sqktt27/2Eou\nVFi+aO3g5xP5cj3QuOslKyoK3CD3XR9ru2kyYsc1is66RlLu2O8tCQem3SzW6Uqx\nFxwQSKEOAZmNEPXM55DtTM04UEpCedoqqaV+ZXQf4xpWfuqr0IasNR/ZXqj8n9Qg\nzqrhqdAwBDuEIcAWYmwupabk9cgCN+OuSTNpHt7nad8acWbXhsXuyOB+ctnnPzP1\nDkqU422doNjTpuDwH0GWzdHgr9VcWPRM3U1o/pYg42HC3LfeSPihderGH7H9OJHS\nV8V1kDe6kv5yc1meTWwx82C8nOceIBBEWJWMDwNeFIwBk12Z28C4j9fh+Rb+vTYb\nGoYZQi1dMBGGqkYd3kCU\n=HGTJ\n-----END PGP SIGNATURE-----", "payload": "tree cd6fc5c87a876259bf1c54a4ff999eedb9afc112\nparent 8b12e28e43245c11653aee087cbc738b0536ccf8\nauthor mcarton <cartonmartin+git@gmail.com> 1471973976 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1471973976 +0200\n\nDeny `missing_docs_in_private_items` in some modules\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a2aadf8722339e61f70c1a1b0490d9c791f6e7a", "html_url": "https://github.com/rust-lang/rust/commit/9a2aadf8722339e61f70c1a1b0490d9c791f6e7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a2aadf8722339e61f70c1a1b0490d9c791f6e7a/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b12e28e43245c11653aee087cbc738b0536ccf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b12e28e43245c11653aee087cbc738b0536ccf8", "html_url": "https://github.com/rust-lang/rust/commit/8b12e28e43245c11653aee087cbc738b0536ccf8"}], "stats": {"total": 56, "additions": 53, "deletions": 3}, "files": [{"sha": "a277226eb67c6844a8f0d13922f7c0f8d86d2870", "filename": "clippy_lints/src/utils/comparisons.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9a2aadf8722339e61f70c1a1b0490d9c791f6e7a/clippy_lints%2Fsrc%2Futils%2Fcomparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2aadf8722339e61f70c1a1b0490d9c791f6e7a/clippy_lints%2Fsrc%2Futils%2Fcomparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fcomparisons.rs?ref=9a2aadf8722339e61f70c1a1b0490d9c791f6e7a", "patch": "@@ -1,14 +1,23 @@\n+//! Utility functions about comparison operators.\n+\n+#![deny(missing_docs_in_private_items)]\n+\n use rustc::hir::{BinOp_, Expr};\n \n #[derive(PartialEq, Eq, Debug, Copy, Clone)]\n+/// Represent a normalized comparison operator.\n pub enum Rel {\n+    /// `<`\n     Lt,\n+    /// `<=`\n     Le,\n+    /// `==`\n     Eq,\n+    /// `!=`\n     Ne,\n }\n \n-/// Put the expression in the form  `lhs < rhs` or `lhs <= rhs`.\n+/// Put the expression in the form  `lhs < rhs`, `lhs <= rhs`, `lhs == rhs` or `lhs != rhs`.\n pub fn normalize_comparison<'a>(op: BinOp_, lhs: &'a Expr, rhs: &'a Expr)\n                                 -> Option<(Rel, &'a Expr, &'a Expr)> {\n     match op {"}, {"sha": "748d144daa0d2ce3c414c4df23c0075439382111", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9a2aadf8722339e61f70c1a1b0490d9c791f6e7a/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2aadf8722339e61f70c1a1b0490d9c791f6e7a/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=9a2aadf8722339e61f70c1a1b0490d9c791f6e7a", "patch": "@@ -1,3 +1,7 @@\n+//! Read configurations files.\n+\n+#![deny(missing_docs_in_private_items)]\n+\n use std::{fmt, fs, io};\n use std::io::Read;\n use syntax::{ast, codemap, ptr};\n@@ -32,9 +36,20 @@ pub fn file(args: &[ptr::P<ast::MetaItem>]) -> Result<Option<token::InternedStri\n /// Error from reading a configuration file.\n #[derive(Debug)]\n pub enum Error {\n+    /// An I/O error.\n     Io(io::Error),\n+    /// The file is not valid TOML.\n     Toml(Vec<toml::ParserError>),\n-    Type(&'static str, &'static str, &'static str),\n+    /// Type error.\n+    Type(\n+        /// The name of the key.\n+        &'static str,\n+        /// The expected type.\n+        &'static str,\n+        /// The type we got instead.\n+        &'static str\n+    ),\n+    /// There is an unknown key is the file.\n     UnknownKey(String),\n }\n "}, {"sha": "aed07471a6564bb06178c05b5f948aaa798d1ab2", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a2aadf8722339e61f70c1a1b0490d9c791f6e7a/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2aadf8722339e61f70c1a1b0490d9c791f6e7a/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=9a2aadf8722339e61f70c1a1b0490d9c791f6e7a", "patch": "@@ -1,5 +1,7 @@\n //! This module contains functions for retrieve the original AST from lowered `hir`.\n \n+#![deny(missing_docs_in_private_items)]\n+\n use rustc::hir;\n use rustc::lint::LateContext;\n use syntax::ast;\n@@ -33,14 +35,17 @@ pub fn binop(op: hir::BinOp_) -> ast::BinOpKind {\n /// Represent a range akin to `ast::ExprKind::Range`.\n #[derive(Debug, Copy, Clone)]\n pub struct Range<'a> {\n+    /// The lower bound of the range, or `None` for ranges such as `..X`.\n     pub start: Option<&'a hir::Expr>,\n+    /// The upper bound of the range, or `None` for ranges such as `X..`.\n     pub end: Option<&'a hir::Expr>,\n+    /// Whether the interval is open or closed.\n     pub limits: ast::RangeLimits,\n }\n \n /// Higher a `hir` range to something similar to `ast::ExprKind::Range`.\n pub fn range(expr: &hir::Expr) -> Option<Range> {\n-    // To be removed when ranges get stable.\n+    /// Skip unstable blocks. To be removed when ranges get stable.\n     fn unwrap_unstable(expr: &hir::Expr) -> &hir::Expr {\n         if let hir::ExprBlock(ref block) = expr.node {\n             if block.rules == hir::BlockCheckMode::PushUnstableBlock || block.rules == hir::BlockCheckMode::PopUnstableBlock {\n@@ -53,6 +58,7 @@ pub fn range(expr: &hir::Expr) -> Option<Range> {\n         expr\n     }\n \n+    /// Find the field named `name` in the field. Always return `Some` for convenience.\n     fn get_field<'a>(name: &str, fields: &'a [hir::Field]) -> Option<&'a hir::Expr> {\n         let expr = &fields.iter()\n                           .find(|field| field.name.node.as_str() == name)"}, {"sha": "0815b8c822b8adf249e093b423901dcb8a50eac6", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9a2aadf8722339e61f70c1a1b0490d9c791f6e7a/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2aadf8722339e61f70c1a1b0490d9c791f6e7a/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=9a2aadf8722339e61f70c1a1b0490d9c791f6e7a", "patch": "@@ -1,3 +1,6 @@\n+//! Contains utility functions to generate suggestions.\n+#![deny(missing_docs_in_private_items)]\n+\n use rustc::hir;\n use rustc::lint::{EarlyContext, LateContext, LintContext};\n use rustc_errors;\n@@ -35,6 +38,7 @@ impl<'a> Display for Sugg<'a> {\n \n #[allow(wrong_self_convention)] // ok, because of the function `as_ty` method\n impl<'a> Sugg<'a> {\n+    /// Prepare a suggestion from an expression.\n     pub fn hir_opt(cx: &LateContext, expr: &hir::Expr) -> Option<Sugg<'a>> {\n         snippet_opt(cx, expr.span).map(|snippet| {\n             let snippet = Cow::Owned(snippet);\n@@ -72,10 +76,12 @@ impl<'a> Sugg<'a> {\n         })\n     }\n \n+    /// Convenience function around `hir_opt` for suggestions with a default text.\n     pub fn hir(cx: &LateContext, expr: &hir::Expr, default: &'a str) -> Sugg<'a> {\n         Self::hir_opt(cx, expr).unwrap_or_else(|| Sugg::NonParen(Cow::Borrowed(default)))\n     }\n \n+    /// Prepare a suggestion from an expression.\n     pub fn ast(cx: &EarlyContext, expr: &ast::Expr, default: &'a str) -> Sugg<'a> {\n         use syntax::ast::RangeLimits;\n \n@@ -193,12 +199,16 @@ impl<'a> std::ops::Not for Sugg<'a> {\n     }\n }\n \n+/// Helper type to display either `foo` or `(foo)`.\n struct ParenHelper<T> {\n+    /// Wether parenthesis are needed.\n     paren: bool,\n+    /// The main thing to display.\n     wrapped: T,\n }\n \n impl<T> ParenHelper<T> {\n+    /// Build a `ParenHelper`.\n     fn new(paren: bool, wrapped: T) -> Self {\n         ParenHelper {\n             paren: paren,\n@@ -230,14 +240,18 @@ pub fn make_unop(op: &str, expr: Sugg) -> Sugg<'static> {\n /// Precedence of shift operator relative to other arithmetic operation is often confusing so\n /// parenthesis will always be added for a mix of these.\n pub fn make_assoc(op: AssocOp, lhs: &Sugg, rhs: &Sugg) -> Sugg<'static> {\n+    /// Wether the operator is a shift operator `<<` or `>>`.\n     fn is_shift(op: &AssocOp) -> bool {\n         matches!(*op, AssocOp::ShiftLeft | AssocOp::ShiftRight)\n     }\n \n+    /// Wether the operator is a arithmetic operator (`+`, `-`, `*`, `/`, `%`).\n     fn is_arith(op: &AssocOp) -> bool {\n         matches!(*op, AssocOp::Add | AssocOp::Subtract | AssocOp::Multiply | AssocOp::Divide | AssocOp::Modulus)\n     }\n \n+    /// Wether the operator `op` needs parenthesis with the operator `other` in the direction\n+    /// `dir`.\n     fn needs_paren(op: &AssocOp, other: &AssocOp, dir: Associativity) -> bool {\n         other.precedence() < op.precedence() ||\n             (other.precedence() == op.precedence() &&\n@@ -298,10 +312,15 @@ pub fn make_binop(op: ast::BinOpKind, lhs: &Sugg, rhs: &Sugg) -> Sugg<'static> {\n }\n \n #[derive(PartialEq, Eq)]\n+/// Operator associativity.\n enum Associativity {\n+    /// The operator is both left-associative and right-associative.\n     Both,\n+    /// The operator is left-associative.\n     Left,\n+    /// The operator is not associative.\n     None,\n+    /// The operator is right-associative.\n     Right,\n }\n \n@@ -383,6 +402,7 @@ fn indentation<T: LintContext>(cx: &T, span: Span) -> Option<String> {\n     }\n }\n \n+/// Convenience extension trait for `DiagnosticBuilder`.\n pub trait DiagnosticBuilderExt<T: LintContext> {\n     /// Suggests to add an attribute to an item.\n     ///"}]}