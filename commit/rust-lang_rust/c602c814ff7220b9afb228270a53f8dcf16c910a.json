{"sha": "c602c814ff7220b9afb228270a53f8dcf16c910a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MDJjODE0ZmY3MjIwYjlhZmIyMjgyNzBhNTNmOGRjZjE2YzkxMGE=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-02T02:30:28Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-02T02:30:28Z"}, "message": "rustdoc: syntax highlight macro definitions, colour $... substitutions.\n\nMacro definitions are just their raw source code, and so should be\nhighlighted where possible. Also, $ident non-terminal substitutions are\nspecial, and so are worth of a little special treatment.", "tree": {"sha": "7ce209a50f60966fe248ce6c849375b11206c56e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ce209a50f60966fe248ce6c849375b11206c56e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c602c814ff7220b9afb228270a53f8dcf16c910a", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c602c814ff7220b9afb228270a53f8dcf16c910a", "html_url": "https://github.com/rust-lang/rust/commit/c602c814ff7220b9afb228270a53f8dcf16c910a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c602c814ff7220b9afb228270a53f8dcf16c910a/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1", "html_url": "https://github.com/rust-lang/rust/commit/999d55d5f6e229b8c1118ac35c8cbf3b9c59e3a1"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "07c4903585b81a58ee0711371e36401ed9497350", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c602c814ff7220b9afb228270a53f8dcf16c910a/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c602c814ff7220b9afb228270a53f8dcf16c910a/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=c602c814ff7220b9afb228270a53f8dcf16c910a", "patch": "@@ -26,7 +26,7 @@ use html::escape::Escape;\n use t = syntax::parse::token;\n \n /// Highlights some source code, returning the HTML output.\n-pub fn highlight(src: &str) -> ~str {\n+pub fn highlight(src: &str, class: Option<&str>) -> ~str {\n     let sess = parse::new_parse_sess();\n     let handler = diagnostic::default_handler();\n     let span_handler = diagnostic::mk_span_handler(handler, sess.cm);\n@@ -35,6 +35,7 @@ pub fn highlight(src: &str) -> ~str {\n     let mut out = io::MemWriter::new();\n     doit(sess,\n          lexer::new_string_reader(span_handler, fm),\n+         class,\n          &mut out).unwrap();\n     str::from_utf8_lossy(out.unwrap()).into_owned()\n }\n@@ -46,14 +47,15 @@ pub fn highlight(src: &str) -> ~str {\n /// it's used. All source code emission is done as slices from the source map,\n /// not from the tokens themselves, in order to stay true to the original\n /// source.\n-fn doit(sess: @parse::ParseSess, lexer: lexer::StringReader,\n+fn doit(sess: @parse::ParseSess, lexer: lexer::StringReader, class: Option<&str>,\n         out: &mut Writer) -> io::IoResult<()> {\n     use syntax::parse::lexer::Reader;\n \n-    try!(write!(out, \"<pre class='rust'>\\n\"));\n+    try!(write!(out, \"<pre class='rust {}'>\\n\", class.unwrap_or(\"\")));\n     let mut last = BytePos(0);\n     let mut is_attribute = false;\n     let mut is_macro = false;\n+    let mut is_macro_nonterminal = false;\n     loop {\n         let next = lexer.next_token();\n         let test = if next.tok == t::EOF {lexer.pos.get()} else {next.sp.lo};\n@@ -101,8 +103,15 @@ fn doit(sess: @parse::ParseSess, lexer: lexer::StringReader,\n             // miscellaneous, no highlighting\n             t::DOT | t::DOTDOT | t::DOTDOTDOT | t::COMMA | t::SEMI |\n                 t::COLON | t::MOD_SEP | t::LARROW | t::DARROW | t::LPAREN |\n-                t::RPAREN | t::LBRACKET | t::LBRACE | t::RBRACE |\n-                t::DOLLAR => \"\",\n+                t::RPAREN | t::LBRACKET | t::LBRACE | t::RBRACE => \"\",\n+            t::DOLLAR => {\n+                if t::is_ident(&lexer.peek().tok) {\n+                    is_macro_nonterminal = true;\n+                    \"macro-nonterminal\"\n+                } else {\n+                    \"\"\n+                }\n+            }\n \n             // This is the start of an attribute. We're going to want to\n             // continue highlighting it as an attribute until the ending ']' is\n@@ -143,7 +152,10 @@ fn doit(sess: @parse::ParseSess, lexer: lexer::StringReader,\n \n                     _ if t::is_any_keyword(&next.tok) => \"kw\",\n                     _ => {\n-                        if lexer.peek().tok == t::NOT {\n+                        if is_macro_nonterminal {\n+                            is_macro_nonterminal = false;\n+                            \"macro-nonterminal\"\n+                        } else if lexer.peek().tok == t::NOT {\n                             is_macro = true;\n                             \"macro\"\n                         } else {\n@@ -171,4 +183,3 @@ fn doit(sess: @parse::ParseSess, lexer: lexer::StringReader,\n \n     write!(out, \"</pre>\\n\")\n }\n-"}, {"sha": "bc59f9e657aeb15a4d83b4f07765bbbbe74d8063", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c602c814ff7220b9afb228270a53f8dcf16c910a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c602c814ff7220b9afb228270a53f8dcf16c910a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=c602c814ff7220b9afb228270a53f8dcf16c910a", "patch": "@@ -146,7 +146,7 @@ pub fn render(w: &mut io::Writer, s: &str) -> fmt::Result {\n                 };\n \n                 if !rendered {\n-                    let output = highlight::highlight(text).to_c_str();\n+                    let output = highlight::highlight(text, None).to_c_str();\n                     output.with_ref(|r| {\n                         bufputs(ob, r)\n                     })"}, {"sha": "0f5d01e18950e9f5d96dbdbd75adbfb1899d6ada", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c602c814ff7220b9afb228270a53f8dcf16c910a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c602c814ff7220b9afb228270a53f8dcf16c910a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=c602c814ff7220b9afb228270a53f8dcf16c910a", "patch": "@@ -1630,13 +1630,13 @@ impl<'a> fmt::Show for Source<'a> {\n             try!(write!(fmt.buf, \"<span id='{0:u}'>{0:1$u}</span>\\n\", i, cols));\n         }\n         try!(write!(fmt.buf, \"</pre>\"));\n-        try!(write!(fmt.buf, \"{}\", highlight::highlight(s.as_slice())));\n+        try!(write!(fmt.buf, \"{}\", highlight::highlight(s.as_slice(), None)));\n         Ok(())\n     }\n }\n \n fn item_macro(w: &mut Writer, it: &clean::Item,\n               t: &clean::Macro) -> fmt::Result {\n-    try!(write!(w, \"<pre class='macro'>{}</pre>\", t.source));\n+    try!(w.write_str(highlight::highlight(t.source, Some(\"macro\"))));\n     document(w, it)\n }"}, {"sha": "20c94d00711afbc797a10a633d178d25f7649dfb", "filename": "src/librustdoc/html/static/main.css", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c602c814ff7220b9afb228270a53f8dcf16c910a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/c602c814ff7220b9afb228270a53f8dcf16c910a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css?ref=c602c814ff7220b9afb228270a53f8dcf16c910a", "patch": "@@ -315,6 +315,7 @@ pre.rust .op { color: #cc782f; }\n pre.rust .comment { color: #533add; }\n pre.rust .doccomment { color: #d343d0; }\n pre.rust .macro { color: #d343d0; }\n+pre.rust .macro-nonterminal { color: #d343d0; }\n pre.rust .string { color: #c13928; }\n pre.rust .lifetime { color: #d343d0; }\n pre.rust .attribute { color: #d343d0 !important; }"}]}