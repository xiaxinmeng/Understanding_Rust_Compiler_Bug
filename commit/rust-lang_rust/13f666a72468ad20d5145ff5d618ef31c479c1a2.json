{"sha": "13f666a72468ad20d5145ff5d618ef31c479c1a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZjY2NmE3MjQ2OGFkMjBkNTE0NWZmNWQ2MThlZjMxYzQ3OWMxYTI=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-06-21T15:05:29Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-23T08:23:01Z"}, "message": "std::hashmap: Remove BaseIter impl for HashSet\n\nRemove the BaseIter impl, while keeping the .each method until callers\nare converted.", "tree": {"sha": "1b8d7a929ef4b1148d28da777f8a00d0170841b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b8d7a929ef4b1148d28da777f8a00d0170841b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13f666a72468ad20d5145ff5d618ef31c479c1a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13f666a72468ad20d5145ff5d618ef31c479c1a2", "html_url": "https://github.com/rust-lang/rust/commit/13f666a72468ad20d5145ff5d618ef31c479c1a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13f666a72468ad20d5145ff5d618ef31c479c1a2/comments", "author": null, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f045210857a8936c7d6ce36a3029eac906dedc4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f045210857a8936c7d6ce36a3029eac906dedc4e", "html_url": "https://github.com/rust-lang/rust/commit/f045210857a8936c7d6ce36a3029eac906dedc4e"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "0b6bf339d7efd89ba56a29a4c8395f9a7a2f218c", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/13f666a72468ad20d5145ff5d618ef31c479c1a2/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f666a72468ad20d5145ff5d618ef31c479c1a2/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=13f666a72468ad20d5145ff5d618ef31c479c1a2", "patch": "@@ -18,7 +18,6 @@\n use container::{Container, Mutable, Map, Set};\n use cmp::{Eq, Equiv};\n use hash::Hash;\n-use old_iter::BaseIter;\n use iterator::{Iterator, IteratorUtil};\n use option::{None, Option, Some};\n use rand::RngUtil;\n@@ -622,12 +621,6 @@ pub struct HashSet<T> {\n     priv map: HashMap<T, ()>\n }\n \n-impl<T:Hash + Eq> BaseIter<T> for HashSet<T> {\n-    /// Visit all values in order\n-    fn each(&self, f: &fn(&T) -> bool) -> bool { self.map.each_key(f) }\n-    fn size_hint(&self) -> Option<uint> { Some(self.len()) }\n-}\n-\n impl<T:Hash + Eq> Eq for HashSet<T> {\n     fn eq(&self, other: &HashSet<T>) -> bool { self.map == other.map }\n     fn ne(&self, other: &HashSet<T>) -> bool { self.map != other.map }\n@@ -725,6 +718,12 @@ impl<T:Hash + Eq> HashSet<T> {\n       self.map.contains_key_equiv(value)\n     }\n \n+    /// Visit all elements in arbitrary order\n+    /// FIXME: Remove when all callers are converted\n+    pub fn each(&self, f: &fn(&T) -> bool) -> bool {\n+        self.iter().advance(f)\n+    }\n+\n     /// An iterator visiting all elements in arbitrary order.\n     /// Iterator element type is &'a T.\n     pub fn iter<'a>(&'a self) -> HashSetIterator<'a, T> {"}]}