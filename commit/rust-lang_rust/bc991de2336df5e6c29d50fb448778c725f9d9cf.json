{"sha": "bc991de2336df5e6c29d50fb448778c725f9d9cf", "node_id": "C_kwDOAAsO6NoAKGJjOTkxZGUyMzM2ZGY1ZTZjMjlkNTBmYjQ0ODc3OGM3MjVmOWQ5Y2Y", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-03-10T13:05:43Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-04-03T07:30:29Z"}, "message": "reduce allocations when validating cfgs", "tree": {"sha": "83c1b5a136abcecbeca8f354131d21a7be415cc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83c1b5a136abcecbeca8f354131d21a7be415cc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc991de2336df5e6c29d50fb448778c725f9d9cf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmQqgJUACgkQzXazX3c0\ndp7p9g/+LN+EZYOMGjoKNKQ6Fl0q3QADtu9i9AnJvf35vKl0tyZf5wYK4y8/TNp0\n9L/nNfMztwJcRkN4FYFQdWfXIjMfVYRjfgdSZF48KlqX6tnQ3yxWCKOTObIQHi0/\nfWD+HjvNoZhuDw6ZL/vVZJjvIgeicJFzWG2ulrCNMgsfpTg6mN1i/pUASc3FectP\nDHaYPnErpv6rZY9t87r7JpMxWM2k8dpToMcFEzNomsonG7Ex8+LVNt2mR6WXT0x6\nwMp28sgbFOZXtUPxlJykBI+vtCCgW5Z7O0CDzYqSMdlmStG4nCVTCo+6ofa4bS3C\nkDkxIyUsiz7cJaQfEqplkSVapAsfaxiETooxhVhwvJ+n4glZdj67SB1xXiSo+2yt\nwaZJmReE78UimiWENWyZVqaJFYYC9sN61UythHQ4WEQ3uschSGEe5TRDOu9PnTd9\nfqrLNgq8g0+xBu9CcllM5L6PHT+6Xk3KZdb2sFDpeWk+XcD2VnlWdcYRxz+XNU8o\nGn+GaALz2N7Dw5IovQ2YrHHPQtGQHctSPQGJwOBjtCG6JpxGpwNognyFNK6R6X21\n/6EZ3lqHNNYWWrsLHkNgPdXdjopShT24JCV4mzkCCdkxCNtr+MM0xwunazX4f/6L\nGHF5RVgg+Z5UNVNZywuCvPhiwn8lp+TqQA9wJTOmR5Qr2/cW/Zo=\n=bm4Q\n-----END PGP SIGNATURE-----", "payload": "tree 83c1b5a136abcecbeca8f354131d21a7be415cc4\nparent 9cb4373a8458e38c1ed8b1d8e768e11f305e551f\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1678453543 +0100\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1680507029 +0200\n\nreduce allocations when validating cfgs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc991de2336df5e6c29d50fb448778c725f9d9cf", "html_url": "https://github.com/rust-lang/rust/commit/bc991de2336df5e6c29d50fb448778c725f9d9cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc991de2336df5e6c29d50fb448778c725f9d9cf/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cb4373a8458e38c1ed8b1d8e768e11f305e551f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cb4373a8458e38c1ed8b1d8e768e11f305e551f", "html_url": "https://github.com/rust-lang/rust/commit/9cb4373a8458e38c1ed8b1d8e768e11f305e551f"}], "stats": {"total": 67, "additions": 47, "deletions": 20}, "files": [{"sha": "f03f732684cda4df1153bce5fc94697e9a5d9ea2", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc991de2336df5e6c29d50fb448778c725f9d9cf/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc991de2336df5e6c29d50fb448778c725f9d9cf/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=bc991de2336df5e6c29d50fb448778c725f9d9cf", "patch": "@@ -22,8 +22,9 @@ macro_rules! string_enum {\n \n         impl $name {\n             $vis const VARIANTS: &'static [Self] = &[$(Self::$variant,)*];\n+            $vis const STR_VARIANTS: &'static [&'static str] = &[$(Self::$variant.to_str(),)*];\n \n-            $vis fn to_str(&self) -> &'static str {\n+            $vis const fn to_str(&self) -> &'static str {\n                 match self {\n                     $(Self::$variant => $repr,)*\n                 }"}, {"sha": "a14943c9466cd62eee5a267dc5a0c885111c9cdb", "filename": "src/tools/compiletest/src/header/cfg.rs", "status": "modified", "additions": 45, "deletions": 19, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/bc991de2336df5e6c29d50fb448778c725f9d9cf/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc991de2336df5e6c29d50fb448778c725f9d9cf/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Fcfg.rs?ref=bc991de2336df5e6c29d50fb448778c725f9d9cf", "patch": "@@ -1,4 +1,4 @@\n-use crate::common::{Config, CompareMode, Debugger};\n+use crate::common::{CompareMode, Config, Debugger};\n use std::collections::HashSet;\n \n /// Parses a name-value directive which contains config-specific information, e.g., `ignore-x86`\n@@ -48,7 +48,7 @@ pub(super) fn parse_cfg_name_directive<'a>(\n                     outcome = MatchOutcome::NoMatch;\n                 }\n             }\n-            $(else if $allowed_names.contains(name) {\n+            $(else if $allowed_names.custom_contains(name) {\n                 message = Some(format_message());\n                 outcome = MatchOutcome::NoMatch;\n             })?\n@@ -69,13 +69,6 @@ pub(super) fn parse_cfg_name_directive<'a>(\n             }\n         };\n     }\n-    macro_rules! hashset {\n-        ($($value:expr),* $(,)?) => {{\n-            let mut set = HashSet::new();\n-            $(set.insert($value);)*\n-            set\n-        }}\n-    }\n \n     let target_cfgs = config.target_cfgs();\n     let target_cfg = config.target_cfg();\n@@ -140,7 +133,7 @@ pub(super) fn parse_cfg_name_directive<'a>(\n \n     condition! {\n         name: &config.channel,\n-        allowed_names: hashset![\"stable\", \"beta\", \"nightly\"],\n+        allowed_names: &[\"stable\", \"beta\", \"nightly\"],\n         message: \"when the release channel is {name}\",\n     }\n     condition! {\n@@ -155,7 +148,7 @@ pub(super) fn parse_cfg_name_directive<'a>(\n     }\n     condition! {\n         name: config.stage_id.split('-').next().unwrap(),\n-        allowed_names: hashset![\"stable\", \"beta\", \"nightly\"],\n+        allowed_names: &[\"stable\", \"beta\", \"nightly\"],\n         message: \"when the bootstrapping stage is {name}\",\n     }\n     condition! {\n@@ -170,20 +163,17 @@ pub(super) fn parse_cfg_name_directive<'a>(\n     }\n     maybe_condition! {\n         name: config.debugger.as_ref().map(|d| d.to_str()),\n-        allowed_names: Debugger::VARIANTS\n-            .iter()\n-            .map(|v| v.to_str())\n-            .collect::<HashSet<_>>(),\n+        allowed_names: &Debugger::STR_VARIANTS,\n         message: \"when the debugger is {name}\",\n     }\n     maybe_condition! {\n         name: config.compare_mode\n             .as_ref()\n             .map(|d| format!(\"compare-mode-{}\", d.to_str())),\n-        allowed_names: CompareMode::VARIANTS\n-            .iter()\n-            .map(|cm| format!(\"compare-mode-{}\", cm.to_str()))\n-            .collect::<HashSet<_>>(),\n+        allowed_names: ContainsPrefixed {\n+            prefix: \"compare-mode-\",\n+            inner: CompareMode::STR_VARIANTS,\n+        },\n         message: \"when comparing with {name}\",\n     }\n \n@@ -231,3 +221,39 @@ pub(super) enum MatchOutcome {\n     /// The directive is handled by other parts of our tooling.\n     External,\n }\n+\n+trait CustomContains {\n+    fn custom_contains(&self, item: &str) -> bool;\n+}\n+\n+impl CustomContains for HashSet<String> {\n+    fn custom_contains(&self, item: &str) -> bool {\n+        self.contains(item)\n+    }\n+}\n+\n+impl CustomContains for &[&str] {\n+    fn custom_contains(&self, item: &str) -> bool {\n+        self.contains(&item)\n+    }\n+}\n+\n+impl<const N: usize> CustomContains for [&str; N] {\n+    fn custom_contains(&self, item: &str) -> bool {\n+        self.contains(&item)\n+    }\n+}\n+\n+struct ContainsPrefixed<T: CustomContains> {\n+    prefix: &'static str,\n+    inner: T,\n+}\n+\n+impl<T: CustomContains> CustomContains for ContainsPrefixed<T> {\n+    fn custom_contains(&self, item: &str) -> bool {\n+        match item.strip_prefix(self.prefix) {\n+            Some(stripped) => self.inner.custom_contains(stripped),\n+            None => false,\n+        }\n+    }\n+}"}]}