{"sha": "270bcfdfc226bcdfffd7b8aa903073929fcef5f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MGJjZmRmYzIyNmJjZGZmZmQ3YjhhYTkwMzA3MzkyOWZjZWY1ZjI=", "commit": {"author": {"name": "Geoffrey Copin", "email": "copin.geoffrey@gmail.com", "date": "2020-04-11T15:04:25Z"}, "committer": {"name": "Geoffrey Copin", "email": "copin.geoffrey@gmail.com", "date": "2020-04-11T17:30:41Z"}, "message": "Avoid adding a RecordFieldPat variant to the Pat enum", "tree": {"sha": "3d26bc3e2bcf02add4d86916121d1837bc3d9525", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d26bc3e2bcf02add4d86916121d1837bc3d9525"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/270bcfdfc226bcdfffd7b8aa903073929fcef5f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/270bcfdfc226bcdfffd7b8aa903073929fcef5f2", "html_url": "https://github.com/rust-lang/rust/commit/270bcfdfc226bcdfffd7b8aa903073929fcef5f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/270bcfdfc226bcdfffd7b8aa903073929fcef5f2/comments", "author": {"login": "geoffreycopin", "id": 32264033, "node_id": "MDQ6VXNlcjMyMjY0MDMz", "avatar_url": "https://avatars.githubusercontent.com/u/32264033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffreycopin", "html_url": "https://github.com/geoffreycopin", "followers_url": "https://api.github.com/users/geoffreycopin/followers", "following_url": "https://api.github.com/users/geoffreycopin/following{/other_user}", "gists_url": "https://api.github.com/users/geoffreycopin/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffreycopin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffreycopin/subscriptions", "organizations_url": "https://api.github.com/users/geoffreycopin/orgs", "repos_url": "https://api.github.com/users/geoffreycopin/repos", "events_url": "https://api.github.com/users/geoffreycopin/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffreycopin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "geoffreycopin", "id": 32264033, "node_id": "MDQ6VXNlcjMyMjY0MDMz", "avatar_url": "https://avatars.githubusercontent.com/u/32264033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffreycopin", "html_url": "https://github.com/geoffreycopin", "followers_url": "https://api.github.com/users/geoffreycopin/followers", "following_url": "https://api.github.com/users/geoffreycopin/following{/other_user}", "gists_url": "https://api.github.com/users/geoffreycopin/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffreycopin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffreycopin/subscriptions", "organizations_url": "https://api.github.com/users/geoffreycopin/orgs", "repos_url": "https://api.github.com/users/geoffreycopin/repos", "events_url": "https://api.github.com/users/geoffreycopin/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffreycopin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21443f1b4839872841d8f32e87209f2106d43ad8", "url": "https://api.github.com/repos/rust-lang/rust/commits/21443f1b4839872841d8f32e87209f2106d43ad8", "html_url": "https://github.com/rust-lang/rust/commit/21443f1b4839872841d8f32e87209f2106d43ad8"}], "stats": {"total": 97, "additions": 48, "deletions": 49}, "files": [{"sha": "100e1feb1d2f0d61808b5fadf90041b48f30a54f", "filename": "crates/ra_assists/src/handlers/reorder_fields.rs", "status": "modified", "additions": 47, "deletions": 39, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/270bcfdfc226bcdfffd7b8aa903073929fcef5f2/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270bcfdfc226bcdfffd7b8aa903073929fcef5f2/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs?ref=270bcfdfc226bcdfffd7b8aa903073929fcef5f2", "patch": "@@ -4,71 +4,79 @@ use itertools::Itertools;\n \n use hir::{Adt, ModuleDef, PathResolution, Semantics, Struct};\n use ra_ide_db::RootDatabase;\n-use ra_syntax::ast::{Name, Pat};\n use ra_syntax::{\n-    ast,\n-    ast::{Path, RecordField, RecordLit, RecordPat},\n-    AstNode,\n+    algo, ast,\n+    ast::{Name, Path, RecordLit, RecordPat},\n+    AstNode, SyntaxKind, SyntaxNode,\n };\n \n use crate::{\n     assist_ctx::{Assist, AssistCtx},\n     AssistId,\n };\n+use ra_syntax::ast::{Expr, NameRef};\n \n pub(crate) fn reorder_fields(ctx: AssistCtx) -> Option<Assist> {\n-    reorder_struct(ctx.clone()).or_else(|| reorder_struct_pat(ctx))\n+    reorder::<RecordLit>(ctx.clone()).or_else(|| reorder::<RecordPat>(ctx))\n }\n \n-fn reorder_struct(ctx: AssistCtx) -> Option<Assist> {\n-    let record: RecordLit = ctx.find_node_at_offset()?;\n-    reorder(ctx, &record, &record.path()?, field_name)\n-}\n-\n-fn field_name(r: &RecordField) -> String {\n-    r.name_ref()\n-        .map(|name| name.syntax().text().to_string())\n-        .or_else(|| r.expr().map(|e| e.syntax().text().to_string()))\n-        .unwrap_or_default()\n-}\n-\n-fn reorder_struct_pat(ctx: AssistCtx) -> Option<Assist> {\n-    let record: RecordPat = ctx.find_node_at_offset()?;\n-    reorder(ctx, &record, &record.path()?, field_pat_name)\n-}\n+fn reorder<R: AstNode>(ctx: AssistCtx) -> Option<Assist> {\n+    let record = ctx.find_node_at_offset::<R>()?;\n+    let path = record.syntax().children().find_map(Path::cast)?;\n \n-fn field_pat_name(field: &Pat) -> String {\n-    field.syntax().children().find_map(Name::cast).map(|n| n.to_string()).unwrap_or_default()\n-}\n+    let ranks = compute_fields_ranks(&path, &ctx)?;\n \n-fn reorder<R: AstNode, F: AstNode + Eq + Clone>(\n-    ctx: AssistCtx,\n-    record: &R,\n-    path: &Path,\n-    field_name: fn(&F) -> String,\n-) -> Option<Assist> {\n-    let ranks = compute_fields_ranks(path, &ctx)?;\n-    let fields: Vec<F> = get_fields(record);\n-    let sorted_fields: Vec<F> =\n-        sort_by_rank(&fields, |f| *ranks.get(&field_name(f)).unwrap_or(&usize::max_value()));\n+    let fields = get_fields(&record.syntax());\n+    let sorted_fields = sorted_by_rank(&fields, |node| {\n+        *ranks.get(&get_field_name(node)).unwrap_or(&usize::max_value())\n+    });\n \n     if sorted_fields == fields {\n         return None;\n     }\n \n     ctx.add_assist(AssistId(\"reorder_fields\"), \"Reorder record fields\", |edit| {\n-        for (old, new) in fields.into_iter().zip(sorted_fields) {\n-            edit.replace_ast(old, new);\n+        for (old, new) in fields.iter().zip(&sorted_fields) {\n+            algo::diff(old, new).into_text_edit(edit.text_edit_builder());\n         }\n         edit.target(record.syntax().text_range())\n     })\n }\n \n-fn get_fields<R: AstNode, F: AstNode>(record: &R) -> Vec<F> {\n-    record.syntax().children().flat_map(|n1| n1.children()).filter_map(|n3| F::cast(n3)).collect()\n+fn get_fields_kind(node: &SyntaxNode) -> Vec<SyntaxKind> {\n+    use SyntaxKind::*;\n+    match node.kind() {\n+        RECORD_LIT => vec![RECORD_FIELD],\n+        RECORD_PAT => vec![RECORD_FIELD_PAT, BIND_PAT],\n+        _ => vec![],\n+    }\n+}\n+\n+fn get_field_name(node: &SyntaxNode) -> String {\n+    use SyntaxKind::*;\n+    match node.kind() {\n+        RECORD_FIELD => {\n+            if let Some(name) = node.children().find_map(NameRef::cast) {\n+                return name.to_string();\n+            }\n+            node.children().find_map(Expr::cast).map(|expr| expr.to_string()).unwrap_or_default()\n+        }\n+        BIND_PAT | RECORD_FIELD_PAT => {\n+            node.children().find_map(Name::cast).map(|n| n.to_string()).unwrap_or_default()\n+        }\n+        _ => String::new(),\n+    }\n+}\n+\n+fn get_fields(record: &SyntaxNode) -> Vec<SyntaxNode> {\n+    let kinds = get_fields_kind(record);\n+    record.children().flat_map(|n| n.children()).filter(|n| kinds.contains(&n.kind())).collect()\n }\n \n-fn sort_by_rank<F: AstNode + Clone>(fields: &[F], get_rank: impl FnMut(&F) -> usize) -> Vec<F> {\n+fn sorted_by_rank(\n+    fields: &[SyntaxNode],\n+    get_rank: impl Fn(&SyntaxNode) -> usize,\n+) -> Vec<SyntaxNode> {\n     fields.iter().cloned().sorted_by_key(get_rank).collect()\n }\n "}, {"sha": "e1b08d48fb9ecade266d3c7d644ad303c1072098", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270bcfdfc226bcdfffd7b8aa903073929fcef5f2/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270bcfdfc226bcdfffd7b8aa903073929fcef5f2/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=270bcfdfc226bcdfffd7b8aa903073929fcef5f2", "patch": "@@ -691,8 +691,6 @@ impl ExprCollector<'_> {\n             }\n             // FIXME: implement\n             ast::Pat::BoxPat(_) | ast::Pat::RangePat(_) | ast::Pat::MacroPat(_) => Pat::Missing,\n-            // FIXME: implement\n-            ast::Pat::RecordFieldPat(_) => Pat::Missing,\n         };\n         let ptr = AstPtr::new(&pat);\n         self.alloc_pat(pattern, Either::Left(ptr))"}, {"sha": "20f663046797bb22a453fc899931e433c0e9e1d9", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/270bcfdfc226bcdfffd7b8aa903073929fcef5f2/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270bcfdfc226bcdfffd7b8aa903073929fcef5f2/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=270bcfdfc226bcdfffd7b8aa903073929fcef5f2", "patch": "@@ -3256,7 +3256,6 @@ pub enum Pat {\n     RangePat(RangePat),\n     LiteralPat(LiteralPat),\n     MacroPat(MacroPat),\n-    RecordFieldPat(RecordFieldPat),\n }\n impl From<OrPat> for Pat {\n     fn from(node: OrPat) -> Pat { Pat::OrPat(node) }\n@@ -3303,15 +3302,12 @@ impl From<LiteralPat> for Pat {\n impl From<MacroPat> for Pat {\n     fn from(node: MacroPat) -> Pat { Pat::MacroPat(node) }\n }\n-impl From<RecordFieldPat> for Pat {\n-    fn from(node: RecordFieldPat) -> Pat { Pat::RecordFieldPat(node) }\n-}\n impl AstNode for Pat {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             OR_PAT | PAREN_PAT | REF_PAT | BOX_PAT | BIND_PAT | PLACEHOLDER_PAT | DOT_DOT_PAT\n             | PATH_PAT | RECORD_PAT | TUPLE_STRUCT_PAT | TUPLE_PAT | SLICE_PAT | RANGE_PAT\n-            | LITERAL_PAT | MACRO_PAT | RECORD_FIELD_PAT => true,\n+            | LITERAL_PAT | MACRO_PAT => true,\n             _ => false,\n         }\n     }\n@@ -3332,7 +3328,6 @@ impl AstNode for Pat {\n             RANGE_PAT => Pat::RangePat(RangePat { syntax }),\n             LITERAL_PAT => Pat::LiteralPat(LiteralPat { syntax }),\n             MACRO_PAT => Pat::MacroPat(MacroPat { syntax }),\n-            RECORD_FIELD_PAT => Pat::RecordFieldPat(RecordFieldPat { syntax }),\n             _ => return None,\n         };\n         Some(res)\n@@ -3354,7 +3349,6 @@ impl AstNode for Pat {\n             Pat::RangePat(it) => &it.syntax,\n             Pat::LiteralPat(it) => &it.syntax,\n             Pat::MacroPat(it) => &it.syntax,\n-            Pat::RecordFieldPat(it) => &it.syntax,\n         }\n     }\n }"}, {"sha": "bb97b13fe52e794105481327bba5a9f54b5774d8", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/270bcfdfc226bcdfffd7b8aa903073929fcef5f2/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270bcfdfc226bcdfffd7b8aa903073929fcef5f2/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=270bcfdfc226bcdfffd7b8aa903073929fcef5f2", "patch": "@@ -741,7 +741,6 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             RangePat,\n             LiteralPat,\n             MacroPat,\n-            RecordFieldPat,\n         }\n \n         enum RecordInnerPat {"}]}