{"sha": "d1c6e34e1c633159d50187c3e3cf65547d9b8cb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxYzZlMzRlMWM2MzMxNTlkNTAxODdjM2UzY2Y2NTU0N2Q5YjhjYjc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-06T19:20:43Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-06T19:20:43Z"}, "message": "core: Inline a bunch of unsafe functions", "tree": {"sha": "24880c11ea5b29f6753a114627dcfef0d58ff05a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24880c11ea5b29f6753a114627dcfef0d58ff05a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1c6e34e1c633159d50187c3e3cf65547d9b8cb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1c6e34e1c633159d50187c3e3cf65547d9b8cb7", "html_url": "https://github.com/rust-lang/rust/commit/d1c6e34e1c633159d50187c3e3cf65547d9b8cb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1c6e34e1c633159d50187c3e3cf65547d9b8cb7/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "712dd23541eb5477933c38d444aa36da40d40021", "url": "https://api.github.com/repos/rust-lang/rust/commits/712dd23541eb5477933c38d444aa36da40d40021", "html_url": "https://github.com/rust-lang/rust/commit/712dd23541eb5477933c38d444aa36da40d40021"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "636a076abb96f1a936c022899b9ec1244e541ec8", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1c6e34e1c633159d50187c3e3cf65547d9b8cb7/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1c6e34e1c633159d50187c3e3cf65547d9b8cb7/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=d1c6e34e1c633159d50187c3e3cf65547d9b8cb7", "patch": "@@ -16,13 +16,15 @@ Function: addr_of\n \n Get an unsafe pointer to a value\n */\n+#[inline(always)]\n fn addr_of<T>(val: T) -> *T { ret rusti::addr_of(val); }\n \n /*\n Function: mut_addr_of\n \n Get an unsafe mutable pointer to a value\n */\n+#[inline(always)]\n fn mut_addr_of<T>(val: T) -> *mutable T unsafe {\n     ret unsafe::reinterpret_cast(rusti::addr_of(val));\n }\n@@ -42,6 +44,7 @@ Function: mut_offset\n \n Calculate the offset from a mutable pointer\n */\n+#[inline(always)]\n fn mut_offset<T>(ptr: *mutable T, count: uint) -> *mutable T {\n     ret rusti::ptr_offset(ptr as *T, count) as *mutable T;\n }\n@@ -52,6 +55,7 @@ Function: null\n \n Create an unsafe null pointer\n */\n+#[inline(always)]\n fn null<T>() -> *T unsafe { ret unsafe::reinterpret_cast(0u); }\n \n /*\n@@ -60,6 +64,7 @@ Function: memcpy\n Copies data from one src to dst that is not overlapping each other.\n Count is the number of elements to copy and not the number of bytes.\n */\n+#[inline(always)]\n unsafe fn memcpy<T>(dst: *T, src: *T, count: uint) {\n     rusti::memcpy(dst, src, count);\n }\n@@ -70,6 +75,7 @@ Function: memmove\n Copies data from one src to dst, overlap between the two pointers may occur.\n Count is the number of elements to copy and not the number of bytes.\n */\n+#[inline(always)]\n unsafe fn memmove<T>(dst: *T, src: *T, count: uint)  {\n     rusti::memmove(dst, src, count);\n }"}, {"sha": "d3d2f4ee088761d3e1123611cc5e172608c0e8af", "filename": "src/libcore/unsafe.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1c6e34e1c633159d50187c3e3cf65547d9b8cb7/src%2Flibcore%2Funsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1c6e34e1c633159d50187c3e3cf65547d9b8cb7/src%2Flibcore%2Funsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funsafe.rs?ref=d1c6e34e1c633159d50187c3e3cf65547d9b8cb7", "patch": "@@ -17,6 +17,7 @@ Function: reinterpret_cast\n \n Casts the value at `src` to U. The two types must have the same length.\n */\n+#[inline(always)]\n unsafe fn reinterpret_cast<T, U>(src: T) -> U {\n     let t1 = sys::get_type_desc::<T>();\n     let t2 = sys::get_type_desc::<U>();\n@@ -36,6 +37,7 @@ to run any required cleanup or memory-management operations on it. This\n can be used for various acts of magick, particularly when using\n reinterpret_cast on managed pointer types.\n */\n+#[inline(always)]\n unsafe fn leak<T>(-thing: T) { rusti::leak(thing); }\n \n #[cfg(test)]"}]}