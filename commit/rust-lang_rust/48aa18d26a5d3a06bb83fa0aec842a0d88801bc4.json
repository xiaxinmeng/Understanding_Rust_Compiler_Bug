{"sha": "48aa18d26a5d3a06bb83fa0aec842a0d88801bc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4YWExOGQyNmE1ZDNhMDZiYjgzZmEwYWVjODQyYTBkODg4MDFiYzQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-07-13T06:16:50Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-07-13T06:16:50Z"}, "message": "Squirrel away the JIT contexts into TLS when done\n\nThis prevents attempting to run deallocated code (which is no longer present\nalways)", "tree": {"sha": "1657943fa444659c721a14a7a47b2ab4f26f4380", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1657943fa444659c721a14a7a47b2ab4f26f4380"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48aa18d26a5d3a06bb83fa0aec842a0d88801bc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48aa18d26a5d3a06bb83fa0aec842a0d88801bc4", "html_url": "https://github.com/rust-lang/rust/commit/48aa18d26a5d3a06bb83fa0aec842a0d88801bc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48aa18d26a5d3a06bb83fa0aec842a0d88801bc4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ee54a86171d70f439b3cf77e566150b78251bc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ee54a86171d70f439b3cf77e566150b78251bc2", "html_url": "https://github.com/rust-lang/rust/commit/1ee54a86171d70f439b3cf77e566150b78251bc2"}], "stats": {"total": 68, "additions": 52, "deletions": 16}, "files": [{"sha": "c65d2fbdec5226c56ccb9c9e8f66b7616d68daef", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 52, "deletions": 16, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/48aa18d26a5d3a06bb83fa0aec842a0d88801bc4/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48aa18d26a5d3a06bb83fa0aec842a0d88801bc4/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=48aa18d26a5d3a06bb83fa0aec842a0d88801bc4", "patch": "@@ -101,15 +101,30 @@ pub mod jit {\n     use back::link::llvm_err;\n     use driver::session::Session;\n     use lib::llvm::llvm;\n-    use lib::llvm::{ModuleRef, ContextRef};\n+    use lib::llvm::{ModuleRef, ContextRef, ExecutionEngineRef};\n     use metadata::cstore;\n \n     use std::cast;\n-    use std::ptr;\n-    use std::str;\n-    use std::sys;\n+    use std::local_data;\n     use std::unstable::intrinsics;\n \n+    struct LLVMJITData {\n+        ee: ExecutionEngineRef,\n+        llcx: ContextRef\n+    }\n+\n+    pub trait Engine {}\n+    impl Engine for LLVMJITData {}\n+\n+    impl Drop for LLVMJITData {\n+        fn drop(&self) {\n+            unsafe {\n+                llvm::LLVMDisposeExecutionEngine(self.ee);\n+                llvm::LLVMContextDispose(self.llcx);\n+            }\n+        }\n+    }\n+\n     pub fn exec(sess: Session,\n                 c: ContextRef,\n                 m: ModuleRef,\n@@ -130,7 +145,7 @@ pub mod jit {\n \n                 debug!(\"linking: %s\", path);\n \n-                do str::as_c_str(path) |buf_t| {\n+                do path.as_c_str |buf_t| {\n                     if !llvm::LLVMRustLoadCrate(manager, buf_t) {\n                         llvm_err(sess, ~\"Could not link\");\n                     }\n@@ -149,7 +164,7 @@ pub mod jit {\n             // Next, we need to get a handle on the _rust_main function by\n             // looking up it's corresponding ValueRef and then requesting that\n             // the execution engine compiles the function.\n-            let fun = do str::as_c_str(\"_rust_main\") |entry| {\n+            let fun = do \"_rust_main\".as_c_str |entry| {\n                 llvm::LLVMGetNamedFunction(m, entry)\n             };\n             if fun.is_null() {\n@@ -163,20 +178,41 @@ pub mod jit {\n             // closure\n             let code = llvm::LLVMGetPointerToGlobal(ee, fun);\n             assert!(!code.is_null());\n-            let closure = sys::Closure {\n-                code: code,\n-                env: ptr::null()\n-            };\n-            let func: &fn() = cast::transmute(closure);\n+            let func: extern \"Rust\" fn() = cast::transmute(code);\n             func();\n \n-            // Sadly, there currently is no interface to re-use this execution\n-            // engine, so it's disposed of here along with the context to\n-            // prevent leaks.\n-            llvm::LLVMDisposeExecutionEngine(ee);\n-            llvm::LLVMContextDispose(c);\n+            // Currently there is no method of re-using the executing engine\n+            // from LLVM in another call to the JIT. While this kinda defeats\n+            // the purpose of having a JIT in the first place, there isn't\n+            // actually much code currently which would re-use data between\n+            // different invocations of this. Additionally, the compilation\n+            // model currently isn't designed to support this scenario.\n+            //\n+            // We can't destroy the engine/context immediately here, however,\n+            // because of annihilation. The JIT code contains drop glue for any\n+            // types defined in the crate we just ran, and if any of those boxes\n+            // are going to be dropped during annihilation, the drop glue must\n+            // be run. Hence, we need to transfer ownership of this jit engine\n+            // to the caller of this function. To be convenient for now, we\n+            // shove it into TLS and have someone else remove it later on.\n+            let data = ~LLVMJITData { ee: ee, llcx: c };\n+            set_engine(data as ~Engine);\n         }\n     }\n+\n+    fn engine_key(_: ~Engine) {}\n+\n+    #[cfg(not(stage0))]\n+    fn set_engine(engine: ~Engine) {\n+        unsafe { local_data::set(engine_key, engine) }\n+    }\n+    #[cfg(stage0)]\n+    fn set_engine(_: ~Engine) {}\n+\n+    #[cfg(not(stage0))]\n+    pub fn consume_engine() -> Option<~Engine> {\n+        unsafe { local_data::pop(engine_key) }\n+    }\n }\n \n pub mod write {"}]}