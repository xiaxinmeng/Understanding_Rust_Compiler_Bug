{"sha": "13ec077b915c40265c9a3acb6aab09d94556a5f9", "node_id": "C_kwDOAAsO6NoAKDEzZWMwNzdiOTE1YzQwMjY1YzlhM2FjYjZhYWIwOWQ5NDU1NmE1Zjk", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-03T09:10:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-03T09:10:33Z"}, "message": "Merge #10437\n\n10437: fix: Fix extract_variable not allowing to extract macro calls r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/6866\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "f3eeaaefaf171749e6b9055f66527c3d51d0f5ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3eeaaefaf171749e6b9055f66527c3d51d0f5ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13ec077b915c40265c9a3acb6aab09d94556a5f9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhWXOJCRBK7hj4Ov3rIwAAcp8IAGnIlANjy3x7csDdnfKHp/Zo\nYZ1KsLvjaf+2Q8r7UVrVB+7dTyoSxenj8Sd5lAirs/4vSkIpMXNSIQK0v2RDtjWX\ndbL/Y0YDwHYIGhOyjTm2r9fuMr1dX6tb7k9r4bECqLXhnnWIUQfgpq9Pc5BWGyJV\nJRkqonLU8kkBKdaW6RXSmicpQRX4pdKJUb1isTFNqIq0GhqfKfGBjjwOxpelpAk4\nrlSshMcW+ybyEprUsCglWTHYmgBApdmxP0cXjZR+xOovE9jv453VboX9TVAlamUw\ny72DQrerpWq+xGGFMFoLddRpbpvkfDp8F1DWNE1GJ0MAwzjVMhgomsEP0Oxv3VE=\n=AP0s\n-----END PGP SIGNATURE-----\n", "payload": "tree f3eeaaefaf171749e6b9055f66527c3d51d0f5ec\nparent 60c5449120659fdef1b716c9e584356accf5e5e3\nparent a359a1f2e31e9d03947197f5ab179aa59361fdd5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1633252233 +0000\ncommitter GitHub <noreply@github.com> 1633252233 +0000\n\nMerge #10437\n\n10437: fix: Fix extract_variable not allowing to extract macro calls r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/6866\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13ec077b915c40265c9a3acb6aab09d94556a5f9", "html_url": "https://github.com/rust-lang/rust/commit/13ec077b915c40265c9a3acb6aab09d94556a5f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13ec077b915c40265c9a3acb6aab09d94556a5f9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60c5449120659fdef1b716c9e584356accf5e5e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/60c5449120659fdef1b716c9e584356accf5e5e3", "html_url": "https://github.com/rust-lang/rust/commit/60c5449120659fdef1b716c9e584356accf5e5e3"}, {"sha": "a359a1f2e31e9d03947197f5ab179aa59361fdd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a359a1f2e31e9d03947197f5ab179aa59361fdd5", "html_url": "https://github.com/rust-lang/rust/commit/a359a1f2e31e9d03947197f5ab179aa59361fdd5"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "55e5da7fe7f5d58d855c3880d598a6ee91514e0b", "filename": "crates/ide_assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/13ec077b915c40265c9a3acb6aab09d94556a5f9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ec077b915c40265c9a3acb6aab09d94556a5f9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=13ec077b915c40265c9a3acb6aab09d94556a5f9", "patch": "@@ -1,6 +1,7 @@\n use stdx::format_to;\n use syntax::{\n     ast::{self, AstNode},\n+    NodeOrToken,\n     SyntaxKind::{\n         BLOCK_EXPR, BREAK_EXPR, CLOSURE_EXPR, COMMENT, LOOP_EXPR, MATCH_ARM, MATCH_GUARD,\n         PATH_EXPR, RETURN_EXPR,\n@@ -30,20 +31,26 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n     if ctx.frange.range.is_empty() {\n         return None;\n     }\n-    let node = ctx.covering_element();\n-    if node.kind() == COMMENT {\n-        cov_mark::hit!(extract_var_in_comment_is_not_applicable);\n-        return None;\n-    }\n+    let node = match ctx.covering_element() {\n+        NodeOrToken::Node(it) => it,\n+        NodeOrToken::Token(it) if it.kind() == COMMENT => {\n+            cov_mark::hit!(extract_var_in_comment_is_not_applicable);\n+            return None;\n+        }\n+        NodeOrToken::Token(it) => it.parent()?,\n+    };\n+    let node = node.ancestors().take_while(|anc| anc.text_range() == node.text_range()).last()?;\n     let to_extract = node\n-        .ancestors()\n-        .take_while(|it| it.text_range().contains_range(ctx.frange.range))\n+        .descendants()\n+        .take_while(|it| ctx.frange.range.contains_range(it.text_range()))\n         .find_map(valid_target_expr)?;\n+\n     if let Some(ty_info) = ctx.sema.type_of_expr(&to_extract) {\n         if ty_info.adjusted().is_unit() {\n             return None;\n         }\n     }\n+\n     let anchor = Anchor::from(&to_extract)?;\n     let indent = anchor.syntax().prev_sibling_or_token()?.as_token()?.clone();\n     let target = to_extract.syntax().text_range();\n@@ -146,8 +153,11 @@ enum Anchor {\n \n impl Anchor {\n     fn from(to_extract: &ast::Expr) -> Option<Anchor> {\n-        to_extract.syntax().ancestors().take_while(|it| !ast::Item::can_cast(it.kind())).find_map(\n-            |node| {\n+        to_extract\n+            .syntax()\n+            .ancestors()\n+            .take_while(|it| !ast::Item::can_cast(it.kind()) || ast::MacroCall::can_cast(it.kind()))\n+            .find_map(|node| {\n                 if let Some(expr) =\n                     node.parent().and_then(ast::StmtList::cast).and_then(|it| it.tail_expr())\n                 {\n@@ -181,8 +191,7 @@ impl Anchor {\n                     return Some(Anchor::Before(node));\n                 }\n                 None\n-            },\n-        )\n+            })\n     }\n \n     fn syntax(&self) -> &SyntaxNode {"}]}