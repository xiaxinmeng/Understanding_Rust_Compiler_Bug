{"sha": "42b6ed13be779499d118af721913a66bd3d946ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyYjZlZDEzYmU3Nzk0OTlkMTE4YWY3MjE5MTNhNjZiZDNkOTQ2ZWE=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-01-19T04:59:15Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-01-19T04:59:29Z"}, "message": "account temporary borrow by raw-ptr", "tree": {"sha": "4d610dcada18ba712f51e1e8ceb499f49b05a87c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d610dcada18ba712f51e1e8ceb499f49b05a87c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42b6ed13be779499d118af721913a66bd3d946ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42b6ed13be779499d118af721913a66bd3d946ea", "html_url": "https://github.com/rust-lang/rust/commit/42b6ed13be779499d118af721913a66bd3d946ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42b6ed13be779499d118af721913a66bd3d946ea/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2480c9eac15608591f58730aed27caac9c30b4c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2480c9eac15608591f58730aed27caac9c30b4c2", "html_url": "https://github.com/rust-lang/rust/commit/2480c9eac15608591f58730aed27caac9c30b4c2"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "189412f60b90458f440d1d6286df1ee634c93c91", "filename": "src/librustc/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/42b6ed13be779499d118af721913a66bd3d946ea/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b6ed13be779499d118af721913a66bd3d946ea/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=42b6ed13be779499d118af721913a66bd3d946ea", "patch": "@@ -13,6 +13,7 @@ use rustc_errors::{\n };\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::def::DefKind;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::Node;\n use rustc_span::source_map::SourceMap;\n@@ -1366,14 +1367,40 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         if let Some(expr_id) = expr {\n             let expr = hir.expect_expr(expr_id);\n-            let is_ref = tables.expr_adjustments(expr).iter().any(|adj| adj.is_region_borrow());\n+            debug!(\"target_ty evaluated from {:?}\", expr);\n+\n             let parent = hir.get_parent_node(expr_id);\n             if let Some(hir::Node::Expr(e)) = hir.find(parent) {\n-                let method_span = hir.span(parent);\n-                if tables.is_method_call(e) && is_ref {\n+                let parent_span = hir.span(parent);\n+                let parent_did = parent.owner_def_id();\n+                // ```rust\n+                // impl T {\n+                //     fn foo(&self) -> i32 {}\n+                // }\n+                // T.foo();\n+                // ^^^^^^^ a temporary `&T` created inside this method call due to `&self`\n+                // ```\n+                //\n+                let is_region_borrow =\n+                    tables.expr_adjustments(expr).iter().any(|adj| adj.is_region_borrow());\n+\n+                // ```rust\n+                // struct Foo(*const u8);\n+                // bar(Foo(std::ptr::null())).await;\n+                //     ^^^^^^^^^^^^^^^^^^^^^ raw-ptr `*T` created inside this struct ctor.\n+                // ```\n+                debug!(\"parent_def_kind: {:?}\", self.tcx.def_kind(parent_did));\n+                let is_raw_borrow_inside_fn_like_call = match self.tcx.def_kind(parent_did) {\n+                    Some(DefKind::Fn) | Some(DefKind::Ctor(..)) => target_ty.is_unsafe_ptr(),\n+                    _ => false,\n+                };\n+\n+                if (tables.is_method_call(e) && is_region_borrow)\n+                    || is_raw_borrow_inside_fn_like_call\n+                {\n                     err.span_help(\n-                        method_span,\n-                        \"consider moving this method call into a `let` \\\n+                        parent_span,\n+                        \"consider moving this into a `let` \\\n                         binding to create a shorter lived borrow\",\n                     );\n                 }"}]}