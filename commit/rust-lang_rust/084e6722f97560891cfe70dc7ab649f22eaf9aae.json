{"sha": "084e6722f97560891cfe70dc7ab649f22eaf9aae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NGU2NzIyZjk3NTYwODkxY2ZlNzBkYzdhYjY0OWYyMmVhZjlhYWU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-28T18:28:50Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-21T22:17:29Z"}, "message": "Use Arena inside hir::Item.", "tree": {"sha": "3ade7fb210b8aa19e775b2fc01bbfb962a9960e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ade7fb210b8aa19e775b2fc01bbfb962a9960e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/084e6722f97560891cfe70dc7ab649f22eaf9aae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/084e6722f97560891cfe70dc7ab649f22eaf9aae", "html_url": "https://github.com/rust-lang/rust/commit/084e6722f97560891cfe70dc7ab649f22eaf9aae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/084e6722f97560891cfe70dc7ab649f22eaf9aae/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dc79f1f7d8aabbed2983a91ba1027373b376a65", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dc79f1f7d8aabbed2983a91ba1027373b376a65", "html_url": "https://github.com/rust-lang/rust/commit/4dc79f1f7d8aabbed2983a91ba1027373b376a65"}], "stats": {"total": 406, "additions": 208, "deletions": 198}, "files": [{"sha": "d95e5f64f0cd1937cda5ddc12daa849fbc805dfe", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -125,7 +125,12 @@ macro_rules! arena_types {\n             // HIR nodes arenas\n             [few] hir_forest: rustc::hir::map::Forest<$tcx>,\n             [] attribute: syntax::ast::Attribute,\n+            [] global_asm: rustc::hir::GlobalAsm,\n+            [] impl_item_ref: rustc::hir::ImplItemRef,\n             [] macro_def: rustc::hir::MacroDef,\n+            [] path: rustc::hir::Path,\n+            [] trait_item_ref: rustc::hir::TraitItemRef,\n+            [] ty: rustc::hir::Ty,\n         ], $tcx);\n     )\n }"}, {"sha": "d50d60e88c28a98e78a213353374e6f7a61aaf7c", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -86,7 +86,7 @@ impl Display for Target {\n }\n \n impl Target {\n-    pub(crate) fn from_item(item: &Item) -> Target {\n+    pub(crate) fn from_item(item: &Item<'_>) -> Target {\n         match item.kind {\n             ItemKind::ExternCrate(..) => Target::ExternCrate,\n             ItemKind::Use(..) => Target::Use,\n@@ -161,7 +161,7 @@ impl CheckAttrVisitor<'tcx> {\n         attrs: &HirVec<Attribute>,\n         span: &Span,\n         target: Target,\n-        item: Option<&Item>,\n+        item: Option<&Item<'_>>,\n     ) {\n         let mut is_valid = true;\n         for attr in attrs {\n@@ -335,7 +335,7 @@ impl CheckAttrVisitor<'tcx> {\n         attrs: &HirVec<Attribute>,\n         span: &Span,\n         target: Target,\n-        item: Option<&Item>,\n+        item: Option<&Item<'_>>,\n     ) {\n         // Extract the names of all repr hints, e.g., [foo, bar, align] for:\n         // ```\n@@ -492,7 +492,7 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n \n-    fn visit_item(&mut self, item: &'tcx Item) {\n+    fn visit_item(&mut self, item: &'tcx Item<'tcx>) {\n         let target = Target::from_item(item);\n         self.check_attributes(item.hir_id, &item.attrs, &item.span, target, Some(item));\n         intravisit::walk_item(self, item)\n@@ -527,7 +527,7 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n     }\n }\n \n-fn is_c_like_enum(item: &Item) -> bool {\n+fn is_c_like_enum(item: &Item<'_>) -> bool {\n     if let ItemKind::Enum(ref def, _) = item.kind {\n         for variant in &def.variants {\n             match variant.data {"}, {"sha": "28c8e58feaf608d2d99b54cd087cd5db4318752e", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -218,7 +218,7 @@ pub trait Visitor<'v>: Sized {\n \n     /// Visits the top-level item and (optionally) nested items / impl items. See\n     /// `visit_nested_item` for details.\n-    fn visit_item(&mut self, i: &'v Item) {\n+    fn visit_item(&mut self, i: &'v Item<'v>) {\n         walk_item(self, i)\n     }\n \n@@ -462,7 +462,7 @@ pub fn walk_param<'v, V: Visitor<'v>>(visitor: &mut V, param: &'v Param) {\n     walk_list!(visitor, visit_attribute, &param.attrs);\n }\n \n-pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n+pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n     visitor.visit_vis(&item.vis);\n     visitor.visit_ident(item.ident);\n     match item.kind {\n@@ -527,7 +527,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             ref generics,\n             ref opt_trait_reference,\n             ref typ,\n-            ref impl_item_refs\n+            impl_item_refs\n         ) => {\n             visitor.visit_id(item.hir_id);\n             visitor.visit_generics(generics);\n@@ -542,7 +542,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             visitor.visit_variant_data(struct_definition, item.ident.name, generics, item.hir_id,\n                                        item.span);\n         }\n-        ItemKind::Trait(.., ref generics, ref bounds, ref trait_item_refs) => {\n+        ItemKind::Trait(.., ref generics, ref bounds, trait_item_refs) => {\n             visitor.visit_id(item.hir_id);\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_param_bound, bounds);"}, {"sha": "4d3fd5e05b4f904da8f1edf48669f86d43b096c8", "filename": "src/librustc/hir/itemlikevisit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -45,7 +45,7 @@ use super::intravisit::Visitor;\n /// existing `fn visit_nested` methods to see where changes are\n /// needed.\n pub trait ItemLikeVisitor<'hir> {\n-    fn visit_item(&mut self, item: &'hir Item);\n+    fn visit_item(&mut self, item: &'hir Item<'hir>);\n     fn visit_trait_item(&mut self, trait_item: &'hir TraitItem);\n     fn visit_impl_item(&mut self, impl_item: &'hir ImplItem);\n }\n@@ -65,7 +65,7 @@ impl<'v, 'hir, V> DeepVisitor<'v, V>\n impl<'v, 'hir, V> ItemLikeVisitor<'hir> for DeepVisitor<'v, V>\n     where V: Visitor<'hir>\n {\n-    fn visit_item(&mut self, item: &'hir Item) {\n+    fn visit_item(&mut self, item: &'hir Item<'hir>) {\n         self.visitor.visit_item(item);\n     }\n \n@@ -80,7 +80,7 @@ impl<'v, 'hir, V> ItemLikeVisitor<'hir> for DeepVisitor<'v, V>\n \n /// A parallel variant of `ItemLikeVisitor`.\n pub trait ParItemLikeVisitor<'hir> {\n-    fn visit_item(&self, item: &'hir Item);\n+    fn visit_item(&self, item: &'hir Item<'hir>);\n     fn visit_trait_item(&self, trait_item: &'hir TraitItem);\n     fn visit_impl_item(&self, impl_item: &'hir ImplItem);\n }\n@@ -95,7 +95,7 @@ pub struct ParDeepVisitor<V>(pub V);\n impl<'hir, V> ParItemLikeVisitor<'hir> for ParDeepVisitor<V>\n     where V: IntoVisitor<'hir>\n {\n-    fn visit_item(&self, item: &'hir Item) {\n+    fn visit_item(&self, item: &'hir Item<'hir>) {\n         self.0.into_visitor().visit_item(item);\n     }\n "}, {"sha": "6ab2bb53e2a81c9d415c48006def84e6cd0fa5da", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -95,7 +95,7 @@ pub struct LoweringContext<'a, 'hir: 'a> {\n     arena: &'hir Arena<'hir>,\n \n     /// The items being lowered are collected here.\n-    items: BTreeMap<hir::HirId, hir::Item>,\n+    items: BTreeMap<hir::HirId, hir::Item<'hir>>,\n \n     trait_items: BTreeMap<hir::TraitItemId, hir::TraitItem>,\n     impl_items: BTreeMap<hir::ImplItemId, hir::ImplItem>,\n@@ -566,7 +566,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n     }\n \n-    fn insert_item(&mut self, item: hir::Item) {\n+    fn insert_item(&mut self, item: hir::Item<'hir>) {\n         let id = item.hir_id;\n         // FIXME: Use `debug_asset-rt`.\n         assert_eq!(id.local_id, hir::ItemLocalId::from_u32(0));\n@@ -873,7 +873,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     // for them.\n     fn with_in_scope_lifetime_defs<T, F>(&mut self, params: &[GenericParam], f: F) -> T\n     where\n-        F: FnOnce(&mut LoweringContext<'_, '_>) -> T,\n+        F: FnOnce(&mut LoweringContext<'_, 'hir>) -> T,\n     {\n         let old_len = self.in_scope_lifetimes.len();\n         let lt_def_names = params.iter().filter_map(|param| match param.kind {"}, {"sha": "7e5ac42d13e85c2dbdd2b8054441de6fdcee2a73", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 37, "deletions": 34, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -107,7 +107,7 @@ impl<'a, 'lowering, 'hir> Visitor<'a> for ItemLowerer<'a, 'lowering, 'hir> {\n     }\n }\n \n-impl LoweringContext<'_, '_> {\n+impl LoweringContext<'_, 'hir> {\n     // Same as the method above, but accepts `hir::GenericParam`s\n     // instead of `ast::GenericParam`s.\n     // This should only be used with generics that have already had their\n@@ -225,7 +225,7 @@ impl LoweringContext<'_, '_> {\n         }\n     }\n \n-    pub fn lower_item(&mut self, i: &Item) -> Option<hir::Item> {\n+    pub fn lower_item(&mut self, i: &Item) -> Option<hir::Item<'hir>> {\n         let mut ident = i.ident;\n         let mut vis = self.lower_visibility(&i.vis, None);\n         let attrs = self.lower_attrs(&i.attrs);\n@@ -269,7 +269,7 @@ impl LoweringContext<'_, '_> {\n         attrs: &hir::HirVec<Attribute>,\n         vis: &mut hir::Visibility,\n         i: &ItemKind,\n-    ) -> hir::ItemKind {\n+    ) -> hir::ItemKind<'hir> {\n         match *i {\n             ItemKind::ExternCrate(orig_name) => hir::ItemKind::ExternCrate(orig_name),\n             ItemKind::Use(ref use_tree) => {\n@@ -282,29 +282,31 @@ impl LoweringContext<'_, '_> {\n                 self.lower_use_tree(use_tree, &prefix, id, vis, ident, attrs)\n             }\n             ItemKind::Static(ref t, m, ref e) => {\n+                let ty = self.lower_ty(\n+                    t,\n+                    if self.sess.features_untracked().impl_trait_in_bindings {\n+                        ImplTraitContext::OpaqueTy(None)\n+                    } else {\n+                        ImplTraitContext::Disallowed(ImplTraitPosition::Binding)\n+                    }\n+                );\n                 hir::ItemKind::Static(\n-                    self.lower_ty(\n-                        t,\n-                        if self.sess.features_untracked().impl_trait_in_bindings {\n-                            ImplTraitContext::OpaqueTy(None)\n-                        } else {\n-                            ImplTraitContext::Disallowed(ImplTraitPosition::Binding)\n-                        }\n-                    ),\n+                    self.arena.alloc(ty.into_inner()),\n                     m,\n                     self.lower_const_body(span, Some(e)),\n                 )\n             }\n             ItemKind::Const(ref t, ref e) => {\n+                let ty = self.lower_ty(\n+                    t,\n+                    if self.sess.features_untracked().impl_trait_in_bindings {\n+                        ImplTraitContext::OpaqueTy(None)\n+                    } else {\n+                        ImplTraitContext::Disallowed(ImplTraitPosition::Binding)\n+                    }\n+                );\n                 hir::ItemKind::Const(\n-                    self.lower_ty(\n-                        t,\n-                        if self.sess.features_untracked().impl_trait_in_bindings {\n-                            ImplTraitContext::OpaqueTy(None)\n-                        } else {\n-                            ImplTraitContext::Disallowed(ImplTraitPosition::Binding)\n-                        }\n-                    ),\n+                    self.arena.alloc(ty.into_inner()),\n                     self.lower_const_body(span, Some(e))\n                 )\n             }\n@@ -346,7 +348,7 @@ impl LoweringContext<'_, '_> {\n                 None => {\n                     let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n                     let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n-                    hir::ItemKind::TyAlias(ty, generics)\n+                    hir::ItemKind::TyAlias(self.arena.alloc(ty.into_inner()), generics)\n                 },\n                 Some(bounds) => {\n                     let ty = hir::OpaqueTy {\n@@ -434,10 +436,11 @@ impl LoweringContext<'_, '_> {\n                 let new_impl_items = self.with_in_scope_lifetime_defs(\n                     &ast_generics.params,\n                     |this| {\n-                        impl_items\n-                            .iter()\n-                            .map(|item| this.lower_impl_item_ref(item))\n-                            .collect()\n+                        this.arena.alloc_from_iter(\n+                            impl_items\n+                                .iter()\n+                                .map(|item| this.lower_impl_item_ref(item))\n+                        )\n                     },\n                 );\n \n@@ -447,16 +450,16 @@ impl LoweringContext<'_, '_> {\n                     self.lower_defaultness(defaultness, true /* [1] */),\n                     generics,\n                     trait_ref,\n-                    lowered_ty,\n+                    self.arena.alloc(lowered_ty.into_inner()),\n                     new_impl_items,\n                 )\n             }\n             ItemKind::Trait(is_auto, unsafety, ref generics, ref bounds, ref items) => {\n                 let bounds = self.lower_param_bounds(bounds, ImplTraitContext::disallowed());\n-                let items = items\n+                let items = self.arena.alloc_from_iter(items\n                     .iter()\n                     .map(|item| self.lower_trait_item_ref(item))\n-                    .collect();\n+                );\n                 hir::ItemKind::Trait(\n                     is_auto,\n                     unsafety,\n@@ -485,7 +488,7 @@ impl LoweringContext<'_, '_> {\n         vis: &mut hir::Visibility,\n         ident: &mut Ident,\n         attrs: &hir::HirVec<Attribute>,\n-    ) -> hir::ItemKind {\n+    ) -> hir::ItemKind<'hir> {\n         debug!(\"lower_use_tree(tree={:?})\", tree);\n         debug!(\"lower_use_tree: vis = {:?}\", vis);\n \n@@ -540,7 +543,7 @@ impl LoweringContext<'_, '_> {\n                         let res = this.lower_res(res);\n                         let path =\n                             this.lower_path_extra(res, &path, ParamMode::Explicit, None);\n-                        let kind = hir::ItemKind::Use(P(path), hir::UseKind::Single);\n+                        let kind = hir::ItemKind::Use(this.arena.alloc(path), hir::UseKind::Single);\n                         let vis = this.rebuild_vis(&vis);\n \n                         this.insert_item(\n@@ -556,11 +559,11 @@ impl LoweringContext<'_, '_> {\n                     });\n                 }\n \n-                let path = P(self.lower_path_extra(ret_res, &path, ParamMode::Explicit, None));\n+                let path = self.arena.alloc(self.lower_path_extra(ret_res, &path, ParamMode::Explicit, None));\n                 hir::ItemKind::Use(path, hir::UseKind::Single)\n             }\n             UseTreeKind::Glob => {\n-                let path = P(self.lower_path(\n+                let path = self.arena.alloc(self.lower_path(\n                     id,\n                     &Path {\n                         segments,\n@@ -663,7 +666,7 @@ impl LoweringContext<'_, '_> {\n \n                 let res = self.expect_full_res_from_use(id).next().unwrap_or(Res::Err);\n                 let res = self.lower_res(res);\n-                let path = P(self.lower_path_extra(res, &prefix, ParamMode::Explicit, None));\n+                let path = self.arena.alloc(self.lower_path_extra(res, &prefix, ParamMode::Explicit, None));\n                 hir::ItemKind::Use(path, hir::UseKind::ListStem)\n             }\n         }\n@@ -748,8 +751,8 @@ impl LoweringContext<'_, '_> {\n         }\n     }\n \n-    fn lower_global_asm(&mut self, ga: &GlobalAsm) -> P<hir::GlobalAsm> {\n-        P(hir::GlobalAsm { asm: ga.asm })\n+    fn lower_global_asm(&mut self, ga: &GlobalAsm) -> &'hir hir::GlobalAsm {\n+        self.arena.alloc(hir::GlobalAsm { asm: ga.asm })\n     }\n \n     fn lower_variant(&mut self, v: &Variant) -> hir::Variant {"}, {"sha": "ee2c3b9879f88af97f23710743ccdef66ac2ef7a", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -35,7 +35,7 @@ pub struct FnLikeNode<'a> { node: Node<'a> }\n /// corresponds to some FnLikeNode.\n trait MaybeFnLike { fn is_fn_like(&self) -> bool; }\n \n-impl MaybeFnLike for ast::Item {\n+impl MaybeFnLike for ast::Item<'_> {\n     fn is_fn_like(&self) -> bool {\n         match self.kind {\n             ast::ItemKind::Fn(..) => true,"}, {"sha": "b56adf25e8a58cb82b3c4578a0c51c8ad13e50d0", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -367,7 +367,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         });\n     }\n \n-    fn visit_item(&mut self, i: &'hir Item) {\n+    fn visit_item(&mut self, i: &'hir Item<'hir>) {\n         debug!(\"visit_item: {:?}\", i);\n         debug_assert_eq!(i.hir_id.owner,\n                          self.definitions.opt_def_index(self.hir_to_node_id[&i.hir_id]).unwrap());"}, {"sha": "865b019849310dda546c2218ac4657021e011a5f", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -53,7 +53,7 @@ impl<'a, 'hir> OuterVisitor<'a, 'hir> {\n }\n \n impl<'a, 'hir> ItemLikeVisitor<'hir> for OuterVisitor<'a, 'hir> {\n-    fn visit_item(&mut self, i: &'hir hir::Item) {\n+    fn visit_item(&mut self, i: &'hir hir::Item<'hir>) {\n         let mut inner_visitor = self.new_inner_visitor(self.hir_map);\n         inner_visitor.check(i.hir_id, |this| intravisit::walk_item(this, i));\n     }"}, {"sha": "982753da5f6f3e07b40acfc753adc114fa509a93", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -959,7 +959,7 @@ impl<'hir> Map<'hir> {\n         bug!(\"expected foreign mod or inlined parent, found {}\", self.node_to_string(parent))\n     }\n \n-    pub fn expect_item(&self, id: HirId) -> &'hir Item {\n+    pub fn expect_item(&self, id: HirId) -> &'hir Item<'hir> {\n         match self.find(id) { // read recorded by `find`\n             Some(Node::Item(item)) => item,\n             _ => bug!(\"expected item, found {}\", self.node_to_string(id))\n@@ -1213,7 +1213,7 @@ impl<'a> NodesMatchingSuffix<'a> {\n                 id = parent;\n             }\n \n-            fn item_is_mod(item: &Item) -> bool {\n+            fn item_is_mod(item: &Item<'_>) -> bool {\n                 match item.kind {\n                     ItemKind::Mod(_) => true,\n                     _ => false,\n@@ -1248,7 +1248,7 @@ trait Named {\n \n impl<T:Named> Named for Spanned<T> { fn name(&self) -> Name { self.node.name() } }\n \n-impl Named for Item { fn name(&self) -> Name { self.ident.name } }\n+impl Named for Item<'_> { fn name(&self) -> Name { self.ident.name } }\n impl Named for ForeignItem { fn name(&self) -> Name { self.ident.name } }\n impl Named for Variant { fn name(&self) -> Name { self.ident.name } }\n impl Named for StructField { fn name(&self) -> Name { self.ident.name } }"}, {"sha": "4fb9f27c27d8e03dccbe78467a7df2c5cdc8b22d", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -756,7 +756,7 @@ pub struct Crate<'hir> {\n     // does, because it can affect the order in which errors are\n     // detected, which in turn can make compile-fail tests yield\n     // slightly different results.\n-    pub items: BTreeMap<HirId, Item>,\n+    pub items: BTreeMap<HirId, Item<'hir>>,\n \n     pub trait_items: BTreeMap<TraitItemId, TraitItem>,\n     pub impl_items: BTreeMap<ImplItemId, ImplItem>,\n@@ -774,8 +774,8 @@ pub struct Crate<'hir> {\n     pub modules: BTreeMap<HirId, ModuleItems>,\n }\n \n-impl Crate<'_> {\n-    pub fn item(&self, id: HirId) -> &Item {\n+impl Crate<'hir> {\n+    pub fn item(&self, id: HirId) -> &Item<'hir> {\n         &self.items[&id]\n     }\n \n@@ -787,6 +787,12 @@ impl Crate<'_> {\n         &self.impl_items[&id]\n     }\n \n+    pub fn body(&self, id: BodyId) -> &Body {\n+        &self.bodies[&id]\n+    }\n+}\n+\n+impl Crate<'_> {\n     /// Visits all items in the crate in some deterministic (but\n     /// unspecified) order. If you just need to process every item,\n     /// but don't care about nesting, this method is the best choice.\n@@ -829,10 +835,6 @@ impl Crate<'_> {\n             });\n         });\n     }\n-\n-    pub fn body(&self, id: BodyId) -> &Body {\n-        &self.bodies[&id]\n-    }\n }\n \n /// A macro definition, in this crate or imported from another.\n@@ -2440,11 +2442,11 @@ pub struct ItemId {\n ///\n /// The name might be a dummy name in case of anonymous items\n #[derive(RustcEncodable, RustcDecodable, Debug)]\n-pub struct Item {\n+pub struct Item<'hir> {\n     pub ident: Ident,\n     pub hir_id: HirId,\n     pub attrs: HirVec<Attribute>,\n-    pub kind: ItemKind,\n+    pub kind: ItemKind<'hir>,\n     pub vis: Visibility,\n     pub span: Span,\n }\n@@ -2467,7 +2469,7 @@ impl FnHeader {\n }\n \n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n-pub enum ItemKind {\n+pub enum ItemKind<'hir> {\n     /// An `extern crate` item, with optional *original* crate name if the crate was renamed.\n     ///\n     /// E.g., `extern crate foo` or `extern crate foo_bar as foo`.\n@@ -2478,22 +2480,22 @@ pub enum ItemKind {\n     /// or just\n     ///\n     /// `use foo::bar::baz;` (with `as baz` implicitly on the right).\n-    Use(P<Path>, UseKind),\n+    Use(&'hir Path, UseKind),\n \n     /// A `static` item.\n-    Static(P<Ty>, Mutability, BodyId),\n+    Static(&'hir Ty, Mutability, BodyId),\n     /// A `const` item.\n-    Const(P<Ty>, BodyId),\n+    Const(&'hir Ty, BodyId),\n     /// A function declaration.\n     Fn(FnSig, Generics, BodyId),\n     /// A module.\n     Mod(Mod),\n     /// An external module, e.g. `extern { .. }`.\n     ForeignMod(ForeignMod),\n     /// Module-level inline assembly (from `global_asm!`).\n-    GlobalAsm(P<GlobalAsm>),\n+    GlobalAsm(&'hir GlobalAsm),\n     /// A type alias, e.g., `type Foo = Bar<u8>`.\n-    TyAlias(P<Ty>, Generics),\n+    TyAlias(&'hir Ty, Generics),\n     /// An opaque `impl Trait` type alias, e.g., `type Foo = impl Bar;`.\n     OpaqueTy(OpaqueTy),\n     /// An enum definition, e.g., `enum Foo<A, B> {C<A>, D<B>}`.\n@@ -2503,7 +2505,7 @@ pub enum ItemKind {\n     /// A union definition, e.g., `union Foo<A, B> {x: A, y: B}`.\n     Union(VariantData, Generics),\n     /// A trait definition.\n-    Trait(IsAuto, Unsafety, Generics, GenericBounds, HirVec<TraitItemRef>),\n+    Trait(IsAuto, Unsafety, Generics, GenericBounds, &'hir [TraitItemRef]),\n     /// A trait alias.\n     TraitAlias(Generics, GenericBounds),\n \n@@ -2513,11 +2515,11 @@ pub enum ItemKind {\n          Defaultness,\n          Generics,\n          Option<TraitRef>, // (optional) trait this impl implements\n-         P<Ty>, // self\n-         HirVec<ImplItemRef>),\n+         &'hir Ty, // self\n+         &'hir [ImplItemRef]),\n }\n \n-impl ItemKind {\n+impl ItemKind<'_> {\n     pub fn descriptive_variant(&self) -> &str {\n         match *self {\n             ItemKind::ExternCrate(..) => \"extern crate\",\n@@ -2785,7 +2787,7 @@ impl CodegenFnAttrs {\n #[derive(Copy, Clone, Debug)]\n pub enum Node<'hir> {\n     Param(&'hir Param),\n-    Item(&'hir Item),\n+    Item(&'hir Item<'hir>),\n     ForeignItem(&'hir ForeignItem),\n     TraitItem(&'hir TraitItem),\n     ImplItem(&'hir ImplItem),"}, {"sha": "e6398b8c2e926042d8cd7ae5fdb4a9b408f7ac5f", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -21,7 +21,7 @@ use std::vec;\n pub enum AnnNode<'a> {\n     Name(&'a ast::Name),\n     Block(&'a hir::Block),\n-    Item(&'a hir::Item),\n+    Item(&'a hir::Item<'a>),\n     SubItem(hir::HirId),\n     Expr(&'a hir::Expr),\n     Pat(&'a hir::Pat),\n@@ -43,7 +43,7 @@ pub trait PpAnn {\n     }\n     fn post(&self, _state: &mut State<'_>, _node: AnnNode<'_>) {\n     }\n-    fn try_fetch_item(&self, _: hir::HirId) -> Option<&hir::Item> {\n+    fn try_fetch_item(&self, _: hir::HirId) -> Option<&hir::Item<'_>> {\n         None\n     }\n }\n@@ -53,7 +53,7 @@ impl PpAnn for NoAnn {}\n pub const NO_ANN: &dyn PpAnn = &NoAnn;\n \n impl PpAnn for hir::Crate<'a> {\n-    fn try_fetch_item(&self, item: hir::HirId) -> Option<&hir::Item> {\n+    fn try_fetch_item(&self, item: hir::HirId) -> Option<&hir::Item<'_>> {\n         Some(self.item(item))\n     }\n     fn nested(&self, state: &mut State<'_>, nested: Nested) {\n@@ -445,7 +445,7 @@ impl<'a> State<'a> {\n \n     fn print_item_type(\n         &mut self,\n-        item: &hir::Item,\n+        item: &hir::Item<'_>,\n         generics: &hir::Generics,\n         inner: impl Fn(&mut Self),\n     ) {\n@@ -462,7 +462,7 @@ impl<'a> State<'a> {\n     }\n \n     /// Pretty-print an item\n-    pub fn print_item(&mut self, item: &hir::Item) {\n+    pub fn print_item(&mut self, item: &hir::Item<'_>) {\n         self.hardbreak_if_not_bol();\n         self.maybe_print_comment(item.span.lo());\n         self.print_outer_attributes(&item.attrs);\n@@ -601,7 +601,7 @@ impl<'a> State<'a> {\n                           ref generics,\n                           ref opt_trait,\n                           ref ty,\n-                          ref impl_items) => {\n+                          impl_items) => {\n                 self.head(\"\");\n                 self.print_visibility(&item.vis);\n                 self.print_defaultness(defaultness);\n@@ -634,7 +634,7 @@ impl<'a> State<'a> {\n                 }\n                 self.bclose(item.span);\n             }\n-            hir::ItemKind::Trait(is_auto, unsafety, ref generics, ref bounds, ref trait_items) => {\n+            hir::ItemKind::Trait(is_auto, unsafety, ref generics, ref bounds, trait_items) => {\n                 self.head(\"\");\n                 self.print_visibility(&item.vis);\n                 self.print_is_auto(is_auto);"}, {"sha": "f2e893ec055b829c052034c7f9124c395bdd1a3a", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -245,7 +245,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::Mod {\n     }\n }\n \n-impl<'a> HashStable<StableHashingContext<'a>> for hir::Item {\n+impl<'a> HashStable<StableHashingContext<'a>> for hir::Item<'_> {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         let hir::Item {\n             ident,"}, {"sha": "1a1c718e55af7179888a3297f8c4f8aa8129ad55", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -252,7 +252,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    fn item_scope_tag(item: &hir::Item) -> &'static str {\n+    fn item_scope_tag(item: &hir::Item<'_>) -> &'static str {\n         match item.kind {\n             hir::ItemKind::Impl(..) => \"impl\",\n             hir::ItemKind::Struct(..) => \"struct\","}, {"sha": "4b7d2f67332f2b6d56cc4503b60cf62222d72d40", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -930,7 +930,7 @@ for LateContextAndPass<'a, 'tcx, T> {\n         lint_callback!(self, check_body_post, body);\n     }\n \n-    fn visit_item(&mut self, it: &'tcx hir::Item) {\n+    fn visit_item(&mut self, it: &'tcx hir::Item<'tcx>) {\n         let generics = self.context.generics.take();\n         self.context.generics = it.kind.generics();\n         self.with_lint_attrs(it.hir_id, &it.attrs, |cx| {"}, {"sha": "c8dc761eef94f70dd74cc842bdfda2102f727ba2", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -96,8 +96,8 @@ macro_rules! late_lint_methods {\n             fn check_mod_post(a: &$hir hir::Mod, b: Span, c: hir::HirId);\n             fn check_foreign_item(a: &$hir hir::ForeignItem);\n             fn check_foreign_item_post(a: &$hir hir::ForeignItem);\n-            fn check_item(a: &$hir hir::Item);\n-            fn check_item_post(a: &$hir hir::Item);\n+            fn check_item(a: &$hir hir::Item<$hir>);\n+            fn check_item_post(a: &$hir hir::Item<$hir>);\n             fn check_local(a: &$hir hir::Local);\n             fn check_block(a: &$hir hir::Block);\n             fn check_block_post(a: &$hir hir::Block);\n@@ -604,7 +604,7 @@ impl intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n         });\n     }\n \n-    fn visit_item(&mut self, it: &'tcx hir::Item) {\n+    fn visit_item(&mut self, it: &'tcx hir::Item<'tcx>) {\n         self.with_lint_attrs(it.hir_id, &it.attrs, |builder| {\n             intravisit::walk_item(builder, it);\n         });"}, {"sha": "57b1f09626f675df7c5478a0b0c8500504ee013c", "filename": "src/librustc/middle/diagnostic_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fmiddle%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fmiddle%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdiagnostic_items.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -25,7 +25,7 @@ struct DiagnosticItemCollector<'tcx> {\n }\n \n impl<'v, 'tcx> ItemLikeVisitor<'v> for DiagnosticItemCollector<'tcx> {\n-    fn visit_item(&mut self, item: &hir::Item) {\n+    fn visit_item(&mut self, item: &hir::Item<'_>) {\n         self.observe_item(&item.attrs, item.hir_id);\n     }\n "}, {"sha": "cfb54b15b3b3a6efc20434defc7fc43421043af5", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -113,7 +113,7 @@ struct LanguageItemCollector<'tcx> {\n }\n \n impl ItemLikeVisitor<'v> for LanguageItemCollector<'tcx> {\n-    fn visit_item(&mut self, item: &hir::Item) {\n+    fn visit_item(&mut self, item: &hir::Item<'_>) {\n         if let Some((value, span)) = extract(&item.attrs) {\n             let actual_target = Target::from_item(item);\n             match self.item_refs.get(&*value.as_str()).cloned() {"}, {"sha": "9f045a59df6ba75a340bbdebb82ed375d8528166", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -27,7 +27,7 @@ use crate::hir::intravisit;\n // Returns true if the given item must be inlined because it may be\n // monomorphized or it was marked with `#[inline]`. This will only return\n // true for functions.\n-fn item_might_be_inlined(tcx: TyCtxt<'tcx>, item: &hir::Item, attrs: CodegenFnAttrs) -> bool {\n+fn item_might_be_inlined(tcx: TyCtxt<'tcx>, item: &hir::Item<'_>, attrs: CodegenFnAttrs) -> bool {\n     if attrs.requests_inline() {\n         return true\n     }\n@@ -349,7 +349,7 @@ struct CollectPrivateImplItemsVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx> {\n-    fn visit_item(&mut self, item: &hir::Item) {\n+    fn visit_item(&mut self, item: &hir::Item<'_>) {\n         // Anything which has custom linkage gets thrown on the worklist no\n         // matter where it is in the crate, along with \"special std symbols\"\n         // which are currently akin to allocator symbols."}, {"sha": "4fd117b5980a1a38916ba466441bf9d106711dcc", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -421,7 +421,7 @@ fn krate(tcx: TyCtxt<'_>) -> NamedRegionMap {\n /// In traits, there is an implicit `Self` type parameter which comes before the generics.\n /// We have to account for this when computing the index of the other generic parameters.\n /// This function returns whether there is such an implicit parameter defined on the given item.\n-fn sub_items_have_self_param(node: &hir::ItemKind) -> bool {\n+fn sub_items_have_self_param(node: &hir::ItemKind<'_>) -> bool {\n     match *node {\n         hir::ItemKind::Trait(..) |\n         hir::ItemKind::TraitAlias(..) => true,\n@@ -454,7 +454,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         replace(&mut self.labels_in_fn, saved);\n     }\n \n-    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         match item.kind {\n             hir::ItemKind::Fn(ref sig, ref generics, _) => {\n                 self.visit_early_late(None, &sig.decl, generics, |this| {"}, {"sha": "6aa84b59338ccd783772d1d7c855da6a04979bed", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -254,7 +254,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n \n-    fn visit_item(&mut self, i: &'tcx Item) {\n+    fn visit_item(&mut self, i: &'tcx Item<'tcx>) {\n         let orig_in_trait_impl = self.in_trait_impl;\n         let mut kind = AnnotationKind::Required;\n         match i.kind {\n@@ -354,7 +354,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'a, 'tcx> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n \n-    fn visit_item(&mut self, i: &'tcx Item) {\n+    fn visit_item(&mut self, i: &'tcx Item<'tcx>) {\n         match i.kind {\n             // Inherent impls and foreign modules serve only as containers for other items,\n             // they don't have their own stability. They still can be annotated as unstable\n@@ -816,7 +816,7 @@ impl Visitor<'tcx> for Checker<'tcx> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n \n-    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         match item.kind {\n             hir::ItemKind::ExternCrate(_) => {\n                 // compiler-generated `extern crate` items have a dummy span.\n@@ -834,7 +834,7 @@ impl Visitor<'tcx> for Checker<'tcx> {\n             // For implementations of traits, check the stability of each item\n             // individually as it's possible to have a stable trait with unstable\n             // items.\n-            hir::ItemKind::Impl(.., Some(ref t), _, ref impl_item_refs) => {\n+            hir::ItemKind::Impl(.., Some(ref t), _, impl_item_refs) => {\n                 if let Res::Def(DefKind::Trait, trait_did) = t.path.res {\n                     for impl_item_ref in impl_item_refs {\n                         let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);"}, {"sha": "8af98c6117e55b29047914f1866ccaac2a2665d6", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -50,7 +50,7 @@ pub fn trait_obligations<'a, 'tcx>(\n     body_id: hir::HirId,\n     trait_ref: &ty::TraitRef<'tcx>,\n     span: Span,\n-    item: Option<&'tcx hir::Item>,\n+    item: Option<&'tcx hir::Item<'tcx>>,\n ) -> Vec<traits::PredicateObligation<'tcx>> {\n     let mut wf = WfPredicates { infcx, param_env, body_id, span, out: vec![], item };\n     wf.compute_trait_ref(trait_ref, Elaborate::All);\n@@ -111,7 +111,7 @@ struct WfPredicates<'a, 'tcx> {\n     body_id: hir::HirId,\n     span: Span,\n     out: Vec<traits::PredicateObligation<'tcx>>,\n-    item: Option<&'tcx hir::Item>,\n+    item: Option<&'tcx hir::Item<'tcx>>,\n }\n \n /// Controls whether we \"elaborate\" supertraits and so forth on the WF"}, {"sha": "d468717fe7c6b32bf3b5780b2408eb05d6da5914", "filename": "src/librustc_codegen_utils/symbol_names_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -57,7 +57,7 @@ impl SymbolNamesTest<'tcx> {\n }\n \n impl hir::itemlikevisit::ItemLikeVisitor<'tcx> for SymbolNamesTest<'tcx> {\n-    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         self.process_attrs(item.hir_id);\n     }\n "}, {"sha": "8b016b12550fda304c5f7ad54741244992378dd3", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -162,7 +162,7 @@ impl Visitor<'tcx> for IfThisChanged<'tcx> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n \n-    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         self.process_attrs(item.hir_id, &item.attrs);\n         intravisit::walk_item(self, item);\n     }"}, {"sha": "adb67b84087eb49a2fe6c7967a8861fc13422bd1", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -532,7 +532,7 @@ impl DirtyCleanVisitor<'tcx> {\n }\n \n impl ItemLikeVisitor<'tcx> for DirtyCleanVisitor<'tcx> {\n-    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         self.check_item(item.hir_id, item.span);\n     }\n "}, {"sha": "9c2e8a3d47edb66e38a550996260662ca9a205ce", "filename": "src/librustc_interface/proc_macro_decls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_interface%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_interface%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fproc_macro_decls.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -24,7 +24,7 @@ struct Finder {\n }\n \n impl<'v> ItemLikeVisitor<'v> for Finder {\n-    fn visit_item(&mut self, item: &hir::Item) {\n+    fn visit_item(&mut self, item: &hir::Item<'_>) {\n         if attr::contains_name(&item.attrs, sym::rustc_proc_macro_decls) {\n             self.decls = Some(item.hir_id);\n         }"}, {"sha": "626c83713d0130a5da2fb6913d39a6d3e9dc19a4", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -117,7 +117,7 @@ impl BoxPointers {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoxPointers {\n-    fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item<'_>) {\n         match it.kind {\n             hir::ItemKind::Fn(..) |\n             hir::ItemKind::TyAlias(..) |\n@@ -391,14 +391,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n         }\n     }\n \n-    fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item<'_>) {\n         let desc = match it.kind {\n             hir::ItemKind::Fn(..) => \"a function\",\n             hir::ItemKind::Mod(..) => \"a module\",\n             hir::ItemKind::Enum(..) => \"an enum\",\n             hir::ItemKind::Struct(..) => \"a struct\",\n             hir::ItemKind::Union(..) => \"a union\",\n-            hir::ItemKind::Trait(.., ref trait_item_refs) => {\n+            hir::ItemKind::Trait(.., trait_item_refs) => {\n                 // Issue #11592: traits are always considered exported, even when private.\n                 if let hir::VisibilityKind::Inherited = it.vis.node {\n                     self.private_traits.insert(it.hir_id);\n@@ -410,7 +410,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n                 \"a trait\"\n             }\n             hir::ItemKind::TyAlias(..) => \"a type alias\",\n-            hir::ItemKind::Impl(.., Some(ref trait_ref), _, ref impl_item_refs) => {\n+            hir::ItemKind::Impl(.., Some(ref trait_ref), _, impl_item_refs) => {\n                 // If the trait is private, add the impl items to `private_traits` so they don't get\n                 // reported for missing docs.\n                 let real_trait = trait_ref.path.res.def_id();\n@@ -501,7 +501,7 @@ declare_lint! {\n declare_lint_pass!(MissingCopyImplementations => [MISSING_COPY_IMPLEMENTATIONS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingCopyImplementations {\n-    fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::Item<'_>) {\n         if !cx.access_levels.is_reachable(item.hir_id) {\n             return;\n         }\n@@ -559,7 +559,7 @@ pub struct MissingDebugImplementations {\n impl_lint_pass!(MissingDebugImplementations => [MISSING_DEBUG_IMPLEMENTATIONS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDebugImplementations {\n-    fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::Item<'_>) {\n         if !cx.access_levels.is_reachable(item.hir_id) {\n             return;\n         }\n@@ -815,7 +815,7 @@ declare_lint! {\n declare_lint_pass!(InvalidNoMangleItems => [NO_MANGLE_CONST_ITEMS, NO_MANGLE_GENERIC_ITEMS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n-    fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item<'_>) {\n         match it.kind {\n             hir::ItemKind::Fn(.., ref generics, _) => {\n                 if let Some(no_mangle_attr) = attr::find_by_name(&it.attrs, sym::no_mangle) {\n@@ -992,7 +992,7 @@ impl UnreachablePub {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnreachablePub {\n-    fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::Item<'_>) {\n         self.perform_lint(cx, \"item\", item.hir_id, &item.vis, item.span, true);\n     }\n \n@@ -1074,7 +1074,7 @@ impl TypeAliasBounds {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeAliasBounds {\n-    fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::Item<'_>) {\n         let (ty, type_alias_generics) = match item.kind {\n             hir::ItemKind::TyAlias(ref ty, ref generics) => (&*ty, generics),\n             _ => return,\n@@ -1150,7 +1150,7 @@ fn check_const(cx: &LateContext<'_, '_>, body_id: hir::BodyId) {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedBrokenConst {\n-    fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item<'_>) {\n         match it.kind {\n             hir::ItemKind::Const(_, body_id) => {\n                 check_const(cx, body_id);\n@@ -1179,7 +1179,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TrivialConstraints {\n     fn check_item(\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,\n-        item: &'tcx hir::Item,\n+        item: &'tcx hir::Item<'tcx>,\n     ) {\n         use rustc::ty::fold::TypeFoldable;\n         use rustc::ty::Predicate::*;\n@@ -1338,7 +1338,7 @@ impl UnnameableTestItems {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnnameableTestItems {\n-    fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item<'_>) {\n         if self.items_nameable {\n             if let hir::ItemKind::Mod(..) = it.kind {}\n             else {\n@@ -1357,7 +1357,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnnameableTestItems {\n         }\n     }\n \n-    fn check_item_post(&mut self, _cx: &LateContext<'_, '_>, it: &hir::Item) {\n+    fn check_item_post(&mut self, _cx: &LateContext<'_, '_>, it: &hir::Item<'_>) {\n         if !self.items_nameable && self.boundary == it.hir_id {\n             self.items_nameable = true;\n         }\n@@ -1616,7 +1616,7 @@ impl ExplicitOutlivesRequirements {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExplicitOutlivesRequirements {\n-    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item<'_>) {\n         use rustc::middle::resolve_lifetime::Region;\n \n         let infer_static = cx.tcx.features().infer_static_outlives_requirements;"}, {"sha": "7235321b2b3048d210266357d4c7db70feed5a22", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -325,7 +325,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n         }\n     }\n \n-    fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item<'_>) {\n         if let hir::ItemKind::Mod(_) = it.kind {\n             self.check_snake_case(cx, \"module\", &it.ident);\n         }\n@@ -386,7 +386,7 @@ impl NonUpperCaseGlobals {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonUpperCaseGlobals {\n-    fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item<'_>) {\n         match it.kind {\n             hir::ItemKind::Static(..) if !attr::contains_name(&it.attrs, sym::no_mangle) => {\n                 NonUpperCaseGlobals::check_upper_case(cx, \"static variable\", &it.ident);"}, {"sha": "b4ae379f1bb4b2c51c17e116f66dfe9ff3b2c642", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -1031,7 +1031,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImproperCTypes {\n declare_lint_pass!(VariantSizeDifferences => [VARIANT_SIZE_DIFFERENCES]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for VariantSizeDifferences {\n-    fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item<'_>) {\n         if let hir::ItemKind::Enum(ref enum_definition, _) = it.kind {\n             let item_def_id = cx.tcx.hir().local_def_id(it.hir_id);\n             let t = cx.tcx.type_of(item_def_id);"}, {"sha": "acfcdd9a87f904eedff25e451c693f2e2dbddc8d", "filename": "src/librustc_metadata/foreign_modules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_metadata%2Fforeign_modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_metadata%2Fforeign_modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fforeign_modules.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -18,7 +18,7 @@ struct Collector<'tcx> {\n }\n \n impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n-    fn visit_item(&mut self, it: &'tcx hir::Item) {\n+    fn visit_item(&mut self, it: &'tcx hir::Item<'tcx>) {\n         let fm = match it.kind {\n             hir::ItemKind::ForeignMod(ref fm) => fm,\n             _ => return,"}, {"sha": "2283b772ea8d1274f5c3ae338dcd03c4991ae845", "filename": "src/librustc_metadata/link_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_metadata%2Flink_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_metadata%2Flink_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flink_args.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -26,7 +26,7 @@ struct Collector {\n }\n \n impl<'tcx> ItemLikeVisitor<'tcx> for Collector {\n-    fn visit_item(&mut self, it: &'tcx hir::Item) {\n+    fn visit_item(&mut self, it: &'tcx hir::Item<'tcx>) {\n         let fm = match it.kind {\n             hir::ItemKind::ForeignMod(ref fm) => fm,\n             _ => return,"}, {"sha": "c9c3be46101b1e98f78b1f3bd11f34d49109cc97", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -36,7 +36,7 @@ struct Collector<'tcx> {\n }\n \n impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n-    fn visit_item(&mut self, it: &'tcx hir::Item) {\n+    fn visit_item(&mut self, it: &'tcx hir::Item<'tcx>) {\n         let fm = match it.kind {\n             hir::ItemKind::ForeignMod(ref fm) => fm,\n             _ => return,"}, {"sha": "7937e57d188489c0a8cd6876956f302670af6bf9", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -1048,7 +1048,7 @@ impl EncodeContext<'tcx> {\n         self.lazy(rendered_const)\n     }\n \n-    fn encode_info_for_item(&mut self, def_id: DefId, item: &'tcx hir::Item) {\n+    fn encode_info_for_item(&mut self, def_id: DefId, item: &'tcx hir::Item<'tcx>) {\n         let tcx = self.tcx;\n \n         debug!(\"EncodeContext::encode_info_for_item({:?})\", def_id);\n@@ -1580,7 +1580,7 @@ impl Visitor<'tcx> for EncodeContext<'tcx> {\n         let def_id = self.tcx.hir().local_def_id(c.hir_id);\n         self.encode_info_for_anon_const(def_id);\n     }\n-    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         intravisit::walk_item(self, item);\n         let def_id = self.tcx.hir().local_def_id(item.hir_id);\n         match item.kind {\n@@ -1649,7 +1649,7 @@ impl EncodeContext<'tcx> {\n     /// encode some sub-items. Usually we want some info from the item\n     /// so it's easier to do that here then to wait until we would encounter\n     /// normally in the visitor walk.\n-    fn encode_addl_info_for_item(&mut self, item: &hir::Item) {\n+    fn encode_addl_info_for_item(&mut self, item: &hir::Item<'_>) {\n         let def_id = self.tcx.hir().local_def_id(item.hir_id);\n         match item.kind {\n             hir::ItemKind::Static(..) |\n@@ -1713,7 +1713,7 @@ struct ImplVisitor<'tcx> {\n }\n \n impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplVisitor<'tcx> {\n-    fn visit_item(&mut self, item: &hir::Item) {\n+    fn visit_item(&mut self, item: &hir::Item<'_>) {\n         if let hir::ItemKind::Impl(..) = item.kind {\n             let impl_id = self.tcx.hir().local_def_id(item.hir_id);\n             if let Some(trait_ref) = self.tcx.impl_trait_ref(impl_id) {"}, {"sha": "df8e2b212853c48ea779b2c32882c592bff8da8e", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -55,6 +55,9 @@ pub fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> BodyAndCache<'_> {\n         }\n         Node::Item(hir::Item { kind: hir::ItemKind::Static(ty, _, body_id), .. })\n         | Node::Item(hir::Item { kind: hir::ItemKind::Const(ty, body_id), .. })\n+        => {\n+            (*body_id, ty.span)\n+        }\n         | Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Const(ty, body_id), .. })\n         | Node::TraitItem(\n             hir::TraitItem { kind: hir::TraitItemKind::Const(ty, Some(body_id)), .. }"}, {"sha": "d2b18ae010338d2755fe05d9d0420b9b7408eb8c", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -987,7 +987,7 @@ struct RootCollector<'a, 'tcx> {\n }\n \n impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n-    fn visit_item(&mut self, item: &'v hir::Item) {\n+    fn visit_item(&mut self, item: &'v hir::Item<'v>) {\n         match item.kind {\n             hir::ItemKind::ExternCrate(..) |\n             hir::ItemKind::Use(..) |\n@@ -1145,7 +1145,7 @@ fn item_requires_monomorphization(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n \n fn create_mono_items_for_default_impls<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    item: &'tcx hir::Item,\n+    item: &'tcx hir::Item<'tcx>,\n     output: &mut Vec<MonoItem<'tcx>>,\n ) {\n     match item.kind {"}, {"sha": "c7f553069c2ca0259de0df8808289f5b1a178706", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -362,7 +362,7 @@ struct LifeSeeder<'k, 'tcx> {\n }\n \n impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n-    fn visit_item(&mut self, item: &hir::Item) {\n+    fn visit_item(&mut self, item: &hir::Item<'_>) {\n         let allow_dead_code = has_allow_dead_code_or_lang_attr(self.tcx,\n                                                                item.hir_id,\n                                                                &item.attrs);\n@@ -381,7 +381,7 @@ impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n                     }\n                 }\n             }\n-            hir::ItemKind::Trait(.., ref trait_item_refs) => {\n+            hir::ItemKind::Trait(.., trait_item_refs) => {\n                 for trait_item_ref in trait_item_refs {\n                     let trait_item = self.krate.trait_item(trait_item_ref.id);\n                     match trait_item.kind {\n@@ -397,7 +397,7 @@ impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n                     }\n                 }\n             }\n-            hir::ItemKind::Impl(.., ref opt_trait, _, ref impl_item_refs) => {\n+            hir::ItemKind::Impl(.., ref opt_trait, _, impl_item_refs) => {\n                 for impl_item_ref in impl_item_refs {\n                     let impl_item = self.krate.impl_item(impl_item_ref.id);\n                     if opt_trait.is_some() ||\n@@ -481,7 +481,7 @@ struct DeadVisitor<'tcx> {\n }\n \n impl DeadVisitor<'tcx> {\n-    fn should_warn_about_item(&mut self, item: &hir::Item) -> bool {\n+    fn should_warn_about_item(&mut self, item: &hir::Item<'_>) -> bool {\n         let should_warn = match item.kind {\n             hir::ItemKind::Static(..)\n             | hir::ItemKind::Const(..)\n@@ -567,7 +567,7 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n \n-    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         if self.should_warn_about_item(item) {\n             // For most items, we want to highlight its identifier\n             let span = match item.kind {"}, {"sha": "89c1cc8e6b468956f8570346211fe9aeb97fddac", "filename": "src/librustc_passes/entry.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -33,7 +33,7 @@ struct EntryContext<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> ItemLikeVisitor<'tcx> for EntryContext<'a, 'tcx> {\n-    fn visit_item(&mut self, item: &'tcx Item) {\n+    fn visit_item(&mut self, item: &'tcx Item<'tcx>) {\n         let def_id = self.map.local_def_id(item.hir_id);\n         let def_key = self.map.def_key(def_id);\n         let at_root = def_key.parent == Some(CRATE_DEF_INDEX);\n@@ -81,7 +81,7 @@ fn entry_fn(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<(DefId, EntryFnType)> {\n \n // Beware, this is duplicated in `libsyntax/entry.rs`, so make sure to keep\n // them in sync.\n-fn entry_point_type(item: &Item, at_root: bool) -> EntryPointType {\n+fn entry_point_type(item: &Item<'_>, at_root: bool) -> EntryPointType {\n     match item.kind {\n         ItemKind::Fn(..) => {\n             if attr::contains_name(&item.attrs, sym::start) {\n@@ -104,7 +104,7 @@ fn entry_point_type(item: &Item, at_root: bool) -> EntryPointType {\n }\n \n \n-fn find_item(item: &Item, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n+fn find_item(item: &Item<'_>, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n     match entry_point_type(item, at_root) {\n         EntryPointType::MainNamed => {\n             if ctxt.main_fn.is_none() {"}, {"sha": "767d5cea2ffea4ce64fbeb9752b16f0b1d02cfc0", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -123,7 +123,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         self.visit_body(nested_body)\n     }\n \n-    fn visit_item(&mut self, i: &'v hir::Item) {\n+    fn visit_item(&mut self, i: &'v hir::Item<'v>) {\n         self.record(\"Item\", Id::Node(i.hir_id), i);\n         hir_visit::walk_item(self, i)\n     }"}, {"sha": "0e0725ccd673ad2d3e95ee073667a7220d23a406", "filename": "src/librustc_passes/layout_test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_passes%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_passes%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flayout_test.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -28,7 +28,7 @@ struct VarianceTest<'tcx> {\n }\n \n impl ItemLikeVisitor<'tcx> for VarianceTest<'tcx> {\n-    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         let item_def_id = self.tcx.hir().local_def_id(item.hir_id);\n \n         if let ItemKind::TyAlias(..) = item.kind {\n@@ -45,7 +45,7 @@ impl ItemLikeVisitor<'tcx> for VarianceTest<'tcx> {\n }\n \n impl VarianceTest<'tcx> {\n-    fn dump_layout_of(&self, item_def_id: DefId, item: &hir::Item, attr: &Attribute) {\n+    fn dump_layout_of(&self, item_def_id: DefId, item: &hir::Item<'tcx>, attr: &Attribute) {\n         let tcx = self.tcx;\n         let param_env = self.tcx.param_env(item_def_id);\n         let ty = self.tcx.type_of(item_def_id);"}, {"sha": "02e2266d8f451bdf6076e2dd13aadad57c85ebb0", "filename": "src/librustc_plugin_impl/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_plugin_impl%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_plugin_impl%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2Fbuild.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -14,7 +14,7 @@ struct RegistrarFinder {\n }\n \n impl<'v> ItemLikeVisitor<'v> for RegistrarFinder {\n-    fn visit_item(&mut self, item: &hir::Item) {\n+    fn visit_item(&mut self, item: &hir::Item<'_>) {\n         if let hir::ItemKind::Fn(..) = item.kind {\n             if attr::contains_name(&item.attrs, sym::plugin_registrar) {\n                 self.registrars.push((item.hir_id, item.span));"}, {"sha": "b54d528eb8dbfc1015e5ad94b35848df45344904", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -652,7 +652,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n \n-    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         let inherited_item_level = match item.kind {\n             hir::ItemKind::Impl(..) =>\n                 Option::<AccessLevel>::of_impl(item.hir_id, self.tcx, &self.access_levels),\n@@ -685,14 +685,14 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                     }\n                 }\n             }\n-            hir::ItemKind::Impl(.., ref trait_ref, _, ref impl_item_refs) => {\n+            hir::ItemKind::Impl(.., ref trait_ref, _, impl_item_refs) => {\n                 for impl_item_ref in impl_item_refs {\n                     if trait_ref.is_some() || impl_item_ref.vis.node.is_pub() {\n                         self.update(impl_item_ref.id.hir_id, item_level);\n                     }\n                 }\n             }\n-            hir::ItemKind::Trait(.., ref trait_item_refs) => {\n+            hir::ItemKind::Trait(.., trait_item_refs) => {\n                 for trait_item_ref in trait_item_refs {\n                     self.update(trait_item_ref.id.hir_id, item_level);\n                 }\n@@ -756,7 +756,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                     self.reach(item.hir_id, item_level).generics().predicates().ty();\n                 }\n             }\n-            hir::ItemKind::Trait(.., ref trait_item_refs) => {\n+            hir::ItemKind::Trait(.., trait_item_refs) => {\n                 if item_level.is_some() {\n                     self.reach(item.hir_id, item_level).generics().predicates();\n \n@@ -779,7 +779,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                 }\n             }\n             // Visit everything except for private impl items.\n-            hir::ItemKind::Impl(.., ref impl_item_refs) => {\n+            hir::ItemKind::Impl(.., impl_item_refs) => {\n                 if item_level.is_some() {\n                     self.reach(item.hir_id, item_level).generics().predicates().ty().trait_ref();\n \n@@ -1004,7 +1004,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NamePrivacyVisitor<'a, 'tcx> {\n         self.tables = orig_tables;\n     }\n \n-    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         let orig_current_item = mem::replace(&mut self.current_item, item.hir_id);\n         let orig_tables =\n             mem::replace(&mut self.tables, item_tables(self.tcx, item.hir_id, self.empty_tables));\n@@ -1283,7 +1283,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n     }\n \n     // Check types in item interfaces.\n-    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         let orig_current_item = mem::replace(&mut self.current_item,\n             self.tcx.hir().local_def_id(item.hir_id));\n         let orig_in_body = mem::replace(&mut self.in_body, false);\n@@ -1416,7 +1416,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n \n-    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         match item.kind {\n             // Contents of a private mod can be re-exported, so we need\n             // to check internals.\n@@ -1441,7 +1441,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n             // (i.e., we could just return here to not check them at\n             // all, or some worse estimation of whether an impl is\n             // publicly visible).\n-            hir::ItemKind::Impl(.., ref g, ref trait_ref, ref self_, ref impl_item_refs) => {\n+            hir::ItemKind::Impl(.., ref g, ref trait_ref, ref self_, impl_item_refs) => {\n                 // `impl [... for] Private` is never visible.\n                 let self_contains_private;\n                 // `impl [... for] Public<...>`, but not `impl [... for]\n@@ -1849,7 +1849,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n \n-    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         let tcx = self.tcx;\n         let item_visibility = ty::Visibility::from_hir(&item.vis, item.hir_id, tcx);\n \n@@ -1872,7 +1872,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n                 // it's not a part of interface, so we skip it.\n                 self.check(item.hir_id, item_visibility).generics().predicates();\n             }\n-            hir::ItemKind::Trait(.., ref trait_item_refs) => {\n+            hir::ItemKind::Trait(.., trait_item_refs) => {\n                 self.check(item.hir_id, item_visibility).generics().predicates();\n \n                 for trait_item_ref in trait_item_refs {\n@@ -1917,7 +1917,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n             // Subitems of inherent impls have their own publicity.\n             // A trait impl is public when both its type and its trait are public\n             // Subitems of trait impls have inherited publicity.\n-            hir::ItemKind::Impl(.., ref trait_ref, _, ref impl_item_refs) => {\n+            hir::ItemKind::Impl(.., ref trait_ref, _, impl_item_refs) => {\n                 let impl_vis = ty::Visibility::of_impl(item.hir_id, tcx, &Default::default());\n                 self.check(item.hir_id, impl_vis).generics().predicates();\n                 for impl_item_ref in impl_item_refs {"}, {"sha": "0e839d35b99c0307565befa6e4cf1b7140e79e0d", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -614,9 +614,9 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             Node::TraitRef(tr) => tr.path.res,\n \n             Node::Item(&hir::Item {\n-                kind: hir::ItemKind::Use(ref path, _),\n+                kind: hir::ItemKind::Use(path, _),\n                 ..\n-            }) |\n+            }) => path.res,\n             Node::Visibility(&Spanned {\n                 node: hir::VisibilityKind::Restricted { ref path, .. }, .. }) => path.res,\n "}, {"sha": "ecd3112cd7906bf6f983d72510a6730519f8c4b2", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -669,7 +669,7 @@ impl Visitor<'tcx> for ClauseDumper<'tcx> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n \n-    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         self.process_attrs(item.hir_id, &item.attrs);\n         intravisit::walk_item(self, item);\n     }"}, {"sha": "3e4c26e4a8fb14a0921d891ecb3c9ac636d1e3e2", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -1002,7 +1002,7 @@ fn compute_all_traits(tcx: TyCtxt<'_>) -> Vec<DefId> {\n     }\n \n     impl<'v, 'a, 'tcx> itemlikevisit::ItemLikeVisitor<'v> for Visitor<'a, 'tcx> {\n-        fn visit_item(&mut self, i: &'v hir::Item) {\n+        fn visit_item(&mut self, i: &'v hir::Item<'v>) {\n             match i.kind {\n                 hir::ItemKind::Trait(..) |\n                 hir::ItemKind::TraitAlias(..) => {"}, {"sha": "90e31f85a1256825d4740e40905f720a76df6af6", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -751,7 +751,7 @@ struct CheckItemTypesVisitor<'tcx> {\n }\n \n impl ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'tcx> {\n-    fn visit_item(&mut self, i: &'tcx hir::Item) {\n+    fn visit_item(&mut self, i: &'tcx hir::Item<'tcx>) {\n         check_item_type(self.tcx, i);\n     }\n     fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem) { }\n@@ -1696,7 +1696,7 @@ fn fn_maybe_err(tcx: TyCtxt<'_>, sp: Span, abi: Abi) {\n     }\n }\n \n-pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item) {\n+pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item<'tcx>) {\n     debug!(\n         \"check_item_type(it.hir_id={}, it.name={})\",\n         it.hir_id,\n@@ -1857,7 +1857,7 @@ fn maybe_check_static_with_link_section(tcx: TyCtxt<'_>, id: DefId, span: Span)\n     }\n }\n \n-fn check_on_unimplemented(tcx: TyCtxt<'_>, trait_def_id: DefId, item: &hir::Item) {\n+fn check_on_unimplemented(tcx: TyCtxt<'_>, trait_def_id: DefId, item: &hir::Item<'_>) {\n     let item_def_id = tcx.hir().local_def_id(item.hir_id);\n     // an error would be reported if this fails.\n     let _ = traits::OnUnimplementedDirective::of_item(tcx, trait_def_id, item_def_id);"}, {"sha": "9e69b0a2908d4495d040e823da63f14300f126e8", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -235,7 +235,7 @@ fn check_associated_item(\n     })\n }\n \n-fn for_item<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item) -> CheckWfFcxBuilder<'tcx> {\n+fn for_item<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item<'_>) -> CheckWfFcxBuilder<'tcx> {\n     for_id(tcx, item.hir_id, item.span)\n }\n \n@@ -252,7 +252,7 @@ fn for_id(tcx: TyCtxt<'_>, id: hir::HirId, span: Span) -> CheckWfFcxBuilder<'_>\n /// In a type definition, we check that to ensure that the types of the fields are well-formed.\n fn check_type_defn<'tcx, F>(\n     tcx: TyCtxt<'tcx>,\n-    item: &hir::Item,\n+    item: &hir::Item<'tcx>,\n     all_sized: bool,\n     mut lookup_fields: F,\n ) where\n@@ -325,7 +325,7 @@ fn check_type_defn<'tcx, F>(\n     });\n }\n \n-fn check_trait(tcx: TyCtxt<'_>, item: &hir::Item) {\n+fn check_trait(tcx: TyCtxt<'_>, item: &hir::Item<'_>) {\n     debug!(\"check_trait: {:?}\", item.hir_id);\n \n     let trait_def_id = tcx.hir().local_def_id(item.hir_id);\n@@ -348,7 +348,7 @@ fn check_trait(tcx: TyCtxt<'_>, item: &hir::Item) {\n     });\n }\n \n-fn check_item_fn(tcx: TyCtxt<'_>, item: &hir::Item) {\n+fn check_item_fn(tcx: TyCtxt<'_>, item: &hir::Item<'_>) {\n     for_item(tcx, item).with_fcx(|fcx, tcx| {\n         let def_id = fcx.tcx.hir().local_def_id(item.hir_id);\n         let sig = fcx.tcx.fn_sig(def_id);\n@@ -396,7 +396,7 @@ fn check_item_type(\n \n fn check_impl<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    item: &'tcx hir::Item,\n+    item: &'tcx hir::Item<'tcx>,\n     ast_self_ty: &hir::Ty,\n     ast_trait_ref: &Option<hir::TraitRef>,\n ) {\n@@ -977,7 +977,7 @@ fn receiver_is_implemented(\n \n fn check_variances_for_type_defn<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    item: &hir::Item,\n+    item: &hir::Item<'tcx>,\n     hir_generics: &hir::Generics,\n ) {\n     let item_def_id = tcx.hir().local_def_id(item.hir_id);\n@@ -1081,7 +1081,7 @@ impl CheckTypeWellFormedVisitor<'tcx> {\n }\n \n impl ParItemLikeVisitor<'tcx> for CheckTypeWellFormedVisitor<'tcx> {\n-    fn visit_item(&self, i: &'tcx hir::Item) {\n+    fn visit_item(&self, i: &'tcx hir::Item<'tcx>) {\n         debug!(\"visit_item: {:?}\", i);\n         let def_id = self.tcx.hir().local_def_id(i.hir_id);\n         self.tcx.ensure().check_item_well_formed(def_id);"}, {"sha": "bbb743cd3c78797821d75f922d7f658c2a27e66a", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -29,7 +29,7 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n }\n \n impl ItemLikeVisitor<'v> for CheckVisitor<'tcx> {\n-    fn visit_item(&mut self, item: &hir::Item) {\n+    fn visit_item(&mut self, item: &hir::Item<'_>) {\n         if item.vis.node.is_pub() || item.span.is_dummy() {\n             return;\n         }\n@@ -217,7 +217,7 @@ struct ExternCrateToLint {\n }\n \n impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for CollectExternCrateVisitor<'a, 'tcx> {\n-    fn visit_item(&mut self, item: &hir::Item) {\n+    fn visit_item(&mut self, item: &hir::Item<'_>) {\n         if let hir::ItemKind::ExternCrate(orig_name) = item.kind {\n             let extern_crate_def_id = self.tcx.hir().local_def_id(item.hir_id);\n             self.crates_to_lint.push("}, {"sha": "13af3865225c281f42eae57f9ea3bf2f5d21df27", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -50,7 +50,7 @@ struct InherentCollect<'tcx> {\n }\n \n impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n-    fn visit_item(&mut self, item: &hir::Item) {\n+    fn visit_item(&mut self, item: &hir::Item<'_>) {\n         let ty = match item.kind {\n             hir::ItemKind::Impl(.., None, ref ty, _) => ty,\n             _ => return\n@@ -262,7 +262,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n }\n \n impl InherentCollect<'tcx> {\n-    fn check_def_id(&mut self, item: &hir::Item, def_id: DefId) {\n+    fn check_def_id(&mut self, item: &hir::Item<'_>, def_id: DefId) {\n         if def_id.is_local() {\n             // Add the implementation to the mapping from implementation to base\n             // type def ID, if there is a base type for this implementation and"}, {"sha": "84ae0b296a1c284ba82528844619eb5906da9118", "filename": "src/librustc_typeck/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -85,7 +85,7 @@ impl InherentOverlapChecker<'tcx> {\n }\n \n impl ItemLikeVisitor<'v> for InherentOverlapChecker<'tcx> {\n-    fn visit_item(&mut self, item: &'v hir::Item) {\n+    fn visit_item(&mut self, item: &'v hir::Item<'v>) {\n         match item.kind {\n             hir::ItemKind::Enum(..) |\n             hir::ItemKind::Struct(..) |"}, {"sha": "17487244ee7d6174048ee238da74b5aefc6031d3", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -23,7 +23,7 @@ impl ItemLikeVisitor<'v> for OrphanChecker<'tcx> {\n     /// apply to a specific impl, so just return after reporting one\n     /// to prevent inundating the user with a bunch of similar error\n     /// reports.\n-    fn visit_item(&mut self, item: &hir::Item) {\n+    fn visit_item(&mut self, item: &hir::Item<'_>) {\n         let def_id = self.tcx.hir().local_def_id(item.hir_id);\n         // \"Trait\" impl\n         if let hir::ItemKind::Impl(.., generics, Some(tr), impl_ty, _) = &item.kind {"}, {"sha": "5335253f5d6a9b6732a7eee68cc7ca15e62dc506", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -18,7 +18,7 @@ struct UnsafetyChecker<'tcx> {\n \n impl UnsafetyChecker<'tcx> {\n     fn check_unsafety_coherence(&mut self,\n-                                item: &'v hir::Item,\n+                                item: &'v hir::Item<'v>,\n                                 impl_generics: Option<&hir::Generics>,\n                                 unsafety: hir::Unsafety,\n                                 polarity: hir::ImplPolarity)\n@@ -72,7 +72,7 @@ impl UnsafetyChecker<'tcx> {\n }\n \n impl ItemLikeVisitor<'v> for UnsafetyChecker<'tcx> {\n-    fn visit_item(&mut self, item: &'v hir::Item) {\n+    fn visit_item(&mut self, item: &'v hir::Item<'v>) {\n         if let hir::ItemKind::Impl(unsafety, polarity, _, ref generics, ..) = item.kind {\n             self.check_unsafety_coherence(item, Some(generics), unsafety, polarity);\n         }"}, {"sha": "701f16f37b5aabff6c167f54e7ff98bfbd964f57", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -111,7 +111,7 @@ impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n \n-    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         convert_item(self.tcx, item.hir_id);\n         intravisit::walk_item(self, item);\n     }\n@@ -1693,7 +1693,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n         fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n             intravisit::NestedVisitorMap::All(&self.tcx.hir())\n         }\n-        fn visit_item(&mut self, it: &'tcx Item) {\n+        fn visit_item(&mut self, it: &'tcx Item<'tcx>) {\n             debug!(\"find_existential_constraints: visiting {:?}\", it);\n             let def_id = self.tcx.hir().local_def_id(it.hir_id);\n             // The opaque type itself or its children are not within its reveal scope.\n@@ -2052,8 +2052,6 @@ fn explicit_predicates_of(\n \n     const NO_GENERICS: &hir::Generics = &hir::Generics::empty();\n \n-    let empty_trait_items = HirVec::new();\n-\n     let mut predicates = UniquePredicates::new();\n \n     let ast_generics = match node {\n@@ -2098,12 +2096,12 @@ fn explicit_predicates_of(\n                 | ItemKind::Struct(_, ref generics)\n                 | ItemKind::Union(_, ref generics) => generics,\n \n-                ItemKind::Trait(_, _, ref generics, .., ref items) => {\n+                ItemKind::Trait(_, _, ref generics, .., items) => {\n                     is_trait = Some((ty::TraitRef::identity(tcx, def_id), items));\n                     generics\n                 }\n                 ItemKind::TraitAlias(ref generics, _) => {\n-                    is_trait = Some((ty::TraitRef::identity(tcx, def_id), &empty_trait_items));\n+                    is_trait = Some((ty::TraitRef::identity(tcx, def_id), &[]));\n                     generics\n                 }\n                 ItemKind::OpaqueTy(OpaqueTy {"}, {"sha": "98438945d111dce6ca0d9db9a2f9390b81aa40fc", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -79,7 +79,7 @@ struct ImplWfCheck<'tcx> {\n }\n \n impl ItemLikeVisitor<'tcx> for ImplWfCheck<'tcx> {\n-    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         if let hir::ItemKind::Impl(.., ref impl_item_refs) = item.kind {\n             let impl_def_id = self.tcx.hir().local_def_id(item.hir_id);\n             enforce_impl_params_are_constrained(self.tcx,"}, {"sha": "4ed631232b4c7e4bd362debbf5141475d028eeb8", "filename": "src/librustc_typeck/outlives/implicit_infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -51,7 +51,7 @@ pub struct InferVisitor<'cx, 'tcx> {\n }\n \n impl<'cx, 'tcx> ItemLikeVisitor<'tcx> for InferVisitor<'cx, 'tcx> {\n-    fn visit_item(&mut self, item: &hir::Item) {\n+    fn visit_item(&mut self, item: &hir::Item<'_>) {\n         let item_did = self.tcx.hir().local_def_id(item.hir_id);\n \n         debug!(\"InferVisitor::visit_item(item={:?})\", item_did);"}, {"sha": "86f61158f5f3b73e9b04dd31a8d354b12fad0dfa", "filename": "src/librustc_typeck/outlives/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -16,7 +16,7 @@ struct OutlivesTest<'tcx> {\n }\n \n impl ItemLikeVisitor<'tcx> for OutlivesTest<'tcx> {\n-    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         let item_def_id = self.tcx.hir().local_def_id(item.hir_id);\n \n         // For unit testing: check for a special \"rustc_outlives\""}, {"sha": "41854407a09035a58b66a499865dfb2bfb2a6086", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -67,7 +67,7 @@ pub fn add_constraints_from_crate<'a, 'tcx>(terms_cx: TermsContext<'a, 'tcx>)\n }\n \n impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ConstraintContext<'a, 'tcx> {\n-    fn visit_item(&mut self, item: &hir::Item) {\n+    fn visit_item(&mut self, item: &hir::Item<'_>) {\n         match item.kind {\n             hir::ItemKind::Struct(ref struct_def, _) |\n             hir::ItemKind::Union(ref struct_def, _) => {"}, {"sha": "e122b334b31cf365c8419a7d7ad03c6e3590d9eb", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -127,7 +127,7 @@ impl<'a, 'tcx> TermsContext<'a, 'tcx> {\n }\n \n impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for TermsContext<'a, 'tcx> {\n-    fn visit_item(&mut self, item: &hir::Item) {\n+    fn visit_item(&mut self, item: &hir::Item<'_>) {\n         debug!(\"add_inferreds for item {}\",\n                self.tcx.hir().node_to_string(item.hir_id));\n "}, {"sha": "01088db0efb4bb1958dea670dca465ddc3044a67", "filename": "src/librustc_typeck/variance/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -14,7 +14,7 @@ struct VarianceTest<'tcx> {\n }\n \n impl ItemLikeVisitor<'tcx> for VarianceTest<'tcx> {\n-    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         let item_def_id = self.tcx.hir().local_def_id(item.hir_id);\n \n         // For unit testing: check for a special \"rustc_variance\""}, {"sha": "83a33c840e381c695a67c985e74b7ac1ef828346", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -9,7 +9,6 @@ use syntax_pos::{self, Span};\n \n use rustc::hir;\n use rustc::hir::def_id::CrateNum;\n-use rustc::hir::ptr::P;\n \n pub struct Module<'hir> {\n     pub name: Option<Name>,\n@@ -136,7 +135,7 @@ pub struct Function<'hir> {\n }\n \n pub struct Typedef<'hir> {\n-    pub ty: &'hir P<hir::Ty>,\n+    pub ty: &'hir hir::Ty,\n     pub gen: &'hir hir::Generics,\n     pub name: Name,\n     pub id: hir::HirId,\n@@ -156,7 +155,7 @@ pub struct OpaqueTy<'hir> {\n \n #[derive(Debug)]\n pub struct Static<'hir> {\n-    pub type_: &'hir P<hir::Ty>,\n+    pub type_: &'hir hir::Ty,\n     pub mutability: hir::Mutability,\n     pub expr: hir::BodyId,\n     pub name: Name,\n@@ -167,7 +166,7 @@ pub struct Static<'hir> {\n }\n \n pub struct Constant<'hir> {\n-    pub type_: &'hir P<hir::Ty>,\n+    pub type_: &'hir hir::Ty,\n     pub expr: hir::BodyId,\n     pub name: Name,\n     pub attrs: &'hir [ast::Attribute],\n@@ -206,7 +205,7 @@ pub struct Impl<'hir> {\n     pub defaultness: hir::Defaultness,\n     pub generics: &'hir hir::Generics,\n     pub trait_: &'hir Option<hir::TraitRef>,\n-    pub for_: &'hir P<hir::Ty>,\n+    pub for_: &'hir hir::Ty,\n     pub items: Vec<&'hir hir::ImplItem>,\n     pub attrs: &'hir [ast::Attribute],\n     pub whence: Span,"}, {"sha": "b9e409f3d5844730191938c8cf1d9ae0f786ce4e", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084e6722f97560891cfe70dc7ab649f22eaf9aae/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=084e6722f97560891cfe70dc7ab649f22eaf9aae", "patch": "@@ -440,7 +440,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 om.unions.push(self.visit_union_data(item, ident.name, sd, gen)),\n             hir::ItemKind::Fn(ref sig, ref gen, body) =>\n                 self.visit_fn(om, item, ident.name, &sig.decl, sig.header, gen, body),\n-            hir::ItemKind::TyAlias(ref ty, ref gen) => {\n+            hir::ItemKind::TyAlias(ty, ref gen) => {\n                 let t = Typedef {\n                     ty,\n                     gen,\n@@ -463,7 +463,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 };\n                 om.opaque_tys.push(t);\n             },\n-            hir::ItemKind::Static(ref type_, mutability, expr) => {\n+            hir::ItemKind::Static(type_, mutability, expr) => {\n                 let s = Static {\n                     type_,\n                     mutability,\n@@ -476,7 +476,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 };\n                 om.statics.push(s);\n             },\n-            hir::ItemKind::Const(ref type_, expr) => {\n+            hir::ItemKind::Const(type_, expr) => {\n                 let s = Constant {\n                     type_,\n                     expr,\n@@ -524,7 +524,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                           defaultness,\n                           ref generics,\n                           ref trait_,\n-                          ref for_,\n+                          for_,\n                           ref item_ids) => {\n                 // Don't duplicate impls when inlining or if it's implementing a trait, we'll pick\n                 // them up regardless of where they're located."}]}