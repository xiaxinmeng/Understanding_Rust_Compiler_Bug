{"sha": "2bdaccbbcf02e4c14028ab15478e09a16d3e3d05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZGFjY2JiY2YwMmU0YzE0MDI4YWIxNTQ3OGUwOWExNmQzZTNkMDU=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-06-05T19:01:17Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-06-06T03:17:19Z"}, "message": "Make UnsafetyChecker visitor iterate instead of recurse", "tree": {"sha": "39d2a9e71ccd600e9dee30dc17c50dcf822e4d8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39d2a9e71ccd600e9dee30dc17c50dcf822e4d8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bdaccbbcf02e4c14028ab15478e09a16d3e3d05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bdaccbbcf02e4c14028ab15478e09a16d3e3d05", "html_url": "https://github.com/rust-lang/rust/commit/2bdaccbbcf02e4c14028ab15478e09a16d3e3d05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bdaccbbcf02e4c14028ab15478e09a16d3e3d05/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47f4975cd751a03c941431b35cd7a6cba6201730", "url": "https://api.github.com/repos/rust-lang/rust/commits/47f4975cd751a03c941431b35cd7a6cba6201730", "html_url": "https://github.com/rust-lang/rust/commit/47f4975cd751a03c941431b35cd7a6cba6201730"}], "stats": {"total": 79, "additions": 39, "deletions": 40}, "files": [{"sha": "4e8cc124e50407fe97dc49772ec636cabc4debb5", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 39, "deletions": 40, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/2bdaccbbcf02e4c14028ab15478e09a16d3e3d05/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bdaccbbcf02e4c14028ab15478e09a16d3e3d05/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=2bdaccbbcf02e4c14028ab15478e09a16d3e3d05", "patch": "@@ -199,11 +199,39 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n     fn visit_place(&mut self,\n                     place: &Place<'tcx>,\n                     context: PlaceContext,\n-                    location: Location) {\n-        match place {\n-            &Place::Projection(box Projection {\n-                ref base, ref elem\n-            }) => {\n+                    _location: Location) {\n+        place.iterate(|place_base, place_projections| {\n+            match place_base {\n+                PlaceBase::Local(..) => {\n+                    // Locals are safe.\n+                }\n+                PlaceBase::Static(box Static { kind: StaticKind::Promoted(_), .. }) => {\n+                    bug!(\"unsafety checking should happen before promotion\")\n+                }\n+                PlaceBase::Static(box Static { kind: StaticKind::Static(def_id), .. }) => {\n+                    if self.tcx.is_mutable_static(*def_id) {\n+                        self.require_unsafe(\"use of mutable static\",\n+                            \"mutable statics can be mutated by multiple threads: aliasing \\\n+                             violations or data races will cause undefined behavior\",\n+                             UnsafetyViolationKind::General);\n+                    } else if self.tcx.is_foreign_item(*def_id) {\n+                        let source_info = self.source_info;\n+                        let lint_root =\n+                            self.source_scope_local_data[source_info.scope].lint_root;\n+                        self.register_violations(&[UnsafetyViolation {\n+                            source_info,\n+                            description: InternedString::intern(\"use of extern static\"),\n+                            details: InternedString::intern(\n+                                \"extern statics are not controlled by the Rust type system: \\\n+                                invalid data, aliasing violations or data races will cause \\\n+                                undefined behavior\"),\n+                            kind: UnsafetyViolationKind::ExternStatic(lint_root)\n+                        }], &[]);\n+                    }\n+                }\n+            }\n+\n+            for proj in place_projections {\n                 if context.is_borrow() {\n                     if util::is_disaligned(self.tcx, self.mir, self.param_env, place) {\n                         let source_info = self.source_info;\n@@ -220,7 +248,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                         }], &[]);\n                     }\n                 }\n-                let is_borrow_of_interior_mut = context.is_borrow() && !base\n+                let is_borrow_of_interior_mut = context.is_borrow() && !proj.base\n                     .ty(self.mir, self.tcx)\n                     .ty\n                     .is_freeze(self.tcx, self.param_env, self.source_info.span);\n@@ -236,15 +264,15 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     );\n                 }\n                 let old_source_info = self.source_info;\n-                if let &Place::Base(PlaceBase::Local(local)) = base {\n+                if let Place::Base(PlaceBase::Local(local)) = proj.base {\n                     if self.mir.local_decls[local].internal {\n                         // Internal locals are used in the `move_val_init` desugaring.\n                         // We want to check unsafety against the source info of the\n                         // desugaring, rather than the source info of the RHS.\n                         self.source_info = self.mir.local_decls[local].source_info;\n                     }\n                 }\n-                let base_ty = base.ty(self.mir, self.tcx).ty;\n+                let base_ty = proj.base.ty(self.mir, self.tcx).ty;\n                 match base_ty.sty {\n                     ty::RawPtr(..) => {\n                         self.require_unsafe(\"dereference of raw pointer\",\n@@ -260,8 +288,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                                     MutatingUseContext::AsmOutput\n                                 )\n                             {\n-                                let elem_ty = match elem {\n-                                    &ProjectionElem::Field(_, ty) => ty,\n+                                let elem_ty = match proj.elem {\n+                                    ProjectionElem::Field(_, ty) => ty,\n                                     _ => span_bug!(\n                                         self.source_info.span,\n                                         \"non-field projection {:?} from union?\",\n@@ -292,36 +320,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 }\n                 self.source_info = old_source_info;\n             }\n-            &Place::Base(PlaceBase::Local(..)) => {\n-                // locals are safe\n-            }\n-            &Place::Base(PlaceBase::Static(box Static { kind: StaticKind::Promoted(_), .. })) => {\n-                bug!(\"unsafety checking should happen before promotion\")\n-            }\n-            &Place::Base(\n-                PlaceBase::Static(box Static { kind: StaticKind::Static(def_id), .. })\n-            ) => {\n-                if self.tcx.is_mutable_static(def_id) {\n-                    self.require_unsafe(\"use of mutable static\",\n-                        \"mutable statics can be mutated by multiple threads: aliasing violations \\\n-                         or data races will cause undefined behavior\",\n-                         UnsafetyViolationKind::General);\n-                } else if self.tcx.is_foreign_item(def_id) {\n-                    let source_info = self.source_info;\n-                    let lint_root =\n-                        self.source_scope_local_data[source_info.scope].lint_root;\n-                    self.register_violations(&[UnsafetyViolation {\n-                        source_info,\n-                        description: InternedString::intern(\"use of extern static\"),\n-                        details: InternedString::intern(\n-                            \"extern statics are not controlled by the Rust type system: invalid \\\n-                            data, aliasing violations or data races will cause undefined behavior\"),\n-                        kind: UnsafetyViolationKind::ExternStatic(lint_root)\n-                    }], &[]);\n-                }\n-            }\n-        };\n-        self.super_place(place, context, location);\n+        });\n     }\n }\n "}]}