{"sha": "b5cb393cf5b4a65fb99d8b1e43450fb87567788b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1Y2IzOTNjZjViNGE2NWZiOTlkOGIxZTQzNDUwZmI4NzU2Nzc4OGI=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-02-10T01:54:27Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-02-10T01:54:27Z"}, "message": "Use is_empty in range iteration exhaustion tests", "tree": {"sha": "abee324c966322f576a7dd646cf865fdc7d39881", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abee324c966322f576a7dd646cf865fdc7d39881"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5cb393cf5b4a65fb99d8b1e43450fb87567788b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5cb393cf5b4a65fb99d8b1e43450fb87567788b", "html_url": "https://github.com/rust-lang/rust/commit/b5cb393cf5b4a65fb99d8b1e43450fb87567788b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5cb393cf5b4a65fb99d8b1e43450fb87567788b/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fe182fdfe01e01dd899962cc8dbaea63f422c9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fe182fdfe01e01dd899962cc8dbaea63f422c9c", "html_url": "https://github.com/rust-lang/rust/commit/7fe182fdfe01e01dd899962cc8dbaea63f422c9c"}], "stats": {"total": 79, "additions": 70, "deletions": 9}, "files": [{"sha": "cce593ee208b6c7f28aaa84d8f2c8bdd2f6494aa", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b5cb393cf5b4a65fb99d8b1e43450fb87567788b/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5cb393cf5b4a65fb99d8b1e43450fb87567788b/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=b5cb393cf5b4a65fb99d8b1e43450fb87567788b", "patch": "@@ -262,6 +262,13 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n /// The `RangeInclusive` `start..=end` contains all values with `x >= start`\n /// and `x <= end`.\n ///\n+/// This iterator is [fused], but the specific values of `start` and `end` after\n+/// iteration has finished are **unspecified** other than that [`.is_empty()`]\n+/// will return `true` once no more values will be produced.\n+///\n+/// [fused]: ../iter/trait.FusedIterator.html\n+/// [`.is_empty()`]: #method.is_empty\n+///\n /// # Examples\n ///\n /// ```\n@@ -329,6 +336,17 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// assert!(!(3..=3).is_empty());\n     /// assert!( (3..=2).is_empty());\n     /// ```\n+    ///\n+    /// This method returns `true` after iteration has finished:\n+    ///\n+    /// ```\n+    /// #![feature(range_is_empty,inclusive_range_syntax)]\n+    ///\n+    /// let mut r = 3..=5;\n+    /// for _ in r.by_ref() {}\n+    /// // Precise field values are unspecified here\n+    /// assert!(r.is_empty());\n+    /// ```\n     #[unstable(feature = \"range_is_empty\", reason = \"recently added\", issue = \"123456789\")]\n     pub fn is_empty(&self) -> bool {\n         !(self.start <= self.end)"}, {"sha": "d8c9dcd8664868e9039ca0e76be97a428964528a", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 52, "deletions": 9, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/b5cb393cf5b4a65fb99d8b1e43450fb87567788b/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5cb393cf5b4a65fb99d8b1e43450fb87567788b/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=b5cb393cf5b4a65fb99d8b1e43450fb87567788b", "patch": "@@ -1322,42 +1322,84 @@ fn test_range() {\n                (isize::MAX as usize + 2, Some(isize::MAX as usize + 2)));\n }\n \n+#[test]\n+fn test_range_exhaustion() {\n+    let mut r = 10..10;\n+    assert!(r.is_empty());\n+    assert_eq!(r.next(), None);\n+    assert_eq!(r.next_back(), None);\n+    assert_eq!(r, 10..10);\n+\n+    let mut r = 10..12;\n+    assert_eq!(r.next(), Some(10));\n+    assert_eq!(r.next(), Some(11));\n+    assert!(r.is_empty());\n+    assert_eq!(r, 12..12);\n+    assert_eq!(r.next(), None);\n+\n+    let mut r = 10..12;\n+    assert_eq!(r.next_back(), Some(11));\n+    assert_eq!(r.next_back(), Some(10));\n+    assert!(r.is_empty());\n+    assert_eq!(r, 10..10);\n+    assert_eq!(r.next_back(), None);\n+\n+    let mut r = 100..10;\n+    assert!(r.is_empty());\n+    assert_eq!(r.next(), None);\n+    assert_eq!(r.next_back(), None);\n+    assert_eq!(r, 100..10);\n+}\n+\n #[test]\n fn test_range_inclusive_exhaustion() {\n     let mut r = 10..=10;\n     assert_eq!(r.next(), Some(10));\n-    assert_eq!(r, 1..=0);\n+    assert!(r.is_empty());\n+    assert_eq!(r.next(), None);\n+    assert_eq!(r.next(), None);\n \n     let mut r = 10..=10;\n     assert_eq!(r.next_back(), Some(10));\n-    assert_eq!(r, 1..=0);\n+    assert!(r.is_empty());\n+    assert_eq!(r.next_back(), None);\n \n     let mut r = 10..=12;\n     assert_eq!(r.next(), Some(10));\n     assert_eq!(r.next(), Some(11));\n     assert_eq!(r.next(), Some(12));\n-    assert_eq!(r, 1..=0);\n+    assert!(r.is_empty());\n+    assert_eq!(r.next(), None);\n \n     let mut r = 10..=12;\n     assert_eq!(r.next_back(), Some(12));\n     assert_eq!(r.next_back(), Some(11));\n     assert_eq!(r.next_back(), Some(10));\n-    assert_eq!(r, 1..=0);\n+    assert!(r.is_empty());\n+    assert_eq!(r.next_back(), None);\n \n     let mut r = 10..=12;\n     assert_eq!(r.nth(2), Some(12));\n-    assert_eq!(r, 1..=0);\n+    assert!(r.is_empty());\n+    assert_eq!(r.next(), None);\n \n     let mut r = 10..=12;\n     assert_eq!(r.nth(5), None);\n-    assert_eq!(r, 1..=0);\n+    assert!(r.is_empty());\n+    assert_eq!(r.next(), None);\n \n     let mut r = 100..=10;\n     assert_eq!(r.next(), None);\n+    assert!(r.is_empty());\n+    assert_eq!(r.next(), None);\n+    assert_eq!(r.next(), None);\n     assert_eq!(r, 100..=10);\n \n     let mut r = 100..=10;\n     assert_eq!(r.next_back(), None);\n+    assert!(r.is_empty());\n+    assert_eq!(r.next_back(), None);\n+    assert_eq!(r.next_back(), None);\n     assert_eq!(r, 100..=10);\n }\n \n@@ -1427,10 +1469,11 @@ fn test_range_inclusive_nth() {\n     assert_eq!(r, 13..=20);\n     assert_eq!(r.nth(2), Some(15));\n     assert_eq!(r, 16..=20);\n+    assert_eq!(r.is_empty(), false);\n     assert_eq!(ExactSizeIterator::is_empty(&r), false);\n     assert_eq!(r.nth(10), None);\n+    assert_eq!(r.is_empty(), true);\n     assert_eq!(ExactSizeIterator::is_empty(&r), true);\n-    assert_eq!(r, 1..=0);  // We may not want to document/promise this detail\n }\n \n #[test]\n@@ -1514,11 +1557,11 @@ fn test_range_inclusive_folds() {\n \n     let mut it = 10..=20;\n     assert_eq!(it.try_fold(0, |a,b| Some(a+b)), Some(165));\n-    assert_eq!(it, 1..=0);\n+    assert!(it.is_empty());\n \n     let mut it = 10..=20;\n     assert_eq!(it.try_rfold(0, |a,b| Some(a+b)), Some(165));\n-    assert_eq!(it, 1..=0);\n+    assert!(it.is_empty());\n }\n \n #[test]"}]}