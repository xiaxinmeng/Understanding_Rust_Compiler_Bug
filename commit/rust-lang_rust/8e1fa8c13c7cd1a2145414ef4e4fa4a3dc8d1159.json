{"sha": "8e1fa8c13c7cd1a2145414ef4e4fa4a3dc8d1159", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMWZhOGMxM2M3Y2QxYTIxNDU0MTRlZjRlNGZhNGEzZGM4ZDExNTk=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-05-30T12:05:50Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-05-30T12:05:50Z"}, "message": "add more benchmarks", "tree": {"sha": "5c92b3c2f751571bbc47377baca09b780cee15c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c92b3c2f751571bbc47377baca09b780cee15c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e1fa8c13c7cd1a2145414ef4e4fa4a3dc8d1159", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXTCyeAAoJEFbW7qD8Z6xGnYgP/18u12sbrFf70UdF1xkC4xLX\nbQMmEn4QXrfIoMqjBVyfubMKk8icHkAaflk6SfWo8c4N1cQ19SXLBi9KTjA53+Y+\ntRNWyoMqFprbJepJfOvZtNXI2su2Qok+koS+W8aXb4Ayh2RChyD+c6tkiE6qicU1\nR4gxLVrr3mCeQ6d+GEd1W/9ilPZjJT/0byyqQZ3s7kwAkbu8mfINIftMEI+Pru0G\nJ+vupGJeGOKD1YZxqjCz/SdB4Fb/AieHGipxPVq4ETml5R5bEQPYx6No/9huoO20\n3DKiF9RbJlevE0ZCGf1DdsET7GtNrA7u0PjzF/8dc0l0nQy85+hVQ1DURmu+83GL\nigHOlYKe77rQwnaqr5uIBhSX6l/OTy1Z9NvW9GpRViwjtYUC8m64jzNsur3bMLP/\nd96tEG0JJHjOip9UTlTu6PLKFOvW2qnBtcIPmymbllOV4oThIrwYzuJ+eZcm7BqA\nyv2mABdQnALZ6vwzUlcZryBC87CaibrTnBJCXYRlDTEchHN4HqS6+7XZh1jxWenE\n3b5KsKRzraqHwwIvYSFV4UN6mpg8dXugq0DWFCzCKIDKxpC1wny0aW2Rv/KlcQQh\nbXwjifsnANkpGB8DrYWGrjOSSR3JvkZdTNkrJY5Y9Xey5LPWh6YRkAVARZgTiAuB\nRPG6Y/DB3xbzBpLihtSv\n=GJaW\n-----END PGP SIGNATURE-----", "payload": "tree 5c92b3c2f751571bbc47377baca09b780cee15c3\nparent cecae8050eb30f282c574867ffd84e9a2bbf8e45\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1464609950 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1464609950 +0200\n\nadd more benchmarks"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e1fa8c13c7cd1a2145414ef4e4fa4a3dc8d1159", "html_url": "https://github.com/rust-lang/rust/commit/8e1fa8c13c7cd1a2145414ef4e4fa4a3dc8d1159", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e1fa8c13c7cd1a2145414ef4e4fa4a3dc8d1159/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cecae8050eb30f282c574867ffd84e9a2bbf8e45", "url": "https://api.github.com/repos/rust-lang/rust/commits/cecae8050eb30f282c574867ffd84e9a2bbf8e45", "html_url": "https://github.com/rust-lang/rust/commit/cecae8050eb30f282c574867ffd84e9a2bbf8e45"}], "stats": {"total": 159, "additions": 121, "deletions": 38}, "files": [{"sha": "1f8a2aafc9ed9efce8d6eaadbb206ed67f6f021f", "filename": "benches/fibonacci.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8e1fa8c13c7cd1a2145414ef4e4fa4a3dc8d1159/benches%2Ffibonacci.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e1fa8c13c7cd1a2145414ef4e4fa4a3dc8d1159/benches%2Ffibonacci.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Ffibonacci.rs?ref=8e1fa8c13c7cd1a2145414ef4e4fa4a3dc8d1159", "patch": "@@ -0,0 +1,36 @@\n+#![feature(custom_attribute, test)]\n+#![feature(rustc_private)]\n+#![allow(unused_attributes)]\n+\n+extern crate test;\n+use test::Bencher;\n+\n+mod fibonacci_helper;\n+\n+#[bench]\n+fn fib(bencher: &mut Bencher) {\n+    bencher.iter(|| {\n+        fibonacci_helper::main();\n+    })\n+}\n+\n+mod miri_helper;\n+\n+#[bench]\n+fn fib_miri(bencher: &mut Bencher) {\n+    miri_helper::run(\"fibonacci_helper\", bencher);\n+}\n+\n+mod fibonacci_helper_iterative;\n+\n+#[bench]\n+fn fib_iter(bencher: &mut Bencher) {\n+    bencher.iter(|| {\n+        fibonacci_helper_iterative::main();\n+    })\n+}\n+\n+#[bench]\n+fn fib_iter_miri(bencher: &mut Bencher) {\n+    miri_helper::run(\"fibonacci_helper_iterative\", bencher);\n+}"}, {"sha": "cddfff9c2c92dc3ef8c9662633c3591a6a03fa61", "filename": "benches/fibonacci_helper.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8e1fa8c13c7cd1a2145414ef4e4fa4a3dc8d1159/benches%2Ffibonacci_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e1fa8c13c7cd1a2145414ef4e4fa4a3dc8d1159/benches%2Ffibonacci_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Ffibonacci_helper.rs?ref=8e1fa8c13c7cd1a2145414ef4e4fa4a3dc8d1159", "patch": "@@ -0,0 +1,16 @@\n+#![feature(custom_attribute)]\n+#![allow(unused_attributes)]\n+\n+#[miri_run]\n+#[inline(never)]\n+pub fn main() {\n+    assert_eq!(fib(10), 55);\n+}\n+\n+fn fib(n: usize) -> usize {\n+    if n <= 2 {\n+        1\n+    } else {\n+        fib(n - 1) + fib(n - 2)\n+    }\n+}"}, {"sha": "486d8c2e8a8689f7645f49ff20ffe23333407329", "filename": "benches/fibonacci_helper_iterative.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8e1fa8c13c7cd1a2145414ef4e4fa4a3dc8d1159/benches%2Ffibonacci_helper_iterative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e1fa8c13c7cd1a2145414ef4e4fa4a3dc8d1159/benches%2Ffibonacci_helper_iterative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Ffibonacci_helper_iterative.rs?ref=8e1fa8c13c7cd1a2145414ef4e4fa4a3dc8d1159", "patch": "@@ -0,0 +1,19 @@\n+#![feature(custom_attribute)]\n+#![allow(unused_attributes)]\n+\n+#[miri_run]\n+#[inline(never)]\n+pub fn main() {\n+    assert_eq!(fib(10), 55);\n+}\n+\n+fn fib(n: usize) -> usize {\n+    let mut a = 0;\n+    let mut b = 1;\n+    for _ in 0..n {\n+        let c = a;\n+        a = b;\n+        b = c + b;\n+    }\n+    a\n+}"}, {"sha": "54c15a27ed88425982bd96a92f8dc9951d16e6af", "filename": "benches/miri_helper.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8e1fa8c13c7cd1a2145414ef4e4fa4a3dc8d1159/benches%2Fmiri_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e1fa8c13c7cd1a2145414ef4e4fa4a3dc8d1159/benches%2Fmiri_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fmiri_helper.rs?ref=8e1fa8c13c7cd1a2145414ef4e4fa4a3dc8d1159", "patch": "@@ -0,0 +1,47 @@\n+#![feature(custom_attribute, test)]\n+#![feature(rustc_private)]\n+#![allow(unused_attributes)]\n+\n+extern crate getopts;\n+extern crate miri;\n+extern crate rustc;\n+extern crate rustc_driver;\n+extern crate test;\n+\n+use self::miri::interpreter;\n+use self::rustc::session::Session;\n+use self::rustc_driver::{driver, CompilerCalls};\n+use std::cell::RefCell;\n+use std::rc::Rc;\n+use std::env::var;\n+use test::Bencher;\n+\n+pub struct MiriCompilerCalls<'a>(Rc<RefCell<&'a mut Bencher>>);\n+\n+pub fn run(filename: &str, bencher: &mut Bencher) {\n+    let path = var(\"RUST_SYSROOT\").expect(\"env variable `RUST_SYSROOT` not set\");\n+    rustc_driver::run_compiler(&[\n+        \"miri\".to_string(), format!(\"benches/{}.rs\", filename), \"--sysroot\".to_string(), path.to_string(),\n+    ], &mut MiriCompilerCalls(Rc::new(RefCell::new(bencher))));\n+}\n+\n+impl<'a> CompilerCalls<'a> for MiriCompilerCalls<'a> {\n+    fn build_controller(\n+        &mut self,\n+        _: &Session,\n+        _: &getopts::Matches\n+    ) -> driver::CompileController<'a> {\n+        let mut control: driver::CompileController<'a> = driver::CompileController::basic();\n+\n+        let bencher = self.0.clone();\n+\n+        control.after_analysis.callback = Box::new(move |state| {\n+            state.session.abort_if_errors();\n+            bencher.borrow_mut().iter(|| {\n+                interpreter::interpret_start_points(state.tcx.unwrap(), state.mir_map.unwrap());\n+            })\n+        });\n+\n+        control\n+    }\n+}"}, {"sha": "43baf486df397c773921c8e389e8df803819df14", "filename": "benches/smoke.rs", "status": "modified", "additions": 3, "deletions": 38, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8e1fa8c13c7cd1a2145414ef4e4fa4a3dc8d1159/benches%2Fsmoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e1fa8c13c7cd1a2145414ef4e4fa4a3dc8d1159/benches%2Fsmoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fsmoke.rs?ref=8e1fa8c13c7cd1a2145414ef4e4fa4a3dc8d1159", "patch": "@@ -2,17 +2,6 @@\n #![feature(rustc_private)]\n #![allow(unused_attributes)]\n \n-extern crate getopts;\n-extern crate miri;\n-extern crate rustc;\n-extern crate rustc_driver;\n-\n-use miri::interpreter;\n-use rustc::session::Session;\n-use rustc_driver::{driver, CompilerCalls};\n-use std::cell::RefCell;\n-use std::rc::Rc;\n-\n extern crate test;\n use test::Bencher;\n \n@@ -44,33 +33,9 @@ fn noop_miri_full(bencher: &mut Bencher) {\n }\n */\n \n+mod miri_helper;\n+\n #[bench]\n fn noop_miri_interpreter(bencher: &mut Bencher) {\n-    let path = std::env::var(\"RUST_SYSROOT\").expect(\"env variable `RUST_SYSROOT` not set\");\n-    rustc_driver::run_compiler(&[\n-        \"miri\".to_string(), \"benches/smoke_helper.rs\".to_string(), \"--sysroot\".to_string(), path.to_string(),\n-    ], &mut MiriCompilerCalls(Rc::new(RefCell::new(bencher))));\n-}\n-\n-struct MiriCompilerCalls<'a>(Rc<RefCell<&'a mut Bencher>>);\n-\n-impl<'a> CompilerCalls<'a> for MiriCompilerCalls<'a> {\n-    fn build_controller(\n-        &mut self,\n-        _: &Session,\n-        _: &getopts::Matches\n-    ) -> driver::CompileController<'a> {\n-        let mut control: driver::CompileController<'a> = driver::CompileController::basic();\n-\n-        let bencher = self.0.clone();\n-\n-        control.after_analysis.callback = Box::new(move |state| {\n-            state.session.abort_if_errors();\n-            bencher.borrow_mut().iter(|| {\n-                interpreter::interpret_start_points(state.tcx.unwrap(), state.mir_map.unwrap());\n-            })\n-        });\n-\n-        control\n-    }\n+    miri_helper::run(\"smoke_helper\", bencher);\n }"}]}