{"sha": "65e3fc8e772219bd41e182e424c928700788032a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZTNmYzhlNzcyMjE5YmQ0MWUxODJlNDI0YzkyODcwMDc4ODAzMmE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-26T14:38:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-26T14:38:20Z"}, "message": "Merge #2075\n\n2075: document a couple of assists r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "97d219e21c2c4a873863e40103c7a1e5573ae5db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97d219e21c2c4a873863e40103c7a1e5573ae5db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65e3fc8e772219bd41e182e424c928700788032a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdtFpcCRBK7hj4Ov3rIwAAdHIIAB+Uh9kgmxQ4AwMtUAzwypxN\nhM4u5VcQRDtiysGCT7m6/cZNbvCvczxNWY6iyZZuKch0ZwfXQVEEts8oo6ih38SC\nK9q+D3yviAxZ0/aVwFB7+UP0xTQQlu68MR5H4S28/AETGdwumITUikdBLJs/3feu\n+70cBG4dIHSZzJNHYtKZi3UrRCqUeO8q4V6SjizQm3WzJyxrwB3+Bvs3P4bOeZCN\nREV2mNvRXHPfEnSi7S4APVubQ4Imy9YcJrct/wP5dGZpwHWn6BZZLWrHr7oz2PGO\nnCp9RtNyz4F4jo95KA6hpd5mGuhE7q+M+ClLjRK+7SEXhkrGfHhIFAqTHn6vvLA=\n=5WTD\n-----END PGP SIGNATURE-----\n", "payload": "tree 97d219e21c2c4a873863e40103c7a1e5573ae5db\nparent fa4ccc5fef4f69d2e5bc93086249ba4d2ecf9ffc\nparent 3126152a84e08a80659d49d735d03628154564ed\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1572100700 +0000\ncommitter GitHub <noreply@github.com> 1572100700 +0000\n\nMerge #2075\n\n2075: document a couple of assists r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65e3fc8e772219bd41e182e424c928700788032a", "html_url": "https://github.com/rust-lang/rust/commit/65e3fc8e772219bd41e182e424c928700788032a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65e3fc8e772219bd41e182e424c928700788032a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa4ccc5fef4f69d2e5bc93086249ba4d2ecf9ffc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa4ccc5fef4f69d2e5bc93086249ba4d2ecf9ffc", "html_url": "https://github.com/rust-lang/rust/commit/fa4ccc5fef4f69d2e5bc93086249ba4d2ecf9ffc"}, {"sha": "3126152a84e08a80659d49d735d03628154564ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/3126152a84e08a80659d49d735d03628154564ed", "html_url": "https://github.com/rust-lang/rust/commit/3126152a84e08a80659d49d735d03628154564ed"}], "stats": {"total": 176, "additions": 122, "deletions": 54}, "files": [{"sha": "b077acb8142ab970b94c59c9502404a4a880b979", "filename": "crates/ra_assists/src/assists/add_derive.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65e3fc8e772219bd41e182e424c928700788032a/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e3fc8e772219bd41e182e424c928700788032a/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_derive.rs?ref=65e3fc8e772219bd41e182e424c928700788032a", "patch": "@@ -8,7 +8,9 @@ use ra_syntax::{\n use crate::{Assist, AssistCtx, AssistId};\n \n // Assist: add_derive\n+//\n // Adds a new `#[derive()]` clause to a struct or enum.\n+//\n // ```\n // struct Point {\n //     x: u32,"}, {"sha": "302b9557908360e4e7e616bb9ae0a80db025b791", "filename": "crates/ra_assists/src/assists/add_explicit_type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65e3fc8e772219bd41e182e424c928700788032a/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e3fc8e772219bd41e182e424c928700788032a/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs?ref=65e3fc8e772219bd41e182e424c928700788032a", "patch": "@@ -7,7 +7,9 @@ use ra_syntax::{\n use crate::{Assist, AssistCtx, AssistId};\n \n // Assist: add_explicit_type\n+//\n // Specify type for a let binding\n+//\n // ```\n // fn main() {\n //     let x<|> = 92;"}, {"sha": "43aeac7bd6e7239367d89d1bf2b667aa0f470f15", "filename": "crates/ra_assists/src/assists/add_impl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65e3fc8e772219bd41e182e424c928700788032a/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e3fc8e772219bd41e182e424c928700788032a/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_impl.rs?ref=65e3fc8e772219bd41e182e424c928700788032a", "patch": "@@ -9,7 +9,9 @@ use ra_syntax::{\n use crate::{Assist, AssistCtx, AssistId};\n \n // Assist: add_impl\n+//\n // Adds a new inherent impl for a type\n+//\n // ```\n // struct Ctx<T: Clone> {\n //      data: T,<|>"}, {"sha": "fe1f2e72e7f563e6c630e8c48cfe8b523d8a43cf", "filename": "crates/ra_assists/src/assists/add_missing_impl_members.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65e3fc8e772219bd41e182e424c928700788032a/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e3fc8e772219bd41e182e424c928700788032a/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs?ref=65e3fc8e772219bd41e182e424c928700788032a", "patch": "@@ -13,7 +13,9 @@ enum AddMissingImplMembersMode {\n }\n \n // Assist: add_impl_missing_members\n+//\n // Adds scaffold for required impl members\n+//\n // ```\n // trait T {\n //     Type X;"}, {"sha": "75144cefe2e0d196556be226bdc7dc30d4fb15c7", "filename": "crates/ra_assists/src/assists/apply_demorgan.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65e3fc8e772219bd41e182e424c928700788032a/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e3fc8e772219bd41e182e424c928700788032a/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs?ref=65e3fc8e772219bd41e182e424c928700788032a", "patch": "@@ -5,11 +5,13 @@ use ra_syntax::SyntaxNode;\n use crate::{Assist, AssistCtx, AssistId};\n \n // Assist: apply_demorgan\n+//\n // Apply [De Morgan's law](https://en.wikipedia.org/wiki/De_Morgan%27s_laws).\n // This transforms expressions of the form `!l || !r` into `!(l && r)`.\n // This also works with `&&`. This assist can only be applied with the cursor\n // on either `||` or `&&`, with both operands being a negation of some kind.\n // This means something of the form `!x` or `x != y`.\n+//\n // ```\n // fn main() {\n //     if x != 4 ||<|> !y {}"}, {"sha": "88118cdf7c04b161dd3e39526c8ae742cdbb8d2e", "filename": "crates/ra_assists/src/assists/change_visibility.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/65e3fc8e772219bd41e182e424c928700788032a/crates%2Fra_assists%2Fsrc%2Fassists%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e3fc8e772219bd41e182e424c928700788032a/crates%2Fra_assists%2Fsrc%2Fassists%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fchange_visibility.rs?ref=65e3fc8e772219bd41e182e424c928700788032a", "patch": "@@ -1,5 +1,3 @@\n-//! FIXME: write short doc here\n-\n use hir::db::HirDatabase;\n use ra_syntax::{\n     ast::{self, NameOwner, VisibilityOwner},\n@@ -13,6 +11,17 @@ use ra_syntax::{\n \n use crate::{Assist, AssistCtx, AssistId};\n \n+// Assist: change_visibility\n+//\n+// Adds or changes existing visibility specifier.\n+//\n+// ```\n+// fn<|> frobnicate() {}\n+// ```\n+// ->\n+// ```\n+// pub(crate) fn frobnicate() {}\n+// ```\n pub(crate) fn change_visibility(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     if let Some(vis) = ctx.node_at_offset::<ast::Visibility>() {\n         return change_vis(ctx, vis);"}, {"sha": "13b98d033359ca89dfa886a9e29c50a98340cf45", "filename": "crates/ra_assists/src/assists/fill_match_arms.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/65e3fc8e772219bd41e182e424c928700788032a/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e3fc8e772219bd41e182e424c928700788032a/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs?ref=65e3fc8e772219bd41e182e424c928700788032a", "patch": "@@ -7,6 +7,30 @@ use ra_syntax::ast::{self, edit::IndentLevel, make, AstNode, NameOwner};\n \n use crate::{Assist, AssistCtx, AssistId};\n \n+// Assist: fill_match_arms\n+//\n+// Adds missing clauses to a `match` expression.\n+//\n+// ```\n+// enum Action { Move { distance: u32 }, Stop }\n+//\n+// fn handle(action: Action) {\n+//     match action {\n+//         <|>\n+//     }\n+// }\n+// ```\n+// ->\n+// ```\n+// enum Action { Move { distance: u32 }, Stop }\n+//\n+// fn handle(action: Action) {\n+//     match action {\n+//         Action::Move{ distance } => (),\n+//         Action::Stop => (),\n+//     }\n+// }\n+// ```\n pub(crate) fn fill_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let match_expr = ctx.node_at_offset::<ast::MatchExpr>()?;\n     let match_arm_list = match_expr.match_arm_list()?;"}, {"sha": "2f36c3baa31ee3e15849ad4df69596d245ff81ae", "filename": "crates/ra_assists/src/doc_tests/generated.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/65e3fc8e772219bd41e182e424c928700788032a/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e3fc8e772219bd41e182e424c928700788032a/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs?ref=65e3fc8e772219bd41e182e424c928700788032a", "patch": "@@ -141,6 +141,19 @@ fn main() {\n     )\n }\n \n+#[test]\n+fn doctest_change_visibility() {\n+    check(\n+        \"change_visibility\",\n+        r#####\"\n+fn<|> frobnicate() {}\n+\"#####,\n+        r#####\"\n+pub(crate) fn frobnicate() {}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_convert_to_guarded_return() {\n     check(\n@@ -164,3 +177,29 @@ fn main() {\n \"#####,\n     )\n }\n+\n+#[test]\n+fn doctest_fill_match_arms() {\n+    check(\n+        \"fill_match_arms\",\n+        r#####\"\n+enum Action { Move { distance: u32 }, Stop }\n+\n+fn handle(action: Action) {\n+    match action {\n+        <|>\n+    }\n+}\n+\"#####,\n+        r#####\"\n+enum Action { Move { distance: u32 }, Stop }\n+\n+fn handle(action: Action) {\n+    match action {\n+        Action::Move{ distance } => (),\n+        Action::Stop => (),\n+    }\n+}\n+\"#####,\n+    )\n+}"}, {"sha": "7a64c80ad599d1474884c21c9ca71b9b0b60a166", "filename": "docs/user/assists.md", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/65e3fc8e772219bd41e182e424c928700788032a/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/65e3fc8e772219bd41e182e424c928700788032a/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=65e3fc8e772219bd41e182e424c928700788032a", "patch": "@@ -137,6 +137,18 @@ fn main() {\n }\n ```\n \n+## `change_visibility`\n+\n+Adds or changes existing visibility specifier.\n+\n+```rust\n+// BEFORE\n+fn<|> frobnicate() {}\n+\n+// AFTER\n+pub(crate) fn frobnicate() {}\n+```\n+\n ## `convert_to_guarded_return`\n \n Replace a large conditional with a guarded return.\n@@ -159,3 +171,28 @@ fn main() {\n     bar();\n }\n ```\n+\n+## `fill_match_arms`\n+\n+Adds missing clauses to a `match` expression.\n+\n+```rust\n+// BEFORE\n+enum Action { Move { distance: u32 }, Stop }\n+\n+fn handle(action: Action) {\n+    match action {\n+        <|>\n+    }\n+}\n+\n+// AFTER\n+enum Action { Move { distance: u32 }, Stop }\n+\n+fn handle(action: Action) {\n+    match action {\n+        Action::Move{ distance } => (),\n+        Action::Stop => (),\n+    }\n+}\n+```"}, {"sha": "39dab710dd26e17372de2e7ae0addf4521bb759d", "filename": "docs/user/features.md", "status": "modified", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/65e3fc8e772219bd41e182e424c928700788032a/docs%2Fuser%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/65e3fc8e772219bd41e182e424c928700788032a/docs%2Fuser%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Ffeatures.md?ref=65e3fc8e772219bd41e182e424c928700788032a", "patch": "@@ -118,57 +118,6 @@ impl Debug<|> for Foo {\n }\n ```\n \n-- Change Visibility\n-\n-```rust\n-// before:\n-<|>fn foo() {}\n-\n-// after:\n-<|>pub(crate) fn foo() {}\n-\n-// after:\n-<|>pub fn foo() {}\n-```\n-\n-- Fill match arms\n-\n-```rust\n-// before:\n-enum A {\n-    As,\n-    Bs,\n-    Cs(String),\n-    Ds(String, String),\n-    Es{x: usize, y: usize}\n-}\n-\n-fn main() {\n-    let a = A::As;\n-    match a<|> {}\n-}\n-\n-// after:\n-enum A {\n-    As,\n-    Bs,\n-    Cs(String),\n-    Ds(String, String),\n-    Es{x: usize, y: usize}\n-}\n-\n-fn main() {\n-    let a = A::As;\n-    match <|>a {\n-        A::As => (),\n-        A::Bs => (),\n-        A::Cs(_) => (),\n-        A::Ds(_, _) => (),\n-        A::Es{x, y} => (),\n-    }\n-}\n-```\n-\n - Fill struct fields\n \n ```rust"}, {"sha": "2ca7cda63dbe421337c15b70aa703afbff9b5068", "filename": "xtask/src/codegen/gen_assists_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65e3fc8e772219bd41e182e424c928700788032a/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e3fc8e772219bd41e182e424c928700788032a/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs?ref=65e3fc8e772219bd41e182e424c928700788032a", "patch": "@@ -51,7 +51,7 @@ fn collect_assists() -> Result<Vec<Assist>> {\n                 id\n             );\n \n-            let doc = take_until(lines.by_ref(), \"```\");\n+            let doc = take_until(lines.by_ref(), \"```\").trim().to_string();\n             let before = take_until(lines.by_ref(), \"```\");\n \n             assert_eq!(lines.next().unwrap().as_str(), \"->\");"}]}