{"sha": "d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMmMyODY1ZDY0ZTUzY2RkMWI3MTZiMmI4OTY2ZTRkMWE0YmZhMzg=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-10-20T20:11:04Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-10-22T13:33:36Z"}, "message": "Intern place projection", "tree": {"sha": "18acd2007af278a8745f559bf83e257dd6b02dbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18acd2007af278a8745f559bf83e257dd6b02dbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAl2vBTAACgkQiMlBzaHU\nZDLxGQ//QOIsEN6pHMDpziApxVuM+Jm1+Z+EJ2lEZGdnDo+qBCIdThVH5poOcYyt\n2RJsKycJ++RgOh/wnDzr+iDHXcmle4ENn9HgIKKQ0houePhoDj07FHzmKscnORSb\n/TdZQXphAcFk5n0LcZV64q5WV+hyxZUM1Q3AYZXsolgYIRhErgf1Gud1ayw7YmK9\n7wxYCkBpRpMTqMhe/b+wfaTe5t+A50yZ85eAGOTeEhuTD+VskUWVBO4sZ1RuLjE7\ncPhOg0wRPdt01YZm/4i9rV0Jnj3c6REtUlOhc6ocraXBGiOnXaD0fgmeq70EqeUk\nf/YOmbOgR2/Fkr+rmiIVq1aeolqumVzBiUG+piFL9I6sHkUPafobwt8alUhIl2tm\nHPPOTRwbZ74bhwIpYNMUvBrpxLti6NUn6RW+GuA9cPoqzCZSULdNx7JjJ06V4OB/\nx5fTM5lJHrOUzNx+40exOcpr8kPJRpRcn5uRcMyGzViH+bEv+l3XQ/jxqzmWA1L1\nOOX3mjePlElVce+gWA9oCz11sgU9Frbu6uM0WRIX5jOgcrWEHeNU7WMKbcVmRYOO\nVVXS0pqLyV8Z9npkYSTJidCAl1p71q0qoZHfl++hogS8EMZtFVDlbOFXr4Jj8hYd\nJiDP5KhC9NEaCD5vmH0goQrLKxY7ZVgTaSYzP8Cau99ncepjKcQ=\n=k9+l\n-----END PGP SIGNATURE-----", "payload": "tree 18acd2007af278a8745f559bf83e257dd6b02dbc\nparent a19aed222622129dda8e7bf36935d72f82654e54\nauthor Santiago Pastorino <spastorino@gmail.com> 1571602264 -0400\ncommitter Santiago Pastorino <spastorino@gmail.com> 1571751216 -0300\n\nIntern place projection\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "html_url": "https://github.com/rust-lang/rust/commit/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a19aed222622129dda8e7bf36935d72f82654e54", "url": "https://api.github.com/repos/rust-lang/rust/commits/a19aed222622129dda8e7bf36935d72f82654e54", "html_url": "https://github.com/rust-lang/rust/commit/a19aed222622129dda8e7bf36935d72f82654e54"}], "stats": {"total": 531, "additions": 346, "deletions": 185}, "files": [{"sha": "7db5dac3882d2342d472c6e3e22a94132ac7a3ab", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 47, "deletions": 29, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -15,8 +15,7 @@ use crate::ty::layout::VariantIdx;\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::subst::{Subst, SubstsRef};\n use crate::ty::{\n-    self, AdtDef, CanonicalUserTypeAnnotations, Region, Ty, TyCtxt,\n-    UserTypeAnnotationIndex,\n+    self, AdtDef, CanonicalUserTypeAnnotations, List, Region, Ty, TyCtxt, UserTypeAnnotationIndex,\n };\n \n use polonius_engine::Atom;\n@@ -1712,15 +1711,17 @@ impl Debug for Statement<'_> {\n /// A path to a value; something that can be evaluated without\n /// changing or disturbing program state.\n #[derive(\n-    Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, HashStable,\n+    Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, HashStable,\n )]\n pub struct Place<'tcx> {\n     pub base: PlaceBase<'tcx>,\n \n     /// projection out of a place (access a field, deref a pointer, etc)\n-    pub projection: Box<[PlaceElem<'tcx>]>,\n+    pub projection: &'tcx List<PlaceElem<'tcx>>,\n }\n \n+impl<'tcx> rustc_serialize::UseSpecializedDecodable for Place<'tcx> {}\n+\n #[derive(\n     Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, HashStable,\n )]\n@@ -1848,50 +1849,56 @@ pub struct PlaceRef<'a, 'tcx> {\n }\n \n impl<'tcx> Place<'tcx> {\n-    // FIXME change this back to a const when projection is a shared slice.\n-    //\n-    // pub const RETURN_PLACE: Place<'tcx> = Place {\n-    //     base: PlaceBase::Local(RETURN_PLACE),\n-    //     projection: &[],\n-    // };\n+    // FIXME change this to a const fn by also making List::empty a const fn.\n     pub fn return_place() -> Place<'tcx> {\n         Place {\n             base: PlaceBase::Local(RETURN_PLACE),\n-            projection: Box::new([]),\n+            projection: List::empty(),\n         }\n     }\n \n-    pub fn field(self, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {\n-        self.elem(ProjectionElem::Field(f, ty))\n+    pub fn field(self, f: Field, ty: Ty<'tcx>, tcx: TyCtxt<'tcx>) -> Place<'tcx> {\n+        self.elem(ProjectionElem::Field(f, ty), tcx)\n     }\n \n-    pub fn deref(self) -> Place<'tcx> {\n-        self.elem(ProjectionElem::Deref)\n+    pub fn deref(self, tcx: TyCtxt<'tcx>) -> Place<'tcx> {\n+        self.elem(ProjectionElem::Deref, tcx)\n     }\n \n-    pub fn downcast(self, adt_def: &'tcx AdtDef, variant_index: VariantIdx) -> Place<'tcx> {\n-        self.elem(ProjectionElem::Downcast(\n-            Some(adt_def.variants[variant_index].ident.name),\n-            variant_index,\n-        ))\n+    pub fn downcast(\n+        self,\n+        adt_def: &'tcx AdtDef,\n+        variant_index: VariantIdx,\n+        tcx: TyCtxt<'tcx>,\n+    ) -> Place<'tcx> {\n+        self.elem(\n+            ProjectionElem::Downcast(\n+                Some(adt_def.variants[variant_index].ident.name),\n+                variant_index,\n+            ),\n+            tcx,\n+        )\n     }\n \n-    pub fn downcast_unnamed(self, variant_index: VariantIdx) -> Place<'tcx> {\n-        self.elem(ProjectionElem::Downcast(None, variant_index))\n+    pub fn downcast_unnamed(self, variant_index: VariantIdx, tcx: TyCtxt<'tcx>) -> Place<'tcx> {\n+        self.elem(ProjectionElem::Downcast(None, variant_index), tcx)\n     }\n \n-    pub fn index(self, index: Local) -> Place<'tcx> {\n-        self.elem(ProjectionElem::Index(index))\n+    pub fn index(self, index: Local, tcx: TyCtxt<'tcx>) -> Place<'tcx> {\n+        self.elem(ProjectionElem::Index(index), tcx)\n     }\n \n-    pub fn elem(self, elem: PlaceElem<'tcx>) -> Place<'tcx> {\n-        // FIXME(spastorino): revisit this again once projection is not a Box<[T]> anymore\n-        let mut projection = self.projection.into_vec();\n+    /// This method copies `Place`'s projection, add an element and reintern it. Should not be used\n+    /// to build a full `Place` it's just a convenient way to grab a projection and modify it in\n+    /// flight.\n+    // FIXME: It may be a better idea to move all these methods to `PlaceBuilder`\n+    pub fn elem(self, elem: PlaceElem<'tcx>, tcx: TyCtxt<'tcx>) -> Place<'tcx> {\n+        let mut projection = self.projection.to_vec();\n         projection.push(elem);\n \n         Place {\n             base: self.base,\n-            projection: projection.into_boxed_slice(),\n+            projection: tcx.intern_place_elems(&projection),\n         }\n     }\n \n@@ -1939,7 +1946,7 @@ impl From<Local> for Place<'_> {\n     fn from(local: Local) -> Self {\n         Place {\n             base: local.into(),\n-            projection: Box::new([]),\n+            projection: List::empty(),\n         }\n     }\n }\n@@ -3190,6 +3197,17 @@ impl<'tcx> TypeFoldable<'tcx> for PlaceBase<'tcx> {\n     }\n }\n \n+impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<PlaceElem<'tcx>> {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        let v = self.iter().map(|t| t.fold_with(folder)).collect::<Vec<_>>();\n+        folder.tcx().intern_place_elems(&v)\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.iter().any(|t| t.visit_with(visitor))\n+    }\n+}\n+\n impl<'tcx> TypeFoldable<'tcx> for Static<'tcx> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         Static {"}, {"sha": "e5cf555b3fa8ebdc9228be660a7e7852a74fd122", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -784,6 +784,8 @@ macro_rules! make_mir_visitor {\n \n macro_rules! visit_place_fns {\n     (mut) => (\n+        fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;\n+\n         fn super_place(\n             &mut self,\n             place: &mut Place<'tcx>,\n@@ -793,19 +795,21 @@ macro_rules! visit_place_fns {\n             self.visit_place_base(&mut place.base, context, location);\n \n             if let Some(new_projection) = self.process_projection(&place.projection) {\n-                place.projection = new_projection;\n+                place.projection = self.tcx().intern_place_elems(&new_projection);\n             }\n         }\n \n         fn process_projection(\n             &mut self,\n             projection: &'a [PlaceElem<'tcx>],\n-        ) -> Option<Box<[PlaceElem<'tcx>]>> {\n+        ) -> Option<Vec<PlaceElem<'tcx>>> {\n             let mut projection = Cow::Borrowed(projection);\n \n             for i in 0..projection.len() {\n                 if let Some(elem) = projection.get(i) {\n                     if let Some(elem) = self.process_projection_elem(elem) {\n+                        // This converts the borrowed projection into `Cow::Owned(_)` and returns a\n+                        // clone of the projection so we can mutate and reintern later.\n                         let vec = projection.to_mut();\n                         vec[i] = elem;\n                     }\n@@ -814,7 +818,7 @@ macro_rules! visit_place_fns {\n \n             match projection {\n                 Cow::Borrowed(_) => None,\n-                Cow::Owned(vec) => Some(vec.into_boxed_slice()),\n+                Cow::Owned(vec) => Some(vec),\n             }\n         }\n "}, {"sha": "d5e7ac19263a0c13f2080b3d3a93f7619f790eb1", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -13,9 +13,9 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_serialize::{Decodable, Decoder, Encoder, Encodable, opaque};\n use std::hash::Hash;\n use std::intrinsics;\n-use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::{self, List, Ty, TyCtxt};\n use crate::ty::subst::SubstsRef;\n-use crate::mir::interpret::Allocation;\n+use crate::mir::{self, interpret::Allocation};\n use syntax_pos::Span;\n \n /// The shorthand encoding uses an enum's variant index `usize`\n@@ -218,6 +218,18 @@ where\n     Ok(tcx.mk_substs((0..len).map(|_| Decodable::decode(decoder)))?)\n }\n \n+#[inline]\n+pub fn decode_place<D>(decoder: &mut D) -> Result<mir::Place<'tcx>, D::Error>\n+where\n+    D: TyDecoder<'tcx>,\n+{\n+    let base: mir::PlaceBase<'tcx> = Decodable::decode(decoder)?;\n+    let len = decoder.read_usize()?;\n+    let projection: &'tcx List<mir::PlaceElem<'tcx>> =\n+        decoder.tcx().mk_place_elems((0..len).map(|_| Decodable::decode(decoder)))?;\n+    Ok(mir::Place { base, projection })\n+}\n+\n #[inline]\n pub fn decode_region<D>(decoder: &mut D) -> Result<ty::Region<'tcx>, D::Error>\n where\n@@ -413,6 +425,15 @@ macro_rules! implement_ty_decoder {\n                 }\n             }\n \n+            impl<$($typaram),*> SpecializedDecoder<$crate::mir::Place<'tcx>>\n+            for $DecoderName<$($typaram),*> {\n+                fn specialized_decode(\n+                    &mut self\n+                ) -> Result<$crate::mir::Place<'tcx>, Self::Error> {\n+                    decode_place(self)\n+                }\n+            }\n+\n             impl<$($typaram),*> SpecializedDecoder<ty::Region<'tcx>>\n             for $DecoderName<$($typaram),*> {\n                 fn specialized_decode(&mut self) -> Result<ty::Region<'tcx>, Self::Error> {"}, {"sha": "3269591c7455bbca67abb6d2246e536211c8bf28", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -2711,6 +2711,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         iter.intern_with(|xs| self.intern_substs(xs))\n     }\n \n+    pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>],\n+                          &'tcx List<PlaceElem<'tcx>>>>(self, iter: I) -> I::Output {\n+        iter.intern_with(|xs| self.intern_place_elems(xs))\n+    }\n+\n     pub fn mk_substs_trait(self,\n                      self_ty: Ty<'tcx>,\n                      rest: &[GenericArg<'tcx>])"}, {"sha": "36db68a3372eb9ef9a4afdfcb5498c3432637a32", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -707,10 +707,12 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             _ => drop_span,\n         };\n \n+        let root_place_projection = self.infcx.tcx.intern_place_elems(root_place.projection);\n+\n         if self.access_place_error_reported\n             .contains(&(Place {\n                 base: root_place.base.clone(),\n-                projection: root_place.projection.to_vec().into_boxed_slice(),\n+                projection: root_place_projection,\n             }, borrow_span))\n         {\n             debug!(\n@@ -723,7 +725,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         self.access_place_error_reported\n             .insert((Place {\n                 base: root_place.base.clone(),\n-                projection: root_place.projection.to_vec().into_boxed_slice(),\n+                projection: root_place_projection,\n             }, borrow_span));\n \n         if let StorageDeadOrDrop::Destructor(dropped_ty) ="}, {"sha": "d949c7e01aab730447d91c3c88b41463fbb92e23", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -1,5 +1,5 @@\n use rustc::ty::subst::SubstsRef;\n-use rustc::ty::{self, Ty, TypeFoldable};\n+use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::mir::{Body, Location, PlaceElem, Promoted};\n use rustc::mir::visit::{MutVisitor, TyContext};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n@@ -54,6 +54,10 @@ impl<'a, 'tcx> NLLVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.infcx.tcx\n+    }\n+\n     fn visit_ty(&mut self, ty: &mut Ty<'tcx>, ty_context: TyContext) {\n         debug!(\"visit_ty(ty={:?}, ty_context={:?})\", ty, ty_context);\n "}, {"sha": "8d2bef39bed4269fd65b0c8ed90a625c2bafe674", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -6,7 +6,7 @@ use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::hair::*;\n use rustc::mir::interpret::{PanicInfo::BoundsCheck};\n use rustc::mir::*;\n-use rustc::ty::{CanonicalUserTypeAnnotation, Ty, Variance};\n+use rustc::ty::{CanonicalUserTypeAnnotation, Ty, TyCtxt, Variance};\n \n use rustc_index::vec::Idx;\n \n@@ -23,10 +23,10 @@ struct PlaceBuilder<'tcx> {\n }\n \n impl PlaceBuilder<'tcx> {\n-    fn into_place(self) -> Place<'tcx> {\n+    fn into_place(self, tcx: TyCtxt<'tcx>) -> Place<'tcx> {\n         Place {\n             base: self.base,\n-            projection: self.projection.into_boxed_slice(),\n+            projection: tcx.intern_place_elems(&self.projection),\n         }\n     }\n \n@@ -73,7 +73,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         M: Mirror<'tcx, Output = Expr<'tcx>>,\n     {\n         let place_builder = unpack!(block = self.as_place_builder(block, expr));\n-        block.and(place_builder.into_place())\n+        block.and(place_builder.into_place(self.hir.tcx()))\n     }\n \n     /// This is used when constructing a compound `Place`, so that we can avoid creating\n@@ -96,7 +96,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         M: Mirror<'tcx, Output = Expr<'tcx>>,\n     {\n         let place_builder = unpack!(block = self.as_read_only_place_builder(block, expr));\n-        block.and(place_builder.into_place())\n+        block.and(place_builder.into_place(self.hir.tcx()))\n     }\n \n     /// This is used when constructing a compound `Place`, so that we can avoid creating\n@@ -165,7 +165,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     Mutability::Not,\n                 ));\n \n-                let slice = place_builder.clone().into_place();\n+                let slice = place_builder.clone().into_place(this.hir.tcx());\n                 // bounds check:\n                 let (len, lt) = (\n                     this.temp(usize_ty.clone(), expr_span),\n@@ -225,7 +225,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         }\n                     );\n \n-                    let place = place_builder.clone().into_place();\n+                    let place = place_builder.clone().into_place(this.hir.tcx());\n                     this.cfg.push(\n                         block,\n                         Statement {"}, {"sha": "916e919e399eb09f04ab212e9cb3bbd8d4b4c2b2", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -139,7 +139,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // initialize the box contents:\n                 unpack!(\n                     block = this.into(\n-                        &Place::from(result).deref(),\n+                        &Place::from(result).deref(this.hir.tcx()),\n                         block, value\n                     )\n                 );\n@@ -296,8 +296,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         .zip(field_types.into_iter())\n                         .map(|(n, ty)| match fields_map.get(&n) {\n                             Some(v) => v.clone(),\n-                            None => this.consume_by_copy_or_move(base.clone().field(n, ty)),\n-                        }).collect()\n+                            None => this.consume_by_copy_or_move(base.clone().field(\n+                                n,\n+                                ty,\n+                                this.hir.tcx(),\n+                            )),\n+                        })\n+                        .collect()\n                 } else {\n                     field_names\n                         .iter()\n@@ -397,8 +402,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let val_fld = Field::new(0);\n             let of_fld = Field::new(1);\n \n-            let val = result_value.clone().field(val_fld, ty);\n-            let of = result_value.field(of_fld, bool_ty);\n+            let val = result_value.clone().field(val_fld, ty, self.hir.tcx());\n+            let of = result_value.field(of_fld, bool_ty, self.hir.tcx());\n \n             let err = PanicInfo::Overflow(op);\n "}, {"sha": "634b9c61ec691a70db77cc904cfc86518cf83b93", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -235,7 +235,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     });\n                     let ptr_temp = Place::from(ptr_temp);\n                     let block = unpack!(this.into(&ptr_temp, block, ptr));\n-                    this.into(&ptr_temp.deref(), block, val)\n+                    this.into(&ptr_temp.deref(this.hir.tcx()), block, val)\n                 } else {\n                     let args: Vec<_> = args\n                         .into_iter()"}, {"sha": "667b37bbd80c83bf991f5120017c92f900cf34ba", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -948,7 +948,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                     fake_borrows.insert(Place {\n                         base: source.base.clone(),\n-                        projection: proj_base.to_vec().into_boxed_slice(),\n+                        projection: self.hir.tcx().intern_place_elems(proj_base),\n                     });\n                 }\n             }\n@@ -1488,7 +1488,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     BorrowKind::Shallow,\n                     Place {\n                         base: place.base.clone(),\n-                        projection: place.projection.to_vec().into_boxed_slice(),\n+                        projection: tcx.intern_place_elems(place.projection),\n                     },\n                 );\n                 self.cfg.push_assign("}, {"sha": "df97ad857481242f7e066af6a210e05ff3c4de2a", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -166,7 +166,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     }\n                 });\n                 if irrefutable {\n-                    let place = match_pair.place.downcast(adt_def, variant_index);\n+                    let place = match_pair.place.downcast(adt_def, variant_index, tcx);\n                     candidate.match_pairs.extend(self.field_match_pairs(place, subpatterns));\n                     Ok(())\n                 } else {\n@@ -191,7 +191,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n \n             PatKind::Deref { ref subpattern } => {\n-                let place = match_pair.place.deref();\n+                let place = match_pair.place.deref(tcx);\n                 candidate.match_pairs.push(MatchPair::new(place, subpattern));\n                 Ok(())\n             }"}, {"sha": "125d9e5eeb539dcfefb833f260298f40c853baa2", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -749,13 +749,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // `(x as Variant).0 @ P1` and `(x as Variant).1 @ P1`.\n         let elem = ProjectionElem::Downcast(\n             Some(adt_def.variants[variant_index].ident.name), variant_index);\n-        let downcast_place = match_pair.place.elem(elem); // `(x as Variant)`\n+        let downcast_place = match_pair.place.elem(elem, self.hir.tcx()); // `(x as Variant)`\n         let consequent_match_pairs =\n             subpatterns.iter()\n                        .map(|subpattern| {\n                            // e.g., `(x as Variant).0`\n                            let place = downcast_place.clone().field(subpattern.field,\n-                                                                      subpattern.pattern.ty);\n+                                                                    subpattern.pattern.ty,\n+                                                                    self.hir.tcx());\n                            // e.g., `(x as Variant).0 @ P1`\n                            MatchPair::new(place, &subpattern.pattern)\n                        });"}, {"sha": "c993dafe00e7cfbcae0ee12e8e611077aecbdae2", "filename": "src/librustc_mir/build/matches/util.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -13,7 +13,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         subpatterns.iter()\n                    .map(|fieldpat| {\n                        let place = place.clone().field(fieldpat.field,\n-                                                       fieldpat.pattern.ty);\n+                                                       fieldpat.pattern.ty,\n+                                                       self.hir.tcx());\n                        MatchPair::new(place, &fieldpat.pattern)\n                    })\n                    .collect()\n@@ -37,7 +38,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                           min_length,\n                           from_end: false,\n                       };\n-                      let place = place.clone().elem(elem);\n+                      let place = place.clone().elem(elem, self.hir.tcx());\n                       MatchPair::new(place, subpattern)\n                   })\n         );\n@@ -46,7 +47,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let subslice = place.clone().elem(ProjectionElem::Subslice {\n                 from: prefix.len() as u32,\n                 to: suffix.len() as u32\n-            });\n+            }, self.hir.tcx());\n             match_pairs.push(MatchPair::new(subslice, subslice_pat));\n         }\n \n@@ -60,7 +61,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                           min_length,\n                           from_end: true,\n                       };\n-                      let place = place.clone().elem(elem);\n+                      let place = place.clone().elem(elem, self.hir.tcx());\n                       MatchPair::new(place, subpattern)\n                   })\n         );"}, {"sha": "55da1e61f3c9ded0f1593b67438ca2eedc2c7f10", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -114,7 +114,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                         BorrowedContent {\n                             target_place: Place {\n                                 base: place.base.clone(),\n-                                projection: proj.to_vec().into_boxed_slice(),\n+                                projection: tcx.intern_place_elems(proj),\n                             },\n                         },\n                     ));\n@@ -172,7 +172,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                             Some(base),\n                             Place {\n                                 base: place.base.clone(),\n-                                projection: proj.to_vec().into_boxed_slice(),\n+                                projection: tcx.intern_place_elems(proj),\n                             },\n                         );\n                         ent.insert(path);\n@@ -274,7 +274,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                     // Box starts out uninitialized - need to create a separate\n                     // move-path for the interior so it will be separate from\n                     // the exterior.\n-                    self.create_move_path(&place.clone().deref());\n+                    self.create_move_path(&place.clone().deref(self.builder.tcx));\n                     self.gather_init(place.as_ref(), InitKind::Shallow);\n                 } else {\n                     self.gather_init(place.as_ref(), InitKind::Deep);"}, {"sha": "09c0b1ab7b965bd32daca0b823e3e698c3bb3f39", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -117,7 +117,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx\n \n     run_passes(tcx, &mut result, instance, None, MirPhase::Const, &[\n         &add_moves_for_packed_drops::AddMovesForPackedDrops,\n-        &no_landing_pads::NoLandingPads,\n+        &no_landing_pads::NoLandingPads::new(tcx),\n         &remove_noop_landing_pads::RemoveNoopLandingPads,\n         &simplify::SimplifyCfg::new(\"make_shim\"),\n         &add_call_guards::CriticalCallEdges,\n@@ -231,7 +231,7 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n                 tcx,\n                 param_env\n             };\n-            let dropee = dropee_ptr.deref();\n+            let dropee = dropee_ptr.deref(tcx);\n             let resume_block = elaborator.patch.resume_block();\n             elaborate_drops::elaborate_drop(\n                 &mut elaborator,\n@@ -312,7 +312,7 @@ fn build_clone_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, self_ty: Ty<'tcx>) -\n     let is_copy = self_ty.is_copy_modulo_regions(tcx, param_env, builder.span);\n \n     let dest = Place::return_place();\n-    let src = Place::from(Local::new(1+0)).deref();\n+    let src = Place::from(Local::new(1+0)).deref(tcx);\n \n     match self_ty.kind {\n         _ if is_copy => builder.copy_shim(),\n@@ -415,7 +415,7 @@ impl CloneShimBuilder<'tcx> {\n     }\n \n     fn copy_shim(&mut self) {\n-        let rcvr = Place::from(Local::new(1+0)).deref();\n+        let rcvr = Place::from(Local::new(1+0)).deref(self.tcx);\n         let ret_statement = self.make_statement(\n             StatementKind::Assign(\n                 box(\n@@ -561,8 +561,8 @@ impl CloneShimBuilder<'tcx> {\n         // BB #2\n         // `dest[i] = Clone::clone(src[beg])`;\n         // Goto #3 if ok, #5 if unwinding happens.\n-        let dest_field = dest.clone().index(beg);\n-        let src_field = src.index(beg);\n+        let dest_field = dest.clone().index(beg, self.tcx);\n+        let src_field = src.index(beg, self.tcx);\n         self.make_clone_call(dest_field, src_field, ty, BasicBlock::new(3),\n                              BasicBlock::new(5));\n \n@@ -616,7 +616,7 @@ impl CloneShimBuilder<'tcx> {\n         // BB #7 (cleanup)\n         // `drop(dest[beg])`;\n         self.block(vec![], TerminatorKind::Drop {\n-            location: dest.index(beg),\n+            location: dest.index(beg, self.tcx),\n             target: BasicBlock::new(8),\n             unwind: None,\n         }, true);\n@@ -648,9 +648,9 @@ impl CloneShimBuilder<'tcx> {\n         let mut previous_field = None;\n         for (i, ity) in tys.enumerate() {\n             let field = Field::new(i);\n-            let src_field = src.clone().field(field, ity);\n+            let src_field = src.clone().field(field, ity, self.tcx);\n \n-            let dest_field = dest.clone().field(field, ity);\n+            let dest_field = dest.clone().field(field, ity, self.tcx);\n \n             // #(2i + 1) is the cleanup block for the previous clone operation\n             let cleanup_block = self.block_index_offset(1);\n@@ -721,14 +721,14 @@ fn build_call_shim<'tcx>(\n \n     let rcvr = match rcvr_adjustment {\n         Adjustment::Identity => Operand::Move(rcvr_l),\n-        Adjustment::Deref => Operand::Copy(rcvr_l.deref()),\n+        Adjustment::Deref => Operand::Copy(rcvr_l.deref(tcx)),\n         Adjustment::DerefMove => {\n             // fn(Self, ...) -> fn(*mut Self, ...)\n             let arg_ty = local_decls[rcvr_arg].ty;\n             debug_assert!(tcx.generics_of(def_id).has_self && arg_ty == tcx.types.self_param);\n             local_decls[rcvr_arg].ty = tcx.mk_mut_ptr(arg_ty);\n \n-            Operand::Move(rcvr_l.deref())\n+            Operand::Move(rcvr_l.deref(tcx))\n         }\n         Adjustment::RefMut => {\n             // let rcvr = &mut rcvr;\n@@ -772,7 +772,7 @@ fn build_call_shim<'tcx>(\n     if let Some(untuple_args) = untuple_args {\n         args.extend(untuple_args.iter().enumerate().map(|(i, ity)| {\n             let arg_place = Place::from(Local::new(1+1));\n-            Operand::Move(arg_place.field(Field::new(i), *ity))\n+            Operand::Move(arg_place.field(Field::new(i), *ity, tcx))\n         }));\n     } else {\n         args.extend((1..sig.inputs().len()).map(|i| {\n@@ -901,6 +901,7 @@ pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> &Body<'_> {\n             )),\n         AggregateKind::Adt(adt_def, variant_index, substs, None, None),\n         source_info,\n+        tcx,\n     ).collect();\n \n     let start_block = BasicBlockData {"}, {"sha": "4fd4fe45cd4f135cb1f1161e34cb9a7c8670538a", "filename": "src/librustc_mir/transform/cleanup_post_borrowck.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -24,16 +24,22 @@ use crate::transform::{MirPass, MirSource};\n \n pub struct CleanupNonCodegenStatements;\n \n-pub struct DeleteNonCodegenStatements;\n+pub struct DeleteNonCodegenStatements<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+}\n \n impl<'tcx> MirPass<'tcx> for CleanupNonCodegenStatements {\n-    fn run_pass(&self, _tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n-        let mut delete = DeleteNonCodegenStatements;\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+        let mut delete = DeleteNonCodegenStatements { tcx };\n         delete.visit_body(body);\n     }\n }\n \n-impl<'tcx> MutVisitor<'tcx> for DeleteNonCodegenStatements {\n+impl<'tcx> MutVisitor<'tcx> for DeleteNonCodegenStatements<'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n     fn visit_statement(&mut self,\n                        statement: &mut Statement<'tcx>,\n                        location: Location) {"}, {"sha": "13097a2156167475e6a95fa8094da1d238631f6a", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -687,6 +687,10 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n }\n \n impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n     fn visit_constant(\n         &mut self,\n         constant: &mut Constant<'tcx>,"}, {"sha": "4c26feac4af79f1e5fe432cad92f50cd6fdcd21e", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -126,7 +126,8 @@ impl<'tcx> MirPass<'tcx> for CopyPropagation {\n                     }\n                 }\n \n-                changed = action.perform(body, &def_use_analysis, dest_local, location) || changed;\n+                changed =\n+                    action.perform(body, &def_use_analysis, dest_local, location, tcx) || changed;\n                 // FIXME(pcwalton): Update the use-def chains to delete the instructions instead of\n                 // regenerating the chains.\n                 break\n@@ -244,7 +245,8 @@ impl<'tcx> Action<'tcx> {\n                body: &mut Body<'tcx>,\n                def_use_analysis: &DefUseAnalysis,\n                dest_local: Local,\n-               location: Location)\n+               location: Location,\n+               tcx: TyCtxt<'tcx>)\n                -> bool {\n         match self {\n             Action::PropagateLocalCopy(src_local) => {\n@@ -268,7 +270,7 @@ impl<'tcx> Action<'tcx> {\n                 }\n \n                 // Replace all uses of the destination local with the source local.\n-                def_use_analysis.replace_all_defs_and_uses_with(dest_local, body, src_local);\n+                def_use_analysis.replace_all_defs_and_uses_with(dest_local, body, src_local, tcx);\n \n                 // Finally, zap the now-useless assignment instruction.\n                 debug!(\"  Deleting assignment\");\n@@ -292,7 +294,8 @@ impl<'tcx> Action<'tcx> {\n \n                 // Replace all uses of the destination local with the constant.\n                 let mut visitor = ConstantPropagationVisitor::new(dest_local,\n-                                                                  src_constant);\n+                                                                  src_constant,\n+                                                                  tcx);\n                 for dest_place_use in &dest_local_info.defs_and_uses {\n                     visitor.visit_location(body, dest_place_use.location)\n                 }\n@@ -324,21 +327,27 @@ impl<'tcx> Action<'tcx> {\n struct ConstantPropagationVisitor<'tcx> {\n     dest_local: Local,\n     constant: Constant<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n     uses_replaced: usize,\n }\n \n impl<'tcx> ConstantPropagationVisitor<'tcx> {\n-    fn new(dest_local: Local, constant: Constant<'tcx>)\n+    fn new(dest_local: Local, constant: Constant<'tcx>, tcx: TyCtxt<'tcx>)\n            -> ConstantPropagationVisitor<'tcx> {\n         ConstantPropagationVisitor {\n             dest_local,\n             constant,\n+            tcx,\n             uses_replaced: 0,\n         }\n     }\n }\n \n impl<'tcx> MutVisitor<'tcx> for ConstantPropagationVisitor<'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n     fn visit_operand(&mut self, operand: &mut Operand<'tcx>, location: Location) {\n         self.super_operand(operand, location);\n "}, {"sha": "cdde9e12edcbb37097aec269ba46714bd46c0714", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -45,6 +45,7 @@ impl<'tcx> MirPass<'tcx> for Deaggregator {\n                     }),\n                     *kind,\n                     source_info,\n+                    tcx,\n                 ))\n             });\n         }"}, {"sha": "b30e2de4ca0bcaa525084ae96edfca706e8dbfaa", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -23,6 +23,10 @@ impl EraseRegionsVisitor<'tcx> {\n }\n \n impl MutVisitor<'tcx> for EraseRegionsVisitor<'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n     fn visit_ty(&mut self, ty: &mut Ty<'tcx>, _: TyContext) {\n         *ty = self.tcx.erase_regions(ty);\n     }"}, {"sha": "51e4d34fb117437797a99a24e534339bbbc31cc4", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 48, "deletions": 22, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -74,12 +74,17 @@ use crate::util::liveness;\n \n pub struct StateTransform;\n \n-struct RenameLocalVisitor {\n+struct RenameLocalVisitor<'tcx> {\n     from: Local,\n     to: Local,\n+    tcx: TyCtxt<'tcx>,\n }\n \n-impl<'tcx> MutVisitor<'tcx> for RenameLocalVisitor {\n+impl<'tcx> MutVisitor<'tcx> for RenameLocalVisitor<'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n     fn visit_local(&mut self,\n                    local: &mut Local,\n                    _: PlaceContext,\n@@ -102,9 +107,15 @@ impl<'tcx> MutVisitor<'tcx> for RenameLocalVisitor {\n     }\n }\n \n-struct DerefArgVisitor;\n+struct DerefArgVisitor<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+}\n+\n+impl<'tcx> MutVisitor<'tcx> for DerefArgVisitor<'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n \n-impl<'tcx> MutVisitor<'tcx> for DerefArgVisitor {\n     fn visit_local(&mut self,\n                    local: &mut Local,\n                    _: PlaceContext,\n@@ -119,8 +130,8 @@ impl<'tcx> MutVisitor<'tcx> for DerefArgVisitor {\n         if place.base == PlaceBase::Local(self_arg()) {\n             replace_base(place, Place {\n                 base: PlaceBase::Local(self_arg()),\n-                projection: Box::new([ProjectionElem::Deref]),\n-            });\n+                projection: self.tcx().intern_place_elems(&vec![ProjectionElem::Deref]),\n+            }, self.tcx);\n         } else {\n             self.visit_place_base(&mut place.base, context, location);\n \n@@ -135,25 +146,34 @@ impl<'tcx> MutVisitor<'tcx> for DerefArgVisitor {\n \n struct PinArgVisitor<'tcx> {\n     ref_gen_ty: Ty<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n }\n \n impl<'tcx> MutVisitor<'tcx> for PinArgVisitor<'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n     fn visit_local(&mut self,\n                    local: &mut Local,\n                    _: PlaceContext,\n                    _: Location) {\n         assert_ne!(*local, self_arg());\n     }\n \n-    fn visit_place(&mut self,\n-                    place: &mut Place<'tcx>,\n-                    context: PlaceContext,\n-                    location: Location) {\n+    fn visit_place(&mut self, place: &mut Place<'tcx>, context: PlaceContext, location: Location) {\n         if place.base == PlaceBase::Local(self_arg()) {\n-            replace_base(place, Place {\n-                base: PlaceBase::Local(self_arg()),\n-                projection: Box::new([ProjectionElem::Field(Field::new(0), self.ref_gen_ty)]),\n-            });\n+            replace_base(\n+                place,\n+                Place {\n+                    base: PlaceBase::Local(self_arg()),\n+                    projection: self.tcx().intern_place_elems(&vec![ProjectionElem::Field(\n+                            Field::new(0),\n+                            self.ref_gen_ty,\n+                    )]),\n+                },\n+                self.tcx,\n+            );\n         } else {\n             self.visit_place_base(&mut place.base, context, location);\n \n@@ -166,13 +186,13 @@ impl<'tcx> MutVisitor<'tcx> for PinArgVisitor<'tcx> {\n     }\n }\n \n-fn replace_base(place: &mut Place<'tcx>, new_base: Place<'tcx>) {\n+fn replace_base<'tcx>(place: &mut Place<'tcx>, new_base: Place<'tcx>, tcx: TyCtxt<'tcx>) {\n     place.base = new_base.base;\n \n     let mut new_projection = new_base.projection.to_vec();\n     new_projection.append(&mut place.projection.to_vec());\n \n-    place.projection = new_projection.into_boxed_slice();\n+    place.projection = tcx.intern_place_elems(&new_projection);\n }\n \n fn self_arg() -> Local {\n@@ -226,13 +246,13 @@ impl TransformVisitor<'tcx> {\n     // Create a Place referencing a generator struct field\n     fn make_field(&self, variant_index: VariantIdx, idx: usize, ty: Ty<'tcx>) -> Place<'tcx> {\n         let self_place = Place::from(self_arg());\n-        let base = self_place.downcast_unnamed(variant_index);\n+        let base = self_place.downcast_unnamed(variant_index, self.tcx);\n         let mut projection = base.projection.to_vec();\n         projection.push(ProjectionElem::Field(Field::new(idx), ty));\n \n         Place {\n             base: base.base,\n-            projection: projection.into_boxed_slice(),\n+            projection: self.tcx.intern_place_elems(&projection),\n         }\n     }\n \n@@ -264,6 +284,10 @@ impl TransformVisitor<'tcx> {\n }\n \n impl MutVisitor<'tcx> for TransformVisitor<'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n     fn visit_local(&mut self,\n                    local: &mut Local,\n                    _: PlaceContext,\n@@ -280,7 +304,7 @@ impl MutVisitor<'tcx> for TransformVisitor<'tcx> {\n         if let PlaceBase::Local(l) = place.base {\n             // Replace an Local in the remap with a generator struct access\n             if let Some(&(ty, variant_index, idx)) = self.remap.get(&l) {\n-                replace_base(place, self.make_field(variant_index, idx, ty));\n+                replace_base(place, self.make_field(variant_index, idx, ty), self.tcx);\n             }\n         } else {\n             self.visit_place_base(&mut place.base, context, location);\n@@ -375,7 +399,7 @@ fn make_generator_state_argument_indirect<'tcx>(\n     body.local_decls.raw[1].ty = ref_gen_ty;\n \n     // Add a deref to accesses of the generator state\n-    DerefArgVisitor.visit_body(body);\n+    DerefArgVisitor { tcx }.visit_body(body);\n }\n \n fn make_generator_state_argument_pinned<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n@@ -390,12 +414,13 @@ fn make_generator_state_argument_pinned<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body\n     body.local_decls.raw[1].ty = pin_ref_gen_ty;\n \n     // Add the Pin field access to accesses of the generator state\n-    PinArgVisitor { ref_gen_ty }.visit_body(body);\n+    PinArgVisitor { ref_gen_ty, tcx }.visit_body(body);\n }\n \n fn replace_result_variable<'tcx>(\n     ret_ty: Ty<'tcx>,\n     body: &mut Body<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n ) -> Local {\n     let source_info = source_info(body);\n     let new_ret = LocalDecl {\n@@ -416,6 +441,7 @@ fn replace_result_variable<'tcx>(\n     RenameLocalVisitor {\n         from: RETURN_PLACE,\n         to: new_ret_local,\n+        tcx,\n     }.visit_body(body);\n \n     new_ret_local\n@@ -1182,7 +1208,7 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n \n         // We rename RETURN_PLACE which has type mir.return_ty to new_ret_local\n         // RETURN_PLACE then is a fresh unused local with type ret_ty.\n-        let new_ret_local = replace_result_variable(ret_ty, body);\n+        let new_ret_local = replace_result_variable(ret_ty, body, tcx);\n \n         // Extract locals which are live across suspension point into `layout`\n         // `remap` gives a mapping from local indices onto generator struct indices"}, {"sha": "c92025812f946f2676284cc94edc220c6946c158", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -461,7 +461,7 @@ impl Inliner<'tcx> {\n                     };\n                     caller_body[callsite.bb]\n                         .statements.push(stmt);\n-                    tmp.deref()\n+                    tmp.deref(self.tcx)\n                 } else {\n                     destination.0\n                 };\n@@ -481,6 +481,7 @@ impl Inliner<'tcx> {\n                     return_block,\n                     cleanup_block: cleanup,\n                     in_cleanup_block: false,\n+                    tcx: self.tcx,\n                 };\n \n \n@@ -562,6 +563,7 @@ impl Inliner<'tcx> {\n                     let tuple_field = Operand::Move(tuple.clone().field(\n                         Field::new(i),\n                         ty.expect_ty(),\n+                        tcx,\n                     ));\n \n                     // Spill to a local to make e.g., `tmp0`.\n@@ -638,6 +640,7 @@ struct Integrator<'a, 'tcx> {\n     return_block: BasicBlock,\n     cleanup_block: Option<BasicBlock>,\n     in_cleanup_block: bool,\n+    tcx: TyCtxt<'tcx>,\n }\n \n impl<'a, 'tcx> Integrator<'a, 'tcx> {\n@@ -665,6 +668,10 @@ impl<'a, 'tcx> Integrator<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n     fn visit_local(\n         &mut self,\n         local: &mut Local,"}, {"sha": "a567ed668bfa584058c0472aa612ae980d745c3f", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -29,29 +29,32 @@ impl<'tcx> MirPass<'tcx> for InstCombine {\n         };\n \n         // Then carry out those optimizations.\n-        MutVisitor::visit_body(&mut InstCombineVisitor { optimizations }, body);\n+        MutVisitor::visit_body(&mut InstCombineVisitor { optimizations, tcx }, body);\n     }\n }\n \n pub struct InstCombineVisitor<'tcx> {\n     optimizations: OptimizationList<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n }\n \n impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor<'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n     fn visit_rvalue(&mut self, rvalue: &mut Rvalue<'tcx>, location: Location) {\n         if self.optimizations.and_stars.remove(&location) {\n             debug!(\"replacing `&*`: {:?}\", rvalue);\n             let new_place = match rvalue {\n                 Rvalue::Ref(_, _, place) => {\n                     if let &[ref proj_l @ .., proj_r] = place.projection.as_ref() {\n-                        let new_projection = proj_l.to_vec().into_boxed_slice();\n-\n-                        place.projection = vec![proj_r.clone()].into_boxed_slice();\n+                        place.projection = self.tcx().intern_place_elems(&vec![proj_r.clone()]);\n \n                         Place {\n                             // Replace with dummy\n                             base: mem::replace(&mut place.base, PlaceBase::Local(Local::new(0))),\n-                            projection: new_projection,\n+                            projection: self.tcx().intern_place_elems(proj_l),\n                         }\n                     } else {\n                         unreachable!();"}, {"sha": "dbe6c7845926dcbe39097d3f5458be25b1ae3fa4", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -228,7 +228,7 @@ fn run_optimization_passes<'tcx>(\n ) {\n     run_passes(tcx, body, InstanceDef::Item(def_id), promoted, MirPhase::Optimized, &[\n         // Remove all things only needed by analysis\n-        &no_landing_pads::NoLandingPads,\n+        &no_landing_pads::NoLandingPads::new(tcx),\n         &simplify_branches::SimplifyBranches::new(\"initial\"),\n         &remove_noop_landing_pads::RemoveNoopLandingPads,\n         &cleanup_post_borrowck::CleanupNonCodegenStatements,\n@@ -238,7 +238,7 @@ fn run_optimization_passes<'tcx>(\n         // These next passes must be executed together\n         &add_call_guards::CriticalCallEdges,\n         &elaborate_drops::ElaborateDrops,\n-        &no_landing_pads::NoLandingPads,\n+        &no_landing_pads::NoLandingPads::new(tcx),\n         // AddMovesForPackedDrops needs to run after drop\n         // elaboration.\n         &add_moves_for_packed_drops::AddMovesForPackedDrops,\n@@ -257,7 +257,7 @@ fn run_optimization_passes<'tcx>(\n \n \n         // Optimizations begin.\n-        &uniform_array_move_out::RestoreSubsliceArrayMoveOut,\n+        &uniform_array_move_out::RestoreSubsliceArrayMoveOut::new(tcx),\n         &inline::Inline,\n \n         // Lowering generator control-flow and variables"}, {"sha": "fbd14d9ef61704006fe9c3f6258992c0e086c4d0", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -6,21 +6,33 @@ use rustc::mir::*;\n use rustc::mir::visit::MutVisitor;\n use crate::transform::{MirPass, MirSource};\n \n-pub struct NoLandingPads;\n+pub struct NoLandingPads<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+}\n+\n+impl<'tcx> NoLandingPads<'tcx> {\n+    pub fn new(tcx: TyCtxt<'tcx>) -> Self {\n+        NoLandingPads { tcx }\n+    }\n+}\n \n-impl<'tcx> MirPass<'tcx> for NoLandingPads {\n+impl<'tcx> MirPass<'tcx> for NoLandingPads<'tcx> {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         no_landing_pads(tcx, body)\n     }\n }\n \n pub fn no_landing_pads<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     if tcx.sess.no_landing_pads() {\n-        NoLandingPads.visit_body(body);\n+        NoLandingPads::new(tcx).visit_body(body);\n     }\n }\n \n-impl<'tcx> MutVisitor<'tcx> for NoLandingPads {\n+impl<'tcx> MutVisitor<'tcx> for NoLandingPads<'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n     fn visit_terminator_kind(&mut self,\n                         kind: &mut TerminatorKind<'tcx>,\n                         location: Location) {"}, {"sha": "7a9c489fa791e3faf1606ded4e5163e68a3ff3eb", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -17,7 +17,7 @@ use rustc::mir::*;\n use rustc::mir::visit::{PlaceContext, MutatingUseContext, MutVisitor, Visitor};\n use rustc::mir::traversal::ReversePostorder;\n use rustc::ty::subst::InternalSubsts;\n-use rustc::ty::TyCtxt;\n+use rustc::ty::{List, TyCtxt};\n use syntax_pos::Span;\n \n use rustc_index::vec::{IndexVec, Idx};\n@@ -321,7 +321,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                         ty,\n                         def_id,\n                     }),\n-                    projection: box [],\n+                    projection: List::empty(),\n                 }\n             };\n             let (blocks, local_decls) = self.source.basic_blocks_and_local_decls_mut();\n@@ -339,7 +339,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                                     &mut place.base,\n                                     promoted_place(ty, span).base,\n                                 ),\n-                                projection: box [],\n+                                projection: List::empty(),\n                             })\n                         }\n                         _ => bug!()\n@@ -396,6 +396,10 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n \n /// Replaces all temporaries with their promoted counterparts.\n impl<'a, 'tcx> MutVisitor<'tcx> for Promoter<'a, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n     fn visit_local(&mut self,\n                    local: &mut Local,\n                    _: PlaceContext,"}, {"sha": "1b90ea78c6450c353c996f01b2e11579a8417bc6", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -319,7 +319,7 @@ impl<'tcx> MirPass<'tcx> for SimplifyLocals {\n \n         let map = make_local_map(&mut body.local_decls, locals);\n         // Update references to all vars and tmps now\n-        LocalUpdater { map }.visit_body(body);\n+        LocalUpdater { map, tcx }.visit_body(body);\n         body.local_decls.shrink_to_fit();\n     }\n }\n@@ -374,11 +374,16 @@ impl<'a, 'tcx> Visitor<'tcx> for DeclMarker<'a, 'tcx> {\n     }\n }\n \n-struct LocalUpdater {\n+struct LocalUpdater<'tcx> {\n     map: IndexVec<Local, Option<Local>>,\n+    tcx: TyCtxt<'tcx>,\n }\n \n-impl<'tcx> MutVisitor<'tcx> for LocalUpdater {\n+impl<'tcx> MutVisitor<'tcx> for LocalUpdater<'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n     fn visit_basic_block_data(&mut self, block: BasicBlock, data: &mut BasicBlockData<'tcx>) {\n         // Remove unnecessary StorageLive and StorageDead annotations.\n         data.statements.retain(|stmt| {"}, {"sha": "e4c2f7d389b502d1a5f7f61cbcff7271ea47e634", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 35, "deletions": 32, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -116,16 +116,13 @@ impl<'a, 'tcx> UniformArrayMoveOutVisitor<'a, 'tcx> {\n                             min_length: size,\n                             from_end: false,\n                         });\n-                        self.patch.add_assign(location,\n-                                              Place::from(temp),\n-                                              Rvalue::Use(\n-                                                  Operand::Move(\n-                                                      Place {\n-                                                          base: base.clone(),\n-                                                          projection: projection.into_boxed_slice(),\n-                                                      }\n-                                                  )\n-                                              )\n+                        self.patch.add_assign(\n+                            location,\n+                            Place::from(temp),\n+                            Rvalue::Use(Operand::Move(Place {\n+                                base: base.clone(),\n+                                projection: self.tcx.intern_place_elems(&projection),\n+                            })),\n                         );\n                         temp\n                     }).collect();\n@@ -153,16 +150,13 @@ impl<'a, 'tcx> UniformArrayMoveOutVisitor<'a, 'tcx> {\n                         min_length: size,\n                         from_end: false,\n                     });\n-                    self.patch.add_assign(location,\n-                                          dst_place.clone(),\n-                                          Rvalue::Use(\n-                                              Operand::Move(\n-                                                  Place {\n-                                                      base: base.clone(),\n-                                                      projection: projection.into_boxed_slice(),\n-                                                  }\n-                                              )\n-                                          )\n+                    self.patch.add_assign(\n+                        location,\n+                        dst_place.clone(),\n+                        Rvalue::Use(Operand::Move(Place {\n+                            base: base.clone(),\n+                            projection: self.tcx.intern_place_elems(&projection),\n+                        })),\n                     );\n                 }\n                 _ => {}\n@@ -185,9 +179,11 @@ impl<'a, 'tcx> UniformArrayMoveOutVisitor<'a, 'tcx> {\n //\n // replaced by _10 = move _2[:-1];\n \n-pub struct RestoreSubsliceArrayMoveOut;\n+pub struct RestoreSubsliceArrayMoveOut<'tcx> {\n+    tcx: TyCtxt<'tcx>\n+}\n \n-impl<'tcx> MirPass<'tcx> for RestoreSubsliceArrayMoveOut {\n+impl<'tcx> MirPass<'tcx> for RestoreSubsliceArrayMoveOut<'tcx> {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n         let mut patch = MirPatch::new(body);\n         let param_env = tcx.param_env(src.def_id());\n@@ -229,7 +225,9 @@ impl<'tcx> MirPass<'tcx> for RestoreSubsliceArrayMoveOut {\n                                 None\n                             }\n                         });\n-                        Self::check_and_patch(*candidate, &items, opt_size, &mut patch, dst_place);\n+                        let restore_subslice = RestoreSubsliceArrayMoveOut { tcx };\n+                        restore_subslice\n+                            .check_and_patch(*candidate, &items, opt_size, &mut patch, dst_place);\n                     }\n                 }\n             }\n@@ -238,15 +236,20 @@ impl<'tcx> MirPass<'tcx> for RestoreSubsliceArrayMoveOut {\n     }\n }\n \n-impl RestoreSubsliceArrayMoveOut {\n+impl RestoreSubsliceArrayMoveOut<'tcx> {\n+    pub fn new(tcx: TyCtxt<'tcx>) -> Self {\n+        RestoreSubsliceArrayMoveOut { tcx }\n+    }\n+\n     // Checks that source has size, all locals are inited from same source place and\n     // indices is an integer interval. If all checks pass do the replacent.\n     // items are Vec<Option<LocalUse, index in source array, source place for init local>>\n-    fn check_and_patch<'tcx>(candidate: Location,\n-                             items: &[Option<(&LocalUse, u32, PlaceRef<'_, 'tcx>)>],\n-                             opt_size: Option<u64>,\n-                             patch: &mut MirPatch<'tcx>,\n-                             dst_place: &Place<'tcx>) {\n+    fn check_and_patch(&self,\n+                       candidate: Location,\n+                       items: &[Option<(&LocalUse, u32, PlaceRef<'_, 'tcx>)>],\n+                       opt_size: Option<u64>,\n+                       patch: &mut MirPatch<'tcx>,\n+                       dst_place: &Place<'tcx>) {\n         let opt_src_place = items.first().and_then(|x| *x).map(|x| x.2);\n \n         if opt_size.is_some() && items.iter().all(\n@@ -279,14 +282,14 @@ impl RestoreSubsliceArrayMoveOut {\n                 dst_place.clone(),\n                 Rvalue::Use(Operand::Move(Place {\n                     base: src_place.base.clone(),\n-                    projection: projection.into_boxed_slice(),\n+                    projection: self.tcx.intern_place_elems(&projection),\n                 })),\n             );\n         }\n     }\n \n-    fn try_get_item_source<'a, 'tcx>(local_use: &LocalUse,\n-                                     body: &'a Body<'tcx>) -> Option<(u32, PlaceRef<'a, 'tcx>)> {\n+    fn try_get_item_source<'a>(local_use: &LocalUse,\n+                               body: &'a Body<'tcx>) -> Option<(u32, PlaceRef<'a, 'tcx>)> {\n         if let Some(location) = local_use.first_use {\n             let block = &body[location.block];\n             if block.statements.len() > location.statement_index {"}, {"sha": "f972069b677e502bca44a03984b842a49b4edf5c", "filename": "src/librustc_mir/util/aggregate.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Futil%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Futil%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Faggregate.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -1,5 +1,5 @@\n use rustc::mir::*;\n-use rustc::ty::Ty;\n+use rustc::ty::{Ty, TyCtxt};\n use rustc::ty::layout::VariantIdx;\n use rustc_index::vec::Idx;\n \n@@ -17,6 +17,7 @@ pub fn expand_aggregate<'tcx>(\n     operands: impl Iterator<Item=(Operand<'tcx>, Ty<'tcx>)> + TrustedLen,\n     kind: AggregateKind<'tcx>,\n     source_info: SourceInfo,\n+    tcx: TyCtxt<'tcx>,\n ) -> impl Iterator<Item=Statement<'tcx>> + TrustedLen {\n     let mut set_discriminant = None;\n     let active_field_index = match kind {\n@@ -29,7 +30,7 @@ pub fn expand_aggregate<'tcx>(\n                     },\n                     source_info,\n                 });\n-                lhs = lhs.downcast(adt_def, variant_index);\n+                lhs = lhs.downcast(adt_def, variant_index, tcx);\n             }\n             active_field_index\n         }\n@@ -63,10 +64,10 @@ pub fn expand_aggregate<'tcx>(\n                 // FIXME(eddyb) `min_length` doesn't appear to be used.\n                 min_length: offset + 1,\n                 from_end: false\n-            })\n+            }, tcx)\n         } else {\n             let field = Field::new(active_field_index.unwrap_or(i));\n-            lhs.clone().field(field, ty)\n+            lhs.clone().field(field, ty, tcx)\n         };\n         Statement {\n             source_info,"}, {"sha": "725ec84ca62370682bac1276583acf0c7ce11bb6", "filename": "src/librustc_mir/util/def_use.rs", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fdef_use.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -2,6 +2,7 @@\n \n use rustc::mir::{Body, Local, Location, PlaceElem};\n use rustc::mir::visit::{PlaceContext, MutVisitor, Visitor};\n+use rustc::ty::TyCtxt;\n use rustc_index::vec::IndexVec;\n use std::mem;\n \n@@ -47,20 +48,26 @@ impl DefUseAnalysis {\n         &self.info[local]\n     }\n \n-    fn mutate_defs_and_uses(&self, local: Local, body: &mut Body<'_>, new_local: Local) {\n+    fn mutate_defs_and_uses(\n+        &self,\n+        local: Local,\n+        body: &mut Body<'tcx>,\n+        new_local: Local,\n+        tcx: TyCtxt<'tcx>,\n+    ) {\n         for place_use in &self.info[local].defs_and_uses {\n-            MutateUseVisitor::new(local,\n-                                  new_local,\n-                                  body).visit_location(body, place_use.location)\n+            MutateUseVisitor::new(local, new_local, body, tcx)\n+                .visit_location(body, place_use.location)\n         }\n     }\n \n     // FIXME(pcwalton): this should update the def-use chains.\n     pub fn replace_all_defs_and_uses_with(&self,\n                                           local: Local,\n-                                          body: &mut Body<'_>,\n-                                          new_local: Local) {\n-        self.mutate_defs_and_uses(local, body, new_local)\n+                                          body: &mut Body<'tcx>,\n+                                          new_local: Local,\n+                                          tcx: TyCtxt<'tcx>) {\n+        self.mutate_defs_and_uses(local, body, new_local, tcx)\n     }\n }\n \n@@ -114,21 +121,28 @@ impl Info {\n     }\n }\n \n-struct MutateUseVisitor {\n+struct MutateUseVisitor<'tcx> {\n     query: Local,\n     new_local: Local,\n+    tcx: TyCtxt<'tcx>,\n }\n \n-impl MutateUseVisitor {\n-    fn new(query: Local, new_local: Local, _: &Body<'_>) -> MutateUseVisitor {\n-        MutateUseVisitor {\n-            query,\n-            new_local,\n-        }\n+impl MutateUseVisitor<'tcx> {\n+    fn new(\n+        query: Local,\n+        new_local: Local,\n+        _: &Body<'tcx>,\n+        tcx: TyCtxt<'tcx>,\n+    ) -> MutateUseVisitor<'tcx> {\n+        MutateUseVisitor { query, new_local, tcx }\n     }\n }\n \n-impl MutVisitor<'_> for MutateUseVisitor {\n+impl MutVisitor<'tcx> for MutateUseVisitor<'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n     fn visit_local(&mut self,\n                     local: &mut Local,\n                     _context: PlaceContext,"}, {"sha": "4eb35022b59e19d0e3df154068445f5fe78612a9", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=d32c2865d64e53cdd1b716b2b8966e4d1a4bfa38", "patch": "@@ -206,7 +206,7 @@ where\n                 self.elaborator.param_env(),\n                 f.ty(self.tcx(), substs),\n             );\n-            (base_place.clone().field(field, field_ty), subpath)\n+            (base_place.clone().field(field, field_ty, self.tcx()), subpath)\n         }).collect()\n     }\n \n@@ -323,7 +323,7 @@ where\n         debug!(\"open_drop_for_tuple({:?}, {:?})\", self, tys);\n \n         let fields = tys.iter().enumerate().map(|(i, &ty)| {\n-            (self.place.clone().field(Field::new(i), ty),\n+            (self.place.clone().field(Field::new(i), ty, self.tcx()),\n              self.elaborator.field_subpath(self.path, Field::new(i)))\n         }).collect();\n \n@@ -334,7 +334,7 @@ where\n     fn open_drop_for_box(&mut self, adt: &'tcx ty::AdtDef, substs: SubstsRef<'tcx>) -> BasicBlock {\n         debug!(\"open_drop_for_box({:?}, {:?}, {:?})\", self, adt, substs);\n \n-        let interior = self.place.clone().deref();\n+        let interior = self.place.clone().deref(self.tcx());\n         let interior_path = self.elaborator.deref_subpath(self.path);\n \n         let succ = self.succ; // FIXME(#43234)\n@@ -413,7 +413,7 @@ where\n             if let Some(variant_path) = subpath {\n                 let base_place = self.place.clone().elem(\n                     ProjectionElem::Downcast(Some(adt.variants[variant_index].ident.name),\n-                                             variant_index));\n+                                             variant_index), self.tcx());\n                 let fields = self.move_paths_for_fields(\n                     &base_place,\n                     variant_path,\n@@ -586,15 +586,15 @@ where\n                 BorrowKind::Mut { allow_two_phase_borrow: false },\n                 Place {\n                     base: PlaceBase::Local(cur),\n-                    projection: Box::new([ProjectionElem::Deref]),\n+                    projection: self.tcx().intern_place_elems(&vec![ProjectionElem::Deref]),\n                 }\n              ),\n              Rvalue::BinaryOp(BinOp::Offset, move_(&Place::from(cur)), one))\n         } else {\n             (Rvalue::Ref(\n                  tcx.lifetimes.re_erased,\n                  BorrowKind::Mut { allow_two_phase_borrow: false },\n-                 self.place.clone().index(cur)),\n+                 self.place.clone().index(cur, self.tcx())),\n              Rvalue::BinaryOp(BinOp::Add, move_(&Place::from(cur)), one))\n         };\n \n@@ -627,7 +627,7 @@ where\n         let loop_block = self.elaborator.patch().new_block(loop_block);\n \n         self.elaborator.patch().patch_terminator(drop_block, TerminatorKind::Drop {\n-            location: ptr.clone().deref(),\n+            location: ptr.clone().deref(tcx),\n             target: loop_block,\n             unwind: unwind.into_option()\n         });\n@@ -653,7 +653,7 @@ where\n                     offset: i,\n                     min_length: size,\n                     from_end: false\n-                }),\n+                }, self.tcx()),\n                  self.elaborator.array_subpath(self.path, i, size))\n             }).collect();\n \n@@ -901,7 +901,7 @@ where\n         let args = adt.variants[VariantIdx::new(0)].fields.iter().enumerate().map(|(i, f)| {\n             let field = Field::new(i);\n             let field_ty = f.ty(self.tcx(), substs);\n-            Operand::Move(self.place.clone().field(field, field_ty))\n+            Operand::Move(self.place.clone().field(field, field_ty, self.tcx()))\n         }).collect();\n \n         let call = TerminatorKind::Call {"}]}