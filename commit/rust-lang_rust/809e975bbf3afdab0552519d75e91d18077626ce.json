{"sha": "809e975bbf3afdab0552519d75e91d18077626ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwOWU5NzViYmYzYWZkYWIwNTUyNTE5ZDc1ZTkxZDE4MDc3NjI2Y2U=", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2021-05-19T02:35:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-19T02:35:55Z"}, "message": "Rollup merge of #83767 - camelid:mangle-v0-fix, r=nikomatsakis\n\nFix v0 symbol mangling bug\n\nFixes #83611.\n\nr? ``@jackh726``", "tree": {"sha": "d2c0211842f98844b26bcbb2cbc9cec6110eddb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2c0211842f98844b26bcbb2cbc9cec6110eddb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/809e975bbf3afdab0552519d75e91d18077626ce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgpHmNCRBK7hj4Ov3rIwAAULgIAA3WrhNHZUWawRkforakEk6J\nVJBBRhloJc5kM2wAFkUuHkspW/MyHbGuxyXb46CjTlfpqcYUYF+fiyIB2Csmsreg\njHT89twbgC+TjGNgLZztY3yyvdVp7TuoN0PAumwSf3AIs+RyOVmCO7d+ssaIoMYT\niV3auPEsE1VeCA82/lOLAfWsYD4j7lm2DdcIFCjZ6JoZeGzI1pXqVmsQbxJAo3ym\nIuunLAHbaWcPS9zfgceljhxE2FGiWywBxNsQAWQAazZmnhW2OKmXE3mmIgtsyKW7\neT8Tv5q+D3XXPMgPGqUl0wt5qFRTEnxXX6j8DlfeLrQKnzr3ni1pqO97ERWr0Kc=\n=DpLb\n-----END PGP SIGNATURE-----\n", "payload": "tree d2c0211842f98844b26bcbb2cbc9cec6110eddb6\nparent 3c99dcd82dbe78079901bf84aead3ec1f167a813\nparent 83459081bacfe30a593fc3cc95c029b11ed67468\nauthor Jack Huey <31162821+jackh726@users.noreply.github.com> 1621391755 -0400\ncommitter GitHub <noreply@github.com> 1621391755 -0400\n\nRollup merge of #83767 - camelid:mangle-v0-fix, r=nikomatsakis\n\nFix v0 symbol mangling bug\n\nFixes #83611.\n\nr? ``@jackh726``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/809e975bbf3afdab0552519d75e91d18077626ce", "html_url": "https://github.com/rust-lang/rust/commit/809e975bbf3afdab0552519d75e91d18077626ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/809e975bbf3afdab0552519d75e91d18077626ce/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c99dcd82dbe78079901bf84aead3ec1f167a813", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c99dcd82dbe78079901bf84aead3ec1f167a813", "html_url": "https://github.com/rust-lang/rust/commit/3c99dcd82dbe78079901bf84aead3ec1f167a813"}, {"sha": "83459081bacfe30a593fc3cc95c029b11ed67468", "url": "https://api.github.com/repos/rust-lang/rust/commits/83459081bacfe30a593fc3cc95c029b11ed67468", "html_url": "https://github.com/rust-lang/rust/commit/83459081bacfe30a593fc3cc95c029b11ed67468"}], "stats": {"total": 151, "additions": 144, "deletions": 7}, "files": [{"sha": "a70b374fc6d21b8b4e236ed4ec07323f9d5c8ad6", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/809e975bbf3afdab0552519d75e91d18077626ce/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e975bbf3afdab0552519d75e91d18077626ce/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=809e975bbf3afdab0552519d75e91d18077626ce", "patch": "@@ -485,9 +485,39 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         mut self,\n         predicates: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n     ) -> Result<Self::DynExistential, Self::Error> {\n-        for predicate in predicates {\n-            self = self.in_binder(&predicate, |mut cx, predicate| {\n-                match predicate {\n+        // Okay, so this is a bit tricky. Imagine we have a trait object like\n+        // `dyn for<'a> Foo<'a, Bar = &'a ()>`. When we mangle this, the\n+        // output looks really close to the syntax, where the `Bar = &'a ()` bit\n+        // is under the same binders (`['a]`) as the `Foo<'a>` bit. However, we\n+        // actually desugar these into two separate `ExistentialPredicate`s. We\n+        // can't enter/exit the \"binder scope\" twice though, because then we\n+        // would mangle the binders twice. (Also, side note, we merging these\n+        // two is kind of difficult, because of potential HRTBs in the Projection\n+        // predicate.)\n+        //\n+        // Also worth mentioning: imagine that we instead had\n+        // `dyn for<'a> Foo<'a, Bar = &'a ()> + Send`. In this case, `Send` is\n+        // under the same binders as `Foo`. Currently, this doesn't matter,\n+        // because only *auto traits* are allowed other than the principal trait\n+        // and all auto traits don't have any generics. Two things could\n+        // make this not an \"okay\" mangling:\n+        // 1) Instead of mangling only *used*\n+        // bound vars, we want to mangle *all* bound vars (`for<'b> Send` is a\n+        // valid trait predicate);\n+        // 2) We allow multiple \"principal\" traits in the future, or at least\n+        // allow in any form another trait predicate that can take generics.\n+        //\n+        // Here we assume that predicates have the following structure:\n+        // [<Trait> [{<Projection>}]] [{<Auto>}]\n+        // Since any predicates after the first one shouldn't change the binders,\n+        // just put them all in the binders of the first.\n+        self = self.in_binder(&predicates[0], |mut cx, _| {\n+            for predicate in predicates.iter() {\n+                // It would be nice to be able to validate bound vars here, but\n+                // projections can actually include bound vars from super traits\n+                // because of HRTBs (only in the `Self` type). Also, auto traits\n+                // could have different bound vars *anyways*.\n+                match predicate.as_ref().skip_binder() {\n                     ty::ExistentialPredicate::Trait(trait_ref) => {\n                         // Use a type that can't appear in defaults of type parameters.\n                         let dummy_self = cx.tcx.mk_ty_infer(ty::FreshTy(0));\n@@ -504,9 +534,10 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n                         cx = cx.print_def_path(*def_id, &[])?;\n                     }\n                 }\n-                Ok(cx)\n-            })?;\n-        }\n+            }\n+            Ok(cx)\n+        })?;\n+\n         self.push(\"E\");\n         Ok(self)\n     }"}, {"sha": "ef1956210448da19a7918c5811df632f3e62f113", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/809e975bbf3afdab0552519d75e91d18077626ce/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e975bbf3afdab0552519d75e91d18077626ce/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=809e975bbf3afdab0552519d75e91d18077626ce", "patch": "@@ -1394,11 +1394,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let auto_trait_predicates = auto_traits.into_iter().map(|trait_ref| {\n             ty::Binder::dummy(ty::ExistentialPredicate::AutoTrait(trait_ref.trait_ref().def_id()))\n         });\n+        // N.b. principal, projections, auto traits\n+        // FIXME: This is actually wrong with multiple principals in regards to symbol mangling\n         let mut v = regular_trait_predicates\n-            .chain(auto_trait_predicates)\n             .chain(\n                 existential_projections.map(|x| x.map_bound(ty::ExistentialPredicate::Projection)),\n             )\n+            .chain(auto_trait_predicates)\n             .collect::<SmallVec<[_; 8]>>();\n         v.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));\n         v.dedup();"}, {"sha": "cea1a89d75746d77a8cb61fbd848fb9fd6571096", "filename": "src/test/ui/symbol-names/trait-objects.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/809e975bbf3afdab0552519d75e91d18077626ce/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e975bbf3afdab0552519d75e91d18077626ce/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.rs?ref=809e975bbf3afdab0552519d75e91d18077626ce", "patch": "@@ -0,0 +1,48 @@\n+// Ensure that trait objects don't include more than one binder. See #83611\n+\n+// build-fail\n+// revisions: v0\n+//[v0]compile-flags: -Z symbol-mangling-version=v0\n+//[v0]normalize-stderr-test: \"Cs.*?_\" -> \"CRATE_HASH\"\n+//[v0]normalize-stderr-test: \"core\\[.*?\\]\" -> \"core[HASH]\"\n+\n+#![feature(rustc_attrs)]\n+\n+trait Bar {\n+    fn method(&self) {}\n+}\n+\n+impl Bar for &dyn FnMut(&u8) {\n+    #[rustc_symbol_name]\n+    //[v0]~^ ERROR symbol-name\n+    //[v0]~| ERROR demangling\n+    //[v0]~| ERROR demangling-alt\n+    fn method(&self) {}\n+}\n+\n+trait Foo {\n+    fn method(&self) {}\n+}\n+\n+impl Foo for &(dyn FnMut(&u8) + for<'b> Send) {\n+    #[rustc_symbol_name]\n+    //[v0]~^ ERROR symbol-name\n+    //[v0]~| ERROR demangling\n+    //[v0]~| ERROR demangling-alt\n+    fn method(&self) {}\n+}\n+\n+trait Baz {\n+    fn method(&self) {}\n+}\n+\n+impl Baz for &(dyn for<'b> Send + FnMut(&u8)) {\n+    #[rustc_symbol_name]\n+    //[v0]~^ ERROR symbol-name\n+    //[v0]~| ERROR demangling\n+    //[v0]~| ERROR demangling-alt\n+    fn method(&self) {}\n+}\n+\n+fn main() {\n+}"}, {"sha": "2b09318f06c74806386f6f668cc805dfd1a74c2f", "filename": "src/test/ui/symbol-names/trait-objects.v0.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/809e975bbf3afdab0552519d75e91d18077626ce/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/809e975bbf3afdab0552519d75e91d18077626ce/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.v0.stderr?ref=809e975bbf3afdab0552519d75e91d18077626ce", "patch": "@@ -0,0 +1,56 @@\n+error: symbol-name(_RNvXCRATE_HASH13trait_objectsRDG_INtNtNtCRATE_HASH4core3ops8function5FnMutTRL0_hEEp6OutputuEL_NtB2_3Bar6method)\n+  --> $DIR/trait-objects.rs:16:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> as trait_objects[17891616a171812d]::Bar>::method)\n+  --> $DIR/trait-objects.rs:16:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<&dyn for<'a> core::ops::function::FnMut<(&'a u8,), Output = ()> as trait_objects::Bar>::method)\n+  --> $DIR/trait-objects.rs:16:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RNvXs_CRATE_HASH13trait_objectsRDG_INtNtNtCRATE_HASH4core3ops8function5FnMutTRL0_hEEp6OutputuNtNtBI_6marker4SendEL_NtB4_3Foo6method)\n+  --> $DIR/trait-objects.rs:28:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> + core[HASH]::marker::Send as trait_objects[17891616a171812d]::Foo>::method)\n+  --> $DIR/trait-objects.rs:28:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<&dyn for<'a> core::ops::function::FnMut<(&'a u8,), Output = ()> + core::marker::Send as trait_objects::Foo>::method)\n+  --> $DIR/trait-objects.rs:28:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RNvXs0_CRATE_HASH13trait_objectsRDG_INtNtNtCRATE_HASH4core3ops8function5FnMutTRL0_hEEp6OutputuNtNtBJ_6marker4SendEL_NtB5_3Baz6method)\n+  --> $DIR/trait-objects.rs:40:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> + core[HASH]::marker::Send as trait_objects[17891616a171812d]::Baz>::method)\n+  --> $DIR/trait-objects.rs:40:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<&dyn for<'a> core::ops::function::FnMut<(&'a u8,), Output = ()> + core::marker::Send as trait_objects::Baz>::method)\n+  --> $DIR/trait-objects.rs:40:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 9 previous errors\n+"}]}