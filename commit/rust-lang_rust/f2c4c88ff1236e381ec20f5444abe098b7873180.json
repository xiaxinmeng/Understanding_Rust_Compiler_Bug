{"sha": "f2c4c88ff1236e381ec20f5444abe098b7873180", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyYzRjODhmZjEyMzZlMzgxZWMyMGY1NDQ0YWJlMDk4Yjc4NzMxODA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-15T11:16:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-15T11:16:47Z"}, "message": "auto merge of #14174 : stepancheg/rust/once, r=alexcrichton\n\nSubmitting PR again, because I cannot reopen #13349, and github does not attach new patch to that PR. \r\n\r\n=======\r\n\r\nOptimize `Once::doit`: perform optimistic check that initializtion is\r\nalready completed.  `load` is much cheaper than `fetch_add` at least\r\non x86_64.\r\n\r\nVerified with this test:\r\n\r\n```\r\nstatic mut o: one::Once = one::ONCE_INIT;\r\nunsafe {\r\n    loop {\r\n        let start = time::precise_time_ns();\r\n        let iters = 50000000u64;\r\n        for _ in range(0, iters) {\r\n            o.doit(|| { println!(\"once!\"); });\r\n        }\r\n        let end = time::precise_time_ns();\r\n        let ps_per_iter = 1000 * (end - start) / iters;\r\n        println!(\"{} ps per iter\", ps_per_iter);\r\n\r\n        // confuse the optimizer\r\n        o.doit(|| { println!(\"once!\"); });\r\n    }\r\n}\r\n```\r\n\r\nTest executed on Mac, Intel Core i7 2GHz. Result is:\r\n* 20ns per iteration without patch\r\n*  4ns per iteration with this patch applied\r\n\r\nOnce.doit could be even faster (800ps per iteration), if `doit` function\r\nwas split into a pair of `doit`/`doit_slow`, and `doit` marked as\r\n`#[inline]` like this:\r\n\r\n```\r\n#[inline(always)]\r\npub fn doit(&self, f: ||) {\r\n    if self.cnt.load(atomics::SeqCst) < 0 {\r\n        return\r\n    }\r\n\r\n    self.doit_slow(f);\r\n}\r\n\r\nfn doit_slow(&self, f: ||) { ... }\r\n```", "tree": {"sha": "b99c9651748ee458a929e2e7a0b9d21230a1d9c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b99c9651748ee458a929e2e7a0b9d21230a1d9c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2c4c88ff1236e381ec20f5444abe098b7873180", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2c4c88ff1236e381ec20f5444abe098b7873180", "html_url": "https://github.com/rust-lang/rust/commit/f2c4c88ff1236e381ec20f5444abe098b7873180", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2c4c88ff1236e381ec20f5444abe098b7873180/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fedffa785eb1def61d012e8e614d562afaf19a6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fedffa785eb1def61d012e8e614d562afaf19a6e", "html_url": "https://github.com/rust-lang/rust/commit/fedffa785eb1def61d012e8e614d562afaf19a6e"}, {"sha": "f853cf79b568fdffe83729aad4a43cb3c9ff3c92", "url": "https://api.github.com/repos/rust-lang/rust/commits/f853cf79b568fdffe83729aad4a43cb3c9ff3c92", "html_url": "https://github.com/rust-lang/rust/commit/f853cf79b568fdffe83729aad4a43cb3c9ff3c92"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "eb919198708096a4ae96c8a44e7739a1c070bf8e", "filename": "src/libsync/one.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2c4c88ff1236e381ec20f5444abe098b7873180/src%2Flibsync%2Fone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c4c88ff1236e381ec20f5444abe098b7873180/src%2Flibsync%2Fone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fone.rs?ref=f2c4c88ff1236e381ec20f5444abe098b7873180", "patch": "@@ -64,6 +64,11 @@ impl Once {\n     /// When this function returns, it is guaranteed that some initialization\n     /// has run and completed (it may not be the closure specified).\n     pub fn doit(&self, f: ||) {\n+        // Optimize common path: load is much cheaper than fetch_add.\n+        if self.cnt.load(atomics::SeqCst) < 0 {\n+            return\n+        }\n+\n         // Implementation-wise, this would seem like a fairly trivial primitive.\n         // The stickler part is where our mutexes currently require an\n         // allocation, and usage of a `Once` should't leak this allocation."}]}