{"sha": "b171d0ef7b68fed961597d38e6a474d748243987", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNzFkMGVmN2I2OGZlZDk2MTU5N2QzOGU2YTQ3NGQ3NDgyNDM5ODc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-28T09:12:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-28T09:12:38Z"}, "message": "auto merge of #5159 : brson/rust/rtcall, r=brson", "tree": {"sha": "38cc63a12ae9aff6edbfc4a9b206d8152a5fccfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38cc63a12ae9aff6edbfc4a9b206d8152a5fccfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b171d0ef7b68fed961597d38e6a474d748243987", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b171d0ef7b68fed961597d38e6a474d748243987", "html_url": "https://github.com/rust-lang/rust/commit/b171d0ef7b68fed961597d38e6a474d748243987", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b171d0ef7b68fed961597d38e6a474d748243987/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c705440ee3f98a01c0e840202f320ed7998221d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c705440ee3f98a01c0e840202f320ed7998221d6", "html_url": "https://github.com/rust-lang/rust/commit/c705440ee3f98a01c0e840202f320ed7998221d6"}, {"sha": "2f858de1c39f3fd8bdc77a6517e12a6458c54f03", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f858de1c39f3fd8bdc77a6517e12a6458c54f03", "html_url": "https://github.com/rust-lang/rust/commit/2f858de1c39f3fd8bdc77a6517e12a6458c54f03"}], "stats": {"total": 80, "additions": 37, "deletions": 43}, "files": [{"sha": "6912d6d995b8f8f9644bcbbedf05bafa24acf8f9", "filename": "src/libcore/cleanup.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b171d0ef7b68fed961597d38e6a474d748243987/src%2Flibcore%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b171d0ef7b68fed961597d38e6a474d748243987/src%2Flibcore%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcleanup.rs?ref=b171d0ef7b68fed961597d38e6a474d748243987", "patch": "@@ -154,7 +154,7 @@ fn debug_mem() -> bool {\n #[cfg(notest)]\n #[lang=\"annihilate\"]\n pub unsafe fn annihilate() {\n-    use rt::rt_free;\n+    use rt::local_free;\n     use io::WriterUtil;\n     use io;\n     use libc;\n@@ -192,7 +192,7 @@ pub unsafe fn annihilate() {\n             stats.n_bytes_freed +=\n                 (*((*box).header.type_desc)).size\n                 + sys::size_of::<BoxRepr>();\n-            rt_free(transmute(box));\n+            local_free(transmute(box));\n         }\n     }\n "}, {"sha": "5d0bad3ceb3c29117bf3b4477ba573b62b3acb33", "filename": "src/libcore/rt.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b171d0ef7b68fed961597d38e6a474d748243987/src%2Flibcore%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b171d0ef7b68fed961597d38e6a474d748243987/src%2Flibcore%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt.rs?ref=b171d0ef7b68fed961597d38e6a474d748243987", "patch": "@@ -36,60 +36,54 @@ pub extern mod rustrt {\n     unsafe fn rust_upcall_free(ptr: *c_char);\n }\n \n-#[rt(fail_)]\n #[lang=\"fail_\"]\n-pub fn rt_fail_(expr: *c_char, file: *c_char, line: size_t) -> ! {\n+pub fn fail_(expr: *c_char, file: *c_char, line: size_t) -> ! {\n     sys::begin_unwind_(expr, file, line);\n }\n \n-#[rt(fail_bounds_check)]\n #[lang=\"fail_bounds_check\"]\n-pub unsafe fn rt_fail_bounds_check(file: *c_char, line: size_t,\n-                                   index: size_t, len: size_t) {\n+pub unsafe fn fail_bounds_check(file: *c_char, line: size_t,\n+                                index: size_t, len: size_t) {\n     let msg = fmt!(\"index out of bounds: the len is %d but the index is %d\",\n                     len as int, index as int);\n     do str::as_buf(msg) |p, _len| {\n-        rt_fail_(p as *c_char, file, line);\n+        fail_(p as *c_char, file, line);\n     }\n }\n \n-pub unsafe fn rt_fail_borrowed() {\n+pub unsafe fn fail_borrowed() {\n     let msg = \"borrowed\";\n     do str::as_buf(msg) |msg_p, _| {\n         do str::as_buf(\"???\") |file_p, _| {\n-            rt_fail_(msg_p as *c_char, file_p as *c_char, 0);\n+            fail_(msg_p as *c_char, file_p as *c_char, 0);\n         }\n     }\n }\n \n // FIXME #4942: Make these signatures agree with exchange_alloc's signatures\n-#[rt(exchange_malloc)]\n #[lang=\"exchange_malloc\"]\n-pub unsafe fn rt_exchange_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n+pub unsafe fn exchange_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n     transmute(exchange_alloc::malloc(transmute(td), transmute(size)))\n }\n \n // NB: Calls to free CANNOT be allowed to fail, as throwing an exception from\n // inside a landing pad may corrupt the state of the exception handler. If a\n // problem occurs, call exit instead.\n-#[rt(exchange_free)]\n #[lang=\"exchange_free\"]\n-pub unsafe fn rt_exchange_free(ptr: *c_char) {\n+pub unsafe fn exchange_free(ptr: *c_char) {\n     exchange_alloc::free(transmute(ptr))\n }\n \n-#[rt(malloc)]\n #[lang=\"malloc\"]\n-pub unsafe fn rt_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n+pub unsafe fn local_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n     return rustrt::rust_upcall_malloc(td, size);\n }\n \n // NB: Calls to free CANNOT be allowed to fail, as throwing an exception from\n // inside a landing pad may corrupt the state of the exception handler. If a\n // problem occurs, call exit instead.\n-#[rt(free)]\n #[lang=\"free\"]\n-pub unsafe fn rt_free(ptr: *c_char) {\n+pub unsafe fn local_free(ptr: *c_char) {\n     rustrt::rust_upcall_free(ptr);\n }\n \n@@ -112,7 +106,7 @@ pub unsafe fn return_to_mut(a: *u8) {\n pub unsafe fn check_not_borrowed(a: *u8) {\n     let a: *mut BoxRepr = transmute(a);\n     if ((*a).header.ref_count & FROZEN_BIT) != 0 {\n-        rt_fail_borrowed();\n+        fail_borrowed();\n     }\n }\n "}, {"sha": "8ed85b8f42196be5cc633e965bcadcea4845ab56", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b171d0ef7b68fed961597d38e6a474d748243987/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b171d0ef7b68fed961597d38e6a474d748243987/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=b171d0ef7b68fed961597d38e6a474d748243987", "patch": "@@ -1054,7 +1054,7 @@ pub fn compare_values(cx: block,\n             let scratch_rhs = alloca(cx, val_ty(rhs));\n             Store(cx, rhs, scratch_rhs);\n             let did = cx.tcx().lang_items.uniq_str_eq_fn();\n-            let bcx = callee::trans_rtcall_or_lang_call(cx, did,\n+            let bcx = callee::trans_lang_call(cx, did,\n                                                         ~[scratch_lhs,\n                                                           scratch_rhs],\n                                                         expr::SaveIn(\n@@ -1069,7 +1069,7 @@ pub fn compare_values(cx: block,\n             let scratch_result = scratch_datum(cx, ty::mk_bool(cx.tcx()),\n                                                false);\n             let did = cx.tcx().lang_items.str_eq_fn();\n-            let bcx = callee::trans_rtcall_or_lang_call(cx, did,\n+            let bcx = callee::trans_lang_call(cx, did,\n                                                         ~[lhs, rhs],\n                                                         expr::SaveIn(\n                                                          scratch_result.val));"}, {"sha": "0e0b382869d7409f223be561a9bc46c45d9a461b", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b171d0ef7b68fed961597d38e6a474d748243987/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b171d0ef7b68fed961597d38e6a474d748243987/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=b171d0ef7b68fed961597d38e6a474d748243987", "patch": "@@ -307,7 +307,7 @@ pub fn malloc_raw_dyn(bcx: block,\n     // Allocate space:\n     let tydesc = PointerCast(bcx, static_ti.tydesc, T_ptr(T_i8()));\n     let rval = alloca(bcx, T_ptr(T_i8()));\n-    let bcx = callee::trans_rtcall_or_lang_call(\n+    let bcx = callee::trans_lang_call(\n         bcx,\n         langcall,\n         ~[tydesc, size],"}, {"sha": "42542d79f39b2fc826a0a90d70bbb7b292338d3a", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b171d0ef7b68fed961597d38e6a474d748243987/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b171d0ef7b68fed961597d38e6a474d748243987/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=b171d0ef7b68fed961597d38e6a474d748243987", "patch": "@@ -332,11 +332,11 @@ pub fn trans_method_call(in_cx: block,\n         DontAutorefArg)\n }\n \n-pub fn trans_rtcall_or_lang_call(bcx: block,\n-                                 did: ast::def_id,\n-                                 args: &[ValueRef],\n-                                 dest: expr::Dest)\n-                              -> block {\n+pub fn trans_lang_call(bcx: block,\n+                       did: ast::def_id,\n+                       args: &[ValueRef],\n+                       dest: expr::Dest)\n+    -> block {\n     let fty = if did.crate == ast::local_crate {\n         ty::node_id_to_type(bcx.ccx().tcx, did.node)\n     } else {\n@@ -349,12 +349,12 @@ pub fn trans_rtcall_or_lang_call(bcx: block,\n         ArgVals(args), dest, DontAutorefArg);\n }\n \n-pub fn trans_rtcall_or_lang_call_with_type_params(bcx: block,\n-                                                  did: ast::def_id,\n-                                                  args: &[ValueRef],\n-                                                  type_params: ~[ty::t],\n-                                                  dest: expr::Dest)\n-                                               -> block {\n+pub fn trans_lang_call_with_type_params(bcx: block,\n+                                        did: ast::def_id,\n+                                        args: &[ValueRef],\n+                                        type_params: ~[ty::t],\n+                                        dest: expr::Dest)\n+    -> block {\n     let fty;\n     if did.crate == ast::local_crate {\n         fty = ty::node_id_to_type(bcx.tcx(), did.node);"}, {"sha": "40407fbf52baad772f4a7a6a36def0dc1082a628", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b171d0ef7b68fed961597d38e6a474d748243987/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b171d0ef7b68fed961597d38e6a474d748243987/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=b171d0ef7b68fed961597d38e6a474d748243987", "patch": "@@ -500,7 +500,7 @@ pub fn make_opaque_cbox_take_glue(\n         // Allocate memory, update original ptr, and copy existing data\n         let opaque_tydesc = PointerCast(bcx, tydesc, T_ptr(T_i8()));\n         let rval = alloca(bcx, T_ptr(T_i8()));\n-        let bcx = callee::trans_rtcall_or_lang_call(\n+        let bcx = callee::trans_lang_call(\n             bcx,\n             bcx.tcx().lang_items.exchange_malloc_fn(),\n             ~[opaque_tydesc, sz],"}, {"sha": "566b2689f2e46bdf8e946ae7bd2e4045479b7cfa", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b171d0ef7b68fed961597d38e6a474d748243987/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b171d0ef7b68fed961597d38e6a474d748243987/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=b171d0ef7b68fed961597d38e6a474d748243987", "patch": "@@ -445,7 +445,7 @@ pub fn add_clean_frozen_root(bcx: block, val: ValueRef, t: ty::t) {\n     do in_scope_cx(bcx) |scope_info| {\n         scope_info.cleanups.push(\n             clean_temp(val, |bcx| {\n-                let bcx = callee::trans_rtcall_or_lang_call(\n+                let bcx = callee::trans_lang_call(\n                     bcx,\n                     bcx.tcx().lang_items.return_to_mut_fn(),\n                     ~["}, {"sha": "70321d50f3faabaf9e6964711fca82b2f20c248f", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b171d0ef7b68fed961597d38e6a474d748243987/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b171d0ef7b68fed961597d38e6a474d748243987/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=b171d0ef7b68fed961597d38e6a474d748243987", "patch": "@@ -216,7 +216,7 @@ pub fn trans_log(log_ex: @ast::expr,\n             // Call the polymorphic log function\n             let val = val_datum.to_ref_llval(bcx);\n             let did = bcx.tcx().lang_items.log_type_fn();\n-            let bcx = callee::trans_rtcall_or_lang_call_with_type_params(\n+            let bcx = callee::trans_lang_call_with_type_params(\n                 bcx, did, ~[level, val], ~[val_datum.ty], expr::Ignore);\n             bcx\n         }\n@@ -384,7 +384,7 @@ fn trans_fail_value(bcx: block,\n     let V_str = PointerCast(bcx, V_fail_str, T_ptr(T_i8()));\n     let V_filename = PointerCast(bcx, V_filename, T_ptr(T_i8()));\n     let args = ~[V_str, V_filename, C_int(ccx, V_line)];\n-    let bcx = callee::trans_rtcall_or_lang_call(\n+    let bcx = callee::trans_lang_call(\n         bcx, bcx.tcx().lang_items.fail_fn(), args, expr::Ignore);\n     Unreachable(bcx);\n     return bcx;\n@@ -401,7 +401,7 @@ pub fn trans_fail_bounds_check(bcx: block, sp: span,\n     let filename = PointerCast(bcx, filename_cstr, T_ptr(T_i8()));\n \n     let args = ~[filename, line, index, len];\n-    let bcx = callee::trans_rtcall_or_lang_call(\n+    let bcx = callee::trans_lang_call(\n         bcx, bcx.tcx().lang_items.fail_bounds_check_fn(), args, expr::Ignore);\n     Unreachable(bcx);\n     return bcx;"}, {"sha": "c93ab056de0ee5a335e87b9b54b7b3f87440fbdc", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b171d0ef7b68fed961597d38e6a474d748243987/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b171d0ef7b68fed961597d38e6a474d748243987/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=b171d0ef7b68fed961597d38e6a474d748243987", "patch": "@@ -544,7 +544,7 @@ pub impl Datum {\n \n         // If we need to freeze the box, do that now.\n         if root_info.freezes {\n-            callee::trans_rtcall_or_lang_call(\n+            callee::trans_lang_call(\n                 bcx,\n                 bcx.tcx().lang_items.borrow_as_imm_fn(),\n                 ~[\n@@ -566,7 +566,7 @@ pub impl Datum {\n             ByRef => Load(bcx, self.val),\n         };\n \n-        callee::trans_rtcall_or_lang_call(\n+        callee::trans_lang_call(\n             bcx,\n             bcx.tcx().lang_items.check_not_borrowed_fn(),\n             ~[ PointerCast(bcx, llval, T_ptr(T_i8())) ],"}, {"sha": "bcb22022d46a3a1e85f12db1db179af55c5f7002", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b171d0ef7b68fed961597d38e6a474d748243987/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b171d0ef7b68fed961597d38e6a474d748243987/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=b171d0ef7b68fed961597d38e6a474d748243987", "patch": "@@ -30,7 +30,7 @@ use core::str;\n \n pub fn trans_free(cx: block, v: ValueRef) -> block {\n     let _icx = cx.insn_ctxt(\"trans_free\");\n-    callee::trans_rtcall_or_lang_call(\n+    callee::trans_lang_call(\n         cx,\n         cx.tcx().lang_items.free_fn(),\n         ~[PointerCast(cx, v, T_ptr(T_i8()))],\n@@ -39,7 +39,7 @@ pub fn trans_free(cx: block, v: ValueRef) -> block {\n \n pub fn trans_exchange_free(cx: block, v: ValueRef) -> block {\n     let _icx = cx.insn_ctxt(\"trans_exchange_free\");\n-    callee::trans_rtcall_or_lang_call(\n+    callee::trans_lang_call(\n         cx,\n         cx.tcx().lang_items.exchange_free_fn(),\n         ~[PointerCast(cx, v, T_ptr(T_i8()))],"}, {"sha": "dc004c81b11472ced219701fd2e0cb3bcf3f2d2a", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b171d0ef7b68fed961597d38e6a474d748243987/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b171d0ef7b68fed961597d38e6a474d748243987/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=b171d0ef7b68fed961597d38e6a474d748243987", "patch": "@@ -306,7 +306,7 @@ pub fn trans_uniq_or_managed_vstore(bcx: block,\n                     let llsizeval = C_uint(bcx.ccx(), s.len());\n                     let typ = ty::mk_estr(bcx.tcx(), ty::vstore_uniq);\n                     let lldestval = datum::scratch_datum(bcx, typ, false);\n-                    let bcx = callee::trans_rtcall_or_lang_call(\n+                    let bcx = callee::trans_lang_call(\n                         bcx,\n                         bcx.tcx().lang_items.strdup_uniq_fn(),\n                         ~[ llptrval, llsizeval ],"}]}