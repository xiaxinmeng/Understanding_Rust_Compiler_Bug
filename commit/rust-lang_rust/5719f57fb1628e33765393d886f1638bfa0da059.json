{"sha": "5719f57fb1628e33765393d886f1638bfa0da059", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MTlmNTdmYjE2MjhlMzM3NjUzOTNkODg2ZjE2MzhiZmEwZGEwNTk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-10-20T10:02:35Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-10-20T10:02:35Z"}, "message": "miri add write_bytes method to Memory doing bounds-checks and supporting iterators", "tree": {"sha": "b2cfb7a4f31d0153bf92eccf85ee65820b6a941e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2cfb7a4f31d0153bf92eccf85ee65820b6a941e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5719f57fb1628e33765393d886f1638bfa0da059", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5719f57fb1628e33765393d886f1638bfa0da059", "html_url": "https://github.com/rust-lang/rust/commit/5719f57fb1628e33765393d886f1638bfa0da059", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5719f57fb1628e33765393d886f1638bfa0da059/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e66a6282275802fcb0a29ba58ddc445fc64ac8ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/e66a6282275802fcb0a29ba58ddc445fc64ac8ef", "html_url": "https://github.com/rust-lang/rust/commit/e66a6282275802fcb0a29ba58ddc445fc64ac8ef"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "3bcde8defdfac7cea1601b2a076d1f4c3a116a4a", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5719f57fb1628e33765393d886f1638bfa0da059/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5719f57fb1628e33765393d886f1638bfa0da059/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=5719f57fb1628e33765393d886f1638bfa0da059", "patch": "@@ -346,11 +346,16 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n         &mut self,\n         cx: &impl HasDataLayout,\n         ptr: Pointer<Tag>,\n-        src: &[u8],\n+        src: impl IntoIterator<Item=u8, IntoIter: iter::ExactSizeIterator>,\n     ) -> InterpResult<'tcx>\n     {\n+        let mut src = src.into_iter();\n         let bytes = self.get_bytes_mut(cx, ptr, Size::from_bytes(src.len() as u64))?;\n-        bytes.clone_from_slice(src);\n+        // `zip` would stop when the first iterator ends; we want to definitely\n+        // cover all of `bytes`.\n+        for dest in bytes {\n+            *dest = src.next().expect(\"iterator was shorter than it said it would be\");\n+        }\n         Ok(())\n     }\n "}, {"sha": "0b65e9742b6a5d1a347ccbaf3c0d9f9a66a44168", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5719f57fb1628e33765393d886f1638bfa0da059/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5719f57fb1628e33765393d886f1638bfa0da059/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=5719f57fb1628e33765393d886f1638bfa0da059", "patch": "@@ -7,7 +7,7 @@\n //! short-circuiting the empty case!\n \n use std::collections::VecDeque;\n-use std::ptr;\n+use std::{ptr, iter};\n use std::borrow::Cow;\n \n use rustc::ty::{self, Instance, ParamEnv, query::TyCtxtAt};\n@@ -785,6 +785,25 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         self.get(ptr.alloc_id)?.read_c_str(self, ptr)\n     }\n \n+    /// Writes the given stream of bytes into memory.\n+    ///\n+    /// Performs appropriate bounds checks.\n+    pub fn write_bytes(\n+        &mut self,\n+        ptr: Scalar<M::PointerTag>,\n+        src: impl IntoIterator<Item=u8, IntoIter: iter::ExactSizeIterator>,\n+    ) -> InterpResult<'tcx>\n+    {\n+        let src = src.into_iter();\n+        let size = Size::from_bytes(src.len() as u64);\n+        let ptr = match self.check_ptr_access(ptr, size, Align::from_bytes(1).unwrap())? {\n+            Some(ptr) => ptr,\n+            None => return Ok(()), // zero-sized access\n+        };\n+        let tcx = self.tcx.tcx;\n+        self.get_mut(ptr.alloc_id)?.write_bytes(&tcx, ptr, src)\n+    }\n+\n     /// Expects the caller to have checked bounds and alignment.\n     pub fn copy(\n         &mut self,"}]}