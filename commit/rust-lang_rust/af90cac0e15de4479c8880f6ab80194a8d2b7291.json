{"sha": "af90cac0e15de4479c8880f6ab80194a8d2b7291", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmOTBjYWMwZTE1ZGU0NDc5Yzg4ODBmNmFiODAxOTRhOGQyYjcyOTE=", "commit": {"author": {"name": "Ali\u00e9nore Bouttefeux", "email": "alienore.bouttefeux@gmail.com", "date": "2021-04-16T15:04:15Z"}, "committer": {"name": "Ali\u00e9nore Bouttefeux", "email": "alienore.bouttefeux@gmail.com", "date": "2021-04-16T15:06:19Z"}, "message": "fix reporting return type in some cases", "tree": {"sha": "3fed14b90f925a2893765a0d71eae29b6cee9c38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fed14b90f925a2893765a0d71eae29b6cee9c38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af90cac0e15de4479c8880f6ab80194a8d2b7291", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af90cac0e15de4479c8880f6ab80194a8d2b7291", "html_url": "https://github.com/rust-lang/rust/commit/af90cac0e15de4479c8880f6ab80194a8d2b7291", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af90cac0e15de4479c8880f6ab80194a8d2b7291/comments", "author": {"login": "ABouttefeux", "id": 77335613, "node_id": "MDQ6VXNlcjc3MzM1NjEz", "avatar_url": "https://avatars.githubusercontent.com/u/77335613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ABouttefeux", "html_url": "https://github.com/ABouttefeux", "followers_url": "https://api.github.com/users/ABouttefeux/followers", "following_url": "https://api.github.com/users/ABouttefeux/following{/other_user}", "gists_url": "https://api.github.com/users/ABouttefeux/gists{/gist_id}", "starred_url": "https://api.github.com/users/ABouttefeux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ABouttefeux/subscriptions", "organizations_url": "https://api.github.com/users/ABouttefeux/orgs", "repos_url": "https://api.github.com/users/ABouttefeux/repos", "events_url": "https://api.github.com/users/ABouttefeux/events{/privacy}", "received_events_url": "https://api.github.com/users/ABouttefeux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ABouttefeux", "id": 77335613, "node_id": "MDQ6VXNlcjc3MzM1NjEz", "avatar_url": "https://avatars.githubusercontent.com/u/77335613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ABouttefeux", "html_url": "https://github.com/ABouttefeux", "followers_url": "https://api.github.com/users/ABouttefeux/followers", "following_url": "https://api.github.com/users/ABouttefeux/following{/other_user}", "gists_url": "https://api.github.com/users/ABouttefeux/gists{/gist_id}", "starred_url": "https://api.github.com/users/ABouttefeux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ABouttefeux/subscriptions", "organizations_url": "https://api.github.com/users/ABouttefeux/orgs", "repos_url": "https://api.github.com/users/ABouttefeux/repos", "events_url": "https://api.github.com/users/ABouttefeux/events{/privacy}", "received_events_url": "https://api.github.com/users/ABouttefeux/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1ca558db189690a9774713306c94550681ac590", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1ca558db189690a9774713306c94550681ac590", "html_url": "https://github.com/rust-lang/rust/commit/f1ca558db189690a9774713306c94550681ac590"}], "stats": {"total": 82, "additions": 60, "deletions": 22}, "files": [{"sha": "fd7c50e978800e9ecf9603c02ac8f5e993687edb", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/af90cac0e15de4479c8880f6ab80194a8d2b7291/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af90cac0e15de4479c8880f6ab80194a8d2b7291/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=af90cac0e15de4479c8880f6ab80194a8d2b7291", "patch": "@@ -1492,28 +1492,6 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         if let (Some(sp), Some(fn_output)) = (fcx.ret_coercion_span.get(), fn_output) {\n             self.add_impl_trait_explanation(&mut err, cause, fcx, expected, sp, fn_output);\n         }\n-\n-        if let Some(sp) = fcx.ret_coercion_span.get() {\n-            // If the closure has an explicit return type annotation,\n-            // then a type error may occur at the first return expression we\n-            // see in the closure (if it conflicts with the declared\n-            // return type). Skip adding a note in this case, since it\n-            // would be incorrect.\n-            if !err.span.primary_spans().iter().any(|&span| span == sp) {\n-                let hir = fcx.tcx.hir();\n-                let body_owner = hir.body_owned_by(hir.enclosing_body_owner(fcx.body_id));\n-                if fcx.tcx.is_closure(hir.body_owner_def_id(body_owner).to_def_id()) {\n-                    err.span_note(\n-                        sp,\n-                        &format!(\n-                            \"return type inferred to be `{}` here\",\n-                            fcx.resolve_vars_if_possible(expected)\n-                        ),\n-                    );\n-                }\n-            }\n-        }\n-\n         err\n     }\n "}, {"sha": "e5fcdcfa74315e02ffcefa64eaff73977e777f8e", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/af90cac0e15de4479c8880f6ab80194a8d2b7291/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af90cac0e15de4479c8880f6ab80194a8d2b7291/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=af90cac0e15de4479c8880f6ab80194a8d2b7291", "patch": "@@ -37,6 +37,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.suggest_missing_parentheses(err, expr);\n         self.note_need_for_fn_pointer(err, expected, expr_ty);\n         self.note_internal_mutation_in_method(err, expr, expected, expr_ty);\n+        self.report_closure_infered_return_type(err, expected)\n     }\n \n     // Requires that the two types unify, and prints an error message if\n@@ -1061,4 +1062,32 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             _ => false,\n         }\n     }\n+\n+    // Report the type inferred by the return statement.\n+    fn report_closure_infered_return_type(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        expected: Ty<'tcx>,\n+    ) {\n+        if let Some(sp) = self.ret_coercion_span.get() {\n+            // If the closure has an explicit return type annotation,\n+            // then a type error may occur at the first return expression we\n+            // see in the closure (if it conflicts with the declared\n+            // return type). Skip adding a note in this case, since it\n+            // would be incorrect.\n+            if !err.span.primary_spans().iter().any(|&span| span == sp) {\n+                let hir = self.tcx.hir();\n+                let body_owner = hir.body_owned_by(hir.enclosing_body_owner(self.body_id));\n+                if self.tcx.is_closure(hir.body_owner_def_id(body_owner).to_def_id()) {\n+                    err.span_note(\n+                        sp,\n+                        &format!(\n+                            \"return type inferred to be `{}` here\",\n+                            self.resolve_vars_if_possible(expected)\n+                        ),\n+                    );\n+                }\n+            }\n+        }\n+    }\n }"}, {"sha": "f81d7cfaa654bc9efe1976840968d2a86e8786fe", "filename": "src/test/ui/closures/issue-84128.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/af90cac0e15de4479c8880f6ab80194a8d2b7291/src%2Ftest%2Fui%2Fclosures%2Fissue-84128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af90cac0e15de4479c8880f6ab80194a8d2b7291/src%2Ftest%2Fui%2Fclosures%2Fissue-84128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-84128.rs?ref=af90cac0e15de4479c8880f6ab80194a8d2b7291", "patch": "@@ -0,0 +1,16 @@\n+// test for issue 84128\n+// missing suggestion for similar ADT type with diffetent generic paramenter\n+// on closure ReturnNoExpression\n+\n+struct Foo<T>(T);\n+\n+fn main() {\n+    || {\n+        if false {\n+            return Foo(0);\n+        }\n+\n+        Foo(())\n+        //~^ ERROR mismatched types [E0308]\n+    };\n+}"}, {"sha": "70d9273ddf7ceb2af8dbd68ac158757b3d1ee232", "filename": "src/test/ui/closures/issue-84128.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/af90cac0e15de4479c8880f6ab80194a8d2b7291/src%2Ftest%2Fui%2Fclosures%2Fissue-84128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af90cac0e15de4479c8880f6ab80194a8d2b7291/src%2Ftest%2Fui%2Fclosures%2Fissue-84128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-84128.stderr?ref=af90cac0e15de4479c8880f6ab80194a8d2b7291", "patch": "@@ -0,0 +1,15 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-84128.rs:13:13\n+   |\n+LL |         Foo(())\n+   |             ^^ expected integer, found `()`\n+   |\n+note: return type inferred to be `{integer}` here\n+  --> $DIR/issue-84128.rs:10:20\n+   |\n+LL |             return Foo(0);\n+   |                    ^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}