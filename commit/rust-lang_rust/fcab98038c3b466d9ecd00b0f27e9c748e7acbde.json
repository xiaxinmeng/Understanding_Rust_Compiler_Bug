{"sha": "fcab98038c3b466d9ecd00b0f27e9c748e7acbde", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYWI5ODAzOGMzYjQ2NmQ5ZWNkMDBiMGYyN2U5Yzc0OGU3YWNiZGU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-08-06T02:59:24Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-08-07T11:23:59Z"}, "message": "Temporary bootstrapping hack: introduce syntax for r egion bounds like `'b:'a`,\nmeaning `'b outlives 'a`. Syntax currently does nothing but is needed for full\nfix to #5763. To use this syntax, the issue_5763_bootstrap feature guard is\nrequired.", "tree": {"sha": "345deba110cec778935c4d2fa1b7f9150c90f7c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/345deba110cec778935c4d2fa1b7f9150c90f7c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcab98038c3b466d9ecd00b0f27e9c748e7acbde", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcab98038c3b466d9ecd00b0f27e9c748e7acbde", "html_url": "https://github.com/rust-lang/rust/commit/fcab98038c3b466d9ecd00b0f27e9c748e7acbde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a53c001170f8084ce850498d5e8f22b5e7da72c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a53c001170f8084ce850498d5e8f22b5e7da72c", "html_url": "https://github.com/rust-lang/rust/commit/1a53c001170f8084ce850498d5e8f22b5e7da72c"}], "stats": {"total": 320, "additions": 240, "deletions": 80}, "files": [{"sha": "59a6b08638e9170191134f9e469e4ac2aa377500", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=fcab98038c3b466d9ecd00b0f27e9c748e7acbde", "patch": "@@ -576,7 +576,7 @@ impl<'a> Visitor<()> for Context<'a> {\n         run_lints!(self, check_lifetime_ref, lt);\n     }\n \n-    fn visit_lifetime_decl(&mut self, lt: &ast::Lifetime, _: ()) {\n+    fn visit_lifetime_decl(&mut self, lt: &ast::LifetimeDef, _: ()) {\n         run_lints!(self, check_lifetime_decl, lt);\n     }\n "}, {"sha": "1bf77b42bec049d0d7259f385036ecd45089f649", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=fcab98038c3b466d9ecd00b0f27e9c748e7acbde", "patch": "@@ -150,7 +150,7 @@ pub trait LintPass {\n     fn check_variant(&mut self, _: &Context, _: &ast::Variant, _: &ast::Generics) { }\n     fn check_opt_lifetime_ref(&mut self, _: &Context, _: Span, _: &Option<ast::Lifetime>) { }\n     fn check_lifetime_ref(&mut self, _: &Context, _: &ast::Lifetime) { }\n-    fn check_lifetime_decl(&mut self, _: &Context, _: &ast::Lifetime) { }\n+    fn check_lifetime_decl(&mut self, _: &Context, _: &ast::LifetimeDef) { }\n     fn check_explicit_self(&mut self, _: &Context, _: &ast::ExplicitSelf) { }\n     fn check_mac(&mut self, _: &Context, _: &ast::Mac) { }\n     fn check_path(&mut self, _: &Context, _: &ast::Path, _: ast::NodeId) { }"}, {"sha": "5001e7a88bd939f45bf11fefb3c487c6f1ed354f", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=fcab98038c3b466d9ecd00b0f27e9c748e7acbde", "patch": "@@ -59,10 +59,10 @@ struct LifetimeContext<'a> {\n enum ScopeChain<'a> {\n     /// EarlyScope(i, ['a, 'b, ...], s) extends s with early-bound\n     /// lifetimes, assigning indexes 'a => i, 'b => i+1, ... etc.\n-    EarlyScope(subst::ParamSpace, &'a Vec<ast::Lifetime>, Scope<'a>),\n+    EarlyScope(subst::ParamSpace, &'a Vec<ast::LifetimeDef>, Scope<'a>),\n     /// LateScope(binder_id, ['a, 'b, ...], s) extends s with late-bound\n     /// lifetimes introduced by the declaration binder_id.\n-    LateScope(ast::NodeId, &'a Vec<ast::Lifetime>, Scope<'a>),\n+    LateScope(ast::NodeId, &'a Vec<ast::LifetimeDef>, Scope<'a>),\n     /// lifetimes introduced by items within a code block are scoped\n     /// to that block.\n     BlockScope(ast::NodeId, Scope<'a>),\n@@ -136,7 +136,7 @@ impl<'a, 'b> Visitor<Scope<'a>> for LifetimeContext<'b> {\n         fn push_fn_scope(this: &mut LifetimeContext,\n                          ty: &ast::Ty,\n                          scope: Scope,\n-                         lifetimes: &Vec<ast::Lifetime>) {\n+                         lifetimes: &Vec<ast::LifetimeDef>) {\n             let scope1 = LateScope(ty.id, lifetimes, scope);\n             this.check_lifetime_names(lifetimes);\n             debug!(\"pushing fn scope id={} due to type\", ty.id);\n@@ -216,7 +216,7 @@ impl<'a> LifetimeContext<'a> {\n             walk(self, &scope1)\n         } else {\n             let (early, late) = generics.lifetimes.clone().partition(\n-                |l| referenced_idents.iter().any(|&i| i == l.name));\n+                |l| referenced_idents.iter().any(|&i| i == l.lifetime.name));\n \n             let scope1 = EarlyScope(subst::FnSpace, &early, scope);\n             let scope2 = LateScope(n, &late, &scope1);\n@@ -334,29 +334,39 @@ impl<'a> LifetimeContext<'a> {\n                     token::get_name(lifetime_ref.name)).as_slice());\n     }\n \n-    fn check_lifetime_names(&self, lifetimes: &Vec<ast::Lifetime>) {\n+    fn check_lifetime_names(&self, lifetimes: &Vec<ast::LifetimeDef>) {\n         for i in range(0, lifetimes.len()) {\n             let lifetime_i = lifetimes.get(i);\n \n             let special_idents = [special_idents::static_lifetime];\n             for lifetime in lifetimes.iter() {\n-                if special_idents.iter().any(|&i| i.name == lifetime.name) {\n+                if special_idents.iter().any(|&i| i.name == lifetime.lifetime.name) {\n                     self.sess.span_err(\n-                        lifetime.span,\n+                        lifetime.lifetime.span,\n                         format!(\"illegal lifetime parameter name: `{}`\",\n-                                token::get_name(lifetime.name)).as_slice());\n+                                token::get_name(lifetime.lifetime.name))\n+                            .as_slice());\n                 }\n             }\n \n             for j in range(i + 1, lifetimes.len()) {\n                 let lifetime_j = lifetimes.get(j);\n \n-                if lifetime_i.name == lifetime_j.name {\n+                if lifetime_i.lifetime.name == lifetime_j.lifetime.name {\n                     self.sess.span_err(\n-                        lifetime_j.span,\n+                        lifetime_j.lifetime.span,\n                         format!(\"lifetime name `{}` declared twice in \\\n                                 the same scope\",\n-                                token::get_name(lifetime_j.name)).as_slice());\n+                                token::get_name(lifetime_j.lifetime.name))\n+                            .as_slice());\n+                }\n+            }\n+\n+            for bound in lifetime_i.bounds.iter() {\n+                if !self.sess.features.issue_5723_bootstrap.get() {\n+                    self.sess.span_err(\n+                        bound.span,\n+                        \"region bounds require `issue_5723_bootstrap`\");\n                 }\n             }\n         }\n@@ -379,28 +389,28 @@ impl<'a> LifetimeContext<'a> {\n     }\n }\n \n-fn search_lifetimes(lifetimes: &Vec<ast::Lifetime>,\n+fn search_lifetimes(lifetimes: &Vec<ast::LifetimeDef>,\n                     lifetime_ref: &ast::Lifetime)\n                     -> Option<(uint, ast::NodeId)> {\n     for (i, lifetime_decl) in lifetimes.iter().enumerate() {\n-        if lifetime_decl.name == lifetime_ref.name {\n-            return Some((i, lifetime_decl.id));\n+        if lifetime_decl.lifetime.name == lifetime_ref.name {\n+            return Some((i, lifetime_decl.lifetime.id));\n         }\n     }\n     return None;\n }\n \n ///////////////////////////////////////////////////////////////////////////\n \n-pub fn early_bound_lifetimes<'a>(generics: &'a ast::Generics) -> Vec<ast::Lifetime> {\n+pub fn early_bound_lifetimes<'a>(generics: &'a ast::Generics) -> Vec<ast::LifetimeDef> {\n     let referenced_idents = free_lifetimes(&generics.ty_params);\n     if referenced_idents.is_empty() {\n         return Vec::new();\n     }\n \n     generics.lifetimes.iter()\n-        .filter(|l| referenced_idents.iter().any(|&i| i == l.name))\n-        .map(|l| *l)\n+        .filter(|l| referenced_idents.iter().any(|&i| i == l.lifetime.name))\n+        .map(|l| (*l).clone())\n         .collect()\n }\n "}, {"sha": "fb0a9e32df916e7f2f1aed9d13d2446e67251ca5", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=fcab98038c3b466d9ecd00b0f27e9c748e7acbde", "patch": "@@ -804,9 +804,10 @@ pub fn trait_def_of_item(ccx: &CrateCtxt, it: &ast::Item) -> Rc<ty::TraitDef> {\n             generics.lifetimes\n                     .iter()\n                     .enumerate()\n-                    .map(|(i, def)| ty::ReEarlyBound(def.id,\n+                    .map(|(i, def)| ty::ReEarlyBound(def.lifetime.id,\n                                                      subst::TypeSpace,\n-                                                     i, def.name))\n+                                                     i,\n+                                                     def.lifetime.name))\n                     .collect();\n \n         let types =\n@@ -1073,18 +1074,18 @@ fn add_unsized_bound(ccx: &CrateCtxt,\n \n fn ty_generics(ccx: &CrateCtxt,\n                space: subst::ParamSpace,\n-               lifetimes: &Vec<ast::Lifetime>,\n+               lifetimes: &Vec<ast::LifetimeDef>,\n                types: &OwnedSlice<ast::TyParam>,\n                base_generics: ty::Generics)\n                -> ty::Generics\n {\n     let mut result = base_generics;\n \n     for (i, l) in lifetimes.iter().enumerate() {\n-        let def = ty::RegionParameterDef { name: l.name,\n+        let def = ty::RegionParameterDef { name: l.lifetime.name,\n                                            space: space,\n                                            index: i,\n-                                           def_id: local_def(l.id) };\n+                                           def_id: local_def(l.lifetime.id) };\n         debug!(\"ty_generics: def for region param: {}\", def);\n         result.regions.push(space, def);\n     }"}, {"sha": "e191fb343b53a3dce42980c527ec3891c2590da1", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=fcab98038c3b466d9ecd00b0f27e9c748e7acbde", "patch": "@@ -976,10 +976,13 @@ impl<'a> Rebuilder<'a> {\n                         -> ast::Generics {\n         let mut lifetimes = Vec::new();\n         for lt in add.iter() {\n-            lifetimes.push(*lt);\n+            lifetimes.push(ast::LifetimeDef { lifetime: *lt,\n+                                              bounds: Vec::new() });\n         }\n         for lt in generics.lifetimes.iter() {\n-            if keep.contains(&lt.name) || !remove.contains(&lt.name) {\n+            if keep.contains(&lt.lifetime.name) ||\n+                !remove.contains(&lt.lifetime.name)\n+            {\n                 lifetimes.push((*lt).clone());\n             }\n         }\n@@ -1439,7 +1442,7 @@ impl Resolvable for Rc<ty::TraitRef> {\n \n fn lifetimes_in_scope(tcx: &ty::ctxt,\n                       scope_id: ast::NodeId)\n-                      -> Vec<ast::Lifetime> {\n+                      -> Vec<ast::LifetimeDef> {\n     let mut taken = Vec::new();\n     let parent = tcx.map.get_parent(scope_id);\n     let method_id_opt = match tcx.map.find(parent) {\n@@ -1486,10 +1489,10 @@ struct LifeGiver {\n }\n \n impl LifeGiver {\n-    fn with_taken(taken: &[ast::Lifetime]) -> LifeGiver {\n+    fn with_taken(taken: &[ast::LifetimeDef]) -> LifeGiver {\n         let mut taken_ = HashSet::new();\n         for lt in taken.iter() {\n-            let lt_name = token::get_name(lt.name).get().to_string();\n+            let lt_name = token::get_name(lt.lifetime.name).get().to_string();\n             taken_.insert(lt_name);\n         }\n         LifeGiver {"}, {"sha": "be9ae0cc719f2966bacae5be17c17c04cbcf463c", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=fcab98038c3b466d9ecd00b0f27e9c748e7acbde", "patch": "@@ -358,7 +358,8 @@ impl<'a> Visitor<()> for TermsContext<'a> {\n             ast::ItemStruct(_, ref generics) |\n             ast::ItemTrait(ref generics, _, _, _) => {\n                 for (i, p) in generics.lifetimes.iter().enumerate() {\n-                    self.add_inferred(item.id, RegionParam, TypeSpace, i, p.id);\n+                    let id = p.lifetime.id;\n+                    self.add_inferred(item.id, RegionParam, TypeSpace, i, id);\n                 }\n                 for (i, p) in generics.ty_params.iter().enumerate() {\n                     self.add_inferred(item.id, TypeParam, TypeSpace, i, p.id);"}, {"sha": "d45ebb3858e9f703ed2671563535f59570e9fe06", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=fcab98038c3b466d9ecd00b0f27e9c748e7acbde", "patch": "@@ -410,8 +410,8 @@ mod svh_visitor {\n             SawLifetimeRef(content(l.name)).hash(self.st);\n         }\n \n-        fn visit_lifetime_decl(&mut self, l: &Lifetime, _: E) {\n-            SawLifetimeDecl(content(l.name)).hash(self.st);\n+        fn visit_lifetime_decl(&mut self, l: &LifetimeDef, _: E) {\n+            SawLifetimeDecl(content(l.lifetime.name)).hash(self.st);\n         }\n \n         // We do recursively walk the bodies of functions/methods"}, {"sha": "8dc57d3e574ad985dc50875d9657ce7db94746c7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=fcab98038c3b466d9ecd00b0f27e9c748e7acbde", "patch": "@@ -614,6 +614,12 @@ impl Clean<Lifetime> for ast::Lifetime {\n     }\n }\n \n+impl Clean<Lifetime> for ast::LifetimeDef {\n+    fn clean(&self) -> Lifetime {\n+        Lifetime(token::get_name(self.lifetime.name).get().to_string())\n+    }\n+}\n+\n impl Clean<Lifetime> for ty::RegionParameterDef {\n     fn clean(&self) -> Lifetime {\n         Lifetime(token::get_name(self.name).get().to_string())"}, {"sha": "fc000d2357e3007d65b6b5d9df2498a7940c0f13", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=fcab98038c3b466d9ecd00b0f27e9c748e7acbde", "patch": "@@ -160,6 +160,12 @@ pub struct Lifetime {\n     pub name: Name\n }\n \n+#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+pub struct LifetimeDef {\n+    pub lifetime: Lifetime,\n+    pub bounds: Vec<Lifetime>\n+}\n+\n /// A \"Path\" is essentially Rust's notion of a name; for instance:\n /// std::cmp::PartialEq  .  It's represented as a sequence of identifiers,\n /// along with a bunch of supporting information.\n@@ -231,7 +237,7 @@ pub struct TyParam {\n /// of a function, enum, trait, etc.\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct Generics {\n-    pub lifetimes: Vec<Lifetime>,\n+    pub lifetimes: Vec<LifetimeDef>,\n     pub ty_params: OwnedSlice<TyParam>,\n }\n \n@@ -861,7 +867,7 @@ impl fmt::Show for Onceness {\n /// Represents the type of a closure\n #[deriving(PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct ClosureTy {\n-    pub lifetimes: Vec<Lifetime>,\n+    pub lifetimes: Vec<LifetimeDef>,\n     pub fn_style: FnStyle,\n     pub onceness: Onceness,\n     pub decl: P<FnDecl>,\n@@ -876,7 +882,7 @@ pub struct ClosureTy {\n pub struct BareFnTy {\n     pub fn_style: FnStyle,\n     pub abi: Abi,\n-    pub lifetimes: Vec<Lifetime>,\n+    pub lifetimes: Vec<LifetimeDef>,\n     pub decl: P<FnDecl>\n }\n "}, {"sha": "cf2b5bc406373759a5376b8cb71668cb8f89b587", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=fcab98038c3b466d9ecd00b0f27e9c748e7acbde", "patch": "@@ -369,7 +369,7 @@ impl<'a, O: IdVisitingOperation> IdVisitor<'a, O> {\n             self.operation.visit_id(type_parameter.id)\n         }\n         for lifetime in generics.lifetimes.iter() {\n-            self.operation.visit_id(lifetime.id)\n+            self.operation.visit_id(lifetime.lifetime.id)\n         }\n     }\n }"}, {"sha": "0e687c02c1daf080c678316a4d28e51027522471", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=fcab98038c3b466d9ecd00b0f27e9c748e7acbde", "patch": "@@ -73,6 +73,11 @@ pub trait AstBuilder {\n     fn trait_ref(&self, path: ast::Path) -> ast::TraitRef;\n     fn typarambound(&self, path: ast::Path) -> ast::TyParamBound;\n     fn lifetime(&self, span: Span, ident: ast::Name) -> ast::Lifetime;\n+    fn lifetime_def(&self,\n+                    span: Span,\n+                    name: ast::Name,\n+                    bounds: Vec<ast::Lifetime>)\n+                    -> ast::LifetimeDef;\n \n     // statements\n     fn stmt_expr(&self, expr: Gc<ast::Expr>) -> Gc<ast::Stmt>;\n@@ -456,6 +461,17 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         ast::Lifetime { id: ast::DUMMY_NODE_ID, span: span, name: name }\n     }\n \n+    fn lifetime_def(&self,\n+                    span: Span,\n+                    name: ast::Name,\n+                    bounds: Vec<ast::Lifetime>)\n+                    -> ast::LifetimeDef {\n+        ast::LifetimeDef {\n+            lifetime: self.lifetime(span, name),\n+            bounds: bounds\n+        }\n+    }\n+\n     fn stmt_expr(&self, expr: Gc<ast::Expr>) -> Gc<ast::Stmt> {\n         box(GC) respan(expr.span, ast::StmtSemi(expr, ast::DUMMY_NODE_ID))\n     }"}, {"sha": "5842ca4a0d54d05ecb22af4396f22771aa16e260", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=fcab98038c3b466d9ecd00b0f27e9c748e7acbde", "patch": "@@ -395,7 +395,7 @@ impl<'a> TraitDef<'a> {\n         let mut ty_params = ty_params.into_vec();\n \n         // Copy the lifetimes\n-        lifetimes.extend(generics.lifetimes.iter().map(|l| *l));\n+        lifetimes.extend(generics.lifetimes.iter().map(|l| (*l).clone()));\n \n         // Create the type parameters.\n         ty_params.extend(generics.ty_params.iter().map(|ty_param| {\n@@ -429,7 +429,11 @@ impl<'a> TraitDef<'a> {\n             cx.ty_ident(self.span, ty_param.ident)\n         });\n \n-        let self_lifetimes = generics.lifetimes.clone();\n+        let self_lifetimes: Vec<ast::Lifetime> =\n+            generics.lifetimes\n+            .iter()\n+            .map(|ld| ld.lifetime)\n+            .collect();\n \n         // Create the type of `self`.\n         let self_type = cx.ty_path("}, {"sha": "2130b6f4e9dbc9f16a90b875b7bd9317ecb67134", "filename": "src/libsyntax/ext/deriving/generic/ty.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs?ref=fcab98038c3b466d9ecd00b0f27e9c748e7acbde", "patch": "@@ -174,7 +174,9 @@ impl<'a> Ty<'a> {\n                 let self_params = self_generics.ty_params.map(|ty_param| {\n                     cx.ty_ident(span, ty_param.ident)\n                 });\n-                let lifetimes = self_generics.lifetimes.clone();\n+                let lifetimes = self_generics.lifetimes.iter()\n+                                                       .map(|d| d.lifetime)\n+                                                       .collect();\n \n                 cx.path_all(span, false, vec!(self_ty), lifetimes,\n                             self_params.into_vec())\n@@ -200,7 +202,7 @@ fn mk_ty_param(cx: &ExtCtxt, span: Span, name: &str,\n     cx.typaram(span, cx.ident_of(name), bounds, unbound, None)\n }\n \n-fn mk_generics(lifetimes: Vec<ast::Lifetime>, ty_params: Vec<ast::TyParam> ) -> Generics {\n+fn mk_generics(lifetimes: Vec<ast::LifetimeDef>, ty_params: Vec<ast::TyParam> ) -> Generics {\n     Generics {\n         lifetimes: lifetimes,\n         ty_params: OwnedSlice::from_vec(ty_params)\n@@ -210,7 +212,7 @@ fn mk_generics(lifetimes: Vec<ast::Lifetime>, ty_params: Vec<ast::TyParam> ) ->\n /// Lifetimes and bounds on type parameters\n #[deriving(Clone)]\n pub struct LifetimeBounds<'a> {\n-    pub lifetimes: Vec<&'a str>,\n+    pub lifetimes: Vec<(&'a str, Vec<&'a str>)>,\n     pub bounds: Vec<(&'a str, Option<ast::TyParamBound>, Vec<Path<'a>>)>,\n }\n \n@@ -226,8 +228,11 @@ impl<'a> LifetimeBounds<'a> {\n                        self_ty: Ident,\n                        self_generics: &Generics)\n                        -> Generics {\n-        let lifetimes = self.lifetimes.iter().map(|lt| {\n-            cx.lifetime(span, cx.ident_of(*lt).name)\n+        let lifetimes = self.lifetimes.iter().map(|&(ref lt, ref bounds)| {\n+            let bounds =\n+                bounds.iter().map(\n+                    |b| cx.lifetime(span, cx.ident_of(*b).name)).collect();\n+            cx.lifetime_def(span, cx.ident_of(*lt).name, bounds)\n         }).collect();\n         let ty_params = self.bounds.iter().map(|t| {\n             match t {"}, {"sha": "80325c64349e8414cc6b72b2b5d871715017d54c", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=fcab98038c3b466d9ecd00b0f27e9c748e7acbde", "patch": "@@ -163,6 +163,10 @@ pub trait Folder {\n         noop_fold_lifetime(l, self)\n     }\n \n+    fn fold_lifetime_def(&mut self, l: &LifetimeDef) -> LifetimeDef {\n+        noop_fold_lifetime_def(l, self)\n+    }\n+\n     fn fold_attribute(&mut self, at: Attribute) -> Attribute {\n         noop_fold_attribute(at, self)\n     }\n@@ -187,6 +191,10 @@ pub trait Folder {\n         noop_fold_lifetimes(lts, self)\n     }\n \n+    fn fold_lifetime_defs(&mut self, lts: &[LifetimeDef]) -> Vec<LifetimeDef> {\n+        noop_fold_lifetime_defs(lts, self)\n+    }\n+\n     fn fold_ty_param(&mut self, tp: &TyParam) -> TyParam {\n         noop_fold_ty_param(tp, self)\n     }\n@@ -337,7 +345,7 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n                 onceness: f.onceness,\n                 bounds: fld.fold_opt_bounds(&f.bounds),\n                 decl: fld.fold_fn_decl(&*f.decl),\n-                lifetimes: f.lifetimes.iter().map(|l| fld.fold_lifetime(l)).collect(),\n+                lifetimes: fld.fold_lifetime_defs(f.lifetimes.as_slice()),\n             }, fld.fold_opt_lifetime(region))\n         }\n         TyProc(ref f) => {\n@@ -346,12 +354,12 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n                 onceness: f.onceness,\n                 bounds: fld.fold_opt_bounds(&f.bounds),\n                 decl: fld.fold_fn_decl(&*f.decl),\n-                lifetimes: f.lifetimes.iter().map(|l| fld.fold_lifetime(l)).collect(),\n+                lifetimes: fld.fold_lifetime_defs(f.lifetimes.as_slice()),\n             })\n         }\n         TyBareFn(ref f) => {\n             TyBareFn(box(GC) BareFnTy {\n-                lifetimes: f.lifetimes.iter().map(|l| fld.fold_lifetime(l)).collect(),\n+                lifetimes: fld.fold_lifetime_defs(f.lifetimes.as_slice()),\n                 fn_style: f.fn_style,\n                 abi: f.abi,\n                 decl: fld.fold_fn_decl(&*f.decl)\n@@ -665,18 +673,31 @@ pub fn noop_fold_lifetime<T: Folder>(l: &Lifetime, fld: &mut T) -> Lifetime {\n     }\n }\n \n+pub fn noop_fold_lifetime_def<T: Folder>(l: &LifetimeDef, fld: &mut T)\n+                                         -> LifetimeDef\n+{\n+    LifetimeDef {\n+        lifetime: fld.fold_lifetime(&l.lifetime),\n+        bounds: fld.fold_lifetimes(l.bounds.as_slice()),\n+    }\n+}\n+\n pub fn noop_fold_lifetimes<T: Folder>(lts: &[Lifetime], fld: &mut T) -> Vec<Lifetime> {\n     lts.iter().map(|l| fld.fold_lifetime(l)).collect()\n }\n \n+pub fn noop_fold_lifetime_defs<T: Folder>(lts: &[LifetimeDef], fld: &mut T) -> Vec<LifetimeDef> {\n+    lts.iter().map(|l| fld.fold_lifetime_def(l)).collect()\n+}\n+\n pub fn noop_fold_opt_lifetime<T: Folder>(o_lt: &Option<Lifetime>, fld: &mut T)\n                                       -> Option<Lifetime> {\n     o_lt.as_ref().map(|lt| fld.fold_lifetime(lt))\n }\n \n pub fn noop_fold_generics<T: Folder>(generics: &Generics, fld: &mut T) -> Generics {\n     Generics {ty_params: fld.fold_ty_params(generics.ty_params.as_slice()),\n-              lifetimes: fld.fold_lifetimes(generics.lifetimes.as_slice())}\n+              lifetimes: fld.fold_lifetime_defs(generics.lifetimes.as_slice())}\n }\n \n pub fn noop_fold_struct_def<T: Folder>(struct_def: Gc<StructDef>,"}, {"sha": "7ea000d3aac41924ac07987f46603c435a960bef", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 62, "deletions": 29, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=fcab98038c3b466d9ecd00b0f27e9c748e7acbde", "patch": "@@ -1053,10 +1053,10 @@ impl<'a> Parser<'a> {\n \n         */\n \n-        let lifetimes = if self.eat(&token::LT) {\n-            let lifetimes = self.parse_lifetimes();\n+        let lifetime_defs = if self.eat(&token::LT) {\n+            let lifetime_defs = self.parse_lifetime_defs();\n             self.expect_gt();\n-            lifetimes\n+            lifetime_defs\n         } else {\n             Vec::new()\n         };\n@@ -1082,7 +1082,7 @@ impl<'a> Parser<'a> {\n             onceness: Once,\n             bounds: bounds,\n             decl: decl,\n-            lifetimes: lifetimes,\n+            lifetimes: lifetime_defs,\n         })\n     }\n \n@@ -1096,7 +1096,7 @@ impl<'a> Parser<'a> {\n           |        |      |    |      |      Return type\n           |        |      |    |  Closure bounds\n           |        |      |  Argument types\n-          |        |    Lifetimes\n+          |        |    Lifetime defs\n           |     Once-ness (a.k.a., affine)\n         Function Style\n \n@@ -1105,11 +1105,11 @@ impl<'a> Parser<'a> {\n         let fn_style = self.parse_unsafety();\n         let onceness = if self.eat_keyword(keywords::Once) {Once} else {Many};\n \n-        let lifetimes = if self.eat(&token::LT) {\n-            let lifetimes = self.parse_lifetimes();\n+        let lifetime_defs = if self.eat(&token::LT) {\n+            let lifetime_defs = self.parse_lifetime_defs();\n             self.expect_gt();\n \n-            lifetimes\n+            lifetime_defs\n         } else {\n             Vec::new()\n         };\n@@ -1164,7 +1164,7 @@ impl<'a> Parser<'a> {\n                 onceness: onceness,\n                 bounds: bounds,\n                 decl: decl,\n-                lifetimes: lifetimes,\n+                lifetimes: lifetime_defs,\n             }, region)\n         }\n     }\n@@ -1179,21 +1179,21 @@ impl<'a> Parser<'a> {\n \n     /// Parse a function type (following the 'fn')\n     pub fn parse_ty_fn_decl(&mut self, allow_variadic: bool)\n-                            -> (P<FnDecl>, Vec<ast::Lifetime>) {\n+                            -> (P<FnDecl>, Vec<ast::LifetimeDef>) {\n         /*\n \n         (fn) <'lt> (S) -> T\n              ^~~~^ ^~^    ^\n                |    |     |\n                |    |   Return type\n                |  Argument types\n-           Lifetimes\n+           Lifetime_defs\n \n         */\n-        let lifetimes = if self.eat(&token::LT) {\n-            let lifetimes = self.parse_lifetimes();\n+        let lifetime_defs = if self.eat(&token::LT) {\n+            let lifetime_defs = self.parse_lifetime_defs();\n             self.expect_gt();\n-            lifetimes\n+            lifetime_defs\n         } else {\n             Vec::new()\n         };\n@@ -1206,7 +1206,7 @@ impl<'a> Parser<'a> {\n             cf: ret_style,\n             variadic: variadic\n         });\n-        (decl, lifetimes)\n+        (decl, lifetime_defs)\n     }\n \n     /// Parse the methods in a trait declaration\n@@ -1770,31 +1770,34 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    // matches lifetimes = ( lifetime ) | ( lifetime , lifetimes )\n-    // actually, it matches the empty one too, but putting that in there\n-    // messes up the grammar....\n-    pub fn parse_lifetimes(&mut self) -> Vec<ast::Lifetime> {\n+    pub fn parse_lifetime_defs(&mut self) -> Vec<ast::LifetimeDef> {\n         /*!\n-         *\n-         * Parses zero or more comma separated lifetimes.\n-         * Expects each lifetime to be followed by either\n-         * a comma or `>`.  Used when parsing type parameter\n-         * lists, where we expect something like `<'a, 'b, T>`.\n+         * Parses `lifetime_defs = [ lifetime_defs { ',' lifetime_defs } ]`\n+         * where `lifetime_def  = lifetime [':' lifetimes]`\n          */\n \n         let mut res = Vec::new();\n         loop {\n             match self.token {\n                 token::LIFETIME(_) => {\n-                    res.push(self.parse_lifetime());\n+                    let lifetime = self.parse_lifetime();\n+                    let bounds =\n+                        if self.eat(&token::COLON) {\n+                            self.parse_lifetimes(token::BINOP(token::PLUS))\n+                        } else {\n+                            Vec::new()\n+                        };\n+                    res.push(ast::LifetimeDef { lifetime: lifetime,\n+                                                bounds: bounds });\n                 }\n+\n                 _ => {\n                     return res;\n                 }\n             }\n \n             match self.token {\n-                token::COMMA => { self.bump();}\n+                token::COMMA => { self.bump(); }\n                 token::GT => { return res; }\n                 token::BINOP(token::SHR) => { return res; }\n                 _ => {\n@@ -1807,6 +1810,36 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    // matches lifetimes = ( lifetime ) | ( lifetime , lifetimes )\n+    // actually, it matches the empty one too, but putting that in there\n+    // messes up the grammar....\n+    pub fn parse_lifetimes(&mut self, sep: token::Token) -> Vec<ast::Lifetime> {\n+        /*!\n+         * Parses zero or more comma separated lifetimes.\n+         * Expects each lifetime to be followed by either\n+         * a comma or `>`.  Used when parsing type parameter\n+         * lists, where we expect something like `<'a, 'b, T>`.\n+         */\n+\n+        let mut res = Vec::new();\n+        loop {\n+            match self.token {\n+                token::LIFETIME(_) => {\n+                    res.push(self.parse_lifetime());\n+                }\n+                _ => {\n+                    return res;\n+                }\n+            }\n+\n+            if self.token != sep {\n+                return res;\n+            }\n+\n+            self.bump();\n+        }\n+    }\n+\n     pub fn token_is_mutability(tok: &token::Token) -> bool {\n         token::is_keyword(keywords::Mut, tok) ||\n         token::is_keyword(keywords::Const, tok)\n@@ -3664,7 +3697,7 @@ impl<'a> Parser<'a> {\n     /// where   typaramseq = ( typaram ) | ( typaram , typaramseq )\n     pub fn parse_generics(&mut self) -> ast::Generics {\n         if self.eat(&token::LT) {\n-            let lifetimes = self.parse_lifetimes();\n+            let lifetime_defs = self.parse_lifetime_defs();\n             let mut seen_default = false;\n             let ty_params = self.parse_seq_to_gt(Some(token::COMMA), |p| {\n                 p.forbid_lifetime();\n@@ -3678,14 +3711,14 @@ impl<'a> Parser<'a> {\n                 }\n                 ty_param\n             });\n-            ast::Generics { lifetimes: lifetimes, ty_params: ty_params }\n+            ast::Generics { lifetimes: lifetime_defs, ty_params: ty_params }\n         } else {\n             ast_util::empty_generics()\n         }\n     }\n \n     fn parse_generic_values_after_lt(&mut self) -> (Vec<ast::Lifetime>, Vec<P<Ty>> ) {\n-        let lifetimes = self.parse_lifetimes();\n+        let lifetimes = self.parse_lifetimes(token::COMMA);\n         let result = self.parse_seq_to_gt(\n             Some(token::COMMA),\n             |p| {"}, {"sha": "d60e4cb3b542b4b8a3196e367ac8bffe6c12aabf", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=fcab98038c3b466d9ecd00b0f27e9c748e7acbde", "patch": "@@ -2082,10 +2082,26 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_lifetime(&mut self,\n-                          lifetime: &ast::Lifetime) -> IoResult<()> {\n+                          lifetime: &ast::Lifetime)\n+                          -> IoResult<()>\n+    {\n         self.print_name(lifetime.name)\n     }\n \n+    pub fn print_lifetime_def(&mut self,\n+                              lifetime: &ast::LifetimeDef)\n+                              -> IoResult<()>\n+    {\n+        try!(self.print_lifetime(&lifetime.lifetime));\n+        let mut sep = \":\";\n+        for v in lifetime.bounds.iter() {\n+            try!(word(&mut self.s, sep));\n+            try!(self.print_lifetime(v));\n+            sep = \"+\";\n+        }\n+        Ok(())\n+    }\n+\n     pub fn print_generics(&mut self,\n                           generics: &ast::Generics) -> IoResult<()> {\n         let total = generics.lifetimes.len() + generics.ty_params.len();\n@@ -2102,7 +2118,7 @@ impl<'a> State<'a> {\n                 |s, &idx| {\n                     if idx < generics.lifetimes.len() {\n                         let lifetime = generics.lifetimes.get(idx);\n-                        s.print_lifetime(lifetime)\n+                        s.print_lifetime_def(lifetime)\n                     } else {\n                         let idx = idx - generics.lifetimes.len();\n                         let param = generics.ty_params.get(idx);"}, {"sha": "647e81db1f1c03a28be271fd542a6c8b6c0eabff", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=fcab98038c3b466d9ecd00b0f27e9c748e7acbde", "patch": "@@ -122,7 +122,7 @@ pub trait Visitor<E: Clone> {\n     fn visit_lifetime_ref(&mut self, _lifetime: &Lifetime, _e: E) {\n         /*! Visits a reference to a lifetime */\n     }\n-    fn visit_lifetime_decl(&mut self, _lifetime: &Lifetime, _e: E) {\n+    fn visit_lifetime_decl(&mut self, _lifetime: &LifetimeDef, _e: E) {\n         /*! Visits a declaration of a lifetime */\n     }\n     fn visit_explicit_self(&mut self, es: &ExplicitSelf, e: E) {\n@@ -424,7 +424,7 @@ pub fn walk_ty<E: Clone, V: Visitor<E>>(visitor: &mut V, typ: &Ty, env: E) {\n }\n \n fn walk_lifetime_decls<E: Clone, V: Visitor<E>>(visitor: &mut V,\n-                                                lifetimes: &Vec<Lifetime>,\n+                                                lifetimes: &Vec<LifetimeDef>,\n                                                 env: E) {\n     for l in lifetimes.iter() {\n         visitor.visit_lifetime_decl(l, env.clone());"}, {"sha": "0f79716f370e8fd3e499b6eccd6a88b2914b747c", "filename": "src/test/compile-fail/regions-bound-lists-feature-gate-2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Ftest%2Fcompile-fail%2Fregions-bound-lists-feature-gate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Ftest%2Fcompile-fail%2Fregions-bound-lists-feature-gate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bound-lists-feature-gate-2.rs?ref=fcab98038c3b466d9ecd00b0f27e9c748e7acbde", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-pretty\n+\n+trait Foo { }\n+\n+fn foo<'a, 'b:'a>() { //~ ERROR region bounds require `issue_5723_bootstrap`\n+}\n+\n+pub fn main() { }"}, {"sha": "0a95a89d57c325a150b759fad8bb1bf3d4519030", "filename": "src/test/run-pass/regions-bound-lists-feature-gate-2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Ftest%2Frun-pass%2Fregions-bound-lists-feature-gate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcab98038c3b466d9ecd00b0f27e9c748e7acbde/src%2Ftest%2Frun-pass%2Fregions-bound-lists-feature-gate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-bound-lists-feature-gate-2.rs?ref=fcab98038c3b466d9ecd00b0f27e9c748e7acbde", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-pretty\n+\n+#![feature(issue_5723_bootstrap)]\n+\n+trait Foo { }\n+\n+fn foo<'a, 'b, 'c:'a+'b, 'd>() {\n+}\n+\n+pub fn main() { }"}]}