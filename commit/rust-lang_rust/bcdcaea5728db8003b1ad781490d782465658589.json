{"sha": "bcdcaea5728db8003b1ad781490d782465658589", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZGNhZWE1NzI4ZGI4MDAzYjFhZDc4MTQ5MGQ3ODI0NjU2NTg1ODk=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-11-12T01:35:25Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-06-25T21:15:40Z"}, "message": "revive old commented-out test cases as ignored test cases for hygiene", "tree": {"sha": "7b35a1d4f2b79eade66578b42200ecdd839645fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b35a1d4f2b79eade66578b42200ecdd839645fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcdcaea5728db8003b1ad781490d782465658589", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcdcaea5728db8003b1ad781490d782465658589", "html_url": "https://github.com/rust-lang/rust/commit/bcdcaea5728db8003b1ad781490d782465658589", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcdcaea5728db8003b1ad781490d782465658589/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8558f2300a01a813f66f54d2ff6ee8ef918b3bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8558f2300a01a813f66f54d2ff6ee8ef918b3bb", "html_url": "https://github.com/rust-lang/rust/commit/c8558f2300a01a813f66f54d2ff6ee8ef918b3bb"}], "stats": {"total": 65, "additions": 59, "deletions": 6}, "files": [{"sha": "d24c2be5a74de76980750c3e9b9ca25f81b3f73a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bcdcaea5728db8003b1ad781490d782465658589/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdcaea5728db8003b1ad781490d782465658589/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=bcdcaea5728db8003b1ad781490d782465658589", "patch": "@@ -835,6 +835,7 @@ impl Arg {\n     }\n }\n \n+// represents the header (not the body) of a function declaration\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash)]\n pub struct FnDecl {\n     pub inputs: Vec<Arg>,"}, {"sha": "eca04148513c0b3886b68fb95c08e994f331df97", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 58, "deletions": 6, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/bcdcaea5728db8003b1ad781490d782465658589/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdcaea5728db8003b1ad781490d782465658589/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=bcdcaea5728db8003b1ad781490d782465658589", "patch": "@@ -658,9 +658,9 @@ fn expand_non_macro_stmt(s: &Stmt, fld: &mut MacroExpander)\n     }\n }\n \n-// a visitor that extracts the pat_ident paths\n+// a visitor that extracts the pat_ident (binding) paths\n // from a given thingy and puts them in a mutable\n-// array (passed in to the traversal)\n+// array (passed in to the traversal).\n #[deriving(Clone)]\n pub struct NewNameFinderContext {\n     ident_accumulator: Vec<ast::Ident> ,\n@@ -1026,7 +1026,7 @@ mod test {\n     use parse;\n     use parse::token;\n     use util::parser_testing::{string_to_parser};\n-    use util::parser_testing::{string_to_pat, strs_to_idents};\n+    use util::parser_testing::{string_to_pat, string_to_crate, strs_to_idents};\n     use visit;\n     use visit::Visitor;\n \n@@ -1059,7 +1059,7 @@ mod test {\n     }\n \n     // return a visitor that extracts the paths\n-    // from a given pattern and puts them in a mutable\n+    // from a given thingy and puts them in a mutable\n     // array (passed in to the traversal)\n     pub fn new_path_finder(paths: Vec<ast::Path> ) -> NewPathExprFinderContext {\n         NewPathExprFinderContext {\n@@ -1188,7 +1188,7 @@ mod test {\n     // The comparisons are done post-mtwt-resolve, so we're comparing renamed\n     // names; differences in marks don't matter any more.\n     //\n-    // oog... I also want tests that check \"binding-identifier-=?\". That is,\n+    // oog... I also want tests that check \"bound-identifier-=?\". That is,\n     // not just \"do these have the same name\", but \"do they have the same\n     // name *and* the same marks\"? Understanding this is really pretty painful.\n     // in principle, you might want to control this boolean on a per-varref basis,\n@@ -1217,12 +1217,55 @@ mod test {\n                 (\"macro_rules! letty(($x:ident) => (let $x = 15;))\n                   macro_rules! user(($x:ident) => ({letty!($x); $x}))\n                   fn main() -> int {user!(z)}\",\n-                 vec!(vec!(0)), false));\n+                 vec!(vec!(0)), false)\n+                );\n         for (idx,s) in tests.iter().enumerate() {\n             run_renaming_test(s,idx);\n         }\n     }\n \n+    // no longer a fixme #8062: this test exposes a *potential* bug; our system does\n+    // not behave exactly like MTWT, but a conversation with Matthew Flatt\n+    // suggests that this can only occur in the presence of local-expand, which\n+    // we have no plans to support. ... unless it's needed for item hygiene....\n+    #[ignore]\n+    #[test] fn issue_8062(){\n+        run_renaming_test(\n+            &(\"fn main() {let hrcoo = 19; macro_rules! getx(()=>(hrcoo)); getx!();}\",\n+              vec!(vec!(0)), true), 0)\n+    }\n+\n+    // FIXME #6994:\n+    // the z flows into and out of two macros (g & f) along one path, and one\n+    // (just g) along the other, so the result of the whole thing should\n+    // be \"let z_123 = 3; z_123\"\n+    #[ignore]\n+    #[test] fn issue_6994(){\n+        run_renaming_test(\n+            &(\"macro_rules! g (($x:ident) =>\n+              ({macro_rules! f(($y:ident)=>({let $y=3;$x}));f!($x)}))\n+              fn a(){g!(z)}\",\n+              vec!(vec!(0)),false),\n+            0)\n+    }\n+\n+    // create a really evil test case where a $x appears inside a binding of $x\n+    // but *shouldnt* bind because it was inserted by a different macro....\n+    // can't write this test case until we have macro-generating macros.\n+\n+    // FIXME #9383 : lambda var hygiene\n+    // interesting... can't even write this test, yet, because the name-finder\n+    // only finds pattern vars. Time to upgrade test framework.\n+    /*#[test]\n+    fn issue_9383(){\n+        run_renaming_test(\n+            &(\"macro_rules! bad_macro (($ex:expr) => ({(|_x| { $ex }) (9) }))\n+              fn takes_x(_x : int) { assert_eq!(bad_macro!(_x),8); }\n+              fn main() { takes_x(8); }\",\n+              vec!(vec!()),false),\n+            0)\n+    }*/\n+\n     // run one of the renaming tests\n     fn run_renaming_test(t: &RenamingTest, test_idx: uint) {\n         let invalid_name = token::special_idents::invalid.name;\n@@ -1358,4 +1401,13 @@ foo_module!()\n                    strs_to_idents(vec!(\"a\",\"c\",\"b\",\"d\")));\n     }\n \n+    #[test]\n+    fn pat_idents_2(){\n+        let the_crate = string_to_crate(\"fn main (a : int) -> int {|b| {a + b} }\".to_string());\n+        let mut pat_idents = new_name_finder(Vec::new());\n+        pat_idents.visit_mod(&the_crate.module, the_crate.span, ast::CRATE_NODE_ID, ());\n+        assert_eq!(pat_idents.ident_accumulator,\n+                   strs_to_idents(vec!(\"a\",\"b\")));\n+    }\n+\n }"}]}