{"sha": "c4f59605d2f460aadaa23c92dda826b8906ebc4b", "node_id": "C_kwDOAAsO6NoAKGM0ZjU5NjA1ZDJmNDYwYWFkYWEyM2M5MmRkYTgyNmI4OTA2ZWJjNGI", "commit": {"author": {"name": "Hampus Lidin", "email": "hampuslidin@gmail.com", "date": "2022-08-21T18:56:29Z"}, "committer": {"name": "Hampus Lidin", "email": "hampuslidin@gmail.com", "date": "2022-08-22T18:19:19Z"}, "message": "Refactor remaining diagnostics", "tree": {"sha": "1652ff1b0f4e835687541de58f8805fd7dbbe33f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1652ff1b0f4e835687541de58f8805fd7dbbe33f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4f59605d2f460aadaa23c92dda826b8906ebc4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4f59605d2f460aadaa23c92dda826b8906ebc4b", "html_url": "https://github.com/rust-lang/rust/commit/c4f59605d2f460aadaa23c92dda826b8906ebc4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4f59605d2f460aadaa23c92dda826b8906ebc4b/comments", "author": {"login": "hampuslidin", "id": 9679284, "node_id": "MDQ6VXNlcjk2NzkyODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9679284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hampuslidin", "html_url": "https://github.com/hampuslidin", "followers_url": "https://api.github.com/users/hampuslidin/followers", "following_url": "https://api.github.com/users/hampuslidin/following{/other_user}", "gists_url": "https://api.github.com/users/hampuslidin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hampuslidin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hampuslidin/subscriptions", "organizations_url": "https://api.github.com/users/hampuslidin/orgs", "repos_url": "https://api.github.com/users/hampuslidin/repos", "events_url": "https://api.github.com/users/hampuslidin/events{/privacy}", "received_events_url": "https://api.github.com/users/hampuslidin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hampuslidin", "id": 9679284, "node_id": "MDQ6VXNlcjk2NzkyODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9679284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hampuslidin", "html_url": "https://github.com/hampuslidin", "followers_url": "https://api.github.com/users/hampuslidin/followers", "following_url": "https://api.github.com/users/hampuslidin/following{/other_user}", "gists_url": "https://api.github.com/users/hampuslidin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hampuslidin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hampuslidin/subscriptions", "organizations_url": "https://api.github.com/users/hampuslidin/orgs", "repos_url": "https://api.github.com/users/hampuslidin/repos", "events_url": "https://api.github.com/users/hampuslidin/events{/privacy}", "received_events_url": "https://api.github.com/users/hampuslidin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b731bfa2d42641472028e35aeb088bf1e113f366", "url": "https://api.github.com/repos/rust-lang/rust/commits/b731bfa2d42641472028e35aeb088bf1e113f366", "html_url": "https://github.com/rust-lang/rust/commit/b731bfa2d42641472028e35aeb088bf1e113f366"}], "stats": {"total": 196, "additions": 93, "deletions": 103}, "files": [{"sha": "96cedfd6fb06e9dae22e4dd0b5c778052e12fde6", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 63, "deletions": 102, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/c4f59605d2f460aadaa23c92dda826b8906ebc4b/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4f59605d2f460aadaa23c92dda826b8906ebc4b/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=c4f59605d2f460aadaa23c92dda826b8906ebc4b", "patch": "@@ -3,7 +3,6 @@\n use rustc_ast as ast;\n use rustc_ast::{Attribute, Lit, LitKind, MetaItem, MetaItemKind, NestedMetaItem, NodeId};\n use rustc_ast_pretty::pprust;\n-use rustc_errors::{struct_span_err, Applicability};\n use rustc_feature::{find_gated_cfg, is_builtin_attr_name, Features, GatedCfg};\n use rustc_macros::HashStable_Generic;\n use rustc_session::lint::builtin::UNEXPECTED_CFGS;\n@@ -14,7 +13,7 @@ use rustc_span::hygiene::Transparency;\n use rustc_span::{symbol::sym, symbol::Symbol, Span};\n use std::num::NonZeroU32;\n \n-use crate::session_diagnostics;\n+use crate::session_diagnostics::{self, IncorrectReprFormatGenericCause};\n \n pub fn is_builtin_attr(attr: &Attribute) -> bool {\n     attr.is_doc_comment() || attr.ident().filter(|ident| is_builtin_attr_name(ident.name)).is_some()\n@@ -276,7 +275,7 @@ where\n                     *item = Some(v);\n                     true\n                 } else {\n-                    sess.emit_err(session_diagnostics::InvalidMetaItem { span: meta.span });\n+                    sess.emit_err(session_diagnostics::IncorrectMetaItem { span: meta.span });\n                     false\n                 }\n             };\n@@ -788,7 +787,6 @@ where\n     I: Iterator<Item = &'a Attribute>,\n {\n     let mut depr: Option<(Deprecation, Span)> = None;\n-    let diagnostic = &sess.parse_sess.span_diagnostic;\n     let is_rustc = sess.features_untracked().staged_api;\n \n     'outer: for attr in attrs_iter {\n@@ -829,8 +827,12 @@ where\n                                 ),\n                             );\n                         } else {\n-                            struct_span_err!(diagnostic, meta.span, E0551, \"incorrect meta item\")\n-                                .emit();\n+                            // FIXME: This diagnostic is identical to `IncorrectMetaItem`, barring\n+                            // the error code. Consider changing this to `IncorrectMetaItem`. See\n+                            // #51489.\n+                            sess.emit_err(session_diagnostics::IncorrectMetaItem2 {\n+                                span: meta.span,\n+                            });\n                         }\n \n                         false\n@@ -971,19 +973,9 @@ pub fn parse_repr_attr(sess: &Session, attr: &Attribute) -> Vec<ReprAttr> {\n                     sym::simd => Some(ReprSimd),\n                     sym::transparent => Some(ReprTransparent),\n                     sym::align => {\n-                        let mut err = struct_span_err!(\n-                            diagnostic,\n-                            item.span(),\n-                            E0589,\n-                            \"invalid `repr(align)` attribute: `align` needs an argument\"\n-                        );\n-                        err.span_suggestion(\n-                            item.span(),\n-                            \"supply an argument here\",\n-                            \"align(...)\",\n-                            Applicability::HasPlaceholders,\n-                        );\n-                        err.emit();\n+                        sess.emit_err(session_diagnostics::InvalidReprAlignNeedArg {\n+                            span: item.span(),\n+                        });\n                         recognised = true;\n                         None\n                     }\n@@ -1012,109 +1004,78 @@ pub fn parse_repr_attr(sess: &Session, attr: &Attribute) -> Vec<ReprAttr> {\n                     || int_type_of_word(name).is_some()\n                 {\n                     recognised = true;\n-                    struct_span_err!(\n-                                diagnostic,\n-                                item.span(),\n-                                E0552,\n-                                \"invalid representation hint: `{}` does not take a parenthesized argument list\",\n-                                name.to_ident_string(),\n-                            ).emit();\n+                    sess.emit_err(session_diagnostics::InvalidReprHintNoParen {\n+                        span: item.span(),\n+                        name: name.to_ident_string(),\n+                    });\n                 }\n                 if let Some(literal_error) = literal_error {\n-                    struct_span_err!(\n-                        diagnostic,\n-                        item.span(),\n-                        E0589,\n-                        \"invalid `repr({})` attribute: {}\",\n-                        name.to_ident_string(),\n-                        literal_error\n-                    )\n-                    .emit();\n+                    sess.emit_err(session_diagnostics::InvalidReprGeneric {\n+                        span: item.span(),\n+                        repr_arg: name.to_ident_string(),\n+                        error_part: literal_error,\n+                    });\n                 }\n             } else if let Some(meta_item) = item.meta_item() {\n                 if let MetaItemKind::NameValue(ref value) = meta_item.kind {\n                     if meta_item.has_name(sym::align) || meta_item.has_name(sym::packed) {\n                         let name = meta_item.name_or_empty().to_ident_string();\n                         recognised = true;\n-                        let mut err = struct_span_err!(\n-                            diagnostic,\n-                            item.span(),\n-                            E0693,\n-                            \"incorrect `repr({})` attribute format\",\n-                            name,\n-                        );\n-                        match value.kind {\n-                            ast::LitKind::Int(int, ast::LitIntType::Unsuffixed) => {\n-                                err.span_suggestion(\n-                                    item.span(),\n-                                    \"use parentheses instead\",\n-                                    format!(\"{}({})\", name, int),\n-                                    Applicability::MachineApplicable,\n-                                );\n-                            }\n-                            ast::LitKind::Str(s, _) => {\n-                                err.span_suggestion(\n-                                    item.span(),\n-                                    \"use parentheses instead\",\n-                                    format!(\"{}({})\", name, s),\n-                                    Applicability::MachineApplicable,\n-                                );\n-                            }\n-                            _ => {}\n-                        }\n-                        err.emit();\n+                        sess.emit_err(session_diagnostics::IncorrectReprFormatGeneric {\n+                            span: item.span(),\n+                            repr_arg: &name,\n+                            cause: match value.kind {\n+                                ast::LitKind::Int(int, ast::LitIntType::Unsuffixed) => {\n+                                    Some(IncorrectReprFormatGenericCause::Int {\n+                                        span: item.span(),\n+                                        name: &name,\n+                                        int,\n+                                    })\n+                                }\n+                                ast::LitKind::Str(symbol, _) => {\n+                                    Some(IncorrectReprFormatGenericCause::Symbol {\n+                                        span: item.span(),\n+                                        name: &name,\n+                                        symbol,\n+                                    })\n+                                }\n+                                _ => None,\n+                            },\n+                        });\n                     } else {\n                         if matches!(\n                             meta_item.name_or_empty(),\n                             sym::C | sym::simd | sym::transparent\n                         ) || int_type_of_word(meta_item.name_or_empty()).is_some()\n                         {\n                             recognised = true;\n-                            struct_span_err!(\n-                                diagnostic,\n-                                meta_item.span,\n-                                E0552,\n-                                \"invalid representation hint: `{}` does not take a value\",\n-                                meta_item.name_or_empty().to_ident_string(),\n-                            )\n-                            .emit();\n+                            sess.emit_err(session_diagnostics::InvalidReprHintNoValue {\n+                                span: meta_item.span,\n+                                name: meta_item.name_or_empty().to_ident_string(),\n+                            });\n                         }\n                     }\n                 } else if let MetaItemKind::List(_) = meta_item.kind {\n                     if meta_item.has_name(sym::align) {\n                         recognised = true;\n-                        struct_span_err!(\n-                            diagnostic,\n-                            meta_item.span,\n-                            E0693,\n-                            \"incorrect `repr(align)` attribute format: \\\n-                                 `align` takes exactly one argument in parentheses\"\n-                        )\n-                        .emit();\n+                        sess.emit_err(session_diagnostics::IncorrectReprFormatAlignOneArg {\n+                            span: meta_item.span,\n+                        });\n                     } else if meta_item.has_name(sym::packed) {\n                         recognised = true;\n-                        struct_span_err!(\n-                            diagnostic,\n-                            meta_item.span,\n-                            E0552,\n-                            \"incorrect `repr(packed)` attribute format: \\\n-                                 `packed` takes exactly one parenthesized argument, \\\n-                                 or no parentheses at all\"\n-                        )\n-                        .emit();\n+                        sess.emit_err(session_diagnostics::IncorrectReprFormatPackedOneOrZeroArg {\n+                            span: meta_item.span,\n+                        });\n                     } else if matches!(\n                         meta_item.name_or_empty(),\n                         sym::C | sym::simd | sym::transparent\n                     ) || int_type_of_word(meta_item.name_or_empty()).is_some()\n                     {\n                         recognised = true;\n-                        struct_span_err!(\n-                                diagnostic,\n-                                meta_item.span,\n-                                E0552,\n-                                \"invalid representation hint: `{}` does not take a parenthesized argument list\",\n-                                meta_item.name_or_empty().to_ident_string(),\n-                            ).emit();\n+                        sess.emit_err(session_diagnostics::InvalidReprHintNoParen {\n+                            span: meta_item.span,\n+                            name: meta_item.name_or_empty().to_ident_string(),\n+                        });\n                     }\n                 }\n             }\n@@ -1211,10 +1172,10 @@ fn allow_unstable<'a>(\n     let list = attrs\n         .filter_map(move |attr| {\n             attr.meta_item_list().or_else(|| {\n-                sess.diagnostic().span_err(\n-                    attr.span,\n-                    &format!(\"`{}` expects a list of feature names\", symbol.to_ident_string()),\n-                );\n+                sess.emit_err(session_diagnostics::ExpectsFeatureList {\n+                    span: attr.span,\n+                    name: symbol.to_ident_string(),\n+                });\n                 None\n             })\n         })\n@@ -1223,10 +1184,10 @@ fn allow_unstable<'a>(\n     list.into_iter().filter_map(move |it| {\n         let name = it.ident().map(|ident| ident.name);\n         if name.is_none() {\n-            sess.diagnostic().span_err(\n-                it.span(),\n-                &format!(\"`{}` expects feature names\", symbol.to_ident_string()),\n-            );\n+            sess.emit_err(session_diagnostics::ExpectsFeatures {\n+                span: it.span(),\n+                name: symbol.to_ident_string(),\n+            });\n         }\n         name\n     })"}, {"sha": "ad4a70fac8c5f4c3c6b9fb96cc400ad93934a95f", "filename": "compiler/rustc_error_messages/locales/en-US/attr.ftl", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c4f59605d2f460aadaa23c92dda826b8906ebc4b/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fattr.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/c4f59605d2f460aadaa23c92dda826b8906ebc4b/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fattr.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fattr.ftl?ref=c4f59605d2f460aadaa23c92dda826b8906ebc4b", "patch": "@@ -28,7 +28,7 @@ attr_unsupported_literal_deprecated_kv_pair =\n attr_unsupported_literal_suggestion =\n     consider removing the prefix\n \n-attr_invalid_meta_item =\n+attr_incorrect_meta_item =\n     incorrect meta item\n \n attr_invalid_issue_string =\n@@ -76,3 +76,32 @@ attr_deprecated_item_suggestion =\n \n attr_missing_note =\n     missing 'note'\n+\n+attr_invalid_repr_align_need_arg =\n+    invalid `repr(align)` attribute: `align` needs an argument\n+    .suggestion = supply an argument here\n+\n+attr_invalid_repr_generic =\n+    invalid `repr({$repr_arg})` attribute: {$error_part}\n+\n+attr_invalid_repr_hint_no_paren =\n+    invalid representation hint: `{$name}` does not take a parenthesized argument list\n+\n+attr_invalid_repr_hint_no_value =\n+    invalid representation hint: `{$name}` does not take a value\n+\n+attr_incorrect_repr_format_generic =\n+    incorrect `repr({$repr_arg})` attribute format\n+    .suggestion = use parentheses instead\n+\n+attr_incorrect_repr_format_align_one_arg =\n+    incorrect `repr(align)` attribute format: `align` takes exactly one argument in parentheses\n+\n+attr_incorrect_repr_format_packed_one_or_zero_arg =\n+    incorrect `repr(packed)` attribute format: `packed` takes exactly one parenthesized argument, or no parentheses at all\n+\n+attr_expects_feature_list =\n+    `{$name}` expects a list of feature names\n+\n+attr_expects_features =\n+    `{$name}` expects feature names"}]}