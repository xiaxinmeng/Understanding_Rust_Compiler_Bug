{"sha": "ceb634a7323b9957ae94873c6bcb623bf61af34f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlYjYzNGE3MzIzYjk5NTdhZTk0ODczYzZiY2I2MjNiZjYxYWYzNGY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-01-29T19:47:09Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:14Z"}, "message": "Update tests", "tree": {"sha": "a3fbc96e78aca5501d18a204bc66f6748949ae69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3fbc96e78aca5501d18a204bc66f6748949ae69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ceb634a7323b9957ae94873c6bcb623bf61af34f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53YACgkQpp+NIls6\n19lfNQ/6Aqt6K4tJvlNuAMSZxt54lFLrqtFlZrmDmY0VNKOJHwAXbAx2YLjkyra9\n3ot1pJOcqmv7Ev8ZkhinPZ2U8d8Kjegz9NFkuLo+a082UW079ShhC3qjxagX9CUa\ncBUMJzhvIVMq0I5T14qZOlNp1ykamJddWnovzvYp5PfFF7IYSW78DvCk4Qzhmfu2\nDWa+o7NXqIPBbws3aOdfqzIQrmSlERu6xZq0NQXL3tY26+QHtNw/qwfPeuMfuJ5x\nGoyseRGUKyqVNNWGL5blvzICyfTnyA5KEdy6r9WXXTFWpX2RtGYbqYBsWK+Br9H8\nb63ylDxJg0lbRi5RlN8qunKFaP3c9Z4gpq8885vZBJ+YBihrqubTptGHeIzns0wb\nT05i8BrXrwmOQDaa7DiBuGRAQn5e5A7dz1gCXZmqeBr8KZjzc1xsqonJ1S+Ur5HX\nSCTifzD2hZh8l3aQjvPkuBoXsZFS9gOxF3W2AjO0Dr/Z9Yf1FuD0LHl90rZVasjd\n1wYF27rmuNA5gU5Mc2CGdplJwWBZKDGQ3RqKqn2eZV3fEhADazTTI6PdL23UOu6D\ngWtFcnrbMzPYRbR5S0PLmqMWLHo3Qcm2psdGOKO2DWNkw+Gn/FU3ig9nukMYlyGS\nf2JEbhXBy7lZ/jN1AUx8aW+HA6+e7MXvlbH8moHBm+STlJhGuNA=\n=xsVi\n-----END PGP SIGNATURE-----", "payload": "tree a3fbc96e78aca5501d18a204bc66f6748949ae69\nparent 45abb1ba8436efe960768b067a2683d577e16b8b\nauthor Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1517255229 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494454 +0100\n\nUpdate tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ceb634a7323b9957ae94873c6bcb623bf61af34f", "html_url": "https://github.com/rust-lang/rust/commit/ceb634a7323b9957ae94873c6bcb623bf61af34f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ceb634a7323b9957ae94873c6bcb623bf61af34f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45abb1ba8436efe960768b067a2683d577e16b8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/45abb1ba8436efe960768b067a2683d577e16b8b", "html_url": "https://github.com/rust-lang/rust/commit/45abb1ba8436efe960768b067a2683d577e16b8b"}], "stats": {"total": 132, "additions": 75, "deletions": 57}, "files": [{"sha": "5476d73fb6b4ba314b5ce4409e8fcb6e4adc78c1", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=ceb634a7323b9957ae94873c6bcb623bf61af34f", "patch": "@@ -185,7 +185,7 @@ impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n                     match b {\n                         Value::ByVal(PrimVal::Ptr(ptr)) => {\n                             let is_array_ptr = ty\n-                                .builtin_deref(true, ty::NoPreference)\n+                                .builtin_deref(true)\n                                 .and_then(|t| t.ty.builtin_index())\n                                 .map_or(false, |t| t == tcx.types.u8);\n                             assert!(is_array_ptr);\n@@ -560,7 +560,7 @@ fn max_slice_length<'p, 'a: 'p, 'tcx: 'a, I>(\n                 }\n             } => {\n                 let is_array_ptr = ty\n-                    .builtin_deref(true, ty::NoPreference)\n+                    .builtin_deref(true)\n                     .and_then(|t| t.ty.builtin_index())\n                     .map_or(false, |t| t == cx.tcx.types.u8);\n                 if is_array_ptr {\n@@ -949,7 +949,7 @@ fn slice_pat_covered_by_constructor(tcx: TyCtxt, _span: Span,\n             Value::ByVal(PrimVal::Ptr(ptr))\n         ), ty }) => {\n             let is_array_ptr = ty\n-                .builtin_deref(true, ty::NoPreference)\n+                .builtin_deref(true)\n                 .and_then(|t| t.ty.builtin_index())\n                 .map_or(false, |t| t == tcx.types.u8);\n             assert!(is_array_ptr);\n@@ -1089,7 +1089,7 @@ fn specialize<'p, 'a: 'p, 'tcx: 'a>(\n                 Slice(..) => match value.val {\n                     ConstVal::Value(Value::ByVal(PrimVal::Ptr(ptr))) => {\n                         let is_array_ptr = value.ty\n-                            .builtin_deref(true, ty::NoPreference)\n+                            .builtin_deref(true)\n                             .and_then(|t| t.ty.builtin_index())\n                             .map_or(false, |t| t == cx.tcx.types.u8);\n                         assert!(is_array_ptr);"}, {"sha": "039aecdb0b3c10380c53cb2d86750718312bcce9", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=ceb634a7323b9957ae94873c6bcb623bf61af34f", "patch": "@@ -198,7 +198,6 @@ impl<'b, 'a, 'tcx:'b> OptimizationFinder<'b, 'a, 'tcx> {\n             Rvalue::CheckedBinaryOp(op, ref left, ref right) |\n             Rvalue::BinaryOp(op, ref left, ref right) => {\n                 trace!(\"rvalue binop {:?} for {:?} and {:?}\", op, left, right);\n-                let left = self.eval_operand(left)?;\n                 let right = self.eval_operand(right)?;\n                 let def_id = if self.tcx.is_closure(self.source.def_id) {\n                     self.tcx.closure_base_def_id(self.source.def_id)\n@@ -218,8 +217,8 @@ impl<'b, 'a, 'tcx:'b> OptimizationFinder<'b, 'a, 'tcx> {\n                 let r = ecx.value_to_primval(ValTy { value: right.0, ty: right.1 }).ok()?;\n                 if op == BinOp::Shr || op == BinOp::Shl {\n                     let param_env = self.tcx.param_env(self.source.def_id);\n-                    let bits = (self.tcx, param_env).layout_of(left.1).unwrap().size.bits();\n-                    if r.to_bytes().ok()? >= bits as u128 {\n+                    let bits = (self.tcx, param_env).layout_of(place_ty).unwrap().size.bits();\n+                    if r.to_bytes().ok().map_or(false, |b| b >= bits as u128) {\n                         let scope_info = match self.mir.visibility_scope_info {\n                             ClearCrossCrate::Set(ref data) => data,\n                             ClearCrossCrate::Clear => return None,\n@@ -230,8 +229,10 @@ impl<'b, 'a, 'tcx:'b> OptimizationFinder<'b, 'a, 'tcx> {\n                             node_id,\n                             span,\n                             \"bitshift exceeds the type's number of bits\");\n+                        return None;\n                     }\n                 }\n+                let left = self.eval_operand(left)?;\n                 let l = ecx.value_to_primval(ValTy { value: left.0, ty: left.1 }).ok()?;\n                 trace!(\"const evaluating {:?} for {:?} and {:?}\", op, left, right);\n                 match ecx.binary_op(op, l, left.1, r, right.1) {"}, {"sha": "35e7a422562515f33eb68165722fc356c4d3817e", "filename": "src/test/compile-fail/array_const_index-0.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Ftest%2Fcompile-fail%2Farray_const_index-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Ftest%2Fcompile-fail%2Farray_const_index-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farray_const_index-0.rs?ref=ceb634a7323b9957ae94873c6bcb623bf61af34f", "patch": "@@ -11,6 +11,7 @@\n const A: &'static [i32] = &[];\n const B: i32 = (&A)[1];\n //~^ ERROR constant evaluation error\n+//~| ERROR E0080\n //~| index out of bounds: the len is 0 but the index is 1\n \n fn main() {"}, {"sha": "db4cfa4268919a90baeb86aed2d6613ffabb71d7", "filename": "src/test/compile-fail/array_const_index-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Ftest%2Fcompile-fail%2Farray_const_index-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Ftest%2Fcompile-fail%2Farray_const_index-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farray_const_index-1.rs?ref=ceb634a7323b9957ae94873c6bcb623bf61af34f", "patch": "@@ -11,6 +11,7 @@\n const A: [i32; 0] = [];\n const B: i32 = A[1];\n //~^ ERROR constant evaluation error\n+//~| ERROR E0080\n //~| index out of bounds: the len is 0 but the index is 1\n \n fn main() {"}, {"sha": "3182ffa73b08d435bbd32c7e38fa37ebb7f46070", "filename": "src/test/compile-fail/const-err-early.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs?ref=ceb634a7323b9957ae94873c6bcb623bf61af34f", "patch": "@@ -8,18 +8,27 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_indexing)]\n #![deny(const_err)]\n \n pub const A: i8 = -std::i8::MIN; //~ ERROR E0080\n //~| ERROR const_err\n //~| ERROR const_err\n+//~| ERROR E0080\n pub const B: u8 = 200u8 + 200u8; //~ ERROR E0080\n+//~| ERROR E0080\n pub const C: u8 = 200u8 * 4; //~ ERROR E0080\n+//~| ERROR E0080\n pub const D: u8 = 42u8 - (42u8 + 1); //~ ERROR E0080\n+//~| ERROR E0080\n pub const E: u8 = [5u8][1];\n //~^ ERROR E0080\n+//~| ERROR E0080\n \n fn main() {\n+    let _a = A;\n+    let _b = B;\n+    let _c = C;\n+    let _d = D;\n+    let _e = E;\n     let _e = [6u8][1];\n }"}, {"sha": "1e3150a74d985d11d79979149fedfe6ba8d0a5fa", "filename": "src/test/compile-fail/const-err-multi.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs?ref=ceb634a7323b9957ae94873c6bcb623bf61af34f", "patch": "@@ -14,12 +14,17 @@ pub const A: i8 = -std::i8::MIN;\n //~^ ERROR E0080\n //~| ERROR const_err\n //~| ERROR const_err\n+//~| ERROR E0080\n pub const B: i8 = A;\n //~^ ERROR E0080\n+//~| ERROR E0080\n pub const C: u8 = A as u8;\n //~^ ERROR E0080\n+//~| ERROR E0080\n pub const D: i8 = 50 - A;\n //~^ ERROR E0080\n+//~| ERROR E0080\n \n fn main() {\n+    let _ = (A, B, C, D);\n }"}, {"sha": "5f55cc82e6d83dea2959d638c529b5d0e4e62ce1", "filename": "src/test/compile-fail/const-err.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Ftest%2Fcompile-fail%2Fconst-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Ftest%2Fcompile-fail%2Fconst-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err.rs?ref=ceb634a7323b9957ae94873c6bcb623bf61af34f", "patch": "@@ -24,6 +24,7 @@ fn black_box<T>(_: T) {\n const FOO: u8 = [5u8][1];\n //~^ ERROR constant evaluation error\n //~| index out of bounds: the len is 1 but the index is 1\n+//~| ERROR E0080\n \n fn main() {\n     black_box((FOO, FOO));"}, {"sha": "aa735cc045364ac70f27e91f6d66d15090e67322", "filename": "src/test/compile-fail/const-eval-overflow2.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow2.rs?ref=ceb634a7323b9957ae94873c6bcb623bf61af34f", "patch": "@@ -22,57 +22,57 @@ use std::{i8, i16, i32, i64, isize};\n use std::{u8, u16, u32, u64, usize};\n \n const VALS_I8: (i8,) =\n-    (\n-     i8::MIN - 1,\n      //~^ ERROR constant evaluation error\n      //~| attempt to subtract with overflow\n+    (\n+     i8::MIN - 1,\n      );\n \n const VALS_I16: (i16,) =\n-    (\n-     i16::MIN - 1,\n      //~^ ERROR constant evaluation error\n      //~| attempt to subtract with overflow\n+    (\n+     i16::MIN - 1,\n      );\n \n const VALS_I32: (i32,) =\n-    (\n-     i32::MIN - 1,\n      //~^ ERROR constant evaluation error\n      //~| attempt to subtract with overflow\n+    (\n+     i32::MIN - 1,\n      );\n \n const VALS_I64: (i64,) =\n-    (\n-     i64::MIN - 1,\n      //~^ ERROR constant evaluation error\n      //~| attempt to subtract with overflow\n+    (\n+     i64::MIN - 1,\n      );\n \n const VALS_U8: (u8,) =\n-    (\n-     u8::MIN - 1,\n      //~^ ERROR constant evaluation error\n      //~| attempt to subtract with overflow\n+    (\n+     u8::MIN - 1,\n      );\n \n const VALS_U16: (u16,) = (\n-     u16::MIN - 1,\n      //~^ ERROR constant evaluation error\n      //~| attempt to subtract with overflow\n+     u16::MIN - 1,\n      );\n \n const VALS_U32: (u32,) = (\n-     u32::MIN - 1,\n      //~^ ERROR constant evaluation error\n      //~| attempt to subtract with overflow\n+     u32::MIN - 1,\n      );\n \n const VALS_U64: (u64,) =\n-    (\n-     u64::MIN - 1,\n      //~^ ERROR constant evaluation error\n      //~| attempt to subtract with overflow\n+    (\n+     u64::MIN - 1,\n      );\n \n fn main() {"}, {"sha": "01c3ea1ff425f6dfa33f85be29fd966bd6f4da7e", "filename": "src/test/compile-fail/const-eval-overflow2b.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow2b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow2b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow2b.rs?ref=ceb634a7323b9957ae94873c6bcb623bf61af34f", "patch": "@@ -22,57 +22,57 @@ use std::{i8, i16, i32, i64, isize};\n use std::{u8, u16, u32, u64, usize};\n \n const VALS_I8: (i8,) =\n-    (\n-     i8::MAX + 1,\n      //~^ ERROR constant evaluation error\n      //~| attempt to add with overflow\n+    (\n+     i8::MAX + 1,\n      );\n \n const VALS_I16: (i16,) =\n-    (\n-     i16::MAX + 1,\n      //~^ ERROR constant evaluation error\n      //~| attempt to add with overflow\n+    (\n+     i16::MAX + 1,\n      );\n \n const VALS_I32: (i32,) =\n-    (\n-     i32::MAX + 1,\n      //~^ ERROR constant evaluation error\n      //~| attempt to add with overflow\n+    (\n+     i32::MAX + 1,\n      );\n \n const VALS_I64: (i64,) =\n-    (\n-     i64::MAX + 1,\n      //~^ ERROR constant evaluation error\n      //~| attempt to add with overflow\n+    (\n+     i64::MAX + 1,\n      );\n \n const VALS_U8: (u8,) =\n-    (\n-     u8::MAX + 1,\n      //~^ ERROR constant evaluation error\n      //~| attempt to add with overflow\n+    (\n+     u8::MAX + 1,\n      );\n \n const VALS_U16: (u16,) = (\n-     u16::MAX + 1,\n      //~^ ERROR constant evaluation error\n      //~| attempt to add with overflow\n+     u16::MAX + 1,\n      );\n \n const VALS_U32: (u32,) = (\n-     u32::MAX + 1,\n      //~^ ERROR constant evaluation error\n      //~| attempt to add with overflow\n+     u32::MAX + 1,\n      );\n \n const VALS_U64: (u64,) =\n-    (\n-     u64::MAX + 1,\n      //~^ ERROR constant evaluation error\n      //~| attempt to add with overflow\n+    (\n+     u64::MAX + 1,\n      );\n \n fn main() {"}, {"sha": "dd7c151d85f69c6ad143872ed6d905478e8494ff", "filename": "src/test/compile-fail/const-eval-overflow2c.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow2c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow2c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow2c.rs?ref=ceb634a7323b9957ae94873c6bcb623bf61af34f", "patch": "@@ -22,57 +22,57 @@ use std::{i8, i16, i32, i64, isize};\n use std::{u8, u16, u32, u64, usize};\n \n const VALS_I8: (i8,) =\n-    (\n-     i8::MIN * 2,\n      //~^ ERROR constant evaluation error\n      //~| attempt to multiply with overflow\n+    (\n+     i8::MIN * 2,\n      );\n \n const VALS_I16: (i16,) =\n-    (\n-     i16::MIN * 2,\n      //~^ ERROR constant evaluation error\n      //~| attempt to multiply with overflow\n+    (\n+     i16::MIN * 2,\n      );\n \n const VALS_I32: (i32,) =\n-    (\n-     i32::MIN * 2,\n      //~^ ERROR constant evaluation error\n      //~| attempt to multiply with overflow\n+    (\n+     i32::MIN * 2,\n      );\n \n const VALS_I64: (i64,) =\n-    (\n-     i64::MIN * 2,\n      //~^ ERROR constant evaluation error\n      //~| attempt to multiply with overflow\n+    (\n+     i64::MIN * 2,\n      );\n \n const VALS_U8: (u8,) =\n-    (\n-     u8::MAX * 2,\n      //~^ ERROR constant evaluation error\n      //~| attempt to multiply with overflow\n+    (\n+     u8::MAX * 2,\n      );\n \n const VALS_U16: (u16,) = (\n-     u16::MAX * 2,\n      //~^ ERROR constant evaluation error\n      //~| attempt to multiply with overflow\n+     u16::MAX * 2,\n      );\n \n const VALS_U32: (u32,) = (\n-     u32::MAX * 2,\n      //~^ ERROR constant evaluation error\n      //~| attempt to multiply with overflow\n+     u32::MAX * 2,\n      );\n \n const VALS_U64: (u64,) =\n-    (\n-     u64::MAX * 2,\n      //~^ ERROR constant evaluation error\n      //~| attempt to multiply with overflow\n+    (\n+     u64::MAX * 2,\n      );\n \n fn main() {"}, {"sha": "cb884313f337353631329362fa8489e04cafdbb4", "filename": "src/test/compile-fail/const-slice-oob.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Ftest%2Fcompile-fail%2Fconst-slice-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Ftest%2Fcompile-fail%2Fconst-slice-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-slice-oob.rs?ref=ceb634a7323b9957ae94873c6bcb623bf61af34f", "patch": "@@ -13,6 +13,7 @@\n const FOO: &'static[u32] = &[1, 2, 3];\n const BAR: u32 = FOO[5];\n //~^ ERROR constant evaluation error [E0080]\n+//~| ERROR constant evaluation error [E0080]\n //~| index out of bounds: the len is 3 but the index is 5\n \n fn main() {"}, {"sha": "34b43c5badb516cfdbd1775fb35768a71475b19b", "filename": "src/test/compile-fail/lint-exceeding-bitshifts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs?ref=ceb634a7323b9957ae94873c6bcb623bf61af34f", "patch": "@@ -11,7 +11,6 @@\n #![deny(exceeding_bitshifts)]\n #![allow(unused_variables)]\n #![allow(dead_code, const_err)]\n-#![feature(const_indexing)]\n \n fn main() {\n       let n = 1u8 << 7;"}, {"sha": "a8027034fbee87cabee6c35539113ebc3a999ab3", "filename": "src/test/compile-fail/lint-exceeding-bitshifts2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts2.rs?ref=ceb634a7323b9957ae94873c6bcb623bf61af34f", "patch": "@@ -14,14 +14,14 @@\n \n fn main() {\n       let n = 1u8 << (4+3);\n-      let n = 1u8 << (4+4); //~ ERROR: const_err\n+      let n = 1u8 << (4+4); //~ ERROR: bitshift exceeds\n       let n = 1i64 >> [63][0];\n       let n = 1i64 >> [64][0]; // should be linting, needs to wait for const propagation\n \n       #[cfg(target_pointer_width = \"32\")]\n       const BITS: usize = 32;\n       #[cfg(target_pointer_width = \"64\")]\n       const BITS: usize = 64;\n-      let n = 1_isize << BITS; //~ ERROR: const_err\n-      let n = 1_usize << BITS; //~ ERROR: const_err\n+      let n = 1_isize << BITS; //~ ERROR: bitshift exceeds\n+      let n = 1_usize << BITS; //~ ERROR: bitshift exceeds\n }"}, {"sha": "f7cf8a68d568446119a63c5b9d74cd05794589d7", "filename": "src/test/compile-fail/lint-type-overflow2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Ftest%2Fcompile-fail%2Flint-type-overflow2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Ftest%2Fcompile-fail%2Flint-type-overflow2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-type-overflow2.rs?ref=ceb634a7323b9957ae94873c6bcb623bf61af34f", "patch": "@@ -17,7 +17,6 @@\n #[rustc_error]\n fn main() { //~ ERROR: compilation successful\n     let x2: i8 = --128; //~ warn: literal out of range for i8\n-    //~^ WARN constant evaluation error\n \n     let x = -3.40282357e+38_f32; //~ warn: literal out of range for f32\n     let x =  3.40282357e+38_f32; //~ warn: literal out of range for f32"}, {"sha": "cca63f23b7776bfe3e39b708715251e26a8cb773", "filename": "src/test/ui/error-codes/E0080.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Ftest%2Fui%2Ferror-codes%2FE0080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Ftest%2Fui%2Ferror-codes%2FE0080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0080.rs?ref=ceb634a7323b9957ae94873c6bcb623bf61af34f", "patch": "@@ -10,6 +10,7 @@\n \n enum Enum {\n     X = (1 << 500), //~ ERROR E0080\n+    //~| ERROR bitshift exceeds\n     //~| shift left with overflow\n     Y = (1 / 0) //~ ERROR E0080\n     //~| const_err"}, {"sha": "f98074bc554bbc857b364bb2108db676fd19cc33", "filename": "src/test/ui/infinite-recursion-const-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Ftest%2Fui%2Finfinite-recursion-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb634a7323b9957ae94873c6bcb623bf61af34f/src%2Ftest%2Fui%2Finfinite-recursion-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite-recursion-const-fn.rs?ref=ceb634a7323b9957ae94873c6bcb623bf61af34f", "patch": "@@ -11,8 +11,8 @@\n //https://github.com/rust-lang/rust/issues/31364\n \n #![feature(const_fn)]\n-const fn a() -> usize { b() }\n+const fn a() -> usize { b() } //~ ERROR constant evaluation error\n const fn b() -> usize { a() }\n-const ARR: [i32; a()] = [5; 6]; //~ ERROR constant evaluation error\n+const ARR: [i32; a()] = [5; 6];\n \n fn main(){}"}]}