{"sha": "c31879922e6ec8200eee6c144073eafcc4a73e38", "node_id": "C_kwDOAAsO6NoAKGMzMTg3OTkyMmU2ZWM4MjAwZWVlNmMxNDQwNzNlYWZjYzRhNzNlMzg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-14T05:53:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-14T05:53:39Z"}, "message": "Auto merge of #97035 - JohnTitor:rollup-00ko07z, r=JohnTitor\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #95365 (Use default alloc_error_handler for hermit)\n - #96986 ([save-analysis] Reference the variant not enum at struct-literal cons\u2026)\n - #96998 (rustdoc: remove weird, unused variable from source-files.js)\n - #97005 (Two small improvements of rustc_expand)\n - #97018 (Ensure that test fail if a JS error occurs)\n - #97031 (Drop tracking: handle invalid assignments better)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "4798c8a54088b321758177f7168f4f45d417ca96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4798c8a54088b321758177f7168f4f45d417ca96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c31879922e6ec8200eee6c144073eafcc4a73e38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c31879922e6ec8200eee6c144073eafcc4a73e38", "html_url": "https://github.com/rust-lang/rust/commit/c31879922e6ec8200eee6c144073eafcc4a73e38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c31879922e6ec8200eee6c144073eafcc4a73e38/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fbbe75fd73ed3c202cec3b0ba51eadf506f03fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fbbe75fd73ed3c202cec3b0ba51eadf506f03fe", "html_url": "https://github.com/rust-lang/rust/commit/9fbbe75fd73ed3c202cec3b0ba51eadf506f03fe"}, {"sha": "e239fd2b88b5993ddec49cdc93ba7b3edb2c56f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e239fd2b88b5993ddec49cdc93ba7b3edb2c56f4", "html_url": "https://github.com/rust-lang/rust/commit/e239fd2b88b5993ddec49cdc93ba7b3edb2c56f4"}], "stats": {"total": 64, "additions": 52, "deletions": 12}, "files": [{"sha": "ddfbef945efaa29bbef4a0ce98812f0304e36b35", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c31879922e6ec8200eee6c144073eafcc4a73e38/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c31879922e6ec8200eee6c144073eafcc4a73e38/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=c31879922e6ec8200eee6c144073eafcc4a73e38", "patch": "@@ -76,6 +76,7 @@ crate use ParseResult::*;\n use crate::mbe::{KleeneOp, TokenTree};\n \n use rustc_ast::token::{self, DocComment, Nonterminal, NonterminalKind, Token};\n+use rustc_lint_defs::pluralize;\n use rustc_parse::parser::{NtOrTt, Parser};\n use rustc_span::symbol::MacroRulesNormalizedIdent;\n use rustc_span::Span;\n@@ -668,8 +669,7 @@ impl TtParser {\n                 self.macro_name,\n                 match self.next_mps.len() {\n                     0 => format!(\"built-in NTs {}.\", nts),\n-                    1 => format!(\"built-in NTs {} or 1 other option.\", nts),\n-                    n => format!(\"built-in NTs {} or {} other options.\", nts, n),\n+                    n => format!(\"built-in NTs {} or {n} other option{s}.\", nts, s = pluralize!(n)),\n                 }\n             ),\n         )"}, {"sha": "4cc3169180ea5ea01638bd0f83c7afd09512a792", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c31879922e6ec8200eee6c144073eafcc4a73e38/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c31879922e6ec8200eee6c144073eafcc4a73e38/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=c31879922e6ec8200eee6c144073eafcc4a73e38", "patch": "@@ -175,7 +175,7 @@ impl TTMacroExpander for MacroRulesMacroExpander {\n         if !self.valid {\n             return DummyResult::any(sp);\n         }\n-        generic_extension(\n+        expand_macro(\n             cx,\n             sp,\n             self.span,\n@@ -202,8 +202,9 @@ fn trace_macros_note(cx_expansions: &mut FxHashMap<Span, Vec<String>>, sp: Span,\n     cx_expansions.entry(sp).or_default().push(message);\n }\n \n-/// Given `lhses` and `rhses`, this is the new macro we create\n-fn generic_extension<'cx, 'tt>(\n+/// Expands the rules based macro defined by `lhses` and `rhses` for a given\n+/// input `arg`.\n+fn expand_macro<'cx, 'tt>(\n     cx: &'cx mut ExtCtxt<'_>,\n     sp: Span,\n     def_span: Span,"}, {"sha": "fe417f45e88d972d16e2ddfdb35ffabee5ae37a6", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c31879922e6ec8200eee6c144073eafcc4a73e38/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c31879922e6ec8200eee6c144073eafcc4a73e38/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=c31879922e6ec8200eee6c144073eafcc4a73e38", "patch": "@@ -780,13 +780,18 @@ impl<'tcx> DumpVisitor<'tcx> {\n         variant: &'tcx ty::VariantDef,\n         rest: Option<&'tcx hir::Expr<'tcx>>,\n     ) {\n-        if let Some(struct_lit_data) = self.save_ctxt.get_expr_data(ex) {\n+        if let Some(_ex_res_data) = self.save_ctxt.get_expr_data(ex) {\n             if let hir::QPath::Resolved(_, path) = path {\n                 self.write_sub_paths_truncated(path);\n             }\n-            down_cast_data!(struct_lit_data, RefData, ex.span);\n+            // For MyEnum::MyVariant, get_expr_data gives us MyEnum, not MyVariant.\n+            // For recording the span's ref id, we want MyVariant.\n             if !generated_code(ex.span) {\n-                self.dumper.dump_ref(struct_lit_data);\n+                let sub_span = path.last_segment_span();\n+                let span = self.save_ctxt.span_from_span(sub_span);\n+                let reff =\n+                    Ref { kind: RefKind::Type, span, ref_id: id_from_def_id(variant.def_id) };\n+                self.dumper.dump_ref(reff);\n             }\n \n             for field in fields {"}, {"sha": "e89a8961996158f24c2eb9517ac1f52dd90c8239", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/record_consumed_borrow.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c31879922e6ec8200eee6c144073eafcc4a73e38/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c31879922e6ec8200eee6c144073eafcc4a73e38/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs?ref=c31879922e6ec8200eee6c144073eafcc4a73e38", "patch": "@@ -180,6 +180,15 @@ impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n         diag_expr_id: HirId,\n     ) {\n         debug!(\"mutate {assignee_place:?}; diag_expr_id={diag_expr_id:?}\");\n+\n+        if assignee_place.place.base == PlaceBase::Rvalue\n+            && assignee_place.place.projections.is_empty()\n+        {\n+            // Assigning to an Rvalue is illegal unless done through a dereference. We would have\n+            // already gotten a type error, so we will just return here.\n+            return;\n+        }\n+\n         // If the type being assigned needs dropped, then the mutation counts as a borrow\n         // since it is essentially doing `Drop::drop(&mut x); x = new_value;`.\n         if assignee_place.place.base_ty.needs_drop(self.tcx, self.param_env) {"}, {"sha": "6162b5c6d4c9308fa379f9ab9567e57f22ba02a5", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c31879922e6ec8200eee6c144073eafcc4a73e38/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c31879922e6ec8200eee6c144073eafcc4a73e38/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=c31879922e6ec8200eee6c144073eafcc4a73e38", "patch": "@@ -387,7 +387,7 @@ pub const fn handle_alloc_error(layout: Layout) -> ! {\n #[cfg(all(not(no_global_oom_handling), test))]\n pub use std::alloc::handle_alloc_error;\n \n-#[cfg(all(not(no_global_oom_handling), not(any(target_os = \"hermit\", test))))]\n+#[cfg(all(not(no_global_oom_handling), not(test)))]\n #[doc(hidden)]\n #[allow(unused_attributes)]\n #[unstable(feature = \"alloc_internals\", issue = \"none\")]"}, {"sha": "f514a2f0bd053cdaebb7ab7bcffca86fed32620a", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c31879922e6ec8200eee6c144073eafcc4a73e38/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "raw_url": "https://github.com/rust-lang/rust/raw/c31879922e6ec8200eee6c144073eafcc4a73e38/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version?ref=c31879922e6ec8200eee6c144073eafcc4a73e38", "patch": "@@ -1 +1 @@\n-0.9.0\n\\ No newline at end of file\n+0.9.1\n\\ No newline at end of file"}, {"sha": "68f2a54ddeb0549066226ea3096f596ce7f2d45b", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c31879922e6ec8200eee6c144073eafcc4a73e38/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c31879922e6ec8200eee6c144073eafcc4a73e38/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=c31879922e6ec8200eee6c144073eafcc4a73e38", "patch": "@@ -417,7 +417,7 @@ pub(super) fn write_shared(\n             ));\n             all_sources.sort();\n             Ok(format!(\n-                \"var N = null;var sourcesIndex = {{}};\\n{}\\ncreateSourceSidebar();\\n\",\n+                \"var sourcesIndex = {{}};\\n{}\\ncreateSourceSidebar();\\n\",\n                 all_sources.join(\"\\n\")\n             )\n             .into_bytes())"}, {"sha": "c3423ad629f166f60b14f4a00d28aab4f04eeb7b", "filename": "src/test/ui/async-await/issue-73741-type-err-drop-tracking.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c31879922e6ec8200eee6c144073eafcc4a73e38/src%2Ftest%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c31879922e6ec8200eee6c144073eafcc4a73e38/src%2Ftest%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.rs?ref=c31879922e6ec8200eee6c144073eafcc4a73e38", "patch": "@@ -0,0 +1,14 @@\n+// edition:2018\n+// compile-flags: -Zdrop-tracking\n+// Regression test for issue #73741\n+// Ensures that we don't emit spurious errors when\n+// a type error ocurrs in an `async fn`\n+\n+async fn weird() {\n+    1 = 2; //~ ERROR invalid left-hand side\n+\n+    let mut loop_count = 0;\n+    async {}.await\n+}\n+\n+fn main() {}"}, {"sha": "d4e3b6c3bf40dabbf30f22200a29cc2578dbd4d5", "filename": "src/test/ui/async-await/issue-73741-type-err-drop-tracking.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c31879922e6ec8200eee6c144073eafcc4a73e38/src%2Ftest%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c31879922e6ec8200eee6c144073eafcc4a73e38/src%2Ftest%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.stderr?ref=c31879922e6ec8200eee6c144073eafcc4a73e38", "patch": "@@ -0,0 +1,11 @@\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/issue-73741-type-err-drop-tracking.rs:8:7\n+   |\n+LL |     1 = 2;\n+   |     - ^\n+   |     |\n+   |     cannot assign to this expression\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0070`."}, {"sha": "8532410a1bf3a5c21436cf08231ed1bddacfc8ef", "filename": "src/tools/rustdoc-gui/tester.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c31879922e6ec8200eee6c144073eafcc4a73e38/src%2Ftools%2Frustdoc-gui%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/c31879922e6ec8200eee6c144073eafcc4a73e38/src%2Ftools%2Frustdoc-gui%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui%2Ftester.js?ref=c31879922e6ec8200eee6c144073eafcc4a73e38", "patch": "@@ -138,7 +138,7 @@ async function main(argv) {\n     try {\n         // This is more convenient that setting fields one by one.\n         let args = [\n-            \"--variable\", \"DOC_PATH\", opts[\"doc_folder\"],\n+            \"--variable\", \"DOC_PATH\", opts[\"doc_folder\"], \"--enable-fail-on-js-error\",\n         ];\n         if (opts[\"debug\"]) {\n             debug = true;"}]}