{"sha": "8c40360ed413c0024787cf14fc83af0d98037c7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNDAzNjBlZDQxM2MwMDI0Nzg3Y2YxNGZjODNhZjBkOTgwMzdjN2E=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-07-13T16:23:26Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-07-13T16:23:51Z"}, "message": "Put checking if anonct is a default into a method on hir map", "tree": {"sha": "9026157e95a3d5e53560a6d2f52a46c40d689f2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9026157e95a3d5e53560a6d2f52a46c40d689f2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c40360ed413c0024787cf14fc83af0d98037c7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c40360ed413c0024787cf14fc83af0d98037c7a", "html_url": "https://github.com/rust-lang/rust/commit/8c40360ed413c0024787cf14fc83af0d98037c7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c40360ed413c0024787cf14fc83af0d98037c7a/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e276b860e25a900037dd964b5c4b42afe1187abc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e276b860e25a900037dd964b5c4b42afe1187abc", "html_url": "https://github.com/rust-lang/rust/commit/e276b860e25a900037dd964b5c4b42afe1187abc"}], "stats": {"total": 57, "additions": 28, "deletions": 29}, "files": [{"sha": "04c29c50e75a15594f55f4a1774ddda4252c841d", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c40360ed413c0024787cf14fc83af0d98037c7a/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c40360ed413c0024787cf14fc83af0d98037c7a/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=8c40360ed413c0024787cf14fc83af0d98037c7a", "patch": "@@ -1422,6 +1422,9 @@ pub type Lit = Spanned<LitKind>;\n /// These are usually found nested inside types (e.g., array lengths)\n /// or expressions (e.g., repeat counts), and also used to define\n /// explicit discriminant values for enum variants.\n+///\n+/// You can check if this anon const is a default in a const param\n+/// `const N: usize = { ... }` with [Map::opt_const_param_default_param_hir_id]\n #[derive(Copy, Clone, PartialEq, Eq, Encodable, Debug, HashStable_Generic)]\n pub struct AnonConst {\n     pub hir_id: HirId,"}, {"sha": "9d81407c330c4dca682c765e131b65d137dbb8b3", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8c40360ed413c0024787cf14fc83af0d98037c7a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c40360ed413c0024787cf14fc83af0d98037c7a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=8c40360ed413c0024787cf14fc83af0d98037c7a", "patch": "@@ -901,6 +901,19 @@ impl<'hir> Map<'hir> {\n     pub fn node_to_string(&self, id: HirId) -> String {\n         hir_id_to_string(self, id)\n     }\n+\n+    /// Returns the HirId of `N` in `struct Foo<const N: usize = { ... }>` when\n+    /// called with the HirId for the `{ ... }` anon const\n+    pub fn opt_const_param_default_param_hir_id(&self, anon_const: HirId) -> Option<HirId> {\n+        match self.get(self.get_parent_node(anon_const)) {\n+            Node::GenericParam(GenericParam {\n+                hir_id: param_id,\n+                kind: GenericParamKind::Const { .. },\n+                ..\n+            }) => Some(*param_id),\n+            _ => None,\n+        }\n+    }\n }\n \n impl<'hir> intravisit::Map<'hir> for Map<'hir> {"}, {"sha": "31cafb9d966526ab6c47537cb540de5d0359a413", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8c40360ed413c0024787cf14fc83af0d98037c7a/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c40360ed413c0024787cf14fc83af0d98037c7a/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=8c40360ed413c0024787cf14fc83af0d98037c7a", "patch": "@@ -1441,17 +1441,10 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                 // of a const parameter type, e.g. `struct Foo<const N: usize, const M: [u8; N]>` is not allowed.\n                 None\n             } else if tcx.lazy_normalization() {\n-                // Only provide backwards declared generics to cg defaults (#83938)\n-                if let Node::GenericParam(GenericParam {\n-                    hir_id: param_id,\n-                    kind: GenericParamKind::Const { .. },\n-                    ..\n-                }) = tcx.hir().get(tcx.hir().get_parent_node(hir_id))\n-                {\n-                    let item_id = tcx.hir().get_parent_node(*param_id);\n-                    let item_def_id = tcx.hir().local_def_id(item_id);\n-                    let generics = tcx.generics_of(item_def_id.to_def_id());\n-                    let param_def = tcx.hir().local_def_id(*param_id).to_def_id();\n+                // Only provide backwards declared generics to cg defaults (#86580)\n+                if let Some(param_id) = tcx.hir().opt_const_param_default_param_hir_id(hir_id) {\n+                    let generics = tcx.generics_of(parent_def_id.to_def_id());\n+                    let param_def = tcx.hir().local_def_id(param_id).to_def_id();\n                     let param_def_idx = generics.param_def_id_to_index[&param_def];\n                     let params = generics.params[..param_def_idx as usize].to_owned();\n                     let param_def_id_to_index =\n@@ -2432,16 +2425,11 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n         }\n     } else {\n         if matches!(def_kind, DefKind::AnonConst) && tcx.lazy_normalization() {\n-            // Provide predicates of parent item of cg defaults manually\n-            // as generics_of doesn't return a parent for the generics\n+            // Provide predicates of parent item of cg defaults manually as `generics_of`\n+            // doesn't set the parent item as the parent for the generics (#86580)\n             let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n-            if let Node::GenericParam(hir::GenericParam {\n-                hir_id: param_id,\n-                kind: hir::GenericParamKind::Const { .. },\n-                ..\n-            }) = tcx.hir().get(tcx.hir().get_parent_node(hir_id))\n-            {\n-                let item_id = tcx.hir().get_parent_node(*param_id);\n+            if let Some(_) = tcx.hir().opt_const_param_default_param_hir_id(hir_id) {\n+                let item_id = tcx.hir().get_parent_item(hir_id);\n                 let item_def_id = tcx.hir().local_def_id(item_id).to_def_id();\n                 return tcx.explicit_predicates_of(item_def_id);\n             }"}, {"sha": "16d698fc8cb0f0bf274f5cd937d8f0ff64d2cfb8", "filename": "compiler/rustc_typeck/src/outlives/mod.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8c40360ed413c0024787cf14fc83af0d98037c7a/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c40360ed413c0024787cf14fc83af0d98037c7a/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs?ref=8c40360ed413c0024787cf14fc83af0d98037c7a", "patch": "@@ -22,15 +22,10 @@ fn inferred_outlives_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[(ty::Predicate\n \n     if matches!(tcx.def_kind(item_def_id), hir::def::DefKind::AnonConst) && tcx.lazy_normalization()\n     {\n-        // Provide inferred outlive preds of parent item of cg defaults manually\n-        // as generics_of doesn't return a parent for the generics\n-        if let Node::GenericParam(hir::GenericParam {\n-            hir_id: param_id,\n-            kind: hir::GenericParamKind::Const { .. },\n-            ..\n-        }) = tcx.hir().get(tcx.hir().get_parent_node(id))\n-        {\n-            let item_id = tcx.hir().get_parent_node(*param_id);\n+        // Provide predicates of parent item of cg defaults manually as `generics_of`\n+        // doesn't set the parent item as the parent for the generics (#86580)\n+        if let Some(_) = tcx.hir().opt_const_param_default_param_hir_id(id) {\n+            let item_id = tcx.hir().get_parent_item(id);\n             let item_def_id = tcx.hir().local_def_id(item_id).to_def_id();\n             return tcx.inferred_outlives_of(item_def_id);\n         }"}]}