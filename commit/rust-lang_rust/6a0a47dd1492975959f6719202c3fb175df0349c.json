{"sha": "6a0a47dd1492975959f6719202c3fb175df0349c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMGE0N2RkMTQ5Mjk3NTk1OWY2NzE5MjAyYzNmYjE3NWRmMDM0OWM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-10T10:02:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-10T10:02:10Z"}, "message": "Merge #6980\n\n6980: Implement to support intra-doc link r=matklad a=sasurau4\n\nHelps with #6168 \r\n\r\nThis PR is very limited implementation to support intra-doc. It only support links indicate same file function.\r\n\r\nI want someone to feedback me about this implementation. If the approach is good, I will continue this PR to support other symbols like enum and struct. \n\nCo-authored-by: Daiki Ihara <sasurau4@gmail.com>", "tree": {"sha": "703f5163b43e4964645b102e0152ed8510ee6e5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/703f5163b43e4964645b102e0152ed8510ee6e5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a0a47dd1492975959f6719202c3fb175df0349c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf+tCiCRBK7hj4Ov3rIwAAdHIIAIjc9FhFpXPkjo/FsqJOpKiE\nodsKJJSfiLCDKJqy/2gSaDMo+w9fCqwCbtNNGtDFl6qhk1KQ/JK7+3t/dgHUrQ6E\nu677/5qZdN8yPBJnobR+3NCQYWQgouGq7HmLMyKaG4LF5gNomJa7nFNZEfQsHxxE\nFtKLAgApsYR5iHzSIb9Lu16BVo1jdi1T8mWHgWJCZJ7VM3lL9KIazknsAHfNbM5i\njoyrhtoqST/mTIKz7FCVK+9Va3Ts+6YM7qJCp0KT8deJ4/YSxb8wIMSaRYOJkb1M\nAgVMj24BqWgBCqWIJzNITUeLIRFlwcdtVe+36teaghbwAvtBnfV1e+itVZ4PRak=\n=yvpq\n-----END PGP SIGNATURE-----\n", "payload": "tree 703f5163b43e4964645b102e0152ed8510ee6e5e\nparent 4fddf40f5bd51066e3201f319f7a5c1466483b4d\nparent 65c45083cf01d3a189b28e964254e82680d90ba3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1610272930 +0000\ncommitter GitHub <noreply@github.com> 1610272930 +0000\n\nMerge #6980\n\n6980: Implement to support intra-doc link r=matklad a=sasurau4\n\nHelps with #6168 \r\n\r\nThis PR is very limited implementation to support intra-doc. It only support links indicate same file function.\r\n\r\nI want someone to feedback me about this implementation. If the approach is good, I will continue this PR to support other symbols like enum and struct. \n\nCo-authored-by: Daiki Ihara <sasurau4@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a0a47dd1492975959f6719202c3fb175df0349c", "html_url": "https://github.com/rust-lang/rust/commit/6a0a47dd1492975959f6719202c3fb175df0349c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a0a47dd1492975959f6719202c3fb175df0349c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fddf40f5bd51066e3201f319f7a5c1466483b4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fddf40f5bd51066e3201f319f7a5c1466483b4d", "html_url": "https://github.com/rust-lang/rust/commit/4fddf40f5bd51066e3201f319f7a5c1466483b4d"}, {"sha": "65c45083cf01d3a189b28e964254e82680d90ba3", "url": "https://api.github.com/repos/rust-lang/rust/commits/65c45083cf01d3a189b28e964254e82680d90ba3", "html_url": "https://github.com/rust-lang/rust/commit/65c45083cf01d3a189b28e964254e82680d90ba3"}], "stats": {"total": 116, "additions": 111, "deletions": 5}, "files": [{"sha": "678d22d03fa087ce973595f8b3d67591e1040570", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6a0a47dd1492975959f6719202c3fb175df0349c/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0a47dd1492975959f6719202c3fb175df0349c/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=6a0a47dd1492975959f6719202c3fb175df0349c", "patch": "@@ -1,6 +1,6 @@\n //! Resolves and rewrites links in markdown documentation.\n \n-use std::{convert::TryFrom, iter::once};\n+use std::{convert::TryFrom, iter::once, ops::Range};\n \n use itertools::Itertools;\n use pulldown_cmark::{BrokenLink, CowStr, Event, InlineStr, LinkType, Options, Parser, Tag};\n@@ -61,6 +61,30 @@ pub(crate) fn rewrite_links(db: &RootDatabase, markdown: &str, definition: &Defi\n     out\n }\n \n+pub(crate) fn extract_definitions_from_markdown(\n+    markdown: &str,\n+) -> Vec<(String, Option<hir::Namespace>, Range<usize>)> {\n+    let mut res = vec![];\n+    let mut cb = |link: BrokenLink| {\n+        Some((\n+            /*url*/ link.reference.to_owned().into(),\n+            /*title*/ link.reference.to_owned().into(),\n+        ))\n+    };\n+    let doc = Parser::new_with_broken_link_callback(markdown, Options::empty(), Some(&mut cb));\n+    for (event, range) in doc.into_offset_iter() {\n+        match event {\n+            Event::Start(Tag::Link(_link_type, ref target, ref title)) => {\n+                let link = if target.is_empty() { title } else { target };\n+                let (link, ns) = parse_link(link);\n+                res.push((link.to_string(), ns, range));\n+            }\n+            _ => {}\n+        }\n+    }\n+    res\n+}\n+\n /// Remove all links in markdown documentation.\n pub(crate) fn remove_links(markdown: &str) -> String {\n     let mut drop_link = false;"}, {"sha": "227f2094334674898addbe9be0e0068dc71a7a64", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 86, "deletions": 4, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/6a0a47dd1492975959f6719202c3fb175df0349c/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0a47dd1492975959f6719202c3fb175df0349c/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=6a0a47dd1492975959f6719202c3fb175df0349c", "patch": "@@ -1,14 +1,20 @@\n use either::Either;\n-use hir::Semantics;\n+use hir::{HasAttrs, ModuleDef, Semantics};\n use ide_db::{\n     base_db::FileId,\n-    defs::{NameClass, NameRefClass},\n+    defs::{Definition, NameClass, NameRefClass},\n     symbol_index, RootDatabase,\n };\n-use syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxToken, TokenAtOffset, T};\n+use syntax::{\n+    ast::{self, NameOwner},\n+    match_ast, AstNode, AstToken,\n+    SyntaxKind::*,\n+    SyntaxToken, TextSize, TokenAtOffset, T,\n+};\n \n use crate::{\n     display::{ToNav, TryToNav},\n+    doc_links::extract_definitions_from_markdown,\n     FilePosition, NavigationTarget, RangeInfo, SymbolKind,\n };\n \n@@ -30,6 +36,10 @@ pub(crate) fn goto_definition(\n     let original_token = pick_best(file.token_at_offset(position.offset))?;\n     let token = sema.descend_into_macros(original_token.clone());\n     let parent = token.parent();\n+    if let Some(comment) = ast::Comment::cast(token.clone()) {\n+        let nav = def_for_doc_comment(&sema, position, &comment)?.try_to_nav(db)?;\n+        return Some(RangeInfo::new(original_token.text_range(), vec![nav]));\n+    }\n \n     let nav_targets = match_ast! {\n         match parent {\n@@ -68,11 +78,68 @@ pub(crate) fn goto_definition(\n     Some(RangeInfo::new(original_token.text_range(), nav_targets))\n }\n \n+fn def_for_doc_comment(\n+    sema: &Semantics<RootDatabase>,\n+    position: FilePosition,\n+    doc_comment: &ast::Comment,\n+) -> Option<hir::ModuleDef> {\n+    let parent = doc_comment.syntax().parent();\n+    let db = sema.db;\n+    let (link, ns) = extract_positioned_link_from_comment(position, doc_comment)?;\n+    let link = &link;\n+    let name = match_ast! {\n+        match parent {\n+            ast::Name(name) => Some(name),\n+            ast::Fn(func) => func.name(),\n+            _ => None,\n+        }\n+    }?;\n+    let definition = NameClass::classify(&sema, &name).and_then(|d| d.defined(sema.db))?;\n+    match definition {\n+        Definition::ModuleDef(def) => match def {\n+            ModuleDef::Module(it) => it.resolve_doc_path(db, link, ns),\n+            ModuleDef::Function(it) => it.resolve_doc_path(db, link, ns),\n+            ModuleDef::Adt(it) => it.resolve_doc_path(db, link, ns),\n+            ModuleDef::Variant(it) => it.resolve_doc_path(db, link, ns),\n+            ModuleDef::Const(it) => it.resolve_doc_path(db, link, ns),\n+            ModuleDef::Static(it) => it.resolve_doc_path(db, link, ns),\n+            ModuleDef::Trait(it) => it.resolve_doc_path(db, link, ns),\n+            ModuleDef::TypeAlias(it) => it.resolve_doc_path(db, link, ns),\n+            ModuleDef::BuiltinType(_) => return None,\n+        },\n+        Definition::Macro(it) => it.resolve_doc_path(db, link, ns),\n+        Definition::Field(it) => it.resolve_doc_path(db, link, ns),\n+        Definition::SelfType(_)\n+        | Definition::Local(_)\n+        | Definition::TypeParam(_)\n+        | Definition::LifetimeParam(_)\n+        | Definition::ConstParam(_)\n+        | Definition::Label(_) => return None,\n+    }\n+}\n+\n+fn extract_positioned_link_from_comment(\n+    position: FilePosition,\n+    comment: &ast::Comment,\n+) -> Option<(String, Option<hir::Namespace>)> {\n+    let comment_range = comment.syntax().text_range();\n+    let doc_comment = comment.doc_comment()?;\n+    let def_links = extract_definitions_from_markdown(doc_comment);\n+    let (def_link, ns, _) = def_links.iter().min_by_key(|(_, _, def_link_range)| {\n+        let matched_position = comment_range.start() + TextSize::from(def_link_range.start as u32);\n+        match position.offset.checked_sub(matched_position) {\n+            Some(distance) => distance,\n+            None => comment_range.end(),\n+        }\n+    })?;\n+    Some((def_link.to_string(), ns.clone()))\n+}\n+\n fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n     return tokens.max_by_key(priority);\n     fn priority(n: &SyntaxToken) -> usize {\n         match n.kind() {\n-            IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] => 2,\n+            IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] | COMMENT => 2,\n             kind if kind.is_trivia() => 0,\n             _ => 1,\n         }\n@@ -1142,6 +1209,21 @@ fn foo<'foo>(_: &'foo ()) {\n             break 'foo$0;\n         }\n     }\n+}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn goto_def_for_intra_rustdoc_link_same_file() {\n+        check(\n+            r#\"\n+/// Blah, [`bar`](bar) .. [`foo`](foo)$0 has [`bar`](bar)\n+pub fn bar() { }\n+\n+/// You might want to see [`std::fs::read()`] too.\n+pub fn foo() { }\n+     //^^^\n+\n }\"#,\n         )\n     }"}]}