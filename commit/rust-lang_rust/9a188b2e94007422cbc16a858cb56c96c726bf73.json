{"sha": "9a188b2e94007422cbc16a858cb56c96c726bf73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMTg4YjJlOTQwMDc0MjJjYmMxNmE4NThjYjU2Yzk2YzcyNmJmNzM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-26T06:00:43Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-26T06:54:10Z"}, "message": "rustc: Fall back to intrinsics.ll if we can't parse the bc\n\nThis will allow us to transition to the new bitcode format.", "tree": {"sha": "9fdef3ab96fddeb21d42ce389c8fdb03cf7399a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fdef3ab96fddeb21d42ce389c8fdb03cf7399a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a188b2e94007422cbc16a858cb56c96c726bf73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a188b2e94007422cbc16a858cb56c96c726bf73", "html_url": "https://github.com/rust-lang/rust/commit/9a188b2e94007422cbc16a858cb56c96c726bf73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a188b2e94007422cbc16a858cb56c96c726bf73/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "143f87899b0548700d5b799efd53594602114195", "url": "https://api.github.com/repos/rust-lang/rust/commits/143f87899b0548700d5b799efd53594602114195", "html_url": "https://github.com/rust-lang/rust/commit/143f87899b0548700d5b799efd53594602114195"}], "stats": {"total": 65, "additions": 61, "deletions": 4}, "files": [{"sha": "c941869556a79af86d1dbf04d212c9b3012e2bb8", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9a188b2e94007422cbc16a858cb56c96c726bf73/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a188b2e94007422cbc16a858cb56c96c726bf73/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=9a188b2e94007422cbc16a858cb56c96c726bf73", "patch": "@@ -37,26 +37,64 @@ fn llvm_err(sess: session::session, msg: str) unsafe {\n     } else { sess.fatal(msg + \": \" + str::str_from_cstr(buf)); }\n }\n \n-fn link_intrinsics(sess: session::session, llmod: ModuleRef) {\n+fn load_intrinsics_bc(sess: session::session) -> option::t<ModuleRef> {\n     let path = alt filesearch::search(\n         sess.filesearch(),\n         bind filesearch::pick_file(\"intrinsics.bc\", _)) {\n       option::some(path) { path }\n-      option::none. { sess.fatal(\"couldn't find intrinsics.bc\") }\n+      option::none. {\n+        sess.warn(\"couldn't find intrinsics.bc\");\n+        ret option::none;\n+      }\n     };\n     let membuf = str::as_buf(path, {|buf|\n         llvm::LLVMRustCreateMemoryBufferWithContentsOfFile(buf)\n-    });\n+                                   });\n     if membuf as uint == 0u {\n         llvm_err(sess, \"installation problem: couldn't open \" + path);\n         fail;\n     }\n     let llintrinsicsmod = llvm::LLVMRustParseBitcode(membuf);\n     llvm::LLVMDisposeMemoryBuffer(membuf);\n     if llintrinsicsmod as uint == 0u {\n-        llvm_err(sess, \"installation problem: couldn't parse intrinsics.bc\");\n+        sess.warn(\"couldn't parse intrinsics.bc\");\n+        ret option::none;\n+    }\n+\n+    ret option::some(llintrinsicsmod);\n+}\n+\n+fn load_intrinsics_ll(sess: session::session) -> ModuleRef {\n+    let path = alt filesearch::search(\n+        sess.filesearch(),\n+        bind filesearch::pick_file(\"intrinsics.ll\", _)) {\n+      option::some(path) { path }\n+      option::none. { sess.fatal(\"couldn't find intrinsics.ll\") }\n+    };\n+    let llintrinsicsmod = str::as_buf(path, { |buf|\n+        llvm::LLVMRustParseAssemblyFile(buf)\n+                                        });\n+    if llintrinsicsmod as uint == 0u {\n+        llvm_err(sess, \"couldn't parse intrinsics.ll\");\n         fail;\n     }\n+    ret llintrinsicsmod;\n+}\n+\n+fn link_intrinsics(sess: session::session, llmod: ModuleRef) {\n+    let llintrinsicsmod = {\n+        alt load_intrinsics_bc(sess) {\n+          option::some(m) { m }\n+          option::none. {\n+            // When the bitcode format changes we can't parse a .bc\n+            // file produced with a newer LLVM (as happens when stage0\n+            // is trying to build against a new LLVM revision), in\n+            // that case we'll try to parse the assembly.\n+            sess.warn(\"couldn't parse intrinsics.bc, trying intrinsics.ll\");\n+            load_intrinsics_ll(sess)\n+          }\n+        }\n+    };\n     let linkres = llvm::LLVMLinkModules(llmod, llintrinsicsmod);\n     llvm::LLVMDisposeModule(llintrinsicsmod);\n     if linkres == False {"}, {"sha": "b4c809cf46461fe8cac8a8a432ebcf8a64f5579d", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a188b2e94007422cbc16a858cb56c96c726bf73/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a188b2e94007422cbc16a858cb56c96c726bf73/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=9a188b2e94007422cbc16a858cb56c96c726bf73", "patch": "@@ -864,6 +864,9 @@ native mod llvm {\n     /** Parses the bitcode in the given memory buffer. */\n     fn LLVMRustParseBitcode(MemBuf: MemoryBufferRef) -> ModuleRef;\n \n+    /** Parses LLVM asm in the given file */\n+    fn LLVMRustParseAssemblyFile(Filename: sbuf) -> ModuleRef;\n+\n     /** FiXME: Hacky adaptor for lack of ULongLong in FFI: */\n     fn LLVMRustConstInt(IntTy: TypeRef, N_hi: uint, N_lo: uint,\n                         SignExtend: Bool) -> ValueRef;"}, {"sha": "edb87e99538ac101142a30c3ab939d9e0beaacb3", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9a188b2e94007422cbc16a858cb56c96c726bf73/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/9a188b2e94007422cbc16a858cb56c96c726bf73/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=9a188b2e94007422cbc16a858cb56c96c726bf73", "patch": "@@ -12,16 +12,19 @@\n //\n //===----------------------------------------------------------------------===\n \n+#include \"llvm/LLVMContext.h\"\n #include \"llvm/Linker.h\"\n #include \"llvm/PassManager.h\"\n #include \"llvm/ADT/Triple.h\"\n+#include \"llvm/Assembly/Parser.h\"\n #include \"llvm/Assembly/PrintModulePass.h\"\n #include \"llvm/Support/FormattedStream.h\"\n #include \"llvm/Support/Timer.h\"\n #include \"llvm/Support/raw_ostream.h\"\n #include \"llvm/Target/TargetMachine.h\"\n #include \"llvm/Support/TargetSelect.h\"\n #include \"llvm/Support/TargetRegistry.h\"\n+#include \"llvm/Support/SourceMgr.h\"\n #include \"llvm/Target/TargetOptions.h\"\n #include \"llvm/Support/Host.h\"\n #include \"llvm-c/Core.h\"\n@@ -109,6 +112,18 @@ LLVMRustWriteOutputFile(LLVMPassManagerRef PMR,\n   delete Target;\n }\n \n+extern \"C\" LLVMModuleRef LLVMRustParseAssemblyFile(const char *Filename) {\n+\n+  SMDiagnostic d;\n+  Module *m = ParseAssemblyFile(Filename, d, getGlobalContext());\n+  if (m) {\n+    return wrap(m);\n+  } else {\n+    LLVMRustError = d.getMessage().c_str();\n+    return NULL;\n+  }\n+}\n+\n extern \"C\" LLVMModuleRef LLVMRustParseBitcode(LLVMMemoryBufferRef MemBuf) {\n   LLVMModuleRef M;\n   return LLVMParseBitcode(MemBuf, &M, const_cast<char **>(&LLVMRustError))"}, {"sha": "725261abef03c8bb765b872ecdbf0f61bcfe2421", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a188b2e94007422cbc16a858cb56c96c726bf73/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/9a188b2e94007422cbc16a858cb56c96c726bf73/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=9a188b2e94007422cbc16a858cb56c96c726bf73", "patch": "@@ -6,6 +6,7 @@ LLVMRustGetHostTriple\n LLVMRustConstSmallInt\n LLVMRustConstInt\n LLVMRustParseBitcode\n+LLVMRustParseAssemblyFile\n LLVMRustPrintPassTimings\n LLVMRustEnableSegmentedStacks\n LLVMLinkModules"}]}