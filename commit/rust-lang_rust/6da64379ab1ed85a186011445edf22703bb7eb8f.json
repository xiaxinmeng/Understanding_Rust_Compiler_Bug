{"sha": "6da64379ab1ed85a186011445edf22703bb7eb8f", "node_id": "C_kwDOAAsO6NoAKDZkYTY0Mzc5YWIxZWQ4NWExODYwMTE0NDVlZGYyMjcwM2JiN2ViOGY", "commit": {"author": {"name": "Tshepang Mbambo", "email": "tshepang@gmail.com", "date": "2023-02-16T17:49:31Z"}, "committer": {"name": "Tshepang Mbambo", "email": "tshepang@gmail.com", "date": "2023-02-16T17:49:31Z"}, "message": "\"Basic usage\" is redundant for there is just one example", "tree": {"sha": "e3ee3209630e4749535f62cd14a2fbb8e79b6b11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3ee3209630e4749535f62cd14a2fbb8e79b6b11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6da64379ab1ed85a186011445edf22703bb7eb8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6da64379ab1ed85a186011445edf22703bb7eb8f", "html_url": "https://github.com/rust-lang/rust/commit/6da64379ab1ed85a186011445edf22703bb7eb8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6da64379ab1ed85a186011445edf22703bb7eb8f/comments", "author": {"login": "tshepang", "id": 588486, "node_id": "MDQ6VXNlcjU4ODQ4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/588486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tshepang", "html_url": "https://github.com/tshepang", "followers_url": "https://api.github.com/users/tshepang/followers", "following_url": "https://api.github.com/users/tshepang/following{/other_user}", "gists_url": "https://api.github.com/users/tshepang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tshepang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tshepang/subscriptions", "organizations_url": "https://api.github.com/users/tshepang/orgs", "repos_url": "https://api.github.com/users/tshepang/repos", "events_url": "https://api.github.com/users/tshepang/events{/privacy}", "received_events_url": "https://api.github.com/users/tshepang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tshepang", "id": 588486, "node_id": "MDQ6VXNlcjU4ODQ4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/588486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tshepang", "html_url": "https://github.com/tshepang", "followers_url": "https://api.github.com/users/tshepang/followers", "following_url": "https://api.github.com/users/tshepang/following{/other_user}", "gists_url": "https://api.github.com/users/tshepang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tshepang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tshepang/subscriptions", "organizations_url": "https://api.github.com/users/tshepang/orgs", "repos_url": "https://api.github.com/users/tshepang/repos", "events_url": "https://api.github.com/users/tshepang/events{/privacy}", "received_events_url": "https://api.github.com/users/tshepang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af3c8b27266e290cf65704284f6862d0f90ee4fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/af3c8b27266e290cf65704284f6862d0f90ee4fc", "html_url": "https://github.com/rust-lang/rust/commit/af3c8b27266e290cf65704284f6862d0f90ee4fc"}], "stats": {"total": 42, "additions": 0, "deletions": 42}, "files": [{"sha": "208b220c24a94ce0b10a8120604d863a4d23ef13", "filename": "library/core/src/result.rs", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6da64379ab1ed85a186011445edf22703bb7eb8f/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6da64379ab1ed85a186011445edf22703bb7eb8f/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=6da64379ab1ed85a186011445edf22703bb7eb8f", "patch": "@@ -525,8 +525,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let x: Result<i32, &str> = Ok(-3);\n     /// assert_eq!(x.is_ok(), true);\n@@ -572,8 +570,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let x: Result<i32, &str> = Ok(-3);\n     /// assert_eq!(x.is_err(), false);\n@@ -627,8 +623,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(2);\n     /// assert_eq!(x.ok(), Some(2));\n@@ -658,8 +652,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(2);\n     /// assert_eq!(x.err(), None);\n@@ -693,8 +685,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(2);\n     /// assert_eq!(x.as_ref(), Ok(&2));\n@@ -716,8 +706,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// fn mutate(r: &mut Result<i32, i32>) {\n     ///     match r.as_mut() {\n@@ -812,8 +800,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let k = 21;\n     ///\n@@ -841,8 +827,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// fn stringify(x: u32) -> String { format!(\"error code: {x}\") }\n     ///\n@@ -968,8 +952,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(7);\n     /// assert_eq!(x.iter().next(), Some(&7));\n@@ -989,8 +971,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let mut x: Result<u32, &str> = Ok(7);\n     /// match x.iter_mut().next() {\n@@ -1031,8 +1011,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```should_panic\n     /// let x: Result<u32, &str> = Err(\"emergency failure\");\n     /// x.expect(\"Testing expect\"); // panics with `Testing expect: emergency failure`\n@@ -1160,8 +1138,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```should_panic\n     /// let x: Result<u32, &str> = Ok(10);\n     /// x.expect_err(\"Testing expect_err\"); // panics with `Testing expect_err: 10`\n@@ -1222,8 +1198,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// # #![feature(never_type)]\n     /// # #![feature(unwrap_infallible)]\n@@ -1259,8 +1233,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// # #![feature(never_type)]\n     /// # #![feature(unwrap_infallible)]\n@@ -1298,8 +1270,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(2);\n     /// let y: Result<&str, &str> = Err(\"late error\");\n@@ -1383,8 +1353,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(2);\n     /// let y: Result<u32, &str> = Err(\"late error\");\n@@ -1426,8 +1394,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// fn sq(x: u32) -> Result<u32, u32> { Ok(x * x) }\n     /// fn err(x: u32) -> Result<u32, u32> { Err(x) }\n@@ -1456,8 +1422,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let default = 2;\n     /// let x: Result<u32, &str> = Ok(9);\n@@ -1487,8 +1451,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// fn count(x: &str) -> usize { x.len() }\n     ///\n@@ -1752,8 +1714,6 @@ impl<T, E> Result<Result<T, E>, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// #![feature(result_flattening)]\n     /// let x: Result<Result<&'static str, u32>, u32> = Ok(Ok(\"hello\"));\n@@ -1842,8 +1802,6 @@ impl<T, E> IntoIterator for Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage:\n-    ///\n     /// ```\n     /// let x: Result<u32, &str> = Ok(5);\n     /// let v: Vec<u32> = x.into_iter().collect();"}]}