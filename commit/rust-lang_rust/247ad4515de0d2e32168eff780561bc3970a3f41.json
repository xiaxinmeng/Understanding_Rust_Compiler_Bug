{"sha": "247ad4515de0d2e32168eff780561bc3970a3f41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0N2FkNDUxNWRlMGQyZTMyMTY4ZWZmNzgwNTYxYmMzOTcwYTNmNDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-14T06:07:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-14T06:07:31Z"}, "message": "auto merge of #7769 : alexcrichton/rust/issue-7732-fix-rusti-again, r=cmr\n\nTurns out this was a more subtle bug than I originally thought. My analysis can be found in #7732, but I also tried to put descriptive info into the comments.\r\n\r\nCloses #7732", "tree": {"sha": "1730819979eaf0601e2418217a480705a7559c6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1730819979eaf0601e2418217a480705a7559c6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/247ad4515de0d2e32168eff780561bc3970a3f41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/247ad4515de0d2e32168eff780561bc3970a3f41", "html_url": "https://github.com/rust-lang/rust/commit/247ad4515de0d2e32168eff780561bc3970a3f41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/247ad4515de0d2e32168eff780561bc3970a3f41/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b937af17c9ec309fa29d98c42a5735dd8b934369", "url": "https://api.github.com/repos/rust-lang/rust/commits/b937af17c9ec309fa29d98c42a5735dd8b934369", "html_url": "https://github.com/rust-lang/rust/commit/b937af17c9ec309fa29d98c42a5735dd8b934369"}, {"sha": "21d709842704c6d6ba33a12b236b4d680e591004", "url": "https://api.github.com/repos/rust-lang/rust/commits/21d709842704c6d6ba33a12b236b4d680e591004", "html_url": "https://github.com/rust-lang/rust/commit/21d709842704c6d6ba33a12b236b4d680e591004"}], "stats": {"total": 181, "additions": 129, "deletions": 52}, "files": [{"sha": "593a1ed535d6b76f1fa702a2db9b1d06d642bc06", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 56, "deletions": 16, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/247ad4515de0d2e32168eff780561bc3970a3f41/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247ad4515de0d2e32168eff780561bc3970a3f41/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=247ad4515de0d2e32168eff780561bc3970a3f41", "patch": "@@ -101,15 +101,30 @@ pub mod jit {\n     use back::link::llvm_err;\n     use driver::session::Session;\n     use lib::llvm::llvm;\n-    use lib::llvm::{ModuleRef, ContextRef};\n+    use lib::llvm::{ModuleRef, ContextRef, ExecutionEngineRef};\n     use metadata::cstore;\n \n     use std::cast;\n-    use std::ptr;\n-    use std::str;\n-    use std::sys;\n+    use std::local_data;\n     use std::unstable::intrinsics;\n \n+    struct LLVMJITData {\n+        ee: ExecutionEngineRef,\n+        llcx: ContextRef\n+    }\n+\n+    pub trait Engine {}\n+    impl Engine for LLVMJITData {}\n+\n+    impl Drop for LLVMJITData {\n+        fn drop(&self) {\n+            unsafe {\n+                llvm::LLVMDisposeExecutionEngine(self.ee);\n+                llvm::LLVMContextDispose(self.llcx);\n+            }\n+        }\n+    }\n+\n     pub fn exec(sess: Session,\n                 c: ContextRef,\n                 m: ModuleRef,\n@@ -130,7 +145,7 @@ pub mod jit {\n \n                 debug!(\"linking: %s\", path);\n \n-                do str::as_c_str(path) |buf_t| {\n+                do path.as_c_str |buf_t| {\n                     if !llvm::LLVMRustLoadCrate(manager, buf_t) {\n                         llvm_err(sess, ~\"Could not link\");\n                     }\n@@ -149,7 +164,7 @@ pub mod jit {\n             // Next, we need to get a handle on the _rust_main function by\n             // looking up it's corresponding ValueRef and then requesting that\n             // the execution engine compiles the function.\n-            let fun = do str::as_c_str(\"_rust_main\") |entry| {\n+            let fun = do \"_rust_main\".as_c_str |entry| {\n                 llvm::LLVMGetNamedFunction(m, entry)\n             };\n             if fun.is_null() {\n@@ -163,20 +178,45 @@ pub mod jit {\n             // closure\n             let code = llvm::LLVMGetPointerToGlobal(ee, fun);\n             assert!(!code.is_null());\n-            let closure = sys::Closure {\n-                code: code,\n-                env: ptr::null()\n-            };\n-            let func: &fn() = cast::transmute(closure);\n+            let func: extern \"Rust\" fn() = cast::transmute(code);\n             func();\n \n-            // Sadly, there currently is no interface to re-use this execution\n-            // engine, so it's disposed of here along with the context to\n-            // prevent leaks.\n-            llvm::LLVMDisposeExecutionEngine(ee);\n-            llvm::LLVMContextDispose(c);\n+            // Currently there is no method of re-using the executing engine\n+            // from LLVM in another call to the JIT. While this kinda defeats\n+            // the purpose of having a JIT in the first place, there isn't\n+            // actually much code currently which would re-use data between\n+            // different invocations of this. Additionally, the compilation\n+            // model currently isn't designed to support this scenario.\n+            //\n+            // We can't destroy the engine/context immediately here, however,\n+            // because of annihilation. The JIT code contains drop glue for any\n+            // types defined in the crate we just ran, and if any of those boxes\n+            // are going to be dropped during annihilation, the drop glue must\n+            // be run. Hence, we need to transfer ownership of this jit engine\n+            // to the caller of this function. To be convenient for now, we\n+            // shove it into TLS and have someone else remove it later on.\n+            let data = ~LLVMJITData { ee: ee, llcx: c };\n+            set_engine(data as ~Engine);\n         }\n     }\n+\n+    // The stage1 compiler won't work, but that doesn't really matter. TLS\n+    // changed only very recently to allow storage of owned values.\n+    fn engine_key(_: ~Engine) {}\n+\n+    #[cfg(not(stage0))]\n+    fn set_engine(engine: ~Engine) {\n+        unsafe { local_data::set(engine_key, engine) }\n+    }\n+    #[cfg(stage0)]\n+    fn set_engine(_: ~Engine) {}\n+\n+    #[cfg(not(stage0))]\n+    pub fn consume_engine() -> Option<~Engine> {\n+        unsafe { local_data::pop(engine_key) }\n+    }\n+    #[cfg(stage0)]\n+    pub fn consume_engine() -> Option<~Engine> { None }\n }\n \n pub mod write {"}, {"sha": "1e5e9ece288e856a646f94c7589025af6f4dd79e", "filename": "src/librustc/rustc.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/247ad4515de0d2e32168eff780561bc3970a3f41/src%2Flibrustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247ad4515de0d2e32168eff780561bc3970a3f41/src%2Flibrustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rs?ref=247ad4515de0d2e32168eff780561bc3970a3f41", "patch": "@@ -332,7 +332,11 @@ pub fn monitor(f: ~fn(diagnostic::Emitter)) {\n \n         let _finally = finally { ch: ch };\n \n-        f(demitter)\n+        f(demitter);\n+\n+        // Due reasons explain in #7732, if there was a jit execution context it\n+        // must be consumed and passed along to our parent task.\n+        back::link::jit::consume_engine()\n     } {\n         result::Ok(_) => { /* fallthrough */ }\n         result::Err(_) => {"}, {"sha": "0d21dda3edd6197fe378a1a2fd942464461ff15d", "filename": "src/librusti/rusti.rs", "status": "modified", "additions": 68, "deletions": 35, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/247ad4515de0d2e32168eff780561bc3970a3f41/src%2Flibrusti%2Frusti.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247ad4515de0d2e32168eff780561bc3970a3f41/src%2Flibrusti%2Frusti.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rs?ref=247ad4515de0d2e32168eff780561bc3970a3f41", "patch": "@@ -36,8 +36,23 @@\n  * - Pass #3\n  *   Finally, a program is generated to deserialize the local variable state,\n  *   run the code input, and then reserialize all bindings back into a local\n- *   hash map. Once this code runs, the input has fully been run and the REPL\n- *   waits for new input.\n+ *   hash map. This code is then run in the JIT engine provided by the rust\n+ *   compiler.\n+ *\n+ * - Pass #4\n+ *   Once this code runs, the input has fully been run and the hash map of local\n+ *   variables from TLS is read back into the local store of variables. This is\n+ *   then used later to pass back along to the parent rusti task and then begin\n+ *   waiting for input again.\n+ *\n+ * - Pass #5\n+ *   When running rusti code, it's important to consume ownership of the LLVM\n+ *   jit contextual information to prevent code from being deallocated too soon\n+ *   (before drop glue runs, see #7732). For this reason, the jit context is\n+ *   consumed and also passed along to the parent task. The parent task then\n+ *   keeps around all contexts while rusti is running. This must be done because\n+ *   tasks could in theory be spawned off and running in the background (still\n+ *   using the code).\n  *\n  * Encoding/decoding is done with EBML, and there is simply a map of ~str ->\n  * ~[u8] maintaining the values of each local binding (by name).\n@@ -60,6 +75,7 @@ use std::cell::Cell;\n use extra::rl;\n \n use rustc::driver::{driver, session};\n+use rustc::back::link::jit;\n use syntax::{ast, diagnostic};\n use syntax::ast_util::*;\n use syntax::parse::token;\n@@ -80,8 +96,9 @@ pub struct Repl {\n     binary: ~str,\n     running: bool,\n     lib_search_paths: ~[~str],\n+    engines: ~[~jit::Engine],\n \n-    program: Program,\n+    program: ~Program,\n }\n \n // Action to do after reading a :command\n@@ -91,13 +108,15 @@ enum CmdAction {\n }\n \n /// Run an input string in a Repl, returning the new Repl.\n-fn run(mut repl: Repl, input: ~str) -> Repl {\n+fn run(mut program: ~Program, binary: ~str, lib_search_paths: ~[~str],\n+       input: ~str) -> (~Program, Option<~jit::Engine>)\n+{\n     // Build some necessary rustc boilerplate for compiling things\n-    let binary = repl.binary.to_managed();\n+    let binary = binary.to_managed();\n     let options = @session::options {\n         crate_type: session::unknown_crate,\n         binary: binary,\n-        addl_lib_search_paths: @mut repl.lib_search_paths.map(|p| Path(*p)),\n+        addl_lib_search_paths: @mut lib_search_paths.map(|p| Path(*p)),\n         jit: true,\n         .. copy *session::basic_options()\n     };\n@@ -136,9 +155,9 @@ fn run(mut repl: Repl, input: ~str) -> Repl {\n             };\n             match vi.node {\n                 ast::view_item_extern_mod(*) => {\n-                    repl.program.record_extern(s);\n+                    program.record_extern(s);\n                 }\n-                ast::view_item_use(*) => { repl.program.record_view_item(s); }\n+                ast::view_item_use(*) => { program.record_view_item(s); }\n             }\n         }\n \n@@ -156,10 +175,10 @@ fn run(mut repl: Repl, input: ~str) -> Repl {\n                                 // them at all usable they need to be decorated\n                                 // with #[deriving(Encoable, Decodable)]\n                                 ast::item_struct(*) => {\n-                                    repl.program.record_struct(name, s);\n+                                    program.record_struct(name, s);\n                                 }\n                                 // Item declarations are hoisted out of main()\n-                                _ => { repl.program.record_item(name, s); }\n+                                _ => { program.record_item(name, s); }\n                             }\n                         }\n \n@@ -190,17 +209,17 @@ fn run(mut repl: Repl, input: ~str) -> Repl {\n     }\n     // return fast for empty inputs\n     if to_run.len() == 0 && result.is_none() {\n-        return repl;\n+        return (program, None);\n     }\n \n     //\n     // Stage 2: run everything up to typeck to learn the types of the new\n     //          variables introduced into the program\n     //\n     info!(\"Learning about the new types in the program\");\n-    repl.program.set_cache(); // before register_new_vars (which changes them)\n+    program.set_cache(); // before register_new_vars (which changes them)\n     let input = to_run.connect(\"\\n\");\n-    let test = repl.program.test_code(input, &result, *new_locals);\n+    let test = program.test_code(input, &result, *new_locals);\n     debug!(\"testing with ^^^^^^ %?\", (||{ println(test) })());\n     let dinput = driver::str_input(test.to_managed());\n     let cfg = driver::build_configuration(sess, binary, &dinput);\n@@ -210,14 +229,14 @@ fn run(mut repl: Repl, input: ~str) -> Repl {\n     // Once we're typechecked, record the types of all local variables defined\n     // in this input\n     do find_main(crate.expect(\"crate after cu_typeck\"), sess) |blk| {\n-        repl.program.register_new_vars(blk, tcx.expect(\"tcx after cu_typeck\"));\n+        program.register_new_vars(blk, tcx.expect(\"tcx after cu_typeck\"));\n     }\n \n     //\n     // Stage 3: Actually run the code in the JIT\n     //\n     info!(\"actually running code\");\n-    let code = repl.program.code(input, &result);\n+    let code = program.code(input, &result);\n     debug!(\"actually running ^^^^^^ %?\", (||{ println(code) })());\n     let input = driver::str_input(code.to_managed());\n     let cfg = driver::build_configuration(sess, binary, &input);\n@@ -231,9 +250,15 @@ fn run(mut repl: Repl, input: ~str) -> Repl {\n     //          local variable bindings.\n     //\n     info!(\"cleaning up after code\");\n-    repl.program.consume_cache();\n+    program.consume_cache();\n \n-    return repl;\n+    //\n+    // Stage 5: Extract the LLVM execution engine to take ownership of the\n+    //          generated JIT code. This means that rusti can spawn parallel\n+    //          tasks and we won't deallocate the code emitted until rusti\n+    //          itself is destroyed.\n+    //\n+    return (program, jit::consume_engine());\n \n     fn parse_input(sess: session::Session, binary: @str,\n                    input: &str) -> @ast::crate {\n@@ -418,8 +443,8 @@ fn run_cmd(repl: &mut Repl, _in: @io::Reader, _out: @io::Writer,\n /// Executes a line of input, which may either be rust code or a\n /// :command. Returns a new Repl if it has changed.\n pub fn run_line(repl: &mut Repl, in: @io::Reader, out: @io::Writer, line: ~str,\n-                use_rl: bool)\n-    -> Option<Repl> {\n+                use_rl: bool) -> bool\n+{\n     if line.starts_with(\":\") {\n         // drop the : and the \\n (one byte each)\n         let full = line.slice(1, line.len());\n@@ -442,21 +467,30 @@ pub fn run_line(repl: &mut Repl, in: @io::Reader, out: @io::Writer, line: ~str,\n                         }\n                     }\n                 }\n-                return None;\n+                return true;\n             }\n         }\n     }\n \n     let line = Cell::new(line);\n-    let r = Cell::new(copy *repl);\n+    let program = Cell::new(copy repl.program);\n+    let lib_search_paths = Cell::new(copy repl.lib_search_paths);\n+    let binary = Cell::new(copy repl.binary);\n     let result = do task::try {\n-        run(r.take(), line.take())\n+        run(program.take(), binary.take(), lib_search_paths.take(), line.take())\n     };\n \n-    if result.is_ok() {\n-        return Some(result.get());\n+    match result {\n+        Ok((program, engine)) => {\n+            repl.program = program;\n+            match engine {\n+                Some(e) => { repl.engines.push(e); }\n+                None => {}\n+            }\n+            return true;\n+        }\n+        Err(*) => { return false; }\n     }\n-    return None;\n }\n \n pub fn main() {\n@@ -468,8 +502,9 @@ pub fn main() {\n         binary: copy args[0],\n         running: true,\n         lib_search_paths: ~[],\n+        engines: ~[],\n \n-        program: Program::new(),\n+        program: ~Program::new(),\n     };\n \n     let istty = unsafe { libc::isatty(libc::STDIN_FILENO as i32) } != 0;\n@@ -502,10 +537,7 @@ pub fn main() {\n                     }\n                     loop;\n                 }\n-                match run_line(&mut repl, in, out, line, istty) {\n-                    Some(new_repl) => repl = new_repl,\n-                    None => { }\n-                }\n+                run_line(&mut repl, in, out, line, istty);\n             }\n         }\n     }\n@@ -524,7 +556,8 @@ mod tests {\n             binary: ~\"rusti\",\n             running: true,\n             lib_search_paths: ~[],\n-            program: Program::new(),\n+            engines: ~[],\n+            program: ~Program::new(),\n         }\n     }\n \n@@ -535,9 +568,9 @@ mod tests {\n     fn run_program(prog: &str) {\n         let mut r = repl();\n         for prog.split_iter('\\n').advance |cmd| {\n-            let result = run_line(&mut r, io::stdin(), io::stdout(),\n-                                  cmd.to_owned(), false);\n-            r = result.expect(fmt!(\"the command '%s' failed\", cmd));\n+            assert!(run_line(&mut r, io::stdin(), io::stdout(),\n+                             cmd.to_owned(), false),\n+                    \"the command '%s' failed\", cmd);\n         }\n     }\n     fn run_program(_: &str) {}\n@@ -682,7 +715,7 @@ mod tests {\n         assert!(r.running);\n         let result = run_line(&mut r, io::stdin(), io::stdout(),\n                               ~\":exit\", false);\n-        assert!(result.is_none());\n+        assert!(result);\n         assert!(!r.running);\n     }\n }"}]}