{"sha": "67ee480936947aa5b1953b7b6e48a0c7a191501e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZWU0ODA5MzY5NDdhYTViMTk1M2I3YjZlNDhhMGM3YTE5MTUwMWU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-22T23:23:19Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-24T23:23:03Z"}, "message": "native: Remove unused and untested UnixDatagram", "tree": {"sha": "66245b114ed13a1ba57cb43fd4b30beba9923dff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66245b114ed13a1ba57cb43fd4b30beba9923dff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67ee480936947aa5b1953b7b6e48a0c7a191501e", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67ee480936947aa5b1953b7b6e48a0c7a191501e", "html_url": "https://github.com/rust-lang/rust/commit/67ee480936947aa5b1953b7b6e48a0c7a191501e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67ee480936947aa5b1953b7b6e48a0c7a191501e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b55394415ab63adf32036f63595f3bba3e1c9098", "url": "https://api.github.com/repos/rust-lang/rust/commits/b55394415ab63adf32036f63595f3bba3e1c9098", "html_url": "https://github.com/rust-lang/rust/commit/b55394415ab63adf32036f63595f3bba3e1c9098"}], "stats": {"total": 71, "additions": 0, "deletions": 71}, "files": [{"sha": "5d13a6b5fc5cdd8a36bfe6f099dcbeb2bf9611d4", "filename": "src/libnative/io/pipe_unix.rs", "status": "modified", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/67ee480936947aa5b1953b7b6e48a0c7a191501e/src%2Flibnative%2Fio%2Fpipe_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ee480936947aa5b1953b7b6e48a0c7a191501e/src%2Flibnative%2Fio%2Fpipe_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fpipe_unix.rs?ref=67ee480936947aa5b1953b7b6e48a0c7a191501e", "patch": "@@ -155,77 +155,6 @@ impl rtio::RtioPipe for UnixStream {\n     }\n }\n \n-////////////////////////////////////////////////////////////////////////////////\n-// Unix Datagram\n-////////////////////////////////////////////////////////////////////////////////\n-\n-pub struct UnixDatagram {\n-    inner: UnsafeArc<Inner>,\n-}\n-\n-impl UnixDatagram {\n-    pub fn connect(addr: &CString) -> IoResult<UnixDatagram> {\n-        connect(addr, libc::SOCK_DGRAM).map(|inner| {\n-            UnixDatagram { inner: UnsafeArc::new(inner) }\n-        })\n-    }\n-\n-    pub fn bind(addr: &CString) -> IoResult<UnixDatagram> {\n-        bind(addr, libc::SOCK_DGRAM).map(|inner| {\n-            UnixDatagram { inner: UnsafeArc::new(inner) }\n-        })\n-    }\n-\n-    fn fd(&self) -> fd_t { unsafe { (*self.inner.get()).fd } }\n-\n-    pub fn recvfrom(&mut self, buf: &mut [u8]) -> IoResult<(uint, CString)> {\n-        let mut storage: libc::sockaddr_storage = unsafe { intrinsics::init() };\n-        let storagep = &mut storage as *mut libc::sockaddr_storage;\n-        let mut addrlen: libc::socklen_t =\n-                mem::size_of::<libc::sockaddr_storage>() as libc::socklen_t;\n-        let ret = retry(|| unsafe {\n-            libc::recvfrom(self.fd(),\n-                           buf.as_ptr() as *mut libc::c_void,\n-                           buf.len() as libc::size_t,\n-                           0,\n-                           storagep as *mut libc::sockaddr,\n-                           &mut addrlen) as libc::c_int\n-        });\n-        if ret < 0 { return Err(super::last_error()) }\n-        sockaddr_to_unix(&storage, addrlen as uint).and_then(|addr| {\n-            Ok((ret as uint, addr))\n-        })\n-    }\n-\n-    pub fn sendto(&mut self, buf: &[u8], dst: &CString) -> IoResult<()> {\n-        let (dst, len) = try!(addr_to_sockaddr_un(dst));\n-        let dstp = &dst as *libc::sockaddr_storage;\n-        let ret = retry(|| unsafe {\n-            libc::sendto(self.fd(),\n-                         buf.as_ptr() as *libc::c_void,\n-                         buf.len() as libc::size_t,\n-                         0,\n-                         dstp as *libc::sockaddr,\n-                         len as libc::socklen_t) as libc::c_int\n-        });\n-        match ret {\n-            -1 => Err(super::last_error()),\n-            n if n as uint != buf.len() => {\n-                Err(io::IoError {\n-                    kind: io::OtherIoError,\n-                    desc: \"couldn't send entire packet at once\",\n-                    detail: None,\n-                })\n-            }\n-            _ => Ok(())\n-        }\n-    }\n-\n-    pub fn clone(&mut self) -> UnixDatagram {\n-        UnixDatagram { inner: self.inner.clone() }\n-    }\n-}\n-\n ////////////////////////////////////////////////////////////////////////////////\n // Unix Listener\n ////////////////////////////////////////////////////////////////////////////////"}]}