{"sha": "5d9145ce10c7dff6caa397b7a6c561848399e4f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkOTE0NWNlMTBjN2RmZjZjYWEzOTdiN2E2YzU2MTg0ODM5OWU0Zjk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-31T16:50:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-31T16:50:43Z"}, "message": "Merge #5629\n\n5629: Finalize Path grammar r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "8db83308ee58e07dcfd5071462460a8a50f1ce91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8db83308ee58e07dcfd5071462460a8a50f1ce91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d9145ce10c7dff6caa397b7a6c561848399e4f9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfJEvjCRBK7hj4Ov3rIwAAdHIIAD2w4mJOle2DgY70lCufWhDE\ntNc0S2bxsnRRBsHPLT2zNKPD95j16SSrenAYj91rMIEHsnVVtkZy/UaeID9OFT2r\nkw3f679BkRg7FBm5dxjq7PqYUr0SfcDVnBNJmnAU5b4+I6jGt0YLcLRozaX8Yg1e\n5zqh4JH39ZwzJ11NBAazqdSBCZIjI8dDHgrJAWQfXmMJZhBHxTK+P7Vf4L2N4OPq\nq2glxFsiitvZxuCPluTbEh9rha7I6VgrD15lh4LI5p94iD7wghYHVrfQd+IdDKf+\nLJYTt+om9BIjN/8vBq/Ghz0M1gCggd4vfZdyy+JMcFKi+4mJQjX75iaiHsX42S8=\n=BHfU\n-----END PGP SIGNATURE-----\n", "payload": "tree 8db83308ee58e07dcfd5071462460a8a50f1ce91\nparent 0392a894b7284b13a88a13171e6b8b29764921be\nparent c1c97b289662501cea93fdc10760e08702ff5950\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1596214243 +0000\ncommitter GitHub <noreply@github.com> 1596214243 +0000\n\nMerge #5629\n\n5629: Finalize Path grammar r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d9145ce10c7dff6caa397b7a6c561848399e4f9", "html_url": "https://github.com/rust-lang/rust/commit/5d9145ce10c7dff6caa397b7a6c561848399e4f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d9145ce10c7dff6caa397b7a6c561848399e4f9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0392a894b7284b13a88a13171e6b8b29764921be", "url": "https://api.github.com/repos/rust-lang/rust/commits/0392a894b7284b13a88a13171e6b8b29764921be", "html_url": "https://github.com/rust-lang/rust/commit/0392a894b7284b13a88a13171e6b8b29764921be"}, {"sha": "c1c97b289662501cea93fdc10760e08702ff5950", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1c97b289662501cea93fdc10760e08702ff5950", "html_url": "https://github.com/rust-lang/rust/commit/c1c97b289662501cea93fdc10760e08702ff5950"}], "stats": {"total": 1516, "additions": 789, "deletions": 727}, "files": [{"sha": "0a7be87a0c4a1562e939b299a5383f5065f08986", "filename": "crates/ra_assists/src/ast_transform.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_transform.rs?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -79,19 +79,25 @@ impl<'a> SubstituteTypeParams<'a> {\n         };\n \n         // FIXME: It would probably be nicer if we could get this via HIR (i.e. get the\n-        // trait ref, and then go from the types in the substs back to the syntax)\n+        // trait ref, and then go from the types in the substs back to the syntax).\n         fn get_syntactic_substs(impl_def: ast::Impl) -> Option<Vec<ast::Type>> {\n             let target_trait = impl_def.target_trait()?;\n             let path_type = match target_trait {\n                 ast::Type::PathType(path) => path,\n                 _ => return None,\n             };\n-            let type_arg_list = path_type.path()?.segment()?.type_arg_list()?;\n+            let generic_arg_list = path_type.path()?.segment()?.generic_arg_list()?;\n+\n             let mut result = Vec::new();\n-            for type_arg in type_arg_list.type_args() {\n-                let type_arg: ast::TypeArg = type_arg;\n-                result.push(type_arg.ty()?);\n+            for generic_arg in generic_arg_list.generic_args() {\n+                match generic_arg {\n+                    ast::GenericArg::TypeArg(type_arg) => result.push(type_arg.ty()?),\n+                    ast::GenericArg::AssocTypeArg(_)\n+                    | ast::GenericArg::LifetimeArg(_)\n+                    | ast::GenericArg::ConstArg(_) => (),\n+                }\n             }\n+\n             Some(result)\n         }\n     }\n@@ -157,7 +163,7 @@ impl<'a> QualifyPaths<'a> {\n \n                 let type_args = p\n                     .segment()\n-                    .and_then(|s| s.type_arg_list())\n+                    .and_then(|s| s.generic_arg_list())\n                     .map(|arg_list| apply(self, arg_list));\n                 if let Some(type_args) = type_args {\n                     let last_segment = path.segment().unwrap();"}, {"sha": "6bedc6b564dfd97e1958493e104f95c10808d54a", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -337,7 +337,7 @@ impl ExprCollector<'_> {\n                 };\n                 let method_name = e.name_ref().map(|nr| nr.as_name()).unwrap_or_else(Name::missing);\n                 let generic_args =\n-                    e.type_arg_list().and_then(|it| GenericArgs::from_ast(&self.ctx(), it));\n+                    e.generic_arg_list().and_then(|it| GenericArgs::from_ast(&self.ctx(), it));\n                 self.alloc_expr(\n                     Expr::MethodCall { receiver, method_name, args, generic_args },\n                     syntax_ptr,"}, {"sha": "cc1726e9e054524c3284b03a55a7dade849af627", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -258,7 +258,7 @@ impl<'a> PathSegments<'a> {\n }\n \n impl GenericArgs {\n-    pub(crate) fn from_ast(lower_ctx: &LowerCtx, node: ast::TypeArgList) -> Option<GenericArgs> {\n+    pub(crate) fn from_ast(lower_ctx: &LowerCtx, node: ast::GenericArgList) -> Option<GenericArgs> {\n         lower::lower_generic_args(lower_ctx, node)\n     }\n "}, {"sha": "d09fc66e4dcec0998d80dddde2961d9c56edd61b", "filename": "crates/ra_hir_def/src/path/lower.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -41,7 +41,7 @@ pub(super) fn lower_path(mut path: ast::Path, hygiene: &Hygiene) -> Option<Path>\n                 match hygiene.name_ref_to_name(name_ref) {\n                     Either::Left(name) => {\n                         let args = segment\n-                            .type_arg_list()\n+                            .generic_arg_list()\n                             .and_then(|it| lower_generic_args(&ctx, it))\n                             .or_else(|| {\n                                 lower_generic_args_from_fn_path(\n@@ -148,33 +148,37 @@ pub(super) fn lower_path(mut path: ast::Path, hygiene: &Hygiene) -> Option<Path>\n \n pub(super) fn lower_generic_args(\n     lower_ctx: &LowerCtx,\n-    node: ast::TypeArgList,\n+    node: ast::GenericArgList,\n ) -> Option<GenericArgs> {\n     let mut args = Vec::new();\n-    for type_arg in node.type_args() {\n-        let type_ref = TypeRef::from_ast_opt(lower_ctx, type_arg.ty());\n-        args.push(GenericArg::Type(type_ref));\n-    }\n-    // lifetimes ignored for now\n     let mut bindings = Vec::new();\n-    for assoc_type_arg in node.assoc_type_args() {\n-        let assoc_type_arg: ast::AssocTypeArg = assoc_type_arg;\n-        if let Some(name_ref) = assoc_type_arg.name_ref() {\n-            let name = name_ref.as_name();\n-            let type_ref = assoc_type_arg.ty().map(|it| TypeRef::from_ast(lower_ctx, it));\n-            let bounds = if let Some(l) = assoc_type_arg.type_bound_list() {\n-                l.bounds().map(|it| TypeBound::from_ast(lower_ctx, it)).collect()\n-            } else {\n-                Vec::new()\n-            };\n-            bindings.push(AssociatedTypeBinding { name, type_ref, bounds });\n+    for generic_arg in node.generic_args() {\n+        match generic_arg {\n+            ast::GenericArg::TypeArg(type_arg) => {\n+                let type_ref = TypeRef::from_ast_opt(lower_ctx, type_arg.ty());\n+                args.push(GenericArg::Type(type_ref));\n+            }\n+            ast::GenericArg::AssocTypeArg(assoc_type_arg) => {\n+                if let Some(name_ref) = assoc_type_arg.name_ref() {\n+                    let name = name_ref.as_name();\n+                    let type_ref = assoc_type_arg.ty().map(|it| TypeRef::from_ast(lower_ctx, it));\n+                    let bounds = if let Some(l) = assoc_type_arg.type_bound_list() {\n+                        l.bounds().map(|it| TypeBound::from_ast(lower_ctx, it)).collect()\n+                    } else {\n+                        Vec::new()\n+                    };\n+                    bindings.push(AssociatedTypeBinding { name, type_ref, bounds });\n+                }\n+            }\n+            // Lifetimes and constants are ignored for now.\n+            ast::GenericArg::LifetimeArg(_) | ast::GenericArg::ConstArg(_) => (),\n         }\n     }\n+\n     if args.is_empty() && bindings.is_empty() {\n-        None\n-    } else {\n-        Some(GenericArgs { args, has_self_type: false, bindings })\n+        return None;\n     }\n+    Some(GenericArgs { args, has_self_type: false, bindings })\n }\n \n /// Collect `GenericArgs` from the parts of a fn-like path, i.e. `Fn(X, Y)"}, {"sha": "2a5f3c3d20fcbbe2b2a320fcb736acb1fceeb125", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -377,7 +377,7 @@ impl<'a> CompletionContext<'a> {\n                 path.syntax().parent().and_then(ast::TupleStructPat::cast).is_some();\n \n             self.is_path_type = path.syntax().parent().and_then(ast::PathType::cast).is_some();\n-            self.has_type_args = segment.type_arg_list().is_some();\n+            self.has_type_args = segment.generic_arg_list().is_some();\n \n             #[allow(deprecated)]\n             if let Some(path) = hir::Path::from_ast(path.clone()) {"}, {"sha": "319fd500d9977d70dad4025a262781610fc09c17", "filename": "crates/ra_ide/src/extend_selection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -45,7 +45,7 @@ fn try_extend_selection(\n         VARIANT_LIST,\n         USE_TREE_LIST,\n         GENERIC_PARAM_LIST,\n-        TYPE_ARG_LIST,\n+        GENERIC_ARG_LIST,\n         TYPE_BOUND_LIST,\n         PARAM_LIST,\n         ARG_LIST,"}, {"sha": "aef7cd6fbb2d5f86fe2bc537bead3b0dcf68fd1f", "filename": "crates/ra_parser/src/grammar/type_args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_args.rs?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -22,7 +22,7 @@ pub(super) fn opt_type_arg_list(p: &mut Parser, colon_colon_required: bool) {\n         }\n     }\n     p.expect(T![>]);\n-    m.complete(p, TYPE_ARG_LIST);\n+    m.complete(p, GENERIC_ARG_LIST);\n }\n \n // test type_arg\n@@ -52,7 +52,7 @@ fn type_arg(p: &mut Parser) {\n             m.complete(p, CONST_ARG);\n         }\n         k if k.is_literal() => {\n-            p.bump(k);\n+            expressions::literal(p);\n             m.complete(p, CONST_ARG);\n         }\n         _ => {"}, {"sha": "c3670fb62c10db368484a1d3d7f658785f3da274", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -235,7 +235,7 @@ pub enum SyntaxKind {\n     LIFETIME_PARAM,\n     TYPE_PARAM,\n     CONST_PARAM,\n-    TYPE_ARG_LIST,\n+    GENERIC_ARG_LIST,\n     LIFETIME_ARG,\n     TYPE_ARG,\n     ASSOC_TYPE_ARG,"}, {"sha": "0f72fea69113b8dd576438993f2404975fa94884", "filename": "crates/ra_ssr/src/matching.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_ssr%2Fsrc%2Fmatching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_ssr%2Fsrc%2Fmatching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Fmatching.rs?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -348,8 +348,8 @@ impl<'db, 'sema> Matcher<'db, 'sema> {\n                 // separately via comparing what the path resolves to below.\n                 self.attempt_match_opt(\n                     phase,\n-                    pattern_segment.type_arg_list(),\n-                    code_segment.type_arg_list(),\n+                    pattern_segment.generic_arg_list(),\n+                    code_segment.generic_arg_list(),\n                 )?;\n                 self.attempt_match_opt(\n                     phase,"}, {"sha": "c2fd3b9050f6a1ffafa7d544a166ec39dea2e9bc", "filename": "crates/ra_ssr/src/resolving.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_ssr%2Fsrc%2Fresolving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_ssr%2Fsrc%2Fresolving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Fresolving.rs?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -217,7 +217,7 @@ fn pick_node_for_resolution(node: SyntaxNode) -> SyntaxNode {\n fn path_contains_type_arguments(path: Option<ast::Path>) -> bool {\n     if let Some(path) = path {\n         if let Some(segment) = path.segment() {\n-            if segment.type_arg_list().is_some() {\n+            if segment.generic_arg_list().is_some() {\n                 mark::hit!(type_arguments_within_path);\n                 return true;\n             }"}, {"sha": "04746ef8f4caa0901d367066a48aaf76d6a622b0", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -237,17 +237,17 @@ impl ast::Path {\n \n impl ast::PathSegment {\n     #[must_use]\n-    pub fn with_type_args(&self, type_args: ast::TypeArgList) -> ast::PathSegment {\n+    pub fn with_type_args(&self, type_args: ast::GenericArgList) -> ast::PathSegment {\n         self._with_type_args(type_args, false)\n     }\n \n     #[must_use]\n-    pub fn with_turbo_fish(&self, type_args: ast::TypeArgList) -> ast::PathSegment {\n+    pub fn with_turbo_fish(&self, type_args: ast::GenericArgList) -> ast::PathSegment {\n         self._with_type_args(type_args, true)\n     }\n \n-    fn _with_type_args(&self, type_args: ast::TypeArgList, turbo: bool) -> ast::PathSegment {\n-        if let Some(old) = self.type_arg_list() {\n+    fn _with_type_args(&self, type_args: ast::GenericArgList, turbo: bool) -> ast::PathSegment {\n+        if let Some(old) = self.generic_arg_list() {\n             return self.replace_children(\n                 single_node(old.syntax().clone()),\n                 iter::once(type_args.syntax().clone().into()),"}, {"sha": "c25fa7d5f94cc9158d4c6d3b99f0445a031b22f6", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 661, "deletions": 614, "changes": 1275, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -6,6 +6,116 @@ use crate::{\n     SyntaxNode, SyntaxToken, T,\n };\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct Path {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl Path {\n+    pub fn qualifier(&self) -> Option<Path> { support::child(&self.syntax) }\n+    pub fn coloncolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![::]) }\n+    pub fn segment(&self) -> Option<PathSegment> { support::child(&self.syntax) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct PathSegment {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl PathSegment {\n+    pub fn crate_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![crate]) }\n+    pub fn self_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![self]) }\n+    pub fn super_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![super]) }\n+    pub fn coloncolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![::]) }\n+    pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n+    pub fn generic_arg_list(&self) -> Option<GenericArgList> { support::child(&self.syntax) }\n+    pub fn param_list(&self) -> Option<ParamList> { support::child(&self.syntax) }\n+    pub fn ret_type(&self) -> Option<RetType> { support::child(&self.syntax) }\n+    pub fn l_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![<]) }\n+    pub fn path_type(&self) -> Option<PathType> { support::child(&self.syntax) }\n+    pub fn as_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![as]) }\n+    pub fn r_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![>]) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct NameRef {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl NameRef {\n+    pub fn ident_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![ident]) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct GenericArgList {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl GenericArgList {\n+    pub fn coloncolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![::]) }\n+    pub fn l_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![<]) }\n+    pub fn generic_args(&self) -> AstChildren<GenericArg> { support::children(&self.syntax) }\n+    pub fn r_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![>]) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct ParamList {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ParamList {\n+    pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n+    pub fn self_param(&self) -> Option<SelfParam> { support::child(&self.syntax) }\n+    pub fn comma_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![,]) }\n+    pub fn params(&self) -> AstChildren<Param> { support::children(&self.syntax) }\n+    pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct RetType {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl RetType {\n+    pub fn thin_arrow_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![->]) }\n+    pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct PathType {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl PathType {\n+    pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct TypeArg {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl TypeArg {\n+    pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct AssocTypeArg {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ast::TypeBoundsOwner for AssocTypeArg {}\n+impl AssocTypeArg {\n+    pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n+    pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct LifetimeArg {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl LifetimeArg {\n+    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n+        support::token(&self.syntax, T![lifetime])\n+    }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct ConstArg {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ConstArg {\n+    pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct TypeBoundList {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl TypeBoundList {\n+    pub fn bounds(&self) -> AstChildren<TypeBound> { support::children(&self.syntax) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct SourceFile {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -256,13 +366,6 @@ impl ItemList {\n     pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct NameRef {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl NameRef {\n-    pub fn ident_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![ident]) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Rename {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -283,15 +386,6 @@ impl UseTree {\n     pub fn rename(&self) -> Option<Rename> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Path {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl Path {\n-    pub fn qualifier(&self) -> Option<Path> { support::child(&self.syntax) }\n-    pub fn coloncolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![::]) }\n-    pub fn segment(&self) -> Option<PathSegment> { support::child(&self.syntax) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct UseTreeList {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -317,25 +411,6 @@ impl GenericParamList {\n     pub fn r_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![>]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ParamList {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl ParamList {\n-    pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n-    pub fn self_param(&self) -> Option<SelfParam> { support::child(&self.syntax) }\n-    pub fn comma_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![,]) }\n-    pub fn params(&self) -> AstChildren<Param> { support::children(&self.syntax) }\n-    pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct RetType {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl RetType {\n-    pub fn thin_arrow_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![->]) }\n-    pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct WhereClause {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -381,13 +456,6 @@ impl Param {\n     pub fn dotdotdot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![...]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TypeBoundList {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl TypeBoundList {\n-    pub fn bounds(&self) -> AstChildren<TypeBound> { support::children(&self.syntax) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RecordFieldList {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -731,7 +799,7 @@ impl MethodCallExpr {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n     pub fn dot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![.]) }\n     pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n-    pub fn type_arg_list(&self) -> Option<TypeArgList> { support::child(&self.syntax) }\n+    pub fn generic_arg_list(&self) -> Option<GenericArgList> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ParenExpr {\n@@ -866,19 +934,6 @@ impl ArgList {\n     pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TypeArgList {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl TypeArgList {\n-    pub fn coloncolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![::]) }\n-    pub fn l_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![<]) }\n-    pub fn type_args(&self) -> AstChildren<TypeArg> { support::children(&self.syntax) }\n-    pub fn lifetime_args(&self) -> AstChildren<LifetimeArg> { support::children(&self.syntax) }\n-    pub fn assoc_type_args(&self) -> AstChildren<AssocTypeArg> { support::children(&self.syntax) }\n-    pub fn const_args(&self) -> AstChildren<ConstArg> { support::children(&self.syntax) }\n-    pub fn r_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![>]) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Condition {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -991,13 +1046,6 @@ impl ParenType {\n     pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct PathType {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl PathType {\n-    pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct PointerType {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -1220,74 +1268,12 @@ impl MacroStmts {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct PathSegment {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl PathSegment {\n-    pub fn coloncolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![::]) }\n-    pub fn crate_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![crate]) }\n-    pub fn self_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![self]) }\n-    pub fn super_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![super]) }\n-    pub fn l_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![<]) }\n-    pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n-    pub fn type_arg_list(&self) -> Option<TypeArgList> { support::child(&self.syntax) }\n-    pub fn param_list(&self) -> Option<ParamList> { support::child(&self.syntax) }\n-    pub fn ret_type(&self) -> Option<RetType> { support::child(&self.syntax) }\n-    pub fn path_type(&self) -> Option<PathType> { support::child(&self.syntax) }\n-    pub fn r_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![>]) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TypeArg {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl TypeArg {\n-    pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct LifetimeArg {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl LifetimeArg {\n-    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n-        support::token(&self.syntax, T![lifetime])\n-    }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct AssocTypeArg {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl ast::TypeBoundsOwner for AssocTypeArg {}\n-impl AssocTypeArg {\n-    pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n-    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n-    pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ConstArg {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl ConstArg {\n-    pub fn literal(&self) -> Option<Literal> { support::child(&self.syntax) }\n-    pub fn block_expr(&self) -> Option<BlockExpr> { support::child(&self.syntax) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum Item {\n-    Const(Const),\n-    Enum(Enum),\n-    ExternBlock(ExternBlock),\n-    ExternCrate(ExternCrate),\n-    Fn(Fn),\n-    Impl(Impl),\n-    MacroCall(MacroCall),\n-    Module(Module),\n-    Static(Static),\n-    Struct(Struct),\n-    Trait(Trait),\n-    TypeAlias(TypeAlias),\n-    Union(Union),\n-    Use(Use),\n+pub enum GenericArg {\n+    TypeArg(TypeArg),\n+    AssocTypeArg(AssocTypeArg),\n+    LifetimeArg(LifetimeArg),\n+    ConstArg(ConstArg),\n }\n-impl ast::AttrsOwner for Item {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum Type {\n     ArrayType(ArrayType),\n@@ -1305,29 +1291,6 @@ pub enum Type {\n     TupleType(TupleType),\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum Pat {\n-    OrPat(OrPat),\n-    ParenPat(ParenPat),\n-    RefPat(RefPat),\n-    BoxPat(BoxPat),\n-    BindPat(BindPat),\n-    PlaceholderPat(PlaceholderPat),\n-    DotDotPat(DotDotPat),\n-    PathPat(PathPat),\n-    RecordPat(RecordPat),\n-    TupleStructPat(TupleStructPat),\n-    TuplePat(TuplePat),\n-    SlicePat(SlicePat),\n-    RangePat(RangePat),\n-    LiteralPat(LiteralPat),\n-    MacroPat(MacroPat),\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum FieldList {\n-    RecordFieldList(RecordFieldList),\n-    TupleFieldList(TupleFieldList),\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum Expr {\n     ArrayExpr(ArrayExpr),\n     AwaitExpr(AwaitExpr),\n@@ -1361,10 +1324,51 @@ pub enum Expr {\n     WhileExpr(WhileExpr),\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum AdtDef {\n+pub enum Item {\n+    Const(Const),\n     Enum(Enum),\n-    Struct(Struct),\n-    Union(Union),\n+    ExternBlock(ExternBlock),\n+    ExternCrate(ExternCrate),\n+    Fn(Fn),\n+    Impl(Impl),\n+    MacroCall(MacroCall),\n+    Module(Module),\n+    Static(Static),\n+    Struct(Struct),\n+    Trait(Trait),\n+    TypeAlias(TypeAlias),\n+    Union(Union),\n+    Use(Use),\n+}\n+impl ast::AttrsOwner for Item {}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub enum Pat {\n+    OrPat(OrPat),\n+    ParenPat(ParenPat),\n+    RefPat(RefPat),\n+    BoxPat(BoxPat),\n+    BindPat(BindPat),\n+    PlaceholderPat(PlaceholderPat),\n+    DotDotPat(DotDotPat),\n+    PathPat(PathPat),\n+    RecordPat(RecordPat),\n+    TupleStructPat(TupleStructPat),\n+    TuplePat(TuplePat),\n+    SlicePat(SlicePat),\n+    RangePat(RangePat),\n+    LiteralPat(LiteralPat),\n+    MacroPat(MacroPat),\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub enum FieldList {\n+    RecordFieldList(RecordFieldList),\n+    TupleFieldList(TupleFieldList),\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub enum AdtDef {\n+    Enum(Enum),\n+    Struct(Struct),\n+    Union(Union),\n }\n impl ast::AttrsOwner for AdtDef {}\n impl ast::GenericParamsOwner for AdtDef {}\n@@ -1400,6 +1404,138 @@ pub enum Stmt {\n     Item(Item),\n     LetStmt(LetStmt),\n }\n+impl AstNode for Path {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == PATH }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+impl AstNode for PathSegment {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == PATH_SEGMENT }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+impl AstNode for NameRef {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == NAME_REF }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+impl AstNode for GenericArgList {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == GENERIC_ARG_LIST }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+impl AstNode for ParamList {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == PARAM_LIST }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+impl AstNode for RetType {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == RET_TYPE }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+impl AstNode for PathType {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == PATH_TYPE }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+impl AstNode for TypeArg {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_ARG }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+impl AstNode for AssocTypeArg {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == ASSOC_TYPE_ARG }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+impl AstNode for LifetimeArg {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == LIFETIME_ARG }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+impl AstNode for ConstArg {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == CONST_ARG }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+impl AstNode for TypeBoundList {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_BOUND_LIST }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for SourceFile {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == SOURCE_FILE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1609,17 +1745,6 @@ impl AstNode for ItemList {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for NameRef {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == NAME_REF }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl AstNode for Rename {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == RENAME }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1642,17 +1767,6 @@ impl AstNode for UseTree {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for Path {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == PATH }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl AstNode for UseTreeList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == USE_TREE_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1686,28 +1800,6 @@ impl AstNode for GenericParamList {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for ParamList {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == PARAM_LIST }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n-impl AstNode for RetType {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == RET_TYPE }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl AstNode for WhereClause {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == WHERE_CLAUSE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1752,17 +1844,6 @@ impl AstNode for Param {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for TypeBoundList {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_BOUND_LIST }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl AstNode for RecordFieldList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_FIELD_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2280,17 +2361,6 @@ impl AstNode for ArgList {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for TypeArgList {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_ARG_LIST }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl AstNode for Condition {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == CONDITION }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2423,17 +2493,6 @@ impl AstNode for ParenType {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for PathType {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == PATH_TYPE }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl AstNode for PointerType {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == POINTER_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2709,147 +2768,41 @@ impl AstNode for MacroStmts {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for PathSegment {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == PATH_SEGMENT }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n-impl AstNode for TypeArg {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_ARG }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n-impl AstNode for LifetimeArg {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == LIFETIME_ARG }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n-impl AstNode for AssocTypeArg {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == ASSOC_TYPE_ARG }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n-impl AstNode for ConstArg {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == CONST_ARG }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n-impl From<Const> for Item {\n-    fn from(node: Const) -> Item { Item::Const(node) }\n-}\n-impl From<Enum> for Item {\n-    fn from(node: Enum) -> Item { Item::Enum(node) }\n-}\n-impl From<ExternBlock> for Item {\n-    fn from(node: ExternBlock) -> Item { Item::ExternBlock(node) }\n-}\n-impl From<ExternCrate> for Item {\n-    fn from(node: ExternCrate) -> Item { Item::ExternCrate(node) }\n-}\n-impl From<Fn> for Item {\n-    fn from(node: Fn) -> Item { Item::Fn(node) }\n+impl From<TypeArg> for GenericArg {\n+    fn from(node: TypeArg) -> GenericArg { GenericArg::TypeArg(node) }\n }\n-impl From<Impl> for Item {\n-    fn from(node: Impl) -> Item { Item::Impl(node) }\n+impl From<AssocTypeArg> for GenericArg {\n+    fn from(node: AssocTypeArg) -> GenericArg { GenericArg::AssocTypeArg(node) }\n }\n-impl From<MacroCall> for Item {\n-    fn from(node: MacroCall) -> Item { Item::MacroCall(node) }\n+impl From<LifetimeArg> for GenericArg {\n+    fn from(node: LifetimeArg) -> GenericArg { GenericArg::LifetimeArg(node) }\n }\n-impl From<Module> for Item {\n-    fn from(node: Module) -> Item { Item::Module(node) }\n+impl From<ConstArg> for GenericArg {\n+    fn from(node: ConstArg) -> GenericArg { GenericArg::ConstArg(node) }\n }\n-impl From<Static> for Item {\n-    fn from(node: Static) -> Item { Item::Static(node) }\n-}\n-impl From<Struct> for Item {\n-    fn from(node: Struct) -> Item { Item::Struct(node) }\n-}\n-impl From<Trait> for Item {\n-    fn from(node: Trait) -> Item { Item::Trait(node) }\n-}\n-impl From<TypeAlias> for Item {\n-    fn from(node: TypeAlias) -> Item { Item::TypeAlias(node) }\n-}\n-impl From<Union> for Item {\n-    fn from(node: Union) -> Item { Item::Union(node) }\n-}\n-impl From<Use> for Item {\n-    fn from(node: Use) -> Item { Item::Use(node) }\n-}\n-impl AstNode for Item {\n+impl AstNode for GenericArg {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            CONST | ENUM | EXTERN_BLOCK | EXTERN_CRATE | FN | IMPL | MACRO_CALL | MODULE\n-            | STATIC | STRUCT | TRAIT | TYPE_ALIAS | UNION | USE => true,\n+            TYPE_ARG | ASSOC_TYPE_ARG | LIFETIME_ARG | CONST_ARG => true,\n             _ => false,\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n-            CONST => Item::Const(Const { syntax }),\n-            ENUM => Item::Enum(Enum { syntax }),\n-            EXTERN_BLOCK => Item::ExternBlock(ExternBlock { syntax }),\n-            EXTERN_CRATE => Item::ExternCrate(ExternCrate { syntax }),\n-            FN => Item::Fn(Fn { syntax }),\n-            IMPL => Item::Impl(Impl { syntax }),\n-            MACRO_CALL => Item::MacroCall(MacroCall { syntax }),\n-            MODULE => Item::Module(Module { syntax }),\n-            STATIC => Item::Static(Static { syntax }),\n-            STRUCT => Item::Struct(Struct { syntax }),\n-            TRAIT => Item::Trait(Trait { syntax }),\n-            TYPE_ALIAS => Item::TypeAlias(TypeAlias { syntax }),\n-            UNION => Item::Union(Union { syntax }),\n-            USE => Item::Use(Use { syntax }),\n+            TYPE_ARG => GenericArg::TypeArg(TypeArg { syntax }),\n+            ASSOC_TYPE_ARG => GenericArg::AssocTypeArg(AssocTypeArg { syntax }),\n+            LIFETIME_ARG => GenericArg::LifetimeArg(LifetimeArg { syntax }),\n+            CONST_ARG => GenericArg::ConstArg(ConstArg { syntax }),\n             _ => return None,\n         };\n         Some(res)\n     }\n     fn syntax(&self) -> &SyntaxNode {\n         match self {\n-            Item::Const(it) => &it.syntax,\n-            Item::Enum(it) => &it.syntax,\n-            Item::ExternBlock(it) => &it.syntax,\n-            Item::ExternCrate(it) => &it.syntax,\n-            Item::Fn(it) => &it.syntax,\n-            Item::Impl(it) => &it.syntax,\n-            Item::MacroCall(it) => &it.syntax,\n-            Item::Module(it) => &it.syntax,\n-            Item::Static(it) => &it.syntax,\n-            Item::Struct(it) => &it.syntax,\n-            Item::Trait(it) => &it.syntax,\n-            Item::TypeAlias(it) => &it.syntax,\n-            Item::Union(it) => &it.syntax,\n-            Item::Use(it) => &it.syntax,\n+            GenericArg::TypeArg(it) => &it.syntax,\n+            GenericArg::AssocTypeArg(it) => &it.syntax,\n+            GenericArg::LifetimeArg(it) => &it.syntax,\n+            GenericArg::ConstArg(it) => &it.syntax,\n         }\n     }\n }\n@@ -2938,129 +2891,6 @@ impl AstNode for Type {\n         }\n     }\n }\n-impl From<OrPat> for Pat {\n-    fn from(node: OrPat) -> Pat { Pat::OrPat(node) }\n-}\n-impl From<ParenPat> for Pat {\n-    fn from(node: ParenPat) -> Pat { Pat::ParenPat(node) }\n-}\n-impl From<RefPat> for Pat {\n-    fn from(node: RefPat) -> Pat { Pat::RefPat(node) }\n-}\n-impl From<BoxPat> for Pat {\n-    fn from(node: BoxPat) -> Pat { Pat::BoxPat(node) }\n-}\n-impl From<BindPat> for Pat {\n-    fn from(node: BindPat) -> Pat { Pat::BindPat(node) }\n-}\n-impl From<PlaceholderPat> for Pat {\n-    fn from(node: PlaceholderPat) -> Pat { Pat::PlaceholderPat(node) }\n-}\n-impl From<DotDotPat> for Pat {\n-    fn from(node: DotDotPat) -> Pat { Pat::DotDotPat(node) }\n-}\n-impl From<PathPat> for Pat {\n-    fn from(node: PathPat) -> Pat { Pat::PathPat(node) }\n-}\n-impl From<RecordPat> for Pat {\n-    fn from(node: RecordPat) -> Pat { Pat::RecordPat(node) }\n-}\n-impl From<TupleStructPat> for Pat {\n-    fn from(node: TupleStructPat) -> Pat { Pat::TupleStructPat(node) }\n-}\n-impl From<TuplePat> for Pat {\n-    fn from(node: TuplePat) -> Pat { Pat::TuplePat(node) }\n-}\n-impl From<SlicePat> for Pat {\n-    fn from(node: SlicePat) -> Pat { Pat::SlicePat(node) }\n-}\n-impl From<RangePat> for Pat {\n-    fn from(node: RangePat) -> Pat { Pat::RangePat(node) }\n-}\n-impl From<LiteralPat> for Pat {\n-    fn from(node: LiteralPat) -> Pat { Pat::LiteralPat(node) }\n-}\n-impl From<MacroPat> for Pat {\n-    fn from(node: MacroPat) -> Pat { Pat::MacroPat(node) }\n-}\n-impl AstNode for Pat {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            OR_PAT | PAREN_PAT | REF_PAT | BOX_PAT | BIND_PAT | PLACEHOLDER_PAT | DOT_DOT_PAT\n-            | PATH_PAT | RECORD_PAT | TUPLE_STRUCT_PAT | TUPLE_PAT | SLICE_PAT | RANGE_PAT\n-            | LITERAL_PAT | MACRO_PAT => true,\n-            _ => false,\n-        }\n-    }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        let res = match syntax.kind() {\n-            OR_PAT => Pat::OrPat(OrPat { syntax }),\n-            PAREN_PAT => Pat::ParenPat(ParenPat { syntax }),\n-            REF_PAT => Pat::RefPat(RefPat { syntax }),\n-            BOX_PAT => Pat::BoxPat(BoxPat { syntax }),\n-            BIND_PAT => Pat::BindPat(BindPat { syntax }),\n-            PLACEHOLDER_PAT => Pat::PlaceholderPat(PlaceholderPat { syntax }),\n-            DOT_DOT_PAT => Pat::DotDotPat(DotDotPat { syntax }),\n-            PATH_PAT => Pat::PathPat(PathPat { syntax }),\n-            RECORD_PAT => Pat::RecordPat(RecordPat { syntax }),\n-            TUPLE_STRUCT_PAT => Pat::TupleStructPat(TupleStructPat { syntax }),\n-            TUPLE_PAT => Pat::TuplePat(TuplePat { syntax }),\n-            SLICE_PAT => Pat::SlicePat(SlicePat { syntax }),\n-            RANGE_PAT => Pat::RangePat(RangePat { syntax }),\n-            LITERAL_PAT => Pat::LiteralPat(LiteralPat { syntax }),\n-            MACRO_PAT => Pat::MacroPat(MacroPat { syntax }),\n-            _ => return None,\n-        };\n-        Some(res)\n-    }\n-    fn syntax(&self) -> &SyntaxNode {\n-        match self {\n-            Pat::OrPat(it) => &it.syntax,\n-            Pat::ParenPat(it) => &it.syntax,\n-            Pat::RefPat(it) => &it.syntax,\n-            Pat::BoxPat(it) => &it.syntax,\n-            Pat::BindPat(it) => &it.syntax,\n-            Pat::PlaceholderPat(it) => &it.syntax,\n-            Pat::DotDotPat(it) => &it.syntax,\n-            Pat::PathPat(it) => &it.syntax,\n-            Pat::RecordPat(it) => &it.syntax,\n-            Pat::TupleStructPat(it) => &it.syntax,\n-            Pat::TuplePat(it) => &it.syntax,\n-            Pat::SlicePat(it) => &it.syntax,\n-            Pat::RangePat(it) => &it.syntax,\n-            Pat::LiteralPat(it) => &it.syntax,\n-            Pat::MacroPat(it) => &it.syntax,\n-        }\n-    }\n-}\n-impl From<RecordFieldList> for FieldList {\n-    fn from(node: RecordFieldList) -> FieldList { FieldList::RecordFieldList(node) }\n-}\n-impl From<TupleFieldList> for FieldList {\n-    fn from(node: TupleFieldList) -> FieldList { FieldList::TupleFieldList(node) }\n-}\n-impl AstNode for FieldList {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            RECORD_FIELD_LIST | TUPLE_FIELD_LIST => true,\n-            _ => false,\n-        }\n-    }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        let res = match syntax.kind() {\n-            RECORD_FIELD_LIST => FieldList::RecordFieldList(RecordFieldList { syntax }),\n-            TUPLE_FIELD_LIST => FieldList::TupleFieldList(TupleFieldList { syntax }),\n-            _ => return None,\n-        };\n-        Some(res)\n-    }\n-    fn syntax(&self) -> &SyntaxNode {\n-        match self {\n-            FieldList::RecordFieldList(it) => &it.syntax,\n-            FieldList::TupleFieldList(it) => &it.syntax,\n-        }\n-    }\n-}\n impl From<ArrayExpr> for Expr {\n     fn from(node: ArrayExpr) -> Expr { Expr::ArrayExpr(node) }\n }\n@@ -3145,91 +2975,303 @@ impl From<ReturnExpr> for Expr {\n impl From<TryExpr> for Expr {\n     fn from(node: TryExpr) -> Expr { Expr::TryExpr(node) }\n }\n-impl From<TupleExpr> for Expr {\n-    fn from(node: TupleExpr) -> Expr { Expr::TupleExpr(node) }\n+impl From<TupleExpr> for Expr {\n+    fn from(node: TupleExpr) -> Expr { Expr::TupleExpr(node) }\n+}\n+impl From<WhileExpr> for Expr {\n+    fn from(node: WhileExpr) -> Expr { Expr::WhileExpr(node) }\n+}\n+impl AstNode for Expr {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        match kind {\n+            ARRAY_EXPR | AWAIT_EXPR | BIN_EXPR | BLOCK_EXPR | BOX_EXPR | BREAK_EXPR | CALL_EXPR\n+            | CAST_EXPR | CLOSURE_EXPR | CONTINUE_EXPR | EFFECT_EXPR | FIELD_EXPR | FOR_EXPR\n+            | IF_EXPR | INDEX_EXPR | LITERAL | LOOP_EXPR | MACRO_CALL | MATCH_EXPR\n+            | METHOD_CALL_EXPR | PAREN_EXPR | PATH_EXPR | PREFIX_EXPR | RANGE_EXPR\n+            | RECORD_EXPR | REF_EXPR | RETURN_EXPR | TRY_EXPR | TUPLE_EXPR | WHILE_EXPR => true,\n+            _ => false,\n+        }\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        let res = match syntax.kind() {\n+            ARRAY_EXPR => Expr::ArrayExpr(ArrayExpr { syntax }),\n+            AWAIT_EXPR => Expr::AwaitExpr(AwaitExpr { syntax }),\n+            BIN_EXPR => Expr::BinExpr(BinExpr { syntax }),\n+            BLOCK_EXPR => Expr::BlockExpr(BlockExpr { syntax }),\n+            BOX_EXPR => Expr::BoxExpr(BoxExpr { syntax }),\n+            BREAK_EXPR => Expr::BreakExpr(BreakExpr { syntax }),\n+            CALL_EXPR => Expr::CallExpr(CallExpr { syntax }),\n+            CAST_EXPR => Expr::CastExpr(CastExpr { syntax }),\n+            CLOSURE_EXPR => Expr::ClosureExpr(ClosureExpr { syntax }),\n+            CONTINUE_EXPR => Expr::ContinueExpr(ContinueExpr { syntax }),\n+            EFFECT_EXPR => Expr::EffectExpr(EffectExpr { syntax }),\n+            FIELD_EXPR => Expr::FieldExpr(FieldExpr { syntax }),\n+            FOR_EXPR => Expr::ForExpr(ForExpr { syntax }),\n+            IF_EXPR => Expr::IfExpr(IfExpr { syntax }),\n+            INDEX_EXPR => Expr::IndexExpr(IndexExpr { syntax }),\n+            LITERAL => Expr::Literal(Literal { syntax }),\n+            LOOP_EXPR => Expr::LoopExpr(LoopExpr { syntax }),\n+            MACRO_CALL => Expr::MacroCall(MacroCall { syntax }),\n+            MATCH_EXPR => Expr::MatchExpr(MatchExpr { syntax }),\n+            METHOD_CALL_EXPR => Expr::MethodCallExpr(MethodCallExpr { syntax }),\n+            PAREN_EXPR => Expr::ParenExpr(ParenExpr { syntax }),\n+            PATH_EXPR => Expr::PathExpr(PathExpr { syntax }),\n+            PREFIX_EXPR => Expr::PrefixExpr(PrefixExpr { syntax }),\n+            RANGE_EXPR => Expr::RangeExpr(RangeExpr { syntax }),\n+            RECORD_EXPR => Expr::RecordExpr(RecordExpr { syntax }),\n+            REF_EXPR => Expr::RefExpr(RefExpr { syntax }),\n+            RETURN_EXPR => Expr::ReturnExpr(ReturnExpr { syntax }),\n+            TRY_EXPR => Expr::TryExpr(TryExpr { syntax }),\n+            TUPLE_EXPR => Expr::TupleExpr(TupleExpr { syntax }),\n+            WHILE_EXPR => Expr::WhileExpr(WhileExpr { syntax }),\n+            _ => return None,\n+        };\n+        Some(res)\n+    }\n+    fn syntax(&self) -> &SyntaxNode {\n+        match self {\n+            Expr::ArrayExpr(it) => &it.syntax,\n+            Expr::AwaitExpr(it) => &it.syntax,\n+            Expr::BinExpr(it) => &it.syntax,\n+            Expr::BlockExpr(it) => &it.syntax,\n+            Expr::BoxExpr(it) => &it.syntax,\n+            Expr::BreakExpr(it) => &it.syntax,\n+            Expr::CallExpr(it) => &it.syntax,\n+            Expr::CastExpr(it) => &it.syntax,\n+            Expr::ClosureExpr(it) => &it.syntax,\n+            Expr::ContinueExpr(it) => &it.syntax,\n+            Expr::EffectExpr(it) => &it.syntax,\n+            Expr::FieldExpr(it) => &it.syntax,\n+            Expr::ForExpr(it) => &it.syntax,\n+            Expr::IfExpr(it) => &it.syntax,\n+            Expr::IndexExpr(it) => &it.syntax,\n+            Expr::Literal(it) => &it.syntax,\n+            Expr::LoopExpr(it) => &it.syntax,\n+            Expr::MacroCall(it) => &it.syntax,\n+            Expr::MatchExpr(it) => &it.syntax,\n+            Expr::MethodCallExpr(it) => &it.syntax,\n+            Expr::ParenExpr(it) => &it.syntax,\n+            Expr::PathExpr(it) => &it.syntax,\n+            Expr::PrefixExpr(it) => &it.syntax,\n+            Expr::RangeExpr(it) => &it.syntax,\n+            Expr::RecordExpr(it) => &it.syntax,\n+            Expr::RefExpr(it) => &it.syntax,\n+            Expr::ReturnExpr(it) => &it.syntax,\n+            Expr::TryExpr(it) => &it.syntax,\n+            Expr::TupleExpr(it) => &it.syntax,\n+            Expr::WhileExpr(it) => &it.syntax,\n+        }\n+    }\n+}\n+impl From<Const> for Item {\n+    fn from(node: Const) -> Item { Item::Const(node) }\n+}\n+impl From<Enum> for Item {\n+    fn from(node: Enum) -> Item { Item::Enum(node) }\n+}\n+impl From<ExternBlock> for Item {\n+    fn from(node: ExternBlock) -> Item { Item::ExternBlock(node) }\n+}\n+impl From<ExternCrate> for Item {\n+    fn from(node: ExternCrate) -> Item { Item::ExternCrate(node) }\n+}\n+impl From<Fn> for Item {\n+    fn from(node: Fn) -> Item { Item::Fn(node) }\n+}\n+impl From<Impl> for Item {\n+    fn from(node: Impl) -> Item { Item::Impl(node) }\n+}\n+impl From<MacroCall> for Item {\n+    fn from(node: MacroCall) -> Item { Item::MacroCall(node) }\n+}\n+impl From<Module> for Item {\n+    fn from(node: Module) -> Item { Item::Module(node) }\n+}\n+impl From<Static> for Item {\n+    fn from(node: Static) -> Item { Item::Static(node) }\n+}\n+impl From<Struct> for Item {\n+    fn from(node: Struct) -> Item { Item::Struct(node) }\n+}\n+impl From<Trait> for Item {\n+    fn from(node: Trait) -> Item { Item::Trait(node) }\n+}\n+impl From<TypeAlias> for Item {\n+    fn from(node: TypeAlias) -> Item { Item::TypeAlias(node) }\n+}\n+impl From<Union> for Item {\n+    fn from(node: Union) -> Item { Item::Union(node) }\n+}\n+impl From<Use> for Item {\n+    fn from(node: Use) -> Item { Item::Use(node) }\n+}\n+impl AstNode for Item {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        match kind {\n+            CONST | ENUM | EXTERN_BLOCK | EXTERN_CRATE | FN | IMPL | MACRO_CALL | MODULE\n+            | STATIC | STRUCT | TRAIT | TYPE_ALIAS | UNION | USE => true,\n+            _ => false,\n+        }\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        let res = match syntax.kind() {\n+            CONST => Item::Const(Const { syntax }),\n+            ENUM => Item::Enum(Enum { syntax }),\n+            EXTERN_BLOCK => Item::ExternBlock(ExternBlock { syntax }),\n+            EXTERN_CRATE => Item::ExternCrate(ExternCrate { syntax }),\n+            FN => Item::Fn(Fn { syntax }),\n+            IMPL => Item::Impl(Impl { syntax }),\n+            MACRO_CALL => Item::MacroCall(MacroCall { syntax }),\n+            MODULE => Item::Module(Module { syntax }),\n+            STATIC => Item::Static(Static { syntax }),\n+            STRUCT => Item::Struct(Struct { syntax }),\n+            TRAIT => Item::Trait(Trait { syntax }),\n+            TYPE_ALIAS => Item::TypeAlias(TypeAlias { syntax }),\n+            UNION => Item::Union(Union { syntax }),\n+            USE => Item::Use(Use { syntax }),\n+            _ => return None,\n+        };\n+        Some(res)\n+    }\n+    fn syntax(&self) -> &SyntaxNode {\n+        match self {\n+            Item::Const(it) => &it.syntax,\n+            Item::Enum(it) => &it.syntax,\n+            Item::ExternBlock(it) => &it.syntax,\n+            Item::ExternCrate(it) => &it.syntax,\n+            Item::Fn(it) => &it.syntax,\n+            Item::Impl(it) => &it.syntax,\n+            Item::MacroCall(it) => &it.syntax,\n+            Item::Module(it) => &it.syntax,\n+            Item::Static(it) => &it.syntax,\n+            Item::Struct(it) => &it.syntax,\n+            Item::Trait(it) => &it.syntax,\n+            Item::TypeAlias(it) => &it.syntax,\n+            Item::Union(it) => &it.syntax,\n+            Item::Use(it) => &it.syntax,\n+        }\n+    }\n+}\n+impl From<OrPat> for Pat {\n+    fn from(node: OrPat) -> Pat { Pat::OrPat(node) }\n+}\n+impl From<ParenPat> for Pat {\n+    fn from(node: ParenPat) -> Pat { Pat::ParenPat(node) }\n+}\n+impl From<RefPat> for Pat {\n+    fn from(node: RefPat) -> Pat { Pat::RefPat(node) }\n+}\n+impl From<BoxPat> for Pat {\n+    fn from(node: BoxPat) -> Pat { Pat::BoxPat(node) }\n+}\n+impl From<BindPat> for Pat {\n+    fn from(node: BindPat) -> Pat { Pat::BindPat(node) }\n+}\n+impl From<PlaceholderPat> for Pat {\n+    fn from(node: PlaceholderPat) -> Pat { Pat::PlaceholderPat(node) }\n+}\n+impl From<DotDotPat> for Pat {\n+    fn from(node: DotDotPat) -> Pat { Pat::DotDotPat(node) }\n+}\n+impl From<PathPat> for Pat {\n+    fn from(node: PathPat) -> Pat { Pat::PathPat(node) }\n+}\n+impl From<RecordPat> for Pat {\n+    fn from(node: RecordPat) -> Pat { Pat::RecordPat(node) }\n+}\n+impl From<TupleStructPat> for Pat {\n+    fn from(node: TupleStructPat) -> Pat { Pat::TupleStructPat(node) }\n+}\n+impl From<TuplePat> for Pat {\n+    fn from(node: TuplePat) -> Pat { Pat::TuplePat(node) }\n+}\n+impl From<SlicePat> for Pat {\n+    fn from(node: SlicePat) -> Pat { Pat::SlicePat(node) }\n+}\n+impl From<RangePat> for Pat {\n+    fn from(node: RangePat) -> Pat { Pat::RangePat(node) }\n+}\n+impl From<LiteralPat> for Pat {\n+    fn from(node: LiteralPat) -> Pat { Pat::LiteralPat(node) }\n+}\n+impl From<MacroPat> for Pat {\n+    fn from(node: MacroPat) -> Pat { Pat::MacroPat(node) }\n+}\n+impl AstNode for Pat {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        match kind {\n+            OR_PAT | PAREN_PAT | REF_PAT | BOX_PAT | BIND_PAT | PLACEHOLDER_PAT | DOT_DOT_PAT\n+            | PATH_PAT | RECORD_PAT | TUPLE_STRUCT_PAT | TUPLE_PAT | SLICE_PAT | RANGE_PAT\n+            | LITERAL_PAT | MACRO_PAT => true,\n+            _ => false,\n+        }\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        let res = match syntax.kind() {\n+            OR_PAT => Pat::OrPat(OrPat { syntax }),\n+            PAREN_PAT => Pat::ParenPat(ParenPat { syntax }),\n+            REF_PAT => Pat::RefPat(RefPat { syntax }),\n+            BOX_PAT => Pat::BoxPat(BoxPat { syntax }),\n+            BIND_PAT => Pat::BindPat(BindPat { syntax }),\n+            PLACEHOLDER_PAT => Pat::PlaceholderPat(PlaceholderPat { syntax }),\n+            DOT_DOT_PAT => Pat::DotDotPat(DotDotPat { syntax }),\n+            PATH_PAT => Pat::PathPat(PathPat { syntax }),\n+            RECORD_PAT => Pat::RecordPat(RecordPat { syntax }),\n+            TUPLE_STRUCT_PAT => Pat::TupleStructPat(TupleStructPat { syntax }),\n+            TUPLE_PAT => Pat::TuplePat(TuplePat { syntax }),\n+            SLICE_PAT => Pat::SlicePat(SlicePat { syntax }),\n+            RANGE_PAT => Pat::RangePat(RangePat { syntax }),\n+            LITERAL_PAT => Pat::LiteralPat(LiteralPat { syntax }),\n+            MACRO_PAT => Pat::MacroPat(MacroPat { syntax }),\n+            _ => return None,\n+        };\n+        Some(res)\n+    }\n+    fn syntax(&self) -> &SyntaxNode {\n+        match self {\n+            Pat::OrPat(it) => &it.syntax,\n+            Pat::ParenPat(it) => &it.syntax,\n+            Pat::RefPat(it) => &it.syntax,\n+            Pat::BoxPat(it) => &it.syntax,\n+            Pat::BindPat(it) => &it.syntax,\n+            Pat::PlaceholderPat(it) => &it.syntax,\n+            Pat::DotDotPat(it) => &it.syntax,\n+            Pat::PathPat(it) => &it.syntax,\n+            Pat::RecordPat(it) => &it.syntax,\n+            Pat::TupleStructPat(it) => &it.syntax,\n+            Pat::TuplePat(it) => &it.syntax,\n+            Pat::SlicePat(it) => &it.syntax,\n+            Pat::RangePat(it) => &it.syntax,\n+            Pat::LiteralPat(it) => &it.syntax,\n+            Pat::MacroPat(it) => &it.syntax,\n+        }\n+    }\n+}\n+impl From<RecordFieldList> for FieldList {\n+    fn from(node: RecordFieldList) -> FieldList { FieldList::RecordFieldList(node) }\n }\n-impl From<WhileExpr> for Expr {\n-    fn from(node: WhileExpr) -> Expr { Expr::WhileExpr(node) }\n+impl From<TupleFieldList> for FieldList {\n+    fn from(node: TupleFieldList) -> FieldList { FieldList::TupleFieldList(node) }\n }\n-impl AstNode for Expr {\n+impl AstNode for FieldList {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            ARRAY_EXPR | AWAIT_EXPR | BIN_EXPR | BLOCK_EXPR | BOX_EXPR | BREAK_EXPR | CALL_EXPR\n-            | CAST_EXPR | CLOSURE_EXPR | CONTINUE_EXPR | EFFECT_EXPR | FIELD_EXPR | FOR_EXPR\n-            | IF_EXPR | INDEX_EXPR | LITERAL | LOOP_EXPR | MACRO_CALL | MATCH_EXPR\n-            | METHOD_CALL_EXPR | PAREN_EXPR | PATH_EXPR | PREFIX_EXPR | RANGE_EXPR\n-            | RECORD_EXPR | REF_EXPR | RETURN_EXPR | TRY_EXPR | TUPLE_EXPR | WHILE_EXPR => true,\n+            RECORD_FIELD_LIST | TUPLE_FIELD_LIST => true,\n             _ => false,\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n-            ARRAY_EXPR => Expr::ArrayExpr(ArrayExpr { syntax }),\n-            AWAIT_EXPR => Expr::AwaitExpr(AwaitExpr { syntax }),\n-            BIN_EXPR => Expr::BinExpr(BinExpr { syntax }),\n-            BLOCK_EXPR => Expr::BlockExpr(BlockExpr { syntax }),\n-            BOX_EXPR => Expr::BoxExpr(BoxExpr { syntax }),\n-            BREAK_EXPR => Expr::BreakExpr(BreakExpr { syntax }),\n-            CALL_EXPR => Expr::CallExpr(CallExpr { syntax }),\n-            CAST_EXPR => Expr::CastExpr(CastExpr { syntax }),\n-            CLOSURE_EXPR => Expr::ClosureExpr(ClosureExpr { syntax }),\n-            CONTINUE_EXPR => Expr::ContinueExpr(ContinueExpr { syntax }),\n-            EFFECT_EXPR => Expr::EffectExpr(EffectExpr { syntax }),\n-            FIELD_EXPR => Expr::FieldExpr(FieldExpr { syntax }),\n-            FOR_EXPR => Expr::ForExpr(ForExpr { syntax }),\n-            IF_EXPR => Expr::IfExpr(IfExpr { syntax }),\n-            INDEX_EXPR => Expr::IndexExpr(IndexExpr { syntax }),\n-            LITERAL => Expr::Literal(Literal { syntax }),\n-            LOOP_EXPR => Expr::LoopExpr(LoopExpr { syntax }),\n-            MACRO_CALL => Expr::MacroCall(MacroCall { syntax }),\n-            MATCH_EXPR => Expr::MatchExpr(MatchExpr { syntax }),\n-            METHOD_CALL_EXPR => Expr::MethodCallExpr(MethodCallExpr { syntax }),\n-            PAREN_EXPR => Expr::ParenExpr(ParenExpr { syntax }),\n-            PATH_EXPR => Expr::PathExpr(PathExpr { syntax }),\n-            PREFIX_EXPR => Expr::PrefixExpr(PrefixExpr { syntax }),\n-            RANGE_EXPR => Expr::RangeExpr(RangeExpr { syntax }),\n-            RECORD_EXPR => Expr::RecordExpr(RecordExpr { syntax }),\n-            REF_EXPR => Expr::RefExpr(RefExpr { syntax }),\n-            RETURN_EXPR => Expr::ReturnExpr(ReturnExpr { syntax }),\n-            TRY_EXPR => Expr::TryExpr(TryExpr { syntax }),\n-            TUPLE_EXPR => Expr::TupleExpr(TupleExpr { syntax }),\n-            WHILE_EXPR => Expr::WhileExpr(WhileExpr { syntax }),\n+            RECORD_FIELD_LIST => FieldList::RecordFieldList(RecordFieldList { syntax }),\n+            TUPLE_FIELD_LIST => FieldList::TupleFieldList(TupleFieldList { syntax }),\n             _ => return None,\n         };\n         Some(res)\n     }\n     fn syntax(&self) -> &SyntaxNode {\n         match self {\n-            Expr::ArrayExpr(it) => &it.syntax,\n-            Expr::AwaitExpr(it) => &it.syntax,\n-            Expr::BinExpr(it) => &it.syntax,\n-            Expr::BlockExpr(it) => &it.syntax,\n-            Expr::BoxExpr(it) => &it.syntax,\n-            Expr::BreakExpr(it) => &it.syntax,\n-            Expr::CallExpr(it) => &it.syntax,\n-            Expr::CastExpr(it) => &it.syntax,\n-            Expr::ClosureExpr(it) => &it.syntax,\n-            Expr::ContinueExpr(it) => &it.syntax,\n-            Expr::EffectExpr(it) => &it.syntax,\n-            Expr::FieldExpr(it) => &it.syntax,\n-            Expr::ForExpr(it) => &it.syntax,\n-            Expr::IfExpr(it) => &it.syntax,\n-            Expr::IndexExpr(it) => &it.syntax,\n-            Expr::Literal(it) => &it.syntax,\n-            Expr::LoopExpr(it) => &it.syntax,\n-            Expr::MacroCall(it) => &it.syntax,\n-            Expr::MatchExpr(it) => &it.syntax,\n-            Expr::MethodCallExpr(it) => &it.syntax,\n-            Expr::ParenExpr(it) => &it.syntax,\n-            Expr::PathExpr(it) => &it.syntax,\n-            Expr::PrefixExpr(it) => &it.syntax,\n-            Expr::RangeExpr(it) => &it.syntax,\n-            Expr::RecordExpr(it) => &it.syntax,\n-            Expr::RefExpr(it) => &it.syntax,\n-            Expr::ReturnExpr(it) => &it.syntax,\n-            Expr::TryExpr(it) => &it.syntax,\n-            Expr::TupleExpr(it) => &it.syntax,\n-            Expr::WhileExpr(it) => &it.syntax,\n+            FieldList::RecordFieldList(it) => &it.syntax,\n+            FieldList::TupleFieldList(it) => &it.syntax,\n         }\n     }\n }\n@@ -3379,7 +3421,7 @@ impl From<Item> for Stmt {\n impl From<LetStmt> for Stmt {\n     fn from(node: LetStmt) -> Stmt { Stmt::LetStmt(node) }\n }\n-impl std::fmt::Display for Item {\n+impl std::fmt::Display for GenericArg {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n@@ -3389,17 +3431,22 @@ impl std::fmt::Display for Type {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for Pat {\n+impl std::fmt::Display for Expr {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for FieldList {\n+impl std::fmt::Display for Item {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for Expr {\n+impl std::fmt::Display for Pat {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for FieldList {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n@@ -3429,6 +3476,66 @@ impl std::fmt::Display for Stmt {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for Path {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for PathSegment {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for NameRef {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for GenericArgList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for ParamList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for RetType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for PathType {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for TypeArg {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for AssocTypeArg {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for LifetimeArg {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for ConstArg {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for TypeBoundList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for SourceFile {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -3524,11 +3631,6 @@ impl std::fmt::Display for ItemList {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for NameRef {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for Rename {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -3539,11 +3641,6 @@ impl std::fmt::Display for UseTree {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for Path {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for UseTreeList {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -3559,16 +3656,6 @@ impl std::fmt::Display for GenericParamList {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for ParamList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n-impl std::fmt::Display for RetType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for WhereClause {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -3589,11 +3676,6 @@ impl std::fmt::Display for Param {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for TypeBoundList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for RecordFieldList {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -3829,11 +3911,6 @@ impl std::fmt::Display for ArgList {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for TypeArgList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for Condition {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -3894,11 +3971,6 @@ impl std::fmt::Display for ParenType {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for PathType {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for PointerType {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -4024,28 +4096,3 @@ impl std::fmt::Display for MacroStmts {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for PathSegment {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n-impl std::fmt::Display for TypeArg {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n-impl std::fmt::Display for LifetimeArg {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n-impl std::fmt::Display for AssocTypeArg {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n-impl std::fmt::Display for ConstArg {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}"}, {"sha": "307d9b31b9c7262b215a3781dcf7bc92d060de34", "filename": "crates/ra_syntax/test_data/parser/err/0012_broken_lambda.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0012_broken_lambda.rast", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0012_broken_lambda.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0012_broken_lambda.rast?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -25,7 +25,7 @@ SOURCE_FILE@0..389\n           PATH_SEGMENT@29..37\n             NAME_REF@29..33\n               IDENT@29..33 \"Sink\"\n-            TYPE_ARG_LIST@33..37\n+            GENERIC_ARG_LIST@33..37\n               L_ANGLE@33..34\n               LIFETIME_ARG@34..36\n                 LIFETIME@34..36 \"'a\"\n@@ -79,7 +79,7 @@ SOURCE_FILE@0..389\n             PATH_SEGMENT@82..92\n               NAME_REF@82..85\n                 IDENT@82..85 \"Vec\"\n-              TYPE_ARG_LIST@85..92\n+              GENERIC_ARG_LIST@85..92\n                 L_ANGLE@85..86\n                 TYPE_ARG@86..91\n                   PATH_TYPE@86..91"}, {"sha": "f48ab6e712478964bd048e3142b497abe76e304c", "filename": "crates/ra_syntax/test_data/parser/err/0013_invalid_type.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0013_invalid_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0013_invalid_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0013_invalid_type.rast?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -16,15 +16,15 @@ SOURCE_FILE@0..86\n             PATH_SEGMENT@22..68\n               NAME_REF@22..29\n                 IDENT@22..29 \"RefCell\"\n-              TYPE_ARG_LIST@29..68\n+              GENERIC_ARG_LIST@29..68\n                 L_ANGLE@29..30 \"<\"\n                 TYPE_ARG@30..68\n                   PATH_TYPE@30..68\n                     PATH@30..68\n                       PATH_SEGMENT@30..68\n                         NAME_REF@30..37\n                           IDENT@30..37 \"HashMap\"\n-                        TYPE_ARG_LIST@37..68\n+                        GENERIC_ARG_LIST@37..68\n                           L_ANGLE@37..38 \"<\"\n                           WHITESPACE@38..47 \"\\n        \"\n                           TYPE_ARG@47..53\n@@ -41,7 +41,7 @@ SOURCE_FILE@0..86\n                                 PATH_SEGMENT@63..68\n                                   NAME_REF@63..66\n                                     IDENT@63..66 \"Box\"\n-                                  TYPE_ARG_LIST@66..68\n+                                  GENERIC_ARG_LIST@66..68\n                                     L_ANGLE@66..67 \"<\"\n                                     TYPE_ARG@67..68\n                                       ERROR@67..68"}, {"sha": "1cb1e97574d2f7dd06dcd19c8950201412bf6484", "filename": "crates/ra_syntax/test_data/parser/err/0024_many_type_parens.rast", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.rast", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.rast?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -50,7 +50,7 @@ SOURCE_FILE@0..240\n                   PATH_SEGMENT@37..46\n                     NAME_REF@37..42\n                       IDENT@37..42 \"Trait\"\n-                    TYPE_ARG_LIST@42..46\n+                    GENERIC_ARG_LIST@42..46\n                       L_ANGLE@42..43 \"<\"\n                       LIFETIME_ARG@43..45\n                         LIFETIME@43..45 \"\\'a\"\n@@ -92,7 +92,7 @@ SOURCE_FILE@0..240\n                   PATH_SEGMENT@78..88\n                     NAME_REF@78..81\n                       IDENT@78..81 \"Box\"\n-                    TYPE_ARG_LIST@81..88\n+                    GENERIC_ARG_LIST@81..88\n                       L_ANGLE@81..82 \"<\"\n                       TYPE_ARG@82..88\n                         PAREN_TYPE@82..88\n@@ -133,7 +133,7 @@ SOURCE_FILE@0..240\n                     PATH_SEGMENT@111..120\n                       NAME_REF@111..116\n                         IDENT@111..116 \"Trait\"\n-                      TYPE_ARG_LIST@116..120\n+                      GENERIC_ARG_LIST@116..120\n                         L_ANGLE@116..117 \"<\"\n                         LIFETIME_ARG@117..119\n                           LIFETIME@117..119 \"\\'a\"\n@@ -156,7 +156,7 @@ SOURCE_FILE@0..240\n             PATH_SEGMENT@135..141\n               NAME_REF@135..138\n                 IDENT@135..138 \"Box\"\n-              TYPE_ARG_LIST@138..141\n+              GENERIC_ARG_LIST@138..141\n                 L_ANGLE@138..139 \"<\"\n                 TYPE_ARG@139..141\n                   PAREN_TYPE@139..141\n@@ -235,7 +235,7 @@ SOURCE_FILE@0..240\n                   PATH_SEGMENT@192..215\n                     NAME_REF@192..195\n                       IDENT@192..195 \"Box\"\n-                    TYPE_ARG_LIST@195..215\n+                    GENERIC_ARG_LIST@195..215\n                       L_ANGLE@195..196 \"<\"\n                       TYPE_ARG@196..215\n                         PAREN_TYPE@196..215\n@@ -253,7 +253,7 @@ SOURCE_FILE@0..240\n                                 PATH_SEGMENT@205..214\n                                   NAME_REF@205..210\n                                     IDENT@205..210 \"Trait\"\n-                                  TYPE_ARG_LIST@210..214\n+                                  GENERIC_ARG_LIST@210..214\n                                     L_ANGLE@210..211 \"<\"\n                                     LIFETIME_ARG@211..213\n                                       LIFETIME@211..213 \"\\'a\""}, {"sha": "1b08c834eb8224fe0b01c96930358b97dbbc50ec", "filename": "crates/ra_syntax/test_data/parser/err/0026_imp_recovery.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0026_imp_recovery.rast", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0026_imp_recovery.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0026_imp_recovery.rast?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -31,7 +31,7 @@ SOURCE_FILE@0..38\n         PATH_SEGMENT@23..34\n           NAME_REF@23..31\n             IDENT@23..31 \"OnceCell\"\n-          TYPE_ARG_LIST@31..34\n+          GENERIC_ARG_LIST@31..34\n             L_ANGLE@31..32 \"<\"\n             TYPE_ARG@32..33\n               PATH_TYPE@32..33"}, {"sha": "7a5e115bc4bb686bbc6ab22ece2b5577d1b287fa", "filename": "crates/ra_syntax/test_data/parser/err/0039_lambda_recovery.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0039_lambda_recovery.rast", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0039_lambda_recovery.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0039_lambda_recovery.rast?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -62,7 +62,7 @@ SOURCE_FILE@0..83\n           DOT@66..67 \".\"\n           NAME_REF@67..70\n             IDENT@67..70 \"max\"\n-          TYPE_ARG_LIST@70..77\n+          GENERIC_ARG_LIST@70..77\n             COLON2@70..72 \"::\"\n             L_ANGLE@72..73 \"<\"\n             TYPE_ARG@73..76"}, {"sha": "38c15b5815e45bd2ef8d49032202a4cfd59e2683", "filename": "crates/ra_syntax/test_data/parser/fragments/type/ok/0000_result.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Fok%2F0000_result.rast", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Fok%2F0000_result.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Fok%2F0000_result.rast?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -3,7 +3,7 @@ PATH_TYPE@0..16\n     PATH_SEGMENT@0..16\n       NAME_REF@0..6\n         IDENT@0..6 \"Result\"\n-      TYPE_ARG_LIST@6..16\n+      GENERIC_ARG_LIST@6..16\n         L_ANGLE@6..7 \"<\"\n         TYPE_ARG@7..10\n           PATH_TYPE@7..10"}, {"sha": "44d92aedbc584ad5ad6fdd1247e45570b2923dd0", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0004_value_parameters_no_patterns.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0004_value_parameters_no_patterns.rast", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0004_value_parameters_no_patterns.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0004_value_parameters_no_patterns.rast?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -12,7 +12,7 @@ SOURCE_FILE@0..39\n         PATH_SEGMENT@9..37\n           NAME_REF@9..12\n             IDENT@9..12 \"Box\"\n-          TYPE_ARG_LIST@12..37\n+          GENERIC_ARG_LIST@12..37\n             L_ANGLE@12..13 \"<\"\n             TYPE_ARG@13..36\n               PATH_TYPE@13..36"}, {"sha": "1b31aa95a2cb44f14cbecaee7e4b9b16d4e06290", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0018_arb_self_types.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0018_arb_self_types.rast", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0018_arb_self_types.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0018_arb_self_types.rast?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -53,7 +53,7 @@ SOURCE_FILE@0..69\n                 PATH_SEGMENT@53..62\n                   NAME_REF@53..56\n                     IDENT@53..56 \"Box\"\n-                  TYPE_ARG_LIST@56..62\n+                  GENERIC_ARG_LIST@56..62\n                     L_ANGLE@56..57 \"<\"\n                     TYPE_ARG@57..61\n                       PATH_TYPE@57..61"}, {"sha": "32b2959bdfc65b803b3305d031f41bc71e59a5f4", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0028_impl_trait_type.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0028_impl_trait_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0028_impl_trait_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0028_impl_trait_type.rast?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -17,7 +17,7 @@ SOURCE_FILE@0..43\n               PATH_SEGMENT@14..36\n                 NAME_REF@14..22\n                   IDENT@14..22 \"Iterator\"\n-                TYPE_ARG_LIST@22..36\n+                GENERIC_ARG_LIST@22..36\n                   L_ANGLE@22..23 \"<\"\n                   ASSOC_TYPE_ARG@23..35\n                     NAME_REF@23..27\n@@ -28,7 +28,7 @@ SOURCE_FILE@0..43\n                         PATH_SEGMENT@28..35\n                           NAME_REF@28..31\n                             IDENT@28..31 \"Foo\"\n-                          TYPE_ARG_LIST@31..35\n+                          GENERIC_ARG_LIST@31..35\n                             L_ANGLE@31..32 \"<\"\n                             LIFETIME_ARG@32..34\n                               LIFETIME@32..34 \"\\'a\""}, {"sha": "69e98b9d6c0267beb49835a90e9f946d324c905a", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0039_type_arg.rast", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0039_type_arg.rast", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0039_type_arg.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0039_type_arg.rast?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -12,7 +12,7 @@ SOURCE_FILE@0..46\n         PATH_SEGMENT@9..44\n           NAME_REF@9..10\n             IDENT@9..10 \"B\"\n-          TYPE_ARG_LIST@10..44\n+          GENERIC_ARG_LIST@10..44\n             L_ANGLE@10..11 \"<\"\n             LIFETIME_ARG@11..18\n               LIFETIME@11..18 \"\\'static\"\n@@ -27,7 +27,8 @@ SOURCE_FILE@0..46\n             COMMA@23..24 \",\"\n             WHITESPACE@24..25 \" \"\n             CONST_ARG@25..26\n-              INT_NUMBER@25..26 \"1\"\n+              LITERAL@25..26\n+                INT_NUMBER@25..26 \"1\"\n             COMMA@26..27 \",\"\n             WHITESPACE@27..28 \" \"\n             CONST_ARG@28..33"}, {"sha": "c100d1c7131f775da40ce412f873e9da307c349b", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0045_param_list_opt_patterns.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0045_param_list_opt_patterns.rast", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0045_param_list_opt_patterns.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0045_param_list_opt_patterns.rast?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -30,7 +30,7 @@ SOURCE_FILE@0..35\n                             PATH_SEGMENT@21..28\n                               NAME_REF@21..24\n                                 IDENT@21..24 \"Foo\"\n-                              TYPE_ARG_LIST@24..28\n+                              GENERIC_ARG_LIST@24..28\n                                 L_ANGLE@24..25 \"<\"\n                                 LIFETIME_ARG@25..27\n                                   LIFETIME@25..27 \"\\'a\""}, {"sha": "4d8404e7c09ff31b998269ad30a45953be6fabd8", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0048_path_type_with_bounds.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0048_path_type_with_bounds.rast", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0048_path_type_with_bounds.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0048_path_type_with_bounds.rast?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -16,7 +16,7 @@ SOURCE_FILE@0..58\n           PATH_SEGMENT@12..23\n             NAME_REF@12..15\n               IDENT@12..15 \"Box\"\n-            TYPE_ARG_LIST@15..23\n+            GENERIC_ARG_LIST@15..23\n               L_ANGLE@15..16 \"<\"\n               TYPE_ARG@16..22\n                 DYN_TRAIT_TYPE@16..22\n@@ -55,7 +55,7 @@ SOURCE_FILE@0..58\n           PATH_SEGMENT@39..54\n             NAME_REF@39..42\n               IDENT@39..42 \"Box\"\n-            TYPE_ARG_LIST@42..54\n+            GENERIC_ARG_LIST@42..54\n               L_ANGLE@42..43 \"<\"\n               TYPE_ARG@43..53\n                 DYN_TRAIT_TYPE@43..53"}, {"sha": "de2016f188536bc983baec1db329efc07f55f714", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0053_path_expr.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0053_path_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0053_path_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0053_path_expr.rast?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -60,7 +60,7 @@ SOURCE_FILE@0..91\n               COLON2@56..58 \"::\"\n               NAME_REF@58..59\n                 IDENT@58..59 \"a\"\n-              TYPE_ARG_LIST@59..64\n+              GENERIC_ARG_LIST@59..64\n                 COLON2@59..61 \"::\"\n                 L_ANGLE@61..62 \"<\"\n                 TYPE_ARG@62..63"}, {"sha": "3a7fcfe2487e63b821afcab22467f03113d539d4", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0065_dyn_trait_type.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0065_dyn_trait_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0065_dyn_trait_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0065_dyn_trait_type.rast?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -17,7 +17,7 @@ SOURCE_FILE@0..42\n               PATH_SEGMENT@13..35\n                 NAME_REF@13..21\n                   IDENT@13..21 \"Iterator\"\n-                TYPE_ARG_LIST@21..35\n+                GENERIC_ARG_LIST@21..35\n                   L_ANGLE@21..22 \"<\"\n                   ASSOC_TYPE_ARG@22..34\n                     NAME_REF@22..26\n@@ -28,7 +28,7 @@ SOURCE_FILE@0..42\n                         PATH_SEGMENT@27..34\n                           NAME_REF@27..30\n                             IDENT@27..30 \"Foo\"\n-                          TYPE_ARG_LIST@30..34\n+                          GENERIC_ARG_LIST@30..34\n                             L_ANGLE@30..31 \"<\"\n                             LIFETIME_ARG@31..33\n                               LIFETIME@31..33 \"\\'a\""}, {"sha": "5f4807522145b672edb87321dc8ead45f1ab69cf", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0081_for_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0081_for_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0081_for_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0081_for_type.rast?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -95,7 +95,7 @@ SOURCE_FILE@0..121\n           PATH_SEGMENT@101..119\n             NAME_REF@101..110\n               IDENT@101..110 \"PartialEq\"\n-            TYPE_ARG_LIST@110..119\n+            GENERIC_ARG_LIST@110..119\n               L_ANGLE@110..111 \"<\"\n               TYPE_ARG@111..118\n                 REFERENCE_TYPE@111..118"}, {"sha": "1244a5031347734f1d8e28365c007708b33f3035", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0104_path_fn_trait_args.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0104_path_fn_trait_args.rast", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0104_path_fn_trait_args.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0104_path_fn_trait_args.rast?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -12,7 +12,7 @@ SOURCE_FILE@0..29\n         PATH_SEGMENT@9..27\n           NAME_REF@9..12\n             IDENT@9..12 \"Box\"\n-          TYPE_ARG_LIST@12..27\n+          GENERIC_ARG_LIST@12..27\n             L_ANGLE@12..13 \"<\"\n             TYPE_ARG@13..26\n               PATH_TYPE@13..26"}, {"sha": "be8365e057183ac04552c5af61a7dbca84eba09c", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0107_method_call_expr.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rast?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -36,7 +36,7 @@ SOURCE_FILE@0..49\n           DOT@29..30 \".\"\n           NAME_REF@30..33\n             IDENT@30..33 \"bar\"\n-          TYPE_ARG_LIST@33..38\n+          GENERIC_ARG_LIST@33..38\n             COLON2@33..35 \"::\"\n             L_ANGLE@35..36 \"<\"\n             TYPE_ARG@36..37"}, {"sha": "e0a82df751c08e7276026bf8c5bd40e8b8be02c6", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0138_associated_type_bounds.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_associated_type_bounds.rast", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_associated_type_bounds.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_associated_type_bounds.rast?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -18,7 +18,7 @@ SOURCE_FILE@0..59\n                 PATH_SEGMENT@16..39\n                   NAME_REF@16..24\n                     IDENT@16..24 \"Iterator\"\n-                  TYPE_ARG_LIST@24..39\n+                  GENERIC_ARG_LIST@24..39\n                     L_ANGLE@24..25 \"<\"\n                     ASSOC_TYPE_ARG@25..38\n                       NAME_REF@25..29"}, {"sha": "12194abdafe322a1987d281b25c96fe541e7403f", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0150_impl_type_params.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0150_impl_type_params.rast", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0150_impl_type_params.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0150_impl_type_params.rast?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -22,7 +22,7 @@ SOURCE_FILE@0..29\n         PATH_SEGMENT@19..25\n           NAME_REF@19..22\n             IDENT@19..22 \"Bar\"\n-          TYPE_ARG_LIST@22..25\n+          GENERIC_ARG_LIST@22..25\n             L_ANGLE@22..23 \"<\"\n             TYPE_ARG@23..24\n               PATH_TYPE@23..24"}, {"sha": "dac50410e422c657317d5de50b6360fd218e1623", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0151_trait_alias.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0151_trait_alias.rast", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0151_trait_alias.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0151_trait_alias.rast?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -20,7 +20,7 @@ SOURCE_FILE@0..83\n             PATH_SEGMENT@13..17\n               NAME_REF@13..14\n                 IDENT@13..14 \"T\"\n-              TYPE_ARG_LIST@14..17\n+              GENERIC_ARG_LIST@14..17\n                 L_ANGLE@14..15 \"<\"\n                 TYPE_ARG@15..16\n                   PATH_TYPE@15..16\n@@ -52,7 +52,7 @@ SOURCE_FILE@0..83\n             PATH_SEGMENT@32..36\n               NAME_REF@32..33\n                 IDENT@32..33 \"T\"\n-              TYPE_ARG_LIST@33..36\n+              GENERIC_ARG_LIST@33..36\n                 L_ANGLE@33..34 \"<\"\n                 TYPE_ARG@34..35\n                   PATH_TYPE@34..35\n@@ -115,7 +115,7 @@ SOURCE_FILE@0..83\n                 PATH_SEGMENT@77..81\n                   NAME_REF@77..78\n                     IDENT@77..78 \"T\"\n-                  TYPE_ARG_LIST@78..81\n+                  GENERIC_ARG_LIST@78..81\n                     L_ANGLE@78..79 \"<\"\n                     TYPE_ARG@79..80\n                       PATH_TYPE@79..80"}, {"sha": "d59548f2107c8e5876279d95cecb0ef23bd33cc6", "filename": "crates/ra_syntax/test_data/parser/ok/0032_where_for.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0032_where_for.rast", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0032_where_for.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0032_where_for.rast?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -49,7 +49,7 @@ SOURCE_FILE@0..116\n                   PATH_SEGMENT@65..81\n                     NAME_REF@65..76\n                       IDENT@65..76 \"Deserialize\"\n-                    TYPE_ARG_LIST@76..81\n+                    GENERIC_ARG_LIST@76..81\n                       L_ANGLE@76..77 \"<\"\n                       LIFETIME_ARG@77..80\n                         LIFETIME@77..80 \"\\'de\""}, {"sha": "0e0c8c9dc3f02b03c2dca4aa6ad1286854e52aed", "filename": "crates/ra_syntax/test_data/parser/ok/0035_weird_exprs.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -249,7 +249,7 @@ SOURCE_FILE@0..3813\n                   PATH_SEGMENT@653..663\n                     NAME_REF@653..657\n                       IDENT@653..657 \"Cell\"\n-                    TYPE_ARG_LIST@657..663\n+                    GENERIC_ARG_LIST@657..663\n                       L_ANGLE@657..658 \"<\"\n                       TYPE_ARG@658..662\n                         PATH_TYPE@658..662\n@@ -1588,7 +1588,7 @@ SOURCE_FILE@0..3813\n                   PATH_SEGMENT@2888..2901\n                     NAME_REF@2888..2893\n                       IDENT@2888..2893 \"union\"\n-                    TYPE_ARG_LIST@2893..2901\n+                    GENERIC_ARG_LIST@2893..2901\n                       L_ANGLE@2893..2894 \"<\"\n                       LIFETIME_ARG@2894..2900\n                         LIFETIME@2894..2900 \"\\'union\""}, {"sha": "bd152ffa32d0cada232fb0095781d01434ce4906", "filename": "crates/ra_syntax/test_data/parser/ok/0045_block_inner_attrs.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0045_block_inner_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0045_block_inner_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0045_block_inner_attrs.rast?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -141,7 +141,7 @@ SOURCE_FILE@0..686\n                               PATH_SEGMENT@589..600\n                                 NAME_REF@589..594\n                                   IDENT@589..594 \"Event\"\n-                                TYPE_ARG_LIST@594..600\n+                                GENERIC_ARG_LIST@594..600\n                                   L_ANGLE@594..595 \"<\"\n                                   TYPE_ARG@595..599\n                                     PATH_TYPE@595..599"}, {"sha": "48e1f07d1dfb880d9d43b7a87a292f7d58625d13", "filename": "crates/ra_syntax/test_data/parser/ok/0050_async_block_as_argument.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0050_async_block_as_argument.rast", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0050_async_block_as_argument.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0050_async_block_as_argument.rast?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -32,7 +32,7 @@ SOURCE_FILE@0..95\n                   PATH_SEGMENT@28..48\n                     NAME_REF@28..34\n                       IDENT@28..34 \"Future\"\n-                    TYPE_ARG_LIST@34..48\n+                    GENERIC_ARG_LIST@34..48\n                       L_ANGLE@34..35 \"<\"\n                       ASSOC_TYPE_ARG@35..47\n                         NAME_REF@35..41"}, {"sha": "706ccdc3914913f507b7276e63af07ea545f90be", "filename": "crates/ra_syntax/test_data/parser/ok/0051_parameter_attrs.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.rast?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -172,7 +172,7 @@ SOURCE_FILE@0..519\n                             PATH_SEGMENT@159..166\n                               NAME_REF@159..162\n                                 IDENT@159..162 \"Foo\"\n-                              TYPE_ARG_LIST@162..166\n+                              GENERIC_ARG_LIST@162..166\n                                 L_ANGLE@162..163 \"<\"\n                                 LIFETIME_ARG@163..165\n                                   LIFETIME@163..165 \"\\'a\"\n@@ -490,7 +490,7 @@ SOURCE_FILE@0..519\n                 PATH_SEGMENT@505..513\n                   NAME_REF@505..507\n                     IDENT@505..507 \"Rc\"\n-                  TYPE_ARG_LIST@507..513\n+                  GENERIC_ARG_LIST@507..513\n                     L_ANGLE@507..508 \"<\"\n                     TYPE_ARG@508..512\n                       PATH_TYPE@508..512"}, {"sha": "fd4f4f2422ec2a30b7d29223df5d963934463c36", "filename": "crates/ra_syntax/test_data/parser/ok/0052_for_range_block.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0052_for_range_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0052_for_range_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0052_for_range_block.rast?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -50,7 +50,7 @@ SOURCE_FILE@0..80\n             DOT@43..44 \".\"\n             NAME_REF@44..47\n               IDENT@44..47 \"sum\"\n-            TYPE_ARG_LIST@47..54\n+            GENERIC_ARG_LIST@47..54\n               COLON2@47..49 \"::\"\n               L_ANGLE@49..50 \"<\"\n               TYPE_ARG@50..53"}, {"sha": "0d48c7e81ba22c6856663cd26f8bd122d62bd20f", "filename": "crates/ra_syntax/test_data/parser/ok/0054_qual_path_in_type_arg.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0054_qual_path_in_type_arg.rast", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0054_qual_path_in_type_arg.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0054_qual_path_in_type_arg.rast?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -16,7 +16,7 @@ SOURCE_FILE@0..88\n           PATH_SEGMENT@10..23\n             NAME_REF@10..13\n               IDENT@10..13 \"Foo\"\n-            TYPE_ARG_LIST@13..23\n+            GENERIC_ARG_LIST@13..23\n               L_ANGLE@13..14 \"<\"\n               TYPE_ARG@14..22\n                 PATH_TYPE@14..22"}, {"sha": "762d9265e92a9bebffc4b8f792cc84c5e51a5917", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -208,7 +208,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"LIFETIME_PARAM\",\n         \"TYPE_PARAM\",\n         \"CONST_PARAM\",\n-        \"TYPE_ARG_LIST\",\n+        \"GENERIC_ARG_LIST\",\n         \"LIFETIME_ARG\",\n         \"TYPE_ARG\",\n         \"ASSOC_TYPE_ARG\","}, {"sha": "1d8bed0b4bd65dfc1bbcda5999edb0ca08fb4d00", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 32, "deletions": 28, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5d9145ce10c7dff6caa397b7a6c561848399e4f9/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/5d9145ce10c7dff6caa397b7a6c561848399e4f9/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=5d9145ce10c7dff6caa397b7a6c561848399e4f9", "patch": "@@ -1,3 +1,34 @@\n+Path =\n+  (qualifier:Path '::')? segment:PathSegment\n+\n+PathSegment =\n+  'crate' | 'self' | 'super'\n+| '::' NameRef\n+| NameRef GenericArgList?\n+| NameRef ParamList RetType?\n+| '<' PathType ('as' PathType)? '>'\n+\n+GenericArgList =\n+  '::'? '<' (GenericArg (',' GenericArg)* ','?)? '>'\n+\n+GenericArg =\n+  TypeArg\n+| AssocTypeArg\n+| LifetimeArg\n+| ConstArg\n+\n+TypeArg =\n+  Type\n+\n+AssocTypeArg =\n+  NameRef (':' TypeBoundList | '=' Type)\n+\n+LifetimeArg =\n+  'lifetime'\n+\n+ConstArg =\n+  Expr\n+\n SourceFile =\n   'shebang'?\n   Attr*\n@@ -318,7 +349,7 @@ ArgList =\n   '(' args:(Expr (',' Expr)* ','?)? ')'\n \n MethodCallExpr =\n-  Attr* Expr '.' NameRef TypeArgList? ArgList\n+  Attr* Expr '.' NameRef GenericArgList? ArgList\n \n FieldExpr =\n   Attr* Expr '.' NameRef\n@@ -521,33 +552,6 @@ MacroStmts =\n   statements:Stmt*\n   Expr?\n \n-Path =\n-  (qualifier:Path '::')? segment:PathSegment\n-\n-PathSegment =\n-  '::' | 'crate' | 'self' | 'super'\n-| '<' NameRef TypeArgList ParamList RetType PathType '>'\n-\n-TypeArgList =\n-  '::'? '<'\n-    TypeArg*\n-    LifetimeArg*\n-    AssocTypeArg*\n-    ConstArg*\n-  '>'\n-\n-TypeArg =\n-  Type\n-\n-AssocTypeArg =\n-  NameRef (':' TypeBoundList | '=' Type)\n-\n-LifetimeArg =\n-  'lifetime'\n-\n-ConstArg =\n-  Literal | BlockExpr BlockExpr\n-\n Pat =\n   OrPat\n | ParenPat"}]}