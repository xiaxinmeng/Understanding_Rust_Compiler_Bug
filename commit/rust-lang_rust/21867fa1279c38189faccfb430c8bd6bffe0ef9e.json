{"sha": "21867fa1279c38189faccfb430c8bd6bffe0ef9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxODY3ZmExMjc5YzM4MTg5ZmFjY2ZiNDMwYzhiZDZiZmZlMGVmOWU=", "commit": {"author": {"name": "Edward Wang", "email": "edward.yu.wang@gmail.com", "date": "2014-05-13T06:30:21Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-14T00:24:07Z"}, "message": "check_match: get rid of superfluous clones", "tree": {"sha": "19466c89d6614acd6cb4104104bd4a11394ac26e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19466c89d6614acd6cb4104104bd4a11394ac26e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21867fa1279c38189faccfb430c8bd6bffe0ef9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21867fa1279c38189faccfb430c8bd6bffe0ef9e", "html_url": "https://github.com/rust-lang/rust/commit/21867fa1279c38189faccfb430c8bd6bffe0ef9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21867fa1279c38189faccfb430c8bd6bffe0ef9e/comments", "author": {"login": "edwardw", "id": 454049, "node_id": "MDQ6VXNlcjQ1NDA0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/454049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwardw", "html_url": "https://github.com/edwardw", "followers_url": "https://api.github.com/users/edwardw/followers", "following_url": "https://api.github.com/users/edwardw/following{/other_user}", "gists_url": "https://api.github.com/users/edwardw/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwardw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwardw/subscriptions", "organizations_url": "https://api.github.com/users/edwardw/orgs", "repos_url": "https://api.github.com/users/edwardw/repos", "events_url": "https://api.github.com/users/edwardw/events{/privacy}", "received_events_url": "https://api.github.com/users/edwardw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bf268d0b028d8e8abe62166c533f8515955bc6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bf268d0b028d8e8abe62166c533f8515955bc6b", "html_url": "https://github.com/rust-lang/rust/commit/5bf268d0b028d8e8abe62166c533f8515955bc6b"}], "stats": {"total": 55, "additions": 21, "deletions": 34}, "files": [{"sha": "b48fddac1a4514cc60a5af3feb72a059ce60b400", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 21, "deletions": 34, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/21867fa1279c38189faccfb430c8bd6bffe0ef9e/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21867fa1279c38189faccfb430c8bd6bffe0ef9e/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=21867fa1279c38189faccfb430c8bd6bffe0ef9e", "patch": "@@ -266,15 +266,15 @@ fn is_useful(cx: &MatchCheckCtxt, m: &matrix, v: &[@Pat]) -> useful {\n                                                 val(const_bool(false)),\n                                                 0u, left_ty)\n                       }\n-                      ref u => (*u).clone(),\n+                      u => u,\n                   }\n               }\n               ty::ty_enum(eid, _) => {\n                   for va in (*ty::enum_variants(cx.tcx, eid)).iter() {\n                       match is_useful_specialized(cx, m, v, variant(va.id),\n                                                   va.args.len(), left_ty) {\n                         not_useful => (),\n-                        ref u => return (*u).clone(),\n+                        u => return u,\n                       }\n                   }\n                   not_useful\n@@ -296,7 +296,7 @@ fn is_useful(cx: &MatchCheckCtxt, m: &matrix, v: &[@Pat]) -> useful {\n                       for n in iter::range(0u, max_len + 1) {\n                           match is_useful_specialized(cx, m, v, vec(n), n, left_ty) {\n                               not_useful => (),\n-                              ref u => return (*u).clone(),\n+                              u => return u,\n                           }\n                       }\n                       not_useful\n@@ -312,21 +312,21 @@ fn is_useful(cx: &MatchCheckCtxt, m: &matrix, v: &[@Pat]) -> useful {\n               }\n             }\n           }\n-          Some(ref ctor) => {\n+          Some(ctor) => {\n             match is_useful(cx,\n                             &m.iter().filter_map(|r| {\n                                 default(cx, r.as_slice())\n                             }).collect::<matrix>(),\n                             v.tail()) {\n-              useful_ => useful(left_ty, (*ctor).clone()),\n-              ref u => (*u).clone(),\n+              useful_ => useful(left_ty, ctor),\n+              u => u,\n             }\n           }\n         }\n       }\n-      Some(ref v0_ctor) => {\n-        let arity = ctor_arity(cx, v0_ctor, left_ty);\n-        is_useful_specialized(cx, m, v, (*v0_ctor).clone(), arity, left_ty)\n+      Some(v0_ctor) => {\n+        let arity = ctor_arity(cx, &v0_ctor, left_ty);\n+        is_useful_specialized(cx, m, v, v0_ctor, arity, left_ty)\n       }\n     }\n }\n@@ -345,7 +345,7 @@ fn is_useful_specialized(cx: &MatchCheckCtxt,\n         cx, &ms, specialize(cx, v, &ctor, arity, lty).unwrap().as_slice());\n     match could_be_useful {\n       useful_ => useful(lty, ctor),\n-      ref u => (*u).clone(),\n+      u => u,\n     }\n }\n \n@@ -416,9 +416,9 @@ fn missing_ctor(cx: &MatchCheckCtxt,\n         let mut found = Vec::new();\n         for r in m.iter() {\n             let r = pat_ctor_id(cx, *r.get(0));\n-            for id in r.iter() {\n-                if !found.contains(id) {\n-                    found.push((*id).clone());\n+            for id in r.move_iter() {\n+                if !found.contains(&id) {\n+                    found.push(id);\n                 }\n             }\n         }\n@@ -820,30 +820,17 @@ fn specialize(cx: &MatchCheckCtxt,\n                         let num_elements = before.len() + after.len();\n                         if num_elements < arity && slice.is_some() {\n                             let mut result = Vec::new();\n-                            for pat in before.iter() {\n-                                result.push((*pat).clone());\n-                            }\n-                            for _ in iter::range(0, arity - num_elements) {\n-                                result.push(wild())\n-                            }\n-                            for pat in after.iter() {\n-                                result.push((*pat).clone());\n-                            }\n-                            for pat in r.tail().iter() {\n-                                result.push((*pat).clone());\n-                            }\n+                            let wilds = Vec::from_elem(arity - num_elements, wild());\n+                            result.push_all_move(before);\n+                            result.push_all_move(wilds);\n+                            result.push_all_move(after);\n+                            result.push_all(r.tail());\n                             Some(result)\n                         } else if num_elements == arity {\n                             let mut result = Vec::new();\n-                            for pat in before.iter() {\n-                                result.push((*pat).clone());\n-                            }\n-                            for pat in after.iter() {\n-                                result.push((*pat).clone());\n-                            }\n-                            for pat in r.tail().iter() {\n-                                result.push((*pat).clone());\n-                            }\n+                            result.push_all_move(before);\n+                            result.push_all_move(after);\n+                            result.push_all(r.tail());\n                             Some(result)\n                         } else {\n                             None"}]}