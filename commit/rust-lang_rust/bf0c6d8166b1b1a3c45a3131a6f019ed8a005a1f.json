{"sha": "bf0c6d8166b1b1a3c45a3131a6f019ed8a005a1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmMGM2ZDgxNjZiMWIxYTNjNDVhMzEzMWE2ZjAxOWVkOGEwMDVhMWY=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-20T21:11:07Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-20T22:06:53Z"}, "message": "vim: Handle box expressions specially\n\nAttempt to highlight the placement expression in a `box (expr) foo`\nexpression. Also treat GC as a keyword within the placement expression.\n\nThis doesn't work correctly for arbitrary expressions. Notably, this\nmakes no attempt at balancing delimiters. I believe handling that will\nrequire rewriting the syntax rules to add a region for every pair of\ndelimiters. That may be a desirable thing to do in the end, because we\ncan then rewrite our indent rules based on the syntax and get rid of\ncindent(), but for the time being, we'll just live with the limitation.", "tree": {"sha": "cab88f4674fb95bb3b335a7f50b398c048b58eb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cab88f4674fb95bb3b335a7f50b398c048b58eb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf0c6d8166b1b1a3c45a3131a6f019ed8a005a1f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf0c6d8166b1b1a3c45a3131a6f019ed8a005a1f", "html_url": "https://github.com/rust-lang/rust/commit/bf0c6d8166b1b1a3c45a3131a6f019ed8a005a1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf0c6d8166b1b1a3c45a3131a6f019ed8a005a1f/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "229338d6ac6b9252ecdb923ffc1ec0d71e3145d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/229338d6ac6b9252ecdb923ffc1ec0d71e3145d5", "html_url": "https://github.com/rust-lang/rust/commit/229338d6ac6b9252ecdb923ffc1ec0d71e3145d5"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "29e597589d20232543211be7bc28ef7f699a6be8", "filename": "src/etc/vim/syntax/rust.vim", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bf0c6d8166b1b1a3c45a3131a6f019ed8a005a1f/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/bf0c6d8166b1b1a3c45a3131a6f019ed8a005a1f/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim?ref=bf0c6d8166b1b1a3c45a3131a6f019ed8a005a1f", "patch": "@@ -18,27 +18,38 @@ syn keyword   rustOperator    as\n \n syn match     rustAssert      \"\\<assert\\(\\w\\)*!\" contained\n syn match     rustFail        \"\\<fail\\(\\w\\)*!\" contained\n-syn keyword   rustKeyword     break box continue\n-syn keyword   rustKeyword     extern nextgroup=rustExternCrate,rustObsoleteExternMod skipwhite\n+syn keyword   rustKeyword     break\n+syn keyword   rustKeyword     box nextgroup=rustBoxPlacement skipwhite skipempty\n+syn keyword   rustKeyword     continue\n+syn keyword   rustKeyword     extern nextgroup=rustExternCrate,rustObsoleteExternMod skipwhite skipempty\n+syn keyword   rustKeyword     fn nextgroup=rustFuncName skipwhite skipempty\n syn keyword   rustKeyword     for in if impl let\n syn keyword   rustKeyword     loop once proc pub\n syn keyword   rustKeyword     return super\n syn keyword   rustKeyword     unsafe virtual while\n-syn keyword   rustKeyword     use nextgroup=rustModPath skipwhite\n+syn keyword   rustKeyword     use nextgroup=rustModPath skipwhite skipempty\n \" FIXME: Scoped impl's name is also fallen in this category\n-syn keyword   rustKeyword     mod trait struct enum type nextgroup=rustIdentifier skipwhite\n-syn keyword   rustKeyword     fn nextgroup=rustFuncName skipwhite\n+syn keyword   rustKeyword     mod trait struct enum type nextgroup=rustIdentifier skipwhite skipempty\n syn keyword   rustStorage     mut ref static\n syn keyword   rustObsoleteStorage const\n \n syn keyword   rustInvalidBareKeyword crate\n \n-syn keyword   rustExternCrate crate contained nextgroup=rustIdentifier skipwhite\n-syn keyword   rustObsoleteExternMod mod contained nextgroup=rustIdentifier skipwhite\n+syn keyword   rustExternCrate crate contained nextgroup=rustIdentifier skipwhite skipempty\n+syn keyword   rustObsoleteExternMod mod contained nextgroup=rustIdentifier skipwhite skipempty\n \n syn match     rustIdentifier  contains=rustIdentifierPrime \"\\%([^[:cntrl:][:space:][:punct:][:digit:]]\\|_\\)\\%([^[:cntrl:][:punct:][:space:]]\\|_\\)*\" display contained\n syn match     rustFuncName    \"\\%([^[:cntrl:][:space:][:punct:][:digit:]]\\|_\\)\\%([^[:cntrl:][:punct:][:space:]]\\|_\\)*\" display contained\n \n+syn region    rustBoxPlacement matchgroup=rustBoxPlacementParens start=\"(\" end=\")\" contains=TOP contained\n+syn keyword   rustBoxPlacementExpr GC containedin=rustBoxPlacement\n+\" Ideally we'd have syntax rules set up to match arbitrary expressions. Since\n+\" we don't, we'll just define temporary contained rules to handle balancing\n+\" delimiters.\n+syn region    rustBoxPlacementBalance start=\"(\" end=\")\" containedin=rustBoxPlacement transparent\n+syn region    rustBoxPlacementBalance start=\"\\[\" end=\"\\]\" containedin=rustBoxPlacement transparent\n+\" {} are handled by rustFoldBraces\n+\n \" Reserved (but not yet used) keywords {{{2\n syn keyword   rustReservedKeyword alignof be do offsetof priv pure sizeof typeof unsized yield\n \n@@ -244,6 +255,8 @@ hi def link rustLifetime      Special\n hi def link rustInvalidBareKeyword Error\n hi def link rustExternCrate   rustKeyword\n hi def link rustObsoleteExternMod Error\n+hi def link rustBoxPlacementParens Delimiter\n+hi def link rustBoxPlacementExpr rustKeyword\n \n \" Other Suggestions:\n \" hi rustAttribute ctermfg=cyan"}]}