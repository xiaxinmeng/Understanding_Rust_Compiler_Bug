{"sha": "8f935fbb5b7e8ea5a320082cb9e28095aa0b5759", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmOTM1ZmJiNWI3ZThlYTVhMzIwMDgyY2I5ZTI4MDk1YWEwYjU3NTk=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-07-19T08:09:22Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-08-10T05:43:57Z"}, "message": "Strip out function implementation when documenting.\n\nThis prevents compilation failure we want to document a platform-specific\nmodule. Every function is replaced by `loop {}` using the same construct\nas `--unpretty everybody_loops`.\n\nNote also a workaround to #43636 is included: `const fn` will retain their\nbodies, since the standard library has quite a number of them.", "tree": {"sha": "db878bb06239ee9816dbce56e23b614ed560fa8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db878bb06239ee9816dbce56e23b614ed560fa8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f935fbb5b7e8ea5a320082cb9e28095aa0b5759", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJZi/KeAAoJEP72yAUdDgE8V34QALfimpugQzjNdSCCYXr/O1OG\nFMGS9AavFlj8TOBdoWU40dPeULgz5Mr7Mpr82JlRH9gUc7TXgAGG00/Lw5Dr441E\ngESO+ZLPSw4o9G777f5CwGOPySWNmEp/nKw44Jr+4cIwxkINeV/nX3HCZEpC6ALN\ng3EA8esJZ5jhdqi48ADgPpBkQNGpseU1YukZA1YrU6Ii+rtBnhV+YeFeed9B4KNo\nUoNZK9Z+wIGyKKSfyBy1pu2u+BNKxwewYpVSdRmHZNVSu5SqlsmcdYWEcyk8sTbA\nrKV4C3aS3TRL3/qHm19wohQTEl0fWjkHgTX6otKIY0Q9BrB129BNW48gRCoi9MlU\n/ZcklIJAV++poCUM0LQiFcHLAIU4CMD3ldJd7R5hOW6n/vmH396NiDO0L/A6mlzd\nMtkPq81nddgSbAYtNYiyGjZLgpQyidGRpSNQbsBMjXz8BZNHDJNmtpJhkDsoRYqV\n9niuLcdkWkZ0WbGVfnBvjM49ufGK80EaL0dVj2Ukd+tgJYssLdmx5UmMW33pH6m3\ncrZOw1Hv3D79eo+RxiyF6RToLDmutB/x5u7AkzqeQCsHewzm7j9AcvPdYa0lhrIS\nrOrXT906D20XKfx2nQU4qXEea4tbLCc3Fl0+0wiDLwVTAFnauGYznddSswYt6pG7\n4v313we08/ZvDSGDsd88\n=zp9d\n-----END PGP SIGNATURE-----", "payload": "tree db878bb06239ee9816dbce56e23b614ed560fa8c\nparent 57e720d2cd09b6befc5b6eed66b65352fc9ff537\nauthor kennytm <kennytm@gmail.com> 1500451762 +0800\ncommitter kennytm <kennytm@gmail.com> 1502343837 +0800\n\nStrip out function implementation when documenting.\n\nThis prevents compilation failure we want to document a platform-specific\nmodule. Every function is replaced by `loop {}` using the same construct\nas `--unpretty everybody_loops`.\n\nNote also a workaround to #43636 is included: `const fn` will retain their\nbodies, since the standard library has quite a number of them.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f935fbb5b7e8ea5a320082cb9e28095aa0b5759", "html_url": "https://github.com/rust-lang/rust/commit/8f935fbb5b7e8ea5a320082cb9e28095aa0b5759", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f935fbb5b7e8ea5a320082cb9e28095aa0b5759/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57e720d2cd09b6befc5b6eed66b65352fc9ff537", "url": "https://api.github.com/repos/rust-lang/rust/commits/57e720d2cd09b6befc5b6eed66b65352fc9ff537", "html_url": "https://github.com/rust-lang/rust/commit/57e720d2cd09b6befc5b6eed66b65352fc9ff537"}], "stats": {"total": 69, "additions": 39, "deletions": 30}, "files": [{"sha": "ef6a4b209290129ebecbc17e0cfbe9eb14a0387f", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 32, "deletions": 30, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/8f935fbb5b7e8ea5a320082cb9e28095aa0b5759/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f935fbb5b7e8ea5a320082cb9e28095aa0b5759/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=8f935fbb5b7e8ea5a320082cb9e28095aa0b5759", "patch": "@@ -44,6 +44,7 @@ use std::io::{self, Write};\n use std::option;\n use std::path::Path;\n use std::str::FromStr;\n+use std::mem;\n \n use rustc::hir::map as hir_map;\n use rustc::hir::map::blocks;\n@@ -618,52 +619,53 @@ impl UserIdentifiedItem {\n     }\n }\n \n-struct ReplaceBodyWithLoop {\n+// Note: Also used by librustdoc, see PR #43348. Consider moving this struct elsewhere.\n+pub struct ReplaceBodyWithLoop {\n     within_static_or_const: bool,\n }\n \n impl ReplaceBodyWithLoop {\n-    fn new() -> ReplaceBodyWithLoop {\n+    pub fn new() -> ReplaceBodyWithLoop {\n         ReplaceBodyWithLoop { within_static_or_const: false }\n     }\n+\n+    fn run<R, F: FnOnce(&mut Self) -> R>(&mut self, is_const: bool, action: F) -> R {\n+        let old_const = mem::replace(&mut self.within_static_or_const, is_const);\n+        let ret = action(self);\n+        self.within_static_or_const = old_const;\n+        ret\n+    }\n }\n \n impl fold::Folder for ReplaceBodyWithLoop {\n     fn fold_item_kind(&mut self, i: ast::ItemKind) -> ast::ItemKind {\n-        match i {\n-            ast::ItemKind::Static(..) |\n-            ast::ItemKind::Const(..) => {\n-                self.within_static_or_const = true;\n-                let ret = fold::noop_fold_item_kind(i, self);\n-                self.within_static_or_const = false;\n-                return ret;\n-            }\n-            _ => fold::noop_fold_item_kind(i, self),\n-        }\n+        let is_const = match i {\n+            ast::ItemKind::Static(..) | ast::ItemKind::Const(..) => true,\n+            ast::ItemKind::Fn(_, _, ref constness, _, _, _) =>\n+                constness.node == ast::Constness::Const,\n+            _ => false,\n+        };\n+        self.run(is_const, |s| fold::noop_fold_item_kind(i, s))\n     }\n \n     fn fold_trait_item(&mut self, i: ast::TraitItem) -> SmallVector<ast::TraitItem> {\n-        match i.node {\n-            ast::TraitItemKind::Const(..) => {\n-                self.within_static_or_const = true;\n-                let ret = fold::noop_fold_trait_item(i, self);\n-                self.within_static_or_const = false;\n-                return ret;\n-            }\n-            _ => fold::noop_fold_trait_item(i, self),\n-        }\n+        let is_const = match i.node {\n+            ast::TraitItemKind::Const(..) => true,\n+            ast::TraitItemKind::Method(ast::MethodSig { ref constness, .. }, _) =>\n+                constness.node == ast::Constness::Const,\n+            _ => false,\n+        };\n+        self.run(is_const, |s| fold::noop_fold_trait_item(i, s))\n     }\n \n     fn fold_impl_item(&mut self, i: ast::ImplItem) -> SmallVector<ast::ImplItem> {\n-        match i.node {\n-            ast::ImplItemKind::Const(..) => {\n-                self.within_static_or_const = true;\n-                let ret = fold::noop_fold_impl_item(i, self);\n-                self.within_static_or_const = false;\n-                return ret;\n-            }\n-            _ => fold::noop_fold_impl_item(i, self),\n-        }\n+        let is_const = match i.node {\n+            ast::ImplItemKind::Const(..) => true,\n+            ast::ImplItemKind::Method(ast::MethodSig { ref constness, .. }, _) =>\n+                constness.node == ast::Constness::Const,\n+            _ => false,\n+        };\n+        self.run(is_const, |s| fold::noop_fold_impl_item(i, s))\n     }\n \n     fn fold_block(&mut self, b: P<ast::Block>) -> P<ast::Block> {"}, {"sha": "9bb7e4e3a09d51e859b5fd7a2a0bc170be71503b", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f935fbb5b7e8ea5a320082cb9e28095aa0b5759/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f935fbb5b7e8ea5a320082cb9e28095aa0b5759/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=8f935fbb5b7e8ea5a320082cb9e28095aa0b5759", "patch": "@@ -10,6 +10,7 @@\n \n use rustc_lint;\n use rustc_driver::{driver, target_features, abort_on_err};\n+use rustc_driver::pretty::ReplaceBodyWithLoop;\n use rustc::dep_graph::DepGraph;\n use rustc::session::{self, config};\n use rustc::hir::def_id::DefId;\n@@ -26,6 +27,7 @@ use rustc_metadata::cstore::CStore;\n \n use syntax::{ast, codemap};\n use syntax::feature_gate::UnstableFeatures;\n+use syntax::fold::Folder;\n use errors;\n use errors::emitter::ColorConfig;\n \n@@ -158,6 +160,7 @@ pub fn run_core(search_paths: SearchPaths,\n     let krate = panictry!(driver::phase_1_parse_input(&driver::CompileController::basic(),\n                                                       &sess,\n                                                       &input));\n+    let krate = ReplaceBodyWithLoop::new().fold_crate(krate);\n \n     let name = link::find_crate_name(Some(&sess), &krate.attrs, &input);\n "}, {"sha": "8e24a3b587920d25adf90adbea1ee1ab6e1872a3", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f935fbb5b7e8ea5a320082cb9e28095aa0b5759/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f935fbb5b7e8ea5a320082cb9e28095aa0b5759/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=8f935fbb5b7e8ea5a320082cb9e28095aa0b5759", "patch": "@@ -32,13 +32,15 @@ use rustc_back::dynamic_lib::DynamicLibrary;\n use rustc_back::tempdir::TempDir;\n use rustc_driver::{self, driver, Compilation};\n use rustc_driver::driver::phase_2_configure_and_expand;\n+use rustc_driver::pretty::ReplaceBodyWithLoop;\n use rustc_metadata::cstore::CStore;\n use rustc_resolve::MakeGlobMap;\n use rustc_trans;\n use rustc_trans::back::link;\n use syntax::ast;\n use syntax::codemap::CodeMap;\n use syntax::feature_gate::UnstableFeatures;\n+use syntax::fold::Folder;\n use syntax_pos::{BytePos, DUMMY_SP, Pos, Span};\n use errors;\n use errors::emitter::ColorConfig;\n@@ -72,6 +74,7 @@ pub fn run(input: &str,\n         crate_types: vec![config::CrateTypeDylib],\n         externs: externs.clone(),\n         unstable_features: UnstableFeatures::from_environment(),\n+        lint_cap: Some(::rustc::lint::Level::Allow),\n         actually_rustdoc: true,\n         ..config::basic_options().clone()\n     };\n@@ -94,6 +97,7 @@ pub fn run(input: &str,\n     let krate = panictry!(driver::phase_1_parse_input(&driver::CompileController::basic(),\n                                                       &sess,\n                                                       &input));\n+    let krate = ReplaceBodyWithLoop::new().fold_crate(krate);\n     let driver::ExpansionResult { defs, mut hir_forest, .. } = {\n         phase_2_configure_and_expand(\n             &sess, &cstore, krate, None, \"rustdoc-test\", None, MakeGlobMap::No, |_| Ok(())"}]}