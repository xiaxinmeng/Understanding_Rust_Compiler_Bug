{"sha": "3bf55753c680e653eaa9d11dd66e56844bd04d32", "node_id": "C_kwDOAAsO6NoAKDNiZjU1NzUzYzY4MGU2NTNlYWE5ZDExZGQ2NmU1Njg0NGJkMDRkMzI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-10T22:25:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-10T22:25:49Z"}, "message": "Auto merge of #89541 - workingjubilee:abbrev-shufvec-t, r=Mark-Simulacrum\n\nCleanup src/test/ui/{simd,simd-intrinsic}\n\nInitial motivation was to simplify a huge macro expansion using a tuple, since we can just use an array in `#[repr(simd)]` now for the same result. But also, several tests were going unnoticed during development of SIMD intrinsics because people kept looking in the wrong directory, and many are basically run-pass vs. build-fail versions of the same tests, so let's keep them close together and simplify their names, so they're easier to sift through.", "tree": {"sha": "2470e75ee0c0d29e7627aebc87c0c232d057a93a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2470e75ee0c0d29e7627aebc87c0c232d057a93a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bf55753c680e653eaa9d11dd66e56844bd04d32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bf55753c680e653eaa9d11dd66e56844bd04d32", "html_url": "https://github.com/rust-lang/rust/commit/3bf55753c680e653eaa9d11dd66e56844bd04d32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bf55753c680e653eaa9d11dd66e56844bd04d32/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41dfaaa3c66759395835b3af59b22f4f22175dc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/41dfaaa3c66759395835b3af59b22f4f22175dc8", "html_url": "https://github.com/rust-lang/rust/commit/41dfaaa3c66759395835b3af59b22f4f22175dc8"}, {"sha": "2a7b5117eabab43cb03d69b120b5ff965464ea71", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a7b5117eabab43cb03d69b120b5ff965464ea71", "html_url": "https://github.com/rust-lang/rust/commit/2a7b5117eabab43cb03d69b120b5ff965464ea71"}], "stats": {"total": 563, "additions": 205, "deletions": 358}, "files": [{"sha": "ed267d8411a22aa26bdaae19336b6b05c0d9fd7b", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-bitmask.rs", "status": "removed", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/41dfaaa3c66759395835b3af59b22f4f22175dc8/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41dfaaa3c66759395835b3af59b22f4f22175dc8/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs?ref=41dfaaa3c66759395835b3af59b22f4f22175dc8", "patch": "@@ -1,92 +0,0 @@\n-// build-fail\n-\n-// Test that the simd_bitmask intrinsic produces ok-ish error\n-// messages when misused.\n-\n-#![feature(repr_simd, platform_intrinsics)]\n-#![allow(non_camel_case_types)]\n-\n-#[repr(simd)]\n-#[derive(Copy, Clone)]\n-pub struct u32x2(pub u32, pub u32);\n-\n-#[repr(simd)]\n-#[derive(Copy, Clone)]\n-pub struct u32x4(pub u32, pub u32, pub u32, pub u32);\n-\n-#[repr(simd)]\n-#[derive(Copy, Clone)]\n-struct u8x8(\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-);\n-\n-#[repr(simd)]\n-#[derive(Copy, Clone)]\n-struct u8x16(\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-);\n-\n-#[repr(simd)]\n-#[derive(Copy, Clone)]\n-struct u8x32(\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-);\n-\n-#[repr(simd)]\n-#[derive(Copy, Clone)]\n-struct u8x64(\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-);\n-\n-extern \"platform-intrinsic\" {\n-    fn simd_bitmask<T, U>(x: T) -> U;\n-}\n-\n-fn main() {\n-    let m2 = u32x2(0, 0);\n-    let m4 = u32x4(0, 0, 0, 0);\n-    let m8 = u8x8(0, 0, 0, 0, 0, 0, 0, 0);\n-    let m16 = u8x16(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n-    let m32 = u8x32(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n-    let m64 = u8x64(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n-\n-    unsafe {\n-        let _: u8 = simd_bitmask(m2);\n-        let _: u8 = simd_bitmask(m4);\n-        let _: u8 = simd_bitmask(m8);\n-        let _: u16 = simd_bitmask(m16);\n-        let _: u32 = simd_bitmask(m32);\n-        let _: u64 = simd_bitmask(m64);\n-\n-        let _: u16 = simd_bitmask(m2);\n-        //~^ ERROR bitmask `u16`, expected `u8`\n-\n-        let _: u16 = simd_bitmask(m8);\n-        //~^ ERROR bitmask `u16`, expected `u8`\n-\n-        let _: u32 = simd_bitmask(m16);\n-        //~^ ERROR bitmask `u32`, expected `u16`\n-\n-        let _: u64 = simd_bitmask(m32);\n-        //~^ ERROR bitmask `u64`, expected `u32`\n-\n-        let _: u128 = simd_bitmask(m64);\n-        //~^ ERROR bitmask `u128`, expected `u64`\n-\n-   }\n-}"}, {"sha": "45c10b378160465102f386905fbc5d5e5933f484", "filename": "src/test/ui/simd/array-trait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Farray-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Farray-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Farray-trait.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-array-trait.rs"}, {"sha": "765215c393977b54b3ee2204c30400390cae1915", "filename": "src/test/ui/simd/array-trait.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Farray-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Farray-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Farray-trait.stderr?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "patch": "@@ -1,5 +1,5 @@\n error: unconstrained generic constant\n-  --> $DIR/simd-array-trait.rs:23:23\n+  --> $DIR/array-trait.rs:23:23\n    |\n LL | pub struct T<S: Simd>([S::Lane; S::SIZE]);\n    |                       ^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/simd/simd-array-trait.stderr"}, {"sha": "7d66395a3c80f3f3f4ff1f7bef744dcbc297300a", "filename": "src/test/ui/simd/array-type.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Farray-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Farray-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Farray-type.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-array-type.rs"}, {"sha": "fa9d35ee4df854b5c207085c9e4c014faaa25fe2", "filename": "src/test/ui/simd/generics.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fgenerics.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-generics.rs"}, {"sha": "7a4f7466559ffdc69a7cf0b389825bcee9fa9ac0", "filename": "src/test/ui/simd/intrinsic/float-math-pass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Ffloat-math-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Ffloat-math-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Ffloat-math-pass.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-intrinsic-float-math.rs"}, {"sha": "d79be61f909955abfbdf1713dbe1c3aa25569d95", "filename": "src/test/ui/simd/intrinsic/float-minmax-pass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Ffloat-minmax-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Ffloat-minmax-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Ffloat-minmax-pass.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-intrinsic-float-minmax.rs"}, {"sha": "3576eed71ab5018e4eb0a150fb95148328c304c7", "filename": "src/test/ui/simd/intrinsic/generic-arithmetic-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-2.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-arithmetic.rs"}, {"sha": "0f0a7ea6652d0b9c4ac4c561090fe58d42e41c4b", "filename": "src/test/ui/simd/intrinsic/generic-arithmetic-2.stderr", "status": "renamed", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-2.stderr?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "patch": "@@ -1,89 +1,89 @@\n error[E0511]: invalid monomorphization of `simd_add` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:69:9\n+  --> $DIR/generic-arithmetic-2.rs:69:9\n    |\n LL |         simd_add(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_sub` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:71:9\n+  --> $DIR/generic-arithmetic-2.rs:71:9\n    |\n LL |         simd_sub(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_mul` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:73:9\n+  --> $DIR/generic-arithmetic-2.rs:73:9\n    |\n LL |         simd_mul(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_div` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:75:9\n+  --> $DIR/generic-arithmetic-2.rs:75:9\n    |\n LL |         simd_div(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shl` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:77:9\n+  --> $DIR/generic-arithmetic-2.rs:77:9\n    |\n LL |         simd_shl(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shr` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:79:9\n+  --> $DIR/generic-arithmetic-2.rs:79:9\n    |\n LL |         simd_shr(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_and` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:81:9\n+  --> $DIR/generic-arithmetic-2.rs:81:9\n    |\n LL |         simd_and(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_or` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:83:9\n+  --> $DIR/generic-arithmetic-2.rs:83:9\n    |\n LL |         simd_or(0, 0);\n    |         ^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_xor` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:85:9\n+  --> $DIR/generic-arithmetic-2.rs:85:9\n    |\n LL |         simd_xor(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_neg` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:88:9\n+  --> $DIR/generic-arithmetic-2.rs:88:9\n    |\n LL |         simd_neg(0);\n    |         ^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shl` intrinsic: unsupported operation on `f32x4` with element `f32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:92:9\n+  --> $DIR/generic-arithmetic-2.rs:92:9\n    |\n LL |         simd_shl(z, z);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shr` intrinsic: unsupported operation on `f32x4` with element `f32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:94:9\n+  --> $DIR/generic-arithmetic-2.rs:94:9\n    |\n LL |         simd_shr(z, z);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_and` intrinsic: unsupported operation on `f32x4` with element `f32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:96:9\n+  --> $DIR/generic-arithmetic-2.rs:96:9\n    |\n LL |         simd_and(z, z);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_or` intrinsic: unsupported operation on `f32x4` with element `f32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:98:9\n+  --> $DIR/generic-arithmetic-2.rs:98:9\n    |\n LL |         simd_or(z, z);\n    |         ^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_xor` intrinsic: unsupported operation on `f32x4` with element `f32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:100:9\n+  --> $DIR/generic-arithmetic-2.rs:100:9\n    |\n LL |         simd_xor(z, z);\n    |         ^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-arithmetic.stderr"}, {"sha": "c507b8d31ecb4d5d7cbaf8fc0fed0b713eaa29ce", "filename": "src/test/ui/simd/intrinsic/generic-arithmetic-pass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-pass.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-intrinsic-generic-arithmetic.rs"}, {"sha": "9736d1b964da31a49b4dcf0513ee39bb40509351", "filename": "src/test/ui/simd/intrinsic/generic-arithmetic-saturating-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-saturating-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-saturating-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-saturating-2.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-arithmetic-saturating.rs"}, {"sha": "f349cb56560ccdb03ddaaf7908533b80e15fa306", "filename": "src/test/ui/simd/intrinsic/generic-arithmetic-saturating-2.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-saturating-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-saturating-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-saturating-2.stderr?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "patch": "@@ -1,11 +1,11 @@\n error[E0511]: invalid monomorphization of `simd_saturating_add` intrinsic: expected element type `f32` of vector type `f32x4` to be a signed or unsigned integer type\n-  --> $DIR/simd-intrinsic-generic-arithmetic-saturating.rs:33:9\n+  --> $DIR/generic-arithmetic-saturating-2.rs:33:9\n    |\n LL |         simd_saturating_add(z, z);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_saturating_sub` intrinsic: expected element type `f32` of vector type `f32x4` to be a signed or unsigned integer type\n-  --> $DIR/simd-intrinsic-generic-arithmetic-saturating.rs:35:9\n+  --> $DIR/generic-arithmetic-saturating-2.rs:35:9\n    |\n LL |         simd_saturating_sub(z, z);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-arithmetic-saturating.stderr"}, {"sha": "c11d14b99d482bf526c889345c997701921a0358", "filename": "src/test/ui/simd/intrinsic/generic-arithmetic-saturating-pass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-saturating-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-saturating-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-arithmetic-saturating-pass.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-intrinsic-generic-arithmetic-saturating.rs"}, {"sha": "8c436841b44e8622be2aebda7f457ab458bdeaba", "filename": "src/test/ui/simd/intrinsic/generic-bitmask-pass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-bitmask-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-bitmask-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-bitmask-pass.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-intrinsic-generic-bitmask.rs"}, {"sha": "92c4e67dfdd1961b68adaf7b54df1b03dfdec5ef", "filename": "src/test/ui/simd/intrinsic/generic-bitmask.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-bitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-bitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-bitmask.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "patch": "@@ -0,0 +1,69 @@\n+// build-fail\n+\n+// Test that the simd_bitmask intrinsic produces ok-ish error\n+// messages when misused.\n+\n+#![feature(repr_simd, platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+pub struct u32x2([u32; 2]);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+pub struct u32x4([u32; 4]);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct u8x8([u8; 8]);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct u8x16([u8; 16]);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct u8x32([u8; 32]);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct u8x64([u8; 64]);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_bitmask<T, U>(x: T) -> U;\n+}\n+\n+fn main() {\n+    let m2 = u32x2([0; 2]);\n+    let m4 = u32x4([0; 4]);\n+    let m8 = u8x8([0; 8]);\n+    let m16 = u8x16([0; 16]);\n+    let m32 = u8x32([0; 32]);\n+    let m64 = u8x64([0; 64]);\n+\n+    unsafe {\n+        let _: u8 = simd_bitmask(m2);\n+        let _: u8 = simd_bitmask(m4);\n+        let _: u8 = simd_bitmask(m8);\n+        let _: u16 = simd_bitmask(m16);\n+        let _: u32 = simd_bitmask(m32);\n+        let _: u64 = simd_bitmask(m64);\n+\n+        let _: u16 = simd_bitmask(m2);\n+        //~^ ERROR bitmask `u16`, expected `u8`\n+\n+        let _: u16 = simd_bitmask(m8);\n+        //~^ ERROR bitmask `u16`, expected `u8`\n+\n+        let _: u32 = simd_bitmask(m16);\n+        //~^ ERROR bitmask `u32`, expected `u16`\n+\n+        let _: u64 = simd_bitmask(m32);\n+        //~^ ERROR bitmask `u64`, expected `u32`\n+\n+        let _: u128 = simd_bitmask(m64);\n+        //~^ ERROR bitmask `u128`, expected `u64`\n+\n+   }\n+}"}, {"sha": "5aaae68cafb342501e769ee7a9d8326873a61b8e", "filename": "src/test/ui/simd/intrinsic/generic-bitmask.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-bitmask.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-bitmask.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-bitmask.stderr?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "patch": "@@ -1,29 +1,29 @@\n error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u16`, expected `u8`\n-  --> $DIR/simd-intrinsic-generic-bitmask.rs:76:22\n+  --> $DIR/generic-bitmask.rs:53:22\n    |\n LL |         let _: u16 = simd_bitmask(m2);\n    |                      ^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u16`, expected `u8`\n-  --> $DIR/simd-intrinsic-generic-bitmask.rs:79:22\n+  --> $DIR/generic-bitmask.rs:56:22\n    |\n LL |         let _: u16 = simd_bitmask(m8);\n    |                      ^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u32`, expected `u16`\n-  --> $DIR/simd-intrinsic-generic-bitmask.rs:82:22\n+  --> $DIR/generic-bitmask.rs:59:22\n    |\n LL |         let _: u32 = simd_bitmask(m16);\n    |                      ^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u64`, expected `u32`\n-  --> $DIR/simd-intrinsic-generic-bitmask.rs:85:22\n+  --> $DIR/generic-bitmask.rs:62:22\n    |\n LL |         let _: u64 = simd_bitmask(m32);\n    |                      ^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u128`, expected `u64`\n-  --> $DIR/simd-intrinsic-generic-bitmask.rs:88:23\n+  --> $DIR/generic-bitmask.rs:65:23\n    |\n LL |         let _: u128 = simd_bitmask(m64);\n    |                       ^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-bitmask.stderr"}, {"sha": "15f232e2c0f70cdae745538e4ae59223c25cb2ba", "filename": "src/test/ui/simd/intrinsic/generic-cast-pass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-cast-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-cast-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-cast-pass.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-intrinsic-generic-cast.rs"}, {"sha": "4f4fa06b002300a89ae92cb2a894b19631286067", "filename": "src/test/ui/simd/intrinsic/generic-cast.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-cast.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-cast.rs"}, {"sha": "2226bbbe1bd552256f99c1453a6003722fa44f31", "filename": "src/test/ui/simd/intrinsic/generic-cast.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-cast.stderr?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "patch": "@@ -1,23 +1,23 @@\n error[E0511]: invalid monomorphization of `simd_cast` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-cast.rs:34:9\n+  --> $DIR/generic-cast.rs:34:9\n    |\n LL |         simd_cast::<i32, i32>(0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_cast` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-cast.rs:36:9\n+  --> $DIR/generic-cast.rs:36:9\n    |\n LL |         simd_cast::<i32, i32x4>(0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_cast` intrinsic: expected SIMD return type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-cast.rs:38:9\n+  --> $DIR/generic-cast.rs:38:9\n    |\n LL |         simd_cast::<i32x4, i32>(x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_cast` intrinsic: expected return type with length 4 (same as input type `i32x4`), found `i32x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-cast.rs:40:9\n+  --> $DIR/generic-cast.rs:40:9\n    |\n LL |         simd_cast::<_, i32x8>(x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-cast.stderr"}, {"sha": "da5c42a1a9888139281cad44f09bd05eb1c8eb46", "filename": "src/test/ui/simd/intrinsic/generic-comparison-pass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-comparison-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-comparison-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-comparison-pass.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-intrinsic-generic-comparison.rs"}, {"sha": "3cd38042f0f241d77ef13624e38bb025eb631e54", "filename": "src/test/ui/simd/intrinsic/generic-comparison.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-comparison.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-comparison.rs"}, {"sha": "0eae2688bced07e92b263fd46dad6c0d7628bcce", "filename": "src/test/ui/simd/intrinsic/generic-comparison.stderr", "status": "renamed", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-comparison.stderr?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "patch": "@@ -1,107 +1,107 @@\n error[E0511]: invalid monomorphization of `simd_eq` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:28:9\n+  --> $DIR/generic-comparison.rs:28:9\n    |\n LL |         simd_eq::<i32, i32>(0, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_ne` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:30:9\n+  --> $DIR/generic-comparison.rs:30:9\n    |\n LL |         simd_ne::<i32, i32>(0, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_lt` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:32:9\n+  --> $DIR/generic-comparison.rs:32:9\n    |\n LL |         simd_lt::<i32, i32>(0, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_le` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:34:9\n+  --> $DIR/generic-comparison.rs:34:9\n    |\n LL |         simd_le::<i32, i32>(0, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_gt` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:36:9\n+  --> $DIR/generic-comparison.rs:36:9\n    |\n LL |         simd_gt::<i32, i32>(0, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_ge` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:38:9\n+  --> $DIR/generic-comparison.rs:38:9\n    |\n LL |         simd_ge::<i32, i32>(0, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_eq` intrinsic: expected SIMD return type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:41:9\n+  --> $DIR/generic-comparison.rs:41:9\n    |\n LL |         simd_eq::<_, i32>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_ne` intrinsic: expected SIMD return type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:43:9\n+  --> $DIR/generic-comparison.rs:43:9\n    |\n LL |         simd_ne::<_, i32>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_lt` intrinsic: expected SIMD return type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:45:9\n+  --> $DIR/generic-comparison.rs:45:9\n    |\n LL |         simd_lt::<_, i32>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_le` intrinsic: expected SIMD return type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:47:9\n+  --> $DIR/generic-comparison.rs:47:9\n    |\n LL |         simd_le::<_, i32>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_gt` intrinsic: expected SIMD return type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:49:9\n+  --> $DIR/generic-comparison.rs:49:9\n    |\n LL |         simd_gt::<_, i32>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_ge` intrinsic: expected SIMD return type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:51:9\n+  --> $DIR/generic-comparison.rs:51:9\n    |\n LL |         simd_ge::<_, i32>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_eq` intrinsic: expected return type with length 4 (same as input type `i32x4`), found `i16x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:54:9\n+  --> $DIR/generic-comparison.rs:54:9\n    |\n LL |         simd_eq::<_, i16x8>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_ne` intrinsic: expected return type with length 4 (same as input type `i32x4`), found `i16x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:56:9\n+  --> $DIR/generic-comparison.rs:56:9\n    |\n LL |         simd_ne::<_, i16x8>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_lt` intrinsic: expected return type with length 4 (same as input type `i32x4`), found `i16x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:58:9\n+  --> $DIR/generic-comparison.rs:58:9\n    |\n LL |         simd_lt::<_, i16x8>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_le` intrinsic: expected return type with length 4 (same as input type `i32x4`), found `i16x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:60:9\n+  --> $DIR/generic-comparison.rs:60:9\n    |\n LL |         simd_le::<_, i16x8>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_gt` intrinsic: expected return type with length 4 (same as input type `i32x4`), found `i16x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:62:9\n+  --> $DIR/generic-comparison.rs:62:9\n    |\n LL |         simd_gt::<_, i16x8>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_ge` intrinsic: expected return type with length 4 (same as input type `i32x4`), found `i16x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:64:9\n+  --> $DIR/generic-comparison.rs:64:9\n    |\n LL |         simd_ge::<_, i16x8>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-comparison.stderr"}, {"sha": "08544bce45db97dca47c604f50a2b0073337edff", "filename": "src/test/ui/simd/intrinsic/generic-elements-pass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-elements-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-elements-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-elements-pass.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-intrinsic-generic-elements.rs"}, {"sha": "abde69163bd4eb1e95e4b39b26030788ad3c9f17", "filename": "src/test/ui/simd/intrinsic/generic-elements.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-elements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-elements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-elements.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-elements.rs"}, {"sha": "5b423f7040f90d49be3ab2e7abd05d9755812067", "filename": "src/test/ui/simd/intrinsic/generic-elements.stderr", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-elements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-elements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-elements.stderr?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "patch": "@@ -1,71 +1,71 @@\n error[E0511]: invalid monomorphization of `simd_insert` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:46:9\n+  --> $DIR/generic-elements.rs:46:9\n    |\n LL |         simd_insert(0, 0, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_insert` intrinsic: expected inserted type `i32` (element of input `i32x4`), found `f64`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:48:9\n+  --> $DIR/generic-elements.rs:48:9\n    |\n LL |         simd_insert(x, 0, 1.0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_extract` intrinsic: expected return type `i32` (element of input `i32x4`), found `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:50:9\n+  --> $DIR/generic-elements.rs:50:9\n    |\n LL |         simd_extract::<_, f32>(x, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle2` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:54:9\n+  --> $DIR/generic-elements.rs:54:9\n    |\n LL |         simd_shuffle2::<i32, i32>(0, 0, IDX2);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:57:9\n+  --> $DIR/generic-elements.rs:57:9\n    |\n LL |         simd_shuffle4::<i32, i32>(0, 0, IDX4);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle8` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:60:9\n+  --> $DIR/generic-elements.rs:60:9\n    |\n LL |         simd_shuffle8::<i32, i32>(0, 0, IDX8);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle2` intrinsic: expected return element type `i32` (element of input `i32x4`), found `f32x2` with element type `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:63:9\n+  --> $DIR/generic-elements.rs:63:9\n    |\n LL |         simd_shuffle2::<_, f32x2>(x, x, IDX2);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: expected return element type `i32` (element of input `i32x4`), found `f32x4` with element type `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:65:9\n+  --> $DIR/generic-elements.rs:65:9\n    |\n LL |         simd_shuffle4::<_, f32x4>(x, x, IDX4);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle8` intrinsic: expected return element type `i32` (element of input `i32x4`), found `f32x8` with element type `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:67:9\n+  --> $DIR/generic-elements.rs:67:9\n    |\n LL |         simd_shuffle8::<_, f32x8>(x, x, IDX8);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle2` intrinsic: expected return type of length 2, found `i32x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-elements.rs:70:9\n+  --> $DIR/generic-elements.rs:70:9\n    |\n LL |         simd_shuffle2::<_, i32x8>(x, x, IDX2);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: expected return type of length 4, found `i32x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-elements.rs:72:9\n+  --> $DIR/generic-elements.rs:72:9\n    |\n LL |         simd_shuffle4::<_, i32x8>(x, x, IDX4);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle8` intrinsic: expected return type of length 8, found `i32x2` with length 2\n-  --> $DIR/simd-intrinsic-generic-elements.rs:74:9\n+  --> $DIR/generic-elements.rs:74:9\n    |\n LL |         simd_shuffle8::<_, i32x2>(x, x, IDX8);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-elements.stderr"}, {"sha": "805caebe5b1f848b46a347148697123871b63a5a", "filename": "src/test/ui/simd/intrinsic/generic-gather-pass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-gather-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-gather-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-gather-pass.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-intrinsic-generic-gather.rs"}, {"sha": "4a54afee8075899771243858c438a7f62841ba52", "filename": "src/test/ui/simd/intrinsic/generic-reduction-pass.rs", "status": "renamed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-reduction-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-reduction-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-reduction-pass.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "patch": "@@ -24,15 +24,6 @@ struct f32x4(pub f32, pub f32, pub f32, pub f32);\n #[derive(Copy, Clone)]\n struct b8x4(pub i8, pub i8, pub i8, pub i8);\n \n-#[repr(simd)]\n-#[derive(Copy, Clone)]\n-struct b8x16(\n-    pub i8, pub i8, pub i8, pub i8,\n-    pub i8, pub i8, pub i8, pub i8,\n-    pub i8, pub i8, pub i8, pub i8,\n-    pub i8, pub i8, pub i8, pub i8\n-);\n-\n extern \"platform-intrinsic\" {\n     fn simd_reduce_add_unordered<T, U>(x: T) -> U;\n     fn simd_reduce_mul_unordered<T, U>(x: T) -> U;", "previous_filename": "src/test/ui/simd/simd-intrinsic-generic-reduction.rs"}, {"sha": "ede4b26d19c2a199505293968d95ebb406c979fa", "filename": "src/test/ui/simd/intrinsic/generic-reduction.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-reduction.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-reduction.rs"}, {"sha": "1028faf69a7bc93170145a510e49df89d8a6e34b", "filename": "src/test/ui/simd/intrinsic/generic-reduction.stderr", "status": "renamed", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-reduction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-reduction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-reduction.stderr?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "patch": "@@ -1,59 +1,59 @@\n error[E0511]: invalid monomorphization of `simd_reduce_add_ordered` intrinsic: expected return type `f32` (element of input `f32x4`), found `i32`\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:34:9\n+  --> $DIR/generic-reduction.rs:34:9\n    |\n LL |         simd_reduce_add_ordered(z, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_reduce_mul_ordered` intrinsic: expected return type `f32` (element of input `f32x4`), found `i32`\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:36:9\n+  --> $DIR/generic-reduction.rs:36:9\n    |\n LL |         simd_reduce_mul_ordered(z, 1);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_reduce_and` intrinsic: expected return type `u32` (element of input `u32x4`), found `f32`\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:39:22\n+  --> $DIR/generic-reduction.rs:39:22\n    |\n LL |         let _: f32 = simd_reduce_and(x);\n    |                      ^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_reduce_or` intrinsic: expected return type `u32` (element of input `u32x4`), found `f32`\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:41:22\n+  --> $DIR/generic-reduction.rs:41:22\n    |\n LL |         let _: f32 = simd_reduce_or(x);\n    |                      ^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_reduce_xor` intrinsic: expected return type `u32` (element of input `u32x4`), found `f32`\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:43:22\n+  --> $DIR/generic-reduction.rs:43:22\n    |\n LL |         let _: f32 = simd_reduce_xor(x);\n    |                      ^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_reduce_and` intrinsic: unsupported simd_reduce_and from `f32x4` with element `f32` to `f32`\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:46:22\n+  --> $DIR/generic-reduction.rs:46:22\n    |\n LL |         let _: f32 = simd_reduce_and(z);\n    |                      ^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_reduce_or` intrinsic: unsupported simd_reduce_or from `f32x4` with element `f32` to `f32`\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:48:22\n+  --> $DIR/generic-reduction.rs:48:22\n    |\n LL |         let _: f32 = simd_reduce_or(z);\n    |                      ^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_reduce_xor` intrinsic: unsupported simd_reduce_xor from `f32x4` with element `f32` to `f32`\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:50:22\n+  --> $DIR/generic-reduction.rs:50:22\n    |\n LL |         let _: f32 = simd_reduce_xor(z);\n    |                      ^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_reduce_all` intrinsic: unsupported simd_reduce_all from `f32x4` with element `f32` to `bool`\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:53:23\n+  --> $DIR/generic-reduction.rs:53:23\n    |\n LL |         let _: bool = simd_reduce_all(z);\n    |                       ^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_reduce_any` intrinsic: unsupported simd_reduce_any from `f32x4` with element `f32` to `bool`\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:55:23\n+  --> $DIR/generic-reduction.rs:55:23\n    |\n LL |         let _: bool = simd_reduce_any(z);\n    |                       ^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-reduction.stderr"}, {"sha": "b850cf9750a1f665767945c7fcfe53336cd57f8a", "filename": "src/test/ui/simd/intrinsic/generic-select-pass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-select-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-select-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-select-pass.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-intrinsic-generic-select.rs"}, {"sha": "7d68af49e2868a8d76c38be186921451c784d739", "filename": "src/test/ui/simd/intrinsic/generic-select.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-select.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-select.rs"}, {"sha": "c53d581745a7c4227249f7c3677ce12258250a30", "filename": "src/test/ui/simd/intrinsic/generic-select.stderr", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-select.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-select.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-select.stderr?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "patch": "@@ -1,47 +1,47 @@\n error[E0511]: invalid monomorphization of `simd_select` intrinsic: mismatched lengths: mask length `8` != other vector length `4`\n-  --> $DIR/simd-intrinsic-generic-select.rs:40:9\n+  --> $DIR/generic-select.rs:40:9\n    |\n LL |         simd_select(m8, x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_select` intrinsic: mask element type is `u32`, expected `i_`\n-  --> $DIR/simd-intrinsic-generic-select.rs:43:9\n+  --> $DIR/generic-select.rs:43:9\n    |\n LL |         simd_select(x, x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_select` intrinsic: mask element type is `f32`, expected `i_`\n-  --> $DIR/simd-intrinsic-generic-select.rs:46:9\n+  --> $DIR/generic-select.rs:46:9\n    |\n LL |         simd_select(z, z, z);\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_select` intrinsic: expected SIMD argument type, found non-SIMD `u32`\n-  --> $DIR/simd-intrinsic-generic-select.rs:49:9\n+  --> $DIR/generic-select.rs:49:9\n    |\n LL |         simd_select(m4, 0u32, 1u32);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_select_bitmask` intrinsic: mismatched lengths: mask length `16` != other vector length `4`\n-  --> $DIR/simd-intrinsic-generic-select.rs:52:9\n+  --> $DIR/generic-select.rs:52:9\n    |\n LL |         simd_select_bitmask(0u16, x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_select_bitmask` intrinsic: expected SIMD argument type, found non-SIMD `u32`\n-  --> $DIR/simd-intrinsic-generic-select.rs:55:9\n+  --> $DIR/generic-select.rs:55:9\n    |\n LL |         simd_select_bitmask(0u8, 1u32, 2u32);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_select_bitmask` intrinsic: `f32` is not an integral type\n-  --> $DIR/simd-intrinsic-generic-select.rs:58:9\n+  --> $DIR/generic-select.rs:58:9\n    |\n LL |         simd_select_bitmask(0.0f32, x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_select_bitmask` intrinsic: `&str` is not an integral type\n-  --> $DIR/simd-intrinsic-generic-select.rs:61:9\n+  --> $DIR/generic-select.rs:61:9\n    |\n LL |         simd_select_bitmask(\"x\", x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-select.stderr"}, {"sha": "9611780ac079ecb4b72c436630067571a2812ea8", "filename": "src/test/ui/simd/intrinsic/generic-shuffle.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-shuffle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-shuffle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-shuffle.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-shuffle.rs"}, {"sha": "44c57cd7c47bcc22301b3fab4235750751ba835c", "filename": "src/test/ui/simd/intrinsic/generic-shuffle.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-shuffle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-shuffle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-shuffle.stderr?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "patch": "@@ -1,17 +1,17 @@\n error[E0511]: invalid monomorphization of `simd_shuffle` intrinsic: expected return type of length 2, found `Simd<u32, 4_usize>` with length 4\n-  --> $DIR/simd-intrinsic-generic-shuffle.rs:24:31\n+  --> $DIR/generic-shuffle.rs:24:31\n    |\n LL |         let _: Simd<u32, 4> = simd_shuffle(v, v, I);\n    |                               ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle` intrinsic: expected return element type `u32` (element of input `Simd<u32, 4_usize>`), found `Simd<f32, 2_usize>` with element type `f32`\n-  --> $DIR/simd-intrinsic-generic-shuffle.rs:27:31\n+  --> $DIR/generic-shuffle.rs:27:31\n    |\n LL |         let _: Simd<f32, 2> = simd_shuffle(v, v, I);\n    |                               ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle` intrinsic: simd_shuffle index must be an array of `u32`, got `[f32; 2]`\n-  --> $DIR/simd-intrinsic-generic-shuffle.rs:30:31\n+  --> $DIR/generic-shuffle.rs:30:31\n    |\n LL |         let _: Simd<u32, 2> = simd_shuffle(v, v, I2);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-shuffle.stderr"}, {"sha": "7221b3ab769db460c8be8dc1836479cee74401f6", "filename": "src/test/ui/simd/intrinsic/inlining-issue67557-ice.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Finlining-issue67557-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Finlining-issue67557-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Finlining-issue67557-ice.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-inlining-issue67557-ice.rs"}, {"sha": "0d15427095a749d69964a5c8246ab596aa2c86e6", "filename": "src/test/ui/simd/intrinsic/inlining-issue67557.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Finlining-issue67557.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Finlining-issue67557.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Finlining-issue67557.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd-intrinsic/simd-intrinsic-inlining-issue67557.rs"}, {"sha": "f276fbd669470baa2e94ccf00ab5ccd2d5995126", "filename": "src/test/ui/simd/intrinsic/issue-85855.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fissue-85855.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fissue-85855.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fissue-85855.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd-intrinsic/issue-85855.rs"}, {"sha": "fb2f1fbc5b1ccc47b756d29b82e45b69ea00b7fd", "filename": "src/test/ui/simd/intrinsic/issue-85855.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fissue-85855.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fissue-85855.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fissue-85855.stderr?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd-intrinsic/issue-85855.stderr"}, {"sha": "0dee3a0e869d79eaaeffd40c37b10159dd0a86f8", "filename": "src/test/ui/simd/shuffle-not-out-of-bounds.rs", "status": "modified", "additions": 27, "deletions": 141, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "patch": "@@ -6,160 +6,53 @@\n \n #[repr(simd)]\n #[derive(Copy, Clone)]\n-struct u8x2(u8, u8);\n+struct u8x2([u8; 2]);\n \n #[repr(simd)]\n #[derive(Copy, Clone)]\n-struct u8x4(u8, u8, u8, u8);\n+struct u8x4([u8; 4]);\n \n #[repr(simd)]\n #[derive(Copy, Clone)]\n-struct u8x8(u8, u8, u8, u8, u8, u8, u8, u8);\n+struct u8x8([u8; 8]);\n \n #[repr(simd)]\n #[derive(Copy, Clone)]\n-struct u8x16(\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-);\n+struct u8x16([u8; 16]);\n \n #[repr(simd)]\n #[derive(Copy, Clone)]\n-struct u8x32(\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-);\n+struct u8x32([u8; 32]);\n \n #[repr(simd)]\n #[derive(Copy, Clone)]\n-struct u8x64(\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-);\n+struct u8x64([u8; 64]);\n+\n+extern \"platform-intrinsic\" {\n+    pub fn simd_shuffle2<T, U>(x: T, y: T, idx: [u32; 2]) -> U;\n+    pub fn simd_shuffle4<T, U>(x: T, y: T, idx: [u32; 4]) -> U;\n+    pub fn simd_shuffle8<T, U>(x: T, y: T, idx: [u32; 8]) -> U;\n+    pub fn simd_shuffle16<T, U>(x: T, y: T, idx: [u32; 16]) -> U;\n+    pub fn simd_shuffle32<T, U>(x: T, y: T, idx: [u32; 32]) -> U;\n+    pub fn simd_shuffle64<T, U>(x: T, y: T, idx: [u32; 64]) -> U;\n+}\n \n // Test vectors by lane size. Since LLVM does not distinguish between a shuffle\n // over two f32s and a shuffle over two u64s, or any other such combination,\n // it is not necessary to test every possible vector, only lane counts.\n macro_rules! test_shuffle_lanes {\n-    ($n:literal, $x:ident, $y:ident, $t:tt) => {\n+    ($n:literal, $x:ident, $y:ident) => {\n         unsafe {\n                 let shuffle: $x = {\n                     const ARR: [u32; $n] = {\n                         let mut arr = [0; $n];\n                         arr[0] = $n * 2;\n                         arr\n                     };\n-                    extern \"platform-intrinsic\" {\n-                        pub fn $y<T, U>(x: T, y: T, idx: [u32; $n]) -> U;\n-                    }\n-                    let vec1 = $x$t;\n-                    let vec2 = $x$t;\n+                    let mut n: u8 = $n;\n+                    let vals = [0; $n].map(|_| { n = n - 1; n });\n+                    let vec1 = $x(vals);\n+                    let vec2 = $x(vals);\n                     $y(vec1, vec2, ARR)\n                 };\n         }\n@@ -175,24 +68,17 @@ macro_rules! test_shuffle_lanes {\n // And unfortunately, standard comments, as in the UI test harness, disappear in macros!\n \n fn main() {\n-    test_shuffle_lanes!(2, u8x2, simd_shuffle2, (2, 1));\n-    test_shuffle_lanes!(4, u8x4, simd_shuffle4, (4, 3, 2, 1));\n-    test_shuffle_lanes!(8, u8x8, simd_shuffle8, (8, 7, 6, 5, 4, 3, 2, 1));\n-    test_shuffle_lanes!(16, u8x16, simd_shuffle16,\n-        (16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n-    test_shuffle_lanes!(32, u8x32, simd_shuffle32,\n-        (32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16,\n-         15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n-    test_shuffle_lanes!(64, u8x64, simd_shuffle64,\n-        (64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49,\n-         48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33,\n-         32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17,\n-         16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n+    test_shuffle_lanes!(2, u8x2, simd_shuffle2);\n+    test_shuffle_lanes!(4, u8x4, simd_shuffle4);\n+    test_shuffle_lanes!(8, u8x8, simd_shuffle8);\n+    test_shuffle_lanes!(16, u8x16, simd_shuffle16);\n+    test_shuffle_lanes!(32, u8x32, simd_shuffle32);\n+    test_shuffle_lanes!(64, u8x64, simd_shuffle64);\n \n     extern \"platform-intrinsic\" {\n         fn simd_shuffle<T, I, U>(a: T, b: T, i: I) -> U;\n     }\n-    let v = u8x2(0, 0);\n+    let v = u8x2([0, 0]);\n     const I: [u32; 2] = [4, 4];\n     unsafe {\n         let _: u8x2 = simd_shuffle(v, v, I);"}, {"sha": "5492d14f7c924bcd2961d64da58babe31ce5f2f1", "filename": "src/test/ui/simd/shuffle-not-out-of-bounds.stderr", "status": "modified", "additions": 25, "deletions": 32, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.stderr?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "patch": "@@ -1,78 +1,71 @@\n error[E0511]: invalid monomorphization of `simd_shuffle2` intrinsic: shuffle index #0 is out of bounds (limit 4)\n-  --> $DIR/shuffle-not-out-of-bounds.rs:163:21\n+  --> $DIR/shuffle-not-out-of-bounds.rs:56:21\n    |\n LL |                     $y(vec1, vec2, ARR)\n    |                     ^^^^^^^^^^^^^^^^^^^\n ...\n-LL |     test_shuffle_lanes!(2, u8x2, simd_shuffle2, (2, 1));\n-   |     ---------------------------------------------------- in this macro invocation\n+LL |     test_shuffle_lanes!(2, u8x2, simd_shuffle2);\n+   |     -------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `test_shuffle_lanes` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: shuffle index #0 is out of bounds (limit 8)\n-  --> $DIR/shuffle-not-out-of-bounds.rs:163:21\n+  --> $DIR/shuffle-not-out-of-bounds.rs:56:21\n    |\n LL |                     $y(vec1, vec2, ARR)\n    |                     ^^^^^^^^^^^^^^^^^^^\n ...\n-LL |     test_shuffle_lanes!(4, u8x4, simd_shuffle4, (4, 3, 2, 1));\n-   |     ---------------------------------------------------------- in this macro invocation\n+LL |     test_shuffle_lanes!(4, u8x4, simd_shuffle4);\n+   |     -------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `test_shuffle_lanes` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0511]: invalid monomorphization of `simd_shuffle8` intrinsic: shuffle index #0 is out of bounds (limit 16)\n-  --> $DIR/shuffle-not-out-of-bounds.rs:163:21\n+  --> $DIR/shuffle-not-out-of-bounds.rs:56:21\n    |\n LL |                     $y(vec1, vec2, ARR)\n    |                     ^^^^^^^^^^^^^^^^^^^\n ...\n-LL |     test_shuffle_lanes!(8, u8x8, simd_shuffle8, (8, 7, 6, 5, 4, 3, 2, 1));\n-   |     ---------------------------------------------------------------------- in this macro invocation\n+LL |     test_shuffle_lanes!(8, u8x8, simd_shuffle8);\n+   |     -------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `test_shuffle_lanes` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0511]: invalid monomorphization of `simd_shuffle16` intrinsic: shuffle index #0 is out of bounds (limit 32)\n-  --> $DIR/shuffle-not-out-of-bounds.rs:163:21\n+  --> $DIR/shuffle-not-out-of-bounds.rs:56:21\n    |\n-LL |                       $y(vec1, vec2, ARR)\n-   |                       ^^^^^^^^^^^^^^^^^^^\n+LL |                     $y(vec1, vec2, ARR)\n+   |                     ^^^^^^^^^^^^^^^^^^^\n ...\n-LL | /     test_shuffle_lanes!(16, u8x16, simd_shuffle16,\n-LL | |         (16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n-   | |_________________________________________________________________- in this macro invocation\n+LL |     test_shuffle_lanes!(16, u8x16, simd_shuffle16);\n+   |     ----------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `test_shuffle_lanes` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0511]: invalid monomorphization of `simd_shuffle32` intrinsic: shuffle index #0 is out of bounds (limit 64)\n-  --> $DIR/shuffle-not-out-of-bounds.rs:163:21\n+  --> $DIR/shuffle-not-out-of-bounds.rs:56:21\n    |\n-LL |                       $y(vec1, vec2, ARR)\n-   |                       ^^^^^^^^^^^^^^^^^^^\n+LL |                     $y(vec1, vec2, ARR)\n+   |                     ^^^^^^^^^^^^^^^^^^^\n ...\n-LL | /     test_shuffle_lanes!(32, u8x32, simd_shuffle32,\n-LL | |         (32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16,\n-LL | |          15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n-   | |_____________________________________________________________- in this macro invocation\n+LL |     test_shuffle_lanes!(32, u8x32, simd_shuffle32);\n+   |     ----------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `test_shuffle_lanes` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0511]: invalid monomorphization of `simd_shuffle64` intrinsic: shuffle index #0 is out of bounds (limit 128)\n-  --> $DIR/shuffle-not-out-of-bounds.rs:163:21\n+  --> $DIR/shuffle-not-out-of-bounds.rs:56:21\n    |\n-LL |                       $y(vec1, vec2, ARR)\n-   |                       ^^^^^^^^^^^^^^^^^^^\n+LL |                     $y(vec1, vec2, ARR)\n+   |                     ^^^^^^^^^^^^^^^^^^^\n ...\n-LL | /     test_shuffle_lanes!(64, u8x64, simd_shuffle64,\n-LL | |         (64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49,\n-LL | |          48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33,\n-LL | |          32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17,\n-LL | |          16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n-   | |_________________________________________________________________- in this macro invocation\n+LL |     test_shuffle_lanes!(64, u8x64, simd_shuffle64);\n+   |     ----------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `test_shuffle_lanes` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0511]: invalid monomorphization of `simd_shuffle` intrinsic: shuffle index #0 is out of bounds (limit 4)\n-  --> $DIR/shuffle-not-out-of-bounds.rs:198:23\n+  --> $DIR/shuffle-not-out-of-bounds.rs:84:23\n    |\n LL |         let _: u8x2 = simd_shuffle(v, v, I);\n    |                       ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "0afa4947225d3b719a0b92bd3fcf6d9280fccf48", "filename": "src/test/ui/simd/size-align.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fsize-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Fsize-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsize-align.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-size-align.rs"}, {"sha": "6d7688191b7f1047edbf5a93f190ee2a8ad17666", "filename": "src/test/ui/simd/target-feature-mixup.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftarget-feature-mixup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftarget-feature-mixup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Ftarget-feature-mixup.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-target-feature-mixup.rs"}, {"sha": "0121404c749355ffe680f9760987163903521596", "filename": "src/test/ui/simd/type-generic-monomorphisation-empty.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-empty.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-type-generic-monomorphisation-empty.rs"}, {"sha": "00fde199b12a27ea6a6bca710d20f374ecd42542", "filename": "src/test/ui/simd/type-generic-monomorphisation-empty.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-empty.stderr?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-type-generic-monomorphisation-empty.stderr"}, {"sha": "ae321c974b9d950b22759b5d94e7bb5e948b3317", "filename": "src/test/ui/simd/type-generic-monomorphisation-extern-nonnull-ptr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-extern-nonnull-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-extern-nonnull-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-extern-nonnull-ptr.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-type-generic-monomorphisation-extern-nonnull-ptr.rs"}, {"sha": "0bc73b155801eb5830b453785b98cbfe4b9eba20", "filename": "src/test/ui/simd/type-generic-monomorphisation-non-primitive.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-non-primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-non-primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-non-primitive.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-type-generic-monomorphisation-non-primitive.rs"}, {"sha": "9e8f06b824ccf3bd8caa02c8b006e56d9a5315ba", "filename": "src/test/ui/simd/type-generic-monomorphisation-non-primitive.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-non-primitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-non-primitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-non-primitive.stderr?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-type-generic-monomorphisation-non-primitive.stderr"}, {"sha": "bd0d457b35e2763ef03dbdc5bf089f57979d7551", "filename": "src/test/ui/simd/type-generic-monomorphisation-oversized.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-oversized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-oversized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-oversized.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-type-generic-monomorphisation-oversized.rs"}, {"sha": "f4418350115321c9e8be87b778251e4ed363ef6a", "filename": "src/test/ui/simd/type-generic-monomorphisation-oversized.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-oversized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-oversized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-oversized.stderr?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-type-generic-monomorphisation-oversized.stderr"}, {"sha": "9b645d363e93250fc941eb8b446e312d99e6bde4", "filename": "src/test/ui/simd/type-generic-monomorphisation-power-of-two.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-power-of-two.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-power-of-two.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-power-of-two.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-type-generic-monomorphisation-power-of-two.rs"}, {"sha": "3e02b08ce5da2c844e54d2ff6dc02aa36fcb13b8", "filename": "src/test/ui/simd/type-generic-monomorphisation-wide-ptr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-wide-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-wide-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-wide-ptr.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-type-generic-monomorphisation-wide-ptr.rs"}, {"sha": "3888e7a0f38f5b877ce6b2e0af171c89c3529599", "filename": "src/test/ui/simd/type-generic-monomorphisation-wide-ptr.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-wide-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-wide-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation-wide-ptr.stderr?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-type-generic-monomorphisation-wide-ptr.stderr"}, {"sha": "12f9d65d77af0242f2749ebf0969cbeaad32d6c9", "filename": "src/test/ui/simd/type-generic-monomorphisation.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-type-generic-monomorphisation.rs"}, {"sha": "7f23893ac853645391cc109cb1ce71822c297c65", "filename": "src/test/ui/simd/type-generic-monomorphisation.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Ftype-generic-monomorphisation.stderr?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-type-generic-monomorphisation.stderr"}, {"sha": "d82c70b8d82681360dc7908e4bea4bab7ebe743e", "filename": "src/test/ui/simd/type-len.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Ftype-len.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-type.rs"}, {"sha": "f122d8bb0dc6724668caa4d6e32d121f1cf979f9", "filename": "src/test/ui/simd/type-len.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Ftype-len.stderr?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "patch": "@@ -1,35 +1,35 @@\n error[E0075]: SIMD vector cannot be empty\n-  --> $DIR/simd-type.rs:6:1\n+  --> $DIR/type-len.rs:6:1\n    |\n LL | struct empty;\n    | ^^^^^^^^^^^^^\n \n error[E0075]: SIMD vector cannot be empty\n-  --> $DIR/simd-type.rs:9:1\n+  --> $DIR/type-len.rs:9:1\n    |\n LL | struct empty2([f32; 0]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0076]: SIMD vector should be homogeneous\n-  --> $DIR/simd-type.rs:15:1\n+  --> $DIR/type-len.rs:15:1\n    |\n LL | struct i64f64(i64, f64);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^ SIMD elements must have the same type\n \n error[E0077]: SIMD vector element type should be a primitive scalar (integer/float/pointer) type\n-  --> $DIR/simd-type.rs:20:1\n+  --> $DIR/type-len.rs:20:1\n    |\n LL | struct FooV(Foo, Foo);\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0077]: SIMD vector element type should be a primitive scalar (integer/float/pointer) type\n-  --> $DIR/simd-type.rs:23:1\n+  --> $DIR/type-len.rs:23:1\n    |\n LL | struct FooV2([Foo; 2]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0075]: SIMD vector cannot have more than 32768 elements\n-  --> $DIR/simd-type.rs:26:1\n+  --> $DIR/type-len.rs:26:1\n    |\n LL | struct TooBig([f32; 65536]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/simd/simd-type.stderr"}, {"sha": "88f62a07ea0d8be2a0a0dee74bc034bb15d9313d", "filename": "src/test/ui/simd/type-wide-ptr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-wide-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-wide-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Ftype-wide-ptr.rs?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-type-wide-ptr.rs"}, {"sha": "51d3c005072053dd8e85c19d2d788f1e1ccd8122", "filename": "src/test/ui/simd/type-wide-ptr.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-wide-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bf55753c680e653eaa9d11dd66e56844bd04d32/src%2Ftest%2Fui%2Fsimd%2Ftype-wide-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Ftype-wide-ptr.stderr?ref=3bf55753c680e653eaa9d11dd66e56844bd04d32", "previous_filename": "src/test/ui/simd/simd-type-wide-ptr.stderr"}]}