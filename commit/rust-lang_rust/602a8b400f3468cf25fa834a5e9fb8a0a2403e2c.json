{"sha": "602a8b400f3468cf25fa834a5e9fb8a0a2403e2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMmE4YjQwMGYzNDY4Y2YyNWZhODM0YTVlOWZiOGEwYTI0MDNlMmM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-11-09T01:14:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-09T01:14:53Z"}, "message": "Rollup merge of #55659 - alexcrichton:musl-no-group, r=michaelwoerister\n\nrustc: Delete grouping logic from the musl target\n\nThis commit deletes the injection of `-(` and `-)` options to the linker\nfor the musl targets. This actually causes problems today on nightly if\nyou execute:\n\n    $ echo 'fn main() {}' >> foo.rs\n    $ rustc --target x86_64-unknown-linux-musl -C panic=abort\n\nyou get a linker error about \"cannot nest groups\". This comes about\nbecause rustc injects its own `--start-group` and `--end-group`\nvariables which clash with the outer `-(` and `-)` variables. It's not\nentirely clear to me why this doesn't affect the musl target by default\n(in `-C panic=unwind` mode).\n\nThe compiler's own injection of `--start-group` and `--end-group` should\nsolve the issues mentioned in the comment for injecting `-(` and `-)` as\nwell.", "tree": {"sha": "73b2ddef94eb9781456fc31089bae5da10a3cf84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73b2ddef94eb9781456fc31089bae5da10a3cf84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/602a8b400f3468cf25fa834a5e9fb8a0a2403e2c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb5N+OCRBK7hj4Ov3rIwAAdHIIAHi5sugn+qvkJFKhmfC5kjgY\nbU5i506pJuGHVjIoY7Wn43nn2RNDkPjU3EJJF4XTmxri8rWdxdf6SlsAX3GPm9og\nifouO+dFHXzx+HTjwxl/aZ8aUNwJT/oHIgRk9jnKbZmGJwMMMwv+TXOdz1xFqoGi\ny80mpxexTBSTMutijWm1NTCFrxrbaL3KbV/GNZxz2wgHccukecOAqeXNJi61A+Br\nBwG9qsfYXzZ9URF/jQut4/xaCG8e/We+Ojd+/5zqaNcimsrAI4XTnBTRBZZAspy/\nAD5CxHbDk8caTjc+pJ9sSXCXnWJPwy4N67YEz1KJ6obOcl/vMzrbNcE2nwCBV68=\n=xq82\n-----END PGP SIGNATURE-----\n", "payload": "tree 73b2ddef94eb9781456fc31089bae5da10a3cf84\nparent 4805a97274bd8673bbe01d82ab3694441b1cf11d\nparent f3428a7dc4bef051f6c1fb454761eda77dbeb106\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1541726093 -0700\ncommitter GitHub <noreply@github.com> 1541726093 -0700\n\nRollup merge of #55659 - alexcrichton:musl-no-group, r=michaelwoerister\n\nrustc: Delete grouping logic from the musl target\n\nThis commit deletes the injection of `-(` and `-)` options to the linker\nfor the musl targets. This actually causes problems today on nightly if\nyou execute:\n\n    $ echo 'fn main() {}' >> foo.rs\n    $ rustc --target x86_64-unknown-linux-musl -C panic=abort\n\nyou get a linker error about \"cannot nest groups\". This comes about\nbecause rustc injects its own `--start-group` and `--end-group`\nvariables which clash with the outer `-(` and `-)` variables. It's not\nentirely clear to me why this doesn't affect the musl target by default\n(in `-C panic=unwind` mode).\n\nThe compiler's own injection of `--start-group` and `--end-group` should\nsolve the issues mentioned in the comment for injecting `-(` and `-)` as\nwell.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/602a8b400f3468cf25fa834a5e9fb8a0a2403e2c", "html_url": "https://github.com/rust-lang/rust/commit/602a8b400f3468cf25fa834a5e9fb8a0a2403e2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/602a8b400f3468cf25fa834a5e9fb8a0a2403e2c/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4805a97274bd8673bbe01d82ab3694441b1cf11d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4805a97274bd8673bbe01d82ab3694441b1cf11d", "html_url": "https://github.com/rust-lang/rust/commit/4805a97274bd8673bbe01d82ab3694441b1cf11d"}, {"sha": "f3428a7dc4bef051f6c1fb454761eda77dbeb106", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3428a7dc4bef051f6c1fb454761eda77dbeb106", "html_url": "https://github.com/rust-lang/rust/commit/f3428a7dc4bef051f6c1fb454761eda77dbeb106"}], "stats": {"total": 25, "additions": 0, "deletions": 25}, "files": [{"sha": "c87f14977cb1d5f50702d58e47874e6699835816", "filename": "src/librustc_target/spec/linux_musl_base.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/602a8b400f3468cf25fa834a5e9fb8a0a2403e2c/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/602a8b400f3468cf25fa834a5e9fb8a0a2403e2c/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs?ref=602a8b400f3468cf25fa834a5e9fb8a0a2403e2c", "patch": "@@ -24,31 +24,6 @@ pub fn opts() -> TargetOptions {\n     // argument is *not* necessary for normal builds, but it can't hurt!\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-Wl,--eh-frame-hdr\".to_string());\n \n-    // There's a whole bunch of circular dependencies when dealing with MUSL\n-    // unfortunately. To put this in perspective libc is statically linked to\n-    // liblibc and libunwind is statically linked to libstd:\n-    //\n-    // * libcore depends on `fmod` which is in libc (transitively in liblibc).\n-    //   liblibc, however, depends on libcore.\n-    // * compiler-rt has personality symbols that depend on libunwind, but\n-    //   libunwind is in libstd which depends on compiler-rt.\n-    //\n-    // Recall that linkers discard libraries and object files as much as\n-    // possible, and with all the static linking and archives flying around with\n-    // MUSL the linker is super aggressively stripping out objects. For example\n-    // the first case has fmod stripped from liblibc (it's in its own object\n-    // file) so it's not there when libcore needs it. In the second example all\n-    // the unused symbols from libunwind are stripped (each is in its own object\n-    // file in libstd) before we end up linking compiler-rt which depends on\n-    // those symbols.\n-    //\n-    // To deal with these circular dependencies we just force the compiler to\n-    // link everything as a group, not stripping anything out until everything\n-    // is processed. The linker will still perform a pass to strip out object\n-    // files but it won't do so until all objects/archives have been processed.\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-Wl,-(\".to_string());\n-    base.post_link_args.insert(LinkerFlavor::Gcc, vec![\"-Wl,-)\".to_string()]);\n-\n     // When generating a statically linked executable there's generally some\n     // small setup needed which is listed in these files. These are provided by\n     // a musl toolchain and are linked by default by the `musl-gcc` script. Note"}]}