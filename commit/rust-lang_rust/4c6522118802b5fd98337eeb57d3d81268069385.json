{"sha": "4c6522118802b5fd98337eeb57d3d81268069385", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNjUyMjExODgwMmI1ZmQ5ODMzN2VlYjU3ZDNkODEyNjgwNjkzODU=", "commit": {"author": {"name": "Yusuke Tanaka", "email": "yusuktan@maguro.dev", "date": "2021-02-10T15:18:45Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-03-02T09:40:23Z"}, "message": "Move transmute_int_to_char to its own module", "tree": {"sha": "3614921146c3589f70e4189e8b5f871ad235b6e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3614921146c3589f70e4189e8b5f871ad235b6e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c6522118802b5fd98337eeb57d3d81268069385", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmA+CAcACgkQHKDfKvWd\naKVPFw/+J978zPy/LvpT8zpOf45lpyQVTo40kL9wczPX/mp6l6g1zo77RnjMofbr\nXF+2vmYNnhAkHjrf1d8Fe75BeL+16i9VnTr6cyWkNdPBmLbnfjk8lcu2GsTfizjJ\nFHPkF0TYucIG54wbdT1v+RzFuGuME+4TaUlAxFHUZggtuOfaa/wQY8l5WwFIRKjj\nwWOpQQ9mzyEwVfaGpKy5iOn7C3zm+98JSXkBzuExto8bPKqdwmosjclB32ZZay7N\nnW3Rl8fcEzQJKrJ6qHSvqV6TOe8tGXGn0xDYIhd5JDg+v9NFc8loXGmGUWG5O4Uc\nrFK9gDNXdbKgLWe7MX9eb/5FJ07qCScTRGQI6cN5hAZ/XbvwClhh+bMnszaPZgSo\nRIy3KTNbwydIJrZELn7vcmVYHWq/tDV7MYbwjkF6QrA5JCc9PPnZpQI8ieJZTX6W\ncRjaTf5PdXO2cr09rsenNFyp19ZyhEFe8+0BNDudmTHdFOP75lxKa45Xnybj3sWT\nxns1ZfvMEhk1k8hOVHBQAtd7FjLM9XGw6loz4Q30AcEW9C4BTwa3iT5r+efAtbTr\n3MRhtBYhx2JzTey6aD16xc4oTd03gusXqR2T1x2/kGo5ceSnMSlK/Z6db7pPw0Ul\nJ802MukdHOjQX40EVejvEkErsFyQjPNkJJ/nBXhgV+4edtNadEE=\n=2qxY\n-----END PGP SIGNATURE-----", "payload": "tree 3614921146c3589f70e4189e8b5f871ad235b6e6\nparent 6442d45d3a55cee14ccee14c004ea344072d54cd\nauthor Yusuke Tanaka <yusuktan@maguro.dev> 1612970325 +0900\ncommitter flip1995 <philipp.krones@embecosm.com> 1614678023 +0100\n\nMove transmute_int_to_char to its own module\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c6522118802b5fd98337eeb57d3d81268069385", "html_url": "https://github.com/rust-lang/rust/commit/4c6522118802b5fd98337eeb57d3d81268069385", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c6522118802b5fd98337eeb57d3d81268069385/comments", "author": {"login": "magurotuna", "id": 23649474, "node_id": "MDQ6VXNlcjIzNjQ5NDc0", "avatar_url": "https://avatars.githubusercontent.com/u/23649474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/magurotuna", "html_url": "https://github.com/magurotuna", "followers_url": "https://api.github.com/users/magurotuna/followers", "following_url": "https://api.github.com/users/magurotuna/following{/other_user}", "gists_url": "https://api.github.com/users/magurotuna/gists{/gist_id}", "starred_url": "https://api.github.com/users/magurotuna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/magurotuna/subscriptions", "organizations_url": "https://api.github.com/users/magurotuna/orgs", "repos_url": "https://api.github.com/users/magurotuna/repos", "events_url": "https://api.github.com/users/magurotuna/events{/privacy}", "received_events_url": "https://api.github.com/users/magurotuna/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6442d45d3a55cee14ccee14c004ea344072d54cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/6442d45d3a55cee14ccee14c004ea344072d54cd", "html_url": "https://github.com/rust-lang/rust/commit/6442d45d3a55cee14ccee14c004ea344072d54cd"}], "stats": {"total": 74, "additions": 52, "deletions": 22}, "files": [{"sha": "376f9bd78c0d3ad99ff16e809d57f234650dd8e7", "filename": "clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4c6522118802b5fd98337eeb57d3d81268069385/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6522118802b5fd98337eeb57d3d81268069385/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=4c6522118802b5fd98337eeb57d3d81268069385", "patch": "@@ -1,4 +1,5 @@\n mod crosspointer_transmute;\n+mod transmute_int_to_char;\n mod transmute_ptr_to_ref;\n mod useless_transmute;\n mod utils;\n@@ -365,30 +366,12 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                 if triggered {\n                     return;\n                 }\n+                let triggered = transmute_int_to_char::check(cx, e, from_ty, to_ty, args);\n+                if triggered {\n+                    return;\n+                }\n \n                 match (&from_ty.kind(), &to_ty.kind()) {\n-                    (ty::Int(ty::IntTy::I32) | ty::Uint(ty::UintTy::U32), &ty::Char) => {\n-                        span_lint_and_then(\n-                            cx,\n-                            TRANSMUTE_INT_TO_CHAR,\n-                            e.span,\n-                            &format!(\"transmute from a `{}` to a `char`\", from_ty),\n-                            |diag| {\n-                                let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n-                                let arg = if let ty::Int(_) = from_ty.kind() {\n-                                    arg.as_ty(ast::UintTy::U32.name_str())\n-                                } else {\n-                                    arg\n-                                };\n-                                diag.span_suggestion(\n-                                    e.span,\n-                                    \"consider using\",\n-                                    format!(\"std::char::from_u32({}).unwrap()\", arg.to_string()),\n-                                    Applicability::Unspecified,\n-                                );\n-                            },\n-                        )\n-                    },\n                     (ty::Ref(_, ty_from, from_mutbl), ty::Ref(_, ty_to, to_mutbl)) => {\n                         if_chain! {\n                             if let (&ty::Slice(slice_ty), &ty::Str) = (&ty_from.kind(), &ty_to.kind());"}, {"sha": "179627d9964b2ba4f8d53a7f8394eda4a6d85097", "filename": "clippy_lints/src/transmute/transmute_int_to_char.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4c6522118802b5fd98337eeb57d3d81268069385/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6522118802b5fd98337eeb57d3d81268069385/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_char.rs?ref=4c6522118802b5fd98337eeb57d3d81268069385", "patch": "@@ -0,0 +1,47 @@\n+use super::TRANSMUTE_INT_TO_CHAR;\n+use crate::utils::{span_lint_and_then, sugg};\n+use rustc_ast as ast;\n+use rustc_errors::Applicability;\n+use rustc_hir::Expr;\n+use rustc_lint::LateContext;\n+use rustc_middle::ty;\n+use rustc_middle::ty::Ty;\n+\n+/// Checks for `transmute_int_to_char` lint.\n+/// Returns `true` if it's triggered, otherwise returns `false`.\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    e: &'tcx Expr<'_>,\n+    from_ty: Ty<'tcx>,\n+    to_ty: Ty<'tcx>,\n+    args: &'tcx [Expr<'_>],\n+) -> bool {\n+    match (&from_ty.kind(), &to_ty.kind()) {\n+        (ty::Int(ty::IntTy::I32) | ty::Uint(ty::UintTy::U32), &ty::Char) => {\n+            {\n+                span_lint_and_then(\n+                    cx,\n+                    TRANSMUTE_INT_TO_CHAR,\n+                    e.span,\n+                    &format!(\"transmute from a `{}` to a `char`\", from_ty),\n+                    |diag| {\n+                        let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n+                        let arg = if let ty::Int(_) = from_ty.kind() {\n+                            arg.as_ty(ast::UintTy::U32.name_str())\n+                        } else {\n+                            arg\n+                        };\n+                        diag.span_suggestion(\n+                            e.span,\n+                            \"consider using\",\n+                            format!(\"std::char::from_u32({}).unwrap()\", arg.to_string()),\n+                            Applicability::Unspecified,\n+                        );\n+                    },\n+                )\n+            };\n+            true\n+        },\n+        _ => false,\n+    }\n+}"}]}