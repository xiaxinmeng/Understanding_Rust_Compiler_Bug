{"sha": "d13020cd3168483449d22eb1f1246e2bb8ae197d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMzAyMGNkMzE2ODQ4MzQ0OWQyMmViMWYxMjQ2ZTJiYjhhZTE5N2Q=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-21T15:00:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-21T15:00:38Z"}, "message": "Rollup merge of #86274 - alexander-melentyev:spaces, r=bjorn3\n\nSpaces", "tree": {"sha": "2612ac55145c8577f02f41e7249e5db49c3c234a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2612ac55145c8577f02f41e7249e5db49c3c234a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d13020cd3168483449d22eb1f1246e2bb8ae197d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d13020cd3168483449d22eb1f1246e2bb8ae197d", "html_url": "https://github.com/rust-lang/rust/commit/d13020cd3168483449d22eb1f1246e2bb8ae197d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d13020cd3168483449d22eb1f1246e2bb8ae197d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e2258ffa949bf4d273259e78d326857c0b2bb3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e2258ffa949bf4d273259e78d326857c0b2bb3d", "html_url": "https://github.com/rust-lang/rust/commit/1e2258ffa949bf4d273259e78d326857c0b2bb3d"}, {"sha": "71f01d197411fc7a9b3509cbf566720eabdf8d92", "url": "https://api.github.com/repos/rust-lang/rust/commits/71f01d197411fc7a9b3509cbf566720eabdf8d92", "html_url": "https://github.com/rust-lang/rust/commit/71f01d197411fc7a9b3509cbf566720eabdf8d92"}], "stats": {"total": 62, "additions": 31, "deletions": 31}, "files": [{"sha": "68354b6ceaf25aa1a973050c358bac6baaf823fe", "filename": "CHANGELOG.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d13020cd3168483449d22eb1f1246e2bb8ae197d/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/d13020cd3168483449d22eb1f1246e2bb8ae197d/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=d13020cd3168483449d22eb1f1246e2bb8ae197d", "patch": "@@ -176,7 +176,7 @@ https://rust-lang.github.io/rustfmt/?version=v1.4.33&search=#imports_granularity\n \n ### Changed\n \n-- Original comment indentation for trailing comments within an `if` is now taken into account when determining the indentation level to use for the trailing comment in formatted code. This does not modify any existing code formatted with rustfmt; it simply gives the programmer discretion to specify whether the comment is associated to the `else` block, or if the trailing comment is just a member of the `if` block. ([#1575](https://github.com/rust-lang/rustfmt/issues/1575), [#4120](https://github.com/rust-lang/rustfmt/issues/4120), [#4506](https://github.com/rust-lang/rustfmt/issues/4506)) \n+- Original comment indentation for trailing comments within an `if` is now taken into account when determining the indentation level to use for the trailing comment in formatted code. This does not modify any existing code formatted with rustfmt; it simply gives the programmer discretion to specify whether the comment is associated to the `else` block, or if the trailing comment is just a member of the `if` block. ([#1575](https://github.com/rust-lang/rustfmt/issues/1575), [#4120](https://github.com/rust-lang/rustfmt/issues/4120), [#4506](https://github.com/rust-lang/rustfmt/issues/4506))\n \n In this example the `// else comment` refers to the `else`:\n ```rust\n@@ -213,7 +213,7 @@ if toks.eat_token(Token::Word(\"modify\"))? && toks.eat_token(Token::Word(\"labels\"\n \n ### Fixed\n - Formatting of empty blocks with attributes which only contained comments is no longer butchered.([#4475](https://github.com/rust-lang/rustfmt/issues/4475), [#4467](https://github.com/rust-lang/rustfmt/issues/4467), [#4452](https://github.com/rust-lang/rustfmt/issues/4452#issuecomment-705886282), [#4522](https://github.com/rust-lang/rustfmt/issues/4522))\n-- Indentation of trailing comments in non-empty extern blocks is now correct. ([#4120](https://github.com/rust-lang/rustfmt/issues/4120#issuecomment-696491872)) \n+- Indentation of trailing comments in non-empty extern blocks is now correct. ([#4120](https://github.com/rust-lang/rustfmt/issues/4120#issuecomment-696491872))\n \n ### Install/Download Options\n - **crates.io package** - *pending*\n@@ -297,7 +297,7 @@ if toks.eat_token(Token::Word(\"modify\"))? && toks.eat_token(Token::Word(\"labels\"\n - Fix aligning comments of different group\n - Fix flattening imports with a single `self`.\n - Fix removing attributes on function parameters.\n-- Fix removing `impl` keyword from opaque type. \n+- Fix removing `impl` keyword from opaque type.\n \n ## [1.4.8] 2019-09-08\n \n@@ -329,7 +329,7 @@ if toks.eat_token(Token::Word(\"modify\"))? && toks.eat_token(Token::Word(\"labels\"\n \n - Add `--message-format` command line option to `cargo-fmt`.\n - Add `-l,--files-with-diff` command line option to `rustfmt`.\n-- Add `json` emit mode. \n+- Add `json` emit mode.\n \n ### Fixed\n \n@@ -380,7 +380,7 @@ if toks.eat_token(Token::Word(\"modify\"))? && toks.eat_token(Token::Word(\"labels\"\n \n ### Added\n \n-- Add new attribute `rustfmt::skip::attributes` to prevent rustfmt \n+- Add new attribute `rustfmt::skip::attributes` to prevent rustfmt\n from formatting an attribute #3665\n \n ### Changed"}, {"sha": "9daa70653797657d6488a952e1f56f3c7f4d3411", "filename": "Configurations.md", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d13020cd3168483449d22eb1f1246e2bb8ae197d/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/d13020cd3168483449d22eb1f1246e2bb8ae197d/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=d13020cd3168483449d22eb1f1246e2bb8ae197d", "patch": "@@ -17,27 +17,27 @@ To enable unstable options, set `unstable_features = true` in `rustfmt.toml` or\n \n Below you find a detailed visual guide on all the supported configuration options of rustfmt:\n \n-## `array_width` \n+## `array_width`\n \n Maximum width of an array literal before falling back to vertical formatting.\n \n - **Default value**: `60`\n - **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n - **Stable**: Yes\n \n-By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `array_width` will take precedence. \n+By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `array_width` will take precedence.\n \n See also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n \n-## `attr_fn_like_width` \n+## `attr_fn_like_width`\n \n Maximum width of the args of a function-like attributes before falling back to vertical formatting.\n \n - **Default value**: `70`\n - **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n - **Stable**: Yes\n \n-By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `attr_fn_like_width` will take precedence. \n+By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `attr_fn_like_width` will take precedence.\n \n See also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n \n@@ -295,15 +295,15 @@ where\n }\n ```\n \n-## `chain_width` \n+## `chain_width`\n \n Maximum width of a chain to fit on one line.\n \n - **Default value**: `60`\n - **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n - **Stable**: Yes\n \n-By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `chain_width` will take precedence. \n+By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `chain_width` will take precedence.\n \n See also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n \n@@ -751,15 +751,15 @@ trait Lorem {\n }\n ```\n \n-## `fn_call_width` \n+## `fn_call_width`\n \n Maximum width of the args of a function call before falling back to vertical formatting.\n \n - **Default value**: `60`\n - **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n - **Stable**: Yes\n \n-By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `fn_call_width` will take precedence. \n+By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `fn_call_width` will take precedence.\n \n See also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n \n@@ -2124,15 +2124,15 @@ Don't reformat out of line modules\n - **Possible values**: `true`, `false`\n - **Stable**: No (tracking issue: #3389)\n \n-## `single_line_if_else_max_width` \n+## `single_line_if_else_max_width`\n \n Maximum line length for single line if-else expressions. A value of `0` (zero) results in if-else expressions always being broken into multiple lines. Note this occurs when `use_small_heuristics` is set to `Off`.\n \n - **Default value**: `50`\n - **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n - **Stable**: Yes\n \n-By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `single_line_if_else_max_width` will take precedence. \n+By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `single_line_if_else_max_width` will take precedence.\n \n See also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n \n@@ -2313,27 +2313,27 @@ fn main() {\n \n See also: [`indent_style`](#indent_style).\n \n-## `struct_lit_width` \n+## `struct_lit_width`\n \n Maximum width in the body of a struct literal before falling back to vertical formatting. A value of `0` (zero) results in struct literals always being broken into multiple lines. Note this occurs when `use_small_heuristics` is set to `Off`.\n \n - **Default value**: `18`\n - **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n - **Stable**: Yes\n \n-By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `struct_lit_width` will take precedence. \n+By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `struct_lit_width` will take precedence.\n \n See also [`max_width`](#max_width), [`use_small_heuristics`](#use_small_heuristics), and [`struct_lit_single_line`](#struct_lit_single_line)\n \n-## `struct_variant_width` \n+## `struct_variant_width`\n \n Maximum width in the body of a struct variant before falling back to vertical formatting. A value of `0` (zero) results in struct literals always being broken into multiple lines. Note this occurs when `use_small_heuristics` is set to `Off`.\n \n - **Default value**: `35`\n - **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n - **Stable**: Yes\n \n-By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `struct_variant_width` will take precedence. \n+By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `struct_variant_width` will take precedence.\n \n See also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n \n@@ -2530,7 +2530,7 @@ fn main() {\n \n This option can be used to simplify the management and bulk updates of the granular width configuration settings ([`fn_call_width`](#fn_call_width), [`attr_fn_like_width`](#attr_fn_like_width), [`struct_lit_width`](#struct_lit_width), [`struct_variant_width`](#struct_variant_width), [`array_width`](#array_width), [`chain_width`](#chain_width), [`single_line_if_else_max_width`](#single_line_if_else_max_width)), that respectively control when formatted constructs are multi-lined/vertical based on width.\n \n-Note that explicitly provided values for the width configuration settings take precedence and override the calculated values determined by `use_small_heuristics`. \n+Note that explicitly provided values for the width configuration settings take precedence and override the calculated values determined by `use_small_heuristics`.\n \n - **Default value**: `\"Default\"`\n - **Possible values**: `\"Default\"`, `\"Off\"`, `\"Max\"`\n@@ -2595,7 +2595,7 @@ fn main() {\n ```\n \n #### `Off`:\n-When `use_small_heuristics` is set to `Off`, the granular width settings are functionally disabled and ignored. See the documentation for the respective width config options for specifics. \n+When `use_small_heuristics` is set to `Off`, the granular width settings are functionally disabled and ignored. See the documentation for the respective width config options for specifics.\n \n ```rust\n enum Lorem {"}, {"sha": "1b77dad11f0fe9b397de1f4ddc28f1452d4dd7a2", "filename": "Contributing.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d13020cd3168483449d22eb1f1246e2bb8ae197d/Contributing.md", "raw_url": "https://github.com/rust-lang/rust/raw/d13020cd3168483449d22eb1f1246e2bb8ae197d/Contributing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Contributing.md?ref=d13020cd3168483449d22eb1f1246e2bb8ae197d", "patch": "@@ -38,7 +38,7 @@ colourised diff will be printed so that the offending line(s) can quickly be\n identified.\n \n Without explicit settings, the tests will be run using rustfmt's default\n-configuration. It is possible to run a test using non-default settings in several \n+configuration. It is possible to run a test using non-default settings in several\n ways. Firstly, you can include configuration parameters in comments at the top\n of the file. For example: to use 3 spaces per tab, start your test with\n `// rustfmt-tab_spaces: 3`. Just remember that the comment is part of the input,"}, {"sha": "7a4dcf8773b61a85b7fc6fcc6dd08c9a91b55a00", "filename": "Design.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d13020cd3168483449d22eb1f1246e2bb8ae197d/Design.md", "raw_url": "https://github.com/rust-lang/rust/raw/d13020cd3168483449d22eb1f1246e2bb8ae197d/Design.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Design.md?ref=d13020cd3168483449d22eb1f1246e2bb8ae197d", "patch": "@@ -150,8 +150,8 @@ for its configuration.\n \n Our visitor keeps track of the desired current indent due to blocks (\n `block_indent`). Each `visit_*` method reformats code according to this indent,\n-`config.comment_width()` and `config.max_width()`. Most reformatting that is done \n-in the `visit_*` methods is a bit hacky and is meant to be temporary until it can \n+`config.comment_width()` and `config.max_width()`. Most reformatting that is done\n+in the `visit_*` methods is a bit hacky and is meant to be temporary until it can\n be done properly.\n \n There are a bunch of methods called `rewrite_*`. They do the bulk of the"}, {"sha": "500a9f9a37c8cb58f4f718ae1a829a3a6a1b0f3e", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d13020cd3168483449d22eb1f1246e2bb8ae197d/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/d13020cd3168483449d22eb1f1246e2bb8ae197d/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=d13020cd3168483449d22eb1f1246e2bb8ae197d", "patch": "@@ -180,13 +180,13 @@ needs to be specified in `rustfmt.toml`, e.g., with `edition = \"2018\"`.\n \n * For things you do not want rustfmt to mangle, use `#[rustfmt::skip]`\n * To prevent rustfmt from formatting a macro or an attribute,\n-  use `#[rustfmt::skip::macros(target_macro_name)]` or \n+  use `#[rustfmt::skip::macros(target_macro_name)]` or\n   `#[rustfmt::skip::attributes(target_attribute_name)]`\n \n   Example:\n \n     ```rust\n-    #![rustfmt::skip::attributes(custom_attribute)]   \n+    #![rustfmt::skip::attributes(custom_attribute)]\n \n     #[custom_attribute(formatting , here , should , be , Skipped)]\n     #[rustfmt::skip::macros(html)]"}, {"sha": "0269e3ee4af931437a9e6c5d9c81bd172c1fb193", "filename": "ci/integration.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d13020cd3168483449d22eb1f1246e2bb8ae197d/ci%2Fintegration.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d13020cd3168483449d22eb1f1246e2bb8ae197d/ci%2Fintegration.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fintegration.sh?ref=d13020cd3168483449d22eb1f1246e2bb8ae197d", "patch": "@@ -15,7 +15,7 @@ set -ex\n # it again.\n #\n #which cargo-fmt || cargo install --force\n-CFG_RELEASE=nightly CFG_RELEASE_CHANNEL=nightly cargo install --path . --force \n+CFG_RELEASE=nightly CFG_RELEASE_CHANNEL=nightly cargo install --path . --force\n \n echo \"Integration tests for: ${INTEGRATION}\"\n cargo fmt -- --version"}, {"sha": "56d1917e2b61b211eb8ae3112f07e93ea1cdf0c9", "filename": "docs/index.html", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d13020cd3168483449d22eb1f1246e2bb8ae197d/docs%2Findex.html", "raw_url": "https://github.com/rust-lang/rust/raw/d13020cd3168483449d22eb1f1246e2bb8ae197d/docs%2Findex.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Findex.html?ref=d13020cd3168483449d22eb1f1246e2bb8ae197d", "patch": "@@ -85,7 +85,7 @@\n                 outputHtml() {\n                   const ast = this.configurationDescriptions\n                                   .filter(({ head, text, stable }) => {\n-                                    \n+\n                                     if (\n                                       text.includes(this.searchCondition) === false &&\n                                       head.includes(this.searchCondition) === false\n@@ -105,7 +105,7 @@\n               },\n               created: async function() {\n                 const res = await axios.get(ConfigurationMdUrl);\n-                const { \n+                const {\n                   about,\n                   configurationAbout,\n                   configurationDescriptions\n@@ -144,7 +144,7 @@\n                   const lastIndex = stack.length - 1;\n                   stack[lastIndex].push(next);\n                   return stack;\n-                }, \n+                },\n                 [[]]);\n               });\n             }\n@@ -179,7 +179,7 @@\n                 configurationAbout, ...configurationDescriptions\n               ] = configurations;\n               configurationAbout.value.links = {};\n-              \n+\n               return {\n                 about,\n                 configurationAbout: configurationAbout.value,"}]}