{"sha": "3205e17cc379684baa7ec098add6929096d28644", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyMDVlMTdjYzM3OTY4NGJhYTdlYzA5OGFkZDY5MjkwOTZkMjg2NDQ=", "commit": {"author": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2018-10-04T11:56:57Z"}, "committer": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2018-10-08T12:48:14Z"}, "message": "rewrite_string: handle newlines in the last line that fits in the shape for cases where line_start is not a whitespace", "tree": {"sha": "38fce05d4d810f06bab70d34a24bc7dad21795cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38fce05d4d810f06bab70d34a24bc7dad21795cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3205e17cc379684baa7ec098add6929096d28644", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEipi5pnt+pUplKNfibVYg2QghATMFAlu7Ug4ACgkQbVYg2Qgh\nATMUKQf/eF9uJ625GWGi7VdW6BH7TAkyLEXOsaG58uaAWOkevivI5Dth8b8EwFdF\nRtyikdNx9ZybDAqH9YizcpilMhcnl4xDrNXmLOnM5dTiYra4dj8Ah0KVz64eG5f8\nXzmtFEJxK+oq4zmGBpkcXhU7+8lxmpvprP+E0zEtk4pYuEs6AUr0qAqr6YhZ0c2j\ndr3IMgLCMMiV0bPSNhzXA9Z3ZPscV7n1S7Lk7y53FQDUzBIqlz77uFWuuE8DL4LJ\n3hzK7BzbBlAw7ZfaXgevIKD7QHTAJmz93hb0oalQeFJhOw6o8krn8g21EO6brqlA\nCrBYFLJ66gwY1j95Ptq6F7VCdbwKdQ==\n=3+lk\n-----END PGP SIGNATURE-----", "payload": "tree 38fce05d4d810f06bab70d34a24bc7dad21795cd\nparent 2fc1de6b4a9369dc545e12a504d26a4b2ea06f57\nauthor St\u00e9phane Campinas <stephane.campinas@gmail.com> 1538654217 +0200\ncommitter St\u00e9phane Campinas <stephane.campinas@gmail.com> 1539002894 +0200\n\nrewrite_string: handle newlines in the last line that fits in the shape for cases where line_start is not a whitespace\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3205e17cc379684baa7ec098add6929096d28644", "html_url": "https://github.com/rust-lang/rust/commit/3205e17cc379684baa7ec098add6929096d28644", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3205e17cc379684baa7ec098add6929096d28644/comments", "author": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fc1de6b4a9369dc545e12a504d26a4b2ea06f57", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fc1de6b4a9369dc545e12a504d26a4b2ea06f57", "html_url": "https://github.com/rust-lang/rust/commit/2fc1de6b4a9369dc545e12a504d26a4b2ea06f57"}], "stats": {"total": 64, "additions": 51, "deletions": 13}, "files": [{"sha": "39a0596b9a9d94a89c770032696f8513822f6aab", "filename": "src/string.rs", "status": "modified", "additions": 51, "deletions": 13, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/3205e17cc379684baa7ec098add6929096d28644/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3205e17cc379684baa7ec098add6929096d28644/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=3205e17cc379684baa7ec098add6929096d28644", "patch": "@@ -96,15 +96,35 @@ pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String>\n     // Snip a line at a time from `stripped_str` until it is used up. Push the snippet\n     // onto result.\n     let mut cur_max_chars = max_chars_with_indent;\n-    let is_overflow_allowed = is_whitespace(fmt.line_start);\n+    let is_bareline_ok = fmt.line_start.is_empty() || is_whitespace(fmt.line_start);\n     loop {\n         // All the input starting at cur_start fits on the current line\n         if graphemes.len() - cur_start <= cur_max_chars {\n-            let last_line = graphemes[cur_start..].join(\"\");\n-            if fmt.trim_end {\n-                result.push_str(&last_line.trim_right());\n+            // trim trailing whitespaces\n+            let graphemes_minus_ws = if !fmt.trim_end {\n+                &graphemes[cur_start..]\n             } else {\n-                result.push_str(&last_line);\n+                match graphemes[cur_start..]\n+                    .iter()\n+                    .rposition(|grapheme| !is_whitespace(grapheme))\n+                {\n+                    Some(index) => &graphemes[cur_start..=cur_start + index],\n+                    None => &graphemes[cur_start..],\n+                }\n+            };\n+            if is_bareline_ok {\n+                // new lines don't need to start with line_start\n+                result.push_str(&graphemes_minus_ws.join(\"\"));\n+            } else {\n+                // new lines need to be indented and prefixed with line_start\n+                for grapheme in graphemes_minus_ws {\n+                    if is_line_feed(grapheme) {\n+                        result.push_str(&indent_with_newline);\n+                        result.push_str(fmt.line_start);\n+                    } else {\n+                        result.push_str(grapheme);\n+                    }\n+                }\n             }\n             break;\n         }\n@@ -121,7 +141,7 @@ pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String>\n             }\n             SnippetState::EndWithLineFeed(line, len) => {\n                 result.push_str(&line);\n-                if is_overflow_allowed {\n+                if is_bareline_ok {\n                     // the next line can benefit from the full width\n                     cur_max_chars = max_chars_without_indent;\n                 } else {\n@@ -171,13 +191,10 @@ fn break_string(max_chars: usize, trim_end: bool, input: &[&str]) -> SnippetStat\n     let break_at = |index /* grapheme at index is included */| {\n         // Take in any whitespaces to the left/right of `input[index]` and\n         // check if there is a line feed, in which case whitespaces needs to be kept.\n-        let mut index_minus_ws = index;\n-        for (i, grapheme) in input[0..=index].iter().enumerate().rev() {\n-            if !is_whitespace(grapheme) {\n-                index_minus_ws = i;\n-                break;\n-            }\n-        }\n+        let index_minus_ws = input[0..=index]\n+            .iter()\n+            .rposition(|grapheme| !is_whitespace(grapheme))\n+            .unwrap_or(index);\n         // Take into account newlines occuring in input[0..=index], i.e., the possible next new\n         // line. If there is one, then text after it could be rewritten in a way that the available\n         // space is fully used.\n@@ -398,6 +415,27 @@ mod test {\n         assert_eq!(rewritten_string, Some(\"\\\"Vivamus id mi.  \\\"\".to_string()));\n     }\n \n+    #[test]\n+    fn last_line_fit_with_newline() {\n+        let string = \"Vivamus id mi.\\nVivamus id mi.\";\n+        let config: Config = Default::default();\n+        let fmt = StringFormat {\n+            opener: \"\",\n+            closer: \"\",\n+            line_start: \"// \",\n+            line_end: \"\",\n+            shape: Shape::legacy(100, Indent::from_width(&config, 4)),\n+            trim_end: true,\n+            config: &config,\n+        };\n+\n+        let rewritten_string = rewrite_string(string, &fmt);\n+        assert_eq!(\n+            rewritten_string,\n+            Some(\"Vivamus id mi.\\n    // Vivamus id mi.\".to_string())\n+        );\n+    }\n+\n     #[test]\n     fn overflow_in_non_string_content() {\n         let comment = \"Aenean metus.\\nVestibulum ac lacus. Vivamus porttitor\";"}]}