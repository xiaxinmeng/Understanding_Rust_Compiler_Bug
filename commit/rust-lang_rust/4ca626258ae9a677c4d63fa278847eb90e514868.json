{"sha": "4ca626258ae9a677c4d63fa278847eb90e514868", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjYTYyNjI1OGFlOWE2NzdjNGQ2M2ZhMjc4ODQ3ZWI5MGU1MTQ4Njg=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-05-23T18:01:36Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-05-25T19:44:36Z"}, "message": "Avoid `Operand::Copy` with `&mut T`", "tree": {"sha": "ce8c253120edb83920cf21c28106b3f7dc24ede8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce8c253120edb83920cf21c28106b3f7dc24ede8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ca626258ae9a677c4d63fa278847eb90e514868", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ca626258ae9a677c4d63fa278847eb90e514868", "html_url": "https://github.com/rust-lang/rust/commit/4ca626258ae9a677c4d63fa278847eb90e514868", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ca626258ae9a677c4d63fa278847eb90e514868/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0f06d11ae7fe29c8e263e2a5d8cd41b372f0283", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0f06d11ae7fe29c8e263e2a5d8cd41b372f0283", "html_url": "https://github.com/rust-lang/rust/commit/a0f06d11ae7fe29c8e263e2a5d8cd41b372f0283"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "b439e919050c06852255c1077978772a3d8ee0f9", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ca626258ae9a677c4d63fa278847eb90e514868/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca626258ae9a677c4d63fa278847eb90e514868/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=4ca626258ae9a677c4d63fa278847eb90e514868", "patch": "@@ -700,7 +700,7 @@ fn build_call_shim<'tcx>(\n \n     let rcvr = rcvr_adjustment.map(|rcvr_adjustment| match rcvr_adjustment {\n         Adjustment::Identity => Operand::Move(rcvr_place()),\n-        Adjustment::Deref => Operand::Copy(tcx.mk_place_deref(rcvr_place())),\n+        Adjustment::Deref => Operand::Move(tcx.mk_place_deref(rcvr_place())), // Can't copy `&mut`\n         Adjustment::DerefMove => Operand::Move(tcx.mk_place_deref(rcvr_place())),\n         Adjustment::RefMut => {\n             // let rcvr = &mut rcvr;"}, {"sha": "a016892d982d1f07a6b45ddafb5728d415064d98", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4ca626258ae9a677c4d63fa278847eb90e514868/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca626258ae9a677c4d63fa278847eb90e514868/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=4ca626258ae9a677c4d63fa278847eb90e514868", "patch": "@@ -1,11 +1,11 @@\n //! Performs various peephole optimizations.\n \n use crate::transform::{MirPass, MirSource};\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_index::vec::Idx;\n use rustc_middle::mir::visit::{MutVisitor, Visitor};\n use rustc_middle::mir::{\n-    Body, Constant, Local, Location, Operand, Place, PlaceRef, ProjectionElem, Rvalue,\n+    Body, Constant, Local, Location, Mutability, Operand, Place, PlaceRef, ProjectionElem, Rvalue,\n };\n use rustc_middle::ty::{self, TyCtxt};\n use std::mem;\n@@ -39,7 +39,7 @@ impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor<'tcx> {\n     }\n \n     fn visit_rvalue(&mut self, rvalue: &mut Rvalue<'tcx>, location: Location) {\n-        if self.optimizations.and_stars.remove(&location) {\n+        if let Some(mtbl) = self.optimizations.and_stars.remove(&location) {\n             debug!(\"replacing `&*`: {:?}\", rvalue);\n             let new_place = match rvalue {\n                 Rvalue::Ref(_, _, place) => {\n@@ -57,7 +57,10 @@ impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor<'tcx> {\n                 }\n                 _ => bug!(\"Detected `&*` but didn't find `&*`!\"),\n             };\n-            *rvalue = Rvalue::Use(Operand::Copy(new_place))\n+            *rvalue = Rvalue::Use(match mtbl {\n+                Mutability::Mut => Operand::Move(new_place),\n+                Mutability::Not => Operand::Copy(new_place),\n+            });\n         }\n \n         if let Some(constant) = self.optimizations.arrays_lengths.remove(&location) {\n@@ -88,8 +91,10 @@ impl Visitor<'tcx> for OptimizationFinder<'b, 'tcx> {\n             if let PlaceRef { local, projection: &[ref proj_base @ .., ProjectionElem::Deref] } =\n                 place.as_ref()\n             {\n-                if Place::ty_from(local, proj_base, self.body, self.tcx).ty.is_region_ptr() {\n-                    self.optimizations.and_stars.insert(location);\n+                // The dereferenced place must have type `&_`.\n+                let ty = Place::ty_from(local, proj_base, self.body, self.tcx).ty;\n+                if let ty::Ref(_, _, mtbl) = ty.kind {\n+                    self.optimizations.and_stars.insert(location, mtbl);\n                 }\n             }\n         }\n@@ -109,6 +114,6 @@ impl Visitor<'tcx> for OptimizationFinder<'b, 'tcx> {\n \n #[derive(Default)]\n struct OptimizationList<'tcx> {\n-    and_stars: FxHashSet<Location>,\n+    and_stars: FxHashMap<Location, Mutability>,\n     arrays_lengths: FxHashMap<Location, Constant<'tcx>>,\n }"}, {"sha": "8751469d265a204cfed69df907b1f0fdc0ef755a", "filename": "src/test/mir-opt/inline/issue-58867-inline-as-ref-as-mut/rustc.a.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ca626258ae9a677c4d63fa278847eb90e514868/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.a.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4ca626258ae9a677c4d63fa278847eb90e514868/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.a.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.a.Inline.after.mir?ref=4ca626258ae9a677c4d63fa278847eb90e514868", "patch": "@@ -15,7 +15,7 @@ fn a(_1: &mut [T]) -> &mut [T] {\n         StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n         StorageLive(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:6\n         _4 = &mut (*_1);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:6\n-        _3 = _4;                         // scope 1 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n+        _3 = move _4;                    // scope 1 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n         _2 = &mut (*_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n         StorageDead(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:14: 3:15\n         _0 = &mut (*_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15"}, {"sha": "743da27a049f933dc4ceb65db039acbb82b1ca67", "filename": "src/test/mir-opt/inline/issue-58867-inline-as-ref-as-mut/rustc.b.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ca626258ae9a677c4d63fa278847eb90e514868/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.b.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4ca626258ae9a677c4d63fa278847eb90e514868/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.b.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.b.Inline.after.mir?ref=4ca626258ae9a677c4d63fa278847eb90e514868", "patch": "@@ -18,7 +18,7 @@ fn b(_1: &mut std::boxed::Box<T>) -> &mut T {\n         _4 = &mut (*_1);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:6\n         StorageLive(_5);                 // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n         _5 = &mut (*(*_4));              // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n-        _3 = _5;                         // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n+        _3 = move _5;                    // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n         StorageDead(_5);                 // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n         _2 = &mut (*_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n         StorageDead(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:14: 8:15"}]}