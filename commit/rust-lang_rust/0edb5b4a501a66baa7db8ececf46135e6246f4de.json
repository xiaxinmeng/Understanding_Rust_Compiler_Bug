{"sha": "0edb5b4a501a66baa7db8ececf46135e6246f4de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlZGI1YjRhNTAxYTY2YmFhN2RiOGVjZWNmNDYxMzVlNjI0NmY0ZGU=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-24T11:45:28Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-24T11:45:28Z"}, "message": "Implement infer await from async func", "tree": {"sha": "a65f9899f109d4df2c05069e037fe5dec0545d73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a65f9899f109d4df2c05069e037fe5dec0545d73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0edb5b4a501a66baa7db8ececf46135e6246f4de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0edb5b4a501a66baa7db8ececf46135e6246f4de", "html_url": "https://github.com/rust-lang/rust/commit/0edb5b4a501a66baa7db8ececf46135e6246f4de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0edb5b4a501a66baa7db8ececf46135e6246f4de/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60aa4d12f95477565d5b01f122d2c9dd845015b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/60aa4d12f95477565d5b01f122d2c9dd845015b4", "html_url": "https://github.com/rust-lang/rust/commit/60aa4d12f95477565d5b01f122d2c9dd845015b4"}], "stats": {"total": 117, "additions": 112, "deletions": 5}, "files": [{"sha": "0a282f31b58602b9c0dac9971dc354d3341c1079", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0edb5b4a501a66baa7db8ececf46135e6246f4de/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edb5b4a501a66baa7db8ececf46135e6246f4de/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=0edb5b4a501a66baa7db8ececf46135e6246f4de", "patch": "@@ -6,12 +6,15 @@ use hir_expand::{\n     name::{name, AsName, Name},\n     AstId, InFile,\n };\n-use ra_syntax::ast::{self, AstNode, ImplItem, ModuleItemOwner, NameOwner, TypeAscriptionOwner};\n+use ra_syntax::ast::{\n+    self, AstNode, AsyncOwner, ImplItem, ModuleItemOwner, NameOwner, TypeAscriptionOwner,\n+};\n \n use crate::{\n     db::DefDatabase,\n+    path::{path, GenericArgs, Path},\n     src::HasSource,\n-    type_ref::{Mutability, TypeRef},\n+    type_ref::{Mutability, TypeBound, TypeRef},\n     AssocContainerId, AssocItemId, ConstId, ConstLoc, Expander, FunctionId, FunctionLoc, HasModule,\n     ImplId, Intern, Lookup, ModuleId, StaticId, TraitId, TypeAliasId, TypeAliasLoc,\n };\n@@ -62,11 +65,31 @@ impl FunctionData {\n             TypeRef::unit()\n         };\n \n+        let ret_type = if src.value.is_async() {\n+            let future_impl = desugar_future_path(ret_type);\n+            let ty_bound = TypeBound::Path(future_impl);\n+            TypeRef::ImplTrait(vec![ty_bound])\n+        } else {\n+            ret_type\n+        };\n+\n         let sig = FunctionData { name, params, ret_type, has_self_param };\n         Arc::new(sig)\n     }\n }\n \n+fn desugar_future_path(orig: TypeRef) -> Path {\n+    let path = path![std::future::Future];\n+\n+    let mut generic_args: Vec<_> = std::iter::repeat(None).take(path.segments.len() - 1).collect();\n+\n+    let mut last = GenericArgs::empty();\n+    last.bindings.push((name![Output], orig));\n+    generic_args.push(Some(Arc::new(last)));\n+\n+    Path::from_known_path(path, generic_args)\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct TypeAliasData {\n     pub name: Name,"}, {"sha": "bf401df3598e67a5d3cfd51b450aab72c108f51b", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0edb5b4a501a66baa7db8ececf46135e6246f4de/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edb5b4a501a66baa7db8ececf46135e6246f4de/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=0edb5b4a501a66baa7db8ececf46135e6246f4de", "patch": "@@ -130,6 +130,11 @@ impl Path {\n         Path { type_anchor: None, mod_path: name_ref.as_name().into(), generic_args: vec![None] }\n     }\n \n+    /// Converts a known mod path to `Path`.\n+    pub(crate) fn from_known_path(path: ModPath, generic_args: Vec<Option<Arc<GenericArgs>>>) -> Path {\n+        Path { type_anchor: None, mod_path: path, generic_args }\n+    }\n+\n     pub fn kind(&self) -> &PathKind {\n         &self.mod_path.kind\n     }"}, {"sha": "08c220cfe8ae500420ac971c6da7b95cd6d58ac0", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0edb5b4a501a66baa7db8ececf46135e6246f4de/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edb5b4a501a66baa7db8ececf46135e6246f4de/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=0edb5b4a501a66baa7db8ececf46135e6246f4de", "patch": "@@ -37,8 +37,8 @@ use test_utils::tested_by;\n use super::{\n     primitive::{FloatTy, IntTy},\n     traits::{Guidance, Obligation, ProjectionPredicate, Solution},\n-    ApplicationTy, InEnvironment, ProjectionTy, Substs, TraitEnvironment, TraitRef, Ty, TypeCtor,\n-    TypeWalk, Uncertain,\n+    ApplicationTy, GenericPredicate, InEnvironment, ProjectionTy, Substs, TraitEnvironment,\n+    TraitRef, Ty, TypeCtor, TypeWalk, Uncertain,\n };\n use crate::{db::HirDatabase, infer::diagnostics::InferenceDiagnostic};\n \n@@ -379,6 +379,19 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     ) -> Ty {\n         match assoc_ty {\n             Some(res_assoc_ty) => {\n+                // Fast path: Check if inner_ty is is `impl Trait` and contained input TypeAlias id\n+                if let Ty::Opaque(ref predicates) = inner_ty {\n+                    for p in predicates.iter() {\n+                        if let GenericPredicate::Projection(projection) = p {\n+                            if projection.projection_ty.associated_ty == res_assoc_ty\n+                                && projection.ty != Ty::Unknown\n+                            {\n+                                return projection.ty.clone();\n+                            }\n+                        }\n+                    }\n+                }\n+\n                 let ty = self.table.new_type_var();\n                 let builder = Substs::build_for_def(self.db, res_assoc_ty)\n                     .push(inner_ty)"}, {"sha": "08d1bf044971eb1702a69e0a54c454c3e8c74307", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0edb5b4a501a66baa7db8ececf46135e6246f4de/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edb5b4a501a66baa7db8ececf46135e6246f4de/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=0edb5b4a501a66baa7db8ececf46135e6246f4de", "patch": "@@ -37,6 +37,63 @@ mod future {\n     assert_eq!(\"u64\", type_at_pos(&db, pos));\n }\n \n+#[test]\n+fn infer_async() {\n+    let (db, pos) = TestDB::with_position(\n+        r#\"\n+//- /main.rs crate:main deps:std\n+\n+async fn foo() -> u64 {\n+    128\n+}\n+\n+fn test() {\n+    let r = foo();\n+    let v = r.await;\n+    v<|>;\n+}\n+\n+//- /std.rs crate:std\n+#[prelude_import] use future::*;\n+mod future {\n+    trait Future {\n+        type Output;\n+    }\n+}\n+\n+\"#,\n+    );\n+    assert_eq!(\"u64\", type_at_pos(&db, pos));\n+}\n+\n+#[test]\n+fn infer_desugar_async() {\n+    let (db, pos) = TestDB::with_position(\n+        r#\"\n+//- /main.rs crate:main deps:std\n+\n+async fn foo() -> u64 {\n+    128\n+}\n+\n+fn test() {\n+    let r = foo();\n+    r<|>;\n+}\n+\n+//- /std.rs crate:std\n+#[prelude_import] use future::*;\n+mod future {\n+    trait Future {\n+        type Output;\n+    }\n+}\n+\n+\"#,\n+    );\n+    assert_eq!(\"impl Future<Output = u64>\", type_at_pos(&db, pos));\n+}\n+\n #[test]\n fn infer_try() {\n     let (db, pos) = TestDB::with_position("}, {"sha": "73e1c407c057aefe9b83bcff74f4138a23065aae", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0edb5b4a501a66baa7db8ececf46135e6246f4de/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edb5b4a501a66baa7db8ececf46135e6246f4de/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=0edb5b4a501a66baa7db8ececf46135e6246f4de", "patch": "@@ -1129,6 +1129,7 @@ impl ast::NameOwner for FnDef {}\n impl ast::TypeParamsOwner for FnDef {}\n impl ast::AttrsOwner for FnDef {}\n impl ast::DocCommentsOwner for FnDef {}\n+impl ast::AsyncOwner for FnDef {}\n impl FnDef {\n     pub fn param_list(&self) -> Option<ParamList> {\n         AstChildren::new(&self.syntax).next()"}, {"sha": "8bf6aa2f0de3910bd35a24a3cf28f51acd650345", "filename": "crates/ra_syntax/src/ast/traits.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0edb5b4a501a66baa7db8ececf46135e6246f4de/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edb5b4a501a66baa7db8ececf46135e6246f4de/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs?ref=0edb5b4a501a66baa7db8ececf46135e6246f4de", "patch": "@@ -8,6 +8,7 @@ use crate::{\n     ast::{self, child_opt, children, AstChildren, AstNode, AstToken},\n     match_ast,\n     syntax_node::{SyntaxElementChildren, SyntaxNodeChildren},\n+    SyntaxKind,\n };\n \n pub trait TypeAscriptionOwner: AstNode {\n@@ -105,6 +106,12 @@ pub trait AttrsOwner: AstNode {\n     }\n }\n \n+pub trait AsyncOwner: AstNode {\n+    fn is_async(&self) -> bool {\n+        self.syntax().children_with_tokens().any(|t| t.kind() == SyntaxKind::ASYNC_KW)\n+    }\n+}\n+\n pub trait DocCommentsOwner: AstNode {\n     fn doc_comments(&self) -> CommentIter {\n         CommentIter { iter: self.syntax().children_with_tokens() }"}, {"sha": "7d11f0176c03449ee691b72c0a0005e267732088", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0edb5b4a501a66baa7db8ececf46135e6246f4de/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/0edb5b4a501a66baa7db8ececf46135e6246f4de/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=0edb5b4a501a66baa7db8ececf46135e6246f4de", "patch": "@@ -275,7 +275,8 @@ Grammar(\n                 \"NameOwner\",\n                 \"TypeParamsOwner\",\n                 \"AttrsOwner\",\n-                \"DocCommentsOwner\"\n+                \"DocCommentsOwner\",\n+                \"AsyncOwner\"\n             ],\n             options: [ \"ParamList\", [\"body\", \"BlockExpr\"], \"RetType\" ],\n         ),"}]}