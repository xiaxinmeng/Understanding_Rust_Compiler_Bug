{"sha": "4f17dce4dc722e56d5d5069e7317feb17c1de5cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMTdkY2U0ZGM3MjJlNTZkNWQ1MDY5ZTczMTdmZWIxN2MxZGU1Y2M=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-31T06:15:43Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-13T09:44:44Z"}, "message": "StripUnconfigured::in_cfg: simplify with slice patterns", "tree": {"sha": "5c06c2df01c3116a1c07edce2dca7651d8ade946", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c06c2df01c3116a1c07edce2dca7651d8ade946"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f17dce4dc722e56d5d5069e7317feb17c1de5cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f17dce4dc722e56d5d5069e7317feb17c1de5cc", "html_url": "https://github.com/rust-lang/rust/commit/4f17dce4dc722e56d5d5069e7317feb17c1de5cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f17dce4dc722e56d5d5069e7317feb17c1de5cc/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e6eaceedeeda764056eb0e2134735793533770d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e6eaceedeeda764056eb0e2134735793533770d", "html_url": "https://github.com/rust-lang/rust/commit/2e6eaceedeeda764056eb0e2134735793533770d"}], "stats": {"total": 52, "additions": 16, "deletions": 36}, "files": [{"sha": "3c37501be4162038a54356f7dcf9d2ba97c4bd8e", "filename": "src/librustc_parse/config.rs", "status": "modified", "additions": 16, "deletions": 36, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4f17dce4dc722e56d5d5069e7317feb17c1de5cc/src%2Flibrustc_parse%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f17dce4dc722e56d5d5069e7317feb17c1de5cc/src%2Flibrustc_parse%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fconfig.rs?ref=4f17dce4dc722e56d5d5069e7317feb17c1de5cc", "patch": "@@ -347,7 +347,13 @@ impl<'a> StripUnconfigured<'a> {\n             if !is_cfg(attr) {\n                 return true;\n             }\n-\n+            let meta_item = match validate_attr::parse_meta(self.sess, attr) {\n+                Ok(meta_item) => meta_item,\n+                Err(mut err) => {\n+                    err.emit();\n+                    return true;\n+                }\n+            };\n             let error = |span, msg, suggestion: &str| {\n                 let mut err = self.sess.span_diagnostic.struct_span_err(span, msg);\n                 if !suggestion.is_empty() {\n@@ -361,41 +367,15 @@ impl<'a> StripUnconfigured<'a> {\n                 err.emit();\n                 true\n             };\n-\n-            let meta_item = match validate_attr::parse_meta(self.sess, attr) {\n-                Ok(meta_item) => meta_item,\n-                Err(mut err) => {\n-                    err.emit();\n-                    return true;\n-                }\n-            };\n-            let nested_meta_items = if let Some(nested_meta_items) = meta_item.meta_item_list() {\n-                nested_meta_items\n-            } else {\n-                return error(\n-                    meta_item.span,\n-                    \"`cfg` is not followed by parentheses\",\n-                    \"cfg(/* predicate */)\",\n-                );\n-            };\n-\n-            if nested_meta_items.is_empty() {\n-                return error(meta_item.span, \"`cfg` predicate is not specified\", \"\");\n-            } else if nested_meta_items.len() > 1 {\n-                return error(\n-                    nested_meta_items.last().unwrap().span(),\n-                    \"multiple `cfg` predicates are specified\",\n-                    \"\",\n-                );\n-            }\n-\n-            match nested_meta_items[0].meta_item() {\n-                Some(meta_item) => attr::cfg_matches(meta_item, self.sess, self.features),\n-                None => error(\n-                    nested_meta_items[0].span(),\n-                    \"`cfg` predicate key cannot be a literal\",\n-                    \"\",\n-                ),\n+            let span = meta_item.span;\n+            match meta_item.meta_item_list() {\n+                None => error(span, \"`cfg` is not followed by parentheses\", \"cfg(/* predicate */)\"),\n+                Some([]) => error(span, \"`cfg` predicate is not specified\", \"\"),\n+                Some([_, .., l]) => error(l.span(), \"multiple `cfg` predicates are specified\", \"\"),\n+                Some([single]) => match single.meta_item() {\n+                    Some(meta_item) => attr::cfg_matches(meta_item, self.sess, self.features),\n+                    None => error(single.span(), \"`cfg` predicate key cannot be a literal\", \"\"),\n+                },\n             }\n         })\n     }"}]}