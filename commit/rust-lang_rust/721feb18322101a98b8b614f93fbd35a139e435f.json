{"sha": "721feb18322101a98b8b614f93fbd35a139e435f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMWZlYjE4MzIyMTAxYTk4YjhiNjE0ZjkzZmJkMzVhMTM5ZTQzNWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-14T14:19:41Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-14T14:28:39Z"}, "message": "internal: prepare to move rename to base_db\n\nIt's better to handle magical cases upper in the stack, because it\nallows for better re-use of the general implementation below. So, we\npull the `self` case up here.\n\nThe end goal is to put `Definition::rename` to the `ide_db`, because\nit's a generally re-usable functionality useful for different ide\nfeatures, alongside with the search which is already there.", "tree": {"sha": "915f7d53fefd8441fb2324a5f2b51c7910a8b0a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/915f7d53fefd8441fb2324a5f2b51c7910a8b0a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/721feb18322101a98b8b614f93fbd35a139e435f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/721feb18322101a98b8b614f93fbd35a139e435f", "html_url": "https://github.com/rust-lang/rust/commit/721feb18322101a98b8b614f93fbd35a139e435f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/721feb18322101a98b8b614f93fbd35a139e435f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4ab49c53303c31858955bc971fe1305445f1de1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4ab49c53303c31858955bc971fe1305445f1de1", "html_url": "https://github.com/rust-lang/rust/commit/d4ab49c53303c31858955bc971fe1305445f1de1"}], "stats": {"total": 81, "additions": 40, "deletions": 41}, "files": [{"sha": "6b3d02bf438be38262dade3ccdb814cd43efd78e", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 40, "deletions": 41, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/721feb18322101a98b8b614f93fbd35a139e435f/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/721feb18322101a98b8b614f93fbd35a139e435f/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=721feb18322101a98b8b614f93fbd35a139e435f", "patch": "@@ -86,6 +86,18 @@ pub(crate) fn rename_with_semantics(\n     let syntax = source_file.syntax();\n \n     let def = find_definition(sema, syntax, position)?;\n+\n+    if let Definition::Local(local) = def {\n+        if let Some(self_param) = local.as_self_param(sema.db) {\n+            cov_mark::hit!(rename_self_to_param);\n+            return rename_self_to_param(sema, local, self_param, new_name);\n+        }\n+        if new_name == \"self\" {\n+            cov_mark::hit!(rename_to_self);\n+            return rename_to_self(sema, local);\n+        }\n+    }\n+\n     match def {\n         Definition::ModuleDef(hir::ModuleDef::Module(module)) => rename_mod(sema, module, new_name),\n         Definition::SelfType(_) => bail!(\"Cannot rename `Self`\"),\n@@ -113,26 +125,26 @@ pub(crate) fn will_rename_file(\n enum IdentifierKind {\n     Ident,\n     Lifetime,\n-    ToSelf,\n     Underscore,\n }\n \n-fn check_identifier(new_name: &str) -> RenameResult<IdentifierKind> {\n-    match lex_single_syntax_kind(new_name) {\n-        Some(res) => match res {\n-            (SyntaxKind::IDENT, _) => Ok(IdentifierKind::Ident),\n-            (T![_], _) => Ok(IdentifierKind::Underscore),\n-            (T![self], _) => Ok(IdentifierKind::ToSelf),\n-            (SyntaxKind::LIFETIME_IDENT, _) if new_name != \"'static\" && new_name != \"'_\" => {\n-                Ok(IdentifierKind::Lifetime)\n-            }\n-            (SyntaxKind::LIFETIME_IDENT, _) => {\n-                bail!(\"Invalid name `{}`: not a lifetime identifier\", new_name)\n-            }\n-            (_, Some(syntax_error)) => bail!(\"Invalid name `{}`: {}\", new_name, syntax_error),\n-            (_, None) => bail!(\"Invalid name `{}`: not an identifier\", new_name),\n-        },\n-        None => bail!(\"Invalid name `{}`: not an identifier\", new_name),\n+impl IdentifierKind {\n+    fn classify(new_name: &str) -> RenameResult<IdentifierKind> {\n+        match lex_single_syntax_kind(new_name) {\n+            Some(res) => match res {\n+                (SyntaxKind::IDENT, _) => Ok(IdentifierKind::Ident),\n+                (T![_], _) => Ok(IdentifierKind::Underscore),\n+                (SyntaxKind::LIFETIME_IDENT, _) if new_name != \"'static\" && new_name != \"'_\" => {\n+                    Ok(IdentifierKind::Lifetime)\n+                }\n+                (SyntaxKind::LIFETIME_IDENT, _) => {\n+                    bail!(\"Invalid name `{}`: not a lifetime identifier\", new_name)\n+                }\n+                (_, Some(syntax_error)) => bail!(\"Invalid name `{}`: {}\", new_name, syntax_error),\n+                (_, None) => bail!(\"Invalid name `{}`: not an identifier\", new_name),\n+            },\n+            None => bail!(\"Invalid name `{}`: not an identifier\", new_name),\n+        }\n     }\n }\n \n@@ -182,7 +194,7 @@ fn rename_mod(\n     module: hir::Module,\n     new_name: &str,\n ) -> RenameResult<SourceChange> {\n-    if IdentifierKind::Ident != check_identifier(new_name)? {\n+    if IdentifierKind::classify(new_name)? != IdentifierKind::Ident {\n         bail!(\"Invalid name `{0}`: cannot rename module to {0}\", new_name);\n     }\n \n@@ -227,14 +239,14 @@ fn rename_reference(\n     mut def: Definition,\n     new_name: &str,\n ) -> RenameResult<SourceChange> {\n-    let ident_kind = check_identifier(new_name)?;\n+    let ident_kind = IdentifierKind::classify(new_name)?;\n \n     if matches!(\n         def, // is target a lifetime?\n         Definition::GenericParam(hir::GenericParam::LifetimeParam(_)) | Definition::Label(_)\n     ) {\n         match ident_kind {\n-            IdentifierKind::Ident | IdentifierKind::ToSelf | IdentifierKind::Underscore => {\n+            IdentifierKind::Ident | IdentifierKind::Underscore => {\n                 cov_mark::hit!(rename_not_a_lifetime_ident_ref);\n                 bail!(\"Invalid name `{}`: not a lifetime identifier\", new_name);\n             }\n@@ -246,25 +258,6 @@ fn rename_reference(\n                 cov_mark::hit!(rename_not_an_ident_ref);\n                 bail!(\"Invalid name `{}`: not an identifier\", new_name);\n             }\n-            (IdentifierKind::ToSelf, Definition::Local(local)) => {\n-                if local.is_self(sema.db) {\n-                    // no-op\n-                    cov_mark::hit!(rename_self_to_self);\n-                    return Ok(SourceChange::default());\n-                } else {\n-                    cov_mark::hit!(rename_to_self);\n-                    return rename_to_self(sema, local);\n-                }\n-            }\n-            (ident_kind, Definition::Local(local)) => {\n-                if let Some(self_param) = local.as_self_param(sema.db) {\n-                    cov_mark::hit!(rename_self_to_param);\n-                    return rename_self_to_param(sema, local, self_param, new_name, ident_kind);\n-                } else {\n-                    cov_mark::hit!(rename_local);\n-                }\n-            }\n-            (IdentifierKind::ToSelf, _) => bail!(\"Invalid name `{}`: not an identifier\", new_name),\n             (IdentifierKind::Ident, _) => cov_mark::hit!(rename_non_local),\n             (IdentifierKind::Underscore, _) => (),\n         }\n@@ -383,8 +376,15 @@ fn rename_self_to_param(\n     local: hir::Local,\n     self_param: hir::SelfParam,\n     new_name: &str,\n-    identifier_kind: IdentifierKind,\n ) -> RenameResult<SourceChange> {\n+    if new_name == \"self\" {\n+        // Let's do nothing rather than complain.\n+        cov_mark::hit!(rename_self_to_self);\n+        return Ok(SourceChange::default());\n+    }\n+\n+    let identifier_kind = IdentifierKind::classify(new_name)?;\n+\n     let InFile { file_id, value: self_param } =\n         self_param.source(sema.db).ok_or_else(|| format_err!(\"cannot find function source\"))?;\n \n@@ -879,7 +879,6 @@ impl Foo {\n \n     #[test]\n     fn test_rename_for_local() {\n-        cov_mark::check!(rename_local);\n         check(\n             \"k\",\n             r#\""}]}