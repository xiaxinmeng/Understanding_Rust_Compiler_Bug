{"sha": "b5fa5b37cc541971e55a1192fac00f26724a9d66", "node_id": "C_kwDOAAsO6NoAKGI1ZmE1YjM3Y2M1NDE5NzFlNTVhMTE5MmZhYzAwZjI2NzI0YTlkNjY", "commit": {"author": {"name": "dswij", "email": "dswijj@gmail.com", "date": "2021-12-07T07:34:44Z"}, "committer": {"name": "dswij", "email": "dswijj@gmail.com", "date": "2021-12-07T07:47:28Z"}, "message": "`option_if_let_else` Do not warn when complex subpat is present", "tree": {"sha": "a7aec6009e22bfdb581b7887fd38d605f64aa2d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7aec6009e22bfdb581b7887fd38d605f64aa2d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5fa5b37cc541971e55a1192fac00f26724a9d66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5fa5b37cc541971e55a1192fac00f26724a9d66", "html_url": "https://github.com/rust-lang/rust/commit/b5fa5b37cc541971e55a1192fac00f26724a9d66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5fa5b37cc541971e55a1192fac00f26724a9d66/comments", "author": {"login": "dswij", "id": 44697459, "node_id": "MDQ6VXNlcjQ0Njk3NDU5", "avatar_url": "https://avatars.githubusercontent.com/u/44697459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dswij", "html_url": "https://github.com/dswij", "followers_url": "https://api.github.com/users/dswij/followers", "following_url": "https://api.github.com/users/dswij/following{/other_user}", "gists_url": "https://api.github.com/users/dswij/gists{/gist_id}", "starred_url": "https://api.github.com/users/dswij/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dswij/subscriptions", "organizations_url": "https://api.github.com/users/dswij/orgs", "repos_url": "https://api.github.com/users/dswij/repos", "events_url": "https://api.github.com/users/dswij/events{/privacy}", "received_events_url": "https://api.github.com/users/dswij/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dswij", "id": 44697459, "node_id": "MDQ6VXNlcjQ0Njk3NDU5", "avatar_url": "https://avatars.githubusercontent.com/u/44697459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dswij", "html_url": "https://github.com/dswij", "followers_url": "https://api.github.com/users/dswij/followers", "following_url": "https://api.github.com/users/dswij/following{/other_user}", "gists_url": "https://api.github.com/users/dswij/gists{/gist_id}", "starred_url": "https://api.github.com/users/dswij/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dswij/subscriptions", "organizations_url": "https://api.github.com/users/dswij/orgs", "repos_url": "https://api.github.com/users/dswij/repos", "events_url": "https://api.github.com/users/dswij/events{/privacy}", "received_events_url": "https://api.github.com/users/dswij/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c7df44e2d096f6538dbb2b7d8a23bd330131a8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c7df44e2d096f6538dbb2b7d8a23bd330131a8a", "html_url": "https://github.com/rust-lang/rust/commit/1c7df44e2d096f6538dbb2b7d8a23bd330131a8a"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "953de0f72a86bbdd7d8ec75c8d73d63b3e8d061c", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5fa5b37cc541971e55a1192fac00f26724a9d66/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fa5b37cc541971e55a1192fac00f26724a9d66/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=b5fa5b37cc541971e55a1192fac00f26724a9d66", "patch": "@@ -112,7 +112,7 @@ fn detect_option_if_let_else<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>) ->\n         if !is_result_ok(cx, let_expr); // Don't lint on Result::ok because a different lint does it already\n         if let PatKind::TupleStruct(struct_qpath, [inner_pat], _) = &let_pat.kind;\n         if is_lang_ctor(cx, struct_qpath, OptionSome);\n-        if let PatKind::Binding(bind_annotation, _, id, _) = &inner_pat.kind;\n+        if let PatKind::Binding(bind_annotation, _, id, None) = &inner_pat.kind;\n         if let Some(some_captures) = can_move_expr_to_closure(cx, if_then);\n         if let Some(none_captures) = can_move_expr_to_closure(cx, if_else);\n         if some_captures"}, {"sha": "7790c816481d1b78bbc2320c3b1cf57d36a3242b", "filename": "tests/ui/option_if_let_else.fixed", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b5fa5b37cc541971e55a1192fac00f26724a9d66/tests%2Fui%2Foption_if_let_else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b5fa5b37cc541971e55a1192fac00f26724a9d66/tests%2Fui%2Foption_if_let_else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.fixed?ref=b5fa5b37cc541971e55a1192fac00f26724a9d66", "patch": "@@ -86,6 +86,19 @@ fn pattern_to_vec(pattern: &str) -> Vec<String> {\n         .collect::<Vec<_>>()\n }\n \n+enum DummyEnum {\n+    One(u8),\n+    Two,\n+}\n+\n+// should not warn since there is a compled complex subpat\n+// see #7991\n+fn complex_subpat() -> DummyEnum {\n+    let x = Some(DummyEnum::One(1));\n+    let _ = if let Some(_one @ DummyEnum::One(..)) = x { 1 } else { 2 };\n+    DummyEnum::Two\n+}\n+\n fn main() {\n     let optional = Some(5);\n     let _ = optional.map_or(5, |x| x + 2);\n@@ -159,4 +172,5 @@ fn main() {\n     }\n \n     let _ = pattern_to_vec(\"hello world\");\n+    let _ = complex_subpat();\n }"}, {"sha": "3d9f76ee4a6b570430f18538518b18cc33a47973", "filename": "tests/ui/option_if_let_else.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b5fa5b37cc541971e55a1192fac00f26724a9d66/tests%2Fui%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fa5b37cc541971e55a1192fac00f26724a9d66/tests%2Fui%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.rs?ref=b5fa5b37cc541971e55a1192fac00f26724a9d66", "patch": "@@ -109,6 +109,19 @@ fn pattern_to_vec(pattern: &str) -> Vec<String> {\n         .collect::<Vec<_>>()\n }\n \n+enum DummyEnum {\n+    One(u8),\n+    Two,\n+}\n+\n+// should not warn since there is a compled complex subpat\n+// see #7991\n+fn complex_subpat() -> DummyEnum {\n+    let x = Some(DummyEnum::One(1));\n+    let _ = if let Some(_one @ DummyEnum::One(..)) = x { 1 } else { 2 };\n+    DummyEnum::Two\n+}\n+\n fn main() {\n     let optional = Some(5);\n     let _ = if let Some(x) = optional { x + 2 } else { 5 };\n@@ -188,4 +201,5 @@ fn main() {\n     }\n \n     let _ = pattern_to_vec(\"hello world\");\n+    let _ = complex_subpat();\n }"}, {"sha": "546131ceb5b633688ae9113df9a96f41e373fcd1", "filename": "tests/ui/option_if_let_else.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b5fa5b37cc541971e55a1192fac00f26724a9d66/tests%2Fui%2Foption_if_let_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b5fa5b37cc541971e55a1192fac00f26724a9d66/tests%2Fui%2Foption_if_let_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.stderr?ref=b5fa5b37cc541971e55a1192fac00f26724a9d66", "patch": "@@ -153,13 +153,13 @@ LL | |             }\n    | |_____________^ help: try: `s.find('.').map_or_else(|| vec![s.to_string()], |idx| vec![s[..idx].to_string(), s[idx..].to_string()])`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:114:13\n+  --> $DIR/option_if_let_else.rs:127:13\n    |\n LL |     let _ = if let Some(x) = optional { x + 2 } else { 5 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `optional.map_or(5, |x| x + 2)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:123:13\n+  --> $DIR/option_if_let_else.rs:136:13\n    |\n LL |       let _ = if let Some(x) = Some(0) {\n    |  _____________^\n@@ -181,13 +181,13 @@ LL ~         });\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:151:13\n+  --> $DIR/option_if_let_else.rs:164:13\n    |\n LL |     let _ = if let Some(x) = Some(0) { s.len() + x } else { s.len() };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Some(0).map_or(s.len(), |x| s.len() + x)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:155:13\n+  --> $DIR/option_if_let_else.rs:168:13\n    |\n LL |       let _ = if let Some(x) = Some(0) {\n    |  _____________^"}]}