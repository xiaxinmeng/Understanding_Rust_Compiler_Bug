{"sha": "b90fc5edfa4b8f1954f29a47f1e124d1ed29c767", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MGZjNWVkZmE0YjhmMTk1NGYyOWE0N2YxZTEyNGQxZWQyOWM3Njc=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-07-14T10:18:50Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-07-15T08:38:40Z"}, "message": "Fix #2894", "tree": {"sha": "355b40f3ac7bdf0a48cc5d98e7330f2d015bb3e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/355b40f3ac7bdf0a48cc5d98e7330f2d015bb3e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b90fc5edfa4b8f1954f29a47f1e124d1ed29c767", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b90fc5edfa4b8f1954f29a47f1e124d1ed29c767", "html_url": "https://github.com/rust-lang/rust/commit/b90fc5edfa4b8f1954f29a47f1e124d1ed29c767", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b90fc5edfa4b8f1954f29a47f1e124d1ed29c767/comments", "author": null, "committer": null, "parents": [{"sha": "06d6710147742892efc17ed307b3397bfe093bc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/06d6710147742892efc17ed307b3397bfe093bc7", "html_url": "https://github.com/rust-lang/rust/commit/06d6710147742892efc17ed307b3397bfe093bc7"}], "stats": {"total": 419, "additions": 303, "deletions": 116}, "files": [{"sha": "f8d6c48390b1e94fc1c3ac5dc867cb5447cf6b2a", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 108, "deletions": 9, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/b90fc5edfa4b8f1954f29a47f1e124d1ed29c767/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90fc5edfa4b8f1954f29a47f1e124d1ed29c767/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=b90fc5edfa4b8f1954f29a47f1e124d1ed29c767", "patch": "@@ -1,8 +1,10 @@\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::hir::*;\n-use rustc::hir::intravisit::{walk_path, NestedVisitorMap, Visitor};\n use crate::utils::{in_macro, span_lint_and_then};\n+use rustc::hir::intravisit::{walk_path, walk_ty, NestedVisitorMap, Visitor};\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty;\n use syntax::ast::NodeId;\n+use syntax::symbol::keywords;\n use syntax_pos::symbol::keywords::SelfType;\n \n /// **What it does:** Checks for unnecessary repetition of structure name when a\n@@ -49,13 +51,93 @@ impl LintPass for UseSelf {\n \n const SEGMENTS_MSG: &str = \"segments should be composed of at least 1 element\";\n \n+fn span_use_self_lint(cx: &LateContext, path: &Path) {\n+    span_lint_and_then(cx, USE_SELF, path.span, \"unnecessary structure name repetition\", |db| {\n+        db.span_suggestion(path.span, \"use the applicable keyword\", \"Self\".to_owned());\n+    });\n+}\n+\n+struct TraitImplTyVisitor<'a, 'tcx: 'a> {\n+    cx: &'a LateContext<'a, 'tcx>,\n+    type_walker: ty::walk::TypeWalker<'tcx>,\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for TraitImplTyVisitor<'a, 'tcx> {\n+    fn visit_ty(&mut self, t: &'tcx Ty) {\n+        let trait_ty = self.type_walker.next();\n+        if let TyPath(QPath::Resolved(_, path)) = &t.node {\n+            let impl_is_self_ty = if let def::Def::SelfTy(..) = path.def {\n+                true\n+            } else {\n+                false\n+            };\n+            if !impl_is_self_ty {\n+                let trait_is_self_ty = if let Some(ty::TyParam(ty::ParamTy { name, .. })) = trait_ty.map(|ty| &ty.sty) {\n+                    *name == keywords::SelfType.name().as_str()\n+                } else {\n+                    false\n+                };\n+                if trait_is_self_ty {\n+                    span_use_self_lint(self.cx, path);\n+                }\n+            }\n+        }\n+        walk_ty(self, t)\n+    }\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::None\n+    }\n+}\n+\n+fn check_trait_method_impl_decl<'a, 'tcx: 'a>(\n+    cx: &'a LateContext<'a, 'tcx>,\n+    impl_item: &ImplItem,\n+    impl_decl: &'tcx FnDecl,\n+    impl_trait_ref: &ty::TraitRef,\n+) {\n+    let trait_method = cx\n+        .tcx\n+        .associated_items(impl_trait_ref.def_id)\n+        .find(|assoc_item| {\n+            assoc_item.kind == ty::AssociatedKind::Method\n+                && cx\n+                    .tcx\n+                    .hygienic_eq(impl_item.ident, assoc_item.ident, impl_trait_ref.def_id)\n+        })\n+        .expect(\"impl method matches a trait method\");\n+\n+    let trait_method_sig = cx.tcx.fn_sig(trait_method.def_id);\n+    let trait_method_sig = cx.tcx.erase_late_bound_regions(&trait_method_sig);\n+\n+    let output_ty = if let FunctionRetTy::Return(ty) = &impl_decl.output {\n+        Some(&**ty)\n+    } else {\n+        None\n+    };\n+\n+    for (impl_ty, trait_ty) in impl_decl\n+        .inputs\n+        .iter()\n+        .chain(output_ty)\n+        .zip(trait_method_sig.inputs_and_output)\n+    {\n+        let mut visitor = TraitImplTyVisitor {\n+            cx,\n+            type_walker: trait_ty.walk(),\n+        };\n+\n+        visitor.visit_ty(&impl_ty);\n+    }\n+}\n+\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UseSelf {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if in_macro(item.span) {\n             return;\n         }\n         if_chain! {\n-            if let ItemImpl(.., ref item_type, ref refs) = item.node;\n+            if let ItemImpl(.., item_type, refs) = &item.node;\n             if let Ty_::TyPath(QPath::Resolved(_, ref item_path)) = item_type.node;\n             then {\n                 let parameters = &item_path.segments.last().expect(SEGMENTS_MSG).args;\n@@ -67,13 +149,32 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UseSelf {\n                 } else {\n                     true\n                 };\n+\n                 if should_check {\n                     let visitor = &mut UseSelfVisitor {\n                         item_path,\n                         cx,\n                     };\n-                    for impl_item_ref in refs {\n-                        visitor.visit_impl_item(cx.tcx.hir.impl_item(impl_item_ref.id));\n+                    let impl_def_id = cx.tcx.hir.local_def_id(item.id);\n+                    let impl_trait_ref = cx.tcx.impl_trait_ref(impl_def_id);\n+\n+                    if let Some(impl_trait_ref) = impl_trait_ref {\n+                        for impl_item_ref in refs {\n+                            let impl_item = cx.tcx.hir.impl_item(impl_item_ref.id);\n+                            if let ImplItemKind::Method(MethodSig{ decl: impl_decl, .. }, impl_body_id)\n+                                    = &impl_item.node {\n+                                check_trait_method_impl_decl(cx, impl_item, impl_decl, &impl_trait_ref);\n+                                let body = cx.tcx.hir.body(*impl_body_id);\n+                                visitor.visit_body(body);\n+                            } else {\n+                                visitor.visit_impl_item(impl_item);\n+                            }\n+                        }\n+                    } else {\n+                        for impl_item_ref in refs {\n+                            let impl_item = cx.tcx.hir.impl_item(impl_item_ref.id);\n+                            visitor.visit_impl_item(impl_item);\n+                        }\n                     }\n                 }\n             }\n@@ -89,9 +190,7 @@ struct UseSelfVisitor<'a, 'tcx: 'a> {\n impl<'a, 'tcx> Visitor<'tcx> for UseSelfVisitor<'a, 'tcx> {\n     fn visit_path(&mut self, path: &'tcx Path, _id: NodeId) {\n         if self.item_path.def == path.def && path.segments.last().expect(SEGMENTS_MSG).ident.name != SelfType.name() {\n-            span_lint_and_then(self.cx, USE_SELF, path.span, \"unnecessary structure name repetition\", |db| {\n-                db.span_suggestion(path.span, \"use the applicable keyword\", \"Self\".to_owned());\n-            });\n+            span_use_self_lint(self.cx, path);\n         }\n \n         walk_path(self, path);"}, {"sha": "7f0da364c7a35c8604230ae6e0079ae59bb919b3", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90fc5edfa4b8f1954f29a47f1e124d1ed29c767/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90fc5edfa4b8f1954f29a47f1e124d1ed29c767/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=b90fc5edfa4b8f1954f29a47f1e124d1ed29c767", "patch": "@@ -4,7 +4,7 @@\n #![warn(clippy, clippy_pedantic, option_unwrap_used)]\n #![allow(blacklisted_name, unused, print_stdout, non_ascii_literal, new_without_default,\n     new_without_default_derive, missing_docs_in_private_items, needless_pass_by_value,\n-    default_trait_access)]\n+    default_trait_access, use_self)]\n \n use std::collections::BTreeMap;\n use std::collections::HashMap;"}, {"sha": "12665244b9d59488c434587c99e598ec3c83ae5a", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 1, "deletions": 93, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/b90fc5edfa4b8f1954f29a47f1e124d1ed29c767/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b90fc5edfa4b8f1954f29a47f1e124d1ed29c767/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=b90fc5edfa4b8f1954f29a47f1e124d1ed29c767", "patch": "@@ -1,47 +1,3 @@\n-error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:21:29\n-   |\n-21 |     pub fn add(self, other: T) -> T { self }\n-   |                             ^ help: use the applicable keyword: `Self`\n-   |\n-   = note: `-D use-self` implied by `-D warnings`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:21:35\n-   |\n-21 |     pub fn add(self, other: T) -> T { self }\n-   |                                   ^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:25:25\n-   |\n-25 |     fn eq(&self, other: T) -> bool { true } // no error, private function\n-   |                         ^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:27:26\n-   |\n-27 |     fn sub(&self, other: T) -> &T { self } // no error, self is a ref\n-   |                          ^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:27:33\n-   |\n-27 |     fn sub(&self, other: T) -> &T { self } // no error, self is a ref\n-   |                                 ^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:28:21\n-   |\n-28 |     fn div(self) -> T { self } // no error, different #arguments\n-   |                     ^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:29:25\n-   |\n-29 |     fn rem(self, other: T) { } // no error, wrong return type\n-   |                         ^ help: use the applicable keyword: `Self`\n-\n error: defining a method called `add` on this type; consider implementing the `std::ops::Add` trait or choosing a less ambiguous name\n   --> $DIR/methods.rs:21:5\n    |\n@@ -78,30 +34,6 @@ error: methods called `new` usually return `Self`\n    |\n    = note: `-D new-ret-no-self` implied by `-D warnings`\n \n-error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:80:24\n-   |\n-80 |     fn new() -> Option<V<T>> { None }\n-   |                        ^^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:84:19\n-   |\n-84 |     type Output = T;\n-   |                   ^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:85:25\n-   |\n-85 |     fn mul(self, other: T) -> T { self } // no error, obviously\n-   |                         ^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/methods.rs:85:31\n-   |\n-85 |     fn mul(self, other: T) -> T { self } // no error, obviously\n-   |                               ^ help: use the applicable keyword: `Self`\n-\n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n    --> $DIR/methods.rs:104:13\n     |\n@@ -251,24 +183,6 @@ error: called `map(f).unwrap_or_else(g)` on a Result value. This can be done mor\n 174 | |                 );\n     | |_________________^\n \n-error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:200:24\n-    |\n-200 |     fn filter(self) -> IteratorFalsePositives {\n-    |                        ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:204:22\n-    |\n-204 |     fn next(self) -> IteratorFalsePositives {\n-    |                      ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:224:32\n-    |\n-224 |     fn skip(self, _: usize) -> IteratorFalsePositives {\n-    |                                ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n-\n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n    --> $DIR/methods.rs:234:13\n     |\n@@ -343,12 +257,6 @@ error: called `is_some()` after searching an `Iterator` with rposition. This is\n 276 | |                    ).is_some();\n     | |______________________________^\n \n-error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:290:21\n-    |\n-290 |         fn new() -> Foo { Foo }\n-    |                     ^^^ help: use the applicable keyword: `Self`\n-\n error: use of `unwrap_or` followed by a function call\n    --> $DIR/methods.rs:308:22\n     |\n@@ -527,5 +435,5 @@ error: used unwrap() on an Option value. If you don't want to handle the None ca\n     |\n     = note: `-D option-unwrap-used` implied by `-D warnings`\n \n-error: aborting due to 70 previous errors\n+error: aborting due to 55 previous errors\n "}, {"sha": "e3133b0a7a1f078233349b0471753bd6d59f2643", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/b90fc5edfa4b8f1954f29a47f1e124d1ed29c767/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90fc5edfa4b8f1954f29a47f1e124d1ed29c767/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=b90fc5edfa4b8f1954f29a47f1e124d1ed29c767", "patch": "@@ -3,6 +3,7 @@\n #![warn(use_self)]\n #![allow(dead_code)]\n #![allow(should_implement_trait)]\n+#![allow(boxed_local)]\n \n \n fn main() {}\n@@ -66,3 +67,116 @@ mod lifetimes {\n         }\n     }\n }\n+\n+mod traits {\n+\n+    #![cfg_attr(feature = \"cargo-clippy\", allow(boxed_local))]\n+\n+    trait SelfTrait {\n+        fn refs(p1: &Self) -> &Self;\n+        fn ref_refs<'a>(p1: &'a &'a Self) -> &'a &'a Self;\n+        fn mut_refs(p1: &mut Self) -> &mut Self;\n+        fn nested(p1: Box<Self>, p2: (&u8, &Self));\n+        fn vals(r: Self) -> Self;\n+    }\n+\n+    #[derive(Default)]\n+    struct Bad;\n+\n+    impl SelfTrait for Bad {\n+        fn refs(p1: &Bad) -> &Bad {\n+            p1\n+        }\n+\n+        fn ref_refs<'a>(p1: &'a &'a Bad) -> &'a &'a Bad {\n+            p1\n+        }\n+\n+        fn mut_refs(p1: &mut Bad) -> &mut Bad {\n+            p1\n+        }\n+\n+        fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {\n+        }\n+\n+        fn vals(_: Bad) -> Bad {\n+            Bad::default()\n+        }\n+    }\n+\n+    #[derive(Default)]\n+    struct Good;\n+\n+    impl SelfTrait for Good {\n+        fn refs(p1: &Self) -> &Self {\n+            p1\n+        }\n+\n+        fn ref_refs<'a>(p1: &'a &'a Self) -> &'a &'a Self {\n+            p1\n+        }\n+\n+        fn mut_refs(p1: &mut Self) -> &mut Self {\n+            p1\n+        }\n+\n+        fn nested(_p1: Box<Self>, _p2: (&u8, &Self)) {\n+        }\n+\n+        fn vals(_: Self) -> Self {\n+            Self::default()\n+        }\n+    }\n+\n+    trait NameTrait {\n+        fn refs(p1: &u8) -> &u8;\n+        fn ref_refs<'a>(p1: &'a &'a u8) -> &'a &'a u8;\n+        fn mut_refs(p1: &mut u8) -> &mut u8;\n+        fn nested(p1: Box<u8>, p2: (&u8, &u8));\n+        fn vals(p1: u8) -> u8;\n+    }\n+\n+    // Using `Self` instead of the type name is OK\n+    impl NameTrait for u8 {\n+        fn refs(p1: &Self) -> &Self {\n+            p1\n+        }\n+\n+        fn ref_refs<'a>(p1: &'a &'a Self) -> &'a &'a Self {\n+            p1\n+        }\n+\n+        fn mut_refs(p1: &mut Self) -> &mut Self {\n+            p1\n+        }\n+\n+        fn nested(_p1: Box<Self>, _p2: (&Self, &Self)) {\n+        }\n+\n+        fn vals(_: Self) -> Self {\n+            Self::default()\n+        }\n+    }\n+\n+    // Check that self arg isn't linted\n+    impl Clone for Good {\n+        fn clone(&self) -> Self {\n+            // Note: Not linted and it wouldn't be valid\n+            // because \"can't use `Self` as a constructor`\n+            Good\n+        }\n+    }\n+}\n+\n+mod issue2894 {\n+    trait IntoBytes {\n+        fn into_bytes(&self) -> Vec<u8>;\n+    }\n+\n+    // This should not be linted\n+    impl IntoBytes for u8 {\n+        fn into_bytes(&self) -> Vec<u8> {\n+            vec![*self]\n+        }\n+    }\n+}"}, {"sha": "ede95126f860d7a4e15b4cf6d28da4f697ab2746", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 79, "deletions": 13, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/b90fc5edfa4b8f1954f29a47f1e124d1ed29c767/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b90fc5edfa4b8f1954f29a47f1e124d1ed29c767/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=b90fc5edfa4b8f1954f29a47f1e124d1ed29c767", "patch": "@@ -1,40 +1,106 @@\n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:14:21\n+  --> $DIR/use_self.rs:15:21\n    |\n-14 |         fn new() -> Foo {\n+15 |         fn new() -> Foo {\n    |                     ^^^ help: use the applicable keyword: `Self`\n    |\n    = note: `-D use-self` implied by `-D warnings`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:15:13\n+  --> $DIR/use_self.rs:16:13\n    |\n-15 |             Foo {}\n+16 |             Foo {}\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:17:22\n+  --> $DIR/use_self.rs:18:22\n    |\n-17 |         fn test() -> Foo {\n+18 |         fn test() -> Foo {\n    |                      ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:18:13\n+  --> $DIR/use_self.rs:19:13\n    |\n-18 |             Foo::new()\n+19 |             Foo::new()\n    |             ^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:23:25\n+  --> $DIR/use_self.rs:24:25\n    |\n-23 |         fn default() -> Foo {\n+24 |         fn default() -> Foo {\n    |                         ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:24:13\n+  --> $DIR/use_self.rs:25:13\n    |\n-24 |             Foo::new()\n+25 |             Foo::new()\n    |             ^^^^^^^^ help: use the applicable keyword: `Self`\n \n-error: aborting due to 6 previous errors\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:87:22\n+   |\n+87 |         fn refs(p1: &Bad) -> &Bad {\n+   |                      ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:87:31\n+   |\n+87 |         fn refs(p1: &Bad) -> &Bad {\n+   |                               ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:91:37\n+   |\n+91 |         fn ref_refs<'a>(p1: &'a &'a Bad) -> &'a &'a Bad {\n+   |                                     ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:91:53\n+   |\n+91 |         fn ref_refs<'a>(p1: &'a &'a Bad) -> &'a &'a Bad {\n+   |                                                     ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:95:30\n+   |\n+95 |         fn mut_refs(p1: &mut Bad) -> &mut Bad {\n+   |                              ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:95:43\n+   |\n+95 |         fn mut_refs(p1: &mut Bad) -> &mut Bad {\n+   |                                           ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:99:28\n+   |\n+99 |         fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {\n+   |                            ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:99:46\n+   |\n+99 |         fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {\n+   |                                              ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+   --> $DIR/use_self.rs:102:20\n+    |\n+102 |         fn vals(_: Bad) -> Bad {\n+    |                    ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+   --> $DIR/use_self.rs:102:28\n+    |\n+102 |         fn vals(_: Bad) -> Bad {\n+    |                            ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+   --> $DIR/use_self.rs:103:13\n+    |\n+103 |             Bad::default()\n+    |             ^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: aborting due to 17 previous errors\n "}]}