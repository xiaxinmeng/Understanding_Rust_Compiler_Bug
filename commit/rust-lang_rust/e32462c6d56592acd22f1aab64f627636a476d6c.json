{"sha": "e32462c6d56592acd22f1aab64f627636a476d6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMjQ2MmM2ZDU2NTkyYWNkMjJmMWFhYjY0ZjYyNzYzNmE0NzZkNmM=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-03-19T13:14:16Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-03-20T09:55:38Z"}, "message": "Improve filtering of file roots\n\n`ProjectWorkspace::to_roots` now returns a new `ProjectRoot` which contains\ninformation regarding whether or not the given path is part of the current\nworkspace or an external dependency. This information can then be used in\n`ra_batch` and `ra_lsp_server` to implement more advanced filtering. This allows\nus to filter some unnecessary folders from external dependencies such as tests,\nexamples and benches.", "tree": {"sha": "0116bdcb77b3c208080c7cfef60a32ea1132f0ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0116bdcb77b3c208080c7cfef60a32ea1132f0ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e32462c6d56592acd22f1aab64f627636a476d6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e32462c6d56592acd22f1aab64f627636a476d6c", "html_url": "https://github.com/rust-lang/rust/commit/e32462c6d56592acd22f1aab64f627636a476d6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e32462c6d56592acd22f1aab64f627636a476d6c/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91576afc7e64f11dde2bed14b578e4914d253a6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/91576afc7e64f11dde2bed14b578e4914d253a6a", "html_url": "https://github.com/rust-lang/rust/commit/91576afc7e64f11dde2bed14b578e4914d253a6a"}], "stats": {"total": 226, "additions": 164, "deletions": 62}, "files": [{"sha": "deb9f95d75f1e5efdc6284abde43b0d65a53cf36", "filename": "crates/ra_batch/src/lib.rs", "status": "modified", "additions": 7, "deletions": 29, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e32462c6d56592acd22f1aab64f627636a476d6c/crates%2Fra_batch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32462c6d56592acd22f1aab64f627636a476d6c/crates%2Fra_batch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_batch%2Fsrc%2Flib.rs?ref=e32462c6d56592acd22f1aab64f627636a476d6c", "patch": "@@ -1,5 +1,7 @@\n+mod vfs_filter;\n+\n use std::sync::Arc;\n-use std::path::{Path, PathBuf};\n+use std::path::Path;\n use std::collections::HashSet;\n \n use rustc_hash::FxHashMap;\n@@ -9,7 +11,8 @@ use ra_db::{\n };\n use ra_hir::{db, HirInterner};\n use ra_project_model::ProjectWorkspace;\n-use ra_vfs::{Vfs, VfsChange, RootEntry, Filter, RelativePath};\n+use ra_vfs::{Vfs, VfsChange};\n+use vfs_filter::IncludeRustFiles;\n \n type Result<T> = std::result::Result<T, failure::Error>;\n \n@@ -43,30 +46,6 @@ fn vfs_root_to_id(r: ra_vfs::VfsRoot) -> SourceRootId {\n     SourceRootId(r.0.into())\n }\n \n-struct IncludeRustFiles;\n-\n-impl IncludeRustFiles {\n-    fn to_entry(path: PathBuf) -> RootEntry {\n-        RootEntry::new(path, Box::new(Self {}))\n-    }\n-}\n-\n-impl Filter for IncludeRustFiles {\n-    fn include_dir(&self, dir_path: &RelativePath) -> bool {\n-        const IGNORED_FOLDERS: &[&str] = &[\"node_modules\", \"target\", \".git\"];\n-\n-        let is_ignored = dir_path.components().any(|c| IGNORED_FOLDERS.contains(&c.as_str()));\n-\n-        let hidden = dir_path.components().any(|c| c.as_str().starts_with(\".\"));\n-\n-        !is_ignored && !hidden\n-    }\n-\n-    fn include_file(&self, file_path: &RelativePath) -> bool {\n-        file_path.extension() == Some(\"rs\")\n-    }\n-}\n-\n impl BatchDatabase {\n     pub fn load(crate_graph: CrateGraph, vfs: &mut Vfs) -> BatchDatabase {\n         let mut db =\n@@ -122,9 +101,8 @@ impl BatchDatabase {\n         let root = std::env::current_dir()?.join(root);\n         let ws = ProjectWorkspace::discover(root.as_ref())?;\n         let mut roots = Vec::new();\n-        roots.push(root.clone());\n-        roots.extend(ws.to_roots());\n-        let roots = roots.into_iter().map(IncludeRustFiles::to_entry).collect::<Vec<_>>();\n+        roots.push(IncludeRustFiles::member(root.clone()));\n+        roots.extend(IncludeRustFiles::from_roots(ws.to_roots()));\n         let (mut vfs, roots) = Vfs::new(roots);\n         let mut load = |path: &Path| {\n             let vfs_file = vfs.load(path);"}, {"sha": "290aec1728e60831e2e7bf9fb41b337597291385", "filename": "crates/ra_batch/src/vfs_filter.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/e32462c6d56592acd22f1aab64f627636a476d6c/crates%2Fra_batch%2Fsrc%2Fvfs_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32462c6d56592acd22f1aab64f627636a476d6c/crates%2Fra_batch%2Fsrc%2Fvfs_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_batch%2Fsrc%2Fvfs_filter.rs?ref=e32462c6d56592acd22f1aab64f627636a476d6c", "patch": "@@ -0,0 +1,59 @@\n+use std::path::PathBuf;\r\n+use ra_project_model::ProjectRoot;\r\n+use ra_vfs::{RootEntry, Filter, RelativePath};\r\n+\r\n+pub struct IncludeRustFiles {\r\n+    /// Is a member of the current workspace\r\n+    is_member: bool,\r\n+}\r\n+\r\n+impl IncludeRustFiles {\r\n+    pub fn from_roots<R>(roots: R) -> impl Iterator<Item = RootEntry>\r\n+    where\r\n+        R: IntoIterator<Item = ProjectRoot>,\r\n+    {\r\n+        roots.into_iter().map(IncludeRustFiles::from_root)\r\n+    }\r\n+\r\n+    pub fn from_root(root: ProjectRoot) -> RootEntry {\r\n+        let is_member = root.is_member();\r\n+        IncludeRustFiles::into_entry(root.into_path(), is_member)\r\n+    }\r\n+\r\n+    #[allow(unused)]\r\n+    pub fn external(path: PathBuf) -> RootEntry {\r\n+        IncludeRustFiles::into_entry(path, false)\r\n+    }\r\n+\r\n+    pub fn member(path: PathBuf) -> RootEntry {\r\n+        IncludeRustFiles::into_entry(path, true)\r\n+    }\r\n+\r\n+    fn into_entry(path: PathBuf, is_member: bool) -> RootEntry {\r\n+        RootEntry::new(path, Box::new(Self { is_member }))\r\n+    }\r\n+}\r\n+\r\n+impl Filter for IncludeRustFiles {\r\n+    fn include_dir(&self, dir_path: &RelativePath) -> bool {\r\n+        const COMMON_IGNORED_DIRS: &[&str] = &[\"node_modules\", \"target\", \".git\"];\r\n+        const EXTERNAL_IGNORED_DIRS: &[&str] = &[\"examples\", \"tests\", \"benches\"];\r\n+\r\n+        let is_ignored = if self.is_member {\r\n+            dir_path.components().any(|c| COMMON_IGNORED_DIRS.contains(&c.as_str()))\r\n+        } else {\r\n+            dir_path.components().any(|c| {\r\n+                let path = c.as_str();\r\n+                COMMON_IGNORED_DIRS.contains(&path) || EXTERNAL_IGNORED_DIRS.contains(&path)\r\n+            })\r\n+        };\r\n+\r\n+        let hidden = dir_path.components().any(|c| c.as_str().starts_with(\".\"));\r\n+\r\n+        !is_ignored && !hidden\r\n+    }\r\n+\r\n+    fn include_file(&self, file_path: &RelativePath) -> bool {\r\n+        file_path.extension() == Some(\"rs\")\r\n+    }\r\n+}\r"}, {"sha": "113883bdde13af546a897832eaae4f4627c91b25", "filename": "crates/ra_lsp_server/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e32462c6d56592acd22f1aab64f627636a476d6c/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32462c6d56592acd22f1aab64f627636a476d6c/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Flib.rs?ref=e32462c6d56592acd22f1aab64f627636a476d6c", "patch": "@@ -4,6 +4,7 @@ mod conv;\n mod main_loop;\n mod markdown;\n mod project_model;\n+mod vfs_filter;\n pub mod req;\n pub mod init;\n mod server_world;"}, {"sha": "af4798494bc320b37af5a92bb6c94d120501a844", "filename": "crates/ra_lsp_server/src/server_world.rs", "status": "modified", "additions": 5, "deletions": 29, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e32462c6d56592acd22f1aab64f627636a476d6c/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32462c6d56592acd22f1aab64f627636a476d6c/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs?ref=e32462c6d56592acd22f1aab64f627636a476d6c", "patch": "@@ -8,13 +8,14 @@ use ra_ide_api::{\n     Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, LibraryData,\n     SourceRootId\n };\n-use ra_vfs::{Vfs, VfsChange, VfsFile, VfsRoot, RootEntry, Filter};\n-use relative_path::{RelativePath, RelativePathBuf};\n+use ra_vfs::{Vfs, VfsChange, VfsFile, VfsRoot};\n+use relative_path::RelativePathBuf;\n use parking_lot::RwLock;\n use failure::format_err;\n \n use crate::{\n     project_model::ProjectWorkspace,\n+    vfs_filter::IncludeRustFiles,\n     Result,\n };\n \n@@ -33,40 +34,15 @@ pub struct ServerWorld {\n     pub vfs: Arc<RwLock<Vfs>>,\n }\n \n-struct IncludeRustFiles;\n-\n-impl IncludeRustFiles {\n-    fn to_entry(path: PathBuf) -> RootEntry {\n-        RootEntry::new(path, Box::new(Self {}))\n-    }\n-}\n-\n-impl Filter for IncludeRustFiles {\n-    fn include_dir(&self, dir_path: &RelativePath) -> bool {\n-        const IGNORED_FOLDERS: &[&str] = &[\"node_modules\", \"target\", \".git\"];\n-\n-        let is_ignored = dir_path.components().any(|c| IGNORED_FOLDERS.contains(&c.as_str()));\n-\n-        let hidden = dir_path.components().any(|c| c.as_str().starts_with(\".\"));\n-\n-        !is_ignored && !hidden\n-    }\n-\n-    fn include_file(&self, file_path: &RelativePath) -> bool {\n-        file_path.extension() == Some(\"rs\")\n-    }\n-}\n-\n impl ServerWorldState {\n     pub fn new(root: PathBuf, workspaces: Vec<ProjectWorkspace>) -> ServerWorldState {\n         let mut change = AnalysisChange::new();\n \n         let mut roots = Vec::new();\n-        roots.push(root.clone());\n+        roots.push(IncludeRustFiles::member(root.clone()));\n         for ws in workspaces.iter() {\n-            roots.extend(ws.to_roots());\n+            roots.extend(IncludeRustFiles::from_roots(ws.to_roots()));\n         }\n-        let roots = roots.into_iter().map(IncludeRustFiles::to_entry).collect::<Vec<_>>();\n \n         let (mut vfs, roots) = Vfs::new(roots);\n         let roots_to_scan = roots.len();"}, {"sha": "290aec1728e60831e2e7bf9fb41b337597291385", "filename": "crates/ra_lsp_server/src/vfs_filter.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/e32462c6d56592acd22f1aab64f627636a476d6c/crates%2Fra_lsp_server%2Fsrc%2Fvfs_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32462c6d56592acd22f1aab64f627636a476d6c/crates%2Fra_lsp_server%2Fsrc%2Fvfs_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fvfs_filter.rs?ref=e32462c6d56592acd22f1aab64f627636a476d6c", "patch": "@@ -0,0 +1,59 @@\n+use std::path::PathBuf;\r\n+use ra_project_model::ProjectRoot;\r\n+use ra_vfs::{RootEntry, Filter, RelativePath};\r\n+\r\n+pub struct IncludeRustFiles {\r\n+    /// Is a member of the current workspace\r\n+    is_member: bool,\r\n+}\r\n+\r\n+impl IncludeRustFiles {\r\n+    pub fn from_roots<R>(roots: R) -> impl Iterator<Item = RootEntry>\r\n+    where\r\n+        R: IntoIterator<Item = ProjectRoot>,\r\n+    {\r\n+        roots.into_iter().map(IncludeRustFiles::from_root)\r\n+    }\r\n+\r\n+    pub fn from_root(root: ProjectRoot) -> RootEntry {\r\n+        let is_member = root.is_member();\r\n+        IncludeRustFiles::into_entry(root.into_path(), is_member)\r\n+    }\r\n+\r\n+    #[allow(unused)]\r\n+    pub fn external(path: PathBuf) -> RootEntry {\r\n+        IncludeRustFiles::into_entry(path, false)\r\n+    }\r\n+\r\n+    pub fn member(path: PathBuf) -> RootEntry {\r\n+        IncludeRustFiles::into_entry(path, true)\r\n+    }\r\n+\r\n+    fn into_entry(path: PathBuf, is_member: bool) -> RootEntry {\r\n+        RootEntry::new(path, Box::new(Self { is_member }))\r\n+    }\r\n+}\r\n+\r\n+impl Filter for IncludeRustFiles {\r\n+    fn include_dir(&self, dir_path: &RelativePath) -> bool {\r\n+        const COMMON_IGNORED_DIRS: &[&str] = &[\"node_modules\", \"target\", \".git\"];\r\n+        const EXTERNAL_IGNORED_DIRS: &[&str] = &[\"examples\", \"tests\", \"benches\"];\r\n+\r\n+        let is_ignored = if self.is_member {\r\n+            dir_path.components().any(|c| COMMON_IGNORED_DIRS.contains(&c.as_str()))\r\n+        } else {\r\n+            dir_path.components().any(|c| {\r\n+                let path = c.as_str();\r\n+                COMMON_IGNORED_DIRS.contains(&path) || EXTERNAL_IGNORED_DIRS.contains(&path)\r\n+            })\r\n+        };\r\n+\r\n+        let hidden = dir_path.components().any(|c| c.as_str().starts_with(\".\"));\r\n+\r\n+        !is_ignored && !hidden\r\n+    }\r\n+\r\n+    fn include_file(&self, file_path: &RelativePath) -> bool {\r\n+        file_path.extension() == Some(\"rs\")\r\n+    }\r\n+}\r"}, {"sha": "b27cb55effd09b689a87c431f0c9fd4fa72357c8", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e32462c6d56592acd22f1aab64f627636a476d6c/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32462c6d56592acd22f1aab64f627636a476d6c/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=e32462c6d56592acd22f1aab64f627636a476d6c", "patch": "@@ -32,6 +32,30 @@ pub enum ProjectWorkspace {\n     Json { project: JsonProject },\n }\n \n+/// `ProjectRoot` describes a workspace root folder.\n+/// Which may be an external dependency, or a member of\n+/// the current workspace.\n+pub struct ProjectRoot {\n+    /// Path to the root folder\n+    path: PathBuf,\n+    /// Is a member of the current workspace\n+    is_member: bool,\n+}\n+\n+impl ProjectRoot {\n+    fn new(path: PathBuf, is_member: bool) -> ProjectRoot {\n+        ProjectRoot { path, is_member }\n+    }\n+\n+    pub fn into_path(self) -> PathBuf {\n+        self.path\n+    }\n+\n+    pub fn is_member(&self) -> bool {\n+        self.is_member\n+    }\n+}\n+\n impl ProjectWorkspace {\n     pub fn discover(path: &Path) -> Result<ProjectWorkspace> {\n         match find_rust_project_json(path) {\n@@ -50,23 +74,28 @@ impl ProjectWorkspace {\n         }\n     }\n \n-    pub fn to_roots(&self) -> Vec<PathBuf> {\n+    /// Returns the roots for the current ProjectWorkspace\n+    /// The return type contains the path and whether or not\n+    /// the root is a member of the current workspace\n+    pub fn to_roots(&self) -> Vec<ProjectRoot> {\n         match self {\n             ProjectWorkspace::Json { project } => {\n                 let mut roots = Vec::with_capacity(project.roots.len());\n                 for root in &project.roots {\n-                    roots.push(root.path.clone());\n+                    roots.push(ProjectRoot::new(root.path.clone(), true));\n                 }\n                 roots\n             }\n             ProjectWorkspace::Cargo { cargo, sysroot } => {\n                 let mut roots =\n                     Vec::with_capacity(cargo.packages().count() + sysroot.crates().count());\n                 for pkg in cargo.packages() {\n-                    roots.push(pkg.root(&cargo).to_path_buf());\n+                    let root = pkg.root(&cargo).to_path_buf();\n+                    let member = pkg.is_member(&cargo);\n+                    roots.push(ProjectRoot::new(root, member));\n                 }\n                 for krate in sysroot.crates() {\n-                    roots.push(krate.root_dir(&sysroot).to_path_buf())\n+                    roots.push(ProjectRoot::new(krate.root_dir(&sysroot).to_path_buf(), false))\n                 }\n                 roots\n             }"}]}