{"sha": "6240d4518930bdf20b44109e55d047eec3221c9a", "node_id": "C_kwDOAAsO6NoAKDYyNDBkNDUxODkzMGJkZjIwYjQ0MTA5ZTU1ZDA0N2VlYzMyMjFjOWE", "commit": {"author": {"name": "dekrain", "email": "dawidkrainski8@gmail.com", "date": "2023-03-13T17:28:59Z"}, "committer": {"name": "dekrain", "email": "dawidkrainski8@gmail.com", "date": "2023-05-27T16:00:43Z"}, "message": "Fix ICE caused by at-expanding argument 0 instead of removing it early", "tree": {"sha": "fda03b403613f73d05545a85960f788465916f7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fda03b403613f73d05545a85960f788465916f7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6240d4518930bdf20b44109e55d047eec3221c9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6240d4518930bdf20b44109e55d047eec3221c9a", "html_url": "https://github.com/rust-lang/rust/commit/6240d4518930bdf20b44109e55d047eec3221c9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6240d4518930bdf20b44109e55d047eec3221c9a/comments", "author": {"login": "dekrain", "id": 19158291, "node_id": "MDQ6VXNlcjE5MTU4Mjkx", "avatar_url": "https://avatars.githubusercontent.com/u/19158291?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dekrain", "html_url": "https://github.com/dekrain", "followers_url": "https://api.github.com/users/dekrain/followers", "following_url": "https://api.github.com/users/dekrain/following{/other_user}", "gists_url": "https://api.github.com/users/dekrain/gists{/gist_id}", "starred_url": "https://api.github.com/users/dekrain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dekrain/subscriptions", "organizations_url": "https://api.github.com/users/dekrain/orgs", "repos_url": "https://api.github.com/users/dekrain/repos", "events_url": "https://api.github.com/users/dekrain/events{/privacy}", "received_events_url": "https://api.github.com/users/dekrain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dekrain", "id": 19158291, "node_id": "MDQ6VXNlcjE5MTU4Mjkx", "avatar_url": "https://avatars.githubusercontent.com/u/19158291?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dekrain", "html_url": "https://github.com/dekrain", "followers_url": "https://api.github.com/users/dekrain/followers", "following_url": "https://api.github.com/users/dekrain/following{/other_user}", "gists_url": "https://api.github.com/users/dekrain/gists{/gist_id}", "starred_url": "https://api.github.com/users/dekrain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dekrain/subscriptions", "organizations_url": "https://api.github.com/users/dekrain/orgs", "repos_url": "https://api.github.com/users/dekrain/repos", "events_url": "https://api.github.com/users/dekrain/events{/privacy}", "received_events_url": "https://api.github.com/users/dekrain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1b1ed7e18f1fbe5226a96626827c625985f8285", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1b1ed7e18f1fbe5226a96626827c625985f8285", "html_url": "https://github.com/rust-lang/rust/commit/f1b1ed7e18f1fbe5226a96626827c625985f8285"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "5ddacc388637b75556121001ffbdb8020e5a756f", "filename": "compiler/rustc_driver_impl/src/args.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6240d4518930bdf20b44109e55d047eec3221c9a/compiler%2Frustc_driver_impl%2Fsrc%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6240d4518930bdf20b44109e55d047eec3221c9a/compiler%2Frustc_driver_impl%2Fsrc%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Fargs.rs?ref=6240d4518930bdf20b44109e55d047eec3221c9a", "patch": "@@ -18,6 +18,9 @@ fn arg_expand(arg: String) -> Result<Vec<String>, Error> {\n     }\n }\n \n+/// **Note:** This function doesn't interpret argument 0 in any special way.\n+/// If this function is intended to be used with command line arguments,\n+/// `argv[0]` must be removed prior to calling it manually.\n pub fn arg_expand_all(at_args: &[String]) -> Vec<String> {\n     let mut args = Vec::new();\n     for arg in at_args {"}, {"sha": "88f3b24bc98649b5944816671fe4aa73869ddefc", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6240d4518930bdf20b44109e55d047eec3221c9a/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6240d4518930bdf20b44109e55d047eec3221c9a/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=6240d4518930bdf20b44109e55d047eec3221c9a", "patch": "@@ -237,6 +237,16 @@ fn run_compiler(\n         Box<dyn FnOnce(&config::Options) -> Box<dyn CodegenBackend> + Send>,\n     >,\n ) -> interface::Result<()> {\n+    // Throw away the first argument, the name of the binary.\n+    // In case of at_args being empty, as might be the case by\n+    // passing empty argument array to execve under some platforms,\n+    // just use an empty slice.\n+    //\n+    // This situation was possible before due to arg_expand_all being\n+    // called before removing the argument, enabling a crash by calling\n+    // the compiler with @empty_file as argv[0] and no more arguments.\n+    let at_args = at_args.get(1..).unwrap_or_default();\n+\n     let args = args::arg_expand_all(at_args);\n \n     let Some(matches) = handle_options(&args) else { return Ok(()) };\n@@ -993,9 +1003,6 @@ pub fn print_flag_list<T>(\n /// So with all that in mind, the comments below have some more detail about the\n /// contortions done here to get things to work out correctly.\n pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n-    // Throw away the first argument, the name of the binary\n-    let args = &args[1..];\n-\n     if args.is_empty() {\n         // user did not write `-v` nor `-Z unstable-options`, so do not\n         // include that extra information."}, {"sha": "22356229d057605765b2469cfe8845cec52b21dd", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6240d4518930bdf20b44109e55d047eec3221c9a/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6240d4518930bdf20b44109e55d047eec3221c9a/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=6240d4518930bdf20b44109e55d047eec3221c9a", "patch": "@@ -321,7 +321,6 @@ impl Options {\n         matches: &getopts::Matches,\n         args: Vec<String>,\n     ) -> Result<(Options, RenderOptions), i32> {\n-        let args = &args[1..];\n         // Check for unstable options.\n         nightly_options::check_nightly_options(matches, &opts());\n "}, {"sha": "da32d429dac17d5a3d21831292e21e06c2b149f3", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6240d4518930bdf20b44109e55d047eec3221c9a/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6240d4518930bdf20b44109e55d047eec3221c9a/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=6240d4518930bdf20b44109e55d047eec3221c9a", "patch": "@@ -703,13 +703,23 @@ fn run_renderer<'tcx, T: formats::FormatRenderer<'tcx>>(\n }\n \n fn main_args(at_args: &[String]) -> MainResult {\n+    // Throw away the first argument, the name of the binary.\n+    // In case of at_args being empty, as might be the case by\n+    // passing empty argument array to execve under some platforms,\n+    // just use an empty slice.\n+    //\n+    // This situation was possible before due to arg_expand_all being\n+    // called before removing the argument, enabling a crash by calling\n+    // the compiler with @empty_file as argv[0] and no more arguments.\n+    let at_args = at_args.get(1..).unwrap_or_default();\n+\n     let args = rustc_driver::args::arg_expand_all(at_args);\n \n     let mut options = getopts::Options::new();\n     for option in opts() {\n         (option.apply)(&mut options);\n     }\n-    let matches = match options.parse(&args[1..]) {\n+    let matches = match options.parse(&args) {\n         Ok(m) => m,\n         Err(err) => {\n             early_error(ErrorOutputType::default(), &err.to_string());"}]}