{"sha": "34be05e0970b1c50e1174c431d6a0303d72df4d2", "node_id": "C_kwDOAAsO6NoAKDM0YmUwNWUwOTcwYjFjNTBlMTE3NGM0MzFkNmEwMzAzZDcyZGY0ZDI", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-03-13T18:32:25Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-03-13T19:05:06Z"}, "message": "Gracefully handle `#[target_feature]` on statics\n\nThe was careful around not calling `fn_sig` on not-functions but well,\nit wasn't careful enough. This commit makes it a little more careful and\nalso adds tests for a bunch more item kinds.", "tree": {"sha": "01e4f71b138a489f1aacb2bbb0e7538f1c31bffd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01e4f71b138a489f1aacb2bbb0e7538f1c31bffd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34be05e0970b1c50e1174c431d6a0303d72df4d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34be05e0970b1c50e1174c431d6a0303d72df4d2", "html_url": "https://github.com/rust-lang/rust/commit/34be05e0970b1c50e1174c431d6a0303d72df4d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34be05e0970b1c50e1174c431d6a0303d72df4d2/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5833423a02e2373c5e3cceb238fb19192cd82f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5833423a02e2373c5e3cceb238fb19192cd82f8", "html_url": "https://github.com/rust-lang/rust/commit/d5833423a02e2373c5e3cceb238fb19192cd82f8"}], "stats": {"total": 175, "additions": 139, "deletions": 36}, "files": [{"sha": "b75ced4a6dd3229133fc25f31e747b9a03b180dc", "filename": "compiler/rustc_codegen_ssa/src/codegen_attrs.rs", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/34be05e0970b1c50e1174c431d6a0303d72df4d2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34be05e0970b1c50e1174c431d6a0303d72df4d2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs?ref=34be05e0970b1c50e1174c431d6a0303d72df4d2", "patch": "@@ -61,25 +61,29 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n \n     let supported_target_features = tcx.supported_target_features(LOCAL_CRATE);\n \n-    // In some cases, attribute are only valid on functions, but it's the `check_attr`\n-    // pass that check that they aren't used anywhere else, rather this module.\n-    // In these cases, we bail from performing further checks that are only meaningful for\n-    // functions (such as calling `fn_sig`, which ICEs if given a non-function). We also\n-    // report a delayed bug, just in case `check_attr` isn't doing its job.\n-    let validate_fn_only_attr = |attr_sp| -> bool {\n-        let def_kind = tcx.def_kind(did);\n-        if let DefKind::Fn | DefKind::AssocFn | DefKind::Variant | DefKind::Ctor(..) = def_kind {\n-            true\n-        } else {\n-            tcx.sess.delay_span_bug(attr_sp, \"this attribute can only be applied to functions\");\n-            false\n-        }\n-    };\n-\n     let mut inline_span = None;\n     let mut link_ordinal_span = None;\n     let mut no_sanitize_span = None;\n+\n     for attr in attrs.iter() {\n+        // In some cases, attribute are only valid on functions, but it's the `check_attr`\n+        // pass that check that they aren't used anywhere else, rather this module.\n+        // In these cases, we bail from performing further checks that are only meaningful for\n+        // functions (such as calling `fn_sig`, which ICEs if given a non-function). We also\n+        // report a delayed bug, just in case `check_attr` isn't doing its job.\n+        let fn_sig = || {\n+            use DefKind::*;\n+\n+            let def_kind = tcx.def_kind(did);\n+            if let Fn | AssocFn | Variant | Ctor(..) = def_kind {\n+                Some(tcx.fn_sig(did))\n+            } else {\n+                tcx.sess\n+                    .delay_span_bug(attr.span, \"this attribute can only be applied to functions\");\n+                None\n+            }\n+        };\n+\n         if attr.has_name(sym::cold) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::COLD;\n         } else if attr.has_name(sym::rustc_allocator) {\n@@ -169,8 +173,8 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n                 }\n             }\n         } else if attr.has_name(sym::cmse_nonsecure_entry) {\n-            if validate_fn_only_attr(attr.span)\n-                && !matches!(tcx.fn_sig(did).skip_binder().abi(), abi::Abi::C { .. })\n+            if let Some(fn_sig) = fn_sig()\n+                && !matches!(fn_sig.skip_binder().abi(), abi::Abi::C { .. })\n             {\n                 struct_span_err!(\n                     tcx.sess,\n@@ -189,8 +193,8 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::THREAD_LOCAL;\n         } else if attr.has_name(sym::track_caller) {\n             if !tcx.is_closure(did.to_def_id())\n-                && validate_fn_only_attr(attr.span)\n-                && tcx.fn_sig(did).skip_binder().abi() != abi::Abi::Rust\n+                && let Some(fn_sig) = fn_sig()\n+                && fn_sig.skip_binder().abi() != abi::Abi::Rust\n             {\n                 struct_span_err!(tcx.sess, attr.span, E0737, \"`#[track_caller]` requires Rust ABI\")\n                     .emit();\n@@ -222,7 +226,8 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n             }\n         } else if attr.has_name(sym::target_feature) {\n             if !tcx.is_closure(did.to_def_id())\n-                && tcx.fn_sig(did).skip_binder().unsafety() == hir::Unsafety::Normal\n+                && let Some(fn_sig) = fn_sig()\n+                && fn_sig.skip_binder().unsafety() == hir::Unsafety::Normal\n             {\n                 if tcx.sess.target.is_like_wasm || tcx.sess.opts.actually_rustdoc {\n                     // The `#[target_feature]` attribute is allowed on"}, {"sha": "0c400d7bf97244745e45084dc4f69aa3bce97cba", "filename": "tests/ui/target-feature/invalid-attribute.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/34be05e0970b1c50e1174c431d6a0303d72df4d2/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34be05e0970b1c50e1174c431d6a0303d72df4d2/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.rs?ref=34be05e0970b1c50e1174c431d6a0303d72df4d2", "patch": "@@ -14,6 +14,21 @@\n \n #![warn(unused_attributes)]\n \n+#[target_feature(enable = \"sse2\")]\n+//~^ ERROR attribute should be applied to a function\n+extern crate alloc;\n+//~^ NOTE not a function\n+\n+#[target_feature(enable = \"sse2\")]\n+//~^ ERROR attribute should be applied to a function\n+use alloc::alloc::alloc;\n+//~^ NOTE not a function\n+\n+#[target_feature(enable = \"sse2\")]\n+//~^ ERROR attribute should be applied to a function\n+extern \"Rust\" {}\n+//~^ NOTE not a function\n+\n #[target_feature = \"+sse2\"]\n //~^ ERROR malformed `target_feature` attribute\n #[target_feature(enable = \"foo\")]\n@@ -59,6 +74,11 @@ union Qux {\n     f2: u16,\n }\n \n+#[target_feature(enable = \"sse2\")]\n+//~^ ERROR attribute should be applied to a function\n+type Uwu = ();\n+//~^ NOTE not a function\n+\n #[target_feature(enable = \"sse2\")]\n //~^ ERROR attribute should be applied to a function\n trait Baz {}\n@@ -69,6 +89,21 @@ trait Baz {}\n #[target_feature(enable = \"sse2\")]\n unsafe fn test() {}\n \n+#[target_feature(enable = \"sse2\")]\n+//~^ ERROR attribute should be applied to a function\n+static A: () = ();\n+//~^ NOTE not a function\n+\n+#[target_feature(enable = \"sse2\")]\n+//~^ ERROR attribute should be applied to a function\n+impl Quux for u8 {}\n+//~^ NOTE not a function\n+\n+#[target_feature(enable = \"sse2\")]\n+//~^ ERROR attribute should be applied to a function\n+impl Foo {}\n+//~^ NOTE not a function\n+\n trait Quux {\n     fn foo();\n }"}, {"sha": "6d37d0917bc6135f0e1de413e3e9b300e0399684", "filename": "tests/ui/target-feature/invalid-attribute.stderr", "status": "modified", "additions": 79, "deletions": 16, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/34be05e0970b1c50e1174c431d6a0303d72df4d2/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34be05e0970b1c50e1174c431d6a0303d72df4d2/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr?ref=34be05e0970b1c50e1174c431d6a0303d72df4d2", "patch": "@@ -1,11 +1,38 @@\n error: malformed `target_feature` attribute input\n-  --> $DIR/invalid-attribute.rs:17:1\n+  --> $DIR/invalid-attribute.rs:32:1\n    |\n LL | #[target_feature = \"+sse2\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[target_feature(enable = \"name\")]`\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:34:1\n+  --> $DIR/invalid-attribute.rs:17:1\n+   |\n+LL | #[target_feature(enable = \"sse2\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | extern crate alloc;\n+   | ------------------- not a function definition\n+\n+error: attribute should be applied to a function definition\n+  --> $DIR/invalid-attribute.rs:22:1\n+   |\n+LL | #[target_feature(enable = \"sse2\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | use alloc::alloc::alloc;\n+   | ------------------------ not a function definition\n+\n+error: attribute should be applied to a function definition\n+  --> $DIR/invalid-attribute.rs:27:1\n+   |\n+LL | #[target_feature(enable = \"sse2\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | extern \"Rust\" {}\n+   | ---------------- not a function definition\n+\n+error: attribute should be applied to a function definition\n+  --> $DIR/invalid-attribute.rs:49:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -14,7 +41,7 @@ LL | mod another {}\n    | -------------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:39:1\n+  --> $DIR/invalid-attribute.rs:54:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -23,7 +50,7 @@ LL | const FOO: usize = 7;\n    | --------------------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:44:1\n+  --> $DIR/invalid-attribute.rs:59:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -32,7 +59,7 @@ LL | struct Foo;\n    | ----------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:49:1\n+  --> $DIR/invalid-attribute.rs:64:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -41,7 +68,7 @@ LL | enum Bar {}\n    | ----------- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:54:1\n+  --> $DIR/invalid-attribute.rs:69:1\n    |\n LL |   #[target_feature(enable = \"sse2\")]\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -54,7 +81,16 @@ LL | | }\n    | |_- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:62:1\n+  --> $DIR/invalid-attribute.rs:77:1\n+   |\n+LL | #[target_feature(enable = \"sse2\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | type Uwu = ();\n+   | -------------- not a function definition\n+\n+error: attribute should be applied to a function definition\n+  --> $DIR/invalid-attribute.rs:82:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -63,7 +99,34 @@ LL | trait Baz {}\n    | ------------ not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:85:5\n+  --> $DIR/invalid-attribute.rs:92:1\n+   |\n+LL | #[target_feature(enable = \"sse2\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | static A: () = ();\n+   | ------------------ not a function definition\n+\n+error: attribute should be applied to a function definition\n+  --> $DIR/invalid-attribute.rs:97:1\n+   |\n+LL | #[target_feature(enable = \"sse2\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | impl Quux for u8 {}\n+   | ------------------- not a function definition\n+\n+error: attribute should be applied to a function definition\n+  --> $DIR/invalid-attribute.rs:102:1\n+   |\n+LL | #[target_feature(enable = \"sse2\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | impl Foo {}\n+   | ----------- not a function definition\n+\n+error: attribute should be applied to a function definition\n+  --> $DIR/invalid-attribute.rs:120:5\n    |\n LL |       #[target_feature(enable = \"sse2\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -75,7 +138,7 @@ LL | |     }\n    | |_____- not a function definition\n \n error: attribute should be applied to a function definition\n-  --> $DIR/invalid-attribute.rs:93:5\n+  --> $DIR/invalid-attribute.rs:128:5\n    |\n LL |     #[target_feature(enable = \"sse2\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -84,25 +147,25 @@ LL |     || {};\n    |     ----- not a function definition\n \n error: the feature named `foo` is not valid for this target\n-  --> $DIR/invalid-attribute.rs:19:18\n+  --> $DIR/invalid-attribute.rs:34:18\n    |\n LL | #[target_feature(enable = \"foo\")]\n    |                  ^^^^^^^^^^^^^^ `foo` is not valid for this target\n \n error: malformed `target_feature` attribute input\n-  --> $DIR/invalid-attribute.rs:22:18\n+  --> $DIR/invalid-attribute.rs:37:18\n    |\n LL | #[target_feature(bar)]\n    |                  ^^^ help: must be of the form: `enable = \"..\"`\n \n error: malformed `target_feature` attribute input\n-  --> $DIR/invalid-attribute.rs:24:18\n+  --> $DIR/invalid-attribute.rs:39:18\n    |\n LL | #[target_feature(disable = \"baz\")]\n    |                  ^^^^^^^^^^^^^^^ help: must be of the form: `enable = \"..\"`\n \n error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n-  --> $DIR/invalid-attribute.rs:28:1\n+  --> $DIR/invalid-attribute.rs:43:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -114,13 +177,13 @@ LL | fn bar() {}\n    = help: add `#![feature(target_feature_11)]` to the crate attributes to enable\n \n error: cannot use `#[inline(always)]` with `#[target_feature]`\n-  --> $DIR/invalid-attribute.rs:67:1\n+  --> $DIR/invalid-attribute.rs:87:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n \n error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n-  --> $DIR/invalid-attribute.rs:77:5\n+  --> $DIR/invalid-attribute.rs:112:5\n    |\n LL |     #[target_feature(enable = \"sse2\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -131,6 +194,6 @@ LL |     fn foo() {}\n    = note: see issue #69098 <https://github.com/rust-lang/rust/issues/69098> for more information\n    = help: add `#![feature(target_feature_11)]` to the crate attributes to enable\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 22 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}]}