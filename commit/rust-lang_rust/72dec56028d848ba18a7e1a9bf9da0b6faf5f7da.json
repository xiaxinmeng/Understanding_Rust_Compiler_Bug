{"sha": "72dec56028d848ba18a7e1a9bf9da0b6faf5f7da", "node_id": "C_kwDOAAsO6NoAKDcyZGVjNTYwMjhkODQ4YmExOGE3ZTFhOWJmOWRhMGI2ZmFmNWY3ZGE", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-03-31T08:21:42Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-04-05T06:01:03Z"}, "message": "macros: optional error codes\n\nIn an effort to make it easier to port diagnostics to\n`SessionDiagnostic` (for translation) and since translation slugs could\nreplace error codes, make error codes optional in the\n`SessionDiagnostic` derive.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "2c0444cede3c4e9590cf114e1aa728e8814e2e60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c0444cede3c4e9590cf114e1aa728e8814e2e60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72dec56028d848ba18a7e1a9bf9da0b6faf5f7da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72dec56028d848ba18a7e1a9bf9da0b6faf5f7da", "html_url": "https://github.com/rust-lang/rust/commit/72dec56028d848ba18a7e1a9bf9da0b6faf5f7da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72dec56028d848ba18a7e1a9bf9da0b6faf5f7da/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70ee0c96fc29c57f64a6ccfeb66cccf6fac951f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/70ee0c96fc29c57f64a6ccfeb66cccf6fac951f7", "html_url": "https://github.com/rust-lang/rust/commit/70ee0c96fc29c57f64a6ccfeb66cccf6fac951f7"}], "stats": {"total": 55, "additions": 21, "deletions": 34}, "files": [{"sha": "79086931d5fee6d91af3447147b3a6be74ef1644", "filename": "compiler/rustc_macros/src/session_diagnostic.rs", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/72dec56028d848ba18a7e1a9bf9da0b6faf5f7da/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72dec56028d848ba18a7e1a9bf9da0b6faf5f7da/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs?ref=72dec56028d848ba18a7e1a9bf9da0b6faf5f7da", "patch": "@@ -229,38 +229,30 @@ impl<'a> SessionDiagnosticDerive<'a> {\n \n                 let span = ast.span().unwrap();\n                 let (diag, sess) = (&builder.diag, &builder.sess);\n-                let init = match (builder.kind, builder.slug, builder.code) {\n-                    (None, _, _) => {\n+                let init = match (builder.kind, builder.slug) {\n+                    (None, _) => {\n                         span_err(span, \"diagnostic kind not specified\")\n                             .help(\"use the `#[error(...)]` attribute to create an error\")\n                             .emit();\n                         return SessionDiagnosticDeriveError::ErrorHandled.to_compile_error();\n                     }\n-                    (Some((kind, _)), None, _) => {\n+                    (Some((kind, _)), None) => {\n                         span_err(span, \"`slug` not specified\")\n                             .help(&format!(\"use the `#[{}(slug = \\\"...\\\")]` attribute to set this diagnostic's slug\", kind.descr()))\n                             .emit();\n                         return SessionDiagnosticDeriveError::ErrorHandled.to_compile_error();\n                     }\n-                    (Some((kind, _)), _, None) => {\n-                        span_err(span, \"`code` not specified\")\n-                            .help(&format!(\"use the `#[{}(code = \\\"...\\\")]` attribute to set this diagnostic's error code\", kind.descr()))\n-                            .emit();\n-                        return SessionDiagnosticDeriveError::ErrorHandled.to_compile_error();\n-                    }\n-                    (Some((SessionDiagnosticKind::Error, _)), Some((slug, _)), Some((code, _))) => {\n+                    (Some((SessionDiagnosticKind::Error, _)), Some((slug, _))) => {\n                         quote! {\n-                            let mut #diag = #sess.struct_err_with_code(\n+                            let mut #diag = #sess.struct_err(\n                                 rustc_errors::DiagnosticMessage::fluent(#slug),\n-                                rustc_errors::DiagnosticId::Error(#code.to_string())\n                             );\n                         }\n                     }\n-                    (Some((SessionDiagnosticKind::Warn, _)), Some((slug, _)), Some((code, _))) => {\n+                    (Some((SessionDiagnosticKind::Warn, _)), Some((slug, _))) => {\n                         quote! {\n-                            let mut #diag = #sess.struct_warn_with_code(\n+                            let mut #diag = #sess.struct_warn(\n                                 rustc_errors::DiagnosticMessage::fluent(#slug),\n-                                rustc_errors::DiagnosticId::Error(#code.to_string())\n                             );\n                         }\n                     }\n@@ -363,9 +355,9 @@ struct SessionDiagnosticDeriveBuilder<'a> {\n     /// Slug is a mandatory part of the struct attribute as corresponds to the Fluent message that\n     /// has the actual diagnostic message.\n     slug: Option<(String, proc_macro::Span)>,\n-    /// Error codes are a mandatory part of the struct attribute. Slugs may replace error codes\n-    /// in future but it is desirable to mandate error codes until such a time.\n-    code: Option<(String, proc_macro::Span)>,\n+    /// Error codes are a optional part of the struct attribute - this is only set to detect\n+    /// multiple specifications.\n+    code: Option<proc_macro::Span>,\n }\n \n impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n@@ -403,6 +395,7 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n         };\n         self.set_kind_once(kind, span)?;\n \n+        let mut tokens = Vec::new();\n         for attr in nested {\n             let span = attr.span().unwrap();\n             let meta = match attr {\n@@ -427,7 +420,7 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n                             self.set_slug_once(s.value(), s.span().unwrap());\n                         }\n                         \"code\" => {\n-                            self.set_code_once(s.value(), s.span().unwrap());\n+                            tokens.push(self.set_code_once(s.value(), s.span().unwrap()));\n                         }\n                         other => {\n                             let diag = span_err(\n@@ -475,7 +468,7 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n             }\n         }\n \n-        Ok(quote! {})\n+        Ok(tokens.drain(..).collect())\n     }\n \n     #[must_use]\n@@ -504,17 +497,20 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n         }\n     }\n \n-    fn set_code_once(&mut self, code: String, span: proc_macro::Span) {\n+    fn set_code_once(&mut self, code: String, span: proc_macro::Span) -> proc_macro2::TokenStream {\n         match self.code {\n             None => {\n-                self.code = Some((code, span));\n+                self.code = Some(span);\n             }\n-            Some((_, prev_span)) => {\n+            Some(prev_span) => {\n                 span_err(span, \"`code` specified multiple times\")\n                     .span_note(prev_span, \"previously specified here\")\n                     .emit();\n             }\n         }\n+\n+        let diag = &self.diag;\n+        quote! { #diag.code(rustc_errors::DiagnosticId::Error(#code.to_string())); }\n     }\n \n     fn set_slug_once(&mut self, slug: String, span: proc_macro::Span) {"}, {"sha": "63912f0ad1326e8f0b3ce609235cb51817fa1357", "filename": "src/test/ui-fulldeps/session-derive-errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72dec56028d848ba18a7e1a9bf9da0b6faf5f7da/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72dec56028d848ba18a7e1a9bf9da0b6faf5f7da/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.rs?ref=72dec56028d848ba18a7e1a9bf9da0b6faf5f7da", "patch": "@@ -115,7 +115,7 @@ struct KindNotProvided {} //~ ERROR diagnostic kind not specified\n struct SlugNotProvided {}\n \n #[derive(SessionDiagnostic)]\n-#[error(slug = \"foo\")] //~ ERROR `code` not specified\n+#[error(slug = \"foo\")]\n struct CodeNotProvided {}\n \n #[derive(SessionDiagnostic)]"}, {"sha": "09b8050bf51b9bcbd75643d780d47db706fae048", "filename": "src/test/ui-fulldeps/session-derive-errors.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/72dec56028d848ba18a7e1a9bf9da0b6faf5f7da/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72dec56028d848ba18a7e1a9bf9da0b6faf5f7da/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr?ref=72dec56028d848ba18a7e1a9bf9da0b6faf5f7da", "patch": "@@ -147,15 +147,6 @@ LL | | struct SlugNotProvided {}\n    |\n    = help: use the `#[error(slug = \"...\")]` attribute to set this diagnostic's slug\n \n-error: `code` not specified\n-  --> $DIR/session-derive-errors.rs:118:1\n-   |\n-LL | / #[error(slug = \"foo\")]\n-LL | | struct CodeNotProvided {}\n-   | |_________________________^\n-   |\n-   = help: use the `#[error(code = \"...\")]` attribute to set this diagnostic's error code\n-\n error: the `#[primary_span]` attribute can only be applied to fields of type `Span`\n   --> $DIR/session-derive-errors.rs:124:5\n    |\n@@ -285,6 +276,6 @@ LL | #[derive(SessionDiagnostic)]\n    |\n    = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 35 previous errors\n+error: aborting due to 34 previous errors\n \n For more information about this error, try `rustc --explain E0599`."}]}