{"sha": "53e2cdf18e155ad61262fed5dcd3d73ef343c042", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzZTJjZGYxOGUxNTVhZDYxMjYyZmVkNWRjZDNkNzNlZjM0M2MwNDI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-31T11:21:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-31T11:21:23Z"}, "message": "Merge #7055\n\n7055: Install rustfmt if needed during formatting request r=matklad a=kinnison\n\nIn order to fix #6052 and to fix #4249 this PR installs `rustfmt` using `rustup` if `rustfmt --help` fails.\r\n\r\nIn theory we ought to memoise the attempts (both the `--help` and the installation) so that we don't keep retrying something which will fail (e.g. if nightly is missing rustfmt), but this is a first-pass for opinions.\r\n\r\nIn order to make it possible to notify the user of what happened, I added a facility for `GlobalStateSnapshot` to send *messages* to the client indicating what happened.  There may be a cleaner way to do this as well but I wasn't sure exactly what might be best given this is my first time in this codebase.\r\n\r\nIt may be worth, longer term, working with `rustup` to provide a way to detect a missing component binary since `rustup` returns `1` if `rustfmt` is not installed, which is not ideal.\r\n\n\nCo-authored-by: Daniel Silverstone <dsilvers@digital-scurf.org>", "tree": {"sha": "8414439a6141133dd2eb68ffd94f0ede306870f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8414439a6141133dd2eb68ffd94f0ede306870f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53e2cdf18e155ad61262fed5dcd3d73ef343c042", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf7bQzCRBK7hj4Ov3rIwAAdHIIACgKuYRrFQfLtIVs3gz9wu2E\no1L3e5OCvpuIdE86zpHy7c3QsiTZWvmulGixLQRGSM4jMr1JFbndMahSeyXyZGRy\nAdImWgtDLV30XoTxZLvBZ9y33gEB4ZR/PHeDVBfVraOiqbBcBhwRdsV7e0po+uRX\ntCR5pxl2vps9skw9EQpHm8SMnVY71Hwmvg2sdRp4ZHMsX2w1pw49ihBIIOC75NSJ\nU2Cq2Ps0vpWpTDXWjk+irbXixfq9m12c9mVa3LLaAyFAQ98x/vX93Yx35+AfMWQ7\nRndoCwOmbs2mmLsns2mss4u/aym6Ok5XyRpbAnE9KTBUmzATO1MjjkFS8vpDJ58=\n=mcsg\n-----END PGP SIGNATURE-----\n", "payload": "tree 8414439a6141133dd2eb68ffd94f0ede306870f3\nparent 558206f70e418730967fd690f5f219993de071bc\nparent 5ce420ac8487d991ead53f51ae2d45ef33d4f94e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1609413683 +0000\ncommitter GitHub <noreply@github.com> 1609413683 +0000\n\nMerge #7055\n\n7055: Install rustfmt if needed during formatting request r=matklad a=kinnison\n\nIn order to fix #6052 and to fix #4249 this PR installs `rustfmt` using `rustup` if `rustfmt --help` fails.\r\n\r\nIn theory we ought to memoise the attempts (both the `--help` and the installation) so that we don't keep retrying something which will fail (e.g. if nightly is missing rustfmt), but this is a first-pass for opinions.\r\n\r\nIn order to make it possible to notify the user of what happened, I added a facility for `GlobalStateSnapshot` to send *messages* to the client indicating what happened.  There may be a cleaner way to do this as well but I wasn't sure exactly what might be best given this is my first time in this codebase.\r\n\r\nIt may be worth, longer term, working with `rustup` to provide a way to detect a missing component binary since `rustup` returns `1` if `rustfmt` is not installed, which is not ideal.\r\n\n\nCo-authored-by: Daniel Silverstone <dsilvers@digital-scurf.org>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53e2cdf18e155ad61262fed5dcd3d73ef343c042", "html_url": "https://github.com/rust-lang/rust/commit/53e2cdf18e155ad61262fed5dcd3d73ef343c042", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53e2cdf18e155ad61262fed5dcd3d73ef343c042/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "558206f70e418730967fd690f5f219993de071bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/558206f70e418730967fd690f5f219993de071bc", "html_url": "https://github.com/rust-lang/rust/commit/558206f70e418730967fd690f5f219993de071bc"}, {"sha": "5ce420ac8487d991ead53f51ae2d45ef33d4f94e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ce420ac8487d991ead53f51ae2d45ef33d4f94e", "html_url": "https://github.com/rust-lang/rust/commit/5ce420ac8487d991ead53f51ae2d45ef33d4f94e"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "78411f6c0a25520906ca8473939cefbc44daf9f5", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/53e2cdf18e155ad61262fed5dcd3d73ef343c042/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53e2cdf18e155ad61262fed5dcd3d73ef343c042/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=53e2cdf18e155ad61262fed5dcd3d73ef343c042", "patch": "@@ -861,16 +861,18 @@ pub(crate) fn handle_formatting(\n         }\n     };\n \n-    let mut rustfmt = rustfmt.stdin(Stdio::piped()).stdout(Stdio::piped()).spawn()?;\n+    let mut rustfmt =\n+        rustfmt.stdin(Stdio::piped()).stdout(Stdio::piped()).stderr(Stdio::piped()).spawn()?;\n \n     rustfmt.stdin.as_mut().unwrap().write_all(file.as_bytes())?;\n \n     let output = rustfmt.wait_with_output()?;\n     let captured_stdout = String::from_utf8(output.stdout)?;\n+    let captured_stderr = String::from_utf8(output.stderr).unwrap_or_default();\n \n     if !output.status.success() {\n         match output.status.code() {\n-            Some(1) => {\n+            Some(1) if !captured_stderr.contains(\"not installed\") => {\n                 // While `rustfmt` doesn't have a specific exit code for parse errors this is the\n                 // likely cause exiting with 1. Most Language Servers swallow parse errors on\n                 // formatting because otherwise an error is surfaced to the user on top of the\n@@ -886,8 +888,9 @@ pub(crate) fn handle_formatting(\n                     format!(\n                         r#\"rustfmt exited with:\n                            Status: {}\n-                           stdout: {}\"#,\n-                        output.status, captured_stdout,\n+                           stdout: {}\n+                           stderr: {}\"#,\n+                        output.status, captured_stdout, captured_stderr,\n                     ),\n                 )\n                 .into());"}]}