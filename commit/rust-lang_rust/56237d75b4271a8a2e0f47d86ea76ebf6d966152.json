{"sha": "56237d75b4271a8a2e0f47d86ea76ebf6d966152", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MjM3ZDc1YjQyNzFhOGEyZTBmNDdkODZlYTc2ZWJmNmQ5NjYxNTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-11T14:05:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-11T14:05:43Z"}, "message": "Auto merge of #66252 - cjgillot:trees, r=oli-obk\n\nMerge repeated definitions\n\nStep forward on #66149\n\nI may need further context to understand the need for a separate crate.\n\nAlso, please tell me if you think of other definitions to merge.", "tree": {"sha": "e366c30e3259745368805637ed6a44deb6c64314", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e366c30e3259745368805637ed6a44deb6c64314"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56237d75b4271a8a2e0f47d86ea76ebf6d966152", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56237d75b4271a8a2e0f47d86ea76ebf6d966152", "html_url": "https://github.com/rust-lang/rust/commit/56237d75b4271a8a2e0f47d86ea76ebf6d966152", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56237d75b4271a8a2e0f47d86ea76ebf6d966152/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9248b019b22224b6d99cc504edd50bd9ed015d3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9248b019b22224b6d99cc504edd50bd9ed015d3f", "html_url": "https://github.com/rust-lang/rust/commit/9248b019b22224b6d99cc504edd50bd9ed015d3f"}, {"sha": "76128f89a118ecd0fc2a69965e8a459105119c95", "url": "https://api.github.com/repos/rust-lang/rust/commits/76128f89a118ecd0fc2a69965e8a459105119c95", "html_url": "https://github.com/rust-lang/rust/commit/76128f89a118ecd0fc2a69965e8a459105119c95"}], "stats": {"total": 702, "additions": 298, "deletions": 404}, "files": [{"sha": "2c8e14f2addff3b63b02d995bb49c7eb725ac5d8", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -1217,7 +1217,7 @@ impl<'a> LoweringContext<'a> {\n                                     &NodeMap::default(),\n                                     ImplTraitContext::disallowed(),\n                                 ),\n-                                unsafety: this.lower_unsafety(f.unsafety),\n+                                unsafety: f.unsafety,\n                                 abi: this.lower_abi(f.abi),\n                                 decl: this.lower_fn_decl(&f.decl, None, false, None),\n                                 param_names: this.lower_fn_params_to_names(&f.decl),\n@@ -2081,13 +2081,6 @@ impl<'a> LoweringContext<'a> {\n         }, ids)\n     }\n \n-    fn lower_mutability(&mut self, m: Mutability) -> hir::Mutability {\n-        match m {\n-            Mutability::Mutable => hir::MutMutable,\n-            Mutability::Immutable => hir::MutImmutable,\n-        }\n-    }\n-\n     fn lower_fn_params_to_names(&mut self, decl: &FnDecl) -> hir::HirVec<Ident> {\n         // Skip the `...` (`CVarArgs`) trailing arguments from the AST,\n         // as they are not explicit in HIR/Ty function signatures.\n@@ -2657,7 +2650,7 @@ impl<'a> LoweringContext<'a> {\n     fn lower_mt(&mut self, mt: &MutTy, itctx: ImplTraitContext<'_>) -> hir::MutTy {\n         hir::MutTy {\n             ty: self.lower_ty(&mt.ty, itctx),\n-            mutbl: self.lower_mutability(mt.mutbl),\n+            mutbl: mt.mutbl,\n         }\n     }\n \n@@ -2758,7 +2751,7 @@ impl<'a> LoweringContext<'a> {\n             }\n             PatKind::Box(ref inner) => hir::PatKind::Box(self.lower_pat(inner)),\n             PatKind::Ref(ref inner, mutbl) => {\n-                hir::PatKind::Ref(self.lower_pat(inner), self.lower_mutability(mutbl))\n+                hir::PatKind::Ref(self.lower_pat(inner), mutbl)\n             }\n             PatKind::Range(ref e1, ref e2, Spanned { node: ref end, .. }) => hir::PatKind::Range(\n                 P(self.lower_expr(e1)),"}, {"sha": "62f3eaef244a155712ef907ea59bc98b5beed634", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -64,7 +64,6 @@ impl LoweringContext<'_> {\n                 hir::ExprKind::Type(expr, self.lower_ty(ty, ImplTraitContext::disallowed()))\n             }\n             ExprKind::AddrOf(m, ref ohs) => {\n-                let m = self.lower_mutability(m);\n                 let ohs = P(self.lower_expr(ohs));\n                 hir::ExprKind::AddrOf(m, ohs)\n             }\n@@ -474,7 +473,6 @@ impl LoweringContext<'_> {\n         async_gen_kind: hir::AsyncGeneratorKind,\n         body: impl FnOnce(&mut LoweringContext<'_>) -> hir::Expr,\n     ) -> hir::ExprKind {\n-        let capture_clause = self.lower_capture_clause(capture_clause);\n         let output = match ret_ty {\n             Some(ty) => FunctionRetTy::Ty(ty),\n             None => FunctionRetTy::Default(span),\n@@ -495,7 +493,7 @@ impl LoweringContext<'_> {\n             decl,\n             body_id,\n             span,\n-            Some(hir::GeneratorMovability::Static)\n+            Some(hir::Movability::Static)\n         );\n         let generator = hir::Expr {\n             hir_id: self.lower_node_id(closure_node_id),\n@@ -701,7 +699,6 @@ impl LoweringContext<'_> {\n                 generator_kind,\n                 movability,\n             );\n-            let capture_clause = this.lower_capture_clause(capture_clause);\n             this.current_item = prev;\n             hir::ExprKind::Closure(\n                 capture_clause,\n@@ -713,20 +710,13 @@ impl LoweringContext<'_> {\n         })\n     }\n \n-    fn lower_capture_clause(&mut self, c: CaptureBy) -> hir::CaptureClause {\n-        match c {\n-            CaptureBy::Value => hir::CaptureByValue,\n-            CaptureBy::Ref => hir::CaptureByRef,\n-        }\n-    }\n-\n     fn generator_movability_for_fn(\n         &mut self,\n         decl: &FnDecl,\n         fn_decl_span: Span,\n         generator_kind: Option<hir::GeneratorKind>,\n         movability: Movability,\n-    ) -> Option<hir::GeneratorMovability> {\n+    ) -> Option<hir::Movability> {\n         match generator_kind {\n             Some(hir::GeneratorKind::Gen) =>  {\n                 if !decl.inputs.is_empty() {\n@@ -737,10 +727,7 @@ impl LoweringContext<'_> {\n                         \"generators cannot have explicit parameters\"\n                     );\n                 }\n-                Some(match movability {\n-                    Movability::Movable => hir::GeneratorMovability::Movable,\n-                    Movability::Static => hir::GeneratorMovability::Static,\n-                })\n+                Some(movability)\n             },\n             Some(hir::GeneratorKind::Async(_)) => {\n                 bug!(\"non-`async` closure body turned `async` during lowering\");\n@@ -811,7 +798,7 @@ impl LoweringContext<'_> {\n                 this.expr(fn_decl_span, async_body, ThinVec::new())\n             });\n             hir::ExprKind::Closure(\n-                this.lower_capture_clause(capture_clause),\n+                capture_clause,\n                 fn_decl,\n                 body_id,\n                 fn_decl_span,\n@@ -1350,7 +1337,7 @@ impl LoweringContext<'_> {\n     }\n \n     fn expr_mut_addr_of(&mut self, span: Span, e: P<hir::Expr>) -> hir::Expr {\n-        self.expr(span, hir::ExprKind::AddrOf(hir::MutMutable, e), ThinVec::new())\n+        self.expr(span, hir::ExprKind::AddrOf(hir::Mutability::Mutable, e), ThinVec::new())\n     }\n \n     fn expr_unit(&mut self, sp: Span) -> hir::Expr {"}, {"sha": "aafdd78e3e8bcb258768a32814c9c0618be3e6f9", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 9, "deletions": 37, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -19,7 +19,7 @@ use smallvec::SmallVec;\n use syntax::attr;\n use syntax::ast::*;\n use syntax::visit::{self, Visitor};\n-use syntax::source_map::{respan, DesugaringKind, Spanned};\n+use syntax::source_map::{respan, DesugaringKind};\n use syntax::symbol::{kw, sym};\n use syntax_pos::Span;\n \n@@ -289,7 +289,7 @@ impl LoweringContext<'_> {\n                             ImplTraitContext::Disallowed(ImplTraitPosition::Binding)\n                         }\n                     ),\n-                    self.lower_mutability(m),\n+                    m,\n                     self.lower_const_body(e),\n                 )\n             }\n@@ -433,8 +433,8 @@ impl LoweringContext<'_> {\n                 );\n \n                 hir::ItemKind::Impl(\n-                    self.lower_unsafety(unsafety),\n-                    self.lower_impl_polarity(polarity),\n+                    unsafety,\n+                    polarity,\n                     self.lower_defaultness(defaultness, true /* [1] */),\n                     generics,\n                     trait_ref,\n@@ -449,8 +449,8 @@ impl LoweringContext<'_> {\n                     .map(|item| self.lower_trait_item_ref(item))\n                     .collect();\n                 hir::ItemKind::Trait(\n-                    self.lower_is_auto(is_auto),\n-                    self.lower_unsafety(unsafety),\n+                    is_auto,\n+                    unsafety,\n                     self.lower_generics(generics, ImplTraitContext::disallowed()),\n                     bounds,\n                     items,\n@@ -719,7 +719,7 @@ impl LoweringContext<'_> {\n                 }\n                 ForeignItemKind::Static(ref t, m) => {\n                     hir::ForeignItemKind::Static(\n-                        self.lower_ty(t, ImplTraitContext::disallowed()), self.lower_mutability(m))\n+                        self.lower_ty(t, ImplTraitContext::disallowed()), m)\n                 }\n                 ForeignItemKind::Ty => hir::ForeignItemKind::Type,\n                 ForeignItemKind::Macro(_) => panic!(\"macro shouldn't exist here\"),\n@@ -1011,13 +1011,6 @@ impl LoweringContext<'_> {\n         }\n     }\n \n-    fn lower_impl_polarity(&mut self, i: ImplPolarity) -> hir::ImplPolarity {\n-        match i {\n-            ImplPolarity::Positive => hir::ImplPolarity::Positive,\n-            ImplPolarity::Negative => hir::ImplPolarity::Negative,\n-        }\n-    }\n-\n     fn record_body(&mut self, params: HirVec<hir::Param>, value: hir::Expr) -> hir::BodyId {\n         let body = hir::Body {\n             generator_kind: self.generator_kind,\n@@ -1275,18 +1268,11 @@ impl LoweringContext<'_> {\n         (generics, hir::FnSig { header, decl })\n     }\n \n-    fn lower_is_auto(&mut self, a: IsAuto) -> hir::IsAuto {\n-        match a {\n-            IsAuto::Yes => hir::IsAuto::Yes,\n-            IsAuto::No => hir::IsAuto::No,\n-        }\n-    }\n-\n     fn lower_fn_header(&mut self, h: FnHeader) -> hir::FnHeader {\n         hir::FnHeader {\n-            unsafety: self.lower_unsafety(h.unsafety),\n+            unsafety: h.unsafety,\n             asyncness: self.lower_asyncness(h.asyncness.node),\n-            constness: self.lower_constness(h.constness),\n+            constness: h.constness.node,\n             abi: self.lower_abi(h.abi),\n         }\n     }\n@@ -1311,20 +1297,6 @@ impl LoweringContext<'_> {\n         .emit();\n     }\n \n-    pub(super) fn lower_unsafety(&mut self, u: Unsafety) -> hir::Unsafety {\n-        match u {\n-            Unsafety::Unsafe => hir::Unsafety::Unsafe,\n-            Unsafety::Normal => hir::Unsafety::Normal,\n-        }\n-    }\n-\n-    fn lower_constness(&mut self, c: Spanned<Constness>) -> hir::Constness {\n-        match c.node {\n-            Constness::Const => hir::Constness::Const,\n-            Constness::NotConst => hir::Constness::NotConst,\n-        }\n-    }\n-\n     fn lower_asyncness(&mut self, a: IsAsync) -> hir::IsAsync {\n         match a {\n             IsAsync::Async { .. } => hir::IsAsync::Async,"}, {"sha": "bbd3b40e1be90ab2d356758b48adcf2fd1755d50", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 4, "deletions": 109, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -3,9 +3,7 @@\n //! [rustc guide]: https://rust-lang.github.io/rustc-guide/hir.html\n \n pub use self::BlockCheckMode::*;\n-pub use self::CaptureClause::*;\n pub use self::FunctionRetTy::*;\n-pub use self::Mutability::*;\n pub use self::PrimTy::*;\n pub use self::UnOp::*;\n pub use self::UnsafeSource::*;\n@@ -23,6 +21,7 @@ use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n use syntax::source_map::Spanned;\n use syntax::ast::{self, CrateSugar, Ident, Name, NodeId, AsmDialect};\n use syntax::ast::{Attribute, Label, LitKind, StrStyle, FloatTy, IntTy, UintTy};\n+pub use syntax::ast::{Mutability, Constness, Unsafety, Movability, CaptureBy, IsAuto, ImplPolarity};\n use syntax::attr::{InlineAttr, OptimizeAttr};\n use syntax::symbol::{Symbol, kw};\n use syntax::tokenstream::TokenStream;\n@@ -1053,37 +1052,6 @@ pub enum PatKind {\n     Slice(HirVec<P<Pat>>, Option<P<Pat>>, HirVec<P<Pat>>),\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, HashStable,\n-         RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum Mutability {\n-    MutMutable,\n-    MutImmutable,\n-}\n-\n-impl Mutability {\n-    /// Returns `MutMutable` only if both `self` and `other` are mutable.\n-    pub fn and(self, other: Self) -> Self {\n-        match self {\n-            MutMutable => other,\n-            MutImmutable => MutImmutable,\n-        }\n-    }\n-\n-    pub fn invert(self) -> Self {\n-        match self {\n-            MutMutable => MutImmutable,\n-            MutImmutable => MutMutable,\n-        }\n-    }\n-\n-    pub fn prefix_str(&self) -> &'static str {\n-        match self {\n-            MutMutable => \"mut \",\n-            MutImmutable => \"\",\n-        }\n-    }\n-}\n-\n #[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub enum BinOpKind {\n     /// The `+` operator (addition).\n@@ -1659,8 +1627,8 @@ pub enum ExprKind {\n     /// The `Span` is the argument block `|...|`.\n     ///\n     /// This may also be a generator literal or an `async block` as indicated by the\n-    /// `Option<GeneratorMovability>`.\n-    Closure(CaptureClause, P<FnDecl>, BodyId, Span, Option<GeneratorMovability>),\n+    /// `Option<Movability>`.\n+    Closure(CaptureBy, P<FnDecl>, BodyId, Span, Option<Movability>),\n     /// A block (e.g., `'label: { ... }`).\n     Block(P<Block>, Option<Label>),\n \n@@ -1833,17 +1801,6 @@ pub struct Destination {\n     pub target_id: Result<HirId, LoopIdError>,\n }\n \n-/// Whether a generator contains self-references, causing it to be `!Unpin`.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, HashStable,\n-         RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum GeneratorMovability {\n-    /// May contain self-references, `!Unpin`.\n-    Static,\n-\n-    /// Must not contain self-references, `Unpin`.\n-    Movable,\n-}\n-\n /// The yield kind that caused an `ExprKind::Yield`.\n #[derive(Copy, Clone, PartialEq, Eq, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub enum YieldSource {\n@@ -1862,12 +1819,6 @@ impl fmt::Display for YieldSource {\n     }\n }\n \n-#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n-pub enum CaptureClause {\n-    CaptureByValue,\n-    CaptureByRef,\n-}\n-\n // N.B., if you change this, you'll probably want to change the corresponding\n // type structure in middle/ty.rs as well.\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n@@ -2171,42 +2122,13 @@ impl ImplicitSelfKind {\n     }\n }\n \n-/// Is the trait definition an auto trait?\n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable)]\n-pub enum IsAuto {\n-    Yes,\n-    No\n-}\n-\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, HashStable,\n          Ord, RustcEncodable, RustcDecodable, Debug)]\n pub enum IsAsync {\n     Async,\n     NotAsync,\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, HashStable,\n-         RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum Unsafety {\n-    Unsafe,\n-    Normal,\n-}\n-\n-impl Unsafety {\n-    pub fn prefix_str(&self) -> &'static str {\n-        match self {\n-            Unsafety::Unsafe => \"unsafe \",\n-            Unsafety::Normal => \"\",\n-        }\n-    }\n-}\n-\n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable)]\n-pub enum Constness {\n-    Const,\n-    NotConst,\n-}\n-\n #[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub enum Defaultness {\n     Default { has_value: bool },\n@@ -2233,33 +2155,6 @@ impl Defaultness {\n     }\n }\n \n-impl fmt::Display for Unsafety {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.write_str(match self {\n-            Unsafety::Normal => \"normal\",\n-            Unsafety::Unsafe => \"unsafe\",\n-        })\n-    }\n-}\n-\n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, HashStable)]\n-pub enum ImplPolarity {\n-    /// `impl Trait for Type`\n-    Positive,\n-    /// `impl !Trait for Type`\n-    Negative,\n-}\n-\n-impl fmt::Debug for ImplPolarity {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.write_str(match self {\n-            ImplPolarity::Positive => \"positive\",\n-            ImplPolarity::Negative => \"negative\",\n-        })\n-    }\n-}\n-\n-\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub enum FunctionRetTy {\n     /// Return type is not specified.\n@@ -2693,7 +2588,7 @@ pub struct Upvar {\n     pub span: Span\n }\n \n-pub type CaptureModeMap = NodeMap<CaptureClause>;\n+pub type CaptureModeMap = NodeMap<CaptureBy>;\n \n  // The TraitCandidate's import_ids is empty if the trait is defined in the same module, and\n  // has length > 0 if the trait is found through an chain of imports, starting with the"}, {"sha": "97228c8f2403882df34d8ccd17279960f046693e", "filename": "src/librustc/hir/pat_util.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fhir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fhir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fpat_util.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -169,10 +169,11 @@ impl hir::Pat {\n         self.each_binding(|annotation, _, _, _| {\n             match annotation {\n                 hir::BindingAnnotation::Ref => match result {\n-                    None | Some(hir::MutImmutable) => result = Some(hir::MutImmutable),\n+                    None | Some(hir::Mutability::Immutable) =>\n+                        result = Some(hir::Mutability::Immutable),\n                     _ => {}\n                 }\n-                hir::BindingAnnotation::RefMut => result = Some(hir::MutMutable),\n+                hir::BindingAnnotation::RefMut => result = Some(hir::Mutability::Mutable),\n                 _ => {}\n             }\n         });"}, {"sha": "ba618a1da8cefbdd02e78f4800fc2959052ff718", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -295,8 +295,8 @@ impl<'a> State<'a> {\n             hir::TyKind::Ptr(ref mt) => {\n                 self.s.word(\"*\");\n                 match mt.mutbl {\n-                    hir::MutMutable => self.word_nbsp(\"mut\"),\n-                    hir::MutImmutable => self.word_nbsp(\"const\"),\n+                    hir::Mutability::Mutable => self.word_nbsp(\"mut\"),\n+                    hir::Mutability::Immutable => self.word_nbsp(\"const\"),\n                 }\n                 self.print_type(&mt.ty);\n             }\n@@ -390,7 +390,7 @@ impl<'a> State<'a> {\n             }\n             hir::ForeignItemKind::Static(ref t, m) => {\n                 self.head(visibility_qualified(&item.vis, \"static\"));\n-                if m == hir::MutMutable {\n+                if m == hir::Mutability::Mutable {\n                     self.word_space(\"mut\");\n                 }\n                 self.print_ident(item.ident);\n@@ -506,7 +506,7 @@ impl<'a> State<'a> {\n             }\n             hir::ItemKind::Static(ref ty, m, expr) => {\n                 self.head(visibility_qualified(&item.vis, \"static\"));\n-                if m == hir::MutMutable {\n+                if m == hir::Mutability::Mutable {\n                     self.word_space(\"mut\");\n                 }\n                 self.print_ident(item.ident);\n@@ -1628,11 +1628,11 @@ impl<'a> State<'a> {\n                 match binding_mode {\n                     hir::BindingAnnotation::Ref => {\n                         self.word_nbsp(\"ref\");\n-                        self.print_mutability(hir::MutImmutable);\n+                        self.print_mutability(hir::Mutability::Immutable);\n                     }\n                     hir::BindingAnnotation::RefMut => {\n                         self.word_nbsp(\"ref\");\n-                        self.print_mutability(hir::MutMutable);\n+                        self.print_mutability(hir::Mutability::Mutable);\n                     }\n                     hir::BindingAnnotation::Unannotated => {}\n                     hir::BindingAnnotation::Mutable => {\n@@ -1909,10 +1909,10 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    pub fn print_capture_clause(&mut self, capture_clause: hir::CaptureClause) {\n+    pub fn print_capture_clause(&mut self, capture_clause: hir::CaptureBy) {\n         match capture_clause {\n-            hir::CaptureByValue => self.word_space(\"move\"),\n-            hir::CaptureByRef => {},\n+            hir::CaptureBy::Value => self.word_space(\"move\"),\n+            hir::CaptureBy::Ref => {},\n         }\n     }\n \n@@ -2061,8 +2061,8 @@ impl<'a> State<'a> {\n \n     pub fn print_mutability(&mut self, mutbl: hir::Mutability) {\n         match mutbl {\n-            hir::MutMutable => self.word_nbsp(\"mut\"),\n-            hir::MutImmutable => {},\n+            hir::Mutability::Mutable => self.word_nbsp(\"mut\"),\n+            hir::Mutability::Immutable => {},\n         }\n     }\n "}, {"sha": "b3d82e5522cf2400d9c15b87fd3afa023efe1426", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -168,6 +168,10 @@ impl_stable_hash_for!(enum ::syntax::ast::Defaultness { Default, Final });\n impl_stable_hash_for!(struct ::syntax::ast::Lifetime { id, ident });\n impl_stable_hash_for!(enum ::syntax::ast::StrStyle { Cooked, Raw(pounds) });\n impl_stable_hash_for!(enum ::syntax::ast::AttrStyle { Outer, Inner });\n+impl_stable_hash_for!(enum ::syntax::ast::Movability { Static, Movable });\n+impl_stable_hash_for!(enum ::syntax::ast::CaptureBy { Value, Ref });\n+impl_stable_hash_for!(enum ::syntax::ast::IsAuto { Yes, No });\n+impl_stable_hash_for!(enum ::syntax::ast::ImplPolarity { Positive, Negative });\n \n impl<'a> HashStable<StableHashingContext<'a>> for [ast::Attribute] {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {"}, {"sha": "1c5f86f480147cd1b78d2e73637fd5278aeb6072", "filename": "src/librustc/lint/internal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Flint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Flint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Finternal.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -131,7 +131,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TyTyKind {\n                     }\n                 }\n             }\n-            TyKind::Rptr(_, MutTy { ty: inner_ty, mutbl: Mutability::MutImmutable }) => {\n+            TyKind::Rptr(_, MutTy { ty: inner_ty, mutbl: Mutability::Immutable }) => {\n                 if let Some(impl_did) = cx.tcx.impl_of_method(ty.hir_id.owner_def_id()) {\n                     if cx.tcx.impl_trait_ref(impl_did).is_some() {\n                         return;"}, {"sha": "3510fe4d12359d967f55942e918644cf375201c1", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -67,7 +67,7 @@ use crate::ty::adjustment;\n use crate::ty::{self, DefIdTree, Ty, TyCtxt};\n use crate::ty::fold::TypeFoldable;\n \n-use crate::hir::{MutImmutable, MutMutable, PatKind};\n+use crate::hir::{Mutability, PatKind};\n use crate::hir::pat_util::EnumerateAndAdjustIterator;\n use crate::hir;\n use syntax::ast::{self, Name};\n@@ -226,8 +226,8 @@ pub type McResult<T> = Result<T, ()>;\n impl MutabilityCategory {\n     pub fn from_mutbl(m: hir::Mutability) -> MutabilityCategory {\n         let ret = match m {\n-            MutImmutable => McImmutable,\n-            MutMutable => McDeclared\n+            Mutability::Immutable => McImmutable,\n+            Mutability::Mutable => McDeclared\n         };\n         debug!(\"MutabilityCategory::{}({:?}) => {:?}\",\n                \"from_mutbl\", m, ret);\n@@ -274,7 +274,7 @@ impl MutabilityCategory {\n                     let bm = *tables.pat_binding_modes()\n                                     .get(p.hir_id)\n                                     .expect(\"missing binding mode\");\n-                    if bm == ty::BindByValue(hir::MutMutable) {\n+                    if bm == ty::BindByValue(Mutability::Mutable) {\n                         McDeclared\n                     } else {\n                         McImmutable\n@@ -663,8 +663,8 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n                     span,\n                     cat,\n                     mutbl: match self.tcx.static_mutability(def_id).unwrap() {\n-                        hir::MutImmutable => McImmutable,\n-                        hir::MutMutable => McDeclared,\n+                        Mutability::Immutable => McImmutable,\n+                        Mutability::Mutable => McDeclared,\n                     },\n                     ty:expr_ty,\n                     note: NoteNone"}, {"sha": "a3ddfec765f3fca09f7abd4f27822167f2a44bd3", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -491,8 +491,8 @@ pub enum Mutability {\n impl From<Mutability> for hir::Mutability {\n     fn from(m: Mutability) -> Self {\n         match m {\n-            Mutability::Mut => hir::MutMutable,\n-            Mutability::Not => hir::MutImmutable,\n+            Mutability::Mut => hir::Mutability::Mutable,\n+            Mutability::Not => hir::Mutability::Immutable,\n         }\n     }\n }\n@@ -2161,7 +2161,7 @@ pub enum AggregateKind<'tcx> {\n     Adt(&'tcx AdtDef, VariantIdx, SubstsRef<'tcx>, Option<UserTypeAnnotationIndex>, Option<usize>),\n \n     Closure(DefId, SubstsRef<'tcx>),\n-    Generator(DefId, SubstsRef<'tcx>, hir::GeneratorMovability),\n+    Generator(DefId, SubstsRef<'tcx>, hir::Movability),\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]"}, {"sha": "c65f2b0478670a29a1bfb81eaa0ecd8ffaf54925", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -276,17 +276,17 @@ impl<'tcx> BinOp {\n impl BorrowKind {\n     pub fn to_mutbl_lossy(self) -> hir::Mutability {\n         match self {\n-            BorrowKind::Mut { .. } => hir::MutMutable,\n-            BorrowKind::Shared => hir::MutImmutable,\n+            BorrowKind::Mut { .. } => hir::Mutability::Mutable,\n+            BorrowKind::Shared => hir::Mutability::Immutable,\n \n             // We have no type corresponding to a unique imm borrow, so\n             // use `&mut`. It gives all the capabilities of an `&uniq`\n             // and hence is a safe \"over approximation\".\n-            BorrowKind::Unique => hir::MutMutable,\n+            BorrowKind::Unique => hir::Mutability::Mutable,\n \n             // We have no type corresponding to a shallow borrow, so use\n             // `&` as an approximation.\n-            BorrowKind::Shallow => hir::MutImmutable,\n+            BorrowKind::Shallow => hir::Mutability::Immutable,\n         }\n     }\n }"}, {"sha": "f77db9621351ef6341399361d944bcd70b85f1fd", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -1385,8 +1385,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n             if let ty::Ref(region, t_type, mutability) = trait_ref.skip_binder().self_ty().kind {\n                 let trait_type = match mutability {\n-                    hir::Mutability::MutMutable => self.tcx.mk_imm_ref(region, t_type),\n-                    hir::Mutability::MutImmutable => self.tcx.mk_mut_ref(region, t_type),\n+                    hir::Mutability::Mutable => self.tcx.mk_imm_ref(region, t_type),\n+                    hir::Mutability::Immutable => self.tcx.mk_mut_ref(region, t_type),\n                 };\n \n                 let substs = self.tcx.mk_substs_trait(&trait_type, &[]);\n@@ -1403,7 +1403,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     let sp = self.tcx.sess.source_map()\n                         .span_take_while(span, |c| c.is_whitespace() || *c == '&');\n                     if points_at_arg &&\n-                        mutability == hir::Mutability::MutImmutable &&\n+                        mutability == hir::Mutability::Immutable &&\n                         refs_number > 0\n                     {\n                         err.span_suggestion("}, {"sha": "04b2597af22415265cbd68f3caec6e036d720e49", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -2195,11 +2195,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     if self.tcx().lang_items().unpin_trait() == Some(def_id) =>\n                 {\n                     match movability {\n-                        hir::GeneratorMovability::Static => {\n+                        hir::Movability::Static => {\n                             // Immovable generators are never `Unpin`, so\n                             // suppress the normal auto-impl candidate for it.\n                         }\n-                        hir::GeneratorMovability::Movable => {\n+                        hir::Movability::Movable => {\n                             // Movable generators are always `Unpin`, so add an\n                             // unconditional builtin candidate.\n                             candidates.vec.push(BuiltinCandidate {\n@@ -2652,7 +2652,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::Char\n             | ty::RawPtr(..)\n             | ty::Never\n-            | ty::Ref(_, _, hir::MutImmutable) => {\n+            | ty::Ref(_, _, hir::Mutability::Immutable) => {\n                 // Implementations provided in libcore\n                 None\n             }\n@@ -2663,7 +2663,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::Generator(..)\n             | ty::GeneratorWitness(..)\n             | ty::Foreign(..)\n-            | ty::Ref(_, _, hir::MutMutable) => None,\n+            | ty::Ref(_, _, hir::Mutability::Mutable) => None,\n \n             ty::Array(element_ty, _) => {\n                 // (*) binder moved here"}, {"sha": "f5ab1eb38c3c6e32a6dc23b0be6b4710c7e22b88", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -109,8 +109,8 @@ pub struct OverloadedDeref<'tcx> {\n impl<'tcx> OverloadedDeref<'tcx> {\n     pub fn method_call(&self, tcx: TyCtxt<'tcx>, source: Ty<'tcx>) -> (DefId, SubstsRef<'tcx>) {\n         let trait_def_id = match self.mutbl {\n-            hir::MutImmutable => tcx.lang_items().deref_trait(),\n-            hir::MutMutable => tcx.lang_items().deref_mut_trait()\n+            hir::Mutability::Immutable => tcx.lang_items().deref_trait(),\n+            hir::Mutability::Mutable => tcx.lang_items().deref_mut_trait()\n         };\n         let method_def_id = tcx.associated_items(trait_def_id.unwrap())\n             .find(|m| m.kind == ty::AssocKind::Method).unwrap().def_id;\n@@ -145,8 +145,8 @@ pub enum AutoBorrowMutability {\n impl From<AutoBorrowMutability> for hir::Mutability {\n     fn from(m: AutoBorrowMutability) -> Self {\n         match m {\n-            AutoBorrowMutability::Mutable { .. } => hir::MutMutable,\n-            AutoBorrowMutability::Immutable => hir::MutImmutable,\n+            AutoBorrowMutability::Mutable { .. } => hir::Mutability::Mutable,\n+            AutoBorrowMutability::Immutable => hir::Mutability::Immutable,\n         }\n     }\n }"}, {"sha": "905d7abb7828c7eb8b4a15bea2f50fe458b6d8d4", "filename": "src/librustc/ty/binding.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fty%2Fbinding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fty%2Fbinding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fbinding.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -13,10 +13,10 @@ CloneTypeFoldableAndLiftImpls! { BindingMode, }\n impl BindingMode {\n     pub fn convert(ba: BindingAnnotation) -> BindingMode {\n         match ba {\n-            Unannotated => BindingMode::BindByValue(Mutability::MutImmutable),\n-            Mutable => BindingMode::BindByValue(Mutability::MutMutable),\n-            Ref => BindingMode::BindByReference(Mutability::MutImmutable),\n-            RefMut => BindingMode::BindByReference(Mutability::MutMutable),\n+            Unannotated => BindingMode::BindByValue(Mutability::Immutable),\n+            Mutable => BindingMode::BindByValue(Mutability::Mutable),\n+            Ref => BindingMode::BindByReference(Mutability::Immutable),\n+            RefMut => BindingMode::BindByReference(Mutability::Mutable),\n         }\n     }\n }"}, {"sha": "04e0f6f4b56d71856434c6e71f905b07f306d4fd", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -2410,22 +2410,22 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_mut_ref(self, r: Region<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        self.mk_ref(r, TypeAndMut {ty: ty, mutbl: hir::MutMutable})\n+        self.mk_ref(r, TypeAndMut {ty: ty, mutbl: hir::Mutability::Mutable})\n     }\n \n     #[inline]\n     pub fn mk_imm_ref(self, r: Region<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        self.mk_ref(r, TypeAndMut {ty: ty, mutbl: hir::MutImmutable})\n+        self.mk_ref(r, TypeAndMut {ty: ty, mutbl: hir::Mutability::Immutable})\n     }\n \n     #[inline]\n     pub fn mk_mut_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        self.mk_ptr(TypeAndMut {ty: ty, mutbl: hir::MutMutable})\n+        self.mk_ptr(TypeAndMut {ty: ty, mutbl: hir::Mutability::Mutable})\n     }\n \n     #[inline]\n     pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        self.mk_ptr(TypeAndMut {ty: ty, mutbl: hir::MutImmutable})\n+        self.mk_ptr(TypeAndMut {ty: ty, mutbl: hir::Mutability::Immutable})\n     }\n \n     #[inline]\n@@ -2516,7 +2516,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn mk_generator(self,\n                         id: DefId,\n                         generator_substs: SubstsRef<'tcx>,\n-                        movability: hir::GeneratorMovability)\n+                        movability: hir::Movability)\n                         -> Ty<'tcx> {\n         self.mk_ty(Generator(id, generator_substs, movability))\n     }"}, {"sha": "c61d559af53f5867db3b641a4c2b515aa4ed9255", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -211,7 +211,7 @@ impl<'tcx> ty::TyS<'tcx> {\n                    region.to_string() != \"'_\"     //... or a complex type\n                 {\n                     format!(\"{}reference\", match mutbl {\n-                        hir::Mutability::MutMutable => \"mutable \",\n+                        hir::Mutability::Mutable => \"mutable \",\n                         _ => \"\"\n                     }).into()\n                 } else {"}, {"sha": "e5f22277f8e31bb25cbc5c8664ee30c04afdf95c", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -2221,12 +2221,12 @@ where\n                 let tcx = cx.tcx();\n                 let is_freeze = ty.is_freeze(tcx, cx.param_env(), DUMMY_SP);\n                 let kind = match mt {\n-                    hir::MutImmutable => if is_freeze {\n+                    hir::Mutability::Immutable => if is_freeze {\n                         PointerKind::Frozen\n                     } else {\n                         PointerKind::Shared\n                     },\n-                    hir::MutMutable => {\n+                    hir::Mutability::Mutable => {\n                         // Previously we would only emit noalias annotations for LLVM >= 6 or in\n                         // panic=abort mode. That was deemed right, as prior versions had many bugs\n                         // in conjunction with unwinding, but later versions didn\u2019t seem to have"}, {"sha": "e4ed1cd198e528700d1d13bdf22cead8e320db29", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -2693,8 +2693,8 @@ impl<'tcx> TyS<'tcx> {\n impl BorrowKind {\n     pub fn from_mutbl(m: hir::Mutability) -> BorrowKind {\n         match m {\n-            hir::MutMutable => MutBorrow,\n-            hir::MutImmutable => ImmBorrow,\n+            hir::Mutability::Mutable => MutBorrow,\n+            hir::Mutability::Immutable => ImmBorrow,\n         }\n     }\n \n@@ -2704,13 +2704,13 @@ impl BorrowKind {\n     /// question.\n     pub fn to_mutbl_lossy(self) -> hir::Mutability {\n         match self {\n-            MutBorrow => hir::MutMutable,\n-            ImmBorrow => hir::MutImmutable,\n+            MutBorrow => hir::Mutability::Mutable,\n+            ImmBorrow => hir::Mutability::Immutable,\n \n             // We have no type corresponding to a unique imm borrow, so\n             // use `&mut`. It gives all the capabilities of an `&uniq`\n             // and hence is a safe \"over approximation\".\n-            UniqueImmBorrow => hir::MutMutable,\n+            UniqueImmBorrow => hir::Mutability::Mutable,\n         }\n     }\n "}, {"sha": "0389218b61d24d165eb3792ab87fe0b962ba6de5", "filename": "src/librustc/ty/print/obsolete.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -60,8 +60,8 @@ impl DefPathBasedNames<'tcx> {\n             ty::RawPtr(ty::TypeAndMut { ty: inner_type, mutbl }) => {\n                 output.push('*');\n                 match mutbl {\n-                    hir::MutImmutable => output.push_str(\"const \"),\n-                    hir::MutMutable => output.push_str(\"mut \"),\n+                    hir::Mutability::Immutable => output.push_str(\"const \"),\n+                    hir::Mutability::Mutable => output.push_str(\"mut \"),\n                 }\n \n                 self.push_type_name(inner_type, output, debug);"}, {"sha": "fdd3a1faaa975c6884fafd2f4bf1f12e914ed15b", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -471,8 +471,8 @@ pub trait PrettyPrinter<'tcx>:\n             ty::Float(t) => p!(write(\"{}\", t.name_str())),\n             ty::RawPtr(ref tm) => {\n                 p!(write(\"*{} \", match tm.mutbl {\n-                    hir::MutMutable => \"mut\",\n-                    hir::MutImmutable => \"const\",\n+                    hir::Mutability::Mutable => \"mut\",\n+                    hir::Mutability::Immutable => \"const\",\n                 }));\n                 p!(print(tm.ty))\n             }\n@@ -607,10 +607,9 @@ pub trait PrettyPrinter<'tcx>:\n             ty::Generator(did, substs, movability) => {\n                 let upvar_tys = substs.as_generator().upvar_tys(did, self.tcx());\n                 let witness = substs.as_generator().witness(did, self.tcx());\n-                if movability == hir::GeneratorMovability::Movable {\n-                    p!(write(\"[generator\"));\n-                } else {\n-                    p!(write(\"[static generator\"));\n+                match movability {\n+                    hir::Movability::Movable => p!(write(\"[generator\")),\n+                    hir::Movability::Static  => p!(write(\"[static generator\")),\n                 }\n \n                 // FIXME(eddyb) should use `def_span`."}, {"sha": "9b5cdc489a8b5330fb5031f31afb6c5b7095238b", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -121,8 +121,8 @@ impl<'tcx> Relate<'tcx> for ty::TypeAndMut<'tcx> {\n         } else {\n             let mutbl = a.mutbl;\n             let variance = match mutbl {\n-                ast::Mutability::MutImmutable => ty::Covariant,\n-                ast::Mutability::MutMutable => ty::Invariant,\n+                ast::Mutability::Immutable => ty::Covariant,\n+                ast::Mutability::Mutable => ty::Invariant,\n             };\n             let ty = relation.relate_with_variance(variance, &a.ty, &b.ty)?;\n             Ok(ty::TypeAndMut { ty, mutbl })"}, {"sha": "51cf7550c30f7c404d88edbf33b2731946514d55", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -162,7 +162,7 @@ pub enum TyKind<'tcx> {\n \n     /// The anonymous type of a generator. Used to represent the type of\n     /// `|a| yield a`.\n-    Generator(DefId, SubstsRef<'tcx>, hir::GeneratorMovability),\n+    Generator(DefId, SubstsRef<'tcx>, hir::Movability),\n \n     /// A type representin the types stored inside a generator.\n     /// This should only appear in GeneratorInteriors.\n@@ -1839,8 +1839,8 @@ impl<'tcx> TyS<'tcx> {\n     #[inline]\n     pub fn is_mutable_ptr(&self) -> bool {\n         match self.kind {\n-            RawPtr(TypeAndMut { mutbl: hir::Mutability::MutMutable, .. }) |\n-            Ref(_, _, hir::Mutability::MutMutable) => true,\n+            RawPtr(TypeAndMut { mutbl: hir::Mutability::Mutable, .. }) |\n+            Ref(_, _, hir::Mutability::Mutable) => true,\n             _ => false\n         }\n     }\n@@ -2030,7 +2030,7 @@ impl<'tcx> TyS<'tcx> {\n             Adt(def, _) if def.is_box() => {\n                 Some(TypeAndMut {\n                     ty: self.boxed_ty(),\n-                    mutbl: hir::MutImmutable,\n+                    mutbl: hir::Mutability::Immutable,\n                 })\n             },\n             Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl }),"}, {"sha": "d46320abff2ad795c6a2ff048393b98c736f1c80", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -184,7 +184,7 @@ impl<'tcx> ty::ParamEnv<'tcx> {\n                 // Now libcore provides that impl.\n                 ty::Uint(_) | ty::Int(_) | ty::Bool | ty::Float(_) |\n                 ty::Char | ty::RawPtr(..) | ty::Never |\n-                ty::Ref(_, _, hir::MutImmutable) => return Ok(()),\n+                ty::Ref(_, _, hir::Mutability::Immutable) => return Ok(()),\n \n                 ty::Adt(adt, substs) => (adt, substs),\n \n@@ -680,7 +680,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Returns `true` if the node pointed to by `def_id` is a mutable `static` item.\n     pub fn is_mutable_static(&self, def_id: DefId) -> bool {\n-        self.static_mutability(def_id) == Some(hir::MutMutable)\n+        self.static_mutability(def_id) == Some(hir::Mutability::Mutable)\n     }\n \n     /// Expands the given impl trait type, stopping if the type is recursive."}, {"sha": "e1ce7f622e2ef15a02278fecaafe4141c01796e0", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -1573,7 +1573,7 @@ fn generic_simd_intrinsic(\n         // The second argument must be a simd vector with an element type that's a pointer\n         // to the element type of the first argument\n         let (pointer_count, underlying_ty) = match arg_tys[1].simd_type(tcx).kind {\n-            ty::RawPtr(p) if p.ty == in_elem && p.mutbl == hir::MutMutable\n+            ty::RawPtr(p) if p.ty == in_elem && p.mutbl == hir::Mutability::Mutable\n                 => (ptr_count(arg_tys[1].simd_type(tcx)),\n                     non_ptr(arg_tys[1].simd_type(tcx))),\n             _ => {"}, {"sha": "8ff08e832dc17ded74ec18b341dfc89937f3d17a", "filename": "src/librustc_codegen_ssa/debuginfo/type_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -62,8 +62,8 @@ pub fn push_debuginfo_type_name<'tcx>(\n                 output.push('*');\n             }\n             match mutbl {\n-                hir::MutImmutable => output.push_str(\"const \"),\n-                hir::MutMutable => output.push_str(\"mut \"),\n+                hir::Mutability::Immutable => output.push_str(\"const \"),\n+                hir::Mutability::Mutable => output.push_str(\"mut \"),\n             }\n \n             push_debuginfo_type_name(tcx, inner_type, true, output, visited);"}, {"sha": "1dfcc21f3903ddd674ad2c1e9361d55e35d6055a", "filename": "src/librustc_codegen_utils/symbol_names/v0.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -373,8 +373,8 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n \n             ty::Ref(r, ty, mutbl) => {\n                 self.push(match mutbl {\n-                    hir::MutImmutable => \"R\",\n-                    hir::MutMutable => \"Q\",\n+                    hir::Mutability::Immutable => \"R\",\n+                    hir::Mutability::Mutable => \"Q\",\n                 });\n                 if *r != ty::ReErased {\n                     self = r.print(self)?;\n@@ -384,8 +384,8 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n \n             ty::RawPtr(mt) => {\n                 self.push(match mt.mutbl {\n-                    hir::MutImmutable => \"P\",\n-                    hir::MutMutable => \"O\",\n+                    hir::Mutability::Immutable => \"P\",\n+                    hir::Mutability::Mutable => \"O\",\n                 });\n                 self = mt.ty.print(self)?;\n             }"}, {"sha": "38624034022f0bc81f5959304512efb9afe6d250", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -926,8 +926,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutableTransmutes {\n                    consider instead using an UnsafeCell\";\n         match get_transmute_from_to(cx, expr).map(|(ty1, ty2)| (&ty1.kind, &ty2.kind)) {\n             Some((&ty::Ref(_, _, from_mt), &ty::Ref(_, _, to_mt))) => {\n-                if to_mt == hir::Mutability::MutMutable &&\n-                   from_mt == hir::Mutability::MutImmutable {\n+                if to_mt == hir::Mutability::Mutable &&\n+                   from_mt == hir::Mutability::Immutable {\n                     cx.span_lint(MUTABLE_TRANSMUTES, expr.span, msg);\n                 }\n             }"}, {"sha": "7cebf2512d64521286ff4316d63f1fdcee854c57", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -1236,9 +1236,9 @@ impl<'a, 'tcx> CrateMetadata {\n     fn static_mutability(&self, id: DefIndex) -> Option<hir::Mutability> {\n         match self.kind(id) {\n             EntryKind::ImmStatic |\n-            EntryKind::ForeignImmStatic => Some(hir::MutImmutable),\n+            EntryKind::ForeignImmStatic => Some(hir::Mutability::Immutable),\n             EntryKind::MutStatic |\n-            EntryKind::ForeignMutStatic => Some(hir::MutMutable),\n+            EntryKind::ForeignMutStatic => Some(hir::Mutability::Mutable),\n             _ => None,\n         }\n     }"}, {"sha": "26055d329bcbd19736321a6604a474600b172a67", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -1086,8 +1086,8 @@ impl EncodeContext<'tcx> {\n         debug!(\"EncodeContext::encode_info_for_item({:?})\", def_id);\n \n         record!(self.per_def.kind[def_id] <- match item.kind {\n-            hir::ItemKind::Static(_, hir::MutMutable, _) => EntryKind::MutStatic,\n-            hir::ItemKind::Static(_, hir::MutImmutable, _) => EntryKind::ImmStatic,\n+            hir::ItemKind::Static(_, hir::Mutability::Mutable, _) => EntryKind::MutStatic,\n+            hir::ItemKind::Static(_, hir::Mutability::Immutable, _) => EntryKind::ImmStatic,\n             hir::ItemKind::Const(_, body_id) => {\n                 let mir = self.tcx.at(item.span).mir_const_qualif(def_id);\n                 EntryKind::Const(\n@@ -1571,8 +1571,10 @@ impl EncodeContext<'tcx> {\n                 };\n                 EntryKind::ForeignFn(self.lazy(data))\n             }\n-            hir::ForeignItemKind::Static(_, hir::MutMutable) => EntryKind::ForeignMutStatic,\n-            hir::ForeignItemKind::Static(_, hir::MutImmutable) => EntryKind::ForeignImmStatic,\n+            hir::ForeignItemKind::Static(_, hir::Mutability::Mutable) =>\n+                EntryKind::ForeignMutStatic,\n+            hir::ForeignItemKind::Static(_, hir::Mutability::Immutable) =>\n+                EntryKind::ForeignImmStatic,\n             hir::ForeignItemKind::Type => EntryKind::ForeignType,\n         });\n         record!(self.per_def.visibility[def_id] <-"}, {"sha": "f932a6bf1558f56a683c9a53caf786cd7f47cc4c", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -137,7 +137,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n             };\n             let bm = *tables.pat_binding_modes().get(var_hir_id)\n                 .expect(\"missing binding mode\");\n-            if bm == ty::BindByValue(hir::MutMutable) {\n+            if bm == ty::BindByValue(hir::Mutability::Mutable) {\n                 upvar.mutability = Mutability::Mut;\n             }\n             upvar\n@@ -235,7 +235,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n \n     let movable_generator = match tcx.hir().get(id) {\n         Node::Expr(&hir::Expr {\n-            kind: hir::ExprKind::Closure(.., Some(hir::GeneratorMovability::Static)),\n+            kind: hir::ExprKind::Closure(.., Some(hir::Movability::Static)),\n             ..\n         }) => false,\n         _ => true,\n@@ -2118,10 +2118,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             ty::Ref(_, _, mutbl) => {\n                                 match mutbl {\n                                     // Shared borrowed data is never mutable\n-                                    hir::MutImmutable => Err(place),\n+                                    hir::Mutability::Immutable => Err(place),\n                                     // Mutably borrowed data is mutable, but only if we have a\n                                     // unique path to the `&mut`\n-                                    hir::MutMutable => {\n+                                    hir::Mutability::Mutable => {\n                                         let mode = match self.is_upvar_field_projection(place) {\n                                             Some(field)\n                                                 if self.upvars[field.index()].by_ref =>\n@@ -2141,10 +2141,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             ty::RawPtr(tnm) => {\n                                 match tnm.mutbl {\n                                     // `*const` raw pointers are not mutable\n-                                    hir::MutImmutable => Err(place),\n+                                    hir::Mutability::Immutable => Err(place),\n                                     // `*mut` raw pointers are always mutable, regardless of\n                                     // context. The users have to check by themselves.\n-                                    hir::MutMutable => {\n+                                    hir::Mutability::Mutable => {\n                                         Ok(RootPlace {\n                                             place_base: place.base,\n                                             place_projection: place.projection,"}, {"sha": "11e89de810e5b1ac51d9bec631c7ef51fc03743e", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -271,7 +271,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         // we have an explicit self. Do the same thing in this case and check\n                         // for a `self: &mut Self` to suggest removing the `&mut`.\n                         if let ty::Ref(\n-                            _, _, hir::Mutability::MutMutable\n+                            _, _, hir::Mutability::Mutable\n                         ) = local_decl.ty.kind {\n                             true\n                         } else {\n@@ -593,7 +593,7 @@ fn suggest_ampmut<'tcx>(\n     }\n \n     let ty_mut = local_decl.ty.builtin_deref(true).unwrap();\n-    assert_eq!(ty_mut.mutbl, hir::MutImmutable);\n+    assert_eq!(ty_mut.mutbl, hir::Mutability::Immutable);\n     (highlight_span,\n      if local_decl.ty.is_region_ptr() {\n          format!(\"&mut {}\", ty_mut.ty)\n@@ -629,7 +629,7 @@ fn annotate_struct_field(\n             // we can expect a field that is an immutable reference to a type.\n             if let hir::Node::Field(field) = node {\n                 if let hir::TyKind::Rptr(lifetime, hir::MutTy {\n-                    mutbl: hir::Mutability::MutImmutable,\n+                    mutbl: hir::Mutability::Immutable,\n                     ref ty\n                 }) = field.ty.kind {\n                     // Get the snippets in two parts - the named lifetime (if there is one) and"}, {"sha": "37fc0b09e5b9fd058b1e951eba3d9145cd6123ee", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -2138,7 +2138,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         let ty_from = match op.ty(body, tcx).kind {\n                             ty::RawPtr(ty::TypeAndMut {\n                                 ty: ty_from,\n-                                mutbl: hir::MutMutable,\n+                                mutbl: hir::Mutability::Mutable,\n                             }) => ty_from,\n                             _ => {\n                                 span_mirbug!(\n@@ -2153,7 +2153,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         let ty_to = match ty.kind {\n                             ty::RawPtr(ty::TypeAndMut {\n                                 ty: ty_to,\n-                                mutbl: hir::MutImmutable,\n+                                mutbl: hir::Mutability::Immutable,\n                             }) => ty_to,\n                             _ => {\n                                 span_mirbug!(\n@@ -2187,7 +2187,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n                         let opt_ty_elem = match ty_from.kind {\n                             ty::RawPtr(\n-                                ty::TypeAndMut { mutbl: hir::MutImmutable, ty: array_ty }\n+                                ty::TypeAndMut { mutbl: hir::Mutability::Immutable, ty: array_ty }\n                             ) => {\n                                 match array_ty.kind {\n                                     ty::Array(ty_elem, _) => Some(ty_elem),\n@@ -2212,7 +2212,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n                         let ty_to = match ty.kind {\n                             ty::RawPtr(\n-                                ty::TypeAndMut { mutbl: hir::MutImmutable, ty: ty_to }\n+                                ty::TypeAndMut { mutbl: hir::Mutability::Immutable, ty: ty_to }\n                             ) => {\n                                 ty_to\n                             }\n@@ -2250,7 +2250,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         let cast_ty_to = CastTy::from_ty(ty);\n                         match (cast_ty_from, cast_ty_to) {\n                             (Some(CastTy::RPtr(ref_tm)), Some(CastTy::Ptr(ptr_tm))) => {\n-                                if let hir::MutMutable = ptr_tm.mutbl {\n+                                if let hir::Mutability::Mutable = ptr_tm.mutbl {\n                                     if let Err(terr) = self.eq_types(\n                                         ref_tm.ty,\n                                         ptr_tm.ty,\n@@ -2504,13 +2504,13 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                             });\n \n                             match mutbl {\n-                                hir::Mutability::MutImmutable => {\n+                                hir::Mutability::Immutable => {\n                                     // Immutable reference. We don't need the base\n                                     // to be valid for the entire lifetime of\n                                     // the borrow.\n                                     break;\n                                 }\n-                                hir::Mutability::MutMutable => {\n+                                hir::Mutability::Mutable => {\n                                     // Mutable reference. We *do* need the base\n                                     // to be valid, because after the base becomes\n                                     // invalid, someone else can use our mutable deref."}, {"sha": "fbedac45ddf3c9ba7dc655a86b4f6c0c726b96e9", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -90,7 +90,7 @@ pub enum DefiningTy<'tcx> {\n     /// The MIR is a generator. The signature is that generators take\n     /// no parameters and return the result of\n     /// `ClosureSubsts::generator_return_ty`.\n-    Generator(DefId, SubstsRef<'tcx>, hir::GeneratorMovability),\n+    Generator(DefId, SubstsRef<'tcx>, hir::Movability),\n \n     /// The MIR is a fn item with the given `DefId` and substs. The signature\n     /// of the function can be bound then with the `fn_sig` query."}, {"sha": "f0d2927ba45e70af68034f845718d23260b51607", "filename": "src/librustc_mir/borrow_check/place_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -57,7 +57,7 @@ impl<'tcx> PlaceExt<'tcx> for Place<'tcx> {\n \n             if *elem == ProjectionElem::Deref {\n                 let ty = Place::ty_from(&self.base, proj_base, body, tcx).ty;\n-                if let ty::RawPtr(..) | ty::Ref(_, _, hir::MutImmutable) = ty.kind {\n+                if let ty::RawPtr(..) | ty::Ref(_, _, hir::Mutability::Immutable) = ty.kind {\n                     // For both derefs of raw pointers and `&T`\n                     // references, the original path is `Copy` and\n                     // therefore not significant.  In particular,"}, {"sha": "87a431a7fb80d3a102228be6eb521f93e0a87eec", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -246,11 +246,13 @@ fn place_components_conflict<'tcx>(\n                     debug!(\"borrow_conflicts_with_place: shallow access behind ptr\");\n                     return false;\n                 }\n-                (ProjectionElem::Deref, ty::Ref(_, _, hir::MutImmutable), _) => {\n+                (ProjectionElem::Deref, ty::Ref(_, _, hir::Mutability::Immutable), _) => {\n                     // Shouldn't be tracked\n                     bug!(\"Tracking borrow behind shared reference.\");\n                 }\n-                (ProjectionElem::Deref, ty::Ref(_, _, hir::MutMutable), AccessDepth::Drop) => {\n+                (ProjectionElem::Deref,\n+                 ty::Ref(_, _, hir::Mutability::Mutable),\n+                 AccessDepth::Drop) => {\n                     // Values behind a mutable reference are not access either by dropping a\n                     // value, or by StorageDead\n                     debug!(\"borrow_conflicts_with_place: drop access behind ptr\");"}, {"sha": "57833cac9cb44a9a88982cacd99f95f9c5490bf5", "filename": "src/librustc_mir/borrow_check/prefixes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -149,7 +149,7 @@ impl<'cx, 'tcx> Iterator for Prefixes<'cx, 'tcx> {\n                         ty::Ref(\n                             _, /*rgn*/\n                             _, /*ty*/\n-                            hir::MutImmutable\n+                            hir::Mutability::Immutable\n                             ) => {\n                             // don't continue traversing over derefs of raw pointers or shared\n                             // borrows.\n@@ -160,7 +160,7 @@ impl<'cx, 'tcx> Iterator for Prefixes<'cx, 'tcx> {\n                         ty::Ref(\n                             _, /*rgn*/\n                             _, /*ty*/\n-                            hir::MutMutable,\n+                            hir::Mutability::Mutable,\n                             ) => {\n                             self.next = Some(PlaceRef {\n                                 base: cursor.base,"}, {"sha": "fb605bb2b557b9e5defd21e5d4bedcc832ff41e1", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -581,7 +581,7 @@ where\n                 if let hir::PatKind::Binding(_, _, ident, _) = pat.kind {\n                     debuginfo.debug_name = ident.name;\n                     if let Some(&bm) = hir.tables.pat_binding_modes().get(pat.hir_id) {\n-                        if bm == ty::BindByValue(hir::MutMutable) {\n+                        if bm == ty::BindByValue(hir::Mutability::Mutable) {\n                             mutability = Mutability::Mut;\n                         } else {\n                             mutability = Mutability::Not;"}, {"sha": "2ff690b7ccc9f179a76f6d1f5c570cb408eee9c1", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -860,8 +860,8 @@ impl ToBorrowKind for AutoBorrowMutability {\n impl ToBorrowKind for hir::Mutability {\n     fn to_borrow_kind(&self) -> BorrowKind {\n         match *self {\n-            hir::MutMutable => BorrowKind::Mut { allow_two_phase_borrow: false },\n-            hir::MutImmutable => BorrowKind::Shared,\n+            hir::Mutability::Mutable => BorrowKind::Mut { allow_two_phase_borrow: false },\n+            hir::Mutability::Immutable => BorrowKind::Shared,\n         }\n     }\n }\n@@ -1013,7 +1013,7 @@ fn convert_var(\n                         let ref_closure_ty = cx.tcx.mk_ref(region,\n                                                            ty::TypeAndMut {\n                                                                ty: closure_ty,\n-                                                               mutbl: hir::MutImmutable,\n+                                                               mutbl: hir::Mutability::Immutable,\n                                                            });\n                         Expr {\n                             ty: closure_ty,\n@@ -1034,7 +1034,7 @@ fn convert_var(\n                         let ref_closure_ty = cx.tcx.mk_ref(region,\n                                                            ty::TypeAndMut {\n                                                                ty: closure_ty,\n-                                                               mutbl: hir::MutMutable,\n+                                                               mutbl: hir::Mutability::Mutable,\n                                                            });\n                         Expr {\n                             ty: closure_ty,"}, {"sha": "b43042f2b17457b0a9b773c9a29d51f9de2185de", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -257,7 +257,7 @@ pub enum ExprKind<'tcx> {\n         closure_id: DefId,\n         substs: UpvarSubsts<'tcx>,\n         upvars: Vec<ExprRef<'tcx>>,\n-        movability: Option<hir::GeneratorMovability>,\n+        movability: Option<hir::Movability>,\n     },\n     Literal {\n         literal: &'tcx Const<'tcx>,"}, {"sha": "52af8c13e78bedfc4aa633f100650c3be4fef223", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -351,7 +351,7 @@ fn check_for_bindings_named_same_as_variants(cx: &MatchVisitor<'_, '_>, pat: &Pa\n     pat.walk(|p| {\n         if let hir::PatKind::Binding(_, _, ident, None) = p.kind {\n             if let Some(&bm) = cx.tables.pat_binding_modes().get(p.hir_id) {\n-                if bm != ty::BindByValue(hir::MutImmutable) {\n+                if bm != ty::BindByValue(hir::Mutability::Immutable) {\n                     // Nothing to check.\n                     return true;\n                 }"}, {"sha": "0885c9578294d82030bfd39543582759d324ea0a", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -591,14 +591,14 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                 let bm = *self.tables.pat_binding_modes().get(pat.hir_id)\n                                                          .expect(\"missing binding mode\");\n                 let (mutability, mode) = match bm {\n-                    ty::BindByValue(hir::MutMutable) =>\n+                    ty::BindByValue(hir::Mutability::Mutable) =>\n                         (Mutability::Mut, BindingMode::ByValue),\n-                    ty::BindByValue(hir::MutImmutable) =>\n+                    ty::BindByValue(hir::Mutability::Immutable) =>\n                         (Mutability::Not, BindingMode::ByValue),\n-                    ty::BindByReference(hir::MutMutable) =>\n+                    ty::BindByReference(hir::Mutability::Mutable) =>\n                         (Mutability::Not, BindingMode::ByRef(\n                             BorrowKind::Mut { allow_two_phase_borrow: false })),\n-                    ty::BindByReference(hir::MutImmutable) =>\n+                    ty::BindByReference(hir::Mutability::Immutable) =>\n                         (Mutability::Not, BindingMode::ByRef(\n                             BorrowKind::Shared)),\n                 };"}, {"sha": "68bb0a3e435df1c386b5bfe37d08e2bd58c5eace", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -214,16 +214,16 @@ for\n                 // const qualification enforces it. We can lift it in the future.\n                 match (self.mode, mutability) {\n                     // immutable references are fine everywhere\n-                    (_, hir::Mutability::MutImmutable) => {},\n+                    (_, hir::Mutability::Immutable) => {},\n                     // all is \"good and well\" in the unsoundness of `static mut`\n \n                     // mutable references are ok in `static`. Either they are treated as immutable\n                     // because they are behind an immutable one, or they are behind an `UnsafeCell`\n                     // and thus ok.\n-                    (InternMode::Static, hir::Mutability::MutMutable) => {},\n+                    (InternMode::Static, hir::Mutability::Mutable) => {},\n                     // we statically prevent `&mut T` via `const_qualif` and double check this here\n-                    (InternMode::ConstBase, hir::Mutability::MutMutable) |\n-                    (InternMode::Const, hir::Mutability::MutMutable) => {\n+                    (InternMode::ConstBase, hir::Mutability::Mutable) |\n+                    (InternMode::Const, hir::Mutability::Mutable) => {\n                         match referenced_ty.kind {\n                             ty::Array(_, n)\n                                 if n.eval_usize(self.ecx.tcx.tcx, self.ecx.param_env) == 0 => {}\n@@ -241,7 +241,7 @@ for\n                     // If there's an immutable reference or we are inside a static, then our\n                     // mutable reference is equivalent to an immutable one. As an example:\n                     // `&&mut Foo` is semantically equivalent to `&&Foo`\n-                    (Mutability::Mutable, hir::Mutability::MutMutable) => Mutability::Mutable,\n+                    (Mutability::Mutable, hir::Mutability::Mutable) => Mutability::Mutable,\n                     _ => Mutability::Immutable,\n                 };\n                 // Recursing behind references changes the intern mode for constants in order to\n@@ -273,9 +273,9 @@ pub fn intern_const_alloc_recursive(\n ) -> InterpResult<'tcx> {\n     let tcx = ecx.tcx;\n     let (base_mutability, base_intern_mode) = match place_mut {\n-        Some(hir::Mutability::MutImmutable) => (Mutability::Immutable, InternMode::Static),\n+        Some(hir::Mutability::Immutable) => (Mutability::Immutable, InternMode::Static),\n         // `static mut` doesn't care about interior mutability, it's mutable anyway\n-        Some(hir::Mutability::MutMutable) => (Mutability::Mutable, InternMode::Static),\n+        Some(hir::Mutability::Mutable) => (Mutability::Mutable, InternMode::Static),\n         // consts, promoteds. FIXME: what about array lengths, array initializers?\n         None => (Mutability::Immutable, InternMode::ConstBase),\n     };"}, {"sha": "2913d6e59eb3f21e7b17703b38c09175ab2b1920", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -456,7 +456,7 @@ impl CloneShimBuilder<'tcx> {\n             Mutability::Not,\n             tcx.mk_ref(tcx.lifetimes.re_erased, ty::TypeAndMut {\n                 ty,\n-                mutbl: hir::Mutability::MutImmutable,\n+                mutbl: hir::Mutability::Immutable,\n             })\n         );\n \n@@ -736,7 +736,7 @@ fn build_call_shim<'tcx>(\n                 Mutability::Not,\n                 tcx.mk_ref(tcx.lifetimes.re_erased, ty::TypeAndMut {\n                     ty: sig.inputs()[0],\n-                    mutbl: hir::Mutability::MutMutable\n+                    mutbl: hir::Mutability::Mutable\n                 }),\n                 span\n             ));"}, {"sha": "a5b711e75a603e01535d1bde8c7d74bfe312be10", "filename": "src/librustc_mir/transform/check_consts/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -82,8 +82,8 @@ impl ConstKind {\n \n             HirKind::Const => ConstKind::Const,\n \n-            HirKind::Static(hir::MutImmutable) => ConstKind::Static,\n-            HirKind::Static(hir::MutMutable) => ConstKind::StaticMut,\n+            HirKind::Static(hir::Mutability::Immutable) => ConstKind::Static,\n+            HirKind::Static(hir::Mutability::Mutable) => ConstKind::StaticMut,\n         };\n \n         Some(mode)"}, {"sha": "37c239001a505f429a486a662fd11598a9078429", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -392,7 +392,7 @@ fn make_generator_state_argument_indirect<'tcx>(\n \n     let ref_gen_ty = tcx.mk_ref(region, ty::TypeAndMut {\n         ty: gen_ty,\n-        mutbl: hir::MutMutable\n+        mutbl: hir::Mutability::Mutable\n     });\n \n     // Replace the by value generator argument\n@@ -977,7 +977,7 @@ fn create_generator_drop_shim<'tcx>(\n         mutability: Mutability::Mut,\n         ty: tcx.mk_ptr(ty::TypeAndMut {\n             ty: gen_ty,\n-            mutbl: hir::Mutability::MutMutable,\n+            mutbl: hir::Mutability::Mutable,\n         }),\n         user_ty: UserTypeProjections::none(),\n         name: None,\n@@ -1192,7 +1192,7 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n                 (substs.upvar_tys(def_id, tcx).collect(),\n                  substs.witness(def_id, tcx),\n                  substs.discr_ty(tcx),\n-                 movability == hir::GeneratorMovability::Movable)\n+                 movability == hir::Movability::Movable)\n             }\n             _ => bug!(),\n         };"}, {"sha": "39720af4cb5d60f26053b1055a99a69981036a7f", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -1367,8 +1367,8 @@ fn determine_mode(tcx: TyCtxt<'_>, hir_id: HirId, def_id: DefId) -> Mode {\n         hir::BodyOwnerKind::Fn if tcx.is_const_fn(def_id) => Mode::ConstFn,\n         hir::BodyOwnerKind::Fn => Mode::NonConstFn,\n         hir::BodyOwnerKind::Const => Mode::Const,\n-        hir::BodyOwnerKind::Static(hir::MutImmutable) => Mode::Static,\n-        hir::BodyOwnerKind::Static(hir::MutMutable) => Mode::StaticMut,\n+        hir::BodyOwnerKind::Static(hir::Mutability::Immutable) => Mode::Static,\n+        hir::BodyOwnerKind::Static(hir::Mutability::Mutable) => Mode::StaticMut,\n     }\n }\n "}, {"sha": "83bde5ed34eaeca6f080407088b17b28bd70de8d", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -80,7 +80,7 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, def_id: DefId, body: &'a Body<'tcx>) -\n fn check_ty(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span, fn_def_id: DefId) -> McfResult {\n     for ty in ty.walk() {\n         match ty.kind {\n-            ty::Ref(_, _, hir::Mutability::MutMutable) => return Err((\n+            ty::Ref(_, _, hir::Mutability::Mutable) => return Err((\n                 span,\n                 \"mutable references in const fn are unstable\".into(),\n             )),"}, {"sha": "67e5bfafafd12fe7f1223382ebb877c4891d68e4", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -521,7 +521,7 @@ where\n \n         let ref_ty = tcx.mk_ref(tcx.lifetimes.re_erased, ty::TypeAndMut {\n             ty,\n-            mutbl: hir::Mutability::MutMutable\n+            mutbl: hir::Mutability::Mutable\n         });\n         let ref_place = self.new_temp(ref_ty);\n         let unit_temp = Place::from(self.new_temp(tcx.mk_unit()));\n@@ -580,7 +580,7 @@ where\n \n         let ref_ty = tcx.mk_ref(tcx.lifetimes.re_erased, ty::TypeAndMut {\n             ty: ety,\n-            mutbl: hir::Mutability::MutMutable\n+            mutbl: hir::Mutability::Mutable\n         });\n         let ptr = &Place::from(self.new_temp(ref_ty));\n         let can_go = &Place::from(self.new_temp(tcx.types.bool));"}, {"sha": "60525ba6b39c44f81f08f3e714d3674a1f14a3d5", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -7,7 +7,7 @@ use rustc::ty::TyCtxt;\n use rustc::hir::def_id::DefId;\n use rustc::hir::map::Map;\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n-use rustc::hir::{self, Node, Destination, GeneratorMovability};\n+use rustc::hir::{self, Node, Destination, Movability};\n use syntax::struct_span_err;\n use syntax_pos::Span;\n use errors::Applicability;\n@@ -59,7 +59,7 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                 self.with_context(Loop(source), |v| v.visit_block(&b));\n             }\n             hir::ExprKind::Closure(_, ref function_decl, b, span, movability) => {\n-                let cx = if let Some(GeneratorMovability::Static) = movability {\n+                let cx = if let Some(Movability::Static) = movability {\n                     AsyncClosure(span)\n                 } else {\n                     Closure(span)"}, {"sha": "3ad68d4a9dfa668c511590954f5432c9194b77b1", "filename": "src/librustc_traits/chalk_context/program_clauses/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -243,7 +243,7 @@ crate fn assemble_builtin_copy_clone_impls<'tcx>(\n         ty::Float(..) |\n         ty::RawPtr(..) |\n         ty::Never |\n-        ty::Ref(_, _, hir::MutImmutable) => (),\n+        ty::Ref(_, _, hir::Mutability::Immutable) => (),\n \n         // Non parametric primitive types.\n         ty::Infer(ty::IntVar(_)) |\n@@ -319,7 +319,7 @@ crate fn assemble_builtin_copy_clone_impls<'tcx>(\n         ty::Generator(..) |\n         ty::Str |\n         ty::Slice(..) |\n-        ty::Ref(_, _, hir::MutMutable) => (),\n+        ty::Ref(_, _, hir::Mutability::Mutable) => (),\n \n         ty::Bound(..) |\n         ty::GeneratorWitness(..) |"}, {"sha": "96ba4d497cbf570c3319e875e8c8c5297cc37768", "filename": "src/librustc_traits/generic_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_traits%2Fgeneric_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_traits%2Fgeneric_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fgeneric_types.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -76,6 +76,6 @@ crate fn generator(tcx: TyCtxt<'tcx>, def_id: DefId) -> Ty<'tcx> {\n     tcx.mk_generator(\n         def_id,\n         InternalSubsts::bound_vars_for_item(tcx, def_id),\n-        hir::GeneratorMovability::Movable\n+        hir::Movability::Movable\n     )\n }"}, {"sha": "6a35f9b84525824cfe4efba9cff3c2faa340f275", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -430,8 +430,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let contains_ref_bindings = arms.iter()\n             .filter_map(|a| a.pat.contains_explicit_ref_binding())\n             .max_by_key(|m| match *m {\n-                hir::MutMutable => 1,\n-                hir::MutImmutable => 0,\n+                hir::Mutability::Mutable => 1,\n+                hir::Mutability::Immutable => 0,\n             });\n \n         if let Some(m) = contains_ref_bindings {"}, {"sha": "c195e91a52be7a0655d16c6bd38415711e1a497f", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -215,8 +215,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if borrow {\n                     if let ty::Ref(region, _, mutbl) = method.sig.inputs()[0].kind {\n                         let mutbl = match mutbl {\n-                            hir::MutImmutable => AutoBorrowMutability::Immutable,\n-                            hir::MutMutable => AutoBorrowMutability::Mutable {\n+                            hir::Mutability::Immutable => AutoBorrowMutability::Immutable,\n+                            hir::Mutability::Mutable => AutoBorrowMutability::Mutable {\n                                 // For initial two-phase borrow\n                                 // deployment, conservatively omit\n                                 // overloaded function call ops."}, {"sha": "3245f2cca79cbe2aa5cda07fd1e483542e069537", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -627,7 +627,8 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n     ) -> Result<CastKind, CastError> {\n         // array-ptr-cast.\n \n-        if m_expr.mutbl == hir::MutImmutable && m_cast.mutbl == hir::MutImmutable {\n+        if m_expr.mutbl == hir::Mutability::Immutable &&\n+            m_cast.mutbl == hir::Mutability::Immutable {\n             if let ty::Array(ety, _) = m_expr.ty.kind {\n                 // Due to the limitations of LLVM global constants,\n                 // region pointers end up pointing at copies of"}, {"sha": "30cb0d4f96766925203bac150276f09279a7087a", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -36,10 +36,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn check_expr_closure(\n         &self,\n         expr: &hir::Expr,\n-        _capture: hir::CaptureClause,\n+        _capture: hir::CaptureBy,\n         decl: &'tcx hir::FnDecl,\n         body_id: hir::BodyId,\n-        gen: Option<hir::GeneratorMovability>,\n+        gen: Option<hir::Movability>,\n         expected: Expectation<'tcx>,\n     ) -> Ty<'tcx> {\n         debug!(\n@@ -64,7 +64,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         opt_kind: Option<ty::ClosureKind>,\n         decl: &'tcx hir::FnDecl,\n         body: &'tcx hir::Body,\n-        gen: Option<hir::GeneratorMovability>,\n+        gen: Option<hir::Movability>,\n         expected_sig: Option<ExpectedSig<'tcx>>,\n     ) -> Ty<'tcx> {\n         debug!("}, {"sha": "a105755ca9aac3470e81f551fef3a63b7823d7fd", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -99,10 +99,10 @@ fn coerce_mutbls<'tcx>(from_mutbl: hir::Mutability,\n                        to_mutbl: hir::Mutability)\n                        -> RelateResult<'tcx, ()> {\n     match (from_mutbl, to_mutbl) {\n-        (hir::MutMutable, hir::MutMutable) |\n-        (hir::MutImmutable, hir::MutImmutable) |\n-        (hir::MutMutable, hir::MutImmutable) => Ok(()),\n-        (hir::MutImmutable, hir::MutMutable) => Err(TypeError::Mutability),\n+        (hir::Mutability::Mutable, hir::Mutability::Mutable) |\n+        (hir::Mutability::Immutable, hir::Mutability::Immutable) |\n+        (hir::Mutability::Mutable, hir::Mutability::Immutable) => Ok(()),\n+        (hir::Mutability::Immutable, hir::Mutability::Mutable) => Err(TypeError::Mutability),\n     }\n }\n \n@@ -410,7 +410,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             }\n         };\n \n-        if ty == a && mt_a.mutbl == hir::MutImmutable && autoderef.step_count() == 1 {\n+        if ty == a && mt_a.mutbl == hir::Mutability::Immutable && autoderef.step_count() == 1 {\n             // As a special case, if we would produce `&'a *x`, that's\n             // a total no-op. We end up with the type `&'a T` just as\n             // we started with.  In that case, just skip it\n@@ -422,7 +422,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             // `self.x` both have `&mut `type would be a move of\n             // `self.x`, but we auto-coerce it to `foo(&mut *self.x)`,\n             // which is a borrow.\n-            assert_eq!(mt_b.mutbl, hir::MutImmutable); // can only coerce &T -> &U\n+            assert_eq!(mt_b.mutbl, hir::Mutability::Immutable); // can only coerce &T -> &U\n             return success(vec![], ty, obligations);\n         }\n \n@@ -439,8 +439,8 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             _ => span_bug!(span, \"expected a ref type, got {:?}\", ty),\n         };\n         let mutbl = match mt_b.mutbl {\n-            hir::MutImmutable => AutoBorrowMutability::Immutable,\n-            hir::MutMutable => AutoBorrowMutability::Mutable {\n+            hir::Mutability::Immutable => AutoBorrowMutability::Immutable,\n+            hir::Mutability::Mutable => AutoBorrowMutability::Mutable {\n                 allow_two_phase_borrow: self.allow_two_phase,\n             }\n         };\n@@ -485,8 +485,8 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 let coercion = Coercion(self.cause.span);\n                 let r_borrow = self.next_region_var(coercion);\n                 let mutbl = match mutbl_b {\n-                    hir::MutImmutable => AutoBorrowMutability::Immutable,\n-                    hir::MutMutable => AutoBorrowMutability::Mutable {\n+                    hir::Mutability::Immutable => AutoBorrowMutability::Immutable,\n+                    hir::Mutability::Mutable => AutoBorrowMutability::Mutable {\n                         // We don't allow two-phase borrows here, at least for initial\n                         // implementation. If it happens that this coercion is a function argument,\n                         // the reborrow in coerce_borrowed_ptr will pick it up."}, {"sha": "2f0b1c358f08dc8a9e2143ca137994e1f9467f62", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -532,8 +532,8 @@ fn compare_self_type<'tcx>(\n             let can_eq_self = |ty| infcx.can_eq(param_env, untransformed_self_ty, ty).is_ok();\n             match ExplicitSelf::determine(self_arg_ty, can_eq_self) {\n                 ExplicitSelf::ByValue => \"self\".to_owned(),\n-                ExplicitSelf::ByReference(_, hir::MutImmutable) => \"&self\".to_owned(),\n-                ExplicitSelf::ByReference(_, hir::MutMutable) => \"&mut self\".to_owned(),\n+                ExplicitSelf::ByReference(_, hir::Mutability::Immutable) => \"&self\".to_owned(),\n+                ExplicitSelf::ByReference(_, hir::Mutability::Mutable) => \"&mut self\".to_owned(),\n                 _ => format!(\"self: {}\", self_arg_ty)\n             }\n         })"}, {"sha": "5d9b3a8fba4d77e613f63ee23cdd65145ef265b4", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -398,10 +398,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // bar(&x); // error, expected &mut\n                 // ```\n                 let ref_ty = match mutability {\n-                    hir::Mutability::MutMutable => {\n+                    hir::Mutability::Mutable => {\n                         self.tcx.mk_mut_ref(self.tcx.mk_region(ty::ReStatic), checked_ty)\n                     }\n-                    hir::Mutability::MutImmutable => {\n+                    hir::Mutability::Immutable => {\n                         self.tcx.mk_imm_ref(self.tcx.mk_region(ty::ReStatic), checked_ty)\n                     }\n                 };\n@@ -451,7 +451,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         })) = self.tcx.hir().find(\n                             self.tcx.hir().get_parent_node(expr.hir_id),\n                         ) {\n-                            if mutability == hir::Mutability::MutMutable {\n+                            if mutability == hir::Mutability::Mutable {\n                                 // Found the following case:\n                                 // fn foo(opt: &mut Option<String>){ opt = None }\n                                 //                                   ---   ^^^^\n@@ -470,12 +470,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n \n                         return Some(match mutability {\n-                            hir::Mutability::MutMutable => (\n+                            hir::Mutability::Mutable => (\n                                 sp,\n                                 \"consider mutably borrowing here\",\n                                 format!(\"{}&mut {}\", field_name, sugg_expr),\n                             ),\n-                            hir::Mutability::MutImmutable => (\n+                            hir::Mutability::Immutable => (\n                                 sp,\n                                 \"consider borrowing here\",\n                                 format!(\"{}&{}\", field_name, sugg_expr),"}, {"sha": "cfe36b57c2da18ab86ec90627cca99477136bd7c", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -363,8 +363,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         let method = self.register_infer_ok_obligations(ok);\n                         if let ty::Ref(region, _, mutbl) = method.sig.inputs()[0].kind {\n                             let mutbl = match mutbl {\n-                                hir::MutImmutable => AutoBorrowMutability::Immutable,\n-                                hir::MutMutable => AutoBorrowMutability::Mutable {\n+                                hir::Mutability::Immutable => AutoBorrowMutability::Immutable,\n+                                hir::Mutability::Mutable => AutoBorrowMutability::Mutable {\n                                     // (It shouldn't actually matter for unary ops whether\n                                     // we enable two-phase borrows or not, since a unary\n                                     // op has no additional operands.)"}, {"sha": "1a1b98f582ff2c8a37189936f30a77e9d32d3bef", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -172,7 +172,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n             \"prefetch_read_instruction\" | \"prefetch_write_instruction\" => {\n                 (1, vec![tcx.mk_ptr(ty::TypeAndMut {\n                           ty: param(0),\n-                          mutbl: hir::MutImmutable\n+                          mutbl: hir::Mutability::Immutable\n                          }), tcx.types.i32],\n                     tcx.mk_unit())\n             }\n@@ -188,25 +188,25 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n                vec![\n                   tcx.mk_ptr(ty::TypeAndMut {\n                       ty: param(0),\n-                      mutbl: hir::MutImmutable\n+                      mutbl: hir::Mutability::Immutable\n                   }),\n                   tcx.types.isize\n                ],\n                tcx.mk_ptr(ty::TypeAndMut {\n                    ty: param(0),\n-                   mutbl: hir::MutImmutable\n+                   mutbl: hir::Mutability::Immutable\n                }))\n             }\n             \"copy\" | \"copy_nonoverlapping\" => {\n               (1,\n                vec![\n                   tcx.mk_ptr(ty::TypeAndMut {\n                       ty: param(0),\n-                      mutbl: hir::MutImmutable\n+                      mutbl: hir::Mutability::Immutable\n                   }),\n                   tcx.mk_ptr(ty::TypeAndMut {\n                       ty: param(0),\n-                      mutbl: hir::MutMutable\n+                      mutbl: hir::Mutability::Mutable\n                   }),\n                   tcx.types.usize,\n                ],\n@@ -217,11 +217,11 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n                vec![\n                   tcx.mk_ptr(ty::TypeAndMut {\n                       ty: param(0),\n-                      mutbl: hir::MutMutable\n+                      mutbl: hir::Mutability::Mutable\n                   }),\n                   tcx.mk_ptr(ty::TypeAndMut {\n                       ty: param(0),\n-                      mutbl: hir::MutImmutable\n+                      mutbl: hir::Mutability::Immutable\n                   }),\n                   tcx.types.usize,\n                ],\n@@ -232,7 +232,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n                vec![\n                   tcx.mk_ptr(ty::TypeAndMut {\n                       ty: param(0),\n-                      mutbl: hir::MutMutable\n+                      mutbl: hir::Mutability::Mutable\n                   }),\n                   tcx.types.u8,\n                   tcx.types.usize,\n@@ -357,14 +357,14 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n             }\n \n             \"va_start\" | \"va_end\" => {\n-                match mk_va_list_ty(hir::MutMutable) {\n+                match mk_va_list_ty(hir::Mutability::Mutable) {\n                     Some((va_list_ref_ty, _)) => (0, vec![va_list_ref_ty], tcx.mk_unit()),\n                     None => bug!(\"`va_list` language item needed for C-variadic intrinsics\")\n                 }\n             }\n \n             \"va_copy\" => {\n-                match mk_va_list_ty(hir::MutImmutable) {\n+                match mk_va_list_ty(hir::Mutability::Immutable) {\n                     Some((va_list_ref_ty, va_list_ty)) => {\n                         let va_list_ptr_ty = tcx.mk_mut_ptr(va_list_ty);\n                         (0, vec![va_list_ptr_ty, va_list_ref_ty], tcx.mk_unit())\n@@ -374,7 +374,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n             }\n \n             \"va_arg\" => {\n-                match mk_va_list_ty(hir::MutMutable) {\n+                match mk_va_list_ty(hir::Mutability::Mutable) {\n                     Some((va_list_ref_ty, _)) => (1, vec![va_list_ref_ty], param(0)),\n                     None => bug!(\"`va_list` language item needed for C-variadic intrinsics\")\n                 }"}, {"sha": "4bdab84faf1235ee1bdc13e3ed94f1ccd9b63e87", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -131,7 +131,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n             sig: method_sig,\n         };\n \n-        if let Some(hir::MutMutable) = pick.autoref {\n+        if let Some(hir::Mutability::Mutable) = pick.autoref {\n             self.convert_place_derefs_to_mutable();\n         }\n \n@@ -172,8 +172,8 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n                 ty: target\n             });\n             let mutbl = match mutbl {\n-                hir::MutImmutable => AutoBorrowMutability::Immutable,\n-                hir::MutMutable => AutoBorrowMutability::Mutable {\n+                hir::Mutability::Immutable => AutoBorrowMutability::Immutable,\n+                hir::Mutability::Mutable => AutoBorrowMutability::Mutable {\n                     // Method call receivers are the primary use case\n                     // for two-phase borrows.\n                     allow_two_phase_borrow: AllowTwoPhase::Yes,\n@@ -554,8 +554,8 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n                 if let Adjust::Borrow(AutoBorrow::Ref(..)) = adjustment.kind {\n                     debug!(\"convert_place_op_to_mutable: converting autoref {:?}\", adjustment);\n                     let mutbl = match mutbl {\n-                        hir::MutImmutable => AutoBorrowMutability::Immutable,\n-                        hir::MutMutable => AutoBorrowMutability::Mutable {\n+                        hir::Mutability::Immutable => AutoBorrowMutability::Immutable,\n+                        hir::Mutability::Mutable => AutoBorrowMutability::Mutable {\n                             // For initial two-phase borrow\n                             // deployment, conservatively omit\n                             // overloaded operators."}, {"sha": "7ea7dba5a2822185ce8a41ad99bfa337d85602dd", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -606,11 +606,11 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 let lang_def_id = lang_items.slice_u8_alloc_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::RawPtr(ty::TypeAndMut { ty: _, mutbl: hir::MutImmutable }) => {\n+            ty::RawPtr(ty::TypeAndMut { ty: _, mutbl: hir::Mutability::Immutable }) => {\n                 let lang_def_id = lang_items.const_ptr_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::RawPtr(ty::TypeAndMut { ty: _, mutbl: hir::MutMutable }) => {\n+            ty::RawPtr(ty::TypeAndMut { ty: _, mutbl: hir::Mutability::Mutable }) => {\n                 let lang_def_id = lang_items.mut_ptr_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n@@ -1045,8 +1045,8 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                         span_bug!(self.span, \"{:?} was applicable but now isn't?\", step.self_ty)\n                     });\n                 self.pick_by_value_method(step, self_ty).or_else(|| {\n-                self.pick_autorefd_method(step, self_ty, hir::MutImmutable).or_else(|| {\n-                self.pick_autorefd_method(step, self_ty, hir::MutMutable)\n+                self.pick_autorefd_method(step, self_ty, hir::Mutability::Immutable).or_else(|| {\n+                self.pick_autorefd_method(step, self_ty, hir::Mutability::Mutable)\n             })})})\n             .next()\n     }"}, {"sha": "72b5018589cf8367d62e274a26e92f31da0ba2fd", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -387,8 +387,8 @@ pub enum Needs {\n impl Needs {\n     fn maybe_mut_place(m: hir::Mutability) -> Self {\n         match m {\n-            hir::MutMutable => Needs::MutPlace,\n-            hir::MutImmutable => Needs::None,\n+            hir::Mutability::Mutable => Needs::MutPlace,\n+            hir::Mutability::Immutable => Needs::None,\n         }\n     }\n }\n@@ -1090,7 +1090,7 @@ struct GeneratorTypes<'tcx> {\n     interior: Ty<'tcx>,\n \n     /// Indicates if the generator is movable or static (immovable).\n-    movability: hir::GeneratorMovability,\n+    movability: hir::Movability,\n }\n \n /// Helper used for fns and closures. Does the grungy work of checking a function\n@@ -1106,7 +1106,7 @@ fn check_fn<'a, 'tcx>(\n     decl: &'tcx hir::FnDecl,\n     fn_id: hir::HirId,\n     body: &'tcx hir::Body,\n-    can_be_generator: Option<hir::GeneratorMovability>,\n+    can_be_generator: Option<hir::Movability>,\n ) -> (FnCtxt<'a, 'tcx>, Option<GeneratorTypes<'tcx>>) {\n     let mut fn_sig = fn_sig.clone();\n \n@@ -1281,7 +1281,7 @@ fn check_fn<'a, 'tcx>(\n                         ty::Ref(region, ty, mutbl) => match ty.kind {\n                             ty::Adt(ref adt, _) => {\n                                 adt.did == panic_info_did &&\n-                                    mutbl == hir::Mutability::MutImmutable &&\n+                                    mutbl == hir::Mutability::Immutable &&\n                                     *region != RegionKind::ReStatic\n                             },\n                             _ => false,\n@@ -3197,8 +3197,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let mut adjustments = autoderef.adjust_steps(self, needs);\n                 if let ty::Ref(region, _, r_mutbl) = method.sig.inputs()[0].kind {\n                     let mutbl = match r_mutbl {\n-                        hir::MutImmutable => AutoBorrowMutability::Immutable,\n-                        hir::MutMutable => AutoBorrowMutability::Mutable {\n+                        hir::Mutability::Immutable => AutoBorrowMutability::Immutable,\n+                        hir::Mutability::Mutable => AutoBorrowMutability::Mutable {\n                             // Indexing can be desugared to a method call,\n                             // so maybe we could use two-phase here.\n                             // See the documentation of AllowTwoPhase for why that's"}, {"sha": "81a3159790559551e7c0c6d152f4ce4939386bfa", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -204,8 +204,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if is_assign == IsAssign::Yes || by_ref_binop {\n                     if let ty::Ref(region, _, mutbl) = method.sig.inputs()[0].kind {\n                         let mutbl = match mutbl {\n-                            hir::MutImmutable => AutoBorrowMutability::Immutable,\n-                            hir::MutMutable => AutoBorrowMutability::Mutable {\n+                            hir::Mutability::Immutable => AutoBorrowMutability::Immutable,\n+                            hir::Mutability::Mutable => AutoBorrowMutability::Mutable {\n                                 // Allow two-phase borrows for binops in initial deployment\n                                 // since they desugar to methods\n                                 allow_two_phase_borrow: AllowTwoPhase::Yes,\n@@ -221,8 +221,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if by_ref_binop {\n                     if let ty::Ref(region, _, mutbl) = method.sig.inputs()[1].kind {\n                         let mutbl = match mutbl {\n-                            hir::MutImmutable => AutoBorrowMutability::Immutable,\n-                            hir::MutMutable => AutoBorrowMutability::Mutable {\n+                            hir::Mutability::Immutable => AutoBorrowMutability::Immutable,\n+                            hir::Mutability::Mutable => AutoBorrowMutability::Mutable {\n                                 // Allow two-phase borrows for binops in initial deployment\n                                 // since they desugar to methods\n                                 allow_two_phase_borrow: AllowTwoPhase::Yes,"}, {"sha": "a4c9862bc742d70f4d02ed5d089e6d1c6f503b83", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -30,7 +30,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\";\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn check_pat_top(&self, pat: &'tcx Pat, expected: Ty<'tcx>, discrim_span: Option<Span>) {\n-        let def_bm = BindingMode::BindByValue(hir::Mutability::MutImmutable);\n+        let def_bm = BindingMode::BindByValue(hir::Mutability::Immutable);\n         self.check_pat(pat, expected, def_bm, discrim_span);\n     }\n \n@@ -194,7 +194,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             //\n             // See issue #46688.\n             let def_bm = match pat.kind {\n-                PatKind::Ref(..) => ty::BindByValue(hir::MutImmutable),\n+                PatKind::Ref(..) => ty::BindByValue(hir::Mutability::Immutable),\n                 _ => def_bm,\n             };\n             (expected, def_bm)\n@@ -275,10 +275,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // (depending on whether we observe `&` or `&mut`).\n                 ty::BindByValue(_) |\n                 // When `ref mut`, stay a `ref mut` (on `&mut`) or downgrade to `ref` (on `&`).\n-                ty::BindByReference(hir::Mutability::MutMutable) => inner_mutability,\n+                ty::BindByReference(hir::Mutability::Mutable) => inner_mutability,\n                 // Once a `ref`, always a `ref`.\n                 // This is because a `& &mut` cannot mutate the underlying value.\n-                ty::BindByReference(m @ hir::Mutability::MutImmutable) => m,\n+                ty::BindByReference(m @ hir::Mutability::Immutable) => m,\n             });\n         }\n "}, {"sha": "390ee0d0f8380ed1a0b17ba37bf0c43453f6a6fa", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -81,7 +81,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         closure_hir_id: hir::HirId,\n         span: Span,\n         body: &hir::Body,\n-        capture_clause: hir::CaptureClause,\n+        capture_clause: hir::CaptureBy,\n     ) {\n         /*!\n          * Analysis starting point.\n@@ -141,8 +141,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 upvar_list.insert(var_hir_id, upvar_id);\n \n                 let capture_kind = match capture_clause {\n-                    hir::CaptureByValue => ty::UpvarCapture::ByValue,\n-                    hir::CaptureByRef => {\n+                    hir::CaptureBy::Value => ty::UpvarCapture::ByValue,\n+                    hir::CaptureBy::Ref => {\n                         let origin = UpvarRegion(upvar_id, span);\n                         let upvar_region = self.next_region_var(origin);\n                         let upvar_borrow = ty::UpvarBorrow {"}, {"sha": "d613abc435288e57a63eae2203e38d351af6cab3", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -358,7 +358,7 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUn\n         let check_mutbl = |mt_a: ty::TypeAndMut<'tcx>,\n                            mt_b: ty::TypeAndMut<'tcx>,\n                            mk_ptr: &dyn Fn(Ty<'tcx>) -> Ty<'tcx>| {\n-            if (mt_a.mutbl, mt_b.mutbl) == (hir::MutImmutable, hir::MutMutable) {\n+            if (mt_a.mutbl, mt_b.mutbl) == (hir::Mutability::Immutable, hir::Mutability::Mutable) {\n                 infcx.report_mismatched_types(&cause,\n                                               mk_ptr(mt_b.ty),\n                                               target,"}, {"sha": "5daa8f5d3191b1640b69097d7fb575ec257b7ccb", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -107,15 +107,15 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                                           \"[T]\",\n                                           item.span);\n             }\n-            ty::RawPtr(ty::TypeAndMut { ty: _, mutbl: hir::MutImmutable }) => {\n+            ty::RawPtr(ty::TypeAndMut { ty: _, mutbl: hir::Mutability::Immutable }) => {\n                 self.check_primitive_impl(def_id,\n                                           lang_items.const_ptr_impl(),\n                                           None,\n                                           \"const_ptr\",\n                                           \"*const T\",\n                                           item.span);\n             }\n-            ty::RawPtr(ty::TypeAndMut { ty: _, mutbl: hir::MutMutable }) => {\n+            ty::RawPtr(ty::TypeAndMut { ty: _, mutbl: hir::Mutability::Mutable }) => {\n                 self.check_primitive_impl(def_id,\n                                           lang_items.mut_ptr_impl(),\n                                           None,"}, {"sha": "1e1be72221fcb052001404735101bd8909a776bb", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -454,12 +454,12 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                                mt: &ty::TypeAndMut<'tcx>,\n                                variance: VarianceTermPtr<'a>) {\n         match mt.mutbl {\n-            hir::MutMutable => {\n+            hir::Mutability::Mutable => {\n                 let invar = self.invariant(variance);\n                 self.add_constraints_from_ty(current, mt.ty, invar);\n             }\n \n-            hir::MutImmutable => {\n+            hir::Mutability::Immutable => {\n                 self.add_constraints_from_ty(current, mt.ty, variance);\n             }\n         }"}, {"sha": "97f41fdc5ba463f9c83f6d6c1ff97415dcafbebc", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -3859,8 +3859,8 @@ pub enum Mutability {\n impl Clean<Mutability> for hir::Mutability {\n     fn clean(&self, _: &DocContext<'_>) -> Mutability {\n         match self {\n-            &hir::MutMutable => Mutable,\n-            &hir::MutImmutable => Immutable,\n+            &hir::Mutability::Mutable => Mutable,\n+            &hir::Mutability::Immutable => Immutable,\n         }\n     }\n }"}, {"sha": "c83931a0668cfa63bc6670391b762f00d013a831", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 53, "deletions": 15, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56237d75b4271a8a2e0f47d86ea76ebf6d966152/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=56237d75b4271a8a2e0f47d86ea76ebf6d966152", "patch": "@@ -733,6 +733,30 @@ pub enum Mutability {\n     Immutable,\n }\n \n+impl Mutability {\n+    /// Returns `MutMutable` only if both `self` and `other` are mutable.\n+    pub fn and(self, other: Self) -> Self {\n+        match self {\n+            Mutability::Mutable => other,\n+            Mutability::Immutable => Mutability::Immutable,\n+        }\n+    }\n+\n+    pub fn invert(self) -> Self {\n+        match self {\n+            Mutability::Mutable => Mutability::Immutable,\n+            Mutability::Immutable => Mutability::Mutable,\n+        }\n+    }\n+\n+    pub fn prefix_str(&self) -> &'static str {\n+        match self {\n+            Mutability::Mutable => \"mut \",\n+            Mutability::Immutable => \"\",\n+        }\n+    }\n+}\n+\n #[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum BinOpKind {\n     /// The `+` operator (addition)\n@@ -1315,10 +1339,14 @@ pub enum CaptureBy {\n     Ref,\n }\n \n-/// The movability of a generator / closure literal.\n-#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n+/// The movability of a generator / closure literal:\n+/// whether a generator contains self-references, causing it to be `!Unpin`.\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash,\n+         RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum Movability {\n+    /// May contain self-references, `!Unpin`.\n     Static,\n+    /// Must not contain self-references, `Unpin`.\n     Movable,\n }\n \n@@ -1967,12 +1995,34 @@ pub enum IsAuto {\n     No,\n }\n \n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash,\n+         RustcEncodable, RustcDecodable, Debug)]\n pub enum Unsafety {\n     Unsafe,\n     Normal,\n }\n \n+impl Unsafety {\n+    pub fn prefix_str(&self) -> &'static str {\n+        match self {\n+            Unsafety::Unsafe => \"unsafe \",\n+            Unsafety::Normal => \"\",\n+        }\n+    }\n+}\n+\n+impl fmt::Display for Unsafety {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::Display::fmt(\n+            match *self {\n+                Unsafety::Normal => \"normal\",\n+                Unsafety::Unsafe => \"unsafe\",\n+            },\n+            f,\n+        )\n+    }\n+}\n+\n #[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum IsAsync {\n     Async {\n@@ -2017,18 +2067,6 @@ pub enum Defaultness {\n     Final,\n }\n \n-impl fmt::Display for Unsafety {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(\n-            match *self {\n-                Unsafety::Normal => \"normal\",\n-                Unsafety::Unsafe => \"unsafe\",\n-            },\n-            f,\n-        )\n-    }\n-}\n-\n #[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable)]\n pub enum ImplPolarity {\n     /// `impl Trait for Type`"}]}