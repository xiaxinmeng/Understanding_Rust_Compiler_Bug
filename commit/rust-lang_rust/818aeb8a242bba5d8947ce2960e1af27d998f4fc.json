{"sha": "818aeb8a242bba5d8947ce2960e1af27d998f4fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxOGFlYjhhMjQyYmJhNWQ4OTQ3Y2UyOTYwZTFhZjI3ZDk5OGY0ZmM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-21T09:41:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-21T09:41:54Z"}, "message": "Merge #5467\n\n5467: Allow null or empty values for configuration r=matklad a=kjeremy\n\nAllow the client to respond to `workspace/configuration` with `null` values. This is allowed per the spec if the client doesn't know about the configuration we've requested.\r\n\r\nThis also protects against `null` or `{}` during initialize. I'm not sure if we want to interpret `{}` as \"don't change anything\" but I think that's a reasonable approach to take.\r\n\r\nThis should help with LSP clients working out of the box.\r\n\r\nFixes #5464 \n\nCo-authored-by: kjeremy <kjeremy@gmail.com>", "tree": {"sha": "f61bb82640fd05d1e62cb614ed51cb52eb471ff8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f61bb82640fd05d1e62cb614ed51cb52eb471ff8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/818aeb8a242bba5d8947ce2960e1af27d998f4fc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfFrhiCRBK7hj4Ov3rIwAAdHIIAFeGzZsnz/Knd1KQ4N2wBONc\nFh3VaEidnTRkXmTr2OCaha1gT65hJNLXBbwTHsp2zpsAPj5vUh3K21T/AC0liyEn\nU0SM2jzbwCyF1dKOO6xz7t6GqTC6fmiLZY5S3bou5LeqreRu/q0+ehZMRCVkfnwB\n/nUr2HOKIOA0SjteHp15uOZzfYn9oJNvVqtokwPwfUqpdN1QFNLl/FKo6anpyn8x\ng7ocH40MOgnmc1eRDaQ/yaT/zNmknHpRygBiOi2z5Bc5FV8O0YMoT+z8SqBl93hE\nHsgznqakvU6FgGDRq/EdYctCElRzGDlJxN0FyhbTwm9//rLjUd0lstAUy37bkvQ=\n=duoV\n-----END PGP SIGNATURE-----\n", "payload": "tree f61bb82640fd05d1e62cb614ed51cb52eb471ff8\nparent 2ad5bf8d17389e6711be65200ef918762eba9fdc\nparent a32dd9c478fec0c21fa7416c267bdf1d2416b355\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1595324514 +0000\ncommitter GitHub <noreply@github.com> 1595324514 +0000\n\nMerge #5467\n\n5467: Allow null or empty values for configuration r=matklad a=kjeremy\n\nAllow the client to respond to `workspace/configuration` with `null` values. This is allowed per the spec if the client doesn't know about the configuration we've requested.\r\n\r\nThis also protects against `null` or `{}` during initialize. I'm not sure if we want to interpret `{}` as \"don't change anything\" but I think that's a reasonable approach to take.\r\n\r\nThis should help with LSP clients working out of the box.\r\n\r\nFixes #5464 \n\nCo-authored-by: kjeremy <kjeremy@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/818aeb8a242bba5d8947ce2960e1af27d998f4fc", "html_url": "https://github.com/rust-lang/rust/commit/818aeb8a242bba5d8947ce2960e1af27d998f4fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/818aeb8a242bba5d8947ce2960e1af27d998f4fc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ad5bf8d17389e6711be65200ef918762eba9fdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ad5bf8d17389e6711be65200ef918762eba9fdc", "html_url": "https://github.com/rust-lang/rust/commit/2ad5bf8d17389e6711be65200ef918762eba9fdc"}, {"sha": "a32dd9c478fec0c21fa7416c267bdf1d2416b355", "url": "https://api.github.com/repos/rust-lang/rust/commits/a32dd9c478fec0c21fa7416c267bdf1d2416b355", "html_url": "https://github.com/rust-lang/rust/commit/a32dd9c478fec0c21fa7416c267bdf1d2416b355"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "8947ccf07ecfe3ad66a4356c9fda2c13d8b93d6b", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/818aeb8a242bba5d8947ce2960e1af27d998f4fc/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/818aeb8a242bba5d8947ce2960e1af27d998f4fc/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=818aeb8a242bba5d8947ce2960e1af27d998f4fc", "patch": "@@ -178,6 +178,11 @@ impl Config {\n \n     pub fn update(&mut self, json: serde_json::Value) {\n         log::info!(\"Config::update({:#})\", json);\n+\n+        if json.is_null() || json.as_object().map_or(false, |it| it.is_empty()) {\n+            return;\n+        }\n+\n         let data = ConfigData::from_json(json);\n \n         self.with_sysroot = data.withSysroot;"}, {"sha": "bb7c4c0c64f9975175ffdff8d579ac4633fcf118", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/818aeb8a242bba5d8947ce2960e1af27d998f4fc/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/818aeb8a242bba5d8947ce2960e1af27d998f4fc/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=818aeb8a242bba5d8947ce2960e1af27d998f4fc", "patch": "@@ -468,6 +468,8 @@ impl GlobalState {\n                             }\n                             (None, Some(mut configs)) => {\n                                 if let Some(json) = configs.get_mut(0) {\n+                                    // Note that json can be null according to the spec if the client can't\n+                                    // provide a configuration. This is handled in Config::update below.\n                                     let mut config = this.config.clone();\n                                     config.update(json.take());\n                                     this.update_configuration(config);"}]}