{"sha": "d2aefbb286c94240e25cbe0b8cc92a1336db5408", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYWVmYmIyODZjOTQyNDBlMjVjYmUwYjhjYzkyYTEzMzZkYjU0MDg=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-01-14T04:30:32Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-01-20T08:00:08Z"}, "message": "Add `ConstnessAnd` that implements `ToPredicate`", "tree": {"sha": "0fa0e7fb17b128b2fcdd454efc945bca905159ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fa0e7fb17b128b2fcdd454efc945bca905159ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2aefbb286c94240e25cbe0b8cc92a1336db5408", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2aefbb286c94240e25cbe0b8cc92a1336db5408", "html_url": "https://github.com/rust-lang/rust/commit/d2aefbb286c94240e25cbe0b8cc92a1336db5408", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2aefbb286c94240e25cbe0b8cc92a1336db5408/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab3081a70e5d402188c26c6f3e671a3c44812d1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab3081a70e5d402188c26c6f3e671a3c44812d1b", "html_url": "https://github.com/rust-lang/rust/commit/ab3081a70e5d402188c26c6f3e671a3c44812d1b"}], "stats": {"total": 229, "additions": 155, "deletions": 74}, "files": [{"sha": "84bfc86e6a94ecc887580a428c50423d5e15a18b", "filename": "src/librustc/traits/engine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fengine.rs?ref=d2aefbb286c94240e25cbe0b8cc92a1336db5408", "patch": "@@ -1,6 +1,6 @@\n use crate::infer::InferCtxt;\n use crate::traits::Obligation;\n-use crate::ty::{self, ToPredicate, Ty, TyCtxt};\n+use crate::ty::{self, ToPredicate, Ty, TyCtxt, WithConstness};\n use rustc_hir::def_id::DefId;\n \n use super::{ChalkFulfillmentContext, FulfillmentContext, FulfillmentError};\n@@ -33,7 +33,7 @@ pub trait TraitEngine<'tcx>: 'tcx {\n                 cause,\n                 recursion_depth: 0,\n                 param_env,\n-                predicate: trait_ref.to_predicate(),\n+                predicate: trait_ref.without_const().to_predicate(),\n             },\n         );\n     }"}, {"sha": "2d02dbf82300627afad0af6d915b9d8c9df0891f", "filename": "src/librustc/traits/error_reporting/mod.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=d2aefbb286c94240e25cbe0b8cc92a1336db5408", "patch": "@@ -19,7 +19,9 @@ use crate::ty::error::ExpectedFound;\n use crate::ty::fast_reject;\n use crate::ty::fold::TypeFolder;\n use crate::ty::SubtypePredicate;\n-use crate::ty::{self, AdtKind, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{\n+    self, AdtKind, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n+};\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n@@ -130,15 +132,15 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n \n         let (cond, error) = match (cond, error) {\n-            (&ty::Predicate::Trait(..), &ty::Predicate::Trait(ref error)) => (cond, error),\n+            (&ty::Predicate::Trait(..), &ty::Predicate::Trait(ref error, _)) => (cond, error),\n             _ => {\n                 // FIXME: make this work in other cases too.\n                 return false;\n             }\n         };\n \n         for implication in super::elaborate_predicates(self.tcx, vec![cond.clone()]) {\n-            if let ty::Predicate::Trait(implication) = implication {\n+            if let ty::Predicate::Trait(implication, _) = implication {\n                 let error = error.to_poly_trait_ref();\n                 let implication = implication.to_poly_trait_ref();\n                 // FIXME: I'm just not taking associated types at all here.\n@@ -530,7 +532,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     return;\n                 }\n                 match obligation.predicate {\n-                    ty::Predicate::Trait(ref trait_predicate) => {\n+                    ty::Predicate::Trait(ref trait_predicate, _) => {\n                         let trait_predicate = self.resolve_vars_if_possible(trait_predicate);\n \n                         if self.tcx.sess.has_errors() && trait_predicate.references_error() {\n@@ -583,7 +585,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             \"{}\",\n                             message.unwrap_or_else(|| format!(\n                                 \"the trait bound `{}` is not satisfied{}\",\n-                                trait_ref.to_predicate(),\n+                                trait_ref.without_const().to_predicate(),\n                                 post_message,\n                             ))\n                         );\n@@ -695,7 +697,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                 trait_pred\n                             });\n                             let unit_obligation = Obligation {\n-                                predicate: ty::Predicate::Trait(predicate),\n+                                predicate: ty::Predicate::Trait(\n+                                    predicate,\n+                                    ast::Constness::NotConst,\n+                                ),\n                                 ..obligation.clone()\n                             };\n                             if self.predicate_may_hold(&unit_obligation) {\n@@ -988,7 +993,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     ) -> PredicateObligation<'tcx> {\n         let new_trait_ref =\n             ty::TraitRef { def_id, substs: self.tcx.mk_substs_trait(output_ty, &[]) };\n-        Obligation::new(cause, param_env, new_trait_ref.to_predicate())\n+        Obligation::new(cause, param_env, new_trait_ref.without_const().to_predicate())\n     }\n }\n \n@@ -1076,7 +1081,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n \n         let mut err = match predicate {\n-            ty::Predicate::Trait(ref data) => {\n+            ty::Predicate::Trait(ref data, _) => {\n                 let trait_ref = data.to_poly_trait_ref();\n                 let self_ty = trait_ref.self_ty();\n                 debug!(\"self_ty {:?} {:?} trait_ref {:?}\", self_ty, self_ty.kind, trait_ref);\n@@ -1269,8 +1274,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             )\n             .value;\n \n-            let obligation =\n-                Obligation::new(ObligationCause::dummy(), param_env, cleaned_pred.to_predicate());\n+            let obligation = Obligation::new(\n+                ObligationCause::dummy(),\n+                param_env,\n+                cleaned_pred.without_const().to_predicate(),\n+            );\n \n             self.predicate_may_hold(&obligation)\n         })"}, {"sha": "9d8fa362ebbd927e81fdcbd0f2d48ef21b0a620c", "filename": "src/librustc/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=d2aefbb286c94240e25cbe0b8cc92a1336db5408", "patch": "@@ -6,7 +6,7 @@ use super::{\n use crate::infer::InferCtxt;\n use crate::traits::object_safety::object_safety_violations;\n use crate::ty::TypeckTables;\n-use crate::ty::{self, AdtKind, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{self, AdtKind, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n \n use rustc_errors::{\n     error_code, pluralize, struct_span_err, Applicability, DiagnosticBuilder, Style,\n@@ -50,7 +50,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             } else {\n                                 \" where\"\n                             },\n-                            trait_ref.to_predicate(),\n+                            trait_ref.without_const().to_predicate(),\n                         ),\n                         Applicability::MachineApplicable,\n                     );\n@@ -340,8 +340,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             let new_self_ty = self.tcx.mk_imm_ref(self.tcx.lifetimes.re_static, self_ty);\n             let substs = self.tcx.mk_substs_trait(new_self_ty, &[]);\n             let new_trait_ref = ty::TraitRef::new(obligation.parent_trait_ref.def_id(), substs);\n-            let new_obligation =\n-                Obligation::new(ObligationCause::dummy(), param_env, new_trait_ref.to_predicate());\n+            let new_obligation = Obligation::new(\n+                ObligationCause::dummy(),\n+                param_env,\n+                new_trait_ref.without_const().to_predicate(),\n+            );\n             if self.predicate_must_hold_modulo_regions(&new_obligation) {\n                 if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n                     // We have a very specific type of error, where just borrowing this argument\n@@ -1122,7 +1125,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         // the type. The last generator has information about where the bound was introduced. At\n         // least one generator should be present for this diagnostic to be modified.\n         let (mut trait_ref, mut target_ty) = match obligation.predicate {\n-            ty::Predicate::Trait(p) => {\n+            ty::Predicate::Trait(p, _) => {\n                 (Some(p.skip_binder().trait_ref), Some(p.skip_binder().self_ty()))\n             }\n             _ => (None, None),\n@@ -1545,7 +1548,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 err.note(&format!(\"required because it appears within the type `{}`\", ty));\n                 obligated_types.push(ty);\n \n-                let parent_predicate = parent_trait_ref.to_predicate();\n+                let parent_predicate = parent_trait_ref.without_const().to_predicate();\n                 if !self.is_recursive_obligation(obligated_types, &data.parent_code) {\n                     self.note_obligation_cause_code(\n                         err,\n@@ -1562,7 +1565,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     parent_trait_ref.print_only_trait_path(),\n                     parent_trait_ref.skip_binder().self_ty()\n                 ));\n-                let parent_predicate = parent_trait_ref.to_predicate();\n+                let parent_predicate = parent_trait_ref.without_const().to_predicate();\n                 self.note_obligation_cause_code(\n                     err,\n                     &parent_predicate,"}, {"sha": "7819366f8927d14be2deb430f9038a284d9fee85", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=d2aefbb286c94240e25cbe0b8cc92a1336db5408", "patch": "@@ -29,7 +29,7 @@ use crate::mir::interpret::ErrorHandled;\n use crate::ty::error::{ExpectedFound, TypeError};\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use crate::ty::subst::{InternalSubsts, SubstsRef};\n-use crate::ty::{self, AdtKind, GenericParamDefKind, List, ToPredicate, Ty, TyCtxt};\n+use crate::ty::{self, AdtKind, GenericParamDefKind, List, ToPredicate, Ty, TyCtxt, WithConstness};\n use crate::util::common::ErrorReported;\n use chalk_engine;\n use rustc_hir as hir;\n@@ -732,7 +732,7 @@ pub fn type_known_to_meet_bound_modulo_regions<'a, 'tcx>(\n         param_env,\n         cause: ObligationCause::misc(span, hir::DUMMY_HIR_ID),\n         recursion_depth: 0,\n-        predicate: trait_ref.to_predicate(),\n+        predicate: trait_ref.without_const().to_predicate(),\n     };\n \n     let result = infcx.predicate_must_hold_modulo_regions(&obligation);"}, {"sha": "15f81bb3f47ed5e3e33d707d82e42a9d47291306", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=d2aefbb286c94240e25cbe0b8cc92a1336db5408", "patch": "@@ -12,7 +12,7 @@ use super::elaborate_predicates;\n \n use crate::traits::{self, Obligation, ObligationCause};\n use crate::ty::subst::{InternalSubsts, Subst};\n-use crate::ty::{self, Predicate, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{self, Predicate, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_session::lint::builtin::WHERE_CLAUSES_OBJECT_SAFETY;\n@@ -585,6 +585,7 @@ fn receiver_is_dispatchable<'tcx>(\n             def_id: unsize_did,\n             substs: tcx.mk_substs_trait(tcx.types.self_param, &[unsized_self_ty.into()]),\n         }\n+        .without_const()\n         .to_predicate();\n \n         // U: Trait<Arg1, ..., ArgN>\n@@ -598,7 +599,7 @@ fn receiver_is_dispatchable<'tcx>(\n                     }\n                 });\n \n-            ty::TraitRef { def_id: unsize_did, substs }.to_predicate()\n+            ty::TraitRef { def_id: unsize_did, substs }.without_const().to_predicate()\n         };\n \n         let caller_bounds: Vec<Predicate<'tcx>> = param_env\n@@ -620,6 +621,7 @@ fn receiver_is_dispatchable<'tcx>(\n             def_id: dispatch_from_dyn_did,\n             substs: tcx.mk_substs_trait(receiver_ty, &[unsized_receiver_ty.into()]),\n         }\n+        .without_const()\n         .to_predicate();\n \n         Obligation::new(ObligationCause::dummy(), param_env, predicate)"}, {"sha": "62672a78104805c08035e89672c71fcff48b0790", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=d2aefbb286c94240e25cbe0b8cc92a1336db5408", "patch": "@@ -16,7 +16,7 @@ use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime};\n use crate::ty::fold::{TypeFoldable, TypeFolder};\n use crate::ty::subst::{InternalSubsts, Subst};\n-use crate::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt};\n+use crate::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, WithConstness};\n use rustc_data_structures::snapshot_map::{Snapshot, SnapshotMap};\n use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n@@ -738,7 +738,12 @@ fn get_paranoid_cache_value_obligation<'a, 'tcx>(\n     depth: usize,\n ) -> PredicateObligation<'tcx> {\n     let trait_ref = projection_ty.trait_ref(infcx.tcx).to_poly_trait_ref();\n-    Obligation { cause, recursion_depth: depth, param_env, predicate: trait_ref.to_predicate() }\n+    Obligation {\n+        cause,\n+        recursion_depth: depth,\n+        param_env,\n+        predicate: trait_ref.without_const().to_predicate(),\n+    }\n }\n \n /// If we are projecting `<T as Trait>::Item`, but `T: Trait` does not\n@@ -772,7 +777,7 @@ fn normalize_to_error<'a, 'tcx>(\n         cause,\n         recursion_depth: depth,\n         param_env,\n-        predicate: trait_ref.to_predicate(),\n+        predicate: trait_ref.without_const().to_predicate(),\n     };\n     let tcx = selcx.infcx().tcx;\n     let def_id = projection_ty.item_def_id;"}, {"sha": "ac1ca4db9d6bbc300a01021dfb5e5d296aab27b4", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=d2aefbb286c94240e25cbe0b8cc92a1336db5408", "patch": "@@ -37,7 +37,7 @@ use crate::middle::lang_items;\n use crate::ty::fast_reject;\n use crate::ty::relate::TypeRelation;\n use crate::ty::subst::{Subst, SubstsRef};\n-use crate::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n use rustc_hir::def_id::DefId;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -3368,7 +3368,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     tcx.require_lang_item(lang_items::SizedTraitLangItem, None),\n                     tcx.mk_substs_trait(source, &[]),\n                 );\n-                nested.push(predicate_to_obligation(tr.to_predicate()));\n+                nested.push(predicate_to_obligation(tr.without_const().to_predicate()));\n \n                 // If the type is `Foo + 'a`, ensure that the type\n                 // being cast to `Foo + 'a` outlives `'a`:"}, {"sha": "f3bd98b855190a4b6334507621ba96b86751ba3a", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=d2aefbb286c94240e25cbe0b8cc92a1336db5408", "patch": "@@ -4,7 +4,7 @@ use smallvec::SmallVec;\n \n use crate::ty::outlives::Component;\n use crate::ty::subst::{GenericArg, Subst, SubstsRef};\n-use crate::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt};\n+use crate::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, WithConstness};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -99,14 +99,14 @@ pub fn elaborate_trait_ref<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     trait_ref: ty::PolyTraitRef<'tcx>,\n ) -> Elaborator<'tcx> {\n-    elaborate_predicates(tcx, vec![trait_ref.to_predicate()])\n+    elaborate_predicates(tcx, vec![trait_ref.without_const().to_predicate()])\n }\n \n pub fn elaborate_trait_refs<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     trait_refs: impl Iterator<Item = ty::PolyTraitRef<'tcx>>,\n ) -> Elaborator<'tcx> {\n-    let predicates = trait_refs.map(|trait_ref| trait_ref.to_predicate()).collect();\n+    let predicates = trait_refs.map(|trait_ref| trait_ref.without_const().to_predicate()).collect();\n     elaborate_predicates(tcx, predicates)\n }\n \n@@ -358,7 +358,7 @@ impl<'tcx> TraitAliasExpander<'tcx> {\n     fn expand(&mut self, item: &TraitAliasExpansionInfo<'tcx>) -> bool {\n         let tcx = self.tcx;\n         let trait_ref = item.trait_ref();\n-        let pred = trait_ref.to_predicate();\n+        let pred = trait_ref.without_const().to_predicate();\n \n         debug!(\"expand_trait_aliases: trait_ref={:?}\", trait_ref);\n \n@@ -370,13 +370,9 @@ impl<'tcx> TraitAliasExpander<'tcx> {\n \n         // Don't recurse if this trait alias is already on the stack for the DFS search.\n         let anon_pred = anonymize_predicate(tcx, &pred);\n-        if item\n-            .path\n-            .iter()\n-            .rev()\n-            .skip(1)\n-            .any(|(tr, _)| anonymize_predicate(tcx, &tr.to_predicate()) == anon_pred)\n-        {\n+        if item.path.iter().rev().skip(1).any(|(tr, _)| {\n+            anonymize_predicate(tcx, &tr.without_const().to_predicate()) == anon_pred\n+        }) {\n             return false;\n         }\n \n@@ -545,7 +541,12 @@ pub fn predicate_for_trait_ref<'tcx>(\n     trait_ref: ty::TraitRef<'tcx>,\n     recursion_depth: usize,\n ) -> PredicateObligation<'tcx> {\n-    Obligation { cause, param_env, recursion_depth, predicate: trait_ref.to_predicate() }\n+    Obligation {\n+        cause,\n+        param_env,\n+        recursion_depth,\n+        predicate: trait_ref.without_const().to_predicate(),\n+    }\n }\n \n pub fn predicate_for_trait_def("}, {"sha": "a0cb8446c921704c9c8b84d3015518eb29c09d4f", "filename": "src/librustc/traits/wf.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fwf.rs?ref=d2aefbb286c94240e25cbe0b8cc92a1336db5408", "patch": "@@ -3,7 +3,7 @@ use crate::infer::InferCtxt;\n use crate::middle::lang_items;\n use crate::traits::{self, AssocTypeBoundData};\n use crate::ty::subst::SubstsRef;\n-use crate::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_span::symbol::{kw, Ident};\n@@ -350,7 +350,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n         self.compute_trait_ref(&trait_ref, Elaborate::None);\n \n         if !data.has_escaping_bound_vars() {\n-            let predicate = trait_ref.to_predicate();\n+            let predicate = trait_ref.without_const().to_predicate();\n             let cause = self.cause(traits::ProjectionWf(data));\n             self.out.push(traits::Obligation::new(cause, self.param_env, predicate));\n         }\n@@ -378,7 +378,11 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                 def_id: self.infcx.tcx.require_lang_item(lang_items::SizedTraitLangItem, None),\n                 substs: self.infcx.tcx.mk_substs_trait(subty, &[]),\n             };\n-            self.out.push(traits::Obligation::new(cause, self.param_env, trait_ref.to_predicate()));\n+            self.out.push(traits::Obligation::new(\n+                cause,\n+                self.param_env,\n+                trait_ref.without_const().to_predicate(),\n+            ));\n         }\n     }\n "}, {"sha": "0470ab20dc4644b8f80d7e04559249eec574f322", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 49, "deletions": 7, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=d2aefbb286c94240e25cbe0b8cc92a1336db5408", "patch": "@@ -52,7 +52,7 @@ use std::ops::Deref;\n use std::ops::Range;\n use std::slice;\n use std::{mem, ptr};\n-use syntax::ast::{self, Ident, Name, NodeId};\n+use syntax::ast::{self, Constness, Ident, Name, NodeId};\n use syntax::attr;\n \n pub use self::sty::BoundRegion::*;\n@@ -1072,7 +1072,7 @@ pub enum Predicate<'tcx> {\n     /// A trait predicate will have `Constness::Const` if it originates\n     /// from a bound on a `const fn` without the `?const` opt-out (e.g.,\n     /// `const fn foobar<Foo: Bar>() {}`).\n-    Trait(PolyTraitPredicate<'tcx>, ast::Constness),\n+    Trait(PolyTraitPredicate<'tcx>, Constness),\n \n     /// `where 'a: 'b`\n     RegionOutlives(PolyRegionOutlivesPredicate<'tcx>),\n@@ -1340,18 +1340,33 @@ pub trait ToPredicate<'tcx> {\n     fn to_predicate(&self) -> Predicate<'tcx>;\n }\n \n-impl<'tcx> ToPredicate<'tcx> for TraitRef<'tcx> {\n+impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<TraitRef<'tcx>> {\n     fn to_predicate(&self) -> Predicate<'tcx> {\n         ty::Predicate::Trait(\n-            ty::Binder::dummy(ty::TraitPredicate { trait_ref: self.clone() }),\n-            ast::Constness::NotConst,\n+            ty::Binder::dummy(ty::TraitPredicate { trait_ref: self.value.clone() }),\n+            self.constness,\n         )\n     }\n }\n \n-impl<'tcx> ToPredicate<'tcx> for PolyTraitRef<'tcx> {\n+impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<&TraitRef<'tcx>> {\n     fn to_predicate(&self) -> Predicate<'tcx> {\n-        ty::Predicate::Trait(self.to_poly_trait_predicate(), ast::Constness::NotConst)\n+        ty::Predicate::Trait(\n+            ty::Binder::dummy(ty::TraitPredicate { trait_ref: self.value.clone() }),\n+            self.constness,\n+        )\n+    }\n+}\n+\n+impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<PolyTraitRef<'tcx>> {\n+    fn to_predicate(&self) -> Predicate<'tcx> {\n+        ty::Predicate::Trait(self.value.to_poly_trait_predicate(), self.constness)\n+    }\n+}\n+\n+impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<&PolyTraitRef<'tcx>> {\n+    fn to_predicate(&self) -> Predicate<'tcx> {\n+        ty::Predicate::Trait(self.value.to_poly_trait_predicate(), self.constness)\n     }\n }\n \n@@ -1707,6 +1722,33 @@ impl<'tcx> ParamEnv<'tcx> {\n     }\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+pub struct ConstnessAnd<T> {\n+    pub constness: Constness,\n+    pub value: T,\n+}\n+\n+// FIXME(ecstaticmorse): Audit all occurrences of `without_const().to_predicate()` to ensure that\n+// the constness of trait bounds is being propagated correctly.\n+pub trait WithConstness: Sized {\n+    #[inline]\n+    fn with_constness(self, constness: Constness) -> ConstnessAnd<Self> {\n+        ConstnessAnd { constness, value: self }\n+    }\n+\n+    #[inline]\n+    fn with_const(self) -> ConstnessAnd<Self> {\n+        self.with_constness(Constness::Const)\n+    }\n+\n+    #[inline]\n+    fn without_const(self) -> ConstnessAnd<Self> {\n+        self.with_constness(Constness::NotConst)\n+    }\n+}\n+\n+impl<T> WithConstness for T {}\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]\n pub struct ParamEnvAnd<'tcx, T> {\n     pub param_env: ParamEnv<'tcx>,"}, {"sha": "13f623aadb1a37fb3d2e08260db8637e98c33d50", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=d2aefbb286c94240e25cbe0b8cc92a1336db5408", "patch": "@@ -12,7 +12,9 @@ use crate::mir::interpret::Scalar;\n use crate::mir::Promoted;\n use crate::ty::layout::VariantIdx;\n use crate::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, Subst, SubstsRef};\n-use crate::ty::{self, AdtDef, DefIdTree, Discr, Ty, TyCtxt, TypeFlags, TypeFoldable};\n+use crate::ty::{\n+    self, AdtDef, DefIdTree, Discr, Ty, TyCtxt, TypeFlags, TypeFoldable, WithConstness,\n+};\n use crate::ty::{List, ParamEnv, ParamEnvAnd, TyS};\n use polonius_engine::Atom;\n use rustc_data_structures::captures::Captures;\n@@ -665,14 +667,16 @@ impl<'tcx> Binder<ExistentialPredicate<'tcx>> {\n     pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {\n         use crate::ty::ToPredicate;\n         match *self.skip_binder() {\n-            ExistentialPredicate::Trait(tr) => Binder(tr).with_self_ty(tcx, self_ty).to_predicate(),\n+            ExistentialPredicate::Trait(tr) => {\n+                Binder(tr).with_self_ty(tcx, self_ty).without_const().to_predicate()\n+            }\n             ExistentialPredicate::Projection(p) => {\n                 ty::Predicate::Projection(Binder(p.with_self_ty(tcx, self_ty)))\n             }\n             ExistentialPredicate::AutoTrait(did) => {\n                 let trait_ref =\n                     Binder(ty::TraitRef { def_id: did, substs: tcx.mk_substs_trait(self_ty, &[]) });\n-                trait_ref.to_predicate()\n+                trait_ref.without_const().to_predicate()\n             }\n         }\n     }"}, {"sha": "8b62403e6ce5277320870598c775080f98397863", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=d2aefbb286c94240e25cbe0b8cc92a1336db5408", "patch": "@@ -2,7 +2,7 @@ use rustc::hir::map as hir_map;\n use rustc::session::CrateDisambiguator;\n use rustc::traits::{self};\n use rustc::ty::subst::Subst;\n-use rustc::ty::{self, ToPredicate, Ty, TyCtxt};\n+use rustc::ty::{self, ToPredicate, Ty, TyCtxt, WithConstness};\n use rustc_data_structures::svh::Svh;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n@@ -58,6 +58,7 @@ fn sized_constraint_for_ty(tcx: TyCtxt<'tcx>, adtdef: &ty::AdtDef, ty: Ty<'tcx>)\n                 def_id: sized_trait,\n                 substs: tcx.mk_substs_trait(ty, &[]),\n             })\n+            .without_const()\n             .to_predicate();\n             let predicates = tcx.predicates_of(adtdef.did).predicates;\n             if predicates.iter().any(|(p, _)| *p == sized_predicate) { vec![] } else { vec![ty] }"}, {"sha": "9253c00e5ae27477abb8afdb0318c45142f8c515", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=d2aefbb286c94240e25cbe0b8cc92a1336db5408", "patch": "@@ -17,7 +17,7 @@ use rustc::traits::astconv_object_safety_violations;\n use rustc::traits::error_reporting::report_object_safety_error;\n use rustc::traits::wf::object_region_bounds;\n use rustc::ty::subst::{self, InternalSubsts, Subst, SubstsRef};\n-use rustc::ty::{self, Const, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use rustc::ty::{self, Const, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n use rustc::ty::{GenericParamDef, GenericParamDefKind};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticId};\n@@ -2980,7 +2980,7 @@ impl<'tcx> Bounds<'tcx> {\n                     def_id: sized,\n                     substs: tcx.mk_substs_trait(param_ty, &[]),\n                 });\n-                (trait_ref.to_predicate(), span)\n+                (trait_ref.without_const().to_predicate(), span)\n             })\n         });\n "}, {"sha": "367fe0c3cc199e0e92cfab6312cbc59e99d9ef81", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=d2aefbb286c94240e25cbe0b8cc92a1336db5408", "patch": "@@ -5,7 +5,7 @@ use rustc::infer::{InferCtxt, InferOk};\n use rustc::session::DiagnosticMessageId;\n use rustc::traits::{self, TraitEngine};\n use rustc::ty::adjustment::{Adjust, Adjustment, OverloadedDeref};\n-use rustc::ty::{self, TraitRef, Ty, TyCtxt};\n+use rustc::ty::{self, TraitRef, Ty, TyCtxt, WithConstness};\n use rustc::ty::{ToPredicate, TypeFoldable};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n@@ -124,8 +124,11 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n \n         let cause = traits::ObligationCause::misc(self.span, self.body_id);\n \n-        let obligation =\n-            traits::Obligation::new(cause.clone(), self.param_env, trait_ref.to_predicate());\n+        let obligation = traits::Obligation::new(\n+            cause.clone(),\n+            self.param_env,\n+            trait_ref.without_const().to_predicate(),\n+        );\n         if !self.infcx.predicate_may_hold(&obligation) {\n             debug!(\"overloaded_deref_ty: cannot match obligation\");\n             return None;"}, {"sha": "c1cf3522b5d9c1ac72f6864aece8d925bca656c7", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=d2aefbb286c94240e25cbe0b8cc92a1336db5408", "patch": "@@ -17,7 +17,7 @@ use rustc::traits;\n use rustc::ty::subst::Subst;\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::ty::GenericParamDefKind;\n-use rustc::ty::{self, ToPolyTraitRef, ToPredicate, TraitRef, Ty, TypeFoldable};\n+use rustc::ty::{self, ToPolyTraitRef, ToPredicate, TraitRef, Ty, TypeFoldable, WithConstness};\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n@@ -322,7 +322,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             span,\n             self.body_id,\n             self.param_env,\n-            poly_trait_ref.to_predicate(),\n+            poly_trait_ref.without_const().to_predicate(),\n         );\n \n         // Now we want to know if this can be matched"}, {"sha": "ff2f150c6333014e15c94a626e143e35b55473dc", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=d2aefbb286c94240e25cbe0b8cc92a1336db5408", "patch": "@@ -25,6 +25,7 @@ use rustc::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc::ty::GenericParamDefKind;\n use rustc::ty::{\n     self, ParamEnvAnd, ToPolyTraitRef, ToPredicate, TraitRef, Ty, TyCtxt, TypeFoldable,\n+    WithConstness,\n };\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n@@ -1396,7 +1397,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 }\n \n                 TraitCandidate(trait_ref) => {\n-                    let predicate = trait_ref.to_predicate();\n+                    let predicate = trait_ref.without_const().to_predicate();\n                     let obligation = traits::Obligation::new(cause, self.param_env, predicate);\n                     if !self.predicate_may_hold(&obligation) {\n                         if self.probe(|_| self.select_trait_candidate(trait_ref).is_err()) {"}, {"sha": "35fffd3bcd45c6089ae65604cd9ae5fe940b241a", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=d2aefbb286c94240e25cbe0b8cc92a1336db5408", "patch": "@@ -9,7 +9,7 @@ use rustc::hir::map::Map;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::traits::Obligation;\n use rustc::ty::print::with_crate_prefix;\n-use rustc::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use rustc::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n@@ -59,7 +59,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             span,\n                             self.body_id,\n                             self.param_env,\n-                            poly_trait_ref.to_predicate(),\n+                            poly_trait_ref.without_const().to_predicate(),\n                         );\n                         self.predicate_may_hold(&obligation)\n                     })"}, {"sha": "1e3927f33a77f2341ad3688a0330cd55e7dd279b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d2aefbb286c94240e25cbe0b8cc92a1336db5408", "patch": "@@ -112,7 +112,7 @@ use rustc::ty::subst::{GenericArgKind, InternalSubsts, Subst, SubstsRef, UserSel\n use rustc::ty::util::{Discr, IntTypeExt, Representability};\n use rustc::ty::{\n     self, AdtKind, CanonicalUserType, Const, GenericParamDefKind, RegionKind, ToPolyTraitRef,\n-    ToPredicate, Ty, TyCtxt, UserType,\n+    ToPredicate, Ty, TyCtxt, UserType, WithConstness,\n };\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -1423,7 +1423,7 @@ fn check_fn<'a, 'tcx>(\n                 inherited.register_predicate(traits::Obligation::new(\n                     cause,\n                     param_env,\n-                    trait_ref.to_predicate(),\n+                    trait_ref.without_const().to_predicate(),\n                 ));\n             }\n         }"}, {"sha": "e4df69993c5d280fa8490806a5ffd84818db9577", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=d2aefbb286c94240e25cbe0b8cc92a1336db5408", "patch": "@@ -6,7 +6,9 @@ use rustc::middle::lang_items;\n use rustc::session::parse::feature_err;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n use rustc::ty::subst::{InternalSubsts, Subst};\n-use rustc::ty::{self, AdtKind, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use rustc::ty::{\n+    self, AdtKind, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n+};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_hir::def_id::DefId;\n@@ -955,7 +957,8 @@ fn receiver_is_implemented(\n         substs: fcx.tcx.mk_substs_trait(receiver_ty, &[]),\n     };\n \n-    let obligation = traits::Obligation::new(cause, fcx.param_env, trait_ref.to_predicate());\n+    let obligation =\n+        traits::Obligation::new(cause, fcx.param_env, trait_ref.without_const().to_predicate());\n \n     if fcx.predicate_must_hold_modulo_regions(&obligation) {\n         true"}, {"sha": "1211075d9429b7c9f8a357d7be3d7c0e0470a231", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=d2aefbb286c94240e25cbe0b8cc92a1336db5408", "patch": "@@ -30,7 +30,7 @@ use rustc::ty::subst::GenericArgKind;\n use rustc::ty::subst::{InternalSubsts, Subst};\n use rustc::ty::util::Discr;\n use rustc::ty::util::IntTypeExt;\n-use rustc::ty::{self, AdtKind, Const, DefIdTree, ToPolyTraitRef, Ty, TyCtxt};\n+use rustc::ty::{self, AdtKind, Const, DefIdTree, ToPolyTraitRef, Ty, TyCtxt, WithConstness};\n use rustc::ty::{ReprOptions, ToPredicate};\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashMap;\n@@ -411,7 +411,8 @@ fn type_param_predicates(\n                     // Implied `Self: Trait` and supertrait bounds.\n                     if param_id == item_hir_id {\n                         let identity_trait_ref = ty::TraitRef::identity(tcx, item_def_id);\n-                        extend = Some((identity_trait_ref.to_predicate(), item.span));\n+                        extend =\n+                            Some((identity_trait_ref.without_const().to_predicate(), item.span));\n                     }\n                     generics\n                 }\n@@ -2056,7 +2057,7 @@ fn predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicates<'_> {\n         let span = tcx.def_span(def_id);\n         result.predicates =\n             tcx.arena.alloc_from_iter(result.predicates.iter().copied().chain(std::iter::once((\n-                ty::TraitRef::identity(tcx, def_id).to_predicate(),\n+                ty::TraitRef::identity(tcx, def_id).without_const().to_predicate(),\n                 span,\n             ))));\n     }\n@@ -2230,7 +2231,10 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n     // (see below). Recall that a default impl is not itself an impl, but rather a\n     // set of defaults that can be incorporated into another impl.\n     if let Some(trait_ref) = is_default_impl_trait {\n-        predicates.push((trait_ref.to_poly_trait_ref().to_predicate(), tcx.def_span(def_id)));\n+        predicates.push((\n+            trait_ref.to_poly_trait_ref().without_const().to_predicate(),\n+            tcx.def_span(def_id),\n+        ));\n     }\n \n     // Collect the region predicates that were declared inline as"}, {"sha": "18ebd254507eaff5bdbec46c01840047bfa88af7", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2aefbb286c94240e25cbe0b8cc92a1336db5408/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=d2aefbb286c94240e25cbe0b8cc92a1336db5408", "patch": "@@ -1,7 +1,7 @@\n use rustc::infer::InferOk;\n use rustc::traits;\n use rustc::ty::subst::Subst;\n-use rustc::ty::ToPredicate;\n+use rustc::ty::{ToPredicate, WithConstness};\n use rustc_hir as hir;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_span::DUMMY_SP;\n@@ -64,7 +64,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                         match infcx.evaluate_obligation(&traits::Obligation::new(\n                             cause,\n                             param_env,\n-                            trait_ref.to_predicate(),\n+                            trait_ref.without_const().to_predicate(),\n                         )) {\n                             Ok(eval_result) => eval_result.may_apply(),\n                             Err(traits::OverflowError) => true, // overflow doesn't mean yes *or* no"}]}