{"sha": "c8a2ff6ecc8e45c7e1420e01d52c8b7a315140e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4YTJmZjZlY2M4ZTQ1YzdlMTQyMGUwMWQ1MmM4YjdhMzE1MTQwZTY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-28T23:38:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-28T23:38:18Z"}, "message": "Merge #6664\n\n6664: Show type of self param on hover r=jonas-schievink a=Veykril\n\nShow the type of `self` when hovering the token in a `SelfParam`.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "b4bd205a863938211d19ef860ca90025badc1453", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4bd205a863938211d19ef860ca90025badc1453"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8a2ff6ecc8e45c7e1420e01d52c8b7a315140e6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfwt9qCRBK7hj4Ov3rIwAAdHIIAJx5tBIzqRLYlZpnkcHW+VzX\n5Ow5E04gPjF+HHXINxHRfOWDLfJht6uCC6OJUN3bhBGQ2A0RYWMHJRuAXz/c1GqT\nXzCrZJFATtGtkPPIGRAR+7/XQjPgS1Sx5//jIv4fFQOrawvMXjCrku9IVWfhUhF9\nCTaOdpkpf2wXc/Rnue5AelrSqIXAPLy7+WWn5dLY6Sit/cIo+L92JhFLpWoW8HYk\nAsY2nPEP57+pJGL3l1pbEZPl1tCDcILMzc/sTOr+pC5a0dYDcFQ5A/GNHad8qntK\n9RQZ/tE1M5HUsSn3+Xdks71GqKaSM4YcZ7dwm+/wuwCpJuxVDUhiYK1c2N2bRCg=\n=NA1+\n-----END PGP SIGNATURE-----\n", "payload": "tree b4bd205a863938211d19ef860ca90025badc1453\nparent a6f26ded0037a3efb5625ac3482a2f4ec9eb01a3\nparent ee8afff71486a59334a812b69b8ebe0c4c2afba9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1606606698 +0000\ncommitter GitHub <noreply@github.com> 1606606698 +0000\n\nMerge #6664\n\n6664: Show type of self param on hover r=jonas-schievink a=Veykril\n\nShow the type of `self` when hovering the token in a `SelfParam`.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8a2ff6ecc8e45c7e1420e01d52c8b7a315140e6", "html_url": "https://github.com/rust-lang/rust/commit/c8a2ff6ecc8e45c7e1420e01d52c8b7a315140e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8a2ff6ecc8e45c7e1420e01d52c8b7a315140e6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6f26ded0037a3efb5625ac3482a2f4ec9eb01a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6f26ded0037a3efb5625ac3482a2f4ec9eb01a3", "html_url": "https://github.com/rust-lang/rust/commit/a6f26ded0037a3efb5625ac3482a2f4ec9eb01a3"}, {"sha": "ee8afff71486a59334a812b69b8ebe0c4c2afba9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee8afff71486a59334a812b69b8ebe0c4c2afba9", "html_url": "https://github.com/rust-lang/rust/commit/ee8afff71486a59334a812b69b8ebe0c4c2afba9"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "94ad800a085b2945734672bd430764e9a4e576f7", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 43, "deletions": 3, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c8a2ff6ecc8e45c7e1420e01d52c8b7a315140e6/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a2ff6ecc8e45c7e1420e01d52c8b7a315140e6/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=c8a2ff6ecc8e45c7e1420e01d52c8b7a315140e6", "patch": "@@ -139,14 +139,17 @@ pub(crate) fn hover(\n         }\n     }\n \n-    let node = token\n-        .ancestors()\n-        .find(|n| ast::Expr::cast(n.clone()).is_some() || ast::Pat::cast(n.clone()).is_some())?;\n+    let node = token.ancestors().find(|n| {\n+        ast::Expr::can_cast(n.kind())\n+            || ast::Pat::can_cast(n.kind())\n+            || ast::SelfParam::can_cast(n.kind())\n+    })?;\n \n     let ty = match_ast! {\n         match node {\n             ast::Expr(it) => sema.type_of_expr(&it)?,\n             ast::Pat(it) => sema.type_of_pat(&it)?,\n+            ast::SelfParam(self_param) => sema.type_of_self(&self_param)?,\n             // If this node is a MACRO_CALL, it means that `descend_into_macros` failed to resolve.\n             // (e.g expanding a builtin macro). So we give up here.\n             ast::MacroCall(_it) => return None,\n@@ -3282,4 +3285,41 @@ fn main() {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn hover_self_param_shows_type() {\n+        check(\n+            r#\"\n+struct Foo {}\n+impl Foo {\n+    fn bar(&sel<|>f) {}\n+}\n+\"#,\n+            expect![[r#\"\n+                *&self*\n+                ```rust\n+                &Foo\n+                ```\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn hover_self_param_shows_type_for_arbitrary_self_type() {\n+        check(\n+            r#\"\n+struct Arc<T>(T);\n+struct Foo {}\n+impl Foo {\n+    fn bar(sel<|>f: Arc<Foo>) {}\n+}\n+\"#,\n+            expect![[r#\"\n+                *self: Arc<Foo>*\n+                ```rust\n+                Arc<Foo>\n+                ```\n+            \"#]],\n+        );\n+    }\n }"}]}