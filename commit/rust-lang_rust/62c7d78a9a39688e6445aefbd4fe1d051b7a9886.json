{"sha": "62c7d78a9a39688e6445aefbd4fe1d051b7a9886", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYzdkNzhhOWEzOTY4OGU2NDQ1YWVmYmQ0ZmUxZDA1MWI3YTk4ODY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-09-05T19:43:11Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-09-10T01:04:51Z"}, "message": "resolve: Remove `unshadowable_attrs`", "tree": {"sha": "4955df12077b6eca0786ad0604dc640a80e0255c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4955df12077b6eca0786ad0604dc640a80e0255c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62c7d78a9a39688e6445aefbd4fe1d051b7a9886", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62c7d78a9a39688e6445aefbd4fe1d051b7a9886", "html_url": "https://github.com/rust-lang/rust/commit/62c7d78a9a39688e6445aefbd4fe1d051b7a9886", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62c7d78a9a39688e6445aefbd4fe1d051b7a9886/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a25c841e884517eb48b67c36326d31192aff82d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a25c841e884517eb48b67c36326d31192aff82d9", "html_url": "https://github.com/rust-lang/rust/commit/a25c841e884517eb48b67c36326d31192aff82d9"}], "stats": {"total": 81, "additions": 34, "deletions": 47}, "files": [{"sha": "66f80af363227733a77b5f45114fd7062572705e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62c7d78a9a39688e6445aefbd4fe1d051b7a9886/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62c7d78a9a39688e6445aefbd4fe1d051b7a9886/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=62c7d78a9a39688e6445aefbd4fe1d051b7a9886", "patch": "@@ -1449,7 +1449,6 @@ pub struct Resolver<'a, 'b: 'a> {\n     macro_names: FxHashSet<Ident>,\n     builtin_macros: FxHashMap<Name, &'a NameBinding<'a>>,\n     macro_use_prelude: FxHashMap<Name, &'a NameBinding<'a>>,\n-    unshadowable_attrs: FxHashMap<Name, &'a NameBinding<'a>>,\n     pub all_macros: FxHashMap<Name, Def>,\n     macro_map: FxHashMap<DefId, Lrc<SyntaxExtension>>,\n     macro_defs: FxHashMap<Mark, DefId>,\n@@ -1767,7 +1766,6 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             macro_names: FxHashSet(),\n             builtin_macros: FxHashMap(),\n             macro_use_prelude: FxHashMap(),\n-            unshadowable_attrs: FxHashMap(),\n             all_macros: FxHashMap(),\n             macro_map: FxHashMap(),\n             invocations,"}, {"sha": "fe0cb523a1580fea51531358d39d73b7ea7462c1", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/62c7d78a9a39688e6445aefbd4fe1d051b7a9886/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62c7d78a9a39688e6445aefbd4fe1d051b7a9886/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=62c7d78a9a39688e6445aefbd4fe1d051b7a9886", "patch": "@@ -220,23 +220,6 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n         }\n     }\n \n-    fn add_unshadowable_attr(&mut self, ident: ast::Ident, ext: Lrc<SyntaxExtension>) {\n-        let def_id = DefId {\n-            krate: BUILTIN_MACROS_CRATE,\n-            index: DefIndex::from_array_index(self.macro_map.len(),\n-                                              DefIndexAddressSpace::Low),\n-        };\n-        let kind = ext.kind();\n-        self.macro_map.insert(def_id, ext);\n-        let binding = self.arenas.alloc_name_binding(NameBinding {\n-            kind: NameBindingKind::Def(Def::Macro(def_id, kind), false),\n-            span: DUMMY_SP,\n-            vis: ty::Visibility::Invisible,\n-            expansion: Mark::root(),\n-        });\n-        self.unshadowable_attrs.insert(ident.name, binding);\n-    }\n-\n     fn resolve_imports(&mut self) {\n         ImportResolver { resolver: self }.resolve_imports()\n     }\n@@ -493,14 +476,8 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n             return def;\n         }\n \n-        if kind == MacroKind::Attr {\n-            if let Some(ext) = self.unshadowable_attrs.get(&path[0].name) {\n-                return Ok(ext.def());\n-            }\n-        }\n-\n         let legacy_resolution = self.resolve_legacy_scope(\n-            path[0], invoc_id, invocation.parent_legacy_scope.get(), false\n+            path[0], invoc_id, invocation.parent_legacy_scope.get(), false, kind == MacroKind::Attr\n         );\n         let result = if let Some(legacy_binding) = legacy_resolution {\n             Ok(legacy_binding.def())\n@@ -643,7 +620,19 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                 }\n                 WhereToResolve::MacroUsePrelude => {\n                     match self.macro_use_prelude.get(&ident.name).cloned() {\n-                        Some(binding) => Ok((binding, FromPrelude(true))),\n+                        Some(binding) => {\n+                            let mut result = Ok((binding, FromPrelude(true)));\n+                            // FIXME: Keep some built-in macros working even if they are\n+                            // shadowed by non-attribute macros imported with `macro_use`.\n+                            // We need to come up with some more principled approach instead.\n+                            if is_attr && (ident.name == \"test\" || ident.name == \"bench\") {\n+                                if let Def::Macro(_, MacroKind::Bang) =\n+                                        binding.def_ignoring_ambiguity() {\n+                                    result = Err(Determinacy::Determined);\n+                                }\n+                            }\n+                            result\n+                        }\n                         None => Err(Determinacy::Determined),\n                     }\n                 }\n@@ -811,8 +800,16 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                             ident: Ident,\n                             invoc_id: Mark,\n                             invoc_parent_legacy_scope: LegacyScope<'a>,\n-                            record_used: bool)\n+                            record_used: bool,\n+                            is_attr: bool)\n                             -> Option<&'a NameBinding<'a>> {\n+        if is_attr && (ident.name == \"test\" || ident.name == \"bench\") {\n+            // FIXME: Keep some built-in macros working even if they are\n+            // shadowed by user-defined `macro_rules`.\n+            // We need to come up with some more principled approach instead.\n+            return None;\n+        }\n+\n         let ident = ident.modern();\n \n         // This is *the* result, resolution from the scope closest to the resolved identifier.\n@@ -898,7 +895,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n             let span = ident.span;\n             let invocation = self.invocations[&invoc_id];\n             let legacy_resolution = self.resolve_legacy_scope(\n-                ident, invoc_id, invocation.parent_legacy_scope.get(), true\n+                ident, invoc_id, invocation.parent_legacy_scope.get(), true, kind == MacroKind::Attr\n             );\n             let resolution = self.resolve_lexical_macro_path_segment(\n                 ident, MacroNS, invoc_id, true, true, kind == MacroKind::Attr, span"}, {"sha": "1ea710097661acf995317889d889a94d084314cc", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62c7d78a9a39688e6445aefbd4fe1d051b7a9886/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62c7d78a9a39688e6445aefbd4fe1d051b7a9886/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=62c7d78a9a39688e6445aefbd4fe1d051b7a9886", "patch": "@@ -721,7 +721,6 @@ pub trait Resolver {\n     fn visit_ast_fragment_with_placeholders(&mut self, mark: Mark, fragment: &AstFragment,\n                                             derives: &[Mark]);\n     fn add_builtin(&mut self, ident: ast::Ident, ext: Lrc<SyntaxExtension>);\n-    fn add_unshadowable_attr(&mut self, ident: ast::Ident, ext: Lrc<SyntaxExtension>);\n \n     fn resolve_imports(&mut self);\n     // Resolves attribute and derive legacy macros from `#![plugin(..)]`.\n@@ -761,7 +760,6 @@ impl Resolver for DummyResolver {\n     fn visit_ast_fragment_with_placeholders(&mut self, _invoc: Mark, _fragment: &AstFragment,\n                                             _derives: &[Mark]) {}\n     fn add_builtin(&mut self, _ident: ast::Ident, _ext: Lrc<SyntaxExtension>) {}\n-    fn add_unshadowable_attr(&mut self, _ident: ast::Ident, _ext: Lrc<SyntaxExtension>) {}\n \n     fn resolve_imports(&mut self) {}\n     fn find_legacy_attr_invoc(&mut self, _attrs: &mut Vec<Attribute>, _allow_derive: bool)"}, {"sha": "88af4a73a1515a93b58592f3c7628f54050decf7", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/62c7d78a9a39688e6445aefbd4fe1d051b7a9886/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62c7d78a9a39688e6445aefbd4fe1d051b7a9886/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=62c7d78a9a39688e6445aefbd4fe1d051b7a9886", "patch": "@@ -72,18 +72,6 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n                          enable_quotes: bool) {\n     deriving::register_builtin_derives(resolver);\n \n-    {\n-        let mut register_unshadowable = |name, ext| {\n-            resolver.add_unshadowable_attr(ast::Ident::with_empty_ctxt(name), Lrc::new(ext));\n-        };\n-\n-        register_unshadowable(Symbol::intern(\"test\"),\n-            MultiModifier(Box::new(test::expand_test)));\n-\n-        register_unshadowable(Symbol::intern(\"bench\"),\n-            MultiModifier(Box::new(test::expand_bench)));\n-    }\n-\n     let mut register = |name, ext| {\n         resolver.add_builtin(ast::Ident::with_empty_ctxt(name), Lrc::new(ext));\n     };\n@@ -147,6 +135,8 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n     }\n \n     register(Symbol::intern(\"test_case\"), MultiModifier(Box::new(test_case::expand)));\n+    register(Symbol::intern(\"test\"), MultiModifier(Box::new(test::expand_test)));\n+    register(Symbol::intern(\"bench\"), MultiModifier(Box::new(test::expand_bench)));\n \n     // format_args uses `unstable` things internally.\n     register(Symbol::intern(\"format_args\"),"}, {"sha": "2e94a27838e433bb6b75fe90a5c5bddef6546656", "filename": "src/test/ui/issues/issue-11692-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/62c7d78a9a39688e6445aefbd4fe1d051b7a9886/src%2Ftest%2Fui%2Fissues%2Fissue-11692-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62c7d78a9a39688e6445aefbd4fe1d051b7a9886/src%2Ftest%2Fui%2Fissues%2Fissue-11692-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11692-2.rs?ref=62c7d78a9a39688e6445aefbd4fe1d051b7a9886", "patch": "@@ -9,6 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    concat!(test!());\n-    //~^ error: cannot find macro `test!` in this scope\n+    concat!(test!()); //~ ERROR `test` can only be used in attributes\n }"}, {"sha": "186c59a61493d68a9863569436759baa8bffea62", "filename": "src/test/ui/issues/issue-11692-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62c7d78a9a39688e6445aefbd4fe1d051b7a9886/src%2Ftest%2Fui%2Fissues%2Fissue-11692-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62c7d78a9a39688e6445aefbd4fe1d051b7a9886/src%2Ftest%2Fui%2Fissues%2Fissue-11692-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11692-2.stderr?ref=62c7d78a9a39688e6445aefbd4fe1d051b7a9886", "patch": "@@ -1,7 +1,7 @@\n-error: cannot find macro `test!` in this scope\n+error: `test` can only be used in attributes\n   --> $DIR/issue-11692-2.rs:12:13\n    |\n-LL |     concat!(test!());\n+LL |     concat!(test!()); //~ ERROR `test` can only be used in attributes\n    |             ^^^^\n \n error: aborting due to previous error"}, {"sha": "4e24b17bdd5872874cfabd2bb2d1b10b1b89d78c", "filename": "src/test/ui/test-shadowing/test-cant-be-shadowed.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/62c7d78a9a39688e6445aefbd4fe1d051b7a9886/src%2Ftest%2Fui%2Ftest-shadowing%2Ftest-cant-be-shadowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62c7d78a9a39688e6445aefbd4fe1d051b7a9886/src%2Ftest%2Fui%2Ftest-shadowing%2Ftest-cant-be-shadowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-shadowing%2Ftest-cant-be-shadowed.rs?ref=62c7d78a9a39688e6445aefbd4fe1d051b7a9886", "patch": "@@ -16,3 +16,8 @@\n \n #[test]\n fn foo(){}\n+\n+macro_rules! test { () => () }\n+\n+#[test]\n+fn bar() {}"}]}