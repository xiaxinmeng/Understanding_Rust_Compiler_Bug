{"sha": "d0a782ef1c53ef5c5d3b49b02c498f7a688c3a4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYTc4MmVmMWM1M2VmNWM1ZDNiNDliMDJjNDk4ZjdhNjg4YzNhNGQ=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-01-24T07:33:18Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-01-26T22:17:10Z"}, "message": "Have a better trait interface", "tree": {"sha": "d0fe872ed30d97994efd3ceac708719ce71ae98a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0fe872ed30d97994efd3ceac708719ce71ae98a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0a782ef1c53ef5c5d3b49b02c498f7a688c3a4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0a782ef1c53ef5c5d3b49b02c498f7a688c3a4d", "html_url": "https://github.com/rust-lang/rust/commit/d0a782ef1c53ef5c5d3b49b02c498f7a688c3a4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0a782ef1c53ef5c5d3b49b02c498f7a688c3a4d/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bef5cf0b9929539e8d9fece006bfd3db1b68bec4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bef5cf0b9929539e8d9fece006bfd3db1b68bec4", "html_url": "https://github.com/rust-lang/rust/commit/bef5cf0b9929539e8d9fece006bfd3db1b68bec4"}], "stats": {"total": 109, "additions": 45, "deletions": 64}, "files": [{"sha": "d196f6c5c6ec7ff8becaa353f6c61d9b1e9348ec", "filename": "crates/ra_assists/src/assists/auto_import.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d0a782ef1c53ef5c5d3b49b02c498f7a688c3a4d/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a782ef1c53ef5c5d3b49b02c498f7a688c3a4d/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs?ref=d0a782ef1c53ef5c5d3b49b02c498f7a688c3a4d", "patch": "@@ -1,4 +1,4 @@\n-use hir::db::HirDatabase;\n+use hir::{db::HirDatabase, AsName};\n use ra_syntax::{\n     ast::{self, AstNode},\n     SmolStr, SyntaxElement,\n@@ -41,23 +41,29 @@ pub(crate) fn auto_import<F: ImportsLocator>(\n             current_file.syntax().clone()\n         }\n     };\n+    let source_analyzer = ctx.source_analyzer(&position, None);\n+    let module_with_name_to_import = source_analyzer.module()?;\n+    let path_to_import = ctx.covering_element().ancestors().find_map(ast::Path::cast)?;\n+    if source_analyzer.resolve_path(ctx.db, &path_to_import).is_some() {\n+        return None;\n+    }\n \n-    let module_with_name_to_import = ctx.source_analyzer(&position, None).module()?;\n-    let name_to_import = hir::InFile {\n-        file_id: ctx.frange.file_id.into(),\n-        value: &find_applicable_name_ref(ctx.covering_element())?,\n-    };\n-\n-    let proposed_imports =\n-        imports_locator.find_imports(name_to_import, module_with_name_to_import)?;\n+    let name_to_import = &find_applicable_name_ref(ctx.covering_element())?.as_name();\n+    let proposed_imports = imports_locator\n+        .find_imports(&name_to_import.to_string())\n+        .into_iter()\n+        .filter_map(|module_def| module_with_name_to_import.find_use_path(ctx.db, module_def))\n+        .filter(|use_path| !use_path.segments.is_empty())\n+        .take(20)\n+        .collect::<std::collections::HashSet<_>>();\n     if proposed_imports.is_empty() {\n         return None;\n     }\n \n     ctx.add_assist_group(AssistId(\"auto_import\"), \"auto import\", || {\n         proposed_imports\n             .into_iter()\n-            .map(|import| import_to_action(import.to_string(), &position, &path))\n+            .map(|import| import_to_action(import.to_string(), &position, &path_to_import))\n             .collect()\n     })\n }"}, {"sha": "9e4ebec470c73fad5c0a7e58ce435c139db05411", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d0a782ef1c53ef5c5d3b49b02c498f7a688c3a4d/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a782ef1c53ef5c5d3b49b02c498f7a688c3a4d/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=d0a782ef1c53ef5c5d3b49b02c498f7a688c3a4d", "patch": "@@ -14,9 +14,9 @@ mod test_db;\n pub mod ast_transform;\n \n use either::Either;\n-use hir::{db::HirDatabase, InFile, ModPath, Module};\n+use hir::{db::HirDatabase, ModuleDef};\n use ra_db::FileRange;\n-use ra_syntax::{ast::NameRef, TextRange, TextUnit};\n+use ra_syntax::{TextRange, TextUnit};\n use ra_text_edit::TextEdit;\n \n pub(crate) use crate::assist_ctx::{Assist, AssistCtx};\n@@ -85,11 +85,7 @@ where\n /// accessible from the ra_assists crate.\n pub trait ImportsLocator {\n     /// Finds all imports for the given name and the module that contains this name.\n-    fn find_imports(\n-        &mut self,\n-        name_to_import: InFile<&NameRef>,\n-        module_with_name_to_import: Module,\n-    ) -> Option<Vec<ModPath>>;\n+    fn find_imports(&mut self, name_to_import: &str) -> Vec<ModuleDef>;\n }\n \n /// Return all the assists applicable at the given position"}, {"sha": "21b0553be8fab130cde8c975d155d64d6db4e4ba", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0a782ef1c53ef5c5d3b49b02c498f7a688c3a4d/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a782ef1c53ef5c5d3b49b02c498f7a688c3a4d/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=d0a782ef1c53ef5c5d3b49b02c498f7a688c3a4d", "patch": "@@ -58,6 +58,7 @@ pub use hir_def::{\n     type_ref::Mutability,\n };\n pub use hir_expand::{\n-    name, name::Name, HirFileId, InFile, MacroCallId, MacroCallLoc, MacroDefId, MacroFile, Origin,\n+    name::{AsName, Name},\n+    HirFileId, InFile, MacroCallId, MacroCallLoc, MacroDefId, MacroFile, Origin,\n };\n pub use hir_ty::{display::HirDisplay, CallableDef};"}, {"sha": "b2fc48159d2fa1981a8f92db5e1c54f370604930", "filename": "crates/ra_ide/src/imports_locator.rs", "status": "modified", "additions": 24, "deletions": 46, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/d0a782ef1c53ef5c5d3b49b02c498f7a688c3a4d/crates%2Fra_ide%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a782ef1c53ef5c5d3b49b02c498f7a688c3a4d/crates%2Fra_ide%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fimports_locator.rs?ref=d0a782ef1c53ef5c5d3b49b02c498f7a688c3a4d", "patch": "@@ -3,13 +3,11 @@\n \n use crate::{\n     db::RootDatabase,\n-    references::{classify_name, classify_name_ref, NameDefinition, NameKind},\n+    references::{classify_name, NameDefinition, NameKind},\n     symbol_index::{self, FileSymbol},\n     Query,\n };\n-use ast::NameRef;\n-use hir::{db::HirDatabase, InFile, ModPath, Module, SourceBinder};\n-use itertools::Itertools;\n+use hir::{db::HirDatabase, ModuleDef, SourceBinder};\n use ra_assists::ImportsLocator;\n use ra_prof::profile;\n use ra_syntax::{ast, AstNode, SyntaxKind::NAME};\n@@ -23,14 +21,30 @@ impl<'a> ImportsLocatorIde<'a> {\n         Self { source_binder: SourceBinder::new(db) }\n     }\n \n-    fn search_for_imports(\n+    fn get_name_definition(\n         &mut self,\n-        name_to_import: &ast::NameRef,\n-        module_with_name_to_import: Module,\n-    ) -> Vec<ModPath> {\n+        db: &impl HirDatabase,\n+        import_candidate: &FileSymbol,\n+    ) -> Option<NameDefinition> {\n+        let _p = profile(\"get_name_definition\");\n+        let file_id = import_candidate.file_id.into();\n+        let candidate_node = import_candidate.ptr.to_node(&db.parse_or_expand(file_id)?);\n+        let candidate_name_node = if candidate_node.kind() != NAME {\n+            candidate_node.children().find(|it| it.kind() == NAME)?\n+        } else {\n+            candidate_node\n+        };\n+        classify_name(\n+            &mut self.source_binder,\n+            hir::InFile { file_id, value: &ast::Name::cast(candidate_name_node)? },\n+        )\n+    }\n+}\n+\n+impl<'a> ImportsLocator for ImportsLocatorIde<'a> {\n+    fn find_imports(&mut self, name_to_import: &str) -> Vec<ModuleDef> {\n         let _p = profile(\"search_for_imports\");\n         let db = self.source_binder.db;\n-        let name_to_import = name_to_import.text();\n \n         let project_results = {\n             let mut query = Query::new(name_to_import.to_string());\n@@ -52,47 +66,11 @@ impl<'a> ImportsLocatorIde<'a> {\n             .filter_map(|import_candidate| self.get_name_definition(db, &import_candidate))\n             .filter_map(|name_definition_to_import| {\n                 if let NameKind::Def(module_def) = name_definition_to_import.kind {\n-                    module_with_name_to_import.find_use_path(db, module_def)\n+                    Some(module_def)\n                 } else {\n                     None\n                 }\n             })\n-            .filter(|use_path| !use_path.segments.is_empty())\n-            .unique()\n-            .take(20)\n             .collect()\n     }\n-\n-    fn get_name_definition(\n-        &mut self,\n-        db: &impl HirDatabase,\n-        import_candidate: &FileSymbol,\n-    ) -> Option<NameDefinition> {\n-        let _p = profile(\"get_name_definition\");\n-        let file_id = import_candidate.file_id.into();\n-        let candidate_node = import_candidate.ptr.to_node(&db.parse_or_expand(file_id)?);\n-        let candidate_name_node = if candidate_node.kind() != NAME {\n-            candidate_node.children().find(|it| it.kind() == NAME)?\n-        } else {\n-            candidate_node\n-        };\n-        classify_name(\n-            &mut self.source_binder,\n-            hir::InFile { file_id, value: &ast::Name::cast(candidate_name_node)? },\n-        )\n-    }\n-}\n-\n-impl<'a> ImportsLocator for ImportsLocatorIde<'a> {\n-    fn find_imports(\n-        &mut self,\n-        name_to_import: InFile<&NameRef>,\n-        module_with_name_to_import: Module,\n-    ) -> Option<Vec<ModPath>> {\n-        if classify_name_ref(&mut self.source_binder, name_to_import).is_none() {\n-            Some(self.search_for_imports(name_to_import.value, module_with_name_to_import))\n-        } else {\n-            None\n-        }\n-    }\n }"}]}