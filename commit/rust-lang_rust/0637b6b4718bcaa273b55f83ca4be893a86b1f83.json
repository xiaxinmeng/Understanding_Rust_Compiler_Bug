{"sha": "0637b6b4718bcaa273b55f83ca4be893a86b1f83", "node_id": "C_kwDOAAsO6NoAKDA2MzdiNmI0NzE4YmNhYTI3M2I1NWY4M2NhNGJlODkzYTg2YjFmODM", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-09-11T08:27:25Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2023-02-10T02:08:11Z"}, "message": "Update implied_outlives_bounds to properly register implied bounds behind normalization", "tree": {"sha": "2cbd68de267d013b4651fdd0b31977cc003c4ba0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cbd68de267d013b4651fdd0b31977cc003c4ba0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0637b6b4718bcaa273b55f83ca4be893a86b1f83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0637b6b4718bcaa273b55f83ca4be893a86b1f83", "html_url": "https://github.com/rust-lang/rust/commit/0637b6b4718bcaa273b55f83ca4be893a86b1f83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0637b6b4718bcaa273b55f83ca4be893a86b1f83/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a663c0f53c71cbf69a982f699fbb00cdfce48f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a663c0f53c71cbf69a982f699fbb00cdfce48f8", "html_url": "https://github.com/rust-lang/rust/commit/1a663c0f53c71cbf69a982f699fbb00cdfce48f8"}], "stats": {"total": 101, "additions": 60, "deletions": 41}, "files": [{"sha": "2dd24fe03403840eb5c7166f9871956b6d17c160", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0637b6b4718bcaa273b55f83ca4be893a86b1f83/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0637b6b4718bcaa273b55f83ca4be893a86b1f83/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=0637b6b4718bcaa273b55f83ca4be893a86b1f83", "patch": "@@ -226,7 +226,6 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n         let param_env = self.param_env;\n         self.add_outlives_bounds(outlives::explicit_outlives_bounds(param_env));\n \n-        // Finally:\n         // - outlives is reflexive, so `'r: 'r` for every region `'r`\n         // - `'static: 'r` for every region `'r`\n         // - `'r: 'fn_body` for every (other) universally quantified\n@@ -263,7 +262,9 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n             // We add implied bounds from both the unnormalized and normalized ty.\n             // See issue #87748\n             let constraints_unnorm = self.add_implied_bounds(ty);\n-            constraints_unnorm.map(|c| constraints.push(c));\n+            if let Some(c) = constraints_unnorm {\n+                constraints.push(c)\n+            }\n             let TypeOpOutput { output: norm_ty, constraints: constraints_normalize, .. } = self\n                 .param_env\n                 .and(type_op::normalize::Normalize::new(ty))\n@@ -279,7 +280,9 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n                         error_info: None,\n                     }\n                 });\n-            constraints_normalize.map(|c| constraints.push(c));\n+            if let Some(c) = constraints_normalize {\n+                constraints.push(c)\n+            }\n \n             // Note: we need this in examples like\n             // ```\n@@ -295,7 +298,9 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n             // Both &Self::Bar and &() are WF\n             if ty != norm_ty {\n                 let constraints_norm = self.add_implied_bounds(norm_ty);\n-                constraints_norm.map(|c| constraints.push(c));\n+                if let Some(c) = constraints_norm {\n+                    constraints.push(c)\n+                }\n             }\n \n             normalized_inputs_and_output.push(norm_ty);"}, {"sha": "64c96281ed98380c256f472438c92a68ff322921", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0637b6b4718bcaa273b55f83ca4be893a86b1f83/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0637b6b4718bcaa273b55f83ca4be893a86b1f83/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=0637b6b4718bcaa273b55f83ca4be893a86b1f83", "patch": "@@ -910,7 +910,7 @@ pub(crate) struct MirTypeckRegionConstraints<'tcx> {\n }\n \n impl<'tcx> MirTypeckRegionConstraints<'tcx> {\n-    /// Creates a `Region` that for a given `PlaceholderRegion`, or returns the\n+    /// Creates a `Region` for a given `PlaceholderRegion`, or returns the\n     /// region that corresponds to a previously created one.\n     fn placeholder_region(\n         &mut self,"}, {"sha": "2c6c77072e60e4d7896d1ddc349f96cc7868bede", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 49, "deletions": 36, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/0637b6b4718bcaa273b55f83ca4be893a86b1f83/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0637b6b4718bcaa273b55f83ca4be893a86b1f83/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=0637b6b4718bcaa273b55f83ca4be893a86b1f83", "patch": "@@ -70,48 +70,61 @@ fn compute_implied_outlives_bounds<'tcx>(\n         let obligations = wf::obligations(ocx.infcx, param_env, CRATE_DEF_ID, 0, arg, DUMMY_SP)\n             .unwrap_or_default();\n \n-        // While these predicates should all be implied by other parts of\n-        // the program, they are still relevant as they may constrain\n-        // inference variables, which is necessary to add the correct\n-        // implied bounds in some cases, mostly when dealing with projections.\n-        ocx.register_obligations(\n-            obligations.iter().filter(|o| o.predicate.has_non_region_infer()).cloned(),\n-        );\n-\n-        // From the full set of obligations, just filter down to the\n-        // region relationships.\n-        outlives_bounds.extend(obligations.into_iter().filter_map(|obligation| {\n+        for obligation in obligations {\n             debug!(?obligation);\n             assert!(!obligation.has_escaping_bound_vars());\n-            match obligation.predicate.kind().no_bound_vars() {\n-                None => None,\n-                Some(pred) => match pred {\n-                    ty::PredicateKind::Clause(ty::Clause::Trait(..))\n-                    | ty::PredicateKind::Subtype(..)\n-                    | ty::PredicateKind::Coerce(..)\n-                    | ty::PredicateKind::Clause(ty::Clause::Projection(..))\n-                    | ty::PredicateKind::ClosureKind(..)\n-                    | ty::PredicateKind::ObjectSafe(..)\n-                    | ty::PredicateKind::ConstEvaluatable(..)\n-                    | ty::PredicateKind::ConstEquate(..)\n-                    | ty::PredicateKind::Ambiguous\n-                    | ty::PredicateKind::TypeWellFormedFromEnv(..) => None,\n-                    ty::PredicateKind::WellFormed(arg) => {\n-                        wf_args.push(arg);\n-                        None\n+\n+            // While these predicates should all be implied by other parts of\n+            // the program, they are still relevant as they may constrain\n+            // inference variables, which is necessary to add the correct\n+            // implied bounds in some cases, mostly when dealing with projections.\n+            //\n+            // Another important point here: we only register `Projection`\n+            // predicates, since otherwise we might register outlives\n+            // predicates containing inference variables, and we don't\n+            // learn anything new from those.\n+            if obligation.predicate.has_non_region_infer() {\n+                match obligation.predicate.kind().skip_binder() {\n+                    ty::PredicateKind::Clause(ty::Clause::Projection(..)) => {\n+                        ocx.register_obligation(obligation.clone());\n                     }\n+                    _ => {}\n+                }\n+            }\n \n-                    ty::PredicateKind::Clause(ty::Clause::RegionOutlives(\n-                        ty::OutlivesPredicate(r_a, r_b),\n-                    )) => Some(ty::OutlivesPredicate(r_a.into(), r_b)),\n+            let pred = match obligation.predicate.kind().no_bound_vars() {\n+                None => continue,\n+                Some(pred) => pred,\n+            };\n+            match pred {\n+                ty::PredicateKind::Clause(ty::Clause::Trait(..))\n+                | ty::PredicateKind::Subtype(..)\n+                | ty::PredicateKind::Coerce(..)\n+                | ty::PredicateKind::Clause(ty::Clause::Projection(..))\n+                | ty::PredicateKind::ClosureKind(..)\n+                | ty::PredicateKind::ObjectSafe(..)\n+                | ty::PredicateKind::ConstEvaluatable(..)\n+                | ty::PredicateKind::ConstEquate(..)\n+                | ty::PredicateKind::Ambiguous\n+                | ty::PredicateKind::TypeWellFormedFromEnv(..) => {}\n+\n+                // We need to search through *all* WellFormed predicates\n+                ty::PredicateKind::WellFormed(arg) => {\n+                    wf_args.push(arg);\n+                }\n+\n+                // We need to register region relationships\n+                ty::PredicateKind::Clause(ty::Clause::RegionOutlives(ty::OutlivesPredicate(\n+                    r_a,\n+                    r_b,\n+                ))) => outlives_bounds.push(ty::OutlivesPredicate(r_a.into(), r_b)),\n \n-                    ty::PredicateKind::Clause(ty::Clause::TypeOutlives(ty::OutlivesPredicate(\n-                        ty_a,\n-                        r_b,\n-                    ))) => Some(ty::OutlivesPredicate(ty_a.into(), r_b)),\n-                },\n+                ty::PredicateKind::Clause(ty::Clause::TypeOutlives(ty::OutlivesPredicate(\n+                    ty_a,\n+                    r_b,\n+                ))) => outlives_bounds.push(ty::OutlivesPredicate(ty_a.into(), r_b)),\n             }\n-        }));\n+        }\n     }\n \n     // This call to `select_all_or_error` is necessary to constrain inference variables, which we"}, {"sha": "8bea5588ae75e6b653b93bed2e6e1b1c6ee2e585", "filename": "compiler/rustc_traits/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0637b6b4718bcaa273b55f83ca4be893a86b1f83/compiler%2Frustc_traits%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0637b6b4718bcaa273b55f83ca4be893a86b1f83/compiler%2Frustc_traits%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Flib.rs?ref=0637b6b4718bcaa273b55f83ca4be893a86b1f83", "patch": "@@ -4,6 +4,7 @@\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n #![feature(let_chains)]\n+#![feature(drain_filter)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}]}