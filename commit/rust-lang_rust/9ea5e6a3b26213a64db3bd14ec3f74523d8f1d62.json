{"sha": "9ea5e6a3b26213a64db3bd14ec3f74523d8f1d62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllYTVlNmEzYjI2MjEzYTY0ZGIzYmQxNGVjM2Y3NDUyM2Q4ZjFkNjI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-12T01:05:05Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-12T01:18:53Z"}, "message": "manual: fix vec and str types to discuss definite / indefinite size.", "tree": {"sha": "ea515e6658ccd038ab258e4885e12d5ba845fe4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea515e6658ccd038ab258e4885e12d5ba845fe4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ea5e6a3b26213a64db3bd14ec3f74523d8f1d62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ea5e6a3b26213a64db3bd14ec3f74523d8f1d62", "html_url": "https://github.com/rust-lang/rust/commit/9ea5e6a3b26213a64db3bd14ec3f74523d8f1d62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ea5e6a3b26213a64db3bd14ec3f74523d8f1d62/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45dc69d887867d5ef1c6e8632bb6db1c786ffe56", "url": "https://api.github.com/repos/rust-lang/rust/commits/45dc69d887867d5ef1c6e8632bb6db1c786ffe56", "html_url": "https://github.com/rust-lang/rust/commit/45dc69d887867d5ef1c6e8632bb6db1c786ffe56"}], "stats": {"total": 47, "additions": 20, "deletions": 27}, "files": [{"sha": "88e3bd2125f0bb1e9e30c6188ad590fcbb704830", "filename": "doc/rust.md", "status": "modified", "additions": 20, "deletions": 27, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9ea5e6a3b26213a64db3bd14ec3f74523d8f1d62/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ea5e6a3b26213a64db3bd14ec3f74523d8f1d62/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=9ea5e6a3b26213a64db3bd14ec3f74523d8f1d62", "patch": "@@ -2478,13 +2478,16 @@ type `float` may not be equal to the largest *supported* floating-point type.\n \n ### Textual types\n \n-The types `char` and `~str` hold textual data.\n+The types `char` and `str` hold textual data.\n \n A value of type `char` is a Unicode character, represented as a 32-bit\n unsigned word holding a UCS-4 codepoint.\n \n-A value of type `~str` is a Unicode string, represented as a vector of 8-bit\n+A value of type `str` is a Unicode string, represented as a vector of 8-bit\n unsigned bytes holding a sequence of UTF-8 codepoints.\n+Since `str` is of indefinite size, it is not a _first class_ type,\n+but can only be instantiated through a pointer type,\n+such as `&str`, `@str` or `~str`.\n \n \n ### Tuple types\n@@ -2505,45 +2508,35 @@ order specified by the tuple type.\n An example of a tuple type and its use:\n \n ~~~~\n-type pair = (int,~str);\n-let p: pair = (10,~\"hello\");\n+type Pair = (int,&str);\n+let p: Pair = (10,\"hello\");\n let (a, b) = p;\n-assert b != ~\"world\";\n+assert b != \"world\";\n ~~~~\n \n \n ### Vector types\n \n-The vector type-constructor represents a homogeneous array of values of a\n-given type. A vector has a fixed size. The kind of a vector type depends on\n-the kind of its member type, as with other simple structural types.\n+The vector type-constructor represents a homogeneous array of values of a given type.\n+A vector has a fixed size.\n+A vector type can be accompanied by _definite_ size, written with a trailing asterisk and integer literal, such as `[int * 10]`.\n+Such a definite-sized vector can be treated as a first class type since its size is known statically.\n+A vector without such a size is said to be of _indefinite_ size,\n+and is therefore not a _first class_ type,\n+can only be instantiated through a pointer type,\n+such as `&[T]`, `@[T]` or `~[T]`.\n+The kind of a vector type depends on the kind of its member type, as with other simple structural types.\n \n An example of a vector type and its use:\n \n ~~~~\n-let v: ~[int] = ~[7, 5, 3];\n+let v: &[int] = [7, 5, 3];\n let i: int = v[2];\n assert (i == 3);\n ~~~~\n \n-Vectors always *allocate* a storage region sufficient to store the first power\n-of two worth of elements greater than or equal to the size of the vector. This\n-behaviour supports idiomatic in-place \"growth\" of a mutable slot holding a\n-vector:\n-\n-\n-~~~~\n-let mut v: ~[int] = ~[1, 2, 3];\n-v += ~[4, 5, 6];\n-~~~~\n-\n-Normal vector concatenation causes the allocation of a fresh vector to hold\n-the result; in this case, however, the slot holding the vector recycles the\n-underlying storage in-place (since the reference-count of the underlying\n-storage is equal to 1).\n-\n-All accessible elements of a vector are always initialized, and access to a\n-vector is always bounds-checked.\n+All accessible elements of a vector are always initialized, and access to a vector is always bounds-checked.\n+In the case of a definite-\n \n \n ### Structure types"}]}