{"sha": "59a04f5b122793134cd3e9b98d2b361cbafae482", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5YTA0ZjViMTIyNzkzMTM0Y2QzZTliOThkMmIzNjFjYmFmYWU0ODI=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-02-21T19:31:50Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-02-27T17:09:35Z"}, "message": "Immutable static items should be `Freeze` Fixes #12432", "tree": {"sha": "23018d57d88830f2408a84a42f3aef55e3e2b47a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23018d57d88830f2408a84a42f3aef55e3e2b47a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59a04f5b122793134cd3e9b98d2b361cbafae482", "comment_count": 21, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59a04f5b122793134cd3e9b98d2b361cbafae482", "html_url": "https://github.com/rust-lang/rust/commit/59a04f5b122793134cd3e9b98d2b361cbafae482", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59a04f5b122793134cd3e9b98d2b361cbafae482/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c7a0125b458429e12fed44acf0f2a8d6b0a7c38", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c7a0125b458429e12fed44acf0f2a8d6b0a7c38", "html_url": "https://github.com/rust-lang/rust/commit/0c7a0125b458429e12fed44acf0f2a8d6b0a7c38"}], "stats": {"total": 86, "additions": 68, "deletions": 18}, "files": [{"sha": "ebf1904d3cb2a5efb8854e2b1ddc98e0d4249aaa", "filename": "src/librustc/middle/check_static.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/59a04f5b122793134cd3e9b98d2b361cbafae482/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59a04f5b122793134cd3e9b98d2b361cbafae482/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs?ref=59a04f5b122793134cd3e9b98d2b361cbafae482", "patch": "@@ -118,8 +118,24 @@ impl Visitor<bool> for CheckStaticVisitor {\n                 self.tcx.sess.span_err(e.span,\n                                    \"static items are not allowed to have owned pointers\");\n             }\n+            ast::ExprProc(..) => {\n+                self.report_error(e.span,\n+                                  Some(~\"immutable static items must be `Freeze`\"));\n+                return;\n+            }\n+            ast::ExprAddrOf(mutability, _) => {\n+                match mutability {\n+                    ast::MutMutable => {\n+                        self.report_error(e.span,\n+                                  Some(~\"immutable static items must be `Freeze`\"));\n+                        return;\n+                    }\n+                    _ => {}\n+                }\n+            }\n             _ => {\n                 let node_ty = ty::node_id_to_type(self.tcx, e.id);\n+\n                 match ty::get(node_ty).sty {\n                     ty::ty_struct(did, _) |\n                     ty::ty_enum(did, _) => {\n@@ -128,6 +144,11 @@ impl Visitor<bool> for CheckStaticVisitor {\n                                      Some(~\"static items are not allowed to have destructors\"));\n                             return;\n                         }\n+                        if Some(did) == self.tcx.lang_items.no_freeze_bound() {\n+                            self.report_error(e.span,\n+                                              Some(~\"immutable static items must be `Freeze`\"));\n+                            return;\n+                        }\n                     }\n                     _ => {}\n                 }"}, {"sha": "852b06d00a64e765a242fa99d6bb6f0c6ab31647", "filename": "src/test/compile-fail/check-static-values-constraints.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/59a04f5b122793134cd3e9b98d2b361cbafae482/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59a04f5b122793134cd3e9b98d2b361cbafae482/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs?ref=59a04f5b122793134cd3e9b98d2b361cbafae482", "patch": "@@ -11,6 +11,8 @@\n \n // Verifies all possible restrictions for static items values.\n \n+use std::kinds::marker;\n+\n struct WithDtor;\n \n impl Drop for WithDtor {\n@@ -122,6 +124,30 @@ static STATIC18: @SafeStruct = @SafeStruct{field1: Variant1, field2: Variant2(0)\n static STATIC19: ~int = box 3;\n //~^ ERROR static items are not allowed to have owned pointers\n \n+\n+struct StructNoFreeze<'a> {\n+    nf: &'a int\n+}\n+\n+enum EnumNoFreeze<'a> {\n+    FreezableVariant,\n+    NonFreezableVariant(StructNoFreeze<'a>)\n+}\n+\n+static STATIC20: StructNoFreeze<'static> = StructNoFreeze{nf: &'static mut 4};\n+//~^ ERROR immutable static items must be `Freeze`\n+\n+static STATIC21: EnumNoFreeze<'static> = FreezableVariant;\n+static STATIC22: EnumNoFreeze<'static> = NonFreezableVariant(StructNoFreeze{nf: &'static mut 4});\n+//~^ ERROR immutable static items must be `Freeze`\n+\n+struct NFMarker {\n+    nf: marker::NoFreeze\n+}\n+\n+static STATIC23: NFMarker = NFMarker{nf: marker::NoFreeze};\n+//~^ ERROR immutable static items must be `Freeze`\n+\n pub fn main() {\n     let y = { static x: ~int = ~3; x };\n     //~^ ERROR static items are not allowed to have owned pointers"}, {"sha": "90dabb7e3a271d8dc18cc90e7e265eb372b5fe74", "filename": "src/test/compile-fail/static-mut-not-constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59a04f5b122793134cd3e9b98d2b361cbafae482/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59a04f5b122793134cd3e9b98d2b361cbafae482/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-constant.rs?ref=59a04f5b122793134cd3e9b98d2b361cbafae482", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static mut a: ~int = ~3; //~ ERROR: cannot do allocations in constant expressions\n+static mut a: ~int = ~3; //~ ERROR: mutable static items are not allowed to have owned pointers\n \n fn main() {}"}, {"sha": "18638ab68776ee545f40177a2dd59988d760ad79", "filename": "src/test/run-pass/const-fn-val.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59a04f5b122793134cd3e9b98d2b361cbafae482/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59a04f5b122793134cd3e9b98d2b361cbafae482/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs?ref=59a04f5b122793134cd3e9b98d2b361cbafae482", "patch": "@@ -14,8 +14,8 @@ fn foo() -> int {\n \n struct Bar<'a> { f: 'a || -> int }\n \n-static b : Bar<'static> = Bar { f: foo };\n+static mut b : Bar<'static> = Bar { f: foo };\n \n pub fn main() {\n-    assert_eq!((b.f)(), 0xca7f000d);\n+    unsafe { assert_eq!((b.f)(), 0xca7f000d); }\n }"}, {"sha": "9a93fcb5f89121d4c4d832add8af3e1169f8b7bc", "filename": "src/test/run-pass/const-vec-of-fns.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/59a04f5b122793134cd3e9b98d2b361cbafae482/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59a04f5b122793134cd3e9b98d2b361cbafae482/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs?ref=59a04f5b122793134cd3e9b98d2b361cbafae482", "patch": "@@ -18,12 +18,14 @@\n fn f() { }\n static bare_fns: &'static [fn()] = &[f, f];\n struct S<'a>('a ||);\n-static closures: &'static [S<'static>] = &[S(f), S(f)];\n+static mut closures: &'static [S<'static>] = &[S(f), S(f)];\n \n pub fn main() {\n-    for &bare_fn in bare_fns.iter() { bare_fn() }\n-    for closure in closures.iter() {\n-        let S(ref closure) = *closure;\n-        (*closure)()\n+    unsafe {\n+        for &bare_fn in bare_fns.iter() { bare_fn() }\n+        for closure in closures.iter() {\n+            let S(ref closure) = *closure;\n+            (*closure)()\n+        }\n     }\n }"}, {"sha": "db7b2803c71163913f6d7a7fbceae0ab6a4765dc", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/59a04f5b122793134cd3e9b98d2b361cbafae482/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59a04f5b122793134cd3e9b98d2b361cbafae482/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=59a04f5b122793134cd3e9b98d2b361cbafae482", "patch": "@@ -23,22 +23,23 @@ use std::io::process::{Process, ProcessOutput};\n #[test]\n fn test_destroy_once() {\n     #[cfg(not(target_os=\"android\"))]\n-    static PROG: &'static str = \"echo\";\n+    static mut PROG: &'static str = \"echo\";\n+\n     #[cfg(target_os=\"android\")]\n-    static PROG: &'static str = \"ls\"; // android don't have echo binary\n+    static mut PROG: &'static str = \"ls\"; // android don't have echo binary\n \n-    let mut p = Process::new(PROG, []).unwrap();\n+    let mut p = unsafe {Process::new(PROG, []).unwrap()};\n     p.signal_exit().unwrap(); // this shouldn't crash (and nor should the destructor)\n }\n \n #[test]\n fn test_destroy_twice() {\n     #[cfg(not(target_os=\"android\"))]\n-    static PROG: &'static str = \"echo\";\n+    static mut PROG: &'static str = \"echo\";\n     #[cfg(target_os=\"android\")]\n-    static PROG: &'static str = \"ls\"; // android don't have echo binary\n+    static mut PROG: &'static str = \"ls\"; // android don't have echo binary\n \n-    let mut p = match Process::new(PROG, []) {\n+    let mut p = match unsafe{Process::new(PROG, [])} {\n         Ok(p) => p,\n         Err(e) => fail!(\"wut: {}\", e),\n     };\n@@ -49,13 +50,13 @@ fn test_destroy_twice() {\n fn test_destroy_actually_kills(force: bool) {\n \n     #[cfg(unix,not(target_os=\"android\"))]\n-    static BLOCK_COMMAND: &'static str = \"cat\";\n+    static mut BLOCK_COMMAND: &'static str = \"cat\";\n \n     #[cfg(unix,target_os=\"android\")]\n-    static BLOCK_COMMAND: &'static str = \"/system/bin/cat\";\n+    static mut BLOCK_COMMAND: &'static str = \"/system/bin/cat\";\n \n     #[cfg(windows)]\n-    static BLOCK_COMMAND: &'static str = \"cmd\";\n+    static mut BLOCK_COMMAND: &'static str = \"cmd\";\n \n     #[cfg(unix,not(target_os=\"android\"))]\n     fn process_exists(pid: libc::pid_t) -> bool {\n@@ -91,7 +92,7 @@ fn test_destroy_actually_kills(force: bool) {\n     }\n \n     // this process will stay alive indefinitely trying to read from stdin\n-    let mut p = Process::new(BLOCK_COMMAND, []).unwrap();\n+    let mut p = unsafe {Process::new(BLOCK_COMMAND, []).unwrap()};\n \n     assert!(process_exists(p.id()));\n "}]}