{"sha": "2dc2fc5fc528aab7ba138f1a351df6f846dfec1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkYzJmYzVmYzUyOGFhYjdiYTEzOGYxYTM1MWRmNmY4NDZkZmVjMWQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-08-22T12:17:05Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-03T10:39:35Z"}, "message": "Fix rebase", "tree": {"sha": "a660c8c301bbb91b7bbbcf37d74be2dd3d2e5516", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a660c8c301bbb91b7bbbcf37d74be2dd3d2e5516"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dc2fc5fc528aab7ba138f1a351df6f846dfec1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dc2fc5fc528aab7ba138f1a351df6f846dfec1d", "html_url": "https://github.com/rust-lang/rust/commit/2dc2fc5fc528aab7ba138f1a351df6f846dfec1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dc2fc5fc528aab7ba138f1a351df6f846dfec1d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cb19389b060c4d34c8e0654aabce8d39304ccca", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cb19389b060c4d34c8e0654aabce8d39304ccca", "html_url": "https://github.com/rust-lang/rust/commit/0cb19389b060c4d34c8e0654aabce8d39304ccca"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "35f5eba4160d93e95aed09a5b5ee379000af9b4e", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2dc2fc5fc528aab7ba138f1a351df6f846dfec1d/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc2fc5fc528aab7ba138f1a351df6f846dfec1d/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=2dc2fc5fc528aab7ba138f1a351df6f846dfec1d", "patch": "@@ -1029,6 +1029,33 @@ impl<'a, 'tcx, 'encoder> ItemContentBuilder<'a, 'tcx, 'encoder> {\n                                               def_to_u64(ctor_did));\n                 }\n             }\n+            hir::ItemUnion(..) => {\n+                let def = ecx.tcx.lookup_adt_def(def_id);\n+                let variant = def.struct_variant();\n+\n+                encode_def_id_and_key(ecx, self.rbml_w, def_id);\n+                encode_family(self.rbml_w, 'U');\n+                self.encode_bounds_and_type_for_item(item.id);\n+\n+                encode_item_variances(self.rbml_w, ecx, item.id);\n+                encode_name(self.rbml_w, item.name);\n+                encode_attributes(self.rbml_w, &item.attrs);\n+                encode_stability(self.rbml_w, stab);\n+                encode_deprecation(self.rbml_w, depr);\n+                self.encode_visibility(vis);\n+                self.encode_repr_attrs(&item.attrs);\n+\n+                /* Encode def_ids for each field and method\n+                for methods, write all the stuff get_trait_method\n+                needs to know*/\n+                self.encode_struct_fields(variant);\n+\n+                encode_inlined_item(ecx, self.rbml_w, InlinedItemRef::Item(def_id, item));\n+                self.encode_mir(item.id);\n+\n+                // Encode inherent implementations for self union.\n+                encode_inherent_implementations(ecx, self.rbml_w, def_id);\n+            }\n             hir::ItemDefaultImpl(unsafety, _) => {\n                 encode_def_id_and_key(ecx, self.rbml_w, def_id);\n                 encode_family(self.rbml_w, 'd');\n@@ -1180,7 +1207,7 @@ impl<'a, 'tcx, 'encoder> IndexBuilder<'a, 'tcx, 'encoder> {\n                 self.encode_addl_struct_info(def_id, struct_def.id(), item);\n             }\n             hir::ItemUnion(..) => {\n-                unimplemented_unions!();\n+                self.encode_addl_union_info(def_id);\n             }\n             hir::ItemImpl(_, _, _, _, _, ref ast_items) => {\n                 self.encode_addl_impl_info(def_id, item.id, ast_items);\n@@ -1217,6 +1244,10 @@ impl<'a, 'tcx, 'encoder> IndexBuilder<'a, 'tcx, 'encoder> {\n         }\n     }\n \n+    fn encode_addl_union_info(&mut self, def_id: DefId) {\n+        self.encode_fields(def_id);\n+    }\n+\n     fn encode_addl_impl_info(&mut self,\n                              def_id: DefId,\n                              impl_id: ast::NodeId,"}]}