{"sha": "30250d3de8d730d977d157f92e5671c87df855ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMjUwZDNkZThkNzMwZDk3N2QxNTdmOTJlNTY3MWM4N2RmODU1YWI=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-04-04T11:47:16Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-05-16T16:55:29Z"}, "message": "flate: add documentation", "tree": {"sha": "ff86a5672a4e9a010e3a0664eb8d025c2f95b555", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff86a5672a4e9a010e3a0664eb8d025c2f95b555"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30250d3de8d730d977d157f92e5671c87df855ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30250d3de8d730d977d157f92e5671c87df855ab", "html_url": "https://github.com/rust-lang/rust/commit/30250d3de8d730d977d157f92e5671c87df855ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30250d3de8d730d977d157f92e5671c87df855ab/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbd034c3a6e0325da0cb743cab007d69a736557a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbd034c3a6e0325da0cb743cab007d69a736557a", "html_url": "https://github.com/rust-lang/rust/commit/bbd034c3a6e0325da0cb743cab007d69a736557a"}], "stats": {"total": 46, "additions": 26, "deletions": 20}, "files": [{"sha": "03050794d212ce21400c88e165da7a3084f6ca3c", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/30250d3de8d730d977d157f92e5671c87df855ab/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30250d3de8d730d977d157f92e5671c87df855ab/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=30250d3de8d730d977d157f92e5671c87df855ab", "patch": "@@ -10,7 +10,11 @@\n \n /*!\n \n-Simple compression\n+Simple [DEFLATE][def]-based compression. This is a wrapper around the\n+[`miniz`][mz] library, which is a one-file pure-C implementation of zlib.\n+\n+[def]: https://en.wikipedia.org/wiki/DEFLATE\n+[mz]: https://code.google.com/p/miniz/\n \n */\n \n@@ -31,23 +35,21 @@ extern crate libc;\n use std::c_vec::CVec;\n use libc::{c_void, size_t, c_int};\n \n-\n-pub mod rustrt {\n-    use libc::{c_void, size_t, c_int};\n-    #[link(name = \"miniz\", kind = \"static\")]\n-    extern {\n-        pub fn tdefl_compress_mem_to_heap(psrc_buf: *c_void,\n-                                          src_buf_len: size_t,\n-                                          pout_len: *mut size_t,\n-                                          flags: c_int)\n-                                          -> *mut c_void;\n-\n-        pub fn tinfl_decompress_mem_to_heap(psrc_buf: *c_void,\n-                                            src_buf_len: size_t,\n-                                            pout_len: *mut size_t,\n-                                            flags: c_int)\n-                                            -> *mut c_void;\n-    }\n+#[link(name = \"miniz\", kind = \"static\")]\n+extern {\n+    /// Raw miniz compression function.\n+    fn tdefl_compress_mem_to_heap(psrc_buf: *c_void,\n+                                      src_buf_len: size_t,\n+                                      pout_len: *mut size_t,\n+                                      flags: c_int)\n+                                      -> *mut c_void;\n+\n+    /// Raw miniz decompression function.\n+    fn tinfl_decompress_mem_to_heap(psrc_buf: *c_void,\n+                                        src_buf_len: size_t,\n+                                        pout_len: *mut size_t,\n+                                        flags: c_int)\n+                                        -> *mut c_void;\n }\n \n static LZ_NORM : c_int = 0x80;  // LZ with 128 probes, \"normal\"\n@@ -57,7 +59,7 @@ static TDEFL_WRITE_ZLIB_HEADER : c_int = 0x01000; // write zlib header and adler\n fn deflate_bytes_internal(bytes: &[u8], flags: c_int) -> Option<CVec<u8>> {\n     unsafe {\n         let mut outsz : size_t = 0;\n-        let res = rustrt::tdefl_compress_mem_to_heap(bytes.as_ptr() as *c_void,\n+        let res = tdefl_compress_mem_to_heap(bytes.as_ptr() as *c_void,\n                                                      bytes.len() as size_t,\n                                                      &mut outsz,\n                                                      flags);\n@@ -69,18 +71,20 @@ fn deflate_bytes_internal(bytes: &[u8], flags: c_int) -> Option<CVec<u8>> {\n     }\n }\n \n+/// Compress a buffer, without writing any sort of header on the output.\n pub fn deflate_bytes(bytes: &[u8]) -> Option<CVec<u8>> {\n     deflate_bytes_internal(bytes, LZ_NORM)\n }\n \n+/// Compress a buffer, using a header that zlib can understand.\n pub fn deflate_bytes_zlib(bytes: &[u8]) -> Option<CVec<u8>> {\n     deflate_bytes_internal(bytes, LZ_NORM | TDEFL_WRITE_ZLIB_HEADER)\n }\n \n fn inflate_bytes_internal(bytes: &[u8], flags: c_int) -> Option<CVec<u8>> {\n     unsafe {\n         let mut outsz : size_t = 0;\n-        let res = rustrt::tinfl_decompress_mem_to_heap(bytes.as_ptr() as *c_void,\n+        let res = tinfl_decompress_mem_to_heap(bytes.as_ptr() as *c_void,\n                                                        bytes.len() as size_t,\n                                                        &mut outsz,\n                                                        flags);\n@@ -92,10 +96,12 @@ fn inflate_bytes_internal(bytes: &[u8], flags: c_int) -> Option<CVec<u8>> {\n     }\n }\n \n+/// Decompress a buffer, without parsing any sort of header on the input.\n pub fn inflate_bytes(bytes: &[u8]) -> Option<CVec<u8>> {\n     inflate_bytes_internal(bytes, 0)\n }\n \n+/// Decompress a buffer that starts with a zlib header.\n pub fn inflate_bytes_zlib(bytes: &[u8]) -> Option<CVec<u8>> {\n     inflate_bytes_internal(bytes, TINFL_FLAG_PARSE_ZLIB_HEADER)\n }"}]}