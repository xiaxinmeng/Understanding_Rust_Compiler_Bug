{"sha": "74864fa496997a6498e623f0d2019ccb7eb6dad0", "node_id": "C_kwDOAAsO6NoAKDc0ODY0ZmE0OTY5OTdhNjQ5OGU2MjNmMGQyMDE5Y2NiN2ViNmRhZDA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-18T05:28:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-18T05:28:44Z"}, "message": "Auto merge of #110481 - matthiaskrgr:rollup-phkkgm9, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #109981 (Set commit information environment variables when building tools)\n - #110348 (Add list of supported disambiguators and suffixes for intra-doc links in the rustdoc book)\n - #110409 (Don't use `serde_json` to serialize a simple JSON object)\n - #110442 (Avoid including dry run steps in the build metrics)\n - #110450 (rustdoc: Fix invalid handling of nested items with `--document-private-items`)\n - #110461 (Use `Item::expect_*` and `ImplItem::expect_*` more)\n - #110465 (Assure everyone that `has_type_flags` is fast)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "90fc9fcdd8e4fb35b88ffa626a5f97a0b2734a62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90fc9fcdd8e4fb35b88ffa626a5f97a0b2734a62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74864fa496997a6498e623f0d2019ccb7eb6dad0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74864fa496997a6498e623f0d2019ccb7eb6dad0", "html_url": "https://github.com/rust-lang/rust/commit/74864fa496997a6498e623f0d2019ccb7eb6dad0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74864fa496997a6498e623f0d2019ccb7eb6dad0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "386025117a6b7cd9e7f7c96946793db2ec8aa24c", "url": "https://api.github.com/repos/rust-lang/rust/commits/386025117a6b7cd9e7f7c96946793db2ec8aa24c", "html_url": "https://github.com/rust-lang/rust/commit/386025117a6b7cd9e7f7c96946793db2ec8aa24c"}, {"sha": "5606653f01b6b2fbcbaa1b2ff37e04d4e66486f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5606653f01b6b2fbcbaa1b2ff37e04d4e66486f8", "html_url": "https://github.com/rust-lang/rust/commit/5606653f01b6b2fbcbaa1b2ff37e04d4e66486f8"}], "stats": {"total": 314, "additions": 244, "deletions": 70}, "files": [{"sha": "da2e483fe61b2be1ac8a79b5334a8b86f36f927b", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74864fa496997a6498e623f0d2019ccb7eb6dad0/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/74864fa496997a6498e623f0d2019ccb7eb6dad0/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=74864fa496997a6498e623f0d2019ccb7eb6dad0", "patch": "@@ -3181,7 +3181,6 @@ dependencies = [\n  \"rustc_index\",\n  \"rustc_macros\",\n  \"rustc_serialize\",\n- \"serde_json\",\n  \"smallvec\",\n  \"stable_deref_trait\",\n  \"stacker\","}, {"sha": "7b94f6edf7039e48e0a5f6878709417abaa2f938", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74864fa496997a6498e623f0d2019ccb7eb6dad0/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74864fa496997a6498e623f0d2019ccb7eb6dad0/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=74864fa496997a6498e623f0d2019ccb7eb6dad0", "patch": "@@ -138,12 +138,10 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n             // Evaluate with the lifetimes in `params` in-scope.\n             // This is used to track which lifetimes have already been defined,\n             // and which need to be replicated when lowering an async fn.\n-            match parent_hir.node().expect_item().kind {\n-                hir::ItemKind::Impl(hir::Impl { of_trait, .. }) => {\n-                    lctx.is_in_trait_impl = of_trait.is_some();\n-                }\n-                _ => {}\n-            };\n+\n+            if let hir::ItemKind::Impl(impl_) = parent_hir.node().expect_item().kind {\n+                lctx.is_in_trait_impl = impl_.of_trait.is_some();\n+            }\n \n             match ctxt {\n                 AssocCtxt::Trait => hir::OwnerNode::TraitItem(lctx.lower_trait_item(item)),"}, {"sha": "39f4bc63c88d1accb807c874f7ddfac794c65bb1", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74864fa496997a6498e623f0d2019ccb7eb6dad0/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/74864fa496997a6498e623f0d2019ccb7eb6dad0/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=74864fa496997a6498e623f0d2019ccb7eb6dad0", "patch": "@@ -21,7 +21,6 @@ rustc-hash = \"1.1.0\"\n rustc_index = { path = \"../rustc_index\", package = \"rustc_index\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n-serde_json = \"1.0.59\"\n smallvec = { version = \"1.8.1\", features = [\n     \"const_generics\",\n     \"union\","}, {"sha": "8fa1ac70a78c0533c395c2c1a5f981e8883eb9bf", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/74864fa496997a6498e623f0d2019ccb7eb6dad0/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74864fa496997a6498e623f0d2019ccb7eb6dad0/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=74864fa496997a6498e623f0d2019ccb7eb6dad0", "patch": "@@ -87,6 +87,7 @@ use crate::fx::FxHashMap;\n use std::borrow::Borrow;\n use std::collections::hash_map::Entry;\n use std::error::Error;\n+use std::fmt::Display;\n use std::fs;\n use std::intrinsics::unlikely;\n use std::path::Path;\n@@ -97,7 +98,6 @@ use std::time::{Duration, Instant};\n pub use measureme::EventId;\n use measureme::{EventIdBuilder, Profiler, SerializableString, StringId};\n use parking_lot::RwLock;\n-use serde_json::json;\n use smallvec::SmallVec;\n \n bitflags::bitflags! {\n@@ -763,6 +763,31 @@ impl Drop for VerboseTimingGuard<'_> {\n     }\n }\n \n+struct JsonTimePassesEntry<'a> {\n+    pass: &'a str,\n+    time: f64,\n+    start_rss: Option<usize>,\n+    end_rss: Option<usize>,\n+}\n+\n+impl Display for JsonTimePassesEntry<'_> {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        let Self { pass: what, time, start_rss, end_rss } = self;\n+        write!(f, r#\"{{\"pass\":\"{what}\",\"time\":{time},\"rss_start\":\"#).unwrap();\n+        match start_rss {\n+            Some(rss) => write!(f, \"{rss}\")?,\n+            None => write!(f, \"null\")?,\n+        }\n+        write!(f, r#\",\"rss_end\":\"#)?;\n+        match end_rss {\n+            Some(rss) => write!(f, \"{rss}\")?,\n+            None => write!(f, \"null\")?,\n+        }\n+        write!(f, \"}}\")?;\n+        Ok(())\n+    }\n+}\n+\n pub fn print_time_passes_entry(\n     what: &str,\n     dur: Duration,\n@@ -772,13 +797,10 @@ pub fn print_time_passes_entry(\n ) {\n     match format {\n         TimePassesFormat::Json => {\n-            let json = json!({\n-                \"pass\": what,\n-                \"time\": dur.as_secs_f64(),\n-                \"rss_start\": start_rss,\n-                \"rss_end\": end_rss,\n-            });\n-            eprintln!(\"time: {json}\");\n+            let entry =\n+                JsonTimePassesEntry { pass: what, time: dur.as_secs_f64(), start_rss, end_rss };\n+\n+            eprintln!(r#\"time: {entry}\"#);\n             return;\n         }\n         TimePassesFormat::Text => (),\n@@ -894,3 +916,6 @@ cfg_if! {\n         }\n     }\n }\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "2b09de085da061a752a1c9c0085e2f65082dc899", "filename": "compiler/rustc_data_structures/src/profiling/tests.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/74864fa496997a6498e623f0d2019ccb7eb6dad0/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74864fa496997a6498e623f0d2019ccb7eb6dad0/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling%2Ftests.rs?ref=74864fa496997a6498e623f0d2019ccb7eb6dad0", "patch": "@@ -0,0 +1,19 @@\n+use super::JsonTimePassesEntry;\n+\n+#[test]\n+fn with_rss() {\n+    let entry =\n+        JsonTimePassesEntry { pass: \"typeck\", time: 56.1, start_rss: Some(10), end_rss: Some(20) };\n+\n+    assert_eq!(entry.to_string(), r#\"{\"pass\":\"typeck\",\"time\":56.1,\"rss_start\":10,\"rss_end\":20}\"#)\n+}\n+\n+#[test]\n+fn no_rss() {\n+    let entry = JsonTimePassesEntry { pass: \"typeck\", time: 56.1, start_rss: None, end_rss: None };\n+\n+    assert_eq!(\n+        entry.to_string(),\n+        r#\"{\"pass\":\"typeck\",\"time\":56.1,\"rss_start\":null,\"rss_end\":null}\"#\n+    )\n+}"}, {"sha": "fb0c087bfb47197f12b77c0b6fe15d180e0cfe9d", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74864fa496997a6498e623f0d2019ccb7eb6dad0/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74864fa496997a6498e623f0d2019ccb7eb6dad0/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=74864fa496997a6498e623f0d2019ccb7eb6dad0", "patch": "@@ -3146,7 +3146,6 @@ impl<'hir> Item<'hir> {\n         (ty, gen)\n     }\n \n-    /// An opaque `impl Trait` type alias, e.g., `type Foo = impl Bar;`.\n     /// Expect an [`ItemKind::OpaqueTy`] or panic.\n     #[track_caller]\n     pub fn expect_opaque_ty(&self) -> &OpaqueTy<'hir> {\n@@ -3168,7 +3167,6 @@ impl<'hir> Item<'hir> {\n         (data, gen)\n     }\n \n-    /// A union definition, e.g., `union Foo<A, B> {x: A, y: B}`.\n     /// Expect an [`ItemKind::Union`] or panic.\n     #[track_caller]\n     pub fn expect_union(&self) -> (&VariantData<'hir>, &'hir Generics<'hir>) {"}, {"sha": "c2dc2a0f058f33bbc6dcaa028524756ee237accc", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74864fa496997a6498e623f0d2019ccb7eb6dad0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74864fa496997a6498e623f0d2019ccb7eb6dad0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=74864fa496997a6498e623f0d2019ccb7eb6dad0", "patch": "@@ -74,10 +74,9 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n \n     debug!(\"visit_implementation_of_copy: self_type={:?} (free)\", self_type);\n \n-    let span = match tcx.hir().expect_item(impl_did).kind {\n-        ItemKind::Impl(hir::Impl { polarity: hir::ImplPolarity::Negative(_), .. }) => return,\n-        ItemKind::Impl(impl_) => impl_.self_ty.span,\n-        _ => bug!(\"expected Copy impl item\"),\n+    let span = match tcx.hir().expect_item(impl_did).expect_impl() {\n+        hir::Impl { polarity: hir::ImplPolarity::Negative(_), .. } => return,\n+        hir::Impl { self_ty, .. } => self_ty.span,\n     };\n \n     let cause = traits::ObligationCause::misc(span, impl_did);"}, {"sha": "e410172c8c8d14bddcbb30c12350d3b77ff19d7b", "filename": "compiler/rustc_infer/src/infer/error_reporting/note_and_explain.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74864fa496997a6498e623f0d2019ccb7eb6dad0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74864fa496997a6498e623f0d2019ccb7eb6dad0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs?ref=74864fa496997a6498e623f0d2019ccb7eb6dad0", "patch": "@@ -462,10 +462,7 @@ fn foo(&self) -> Self::T { String::new() }\n         if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) = *proj_ty.self_ty().kind() {\n             let opaque_local_def_id = def_id.as_local();\n             let opaque_hir_ty = if let Some(opaque_local_def_id) = opaque_local_def_id {\n-                match &tcx.hir().expect_item(opaque_local_def_id).kind {\n-                    hir::ItemKind::OpaqueTy(opaque_hir_ty) => opaque_hir_ty,\n-                    _ => bug!(\"The HirId comes from a `ty::Opaque`\"),\n-                }\n+                tcx.hir().expect_item(opaque_local_def_id).expect_opaque_ty()\n             } else {\n                 return false;\n             };"}, {"sha": "680465bdab6901a3a02d61127ea53b58526a90f8", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74864fa496997a6498e623f0d2019ccb7eb6dad0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74864fa496997a6498e623f0d2019ccb7eb6dad0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=74864fa496997a6498e623f0d2019ccb7eb6dad0", "patch": "@@ -392,12 +392,7 @@ impl<'tcx> InferCtxt<'tcx> {\n     /// defining scope.\n     #[instrument(skip(self), level = \"trace\", ret)]\n     fn opaque_type_origin_unchecked(&self, def_id: LocalDefId) -> OpaqueTyOrigin {\n-        match self.tcx.hir().expect_item(def_id).kind {\n-            hir::ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => origin,\n-            ref itemkind => {\n-                bug!(\"weird opaque type: {:?}, {:#?}\", def_id, itemkind)\n-            }\n-        }\n+        self.tcx.hir().expect_item(def_id).expect_opaque_ty().origin\n     }\n }\n "}, {"sha": "e7c3cf779d3d007870443c441bf25a8c6c66aab9", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74864fa496997a6498e623f0d2019ccb7eb6dad0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74864fa496997a6498e623f0d2019ccb7eb6dad0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=74864fa496997a6498e623f0d2019ccb7eb6dad0", "patch": "@@ -1469,8 +1469,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         match impl_item.kind {\n             ty::AssocKind::Fn => {\n-                let ast_item = self.tcx.hir().expect_impl_item(def_id.expect_local());\n-                let hir::ImplItemKind::Fn(ref sig, body) = ast_item.kind else { bug!() };\n+                let (sig, body) =\n+                    self.tcx.hir().expect_impl_item(def_id.expect_local()).expect_fn();\n                 self.tables.asyncness.set_some(def_id.index, sig.header.asyncness);\n                 record_array!(self.tables.fn_arg_names[def_id] <- self.tcx.hir().body_param_names(body));\n                 // Can be inside `impl const Trait`, so using sig.header.constness is not reliable"}, {"sha": "1b07f52afca925151da838704662e0822f58d5c4", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74864fa496997a6498e623f0d2019ccb7eb6dad0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74864fa496997a6498e623f0d2019ccb7eb6dad0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=74864fa496997a6498e623f0d2019ccb7eb6dad0", "patch": "@@ -33,6 +33,14 @@ pub trait TypeVisitableExt<'tcx>: TypeVisitable<TyCtxt<'tcx>> {\n     }\n \n     fn has_type_flags(&self, flags: TypeFlags) -> bool {\n+        // N.B. Even though this uses a visitor, the visitor does not actually\n+        //      recurse through the whole `TypeVisitable` implementor type.\n+        //\n+        //      Instead it stops on the first \"level\", visiting types, regions,\n+        //      consts and predicates just fetches their type flags.\n+        //\n+        //      Thus this is a lot faster than it might seem and should be\n+        //      optimized to a simple field access.\n         let res =\n             self.visit_with(&mut HasTypeFlagsVisitor { flags }).break_value() == Some(FoundFlags);\n         trace!(?self, ?flags, ?res, \"has_type_flags\");"}, {"sha": "4977ce22724f12044a1bb7f02900dc38e29028b0", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74864fa496997a6498e623f0d2019ccb7eb6dad0/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74864fa496997a6498e623f0d2019ccb7eb6dad0/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=74864fa496997a6498e623f0d2019ccb7eb6dad0", "patch": "@@ -2030,7 +2030,7 @@ impl<'a> Builder<'a> {\n         }\n \n         #[cfg(feature = \"build-metrics\")]\n-        self.metrics.enter_step(&step);\n+        self.metrics.enter_step(&step, self);\n \n         let (out, dur) = {\n             let start = Instant::now();\n@@ -2056,7 +2056,7 @@ impl<'a> Builder<'a> {\n         }\n \n         #[cfg(feature = \"build-metrics\")]\n-        self.metrics.exit_step();\n+        self.metrics.exit_step(self);\n \n         {\n             let mut stack = self.stack.borrow_mut();"}, {"sha": "e19d56ccd6adca44558add0c5ac2962118bc5848", "filename": "src/bootstrap/metrics.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/74864fa496997a6498e623f0d2019ccb7eb6dad0/src%2Fbootstrap%2Fmetrics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74864fa496997a6498e623f0d2019ccb7eb6dad0/src%2Fbootstrap%2Fmetrics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetrics.rs?ref=74864fa496997a6498e623f0d2019ccb7eb6dad0", "patch": "@@ -4,7 +4,7 @@\n //! As this module requires additional dependencies not present during local builds, it's cfg'd\n //! away whenever the `build.metrics` config option is not set to `true`.\n \n-use crate::builder::Step;\n+use crate::builder::{Builder, Step};\n use crate::util::t;\n use crate::Build;\n use serde_derive::{Deserialize, Serialize};\n@@ -33,7 +33,12 @@ impl BuildMetrics {\n         BuildMetrics { state }\n     }\n \n-    pub(crate) fn enter_step<S: Step>(&self, step: &S) {\n+    pub(crate) fn enter_step<S: Step>(&self, step: &S, builder: &Builder<'_>) {\n+        // Do not record dry runs, as they'd be duplicates of the actual steps.\n+        if builder.config.dry_run() {\n+            return;\n+        }\n+\n         let mut state = self.state.borrow_mut();\n \n         // Consider all the stats gathered so far as the parent's.\n@@ -56,7 +61,12 @@ impl BuildMetrics {\n         });\n     }\n \n-    pub(crate) fn exit_step(&self) {\n+    pub(crate) fn exit_step(&self, builder: &Builder<'_>) {\n+        // Do not record dry runs, as they'd be duplicates of the actual steps.\n+        if builder.config.dry_run() {\n+            return;\n+        }\n+\n         let mut state = self.state.borrow_mut();\n \n         self.collect_stats(&mut *state);\n@@ -74,7 +84,12 @@ impl BuildMetrics {\n         }\n     }\n \n-    pub(crate) fn record_test(&self, name: &str, outcome: TestOutcome) {\n+    pub(crate) fn record_test(&self, name: &str, outcome: TestOutcome, builder: &Builder<'_>) {\n+        // Do not record dry runs, as they'd be duplicates of the actual steps.\n+        if builder.config.dry_run() {\n+            return;\n+        }\n+\n         let mut state = self.state.borrow_mut();\n         state\n             .running_steps"}, {"sha": "a56db9cccfe5ba254d0d2595b0154a0feccb37fb", "filename": "src/bootstrap/render_tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74864fa496997a6498e623f0d2019ccb7eb6dad0/src%2Fbootstrap%2Frender_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74864fa496997a6498e623f0d2019ccb7eb6dad0/src%2Fbootstrap%2Frender_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frender_tests.rs?ref=74864fa496997a6498e623f0d2019ccb7eb6dad0", "patch": "@@ -124,6 +124,7 @@ impl<'a> Renderer<'a> {\n                     ignore_reason: reason.map(|s| s.to_string()),\n                 },\n             },\n+            self.builder,\n         );\n \n         if self.builder.config.verbose_tests {"}, {"sha": "3814dc63ed4dcfc7ca37e2e1eed809cbdbddbcf8", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74864fa496997a6498e623f0d2019ccb7eb6dad0/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74864fa496997a6498e623f0d2019ccb7eb6dad0/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=74864fa496997a6498e623f0d2019ccb7eb6dad0", "patch": "@@ -1804,6 +1804,10 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n \n         cmd.arg(\"--channel\").arg(&builder.config.channel);\n \n+        if !builder.config.omit_git_hash {\n+            cmd.arg(\"--git-hash\");\n+        }\n+\n         if let Some(commit) = builder.config.download_rustc_commit() {\n             cmd.env(\"FAKE_DOWNLOAD_RUSTC_PREFIX\", format!(\"/rustc/{commit}\"));\n         }"}, {"sha": "79fab00efe703d7fa83c621789b190743deeedd6", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74864fa496997a6498e623f0d2019ccb7eb6dad0/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74864fa496997a6498e623f0d2019ccb7eb6dad0/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=74864fa496997a6498e623f0d2019ccb7eb6dad0", "patch": "@@ -194,6 +194,12 @@ pub fn prepare_tool_cargo(\n     cargo.env(\"CFG_VERSION\", builder.rust_version());\n     cargo.env(\"CFG_RELEASE_NUM\", &builder.version);\n     cargo.env(\"DOC_RUST_LANG_ORG_CHANNEL\", builder.doc_rust_lang_org_channel());\n+    if let Some(ref ver_date) = builder.rust_info().commit_date() {\n+        cargo.env(\"CFG_VER_DATE\", ver_date);\n+    }\n+    if let Some(ref ver_hash) = builder.rust_info().sha() {\n+        cargo.env(\"CFG_VER_HASH\", ver_hash);\n+    }\n \n     let info = GitInfo::new(builder.config.omit_git_hash, &dir);\n     if let Some(sha) = info.sha() {"}, {"sha": "72157b5cd9bcee76bca3166d05d3d483d067fc07", "filename": "src/doc/rustdoc/src/write-documentation/linking-to-items-by-name.md", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/74864fa496997a6498e623f0d2019ccb7eb6dad0/src%2Fdoc%2Frustdoc%2Fsrc%2Fwrite-documentation%2Flinking-to-items-by-name.md", "raw_url": "https://github.com/rust-lang/rust/raw/74864fa496997a6498e623f0d2019ccb7eb6dad0/src%2Fdoc%2Frustdoc%2Fsrc%2Fwrite-documentation%2Flinking-to-items-by-name.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fwrite-documentation%2Flinking-to-items-by-name.md?ref=74864fa496997a6498e623f0d2019ccb7eb6dad0", "patch": "@@ -88,13 +88,16 @@ fn Foo() {}\n ```\n \n These prefixes will be stripped when displayed in the documentation, so `[struct@Foo]` will be\n-rendered as `Foo`.\n+rendered as `Foo`. The following prefixes are available: `struct`, `enum`, `trait`, `union`,\n+`mod`, `module`, `const`, `constant`, `fn`, `function`, `method`, `derive`, `type`, `value`,\n+`macro`, `prim` or `primitive`.\n \n You can also disambiguate for functions by adding `()` after the function name,\n-or for macros by adding `!` after the macro name:\n+or for macros by adding `!` after the macro name. The macro `!` can be followed by `()`, `{}`,\n+or `[]`. Example:\n \n ```rust\n-/// This is different from [`foo!`]\n+/// This is different from [`foo!()`].\n fn foo() {}\n \n /// This is different from [`foo()`]"}, {"sha": "33e80df9ed77bb2b4ef4ceadec740892fa7627a8", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74864fa496997a6498e623f0d2019ccb7eb6dad0/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74864fa496997a6498e623f0d2019ccb7eb6dad0/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=74864fa496997a6498e623f0d2019ccb7eb6dad0", "patch": "@@ -1419,6 +1419,7 @@ impl Disambiguator {\n         if let Some(idx) = link.find('@') {\n             let (prefix, rest) = link.split_at(idx);\n             let d = match prefix {\n+                // If you update this list, please also update the relevant rustdoc book section!\n                 \"struct\" => Kind(DefKind::Struct),\n                 \"enum\" => Kind(DefKind::Enum),\n                 \"trait\" => Kind(DefKind::Trait),\n@@ -1437,6 +1438,7 @@ impl Disambiguator {\n             Ok(Some((d, &rest[1..], &rest[1..])))\n         } else {\n             let suffixes = [\n+                // If you update this list, please also update the relevant rustdoc book section!\n                 (\"!()\", DefKind::Macro(MacroKind::Bang)),\n                 (\"!{}\", DefKind::Macro(MacroKind::Bang)),\n                 (\"![]\", DefKind::Macro(MacroKind::Bang)),"}, {"sha": "a6089680fae9d57a8e50204991b86c2d3c9c0abd", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/74864fa496997a6498e623f0d2019ccb7eb6dad0/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74864fa496997a6498e623f0d2019ccb7eb6dad0/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=74864fa496997a6498e623f0d2019ccb7eb6dad0", "patch": "@@ -10,6 +10,7 @@ use rustc_hir::{Node, CRATE_HIR_ID};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::{CRATE_DEF_ID, LOCAL_CRATE};\n+use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n \n@@ -87,6 +88,7 @@ pub(crate) struct RustdocVisitor<'a, 'tcx> {\n     inside_public_path: bool,\n     exact_paths: DefIdMap<Vec<Symbol>>,\n     modules: Vec<Module<'tcx>>,\n+    is_importable_from_parent: bool,\n }\n \n impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n@@ -107,6 +109,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             inside_public_path: true,\n             exact_paths: Default::default(),\n             modules: vec![om],\n+            is_importable_from_parent: true,\n         }\n     }\n \n@@ -319,19 +322,31 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         renamed: Option<Symbol>,\n         parent_id: Option<LocalDefId>,\n     ) {\n-        self.modules\n-            .last_mut()\n-            .unwrap()\n-            .items\n-            .insert((item.owner_id.def_id, renamed), (item, renamed, parent_id));\n+        if self.is_importable_from_parent\n+            // If we're inside an item, only impl blocks and `macro_rules!` with the `macro_export`\n+            // attribute can still be visible.\n+            || match item.kind {\n+                hir::ItemKind::Impl(..) => true,\n+                hir::ItemKind::Macro(_, MacroKind::Bang) => {\n+                    self.cx.tcx.has_attr(item.owner_id.def_id, sym::macro_export)\n+                }\n+                _ => false,\n+            }\n+        {\n+            self.modules\n+                .last_mut()\n+                .unwrap()\n+                .items\n+                .insert((item.owner_id.def_id, renamed), (item, renamed, parent_id));\n+        }\n     }\n \n     fn visit_item_inner(\n         &mut self,\n         item: &'tcx hir::Item<'_>,\n         renamed: Option<Symbol>,\n         import_id: Option<LocalDefId>,\n-    ) -> bool {\n+    ) {\n         debug!(\"visiting item {:?}\", item);\n         let name = renamed.unwrap_or(item.ident.name);\n         let tcx = self.cx.tcx;\n@@ -448,7 +463,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 }\n             }\n         }\n-        true\n     }\n \n     fn visit_foreign_item_inner(\n@@ -485,9 +499,23 @@ impl<'a, 'tcx> Visitor<'tcx> for RustdocVisitor<'a, 'tcx> {\n     }\n \n     fn visit_item(&mut self, i: &'tcx hir::Item<'tcx>) {\n-        if self.visit_item_inner(i, None, None) {\n-            walk_item(self, i);\n-        }\n+        self.visit_item_inner(i, None, None);\n+        let new_value = if self.is_importable_from_parent {\n+            matches!(\n+                i.kind,\n+                hir::ItemKind::Mod(..)\n+                    | hir::ItemKind::ForeignMod { .. }\n+                    | hir::ItemKind::Impl(..)\n+                    | hir::ItemKind::Trait(..)\n+            )\n+        } else {\n+            // Whatever the context, if it's an impl block, the items inside it can be used so they\n+            // should be visible.\n+            matches!(i.kind, hir::ItemKind::Impl(..))\n+        };\n+        let prev = mem::replace(&mut self.is_importable_from_parent, new_value);\n+        walk_item(self, i);\n+        self.is_importable_from_parent = prev;\n     }\n \n     fn visit_mod(&mut self, _: &hir::Mod<'tcx>, _: Span, _: hir::HirId) {"}, {"sha": "3f36cc5bbcc91e204131ee41c37e81246eb93a99", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74864fa496997a6498e623f0d2019ccb7eb6dad0/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74864fa496997a6498e623f0d2019ccb7eb6dad0/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=74864fa496997a6498e623f0d2019ccb7eb6dad0", "patch": "@@ -303,6 +303,9 @@ pub struct Config {\n     /// The current Rust channel\n     pub channel: String,\n \n+    /// Whether adding git commit information such as the commit hash has been enabled for building\n+    pub git_hash: bool,\n+\n     /// The default Rust edition\n     pub edition: Option<String>,\n "}, {"sha": "81179480ed8100e33eb7b365cebd25e81fbdc844", "filename": "src/tools/compiletest/src/header/needs.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74864fa496997a6498e623f0d2019ccb7eb6dad0/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Fneeds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74864fa496997a6498e623f0d2019ccb7eb6dad0/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Fneeds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Fneeds.rs?ref=74864fa496997a6498e623f0d2019ccb7eb6dad0", "patch": "@@ -115,6 +115,11 @@ pub(super) fn handle_needs(\n             condition: cache.x86_64_dlltool,\n             ignore_reason: \"ignored when dlltool for x86_64 is not present\",\n         },\n+        Need {\n+            name: \"needs-git-hash\",\n+            condition: config.git_hash,\n+            ignore_reason: \"ignored when git hashes have been omitted for building\",\n+        },\n     ];\n \n     let (name, comment) = match ln.split_once([':', ' ']) {"}, {"sha": "362fba11697befc67b47a1b8b5a3364e5cbd076c", "filename": "src/tools/compiletest/src/header/tests.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74864fa496997a6498e623f0d2019ccb7eb6dad0/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74864fa496997a6498e623f0d2019ccb7eb6dad0/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs?ref=74864fa496997a6498e623f0d2019ccb7eb6dad0", "patch": "@@ -251,6 +251,16 @@ fn debugger() {\n     assert!(check_ignore(&config, \"// ignore-lldb\"));\n }\n \n+#[test]\n+fn git_hash() {\n+    let mut config = config();\n+    config.git_hash = false;\n+    assert!(check_ignore(&config, \"// needs-git-hash\"));\n+\n+    config.git_hash = true;\n+    assert!(!check_ignore(&config, \"// needs-git-hash\"));\n+}\n+\n #[test]\n fn sanitizers() {\n     let mut config = config();"}, {"sha": "c4bef998f3171d45e9a4e01cb1bef300782f9f81", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74864fa496997a6498e623f0d2019ccb7eb6dad0/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74864fa496997a6498e623f0d2019ccb7eb6dad0/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=74864fa496997a6498e623f0d2019ccb7eb6dad0", "patch": "@@ -159,6 +159,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         .optflag(\"\", \"nocapture\", \"\")\n         .optflag(\"h\", \"help\", \"show this message\")\n         .reqopt(\"\", \"channel\", \"current Rust channel\", \"CHANNEL\")\n+        .optflag(\"\", \"git-hash\", \"run tests which rely on commit version being compiled into the binaries\")\n         .optopt(\"\", \"edition\", \"default Rust edition\", \"EDITION\");\n \n     let (argv0, args_) = args.split_first().unwrap();\n@@ -302,6 +303,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         rustfix_coverage: matches.opt_present(\"rustfix-coverage\"),\n         has_tidy,\n         channel: matches.opt_str(\"channel\").unwrap(),\n+        git_hash: matches.opt_present(\"git-hash\"),\n         edition: matches.opt_str(\"edition\"),\n \n         cc: matches.opt_str(\"cc\").unwrap(),"}, {"sha": "d614e3e1055c0aa0532874b5670709e9682d420c", "filename": "tests/run-make/issue-107094/Makefile", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74864fa496997a6498e623f0d2019ccb7eb6dad0/tests%2Frun-make%2Fissue-107094%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/74864fa496997a6498e623f0d2019ccb7eb6dad0/tests%2Frun-make%2Fissue-107094%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fissue-107094%2FMakefile?ref=74864fa496997a6498e623f0d2019ccb7eb6dad0", "patch": "@@ -0,0 +1,7 @@\n+# needs-git-hash\n+\n+include ../tools.mk\n+\n+all:\n+\t$(BARE_RUSTC) --version --verbose | $(CGREP) -i -e \"commit-hash: [0-9a-f]{40}\" \"commit-date: [0-9]{4}-[0-9]{2}-[0-9]{2}\"\n+\t$(BARE_RUSTDOC) --version --verbose | $(CGREP) -i -e \"commit-hash: [0-9a-f]{40}\" \"commit-date: [0-9]{4}-[0-9]{2}-[0-9]{2}\""}, {"sha": "096130d7768283beb825834c442d1c8ad1ddea0a", "filename": "tests/rustdoc-ui/infinite-recursive-type-impl-trait.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74864fa496997a6498e623f0d2019ccb7eb6dad0/tests%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74864fa496997a6498e623f0d2019ccb7eb6dad0/tests%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.rs?ref=74864fa496997a6498e623f0d2019ccb7eb6dad0", "patch": "@@ -1,6 +1,9 @@\n+// check-pass\n+\n fn f() -> impl Sized {\n-    enum E { //~ ERROR\n+    enum E {\n         V(E),\n     }\n+\n     unimplemented!()\n }"}, {"sha": "a61577bd14afce57afb9e4adabdeb9329774a656", "filename": "tests/rustdoc-ui/infinite-recursive-type-impl-trait.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/386025117a6b7cd9e7f7c96946793db2ec8aa24c/tests%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/386025117a6b7cd9e7f7c96946793db2ec8aa24c/tests%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.stderr?ref=386025117a6b7cd9e7f7c96946793db2ec8aa24c", "patch": "@@ -1,16 +0,0 @@\n-error[E0072]: recursive type `f::E` has infinite size\n-  --> $DIR/infinite-recursive-type-impl-trait.rs:2:5\n-   |\n-LL |     enum E {\n-   |     ^^^^^^\n-LL |         V(E),\n-   |           - recursive without indirection\n-   |\n-help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to break the cycle\n-   |\n-LL |         V(Box<E>),\n-   |           ++++ +\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0072`."}, {"sha": "ee8ed5cc6e17f6a2c0efb75640a24f0d79871cbe", "filename": "tests/rustdoc/issue-110422-inner-private.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/74864fa496997a6498e623f0d2019ccb7eb6dad0/tests%2Frustdoc%2Fissue-110422-inner-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74864fa496997a6498e623f0d2019ccb7eb6dad0/tests%2Frustdoc%2Fissue-110422-inner-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-110422-inner-private.rs?ref=74864fa496997a6498e623f0d2019ccb7eb6dad0", "patch": "@@ -0,0 +1,64 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/110422>.\n+// This test ensures that inner items (except for implementations and macros)\n+// don't appear in documentation.\n+\n+// compile-flags: --document-private-items\n+\n+#![crate_name = \"foo\"]\n+\n+// @has 'foo/index.html'\n+// Checking there is no \"trait\" entry.\n+// @count - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 4\n+// @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Structs'\n+// @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Constants'\n+// @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Functions'\n+// @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Macros'\n+\n+// @has - '//a[@href=\"fn.foo.html\"]' 'foo'\n+fn foo() {\n+    fn bar() {}\n+\n+    // @has - '//a[@class=\"macro\"]' 'visible_macro'\n+    // @!has - '//a[@class=\"macro\"]' 'non_visible_macro'\n+    // @has 'foo/macro.visible_macro.html'\n+    // @!has 'foo/macro.non_visible_macro.html'\n+    #[macro_export]\n+    macro_rules! visible_macro {\n+        () => {}\n+    }\n+\n+    macro_rules! non_visible_macro {\n+        () => {}\n+    }\n+}\n+\n+// @has 'foo/index.html'\n+// @has - '//a[@href=\"struct.Bar.html\"]' 'Bar'\n+struct Bar;\n+\n+const BAR: i32 = {\n+    // @!has - '//a[@href=\"fn.yo.html\"]' 'yo'\n+    // @!has 'foo/fn.yo.html'\n+    fn yo() {}\n+\n+    // @!has 'foo/index.html' '//a[@href=\"trait.Foo.html\"]' 'Foo'\n+    // @!has 'foo/trait.Foo.html'\n+    trait Foo {\n+        fn babar() {}\n+    }\n+    impl Foo for Bar {}\n+\n+    // @has 'foo/struct.Bar.html'\n+    // @has - '//*[@id=\"method.foo\"]/*[@class=\"code-header\"]' 'pub(crate) fn foo()'\n+    // @count - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 3\n+    // We now check that the `Foo` trait is not documented nor visible on `Bar` page.\n+    // @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Implementations'\n+    // @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Auto Trait Implementations'\n+    // @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Blanket Implementations'\n+    // @!has - '//*[@href=\"trait.Foo.html#method.babar\"]/*[@class=\"code-header\"]' 'fn babar()'\n+    impl Bar {\n+        fn foo() {}\n+    }\n+\n+    1\n+};"}]}