{"sha": "3a1598c3bcbf089239c2fdff698b9c02670362b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMTU5OGMzYmNiZjA4OTIzOWMyZmRmZjY5OGI5YzAyNjcwMzYyYjM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-28T00:43:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-28T00:43:16Z"}, "message": "Merge #9032\n\n9032: Only complete modules in empty use-statements r=Veykril a=Veykril\n\nbors r+\r\nPart of #8518\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "81eed23ea0f4c54e842a6128efd25b1c51d3304b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81eed23ea0f4c54e842a6128efd25b1c51d3304b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a1598c3bcbf089239c2fdff698b9c02670362b3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgsDykCRBK7hj4Ov3rIwAAg1UIAEBAyofl9hjWbc81HrZbDOjk\nArLGXUooaJK71U9aYsQlhEuf1FunK2YBcFN39RJbBCzsKsbiRKshE1U7fuATPypN\nWOV+dQEblU7J9b18w557l0Gt9TMzzUmUXGwQtkDyqEmAp8cWwsaryh9R8mxvw3mb\nXfGtRfFNpzuWJha1KUEPUtMiPmXTxhnJVjbKOVdBPDP9LWwCyi6JReKMjNkns4bk\nIjfHjhZGvNpCqMZVT+6JC+VHFbAJKmR6+bQewWUFhwog2bN75Bo2vEvfgPB8dlLp\n0C3Zd0nKHrOhI490DfxHGogenSXzzkjk/wp8E6n4viMj80jTH7zfwc5uxAlF0GQ=\n=Z5tG\n-----END PGP SIGNATURE-----\n", "payload": "tree 81eed23ea0f4c54e842a6128efd25b1c51d3304b\nparent 5b4589f4747f242c038f19f5f2b51b2e03f93252\nparent 9e71dd9799879fc9070f8717f8711fba5dae490a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1622162596 +0000\ncommitter GitHub <noreply@github.com> 1622162596 +0000\n\nMerge #9032\n\n9032: Only complete modules in empty use-statements r=Veykril a=Veykril\n\nbors r+\r\nPart of #8518\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a1598c3bcbf089239c2fdff698b9c02670362b3", "html_url": "https://github.com/rust-lang/rust/commit/3a1598c3bcbf089239c2fdff698b9c02670362b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a1598c3bcbf089239c2fdff698b9c02670362b3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b4589f4747f242c038f19f5f2b51b2e03f93252", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b4589f4747f242c038f19f5f2b51b2e03f93252", "html_url": "https://github.com/rust-lang/rust/commit/5b4589f4747f242c038f19f5f2b51b2e03f93252"}, {"sha": "9e71dd9799879fc9070f8717f8711fba5dae490a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e71dd9799879fc9070f8717f8711fba5dae490a", "html_url": "https://github.com/rust-lang/rust/commit/9e71dd9799879fc9070f8717f8711fba5dae490a"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "ede07f605f57a8984891bede6e7bec5cc3087f66", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3a1598c3bcbf089239c2fdff698b9c02670362b3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a1598c3bcbf089239c2fdff698b9c02670362b3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=3a1598c3bcbf089239c2fdff698b9c02670362b3", "patch": "@@ -1,7 +1,6 @@\n //! Completion of names from the current scope, e.g. locals and imported items.\n \n use hir::ScopeDef;\n-use syntax::AstNode;\n \n use crate::{CompletionContext, Completions};\n \n@@ -24,6 +23,15 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n         return;\n     }\n \n+    if ctx.expects_use_tree() {\n+        cov_mark::hit!(only_completes_modules_in_import);\n+        ctx.scope.process_all_names(&mut |name, res| {\n+            if let ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = res {\n+                acc.add_resolution(ctx, name.to_string(), &res);\n+            }\n+        });\n+        return;\n+    }\n     if let Some(hir::Adt::Enum(e)) =\n         ctx.expected_type.as_ref().and_then(|ty| ty.strip_references().as_adt())\n     {\n@@ -37,14 +45,6 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n             cov_mark::hit!(skip_lifetime_completion);\n             return;\n         }\n-        if ctx.use_item_syntax.is_some() {\n-            if let (ScopeDef::Unknown, Some(name_ref)) = (&res, &ctx.name_ref_syntax) {\n-                if name_ref.syntax().text() == name.to_string().as_str() {\n-                    cov_mark::hit!(self_fulfilling_completion);\n-                    return;\n-                }\n-            }\n-        }\n         acc.add_resolution(ctx, name.to_string(), &res);\n     });\n }\n@@ -68,15 +68,17 @@ mod tests {\n     }\n \n     #[test]\n-    fn self_fulfilling_completion() {\n-        cov_mark::check!(self_fulfilling_completion);\n+    fn only_completes_modules_in_import() {\n+        cov_mark::check!(only_completes_modules_in_import);\n         check(\n             r#\"\n-use foo$0\n-use std::collections;\n+use f$0\n+\n+struct Foo;\n+mod foo {}\n \"#,\n             expect![[r#\"\n-                ?? collections\n+                md foo\n             \"#]],\n         );\n     }"}, {"sha": "923e35dbb98b5efb76422662fc80de23e03b8820", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a1598c3bcbf089239c2fdff698b9c02670362b3/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a1598c3bcbf089239c2fdff698b9c02670362b3/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=3a1598c3bcbf089239c2fdff698b9c02670362b3", "patch": "@@ -276,6 +276,10 @@ impl<'a> CompletionContext<'a> {\n         )\n     }\n \n+    pub(crate) fn expects_use_tree(&self) -> bool {\n+        matches!(self.completion_location, Some(ImmediateLocation::Use))\n+    }\n+\n     pub(crate) fn expects_non_trait_assoc_item(&self) -> bool {\n         matches!(self.completion_location, Some(ImmediateLocation::Impl))\n     }"}, {"sha": "7bae7d12c37d916be86eec2ee6af5757a1e7453b", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3a1598c3bcbf089239c2fdff698b9c02670362b3/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a1598c3bcbf089239c2fdff698b9c02670362b3/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=3a1598c3bcbf089239c2fdff698b9c02670362b3", "patch": "@@ -14,6 +14,7 @@ use crate::test_utils::{check_pattern_is_applicable, check_pattern_is_not_applic\n /// Direct parent container of the cursor position\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub(crate) enum ImmediateLocation {\n+    Use,\n     Impl,\n     Trait,\n     RecordField,\n@@ -58,6 +59,7 @@ pub(crate) fn determine_location(tok: SyntaxToken) -> Option<ImmediateLocation>\n     let res = match_ast! {\n         match parent {\n             ast::IdentPat(_it) => ImmediateLocation::IdentPat,\n+            ast::Use(_it) => ImmediateLocation::Use,\n             ast::BlockExpr(_it) => ImmediateLocation::BlockExpr,\n             ast::SourceFile(_it) => ImmediateLocation::ItemList,\n             ast::ItemList(_it) => ImmediateLocation::ItemList,\n@@ -87,6 +89,11 @@ fn test_has_trait_parent() {\n     check_location(r\"trait A { f$0 }\", ImmediateLocation::Trait);\n }\n \n+#[test]\n+fn test_has_use_parent() {\n+    check_location(r\"use f$0\", ImmediateLocation::Use);\n+}\n+\n #[test]\n fn test_has_impl_parent() {\n     check_location(r\"impl A { f$0 }\", ImmediateLocation::Impl);"}]}