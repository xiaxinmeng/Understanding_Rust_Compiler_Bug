{"sha": "2224a42c353636db6ee53cc3f9b1a968e9d9c1f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMjRhNDJjMzUzNjM2ZGI2ZWU1M2NjM2Y5YjFhOTY4ZTlkOWMxZjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-17T21:15:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-17T21:15:12Z"}, "message": "Auto merge of #52036 - collin5:b50509-2, r=collin5\n\nClean up dependency tracking in Rustbuild [2/2]\n\nMake `clear_if_dirty` calls in `Builder::cargo` with stamp dependencies for the given Mode.\n\nContinuation of #50904\nRef issue #50509\nr? @Mark-Simulacrum", "tree": {"sha": "10d1d33195edde2cde32f1c770a00699d6c97372", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10d1d33195edde2cde32f1c770a00699d6c97372"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2224a42c353636db6ee53cc3f9b1a968e9d9c1f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2224a42c353636db6ee53cc3f9b1a968e9d9c1f6", "html_url": "https://github.com/rust-lang/rust/commit/2224a42c353636db6ee53cc3f9b1a968e9d9c1f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2224a42c353636db6ee53cc3f9b1a968e9d9c1f6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "354a29a5f1feb55bd799f874786e013beddfd645", "url": "https://api.github.com/repos/rust-lang/rust/commits/354a29a5f1feb55bd799f874786e013beddfd645", "html_url": "https://github.com/rust-lang/rust/commit/354a29a5f1feb55bd799f874786e013beddfd645"}, {"sha": "5ae40be85191c365985e9231f5c015fddbadd6c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ae40be85191c365985e9231f5c015fddbadd6c0", "html_url": "https://github.com/rust-lang/rust/commit/5ae40be85191c365985e9231f5c015fddbadd6c0"}], "stats": {"total": 199, "additions": 90, "deletions": 109}, "files": [{"sha": "b842bc43f5baad82c2ca507f581d59c2b5ed9471", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/2224a42c353636db6ee53cc3f9b1a968e9d9c1f6/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2224a42c353636db6ee53cc3f9b1a968e9d9c1f6/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=2224a42c353636db6ee53cc3f9b1a968e9d9c1f6", "patch": "@@ -708,6 +708,80 @@ impl<'a> Builder<'a> {\n     ) -> Command {\n         let mut cargo = Command::new(&self.initial_cargo);\n         let out_dir = self.stage_out(compiler, mode);\n+\n+        // command specific path, we call clear_if_dirty with this\n+        let mut my_out = match cmd {\n+            \"build\" => self.cargo_out(compiler, mode, target),\n+\n+            // This is the intended out directory for crate documentation.\n+            \"doc\" =>  self.crate_doc_out(target),\n+\n+            _ => self.stage_out(compiler, mode),\n+        };\n+\n+        // This is for the original compiler, but if we're forced to use stage 1, then\n+        // std/test/rustc stamps won't exist in stage 2, so we need to get those from stage 1, since\n+        // we copy the libs forward.\n+        let cmp = if self.force_use_stage1(compiler, target) {\n+            self.compiler(1, compiler.host)\n+        } else {\n+            compiler\n+        };\n+\n+        let libstd_stamp = match cmd {\n+            \"check\" => check::libstd_stamp(self, cmp, target),\n+            _ => compile::libstd_stamp(self, cmp, target),\n+        };\n+\n+        let libtest_stamp = match cmd {\n+            \"check\" => check::libtest_stamp(self, cmp, target),\n+            _ => compile::libstd_stamp(self, cmp, target),\n+        };\n+\n+        let librustc_stamp = match cmd {\n+            \"check\" => check::librustc_stamp(self, cmp, target),\n+            _ => compile::librustc_stamp(self, cmp, target),\n+        };\n+\n+        if cmd == \"doc\" {\n+            if mode == Mode::Rustc || mode == Mode::ToolRustc || mode == Mode::Codegen {\n+                // This is the intended out directory for compiler documentation.\n+                my_out = self.compiler_doc_out(target);\n+            }\n+            let rustdoc = self.rustdoc(compiler.host);\n+            self.clear_if_dirty(&my_out, &rustdoc);\n+        } else if cmd != \"test\" {\n+            match mode {\n+                Mode::Std => {\n+                    self.clear_if_dirty(&my_out, &self.rustc(compiler));\n+                },\n+                Mode::Test => {\n+                    self.clear_if_dirty(&my_out, &libstd_stamp);\n+                },\n+                Mode::Rustc => {\n+                    self.clear_if_dirty(&my_out, &self.rustc(compiler));\n+                    self.clear_if_dirty(&my_out, &libstd_stamp);\n+                    self.clear_if_dirty(&my_out, &libtest_stamp);\n+                },\n+                Mode::Codegen => {\n+                    self.clear_if_dirty(&my_out, &librustc_stamp);\n+                },\n+                Mode::ToolBootstrap => { },\n+                Mode::ToolStd => {\n+                    self.clear_if_dirty(&my_out, &libstd_stamp);\n+                },\n+                Mode::ToolTest => {\n+                    self.clear_if_dirty(&my_out, &libstd_stamp);\n+                    self.clear_if_dirty(&my_out, &libtest_stamp);\n+                },\n+                Mode::ToolRustc => {\n+                    self.clear_if_dirty(&my_out, &libstd_stamp);\n+                    self.clear_if_dirty(&my_out, &libtest_stamp);\n+                    self.clear_if_dirty(&my_out, &librustc_stamp);\n+                },\n+            }\n+        }\n+\n         cargo\n             .env(\"CARGO_TARGET_DIR\", out_dir)\n             .arg(cmd);"}, {"sha": "11463c1a056ec5e120961bcf6a0b7779542b8f83", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 9, "deletions": 24, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2224a42c353636db6ee53cc3f9b1a968e9d9c1f6/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2224a42c353636db6ee53cc3f9b1a968e9d9c1f6/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=2224a42c353636db6ee53cc3f9b1a968e9d9c1f6", "patch": "@@ -12,7 +12,7 @@\n \n use compile::{run_cargo, std_cargo, test_cargo, rustc_cargo, rustc_cargo_env, add_to_sysroot};\n use builder::{RunConfig, Builder, ShouldRun, Step};\n-use tool::{self, prepare_tool_cargo, SourceType};\n+use tool::{prepare_tool_cargo, SourceType};\n use {Compiler, Mode};\n use cache::{INTERNER, Interned};\n use std::path::PathBuf;\n@@ -40,14 +40,11 @@ impl Step for Std {\n         let target = self.target;\n         let compiler = builder.compiler(0, builder.config.build);\n \n-        let out_dir = builder.stage_out(compiler, Mode::Std);\n-        builder.clear_if_dirty(&out_dir, &builder.rustc(compiler));\n-\n         let mut cargo = builder.cargo(compiler, Mode::Std, target, \"check\");\n         std_cargo(builder, &compiler, target, &mut cargo);\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-std\", compiler.stage));\n-        println!(\"Checking std artifacts ({} -> {})\", &compiler.host, target);\n+        builder.info(&format!(\"Checking std artifacts ({} -> {})\", &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n                   vec![],\n@@ -88,15 +85,13 @@ impl Step for Rustc {\n         let compiler = builder.compiler(0, builder.config.build);\n         let target = self.target;\n \n-        let stage_out = builder.stage_out(compiler, Mode::Rustc);\n-        builder.clear_if_dirty(&stage_out, &libstd_stamp(builder, compiler, target));\n-        builder.clear_if_dirty(&stage_out, &libtest_stamp(builder, compiler, target));\n+        builder.ensure(Test { target });\n \n         let mut cargo = builder.cargo(compiler, Mode::Rustc, target, \"check\");\n         rustc_cargo(builder, &mut cargo);\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-rustc\", compiler.stage));\n-        println!(\"Checking compiler artifacts ({} -> {})\", &compiler.host, target);\n+        builder.info(&format!(\"Checking compiler artifacts ({} -> {})\", &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n                   vec![],\n@@ -139,8 +134,7 @@ impl Step for CodegenBackend {\n         let target = self.target;\n         let backend = self.backend;\n \n-        let out_dir = builder.cargo_out(compiler, Mode::Codegen, target);\n-        builder.clear_if_dirty(&out_dir, &librustc_stamp(builder, compiler, target));\n+        builder.ensure(Rustc { target });\n \n         let mut cargo = builder.cargo(compiler, Mode::Codegen, target, \"check\");\n         cargo.arg(\"--manifest-path\").arg(builder.src.join(\"src/librustc_codegen_llvm/Cargo.toml\"));\n@@ -180,14 +174,13 @@ impl Step for Test {\n         let compiler = builder.compiler(0, builder.config.build);\n         let target = self.target;\n \n-        let out_dir = builder.stage_out(compiler, Mode::Test);\n-        builder.clear_if_dirty(&out_dir, &libstd_stamp(builder, compiler, target));\n+        builder.ensure(Std { target });\n \n         let mut cargo = builder.cargo(compiler, Mode::Test, target, \"check\");\n         test_cargo(builder, &compiler, target, &mut cargo);\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-test\", compiler.stage));\n-        println!(\"Checking test artifacts ({} -> {})\", &compiler.host, target);\n+        builder.info(&format!(\"Checking test artifacts ({} -> {})\", &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n                   vec![],\n@@ -223,10 +216,7 @@ impl Step for Rustdoc {\n         let compiler = builder.compiler(0, builder.config.build);\n         let target = self.target;\n \n-        let stage_out = builder.stage_out(compiler, Mode::ToolRustc);\n-        builder.clear_if_dirty(&stage_out, &libstd_stamp(builder, compiler, target));\n-        builder.clear_if_dirty(&stage_out, &libtest_stamp(builder, compiler, target));\n-        builder.clear_if_dirty(&stage_out, &librustc_stamp(builder, compiler, target));\n+        builder.ensure(Rustc { target });\n \n         let mut cargo = prepare_tool_cargo(builder,\n                                            compiler,\n@@ -246,12 +236,7 @@ impl Step for Rustdoc {\n \n         let libdir = builder.sysroot_libdir(compiler, target);\n         add_to_sysroot(&builder, &libdir, &rustdoc_stamp(builder, compiler, target));\n-\n-        builder.ensure(tool::CleanTools {\n-            compiler,\n-            target,\n-            cause: Mode::Rustc,\n-        });\n+        builder.cargo(compiler, Mode::ToolRustc, target, \"clean\");\n     }\n }\n "}, {"sha": "4205d5aebffa15dd967672ceaec79bd2c5eba874", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2224a42c353636db6ee53cc3f9b1a968e9d9c1f6/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2224a42c353636db6ee53cc3f9b1a968e9d9c1f6/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=2224a42c353636db6ee53cc3f9b1a968e9d9c1f6", "patch": "@@ -32,7 +32,6 @@ use serde_json;\n use util::{exe, libdir, is_dylib, CiEnv};\n use {Compiler, Mode, GitRepo};\n use native;\n-use tool;\n \n use cache::{INTERNER, Interned};\n use builder::{Step, RunConfig, ShouldRun, Builder};\n@@ -107,8 +106,6 @@ impl Step for Std {\n             copy_musl_third_party_objects(builder, target, &libdir);\n         }\n \n-        let out_dir = builder.cargo_out(compiler, Mode::Std, target);\n-        builder.clear_if_dirty(&out_dir, &builder.rustc(compiler));\n         let mut cargo = builder.cargo(compiler, Mode::Std, target, \"build\");\n         std_cargo(builder, &compiler, target, &mut cargo);\n \n@@ -246,11 +243,7 @@ impl Step for StdLink {\n             copy_apple_sanitizer_dylibs(builder, &builder.native_dir(target), \"osx\", &libdir);\n         }\n \n-        builder.ensure(tool::CleanTools {\n-            compiler: target_compiler,\n-            target,\n-            cause: Mode::Std,\n-        });\n+        builder.cargo(target_compiler, Mode::ToolStd, target, \"clean\");\n     }\n }\n \n@@ -387,8 +380,6 @@ impl Step for Test {\n             return;\n         }\n \n-        let out_dir = builder.cargo_out(compiler, Mode::Test, target);\n-        builder.clear_if_dirty(&out_dir, &libstd_stamp(builder, compiler, target));\n         let mut cargo = builder.cargo(compiler, Mode::Test, target, \"build\");\n         test_cargo(builder, &compiler, target, &mut cargo);\n \n@@ -448,11 +439,8 @@ impl Step for TestLink {\n                 target));\n         add_to_sysroot(builder, &builder.sysroot_libdir(target_compiler, target),\n                     &libtest_stamp(builder, compiler, target));\n-        builder.ensure(tool::CleanTools {\n-            compiler: target_compiler,\n-            target,\n-            cause: Mode::Test,\n-        });\n+\n+        builder.cargo(target_compiler, Mode::ToolTest, target, \"clean\");\n     }\n }\n \n@@ -519,9 +507,6 @@ impl Step for Rustc {\n             compiler: builder.compiler(self.compiler.stage, builder.config.build),\n             target: builder.config.build,\n         });\n-        let cargo_out = builder.cargo_out(compiler, Mode::Rustc, target);\n-        builder.clear_if_dirty(&cargo_out, &libstd_stamp(builder, compiler, target));\n-        builder.clear_if_dirty(&cargo_out, &libtest_stamp(builder, compiler, target));\n \n         let mut cargo = builder.cargo(compiler, Mode::Rustc, target, \"build\");\n         rustc_cargo(builder, &mut cargo);\n@@ -613,11 +598,7 @@ impl Step for RustcLink {\n                  target));\n         add_to_sysroot(builder, &builder.sysroot_libdir(target_compiler, target),\n                        &librustc_stamp(builder, compiler, target));\n-        builder.ensure(tool::CleanTools {\n-            compiler: target_compiler,\n-            target,\n-            cause: Mode::Rustc,\n-        });\n+        builder.cargo(target_compiler, Mode::ToolRustc, target, \"clean\");\n     }\n }\n \n@@ -674,7 +655,6 @@ impl Step for CodegenBackend {\n         }\n \n         let out_dir = builder.cargo_out(compiler, Mode::Codegen, target);\n-        builder.clear_if_dirty(&out_dir, &librustc_stamp(builder, compiler, target));\n \n         let mut cargo = builder.cargo(compiler, Mode::Codegen, target, \"rustc\");\n         cargo.arg(\"--manifest-path\")"}, {"sha": "17ccb04a7146d861a8eaaaccbad16e71a42bf07a", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2224a42c353636db6ee53cc3f9b1a968e9d9c1f6/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2224a42c353636db6ee53cc3f9b1a968e9d9c1f6/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=2224a42c353636db6ee53cc3f9b1a968e9d9c1f6", "patch": "@@ -455,7 +455,6 @@ impl Step for Std {\n         let out = builder.doc_out(target);\n         t!(fs::create_dir_all(&out));\n         let compiler = builder.compiler(stage, builder.config.build);\n-        let rustdoc = builder.rustdoc(compiler.host);\n         let compiler = if builder.force_use_stage1(compiler, target) {\n             builder.compiler(1, compiler.host)\n         } else {\n@@ -480,7 +479,6 @@ impl Step for Std {\n         // This way rustdoc generates output directly into the output, and rustdoc\n         // will also directly handle merging.\n         let my_out = builder.crate_doc_out(target);\n-        builder.clear_if_dirty(&my_out, &rustdoc);\n         t!(symlink_dir_force(&builder.config, &my_out, &out_dir));\n \n         let mut cargo = builder.cargo(compiler, Mode::Std, target, \"doc\");\n@@ -535,7 +533,6 @@ impl Step for Test {\n         let out = builder.doc_out(target);\n         t!(fs::create_dir_all(&out));\n         let compiler = builder.compiler(stage, builder.config.build);\n-        let rustdoc = builder.rustdoc(compiler.host);\n         let compiler = if builder.force_use_stage1(compiler, target) {\n             builder.compiler(1, compiler.host)\n         } else {\n@@ -551,7 +548,6 @@ impl Step for Test {\n \n         // See docs in std above for why we symlink\n         let my_out = builder.crate_doc_out(target);\n-        builder.clear_if_dirty(&my_out, &rustdoc);\n         t!(symlink_dir_force(&builder.config, &my_out, &out_dir));\n \n         let mut cargo = builder.cargo(compiler, Mode::Test, target, \"doc\");\n@@ -603,7 +599,6 @@ impl Step for WhitelistedRustc {\n         let out = builder.doc_out(target);\n         t!(fs::create_dir_all(&out));\n         let compiler = builder.compiler(stage, builder.config.build);\n-        let rustdoc = builder.rustdoc(compiler.host);\n         let compiler = if builder.force_use_stage1(compiler, target) {\n             builder.compiler(1, compiler.host)\n         } else {\n@@ -619,7 +614,6 @@ impl Step for WhitelistedRustc {\n \n         // See docs in std above for why we symlink\n         let my_out = builder.crate_doc_out(target);\n-        builder.clear_if_dirty(&my_out, &rustdoc);\n         t!(symlink_dir_force(&builder.config, &my_out, &out_dir));\n \n         let mut cargo = builder.cargo(compiler, Mode::Rustc, target, \"doc\");\n@@ -678,7 +672,6 @@ impl Step for Rustc {\n \n         // Get the correct compiler for this stage.\n         let compiler = builder.compiler(stage, builder.config.build);\n-        let rustdoc = builder.rustdoc(compiler.host);\n         let compiler = if builder.force_use_stage1(compiler, target) {\n             builder.compiler(1, compiler.host)\n         } else {\n@@ -699,7 +692,6 @@ impl Step for Rustc {\n         // We do not symlink to the same shared folder that already contains std library\n         // documentation from previous steps as we do not want to include that.\n         let out_dir = builder.stage_out(compiler, Mode::Rustc).join(target).join(\"doc\");\n-        builder.clear_if_dirty(&out, &rustdoc);\n         t!(symlink_dir_force(&builder.config, &out, &out_dir));\n \n         // Build cargo command.\n@@ -780,7 +772,6 @@ impl Step for Rustdoc {\n \n         // Get the correct compiler for this stage.\n         let compiler = builder.compiler(stage, builder.config.build);\n-        let rustdoc = builder.rustdoc(compiler.host);\n         let compiler = if builder.force_use_stage1(compiler, target) {\n             builder.compiler(1, compiler.host)\n         } else {\n@@ -803,7 +794,6 @@ impl Step for Rustdoc {\n             .join(target)\n             .join(\"doc\");\n         t!(fs::create_dir_all(&out_dir));\n-        builder.clear_if_dirty(&out, &rustdoc);\n         t!(symlink_dir_force(&builder.config, &out, &out_dir));\n \n         // Build cargo command."}, {"sha": "6b88516bacd8a963481f4a8a80db03809b314f36", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2224a42c353636db6ee53cc3f9b1a968e9d9c1f6/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2224a42c353636db6ee53cc3f9b1a968e9d9c1f6/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=2224a42c353636db6ee53cc3f9b1a968e9d9c1f6", "patch": "@@ -352,6 +352,7 @@ pub enum Mode {\n     /// Compile a tool which uses all libraries we compile (up to rustc).\n     /// Doesn't use the stage0 compiler libraries like \"other\", and includes\n     /// tools like rustdoc, cargo, rls, etc.\n+    ToolTest,\n     ToolStd,\n     ToolRustc,\n }\n@@ -572,6 +573,7 @@ impl Build {\n             Mode::Codegen => \"-codegen\",\n             Mode::ToolBootstrap => \"-bootstrap-tools\",\n             Mode::ToolStd => \"-tools\",\n+            Mode::ToolTest => \"-tools\",\n             Mode::ToolRustc => \"-tools\",\n         };\n         self.out.join(&*compiler.host)"}, {"sha": "e5299761a159f76ef0dfa70d85d943b4faf1f3a0", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 51, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2224a42c353636db6ee53cc3f9b1a968e9d9c1f6/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2224a42c353636db6ee53cc3f9b1a968e9d9c1f6/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=2224a42c353636db6ee53cc3f9b1a968e9d9c1f6", "patch": "@@ -19,62 +19,12 @@ use Mode;\n use Compiler;\n use builder::{Step, RunConfig, ShouldRun, Builder};\n use util::{exe, add_lib_path};\n-use compile::{self, libtest_stamp, libstd_stamp, librustc_stamp};\n+use compile;\n use native;\n use channel::GitInfo;\n use cache::Interned;\n use toolstate::ToolState;\n \n-#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n-pub struct CleanTools {\n-    pub compiler: Compiler,\n-    pub target: Interned<String>,\n-    pub cause: Mode,\n-}\n-\n-impl Step for CleanTools {\n-    type Output = ();\n-\n-    fn should_run(run: ShouldRun) -> ShouldRun {\n-        run.never()\n-    }\n-\n-    fn run(self, builder: &Builder) {\n-        let compiler = self.compiler;\n-        let target = self.target;\n-        let cause = self.cause;\n-\n-        // This is for the original compiler, but if we're forced to use stage 1, then\n-        // std/test/rustc stamps won't exist in stage 2, so we need to get those from stage 1, since\n-        // we copy the libs forward.\n-        let tools_dir = builder.stage_out(compiler, Mode::ToolRustc);\n-        let compiler = if builder.force_use_stage1(compiler, target) {\n-            builder.compiler(1, compiler.host)\n-        } else {\n-            compiler\n-        };\n-\n-        for &cur_mode in &[Mode::Std, Mode::Test, Mode::Rustc] {\n-            let stamp = match cur_mode {\n-                Mode::Std => libstd_stamp(builder, compiler, target),\n-                Mode::Test => libtest_stamp(builder, compiler, target),\n-                Mode::Rustc => librustc_stamp(builder, compiler, target),\n-                _ => panic!(),\n-            };\n-\n-            if builder.clear_if_dirty(&tools_dir, &stamp) {\n-                break;\n-            }\n-\n-            // If we are a rustc tool, and std changed, we also need to clear ourselves out -- our\n-            // dependencies depend on std. Therefore, we iterate up until our own mode.\n-            if cause == cur_mode {\n-                break;\n-            }\n-        }\n-    }\n-}\n-\n #[derive(Debug, Clone, Hash, PartialEq, Eq)]\n pub enum SourceType {\n     InTree,"}]}