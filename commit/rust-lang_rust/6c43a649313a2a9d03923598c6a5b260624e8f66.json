{"sha": "6c43a649313a2a9d03923598c6a5b260624e8f66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNDNhNjQ5MzEzYTJhOWQwMzkyMzU5OGM2YTViMjYwNjI0ZThmNjY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-10-08T20:49:36Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-10-21T18:43:20Z"}, "message": "Fix ICE from projection cycle\n\nCycles in normalization can cause evaluations to change from Unknown to\nErr. This means that some selection that were applicable no longer are.\n\nTo avoid this:\n* Selection candidates that are known to be applicable are prefered\n  over candidates that are not.\n* We don't ICE if a candidate is no longer applicable.", "tree": {"sha": "12c909641338caa4c426dc6cdac7312a4bcb7700", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12c909641338caa4c426dc6cdac7312a4bcb7700"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c43a649313a2a9d03923598c6a5b260624e8f66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c43a649313a2a9d03923598c6a5b260624e8f66", "html_url": "https://github.com/rust-lang/rust/commit/6c43a649313a2a9d03923598c6a5b260624e8f66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c43a649313a2a9d03923598c6a5b260624e8f66/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22e6b9c68941996daa45786b4145e6196e51f0f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/22e6b9c68941996daa45786b4145e6196e51f0f4", "html_url": "https://github.com/rust-lang/rust/commit/22e6b9c68941996daa45786b4145e6196e51f0f4"}], "stats": {"total": 54, "additions": 34, "deletions": 20}, "files": [{"sha": "7fd588ffce30cab5eff811fe599ef7193b49b087", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6c43a649313a2a9d03923598c6a5b260624e8f66/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c43a649313a2a9d03923598c6a5b260624e8f66/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=6c43a649313a2a9d03923598c6a5b260624e8f66", "patch": "@@ -69,7 +69,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             ProjectionCandidate(idx) => {\n-                let obligations = self.confirm_projection_candidate(obligation, idx);\n+                let obligations = self.confirm_projection_candidate(obligation, idx)?;\n                 Ok(ImplSource::Param(obligations))\n             }\n \n@@ -120,7 +120,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n         idx: usize,\n-    ) -> Vec<PredicateObligation<'tcx>> {\n+    ) -> Result<Vec<PredicateObligation<'tcx>>, SelectionError<'tcx>> {\n         self.infcx.commit_unconditionally(|_| {\n             let tcx = self.tcx();\n \n@@ -148,19 +148,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 &mut obligations,\n             );\n \n-            obligations.extend(\n+            obligations.extend(self.infcx.commit_if_ok(|_| {\n                 self.infcx\n                     .at(&obligation.cause, obligation.param_env)\n                     .sup(placeholder_trait_predicate.trait_ref.to_poly_trait_ref(), candidate)\n                     .map(|InferOk { obligations, .. }| obligations)\n-                    .unwrap_or_else(|_| {\n-                        bug!(\n-                            \"Projection bound `{:?}` was applicable to `{:?}` but now is not\",\n-                            candidate,\n-                            obligation\n-                        );\n-                    }),\n-            );\n+                    .map_err(|_| Unimplemented)\n+            })?);\n \n             if let ty::Projection(..) = placeholder_self_ty.kind() {\n                 for predicate in tcx.predicates_of(def_id).instantiate_own(tcx, substs).predicates {\n@@ -181,7 +175,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             }\n \n-            obligations\n+            Ok(obligations)\n         })\n     }\n "}, {"sha": "ce7b963473f45f9812fdb3d5890adb2c390f2222", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6c43a649313a2a9d03923598c6a5b260624e8f66/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c43a649313a2a9d03923598c6a5b260624e8f66/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=6c43a649313a2a9d03923598c6a5b260624e8f66", "patch": "@@ -518,12 +518,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             result\n                         }\n                         Ok(Ok(None)) => Ok(EvaluatedToAmbig),\n-                        // EvaluatedToRecur might also be acceptable here, but use\n-                        // Unknown for now because it means that we won't dismiss a\n-                        // selection candidate solely because it has a projection\n-                        // cycle. This is closest to the previous behavior of\n-                        // immediately erroring.\n-                        Ok(Err(project::InProgress)) => Ok(EvaluatedToUnknown),\n+                        Ok(Err(project::InProgress)) => Ok(EvaluatedToRecur),\n                         Err(_) => Ok(EvaluatedToErr),\n                     }\n                 }\n@@ -1382,9 +1377,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             (ProjectionCandidate(i), ProjectionCandidate(j)) => {\n-                // Arbitrarily pick the first candidate for backwards\n+                // Arbitrarily pick the lower numbered candidate for backwards\n                 // compatibility reasons. Don't let this affect inference.\n-                i > j && !needs_infer\n+                i < j && !needs_infer\n             }\n             (ObjectCandidate, ObjectCandidate) => bug!(\"Duplicate object candidate\"),\n             (ObjectCandidate, ProjectionCandidate(_))"}, {"sha": "9c1a488e9517534e671a4a3067c86734ccbd5158", "filename": "src/test/ui/associated-types/normalization-probe-cycle.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6c43a649313a2a9d03923598c6a5b260624e8f66/src%2Ftest%2Fui%2Fassociated-types%2Fnormalization-probe-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c43a649313a2a9d03923598c6a5b260624e8f66/src%2Ftest%2Fui%2Fassociated-types%2Fnormalization-probe-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fnormalization-probe-cycle.rs?ref=6c43a649313a2a9d03923598c6a5b260624e8f66", "patch": "@@ -0,0 +1,25 @@\n+// Regression test for #77656\n+\n+// check-pass\n+\n+trait Value: PartialOrd {}\n+\n+impl<T: PartialOrd> Value for T {}\n+\n+trait Distance\n+where\n+    Self: PartialOrd<<Self as Distance>::Value>,\n+    Self: PartialOrd,\n+{\n+    type Value: Value;\n+}\n+\n+impl<T: Value> Distance for T {\n+    type Value = T;\n+}\n+\n+trait Proximity<T = Self> {\n+    type Distance: Distance;\n+}\n+\n+fn main() {}"}]}