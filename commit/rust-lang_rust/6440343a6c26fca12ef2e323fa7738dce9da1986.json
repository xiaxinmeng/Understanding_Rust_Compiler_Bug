{"sha": "6440343a6c26fca12ef2e323fa7738dce9da1986", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NDAzNDNhNmMyNmZjYTEyZWYyZTMyM2ZhNzczOGRjZTlkYTE5ODY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-08-17T22:28:04Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-08-17T22:28:04Z"}, "message": "More spelling corrections.", "tree": {"sha": "1fa6106fcc49f2a567a36644a8a6c3c32b57f21c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fa6106fcc49f2a567a36644a8a6c3c32b57f21c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6440343a6c26fca12ef2e323fa7738dce9da1986", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6440343a6c26fca12ef2e323fa7738dce9da1986", "html_url": "https://github.com/rust-lang/rust/commit/6440343a6c26fca12ef2e323fa7738dce9da1986", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6440343a6c26fca12ef2e323fa7738dce9da1986/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72fd02d93985bc9be359d736eec0484cb51a8b3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/72fd02d93985bc9be359d736eec0484cb51a8b3f", "html_url": "https://github.com/rust-lang/rust/commit/72fd02d93985bc9be359d736eec0484cb51a8b3f"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "30159d3dc5df3b79cc7d5a5445aae7997ef67d33", "filename": "src/libextra/crypto/cryptoutil.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6440343a6c26fca12ef2e323fa7738dce9da1986/src%2Flibextra%2Fcrypto%2Fcryptoutil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6440343a6c26fca12ef2e323fa7738dce9da1986/src%2Flibextra%2Fcrypto%2Fcryptoutil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fcryptoutil.rs?ref=6440343a6c26fca12ef2e323fa7738dce9da1986", "patch": "@@ -125,7 +125,7 @@ pub fn shift_add_check_overflow_tuple\n /// method that modifies the buffer directory or provides the caller with bytes that can be modifies\n /// results in those bytes being marked as used by the buffer.\n pub trait FixedBuffer {\n-    /// Input a vector of bytes. If the buffer becomes full, proccess it with the provided\n+    /// Input a vector of bytes. If the buffer becomes full, process it with the provided\n     /// function and then clear the buffer.\n     fn input(&mut self, input: &[u8], func: &fn(&[u8]));\n "}, {"sha": "c7f228af332a3bdf246af290ebbc173c2b32df29", "filename": "src/libextra/crypto/digest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6440343a6c26fca12ef2e323fa7738dce9da1986/src%2Flibextra%2Fcrypto%2Fdigest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6440343a6c26fca12ef2e323fa7738dce9da1986/src%2Flibextra%2Fcrypto%2Fdigest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fdigest.rs?ref=6440343a6c26fca12ef2e323fa7738dce9da1986", "patch": "@@ -47,18 +47,18 @@ pub trait Digest {\n     fn output_bits(&self) -> uint;\n \n     /**\n-     * Convenience functon that feeds a string into a digest\n+     * Convenience function that feeds a string into a digest.\n      *\n      * # Arguments\n      *\n-     * * in The string to feed into the digest\n+     * * `input` The string to feed into the digest\n      */\n     fn input_str(&mut self, input: &str) {\n         self.input(input.as_bytes());\n     }\n \n     /**\n-     * Convenience functon that retrieves the result of a digest as a\n+     * Convenience function that retrieves the result of a digest as a\n      * ~str in hexadecimal format.\n      */\n     fn result_str(&mut self) -> ~str {"}, {"sha": "3b4fad3eaa794e0dffa83aad6a55fff82f02f336", "filename": "src/libextra/fileinput.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6440343a6c26fca12ef2e323fa7738dce9da1986/src%2Flibextra%2Ffileinput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6440343a6c26fca12ef2e323fa7738dce9da1986/src%2Flibextra%2Ffileinput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffileinput.rs?ref=6440343a6c26fca12ef2e323fa7738dce9da1986", "patch": "@@ -156,7 +156,7 @@ impl FileInput {\n     /**\n     Create a `FileInput` object from a vec of files. An empty\n     vec means lines are read from `stdin` (use `from_vec_raw` to stop\n-    this behaviour). Any occurence of `None` represents `stdin`.\n+    this behaviour). Any occurrence of `None` represents `stdin`.\n     */\n     pub fn from_vec(files: ~[Option<Path>]) -> FileInput {\n         FileInput::from_vec_raw("}, {"sha": "d8eb3cfa50000614488cd676f32e0fc1a16449fd", "filename": "src/libextra/term.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6440343a6c26fca12ef2e323fa7738dce9da1986/src%2Flibextra%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6440343a6c26fca12ef2e323fa7738dce9da1986/src%2Flibextra%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterm.rs?ref=6440343a6c26fca12ef2e323fa7738dce9da1986", "patch": "@@ -157,7 +157,7 @@ impl Terminal {\n     /// If the color is a bright color, but the terminal only supports 8 colors,\n     /// the corresponding normal color will be used instead.\n     ///\n-    /// Rturns true if the color was set, false otherwise.\n+    /// Returns true if the color was set, false otherwise.\n     pub fn bg(&self, color: color::Color) -> bool {\n         let color = self.dim_if_necessary(color);\n         if self.num_colors > color {"}, {"sha": "0668ad3cfd8f70ac3a1cfe555f50482addc908c1", "filename": "src/libstd/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6440343a6c26fca12ef2e323fa7738dce9da1986/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6440343a6c26fca12ef2e323fa7738dce9da1986/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=6440343a6c26fca12ef2e323fa7738dce9da1986", "patch": "@@ -1462,7 +1462,7 @@ pub trait WriterUtil {\n     /// (8 bytes).\n     fn write_le_f64(&self, f: f64);\n \n-    /// Write a litten-endian IEEE754 single-precision floating-point\n+    /// Write a little-endian IEEE754 single-precision floating-point\n     /// (4 bytes).\n     fn write_le_f32(&self, f: f32);\n "}, {"sha": "1d32c5df14ed9ea997996da300c8d3d121e494b1", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6440343a6c26fca12ef2e323fa7738dce9da1986/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6440343a6c26fca12ef2e323fa7738dce9da1986/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=6440343a6c26fca12ef2e323fa7738dce9da1986", "patch": "@@ -511,7 +511,8 @@ pub trait Iterator<A> {\n         i\n     }\n \n-    /// Return the element that gives the maximum value from the specfied function\n+    /// Return the element that gives the maximum value from the\n+    /// specified function.\n     ///\n     /// # Example\n     ///\n@@ -534,7 +535,8 @@ pub trait Iterator<A> {\n         }).map_move(|(x, _)| x)\n     }\n \n-    /// Return the element that gives the minimum value from the specfied function\n+    /// Return the element that gives the minimum value from the\n+    /// specified function.\n     ///\n     /// # Example\n     ///\n@@ -1541,7 +1543,7 @@ pub struct Repeat<A> {\n }\n \n impl<A: Clone> Repeat<A> {\n-    /// Create a new `Repeat` that enlessly repeats the element `elt`.\n+    /// Create a new `Repeat` that endlessly repeats the element `elt`.\n     #[inline]\n     pub fn new(elt: A) -> Repeat<A> {\n         Repeat{element: elt}"}, {"sha": "d136ddc0fdf1d8a0c026cd75d050ae1b4c054c1d", "filename": "src/libstd/rt/io/extensions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6440343a6c26fca12ef2e323fa7738dce9da1986/src%2Flibstd%2Frt%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6440343a6c26fca12ef2e323fa7738dce9da1986/src%2Flibstd%2Frt%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fextensions.rs?ref=6440343a6c26fca12ef2e323fa7738dce9da1986", "patch": "@@ -262,7 +262,7 @@ pub trait WriterByteConversions {\n     /// (8 bytes).\n     fn write_le_f64(&mut self, f: f64);\n \n-    /// Write a litten-endian IEEE754 single-precision floating-point\n+    /// Write a little-endian IEEE754 single-precision floating-point\n     /// (4 bytes).\n     fn write_le_f32(&mut self, f: f32);\n "}, {"sha": "9ec1b699b1d1f8f715d4b7d5b8d74fd6eb98f38d", "filename": "src/libstd/rt/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6440343a6c26fca12ef2e323fa7738dce9da1986/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6440343a6c26fca12ef2e323fa7738dce9da1986/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fmod.rs?ref=6440343a6c26fca12ef2e323fa7738dce9da1986", "patch": "@@ -430,7 +430,7 @@ pub trait Reader {\n     ///         println(reader.read_line());\n     ///     }\n     ///\n-    /// # Failue\n+    /// # Failure\n     ///\n     /// Returns `true` on failure.\n     fn eof(&mut self) -> bool;"}, {"sha": "a8c450a0516128eef47e658bfbd0913e9c414faa", "filename": "src/libstd/to_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6440343a6c26fca12ef2e323fa7738dce9da1986/src%2Flibstd%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6440343a6c26fca12ef2e323fa7738dce9da1986/src%2Flibstd%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_str.rs?ref=6440343a6c26fca12ef2e323fa7738dce9da1986", "patch": "@@ -31,7 +31,7 @@ pub trait ToStr {\n \n /// Trait for converting a type to a string, consuming it in the process.\n pub trait ToStrConsume {\n-    /// Cosume and convert to a string.\n+    /// Consume and convert to a string.\n     fn into_str(self) -> ~str;\n }\n "}]}