{"sha": "f2fb3c9659e072d7df6315906f1adbd06c3bc9e3", "node_id": "C_kwDOAAsO6NoAKGYyZmIzYzk2NTllMDcyZDdkZjYzMTU5MDZmMWFkYmQwNmMzYmM5ZTM", "commit": {"author": {"name": "Yacin Tmimi", "email": "ytmimi@horizonmedia.com", "date": "2021-10-06T17:09:24Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-10-14T00:36:37Z"}, "message": "Update connector search in ControlFlow::rewrite_pat_expr for for loops\n\nResolves 5009\n\nFor loops represented by a ControlFlow object use \" in\" as their connector.\nrustfmt searches for the first uncommented occurrence of the word \"in\" within the\ncurrent span and adjusts it's starting point to look for comments right after that.\nvisually this looks like this:\n\n    rustfmt starts looking for comments here\n            |\n            V\n    for x in /* ... */ 0..1 {}\n\nThis works well in most cases, however when the pattern also contains\nthe word \"in\", this leads to issues.\n\n    rustfmt starts looking for comments here\n          |\n          V\n    for in_here in /* ... */ 0..1 {}\n        -------\n        pattern\n\nIn order to correctly identify the connector, the new approach first\nupdates the span to start after the pattern and then searches for the\nfirst uncommented occurrence of \"in\".", "tree": {"sha": "51b08981e28b333454a1cf4cb4024a214893b4e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51b08981e28b333454a1cf4cb4024a214893b4e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2fb3c9659e072d7df6315906f1adbd06c3bc9e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2fb3c9659e072d7df6315906f1adbd06c3bc9e3", "html_url": "https://github.com/rust-lang/rust/commit/f2fb3c9659e072d7df6315906f1adbd06c3bc9e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2fb3c9659e072d7df6315906f1adbd06c3bc9e3/comments", "author": {"login": "ytmimi", "id": 29028348, "node_id": "MDQ6VXNlcjI5MDI4MzQ4", "avatar_url": "https://avatars.githubusercontent.com/u/29028348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ytmimi", "html_url": "https://github.com/ytmimi", "followers_url": "https://api.github.com/users/ytmimi/followers", "following_url": "https://api.github.com/users/ytmimi/following{/other_user}", "gists_url": "https://api.github.com/users/ytmimi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ytmimi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ytmimi/subscriptions", "organizations_url": "https://api.github.com/users/ytmimi/orgs", "repos_url": "https://api.github.com/users/ytmimi/repos", "events_url": "https://api.github.com/users/ytmimi/events{/privacy}", "received_events_url": "https://api.github.com/users/ytmimi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7c4a44149b4e3a683f5506929050f2b50117328", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7c4a44149b4e3a683f5506929050f2b50117328", "html_url": "https://github.com/rust-lang/rust/commit/f7c4a44149b4e3a683f5506929050f2b50117328"}], "stats": {"total": 74, "additions": 73, "deletions": 1}, "files": [{"sha": "f40f80e4253226f3890c7435c9b6e3ec593b4866", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2fb3c9659e072d7df6315906f1adbd06c3bc9e3/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2fb3c9659e072d7df6315906f1adbd06c3bc9e3/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=f2fb3c9659e072d7df6315906f1adbd06c3bc9e3", "patch": "@@ -822,7 +822,7 @@ impl<'a> ControlFlow<'a> {\n             let pat_string = pat.rewrite(context, pat_shape)?;\n             let comments_lo = context\n                 .snippet_provider\n-                .span_after(self.span, self.connector.trim());\n+                .span_after(self.span.with_lo(pat.span.hi()), self.connector.trim());\n             let comments_span = mk_sp(comments_lo, expr.span.lo());\n             return rewrite_assign_rhs_with_comments(\n                 context,"}, {"sha": "55836f4bf52c784e95c0ae5354c209e707f7b0fc", "filename": "tests/target/issue-5009/1_minimum_example.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2fb3c9659e072d7df6315906f1adbd06c3bc9e3/tests%2Ftarget%2Fissue-5009%2F1_minimum_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2fb3c9659e072d7df6315906f1adbd06c3bc9e3/tests%2Ftarget%2Fissue-5009%2F1_minimum_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5009%2F1_minimum_example.rs?ref=f2fb3c9659e072d7df6315906f1adbd06c3bc9e3", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    // the \"in\" inside the pattern produced invalid syntax\n+    for variable_in_here /* ... */ in 0..1 {}\n+}"}, {"sha": "d83590c6852fb47480ab7568d76e439536f0abdb", "filename": "tests/target/issue-5009/2_many_in_connectors_in_pattern.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2fb3c9659e072d7df6315906f1adbd06c3bc9e3/tests%2Ftarget%2Fissue-5009%2F2_many_in_connectors_in_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2fb3c9659e072d7df6315906f1adbd06c3bc9e3/tests%2Ftarget%2Fissue-5009%2F2_many_in_connectors_in_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5009%2F2_many_in_connectors_in_pattern.rs?ref=f2fb3c9659e072d7df6315906f1adbd06c3bc9e3", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    for in_in_in_in_in_in_in_in /* ... */ in 0..1 {}\n+}"}, {"sha": "9c800723939bd310e0dd982dc4f8d6f99eccada5", "filename": "tests/target/issue-5009/3_nested_for_loop_with_connector_in_pattern.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2fb3c9659e072d7df6315906f1adbd06c3bc9e3/tests%2Ftarget%2Fissue-5009%2F3_nested_for_loop_with_connector_in_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2fb3c9659e072d7df6315906f1adbd06c3bc9e3/tests%2Ftarget%2Fissue-5009%2F3_nested_for_loop_with_connector_in_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5009%2F3_nested_for_loop_with_connector_in_pattern.rs?ref=f2fb3c9659e072d7df6315906f1adbd06c3bc9e3", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    for variable_in_x /* ... */ in 0..1 {\n+        for variable_in_y /* ... */ in 0..1 {}\n+    }\n+}"}, {"sha": "a716d0d3082a5f8505921eda406312792c1d1bda", "filename": "tests/target/issue-5009/4_nested_for_loop_with_if_elseif_else.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f2fb3c9659e072d7df6315906f1adbd06c3bc9e3/tests%2Ftarget%2Fissue-5009%2F4_nested_for_loop_with_if_elseif_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2fb3c9659e072d7df6315906f1adbd06c3bc9e3/tests%2Ftarget%2Fissue-5009%2F4_nested_for_loop_with_if_elseif_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5009%2F4_nested_for_loop_with_if_elseif_else.rs?ref=f2fb3c9659e072d7df6315906f1adbd06c3bc9e3", "patch": "@@ -0,0 +1,13 @@\n+fn main() {\n+    for variable_in_x /* ... */ in 0..1 {\n+        for variable_in_y /* ... */ in 0..1 {\n+            if false {\n+\n+            } else if false {\n+\n+            } else {\n+\n+            }\n+        }\n+    }\n+}"}, {"sha": "41ea46d4cb9b8fa9a108ff14262d22c2583dc9e9", "filename": "tests/target/issue-5009/5_nested_for_loop_with_connector_in_if_elseif_else.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f2fb3c9659e072d7df6315906f1adbd06c3bc9e3/tests%2Ftarget%2Fissue-5009%2F5_nested_for_loop_with_connector_in_if_elseif_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2fb3c9659e072d7df6315906f1adbd06c3bc9e3/tests%2Ftarget%2Fissue-5009%2F5_nested_for_loop_with_connector_in_if_elseif_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5009%2F5_nested_for_loop_with_connector_in_if_elseif_else.rs?ref=f2fb3c9659e072d7df6315906f1adbd06c3bc9e3", "patch": "@@ -0,0 +1,15 @@\n+fn main() {\n+    let in_ = false;\n+\n+    for variable_in_x /* ... */ in 0..1 {\n+        for variable_in_y /* ... */ in 0..1 {\n+            if in_ {\n+\n+            } else if in_ {\n+\n+            } else {\n+\n+            }\n+        }\n+    }\n+}"}, {"sha": "789e54f7e5fb5bfe1747082f93f71c06e6d5b361", "filename": "tests/target/issue-5009/6_deeply_nested_for_loop_with_connector_in_pattern.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f2fb3c9659e072d7df6315906f1adbd06c3bc9e3/tests%2Ftarget%2Fissue-5009%2F6_deeply_nested_for_loop_with_connector_in_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2fb3c9659e072d7df6315906f1adbd06c3bc9e3/tests%2Ftarget%2Fissue-5009%2F6_deeply_nested_for_loop_with_connector_in_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5009%2F6_deeply_nested_for_loop_with_connector_in_pattern.rs?ref=f2fb3c9659e072d7df6315906f1adbd06c3bc9e3", "patch": "@@ -0,0 +1,32 @@\n+fn main() {\n+    for variable_in_a /* ... */ in 0..1 {\n+        for variable_in_b /* ... */ in 0..1 {\n+            for variable_in_c /* ... */ in 0..1 {\n+                for variable_in_d /* ... */ in 0..1 {\n+                    for variable_in_e /* ... */ in 0..1 {\n+                        for variable_in_f /* ... */ in 0..1 {\n+                            for variable_in_g /* ... */ in 0..1 {\n+                                for variable_in_h /* ... */ in 0..1 {\n+                                    for variable_in_i /* ... */ in 0..1 {\n+                                        for variable_in_j /* ... */ in 0..1 {\n+                                            for variable_in_k /* ... */ in 0..1 {\n+                                                for variable_in_l /* ... */ in 0..1 {\n+                                                    for variable_in_m /* ... */ in 0..1 {\n+                                                        for variable_in_n /* ... */ in 0..1 {\n+                                                            for variable_in_o /* ... */ in 0..1 {\n+                                                            }\n+                                                        }\n+                                                    }\n+                                                }\n+                                            }\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}]}