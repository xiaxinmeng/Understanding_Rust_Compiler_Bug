{"sha": "117169799ffb6df9a86f4d3e933968274022bdd3", "node_id": "C_kwDOAAsO6NoAKDExNzE2OTc5OWZmYjZkZjlhODZmNGQzZTkzMzk2ODI3NDAyMmJkZDM", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-08-29T16:05:21Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-08-31T18:31:22Z"}, "message": "Generate error index with mdbook instead of raw HTML pages", "tree": {"sha": "ccc5de39f8be0410c18134d29f2565e905fb37a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccc5de39f8be0410c18134d29f2565e905fb37a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/117169799ffb6df9a86f4d3e933968274022bdd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/117169799ffb6df9a86f4d3e933968274022bdd3", "html_url": "https://github.com/rust-lang/rust/commit/117169799ffb6df9a86f4d3e933968274022bdd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/117169799ffb6df9a86f4d3e933968274022bdd3/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a42ca942cda0d197a63373127e7e373305957a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a42ca942cda0d197a63373127e7e373305957a0", "html_url": "https://github.com/rust-lang/rust/commit/7a42ca942cda0d197a63373127e7e373305957a0"}], "stats": {"total": 355, "additions": 214, "deletions": 141}, "files": [{"sha": "8dff674a630ef6a2145beb0bdba114a9d4f21978", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/117169799ffb6df9a86f4d3e933968274022bdd3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/117169799ffb6df9a86f4d3e933968274022bdd3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=117169799ffb6df9a86f4d3e933968274022bdd3", "patch": "@@ -1268,7 +1268,7 @@ dependencies = [\n name = \"error_index_generator\"\n version = \"0.0.0\"\n dependencies = [\n- \"rustdoc\",\n+ \"mdbook\",\n ]\n \n [[package]]"}, {"sha": "f909ecc0ab858404403aaa3edb7df83d6043df97", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/117169799ffb6df9a86f4d3e933968274022bdd3/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/117169799ffb6df9a86f4d3e933968274022bdd3/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=117169799ffb6df9a86f4d3e933968274022bdd3", "patch": "@@ -793,7 +793,7 @@ impl Step for ErrorIndex {\n         t!(fs::create_dir_all(&out));\n         let mut index = tool::ErrorIndex::command(builder);\n         index.arg(\"html\");\n-        index.arg(out.join(\"error-index.html\"));\n+        index.arg(out);\n         index.arg(&builder.version);\n \n         builder.run(&mut index);"}, {"sha": "f4dac6e947e323e37c7c1996fb982061159d7c39", "filename": "src/tools/error_index_generator/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/117169799ffb6df9a86f4d3e933968274022bdd3/src%2Ftools%2Ferror_index_generator%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/117169799ffb6df9a86f4d3e933968274022bdd3/src%2Ftools%2Ferror_index_generator%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2FCargo.toml?ref=117169799ffb6df9a86f4d3e933968274022bdd3", "patch": "@@ -4,7 +4,7 @@ version = \"0.0.0\"\n edition = \"2021\"\n \n [dependencies]\n-rustdoc = { path = \"../../librustdoc\" }\n+mdbook = { version = \"0.4\", default-features = false, features = [\"search\"] }\n \n [[bin]]\n name = \"error_index_generator\""}, {"sha": "885100ae3a4490fe63075580c60b29118ee310d3", "filename": "src/tools/error_index_generator/book_config.toml", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/117169799ffb6df9a86f4d3e933968274022bdd3/src%2Ftools%2Ferror_index_generator%2Fbook_config.toml", "raw_url": "https://github.com/rust-lang/rust/raw/117169799ffb6df9a86f4d3e933968274022bdd3/src%2Ftools%2Ferror_index_generator%2Fbook_config.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fbook_config.toml?ref=117169799ffb6df9a86f4d3e933968274022bdd3", "patch": "@@ -0,0 +1,19 @@\n+[book]\n+title = \"Error codes index\"\n+description = \"Book listing all Rust error codes\"\n+src = \"\"\n+\n+[output.html]\n+git-repository-url = \"https://github.com/rust-lang/rust/\"\n+additional-css = [\"error-index.css\"]\n+additional-js = [\"error-index.js\"]\n+\n+[output.html.search]\n+enable = true\n+limit-results = 20\n+use-boolean-and = true\n+boost-title = 2\n+boost-hierarchy = 2\n+boost-paragraph = 1\n+expand = true\n+heading-split-level = 0"}, {"sha": "8975af82de03b354b5148ecd94796adfd2ed75b6", "filename": "src/tools/error_index_generator/error-index.css", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/117169799ffb6df9a86f4d3e933968274022bdd3/src%2Ftools%2Ferror_index_generator%2Ferror-index.css", "raw_url": "https://github.com/rust-lang/rust/raw/117169799ffb6df9a86f4d3e933968274022bdd3/src%2Ftools%2Ferror_index_generator%2Ferror-index.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Ferror-index.css?ref=117169799ffb6df9a86f4d3e933968274022bdd3", "patch": "@@ -0,0 +1,38 @@\n+code.compile_fail {\n+\tborder-left: 2px solid red;\n+}\n+\n+pre .tooltip {\n+\tposition: absolute;\n+\tleft: -25px;\n+\ttop: 0;\n+\tz-index: 1;\n+\tcolor: red;\n+\tcursor: pointer;\n+}\n+pre .tooltip::after {\n+\tdisplay: none;\n+\tcontent: \"This example deliberately fails to compile\";\n+\tbackground-color: #000;\n+\tcolor: #fff;\n+\tborder-color: #000;\n+\ttext-align: center;\n+\tpadding: 5px 3px 3px 3px;\n+\tborder-radius: 6px;\n+\tmargin-left: 5px;\n+}\n+pre .tooltip::before {\n+\tdisplay: none;\n+\tborder-color: transparent black transparent transparent;\n+\tcontent: \" \";\n+\tposition: absolute;\n+\ttop: 50%;\n+\tleft: 16px;\n+\tmargin-top: -5px;\n+\tborder-width: 5px;\n+\tborder-style: solid;\n+}\n+\n+pre .tooltip:hover::before, pre .tooltip:hover::after {\n+\tdisplay: inline;\n+}"}, {"sha": "39b371be04b95cb72884bfb35f96a4c96296efee", "filename": "src/tools/error_index_generator/error-index.js", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/117169799ffb6df9a86f4d3e933968274022bdd3/src%2Ftools%2Ferror_index_generator%2Ferror-index.js", "raw_url": "https://github.com/rust-lang/rust/raw/117169799ffb6df9a86f4d3e933968274022bdd3/src%2Ftools%2Ferror_index_generator%2Ferror-index.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Ferror-index.js?ref=117169799ffb6df9a86f4d3e933968274022bdd3", "patch": "@@ -0,0 +1,9 @@\n+for (const elem of document.querySelectorAll(\"pre.playground\")) {\n+    if (elem.querySelector(\".compile_fail\") === null) {\n+        continue;\n+    }\n+    const child = document.createElement(\"div\");\n+    child.className = \"tooltip\";\n+    child.textContent = \"\u24d8\";\n+    elem.appendChild(child);\n+}"}, {"sha": "5451e45b28be05e366ce824df74a3c5ea13726a1", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 135, "deletions": 138, "changes": 273, "blob_url": "https://github.com/rust-lang/rust/blob/117169799ffb6df9a86f4d3e933968274022bdd3/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/117169799ffb6df9a86f4d3e933968274022bdd3/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=117169799ffb6df9a86f4d3e933968274022bdd3", "patch": "@@ -1,20 +1,21 @@\n #![feature(rustc_private)]\n \n extern crate rustc_driver;\n-extern crate rustc_span;\n \n+// We use the function we generate from `register_diagnostics!`.\n use crate::error_codes::error_codes;\n \n use std::env;\n use std::error::Error;\n-use std::fs::{create_dir_all, File};\n+use std::fs::{self, create_dir_all, File};\n use std::io::Write;\n use std::path::Path;\n use std::path::PathBuf;\n \n-use rustc_span::edition::DEFAULT_EDITION;\n+use std::str::FromStr;\n \n-use rustdoc::html::markdown::{ErrorCodes, HeadingOffset, IdMap, Markdown, Playground};\n+use mdbook::book::{parse_summary, BookItem, Chapter};\n+use mdbook::{Config, MDBook};\n \n macro_rules! register_diagnostics {\n     ($($error_code:ident: $message:expr,)+ ; $($undocumented:ident,)* ) => {\n@@ -33,104 +34,21 @@ macro_rules! register_diagnostics {\n mod error_codes;\n \n enum OutputFormat {\n-    HTML(HTMLFormatter),\n+    HTML,\n     Markdown,\n     Unknown(String),\n }\n \n impl OutputFormat {\n-    fn from(format: &str, resource_suffix: &str) -> OutputFormat {\n+    fn from(format: &str) -> OutputFormat {\n         match &*format.to_lowercase() {\n-            \"html\" => OutputFormat::HTML(HTMLFormatter(resource_suffix.to_owned())),\n+            \"html\" => OutputFormat::HTML,\n             \"markdown\" => OutputFormat::Markdown,\n             s => OutputFormat::Unknown(s.to_owned()),\n         }\n     }\n }\n \n-struct HTMLFormatter(String);\n-\n-impl HTMLFormatter {\n-    fn create_error_code_file(\n-        &self,\n-        err_code: &str,\n-        explanation: &str,\n-        parent_dir: &Path,\n-    ) -> Result<(), Box<dyn Error>> {\n-        let mut output_file = File::create(parent_dir.join(err_code).with_extension(\"html\"))?;\n-\n-        self.header(&mut output_file, \"../\", \"\")?;\n-        self.title(&mut output_file, &format!(\"Error code {}\", err_code))?;\n-\n-        let mut id_map = IdMap::new();\n-        let playground =\n-            Playground { crate_name: None, url: String::from(\"https://play.rust-lang.org/\") };\n-        write!(\n-            output_file,\n-            \"{}\",\n-            Markdown {\n-                content: explanation,\n-                links: &[],\n-                ids: &mut id_map,\n-                error_codes: ErrorCodes::Yes,\n-                edition: DEFAULT_EDITION,\n-                playground: &Some(playground),\n-                heading_offset: HeadingOffset::H1,\n-            }\n-            .into_string()\n-        )?;\n-        write!(\n-            output_file,\n-            \"<p>\\\n-                <a style='text-align: center;display: block;width: 100%;' \\\n-                   href='../error-index.html'>Back to list of error codes</a>\\\n-             </p>\",\n-        )?;\n-\n-        self.footer(&mut output_file)\n-    }\n-\n-    fn header(\n-        &self,\n-        output: &mut dyn Write,\n-        extra_path: &str,\n-        extra: &str,\n-    ) -> Result<(), Box<dyn Error>> {\n-        write!(\n-            output,\n-            r##\"<!DOCTYPE html>\n-<html>\n-<head>\n-<title>Rust Compiler Error Index</title>\n-<meta charset=\"utf-8\">\n-<!-- Include rust.css after light.css so its rules take priority. -->\n-<link rel=\"stylesheet\" type=\"text/css\" href=\"{extra_path}rustdoc{suffix}.css\"/>\n-<link rel=\"stylesheet\" type=\"text/css\" href=\"{extra_path}light{suffix}.css\"/>\n-<link rel=\"stylesheet\" type=\"text/css\" href=\"{extra_path}rust.css\"/>\n-<style>\n-.error-undescribed {{\n-    display: none;\n-}}\n-</style>{extra}\n-</head>\n-<body>\n-\"##,\n-            suffix = self.0,\n-        )?;\n-        Ok(())\n-    }\n-\n-    fn title(&self, output: &mut dyn Write, title: &str) -> Result<(), Box<dyn Error>> {\n-        write!(output, \"<h1>{}</h1>\\n\", title)?;\n-        Ok(())\n-    }\n-\n-    fn footer(&self, output: &mut dyn Write) -> Result<(), Box<dyn Error>> {\n-        write!(output, \"</body></html>\")?;\n-        Ok(())\n-    }\n-}\n-\n /// Output an HTML page for the errors in `err_map` to `output_path`.\n fn render_markdown(output_path: &Path) -> Result<(), Box<dyn Error>> {\n     let mut output_file = File::create(output_path)?;\n@@ -147,61 +65,144 @@ fn render_markdown(output_path: &Path) -> Result<(), Box<dyn Error>> {\n     Ok(())\n }\n \n-fn render_html(output_path: &Path, formatter: HTMLFormatter) -> Result<(), Box<dyn Error>> {\n-    let mut output_file = File::create(output_path)?;\n+fn move_folder(source: &Path, target: &Path) -> Result<(), Box<dyn Error>> {\n+    let entries =\n+        fs::read_dir(source)?.map(|res| res.map(|e| e.path())).collect::<Result<Vec<_>, _>>()?;\n \n-    let error_codes_dir = \"error_codes\";\n+    for entry in entries {\n+        let file_name = entry.file_name().expect(\"file_name() failed\").to_os_string();\n+        let output = target.join(file_name);\n+        if entry.is_file() {\n+            fs::rename(entry, output)?;\n+        } else {\n+            if !output.exists() {\n+                create_dir_all(&output)?;\n+            }\n+            move_folder(&entry, &output)?;\n+        }\n+    }\n+\n+    fs::remove_dir(&source)?;\n+\n+    Ok(())\n+}\n \n-    let parent = output_path.parent().expect(\"There should have a parent\").join(error_codes_dir);\n+fn render_html(output_path: &Path) -> Result<(), Box<dyn Error>> {\n+    // We need to render into a temporary folder to prevent `mdbook` from removing everything\n+    // in the output folder (including other completely unrelated things).\n+    let tmp_output = output_path.join(\"tmp\");\n \n-    if !parent.exists() {\n-        create_dir_all(&parent)?;\n+    if !tmp_output.exists() {\n+        create_dir_all(&tmp_output)?;\n     }\n \n-    formatter.header(\n-        &mut output_file,\n-        \"\",\n-        &format!(\n-            r#\"<script>(function() {{\n-    if (window.location.hash) {{\n-        let code = window.location.hash.replace(/^#/, '');\n-        // We have to make sure this pattern matches to avoid inadvertently creating an\n-        // open redirect.\n-        if (/^E[0-9]+$/.test(code)) {{\n-            window.location = './{error_codes_dir}/' + code + '.html';\n-        }}\n-    }}\n-}})()</script>\"#\n-        ),\n-    )?;\n-    formatter.title(&mut output_file, \"Rust Compiler Error Index\")?;\n+    render_html_inner(&tmp_output)?;\n \n-    write!(\n-        output_file,\n-        \"<p>This page lists all the error codes emitted by the Rust compiler. If you want a full \\\n-            explanation on an error code, click on it.</p>\\\n-         <ul>\",\n-    )?;\n-    for (err_code, explanation) in error_codes().iter() {\n+    move_folder(&tmp_output, output_path)?;\n+\n+    Ok(())\n+}\n+\n+// By default, mdbook doesn't consider code blocks as Rust ones contrary to rustdoc so we have\n+// to manually add `rust` attribute whenever needed.\n+fn add_rust_attribute_on_codeblock(explanation: &str) -> String {\n+    // Very hacky way to add the rust attribute on all code blocks.\n+    let mut skip = true;\n+    explanation.split(\"\\n```\").fold(String::new(), |mut acc, part| {\n+        if !acc.is_empty() {\n+            acc.push_str(\"\\n```\");\n+        }\n+        if !skip {\n+            if let Some(attrs) = part.split('\\n').next() {\n+                if !attrs.contains(\"rust\")\n+                    && (attrs.is_empty()\n+                        || attrs.contains(\"compile_fail\")\n+                        || attrs.contains(\"ignore\")\n+                        || attrs.contains(\"edition\"))\n+                {\n+                    if !attrs.is_empty() {\n+                        acc.push_str(\"rust,\");\n+                    } else {\n+                        acc.push_str(\"rust\");\n+                    }\n+                }\n+            }\n+        }\n+        skip = !skip;\n+        acc.push_str(part);\n+        acc\n+    })\n+}\n+\n+fn render_html_inner(output_path: &Path) -> Result<(), Box<dyn Error>> {\n+    // We need to have a little difference between `summary` and `introduction` because the \"draft\"\n+    // chapters (the ones looking like `[a]()`) are not handled correctly when being put into a\n+    // `Chapter` directly: they generate a link whereas they shouldn't.\n+    let mut introduction = format!(\n+        \"<script>{}</script>\n+# Rust error codes index\n+\n+This page lists all the error codes emitted by the Rust compiler.\n+\n+\",\n+        include_str!(\"redirect.js\")\n+    );\n+\n+    let err_codes = error_codes();\n+    let mut chapters = Vec::with_capacity(err_codes.len());\n+\n+    for (err_code, explanation) in err_codes.iter() {\n         if let Some(explanation) = explanation {\n-            write!(\n-                output_file,\n-                \"<li><a href='./{0}/{1}.html'>{1}</a></li>\",\n-                error_codes_dir, err_code\n-            )?;\n-            formatter.create_error_code_file(err_code, explanation, &parent)?;\n+            introduction.push_str(&format!(\" * [{0}](./error_codes/{0}.html)\\n\", err_code));\n+\n+            let content = add_rust_attribute_on_codeblock(explanation);\n+            chapters.push(BookItem::Chapter(Chapter {\n+                name: err_code.to_string(),\n+                content: format!(\"# Error code {}\\n\\n{}\\n\", err_code, content),\n+                number: None,\n+                sub_items: Vec::new(),\n+                // We generate it into the `error_codes` folder.\n+                path: Some(PathBuf::from(&format!(\"error_codes/{}.html\", err_code))),\n+                source_path: None,\n+                parent_names: Vec::new(),\n+            }));\n         } else {\n-            write!(output_file, \"<li>{}</li>\", err_code)?;\n+            introduction.push_str(&format!(\" * {}\\n\", err_code));\n         }\n     }\n-    write!(output_file, \"</ul>\")?;\n-    formatter.footer(&mut output_file)\n+\n+    let mut config = Config::from_str(include_str!(\"book_config.toml\"))?;\n+    config.build.build_dir = output_path.to_path_buf();\n+    let mut book = MDBook::load_with_config_and_summary(\n+        env!(\"CARGO_MANIFEST_DIR\"),\n+        config,\n+        parse_summary(\"\")?,\n+    )?;\n+    let chapter = Chapter {\n+        name: \"Rust error codes index\".to_owned(),\n+        content: introduction,\n+        number: None,\n+        sub_items: chapters,\n+        // Very important: this file is named as `error-index.html` and not `index.html`!\n+        path: Some(PathBuf::from(\"error-index.html\")),\n+        source_path: None,\n+        parent_names: Vec::new(),\n+    };\n+    book.book.sections.push(BookItem::Chapter(chapter));\n+    book.build()?;\n+\n+    // We don't need this file since it's handled by doc.rust-lang.org directly.\n+    let _ = fs::remove_file(output_path.join(\"404.html\"));\n+    // We don't want this file either because it would overwrite the already existing `index.html`.\n+    let _ = fs::remove_file(output_path.join(\"index.html\"));\n+\n+    Ok(())\n }\n \n fn main_with_result(format: OutputFormat, dst: &Path) -> Result<(), Box<dyn Error>> {\n     match format {\n         OutputFormat::Unknown(s) => panic!(\"Unknown output format: {}\", s),\n-        OutputFormat::HTML(h) => render_html(dst, h),\n+        OutputFormat::HTML => render_html(dst),\n         OutputFormat::Markdown => render_markdown(dst),\n     }\n }\n@@ -210,12 +211,9 @@ fn parse_args() -> (OutputFormat, PathBuf) {\n     let mut args = env::args().skip(1);\n     let format = args.next();\n     let dst = args.next();\n-    let resource_suffix = args.next().unwrap_or_else(String::new);\n-    let format = format\n-        .map(|a| OutputFormat::from(&a, &resource_suffix))\n-        .unwrap_or(OutputFormat::from(\"html\", &resource_suffix));\n+    let format = format.map(|a| OutputFormat::from(&a)).unwrap_or(OutputFormat::from(\"html\"));\n     let dst = dst.map(PathBuf::from).unwrap_or_else(|| match format {\n-        OutputFormat::HTML(..) => PathBuf::from(\"doc/error-index.html\"),\n+        OutputFormat::HTML => PathBuf::from(\"doc\"),\n         OutputFormat::Markdown => PathBuf::from(\"doc/error-index.md\"),\n         OutputFormat::Unknown(..) => PathBuf::from(\"<nul>\"),\n     });\n@@ -225,9 +223,8 @@ fn parse_args() -> (OutputFormat, PathBuf) {\n fn main() {\n     rustc_driver::init_env_logger(\"RUST_LOG\");\n     let (format, dst) = parse_args();\n-    let result =\n-        rustc_span::create_default_session_globals_then(move || main_with_result(format, &dst));\n+    let result = main_with_result(format, &dst);\n     if let Err(e) = result {\n-        panic!(\"{}\", e.to_string());\n+        panic!(\"{:?}\", e);\n     }\n }"}, {"sha": "e6e910658e483baaf879b3f06a6d7d6393e78b6b", "filename": "src/tools/error_index_generator/redirect.js", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/117169799ffb6df9a86f4d3e933968274022bdd3/src%2Ftools%2Ferror_index_generator%2Fredirect.js", "raw_url": "https://github.com/rust-lang/rust/raw/117169799ffb6df9a86f4d3e933968274022bdd3/src%2Ftools%2Ferror_index_generator%2Fredirect.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fredirect.js?ref=117169799ffb6df9a86f4d3e933968274022bdd3", "patch": "@@ -0,0 +1,10 @@\n+(function() {{\n+    if (window.location.hash) {{\n+        let code = window.location.hash.replace(/^#/, '');\n+        // We have to make sure this pattern matches to avoid inadvertently creating an\n+        // open redirect.\n+        if (/^E[0-9]+$/.test(code)) {{\n+            window.location = './error_codes/' + code + '.html';\n+        }}\n+    }}\n+}})()"}]}