{"sha": "3961957bd61b7f9ab350c0a6621a1ad18716c332", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NjE5NTdiZDYxYjdmOWFiMzUwYzBhNjYyMWExYWQxODcxNmMzMzI=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-04-02T13:55:33Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-04-04T03:28:59Z"}, "message": "std: Remove `RefCell::set()`", "tree": {"sha": "b12dc781ba71d3ddf2dfb7464ee47d856628cfca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b12dc781ba71d3ddf2dfb7464ee47d856628cfca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3961957bd61b7f9ab350c0a6621a1ad18716c332", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3961957bd61b7f9ab350c0a6621a1ad18716c332", "html_url": "https://github.com/rust-lang/rust/commit/3961957bd61b7f9ab350c0a6621a1ad18716c332", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3961957bd61b7f9ab350c0a6621a1ad18716c332/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bcfe2ee1067d1304c9a2813c111f10a89984e45", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bcfe2ee1067d1304c9a2813c111f10a89984e45", "html_url": "https://github.com/rust-lang/rust/commit/7bcfe2ee1067d1304c9a2813c111f10a89984e45"}], "stats": {"total": 92, "additions": 39, "deletions": 53}, "files": [{"sha": "af5b3f8b0cdd3b666b4efbcb15ea63218239d8c8", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3961957bd61b7f9ab350c0a6621a1ad18716c332/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3961957bd61b7f9ab350c0a6621a1ad18716c332/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=3961957bd61b7f9ab350c0a6621a1ad18716c332", "patch": "@@ -212,9 +212,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     let time_passes = sess.time_passes();\n \n     sess.building_library.set(session::building_library(&sess.opts, &krate));\n-    sess.crate_types.set(session::collect_crate_types(sess,\n-                                                      krate.attrs\n-                                                           .as_slice()));\n+    *sess.crate_types.borrow_mut() = session::collect_crate_types(sess, krate.attrs.as_slice());\n \n     time(time_passes, \"gated feature checking\", (), |_|\n          front::feature_gate::check_crate(sess, &krate));"}, {"sha": "441a3a3672983e9eb1bd0603415916b7cf432500", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3961957bd61b7f9ab350c0a6621a1ad18716c332/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3961957bd61b7f9ab350c0a6621a1ad18716c332/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=3961957bd61b7f9ab350c0a6621a1ad18716c332", "patch": "@@ -123,13 +123,13 @@ fn find_item(item: &Item, ctxt: &mut EntryContext) {\n \n fn configure_main(this: &mut EntryContext) {\n     if this.start_fn.is_some() {\n-        this.session.entry_fn.set(this.start_fn);\n+        *this.session.entry_fn.borrow_mut() = this.start_fn;\n         this.session.entry_type.set(Some(session::EntryStart));\n     } else if this.attr_main_fn.is_some() {\n-        this.session.entry_fn.set(this.attr_main_fn);\n+        *this.session.entry_fn.borrow_mut() = this.attr_main_fn;\n         this.session.entry_type.set(Some(session::EntryMain));\n     } else if this.main_fn.is_some() {\n-        this.session.entry_fn.set(this.main_fn);\n+        *this.session.entry_fn.borrow_mut() = this.main_fn;\n         this.session.entry_type.set(Some(session::EntryMain));\n     } else {\n         if !this.session.building_library.get() {"}, {"sha": "143b02f96d22f69ba995d13bf5e3d9f5aaefdb6e", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 28, "deletions": 30, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/3961957bd61b7f9ab350c0a6621a1ad18716c332/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3961957bd61b7f9ab350c0a6621a1ad18716c332/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=3961957bd61b7f9ab350c0a6621a1ad18716c332", "patch": "@@ -553,20 +553,20 @@ impl NameBindings {\n         let type_def = self.type_def.borrow().clone();\n         match type_def {\n             None => {\n-                self.type_def.set(Some(TypeNsDef {\n+                *self.type_def.borrow_mut() = Some(TypeNsDef {\n                     is_public: is_public,\n                     module_def: Some(module_),\n                     type_def: None,\n                     type_span: Some(sp)\n-                }));\n+                });\n             }\n             Some(type_def) => {\n-                self.type_def.set(Some(TypeNsDef {\n+                *self.type_def.borrow_mut() = Some(TypeNsDef {\n                     is_public: is_public,\n                     module_def: Some(module_),\n                     type_span: Some(sp),\n                     type_def: type_def.type_def\n-                }));\n+                });\n             }\n         }\n     }\n@@ -584,12 +584,12 @@ impl NameBindings {\n             None => {\n                 let module = @Module::new(parent_link, def_id, kind,\n                                               external, is_public);\n-                self.type_def.set(Some(TypeNsDef {\n+                *self.type_def.borrow_mut() = Some(TypeNsDef {\n                     is_public: is_public,\n                     module_def: Some(module),\n                     type_def: None,\n                     type_span: None,\n-                }))\n+                });\n             }\n             Some(type_def) => {\n                 match type_def.module_def {\n@@ -599,12 +599,12 @@ impl NameBindings {\n                                                       kind,\n                                                       external,\n                                                       is_public);\n-                        self.type_def.set(Some(TypeNsDef {\n+                        *self.type_def.borrow_mut() = Some(TypeNsDef {\n                             is_public: is_public,\n                             module_def: Some(module),\n                             type_def: type_def.type_def,\n                             type_span: None,\n-                        }))\n+                        });\n                     }\n                     Some(module_def) => module_def.kind.set(kind),\n                 }\n@@ -618,31 +618,31 @@ impl NameBindings {\n         let type_def = self.type_def.borrow().clone();\n         match type_def {\n             None => {\n-                self.type_def.set(Some(TypeNsDef {\n+                *self.type_def.borrow_mut() = Some(TypeNsDef {\n                     module_def: None,\n                     type_def: Some(def),\n                     type_span: Some(sp),\n                     is_public: is_public,\n-                }));\n+                });\n             }\n             Some(type_def) => {\n-                self.type_def.set(Some(TypeNsDef {\n+                *self.type_def.borrow_mut() = Some(TypeNsDef {\n                     type_def: Some(def),\n                     type_span: Some(sp),\n                     module_def: type_def.module_def,\n                     is_public: is_public,\n-                }));\n+                });\n             }\n         }\n     }\n \n     /// Records a value definition.\n     fn define_value(&self, def: Def, sp: Span, is_public: bool) {\n-        self.value_def.set(Some(ValueNsDef {\n+        *self.value_def.borrow_mut() = Some(ValueNsDef {\n             def: def,\n             value_span: Some(sp),\n             is_public: is_public,\n-        }));\n+        });\n     }\n \n     /// Returns the module node if applicable.\n@@ -2417,8 +2417,8 @@ impl<'a> Resolver<'a> {\n         match value_result {\n             BoundResult(target_module, name_bindings) => {\n                 debug!(\"(resolving single import) found value target\");\n-                import_resolution.value_target.set(\n-                    Some(Target::new(target_module, name_bindings)));\n+                *import_resolution.value_target.borrow_mut() =\n+                    Some(Target::new(target_module, name_bindings));\n                 import_resolution.value_id.set(directive.id);\n                 value_used_public = name_bindings.defined_in_public_namespace(ValueNS);\n             }\n@@ -2431,8 +2431,8 @@ impl<'a> Resolver<'a> {\n             BoundResult(target_module, name_bindings) => {\n                 debug!(\"(resolving single import) found type target: {:?}\",\n                        { name_bindings.type_def.borrow().clone().unwrap().type_def });\n-                import_resolution.type_target.set(\n-                    Some(Target::new(target_module, name_bindings)));\n+                *import_resolution.type_target.borrow_mut() =\n+                    Some(Target::new(target_module, name_bindings));\n                 import_resolution.type_id.set(directive.id);\n                 type_used_public = name_bindings.defined_in_public_namespace(TypeNS);\n             }\n@@ -2537,10 +2537,10 @@ impl<'a> Resolver<'a> {\n                     // Simple: just copy the old import resolution.\n                     let new_import_resolution =\n                         @ImportResolution::new(id, is_public);\n-                    new_import_resolution.value_target.set(\n-                        get(&target_import_resolution.value_target));\n-                    new_import_resolution.type_target.set(\n-                        get(&target_import_resolution.type_target));\n+                    *new_import_resolution.value_target.borrow_mut() =\n+                        get(&target_import_resolution.value_target);\n+                    *new_import_resolution.type_target.borrow_mut() =\n+                        get(&target_import_resolution.type_target);\n \n                     import_resolutions.insert\n                         (*ident, new_import_resolution);\n@@ -2554,17 +2554,15 @@ impl<'a> Resolver<'a> {\n                             // Continue.\n                         }\n                         Some(value_target) => {\n-                            dest_import_resolution.value_target.set(\n-                                Some(value_target));\n+                            *dest_import_resolution.value_target.borrow_mut() = Some(value_target);\n                         }\n                     }\n                     match *target_import_resolution.type_target.borrow() {\n                         None => {\n                             // Continue.\n                         }\n                         Some(type_target) => {\n-                            dest_import_resolution.type_target.set(\n-                                Some(type_target));\n+                            *dest_import_resolution.type_target.borrow_mut() = Some(type_target);\n                         }\n                     }\n                     dest_import_resolution.is_public.set(is_public);\n@@ -2636,14 +2634,14 @@ impl<'a> Resolver<'a> {\n         // Merge the child item into the import resolution.\n         if name_bindings.defined_in_public_namespace(ValueNS) {\n             debug!(\"(resolving glob import) ... for value target\");\n-            dest_import_resolution.value_target.set(\n-                Some(Target::new(containing_module, name_bindings)));\n+            *dest_import_resolution.value_target.borrow_mut() =\n+                Some(Target::new(containing_module, name_bindings));\n             dest_import_resolution.value_id.set(id);\n         }\n         if name_bindings.defined_in_public_namespace(TypeNS) {\n             debug!(\"(resolving glob import) ... for type target\");\n-            dest_import_resolution.type_target.set(\n-                Some(Target::new(containing_module, name_bindings)));\n+            *dest_import_resolution.type_target.borrow_mut() =\n+                Some(Target::new(containing_module, name_bindings));\n             dest_import_resolution.type_id.set(id);\n         }\n         dest_import_resolution.is_public.set(is_public);"}, {"sha": "96f75705cf8e4f70d6ee9c40a615cfa2456775cd", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3961957bd61b7f9ab350c0a6621a1ad18716c332/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3961957bd61b7f9ab350c0a6621a1ad18716c332/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=3961957bd61b7f9ab350c0a6621a1ad18716c332", "patch": "@@ -1209,7 +1209,7 @@ pub fn init_function<'a>(\n                      param_substs: Option<@param_substs>) {\n     let entry_bcx = fcx.new_temp_block(\"entry-block\");\n \n-    fcx.entry_bcx.set(Some(entry_bcx));\n+    *fcx.entry_bcx.borrow_mut() = Some(entry_bcx);\n \n     // Use a dummy instruction as the insertion point for all allocas.\n     // This is later removed in FunctionContext::cleanup."}, {"sha": "26520e98c13ae9c0acfbc07d73303876a50ef610", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3961957bd61b7f9ab350c0a6621a1ad18716c332/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3961957bd61b7f9ab350c0a6621a1ad18716c332/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=3961957bd61b7f9ab350c0a6621a1ad18716c332", "patch": "@@ -322,7 +322,7 @@ impl<'a> FunctionContext<'a> {\n                                                      .unwrap());\n         }\n         // Remove the cycle between fcx and bcx, so memory can be freed\n-        self.entry_bcx.set(None);\n+        *self.entry_bcx.borrow_mut() = None;\n     }\n \n     pub fn get_llreturn(&self) -> BasicBlockRef {"}, {"sha": "085e387dfe95b844e13aec379d0fcac4cb6f496e", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3961957bd61b7f9ab350c0a6621a1ad18716c332/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3961957bd61b7f9ab350c0a6621a1ad18716c332/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=3961957bd61b7f9ab350c0a6621a1ad18716c332", "patch": "@@ -3333,7 +3333,7 @@ pub fn check_block_with_expected(fcx: &FnCtxt,\n         };\n     });\n \n-    fcx.ps.set(prev);\n+    *fcx.ps.borrow_mut() = prev;\n }\n \n pub fn check_const(ccx: &CrateCtxt,"}, {"sha": "40c6c3ebccf0be857d272acd67257bdce729b534", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3961957bd61b7f9ab350c0a6621a1ad18716c332/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3961957bd61b7f9ab350c0a6621a1ad18716c332/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=3961957bd61b7f9ab350c0a6621a1ad18716c332", "patch": "@@ -164,16 +164,6 @@ impl<T> RefCell<T> {\n             None => fail!(\"RefCell<T> already borrowed\")\n         }\n     }\n-\n-    /// Sets the value, replacing what was there.\n-    ///\n-    /// # Failure\n-    ///\n-    /// Fails if the value is currently borrowed.\n-    #[inline]\n-    pub fn set(&self, value: T) {\n-        *self.borrow_mut() = value;\n-    }\n }\n \n impl<T: Clone> Clone for RefCell<T> {"}, {"sha": "ca1ea0169e66a269f51f248b1885c1253c49b970", "filename": "src/libstd/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3961957bd61b7f9ab350c0a6621a1ad18716c332/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3961957bd61b7f9ab350c0a6621a1ad18716c332/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=3961957bd61b7f9ab350c0a6621a1ad18716c332", "patch": "@@ -652,7 +652,7 @@ mod tests {\n            fn drop(&mut self) {\n                 let ii = &*self.i;\n                 let i = ii.borrow().clone();\n-                ii.set(i + 1);\n+                *ii.borrow_mut() = i + 1;\n             }\n         }\n "}, {"sha": "c6f353136bada19302eb77ac6b236caec27d2b42", "filename": "src/test/run-pass/cycle-collection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3961957bd61b7f9ab350c0a6621a1ad18716c332/src%2Ftest%2Frun-pass%2Fcycle-collection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3961957bd61b7f9ab350c0a6621a1ad18716c332/src%2Ftest%2Frun-pass%2Fcycle-collection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection.rs?ref=3961957bd61b7f9ab350c0a6621a1ad18716c332", "patch": "@@ -19,7 +19,7 @@ enum taggy {\n \n fn f() {\n     let a_box = @RefCell::new(nil);\n-    a_box.set(cons(a_box));\n+    *a_box.borrow_mut() = cons(a_box);\n }\n \n pub fn main() {"}, {"sha": "06f95bae5593bcb68fb817a3e99c5ae48766ff7a", "filename": "src/test/run-pass/issue-980.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3961957bd61b7f9ab350c0a6621a1ad18716c332/src%2Ftest%2Frun-pass%2Fissue-980.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3961957bd61b7f9ab350c0a6621a1ad18716c332/src%2Ftest%2Frun-pass%2Fissue-980.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-980.rs?ref=3961957bd61b7f9ab350c0a6621a1ad18716c332", "patch": "@@ -23,7 +23,7 @@ struct Pointy {\n \n pub fn main() {\n     let m = @RefCell::new(Pointy { x : no_pointy });\n-    m.set(Pointy {\n+    *m.borrow_mut() = Pointy {\n         x: yes_pointy(m)\n-    });\n+    };\n }"}]}