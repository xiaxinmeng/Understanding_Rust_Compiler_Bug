{"sha": "9d672671e25855d9ca9813c55cc2fc33252de7b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNjcyNjcxZTI1ODU1ZDljYTk4MTNjNTVjYzJmYzMzMjUyZGU3Yjg=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-14T00:51:18Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-22T23:59:45Z"}, "message": "Make borrowck's notion of scopes consistent with trans's notion of scopes\n\nThis eliminates an ICE in trans where the scope for a particular\nborrow was a statement ID, but the code in trans that does cleanups\nwasn't finding the block with that scope. As per #3860\n\npreserve looks at a node ID to see if it's for a statement -- if it\nis, it uses the enclosing scope instead when updating the map that\ntrans looks at later.\n\nI added a comment noting that this is not the best fix (since it may\ncause boxes to be frozen for longer than necessary) and referring\nto #3511.\n\nr=nmatsakis", "tree": {"sha": "7366053909a969ac72a8b280142cccc6ab1a230c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7366053909a969ac72a8b280142cccc6ab1a230c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d672671e25855d9ca9813c55cc2fc33252de7b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d672671e25855d9ca9813c55cc2fc33252de7b8", "html_url": "https://github.com/rust-lang/rust/commit/9d672671e25855d9ca9813c55cc2fc33252de7b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d672671e25855d9ca9813c55cc2fc33252de7b8/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "519b60f313766d840123b48fbc9fc4b42948e6c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/519b60f313766d840123b48fbc9fc4b42948e6c0", "html_url": "https://github.com/rust-lang/rust/commit/519b60f313766d840123b48fbc9fc4b42948e6c0"}], "stats": {"total": 58, "additions": 47, "deletions": 11}, "files": [{"sha": "2ce3ef9903e5e32ea34f2e19f5928fd0d48bd52c", "filename": "src/librustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9d672671e25855d9ca9813c55cc2fc33252de7b8/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d672671e25855d9ca9813c55cc2fc33252de7b8/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=9d672671e25855d9ca9813c55cc2fc33252de7b8", "patch": "@@ -84,6 +84,7 @@ fn gather_loans(bccx: borrowck_ctxt, crate: @ast::crate) -> req_maps {\n                                   mut ignore_adjustments: LinearMap()});\n     let v = visit::mk_vt(@visit::Visitor {visit_expr: req_loans_in_expr,\n                                           visit_fn: req_loans_in_fn,\n+                                          visit_stmt: add_stmt_to_map,\n                                           .. *visit::default_visitor()});\n     visit::visit_crate(*crate, glcx, v);\n     return glcx.req_maps;\n@@ -573,3 +574,16 @@ impl gather_loan_ctxt {\n     }\n }\n \n+// Setting up info that preserve needs.\n+// This is just the most convenient place to do it.\n+fn add_stmt_to_map(stmt: @ast::stmt,\n+                   &&self: gather_loan_ctxt,\n+                   vt: visit::vt<gather_loan_ctxt>) {\n+    match stmt.node {\n+        ast::stmt_expr(_, id) | ast::stmt_semi(_, id) => {\n+            self.bccx.stmt_map.insert(id, ());\n+        }\n+        _ => ()\n+    }\n+    visit::visit_stmt(stmt, self, vt);\n+}"}, {"sha": "ab7de6d52ca41968c982e59d7f20c1d0ee4ee978", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d672671e25855d9ca9813c55cc2fc33252de7b8/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d672671e25855d9ca9813c55cc2fc33252de7b8/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=9d672671e25855d9ca9813c55cc2fc33252de7b8", "patch": "@@ -232,7 +232,7 @@ use middle::liveness;\n use middle::mem_categorization::*;\n use middle::region;\n use middle::ty;\n-use util::common::indenter;\n+use util::common::{indenter, stmt_set};\n use util::ppaux::{expr_repr, note_and_explain_region};\n use util::ppaux::{ty_to_str, region_to_str, explain_region};\n \n@@ -272,6 +272,7 @@ fn check_crate(tcx: ty::ctxt,\n                                 root_map: root_map(),\n                                 mutbl_map: HashMap(),\n                                 write_guard_map: HashMap(),\n+                                stmt_map: HashMap(),\n                                 mut loaned_paths_same: 0,\n                                 mut loaned_paths_imm: 0,\n                                 mut stable_paths: 0,\n@@ -313,6 +314,7 @@ type borrowck_ctxt_ = {tcx: ty::ctxt,\n                        root_map: root_map,\n                        mutbl_map: mutbl_map,\n                        write_guard_map: write_guard_map,\n+                       stmt_map: stmt_set,\n \n                        // Statistics:\n                        mut loaned_paths_same: uint,"}, {"sha": "61c6fc8199df8eb73960d4b83b175cb8bf990760", "filename": "src/librustc/middle/borrowck/preserve.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9d672671e25855d9ca9813c55cc2fc33252de7b8/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d672671e25855d9ca9813c55cc2fc33252de7b8/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs?ref=9d672671e25855d9ca9813c55cc2fc33252de7b8", "patch": "@@ -357,10 +357,30 @@ priv impl &preserve_ctxt {\n             if self.bccx.is_subregion_of(self.scope_region, root_region) {\n                 debug!(\"Elected to root\");\n                 let rk = {id: base.id, derefs: derefs};\n+                // This code could potentially lead cause boxes to be frozen\n+                // for longer than necessarily at runtime. It prevents an ICE\n+                // in trans; the fundamental problem is that it's hard to make\n+                // sure trans and borrowck have the same notion of scope. The\n+                // real fix is to clean up how trans handles cleanups, but\n+                // that's hard. If this becomes an issue, it's an option to just\n+                // change this to `let scope_to_use = scope_id;`. Though that\n+                // would potentially re-introduce the ICE. See #3511 for more\n+                // details.\n+                let scope_to_use = if\n+                    self.bccx.stmt_map.contains_key(scope_id) {\n+                    // Root it in its parent scope, b/c\n+                    // trans won't introduce a new scope for the\n+                    // stmt\n+                    self.root_ub\n+                }\n+                else {\n+                    // Use the more precise scope\n+                    scope_id\n+                };\n                 // We freeze if and only if this is a *mutable* @ box that\n                 // we're borrowing into a pointer.\n                 self.bccx.root_map.insert(rk, RootInfo {\n-                    scope: scope_id,\n+                    scope: scope_to_use,\n                     freezes: cmt.cat.derefs_through_mutable_box()\n                 });\n                 return Ok(pc_ok);"}, {"sha": "592a1318477802a1e09adb24273c9aefbdc62be4", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d672671e25855d9ca9813c55cc2fc33252de7b8/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d672671e25855d9ca9813c55cc2fc33252de7b8/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=9d672671e25855d9ca9813c55cc2fc33252de7b8", "patch": "@@ -25,6 +25,7 @@ use middle::resolve;\n use middle::ty::{region_variance, rv_covariant, rv_invariant};\n use middle::ty::{rv_contravariant};\n use middle::ty;\n+use util::common::stmt_set;\n \n use core::cmp;\n use core::dvec::DVec;\n@@ -254,6 +255,7 @@ fn resolve_stmt(stmt: @ast::stmt, cx: ctxt, visitor: visit::vt<ctxt>) {\n       ast::stmt_decl(*) => {\n         visit::visit_stmt(stmt, cx, visitor);\n       }\n+      // This code has to be kept consistent with trans::base::trans_stmt\n       ast::stmt_expr(_, stmt_id) |\n       ast::stmt_semi(_, stmt_id) => {\n         record_parent(cx, stmt_id);"}, {"sha": "2bedbc93b6deaf89ce70e93dddee91cd1fe376a9", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d672671e25855d9ca9813c55cc2fc33252de7b8/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d672671e25855d9ca9813c55cc2fc33252de7b8/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=9d672671e25855d9ca9813c55cc2fc33252de7b8", "patch": "@@ -112,6 +112,9 @@ fn pluralize(n: uint, +s: ~str) -> ~str {\n     else { str::concat([s, ~\"s\"]) }\n }\n \n+// A set of node IDs (used to keep track of which node IDs are for statements)\n+type stmt_set = HashMap<ast::node_id, ()>;\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "7a7c307e23d76e767e904c08bfbf5828198e99dd", "filename": "src/test/run-pass/issue-3860.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9d672671e25855d9ca9813c55cc2fc33252de7b8/src%2Ftest%2Frun-pass%2Fissue-3860.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d672671e25855d9ca9813c55cc2fc33252de7b8/src%2Ftest%2Frun-pass%2Fissue-3860.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3860.rs?ref=9d672671e25855d9ca9813c55cc2fc33252de7b8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n struct Foo { x: int }\n \n impl Foo {\n@@ -19,11 +18,7 @@ impl Foo {\n \n fn main() {\n     let mut x = @mut Foo { x: 3 };\n-    x.stuff(); // error: internal compiler error: no enclosing scope with id 49\n-    // storing the result removes the error, so replacing the above\n-    // with the following, works:\n-    // let _y = x.stuff()\n-\n-    // also making 'stuff()' not return anything fixes it\n-    // I guess the \"dangling &ptr\" cuases issues?\n-}\n+    // Neither of the next two lines should cause an error\n+    let _ = x.stuff(); \n+    x.stuff();\n+}\n\\ No newline at end of file"}]}