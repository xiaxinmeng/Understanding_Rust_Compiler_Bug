{"sha": "c196097e588b05e86b5ce6de992b2a6e6a7027bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxOTYwOTdlNTg4YjA1ZTg2YjVjZTZkZTk5MmIyYTZlNmE3MDI3YmQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-02-12T18:20:34Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-02-26T15:20:17Z"}, "message": "rustc: Update LLVM, remove dead wasm code\n\nThis commit updates the LLVM branch to the rebased version of the\nupstream release/8.x branch. This includes a wasm patch which means that\nthe `rewrite_imports` pass in rustc is no longer needed (yay!) and we\ncan instead rely on `wasm-import-module`, an attribute we're already\nemitting, to take care of all the work.", "tree": {"sha": "0ff597dff0a92f5ab7da14864260a005bfd1bd2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ff597dff0a92f5ab7da14864260a005bfd1bd2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c196097e588b05e86b5ce6de992b2a6e6a7027bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c196097e588b05e86b5ce6de992b2a6e6a7027bd", "html_url": "https://github.com/rust-lang/rust/commit/c196097e588b05e86b5ce6de992b2a6e6a7027bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c196097e588b05e86b5ce6de992b2a6e6a7027bd/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da573206f87b5510de4b0ee1a9c044127e409bd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/da573206f87b5510de4b0ee1a9c044127e409bd3", "html_url": "https://github.com/rust-lang/rust/commit/da573206f87b5510de4b0ee1a9c044127e409bd3"}], "stats": {"total": 154, "additions": 2, "deletions": 152}, "files": [{"sha": "6c175ff4247cadf6e90aa97aa9532dbb45f04f51", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c196097e588b05e86b5ce6de992b2a6e6a7027bd/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c196097e588b05e86b5ce6de992b2a6e6a7027bd/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=c196097e588b05e86b5ce6de992b2a6e6a7027bd", "patch": "@@ -698,7 +698,6 @@ fn link_natively(sess: &Session,\n     }\n \n     if sess.opts.target_triple.triple() == \"wasm32-unknown-unknown\" {\n-        wasm::rewrite_imports(&out_filename, &codegen_results.crate_info.wasm_imports);\n         wasm::add_producer_section(\n             &out_filename,\n             &sess.edition().to_string(),"}, {"sha": "f90bb89fbe87d66c6f8516af5a32508b3b5ba43b", "filename": "src/librustc_codegen_llvm/back/wasm.rs", "status": "modified", "additions": 0, "deletions": 126, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/c196097e588b05e86b5ce6de992b2a6e6a7027bd/src%2Flibrustc_codegen_llvm%2Fback%2Fwasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c196097e588b05e86b5ce6de992b2a6e6a7027bd/src%2Flibrustc_codegen_llvm%2Fback%2Fwasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwasm.rs?ref=c196097e588b05e86b5ce6de992b2a6e6a7027bd", "patch": "@@ -2,116 +2,11 @@ use std::fs;\n use std::path::Path;\n use std::str;\n \n-use rustc_data_structures::fx::FxHashMap;\n use serialize::leb128;\n \n // https://webassembly.github.io/spec/core/binary/modules.html#binary-importsec\n-const WASM_IMPORT_SECTION_ID: u8 = 2;\n const WASM_CUSTOM_SECTION_ID: u8 = 0;\n \n-const WASM_EXTERNAL_KIND_FUNCTION: u8 = 0;\n-const WASM_EXTERNAL_KIND_TABLE: u8 = 1;\n-const WASM_EXTERNAL_KIND_MEMORY: u8 = 2;\n-const WASM_EXTERNAL_KIND_GLOBAL: u8 = 3;\n-\n-/// Rewrite the module imports are listed from in a wasm module given the field\n-/// name to module name mapping in `import_map`.\n-///\n-/// LLVM 6 which we're using right now doesn't have the ability to configure the\n-/// module a wasm symbol is import from. Rather all imported symbols come from\n-/// the bland `\"env\"` module unconditionally. Furthermore we'd *also* need\n-/// support in LLD for preserving these import modules, which it unfortunately\n-/// currently does not.\n-///\n-/// This function is intended as a hack for now where we manually rewrite the\n-/// wasm output by LLVM to have the correct import modules listed. The\n-/// `#[link(wasm_import_module = \"...\")]` attribute in Rust translates to the\n-/// module that each symbol is imported from, so here we manually go through the\n-/// wasm file, decode it, rewrite imports, and then rewrite the wasm module.\n-///\n-/// Support for this was added to LLVM in\n-/// https://github.com/llvm-mirror/llvm/commit/0f32e1365, although support still\n-/// needs to be added, tracked at https://bugs.llvm.org/show_bug.cgi?id=37168\n-pub fn rewrite_imports(path: &Path, import_map: &FxHashMap<String, String>) {\n-    if import_map.is_empty() {\n-        return\n-    }\n-\n-    let wasm = fs::read(path).expect(\"failed to read wasm output\");\n-    let mut ret = WasmEncoder::new();\n-    ret.data.extend(&wasm[..8]);\n-\n-    // skip the 8 byte wasm/version header\n-    for (id, raw) in WasmSections(WasmDecoder::new(&wasm[8..])) {\n-        ret.byte(id);\n-        if id == WASM_IMPORT_SECTION_ID {\n-            info!(\"rewriting import section\");\n-            let data = rewrite_import_section(\n-                &mut WasmDecoder::new(raw),\n-                import_map,\n-            );\n-            ret.bytes(&data);\n-        } else {\n-            info!(\"carry forward section {}, {} bytes long\", id, raw.len());\n-            ret.bytes(raw);\n-        }\n-    }\n-\n-    fs::write(path, &ret.data).expect(\"failed to write wasm output\");\n-\n-    fn rewrite_import_section(\n-        wasm: &mut WasmDecoder<'_>,\n-        import_map: &FxHashMap<String, String>,\n-    )\n-        -> Vec<u8>\n-    {\n-        let mut dst = WasmEncoder::new();\n-        let n = wasm.u32();\n-        dst.u32(n);\n-        info!(\"rewriting {} imports\", n);\n-        for _ in 0..n {\n-            rewrite_import_entry(wasm, &mut dst, import_map);\n-        }\n-        return dst.data\n-    }\n-\n-    fn rewrite_import_entry(wasm: &mut WasmDecoder<'_>,\n-                            dst: &mut WasmEncoder,\n-                            import_map: &FxHashMap<String, String>) {\n-        // More info about the binary format here is available at:\n-        // https://webassembly.github.io/spec/core/binary/modules.html#import-section\n-        //\n-        // Note that you can also find the whole point of existence of this\n-        // function here, where we map the `module` name to a different one if\n-        // we've got one listed.\n-        let module = wasm.str();\n-        let field = wasm.str();\n-        let new_module = if module == \"env\" {\n-            import_map.get(field).map(|s| &**s).unwrap_or(module)\n-        } else {\n-            module\n-        };\n-        info!(\"import rewrite ({} => {}) / {}\", module, new_module, field);\n-        dst.str(new_module);\n-        dst.str(field);\n-        let kind = wasm.byte();\n-        dst.byte(kind);\n-        match kind {\n-            WASM_EXTERNAL_KIND_FUNCTION => dst.u32(wasm.u32()),\n-            WASM_EXTERNAL_KIND_TABLE => {\n-                dst.byte(wasm.byte()); // element_type\n-                dst.limits(wasm.limits());\n-            }\n-            WASM_EXTERNAL_KIND_MEMORY => dst.limits(wasm.limits()),\n-            WASM_EXTERNAL_KIND_GLOBAL => {\n-                dst.byte(wasm.byte()); // content_type\n-                dst.bool(wasm.bool()); // mutable\n-            }\n-            b => panic!(\"unknown kind: {}\", b),\n-        }\n-    }\n-}\n-\n /// Adds or augment the existing `producers` section to encode information about\n /// the Rust compiler used to produce the wasm file.\n pub fn add_producer_section(\n@@ -266,15 +161,6 @@ impl<'a> WasmDecoder<'a> {\n         let len = self.u32();\n         str::from_utf8(self.skip(len as usize)).unwrap()\n     }\n-\n-    fn bool(&mut self) -> bool {\n-        self.byte() == 1\n-    }\n-\n-    fn limits(&mut self) -> (u32, Option<u32>) {\n-        let has_max = self.bool();\n-        (self.u32(), if has_max { Some(self.u32()) } else { None })\n-    }\n }\n \n struct WasmEncoder {\n@@ -302,16 +188,4 @@ impl WasmEncoder {\n     fn str(&mut self, val: &str) {\n         self.bytes(val.as_bytes())\n     }\n-\n-    fn bool(&mut self, b: bool) {\n-        self.byte(b as u8);\n-    }\n-\n-    fn limits(&mut self, limits: (u32, Option<u32>)) {\n-        self.bool(limits.1.is_some());\n-        self.u32(limits.0);\n-        if let Some(c) = limits.1 {\n-            self.u32(c);\n-        }\n-    }\n }"}, {"sha": "39ce15e4772967b9e4512738022deef64f54ad47", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c196097e588b05e86b5ce6de992b2a6e6a7027bd/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c196097e588b05e86b5ce6de992b2a6e6a7027bd/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=c196097e588b05e86b5ce6de992b2a6e6a7027bd", "patch": "@@ -16,7 +16,7 @@\n use crate::{ModuleCodegen, ModuleKind, CachedModuleCodegen};\n \n use rustc::dep_graph::cgu_reuse_tracker::CguReuse;\n-use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::middle::lang_items::StartFnLangItem;\n use rustc::middle::weak_lang_items;\n use rustc::mir::mono::{Stats, CodegenUnitNameBuilder};\n@@ -816,21 +816,11 @@ impl CrateInfo {\n             used_crates_dynamic: cstore::used_crates(tcx, LinkagePreference::RequireDynamic),\n             used_crates_static: cstore::used_crates(tcx, LinkagePreference::RequireStatic),\n             used_crate_source: Default::default(),\n-            wasm_imports: Default::default(),\n             lang_item_to_crate: Default::default(),\n             missing_lang_items: Default::default(),\n         };\n         let lang_items = tcx.lang_items();\n \n-        let load_wasm_items = tcx.sess.crate_types.borrow()\n-            .iter()\n-            .any(|c| *c != config::CrateType::Rlib) &&\n-            tcx.sess.opts.target_triple.triple() == \"wasm32-unknown-unknown\";\n-\n-        if load_wasm_items {\n-            info.load_wasm_imports(tcx, LOCAL_CRATE);\n-        }\n-\n         let crates = tcx.crates();\n \n         let n_crates = crates.len();\n@@ -858,9 +848,6 @@ impl CrateInfo {\n             if tcx.is_no_builtins(cnum) {\n                 info.is_no_builtins.insert(cnum);\n             }\n-            if load_wasm_items {\n-                info.load_wasm_imports(tcx, cnum);\n-            }\n             let missing = tcx.missing_lang_items(cnum);\n             for &item in missing.iter() {\n                 if let Ok(id) = lang_items.require(item) {\n@@ -879,15 +866,6 @@ impl CrateInfo {\n \n         return info\n     }\n-\n-    fn load_wasm_imports(&mut self, tcx: TyCtxt<'_, '_, '_>, cnum: CrateNum) {\n-        self.wasm_imports.extend(tcx.wasm_import_module_map(cnum).iter().map(|(&id, module)| {\n-            let instance = Instance::mono(tcx, id);\n-            let import_name = tcx.symbol_name(instance);\n-\n-            (import_name.to_string(), module.clone())\n-        }));\n-    }\n }\n \n fn is_codegened_item(tcx: TyCtxt<'_, '_, '_>, id: DefId) -> bool {"}, {"sha": "f38b22aa0417129d342e03a1ffae6bafa8fd4fec", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c196097e588b05e86b5ce6de992b2a6e6a7027bd/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c196097e588b05e86b5ce6de992b2a6e6a7027bd/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=c196097e588b05e86b5ce6de992b2a6e6a7027bd", "patch": "@@ -138,7 +138,6 @@ pub struct CrateInfo {\n     pub used_crate_source: FxHashMap<CrateNum, Lrc<CrateSource>>,\n     pub used_crates_static: Vec<(CrateNum, LibSource)>,\n     pub used_crates_dynamic: Vec<(CrateNum, LibSource)>,\n-    pub wasm_imports: FxHashMap<String, String>,\n     pub lang_item_to_crate: FxHashMap<LangItem, CrateNum>,\n     pub missing_lang_items: FxHashMap<CrateNum, Vec<LangItem>>,\n }"}, {"sha": "38ad31bde8ff681d862dc0f96930a5dd9b7a472e", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=c196097e588b05e86b5ce6de992b2a6e6a7027bd", "patch": "@@ -1 +1 @@\n-Subproject commit 73a75d35b9776d56160fa3200aca4a970ae49b60\n+Subproject commit 38ad31bde8ff681d862dc0f96930a5dd9b7a472e"}]}