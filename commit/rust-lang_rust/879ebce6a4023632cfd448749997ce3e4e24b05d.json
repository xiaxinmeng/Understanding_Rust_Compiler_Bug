{"sha": "879ebce6a4023632cfd448749997ce3e4e24b05d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3OWViY2U2YTQwMjM2MzJjZmQ0NDg3NDk5OTdjZTNlNGUyNGIwNWQ=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-07T17:17:33Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:47Z"}, "message": "libcollections: use unboxed closures", "tree": {"sha": "5ea38f68d4b2dcf2bf75c826271f935d87727df1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ea38f68d4b2dcf2bf75c826271f935d87727df1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/879ebce6a4023632cfd448749997ce3e4e24b05d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/879ebce6a4023632cfd448749997ce3e4e24b05d", "html_url": "https://github.com/rust-lang/rust/commit/879ebce6a4023632cfd448749997ce3e4e24b05d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/879ebce6a4023632cfd448749997ce3e4e24b05d/comments", "author": null, "committer": null, "parents": [{"sha": "9b075bcf3ffef3f11d8401b55feaa02c1e6553d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b075bcf3ffef3f11d8401b55feaa02c1e6553d2", "html_url": "https://github.com/rust-lang/rust/commit/9b075bcf3ffef3f11d8401b55feaa02c1e6553d2"}], "stats": {"total": 44, "additions": 32, "deletions": 12}, "files": [{"sha": "3346e55158a2a178b3db99b6387de9563333a84d", "filename": "src/libcollections/bench.rs", "status": "modified", "additions": 32, "deletions": 12, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/879ebce6a4023632cfd448749997ce3e4e24b05d/src%2Flibcollections%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879ebce6a4023632cfd448749997ce3e4e24b05d/src%2Flibcollections%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbench.rs?ref=879ebce6a4023632cfd448749997ce3e4e24b05d", "patch": "@@ -13,9 +13,14 @@ use std::rand;\n use std::rand::Rng;\n use test::Bencher;\n \n-pub fn insert_rand_n<M>(n: uint, map: &mut M, b: &mut Bencher,\n-                        insert: |&mut M, uint|,\n-                        remove: |&mut M, uint|) {\n+pub fn insert_rand_n<M, I, R>(n: uint,\n+                              map: &mut M,\n+                              b: &mut Bencher,\n+                              mut insert: I,\n+                              mut remove: R) where\n+    I: FnMut(&mut M, uint),\n+    R: FnMut(&mut M, uint),\n+{\n     // setup\n     let mut rng = rand::weak_rng();\n \n@@ -31,9 +36,14 @@ pub fn insert_rand_n<M>(n: uint, map: &mut M, b: &mut Bencher,\n     })\n }\n \n-pub fn insert_seq_n<M>(n: uint, map: &mut M, b: &mut Bencher,\n-                       insert: |&mut M, uint|,\n-                       remove: |&mut M, uint|) {\n+pub fn insert_seq_n<M, I, R>(n: uint,\n+                             map: &mut M,\n+                             b: &mut Bencher,\n+                             mut insert: I,\n+                             mut remove: R) where\n+    I: FnMut(&mut M, uint),\n+    R: FnMut(&mut M, uint),\n+{\n     // setup\n     for i in range(0u, n) {\n         insert(map, i * 2);\n@@ -48,9 +58,14 @@ pub fn insert_seq_n<M>(n: uint, map: &mut M, b: &mut Bencher,\n     })\n }\n \n-pub fn find_rand_n<M, T>(n: uint, map: &mut M, b: &mut Bencher,\n-                         insert: |&mut M, uint|,\n-                         find: |&M, uint| -> T) {\n+pub fn find_rand_n<M, T, I, F>(n: uint,\n+                               map: &mut M,\n+                               b: &mut Bencher,\n+                               mut insert: I,\n+                               mut find: F) where\n+    I: FnMut(&mut M, uint),\n+    F: FnMut(&M, uint) -> T,\n+{\n     // setup\n     let mut rng = rand::weak_rng();\n     let mut keys = Vec::from_fn(n, |_| rng.gen::<uint>() % n);\n@@ -70,9 +85,14 @@ pub fn find_rand_n<M, T>(n: uint, map: &mut M, b: &mut Bencher,\n     })\n }\n \n-pub fn find_seq_n<M, T>(n: uint, map: &mut M, b: &mut Bencher,\n-                        insert: |&mut M, uint|,\n-                        find: |&M, uint| -> T) {\n+pub fn find_seq_n<M, T, I, F>(n: uint,\n+                              map: &mut M,\n+                              b: &mut Bencher,\n+                              mut insert: I,\n+                              mut find: F) where\n+    I: FnMut(&mut M, uint),\n+    F: FnMut(&M, uint) -> T,\n+{\n     // setup\n     for i in range(0u, n) {\n         insert(map, i);"}]}