{"sha": "1a19309d9121f68568c83b58bcc316112e63a966", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMTkzMDlkOTEyMWY2ODU2OGM4M2I1OGJjYzMxNjExMmU2M2E5NjY=", "commit": {"author": {"name": "Benjamin Kircher", "email": "benjamin.kircher@gmail.com", "date": "2012-05-01T02:55:19Z"}, "committer": {"name": "Benjamin Kircher", "email": "benjamin.kircher@gmail.com", "date": "2012-05-01T02:55:19Z"}, "message": "std: Fix example in getopts module docs\n\nIssue #1833.", "tree": {"sha": "5821bef4b33b6b7d21c5b4c5ca411364a50320a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5821bef4b33b6b7d21c5b4c5ca411364a50320a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a19309d9121f68568c83b58bcc316112e63a966", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a19309d9121f68568c83b58bcc316112e63a966", "html_url": "https://github.com/rust-lang/rust/commit/1a19309d9121f68568c83b58bcc316112e63a966", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a19309d9121f68568c83b58bcc316112e63a966/comments", "author": {"login": "bkircher", "id": 536464, "node_id": "MDQ6VXNlcjUzNjQ2NA==", "avatar_url": "https://avatars.githubusercontent.com/u/536464?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkircher", "html_url": "https://github.com/bkircher", "followers_url": "https://api.github.com/users/bkircher/followers", "following_url": "https://api.github.com/users/bkircher/following{/other_user}", "gists_url": "https://api.github.com/users/bkircher/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkircher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkircher/subscriptions", "organizations_url": "https://api.github.com/users/bkircher/orgs", "repos_url": "https://api.github.com/users/bkircher/repos", "events_url": "https://api.github.com/users/bkircher/events{/privacy}", "received_events_url": "https://api.github.com/users/bkircher/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bkircher", "id": 536464, "node_id": "MDQ6VXNlcjUzNjQ2NA==", "avatar_url": "https://avatars.githubusercontent.com/u/536464?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkircher", "html_url": "https://github.com/bkircher", "followers_url": "https://api.github.com/users/bkircher/followers", "following_url": "https://api.github.com/users/bkircher/following{/other_user}", "gists_url": "https://api.github.com/users/bkircher/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkircher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkircher/subscriptions", "organizations_url": "https://api.github.com/users/bkircher/orgs", "repos_url": "https://api.github.com/users/bkircher/repos", "events_url": "https://api.github.com/users/bkircher/events{/privacy}", "received_events_url": "https://api.github.com/users/bkircher/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22254c3b480df40d4d3ca48a36a0f7672b8e19a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/22254c3b480df40d4d3ca48a36a0f7672b8e19a5", "html_url": "https://github.com/rust-lang/rust/commit/22254c3b480df40d4d3ca48a36a0f7672b8e19a5"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "975e7089481e7430a73aa3f9448037dd86fc9c3c", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1a19309d9121f68568c83b58bcc316112e63a966/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a19309d9121f68568c83b58bcc316112e63a966/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=1a19309d9121f68568c83b58bcc316112e63a966", "patch": "@@ -19,27 +19,45 @@ The following example shows simple command line parsing for an application\n that requires an input file to be specified, accepts an optional output file\n name following -o, and accepts both -h and --help as optional flags.\n \n+    use std;\n+    import std::getopts::{optopt,optflag,getopts,opt_present,opt_maybe_str,\n+        fail_str};\n+\n+    fn do_work(in: str, out: option<str>) {\n+        // ...\n+    }\n+\n+    fn print_usage(program: str) {\n+        io::println(\\\"Usage: \\\" + program + \\\" [options]\\\");\n+        io::println(\\\"-o\\t\\tOutput\\\");\n+        io::println(\\\"-h --help\\tUsage\\\");\n+    }\n+\n     fn main(args: [str]) {\n+        check vec::is_not_empty(args);\n+\n+        let program : str = vec::head(args);\n+\n         let opts = [\n             optopt(\\\"o\\\"),\n             optflag(\\\"h\\\"),\n             optflag(\\\"help\\\")\n         ];\n-        let match = alt getopts(vec::shift(args), opts) {\n-          ok(m) { m }\n-          err(f) { fail fail_str(f) }\n+        let match = alt getopts(vec::tail(args), opts) {\n+            result::ok(m) { m }\n+            result::err(f) { fail fail_str(f) }\n         };\n         if opt_present(match, \\\"h\\\") || opt_present(match, \\\"help\\\") {\n-            print_usage();\n+            print_usage(program);\n             ret;\n         }\n         let output = opt_maybe_str(match, \\\"o\\\");\n-        let input = if !vec::is_empty(match.free) {\n+        let input = if vec::is_not_empty(match.free) {\n             match.free[0]\n         } else {\n-            print_usage();\n+            print_usage(program);\n             ret;\n-        }\n+        };\n         do_work(input, output);\n     }\n "}]}