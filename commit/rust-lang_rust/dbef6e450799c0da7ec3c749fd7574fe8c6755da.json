{"sha": "dbef6e450799c0da7ec3c749fd7574fe8c6755da", "node_id": "C_kwDOAAsO6NoAKGRiZWY2ZTQ1MDc5OWMwZGE3ZWMzYzc0OWZkNzU3NGZlOGM2NzU1ZGE", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-06-02T17:42:29Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-06-14T14:08:18Z"}, "message": "address review", "tree": {"sha": "81b490a678a4ab9a0e3871a45abc9a8875e454c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81b490a678a4ab9a0e3871a45abc9a8875e454c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbef6e450799c0da7ec3c749fd7574fe8c6755da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbef6e450799c0da7ec3c749fd7574fe8c6755da", "html_url": "https://github.com/rust-lang/rust/commit/dbef6e450799c0da7ec3c749fd7574fe8c6755da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbef6e450799c0da7ec3c749fd7574fe8c6755da/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c95a3db2ac54c94b037e0b1b84d29b12ccf8e7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c95a3db2ac54c94b037e0b1b84d29b12ccf8e7a", "html_url": "https://github.com/rust-lang/rust/commit/5c95a3db2ac54c94b037e0b1b84d29b12ccf8e7a"}], "stats": {"total": 173, "additions": 80, "deletions": 93}, "files": [{"sha": "eafddf8008042255111eff2358d46757d2f53588", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbef6e450799c0da7ec3c749fd7574fe8c6755da/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/dbef6e450799c0da7ec3c749fd7574fe8c6755da/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=dbef6e450799c0da7ec3c749fd7574fe8c6755da", "patch": "@@ -358,7 +358,6 @@ dependencies = [\n  \"libgit2-sys\",\n  \"log\",\n  \"memchr\",\n- \"num_cpus\",\n  \"opener\",\n  \"openssl\",\n  \"os_info\","}, {"sha": "3eeb0138b37f7b06dcfd14cf62811206c30e668e", "filename": "compiler/rustc_const_eval/src/const_eval/error.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbef6e450799c0da7ec3c749fd7574fe8c6755da/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef6e450799c0da7ec3c749fd7574fe8c6755da/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs?ref=dbef6e450799c0da7ec3c749fd7574fe8c6755da", "patch": "@@ -140,6 +140,7 @@ impl<'tcx> ConstEvalErr<'tcx> {\n     ///\n     /// If `lint_root.is_some()` report it as a lint, else report it as a hard error.\n     /// (Except that for some errors, we ignore all that -- see `must_error` below.)\n+    #[instrument(skip(self, tcx, decorate, lint_root), level = \"debug\")]\n     fn struct_generic(\n         &self,\n         tcx: TyCtxtAt<'tcx>,\n@@ -190,6 +191,7 @@ impl<'tcx> ConstEvalErr<'tcx> {\n             decorate(err);\n         };\n \n+        debug!(\"self.error: {:?}\", self.error);\n         // Special handling for certain errors\n         match &self.error {\n             // Don't emit a new diagnostic for these errors"}, {"sha": "793f02a8adefd53da3a0647ff159d6efa04d3fac", "filename": "compiler/rustc_const_eval/src/const_eval/mod.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/dbef6e450799c0da7ec3c749fd7574fe8c6755da/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef6e450799c0da7ec3c749fd7574fe8c6755da/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs?ref=dbef6e450799c0da7ec3c749fd7574fe8c6755da", "patch": "@@ -24,12 +24,6 @@ pub use fn_queries::*;\n pub use machine::*;\n pub(crate) use valtrees::{const_to_valtree_inner, valtree_to_const_value};\n \n-pub(crate) enum ValTreeCreationError {\n-    NonSupportedType,\n-    Other,\n-}\n-pub(crate) type ValTreeCreationResult<'tcx> = Result<ty::ValTree<'tcx>, ValTreeCreationError>;\n-\n pub(crate) fn const_caller_location(\n     tcx: TyCtxt<'_>,\n     (file, line, col): (Symbol, u32, u32),\n@@ -44,6 +38,16 @@ pub(crate) fn const_caller_location(\n     ConstValue::Scalar(Scalar::from_maybe_pointer(loc_place.ptr, &tcx))\n }\n \n+// We forbid type-level constants that contain more than `VALTREE_MAX_NODES` nodes.\n+const VALTREE_MAX_NODES: usize = 100000;\n+\n+pub(crate) enum ValTreeCreationError {\n+    NodesOverflow,\n+    NonSupportedType,\n+    Other,\n+}\n+pub(crate) type ValTreeCreationResult<'tcx> = Result<ty::ValTree<'tcx>, ValTreeCreationError>;\n+\n /// Evaluates a constant and turns it into a type-level constant value.\n pub(crate) fn eval_to_valtree<'tcx>(\n     tcx: TyCtxt<'tcx>,\n@@ -62,11 +66,28 @@ pub(crate) fn eval_to_valtree<'tcx>(\n     let place = ecx.raw_const_to_mplace(const_alloc).unwrap();\n     debug!(?place);\n \n-    let valtree_result = const_to_valtree_inner(&ecx, &place);\n+    let mut num_nodes = 0;\n+    let valtree_result = const_to_valtree_inner(&ecx, &place, &mut num_nodes);\n \n     match valtree_result {\n         Ok(valtree) => Ok(Some(valtree)),\n-        Err(_) => Ok(None),\n+        Err(err) => {\n+            let did = cid.instance.def_id();\n+            let s = cid.display(tcx);\n+            match err {\n+                ValTreeCreationError::NodesOverflow => {\n+                    let msg = format!(\"maximum number of nodes exceeded in constant {}\", &s);\n+                    let mut diag = match tcx.hir().span_if_local(did) {\n+                        Some(span) => tcx.sess.struct_span_err(span, &msg),\n+                        None => tcx.sess.struct_err(&msg),\n+                    };\n+                    diag.emit();\n+\n+                    Ok(None)\n+                }\n+                ValTreeCreationError::NonSupportedType | ValTreeCreationError::Other => Ok(None),\n+            }\n+        }\n     }\n }\n \n@@ -75,7 +96,7 @@ pub(crate) fn eval_to_valtree<'tcx>(\n pub(crate) fn try_destructure_const<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     const_: ty::Const<'tcx>,\n-) -> Option<mir::DestructuredConst<'tcx>> {\n+) -> Option<ty::DestructuredConst<'tcx>> {\n     if let ty::ConstKind::Value(valtree) = const_.val() {\n         let branches = match valtree {\n             ty::ValTree::Branch(b) => b,\n@@ -141,7 +162,7 @@ pub(crate) fn try_destructure_const<'tcx>(\n \n         let fields = tcx.arena.alloc_from_iter(fields.into_iter());\n \n-        Some(mir::DestructuredConst { variant, fields })\n+        Some(ty::DestructuredConst { variant, fields })\n     } else {\n         None\n     }"}, {"sha": "4137e351344bcde4c748cf1a792a8cadc71e6416", "filename": "compiler/rustc_const_eval/src/const_eval/valtrees.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/dbef6e450799c0da7ec3c749fd7574fe8c6755da/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef6e450799c0da7ec3c749fd7574fe8c6755da/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs?ref=dbef6e450799c0da7ec3c749fd7574fe8c6755da", "patch": "@@ -1,6 +1,6 @@\n use super::eval_queries::{mk_eval_cx, op_to_const};\n use super::machine::CompileTimeEvalContext;\n-use super::{ValTreeCreationError, ValTreeCreationResult};\n+use super::{ValTreeCreationError, ValTreeCreationResult, VALTREE_MAX_NODES};\n use crate::interpret::{\n     intern_const_alloc_recursive, ConstValue, ImmTy, Immediate, InternKind, MemPlaceMeta,\n     MemoryKind, PlaceTy, Scalar, ScalarMaybeUninit,\n@@ -16,6 +16,7 @@ fn branches<'tcx>(\n     place: &MPlaceTy<'tcx>,\n     n: usize,\n     variant: Option<VariantIdx>,\n+    num_nodes: &mut usize,\n ) -> ValTreeCreationResult<'tcx> {\n     let place = match variant {\n         Some(variant) => ecx.mplace_downcast(&place, variant).unwrap(),\n@@ -27,7 +28,7 @@ fn branches<'tcx>(\n     let mut fields = Vec::with_capacity(n);\n     for i in 0..n {\n         let field = ecx.mplace_field(&place, i).unwrap();\n-        let valtree = const_to_valtree_inner(ecx, &field)?;\n+        let valtree = const_to_valtree_inner(ecx, &field, num_nodes)?;\n         fields.push(Some(valtree));\n     }\n \n@@ -39,13 +40,19 @@ fn branches<'tcx>(\n         .collect::<Option<Vec<_>>>()\n         .expect(\"should have already checked for errors in ValTree creation\");\n \n+    // Have to account for ZSTs here\n+    if branches.len() == 0 {\n+        *num_nodes += 1;\n+    }\n+\n     Ok(ty::ValTree::Branch(ecx.tcx.arena.alloc_from_iter(branches)))\n }\n \n #[instrument(skip(ecx), level = \"debug\")]\n fn slice_branches<'tcx>(\n     ecx: &CompileTimeEvalContext<'tcx, 'tcx>,\n     place: &MPlaceTy<'tcx>,\n+    num_nodes: &mut usize,\n ) -> ValTreeCreationResult<'tcx> {\n     let n = place\n         .len(&ecx.tcx.tcx)\n@@ -54,7 +61,7 @@ fn slice_branches<'tcx>(\n     let mut elems = Vec::with_capacity(n as usize);\n     for i in 0..n {\n         let place_elem = ecx.mplace_index(place, i).unwrap();\n-        let valtree = const_to_valtree_inner(ecx, &place_elem)?;\n+        let valtree = const_to_valtree_inner(ecx, &place_elem, num_nodes)?;\n         elems.push(valtree);\n     }\n \n@@ -65,19 +72,26 @@ fn slice_branches<'tcx>(\n pub(crate) fn const_to_valtree_inner<'tcx>(\n     ecx: &CompileTimeEvalContext<'tcx, 'tcx>,\n     place: &MPlaceTy<'tcx>,\n+    num_nodes: &mut usize,\n ) -> ValTreeCreationResult<'tcx> {\n     let ty = place.layout.ty;\n     debug!(\"ty kind: {:?}\", ty.kind());\n \n+    if *num_nodes >= VALTREE_MAX_NODES {\n+        return Err(ValTreeCreationError::NodesOverflow);\n+    }\n+\n     match ty.kind() {\n         ty::FnDef(..) => {\n+            *num_nodes += 1;\n             Ok(ty::ValTree::zst())\n         }\n         ty::Bool | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Char => {\n             let Ok(val) = ecx.read_immediate(&place.into()) else {\n                 return Err(ValTreeCreationError::Other);\n             };\n             let val = val.to_scalar().unwrap();\n+            *num_nodes += 1;\n \n             Ok(ty::ValTree::Leaf(val.assert_int()))\n         }\n@@ -94,11 +108,11 @@ pub(crate) fn const_to_valtree_inner<'tcx>(\n             };\n             debug!(?derefd_place);\n \n-            const_to_valtree_inner(ecx, &derefd_place)\n+            const_to_valtree_inner(ecx, &derefd_place, num_nodes)\n         }\n \n         ty::Str | ty::Slice(_) | ty::Array(_, _) => {\n-            slice_branches(ecx, place)\n+            slice_branches(ecx, place, num_nodes)\n         }\n         // Trait objects are not allowed in type level constants, as we have no concept for\n         // resolving their backing type, even if we can do that at const eval time. We may\n@@ -107,7 +121,7 @@ pub(crate) fn const_to_valtree_inner<'tcx>(\n         ty::Dynamic(..) => Err(ValTreeCreationError::NonSupportedType),\n \n         ty::Tuple(elem_tys) => {\n-            branches(ecx, place, elem_tys.len(), None)\n+            branches(ecx, place, elem_tys.len(), None, num_nodes)\n         }\n \n         ty::Adt(def, _) => {\n@@ -120,7 +134,7 @@ pub(crate) fn const_to_valtree_inner<'tcx>(\n             let Ok((_, variant)) = ecx.read_discriminant(&place.into()) else {\n                 return Err(ValTreeCreationError::Other);\n             };\n-            branches(ecx, place, def.variant(variant).fields.len(), def.is_enum().then_some(variant))\n+            branches(ecx, place, def.variant(variant).fields.len(), def.is_enum().then_some(variant), num_nodes)\n         }\n \n         ty::Never"}, {"sha": "9284d240037f0c662ef452f58b9a3d1a589f98e3", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbef6e450799c0da7ec3c749fd7574fe8c6755da/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef6e450799c0da7ec3c749fd7574fe8c6755da/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=dbef6e450799c0da7ec3c749fd7574fe8c6755da", "patch": "@@ -194,7 +194,7 @@ impl<'tcx> TyCtxtAt<'tcx> {\n impl<'tcx> TyCtxt<'tcx> {\n     /// Destructure a type-level constant ADT or array into its variant index and its field values.\n     /// Panics if the destructuring fails, use `try_destructure_const` for fallible version.\n-    pub fn destructure_const(self, const_: ty::Const<'tcx>) -> mir::DestructuredConst<'tcx> {\n+    pub fn destructure_const(self, const_: ty::Const<'tcx>) -> ty::DestructuredConst<'tcx> {\n         self.try_destructure_const(const_).unwrap()\n     }\n "}, {"sha": "146ae45e46898ffaae61e9fffd9f37ebe759d50c", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbef6e450799c0da7ec3c749fd7574fe8c6755da/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef6e450799c0da7ec3c749fd7574fe8c6755da/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=dbef6e450799c0da7ec3c749fd7574fe8c6755da", "patch": "@@ -78,7 +78,6 @@ impl<'tcx> ConstValue<'tcx> {\n         Some(self.try_to_scalar()?.assert_int())\n     }\n \n-    #[inline(always)]\n     pub fn try_to_bits(&self, size: Size) -> Option<u128> {\n         self.try_to_scalar_int()?.to_bits(size).ok()\n     }"}, {"sha": "caa1d4cd34eee73f36f65a2c6595a4fe92cb1ed5", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dbef6e450799c0da7ec3c749fd7574fe8c6755da/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef6e450799c0da7ec3c749fd7574fe8c6755da/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=dbef6e450799c0da7ec3c749fd7574fe8c6755da", "patch": "@@ -967,26 +967,26 @@ rustc_queries! {\n     query eval_to_valtree(\n         key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>\n     ) -> EvalToValTreeResult<'tcx> {\n-        desc { \"evaluate type-level constant\" }\n+        desc { \"evaluating type-level constant\" }\n     }\n \n     /// Converts a type level constant value into `ConstValue`\n     query valtree_to_const_val(key: (Ty<'tcx>, ty::ValTree<'tcx>)) -> ConstValue<'tcx> {\n-        desc { \"convert type-level constant value to mir constant value\"}\n+        desc { \"converting type-level constant value to mir constant value\"}\n     }\n \n     /// Destructure a constant ADT or array into its variant index and its\n     /// field values or return `None` if constant is invalid.\n     ///\n     /// Use infallible `TyCtxt::destructure_const` when you know that constant is valid.\n-    query try_destructure_const(key: ty::Const<'tcx>) -> Option<mir::DestructuredConst<'tcx>> {\n-        desc { \"destructure type level constant\"}\n+    query try_destructure_const(key: ty::Const<'tcx>) -> Option<ty::DestructuredConst<'tcx>> {\n+        desc { \"destructuring type level constant\"}\n     }\n \n     /// Tries to destructure an `mir::ConstantKind` ADT or array into its variant index\n     /// and its field values.\n     query try_destructure_mir_constant(key: ty::ParamEnvAnd<'tcx, mir::ConstantKind<'tcx>>) -> Option<mir::DestructuredMirConstant<'tcx>> {\n-        desc { \"destructure mir constant\"}\n+        desc { \"destructuring mir constant\"}\n         remap_env_constness\n     }\n \n@@ -995,7 +995,7 @@ rustc_queries! {\n     query deref_mir_constant(\n         key: ty::ParamEnvAnd<'tcx, mir::ConstantKind<'tcx>>\n     ) -> mir::ConstantKind<'tcx> {\n-        desc { \"deref constant\" }\n+        desc { \"dereferencing mir constant\" }\n         remap_env_constness\n     }\n "}, {"sha": "a53583d8673f74cb713e93d32277f53ad200f059", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dbef6e450799c0da7ec3c749fd7574fe8c6755da/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef6e450799c0da7ec3c749fd7574fe8c6755da/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=dbef6e450799c0da7ec3c749fd7574fe8c6755da", "patch": "@@ -42,8 +42,8 @@ use rustc_query_system::ich::StableHashingContext;\n use rustc_session::cstore::CrateStoreDyn;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n-use rustc_target::abi::Align;\n pub use subst::*;\n+use rustc_target::abi::{Align, VariantIdx};\n pub use vtable::*;\n \n use std::fmt::Debug;\n@@ -2453,3 +2453,10 @@ pub struct FoundRelationships {\n     /// _>::AssocType = ?T`\n     pub output: bool,\n }\n+\n+/// The constituent parts of a type level constant of kind ADT or array.\n+#[derive(Copy, Clone, Debug, HashStable)]\n+pub struct DestructuredConst<'tcx> {\n+    pub variant: Option<VariantIdx>,\n+    pub fields: &'tcx [ty::Const<'tcx>],\n+}"}, {"sha": "7ae23d371e59f83f44c1d1a867947bd7148465f0", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbef6e450799c0da7ec3c749fd7574fe8c6755da/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef6e450799c0da7ec3c749fd7574fe8c6755da/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=dbef6e450799c0da7ec3c749fd7574fe8c6755da", "patch": "@@ -98,6 +98,7 @@ pub trait Printer<'tcx>: Sized {\n \n     // Defaults (should not be overridden):\n \n+    #[instrument(skip(self), level = \"debug\")]\n     fn default_print_def_path(\n         self,\n         def_id: DefId,"}, {"sha": "3028a57e11c7c9e879252665fbefef55e580b216", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbef6e450799c0da7ec3c749fd7574fe8c6755da/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef6e450799c0da7ec3c749fd7574fe8c6755da/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=dbef6e450799c0da7ec3c749fd7574fe8c6755da", "patch": "@@ -1460,9 +1460,7 @@ pub trait PrettyPrinter<'tcx>:\n                 return Ok(self);\n             }\n             // Aggregates, printed as array/tuple/struct/variant construction syntax.\n-            (ty::ValTree::Branch(_), ty::Array(..) | ty::Tuple(..) | ty::Adt(..))\n-                if !ty.has_param_types_or_consts() =>\n-            {\n+            (ty::ValTree::Branch(_), ty::Array(..) | ty::Tuple(..) | ty::Adt(..)) => {\n                 let Some(contents) = self.tcx().try_destructure_const(\n                     ty::Const::from_value(self.tcx(), valtree, ty)\n                 ) else {"}, {"sha": "0376b53ecc5fcbf06e73819cfe3ce8e3d0486355", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 2, "deletions": 56, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/dbef6e450799c0da7ec3c749fd7574fe8c6755da/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef6e450799c0da7ec3c749fd7574fe8c6755da/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=dbef6e450799c0da7ec3c749fd7574fe8c6755da", "patch": "@@ -1,9 +1,9 @@\n use crate::build;\n+pub(crate) use crate::build::expr::as_constant::lit_to_mir_constant;\n use crate::build::expr::as_place::PlaceBuilder;\n use crate::build::scope::DropKind;\n use crate::thir::constant::parse_float_into_scalar;\n use crate::thir::pattern::pat_from_hir;\n-use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n@@ -14,17 +14,14 @@ use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_middle::hir::place::PlaceBase as HirPlaceBase;\n use rustc_middle::middle::region;\n-use rustc_middle::mir::interpret::{\n-    Allocation, ConstValue, LitToConstError, LitToConstInput, Scalar,\n-};\n+use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::mir::*;\n use rustc_middle::thir::{BindingMode, Expr, ExprId, LintLevel, LocalVarId, PatKind, Thir};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeckResults};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_span::Symbol;\n-use rustc_target::abi::Size;\n use rustc_target::spec::abi::Abi;\n \n use super::lints;\n@@ -1096,57 +1093,6 @@ fn parse_float_into_constval<'tcx>(\n     parse_float_into_scalar(num, float_ty, neg).map(ConstValue::Scalar)\n }\n \n-#[instrument(skip(tcx, lit_input))]\n-pub(crate) fn lit_to_mir_constant<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    lit_input: LitToConstInput<'tcx>,\n-) -> Result<ConstantKind<'tcx>, LitToConstError> {\n-    let LitToConstInput { lit, ty, neg } = lit_input;\n-    let trunc = |n| {\n-        let param_ty = ty::ParamEnv::reveal_all().and(ty);\n-        let width = tcx.layout_of(param_ty).map_err(|_| LitToConstError::Reported)?.size;\n-        trace!(\"trunc {} with size {} and shift {}\", n, width.bits(), 128 - width.bits());\n-        let result = width.truncate(n);\n-        trace!(\"trunc result: {}\", result);\n-        Ok(ConstValue::Scalar(Scalar::from_uint(result, width)))\n-    };\n-\n-    let value = match (lit, &ty.kind()) {\n-        (ast::LitKind::Str(s, _), ty::Ref(_, inner_ty, _)) if inner_ty.is_str() => {\n-            let s = s.as_str();\n-            let allocation = Allocation::from_bytes_byte_aligned_immutable(s.as_bytes());\n-            let allocation = tcx.intern_const_alloc(allocation);\n-            ConstValue::Slice { data: allocation, start: 0, end: s.len() }\n-        }\n-        (ast::LitKind::ByteStr(data), ty::Ref(_, inner_ty, _))\n-            if matches!(inner_ty.kind(), ty::Slice(_)) =>\n-        {\n-            let allocation = Allocation::from_bytes_byte_aligned_immutable(data as &[u8]);\n-            let allocation = tcx.intern_const_alloc(allocation);\n-            ConstValue::Slice { data: allocation, start: 0, end: data.len() }\n-        }\n-        (ast::LitKind::ByteStr(data), ty::Ref(_, inner_ty, _)) if inner_ty.is_array() => {\n-            let id = tcx.allocate_bytes(data);\n-            ConstValue::Scalar(Scalar::from_pointer(id.into(), &tcx))\n-        }\n-        (ast::LitKind::Byte(n), ty::Uint(ty::UintTy::U8)) => {\n-            ConstValue::Scalar(Scalar::from_uint(*n, Size::from_bytes(1)))\n-        }\n-        (ast::LitKind::Int(n, _), ty::Uint(_)) | (ast::LitKind::Int(n, _), ty::Int(_)) => {\n-            trunc(if neg { (*n as i128).overflowing_neg().0 as u128 } else { *n })?\n-        }\n-        (ast::LitKind::Float(n, _), ty::Float(fty)) => {\n-            parse_float_into_constval(*n, *fty, neg).ok_or(LitToConstError::Reported)?\n-        }\n-        (ast::LitKind::Bool(b), ty::Bool) => ConstValue::Scalar(Scalar::from_bool(*b)),\n-        (ast::LitKind::Char(c), ty::Char) => ConstValue::Scalar(Scalar::from_char(*c)),\n-        (ast::LitKind::Err(_), _) => return Err(LitToConstError::Reported),\n-        _ => return Err(LitToConstError::TypeError),\n-    };\n-\n-    Ok(ConstantKind::Val(value, ty))\n-}\n-\n ///////////////////////////////////////////////////////////////////////////\n // Builder methods are broken up into modules, depending on what kind\n // of thing is being lowered. Note that they use the `unpack` macro"}, {"sha": "845be2ab264a610b989b5615805b815fed589516", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbef6e450799c0da7ec3c749fd7574fe8c6755da/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef6e450799c0da7ec3c749fd7574fe8c6755da/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=dbef6e450799c0da7ec3c749fd7574fe8c6755da", "patch": "@@ -503,7 +503,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 // deref pattern.\n                 _ => {\n                     if !pointee_ty.is_sized(tcx.at(span), param_env) {\n-                        // `tcx.deref_mirconstant()` below will ICE with an unsized type\n+                        // `tcx.deref_mir_constant()` below will ICE with an unsized type\n                         // (except slices, which are handled in a separate arm above).\n                         let msg = format!(\"cannot use unsized non-slice type `{}` in constant patterns\", pointee_ty);\n                         if self.include_lint_checks {"}, {"sha": "806c84152598f7007c7d751a2708ec33b0f4393c", "filename": "src/test/incremental/issue-54242.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbef6e450799c0da7ec3c749fd7574fe8c6755da/src%2Ftest%2Fincremental%2Fissue-54242.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef6e450799c0da7ec3c749fd7574fe8c6755da/src%2Ftest%2Fincremental%2Fissue-54242.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-54242.rs?ref=dbef6e450799c0da7ec3c749fd7574fe8c6755da", "patch": "@@ -14,7 +14,7 @@ impl Tr for str {\n     type Arr = [u8; 8];\n     #[cfg(cfail)]\n     type Arr = [u8; Self::C];\n-    //[cfail]~^ ERROR cycle detected when evaluate type-level constant\n+    //[cfail]~^ ERROR cycle detected when evaluating type-level constant\n }\n \n fn main() {}"}, {"sha": "46f02ce8a45337fc5a44f8fb52056992ea1958e3", "filename": "src/test/ui/consts/const-size_of-cycle.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbef6e450799c0da7ec3c749fd7574fe8c6755da/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbef6e450799c0da7ec3c749fd7574fe8c6755da/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr?ref=dbef6e450799c0da7ec3c749fd7574fe8c6755da", "patch": "@@ -1,4 +1,4 @@\n-error[E0391]: cycle detected when evaluate type-level constant\n+error[E0391]: cycle detected when evaluating type-level constant\n   --> $DIR/const-size_of-cycle.rs:4:17\n    |\n LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n@@ -17,7 +17,7 @@ LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n    = note: ...which requires computing layout of `Foo`...\n    = note: ...which requires computing layout of `[u8; _]`...\n    = note: ...which requires normalizing `[u8; _]`...\n-   = note: ...which again requires evaluate type-level constant, completing the cycle\n+   = note: ...which again requires evaluating type-level constant, completing the cycle\n note: cycle used when checking that `Foo` is well-formed\n   --> $DIR/const-size_of-cycle.rs:3:1\n    |"}, {"sha": "d93b451be453a2f6510a1f4229b576887ceeaf77", "filename": "src/test/ui/consts/issue-44415.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbef6e450799c0da7ec3c749fd7574fe8c6755da/src%2Ftest%2Fui%2Fconsts%2Fissue-44415.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef6e450799c0da7ec3c749fd7574fe8c6755da/src%2Ftest%2Fui%2Fconsts%2Fissue-44415.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-44415.rs?ref=dbef6e450799c0da7ec3c749fd7574fe8c6755da", "patch": "@@ -4,7 +4,7 @@ use std::intrinsics;\n \n struct Foo {\n     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n-    //~^ ERROR cycle detected when evaluate type-level constant\n+    //~^ ERROR cycle detected when evaluating type-level constant\n     x: usize,\n }\n "}, {"sha": "c085beb0ea5256a2a3a3d4fd9bbda3eb0ea2bba3", "filename": "src/test/ui/consts/issue-44415.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbef6e450799c0da7ec3c749fd7574fe8c6755da/src%2Ftest%2Fui%2Fconsts%2Fissue-44415.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbef6e450799c0da7ec3c749fd7574fe8c6755da/src%2Ftest%2Fui%2Fconsts%2Fissue-44415.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-44415.stderr?ref=dbef6e450799c0da7ec3c749fd7574fe8c6755da", "patch": "@@ -1,4 +1,4 @@\n-error[E0391]: cycle detected when evaluate type-level constant\n+error[E0391]: cycle detected when evaluating type-level constant\n   --> $DIR/issue-44415.rs:6:17\n    |\n LL |     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n@@ -17,7 +17,7 @@ LL |     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n    = note: ...which requires computing layout of `Foo`...\n    = note: ...which requires computing layout of `[u8; _]`...\n    = note: ...which requires normalizing `[u8; _]`...\n-   = note: ...which again requires evaluate type-level constant, completing the cycle\n+   = note: ...which again requires evaluating type-level constant, completing the cycle\n note: cycle used when checking that `Foo` is well-formed\n   --> $DIR/issue-44415.rs:5:1\n    |"}]}