{"sha": "8da560264e82a47811445cd0daa2617e52fddb9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkYTU2MDI2NGU4MmE0NzgxMTQ0NWNkMGRhYTI2MTdlNTJmZGRiOWQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-17T21:16:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-17T21:16:43Z"}, "message": "Merge #9623\n\n9623: internal: make it clearer where IO happens r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "de1fe979ebc2e6579dc6b9e7998a0023870fe8e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de1fe979ebc2e6579dc6b9e7998a0023870fe8e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8da560264e82a47811445cd0daa2617e52fddb9d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg80i7CRBK7hj4Ov3rIwAAz4wIAGh5CtW5vfHvQzSGs1YNMWGE\nALgc8gi3Q6sz5PfnXM9I+BNZj9IXWRoL9TFAFWEaSiWxHIg8pJxdQQcV46wvnLmF\nZrB7kLrp/xPNQZJMrr1TW4krtUFISocblP0O8B7Jjyi0x+dJRGajoAbBZKgYBdOD\nMNBbb+d7bHA5gTzZh4W4LrAJvQCQfcsWYIcTLEeviQH0Q+Claqr2ceqQIsIY6VbY\n4TruWWvn3Bnw1/6FQyMzcVb8IgJzTusSHQL2yGWItAA9C+2154+P0y/Pa8dEH/lr\nOLnYloMc6VF4rJVEt4gyEC+F+anEUEh165BXBsIxqvFXSPi499oIJ4MpjdvC+SU=\n=LXh8\n-----END PGP SIGNATURE-----\n", "payload": "tree de1fe979ebc2e6579dc6b9e7998a0023870fe8e9\nparent 398ae3e67ffedda98fbb7be668349fbbb7cdb8a4\nparent 8f3335f5fbe06505fa85538c7cd04eb87eae7ecf\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1626556603 +0000\ncommitter GitHub <noreply@github.com> 1626556603 +0000\n\nMerge #9623\n\n9623: internal: make it clearer where IO happens r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8da560264e82a47811445cd0daa2617e52fddb9d", "html_url": "https://github.com/rust-lang/rust/commit/8da560264e82a47811445cd0daa2617e52fddb9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8da560264e82a47811445cd0daa2617e52fddb9d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "398ae3e67ffedda98fbb7be668349fbbb7cdb8a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/398ae3e67ffedda98fbb7be668349fbbb7cdb8a4", "html_url": "https://github.com/rust-lang/rust/commit/398ae3e67ffedda98fbb7be668349fbbb7cdb8a4"}, {"sha": "8f3335f5fbe06505fa85538c7cd04eb87eae7ecf", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f3335f5fbe06505fa85538c7cd04eb87eae7ecf", "html_url": "https://github.com/rust-lang/rust/commit/8f3335f5fbe06505fa85538c7cd04eb87eae7ecf"}], "stats": {"total": 72, "additions": 47, "deletions": 25}, "files": [{"sha": "5bdc427f7390ac70d8eb48eedc303885359ff354", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8da560264e82a47811445cd0daa2617e52fddb9d/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8da560264e82a47811445cd0daa2617e52fddb9d/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=8da560264e82a47811445cd0daa2617e52fddb9d", "patch": "@@ -156,7 +156,7 @@ impl ChangeFixture {\n             let crate_root = default_crate_root.unwrap();\n             crate_graph.add_crate_root(\n                 crate_root,\n-                Edition::Edition2018,\n+                Edition::CURRENT,\n                 Some(CrateName::new(\"test\").unwrap().into()),\n                 default_cfg.clone(),\n                 default_cfg,\n@@ -227,10 +227,7 @@ impl From<Fixture> for FileMeta {\n             krate: f.krate,\n             deps: f.deps,\n             cfg,\n-            edition: f\n-                .edition\n-                .as_ref()\n-                .map_or(Edition::Edition2018, |v| Edition::from_str(v).unwrap()),\n+            edition: f.edition.as_ref().map_or(Edition::CURRENT, |v| Edition::from_str(v).unwrap()),\n             env: f.env.into_iter().collect(),\n             introduce_new_source_root: f.introduce_new_source_root,\n         }"}, {"sha": "5f746ec5a5ea549c3f3bef33fbbc4b9bb5f49433", "filename": "crates/base_db/src/input.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8da560264e82a47811445cd0daa2617e52fddb9d/crates%2Fbase_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8da560264e82a47811445cd0daa2617e52fddb9d/crates%2Fbase_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Finput.rs?ref=8da560264e82a47811445cd0daa2617e52fddb9d", "patch": "@@ -195,6 +195,10 @@ pub enum Edition {\n     Edition2021,\n }\n \n+impl Edition {\n+    pub const CURRENT: Edition = Edition::Edition2018;\n+}\n+\n #[derive(Default, Debug, Clone, PartialEq, Eq)]\n pub struct Env {\n     entries: FxHashMap<String, String>,"}, {"sha": "525f052ede6729c60cba86918cd0c535e4568ce5", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8da560264e82a47811445cd0daa2617e52fddb9d/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8da560264e82a47811445cd0daa2617e52fddb9d/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=8da560264e82a47811445cd0daa2617e52fddb9d", "patch": "@@ -217,7 +217,7 @@ impl Analysis {\n         cfg_options.insert_atom(\"test\".into());\n         crate_graph.add_crate_root(\n             file_id,\n-            Edition::Edition2018,\n+            Edition::CURRENT,\n             None,\n             cfg_options.clone(),\n             cfg_options,"}, {"sha": "4ee720a53ab762e0166060e783a5212113faee2c", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8da560264e82a47811445cd0daa2617e52fddb9d/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8da560264e82a47811445cd0daa2617e52fddb9d/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=8da560264e82a47811445cd0daa2617e52fddb9d", "patch": "@@ -228,11 +228,11 @@ struct PackageMetadata {\n }\n \n impl CargoWorkspace {\n-    pub fn from_cargo_metadata(\n+    pub fn fetch_metadata(\n         cargo_toml: &AbsPath,\n         config: &CargoConfig,\n         progress: &dyn Fn(String),\n-    ) -> Result<CargoWorkspace> {\n+    ) -> Result<cargo_metadata::Metadata> {\n         let mut meta = MetadataCommand::new();\n         meta.cargo_path(toolchain::cargo());\n         meta.manifest_path(cargo_toml.to_path_buf());\n@@ -262,10 +262,12 @@ impl CargoWorkspace {\n             meta.other_options(vec![String::from(\"--filter-platform\"), target]);\n         }\n \n-        // FIXME: Currently MetadataCommand is not based on parse_stream,\n-        // So we just report it as a whole\n+        // FIXME: Fetching metadata is a slow process, as it might require\n+        // calling crates.io. We should be reporting progress here, but it's\n+        // unclear whether cargo itself supports it.\n         progress(\"metadata\".to_string());\n-        let mut meta = meta.exec().with_context(|| {\n+\n+        let meta = meta.exec().with_context(|| {\n             let cwd: Option<AbsPathBuf> =\n                 std::env::current_dir().ok().and_then(|p| p.try_into().ok());\n \n@@ -283,6 +285,14 @@ impl CargoWorkspace {\n             )\n         })?;\n \n+        Ok(meta)\n+    }\n+\n+    pub fn new(\n+        cargo_toml: &AbsPath,\n+        config: &CargoConfig,\n+        mut meta: cargo_metadata::Metadata,\n+    ) -> CargoWorkspace {\n         let mut pkg_by_id = FxHashMap::default();\n         let mut packages = Arena::default();\n         let mut targets = Arena::default();\n@@ -296,9 +306,10 @@ impl CargoWorkspace {\n             } = meta_pkg;\n             let meta = from_value::<PackageMetadata>(metadata.clone()).unwrap_or_default();\n             let is_member = ws_members.contains(id);\n-            let edition = edition\n-                .parse::<Edition>()\n-                .with_context(|| format!(\"Failed to parse edition {}\", edition))?;\n+            let edition = edition.parse::<Edition>().unwrap_or_else(|err| {\n+                log::error!(\"Failed to parse edition {}\", err);\n+                Edition::CURRENT\n+            });\n \n             let pkg = packages.alloc(PackageData {\n                 id: id.repr.clone(),\n@@ -366,7 +377,16 @@ impl CargoWorkspace {\n         let build_data_config =\n             BuildDataConfig::new(cargo_toml.to_path_buf(), config.clone(), Arc::new(meta.packages));\n \n-        Ok(CargoWorkspace { packages, targets, workspace_root, build_data_config })\n+        CargoWorkspace { packages, targets, workspace_root, build_data_config }\n+    }\n+\n+    pub fn from_cargo_metadata3(\n+        cargo_toml: &AbsPath,\n+        config: &CargoConfig,\n+        progress: &dyn Fn(String),\n+    ) -> Result<CargoWorkspace> {\n+        let meta = CargoWorkspace::fetch_metadata(cargo_toml, config, progress)?;\n+        Ok(CargoWorkspace::new(cargo_toml, config, meta))\n     }\n \n     pub fn packages<'a>(&'a self) -> impl Iterator<Item = Package> + ExactSizeIterator + 'a {"}, {"sha": "76c4388f19344fb0b1e533fb188241a54c1979d1", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8da560264e82a47811445cd0daa2617e52fddb9d/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8da560264e82a47811445cd0daa2617e52fddb9d/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=8da560264e82a47811445cd0daa2617e52fddb9d", "patch": "@@ -126,14 +126,15 @@ impl ProjectWorkspace {\n                     cmd\n                 })?;\n \n-                let cargo = CargoWorkspace::from_cargo_metadata(&cargo_toml, config, progress)\n+                let meta = CargoWorkspace::fetch_metadata(&cargo_toml, config, progress)\n                     .with_context(|| {\n                         format!(\n                             \"Failed to read Cargo metadata from Cargo.toml file {}, {}\",\n                             cargo_toml.display(),\n                             cargo_version\n                         )\n                     })?;\n+                let cargo = CargoWorkspace::new(&cargo_toml, config, meta);\n \n                 let sysroot = if config.no_sysroot {\n                     Sysroot::default()\n@@ -156,15 +157,15 @@ impl ProjectWorkspace {\n                     None\n                 };\n \n-                let rustc = if let Some(rustc_dir) = rustc_dir {\n-                    Some(\n-                        CargoWorkspace::from_cargo_metadata(&rustc_dir, config, progress)\n+                let rustc = match rustc_dir {\n+                    Some(rustc_dir) => Some({\n+                        let meta = CargoWorkspace::fetch_metadata(&rustc_dir, config, progress)\n                             .with_context(|| {\n                                 format!(\"Failed to read Cargo metadata for Rust sources\")\n-                            })?,\n-                    )\n-                } else {\n-                    None\n+                            })?;\n+                        CargoWorkspace::new(&rustc_dir, config, meta)\n+                    }),\n+                    None => None,\n                 };\n \n                 let rustc_cfg = rustc_cfg::get(Some(&cargo_toml), config.target.as_deref());\n@@ -595,7 +596,7 @@ fn detached_files_to_crate_graph(\n             .map(|file_stem| CrateDisplayName::from_canonical_name(file_stem.to_string()));\n         let detached_file_crate = crate_graph.add_crate_root(\n             file_id,\n-            Edition::Edition2018,\n+            Edition::CURRENT,\n             display_name,\n             cfg_options.clone(),\n             cfg_options.clone(),\n@@ -777,7 +778,7 @@ fn sysroot_to_crate_graph(\n             let display_name = CrateDisplayName::from_canonical_name(sysroot[krate].name.clone());\n             let crate_id = crate_graph.add_crate_root(\n                 file_id,\n-                Edition::Edition2018,\n+                Edition::CURRENT,\n                 Some(display_name),\n                 cfg_options.clone(),\n                 cfg_options.clone(),"}]}