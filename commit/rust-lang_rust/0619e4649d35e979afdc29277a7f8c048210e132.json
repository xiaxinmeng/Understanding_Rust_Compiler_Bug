{"sha": "0619e4649d35e979afdc29277a7f8c048210e132", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MTllNDY0OWQzNWU5NzlhZmRjMjkyNzdhN2Y4YzA0ODIxMGUxMzI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-15T01:44:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-15T01:44:15Z"}, "message": "Rollup merge of #69471 - nnethercote:rm-sip-Hasher-short_write, r=dtolnay\n\nRemove `sip::Hasher::short_write`.\n\n`sip::Hasher::short_write` is currently unused. It is called by\n`sip::Hasher::write_{u8,usize}`, but those methods are also unused,\nbecause `DefaultHasher`, `SipHasher` and `SipHasher13` don't implement\nany of the `write_xyz` methods, so all their write operations end up\ncalling `sip::Hasher::write`.\n\n(I confirmed this by inserting a `panic!` in `sip::Hasher::short_write`\nand running the tests -- they all passed.)\n\nThe alternative would be to add all the missing `write_xyz` methods.\nThis does give some significant speed-ups, but it hurts compile times a\nlittle in some cases. See #69152 for details. This commit does the\nconservative thing and doesn't change existing behaviour.\n\nr? @rust-lang/libs", "tree": {"sha": "a11f9dde26c53ab33d8d62ba8ed42ddef6b5db78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a11f9dde26c53ab33d8d62ba8ed42ddef6b5db78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0619e4649d35e979afdc29277a7f8c048210e132", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJebYhvCRBK7hj4Ov3rIwAAdHIIAIx9YnQQ5gpdDEQnLxF4ScPh\n6P2Hn3L26KqEpsRbwOzmBSeHmjQxf37wHYs7O92DTg9XW3vMdw93Wo4Pc7vndXAC\nSBi2QFK0dCKBC5pHFzJ/ps9uaDCtmtvS0iRqf3zYXkhEAZxBxkaFQjeqR5UyxaQ9\nJG4XJUdTJCwTx/NXnbVnU+8SxfxwaKJxHj1EpAiVNmH7yAvu/GJ3y7A5S1Q/eOkZ\nC2xcWMtIjsYjjKKvOwtasU18PMG42cxJZhJq9bG1kLmiSYaqc33uBYA7Udf4EMK4\nX/uh45h9oMcjNWeJObjIivxZKx21nw7U3yvO25m2F8sKV3bMwO/RCgffsb1+MIs=\n=wIKj\n-----END PGP SIGNATURE-----\n", "payload": "tree a11f9dde26c53ab33d8d62ba8ed42ddef6b5db78\nparent 62c057911640a269a8bbb1a4a814c146906194ce\nparent 54d1c50c7e7b4c4c7dca6c85c6965c886922b449\nauthor Dylan DPC <dylan.dpc@gmail.com> 1584236655 +0100\ncommitter GitHub <noreply@github.com> 1584236655 +0100\n\nRollup merge of #69471 - nnethercote:rm-sip-Hasher-short_write, r=dtolnay\n\nRemove `sip::Hasher::short_write`.\n\n`sip::Hasher::short_write` is currently unused. It is called by\n`sip::Hasher::write_{u8,usize}`, but those methods are also unused,\nbecause `DefaultHasher`, `SipHasher` and `SipHasher13` don't implement\nany of the `write_xyz` methods, so all their write operations end up\ncalling `sip::Hasher::write`.\n\n(I confirmed this by inserting a `panic!` in `sip::Hasher::short_write`\nand running the tests -- they all passed.)\n\nThe alternative would be to add all the missing `write_xyz` methods.\nThis does give some significant speed-ups, but it hurts compile times a\nlittle in some cases. See #69152 for details. This commit does the\nconservative thing and doesn't change existing behaviour.\n\nr? @rust-lang/libs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0619e4649d35e979afdc29277a7f8c048210e132", "html_url": "https://github.com/rust-lang/rust/commit/0619e4649d35e979afdc29277a7f8c048210e132", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0619e4649d35e979afdc29277a7f8c048210e132/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62c057911640a269a8bbb1a4a814c146906194ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/62c057911640a269a8bbb1a4a814c146906194ce", "html_url": "https://github.com/rust-lang/rust/commit/62c057911640a269a8bbb1a4a814c146906194ce"}, {"sha": "54d1c50c7e7b4c4c7dca6c85c6965c886922b449", "url": "https://api.github.com/repos/rust-lang/rust/commits/54d1c50c7e7b4c4c7dca6c85c6965c886922b449", "html_url": "https://github.com/rust-lang/rust/commit/54d1c50c7e7b4c4c7dca6c85c6965c886922b449"}], "stats": {"total": 53, "additions": 7, "deletions": 46}, "files": [{"sha": "adfbe243512bd5bb00c1e0ab7665c57579bb1d7b", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 7, "deletions": 46, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/0619e4649d35e979afdc29277a7f8c048210e132/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0619e4649d35e979afdc29277a7f8c048210e132/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=0619e4649d35e979afdc29277a7f8c048210e132", "patch": "@@ -220,37 +220,6 @@ impl<S: Sip> Hasher<S> {\n         self.state.v3 = self.k1 ^ 0x7465646279746573;\n         self.ntail = 0;\n     }\n-\n-    // Specialized write function that is only valid for buffers with len <= 8.\n-    // It's used to force inlining of write_u8 and write_usize, those would normally be inlined\n-    // except for composite types (that includes slices and str hashing because of delimiter).\n-    // Without this extra push the compiler is very reluctant to inline delimiter writes,\n-    // degrading performance substantially for the most common use cases.\n-    #[inline]\n-    fn short_write(&mut self, msg: &[u8]) {\n-        debug_assert!(msg.len() <= 8);\n-        let length = msg.len();\n-        self.length += length;\n-\n-        let needed = 8 - self.ntail;\n-        let fill = cmp::min(length, needed);\n-        if fill == 8 {\n-            self.tail = unsafe { load_int_le!(msg, 0, u64) };\n-        } else {\n-            self.tail |= unsafe { u8to64_le(msg, 0, fill) } << (8 * self.ntail);\n-            if length < needed {\n-                self.ntail += length;\n-                return;\n-            }\n-        }\n-        self.state.v3 ^= self.tail;\n-        S::c_rounds(&mut self.state);\n-        self.state.v0 ^= self.tail;\n-\n-        // Buffered tail is now flushed, process new input.\n-        self.ntail = length - needed;\n-        self.tail = unsafe { u8to64_le(msg, needed, self.ntail) };\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -280,21 +249,13 @@ impl super::Hasher for SipHasher13 {\n }\n \n impl<S: Sip> super::Hasher for Hasher<S> {\n-    // see short_write comment for explanation\n-    #[inline]\n-    fn write_usize(&mut self, i: usize) {\n-        let bytes = unsafe {\n-            crate::slice::from_raw_parts(&i as *const usize as *const u8, mem::size_of::<usize>())\n-        };\n-        self.short_write(bytes);\n-    }\n-\n-    // see short_write comment for explanation\n-    #[inline]\n-    fn write_u8(&mut self, i: u8) {\n-        self.short_write(&[i]);\n-    }\n-\n+    // Note: no integer hashing methods (`write_u*`, `write_i*`) are defined\n+    // for this type. We could add them, copy the `short_write` implementation\n+    // in librustc_data_structures/sip128.rs, and add `write_u*`/`write_i*`\n+    // methods to `SipHasher`, `SipHasher13`, and `DefaultHasher`. This would\n+    // greatly speed up integer hashing by those hashers, at the cost of\n+    // slightly slowing down compile speeds on some benchmarks. See #69152 for\n+    // details.\n     #[inline]\n     fn write(&mut self, msg: &[u8]) {\n         let length = msg.len();"}]}