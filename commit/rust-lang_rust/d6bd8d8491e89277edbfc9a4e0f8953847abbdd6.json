{"sha": "d6bd8d8491e89277edbfc9a4e0f8953847abbdd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YmQ4ZDg0OTFlODkyNzdlZGJmYzlhNGUwZjg5NTM4NDdhYmJkZDY=", "commit": {"author": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2015-10-16T15:54:05Z"}, "committer": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2015-10-16T22:35:31Z"}, "message": "Add `Shared` pointer and have `{Arc, Rc}` use it\n\nThis change has two consequences:\n\n1. It makes `Arc<T>` and `Rc<T>` covariant in `T`.\n\n2. It causes the compiler to reject code that was unsound with respect\nto dropck. See compile-fail/issue-29106.rs for an example of code that\nno longer compiles. Because of this, this is a [breaking-change].\n\nFixes #29037.\nFixes #29106.", "tree": {"sha": "41bc1358ed0b4712768d308ea3e0df04e25eddf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41bc1358ed0b4712768d308ea3e0df04e25eddf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6bd8d8491e89277edbfc9a4e0f8953847abbdd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6bd8d8491e89277edbfc9a4e0f8953847abbdd6", "html_url": "https://github.com/rust-lang/rust/commit/d6bd8d8491e89277edbfc9a4e0f8953847abbdd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6bd8d8491e89277edbfc9a4e0f8953847abbdd6/comments", "author": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05cfd72ed1934c92af08dbcb66fd1af6b1298721", "url": "https://api.github.com/repos/rust-lang/rust/commits/05cfd72ed1934c92af08dbcb66fd1af6b1298721", "html_url": "https://github.com/rust-lang/rust/commit/05cfd72ed1934c92af08dbcb66fd1af6b1298721"}], "stats": {"total": 160, "additions": 148, "deletions": 12}, "files": [{"sha": "33ca80ba3725967c3a327e4332714a5bb655ec24", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d6bd8d8491e89277edbfc9a4e0f8953847abbdd6/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6bd8d8491e89277edbfc9a4e0f8953847abbdd6/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=d6bd8d8491e89277edbfc9a4e0f8953847abbdd6", "patch": "@@ -79,9 +79,8 @@ use core::cmp::Ordering;\n use core::mem::{align_of_val, size_of_val};\n use core::intrinsics::{drop_in_place, abort};\n use core::mem;\n-use core::nonzero::NonZero;\n use core::ops::{Deref, CoerceUnsized};\n-use core::ptr;\n+use core::ptr::{self, Shared};\n use core::marker::Unsize;\n use core::hash::{Hash, Hasher};\n use core::{usize, isize};\n@@ -124,12 +123,13 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n pub struct Arc<T: ?Sized> {\n     // FIXME #12808: strange name to try to avoid interfering with\n     // field accesses of the contained type via Deref\n-    _ptr: NonZero<*mut ArcInner<T>>,\n+    _ptr: Shared<ArcInner<T>>,\n }\n \n unsafe impl<T: ?Sized + Sync + Send> Send for Arc<T> { }\n unsafe impl<T: ?Sized + Sync + Send> Sync for Arc<T> { }\n \n+#[cfg(not(stage0))] // remove cfg after new snapshot\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Arc<U>> for Arc<T> {}\n \n /// A weak pointer to an `Arc`.\n@@ -141,12 +141,13 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Arc<U>> for Arc<T> {}\n pub struct Weak<T: ?Sized> {\n     // FIXME #12808: strange name to try to avoid interfering with\n     // field accesses of the contained type via Deref\n-    _ptr: NonZero<*mut ArcInner<T>>,\n+    _ptr: Shared<ArcInner<T>>,\n }\n \n unsafe impl<T: ?Sized + Sync + Send> Send for Weak<T> { }\n unsafe impl<T: ?Sized + Sync + Send> Sync for Weak<T> { }\n \n+#[cfg(not(stage0))] // remove cfg after new snapshot\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Weak<U>> for Weak<T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -190,7 +191,7 @@ impl<T> Arc<T> {\n             weak: atomic::AtomicUsize::new(1),\n             data: data,\n         };\n-        Arc { _ptr: unsafe { NonZero::new(Box::into_raw(x)) } }\n+        Arc { _ptr: unsafe { Shared::new(Box::into_raw(x)) } }\n     }\n \n     /// Unwraps the contained value if the `Arc<T>` has only one strong reference."}, {"sha": "c78ebdf4340ee28e845cc7e997f70e953d7a4c68", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6bd8d8491e89277edbfc9a4e0f8953847abbdd6/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6bd8d8491e89277edbfc9a4e0f8953847abbdd6/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=d6bd8d8491e89277edbfc9a4e0f8953847abbdd6", "patch": "@@ -90,6 +90,7 @@\n #![feature(placement_in_syntax)]\n #![feature(placement_new_protocol)]\n #![feature(raw)]\n+#![feature(shared)]\n #![feature(staged_api)]\n #![feature(unboxed_closures)]\n #![feature(unique)]"}, {"sha": "d695c0edd1dc82f0b625ec6f7f75aebaff214404", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d6bd8d8491e89277edbfc9a4e0f8953847abbdd6/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6bd8d8491e89277edbfc9a4e0f8953847abbdd6/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=d6bd8d8491e89277edbfc9a4e0f8953847abbdd6", "patch": "@@ -163,9 +163,8 @@ use core::hash::{Hasher, Hash};\n use core::intrinsics::{assume, drop_in_place, abort};\n use core::marker::{self, Unsize};\n use core::mem::{self, align_of_val, size_of_val, forget};\n-use core::nonzero::NonZero;\n use core::ops::{CoerceUnsized, Deref};\n-use core::ptr;\n+use core::ptr::{self, Shared};\n \n use heap::deallocate;\n \n@@ -184,12 +183,13 @@ struct RcBox<T: ?Sized> {\n pub struct Rc<T: ?Sized> {\n     // FIXME #12808: strange names to try to avoid interfering with field\n     // accesses of the contained type via Deref\n-    _ptr: NonZero<*mut RcBox<T>>,\n+    _ptr: Shared<RcBox<T>>,\n }\n \n impl<T: ?Sized> !marker::Send for Rc<T> {}\n impl<T: ?Sized> !marker::Sync for Rc<T> {}\n \n+#[cfg(not(stage0))] // remove cfg after new snapshot\n impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<Rc<U>> for Rc<T> {}\n \n impl<T> Rc<T> {\n@@ -210,7 +210,7 @@ impl<T> Rc<T> {\n                 // pointers, which ensures that the weak destructor never frees\n                 // the allocation while the strong destructor is running, even\n                 // if the weak pointer is stored inside the strong one.\n-                _ptr: NonZero::new(Box::into_raw(box RcBox {\n+                _ptr: Shared::new(Box::into_raw(box RcBox {\n                     strong: Cell::new(1),\n                     weak: Cell::new(1),\n                     value: value,\n@@ -712,12 +712,13 @@ impl<T> fmt::Pointer for Rc<T> {\n pub struct Weak<T: ?Sized> {\n     // FIXME #12808: strange names to try to avoid interfering with\n     // field accesses of the contained type via Deref\n-    _ptr: NonZero<*mut RcBox<T>>,\n+    _ptr: Shared<RcBox<T>>,\n }\n \n impl<T: ?Sized> !marker::Send for Weak<T> {}\n impl<T: ?Sized> !marker::Sync for Weak<T> {}\n \n+#[cfg(not(stage0))] // remove cfg after new snapshot\n impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<Weak<U>> for Weak<T> {}\n \n impl<T: ?Sized> Weak<T> {"}, {"sha": "8adbaf56f143cdb71eb80b60790ae2daa2594213", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 67, "deletions": 2, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/d6bd8d8491e89277edbfc9a4e0f8953847abbdd6/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6bd8d8491e89277edbfc9a4e0f8953847abbdd6/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=d6bd8d8491e89277edbfc9a4e0f8953847abbdd6", "patch": "@@ -18,11 +18,11 @@\n \n use clone::Clone;\n use intrinsics;\n-use ops::Deref;\n+use ops::{CoerceUnsized, Deref};\n use fmt;\n use hash;\n use option::Option::{self, Some, None};\n-use marker::{PhantomData, Send, Sized, Sync};\n+use marker::{Copy, PhantomData, Send, Sized, Sync, Unsize};\n use mem;\n use nonzero::NonZero;\n \n@@ -532,3 +532,68 @@ impl<T> fmt::Pointer for Unique<T> {\n         fmt::Pointer::fmt(&*self.pointer, f)\n     }\n }\n+\n+/// A wrapper around a raw `*mut T` that indicates that the possessor\n+/// of this wrapper has shared ownership of the referent. Useful for\n+/// building abstractions like `Rc<T>` or `Arc<T>`, which internally\n+/// use raw pointers to manage the memory that they own.\n+#[unstable(feature = \"shared\", reason = \"needs an RFC to flesh out design\",\n+           issue = \"0\")]\n+pub struct Shared<T: ?Sized> {\n+    pointer: NonZero<*const T>,\n+    // NOTE: this marker has no consequences for variance, but is necessary\n+    // for dropck to understand that we logically own a `T`.\n+    //\n+    // For details, see:\n+    // https://github.com/rust-lang/rfcs/blob/master/text/0769-sound-generic-drop.md#phantom-data\n+    _marker: PhantomData<T>,\n+}\n+\n+/// `Shared` pointers are not `Send` because the data they reference may be aliased.\n+// NB: This impl is unnecessary, but should provide better error messages.\n+#[unstable(feature = \"shared\", issue = \"0\")]\n+impl<T: ?Sized> !Send for Shared<T> { }\n+\n+/// `Shared` pointers are not `Sync` because the data they reference may be aliased.\n+// NB: This impl is unnecessary, but should provide better error messages.\n+#[unstable(feature = \"shared\", issue = \"0\")]\n+impl<T: ?Sized> !Sync for Shared<T> { }\n+\n+#[unstable(feature = \"shared\", issue = \"0\")]\n+impl<T: ?Sized> Shared<T> {\n+    /// Creates a new `Shared`.\n+    pub unsafe fn new(ptr: *mut T) -> Self {\n+        Shared { pointer: NonZero::new(ptr), _marker: PhantomData }\n+    }\n+}\n+\n+#[unstable(feature = \"shared\", issue = \"0\")]\n+impl<T: ?Sized> Clone for Shared<T> {\n+    fn clone(&self) -> Self {\n+        *self\n+    }\n+}\n+\n+#[unstable(feature = \"shared\", issue = \"0\")]\n+impl<T: ?Sized> Copy for Shared<T> { }\n+\n+#[cfg(not(stage0))] // remove cfg after new snapshot\n+#[unstable(feature = \"shared\", issue = \"0\")]\n+impl<T: ?Sized, U: ?Sized> CoerceUnsized<Shared<U>> for Shared<T> where T: Unsize<U> { }\n+\n+#[unstable(feature = \"shared\", issue = \"0\")]\n+impl<T: ?Sized> Deref for Shared<T> {\n+    type Target = *mut T;\n+\n+    #[inline]\n+    fn deref(&self) -> &*mut T {\n+        unsafe { mem::transmute(&*self.pointer) }\n+    }\n+}\n+\n+#[unstable(feature = \"shared\", issue = \"0\")]\n+impl<T> fmt::Pointer for Shared<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Pointer::fmt(&*self.pointer, f)\n+    }\n+}"}, {"sha": "c0cd6d127d285467f0ce2ba7805082840460828e", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6bd8d8491e89277edbfc9a4e0f8953847abbdd6/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6bd8d8491e89277edbfc9a4e0f8953847abbdd6/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=d6bd8d8491e89277edbfc9a4e0f8953847abbdd6", "patch": "@@ -293,6 +293,7 @@ impl<T: ?Sized> Mutex<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Drop for Mutex<T> {\n+    #[unsafe_destructor_blind_to_params]\n     fn drop(&mut self) {\n         // This is actually safe b/c we know that there is no further usage of\n         // this mutex (it's up to the user to arrange for a mutex to get"}, {"sha": "750c9e30c5c3716b37725b3a8c4c136186941b79", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6bd8d8491e89277edbfc9a4e0f8953847abbdd6/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6bd8d8491e89277edbfc9a4e0f8953847abbdd6/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=d6bd8d8491e89277edbfc9a4e0f8953847abbdd6", "patch": "@@ -314,6 +314,7 @@ impl<T: ?Sized> RwLock<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Drop for RwLock<T> {\n+    #[unsafe_destructor_blind_to_params]\n     fn drop(&mut self) {\n         // IMPORTANT: This code needs to be kept in sync with `RwLock::into_inner`.\n         unsafe { self.inner.lock.destroy() }"}, {"sha": "1872c62e366dedef88424443eebbae3fc6b1b863", "filename": "src/test/compile-fail/issue-29106.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d6bd8d8491e89277edbfc9a4e0f8953847abbdd6/src%2Ftest%2Fcompile-fail%2Fissue-29106.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6bd8d8491e89277edbfc9a4e0f8953847abbdd6/src%2Ftest%2Fcompile-fail%2Fissue-29106.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-29106.rs?ref=d6bd8d8491e89277edbfc9a4e0f8953847abbdd6", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::rc::Rc;\n+use std::sync::Arc;\n+\n+struct Foo<'a>(&'a String);\n+\n+impl<'a> Drop for Foo<'a> {\n+    fn drop(&mut self) {\n+        println!(\"{:?}\", self.0);\n+    }\n+}\n+\n+fn main() {\n+    {\n+        let (y, x);\n+        x = \"alive\".to_string();\n+        y = Arc::new(Foo(&x)); //~ ERROR `x` does not live long enough\n+    }\n+\n+    {\n+        let (y, x);\n+        x = \"alive\".to_string();\n+        y = Rc::new(Foo(&x)); //~ ERROR `x` does not live long enough\n+    }\n+}"}, {"sha": "dc1d67cc6455a6e577f850aeeba2429cda1b8f49", "filename": "src/test/run-pass/issue-29037.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d6bd8d8491e89277edbfc9a4e0f8953847abbdd6/src%2Ftest%2Frun-pass%2Fissue-29037.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6bd8d8491e89277edbfc9a4e0f8953847abbdd6/src%2Ftest%2Frun-pass%2Fissue-29037.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-29037.rs?ref=d6bd8d8491e89277edbfc9a4e0f8953847abbdd6", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test ensures that each pointer type `P<X>` is covariant in `X`.\n+\n+use std::rc::Rc;\n+use std::sync::Arc;\n+\n+fn a<'r>(x: Box<&'static str>) -> Box<&'r str> {\n+    x\n+}\n+\n+fn b<'r, 'w>(x: &'w &'static str) -> &'w &'r str {\n+    x\n+}\n+\n+fn c<'r>(x: Arc<&'static str>) -> Arc<&'r str> {\n+    x\n+}\n+\n+fn d<'r>(x: Rc<&'static str>) -> Rc<&'r str> {\n+    x\n+}\n+\n+fn main() {}"}]}