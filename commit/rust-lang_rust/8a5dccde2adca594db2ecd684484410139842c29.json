{"sha": "8a5dccde2adca594db2ecd684484410139842c29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNWRjY2RlMmFkY2E1OTRkYjJlY2Q2ODQ0ODQ0MTAxMzk4NDJjMjk=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-22T00:35:55Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-22T15:08:49Z"}, "message": "Remove Ty prefix from Ty{Bool|Char|Int|Uint|Float|Str}", "tree": {"sha": "e20a0973374adff0a06f2f54d171dc21ff0dcb3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e20a0973374adff0a06f2f54d171dc21ff0dcb3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a5dccde2adca594db2ecd684484410139842c29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a5dccde2adca594db2ecd684484410139842c29", "html_url": "https://github.com/rust-lang/rust/commit/8a5dccde2adca594db2ecd684484410139842c29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a5dccde2adca594db2ecd684484410139842c29/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "url": "https://api.github.com/repos/rust-lang/rust/commits/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65", "html_url": "https://github.com/rust-lang/rust/commit/04fa5d3adbb8212f5b4e87e3bbd7b74bb7c9ec65"}], "stats": {"total": 1098, "additions": 549, "deletions": 549}, "files": [{"sha": "6bdfbd40e8d36905f586622d9b605e411c533f80", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -1672,12 +1672,12 @@ impl fmt::Debug for Ty {\n /// Not represented directly in the AST, referred to by name through a ty_path.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum PrimTy {\n-    TyInt(IntTy),\n-    TyUint(UintTy),\n-    TyFloat(FloatTy),\n-    TyStr,\n-    TyBool,\n-    TyChar,\n+    Int(IntTy),\n+    Uint(UintTy),\n+    Float(FloatTy),\n+    Str,\n+    Bool,\n+    Char,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]"}, {"sha": "4e75905595e347873fac5ab2d5b3344234667216", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -308,12 +308,12 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::Ty {\n }\n \n impl_stable_hash_for!(enum hir::PrimTy {\n-    TyInt(int_ty),\n-    TyUint(uint_ty),\n-    TyFloat(float_ty),\n-    TyStr,\n-    TyBool,\n-    TyChar\n+    Int(int_ty),\n+    Uint(uint_ty),\n+    Float(float_ty),\n+    Str,\n+    Bool,\n+    Char\n });\n \n impl_stable_hash_for!(struct hir::BareFnTy {"}, {"sha": "709b53f248dd1cd768bd05db9ee78b011c7a78da", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -806,20 +806,20 @@ for ty::TyKind<'gcx>\n \n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match *self {\n-            TyBool  |\n-            TyChar  |\n-            TyStr   |\n+            Bool  |\n+            Char  |\n+            Str   |\n             Error |\n             Never => {\n                 // Nothing more to hash.\n             }\n-            TyInt(int_ty) => {\n+            Int(int_ty) => {\n                 int_ty.hash_stable(hcx, hasher);\n             }\n-            TyUint(uint_ty) => {\n+            Uint(uint_ty) => {\n                 uint_ty.hash_stable(hcx, hasher);\n             }\n-            TyFloat(float_ty)  => {\n+            Float(float_ty)  => {\n                 float_ty.hash_stable(hcx, hasher);\n             }\n             Adt(adt_def, substs) => {"}, {"sha": "16c33e9adf8908c4567b09b2ac2dde5ed620f138", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -265,13 +265,13 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Canonicalizer<'cx, 'gcx, 'tcx>\n             ty::Closure(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(..)\n-            | ty::TyBool\n-            | ty::TyChar\n-            | ty::TyInt(..)\n-            | ty::TyUint(..)\n-            | ty::TyFloat(..)\n+            | ty::Bool\n+            | ty::Char\n+            | ty::Int(..)\n+            | ty::Uint(..)\n+            | ty::Float(..)\n             | ty::Adt(..)\n-            | ty::TyStr\n+            | ty::Str\n             | ty::Error\n             | ty::Array(..)\n             | ty::Slice(..)"}, {"sha": "4738a03cbd3ec4177f2ecf1a7905b6a334aaf5b1", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -83,16 +83,16 @@ impl<'infcx, 'gcx, 'tcx> InferCtxt<'infcx, 'gcx, 'tcx> {\n                     .map_err(|e| int_unification_error(a_is_expected, e))?;\n                 Ok(a)\n             }\n-            (&ty::Infer(ty::IntVar(v_id)), &ty::TyInt(v)) => {\n+            (&ty::Infer(ty::IntVar(v_id)), &ty::Int(v)) => {\n                 self.unify_integral_variable(a_is_expected, v_id, IntType(v))\n             }\n-            (&ty::TyInt(v), &ty::Infer(ty::IntVar(v_id))) => {\n+            (&ty::Int(v), &ty::Infer(ty::IntVar(v_id))) => {\n                 self.unify_integral_variable(!a_is_expected, v_id, IntType(v))\n             }\n-            (&ty::Infer(ty::IntVar(v_id)), &ty::TyUint(v)) => {\n+            (&ty::Infer(ty::IntVar(v_id)), &ty::Uint(v)) => {\n                 self.unify_integral_variable(a_is_expected, v_id, UintType(v))\n             }\n-            (&ty::TyUint(v), &ty::Infer(ty::IntVar(v_id))) => {\n+            (&ty::Uint(v), &ty::Infer(ty::IntVar(v_id))) => {\n                 self.unify_integral_variable(!a_is_expected, v_id, UintType(v))\n             }\n \n@@ -104,10 +104,10 @@ impl<'infcx, 'gcx, 'tcx> InferCtxt<'infcx, 'gcx, 'tcx> {\n                     .map_err(|e| float_unification_error(relation.a_is_expected(), e))?;\n                 Ok(a)\n             }\n-            (&ty::Infer(ty::FloatVar(v_id)), &ty::TyFloat(v)) => {\n+            (&ty::Infer(ty::FloatVar(v_id)), &ty::Float(v)) => {\n                 self.unify_float_variable(a_is_expected, v_id, v)\n             }\n-            (&ty::TyFloat(v), &ty::Infer(ty::FloatVar(v_id))) => {\n+            (&ty::Float(v), &ty::Infer(ty::FloatVar(v_id))) => {\n                 self.unify_float_variable(!a_is_expected, v_id, v)\n             }\n "}, {"sha": "02da3701db2979336de640f56aa51d337769bac3", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -704,11 +704,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         fn equals<'tcx>(a: &Ty<'tcx>, b: &Ty<'tcx>) -> bool {\n             match (&a.sty, &b.sty) {\n                 (a, b) if *a == *b => true,\n-                (&ty::TyInt(_), &ty::Infer(ty::InferTy::IntVar(_)))\n-                | (&ty::Infer(ty::InferTy::IntVar(_)), &ty::TyInt(_))\n+                (&ty::Int(_), &ty::Infer(ty::InferTy::IntVar(_)))\n+                | (&ty::Infer(ty::InferTy::IntVar(_)), &ty::Int(_))\n                 | (&ty::Infer(ty::InferTy::IntVar(_)), &ty::Infer(ty::InferTy::IntVar(_)))\n-                | (&ty::TyFloat(_), &ty::Infer(ty::InferTy::FloatVar(_)))\n-                | (&ty::Infer(ty::InferTy::FloatVar(_)), &ty::TyFloat(_))\n+                | (&ty::Float(_), &ty::Infer(ty::InferTy::FloatVar(_)))\n+                | (&ty::Infer(ty::InferTy::FloatVar(_)), &ty::Float(_))\n                 | (\n                     &ty::Infer(ty::InferTy::FloatVar(_)),\n                     &ty::Infer(ty::InferTy::FloatVar(_)),"}, {"sha": "4673aac1872ffb94fef08677e182cee5462e0c4c", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -175,13 +175,13 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> {\n                 bug!(\"encountered canonical ty during freshening\"),\n \n             ty::Generator(..) |\n-            ty::TyBool |\n-            ty::TyChar |\n-            ty::TyInt(..) |\n-            ty::TyUint(..) |\n-            ty::TyFloat(..) |\n+            ty::Bool |\n+            ty::Char |\n+            ty::Int(..) |\n+            ty::Uint(..) |\n+            ty::Float(..) |\n             ty::Adt(..) |\n-            ty::TyStr |\n+            ty::Str |\n             ty::Error |\n             ty::Array(..) |\n             ty::Slice(..) |"}, {"sha": "66a42cfb11a749116b9f0e76a1d36255db9d12fe", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -2227,12 +2227,12 @@ pub fn fmt_const_val(f: &mut impl Write, const_val: &ty::Const) -> fmt::Result {\n     // print some primitives\n     if let ConstValue::Scalar(Scalar::Bits { bits, .. }) = value {\n         match ty.sty {\n-            TyBool if bits == 0 => return write!(f, \"false\"),\n-            TyBool if bits == 1 => return write!(f, \"true\"),\n-            TyFloat(ast::FloatTy::F32) => return write!(f, \"{}f32\", Single::from_bits(bits)),\n-            TyFloat(ast::FloatTy::F64) => return write!(f, \"{}f64\", Double::from_bits(bits)),\n-            TyUint(ui) => return write!(f, \"{:?}{}\", bits, ui),\n-            TyInt(i) => {\n+            Bool if bits == 0 => return write!(f, \"false\"),\n+            Bool if bits == 1 => return write!(f, \"true\"),\n+            Float(ast::FloatTy::F32) => return write!(f, \"{}f32\", Single::from_bits(bits)),\n+            Float(ast::FloatTy::F64) => return write!(f, \"{}f64\", Double::from_bits(bits)),\n+            Uint(ui) => return write!(f, \"{:?}{}\", bits, ui),\n+            Int(i) => {\n                 let bit_width = ty::tls::with(|tcx| {\n                     let ty = tcx.lift_to_global(&ty).unwrap();\n                     tcx.layout_of(ty::ParamEnv::empty().and(ty))\n@@ -2243,7 +2243,7 @@ pub fn fmt_const_val(f: &mut impl Write, const_val: &ty::Const) -> fmt::Result {\n                 let shift = 128 - bit_width;\n                 return write!(f, \"{:?}{}\", ((bits as i128) << shift) >> shift, i);\n             }\n-            TyChar => return write!(f, \"{:?}\", ::std::char::from_u32(bits as u32).unwrap()),\n+            Char => return write!(f, \"{:?}\", ::std::char::from_u32(bits as u32).unwrap()),\n             _ => {},\n         }\n     }\n@@ -2255,7 +2255,7 @@ pub fn fmt_const_val(f: &mut impl Write, const_val: &ty::Const) -> fmt::Result {\n     if let ConstValue::ScalarPair(ptr, len) = value {\n         if let Scalar::Ptr(ptr) = ptr {\n             if let ScalarMaybeUndef::Scalar(Scalar::Bits { bits: len, .. }) = len {\n-                if let Ref(_, &ty::TyS { sty: TyStr, .. }, _) = ty.sty {\n+                if let Ref(_, &ty::TyS { sty: Str, .. }, _) = ty.sty {\n                     return ty::tls::with(|tcx| {\n                         let alloc = tcx.alloc_map.lock().get(ptr.alloc_id);\n                         if let Some(interpret::AllocType::Memory(alloc)) = alloc {"}, {"sha": "c283c4d3caba38e9ffe521f09f4c31be069723dd", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -441,12 +441,12 @@ fn ty_is_local_constructor(ty: Ty, in_crate: InCrate) -> bool {\n     debug!(\"ty_is_local_constructor({:?})\", ty);\n \n     match ty.sty {\n-        ty::TyBool |\n-        ty::TyChar |\n-        ty::TyInt(..) |\n-        ty::TyUint(..) |\n-        ty::TyFloat(..) |\n-        ty::TyStr |\n+        ty::Bool |\n+        ty::Char |\n+        ty::Int(..) |\n+        ty::Uint(..) |\n+        ty::Float(..) |\n+        ty::Str |\n         ty::FnDef(..) |\n         ty::FnPtr(_) |\n         ty::Array(..) |"}, {"sha": "f92deb89e8bf7f6f6a68b10e50bdcb158e344d99", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -244,11 +244,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         /// if the type can be equated to any type.\n         fn type_category<'tcx>(t: Ty<'tcx>) -> Option<u32> {\n             match t.sty {\n-                ty::TyBool => Some(0),\n-                ty::TyChar => Some(1),\n-                ty::TyStr => Some(2),\n-                ty::TyInt(..) | ty::TyUint(..) | ty::Infer(ty::IntVar(..)) => Some(3),\n-                ty::TyFloat(..) | ty::Infer(ty::FloatVar(..)) => Some(4),\n+                ty::Bool => Some(0),\n+                ty::Char => Some(1),\n+                ty::Str => Some(2),\n+                ty::Int(..) | ty::Uint(..) | ty::Infer(ty::IntVar(..)) => Some(3),\n+                ty::Float(..) | ty::Infer(ty::FloatVar(..)) => Some(4),\n                 ty::Ref(..) | ty::RawPtr(..) => Some(5),\n                 ty::Array(..) | ty::Slice(..) => Some(6),\n                 ty::FnDef(..) | ty::FnPtr(..) => Some(7),"}, {"sha": "b479cafd1cea17f9ececd16525539fe1de88d0ee", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -216,18 +216,18 @@ pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'_, '_, 'tcx>, ty: Ty<'tcx>) ->\n         // execution.\n         ty::Infer(ty::FreshIntTy(_))\n         | ty::Infer(ty::FreshFloatTy(_))\n-        | ty::TyBool\n-        | ty::TyInt(_)\n-        | ty::TyUint(_)\n-        | ty::TyFloat(_)\n+        | ty::Bool\n+        | ty::Int(_)\n+        | ty::Uint(_)\n+        | ty::Float(_)\n         | ty::Never\n         | ty::FnDef(..)\n         | ty::FnPtr(_)\n-        | ty::TyChar\n+        | ty::Char\n         | ty::GeneratorWitness(..)\n         | ty::RawPtr(_)\n         | ty::Ref(..)\n-        | ty::TyStr\n+        | ty::Str\n         | ty::Foreign(..)\n         | ty::Error => true,\n "}, {"sha": "dd383732bf8274ea119c62dc63be8c9dd1329c3b", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -2180,16 +2180,16 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n         match self_ty.sty {\n             ty::Infer(ty::IntVar(_)) | ty::Infer(ty::FloatVar(_)) |\n-            ty::TyUint(_) | ty::TyInt(_) | ty::TyBool | ty::TyFloat(_) |\n+            ty::Uint(_) | ty::Int(_) | ty::Bool | ty::Float(_) |\n             ty::FnDef(..) | ty::FnPtr(_) | ty::RawPtr(..) |\n-            ty::TyChar | ty::Ref(..) | ty::Generator(..) |\n+            ty::Char | ty::Ref(..) | ty::Generator(..) |\n             ty::GeneratorWitness(..) | ty::Array(..) | ty::Closure(..) |\n             ty::Never | ty::Error => {\n                 // safe for everything\n                 Where(ty::Binder::dummy(Vec::new()))\n             }\n \n-            ty::TyStr | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => None,\n+            ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => None,\n \n             ty::Tuple(tys) => {\n                 Where(ty::Binder::bind(tys.last().into_iter().cloned().collect()))\n@@ -2231,14 +2231,14 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 Where(ty::Binder::dummy(Vec::new()))\n             }\n \n-            ty::TyUint(_) | ty::TyInt(_) | ty::TyBool | ty::TyFloat(_) |\n-            ty::TyChar | ty::RawPtr(..) | ty::Never |\n+            ty::Uint(_) | ty::Int(_) | ty::Bool | ty::Float(_) |\n+            ty::Char | ty::RawPtr(..) | ty::Never |\n             ty::Ref(_, _, hir::MutImmutable) => {\n                 // Implementations provided in libcore\n                 None\n             }\n \n-            ty::Dynamic(..) | ty::TyStr | ty::Slice(..) |\n+            ty::Dynamic(..) | ty::Str | ty::Slice(..) |\n             ty::Generator(..) | ty::GeneratorWitness(..) | ty::Foreign(..) |\n             ty::Ref(_, _, hir::MutMutable) => {\n                 None\n@@ -2300,18 +2300,18 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     /// ```\n     fn constituent_types_for_ty(&self, t: Ty<'tcx>) -> Vec<Ty<'tcx>> {\n         match t.sty {\n-            ty::TyUint(_) |\n-            ty::TyInt(_) |\n-            ty::TyBool |\n-            ty::TyFloat(_) |\n+            ty::Uint(_) |\n+            ty::Int(_) |\n+            ty::Bool |\n+            ty::Float(_) |\n             ty::FnDef(..) |\n             ty::FnPtr(_) |\n-            ty::TyStr |\n+            ty::Str |\n             ty::Error |\n             ty::Infer(ty::IntVar(_)) |\n             ty::Infer(ty::FloatVar(_)) |\n             ty::Never |\n-            ty::TyChar => {\n+            ty::Char => {\n                 Vec::new()\n             }\n "}, {"sha": "c0861abb774deda27da77623d852da04f2d8f316", "filename": "src/librustc/ty/cast.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcast.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -60,13 +60,13 @@ pub enum CastKind {\n impl<'tcx> CastTy<'tcx> {\n     pub fn from_ty(t: Ty<'tcx>) -> Option<CastTy<'tcx>> {\n         match t.sty {\n-            ty::TyBool => Some(CastTy::Int(IntTy::Bool)),\n-            ty::TyChar => Some(CastTy::Int(IntTy::Char)),\n-            ty::TyInt(_) => Some(CastTy::Int(IntTy::I)),\n+            ty::Bool => Some(CastTy::Int(IntTy::Bool)),\n+            ty::Char => Some(CastTy::Int(IntTy::Char)),\n+            ty::Int(_) => Some(CastTy::Int(IntTy::I)),\n             ty::Infer(ty::InferTy::IntVar(_)) => Some(CastTy::Int(IntTy::I)),\n             ty::Infer(ty::InferTy::FloatVar(_)) => Some(CastTy::Float),\n-            ty::TyUint(u) => Some(CastTy::Int(IntTy::U(u))),\n-            ty::TyFloat(_) => Some(CastTy::Float),\n+            ty::Uint(u) => Some(CastTy::Int(IntTy::U(u))),\n+            ty::Float(_) => Some(CastTy::Float),\n             ty::Adt(d,_) if d.is_enum() && d.is_payloadfree() =>\n                 Some(CastTy::Int(IntTy::CEnum)),\n             ty::RawPtr(mt) => Some(CastTy::Ptr(mt)),"}, {"sha": "0545a88f36bdc28bd34e0cf3b3d19db6865495a0", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -817,24 +817,24 @@ impl<'tcx> CommonTypes<'tcx> {\n             &*r\n         };\n         CommonTypes {\n-            bool: mk(TyBool),\n-            char: mk(TyChar),\n+            bool: mk(Bool),\n+            char: mk(Char),\n             never: mk(Never),\n             err: mk(Error),\n-            isize: mk(TyInt(ast::IntTy::Isize)),\n-            i8: mk(TyInt(ast::IntTy::I8)),\n-            i16: mk(TyInt(ast::IntTy::I16)),\n-            i32: mk(TyInt(ast::IntTy::I32)),\n-            i64: mk(TyInt(ast::IntTy::I64)),\n-            i128: mk(TyInt(ast::IntTy::I128)),\n-            usize: mk(TyUint(ast::UintTy::Usize)),\n-            u8: mk(TyUint(ast::UintTy::U8)),\n-            u16: mk(TyUint(ast::UintTy::U16)),\n-            u32: mk(TyUint(ast::UintTy::U32)),\n-            u64: mk(TyUint(ast::UintTy::U64)),\n-            u128: mk(TyUint(ast::UintTy::U128)),\n-            f32: mk(TyFloat(ast::FloatTy::F32)),\n-            f64: mk(TyFloat(ast::FloatTy::F64)),\n+            isize: mk(Int(ast::IntTy::Isize)),\n+            i8: mk(Int(ast::IntTy::I8)),\n+            i16: mk(Int(ast::IntTy::I16)),\n+            i32: mk(Int(ast::IntTy::I32)),\n+            i64: mk(Int(ast::IntTy::I64)),\n+            i128: mk(Int(ast::IntTy::I128)),\n+            usize: mk(Uint(ast::UintTy::Usize)),\n+            u8: mk(Uint(ast::UintTy::U8)),\n+            u16: mk(Uint(ast::UintTy::U16)),\n+            u32: mk(Uint(ast::UintTy::U32)),\n+            u64: mk(Uint(ast::UintTy::U64)),\n+            u128: mk(Uint(ast::UintTy::U128)),\n+            f32: mk(Float(ast::FloatTy::F32)),\n+            f64: mk(Float(ast::FloatTy::F64)),\n \n             re_empty: mk_region(RegionKind::ReEmpty),\n             re_static: mk_region(RegionKind::ReStatic),\n@@ -2035,8 +2035,8 @@ macro_rules! sty_debug_print {\n \n                 for &Interned(t) in tcx.interners.type_.borrow().iter() {\n                     let variant = match t.sty {\n-                        ty::TyBool | ty::TyChar | ty::TyInt(..) | ty::TyUint(..) |\n-                            ty::TyFloat(..) | ty::TyStr | ty::Never => continue,\n+                        ty::Bool | ty::Char | ty::Int(..) | ty::Uint(..) |\n+                            ty::Float(..) | ty::Str | ty::Never => continue,\n                         ty::Error => /* unimportant */ continue,\n                         $(ty::$variant(..) => &mut $variant,)*\n                     };\n@@ -2374,7 +2374,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn mk_str(self) -> Ty<'tcx> {\n-        self.mk_ty(TyStr)\n+        self.mk_ty(Str)\n     }\n \n     pub fn mk_static_str(self) -> Ty<'tcx> {\n@@ -2466,7 +2466,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn mk_bool(self) -> Ty<'tcx> {\n-        self.mk_ty(TyBool)\n+        self.mk_ty(Bool)\n     }\n \n     pub fn mk_fn_def(self, def_id: DefId,"}, {"sha": "aa6ee420a2162a4b41b93a2bfad48d7773b68612", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -175,8 +175,8 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n     pub fn sort_string(&self, tcx: TyCtxt<'a, 'gcx, 'lcx>) -> String {\n         match self.sty {\n-            ty::TyBool | ty::TyChar | ty::TyInt(_) |\n-            ty::TyUint(_) | ty::TyFloat(_) | ty::TyStr | ty::Never => self.to_string(),\n+            ty::Bool | ty::Char | ty::Int(_) |\n+            ty::Uint(_) | ty::Float(_) | ty::Str | ty::Never => self.to_string(),\n             ty::Tuple(ref tys) if tys.is_empty() => self.to_string(),\n \n             ty::Adt(def, _) => format!(\"{} `{}`\", def.descr(), tcx.item_path_str(def.did)),\n@@ -251,7 +251,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     db.help(\"consider boxing your closure and/or using it as a trait object\");\n                 }\n                 match (&values.found.sty, &values.expected.sty) { // Issue #53280\n-                    (ty::Infer(ty::IntVar(_)), ty::TyFloat(_)) => {\n+                    (ty::Infer(ty::IntVar(_)), ty::Float(_)) => {\n                         if let Ok(snippet) = self.sess.source_map().span_to_snippet(sp) {\n                             if snippet.chars().all(|c| c.is_digit(10) || c == '-' || c == '_') {\n                                 db.span_suggestion_with_applicability("}, {"sha": "567d1c668f7c7d2fbb4e43828043399dc689fdc0", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -68,13 +68,13 @@ pub fn simplify_type<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                      -> Option<SimplifiedType>\n {\n     match ty.sty {\n-        ty::TyBool => Some(BoolSimplifiedType),\n-        ty::TyChar => Some(CharSimplifiedType),\n-        ty::TyInt(int_type) => Some(IntSimplifiedType(int_type)),\n-        ty::TyUint(uint_type) => Some(UintSimplifiedType(uint_type)),\n-        ty::TyFloat(float_type) => Some(FloatSimplifiedType(float_type)),\n+        ty::Bool => Some(BoolSimplifiedType),\n+        ty::Char => Some(CharSimplifiedType),\n+        ty::Int(int_type) => Some(IntSimplifiedType(int_type)),\n+        ty::Uint(uint_type) => Some(UintSimplifiedType(uint_type)),\n+        ty::Float(float_type) => Some(FloatSimplifiedType(float_type)),\n         ty::Adt(def, _) => Some(AdtSimplifiedType(def.did)),\n-        ty::TyStr => Some(StrSimplifiedType),\n+        ty::Str => Some(StrSimplifiedType),\n         ty::Array(..) | ty::Slice(_) => Some(ArraySimplifiedType),\n         ty::RawPtr(_) => Some(PtrSimplifiedType),\n         ty::Dynamic(ref trait_info, ..) => {"}, {"sha": "b9371ec39ccdad00a79543eef173301e341bcabd", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -69,13 +69,13 @@ impl FlagComputation {\n \n     fn add_sty(&mut self, st: &ty::TyKind) {\n         match st {\n-            &ty::TyBool |\n-            &ty::TyChar |\n-            &ty::TyInt(_) |\n-            &ty::TyFloat(_) |\n-            &ty::TyUint(_) |\n+            &ty::Bool |\n+            &ty::Char |\n+            &ty::Int(_) |\n+            &ty::Float(_) |\n+            &ty::Uint(_) |\n             &ty::Never |\n-            &ty::TyStr |\n+            &ty::Str |\n             &ty::Foreign(..) => {\n             }\n "}, {"sha": "e38bb411a14f97bf4531ffd85b7a2272b69a3a03", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -309,12 +309,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n             ty::Foreign(did) => self.push_item_path(buffer, did),\n \n-            ty::TyBool |\n-            ty::TyChar |\n-            ty::TyInt(_) |\n-            ty::TyUint(_) |\n-            ty::TyFloat(_) |\n-            ty::TyStr => {\n+            ty::Bool |\n+            ty::Char |\n+            ty::Int(_) |\n+            ty::Uint(_) |\n+            ty::Float(_) |\n+            ty::Str => {\n                 buffer.push(&self_ty.to_string());\n             }\n \n@@ -377,11 +377,11 @@ pub fn characteristic_def_id_of_type(ty: Ty) -> Option<DefId> {\n         ty::Generator(def_id, _, _) |\n         ty::Foreign(def_id) => Some(def_id),\n \n-        ty::TyBool |\n-        ty::TyChar |\n-        ty::TyInt(_) |\n-        ty::TyUint(_) |\n-        ty::TyStr |\n+        ty::Bool |\n+        ty::Char |\n+        ty::Int(_) |\n+        ty::Uint(_) |\n+        ty::Str |\n         ty::FnPtr(_) |\n         ty::Projection(_) |\n         ty::Param(_) |\n@@ -390,7 +390,7 @@ pub fn characteristic_def_id_of_type(ty: Ty) -> Option<DefId> {\n         ty::Error |\n         ty::GeneratorWitness(..) |\n         ty::Never |\n-        ty::TyFloat(_) => None,\n+        ty::Float(_) => None,\n     }\n }\n "}, {"sha": "d485b9b32d4310fa4c19f91034160ec3a79fe991", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -470,25 +470,25 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n \n         Ok(match ty.sty {\n             // Basic scalars.\n-            ty::TyBool => {\n+            ty::Bool => {\n                 tcx.intern_layout(LayoutDetails::scalar(self, Scalar {\n                     value: Int(I8, false),\n                     valid_range: 0..=1\n                 }))\n             }\n-            ty::TyChar => {\n+            ty::Char => {\n                 tcx.intern_layout(LayoutDetails::scalar(self, Scalar {\n                     value: Int(I32, false),\n                     valid_range: 0..=0x10FFFF\n                 }))\n             }\n-            ty::TyInt(ity) => {\n+            ty::Int(ity) => {\n                 scalar(Int(Integer::from_attr(dl, attr::SignedInt(ity)), true))\n             }\n-            ty::TyUint(ity) => {\n+            ty::Uint(ity) => {\n                 scalar(Int(Integer::from_attr(dl, attr::UnsignedInt(ity)), false))\n             }\n-            ty::TyFloat(fty) => scalar(Float(fty)),\n+            ty::Float(fty) => scalar(Float(fty)),\n             ty::FnPtr(_) => {\n                 let mut ptr = scalar_unit(Pointer);\n                 ptr.valid_range = 1..=*ptr.valid_range.end();\n@@ -524,7 +524,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                     ty::Foreign(..) => {\n                         return Ok(tcx.intern_layout(LayoutDetails::scalar(self, data_ptr)));\n                     }\n-                    ty::Slice(_) | ty::TyStr => {\n+                    ty::Slice(_) | ty::Str => {\n                         scalar_unit(Int(dl.ptr_sized_integer(), false))\n                     }\n                     ty::Dynamic(..) => {\n@@ -577,7 +577,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                     size: Size::ZERO\n                 })\n             }\n-            ty::TyStr => {\n+            ty::Str => {\n                 tcx.intern_layout(LayoutDetails {\n                     variants: Variants::Single { index: 0 },\n                     fields: FieldPlacement::Array {\n@@ -1582,11 +1582,11 @@ impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n     fn field(this: TyLayout<'tcx>, cx: C, i: usize) -> C::TyLayout {\n         let tcx = cx.tcx();\n         cx.layout_of(match this.ty.sty {\n-            ty::TyBool |\n-            ty::TyChar |\n-            ty::TyInt(_) |\n-            ty::TyUint(_) |\n-            ty::TyFloat(_) |\n+            ty::Bool |\n+            ty::Char |\n+            ty::Int(_) |\n+            ty::Uint(_) |\n+            ty::Float(_) |\n             ty::FnPtr(_) |\n             ty::Never |\n             ty::FnDef(..) |\n@@ -1620,7 +1620,7 @@ impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n \n                 match tcx.struct_tail(pointee).sty {\n                     ty::Slice(_) |\n-                    ty::TyStr => tcx.types.usize,\n+                    ty::Str => tcx.types.usize,\n                     ty::Dynamic(data, _) => {\n                         let trait_def_id = data.principal().unwrap().def_id();\n                         let num_fns: u64 = crate::traits::supertrait_def_ids(tcx, trait_def_id)\n@@ -1648,7 +1648,7 @@ impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n             // Arrays and slices.\n             ty::Array(element, _) |\n             ty::Slice(element) => element,\n-            ty::TyStr => tcx.types.u8,\n+            ty::Str => tcx.types.u8,\n \n             // Tuples, generators and closures.\n             ty::Closure(def_id, ref substs) => {"}, {"sha": "8d5006d17b3abe875827916ba5e57f5007259e82", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -542,11 +542,11 @@ impl<'tcx> Hash for TyS<'tcx> {\n impl<'tcx> TyS<'tcx> {\n     pub fn is_primitive_ty(&self) -> bool {\n         match self.sty {\n-            TyKind::TyBool |\n-                TyKind::TyChar |\n-                TyKind::TyInt(_) |\n-                TyKind::TyUint(_) |\n-                TyKind::TyFloat(_) |\n+            TyKind::Bool |\n+                TyKind::Char |\n+                TyKind::Int(_) |\n+                TyKind::Uint(_) |\n+                TyKind::Float(_) |\n                 TyKind::Infer(InferTy::IntVar(_)) |\n                 TyKind::Infer(InferTy::FloatVar(_)) |\n                 TyKind::Infer(InferTy::FreshIntTy(_)) |\n@@ -2230,13 +2230,13 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                                ty: Ty<'tcx>)\n                                -> Vec<Ty<'tcx>> {\n         let result = match ty.sty {\n-            TyBool | TyChar | TyInt(..) | TyUint(..) | TyFloat(..) |\n+            Bool | Char | Int(..) | Uint(..) | Float(..) |\n             RawPtr(..) | Ref(..) | FnDef(..) | FnPtr(_) |\n             Array(..) | Closure(..) | Generator(..) | Never => {\n                 vec![]\n             }\n \n-            TyStr |\n+            Str |\n             Dynamic(..) |\n             Slice(_) |\n             Foreign(..) |"}, {"sha": "5171bfb7e06083e62e1bd58216e5effd65ce7a67", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -137,16 +137,16 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             // the type and then visits the types that are lexically\n             // contained within. (The comments refer to relevant rules\n             // from RFC1214.)\n-            ty::TyBool |            // OutlivesScalar\n-            ty::TyChar |            // OutlivesScalar\n-            ty::TyInt(..) |         // OutlivesScalar\n-            ty::TyUint(..) |        // OutlivesScalar\n-            ty::TyFloat(..) |       // OutlivesScalar\n+            ty::Bool |            // OutlivesScalar\n+            ty::Char |            // OutlivesScalar\n+            ty::Int(..) |         // OutlivesScalar\n+            ty::Uint(..) |        // OutlivesScalar\n+            ty::Float(..) |       // OutlivesScalar\n             ty::Never |           // ...\n             ty::Adt(..) |         // OutlivesNominalType\n             ty::Anon(..) |        // OutlivesNominalType (ish)\n             ty::Foreign(..) |     // OutlivesNominalType\n-            ty::TyStr |             // OutlivesScalar (ish)\n+            ty::Str |             // OutlivesScalar (ish)\n             ty::Array(..) |       // ...\n             ty::Slice(..) |       // ...\n             ty::RawPtr(..) |      // ..."}, {"sha": "d72e48c04fed4ed5ea0bb98e6c15ee05b6b0a2d0", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -376,12 +376,12 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n         }\n \n         (&ty::Never, _) |\n-        (&ty::TyChar, _) |\n-        (&ty::TyBool, _) |\n-        (&ty::TyInt(_), _) |\n-        (&ty::TyUint(_), _) |\n-        (&ty::TyFloat(_), _) |\n-        (&ty::TyStr, _)\n+        (&ty::Char, _) |\n+        (&ty::Bool, _) |\n+        (&ty::Int(_), _) |\n+        (&ty::Uint(_), _) |\n+        (&ty::Float(_), _) |\n+        (&ty::Str, _)\n             if a == b =>\n         {\n             Ok(a)"}, {"sha": "09ec6c79139415aae83a84ed7d74e95325cf37fb", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -860,8 +860,8 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::Closure(did, substs) => ty::Closure(did, substs.fold_with(folder)),\n             ty::Projection(ref data) => ty::Projection(data.fold_with(folder)),\n             ty::Anon(did, substs) => ty::Anon(did, substs.fold_with(folder)),\n-            ty::TyBool | ty::TyChar | ty::TyStr | ty::TyInt(_) |\n-            ty::TyUint(_) | ty::TyFloat(_) | ty::Error | ty::Infer(_) |\n+            ty::Bool | ty::Char | ty::Str | ty::Int(_) |\n+            ty::Uint(_) | ty::Float(_) | ty::Error | ty::Infer(_) |\n             ty::Param(..) | ty::Never | ty::Foreign(..) => return self\n         };\n \n@@ -895,8 +895,8 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::Closure(_did, ref substs) => substs.visit_with(visitor),\n             ty::Projection(ref data) => data.visit_with(visitor),\n             ty::Anon(_, ref substs) => substs.visit_with(visitor),\n-            ty::TyBool | ty::TyChar | ty::TyStr | ty::TyInt(_) |\n-            ty::TyUint(_) | ty::TyFloat(_) | ty::Error | ty::Infer(_) |\n+            ty::Bool | ty::Char | ty::Str | ty::Int(_) |\n+            ty::Uint(_) | ty::Float(_) | ty::Error | ty::Infer(_) |\n             ty::Param(..) | ty::Never | ty::Foreign(..) => false,\n         }\n     }"}, {"sha": "7c7ee9b330ecccce65f1e55853b91c57f33cb5d5", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -84,20 +84,20 @@ impl BoundRegion {\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub enum TyKind<'tcx> {\n     /// The primitive boolean type. Written as `bool`.\n-    TyBool,\n+    Bool,\n \n     /// The primitive character type; holds a Unicode scalar value\n     /// (a non-surrogate code point).  Written as `char`.\n-    TyChar,\n+    Char,\n \n     /// A primitive signed integer type. For example, `i32`.\n-    TyInt(ast::IntTy),\n+    Int(ast::IntTy),\n \n     /// A primitive unsigned integer type. For example, `u32`.\n-    TyUint(ast::UintTy),\n+    Uint(ast::UintTy),\n \n     /// A primitive floating-point type. For example, `f64`.\n-    TyFloat(ast::FloatTy),\n+    Float(ast::FloatTy),\n \n     /// Structures, enumerations and unions.\n     ///\n@@ -110,7 +110,7 @@ pub enum TyKind<'tcx> {\n     Foreign(DefId),\n \n     /// The pointee of a string slice. Written as `str`.\n-    TyStr,\n+    Str,\n \n     /// An array with the given length. Written as `[T; n]`.\n     Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),\n@@ -1483,7 +1483,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n \n     pub fn is_primitive(&self) -> bool {\n         match self.sty {\n-            TyBool | TyChar | TyInt(_) | TyUint(_) | TyFloat(_) => true,\n+            Bool | Char | Int(_) | Uint(_) | Float(_) => true,\n             _ => false,\n         }\n     }\n@@ -1510,7 +1510,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n-    pub fn is_bool(&self) -> bool { self.sty == TyBool }\n+    pub fn is_bool(&self) -> bool { self.sty == Bool }\n \n     pub fn is_param(&self, index: u32) -> bool {\n         match self.sty {\n@@ -1529,7 +1529,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     pub fn is_slice(&self) -> bool {\n         match self.sty {\n             RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => match ty.sty {\n-                Slice(_) | TyStr => true,\n+                Slice(_) | Str => true,\n                 _ => false,\n             },\n             _ => false\n@@ -1547,7 +1547,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     pub fn sequence_element_type(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx> {\n         match self.sty {\n             Array(ty, _) | Slice(ty) => ty,\n-            TyStr => tcx.mk_mach_uint(ast::UintTy::U8),\n+            Str => tcx.mk_mach_uint(ast::UintTy::U8),\n             _ => bug!(\"sequence_element_type called on non-sequence value: {}\", self),\n         }\n     }\n@@ -1610,7 +1610,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     /// contents are abstract to rustc.)\n     pub fn is_scalar(&self) -> bool {\n         match self.sty {\n-            TyBool | TyChar | TyInt(_) | TyFloat(_) | TyUint(_) |\n+            Bool | Char | Int(_) | Float(_) | Uint(_) |\n             Infer(IntVar(_)) | Infer(FloatVar(_)) |\n             FnDef(..) | FnPtr(_) | RawPtr(_) => true,\n             _ => false\n@@ -1620,7 +1620,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     /// Returns true if this type is a floating point type and false otherwise.\n     pub fn is_floating_point(&self) -> bool {\n         match self.sty {\n-            TyFloat(_) |\n+            Float(_) |\n             Infer(FloatVar(_)) => true,\n             _ => false,\n         }\n@@ -1658,7 +1658,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n \n     pub fn is_integral(&self) -> bool {\n         match self.sty {\n-            Infer(IntVar(_)) | TyInt(_) | TyUint(_) => true,\n+            Infer(IntVar(_)) | Int(_) | Uint(_) => true,\n             _ => false\n         }\n     }\n@@ -1681,14 +1681,14 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n \n     pub fn is_char(&self) -> bool {\n         match self.sty {\n-            TyChar => true,\n+            Char => true,\n             _ => false,\n         }\n     }\n \n     pub fn is_fp(&self) -> bool {\n         match self.sty {\n-            Infer(FloatVar(_)) | TyFloat(_) => true,\n+            Infer(FloatVar(_)) | Float(_) => true,\n             _ => false\n         }\n     }\n@@ -1699,15 +1699,15 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n \n     pub fn is_signed(&self) -> bool {\n         match self.sty {\n-            TyInt(_) => true,\n+            Int(_) => true,\n             _ => false,\n         }\n     }\n \n     pub fn is_machine(&self) -> bool {\n         match self.sty {\n-            TyInt(ast::IntTy::Isize) | TyUint(ast::UintTy::Usize) => false,\n-            TyInt(..) | TyUint(..) | TyFloat(..) => true,\n+            Int(ast::IntTy::Isize) | Uint(ast::UintTy::Usize) => false,\n+            Int(..) | Uint(..) | Float(..) => true,\n             _ => false,\n         }\n     }\n@@ -1804,12 +1804,12 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             FnDef(..) |\n             FnPtr(_) |\n             GeneratorWitness(..) |\n-            TyBool |\n-            TyChar |\n-            TyInt(_) |\n-            TyUint(_) |\n-            TyFloat(_) |\n-            TyStr |\n+            Bool |\n+            Char |\n+            Int(_) |\n+            Uint(_) |\n+            Float(_) |\n+            Str |\n             Array(..) |\n             Slice(_) |\n             RawPtr(_) |\n@@ -1838,7 +1838,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     /// is complete, that type variable will be unified.\n     pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {\n         match self.sty {\n-            TyInt(int_ty) => match int_ty {\n+            Int(int_ty) => match int_ty {\n                 ast::IntTy::I8 => Some(ty::ClosureKind::Fn),\n                 ast::IntTy::I16 => Some(ty::ClosureKind::FnMut),\n                 ast::IntTy::I32 => Some(ty::ClosureKind::FnOnce),\n@@ -1860,14 +1860,14 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     pub fn is_trivially_sized(&self, tcx: TyCtxt<'_, '_, 'tcx>) -> bool {\n         match self.sty {\n             ty::Infer(ty::IntVar(_)) | ty::Infer(ty::FloatVar(_)) |\n-            ty::TyUint(_) | ty::TyInt(_) | ty::TyBool | ty::TyFloat(_) |\n+            ty::Uint(_) | ty::Int(_) | ty::Bool | ty::Float(_) |\n             ty::FnDef(..) | ty::FnPtr(_) | ty::RawPtr(..) |\n-            ty::TyChar | ty::Ref(..) | ty::Generator(..) |\n+            ty::Char | ty::Ref(..) | ty::Generator(..) |\n             ty::GeneratorWitness(..) | ty::Array(..) | ty::Closure(..) |\n             ty::Never | ty::Error =>\n                 true,\n \n-            ty::TyStr | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) =>\n+            ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) =>\n                 false,\n \n             ty::Tuple(tys) =>"}, {"sha": "44f5ab141fa4a0ce684a479d0e4afa77176dbaf8", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -41,7 +41,7 @@ pub struct Discr<'tcx> {\n impl<'tcx> fmt::Display for Discr<'tcx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         match self.ty.sty {\n-            ty::TyInt(ity) => {\n+            ty::Int(ity) => {\n                 let bits = ty::tls::with(|tcx| {\n                     Integer::from_attr(tcx, SignedInt(ity)).size().bits()\n                 });\n@@ -62,8 +62,8 @@ impl<'tcx> Discr<'tcx> {\n     }\n     pub fn checked_add<'a, 'gcx>(self, tcx: TyCtxt<'a, 'gcx, 'tcx>, n: u128) -> (Self, bool) {\n         let (int, signed) = match self.ty.sty {\n-            TyInt(ity) => (Integer::from_attr(tcx, SignedInt(ity)), true),\n-            TyUint(uty) => (Integer::from_attr(tcx, UnsignedInt(uty)), false),\n+            Int(ity) => (Integer::from_attr(tcx, SignedInt(ity)), true),\n+            Uint(uty) => (Integer::from_attr(tcx, UnsignedInt(uty)), false),\n             _ => bug!(\"non integer discriminant\"),\n         };\n \n@@ -193,8 +193,8 @@ impl<'tcx> ty::ParamEnv<'tcx> {\n             let (adt, substs) = match self_type.sty {\n                 // These types used to have a builtin impl.\n                 // Now libcore provides that impl.\n-                ty::TyUint(_) | ty::TyInt(_) | ty::TyBool | ty::TyFloat(_) |\n-                ty::TyChar | ty::RawPtr(..) | ty::Never |\n+                ty::Uint(_) | ty::Int(_) | ty::Bool | ty::Float(_) |\n+                ty::Char | ty::RawPtr(..) | ty::Never |\n                 ty::Ref(_, _, hir::MutImmutable) => return Ok(()),\n \n                 ty::Adt(adt, substs) => (adt, substs),\n@@ -925,9 +925,9 @@ fn needs_drop_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     match ty.sty {\n         // Fast-path for primitive types\n         ty::Infer(ty::FreshIntTy(_)) | ty::Infer(ty::FreshFloatTy(_)) |\n-        ty::TyBool | ty::TyInt(_) | ty::TyUint(_) | ty::TyFloat(_) | ty::Never |\n-        ty::FnDef(..) | ty::FnPtr(_) | ty::TyChar | ty::GeneratorWitness(..) |\n-        ty::RawPtr(_) | ty::Ref(..) | ty::TyStr => false,\n+        ty::Bool | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Never |\n+        ty::FnDef(..) | ty::FnPtr(_) | ty::Char | ty::GeneratorWitness(..) |\n+        ty::RawPtr(_) | ty::Ref(..) | ty::Str => false,\n \n         // Foreign types can never have destructors\n         ty::Foreign(..) => false,"}, {"sha": "e2df7c32f587b51e686916e70d524a37b7f4e7f8", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -81,8 +81,8 @@ pub fn walk_shallow<'tcx>(ty: Ty<'tcx>) -> AccIntoIter<TypeWalkerArray<'tcx>> {\n // types as they are written).\n fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n     match parent_ty.sty {\n-        ty::TyBool | ty::TyChar | ty::TyInt(_) | ty::TyUint(_) | ty::TyFloat(_) |\n-        ty::TyStr | ty::Infer(_) | ty::Param(_) | ty::Never | ty::Error |\n+        ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) |\n+        ty::Str | ty::Infer(_) | ty::Param(_) | ty::Never | ty::Error |\n         ty::Foreign(..) => {\n         }\n         ty::Array(ty, len) => {"}, {"sha": "fc55d8f34a23fcff64a51de751dd0e2b53450892", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -248,13 +248,13 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n         let param_env = self.param_env;\n         while let Some(ty) = subtys.next() {\n             match ty.sty {\n-                ty::TyBool |\n-                ty::TyChar |\n-                ty::TyInt(..) |\n-                ty::TyUint(..) |\n-                ty::TyFloat(..) |\n+                ty::Bool |\n+                ty::Char |\n+                ty::Int(..) |\n+                ty::Uint(..) |\n+                ty::Float(..) |\n                 ty::Error |\n-                ty::TyStr |\n+                ty::Str |\n                 ty::GeneratorWitness(..) |\n                 ty::Never |\n                 ty::Param(_) |"}, {"sha": "0f15c75c2fb36115bdc221e7033ed82b4ab43843", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -14,11 +14,11 @@ use mir::interpret::ConstValue;\n use middle::region::{self, BlockRemainder};\n use ty::subst::{self, Subst};\n use ty::{BrAnon, BrEnv, BrFresh, BrNamed};\n-use ty::{TyBool, TyChar, Adt};\n-use ty::{Error, TyStr, Array, Slice, TyFloat, FnDef, FnPtr};\n+use ty::{Bool, Char, Adt};\n+use ty::{Error, Str, Array, Slice, Float, FnDef, FnPtr};\n use ty::{Param, RawPtr, Ref, Never, Tuple};\n use ty::{Closure, Generator, GeneratorWitness, Foreign, Projection, Anon};\n-use ty::{Dynamic, TyInt, TyUint, Infer};\n+use ty::{Dynamic, Int, Uint, Infer};\n use ty::{self, RegionVid, Ty, TyCtxt, TypeFoldable, GenericParamCount, GenericParamDefKind};\n use util::nodemap::FxHashSet;\n \n@@ -1032,11 +1032,11 @@ define_print! {\n     ('tcx) ty::TyKind<'tcx>, (self, f, cx) {\n         display {\n             match *self {\n-                TyBool => write!(f, \"bool\"),\n-                TyChar => write!(f, \"char\"),\n-                TyInt(t) => write!(f, \"{}\", t.ty_to_string()),\n-                TyUint(t) => write!(f, \"{}\", t.ty_to_string()),\n-                TyFloat(t) => write!(f, \"{}\", t.ty_to_string()),\n+                Bool => write!(f, \"bool\"),\n+                Char => write!(f, \"char\"),\n+                Int(t) => write!(f, \"{}\", t.ty_to_string()),\n+                Uint(t) => write!(f, \"{}\", t.ty_to_string()),\n+                Float(t) => write!(f, \"{}\", t.ty_to_string()),\n                 RawPtr(ref tm) => {\n                     write!(f, \"*{} \", match tm.mutbl {\n                         hir::MutMutable => \"mut\",\n@@ -1154,7 +1154,7 @@ define_print! {\n                         Ok(())\n                     })\n                 }\n-                TyStr => write!(f, \"str\"),\n+                Str => write!(f, \"str\"),\n                 Generator(did, substs, movability) => ty::tls::with(|tcx| {\n                     let upvar_tys = substs.upvar_tys(did, tcx);\n                     let witness = substs.witness(did, tcx);"}, {"sha": "009c6da9d8d15a35f0bf60cbf96cb09834940e52", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -166,12 +166,12 @@ pub fn compare_simd_types(\n     op: hir::BinOpKind\n ) -> &'ll Value {\n     let signed = match t.sty {\n-        ty::TyFloat(_) => {\n+        ty::Float(_) => {\n             let cmp = bin_op_to_fcmp_predicate(op);\n             return bx.sext(bx.fcmp(cmp, lhs, rhs), ret_ty);\n         },\n-        ty::TyUint(_) => false,\n-        ty::TyInt(_) => true,\n+        ty::Uint(_) => false,\n+        ty::Int(_) => true,\n         _ => bug!(\"compare_simd_types: invalid SIMD type\"),\n     };\n "}, {"sha": "9547f4a190e7896d721cda285efb8217b05fc674", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -435,7 +435,7 @@ impl<'b, 'tcx> CodegenCx<'b, 'tcx> {\n         let tail = self.tcx.struct_tail(ty);\n         match tail.sty {\n             ty::Foreign(..) => false,\n-            ty::TyStr | ty::Slice(..) | ty::Dynamic(..) => true,\n+            ty::Str | ty::Slice(..) | ty::Dynamic(..) => true,\n             _ => bug!(\"unexpected unsized tail: {:?}\", tail.sty),\n         }\n     }"}, {"sha": "c7a515016c01b0260679032b3bf40665df868e20", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -537,7 +537,7 @@ pub fn type_metadata(\n             ty::Slice(typ) => {\n                 Ok(vec_slice_metadata(cx, t, typ, unique_type_id, usage_site_span))\n             }\n-            ty::TyStr => {\n+            ty::Str => {\n                 Ok(vec_slice_metadata(cx, t, cx.tcx.types.u8, unique_type_id, usage_site_span))\n             }\n             ty::Dynamic(..) => {\n@@ -563,11 +563,11 @@ pub fn type_metadata(\n \n     let MetadataCreationResult { metadata, already_stored_in_typemap } = match t.sty {\n         ty::Never    |\n-        ty::TyBool     |\n-        ty::TyChar     |\n-        ty::TyInt(_)   |\n-        ty::TyUint(_)  |\n-        ty::TyFloat(_) => {\n+        ty::Bool     |\n+        ty::Char     |\n+        ty::Int(_)   |\n+        ty::Uint(_)  |\n+        ty::Float(_) => {\n             MetadataCreationResult::new(basic_type_metadata(cx, t), false)\n         }\n         ty::Tuple(ref elements) if elements.is_empty() => {\n@@ -577,7 +577,7 @@ pub fn type_metadata(\n         ty::Slice(typ) => {\n             fixed_vec_metadata(cx, unique_type_id, t, typ, usage_site_span)\n         }\n-        ty::TyStr => {\n+        ty::Str => {\n             fixed_vec_metadata(cx, unique_type_id, t, cx.tcx.types.i8, usage_site_span)\n         }\n         ty::Dynamic(..) => {\n@@ -768,15 +768,15 @@ fn basic_type_metadata(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -> &'ll DIType {\n         ty::Never => (\"!\", DW_ATE_unsigned),\n         ty::Tuple(ref elements) if elements.is_empty() =>\n             (\"()\", DW_ATE_unsigned),\n-        ty::TyBool => (\"bool\", DW_ATE_boolean),\n-        ty::TyChar => (\"char\", DW_ATE_unsigned_char),\n-        ty::TyInt(int_ty) => {\n+        ty::Bool => (\"bool\", DW_ATE_boolean),\n+        ty::Char => (\"char\", DW_ATE_unsigned_char),\n+        ty::Int(int_ty) => {\n             (int_ty.ty_to_string(), DW_ATE_signed)\n         },\n-        ty::TyUint(uint_ty) => {\n+        ty::Uint(uint_ty) => {\n             (uint_ty.ty_to_string(), DW_ATE_unsigned)\n         },\n-        ty::TyFloat(float_ty) => {\n+        ty::Float(float_ty) => {\n             (float_ty.ty_to_string(), DW_ATE_float)\n         },\n         _ => bug!(\"debuginfo::basic_type_metadata - t is invalid type\")"}, {"sha": "a08b964cd721d6b1d3a6ec7fe95f7850e0416fd3", "filename": "src/librustc_codegen_llvm/debuginfo/type_names.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -41,13 +41,13 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n     let cpp_like_names = cx.sess().target.target.options.is_like_msvc;\n \n     match t.sty {\n-        ty::TyBool => output.push_str(\"bool\"),\n-        ty::TyChar => output.push_str(\"char\"),\n-        ty::TyStr => output.push_str(\"str\"),\n+        ty::Bool => output.push_str(\"bool\"),\n+        ty::Char => output.push_str(\"char\"),\n+        ty::Str => output.push_str(\"str\"),\n         ty::Never => output.push_str(\"!\"),\n-        ty::TyInt(int_ty) => output.push_str(int_ty.ty_to_string()),\n-        ty::TyUint(uint_ty) => output.push_str(uint_ty.ty_to_string()),\n-        ty::TyFloat(float_ty) => output.push_str(float_ty.ty_to_string()),\n+        ty::Int(int_ty) => output.push_str(int_ty.ty_to_string()),\n+        ty::Uint(uint_ty) => output.push_str(uint_ty.ty_to_string()),\n+        ty::Float(float_ty) => output.push_str(float_ty.ty_to_string()),\n         ty::Foreign(def_id) => push_item_name(cx, def_id, qualified, output),\n         ty::Adt(def, substs) => {\n             push_item_name(cx, def.did, qualified, output);"}, {"sha": "ff33cec043729eaacffd4a1dddce437e147da263", "filename": "src/librustc_codegen_llvm/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_codegen_llvm%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_codegen_llvm%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fglue.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -40,7 +40,7 @@ pub fn size_and_align_of_dst(bx: &Builder<'_, 'll, 'tcx>, t: Ty<'tcx>, info: Opt\n             let vtable = info.unwrap();\n             (meth::SIZE.get_usize(bx, vtable), meth::ALIGN.get_usize(bx, vtable))\n         }\n-        ty::Slice(_) | ty::TyStr => {\n+        ty::Slice(_) | ty::Str => {\n             let unit = t.sequence_element_type(bx.tcx());\n             // The info in this case is the length of the str, so the size is that\n             // times the unit size."}, {"sha": "5d00e0807991e1d6607571237c0a8e7be911cb70", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -1149,7 +1149,7 @@ fn generic_simd_intrinsic(\n                  m_len, v_len\n         );\n         match m_elem_ty.sty {\n-            ty::TyInt(_) => {},\n+            ty::Int(_) => {},\n             _ => {\n                 return_error!(\"mask element type is `{}`, expected `i_`\", m_elem_ty);\n             }\n@@ -1191,7 +1191,7 @@ fn generic_simd_intrinsic(\n             }\n         }\n         let ety = match in_elem.sty {\n-            ty::TyFloat(f) if f.bit_width() == 32 => {\n+            ty::Float(f) if f.bit_width() == 32 => {\n                 if in_len < 2 || in_len > 16 {\n                     return_error!(\n                         \"unsupported floating-point vector `{}` with length `{}` \\\n@@ -1200,15 +1200,15 @@ fn generic_simd_intrinsic(\n                 }\n                 \"f32\"\n             },\n-            ty::TyFloat(f) if f.bit_width() == 64 => {\n+            ty::Float(f) if f.bit_width() == 64 => {\n                 if in_len < 2 || in_len > 8 {\n                     return_error!(\"unsupported floating-point vector `{}` with length `{}` \\\n                                    out-of-range [2, 8]\",\n                                   in_ty, in_len);\n                 }\n                 \"f64\"\n             },\n-            ty::TyFloat(f) => {\n+            ty::Float(f) => {\n                 return_error!(\"unsupported element type `{}` of floating-point vector `{}`\",\n                               f, in_ty);\n             },\n@@ -1288,9 +1288,9 @@ fn generic_simd_intrinsic(\n     fn llvm_vector_str(elem_ty: ty::Ty, vec_len: usize, no_pointers: usize) -> String {\n         let p0s: String = \"p0\".repeat(no_pointers);\n         match elem_ty.sty {\n-            ty::TyInt(v) => format!(\"v{}{}i{}\", vec_len, p0s, v.bit_width().unwrap()),\n-            ty::TyUint(v) => format!(\"v{}{}i{}\", vec_len, p0s, v.bit_width().unwrap()),\n-            ty::TyFloat(v) => format!(\"v{}{}f{}\", vec_len, p0s, v.bit_width()),\n+            ty::Int(v) => format!(\"v{}{}i{}\", vec_len, p0s, v.bit_width().unwrap()),\n+            ty::Uint(v) => format!(\"v{}{}i{}\", vec_len, p0s, v.bit_width().unwrap()),\n+            ty::Float(v) => format!(\"v{}{}f{}\", vec_len, p0s, v.bit_width()),\n             _ => unreachable!(),\n         }\n     }\n@@ -1299,9 +1299,9 @@ fn generic_simd_intrinsic(\n                       mut no_pointers: usize) -> &'ll Type {\n         // FIXME: use cx.layout_of(ty).llvm_type() ?\n         let mut elem_ty = match elem_ty.sty {\n-            ty::TyInt(v) => Type::int_from_ty(cx, v),\n-            ty::TyUint(v) => Type::uint_from_ty(cx, v),\n-            ty::TyFloat(v) => Type::float_from_ty(cx, v),\n+            ty::Int(v) => Type::int_from_ty(cx, v),\n+            ty::Uint(v) => Type::uint_from_ty(cx, v),\n+            ty::Float(v) => Type::float_from_ty(cx, v),\n             _ => unreachable!(),\n         };\n         while no_pointers > 0 {\n@@ -1376,7 +1376,7 @@ fn generic_simd_intrinsic(\n \n         // The element type of the third argument must be a signed integer type of any width:\n         match arg_tys[2].simd_type(tcx).sty {\n-            ty::TyInt(_) => (),\n+            ty::Int(_) => (),\n             _ => {\n                 require!(false, \"expected element type `{}` of third argument `{}` \\\n                                  to be a signed integer type\",\n@@ -1473,7 +1473,7 @@ fn generic_simd_intrinsic(\n \n         // The element type of the third argument must be a signed integer type of any width:\n         match arg_tys[2].simd_type(tcx).sty {\n-            ty::TyInt(_) => (),\n+            ty::Int(_) => (),\n             _ => {\n                 require!(false, \"expected element type `{}` of third argument `{}` \\\n                                  to be a signed integer type\",\n@@ -1522,7 +1522,7 @@ fn generic_simd_intrinsic(\n                          \"expected return type `{}` (element of input `{}`), found `{}`\",\n                          in_elem, in_ty, ret_ty);\n                 return match in_elem.sty {\n-                    ty::TyInt(_) | ty::TyUint(_) => {\n+                    ty::Int(_) | ty::Uint(_) => {\n                         let r = bx.$integer_reduce(args[0].immediate());\n                         if $ordered {\n                             // if overflow occurs, the result is the\n@@ -1536,7 +1536,7 @@ fn generic_simd_intrinsic(\n                             Ok(bx.$integer_reduce(args[0].immediate()))\n                         }\n                     },\n-                    ty::TyFloat(f) => {\n+                    ty::Float(f) => {\n                         // ordered arithmetic reductions take an accumulator\n                         let acc = if $ordered {\n                             let acc = args[1].immediate();\n@@ -1597,13 +1597,13 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n                          \"expected return type `{}` (element of input `{}`), found `{}`\",\n                          in_elem, in_ty, ret_ty);\n                 return match in_elem.sty {\n-                    ty::TyInt(_i) => {\n+                    ty::Int(_i) => {\n                         Ok(bx.$int_red(args[0].immediate(), true))\n                     },\n-                    ty::TyUint(_u) => {\n+                    ty::Uint(_u) => {\n                         Ok(bx.$int_red(args[0].immediate(), false))\n                     },\n-                    ty::TyFloat(_f) => {\n+                    ty::Float(_f) => {\n                         Ok(bx.$float_red(args[0].immediate()))\n                     }\n                     _ => {\n@@ -1632,7 +1632,7 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n                     args[0].immediate()\n                 } else {\n                     match in_elem.sty {\n-                        ty::TyInt(_) | ty::TyUint(_) => {},\n+                        ty::Int(_) | ty::Uint(_) => {},\n                         _ => {\n                             return_error!(\"unsupported {} from `{}` with element `{}` to `{}`\",\n                                           $name, in_ty, in_elem, ret_ty)\n@@ -1645,7 +1645,7 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n                     bx.trunc(args[0].immediate(), i1xn)\n                 };\n                 return match in_elem.sty {\n-                    ty::TyInt(_) | ty::TyUint(_) => {\n+                    ty::Int(_) | ty::Uint(_) => {\n                         let r = bx.$red(input);\n                         Ok(\n                             if !$boolean {\n@@ -1688,15 +1688,15 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n         let (in_style, in_width) = match in_elem.sty {\n             // vectors of pointer-sized integers should've been\n             // disallowed before here, so this unwrap is safe.\n-            ty::TyInt(i) => (Style::Int(true), i.bit_width().unwrap()),\n-            ty::TyUint(u) => (Style::Int(false), u.bit_width().unwrap()),\n-            ty::TyFloat(f) => (Style::Float, f.bit_width()),\n+            ty::Int(i) => (Style::Int(true), i.bit_width().unwrap()),\n+            ty::Uint(u) => (Style::Int(false), u.bit_width().unwrap()),\n+            ty::Float(f) => (Style::Float, f.bit_width()),\n             _ => (Style::Unsupported, 0)\n         };\n         let (out_style, out_width) = match out_elem.sty {\n-            ty::TyInt(i) => (Style::Int(true), i.bit_width().unwrap()),\n-            ty::TyUint(u) => (Style::Int(false), u.bit_width().unwrap()),\n-            ty::TyFloat(f) => (Style::Float, f.bit_width()),\n+            ty::Int(i) => (Style::Int(true), i.bit_width().unwrap()),\n+            ty::Uint(u) => (Style::Int(false), u.bit_width().unwrap()),\n+            ty::Float(f) => (Style::Float, f.bit_width()),\n             _ => (Style::Unsupported, 0)\n         };\n \n@@ -1757,18 +1757,18 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n         }\n     }\n     arith! {\n-        simd_add: TyUint, TyInt => add, TyFloat => fadd;\n-        simd_sub: TyUint, TyInt => sub, TyFloat => fsub;\n-        simd_mul: TyUint, TyInt => mul, TyFloat => fmul;\n-        simd_div: TyUint => udiv, TyInt => sdiv, TyFloat => fdiv;\n-        simd_rem: TyUint => urem, TyInt => srem, TyFloat => frem;\n-        simd_shl: TyUint, TyInt => shl;\n-        simd_shr: TyUint => lshr, TyInt => ashr;\n-        simd_and: TyUint, TyInt => and;\n-        simd_or: TyUint, TyInt => or;\n-        simd_xor: TyUint, TyInt => xor;\n-        simd_fmax: TyFloat => maxnum;\n-        simd_fmin: TyFloat => minnum;\n+        simd_add: Uint, Int => add, Float => fadd;\n+        simd_sub: Uint, Int => sub, Float => fsub;\n+        simd_mul: Uint, Int => mul, Float => fmul;\n+        simd_div: Uint => udiv, Int => sdiv, Float => fdiv;\n+        simd_rem: Uint => urem, Int => srem, Float => frem;\n+        simd_shl: Uint, Int => shl;\n+        simd_shr: Uint => lshr, Int => ashr;\n+        simd_and: Uint, Int => and;\n+        simd_or: Uint, Int => or;\n+        simd_xor: Uint, Int => xor;\n+        simd_fmax: Float => maxnum;\n+        simd_fmin: Float => minnum;\n     }\n     span_bug!(span, \"unknown SIMD intrinsic\");\n }\n@@ -1779,15 +1779,15 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n // stuffs.\n fn int_type_width_signed(ty: Ty, cx: &CodegenCx) -> Option<(u64, bool)> {\n     match ty.sty {\n-        ty::TyInt(t) => Some((match t {\n+        ty::Int(t) => Some((match t {\n             ast::IntTy::Isize => cx.tcx.sess.target.isize_ty.bit_width().unwrap() as u64,\n             ast::IntTy::I8 => 8,\n             ast::IntTy::I16 => 16,\n             ast::IntTy::I32 => 32,\n             ast::IntTy::I64 => 64,\n             ast::IntTy::I128 => 128,\n         }, true)),\n-        ty::TyUint(t) => Some((match t {\n+        ty::Uint(t) => Some((match t {\n             ast::UintTy::Usize => cx.tcx.sess.target.usize_ty.bit_width().unwrap() as u64,\n             ast::UintTy::U8 => 8,\n             ast::UintTy::U16 => 16,\n@@ -1803,7 +1803,7 @@ fn int_type_width_signed(ty: Ty, cx: &CodegenCx) -> Option<(u64, bool)> {\n // Returns None if the type is not a float\n fn float_type_width<'tcx>(sty: &ty::TyKind<'tcx>) -> Option<u64> {\n     match *sty {\n-        ty::TyFloat(t) => Some(t.bit_width() as u64),\n+        ty::Float(t) => Some(t.bit_width() as u64),\n         _ => None,\n     }\n }"}, {"sha": "ce3292eaa426d0db301ffc021f1aa32e17c96b26", "filename": "src/librustc_codegen_llvm/mir/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -211,7 +211,7 @@ impl PlaceRef<'ll, 'tcx> {\n                 return simple();\n             }\n             _ if !field.is_unsized() => return simple(),\n-            ty::Slice(..) | ty::TyStr | ty::Foreign(..) => return simple(),\n+            ty::Slice(..) | ty::Str | ty::Foreign(..) => return simple(),\n             ty::Adt(def, _) => {\n                 if def.repr.packed() {\n                     // FIXME(eddyb) generalize the adjustment when we"}, {"sha": "25f32360815e7c429d2abc55609e5b09a65a2e2e", "filename": "src/librustc_codegen_llvm/mir/rvalue.rs", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -753,60 +753,60 @@ enum OverflowOp {\n fn get_overflow_intrinsic(oop: OverflowOp, bx: &Builder<'_, 'll, '_>, ty: Ty) -> &'ll Value {\n     use syntax::ast::IntTy::*;\n     use syntax::ast::UintTy::*;\n-    use rustc::ty::{TyInt, TyUint};\n+    use rustc::ty::{Int, Uint};\n \n     let tcx = bx.tcx();\n \n     let new_sty = match ty.sty {\n-        TyInt(Isize) => TyInt(tcx.sess.target.isize_ty),\n-        TyUint(Usize) => TyUint(tcx.sess.target.usize_ty),\n-        ref t @ TyUint(_) | ref t @ TyInt(_) => t.clone(),\n+        Int(Isize) => Int(tcx.sess.target.isize_ty),\n+        Uint(Usize) => Uint(tcx.sess.target.usize_ty),\n+        ref t @ Uint(_) | ref t @ Int(_) => t.clone(),\n         _ => panic!(\"tried to get overflow intrinsic for op applied to non-int type\")\n     };\n \n     let name = match oop {\n         OverflowOp::Add => match new_sty {\n-            TyInt(I8) => \"llvm.sadd.with.overflow.i8\",\n-            TyInt(I16) => \"llvm.sadd.with.overflow.i16\",\n-            TyInt(I32) => \"llvm.sadd.with.overflow.i32\",\n-            TyInt(I64) => \"llvm.sadd.with.overflow.i64\",\n-            TyInt(I128) => \"llvm.sadd.with.overflow.i128\",\n-\n-            TyUint(U8) => \"llvm.uadd.with.overflow.i8\",\n-            TyUint(U16) => \"llvm.uadd.with.overflow.i16\",\n-            TyUint(U32) => \"llvm.uadd.with.overflow.i32\",\n-            TyUint(U64) => \"llvm.uadd.with.overflow.i64\",\n-            TyUint(U128) => \"llvm.uadd.with.overflow.i128\",\n+            Int(I8) => \"llvm.sadd.with.overflow.i8\",\n+            Int(I16) => \"llvm.sadd.with.overflow.i16\",\n+            Int(I32) => \"llvm.sadd.with.overflow.i32\",\n+            Int(I64) => \"llvm.sadd.with.overflow.i64\",\n+            Int(I128) => \"llvm.sadd.with.overflow.i128\",\n+\n+            Uint(U8) => \"llvm.uadd.with.overflow.i8\",\n+            Uint(U16) => \"llvm.uadd.with.overflow.i16\",\n+            Uint(U32) => \"llvm.uadd.with.overflow.i32\",\n+            Uint(U64) => \"llvm.uadd.with.overflow.i64\",\n+            Uint(U128) => \"llvm.uadd.with.overflow.i128\",\n \n             _ => unreachable!(),\n         },\n         OverflowOp::Sub => match new_sty {\n-            TyInt(I8) => \"llvm.ssub.with.overflow.i8\",\n-            TyInt(I16) => \"llvm.ssub.with.overflow.i16\",\n-            TyInt(I32) => \"llvm.ssub.with.overflow.i32\",\n-            TyInt(I64) => \"llvm.ssub.with.overflow.i64\",\n-            TyInt(I128) => \"llvm.ssub.with.overflow.i128\",\n-\n-            TyUint(U8) => \"llvm.usub.with.overflow.i8\",\n-            TyUint(U16) => \"llvm.usub.with.overflow.i16\",\n-            TyUint(U32) => \"llvm.usub.with.overflow.i32\",\n-            TyUint(U64) => \"llvm.usub.with.overflow.i64\",\n-            TyUint(U128) => \"llvm.usub.with.overflow.i128\",\n+            Int(I8) => \"llvm.ssub.with.overflow.i8\",\n+            Int(I16) => \"llvm.ssub.with.overflow.i16\",\n+            Int(I32) => \"llvm.ssub.with.overflow.i32\",\n+            Int(I64) => \"llvm.ssub.with.overflow.i64\",\n+            Int(I128) => \"llvm.ssub.with.overflow.i128\",\n+\n+            Uint(U8) => \"llvm.usub.with.overflow.i8\",\n+            Uint(U16) => \"llvm.usub.with.overflow.i16\",\n+            Uint(U32) => \"llvm.usub.with.overflow.i32\",\n+            Uint(U64) => \"llvm.usub.with.overflow.i64\",\n+            Uint(U128) => \"llvm.usub.with.overflow.i128\",\n \n             _ => unreachable!(),\n         },\n         OverflowOp::Mul => match new_sty {\n-            TyInt(I8) => \"llvm.smul.with.overflow.i8\",\n-            TyInt(I16) => \"llvm.smul.with.overflow.i16\",\n-            TyInt(I32) => \"llvm.smul.with.overflow.i32\",\n-            TyInt(I64) => \"llvm.smul.with.overflow.i64\",\n-            TyInt(I128) => \"llvm.smul.with.overflow.i128\",\n-\n-            TyUint(U8) => \"llvm.umul.with.overflow.i8\",\n-            TyUint(U16) => \"llvm.umul.with.overflow.i16\",\n-            TyUint(U32) => \"llvm.umul.with.overflow.i32\",\n-            TyUint(U64) => \"llvm.umul.with.overflow.i64\",\n-            TyUint(U128) => \"llvm.umul.with.overflow.i128\",\n+            Int(I8) => \"llvm.smul.with.overflow.i8\",\n+            Int(I16) => \"llvm.smul.with.overflow.i16\",\n+            Int(I32) => \"llvm.smul.with.overflow.i32\",\n+            Int(I64) => \"llvm.smul.with.overflow.i64\",\n+            Int(I128) => \"llvm.smul.with.overflow.i128\",\n+\n+            Uint(U8) => \"llvm.umul.with.overflow.i8\",\n+            Uint(U16) => \"llvm.umul.with.overflow.i16\",\n+            Uint(U32) => \"llvm.umul.with.overflow.i32\",\n+            Uint(U64) => \"llvm.umul.with.overflow.i64\",\n+            Uint(U128) => \"llvm.umul.with.overflow.i128\",\n \n             _ => unreachable!(),\n         },"}, {"sha": "e6907030ae6352e59ac6c48df0926838bbab49fc", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -63,7 +63,7 @@ fn uncached_llvm_type<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         // in problematically distinct types due to HRTB and subtyping (see #47638).\n         // ty::Dynamic(..) |\n         ty::Foreign(..) |\n-        ty::TyStr => {\n+        ty::Str => {\n             let mut name = String::with_capacity(32);\n             let printer = DefPathBasedNames::new(cx.tcx, true, true);\n             printer.push_type_name(layout.ty, &mut name);"}, {"sha": "d9f6e7de5b5e406cdce6748190c4b8ad08233caa", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -84,7 +84,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n             }\n             hir::ExprKind::Lit(ref lit) => {\n                 match cx.tables.node_id_to_type(e.hir_id).sty {\n-                    ty::TyInt(t) => {\n+                    ty::Int(t) => {\n                         match lit.node {\n                             ast::LitKind::Int(v, ast::LitIntType::Signed(_)) |\n                             ast::LitKind::Int(v, ast::LitIntType::Unsuffixed) => {\n@@ -104,7 +104,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                                         report_bin_hex_error(\n                                             cx,\n                                             e,\n-                                            ty::TyInt(t),\n+                                            ty::Int(t),\n                                             repr_str,\n                                             v,\n                                             negative,\n@@ -122,7 +122,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                             _ => bug!(),\n                         };\n                     }\n-                    ty::TyUint(t) => {\n+                    ty::Uint(t) => {\n                         let uint_type = if let ast::UintTy::Usize = t {\n                             cx.sess().target.usize_ty\n                         } else {\n@@ -139,7 +139,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                             let parent_id = cx.tcx.hir.get_parent_node(e.id);\n                             if let hir_map::NodeExpr(parent_expr) = cx.tcx.hir.get(parent_id) {\n                                 if let hir::ExprKind::Cast(..) = parent_expr.node {\n-                                    if let ty::TyChar = cx.tables.expr_ty(parent_expr).sty {\n+                                    if let ty::Char = cx.tables.expr_ty(parent_expr).sty {\n                                         let mut err = cx.struct_span_lint(\n                                                              OVERFLOWING_LITERALS,\n                                                              parent_expr.span,\n@@ -159,7 +159,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                                 report_bin_hex_error(\n                                     cx,\n                                     e,\n-                                    ty::TyUint(t),\n+                                    ty::Uint(t),\n                                     repr_str,\n                                     lit_val,\n                                     false,\n@@ -173,7 +173,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                             );\n                         }\n                     }\n-                    ty::TyFloat(t) => {\n+                    ty::Float(t) => {\n                         let is_infinite = match lit.node {\n                             ast::LitKind::Float(v, _) |\n                             ast::LitKind::FloatUnsuffixed(v) => {\n@@ -256,7 +256,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n             // the comparison\n             let norm_binop = if swap { rev_binop(binop) } else { binop };\n             match cx.tables.node_id_to_type(expr.hir_id).sty {\n-                ty::TyInt(int_ty) => {\n+                ty::Int(int_ty) => {\n                     let (min, max) = int_ty_range(int_ty);\n                     let lit_val: i128 = match lit.node {\n                         hir::ExprKind::Lit(ref li) => {\n@@ -270,7 +270,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                     };\n                     is_valid(norm_binop, lit_val, min, max)\n                 }\n-                ty::TyUint(uint_ty) => {\n+                ty::Uint(uint_ty) => {\n                     let (min, max) :(u128, u128) = uint_ty_range(uint_ty);\n                     let lit_val: u128 = match lit.node {\n                         hir::ExprKind::Lit(ref li) => {\n@@ -348,13 +348,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                 }\n             }\n             match t {\n-                &ty::TyInt(i) => find_fit!(i, val, negative,\n+                &ty::Int(i) => find_fit!(i, val, negative,\n                               I8 => [U8] => [I16, I32, I64, I128],\n                               I16 => [U16] => [I32, I64, I128],\n                               I32 => [U32] => [I64, I128],\n                               I64 => [U64] => [I128],\n                               I128 => [U128] => []),\n-                &ty::TyUint(u) => find_fit!(u, val, negative,\n+                &ty::Uint(u) => find_fit!(u, val, negative,\n                               U8 => [U8, U16, U32, U64, U128] => [],\n                               U16 => [U16, U32, U64, U128] => [],\n                               U32 => [U32, U64, U128] => [],\n@@ -373,13 +373,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n             negative: bool,\n         ) {\n             let (t, actually) = match ty {\n-                ty::TyInt(t) => {\n+                ty::Int(t) => {\n                     let ity = attr::IntType::SignedInt(t);\n                     let bits = layout::Integer::from_attr(cx.tcx, ity).size().bits();\n                     let actually = (val << (128 - bits)) as i128 >> (128 - bits);\n                     (format!(\"{:?}\", t), actually.to_string())\n                 }\n-                ty::TyUint(t) => {\n+                ty::Uint(t) => {\n                     let ity = attr::IntType::UnsignedInt(t);\n                     let bits = layout::Integer::from_attr(cx.tcx, ity).size().bits();\n                     let actually = (val << (128 - bits)) >> (128 - bits);\n@@ -633,20 +633,20 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                 }\n             }\n \n-            ty::TyChar => FfiUnsafe {\n+            ty::Char => FfiUnsafe {\n                 ty: ty,\n                 reason: \"the `char` type has no C equivalent\",\n                 help: Some(\"consider using `u32` or `libc::wchar_t` instead\"),\n             },\n \n-            ty::TyInt(ast::IntTy::I128) | ty::TyUint(ast::UintTy::U128) => FfiUnsafe {\n+            ty::Int(ast::IntTy::I128) | ty::Uint(ast::UintTy::U128) => FfiUnsafe {\n                 ty: ty,\n                 reason: \"128-bit integers don't currently have a known stable ABI\",\n                 help: None,\n             },\n \n             // Primitive types with a stable representation.\n-            ty::TyBool | ty::TyInt(..) | ty::TyUint(..) | ty::TyFloat(..) | ty::Never => FfiSafe,\n+            ty::Bool | ty::Int(..) | ty::Uint(..) | ty::Float(..) | ty::Never => FfiSafe,\n \n             ty::Slice(_) => FfiUnsafe {\n                 ty: ty,\n@@ -660,7 +660,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                 help: None,\n             },\n \n-            ty::TyStr => FfiUnsafe {\n+            ty::Str => FfiUnsafe {\n                 ty: ty,\n                 reason: \"string slices have no C equivalent\",\n                 help: Some(\"consider using `*const u8` and a length instead\"),"}, {"sha": "15a983635f7ae6992dc40f141e3b8c1abdaf75c0", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -227,7 +227,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             }\n \n             TestKind::SwitchInt { switch_ty, ref options, indices: _ } => {\n-                let (ret, terminator) = if switch_ty.sty == ty::TyBool {\n+                let (ret, terminator) = if switch_ty.sty == ty::Bool {\n                     assert!(options.len() > 0 && options.len() <= 2);\n                     let (true_bb, false_bb) = (self.cfg.start_new_block(),\n                                                self.cfg.start_new_block());"}, {"sha": "ef21348cd3ca1347dec536ab67b38a8bf6a237f8", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -188,7 +188,7 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n             }\n             LitKind::FloatUnsuffixed(n) => {\n                 let fty = match ty.sty {\n-                    ty::TyFloat(fty) => fty,\n+                    ty::Float(fty) => fty,\n                     _ => bug!()\n                 };\n                 parse_float(n, fty)"}, {"sha": "54faf19afeb13dc4f7c6adc467059fceba4f7fbf", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -619,7 +619,7 @@ fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     debug!(\"all_constructors({:?})\", pcx.ty);\n     let exhaustive_integer_patterns = cx.tcx.features().exhaustive_integer_patterns;\n     let ctors = match pcx.ty.sty {\n-        ty::TyBool => {\n+        ty::Bool => {\n             [true, false].iter().map(|&b| {\n                 ConstantValue(ty::Const::from_bool(cx.tcx, b))\n             }).collect()"}, {"sha": "384ee0079dc84c70ec55b11169a9a8e63d18a143", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -811,7 +811,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n             }).collect::<Vec<_>>()\n         };\n         let kind = match cv.ty.sty {\n-            ty::TyFloat(_) => {\n+            ty::Float(_) => {\n                 let id = self.tcx.hir.hir_to_node_id(id);\n                 self.tcx.lint_node(\n                     ::rustc::lint::builtin::ILLEGAL_FLOATING_POINT_LITERAL_PATTERN,\n@@ -1073,17 +1073,17 @@ pub fn compare_const_vals<'a, 'tcx>(\n     if let (Some(a), Some(b)) = (a.to_bits(tcx, ty), b.to_bits(tcx, ty)) {\n         use ::rustc_apfloat::Float;\n         return match ty.value.sty {\n-            ty::TyFloat(ast::FloatTy::F32) => {\n+            ty::Float(ast::FloatTy::F32) => {\n                 let l = ::rustc_apfloat::ieee::Single::from_bits(a);\n                 let r = ::rustc_apfloat::ieee::Single::from_bits(b);\n                 l.partial_cmp(&r)\n             },\n-            ty::TyFloat(ast::FloatTy::F64) => {\n+            ty::Float(ast::FloatTy::F64) => {\n                 let l = ::rustc_apfloat::ieee::Double::from_bits(a);\n                 let r = ::rustc_apfloat::ieee::Double::from_bits(b);\n                 l.partial_cmp(&r)\n             },\n-            ty::TyInt(_) => {\n+            ty::Int(_) => {\n                 let layout = tcx.layout_of(ty).ok()?;\n                 assert!(layout.abi.is_signed());\n                 let a = sign_extend(a, layout.size);\n@@ -1095,7 +1095,7 @@ pub fn compare_const_vals<'a, 'tcx>(\n     }\n \n     if let ty::Ref(_, rty, _) = ty.value.sty {\n-        if let ty::TyStr = rty.sty {\n+        if let ty::Str = rty.sty {\n             match (a.val, b.val) {\n                 (\n                     ConstValue::ScalarPair(\n@@ -1170,10 +1170,10 @@ fn lit_to_const<'a, 'tcx>(lit: &'tcx ast::LitKind,\n                 Unsigned(UintTy),\n             }\n             let ity = match ty.sty {\n-                ty::TyInt(IntTy::Isize) => Int::Signed(tcx.sess.target.isize_ty),\n-                ty::TyInt(other) => Int::Signed(other),\n-                ty::TyUint(UintTy::Usize) => Int::Unsigned(tcx.sess.target.usize_ty),\n-                ty::TyUint(other) => Int::Unsigned(other),\n+                ty::Int(IntTy::Isize) => Int::Signed(tcx.sess.target.isize_ty),\n+                ty::Int(other) => Int::Signed(other),\n+                ty::Uint(UintTy::Usize) => Int::Unsigned(tcx.sess.target.usize_ty),\n+                ty::Uint(other) => Int::Unsigned(other),\n                 ty::Error => { // Avoid ICE (#51963)\n                     return Err(LitToConstError::Propagated);\n                 }\n@@ -1211,7 +1211,7 @@ fn lit_to_const<'a, 'tcx>(lit: &'tcx ast::LitKind,\n         }\n         LitKind::FloatUnsuffixed(n) => {\n             let fty = match ty.sty {\n-                ty::TyFloat(fty) => fty,\n+                ty::Float(fty) => fty,\n                 _ => bug!()\n             };\n             parse_float(n, fty, neg).map_err(|_| LitToConstError::UnparseableFloat)?"}, {"sha": "10194807442e3171a9bc634e5fadfb08aa074f7b", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -152,7 +152,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                     \"Unexpected value of size {} before casting\", size);\n \n                 let res = match src_layout.ty.sty {\n-                    TyFloat(fty) => self.cast_from_float(bits, fty, dest_layout.ty)?,\n+                    Float(fty) => self.cast_from_float(bits, fty, dest_layout.ty)?,\n                     _ => self.cast_from_int(bits, src_layout, dest_layout)?,\n                 };\n \n@@ -186,32 +186,32 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n         trace!(\"cast_from_int: {}, {}, {}\", v, src_layout.ty, dest_layout.ty);\n         use rustc::ty::TyKind::*;\n         match dest_layout.ty.sty {\n-            TyInt(_) | TyUint(_) => {\n+            Int(_) | Uint(_) => {\n                 let v = self.truncate(v, dest_layout);\n                 Ok(Scalar::Bits {\n                     bits: v,\n                     size: dest_layout.size.bytes() as u8,\n                 })\n             }\n \n-            TyFloat(FloatTy::F32) if signed => Ok(Scalar::Bits {\n+            Float(FloatTy::F32) if signed => Ok(Scalar::Bits {\n                 bits: Single::from_i128(v as i128).value.to_bits(),\n                 size: 4,\n             }),\n-            TyFloat(FloatTy::F64) if signed => Ok(Scalar::Bits {\n+            Float(FloatTy::F64) if signed => Ok(Scalar::Bits {\n                 bits: Double::from_i128(v as i128).value.to_bits(),\n                 size: 8,\n             }),\n-            TyFloat(FloatTy::F32) => Ok(Scalar::Bits {\n+            Float(FloatTy::F32) => Ok(Scalar::Bits {\n                 bits: Single::from_u128(v).value.to_bits(),\n                 size: 4,\n             }),\n-            TyFloat(FloatTy::F64) => Ok(Scalar::Bits {\n+            Float(FloatTy::F64) => Ok(Scalar::Bits {\n                 bits: Double::from_u128(v).value.to_bits(),\n                 size: 8,\n             }),\n \n-            TyChar => {\n+            Char => {\n                 assert_eq!(v as u8 as u128, v);\n                 Ok(Scalar::Bits { bits: v, size: 4 })\n             },\n@@ -234,7 +234,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n         use rustc_apfloat::FloatConvert;\n         match dest_ty.sty {\n             // float -> uint\n-            TyUint(t) => {\n+            Uint(t) => {\n                 let width = t.bit_width().unwrap_or(self.memory.pointer_size().bits() as usize);\n                 let v = match fty {\n                     FloatTy::F32 => Single::from_bits(bits).to_u128(width).value,\n@@ -247,7 +247,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                 })\n             },\n             // float -> int\n-            TyInt(t) => {\n+            Int(t) => {\n                 let width = t.bit_width().unwrap_or(self.memory.pointer_size().bits() as usize);\n                 let v = match fty {\n                     FloatTy::F32 => Single::from_bits(bits).to_i128(width).value,\n@@ -263,25 +263,25 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                 })\n             },\n             // f64 -> f32\n-            TyFloat(FloatTy::F32) if fty == FloatTy::F64 => {\n+            Float(FloatTy::F32) if fty == FloatTy::F64 => {\n                 Ok(Scalar::Bits {\n                     bits: Single::to_bits(Double::from_bits(bits).convert(&mut false).value),\n                     size: 4,\n                 })\n             },\n             // f32 -> f64\n-            TyFloat(FloatTy::F64) if fty == FloatTy::F32 => {\n+            Float(FloatTy::F64) if fty == FloatTy::F32 => {\n                 Ok(Scalar::Bits {\n                     bits: Double::to_bits(Single::from_bits(bits).convert(&mut false).value),\n                     size: 8,\n                 })\n             },\n             // identity cast\n-            TyFloat(FloatTy:: F64) => Ok(Scalar::Bits {\n+            Float(FloatTy:: F64) => Ok(Scalar::Bits {\n                 bits,\n                 size: 8,\n             }),\n-            TyFloat(FloatTy:: F32) => Ok(Scalar::Bits {\n+            Float(FloatTy:: F32) => Ok(Scalar::Bits {\n                 bits,\n                 size: 4,\n             }),\n@@ -294,9 +294,9 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n         match ty.sty {\n             // Casting to a reference or fn pointer is not permitted by rustc, no need to support it here.\n             RawPtr(_) |\n-            TyInt(IntTy::Isize) |\n-            TyUint(UintTy::Usize) => Ok(ptr.into()),\n-            TyInt(_) | TyUint(_) => err!(ReadPointerAsBytes),\n+            Int(IntTy::Isize) |\n+            Uint(UintTy::Usize) => Ok(ptr.into()),\n+            Int(_) | Uint(_) => err!(ReadPointerAsBytes),\n             _ => err!(Unimplemented(format!(\"ptr to {:?} cast\", ty))),\n         }\n     }"}, {"sha": "a8e5525b2e1c0f22efc9b34f0b5e74f42cffbc3a", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -169,7 +169,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n             }\n         }\n \n-        if let ty::TyFloat(fty) = left_layout.ty.sty {\n+        if let ty::Float(fty) = left_layout.ty.sty {\n             macro_rules! float_math {\n                 ($ty:path, $size:expr) => {{\n                     let l = <$ty>::from_bits(l);\n@@ -267,12 +267,12 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n \n         let result_bytes = match (un_op, &layout.ty.sty) {\n \n-            (Not, ty::TyBool) => !val.to_bool()? as u128,\n+            (Not, ty::Bool) => !val.to_bool()? as u128,\n \n             (Not, _) => !bytes,\n \n-            (Neg, ty::TyFloat(FloatTy::F32)) => Single::to_bits(-Single::from_bits(bytes)),\n-            (Neg, ty::TyFloat(FloatTy::F64)) => Double::to_bits(-Double::from_bits(bytes)),\n+            (Neg, ty::Float(FloatTy::F32)) => Single::to_bits(-Single::from_bits(bytes)),\n+            (Neg, ty::Float(FloatTy::F64)) => Double::to_bits(-Double::from_bits(bytes)),\n \n             (Neg, _) if bytes == (1 << (size.bits() - 1)) => return err!(OverflowNeg),\n             (Neg, _) => (-(bytes as i128)) as u128,"}, {"sha": "a1dbf9ddb035616de84731f926aec105b38ccbee", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -839,7 +839,7 @@ fn find_vtable_types_for_unsizing<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             let tail = tcx.struct_tail(ty);\n             match tail.sty {\n                 ty::Foreign(..) => false,\n-                ty::TyStr | ty::Slice(..) | ty::Dynamic(..) => true,\n+                ty::Str | ty::Slice(..) | ty::Dynamic(..) => true,\n                 _ => bug!(\"unexpected unsized tail: {:?}\", tail.sty),\n             }\n         };"}, {"sha": "3187a91e225970d8edaecfa20b51d3d96ba7dfb9", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -257,24 +257,24 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n \n     pub fn push_type_name(&self, t: Ty<'tcx>, output: &mut String) {\n         match t.sty {\n-            ty::TyBool              => output.push_str(\"bool\"),\n-            ty::TyChar              => output.push_str(\"char\"),\n-            ty::TyStr               => output.push_str(\"str\"),\n+            ty::Bool              => output.push_str(\"bool\"),\n+            ty::Char              => output.push_str(\"char\"),\n+            ty::Str               => output.push_str(\"str\"),\n             ty::Never             => output.push_str(\"!\"),\n-            ty::TyInt(ast::IntTy::Isize)    => output.push_str(\"isize\"),\n-            ty::TyInt(ast::IntTy::I8)    => output.push_str(\"i8\"),\n-            ty::TyInt(ast::IntTy::I16)   => output.push_str(\"i16\"),\n-            ty::TyInt(ast::IntTy::I32)   => output.push_str(\"i32\"),\n-            ty::TyInt(ast::IntTy::I64)   => output.push_str(\"i64\"),\n-            ty::TyInt(ast::IntTy::I128)   => output.push_str(\"i128\"),\n-            ty::TyUint(ast::UintTy::Usize)   => output.push_str(\"usize\"),\n-            ty::TyUint(ast::UintTy::U8)   => output.push_str(\"u8\"),\n-            ty::TyUint(ast::UintTy::U16)  => output.push_str(\"u16\"),\n-            ty::TyUint(ast::UintTy::U32)  => output.push_str(\"u32\"),\n-            ty::TyUint(ast::UintTy::U64)  => output.push_str(\"u64\"),\n-            ty::TyUint(ast::UintTy::U128)  => output.push_str(\"u128\"),\n-            ty::TyFloat(ast::FloatTy::F32) => output.push_str(\"f32\"),\n-            ty::TyFloat(ast::FloatTy::F64) => output.push_str(\"f64\"),\n+            ty::Int(ast::IntTy::Isize)    => output.push_str(\"isize\"),\n+            ty::Int(ast::IntTy::I8)    => output.push_str(\"i8\"),\n+            ty::Int(ast::IntTy::I16)   => output.push_str(\"i16\"),\n+            ty::Int(ast::IntTy::I32)   => output.push_str(\"i32\"),\n+            ty::Int(ast::IntTy::I64)   => output.push_str(\"i64\"),\n+            ty::Int(ast::IntTy::I128)   => output.push_str(\"i128\"),\n+            ty::Uint(ast::UintTy::Usize)   => output.push_str(\"usize\"),\n+            ty::Uint(ast::UintTy::U8)   => output.push_str(\"u8\"),\n+            ty::Uint(ast::UintTy::U16)  => output.push_str(\"u16\"),\n+            ty::Uint(ast::UintTy::U32)  => output.push_str(\"u32\"),\n+            ty::Uint(ast::UintTy::U64)  => output.push_str(\"u64\"),\n+            ty::Uint(ast::UintTy::U128)  => output.push_str(\"u128\"),\n+            ty::Float(ast::FloatTy::F32) => output.push_str(\"f32\"),\n+            ty::Float(ast::FloatTy::F64) => output.push_str(\"f64\"),\n             ty::Adt(adt_def, substs) => {\n                 self.push_def_path(adt_def.did, output);\n                 self.push_type_params(substs, iter::empty(), output);"}, {"sha": "8ed5600400b516e09f2abf3ef66cbdc2cf36b7b5", "filename": "src/librustc_mir/transform/lower_128bit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -190,8 +190,8 @@ impl RhsKind {\n \n fn sign_of_128bit(ty: Ty) -> Option<bool> {\n     match ty.sty {\n-        TyKind::TyInt(syntax::ast::IntTy::I128) => Some(true),\n-        TyKind::TyUint(syntax::ast::UintTy::U128) => Some(false),\n+        TyKind::Int(syntax::ast::IntTy::I128) => Some(true),\n+        TyKind::Uint(syntax::ast::UintTy::U128) => Some(false),\n         _ => None,\n     }\n }"}, {"sha": "3760a64b168ed33c16fb2245f86c80b55a795f10", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -35,7 +35,7 @@ use self::TypeParameters::*;\n use self::RibKind::*;\n \n use rustc::hir::map::{Definitions, DefCollector};\n-use rustc::hir::{self, PrimTy, TyBool, TyChar, TyFloat, TyInt, TyUint, TyStr};\n+use rustc::hir::{self, PrimTy, Bool, Char, Float, Int, Uint, Str};\n use rustc::middle::cstore::CrateStore;\n use rustc::session::Session;\n use rustc::lint;\n@@ -1280,23 +1280,23 @@ impl PrimitiveTypeTable {\n     fn new() -> PrimitiveTypeTable {\n         let mut table = PrimitiveTypeTable { primitive_types: FxHashMap() };\n \n-        table.intern(\"bool\", TyBool);\n-        table.intern(\"char\", TyChar);\n-        table.intern(\"f32\", TyFloat(FloatTy::F32));\n-        table.intern(\"f64\", TyFloat(FloatTy::F64));\n-        table.intern(\"isize\", TyInt(IntTy::Isize));\n-        table.intern(\"i8\", TyInt(IntTy::I8));\n-        table.intern(\"i16\", TyInt(IntTy::I16));\n-        table.intern(\"i32\", TyInt(IntTy::I32));\n-        table.intern(\"i64\", TyInt(IntTy::I64));\n-        table.intern(\"i128\", TyInt(IntTy::I128));\n-        table.intern(\"str\", TyStr);\n-        table.intern(\"usize\", TyUint(UintTy::Usize));\n-        table.intern(\"u8\", TyUint(UintTy::U8));\n-        table.intern(\"u16\", TyUint(UintTy::U16));\n-        table.intern(\"u32\", TyUint(UintTy::U32));\n-        table.intern(\"u64\", TyUint(UintTy::U64));\n-        table.intern(\"u128\", TyUint(UintTy::U128));\n+        table.intern(\"bool\", Bool);\n+        table.intern(\"char\", Char);\n+        table.intern(\"f32\", Float(FloatTy::F32));\n+        table.intern(\"f64\", Float(FloatTy::F64));\n+        table.intern(\"isize\", Int(IntTy::Isize));\n+        table.intern(\"i8\", Int(IntTy::I8));\n+        table.intern(\"i16\", Int(IntTy::I16));\n+        table.intern(\"i32\", Int(IntTy::I32));\n+        table.intern(\"i64\", Int(IntTy::I64));\n+        table.intern(\"i128\", Int(IntTy::I128));\n+        table.intern(\"str\", Str);\n+        table.intern(\"usize\", Uint(UintTy::Usize));\n+        table.intern(\"u8\", Uint(UintTy::U8));\n+        table.intern(\"u16\", Uint(UintTy::U16));\n+        table.intern(\"u32\", Uint(UintTy::U32));\n+        table.intern(\"u64\", Uint(UintTy::U64));\n+        table.intern(\"u128\", Uint(UintTy::U128));\n         table\n     }\n \n@@ -3900,7 +3900,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                 }\n             }\n             // Add primitive types to the mix\n-            if filter_fn(Def::PrimTy(TyBool)) {\n+            if filter_fn(Def::PrimTy(Bool)) {\n                 names.extend(\n                     self.primitive_type_table.primitive_types.iter().map(|(name, _)| name)\n                 )"}, {"sha": "a27a447ad4b0959d3b8101d69a18444347344c9d", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -173,12 +173,12 @@ fn dtorck_constraint_for_ty<'a, 'gcx, 'tcx>(\n     }\n \n     let result = match ty.sty {\n-        ty::TyBool\n-        | ty::TyChar\n-        | ty::TyInt(_)\n-        | ty::TyUint(_)\n-        | ty::TyFloat(_)\n-        | ty::TyStr\n+        ty::Bool\n+        | ty::Char\n+        | ty::Int(_)\n+        | ty::Uint(_)\n+        | ty::Float(_)\n+        | ty::Str\n         | ty::Never\n         | ty::Foreign(..)\n         | ty::RawPtr(..)"}, {"sha": "b38002d0f62d6a7e92e79faed7899436a63761ea", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -1438,12 +1438,12 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                 assert_eq!(opt_self_ty, None);\n                 self.prohibit_generics(&path.segments);\n                 match prim_ty {\n-                    hir::TyBool => tcx.types.bool,\n-                    hir::TyChar => tcx.types.char,\n-                    hir::TyInt(it) => tcx.mk_mach_int(it),\n-                    hir::TyUint(uit) => tcx.mk_mach_uint(uit),\n-                    hir::TyFloat(ft) => tcx.mk_mach_float(ft),\n-                    hir::TyStr => tcx.mk_str()\n+                    hir::Bool => tcx.types.bool,\n+                    hir::Char => tcx.types.char,\n+                    hir::Int(it) => tcx.mk_mach_int(it),\n+                    hir::Uint(uit) => tcx.mk_mach_uint(uit),\n+                    hir::Float(ft) => tcx.mk_mach_float(ft),\n+                    hir::Str => tcx.mk_str()\n                 }\n             }\n             Def::Err => {"}, {"sha": "593b9fac415033dca4efe98e607e7723b2f7401b", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -103,7 +103,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         }\n \n         Ok(match t.sty {\n-            ty::Slice(_) | ty::TyStr => Some(PointerKind::Length),\n+            ty::Slice(_) | ty::Str => Some(PointerKind::Length),\n             ty::Dynamic(ref tty, ..) =>\n                 Some(PointerKind::Vtable(tty.principal().map(|p| p.def_id()))),\n             ty::Adt(def, substs) if def.is_struct() => {\n@@ -129,8 +129,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             // Insufficient type information.\n             ty::Infer(_) => None,\n \n-            ty::TyBool | ty::TyChar | ty::TyInt(..) | ty::TyUint(..) |\n-            ty::TyFloat(_) | ty::Array(..) | ty::GeneratorWitness(..) |\n+            ty::Bool | ty::Char | ty::Int(..) | ty::Uint(..) |\n+            ty::Float(_) | ty::Array(..) | ty::GeneratorWitness(..) |\n             ty::RawPtr(_) | ty::Ref(..) | ty::FnDef(..) |\n             ty::FnPtr(..) | ty::Closure(..) | ty::Generator(..) |\n             ty::Adt(..) | ty::Never | ty::Error => {\n@@ -477,9 +477,9 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n             (RPtr(p), Int(_)) |\n             (RPtr(p), Float) => {\n                 match p.ty.sty {\n-                    ty::TyKind::TyInt(_) |\n-                    ty::TyKind::TyUint(_) |\n-                    ty::TyKind::TyFloat(_) => {\n+                    ty::TyKind::Int(_) |\n+                    ty::TyKind::Uint(_) |\n+                    ty::TyKind::Float(_) => {\n                         Err(CastError::NeedDeref)\n                     }\n                     ty::TyKind::Infer(t) => {"}, {"sha": "7dc57c710bf26f34e0841f7bbfc34bc11b89ff32", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -260,8 +260,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         match (&expected.sty, &checked_ty.sty) {\n             (&ty::Ref(_, exp, _), &ty::Ref(_, check, _)) => match (&exp.sty, &check.sty) {\n-                (&ty::TyStr, &ty::Array(arr, _)) |\n-                (&ty::TyStr, &ty::Slice(arr)) if arr == self.tcx.types.u8 => {\n+                (&ty::Str, &ty::Array(arr, _)) |\n+                (&ty::Str, &ty::Slice(arr)) if arr == self.tcx.types.u8 => {\n                     if let hir::ExprKind::Lit(_) = expr.node {\n                         if let Ok(src) = cm.span_to_snippet(sp) {\n                             if src.starts_with(\"b\\\"\") {\n@@ -272,8 +272,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         }\n                     }\n                 },\n-                (&ty::Array(arr, _), &ty::TyStr) |\n-                (&ty::Slice(arr), &ty::TyStr) if arr == self.tcx.types.u8 => {\n+                (&ty::Array(arr, _), &ty::Str) |\n+                (&ty::Slice(arr), &ty::Str) if arr == self.tcx.types.u8 => {\n                     if let hir::ExprKind::Lit(_) = expr.node {\n                         if let Ok(src) = cm.span_to_snippet(sp) {\n                             if src.starts_with(\"\\\"\") {\n@@ -418,7 +418,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                           if needs_paren { \")\" } else { \"\" });\n \n             match (&expected_ty.sty, &checked_ty.sty) {\n-                (&ty::TyInt(ref exp), &ty::TyInt(ref found)) => {\n+                (&ty::Int(ref exp), &ty::Int(ref found)) => {\n                     match (found.bit_width(), exp.bit_width()) {\n                         (Some(found), Some(exp)) if found > exp => {\n                             if can_cast {\n@@ -444,7 +444,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     }\n                     true\n                 }\n-                (&ty::TyUint(ref exp), &ty::TyUint(ref found)) => {\n+                (&ty::Uint(ref exp), &ty::Uint(ref found)) => {\n                     match (found.bit_width(), exp.bit_width()) {\n                         (Some(found), Some(exp)) if found > exp => {\n                             if can_cast {\n@@ -470,7 +470,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     }\n                     true\n                 }\n-                (&ty::TyInt(ref exp), &ty::TyUint(ref found)) => {\n+                (&ty::Int(ref exp), &ty::Uint(ref found)) => {\n                     if can_cast {\n                         match (found.bit_width(), exp.bit_width()) {\n                             (Some(found), Some(exp)) if found > exp - 1 => {\n@@ -506,7 +506,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     }\n                     true\n                 }\n-                (&ty::TyUint(ref exp), &ty::TyInt(ref found)) => {\n+                (&ty::Uint(ref exp), &ty::Int(ref found)) => {\n                     if can_cast {\n                         match (found.bit_width(), exp.bit_width()) {\n                             (Some(found), Some(exp)) if found - 1 > exp => {\n@@ -542,7 +542,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     }\n                     true\n                 }\n-                (&ty::TyFloat(ref exp), &ty::TyFloat(ref found)) => {\n+                (&ty::Float(ref exp), &ty::Float(ref found)) => {\n                     if found.bit_width() < exp.bit_width() {\n                         err.span_suggestion(expr.span,\n                                             &format!(\"{} in a lossless way\",\n@@ -556,7 +556,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     }\n                     true\n                 }\n-                (&ty::TyUint(_), &ty::TyFloat(_)) | (&ty::TyInt(_), &ty::TyFloat(_)) => {\n+                (&ty::Uint(_), &ty::Float(_)) | (&ty::Int(_), &ty::Float(_)) => {\n                     if can_cast {\n                         err.span_suggestion(expr.span,\n                                             &format!(\"{}, rounding the float towards zero\",\n@@ -568,7 +568,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     }\n                     true\n                 }\n-                (&ty::TyFloat(ref exp), &ty::TyUint(ref found)) => {\n+                (&ty::Float(ref exp), &ty::Uint(ref found)) => {\n                     // if `found` is `None` (meaning found is `usize`), don't suggest `.into()`\n                     if exp.bit_width() > found.bit_width().unwrap_or(256) {\n                         err.span_suggestion(expr.span,\n@@ -586,7 +586,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     }\n                     true\n                 }\n-                (&ty::TyFloat(ref exp), &ty::TyInt(ref found)) => {\n+                (&ty::Float(ref exp), &ty::Int(ref found)) => {\n                     // if `found` is `None` (meaning found is `isize`), don't suggest `.into()`\n                     if exp.bit_width() > found.bit_width().unwrap_or(256) {\n                         err.span_suggestion(expr.span,"}, {"sha": "23872ddf2f64b8c836d12fdd4fbbfc31012e5611", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -468,24 +468,24 @@ fn match_intrinsic_type_to_type<'a, 'tcx>(\n         },\n         // (The width we pass to LLVM doesn't concern the type checker.)\n         Integer(signed, bits, _llvm_width) => match (signed, bits, &t.sty) {\n-            (true,  8,  &ty::TyInt(ast::IntTy::I8)) |\n-            (false, 8,  &ty::TyUint(ast::UintTy::U8)) |\n-            (true,  16, &ty::TyInt(ast::IntTy::I16)) |\n-            (false, 16, &ty::TyUint(ast::UintTy::U16)) |\n-            (true,  32, &ty::TyInt(ast::IntTy::I32)) |\n-            (false, 32, &ty::TyUint(ast::UintTy::U32)) |\n-            (true,  64, &ty::TyInt(ast::IntTy::I64)) |\n-            (false, 64, &ty::TyUint(ast::UintTy::U64)) |\n-            (true,  128, &ty::TyInt(ast::IntTy::I128)) |\n-            (false, 128, &ty::TyUint(ast::UintTy::U128)) => {},\n+            (true,  8,  &ty::Int(ast::IntTy::I8)) |\n+            (false, 8,  &ty::Uint(ast::UintTy::U8)) |\n+            (true,  16, &ty::Int(ast::IntTy::I16)) |\n+            (false, 16, &ty::Uint(ast::UintTy::U16)) |\n+            (true,  32, &ty::Int(ast::IntTy::I32)) |\n+            (false, 32, &ty::Uint(ast::UintTy::U32)) |\n+            (true,  64, &ty::Int(ast::IntTy::I64)) |\n+            (false, 64, &ty::Uint(ast::UintTy::U64)) |\n+            (true,  128, &ty::Int(ast::IntTy::I128)) |\n+            (false, 128, &ty::Uint(ast::UintTy::U128)) => {},\n             _ => simple_error(&format!(\"`{}`\", t),\n                               &format!(\"`{}{n}`\",\n                                        if signed {\"i\"} else {\"u\"},\n                                        n = bits)),\n         },\n         Float(bits) => match (bits, &t.sty) {\n-            (32, &ty::TyFloat(ast::FloatTy::F32)) |\n-            (64, &ty::TyFloat(ast::FloatTy::F64)) => {},\n+            (32, &ty::Float(ast::FloatTy::F32)) |\n+            (64, &ty::Float(ast::FloatTy::F64)) => {},\n             _ => simple_error(&format!(\"`{}`\", t),\n                               &format!(\"`f{n}`\", n = bits)),\n         },"}, {"sha": "85a437283fa681e66c18de97c7cb2d5f959f958d", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -465,11 +465,11 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             ty::Param(p) => {\n                 self.assemble_inherent_candidates_from_param(self_ty, p);\n             }\n-            ty::TyChar => {\n+            ty::Char => {\n                 let lang_def_id = lang_items.char_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyStr => {\n+            ty::Str => {\n                 let lang_def_id = lang_items.str_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n \n@@ -497,62 +497,62 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                 let lang_def_id = lang_items.mut_ptr_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyInt(ast::IntTy::I8) => {\n+            ty::Int(ast::IntTy::I8) => {\n                 let lang_def_id = lang_items.i8_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyInt(ast::IntTy::I16) => {\n+            ty::Int(ast::IntTy::I16) => {\n                 let lang_def_id = lang_items.i16_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyInt(ast::IntTy::I32) => {\n+            ty::Int(ast::IntTy::I32) => {\n                 let lang_def_id = lang_items.i32_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyInt(ast::IntTy::I64) => {\n+            ty::Int(ast::IntTy::I64) => {\n                 let lang_def_id = lang_items.i64_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyInt(ast::IntTy::I128) => {\n+            ty::Int(ast::IntTy::I128) => {\n                 let lang_def_id = lang_items.i128_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyInt(ast::IntTy::Isize) => {\n+            ty::Int(ast::IntTy::Isize) => {\n                 let lang_def_id = lang_items.isize_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyUint(ast::UintTy::U8) => {\n+            ty::Uint(ast::UintTy::U8) => {\n                 let lang_def_id = lang_items.u8_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyUint(ast::UintTy::U16) => {\n+            ty::Uint(ast::UintTy::U16) => {\n                 let lang_def_id = lang_items.u16_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyUint(ast::UintTy::U32) => {\n+            ty::Uint(ast::UintTy::U32) => {\n                 let lang_def_id = lang_items.u32_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyUint(ast::UintTy::U64) => {\n+            ty::Uint(ast::UintTy::U64) => {\n                 let lang_def_id = lang_items.u64_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyUint(ast::UintTy::U128) => {\n+            ty::Uint(ast::UintTy::U128) => {\n                 let lang_def_id = lang_items.u128_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyUint(ast::UintTy::Usize) => {\n+            ty::Uint(ast::UintTy::Usize) => {\n                 let lang_def_id = lang_items.usize_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyFloat(ast::FloatTy::F32) => {\n+            ty::Float(ast::FloatTy::F32) => {\n                 let lang_def_id = lang_items.f32_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n \n                 let lang_def_id = lang_items.f32_runtime_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n-            ty::TyFloat(ast::FloatTy::F64) => {\n+            ty::Float(ast::FloatTy::F64) => {\n                 let lang_def_id = lang_items.f64_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n "}, {"sha": "0dcc799ebb2e282d9c0e4dbc0c4a256536dc5bc9", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -311,7 +311,7 @@ impl<'a, 'gcx, 'tcx> Expectation<'tcx> {\n     /// for examples of where this comes up,.\n     fn rvalue_hint(fcx: &FnCtxt<'a, 'gcx, 'tcx>, ty: Ty<'tcx>) -> Expectation<'tcx> {\n         match fcx.tcx.struct_tail(ty).sty {\n-            ty::Slice(_) | ty::TyStr | ty::Dynamic(..) => {\n+            ty::Slice(_) | ty::Str | ty::Dynamic(..) => {\n                 ExpectRvalueLikeUnsized(ty)\n             }\n             _ => ExpectHasType(ty)\n@@ -2831,13 +2831,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // in C but we just error out instead and require explicit casts.\n                 let arg_ty = self.structurally_resolved_type(arg.span, arg_ty);\n                 match arg_ty.sty {\n-                    ty::TyFloat(ast::FloatTy::F32) => {\n+                    ty::Float(ast::FloatTy::F32) => {\n                         variadic_error(tcx.sess, arg.span, arg_ty, \"c_double\");\n                     }\n-                    ty::TyInt(ast::IntTy::I8) | ty::TyInt(ast::IntTy::I16) | ty::TyBool => {\n+                    ty::Int(ast::IntTy::I8) | ty::Int(ast::IntTy::I16) | ty::Bool => {\n                         variadic_error(tcx.sess, arg.span, arg_ty, \"c_int\");\n                     }\n-                    ty::TyUint(ast::UintTy::U8) | ty::TyUint(ast::UintTy::U16) => {\n+                    ty::Uint(ast::UintTy::U8) | ty::Uint(ast::UintTy::U16) => {\n                         variadic_error(tcx.sess, arg.span, arg_ty, \"c_uint\");\n                     }\n                     ty::FnDef(..) => {\n@@ -2876,8 +2876,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             ast::LitKind::Int(_, ast::LitIntType::Unsuffixed) => {\n                 let opt_ty = expected.to_option(self).and_then(|ty| {\n                     match ty.sty {\n-                        ty::TyInt(_) | ty::TyUint(_) => Some(ty),\n-                        ty::TyChar => Some(tcx.types.u8),\n+                        ty::Int(_) | ty::Uint(_) => Some(ty),\n+                        ty::Char => Some(tcx.types.u8),\n                         ty::RawPtr(..) => Some(tcx.types.usize),\n                         ty::FnDef(..) | ty::FnPtr(_) => Some(tcx.types.usize),\n                         _ => None\n@@ -2890,7 +2890,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             ast::LitKind::FloatUnsuffixed(_) => {\n                 let opt_ty = expected.to_option(self).and_then(|ty| {\n                     match ty.sty {\n-                        ty::TyFloat(_) => Some(ty),\n+                        ty::Float(_) => Some(ty),\n                         _ => None\n                     }\n                 });\n@@ -3755,7 +3755,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         hir::UnNot => {\n                             let result = self.check_user_unop(expr, oprnd_t, unop);\n                             // If it's builtin, we can reuse the type, this helps inference.\n-                            if !(oprnd_t.is_integral() || oprnd_t.sty == ty::TyBool) {\n+                            if !(oprnd_t.is_integral() || oprnd_t.sty == ty::Bool) {\n                                 oprnd_t = result;\n                             }\n                         }"}, {"sha": "b7cf6819e21803638ad4ba85f77b54e865354374", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -13,7 +13,7 @@\n use super::{FnCtxt, Needs};\n use super::method::MethodCallee;\n use rustc::ty::{self, Ty, TypeFoldable};\n-use rustc::ty::TyKind::{Ref, Adt, TyStr, TyUint, Never, Tuple, TyChar, Array};\n+use rustc::ty::TyKind::{Ref, Adt, Str, Uint, Never, Tuple, Char, Array};\n use rustc::ty::adjustment::{Adjustment, Adjust, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::infer::type_variable::TypeVariableOrigin;\n use errors;\n@@ -430,7 +430,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // to print the normal \"implementation of `std::ops::Add` might be missing\" note\n         match (&lhs_ty.sty, &rhs_ty.sty) {\n             (&Ref(_, l_ty, _), &Ref(_, r_ty, _))\n-            if l_ty.sty == TyStr && r_ty.sty == TyStr => {\n+            if l_ty.sty == Str && r_ty.sty == Str => {\n                 if !is_assign {\n                     err.span_label(expr.span,\n                                    \"`+` can't be used to concatenate two `&str` strings\");\n@@ -444,7 +444,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 true\n             }\n             (&Ref(_, l_ty, _), &Adt(..))\n-            if l_ty.sty == TyStr && &format!(\"{:?}\", rhs_ty) == \"std::string::String\" => {\n+            if l_ty.sty == Str && &format!(\"{:?}\", rhs_ty) == \"std::string::String\" => {\n                 err.span_label(expr.span,\n                     \"`+` can't be used to concatenate a `&str` with a `String`\");\n                 match (\n@@ -489,11 +489,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     err.span_label(ex.span, format!(\"cannot apply unary \\\n                                                     operator `{}`\", op.as_str()));\n                     match actual.sty {\n-                        TyUint(_) if op == hir::UnNeg => {\n+                        Uint(_) if op == hir::UnNeg => {\n                             err.note(\"unsigned values cannot be negated\");\n                         },\n-                        TyStr | Never | TyChar | Tuple(_) | Array(_,_) => {},\n-                        Ref(_, ref lty, _) if lty.sty == TyStr => {},\n+                        Str | Never | Char | Tuple(_) | Array(_,_) => {},\n+                        Ref(_, ref lty, _) if lty.sty == Str => {},\n                         _ => {\n                             let missing_trait = match op {\n                                 hir::UnNeg => \"std::ops::Neg\","}, {"sha": "867864b3853d067c2556d6f90b003085248646b7", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -916,7 +916,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n         let r_index_expr = ty::ReScope(region::Scope::Node(index_expr.hir_id.local_id));\n         if let ty::Ref(r_ptr, r_ty, _) = indexed_ty.sty {\n             match r_ty.sty {\n-                ty::Slice(_) | ty::TyStr => {\n+                ty::Slice(_) | ty::Str => {\n                     self.sub_regions(infer::IndexSlice(index_expr.span),\n                                      self.tcx.mk_region(r_index_expr), r_ptr);\n                 }"}, {"sha": "52e37b8d0ce11fc9b8ace90f4d6d6ef1102db6c0", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -111,15 +111,15 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for InherentCollect<'a, 'tcx> {\n             ty::Dynamic(ref data, ..) if data.principal().is_some() => {\n                 self.check_def_id(item, data.principal().unwrap().def_id());\n             }\n-            ty::TyChar => {\n+            ty::Char => {\n                 self.check_primitive_impl(def_id,\n                                           lang_items.char_impl(),\n                                           None,\n                                           \"char\",\n                                           \"char\",\n                                           item.span);\n             }\n-            ty::TyStr => {\n+            ty::Str => {\n                 self.check_primitive_impl(def_id,\n                                           lang_items.str_impl(),\n                                           lang_items.str_alloc_impl(),\n@@ -159,111 +159,111 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for InherentCollect<'a, 'tcx> {\n                                           \"*mut T\",\n                                           item.span);\n             }\n-            ty::TyInt(ast::IntTy::I8) => {\n+            ty::Int(ast::IntTy::I8) => {\n                 self.check_primitive_impl(def_id,\n                                           lang_items.i8_impl(),\n                                           None,\n                                           \"i8\",\n                                           \"i8\",\n                                           item.span);\n             }\n-            ty::TyInt(ast::IntTy::I16) => {\n+            ty::Int(ast::IntTy::I16) => {\n                 self.check_primitive_impl(def_id,\n                                           lang_items.i16_impl(),\n                                           None,\n                                           \"i16\",\n                                           \"i16\",\n                                           item.span);\n             }\n-            ty::TyInt(ast::IntTy::I32) => {\n+            ty::Int(ast::IntTy::I32) => {\n                 self.check_primitive_impl(def_id,\n                                           lang_items.i32_impl(),\n                                           None,\n                                           \"i32\",\n                                           \"i32\",\n                                           item.span);\n             }\n-            ty::TyInt(ast::IntTy::I64) => {\n+            ty::Int(ast::IntTy::I64) => {\n                 self.check_primitive_impl(def_id,\n                                           lang_items.i64_impl(),\n                                           None,\n                                           \"i64\",\n                                           \"i64\",\n                                           item.span);\n             }\n-            ty::TyInt(ast::IntTy::I128) => {\n+            ty::Int(ast::IntTy::I128) => {\n                 self.check_primitive_impl(def_id,\n                                           lang_items.i128_impl(),\n                                           None,\n                                           \"i128\",\n                                           \"i128\",\n                                           item.span);\n             }\n-            ty::TyInt(ast::IntTy::Isize) => {\n+            ty::Int(ast::IntTy::Isize) => {\n                 self.check_primitive_impl(def_id,\n                                           lang_items.isize_impl(),\n                                           None,\n                                           \"isize\",\n                                           \"isize\",\n                                           item.span);\n             }\n-            ty::TyUint(ast::UintTy::U8) => {\n+            ty::Uint(ast::UintTy::U8) => {\n                 self.check_primitive_impl(def_id,\n                                           lang_items.u8_impl(),\n                                           None,\n                                           \"u8\",\n                                           \"u8\",\n                                           item.span);\n             }\n-            ty::TyUint(ast::UintTy::U16) => {\n+            ty::Uint(ast::UintTy::U16) => {\n                 self.check_primitive_impl(def_id,\n                                           lang_items.u16_impl(),\n                                           None,\n                                           \"u16\",\n                                           \"u16\",\n                                           item.span);\n             }\n-            ty::TyUint(ast::UintTy::U32) => {\n+            ty::Uint(ast::UintTy::U32) => {\n                 self.check_primitive_impl(def_id,\n                                           lang_items.u32_impl(),\n                                           None,\n                                           \"u32\",\n                                           \"u32\",\n                                           item.span);\n             }\n-            ty::TyUint(ast::UintTy::U64) => {\n+            ty::Uint(ast::UintTy::U64) => {\n                 self.check_primitive_impl(def_id,\n                                           lang_items.u64_impl(),\n                                           None,\n                                           \"u64\",\n                                           \"u64\",\n                                           item.span);\n             }\n-            ty::TyUint(ast::UintTy::U128) => {\n+            ty::Uint(ast::UintTy::U128) => {\n                 self.check_primitive_impl(def_id,\n                                           lang_items.u128_impl(),\n                                           None,\n                                           \"u128\",\n                                           \"u128\",\n                                           item.span);\n             }\n-            ty::TyUint(ast::UintTy::Usize) => {\n+            ty::Uint(ast::UintTy::Usize) => {\n                 self.check_primitive_impl(def_id,\n                                           lang_items.usize_impl(),\n                                           None,\n                                           \"usize\",\n                                           \"usize\",\n                                           item.span);\n             }\n-            ty::TyFloat(ast::FloatTy::F32) => {\n+            ty::Float(ast::FloatTy::F32) => {\n                 self.check_primitive_impl(def_id,\n                                           lang_items.f32_impl(),\n                                           lang_items.f32_runtime_impl(),\n                                           \"f32\",\n                                           \"f32\",\n                                           item.span);\n             }\n-            ty::TyFloat(ast::FloatTy::F64) => {\n+            ty::Float(ast::FloatTy::F64) => {\n                 self.check_primitive_impl(def_id,\n                                           lang_items.f64_impl(),\n                                           lang_items.f64_runtime_impl(),"}, {"sha": "a79215497182e252e1072e6ce73a2ecde2a0d3d2", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -261,8 +261,8 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                variance);\n \n         match ty.sty {\n-            ty::TyBool | ty::TyChar | ty::TyInt(_) | ty::TyUint(_) | ty::TyFloat(_) |\n-            ty::TyStr | ty::Never | ty::Foreign(..) => {\n+            ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) |\n+            ty::Str | ty::Never | ty::Foreign(..) => {\n                 // leaf type -- noop\n             }\n "}, {"sha": "cd9f4eb42dfc675008268ad4c3efd39e6952c848", "filename": "src/librustdoc/clean/def_ctor.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustdoc%2Fclean%2Fdef_ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustdoc%2Fclean%2Fdef_ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fdef_ctor.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -25,19 +25,19 @@ where F: Fn(& dyn Fn(DefId) -> Def) -> Vec<Item> {\n             AdtKind::Enum => Def::Enum,\n             AdtKind::Union => Def::Union,\n         }),\n-        ty::TyInt(_) |\n-        ty::TyUint(_) |\n-        ty::TyFloat(_) |\n-        ty::TyStr |\n-        ty::TyBool |\n-        ty::TyChar => callback(&move |_: DefId| {\n+        ty::Int(_) |\n+        ty::Uint(_) |\n+        ty::Float(_) |\n+        ty::Str |\n+        ty::Bool |\n+        ty::Char => callback(&move |_: DefId| {\n             match ty.sty {\n-                ty::TyInt(x) => Def::PrimTy(hir::TyInt(x)),\n-                ty::TyUint(x) => Def::PrimTy(hir::TyUint(x)),\n-                ty::TyFloat(x) => Def::PrimTy(hir::TyFloat(x)),\n-                ty::TyStr => Def::PrimTy(hir::TyStr),\n-                ty::TyBool => Def::PrimTy(hir::TyBool),\n-                ty::TyChar => Def::PrimTy(hir::TyChar),\n+                ty::Int(x) => Def::PrimTy(hir::Int(x)),\n+                ty::Uint(x) => Def::PrimTy(hir::Uint(x)),\n+                ty::Float(x) => Def::PrimTy(hir::Float(x)),\n+                ty::Str => Def::PrimTy(hir::Str),\n+                ty::Bool => Def::PrimTy(hir::Bool),\n+                ty::Char => Def::PrimTy(hir::Char),\n                 _ => unreachable!(),\n             }\n         }),"}, {"sha": "96d8cfff5d4ce86f4fb71d8ab38b291c2c242e04", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -2546,12 +2546,12 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n     fn clean(&self, cx: &DocContext) -> Type {\n         match self.sty {\n             ty::Never => Never,\n-            ty::TyBool => Primitive(PrimitiveType::Bool),\n-            ty::TyChar => Primitive(PrimitiveType::Char),\n-            ty::TyInt(int_ty) => Primitive(int_ty.into()),\n-            ty::TyUint(uint_ty) => Primitive(uint_ty.into()),\n-            ty::TyFloat(float_ty) => Primitive(float_ty.into()),\n-            ty::TyStr => Primitive(PrimitiveType::Str),\n+            ty::Bool => Primitive(PrimitiveType::Bool),\n+            ty::Char => Primitive(PrimitiveType::Char),\n+            ty::Int(int_ty) => Primitive(int_ty.into()),\n+            ty::Uint(uint_ty) => Primitive(uint_ty.into()),\n+            ty::Float(float_ty) => Primitive(float_ty.into()),\n+            ty::Str => Primitive(PrimitiveType::Str),\n             ty::Slice(ty) => Slice(box ty.clean(cx)),\n             ty::Array(ty, n) => {\n                 let mut n = cx.tcx.lift(&n).expect(\"array lift failed\");\n@@ -3700,12 +3700,12 @@ fn resolve_type(cx: &DocContext,\n \n     let is_generic = match path.def {\n         Def::PrimTy(p) => match p {\n-            hir::TyStr => return Primitive(PrimitiveType::Str),\n-            hir::TyBool => return Primitive(PrimitiveType::Bool),\n-            hir::TyChar => return Primitive(PrimitiveType::Char),\n-            hir::TyInt(int_ty) => return Primitive(int_ty.into()),\n-            hir::TyUint(uint_ty) => return Primitive(uint_ty.into()),\n-            hir::TyFloat(float_ty) => return Primitive(float_ty.into()),\n+            hir::Str => return Primitive(PrimitiveType::Str),\n+            hir::Bool => return Primitive(PrimitiveType::Bool),\n+            hir::Char => return Primitive(PrimitiveType::Char),\n+            hir::Int(int_ty) => return Primitive(int_ty.into()),\n+            hir::Uint(uint_ty) => return Primitive(uint_ty.into()),\n+            hir::Float(float_ty) => return Primitive(float_ty.into()),\n         },\n         Def::SelfTy(..) if path.segments.len() == 1 => {\n             return Generic(keywords::SelfType.name().to_string());"}, {"sha": "cced30d1a0c205fc0fe19d6e73f6fb68d07f6a10", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -567,23 +567,23 @@ fn handle_variant(cx: &DocContext, def: Def) -> Result<(Def, Option<String>), ()\n }\n \n const PRIMITIVES: &[(&str, Def)] = &[\n-    (\"u8\",    Def::PrimTy(hir::PrimTy::TyUint(syntax::ast::UintTy::U8))),\n-    (\"u16\",   Def::PrimTy(hir::PrimTy::TyUint(syntax::ast::UintTy::U16))),\n-    (\"u32\",   Def::PrimTy(hir::PrimTy::TyUint(syntax::ast::UintTy::U32))),\n-    (\"u64\",   Def::PrimTy(hir::PrimTy::TyUint(syntax::ast::UintTy::U64))),\n-    (\"u128\",  Def::PrimTy(hir::PrimTy::TyUint(syntax::ast::UintTy::U128))),\n-    (\"usize\", Def::PrimTy(hir::PrimTy::TyUint(syntax::ast::UintTy::Usize))),\n-    (\"i8\",    Def::PrimTy(hir::PrimTy::TyInt(syntax::ast::IntTy::I8))),\n-    (\"i16\",   Def::PrimTy(hir::PrimTy::TyInt(syntax::ast::IntTy::I16))),\n-    (\"i32\",   Def::PrimTy(hir::PrimTy::TyInt(syntax::ast::IntTy::I32))),\n-    (\"i64\",   Def::PrimTy(hir::PrimTy::TyInt(syntax::ast::IntTy::I64))),\n-    (\"i128\",  Def::PrimTy(hir::PrimTy::TyInt(syntax::ast::IntTy::I128))),\n-    (\"isize\", Def::PrimTy(hir::PrimTy::TyInt(syntax::ast::IntTy::Isize))),\n-    (\"f32\",   Def::PrimTy(hir::PrimTy::TyFloat(syntax::ast::FloatTy::F32))),\n-    (\"f64\",   Def::PrimTy(hir::PrimTy::TyFloat(syntax::ast::FloatTy::F64))),\n-    (\"str\",   Def::PrimTy(hir::PrimTy::TyStr)),\n-    (\"bool\",  Def::PrimTy(hir::PrimTy::TyBool)),\n-    (\"char\",  Def::PrimTy(hir::PrimTy::TyChar)),\n+    (\"u8\",    Def::PrimTy(hir::PrimTy::Uint(syntax::ast::UintTy::U8))),\n+    (\"u16\",   Def::PrimTy(hir::PrimTy::Uint(syntax::ast::UintTy::U16))),\n+    (\"u32\",   Def::PrimTy(hir::PrimTy::Uint(syntax::ast::UintTy::U32))),\n+    (\"u64\",   Def::PrimTy(hir::PrimTy::Uint(syntax::ast::UintTy::U64))),\n+    (\"u128\",  Def::PrimTy(hir::PrimTy::Uint(syntax::ast::UintTy::U128))),\n+    (\"usize\", Def::PrimTy(hir::PrimTy::Uint(syntax::ast::UintTy::Usize))),\n+    (\"i8\",    Def::PrimTy(hir::PrimTy::Int(syntax::ast::IntTy::I8))),\n+    (\"i16\",   Def::PrimTy(hir::PrimTy::Int(syntax::ast::IntTy::I16))),\n+    (\"i32\",   Def::PrimTy(hir::PrimTy::Int(syntax::ast::IntTy::I32))),\n+    (\"i64\",   Def::PrimTy(hir::PrimTy::Int(syntax::ast::IntTy::I64))),\n+    (\"i128\",  Def::PrimTy(hir::PrimTy::Int(syntax::ast::IntTy::I128))),\n+    (\"isize\", Def::PrimTy(hir::PrimTy::Int(syntax::ast::IntTy::Isize))),\n+    (\"f32\",   Def::PrimTy(hir::PrimTy::Float(syntax::ast::FloatTy::F32))),\n+    (\"f64\",   Def::PrimTy(hir::PrimTy::Float(syntax::ast::FloatTy::F64))),\n+    (\"str\",   Def::PrimTy(hir::PrimTy::Str)),\n+    (\"bool\",  Def::PrimTy(hir::PrimTy::Bool)),\n+    (\"char\",  Def::PrimTy(hir::PrimTy::Char)),\n ];\n \n fn is_primitive(path_str: &str, is_val: bool) -> Option<Def> {"}, {"sha": "87b01ed990036cae7ad8c85acb429c188d31366b", "filename": "src/test/run-pass/auxiliary/issue13507.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue13507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue13507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue13507.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -32,22 +32,22 @@ pub mod testtypes {\n         ]\n     }\n \n-    // Tests TyBool\n+    // Tests Bool\n     pub type FooBool = bool;\n \n-    // Tests TyChar\n+    // Tests Char\n     pub type FooChar = char;\n \n-    // Tests TyInt (does not test all variants of IntTy)\n+    // Tests Int (does not test all variants of IntTy)\n     pub type FooInt = isize;\n \n-    // Tests TyUint (does not test all variants of UintTy)\n+    // Tests Uint (does not test all variants of UintTy)\n     pub type FooUint = usize;\n \n-    // Tests TyFloat (does not test all variants of FloatTy)\n+    // Tests Float (does not test all variants of FloatTy)\n     pub type FooFloat = f64;\n \n-    // Tests TyStr\n+    // Tests Str\n     pub type FooStr = str;\n \n     // Tests Array"}, {"sha": "b610fd6715be7bbb7b4151deb00fc74b2c9e6e10", "filename": "src/test/ui/issues/issue-46332.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a5dccde2adca594db2ecd684484410139842c29/src%2Ftest%2Fui%2Fissues%2Fissue-46332.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5dccde2adca594db2ecd684484410139842c29/src%2Ftest%2Fui%2Fissues%2Fissue-46332.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46332.rs?ref=8a5dccde2adca594db2ecd684484410139842c29", "patch": "@@ -11,9 +11,9 @@\n // Original Levenshtein distance for both of this is 1. We improved accuracy with\n // additional case insensitive comparison.\n \n-struct TyUint {}\n+struct Uint {}\n \n-struct TyInt {}\n+struct Int {}\n \n fn main() {\n     TyUInt {};"}]}