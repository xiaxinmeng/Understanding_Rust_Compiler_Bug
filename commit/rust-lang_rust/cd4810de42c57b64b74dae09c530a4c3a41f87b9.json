{"sha": "cd4810de42c57b64b74dae09c530a4c3a41f87b9", "node_id": "C_kwDOAAsO6NoAKGNkNDgxMGRlNDJjNTdiNjRiNzRkYWUwOWM1MzBhNGMzYTQxZjg3Yjk", "commit": {"author": {"name": "antoyo", "email": "antoyo@users.noreply.github.com", "date": "2021-09-28T13:32:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-28T13:32:54Z"}, "message": "Fix warnings (#98)", "tree": {"sha": "0c435ffb59cd3988fcff106fcf721a19669dccc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c435ffb59cd3988fcff106fcf721a19669dccc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd4810de42c57b64b74dae09c530a4c3a41f87b9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhUxmGCRBK7hj4Ov3rIwAALnQIAAirDiEa/+LJfpGwQ0BpR1sk\ndN7jmRebWDAsetvP2AIRKCNIqX2EivYHlnSZ5EQNoP8onSZSTavlgsjNtpPz9sGU\nkM8fYBdqoR4thTWrPh1RxTOPzBUfKFRrbI1nlOkGLD68LVCHIoJ2YvmaQ5vHYRue\nbwm5/PtyRoHfxMywTw7rMb4Pzj9JlT+gv6r2Phdwcvqw4ssHn4PekDptSVUCEc9R\nl/zGGJkRXE4MgsFN3wFRrIpns8JMWlctkk/kc8wdjuqH8OPMRQpIZn62dAxMbAX5\nO8Yj3kLT94rQeMyVs0MbZXiiWenc78lkzPPRBI0r/IrqTCILY1ITWBD+49YqpEk=\n=J9Cf\n-----END PGP SIGNATURE-----\n", "payload": "tree 0c435ffb59cd3988fcff106fcf721a19669dccc1\nparent 9809f5d21990d9e24b3e9876ea7da756fd4e9def\nauthor antoyo <antoyo@users.noreply.github.com> 1632835974 -0400\ncommitter GitHub <noreply@github.com> 1632835974 -0400\n\nFix warnings (#98)\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd4810de42c57b64b74dae09c530a4c3a41f87b9", "html_url": "https://github.com/rust-lang/rust/commit/cd4810de42c57b64b74dae09c530a4c3a41f87b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd4810de42c57b64b74dae09c530a4c3a41f87b9/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9809f5d21990d9e24b3e9876ea7da756fd4e9def", "url": "https://api.github.com/repos/rust-lang/rust/commits/9809f5d21990d9e24b3e9876ea7da756fd4e9def", "html_url": "https://github.com/rust-lang/rust/commit/9809f5d21990d9e24b3e9876ea7da756fd4e9def"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "b79a50d1eee2eebf1beaa11503bd032b9b200142", "filename": "src/declare.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd4810de42c57b64b74dae09c530a4c3a41f87b9/src%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4810de42c57b64b74dae09c530a4c3a41f87b9/src%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdeclare.rs?ref=cd4810de42c57b64b74dae09c530a4c3a41f87b9", "patch": "@@ -40,12 +40,12 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n         global\n     }\n \n-    pub fn declare_func(&self, name: &str, return_type: Type<'gcc>, params: &[Type<'gcc>], variadic: bool) -> RValue<'gcc> {\n+    /*pub fn declare_func(&self, name: &str, return_type: Type<'gcc>, params: &[Type<'gcc>], variadic: bool) -> RValue<'gcc> {\n         self.linkage.set(FunctionType::Exported);\n         let func = declare_raw_fn(self, name, () /*llvm::CCallConv*/, return_type, params, variadic);\n         // FIXME(antoyo): this is a wrong cast. That requires changing the compiler API.\n         unsafe { std::mem::transmute(func) }\n-    }\n+    }*/\n \n     pub fn declare_global(&self, name: &str, ty: Type<'gcc>, is_tls: bool, link_section: Option<Symbol>) -> LValue<'gcc> {\n         let global = self.context.new_global(None, GlobalKind::Exported, ty, name);"}, {"sha": "375d422cb25c40608565b752f0b555caf54425a4", "filename": "src/intrinsic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4810de42c57b64b74dae09c530a4c3a41f87b9/src%2Fintrinsic%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4810de42c57b64b74dae09c530a4c3a41f87b9/src%2Fintrinsic%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fmod.rs?ref=cd4810de42c57b64b74dae09c530a4c3a41f87b9", "patch": "@@ -272,7 +272,7 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n                     use rustc_target::abi::Abi::*;\n                     let tp_ty = substs.type_at(0);\n                     let layout = self.layout_of(tp_ty).layout;\n-                    let use_integer_compare = match layout.abi {\n+                    let _use_integer_compare = match layout.abi {\n                         Scalar(_) | ScalarPair(_, _) => true,\n                         Uninhabited | Vector { .. } => false,\n                         Aggregate { .. } => {"}]}