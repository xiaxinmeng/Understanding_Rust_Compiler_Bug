{"sha": "3d69d23a25d6375ff8083bb94cc5b5fbc1f25415", "node_id": "C_kwDOAAsO6NoAKDNkNjlkMjNhMjVkNjM3NWZmODA4M2JiOTRjYzViNWZiYzFmMjU0MTU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-18T14:57:22Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-21T11:31:55Z"}, "message": "Split match out into a helper function", "tree": {"sha": "7a016cd52002a4885f85acbdecc6ab747c35524a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a016cd52002a4885f85acbdecc6ab747c35524a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d69d23a25d6375ff8083bb94cc5b5fbc1f25415", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d69d23a25d6375ff8083bb94cc5b5fbc1f25415", "html_url": "https://github.com/rust-lang/rust/commit/3d69d23a25d6375ff8083bb94cc5b5fbc1f25415", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d69d23a25d6375ff8083bb94cc5b5fbc1f25415/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1de00d1ac5247a02184ef7ad044f6521ade7e0cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1de00d1ac5247a02184ef7ad044f6521ade7e0cc", "html_url": "https://github.com/rust-lang/rust/commit/1de00d1ac5247a02184ef7ad044f6521ade7e0cc"}], "stats": {"total": 59, "additions": 34, "deletions": 25}, "files": [{"sha": "e87510954288d261953b03b940823a830edd90bb", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 34, "deletions": 25, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/3d69d23a25d6375ff8083bb94cc5b5fbc1f25415/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d69d23a25d6375ff8083bb94cc5b5fbc1f25415/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=3d69d23a25d6375ff8083bb94cc5b5fbc1f25415", "patch": "@@ -71,7 +71,7 @@ use rustc_data_structures::undo_log::UndoLogs;\n use rustc_hir::def_id::LocalDefId;\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::subst::GenericArgKind;\n-use rustc_middle::ty::{self, Region, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, Region, SubstsRef, Ty, TyCtxt, TypeVisitable};\n use smallvec::smallvec;\n \n impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n@@ -352,7 +352,7 @@ where\n         // may not apply.\n         let mut approx_env_bounds =\n             self.verify_bound.projection_approx_declared_bounds_from_env(projection_ty);\n-        debug!(\"projection_must_outlive: approx_env_bounds={:?}\", approx_env_bounds);\n+        debug!(?approx_env_bounds);\n \n         // Remove outlives bounds that we get from the environment but\n         // which are also deducible from the trait. This arises (cc\n@@ -392,27 +392,9 @@ where\n         // edges, which winds up enforcing the same condition.\n         let needs_infer = projection_ty.needs_infer();\n         if approx_env_bounds.is_empty() && trait_bounds.is_empty() && needs_infer {\n-            debug!(\"projection_must_outlive: no declared bounds\");\n-\n-            let constraint = origin.to_constraint_category();\n-            for k in projection_ty.substs {\n-                match k.unpack() {\n-                    GenericArgKind::Lifetime(lt) => {\n-                        self.delegate.push_sub_region_constraint(\n-                            origin.clone(),\n-                            region,\n-                            lt,\n-                            constraint,\n-                        );\n-                    }\n-                    GenericArgKind::Type(ty) => {\n-                        self.type_must_outlive(origin.clone(), ty, region, constraint);\n-                    }\n-                    GenericArgKind::Const(_) => {\n-                        // Const parameters don't impose constraints.\n-                    }\n-                }\n-            }\n+            debug!(\"no declared bounds\");\n+\n+            self.substs_must_outlive(projection_ty.substs, origin, region);\n \n             return;\n         }\n@@ -442,8 +424,8 @@ where\n                 .all(|b| b == Some(trait_bounds[0]))\n         {\n             let unique_bound = trait_bounds[0];\n-            debug!(\"projection_must_outlive: unique trait bound = {:?}\", unique_bound);\n-            debug!(\"projection_must_outlive: unique declared bound appears in trait ref\");\n+            debug!(?unique_bound);\n+            debug!(\"unique declared bound appears in trait ref\");\n             let category = origin.to_constraint_category();\n             self.delegate.push_sub_region_constraint(origin, region, unique_bound, category);\n             return;\n@@ -459,6 +441,33 @@ where\n         debug!(\"projection_must_outlive: pushing {:?}\", verify_bound);\n         self.delegate.push_verify(origin, generic, region, verify_bound);\n     }\n+\n+    fn substs_must_outlive(\n+        &mut self,\n+        substs: SubstsRef<'tcx>,\n+        origin: infer::SubregionOrigin<'tcx>,\n+        region: ty::Region<'tcx>,\n+    ) {\n+        let constraint = origin.to_constraint_category();\n+        for k in substs {\n+            match k.unpack() {\n+                GenericArgKind::Lifetime(lt) => {\n+                    self.delegate.push_sub_region_constraint(\n+                        origin.clone(),\n+                        region,\n+                        lt,\n+                        constraint,\n+                    );\n+                }\n+                GenericArgKind::Type(ty) => {\n+                    self.type_must_outlive(origin.clone(), ty, region, constraint);\n+                }\n+                GenericArgKind::Const(_) => {\n+                    // Const parameters don't impose constraints.\n+                }\n+            }\n+        }\n+    }\n }\n \n impl<'cx, 'tcx> TypeOutlivesDelegate<'tcx> for &'cx InferCtxt<'cx, 'tcx> {"}]}