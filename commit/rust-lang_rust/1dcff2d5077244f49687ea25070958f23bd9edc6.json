{"sha": "1dcff2d5077244f49687ea25070958f23bd9edc6", "node_id": "C_kwDOAAsO6NoAKDFkY2ZmMmQ1MDc3MjQ0ZjQ5Njg3ZWEyNTA3MDk1OGYyM2JkOWVkYzY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-08T10:03:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-08T10:03:27Z"}, "message": "Auto merge of #98638 - bjorn3:less_string_interning, r=tmiasko\n\nUse less string interning\n\nThis removes string interning in a couple of places where doing so won't result in perf improvements. I also switched one place to use pre-interned symbols.", "tree": {"sha": "3f03f613e810dc16f54fc1e807f1f1dbfd98d215", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f03f613e810dc16f54fc1e807f1f1dbfd98d215"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dcff2d5077244f49687ea25070958f23bd9edc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dcff2d5077244f49687ea25070958f23bd9edc6", "html_url": "https://github.com/rust-lang/rust/commit/1dcff2d5077244f49687ea25070958f23bd9edc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dcff2d5077244f49687ea25070958f23bd9edc6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f97e02bdc7a53176aa96a53ff8b533947d7649c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f97e02bdc7a53176aa96a53ff8b533947d7649c", "html_url": "https://github.com/rust-lang/rust/commit/0f97e02bdc7a53176aa96a53ff8b533947d7649c"}, {"sha": "f688f4d1e4753ca0a83a1413a7b98fb8727c04a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f688f4d1e4753ca0a83a1413a7b98fb8727c04a2", "html_url": "https://github.com/rust-lang/rust/commit/f688f4d1e4753ca0a83a1413a7b98fb8727c04a2"}], "stats": {"total": 199, "additions": 103, "deletions": 96}, "files": [{"sha": "d156f87443497b5d7a909f01991298e4a4b05f8b", "filename": "compiler/rustc_codegen_gcc/src/common.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1dcff2d5077244f49687ea25070958f23bd9edc6/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcff2d5077244f49687ea25070958f23bd9edc6/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs?ref=1dcff2d5077244f49687ea25070958f23bd9edc6", "patch": "@@ -12,7 +12,6 @@ use rustc_middle::mir::Mutability;\n use rustc_middle::ty::ScalarInt;\n use rustc_middle::ty::layout::{TyAndLayout, LayoutOf};\n use rustc_middle::mir::interpret::{ConstAllocation, GlobalAlloc, Scalar};\n-use rustc_span::Symbol;\n use rustc_target::abi::{self, HasDataLayout, Pointer, Size};\n \n use crate::consts::const_alloc_to_gcc;\n@@ -125,12 +124,15 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n         self.context.new_rvalue_from_double(typ, val)\n     }\n \n-    fn const_str(&self, s: Symbol) -> (RValue<'gcc>, RValue<'gcc>) {\n-        let s_str = s.as_str();\n-        let str_global = *self.const_str_cache.borrow_mut().entry(s).or_insert_with(|| {\n-            self.global_string(s_str)\n-        });\n-        let len = s_str.len();\n+    fn const_str(&self, s: &str) -> (RValue<'gcc>, RValue<'gcc>) {\n+        let str_global = *self\n+            .const_str_cache\n+            .borrow_mut()\n+            .raw_entry_mut()\n+            .from_key(s)\n+            .or_insert_with(|| (s.to_owned(), self.global_string(s)))\n+            .1;\n+        let len = s.len();\n         let cs = self.const_ptrcast(str_global.get_address(None),\n             self.type_ptr_to(self.layout_of(self.tcx.types.str_).gcc_type(self, true)),\n         );"}, {"sha": "478f6d893dd0f347210b4297139f2087f99cdabf", "filename": "compiler/rustc_codegen_gcc/src/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1dcff2d5077244f49687ea25070958f23bd9edc6/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcff2d5077244f49687ea25070958f23bd9edc6/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs?ref=1dcff2d5077244f49687ea25070958f23bd9edc6", "patch": "@@ -13,7 +13,7 @@ use rustc_middle::mir::mono::CodegenUnit;\n use rustc_middle::ty::{self, Instance, ParamEnv, PolyExistentialTraitRef, Ty, TyCtxt};\n use rustc_middle::ty::layout::{FnAbiError, FnAbiOfHelpers, FnAbiRequest, HasParamEnv, HasTyCtxt, LayoutError, TyAndLayout, LayoutOfHelpers};\n use rustc_session::Session;\n-use rustc_span::{Span, Symbol};\n+use rustc_span::Span;\n use rustc_target::abi::{call::FnAbi, HasDataLayout, PointeeInfo, Size, TargetDataLayout, VariantIdx};\n use rustc_target::spec::{HasTargetSpec, Target, TlsModel};\n \n@@ -101,7 +101,7 @@ pub struct CodegenCx<'gcc, 'tcx> {\n     pub global_lvalues: RefCell<FxHashMap<RValue<'gcc>, LValue<'gcc>>>,\n \n     /// Cache of constant strings,\n-    pub const_str_cache: RefCell<FxHashMap<Symbol, LValue<'gcc>>>,\n+    pub const_str_cache: RefCell<FxHashMap<String, LValue<'gcc>>>,\n \n     /// Cache of globals.\n     pub globals: RefCell<FxHashMap<String, RValue<'gcc>>>,"}, {"sha": "399830de84cb951b68f9f85ce8204e84d2063c02", "filename": "compiler/rustc_codegen_gcc/src/lib.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1dcff2d5077244f49687ea25070958f23bd9edc6/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcff2d5077244f49687ea25070958f23bd9edc6/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs?ref=1dcff2d5077244f49687ea25070958f23bd9edc6", "patch": "@@ -6,7 +6,14 @@\n  * TODO(antoyo): remove the patches.\n  */\n \n-#![feature(rustc_private, decl_macro, associated_type_bounds, never_type, trusted_len)]\n+#![feature(\n+    rustc_private,\n+    decl_macro,\n+    associated_type_bounds,\n+    never_type,\n+    trusted_len,\n+    hash_raw_entry\n+)]\n #![allow(broken_intra_doc_links)]\n #![recursion_limit=\"256\"]\n #![warn(rust_2018_idioms)]"}, {"sha": "fc20dee4c74d4c76f6740979ad1abb700a7dcf4e", "filename": "compiler/rustc_codegen_llvm/src/common.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1dcff2d5077244f49687ea25070958f23bd9edc6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcff2d5077244f49687ea25070958f23bd9edc6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs?ref=1dcff2d5077244f49687ea25070958f23bd9edc6", "patch": "@@ -14,7 +14,6 @@ use rustc_middle::bug;\n use rustc_middle::mir::interpret::{ConstAllocation, GlobalAlloc, Scalar};\n use rustc_middle::ty::layout::{LayoutOf, TyAndLayout};\n use rustc_middle::ty::ScalarInt;\n-use rustc_span::symbol::Symbol;\n use rustc_target::abi::{self, AddressSpace, HasDataLayout, Pointer, Size};\n \n use libc::{c_char, c_uint};\n@@ -180,22 +179,27 @@ impl<'ll, 'tcx> ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         unsafe { llvm::LLVMConstReal(t, val) }\n     }\n \n-    fn const_str(&self, s: Symbol) -> (&'ll Value, &'ll Value) {\n-        let s_str = s.as_str();\n-        let str_global = *self.const_str_cache.borrow_mut().entry(s).or_insert_with(|| {\n-            let sc = self.const_bytes(s_str.as_bytes());\n-            let sym = self.generate_local_symbol_name(\"str\");\n-            let g = self.define_global(&sym, self.val_ty(sc)).unwrap_or_else(|| {\n-                bug!(\"symbol `{}` is already defined\", sym);\n-            });\n-            unsafe {\n-                llvm::LLVMSetInitializer(g, sc);\n-                llvm::LLVMSetGlobalConstant(g, True);\n-                llvm::LLVMRustSetLinkage(g, llvm::Linkage::InternalLinkage);\n-            }\n-            g\n-        });\n-        let len = s_str.len();\n+    fn const_str(&self, s: &str) -> (&'ll Value, &'ll Value) {\n+        let str_global = *self\n+            .const_str_cache\n+            .borrow_mut()\n+            .raw_entry_mut()\n+            .from_key(s)\n+            .or_insert_with(|| {\n+                let sc = self.const_bytes(s.as_bytes());\n+                let sym = self.generate_local_symbol_name(\"str\");\n+                let g = self.define_global(&sym, self.val_ty(sc)).unwrap_or_else(|| {\n+                    bug!(\"symbol `{}` is already defined\", sym);\n+                });\n+                unsafe {\n+                    llvm::LLVMSetInitializer(g, sc);\n+                    llvm::LLVMSetGlobalConstant(g, True);\n+                    llvm::LLVMRustSetLinkage(g, llvm::Linkage::InternalLinkage);\n+                }\n+                (s.to_owned(), g)\n+            })\n+            .1;\n+        let len = s.len();\n         let cs = consts::ptrcast(\n             str_global,\n             self.type_ptr_to(self.layout_of(self.tcx.types.str_).llvm_type(self)),"}, {"sha": "55e4a4a7255b585aa181091573de1de4e287fc95", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1dcff2d5077244f49687ea25070958f23bd9edc6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcff2d5077244f49687ea25070958f23bd9edc6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=1dcff2d5077244f49687ea25070958f23bd9edc6", "patch": "@@ -26,7 +26,6 @@ use rustc_session::config::{BranchProtection, CFGuard, CFProtection};\n use rustc_session::config::{CrateType, DebugInfo, PAuthKey, PacRet};\n use rustc_session::Session;\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::Symbol;\n use rustc_target::abi::{\n     call::FnAbi, HasDataLayout, PointeeInfo, Size, TargetDataLayout, VariantIdx,\n };\n@@ -56,7 +55,7 @@ pub struct CodegenCx<'ll, 'tcx> {\n     pub vtables:\n         RefCell<FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), &'ll Value>>,\n     /// Cache of constant strings,\n-    pub const_str_cache: RefCell<FxHashMap<Symbol, &'ll Value>>,\n+    pub const_str_cache: RefCell<FxHashMap<String, &'ll Value>>,\n \n     /// Reverse-direction for const ptrs cast from globals.\n     ///"}, {"sha": "a7dd8e16d28eb7195ecccdfda308a4f708388d2a", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dcff2d5077244f49687ea25070958f23bd9edc6/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcff2d5077244f49687ea25070958f23bd9edc6/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=1dcff2d5077244f49687ea25070958f23bd9edc6", "patch": "@@ -5,6 +5,7 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(hash_raw_entry)]\n #![feature(let_chains)]\n #![feature(let_else)]\n #![feature(extern_types)]"}, {"sha": "1cb8d3423812937658391356d9b8ec3a9c2ef9e1", "filename": "compiler/rustc_codegen_ssa/src/back/archive.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1dcff2d5077244f49687ea25070958f23bd9edc6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcff2d5077244f49687ea25070958f23bd9edc6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs?ref=1dcff2d5077244f49687ea25070958f23bd9edc6", "patch": "@@ -1,13 +1,12 @@\n use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_session::cstore::DllImport;\n use rustc_session::Session;\n-use rustc_span::symbol::Symbol;\n \n use std::io;\n use std::path::{Path, PathBuf};\n \n pub(super) fn find_library(\n-    name: Symbol,\n+    name: &str,\n     verbatim: bool,\n     search_paths: &[PathBuf],\n     sess: &Session,"}, {"sha": "9b0ba34135c11efd00a6e2ffd128e074c1e0ef5b", "filename": "compiler/rustc_codegen_ssa/src/back/command.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1dcff2d5077244f49687ea25070958f23bd9edc6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fcommand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcff2d5077244f49687ea25070958f23bd9edc6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fcommand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fcommand.rs?ref=1dcff2d5077244f49687ea25070958f23bd9edc6", "patch": "@@ -7,7 +7,6 @@ use std::io;\n use std::mem;\n use std::process::{self, Output};\n \n-use rustc_span::symbol::Symbol;\n use rustc_target::spec::LldFlavor;\n \n #[derive(Clone)]\n@@ -47,11 +46,6 @@ impl Command {\n         self\n     }\n \n-    pub fn sym_arg(&mut self, arg: Symbol) -> &mut Command {\n-        self.arg(arg.as_str());\n-        self\n-    }\n-\n     pub fn args<I>(&mut self, args: I) -> &mut Command\n     where\n         I: IntoIterator<Item: AsRef<OsStr>>,"}, {"sha": "1628d580b88d33c79c836325a4bb68065334f06f", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1dcff2d5077244f49687ea25070958f23bd9edc6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcff2d5077244f49687ea25070958f23bd9edc6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=1dcff2d5077244f49687ea25070958f23bd9edc6", "patch": "@@ -358,7 +358,7 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n         }\n         if let Some(name) = lib.name {\n             let location =\n-                find_library(name, lib.verbatim.unwrap_or(false), &lib_search_paths, sess);\n+                find_library(name.as_str(), lib.verbatim.unwrap_or(false), &lib_search_paths, sess);\n             ab.add_archive(&location, |_| false).unwrap_or_else(|e| {\n                 sess.fatal(&format!(\n                     \"failed to add native library {}: {}\",\n@@ -1122,7 +1122,7 @@ fn link_sanitizer_runtime(sess: &Session, linker: &mut dyn Linker, name: &str) {\n         let path = find_sanitizer_runtime(&sess, &filename);\n         let rpath = path.to_str().expect(\"non-utf8 component in path\");\n         linker.args(&[\"-Wl,-rpath\", \"-Xlinker\", rpath]);\n-        linker.link_dylib(Symbol::intern(&filename), false, true);\n+        linker.link_dylib(&filename, false, true);\n     } else {\n         let filename = format!(\"librustc{}_rt.{}.a\", channel, name);\n         let path = find_sanitizer_runtime(&sess, &filename).join(&filename);\n@@ -2204,6 +2204,7 @@ fn add_local_native_libraries(\n         let Some(name) = lib.name else {\n             continue;\n         };\n+        let name = name.as_str();\n \n         // Skip if this library is the same as the last.\n         last = if (lib.name, lib.kind, lib.verbatim) == last {\n@@ -2367,6 +2368,7 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n                         let Some(name) = lib.name else {\n                             continue;\n                         };\n+                        let name = name.as_str();\n                         if !relevant_lib(sess, lib) {\n                             continue;\n                         }\n@@ -2524,7 +2526,7 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n         }\n         let filestem = cratepath.file_stem().unwrap().to_str().unwrap();\n         cmd.link_rust_dylib(\n-            Symbol::intern(&unlib(&sess.target, filestem)),\n+            &unlib(&sess.target, filestem),\n             parent.unwrap_or_else(|| Path::new(\"\")),\n         );\n     }\n@@ -2556,6 +2558,7 @@ fn add_upstream_native_libraries(\n             let Some(name) = lib.name else {\n                 continue;\n             };\n+            let name = name.as_str();\n             if !relevant_lib(sess, &lib) {\n                 continue;\n             }"}, {"sha": "955ee245b28aebe4091d8c433f43c4e9d813946d", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 48, "deletions": 49, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/1dcff2d5077244f49687ea25070958f23bd9edc6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcff2d5077244f49687ea25070958f23bd9edc6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=1dcff2d5077244f49687ea25070958f23bd9edc6", "patch": "@@ -16,7 +16,6 @@ use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportInfo, S\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{self, CrateType, DebugInfo, LinkerPluginLto, Lto, OptLevel, Strip};\n use rustc_session::Session;\n-use rustc_span::symbol::Symbol;\n use rustc_target::spec::{LinkOutputKind, LinkerFlavor, LldFlavor};\n \n use cc::windows_registry;\n@@ -163,13 +162,13 @@ pub fn get_linker<'a>(\n pub trait Linker {\n     fn cmd(&mut self) -> &mut Command;\n     fn set_output_kind(&mut self, output_kind: LinkOutputKind, out_filename: &Path);\n-    fn link_dylib(&mut self, lib: Symbol, verbatim: bool, as_needed: bool);\n-    fn link_rust_dylib(&mut self, lib: Symbol, path: &Path);\n-    fn link_framework(&mut self, framework: Symbol, as_needed: bool);\n-    fn link_staticlib(&mut self, lib: Symbol, verbatim: bool);\n+    fn link_dylib(&mut self, lib: &str, verbatim: bool, as_needed: bool);\n+    fn link_rust_dylib(&mut self, lib: &str, path: &Path);\n+    fn link_framework(&mut self, framework: &str, as_needed: bool);\n+    fn link_staticlib(&mut self, lib: &str, verbatim: bool);\n     fn link_rlib(&mut self, lib: &Path);\n     fn link_whole_rlib(&mut self, lib: &Path);\n-    fn link_whole_staticlib(&mut self, lib: Symbol, verbatim: bool, search_path: &[PathBuf]);\n+    fn link_whole_staticlib(&mut self, lib: &str, verbatim: bool, search_path: &[PathBuf]);\n     fn include_path(&mut self, path: &Path);\n     fn framework_path(&mut self, path: &Path);\n     fn output_filename(&mut self, path: &Path);\n@@ -423,8 +422,8 @@ impl<'a> Linker for GccLinker<'a> {\n         }\n     }\n \n-    fn link_dylib(&mut self, lib: Symbol, verbatim: bool, as_needed: bool) {\n-        if self.sess.target.os == \"illumos\" && lib.as_str() == \"c\" {\n+    fn link_dylib(&mut self, lib: &str, verbatim: bool, as_needed: bool) {\n+        if self.sess.target.os == \"illumos\" && lib == \"c\" {\n             // libc will be added via late_link_args on illumos so that it will\n             // appear last in the library search order.\n             // FIXME: This should be replaced by a more complete and generic\n@@ -454,7 +453,7 @@ impl<'a> Linker for GccLinker<'a> {\n             }\n         }\n     }\n-    fn link_staticlib(&mut self, lib: Symbol, verbatim: bool) {\n+    fn link_staticlib(&mut self, lib: &str, verbatim: bool) {\n         self.hint_static();\n         self.cmd.arg(format!(\"-l{}{}\", if verbatim { \":\" } else { \"\" }, lib));\n     }\n@@ -484,20 +483,20 @@ impl<'a> Linker for GccLinker<'a> {\n         self.linker_arg(\"-znorelro\");\n     }\n \n-    fn link_rust_dylib(&mut self, lib: Symbol, _path: &Path) {\n+    fn link_rust_dylib(&mut self, lib: &str, _path: &Path) {\n         self.hint_dynamic();\n         self.cmd.arg(format!(\"-l{}\", lib));\n     }\n \n-    fn link_framework(&mut self, framework: Symbol, as_needed: bool) {\n+    fn link_framework(&mut self, framework: &str, as_needed: bool) {\n         self.hint_dynamic();\n         if !as_needed {\n             // FIXME(81490): ld64 as of macOS 11 supports the -needed_framework\n             // flag but we have no way to detect that here.\n-            // self.cmd.arg(\"-needed_framework\").sym_arg(framework);\n+            // self.cmd.arg(\"-needed_framework\").arg(framework);\n             self.sess.warn(\"`as-needed` modifier not implemented yet for ld64\");\n         }\n-        self.cmd.arg(\"-framework\").sym_arg(framework);\n+        self.cmd.arg(\"-framework\").arg(framework);\n     }\n \n     // Here we explicitly ask that the entire archive is included into the\n@@ -506,7 +505,7 @@ impl<'a> Linker for GccLinker<'a> {\n     // don't otherwise explicitly reference them. This can occur for\n     // libraries which are just providing bindings, libraries with generic\n     // functions, etc.\n-    fn link_whole_staticlib(&mut self, lib: Symbol, verbatim: bool, search_path: &[PathBuf]) {\n+    fn link_whole_staticlib(&mut self, lib: &str, verbatim: bool, search_path: &[PathBuf]) {\n         self.hint_static();\n         let target = &self.sess.target;\n         if !target.is_like_osx {\n@@ -836,11 +835,11 @@ impl<'a> Linker for MsvcLinker<'a> {\n         self.cmd.arg(\"/OPT:NOREF,NOICF\");\n     }\n \n-    fn link_dylib(&mut self, lib: Symbol, verbatim: bool, _as_needed: bool) {\n+    fn link_dylib(&mut self, lib: &str, verbatim: bool, _as_needed: bool) {\n         self.cmd.arg(format!(\"{}{}\", lib, if verbatim { \"\" } else { \".lib\" }));\n     }\n \n-    fn link_rust_dylib(&mut self, lib: Symbol, path: &Path) {\n+    fn link_rust_dylib(&mut self, lib: &str, path: &Path) {\n         // When producing a dll, the MSVC linker may not actually emit a\n         // `foo.lib` file if the dll doesn't actually export any symbols, so we\n         // check to see if the file is there and just omit linking to it if it's\n@@ -851,7 +850,7 @@ impl<'a> Linker for MsvcLinker<'a> {\n         }\n     }\n \n-    fn link_staticlib(&mut self, lib: Symbol, verbatim: bool) {\n+    fn link_staticlib(&mut self, lib: &str, verbatim: bool) {\n         self.cmd.arg(format!(\"{}{}\", lib, if verbatim { \"\" } else { \".lib\" }));\n     }\n \n@@ -890,11 +889,11 @@ impl<'a> Linker for MsvcLinker<'a> {\n     fn framework_path(&mut self, _path: &Path) {\n         bug!(\"frameworks are not supported on windows\")\n     }\n-    fn link_framework(&mut self, _framework: Symbol, _as_needed: bool) {\n+    fn link_framework(&mut self, _framework: &str, _as_needed: bool) {\n         bug!(\"frameworks are not supported on windows\")\n     }\n \n-    fn link_whole_staticlib(&mut self, lib: Symbol, verbatim: bool, _search_path: &[PathBuf]) {\n+    fn link_whole_staticlib(&mut self, lib: &str, verbatim: bool, _search_path: &[PathBuf]) {\n         self.cmd.arg(format!(\"/WHOLEARCHIVE:{}{}\", lib, if verbatim { \"\" } else { \".lib\" }));\n     }\n     fn link_whole_rlib(&mut self, path: &Path) {\n@@ -1047,8 +1046,8 @@ impl<'a> Linker for EmLinker<'a> {\n         self.cmd.arg(\"-L\").arg(path);\n     }\n \n-    fn link_staticlib(&mut self, lib: Symbol, _verbatim: bool) {\n-        self.cmd.arg(\"-l\").sym_arg(lib);\n+    fn link_staticlib(&mut self, lib: &str, _verbatim: bool) {\n+        self.cmd.arg(\"-l\").arg(lib);\n     }\n \n     fn output_filename(&mut self, path: &Path) {\n@@ -1059,12 +1058,12 @@ impl<'a> Linker for EmLinker<'a> {\n         self.cmd.arg(path);\n     }\n \n-    fn link_dylib(&mut self, lib: Symbol, verbatim: bool, _as_needed: bool) {\n+    fn link_dylib(&mut self, lib: &str, verbatim: bool, _as_needed: bool) {\n         // Emscripten always links statically\n         self.link_staticlib(lib, verbatim);\n     }\n \n-    fn link_whole_staticlib(&mut self, lib: Symbol, verbatim: bool, _search_path: &[PathBuf]) {\n+    fn link_whole_staticlib(&mut self, lib: &str, verbatim: bool, _search_path: &[PathBuf]) {\n         // not supported?\n         self.link_staticlib(lib, verbatim);\n     }\n@@ -1074,7 +1073,7 @@ impl<'a> Linker for EmLinker<'a> {\n         self.link_rlib(lib);\n     }\n \n-    fn link_rust_dylib(&mut self, lib: Symbol, _path: &Path) {\n+    fn link_rust_dylib(&mut self, lib: &str, _path: &Path) {\n         self.link_dylib(lib, false, true);\n     }\n \n@@ -1098,7 +1097,7 @@ impl<'a> Linker for EmLinker<'a> {\n         bug!(\"frameworks are not supported on Emscripten\")\n     }\n \n-    fn link_framework(&mut self, _framework: Symbol, _as_needed: bool) {\n+    fn link_framework(&mut self, _framework: &str, _as_needed: bool) {\n         bug!(\"frameworks are not supported on Emscripten\")\n     }\n \n@@ -1237,12 +1236,12 @@ impl<'a> Linker for WasmLd<'a> {\n         }\n     }\n \n-    fn link_dylib(&mut self, lib: Symbol, _verbatim: bool, _as_needed: bool) {\n-        self.cmd.arg(\"-l\").sym_arg(lib);\n+    fn link_dylib(&mut self, lib: &str, _verbatim: bool, _as_needed: bool) {\n+        self.cmd.arg(\"-l\").arg(lib);\n     }\n \n-    fn link_staticlib(&mut self, lib: Symbol, _verbatim: bool) {\n-        self.cmd.arg(\"-l\").sym_arg(lib);\n+    fn link_staticlib(&mut self, lib: &str, _verbatim: bool) {\n+        self.cmd.arg(\"-l\").arg(lib);\n     }\n \n     fn link_rlib(&mut self, lib: &Path) {\n@@ -1271,16 +1270,16 @@ impl<'a> Linker for WasmLd<'a> {\n \n     fn no_relro(&mut self) {}\n \n-    fn link_rust_dylib(&mut self, lib: Symbol, _path: &Path) {\n-        self.cmd.arg(\"-l\").sym_arg(lib);\n+    fn link_rust_dylib(&mut self, lib: &str, _path: &Path) {\n+        self.cmd.arg(\"-l\").arg(lib);\n     }\n \n-    fn link_framework(&mut self, _framework: Symbol, _as_needed: bool) {\n+    fn link_framework(&mut self, _framework: &str, _as_needed: bool) {\n         panic!(\"frameworks not supported\")\n     }\n \n-    fn link_whole_staticlib(&mut self, lib: Symbol, _verbatim: bool, _search_path: &[PathBuf]) {\n-        self.cmd.arg(\"-l\").sym_arg(lib);\n+    fn link_whole_staticlib(&mut self, lib: &str, _verbatim: bool, _search_path: &[PathBuf]) {\n+        self.cmd.arg(\"-l\").arg(lib);\n     }\n \n     fn link_whole_rlib(&mut self, lib: &Path) {\n@@ -1360,10 +1359,10 @@ pub struct L4Bender<'a> {\n }\n \n impl<'a> Linker for L4Bender<'a> {\n-    fn link_dylib(&mut self, _lib: Symbol, _verbatim: bool, _as_needed: bool) {\n+    fn link_dylib(&mut self, _lib: &str, _verbatim: bool, _as_needed: bool) {\n         bug!(\"dylibs are not supported on L4Re\");\n     }\n-    fn link_staticlib(&mut self, lib: Symbol, _verbatim: bool) {\n+    fn link_staticlib(&mut self, lib: &str, _verbatim: bool) {\n         self.hint_static();\n         self.cmd.arg(format!(\"-PC{}\", lib));\n     }\n@@ -1404,15 +1403,15 @@ impl<'a> Linker for L4Bender<'a> {\n \n     fn set_output_kind(&mut self, _output_kind: LinkOutputKind, _out_filename: &Path) {}\n \n-    fn link_rust_dylib(&mut self, _: Symbol, _: &Path) {\n+    fn link_rust_dylib(&mut self, _: &str, _: &Path) {\n         panic!(\"Rust dylibs not supported\");\n     }\n \n-    fn link_framework(&mut self, _framework: Symbol, _as_needed: bool) {\n+    fn link_framework(&mut self, _framework: &str, _as_needed: bool) {\n         bug!(\"frameworks not supported on L4Re\");\n     }\n \n-    fn link_whole_staticlib(&mut self, lib: Symbol, _verbatim: bool, _search_path: &[PathBuf]) {\n+    fn link_whole_staticlib(&mut self, lib: &str, _verbatim: bool, _search_path: &[PathBuf]) {\n         self.hint_static();\n         self.cmd.arg(\"--whole-archive\").arg(format!(\"-l{}\", lib));\n         self.cmd.arg(\"--no-whole-archive\");\n@@ -1617,27 +1616,27 @@ impl<'a> Linker for PtxLinker<'a> {\n         self.cmd.arg(\"-o\").arg(path);\n     }\n \n-    fn link_dylib(&mut self, _lib: Symbol, _verbatim: bool, _as_needed: bool) {\n+    fn link_dylib(&mut self, _lib: &str, _verbatim: bool, _as_needed: bool) {\n         panic!(\"external dylibs not supported\")\n     }\n \n-    fn link_rust_dylib(&mut self, _lib: Symbol, _path: &Path) {\n+    fn link_rust_dylib(&mut self, _lib: &str, _path: &Path) {\n         panic!(\"external dylibs not supported\")\n     }\n \n-    fn link_staticlib(&mut self, _lib: Symbol, _verbatim: bool) {\n+    fn link_staticlib(&mut self, _lib: &str, _verbatim: bool) {\n         panic!(\"staticlibs not supported\")\n     }\n \n-    fn link_whole_staticlib(&mut self, _lib: Symbol, _verbatim: bool, _search_path: &[PathBuf]) {\n+    fn link_whole_staticlib(&mut self, _lib: &str, _verbatim: bool, _search_path: &[PathBuf]) {\n         panic!(\"staticlibs not supported\")\n     }\n \n     fn framework_path(&mut self, _path: &Path) {\n         panic!(\"frameworks not supported\")\n     }\n \n-    fn link_framework(&mut self, _framework: Symbol, _as_needed: bool) {\n+    fn link_framework(&mut self, _framework: &str, _as_needed: bool) {\n         panic!(\"frameworks not supported\")\n     }\n \n@@ -1717,27 +1716,27 @@ impl<'a> Linker for BpfLinker<'a> {\n         self.cmd.arg(\"-o\").arg(path);\n     }\n \n-    fn link_dylib(&mut self, _lib: Symbol, _verbatim: bool, _as_needed: bool) {\n+    fn link_dylib(&mut self, _lib: &str, _verbatim: bool, _as_needed: bool) {\n         panic!(\"external dylibs not supported\")\n     }\n \n-    fn link_rust_dylib(&mut self, _lib: Symbol, _path: &Path) {\n+    fn link_rust_dylib(&mut self, _lib: &str, _path: &Path) {\n         panic!(\"external dylibs not supported\")\n     }\n \n-    fn link_staticlib(&mut self, _lib: Symbol, _verbatim: bool) {\n+    fn link_staticlib(&mut self, _lib: &str, _verbatim: bool) {\n         panic!(\"staticlibs not supported\")\n     }\n \n-    fn link_whole_staticlib(&mut self, _lib: Symbol, _verbatim: bool, _search_path: &[PathBuf]) {\n+    fn link_whole_staticlib(&mut self, _lib: &str, _verbatim: bool, _search_path: &[PathBuf]) {\n         panic!(\"staticlibs not supported\")\n     }\n \n     fn framework_path(&mut self, _path: &Path) {\n         panic!(\"frameworks not supported\")\n     }\n \n-    fn link_framework(&mut self, _framework: Symbol, _as_needed: bool) {\n+    fn link_framework(&mut self, _framework: &str, _as_needed: bool) {\n         panic!(\"frameworks not supported\")\n     }\n "}, {"sha": "b8e3cb32ef633baeb184b0d0350c6a82af136997", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1dcff2d5077244f49687ea25070958f23bd9edc6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcff2d5077244f49687ea25070958f23bd9edc6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=1dcff2d5077244f49687ea25070958f23bd9edc6", "patch": "@@ -489,8 +489,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 (LangItem::PanicBoundsCheck, vec![index, len, location])\n             }\n             _ => {\n-                let msg_str = Symbol::intern(msg.description());\n-                let msg = bx.const_str(msg_str);\n+                let msg = bx.const_str(msg.description());\n                 // It's `pub fn panic(expr: &str)`, with the wide reference being passed\n                 // as two arguments, and `#[track_caller]` adds an implicit third argument.\n                 (LangItem::Panic, vec![msg.0, msg.1, location])\n@@ -571,7 +570,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         }\n                     })\n                 });\n-                let msg = bx.const_str(Symbol::intern(&msg_str));\n+                let msg = bx.const_str(&msg_str);\n                 let location = self.get_caller_location(bx, source_info).immediate();\n \n                 // Obtain the panic entry point."}, {"sha": "fdc7a30e841ed1b7e4d64ff077a3fd6e1b26baf4", "filename": "compiler/rustc_codegen_ssa/src/traits/consts.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1dcff2d5077244f49687ea25070958f23bd9edc6/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcff2d5077244f49687ea25070958f23bd9edc6/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fconsts.rs?ref=1dcff2d5077244f49687ea25070958f23bd9edc6", "patch": "@@ -2,7 +2,6 @@ use super::BackendTypes;\n use crate::mir::place::PlaceRef;\n use rustc_middle::mir::interpret::{ConstAllocation, Scalar};\n use rustc_middle::ty::layout::TyAndLayout;\n-use rustc_span::Symbol;\n use rustc_target::abi::{self, Size};\n \n pub trait ConstMethods<'tcx>: BackendTypes {\n@@ -21,7 +20,7 @@ pub trait ConstMethods<'tcx>: BackendTypes {\n     fn const_u8(&self, i: u8) -> Self::Value;\n     fn const_real(&self, t: Self::Type, val: f64) -> Self::Value;\n \n-    fn const_str(&self, s: Symbol) -> (Self::Value, Self::Value);\n+    fn const_str(&self, s: &str) -> (Self::Value, Self::Value);\n     fn const_struct(&self, elts: &[Self::Value], packed: bool) -> Self::Value;\n \n     fn const_to_opt_uint(&self, v: Self::Value) -> Option<u64>;"}, {"sha": "87bc0d9762ea57b6561a167a3a944294118c365f", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1dcff2d5077244f49687ea25070958f23bd9edc6/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcff2d5077244f49687ea25070958f23bd9edc6/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=1dcff2d5077244f49687ea25070958f23bd9edc6", "patch": "@@ -271,8 +271,7 @@ impl<'a> Parser<'a> {\n             // MACRO_RULES ITEM\n             self.parse_item_macro_rules(vis, has_bang)?\n         } else if self.isnt_macro_invocation()\n-            && (self.token.is_ident_named(Symbol::intern(\"import\"))\n-                || self.token.is_ident_named(Symbol::intern(\"using\")))\n+            && (self.token.is_ident_named(sym::import) || self.token.is_ident_named(sym::using))\n         {\n             return self.recover_import_as_use();\n         } else if self.isnt_macro_invocation() && vis.kind.is_pub() {"}, {"sha": "9b6967621f1dc3b812fce01dfff3babd3a4fbe36", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dcff2d5077244f49687ea25070958f23bd9edc6/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcff2d5077244f49687ea25070958f23bd9edc6/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=1dcff2d5077244f49687ea25070958f23bd9edc6", "patch": "@@ -786,6 +786,7 @@ symbols! {\n         impl_lint_pass,\n         impl_macros,\n         impl_trait_in_bindings,\n+        import,\n         import_shadowing,\n         imported_main,\n         in_band_lifetimes,\n@@ -1523,6 +1524,7 @@ symbols! {\n         use_nested_groups,\n         used,\n         used_with_arg,\n+        using,\n         usize,\n         v1,\n         va_arg,"}]}