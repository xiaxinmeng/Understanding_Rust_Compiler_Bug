{"sha": "f77fc158fc6502cede48c94bbabb040c77b38c08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3N2ZjMTU4ZmM2NTAyY2VkZTQ4Yzk0YmJhYmIwNDBjNzdiMzhjMDg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-31T17:40:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-31T17:40:03Z"}, "message": "Merge #3780 #3787\n\n3780: Simplify r=matklad a=Veetaha\n\nI absolutely love tha fact that removing `.clone()` simplifies the code comparing to other languages where it's actually the contrary (ahem ~~`std::move()`~~)\n\n3787: vscode: add syntax tree inspection hovers and highlights r=matklad a=Veetaha\n\n![inspect-tree](https://user-images.githubusercontent.com/36276403/78029767-c7426900-7369-11ea-9ed6-b8a0f8e05bac.gif)\r\nI implemented the reverse mapping (when you hover in the rust editor), but it seems overcomplicated, so I removed it\r\n\r\nRelated #3682 \n\nCo-authored-by: veetaha <veetaha2@gmail.com>\nCo-authored-by: Veetaha <veetaha2@gmail.com>", "tree": {"sha": "ea1f7a8597f934693958d64a0914d35c3731c8cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea1f7a8597f934693958d64a0914d35c3731c8cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f77fc158fc6502cede48c94bbabb040c77b38c08", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeg4BzCRBK7hj4Ov3rIwAAdHIIACmJSkyQFd+VMMFgYJUv/WL/\n/cSUK2fkpD/S5EYn6B1e8m4rhBmWjYoiQPYe/iul5y9EgrH7Hi2eGx1NMNxRUg6D\nY3w10NyZxwflswKrmI4APk4umM34P7jcN3Lf1aJk+4l4drkv2uOOoBnaF7W5+Wdf\n9hagsn/yzz4nt8ZSNI0TiyKPXl9rUt9aM/2auhGop8XTrOGJ+K66lmgXnyh37zdv\n97UYsoWibikfQgaWZomIeByApG8JuNKDAapsA+rqPeVz3yx1kw3masq8Iy2fZ7g6\n9ZMX0FgJ9FzAS6BCbQJ4E6oT4f4QKiTBIMPYsGKD6OFoA3eWCI8nN+QWexY+WKo=\n=Ka7u\n-----END PGP SIGNATURE-----\n", "payload": "tree ea1f7a8597f934693958d64a0914d35c3731c8cb\nparent f9f0a96b7f60a4e3b7ae6cad4f3e1f0e30e2775a\nparent 611adc83dae6a2e50ac4c4fde8ef814ca1c56273\nparent 90cc8cc52897293f3c27acbd981d9c751b542f2e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1585676403 +0000\ncommitter GitHub <noreply@github.com> 1585676403 +0000\n\nMerge #3780 #3787\n\n3780: Simplify r=matklad a=Veetaha\n\nI absolutely love tha fact that removing `.clone()` simplifies the code comparing to other languages where it's actually the contrary (ahem ~~`std::move()`~~)\n\n3787: vscode: add syntax tree inspection hovers and highlights r=matklad a=Veetaha\n\n![inspect-tree](https://user-images.githubusercontent.com/36276403/78029767-c7426900-7369-11ea-9ed6-b8a0f8e05bac.gif)\r\nI implemented the reverse mapping (when you hover in the rust editor), but it seems overcomplicated, so I removed it\r\n\r\nRelated #3682 \n\nCo-authored-by: veetaha <veetaha2@gmail.com>\nCo-authored-by: Veetaha <veetaha2@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f77fc158fc6502cede48c94bbabb040c77b38c08", "html_url": "https://github.com/rust-lang/rust/commit/f77fc158fc6502cede48c94bbabb040c77b38c08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f77fc158fc6502cede48c94bbabb040c77b38c08/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9f0a96b7f60a4e3b7ae6cad4f3e1f0e30e2775a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9f0a96b7f60a4e3b7ae6cad4f3e1f0e30e2775a", "html_url": "https://github.com/rust-lang/rust/commit/f9f0a96b7f60a4e3b7ae6cad4f3e1f0e30e2775a"}, {"sha": "611adc83dae6a2e50ac4c4fde8ef814ca1c56273", "url": "https://api.github.com/repos/rust-lang/rust/commits/611adc83dae6a2e50ac4c4fde8ef814ca1c56273", "html_url": "https://github.com/rust-lang/rust/commit/611adc83dae6a2e50ac4c4fde8ef814ca1c56273"}, {"sha": "90cc8cc52897293f3c27acbd981d9c751b542f2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/90cc8cc52897293f3c27acbd981d9c751b542f2e", "html_url": "https://github.com/rust-lang/rust/commit/90cc8cc52897293f3c27acbd981d9c751b542f2e"}], "stats": {"total": 204, "additions": 134, "deletions": 70}, "files": [{"sha": "13ecd537ad399b6a7acee59638768de712e08e93", "filename": "crates/ra_hir_ty/src/display.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f77fc158fc6502cede48c94bbabb040c77b38c08/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77fc158fc6502cede48c94bbabb040c77b38c08/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs?ref=f77fc158fc6502cede48c94bbabb040c77b38c08", "patch": "@@ -190,8 +190,6 @@ impl HirDisplay for ApplicationTy {\n                 };\n                 write!(f, \"{}\", name)?;\n                 if self.parameters.len() > 0 {\n-                    write!(f, \"<\")?;\n-\n                     let mut non_default_parameters = Vec::with_capacity(self.parameters.len());\n                     let parameters_to_write = if f.omit_verbose_types() {\n                         match self\n@@ -200,8 +198,8 @@ impl HirDisplay for ApplicationTy {\n                             .map(|generic_def_id| f.db.generic_defaults(generic_def_id))\n                             .filter(|defaults| !defaults.is_empty())\n                         {\n-                            Option::None => self.parameters.0.as_ref(),\n-                            Option::Some(default_parameters) => {\n+                            None => self.parameters.0.as_ref(),\n+                            Some(default_parameters) => {\n                                 for (i, parameter) in self.parameters.iter().enumerate() {\n                                     match (parameter, default_parameters.get(i)) {\n                                         (&Ty::Unknown, _) | (_, None) => {\n@@ -221,7 +219,7 @@ impl HirDisplay for ApplicationTy {\n                     } else {\n                         self.parameters.0.as_ref()\n                     };\n-\n+                    write!(f, \"<\")?;\n                     f.write_joined(parameters_to_write, \", \")?;\n                     write!(f, \">\")?;\n                 }\n@@ -231,9 +229,9 @@ impl HirDisplay for ApplicationTy {\n                     AssocContainerId::TraitId(it) => it,\n                     _ => panic!(\"not an associated type\"),\n                 };\n-                let trait_name = f.db.trait_data(trait_).name.clone();\n-                let name = f.db.type_alias_data(type_alias).name.clone();\n-                write!(f, \"{}::{}\", trait_name, name)?;\n+                let trait_ = f.db.trait_data(trait_);\n+                let type_alias = f.db.type_alias_data(type_alias);\n+                write!(f, \"{}::{}\", trait_.name, type_alias.name)?;\n                 if self.parameters.len() > 0 {\n                     write!(f, \"<\")?;\n                     f.write_joined(&*self.parameters.0, \", \")?;\n@@ -266,8 +264,8 @@ impl HirDisplay for ProjectionTy {\n             return write!(f, \"{}\", TYPE_HINT_TRUNCATION);\n         }\n \n-        let trait_name = f.db.trait_data(self.trait_(f.db)).name.clone();\n-        write!(f, \"<{} as {}\", self.parameters[0].display(f.db), trait_name,)?;\n+        let trait_ = f.db.trait_data(self.trait_(f.db));\n+        write!(f, \"<{} as {}\", self.parameters[0].display(f.db), trait_.name)?;\n         if self.parameters.len() > 1 {\n             write!(f, \"<\")?;\n             f.write_joined(&self.parameters[1..], \", \")?;\n@@ -312,7 +310,7 @@ impl HirDisplay for Ty {\n                     Ty::Opaque(_) => write!(f, \"impl \")?,\n                     _ => unreachable!(),\n                 };\n-                write_bounds_like_dyn_trait(&predicates, f)?;\n+                write_bounds_like_dyn_trait(predicates, f)?;\n             }\n             Ty::Unknown => write!(f, \"{{unknown}}\")?,\n             Ty::Infer(..) => write!(f, \"_\")?,\n@@ -345,7 +343,7 @@ fn write_bounds_like_dyn_trait(\n                 // We assume that the self type is $0 (i.e. the\n                 // existential) here, which is the only thing that's\n                 // possible in actual Rust, and hence don't print it\n-                write!(f, \"{}\", f.db.trait_data(trait_ref.trait_).name.clone())?;\n+                write!(f, \"{}\", f.db.trait_data(trait_ref.trait_).name)?;\n                 if trait_ref.substs.len() > 1 {\n                     write!(f, \"<\")?;\n                     f.write_joined(&trait_ref.substs[1..], \", \")?;\n@@ -362,9 +360,8 @@ fn write_bounds_like_dyn_trait(\n                     write!(f, \"<\")?;\n                     angle_open = true;\n                 }\n-                let name =\n-                    f.db.type_alias_data(projection_pred.projection_ty.associated_ty).name.clone();\n-                write!(f, \"{} = \", name)?;\n+                let type_alias = f.db.type_alias_data(projection_pred.projection_ty.associated_ty);\n+                write!(f, \"{} = \", type_alias.name)?;\n                 projection_pred.ty.hir_fmt(f)?;\n             }\n             GenericPredicate::Error => {\n@@ -398,7 +395,7 @@ impl TraitRef {\n         } else {\n             write!(f, \": \")?;\n         }\n-        write!(f, \"{}\", f.db.trait_data(self.trait_).name.clone())?;\n+        write!(f, \"{}\", f.db.trait_data(self.trait_).name)?;\n         if self.substs.len() > 1 {\n             write!(f, \"<\")?;\n             f.write_joined(&self.substs[1..], \", \")?;"}, {"sha": "8aeec2e81efbe238c1b72c6c2afd8083ed804413", "filename": "docs/user/features.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f77fc158fc6502cede48c94bbabb040c77b38c08/docs%2Fuser%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/f77fc158fc6502cede48c94bbabb040c77b38c08/docs%2Fuser%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Ffeatures.md?ref=f77fc158fc6502cede48c94bbabb040c77b38c08", "patch": "@@ -81,6 +81,12 @@ Join selected lines into one, smartly fixing up whitespace and trailing commas.\n Shows the parse tree of the current file. It exists mostly for debugging\n rust-analyzer itself.\n \n+You can hover over syntax nodes in the opened text file to see the appropriate\n+rust code that it refers to and the rust editor will also highlight the proper\n+text range.\n+\n+<img src=\"https://user-images.githubusercontent.com/36276403/78043783-7425e180-737c-11ea-8653-b02b773c5aa1.png\" alt=\"demo\" height=\"200px\" >\n+\n #### Expand Macro Recursively\n \n Shows the full macro expansion of the macro at current cursor."}, {"sha": "996c7a71697b60eece65466cfddda6501e8db010", "filename": "editors/code/src/commands/syntax_tree.ts", "status": "modified", "additions": 113, "deletions": 52, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/f77fc158fc6502cede48c94bbabb040c77b38c08/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f77fc158fc6502cede48c94bbabb040c77b38c08/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts?ref=f77fc158fc6502cede48c94bbabb040c77b38c08", "patch": "@@ -1,44 +1,24 @@\n import * as vscode from 'vscode';\n import * as ra from '../rust-analyzer-api';\n \n-import { Ctx, Cmd } from '../ctx';\n-import { isRustDocument } from '../util';\n+import { Ctx, Cmd, Disposable } from '../ctx';\n+import { isRustDocument, RustEditor, isRustEditor, sleep } from '../util';\n+\n+const AST_FILE_SCHEME = \"rust-analyzer\";\n \n // Opens the virtual file that will show the syntax tree\n //\n // The contents of the file come from the `TextDocumentContentProvider`\n export function syntaxTree(ctx: Ctx): Cmd {\n     const tdcp = new TextDocumentContentProvider(ctx);\n \n-    ctx.pushCleanup(\n-        vscode.workspace.registerTextDocumentContentProvider(\n-            'rust-analyzer',\n-            tdcp,\n-        ),\n-    );\n-\n-    vscode.workspace.onDidChangeTextDocument(\n-        (event: vscode.TextDocumentChangeEvent) => {\n-            const doc = event.document;\n-            if (!isRustDocument(doc)) return;\n-            afterLs(() => tdcp.eventEmitter.fire(tdcp.uri));\n-        },\n-        null,\n-        ctx.subscriptions,\n-    );\n-\n-    vscode.window.onDidChangeActiveTextEditor(\n-        (editor: vscode.TextEditor | undefined) => {\n-            if (!editor || !isRustDocument(editor.document)) return;\n-            tdcp.eventEmitter.fire(tdcp.uri);\n-        },\n-        null,\n-        ctx.subscriptions,\n-    );\n+    void new AstInspector(ctx);\n+\n+    ctx.pushCleanup(vscode.workspace.registerTextDocumentContentProvider(AST_FILE_SCHEME, tdcp));\n \n     return async () => {\n         const editor = vscode.window.activeTextEditor;\n-        const rangeEnabled = !!(editor && !editor.selection.isEmpty);\n+        const rangeEnabled = !!editor && !editor.selection.isEmpty;\n \n         const uri = rangeEnabled\n             ? vscode.Uri.parse(`${tdcp.uri.toString()}?range=true`)\n@@ -48,45 +28,126 @@ export function syntaxTree(ctx: Ctx): Cmd {\n \n         tdcp.eventEmitter.fire(uri);\n \n-        return vscode.window.showTextDocument(\n-            document,\n-            vscode.ViewColumn.Two,\n-            true,\n-        );\n+        void await vscode.window.showTextDocument(document, {\n+            viewColumn: vscode.ViewColumn.Two,\n+            preserveFocus: true\n+        });\n     };\n }\n \n-// We need to order this after LS updates, but there's no API for that.\n-// Hence, good old setTimeout.\n-function afterLs(f: () => void) {\n-    setTimeout(f, 10);\n-}\n-\n-\n class TextDocumentContentProvider implements vscode.TextDocumentContentProvider {\n-    uri = vscode.Uri.parse('rust-analyzer://syntaxtree');\n-    eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n+    readonly uri = vscode.Uri.parse('rust-analyzer://syntaxtree');\n+    readonly eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n+\n \n     constructor(private readonly ctx: Ctx) {\n+        vscode.workspace.onDidChangeTextDocument(this.onDidChangeTextDocument, this, ctx.subscriptions);\n+        vscode.window.onDidChangeActiveTextEditor(this.onDidChangeActiveTextEditor, this, ctx.subscriptions);\n     }\n \n-    provideTextDocumentContent(uri: vscode.Uri): vscode.ProviderResult<string> {\n-        const editor = vscode.window.activeTextEditor;\n-        const client = this.ctx.client;\n-        if (!editor || !client) return '';\n+    private onDidChangeTextDocument(event: vscode.TextDocumentChangeEvent) {\n+        if (isRustDocument(event.document)) {\n+            // We need to order this after language server updates, but there's no API for that.\n+            // Hence, good old sleep().\n+            void sleep(10).then(() => this.eventEmitter.fire(this.uri));\n+        }\n+    }\n+    private onDidChangeActiveTextEditor(editor: vscode.TextEditor | undefined) {\n+        if (editor && isRustEditor(editor)) {\n+            this.eventEmitter.fire(this.uri);\n+        }\n+    }\n+\n+    provideTextDocumentContent(uri: vscode.Uri, ct: vscode.CancellationToken): vscode.ProviderResult<string> {\n+        const rustEditor = this.ctx.activeRustEditor;\n+        if (!rustEditor) return '';\n \n         // When the range based query is enabled we take the range of the selection\n-        const range = uri.query === 'range=true' && !editor.selection.isEmpty\n-            ? client.code2ProtocolConverter.asRange(editor.selection)\n+        const range = uri.query === 'range=true' && !rustEditor.selection.isEmpty\n+            ? this.ctx.client.code2ProtocolConverter.asRange(rustEditor.selection)\n             : null;\n \n-        return client.sendRequest(ra.syntaxTree, {\n-            textDocument: { uri: editor.document.uri.toString() },\n-            range,\n-        });\n+        const params = { textDocument: { uri: rustEditor.document.uri.toString() }, range, };\n+        return this.ctx.client.sendRequest(ra.syntaxTree, params, ct);\n     }\n \n     get onDidChange(): vscode.Event<vscode.Uri> {\n         return this.eventEmitter.event;\n     }\n }\n+\n+\n+// FIXME: consider implementing this via the Tree View API?\n+// https://code.visualstudio.com/api/extension-guides/tree-view\n+class AstInspector implements vscode.HoverProvider, Disposable {\n+    private static readonly astDecorationType = vscode.window.createTextEditorDecorationType({\n+        fontStyle: \"normal\",\n+        border: \"#ffffff 1px solid\",\n+    });\n+    private rustEditor: undefined | RustEditor;\n+\n+    constructor(ctx: Ctx) {\n+        ctx.pushCleanup(vscode.languages.registerHoverProvider({ scheme: AST_FILE_SCHEME }, this));\n+        vscode.workspace.onDidCloseTextDocument(this.onDidCloseTextDocument, this, ctx.subscriptions);\n+        vscode.window.onDidChangeVisibleTextEditors(this.onDidChangeVisibleTextEditors, this, ctx.subscriptions);\n+\n+        ctx.pushCleanup(this);\n+    }\n+    dispose() {\n+        this.setRustEditor(undefined);\n+    }\n+\n+    private onDidCloseTextDocument(doc: vscode.TextDocument) {\n+        if (this.rustEditor && doc.uri.toString() === this.rustEditor.document.uri.toString()) {\n+            this.setRustEditor(undefined);\n+        }\n+    }\n+\n+    private onDidChangeVisibleTextEditors(editors: vscode.TextEditor[]) {\n+        if (editors.every(suspect => suspect.document.uri.scheme !== AST_FILE_SCHEME)) {\n+            this.setRustEditor(undefined);\n+            return;\n+        }\n+        this.setRustEditor(editors.find(isRustEditor));\n+    }\n+\n+    private setRustEditor(newRustEditor: undefined | RustEditor) {\n+        if (newRustEditor !== this.rustEditor) {\n+            this.rustEditor?.setDecorations(AstInspector.astDecorationType, []);\n+        }\n+        this.rustEditor = newRustEditor;\n+    }\n+\n+    provideHover(doc: vscode.TextDocument, hoverPosition: vscode.Position): vscode.ProviderResult<vscode.Hover> {\n+        if (!this.rustEditor) return;\n+\n+        const astTextLine = doc.lineAt(hoverPosition.line);\n+\n+        const rustTextRange = this.parseRustTextRange(this.rustEditor.document, astTextLine.text);\n+        if (!rustTextRange) return;\n+\n+        this.rustEditor.setDecorations(AstInspector.astDecorationType, [rustTextRange]);\n+        this.rustEditor.revealRange(rustTextRange);\n+\n+        const rustSourceCode = this.rustEditor.document.getText(rustTextRange);\n+        const astTextRange = this.findAstRange(astTextLine);\n+\n+        return new vscode.Hover([\"```rust\\n\" + rustSourceCode + \"\\n```\"], astTextRange);\n+    }\n+\n+    private findAstRange(astLine: vscode.TextLine) {\n+        const lineOffset = astLine.range.start;\n+        const begin = lineOffset.translate(undefined, astLine.firstNonWhitespaceCharacterIndex);\n+        const end = lineOffset.translate(undefined, astLine.text.trimEnd().length);\n+        return new vscode.Range(begin, end);\n+    }\n+\n+    private parseRustTextRange(doc: vscode.TextDocument, astLine: string): undefined | vscode.Range {\n+        const parsedRange = /\\[(\\d+); (\\d+)\\)/.exec(astLine);\n+        if (!parsedRange) return;\n+\n+        const [begin, end] = parsedRange.slice(1).map(off => doc.positionAt(+off));\n+\n+        return new vscode.Range(begin, end);\n+    }\n+}"}, {"sha": "6f91f81d63ed707aac1f0282cc9aad27b1dfb890", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f77fc158fc6502cede48c94bbabb040c77b38c08/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f77fc158fc6502cede48c94bbabb040c77b38c08/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=f77fc158fc6502cede48c94bbabb040c77b38c08", "patch": "@@ -65,12 +65,12 @@ export async function sendRequestWithRetry<TParam, TRet>(\n     throw 'unreachable';\n }\n \n-function sleep(ms: number) {\n+export function sleep(ms: number) {\n     return new Promise(resolve => setTimeout(resolve, ms));\n }\n \n export type RustDocument = vscode.TextDocument & { languageId: \"rust\" };\n-export type RustEditor = vscode.TextEditor & { document: RustDocument; id: string };\n+export type RustEditor = vscode.TextEditor & { document: RustDocument };\n \n export function isRustDocument(document: vscode.TextDocument): document is RustDocument {\n     return document.languageId === 'rust'"}]}