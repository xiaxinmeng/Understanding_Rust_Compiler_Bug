{"sha": "859068c628cb14622c58aa5d05959530b05ffee1", "node_id": "C_kwDOAAsO6NoAKDg1OTA2OGM2MjhjYjE0NjIyYzU4YWE1ZDA1OTU5NTMwYjA1ZmZlZTE", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2023-05-27T11:38:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-27T11:38:30Z"}, "message": "Rollup merge of #111936 - ferrocene:pa-test-suite-metadata, r=jyn514\n\nInclude test suite metadata in the build metrics\n\nThis PR enhances the build metadata to include structured information about the test suites being executed, allowing external tools consuming the metadata to understand what was being tested.\n\nThe included metadata is:\n\n* Target triple\n* Host triple\n* Stage number\n* For compiletest tests:\n  * Suite name\n  * Mode\n  * Comparing mode\n* For crate tests:\n  * List of crate names\n\nThis is implemented by replacing the `test` JSON node with a new `test_suite` node, which contains the metadata and the list of tests. This change also improves the handling of multiple test suites executed in the same step (for example in compiletest tests with a compare mode), as the multiple test suite executions will now be tracked in separate `test_suite` nodes.\n\nThis included a breaking change in the build metrics metadata format. To better handle this, in the second commit this PR introduces the `metadata_version` top-level field. The old version is considered to be `0`, while the new one `1`. Bootstrap will also gracefully handle existing metadata of a different version.\n\nr? `@jyn514`", "tree": {"sha": "59a49da79b11a51e75706a4ea508c95e22fb9f57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59a49da79b11a51e75706a4ea508c95e22fb9f57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/859068c628cb14622c58aa5d05959530b05ffee1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkceu2CRBK7hj4Ov3rIwAA5OUIAEanmCWauv3zQ/iJb8gllEoZ\ngv1K6X1NzJ/HTMtNEnfEMdYlK9qsXBznOBioOOw4JrOYkZRXp7aTBA5aPI8r1gwf\nn7Zr18t7Wl6N5ABtTALQqtRdWOg8QnTe4H5h6k5360LAqgxU0bc323GOrZTn6wMc\nF26dD1tS0Depp4wOKRfR8oGBX8XWJk1E+p7v0hQKrvANhHGsmG9zN5+qOd3/ZSFm\nG1O0jFZgOcCexE12lnSP3moGKFe5IhqEkCjpqxrQbj6xdLcez+s4COxsU/ptDbMU\nODua98OeckmNBeQPLmZdN4+s9EsIeIfv4bS2fc0gS6OKd4ES+ZidSmUK9qWuWMM=\n=S2QJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 59a49da79b11a51e75706a4ea508c95e22fb9f57\nparent a525c7ddba5997b132efa46515e0ce90c173f480\nparent c5139b9136c25c71f4c5f71335da9aedb8088cbc\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1685187510 +0200\ncommitter GitHub <noreply@github.com> 1685187510 +0200\n\nRollup merge of #111936 - ferrocene:pa-test-suite-metadata, r=jyn514\n\nInclude test suite metadata in the build metrics\n\nThis PR enhances the build metadata to include structured information about the test suites being executed, allowing external tools consuming the metadata to understand what was being tested.\n\nThe included metadata is:\n\n* Target triple\n* Host triple\n* Stage number\n* For compiletest tests:\n  * Suite name\n  * Mode\n  * Comparing mode\n* For crate tests:\n  * List of crate names\n\nThis is implemented by replacing the `test` JSON node with a new `test_suite` node, which contains the metadata and the list of tests. This change also improves the handling of multiple test suites executed in the same step (for example in compiletest tests with a compare mode), as the multiple test suite executions will now be tracked in separate `test_suite` nodes.\n\nThis included a breaking change in the build metrics metadata format. To better handle this, in the second commit this PR introduces the `metadata_version` top-level field. The old version is considered to be `0`, while the new one `1`. Bootstrap will also gracefully handle existing metadata of a different version.\n\nr? `@jyn514`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/859068c628cb14622c58aa5d05959530b05ffee1", "html_url": "https://github.com/rust-lang/rust/commit/859068c628cb14622c58aa5d05959530b05ffee1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/859068c628cb14622c58aa5d05959530b05ffee1/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a525c7ddba5997b132efa46515e0ce90c173f480", "url": "https://api.github.com/repos/rust-lang/rust/commits/a525c7ddba5997b132efa46515e0ce90c173f480", "html_url": "https://github.com/rust-lang/rust/commit/a525c7ddba5997b132efa46515e0ce90c173f480"}, {"sha": "c5139b9136c25c71f4c5f71335da9aedb8088cbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5139b9136c25c71f4c5f71335da9aedb8088cbc", "html_url": "https://github.com/rust-lang/rust/commit/c5139b9136c25c71f4c5f71335da9aedb8088cbc"}], "stats": {"total": 168, "additions": 144, "deletions": 24}, "files": [{"sha": "5990f33b9bc6c87d18359c9288e0b0342653fe3a", "filename": "src/bootstrap/metrics.rs", "status": "modified", "additions": 95, "deletions": 24, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/859068c628cb14622c58aa5d05959530b05ffee1/src%2Fbootstrap%2Fmetrics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859068c628cb14622c58aa5d05959530b05ffee1/src%2Fbootstrap%2Fmetrics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetrics.rs?ref=859068c628cb14622c58aa5d05959530b05ffee1", "patch": "@@ -14,6 +14,25 @@ use std::io::BufWriter;\n use std::time::{Duration, Instant, SystemTime};\n use sysinfo::{CpuExt, System, SystemExt};\n \n+// Update this number whenever a breaking change is made to the build metrics.\n+//\n+// The output format is versioned for two reasons:\n+//\n+// - The metadata is intended to be consumed by external tooling, and exposing a format version\n+//   helps the tools determine whether they're compatible with a metrics file.\n+//\n+// - If a developer enables build metrics in their local checkout, making a breaking change to the\n+//   metrics format would result in a hard-to-diagnose error message when an existing metrics file\n+//   is not compatible with the new changes. With a format version number, bootstrap can discard\n+//   incompatible metrics files instead of appending metrics to them.\n+//\n+// Version changelog:\n+//\n+// - v0: initial version\n+// - v1: replaced JsonNode::Test with JsonNode::TestSuite\n+//\n+const CURRENT_FORMAT_VERSION: usize = 1;\n+\n pub(crate) struct BuildMetrics {\n     state: RefCell<MetricsState>,\n }\n@@ -57,7 +76,7 @@ impl BuildMetrics {\n             duration_excluding_children_sec: Duration::ZERO,\n \n             children: Vec::new(),\n-            tests: Vec::new(),\n+            test_suites: Vec::new(),\n         });\n     }\n \n@@ -84,19 +103,31 @@ impl BuildMetrics {\n         }\n     }\n \n+    pub(crate) fn begin_test_suite(&self, metadata: TestSuiteMetadata, builder: &Builder<'_>) {\n+        // Do not record dry runs, as they'd be duplicates of the actual steps.\n+        if builder.config.dry_run() {\n+            return;\n+        }\n+\n+        let mut state = self.state.borrow_mut();\n+        let step = state.running_steps.last_mut().unwrap();\n+        step.test_suites.push(TestSuite { metadata, tests: Vec::new() });\n+    }\n+\n     pub(crate) fn record_test(&self, name: &str, outcome: TestOutcome, builder: &Builder<'_>) {\n         // Do not record dry runs, as they'd be duplicates of the actual steps.\n         if builder.config.dry_run() {\n             return;\n         }\n \n         let mut state = self.state.borrow_mut();\n-        state\n-            .running_steps\n-            .last_mut()\n-            .unwrap()\n-            .tests\n-            .push(Test { name: name.to_string(), outcome });\n+        let step = state.running_steps.last_mut().unwrap();\n+\n+        if let Some(test_suite) = step.test_suites.last_mut() {\n+            test_suite.tests.push(Test { name: name.to_string(), outcome });\n+        } else {\n+            panic!(\"metrics.record_test() called without calling metrics.begin_test_suite() first\");\n+        }\n     }\n \n     fn collect_stats(&self, state: &mut MetricsState) {\n@@ -131,7 +162,20 @@ impl BuildMetrics {\n         // Some of our CI builds consist of multiple independent CI invocations. Ensure all the\n         // previous invocations are still present in the resulting file.\n         let mut invocations = match std::fs::read(&dest) {\n-            Ok(contents) => t!(serde_json::from_slice::<JsonRoot>(&contents)).invocations,\n+            Ok(contents) => {\n+                // We first parse just the format_version field to have the check succeed even if\n+                // the rest of the contents are not valid anymore.\n+                let version: OnlyFormatVersion = t!(serde_json::from_slice(&contents));\n+                if version.format_version == CURRENT_FORMAT_VERSION {\n+                    t!(serde_json::from_slice::<JsonRoot>(&contents)).invocations\n+                } else {\n+                    println!(\n+                        \"warning: overriding existing build/metrics.json, as it's not \\\n+                         compatible with build metrics format version {CURRENT_FORMAT_VERSION}.\"\n+                    );\n+                    Vec::new()\n+                }\n+            }\n             Err(err) => {\n                 if err.kind() != std::io::ErrorKind::NotFound {\n                     panic!(\"failed to open existing metrics file at {}: {err}\", dest.display());\n@@ -149,7 +193,7 @@ impl BuildMetrics {\n             children: steps.into_iter().map(|step| self.prepare_json_step(step)).collect(),\n         });\n \n-        let json = JsonRoot { system_stats, invocations };\n+        let json = JsonRoot { format_version: CURRENT_FORMAT_VERSION, system_stats, invocations };\n \n         t!(std::fs::create_dir_all(dest.parent().unwrap()));\n         let mut file = BufWriter::new(t!(File::create(&dest)));\n@@ -159,11 +203,7 @@ impl BuildMetrics {\n     fn prepare_json_step(&self, step: StepMetrics) -> JsonNode {\n         let mut children = Vec::new();\n         children.extend(step.children.into_iter().map(|child| self.prepare_json_step(child)));\n-        children.extend(\n-            step.tests\n-                .into_iter()\n-                .map(|test| JsonNode::Test { name: test.name, outcome: test.outcome }),\n-        );\n+        children.extend(step.test_suites.into_iter().map(JsonNode::TestSuite));\n \n         JsonNode::RustbuildStep {\n             type_: step.type_,\n@@ -198,17 +238,14 @@ struct StepMetrics {\n     duration_excluding_children_sec: Duration,\n \n     children: Vec<StepMetrics>,\n-    tests: Vec<Test>,\n-}\n-\n-struct Test {\n-    name: String,\n-    outcome: TestOutcome,\n+    test_suites: Vec<TestSuite>,\n }\n \n #[derive(Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n struct JsonRoot {\n+    #[serde(default)] // For version 0 the field was not present.\n+    format_version: usize,\n     system_stats: JsonInvocationSystemStats,\n     invocations: Vec<JsonInvocation>,\n }\n@@ -237,13 +274,41 @@ enum JsonNode {\n \n         children: Vec<JsonNode>,\n     },\n-    Test {\n-        name: String,\n-        #[serde(flatten)]\n-        outcome: TestOutcome,\n+    TestSuite(TestSuite),\n+}\n+\n+#[derive(Serialize, Deserialize)]\n+struct TestSuite {\n+    metadata: TestSuiteMetadata,\n+    tests: Vec<Test>,\n+}\n+\n+#[derive(Serialize, Deserialize)]\n+#[serde(tag = \"kind\", rename_all = \"snake_case\")]\n+pub(crate) enum TestSuiteMetadata {\n+    CargoPackage {\n+        crates: Vec<String>,\n+        target: String,\n+        host: String,\n+        stage: u32,\n+    },\n+    Compiletest {\n+        suite: String,\n+        mode: String,\n+        compare_mode: Option<String>,\n+        target: String,\n+        host: String,\n+        stage: u32,\n     },\n }\n \n+#[derive(Serialize, Deserialize)]\n+pub(crate) struct Test {\n+    name: String,\n+    #[serde(flatten)]\n+    outcome: TestOutcome,\n+}\n+\n #[derive(Serialize, Deserialize)]\n #[serde(tag = \"outcome\", rename_all = \"snake_case\")]\n pub(crate) enum TestOutcome {\n@@ -266,3 +331,9 @@ struct JsonInvocationSystemStats {\n struct JsonStepSystemStats {\n     cpu_utilization_percent: f64,\n }\n+\n+#[derive(Deserialize)]\n+struct OnlyFormatVersion {\n+    #[serde(default)] // For version 0 the field was not present.\n+    format_version: usize,\n+}"}, {"sha": "44cd84be705ab1ed19fbc810ec184f86e079153e", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/859068c628cb14622c58aa5d05959530b05ffee1/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859068c628cb14622c58aa5d05959530b05ffee1/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=859068c628cb14622c58aa5d05959530b05ffee1", "patch": "@@ -317,6 +317,17 @@ impl Step for Cargo {\n         cargo.env(\"CARGO_TEST_DISABLE_NIGHTLY\", \"1\");\n         cargo.env(\"PATH\", &path_for_cargo(builder, compiler));\n \n+        #[cfg(feature = \"build-metrics\")]\n+        builder.metrics.begin_test_suite(\n+            crate::metrics::TestSuiteMetadata::CargoPackage {\n+                crates: vec![\"cargo\".into()],\n+                target: self.host.triple.to_string(),\n+                host: self.host.triple.to_string(),\n+                stage: self.stage,\n+            },\n+            builder,\n+        );\n+\n         let _time = util::timeit(&builder);\n         add_flags_and_try_run_tests(builder, &mut cargo);\n     }\n@@ -1699,6 +1710,19 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n \n         builder.ci_env.force_coloring_in_ci(&mut cmd);\n \n+        #[cfg(feature = \"build-metrics\")]\n+        builder.metrics.begin_test_suite(\n+            crate::metrics::TestSuiteMetadata::Compiletest {\n+                suite: suite.into(),\n+                mode: mode.into(),\n+                compare_mode: None,\n+                target: self.target.triple.to_string(),\n+                host: self.compiler.host.triple.to_string(),\n+                stage: self.compiler.stage,\n+            },\n+            builder,\n+        );\n+\n         builder.info(&format!(\n             \"Check compiletest suite={} mode={} ({} -> {})\",\n             suite, mode, &compiler.host, target\n@@ -1708,6 +1732,20 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n \n         if let Some(compare_mode) = compare_mode {\n             cmd.arg(\"--compare-mode\").arg(compare_mode);\n+\n+            #[cfg(feature = \"build-metrics\")]\n+            builder.metrics.begin_test_suite(\n+                crate::metrics::TestSuiteMetadata::Compiletest {\n+                    suite: suite.into(),\n+                    mode: mode.into(),\n+                    compare_mode: Some(compare_mode.into()),\n+                    target: self.target.triple.to_string(),\n+                    host: self.compiler.host.triple.to_string(),\n+                    stage: self.compiler.stage,\n+                },\n+                builder,\n+            );\n+\n             builder.info(&format!(\n                 \"Check compiletest suite={} mode={} compare_mode={} ({} -> {})\",\n                 suite, mode, compare_mode, &compiler.host, target\n@@ -2034,6 +2072,17 @@ fn run_cargo_test(\n     let mut cargo =\n         prepare_cargo_test(cargo, libtest_args, crates, primary_crate, compiler, target, builder);\n     let _time = util::timeit(&builder);\n+\n+    #[cfg(feature = \"build-metrics\")]\n+    builder.metrics.begin_test_suite(\n+        crate::metrics::TestSuiteMetadata::CargoPackage {\n+            crates: crates.iter().map(|c| c.to_string()).collect(),\n+            target: target.triple.to_string(),\n+            host: compiler.host.triple.to_string(),\n+            stage: compiler.stage,\n+        },\n+        builder,\n+    );\n     add_flags_and_try_run_tests(builder, &mut cargo)\n }\n "}]}