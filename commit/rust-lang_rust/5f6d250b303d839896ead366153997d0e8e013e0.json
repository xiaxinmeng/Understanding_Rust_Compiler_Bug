{"sha": "5f6d250b303d839896ead366153997d0e8e013e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNmQyNTBiMzAzZDgzOTg5NmVhZDM2NjE1Mzk5N2QwZThlMDEzZTA=", "commit": {"author": {"name": "Samrat Man Singh", "email": "samratmansingh@gmail.com", "date": "2020-04-13T15:48:34Z"}, "committer": {"name": "Samrat Man Singh", "email": "samratmansingh@gmail.com", "date": "2020-04-13T15:48:34Z"}, "message": "[macOS] Implement `mach_timebase_info`\n\nSince we return nanoseceonds instead of ticks from\n`mach_absolute_time`, we don't need to scale the absolute time", "tree": {"sha": "84b36fe4a4d82589d75e82977bae3104a0e4036a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84b36fe4a4d82589d75e82977bae3104a0e4036a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f6d250b303d839896ead366153997d0e8e013e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f6d250b303d839896ead366153997d0e8e013e0", "html_url": "https://github.com/rust-lang/rust/commit/5f6d250b303d839896ead366153997d0e8e013e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f6d250b303d839896ead366153997d0e8e013e0/comments", "author": {"login": "samrat", "id": 480806, "node_id": "MDQ6VXNlcjQ4MDgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/480806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samrat", "html_url": "https://github.com/samrat", "followers_url": "https://api.github.com/users/samrat/followers", "following_url": "https://api.github.com/users/samrat/following{/other_user}", "gists_url": "https://api.github.com/users/samrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/samrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samrat/subscriptions", "organizations_url": "https://api.github.com/users/samrat/orgs", "repos_url": "https://api.github.com/users/samrat/repos", "events_url": "https://api.github.com/users/samrat/events{/privacy}", "received_events_url": "https://api.github.com/users/samrat/received_events", "type": "User", "site_admin": false}, "committer": {"login": "samrat", "id": 480806, "node_id": "MDQ6VXNlcjQ4MDgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/480806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samrat", "html_url": "https://github.com/samrat", "followers_url": "https://api.github.com/users/samrat/followers", "following_url": "https://api.github.com/users/samrat/following{/other_user}", "gists_url": "https://api.github.com/users/samrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/samrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samrat/subscriptions", "organizations_url": "https://api.github.com/users/samrat/orgs", "repos_url": "https://api.github.com/users/samrat/repos", "events_url": "https://api.github.com/users/samrat/events{/privacy}", "received_events_url": "https://api.github.com/users/samrat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4545effbcf071cd3b279ddb65aa4af6ac892c1e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4545effbcf071cd3b279ddb65aa4af6ac892c1e9", "html_url": "https://github.com/rust-lang/rust/commit/4545effbcf071cd3b279ddb65aa4af6ac892c1e9"}], "stats": {"total": 42, "additions": 33, "deletions": 9}, "files": [{"sha": "e7baacf7274d2cbb4595c6e8392e05be444e45e4", "filename": "src/shims/foreign_items/posix/macos.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f6d250b303d839896ead366153997d0e8e013e0/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f6d250b303d839896ead366153997d0e8e013e0/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs?ref=5f6d250b303d839896ead366153997d0e8e013e0", "patch": "@@ -60,6 +60,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_u64(result), dest)?;\n             }\n \n+            \"mach_timebase_info\" => {\n+                let result = this.mach_timebase_info(args[0])?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n+            },\n+\n             // Access to command-line arguments\n             \"_NSGetArgc\" => {\n                 this.write_scalar(this.machine.argc.expect(\"machine must be initialized\"), dest)?;"}, {"sha": "adcca21fb4c0d157a33d93ad69d8cbcbd0aa1708", "filename": "src/shims/time.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5f6d250b303d839896ead366153997d0e8e013e0/src%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f6d250b303d839896ead366153997d0e8e013e0/src%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftime.rs?ref=5f6d250b303d839896ead366153997d0e8e013e0", "patch": "@@ -13,6 +13,7 @@ pub fn system_time_to_duration<'tcx>(time: &SystemTime) -> InterpResult<'tcx, Du\n         .map_err(|_| err_unsup_format!(\"times before the Unix epoch are not supported\").into())\n }\n \n+\n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn clock_gettime(\n@@ -159,4 +160,25 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         u64::try_from(duration.as_nanos())\n             .map_err(|_| err_unsup_format!(\"programs running longer than 2^64 nanoseconds are not supported\").into())\n     }\n+\n+    fn mach_timebase_info(&mut self, info_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        this.assert_target_os(\"macos\", \"mach_timebase_info\");\n+        this.check_no_isolation(\"mach_timebase_info\")?;\n+\n+        let info = this.deref_operand(info_op)?;\n+\n+        // Since we return nanoseceonds instead of ticks from\n+        // `mach_absolute_time`, we don't need to scale the absolute\n+        // time.\n+        let (numer, denom) = (1,1);\n+        let imms = [\n+            immty_from_int_checked(numer, this.libc_ty_layout(\"uint32_t\")?)?,\n+            immty_from_int_checked(denom, this.libc_ty_layout(\"uint32_t\")?)?\n+        ];\n+\n+        this.write_packed_immediates(info, &imms)?;\n+        Ok(0)\n+    }\n }"}, {"sha": "9ae64fbae42a067043d91822776b6437ab4c9e81", "filename": "tests/run-pass/time.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5f6d250b303d839896ead366153997d0e8e013e0/tests%2Frun-pass%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f6d250b303d839896ead366153997d0e8e013e0/tests%2Frun-pass%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftime.rs?ref=5f6d250b303d839896ead366153997d0e8e013e0", "patch": "@@ -25,13 +25,10 @@ fn main() {\n     let now2 = Instant::now();\n     assert!(now2 > now1);\n \n-    #[cfg(not(target_os = \"macos\"))] // TODO: macOS does not support Instant subtraction\n-    {\n-        let diff = now2.duration_since(now1);\n-        assert_eq!(now1 + diff, now2);\n-        assert_eq!(now2 - diff, now1);\n-        // Sanity-check the difference we got.\n-        assert!(diff.as_micros() > 1);\n-        assert!(diff.as_micros() < 1_000_000);\n-    }\n+    let diff = now2.duration_since(now1);\n+    assert_eq!(now1 + diff, now2);\n+    assert_eq!(now2 - diff, now1);\n+    // Sanity-check the difference we got.\n+    assert!(diff.as_micros() > 1);\n+    assert!(diff.as_micros() < 1_000_000);\n }"}]}