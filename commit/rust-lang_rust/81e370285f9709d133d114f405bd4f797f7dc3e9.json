{"sha": "81e370285f9709d133d114f405bd4f797f7dc3e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZTM3MDI4NWY5NzA5ZDEzM2QxMTRmNDA1YmQ0Zjc5N2Y3ZGMzZTk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-03-07T07:54:35Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-03-07T07:54:35Z"}, "message": "Merge remote-tracking branch 'brson/cross7'\n\nConflicts:\n\tconfigure\n\tmk/rt.mk", "tree": {"sha": "2ced383e9b6df945e0fdb769144f89e5f26f8da0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ced383e9b6df945e0fdb769144f89e5f26f8da0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81e370285f9709d133d114f405bd4f797f7dc3e9", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81e370285f9709d133d114f405bd4f797f7dc3e9", "html_url": "https://github.com/rust-lang/rust/commit/81e370285f9709d133d114f405bd4f797f7dc3e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81e370285f9709d133d114f405bd4f797f7dc3e9/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "194c27bcd16ad92e2edf11ff7446cb679a91c1d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/194c27bcd16ad92e2edf11ff7446cb679a91c1d3", "html_url": "https://github.com/rust-lang/rust/commit/194c27bcd16ad92e2edf11ff7446cb679a91c1d3"}, {"sha": "14e5a6e5f74b174399a561c68e5214d572f7a667", "url": "https://api.github.com/repos/rust-lang/rust/commits/14e5a6e5f74b174399a561c68e5214d572f7a667", "html_url": "https://github.com/rust-lang/rust/commit/14e5a6e5f74b174399a561c68e5214d572f7a667"}], "stats": {"total": 1732, "additions": 977, "deletions": 755}, "files": [{"sha": "4c61c7e409bd75651fb22f1a535c829a8baa302c", "filename": ".gitmodules", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e370285f9709d133d114f405bd4f797f7dc3e9/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/81e370285f9709d133d114f405bd4f797f7dc3e9/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=81e370285f9709d133d114f405bd4f797f7dc3e9", "patch": "@@ -3,4 +3,4 @@\n \turl = git://github.com/brson/llvm.git\n [submodule \"src/libuv\"]\n \tpath = src/libuv\n-\turl = git://github.com/joyent/libuv.git\n+\turl = git://github.com/brson/libuv.git"}, {"sha": "268a25d72fc19ab4ed6a705a4ef174801711a8df", "filename": "Makefile.in", "status": "modified", "additions": 127, "deletions": 94, "changes": 221, "blob_url": "https://github.com/rust-lang/rust/blob/81e370285f9709d133d114f405bd4f797f7dc3e9/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/81e370285f9709d133d114f405bd4f797f7dc3e9/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=81e370285f9709d133d114f405bd4f797f7dc3e9", "patch": "@@ -70,16 +70,22 @@ include config.mk\n ALL_OBJ_FILES :=\n \n MKFILE_DEPS := config.stamp $(call rwildcard,$(CFG_SRC_DIR)mk/,*)\n-NON_HOST_TRIPLES = $(filter-out $(CFG_HOST_TRIPLE),$(CFG_TARGET_TRIPLES))\n+NON_BUILD_HOST_TRIPLES = $(filter-out $(CFG_BUILD_TRIPLE),$(CFG_HOST_TRIPLES))\n+NON_BUILD_TARGET_TRIPLES = $(filter-out $(CFG_BUILD_TRIPLE),$(CFG_TARGET_TRIPLES))\n \n ifneq ($(MAKE_RESTARTS),)\n CFG_INFO := $(info cfg: make restarts: $(MAKE_RESTARTS))\n endif\n \n-CFG_INFO := $(info cfg: shell host triple $(CFG_HOST_TRIPLE))\n+CFG_INFO := $(info cfg: build triple $(CFG_BUILD_TRIPLE))\n+CFG_INFO := $(info cfg: host triples $(CFG_HOST_TRIPLES))\n+CFG_INFO := $(info cfg: target triples $(CFG_TARGET_TRIPLES))\n \n-ifneq ($(wildcard $(NON_HOST_TRIPLES)),)\n-CFG_INFO := $(info cfg: non host triples $(NON_HOST_TRIPLES))\n+ifneq ($(wildcard $(NON_BUILD_HOST_TRIPLES)),)\n+CFG_INFO := $(info cfg: non-build host triples $(NON_BUILD_HOST_TRIPLES))\n+endif\n+ifneq ($(wildcard $(NON_BUILD_TARGET_TRIPLES)),)\n+CFG_INFO := $(info cfg: non-build target triples $(NON_BUILD_TARGET_TRIPLES))\n endif\n \n CFG_RUSTC_FLAGS := $(RUSTFLAGS)\n@@ -124,37 +130,6 @@ else\n   CFG_VALGRIND_COMPILE :=\n endif\n \n-CFG_RUNTIME :=$(call CFG_LIB_NAME,rustrt)\n-CFG_RUSTLLVM :=$(call CFG_LIB_NAME,rustllvm)\n-CFG_CORELIB :=$(call CFG_LIB_NAME,core)\n-CFG_STDLIB :=$(call CFG_LIB_NAME,std)\n-CFG_LIBRUSTC :=$(call CFG_LIB_NAME,rustc)\n-CFG_LIBSYNTAX :=$(call CFG_LIB_NAME,syntax)\n-CFG_LIBFUZZER :=$(call CFG_LIB_NAME,fuzzer)\n-CFG_LIBRUSTPKG :=$(call CFG_LIB_NAME,rustpkg)\n-CFG_LIBRUSTDOC :=$(call CFG_LIB_NAME,rustdoc)\n-CFG_LIBRUSTI :=$(call CFG_LIB_NAME,rusti)\n-CFG_LIBRUST :=$(call CFG_LIB_NAME,rust)\n-\n-STDLIB_GLOB :=$(call CFG_LIB_GLOB,std)\n-CORELIB_GLOB :=$(call CFG_LIB_GLOB,core)\n-LIBRUSTC_GLOB :=$(call CFG_LIB_GLOB,rustc)\n-LIBSYNTAX_GLOB :=$(call CFG_LIB_GLOB,syntax)\n-LIBFUZZER_GLOB :=$(call CFG_LIB_GLOB,fuzzer)\n-LIBRUSTPKG_GLOB :=$(call CFG_LIB_GLOB,rustpkg)\n-LIBRUSTDOC_GLOB :=$(call CFG_LIB_GLOB,rustdoc)\n-LIBRUSTI_GLOB :=$(call CFG_LIB_GLOB,rusti)\n-LIBRUST_GLOB :=$(call CFG_LIB_GLOB,rust)\n-STDLIB_DSYM_GLOB :=$(call CFG_LIB_DSYM_GLOB,std)\n-CORELIB_DSYM_GLOB :=$(call CFG_LIB_DSYM_GLOB,core)\n-LIBRUSTC_DSYM_GLOB :=$(call CFG_LIB_DSYM_GLOB,rustc)\n-LIBSYNTAX_DSYM_GLOB :=$(call CFG_LIB_DSYM_GLOB,syntax)\n-LIBFUZZER_DSYM_GLOB :=$(call CFG_LIB_DSYM_GLOB,fuzzer)\n-LIBRUSTPKG_DSYM_GLOB :=$(call CFG_LIB_DSYM_GLOB,rustpkg)\n-LIBRUSTDOC_DSYM_GLOB :=$(call CFG_LIB_DSYM_GLOB,rustdoc)\n-LIBRUSTI_DSYM_GLOB :=$(call CFG_LIB_DSYM_GLOB,rusti)\n-LIBRUST_DSYM_GLOB :=$(call CFG_LIB_DSYM_GLOB,rust)\n-\n # version-string calculation\n CFG_GIT_DIR := $(CFG_SRC_DIR).git\n CFG_RELEASE = 0.6\n@@ -193,7 +168,12 @@ else\n endif\n \n S := $(CFG_SRC_DIR)\n-X := $(CFG_EXE_SUFFIX)\n+\n+define DEF_X\n+X_$(1) := $(CFG_EXE_SUFFIX_$(1))\n+endef\n+$(foreach target,$(CFG_TARGET_TRIPLES),\\\n+  $(eval $(call DEF_X,$(target))))\n \n # Look in doc and src dirs.\n VPATH := $(S)doc $(S)src\n@@ -209,6 +189,49 @@ GENERATED :=\n %:: s.%\n %:: SCCS/s.%\n \n+\n+######################################################################\n+# Crates\n+######################################################################\n+\n+define DEF_LIBS\n+\n+CFG_RUNTIME_$(1) :=$(call CFG_LIB_NAME_$(1),rustrt)\n+CFG_RUSTLLVM_$(1) :=$(call CFG_LIB_NAME_$(1),rustllvm)\n+CFG_CORELIB_$(1) :=$(call CFG_LIB_NAME_$(1),core)\n+CFG_STDLIB_$(1) :=$(call CFG_LIB_NAME_$(1),std)\n+CFG_LIBRUSTC_$(1) :=$(call CFG_LIB_NAME_$(1),rustc)\n+CFG_LIBSYNTAX_$(1) :=$(call CFG_LIB_NAME_$(1),syntax)\n+CFG_LIBFUZZER_$(1) :=$(call CFG_LIB_NAME_$(1),fuzzer)\n+CFG_LIBRUSTPKG_$(1) :=$(call CFG_LIB_NAME_$(1),rustpkg)\n+CFG_LIBRUSTDOC_$(1) :=$(call CFG_LIB_NAME_$(1),rustdoc)\n+CFG_LIBRUSTI_$(1) :=$(call CFG_LIB_NAME_$(1),rusti)\n+CFG_LIBRUST_$(1) :=$(call CFG_LIB_NAME_$(1),rust)\n+\n+STDLIB_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),std)\n+CORELIB_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),core)\n+LIBRUSTC_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),rustc)\n+LIBSYNTAX_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),syntax)\n+LIBFUZZER_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),fuzzer)\n+LIBRUSTPKG_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),rustpkg)\n+LIBRUSTDOC_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),rustdoc)\n+LIBRUSTI_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),rusti)\n+LIBRUST_GLOB_$(1) :=$(call CFG_LIB_GLOB_$(1),rust)\n+STDLIB_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),std)\n+CORELIB_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),core)\n+LIBRUSTC_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),rustc)\n+LIBSYNTAX_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),syntax)\n+LIBFUZZER_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),fuzzer)\n+LIBRUSTPKG_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),rustpkg)\n+LIBRUSTDOC_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),rustdoc)\n+LIBRUSTI_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),rusti)\n+LIBRUST_DSYM_GLOB_$(1) :=$(call CFG_LIB_DSYM_GLOB_$(1),rust)\n+\n+endef\n+\n+$(foreach target,$(CFG_TARGET_TRIPLES),\\\n+  $(eval $(call DEF_LIBS,$(target))))\n+\n ######################################################################\n # Core library variables\n ######################################################################\n@@ -254,8 +277,8 @@ CFG_LLVM_BUILD_DIR_$(1):=$$(CFG_LLVM_BUILD_DIR_$(subst -,_,$(1)))\n CFG_LLVM_INST_DIR_$(1):=$$(CFG_LLVM_INST_DIR_$(subst -,_,$(1)))\n \n # Any rules that depend on LLVM should depend on LLVM_CONFIG\n-LLVM_CONFIG_$(1):=$$(CFG_LLVM_INST_DIR_$(1))/bin/llvm-config$$(X)\n-LLVM_MC_$(1):=$$(CFG_LLVM_INST_DIR_$(1))/bin/llvm-mc$$(X)\n+LLVM_CONFIG_$(1):=$$(CFG_LLVM_INST_DIR_$(1))/bin/llvm-config$$(X_$(1))\n+LLVM_MC_$(1):=$$(CFG_LLVM_INST_DIR_$(1))/bin/llvm-mc$$(X_$(1))\n LLVM_VERSION_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --version)\n LLVM_BINDIR_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --bindir)\n LLVM_INCDIR_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --includedir)\n@@ -267,13 +290,13 @@ LLVM_LDFLAGS_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --ldflags)\n LLVM_CXXFLAGS_$(1)=$$(subst -I, -iquote , $$(shell \"$$(LLVM_CONFIG_$(1))\" --cxxflags))\n LLVM_HOST_TRIPLE_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --host-target)\n \n-LLVM_AS_$(1)=$$(CFG_LLVM_INST_DIR_$(1))/bin/llvm-as$$(X)\n-LLC_$(1)=$$(CFG_LLVM_INST_DIR_$(1))/bin/llc$$(X)\n+LLVM_AS_$(1)=$$(CFG_LLVM_INST_DIR_$(1))/bin/llvm-as$$(X_$(1))\n+LLC_$(1)=$$(CFG_LLVM_INST_DIR_$(1))/bin/llc$$(X_$(1))\n \n endef\n \n-$(foreach target,$(CFG_TARGET_TRIPLES), \\\n- $(eval $(call DEF_LLVM_VARS,$(target))))\n+$(foreach host,$(CFG_HOST_TRIPLES), \\\n+ $(eval $(call DEF_LLVM_VARS,$(host))))\n \n ######################################################################\n # Exports for sub-utilities\n@@ -285,7 +308,7 @@ $(foreach target,$(CFG_TARGET_TRIPLES), \\\n export CFG_SRC_DIR\n export CFG_BUILD_DIR\n export CFG_VERSION\n-export CFG_HOST_TRIPLE\n+export CFG_BUILD_TRIPLE\n export CFG_LLVM_ROOT\n export CFG_ENABLE_MINGW_CROSS\n export CFG_PREFIX\n@@ -332,26 +355,26 @@ ifdef CFG_DISABLE_SHAREDSTD\n     $$(TLIB$(1)_T_$(2)_H_$(3))/librustc.rlib\n else\n   HCORELIB_DEFAULT$(1)_H_$(3) = \\\n-    $$(HLIB$(1)_H_$(3))/$(CFG_CORELIB)\n+    $$(HLIB$(1)_H_$(3))/$(CFG_CORELIB_$(3))\n   TCORELIB_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n-    $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_CORELIB)\n+    $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_CORELIB_$(2))\n \n   HSTDLIB_DEFAULT$(1)_H_$(3) = \\\n-    $$(HLIB$(1)_H_$(3))/$(CFG_STDLIB)\n+    $$(HLIB$(1)_H_$(3))/$(CFG_STDLIB_$(3))\n   TSTDLIB_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n-    $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB)\n+    $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2))\n \n   HLIBRUSTC_DEFAULT$(1)_H_$(3) = \\\n-    $$(HLIB$(1)_H_$(3))/$(CFG_LIBRUSTC)\n+    $$(HLIB$(1)_H_$(3))/$(CFG_LIBRUSTC_$(3))\n   TLIBRUSTC_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n-    $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC)\n+    $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(2))\n endif\n \n # Preqrequisites for using the stageN compiler\n HSREQ$(1)_H_$(3) = \\\n-\t$$(HBIN$(1)_H_$(3))/rustc$$(X) \\\n-\t$$(HLIB$(1)_H_$(3))/$$(CFG_RUNTIME) \\\n-\t$$(HLIB$(1)_H_$(3))/$$(CFG_RUSTLLVM) \\\n+\t$$(HBIN$(1)_H_$(3))/rustc$$(X_$(3)) \\\n+\t$$(HLIB$(1)_H_$(3))/$(CFG_RUNTIME_$(3)) \\\n+\t$$(HLIB$(1)_H_$(3))/$(CFG_RUSTLLVM_$(3)) \\\n \t$$(HCORELIB_DEFAULT$(1)_H_$(3)) \\\n \t$$(HSTDLIB_DEFAULT$(1)_H_$(3)) \\\n \t$$(HLIBSYNTAX_DEFAULT$(1)_H_$(3)) \\\n@@ -361,37 +384,37 @@ HSREQ$(1)_H_$(3) = \\\n # Prerequisites for using the stageN compiler to build target artifacts\n TSREQ$(1)_T_$(2)_H_$(3) = \\\n \t$$(HSREQ$(1)_H_$(3)) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUNTIME) \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUNTIME_$(2)) \\\n \t$$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a\n \n # Prerequisites for a working stageN compiler and libraries, for a specific target\n SREQ$(1)_T_$(2)_H_$(3) = \\\n \t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_CORELIB) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB)\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_CORELIB_$(2)) \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2))\n \n # Prerequisites for a working stageN compiler and libraries, for a specific target\n CSREQ$(1)_T_$(2)_H_$(3) = \\\n \t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n-\t$$(HBIN$(1)_H_$(3))/fuzzer$$(X) \\\n-\t$$(HBIN$(1)_H_$(3))/rustpkg$$(X) \\\n-\t$$(HBIN$(1)_H_$(3))/rustdoc$$(X) \\\n-\t$$(HBIN$(1)_H_$(3))/rusti$$(X) \\\n-\t$$(HBIN$(1)_H_$(3))/rust$$(X) \\\n-\t$$(HLIB$(1)_H_$(3))/$$(CFG_LIBFUZZER) \\\n-\t$$(HLIB$(1)_H_$(3))/$$(CFG_LIBRUSTPKG) \\\n-\t$$(HLIB$(1)_H_$(3))/$$(CFG_LIBRUSTDOC) \\\n-\t$$(HLIB$(1)_H_$(3))/$$(CFG_LIBRUSTI) \\\n-\t$$(HLIB$(1)_H_$(3))/$$(CFG_LIBRUST) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_CORELIB) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB)  \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBSYNTAX)  \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBFUZZER) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTPKG) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTDOC) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTI) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUST)\n+\t$$(HBIN$(1)_H_$(3))/fuzzer$$(X_$(3)) \\\n+\t$$(HBIN$(1)_H_$(3))/rustpkg$$(X_$(3)) \\\n+\t$$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3)) \\\n+\t$$(HBIN$(1)_H_$(3))/rusti$$(X_$(3)) \\\n+\t$$(HBIN$(1)_H_$(3))/rust$$(X_$(3)) \\\n+\t$$(HLIB$(1)_H_$(3))/$(CFG_LIBFUZZER_$(3)) \\\n+\t$$(HLIB$(1)_H_$(3))/$(CFG_LIBRUSTPKG_$(3)) \\\n+\t$$(HLIB$(1)_H_$(3))/$(CFG_LIBRUSTDOC_$(3)) \\\n+\t$$(HLIB$(1)_H_$(3))/$(CFG_LIBRUSTI_$(3)) \\\n+\t$$(HLIB$(1)_H_$(3))/$(CFG_LIBRUST_$(3)) \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_CORELIB_$(2)) \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2))  \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBSYNTAX_$(2))  \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(2)) \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBFUZZER_$(2)) \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTPKG_$(2)) \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTDOC_$(2)) \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTI_$(2)) \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUST_$(2))\n \n ifeq ($(1),0)\n # Don't run the the stage0 compiler under valgrind - that ship has sailed\n@@ -409,28 +432,30 @@ CFGFLAG$(1)_T_$(2)_H_$(3) = stage$(1)\n # if you're building a cross config, the host->* parts are\n # effectively stage1, since it uses the just-built stage0.\n ifeq ($(1),0)\n-ifneq ($(strip $(CFG_HOST_TRIPLE)),$(strip $(3)))\n+ifneq ($(strip $(CFG_BUILD_TRIPLE)),$(strip $(3)))\n CFGFLAG$(1)_T_$(2)_H_$(3) = stage1\n endif\n endif\n \n STAGE$(1)_T_$(2)_H_$(3) := \t\t\t\t\t\t\\\n-\t$$(Q)$$(call CFG_RUN_TARG,$(1),\t\t\t\t\\\n+\t$$(Q)$$(call CFG_RUN_TARG_$(3),$(1),\t\t\t\t\\\n \t\t$$(CFG_VALGRIND_COMPILE$(1)) \t\t\t\\\n-\t\t$$(HBIN$(1)_H_$(3))/rustc$$(X)\t\t\t\\\n+\t\t$$(HBIN$(1)_H_$(3))/rustc$$(X_$(3))\t\t\t\\\n \t\t--cfg $$(CFGFLAG$(1)_T_$(2)_H_$(3))\t\t\t\\\n-\t\t$$(CFG_RUSTC_FLAGS) $$(EXTRAFLAGS_STAGE$(1)) --target=$(2))\n+\t\t$$(CFG_RUSTC_FLAGS) $$(EXTRAFLAGS_STAGE$(1)) --target=$(2)) \\\n+                $$(RUSTC_FLAGS_$(2))\n \n PERF_STAGE$(1)_T_$(2)_H_$(3) := \t\t\t\t\\\n-\t$$(Q)$$(call CFG_RUN_TARG,$(1),\t\t\t\t\\\n+\t$$(Q)$$(call CFG_RUN_TARG_$(3),$(1),\t\t\t\t\\\n \t\t$$(CFG_PERF_TOOL) \t\t\t\t\t\t\\\n-\t\t$$(HBIN$(1)_H_$(3))/rustc$$(X)\t\t\t\\\n+\t\t$$(HBIN$(1)_H_$(3))/rustc$$(X_$(3))\t\t\t\\\n \t\t--cfg $$(CFGFLAG$(1)_T_$(2)_H_$(3))\t\t\t\\\n-\t\t$$(CFG_RUSTC_FLAGS) $$(EXTRAFLAGS_STAGE$(1)) --target=$(2))\n+\t\t$$(CFG_RUSTC_FLAGS) $$(EXTRAFLAGS_STAGE$(1)) --target=$(2)) \\\n+                $$(RUSTC_FLAGS_$(2))\n \n endef\n \n-$(foreach build,$(CFG_TARGET_TRIPLES), \\\n+$(foreach build,$(CFG_HOST_TRIPLES), \\\n  $(eval $(foreach target,$(CFG_TARGET_TRIPLES), \\\n   $(eval $(foreach stage,$(STAGES), \\\n    $(eval $(call SREQ,$(stage),$(target),$(build))))))))\n@@ -451,13 +476,13 @@ rustc-stage$(2)-H-$(1):\t\t\t\t\t\t\t\\\n \n endef\n \n-$(foreach host,$(CFG_TARGET_TRIPLES),\t\t\t\t\t\t\t\\\n+$(foreach host,$(CFG_HOST_TRIPLES),\t\t\t\t\t\t\t\\\n  $(eval $(foreach stage,1 2 3,\t\t\t\t\t\t\t\t\t\\\n   $(eval $(call DEF_RUSTC_STAGE_TARGET,$(host),$(stage))))))\n \n-rustc-stage1: rustc-stage1-H-$(CFG_HOST_TRIPLE)\n-rustc-stage2: rustc-stage2-H-$(CFG_HOST_TRIPLE)\n-rustc-stage3: rustc-stage3-H-$(CFG_HOST_TRIPLE)\n+rustc-stage1: rustc-stage1-H-$(CFG_BUILD_TRIPLE)\n+rustc-stage2: rustc-stage2-H-$(CFG_BUILD_TRIPLE)\n+rustc-stage3: rustc-stage3-H-$(CFG_BUILD_TRIPLE)\n \n define DEF_RUSTC_TARGET\n # $(1) == architecture\n@@ -468,12 +493,12 @@ endef\n $(foreach host,$(CFG_TARGET_TRIPLES),\t\t\t\\\n  $(eval $(call DEF_RUSTC_TARGET,$(host))))\n \n-rustc-stage1: rustc-stage1-H-$(CFG_HOST_TRIPLE)\n-rustc-stage2: rustc-stage2-H-$(CFG_HOST_TRIPLE)\n-rustc-stage3: rustc-stage3-H-$(CFG_HOST_TRIPLE)\n-rustc: rustc-H-$(CFG_HOST_TRIPLE)\n+rustc-stage1: rustc-stage1-H-$(CFG_BUILD_TRIPLE)\n+rustc-stage2: rustc-stage2-H-$(CFG_BUILD_TRIPLE)\n+rustc-stage3: rustc-stage3-H-$(CFG_BUILD_TRIPLE)\n+rustc: rustc-H-$(CFG_BUILD_TRIPLE)\n \n-rustc-H-all: $(foreach host,$(CFG_TARGET_TRIPLES),rustc-H-$(host))\n+rustc-H-all: $(foreach host,$(CFG_HOST_TRIPLES),rustc-H-$(host))\n \n ######################################################################\n # Entrypoint rule\n@@ -489,19 +514,27 @@ CFG_INFO := $(info cfg: *** stage2 and later will not be built ***)\n CFG_INFO := $(info cfg:)\n \n #XXX This is surely busted\n-all: $(SREQ1$(CFG_HOST_TRIPLE)) $(GENERATED) docs\n+all: $(SREQ1$(CFG_BUILD_TRIPLE)) $(GENERATED) docs\n \n else\n \n define ALL_TARGET_N\n+ifneq ($$(findstring $(1),$$(CFG_HOST_TRIPLES)),)\n+# This is a host\n all-target-$(1)-host-$(2): $$(CSREQ2_T_$(1)_H_$(2))\n+else\n+# This is a target only\n+all-target-$(1)-host-$(2): $$(SREQ2_T_$(1)_H_$(2))\n+endif\n endef\n \n $(foreach target,$(CFG_TARGET_TRIPLES), \\\n- $(eval $(call ALL_TARGET_N,$(target),$(CFG_HOST_TRIPLE))))\n+ $(foreach host,$(CFG_HOST_TRIPLES), \\\n+ $(eval $(call ALL_TARGET_N,$(target),$(host)))))\n \n ALL_TARGET_RULES = $(foreach target,$(CFG_TARGET_TRIPLES), \\\n- all-target-$(target)-host-$(CFG_HOST_TRIPLE))\n+\t$(foreach host,$(CFG_HOST_TRIPLES), \\\n+ all-target-$(target)-host-$(host)))\n \n all: $(ALL_TARGET_RULES) $(GENERATED) docs\n "}, {"sha": "1d0afbea8043117a7cc57a93fec15da8eb486f8c", "filename": "configure", "status": "modified", "additions": 54, "deletions": 15, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/81e370285f9709d133d114f405bd4f797f7dc3e9/configure", "raw_url": "https://github.com/rust-lang/rust/raw/81e370285f9709d133d114f405bd4f797f7dc3e9/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=81e370285f9709d133d114f405bd4f797f7dc3e9", "patch": "@@ -301,7 +301,7 @@ then\n fi\n \n \n-DEFAULT_HOST_TRIPLE=\"${CFG_CPUTYPE}-${CFG_OSTYPE}\"\n+DEFAULT_BUILD_TRIPLE=\"${CFG_CPUTYPE}-${CFG_OSTYPE}\"\n \n CFG_SRC_DIR=\"$(cd $(dirname $0) && pwd)/\"\n CFG_BUILD_DIR=\"$(pwd)/\"\n@@ -346,8 +346,11 @@ opt pax-flags 0 \"apply PaX flags to rustc binaries (required for GRSecurity/PaX-\n valopt prefix \"/usr/local\" \"set installation prefix\"\n valopt local-rust-root \"/usr/local\" \"set prefix for local rust binary\"\n valopt llvm-root \"\" \"set LLVM root\"\n-valopt host-triple \"${DEFAULT_HOST_TRIPLE}\" \"LLVM host triple\"\n-valopt target-triples \"${CFG_HOST_TRIPLE}\" \"LLVM target triples\"\n+valopt build-triple \"${DEFAULT_BUILD_TRIPLE}\" \"LLVM build triple\"\n+valopt host-triples \"${CFG_BUILD_TRIPLE}\" \"LLVM host triples\"\n+valopt target-triples \"${CFG_HOST_TRIPLES}\" \"LLVM target triples\"\n+valopt android-cross-path \"/opt/ndk_standalone\" \"Android NDK standalone path\"\n+valopt mingw32-cross-path \"\" \"MinGW32 cross compiler path\"\n \n # Validate Options\n step_msg \"validating $CFG_SELF args\"\n@@ -531,11 +534,41 @@ fi\n # a little post-processing of various config values\n \n CFG_PREFIX=${CFG_PREFIX%/}\n+CFG_HOST_TRIPLES=\"$(echo $CFG_HOST_TRIPLES | tr ',' ' ')\"\n CFG_TARGET_TRIPLES=\"$(echo $CFG_TARGET_TRIPLES | tr ',' ' ')\"\n-case $CFG_TARGET_TRIPLES in\n-    (*$CFG_HOST_TRIPLE*) ;;\n-    (*) err \"Host triple is not among the target triples.\" ;;\n-esac\n+\n+# copy host-triples to target-triples so that hosts are a subset of targets\n+V_TEMP=\"\"\n+for i in $CFG_HOST_TRIPLES $CFG_TARGET_TRIPLES;\n+do\n+   echo \"$V_TEMP\" | grep -qF $i || V_TEMP=\"$V_TEMP${V_TEMP:+ }$i\"\n+done\n+CFG_TARGET_TRIPLES=$V_TEMP\n+\n+# check target-specific tool-chains\n+for i in $CFG_TARGET_TRIPLES\n+do\n+    case $i in\n+        arm-unknown-android)\n+\n+            if [ ! -f $CFG_ANDROID_CROSS_PATH/bin/arm-linux-androideabi-gcc ]\n+            then\n+                err \"NDK $CFG_ANDROID_CROSS_PATH/bin/arm-linux-androideabi-gcc not found\"\n+            fi\n+            if [ ! -f $CFG_ANDROID_CROSS_PATH/bin/arm-linux-androideabi-g++ ]\n+            then\n+                err \"NDK $CFG_ANDROID_CROSS_PATH/bin/arm-linux-androideabi-g++ not found\"\n+            fi\n+            if [ ! -f $CFG_ANDROID_CROSS_PATH/bin/arm-linux-androideabi-ar ]\n+            then\n+                err \"NDK $CFG_ANDROID_CROSS_PATH/bin/arm-linux-androideabi-ar not found\"\n+            fi\n+            ;;\n+\n+        *)\n+            ;;\n+    esac\n+done\n \n if [ -z \"$CFG_ENABLE_CLANG\" -a -z \"$CFG_GCC\" ]\n then\n@@ -562,13 +595,13 @@ do\n done\n \n make_dir llvm\n-for t in $CFG_TARGET_TRIPLES\n+for t in $CFG_HOST_TRIPLES\n do\n     make_dir llvm/$t\n done\n \n make_dir rustllvm\n-for t in $CFG_TARGET_TRIPLES\n+for t in $CFG_HOST_TRIPLES\n do\n     make_dir rustllvm/$t\n done\n@@ -577,23 +610,25 @@ make_dir rt\n for t in $CFG_TARGET_TRIPLES\n do\n   make_dir rt/$t\n-  for i in                                    \\\n-    isaac linenoise sync test libuv libuv/src \\\n-    arch/i386 arch/x86_64 arch/arm arch/mips\n+  for i in                                          \\\n+    isaac linenoise sync test \\\n+    arch/i386 arch/x86_64 arch/arm arch/mips  \\\n+    libuv libuv/src/ares libuv/src/eio libuv/src/ev\n   do\n     make_dir rt/$t/$i\n   done\n done\n \n # On windows we just store the libraries in the bin directory because\n # there's no rpath\n+# FIXME: Thise needs to parameterized over target triples. Do it in platform.mk\n CFG_LIBDIR=lib\n if [ \"$CFG_OSTYPE\" = \"pc-mingw32\" ]\n then\n     CFG_LIBDIR=bin\n fi\n \n-for h in $CFG_TARGET_TRIPLES\n+for h in $CFG_HOST_TRIPLES\n do\n     for t in $CFG_TARGET_TRIPLES\n     do\n@@ -669,7 +704,7 @@ fi\n # Configure llvm, only if necessary\n step_msg \"looking at LLVM\"\n CFG_LLVM_SRC_DIR=${CFG_SRC_DIR}src/llvm/\n-for t in $CFG_TARGET_TRIPLES\n+for t in $CFG_HOST_TRIPLES\n do\n     do_reconfigure=1\n \n@@ -819,10 +854,14 @@ putvar CFG_OSTYPE\n putvar CFG_CPUTYPE\n putvar CFG_CONFIGURE_ARGS\n putvar CFG_PREFIX\n+putvar CFG_BUILD_TRIPLE\n+putvar CFG_HOST_TRIPLES\n putvar CFG_TARGET_TRIPLES\n putvar CFG_C_COMPILER\n putvar CFG_LIBDIR\n putvar CFG_DISABLE_MANAGE_SUBMODULES\n+putvar CFG_ANDROID_CROSS_PATH\n+putvar CFG_MINGW32_CROSS_PATH\n \n if [ ! -z \"$CFG_ENABLE_PAX_FLAGS\" ]\n then\n@@ -854,7 +893,7 @@ fi\n putvar CFG_LLVM_ROOT\n putvar CFG_LLVM_SRC_DIR\n \n-for t in $CFG_TARGET_TRIPLES\n+for t in $CFG_HOST_TRIPLES\n do\n     CFG_LLVM_BUILD_DIR=$(echo CFG_LLVM_BUILD_DIR_${t} | tr - _)\n     CFG_LLVM_INST_DIR=$(echo CFG_LLVM_INST_DIR_${t} | tr - _)"}, {"sha": "30897eea4579372bd8d2487a57c358c622b20262", "filename": "mk/clean.mk", "status": "modified", "additions": 62, "deletions": 56, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Fclean.mk", "raw_url": "https://github.com/rust-lang/rust/raw/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Fclean.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fclean.mk?ref=81e370285f9709d133d114f405bd4f797f7dc3e9", "patch": "@@ -14,7 +14,7 @@\n \n CLEAN_STAGE_RULES =\t\t\t\t\t\t\t\t\\\n  $(foreach stage, $(STAGES),\t\t\t\t\t\\\n-  $(foreach host, $(CFG_TARGET_TRIPLES),\t\t\\\n+  $(foreach host, $(CFG_HOST_TRIPLES),\t\t\\\n    clean$(stage)_H_$(host)\t\t\t\t\t\t\\\n    $(foreach target, $(CFG_TARGET_TRIPLES),\t\t\\\n     clean$(stage)_T_$(target)_H_$(host))))\n@@ -33,15 +33,15 @@ clean: clean-misc $(CLEAN_STAGE_RULES)\n \n clean-misc:\n \t@$(call E, cleaning)\n-\t$(Q)find rustllvm rt $(CFG_HOST_TRIPLE)/test \\\n+\t$(Q)find rustllvm rt $(CFG_BUILD_TRIPLE)/test \\\n          -name '*.[odasS]' -o \\\n          -name '*.so' -o      \\\n          -name '*.dylib' -o   \\\n          -name '*.dll' -o     \\\n          -name '*.def' -o     \\\n          -name '*.bc'         \\\n          | xargs rm -f\n-\t$(Q)find rustllvm rt $(CFG_HOST_TRIPLE)\\\n+\t$(Q)find rustllvm rt $(CFG_BUILD_TRIPLE)\\\n          -name '*.dSYM'       \\\n          | xargs rm -Rf\n \t$(Q)rm -f $(RUNTIME_OBJS) $(RUNTIME_DEF)\n@@ -62,77 +62,83 @@ clean-misc:\n define CLEAN_HOST_STAGE_N\n \n clean$(1)_H_$(2):\n-\t$(Q)rm -f $$(HBIN$(1)_H_$(2))/rustc$(X)\n-\t$(Q)rm -f $$(HBIN$(1)_H_$(2))/fuzzer$(X)\n-\t$(Q)rm -f $$(HBIN$(1)_H_$(2))/rustpkg$(X)\n-\t$(Q)rm -f $$(HBIN$(1)_H_$(2))/serializer$(X)\n-\t$(Q)rm -f $$(HBIN$(1)_H_$(2))/rustdoc$(X)\n-\t$(Q)rm -f $$(HBIN$(1)_H_$(2))/rusti$(X)\n-\t$(Q)rm -f $$(HBIN$(1)_H_$(2))/rust$(X)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBFUZZER)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTPKG)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTDOC)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_RUNTIME)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_CORELIB)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_STDLIB)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTC)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBSYNTAX)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTI)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUST)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CORELIB_GLOB)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(STDLIB_GLOB)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTC_GLOB)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBSYNTAX_GLOB)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBFUZZER_GLOB)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTPKG_GLOB)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTDOC_GLOB)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTI_GLOB)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUST_GLOB)\n-\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_RUSTLLVM)\n+\t$(Q)rm -f $$(HBIN$(1)_H_$(2))/rustc$(X_$(2))\n+\t$(Q)rm -f $$(HBIN$(1)_H_$(2))/fuzzer$(X_$(2))\n+\t$(Q)rm -f $$(HBIN$(1)_H_$(2))/rustpkg$(X_$(2))\n+\t$(Q)rm -f $$(HBIN$(1)_H_$(2))/serializer$(X_$(2))\n+\t$(Q)rm -f $$(HBIN$(1)_H_$(2))/rustdoc$(X_$(2))\n+\t$(Q)rm -f $$(HBIN$(1)_H_$(2))/rusti$(X_$(2))\n+\t$(Q)rm -f $$(HBIN$(1)_H_$(2))/rust$(X_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBFUZZER_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTPKG_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTDOC_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_RUNTIME_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_CORELIB_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_STDLIB_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTC_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBSYNTAX_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUSTI_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_LIBRUST_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CORELIB_GLOB_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(STDLIB_GLOB_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTC_GLOB_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBSYNTAX_GLOB_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBFUZZER_GLOB_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTPKG_GLOB_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTDOC_GLOB_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUSTI_GLOB_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(LIBRUST_GLOB_$(2))\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_RUSTLLVM_$(2))\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/libstd.rlib\n \n endef\n \n-$(foreach host, $(CFG_TARGET_TRIPLES), \\\n+$(foreach host, $(CFG_HOST_TRIPLES), \\\n  $(eval $(foreach stage, $(STAGES), \\\n   $(eval $(call CLEAN_HOST_STAGE_N,$(stage),$(host))))))\n \n define CLEAN_TARGET_STAGE_N\n \n clean$(1)_T_$(2)_H_$(3):\n-\t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/rustc$(X)\n-\t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/fuzzer$(X)\n-\t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/rustpkg$(X)\n-\t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/serializer$(X)\n-\t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/rustdoc$(X)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBFUZZER)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTPKG)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTDOC)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUNTIME)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_CORELIB)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBSYNTAX)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CORELIB_GLOB)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(STDLIB_GLOB)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTC_GLOB)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBSYNTAX_GLOB)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBFUZZER_GLOB)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTPKG_GLOB)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTDOC_GLOB)\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUSTLLVM)\n+\t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/rustc$(X_$(2))\n+\t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/fuzzer$(X_$(2))\n+\t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/rustpkg$(X_$(2))\n+\t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/serializer$(X_$(2))\n+\t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/rustdoc$(X_$(2))\n+\t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/rusti$(X_$(2))\n+\t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/rust$(X_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBFUZZER_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTPKG_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTDOC_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUNTIME_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_CORELIB_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBSYNTAX_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTI_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUST_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CORELIB_GLOB_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(STDLIB_GLOB_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTC_GLOB_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBSYNTAX_GLOB_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBFUZZER_GLOB_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTPKG_GLOB_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTDOC_GLOB_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUSTI_GLOB_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(LIBRUST_GLOB_$(2))\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUSTLLVM_$(2))\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/libstd.rlib\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/librun_pass_stage* # For unix\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/run_pass_stage* # For windows\n endef\n \n-$(foreach host, $(CFG_TARGET_TRIPLES), \\\n+$(foreach host, $(CFG_HOST_TRIPLES), \\\n  $(eval $(foreach target, $(CFG_TARGET_TRIPLES), \\\n   $(eval $(foreach stage, 0 1 2 3, \\\n    $(eval $(call CLEAN_TARGET_STAGE_N,$(stage),$(target),$(host))))))))\n \n-define DEF_CLEAN_LLVM_TARGET\n+define DEF_CLEAN_LLVM_HOST\n ifeq ($(CFG_LLVM_ROOT),)\n clean-llvm$(1):\n \t$$(Q)$$(MAKE) -C $$(CFG_LLVM_BUILD_DIR_$(1)) clean\n@@ -142,5 +148,5 @@ clean-llvm$(1): ;\n endif\n endef\n \n-$(foreach target, $(CFG_TARGET_TRIPLES), \\\n- $(eval $(call DEF_CLEAN_LLVM_TARGET,$(target))))\n+$(foreach host, $(CFG_HOST_TRIPLES), \\\n+ $(eval $(call DEF_CLEAN_LLVM_HOST,$(host))))"}, {"sha": "92989d157b4299c0def828d3a6621c342a3704bd", "filename": "mk/dist.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Fdist.mk", "raw_url": "https://github.com/rust-lang/rust/raw/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Fdist.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdist.mk?ref=81e370285f9709d133d114f405bd4f797f7dc3e9", "patch": "@@ -83,7 +83,7 @@ $(PKG_TAR): $(PKG_FILES)\n \n .PHONY: dist distcheck\n \n-ifdef CFG_WINDOWSY\n+ifdef CFG_WINDOWSY_$(CFG_BUILD_TRIPLE)\n \n dist: $(PKG_EXE)\n "}, {"sha": "10d7c9b0301d9197a5a47d2a97d6e6064d047968", "filename": "mk/docs.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=81e370285f9709d133d114f405bd4f797f7dc3e9", "patch": "@@ -171,7 +171,7 @@ ifeq ($(CFG_PANDOC),)\n else\n \n # The rustdoc executable\n-RUSTDOC = $(HBIN2_H_$(CFG_HOST_TRIPLE))/rustdoc$(X)\n+RUSTDOC = $(HBIN2_H_$(CFG_BUILD_TRIPLE))/rustdoc$(X_$(CFG_BUILD_TRIPLE))\n \n # The library documenting macro\n # $(1) - The output directory"}, {"sha": "13a8a5401172a94e65f83fbc57ff583c5a95a58b", "filename": "mk/host.mk", "status": "modified", "additions": 43, "deletions": 41, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Fhost.mk", "raw_url": "https://github.com/rust-lang/rust/raw/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Fhost.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fhost.mk?ref=81e370285f9709d133d114f405bd4f797f7dc3e9", "patch": "@@ -21,49 +21,51 @@ define CP_HOST_STAGE_N\n \n # Host libraries and executables (stage$(2)/bin/rustc and its runtime needs)\n \n-$$(HBIN$(2)_H_$(4))/rustc$$(X): \\\n-\t$$(TBIN$(1)_T_$(4)_H_$(3))/rustc$$(X) \\\n-\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME) \\\n-\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUSTLLVM) \\\n-\t$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTC) \\\n+# Note: $(3) and $(4) are both the same!\n+\n+$$(HBIN$(2)_H_$(4))/rustc$$(X_$(4)): \\\n+\t$$(TBIN$(1)_T_$(4)_H_$(3))/rustc$$(X_$(4)) \\\n+\t$$(HLIB$(2)_H_$(4))/$(CFG_RUNTIME_$(4)) \\\n+\t$$(HLIB$(2)_H_$(4))/$(CFG_RUSTLLVM_$(4)) \\\n+\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTC_$(4)) \\\n \t$$(HCORELIB_DEFAULT$(2)_H_$(4)) \\\n \t$$(HSTDLIB_DEFAULT$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTC): \\\n-\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTC) \\\n-\t$$(HLIB$(2)_H_$(4))/$$(CFG_LIBSYNTAX) \\\n-\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME) \\\n-\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUSTLLVM) \\\n-\t$$(HCORELIB_DEFAULT$(2)_H_$(3)) \\\n-\t$$(HSTDLIB_DEFAULT$(2)_H_$(3))\n+$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTC_$(4)): \\\n+\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTC_$(4)) \\\n+\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBSYNTAX_$(4)) \\\n+\t$$(HLIB$(2)_H_$(4))/$(CFG_RUNTIME_$(4)) \\\n+\t$$(HLIB$(2)_H_$(4))/$(CFG_RUSTLLVM_$(4)) \\\n+\t$$(HCORELIB_DEFAULT$(2)_H_$(4)) \\\n+\t$$(HSTDLIB_DEFAULT$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTC_GLOB) \\\n-\t\t$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTC_DSYM_GLOB)) \\\n+\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTC_GLOB_$(4)) \\\n+\t\t$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTC_DSYM_GLOB_$(4))) \\\n \t        $$(HLIB$(2)_H_$(4))\n \n-$$(HLIB$(2)_H_$(4))/$$(CFG_LIBSYNTAX): \\\n-\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBSYNTAX) \\\n-\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME) \\\n-\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUSTLLVM) \\\n-\t$$(HCORELIB_DEFAULT$(2)_H_$(3)) \\\n-\t$$(HSTDLIB_DEFAULT$(2)_H_$(3))\n+$$(HLIB$(2)_H_$(4))/$(CFG_LIBSYNTAX_$(4)): \\\n+\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBSYNTAX_$(4)) \\\n+\t$$(HLIB$(2)_H_$(4))/$(CFG_RUNTIME_$(4)) \\\n+\t$$(HLIB$(2)_H_$(4))/$(CFG_RUSTLLVM_$(4)) \\\n+\t$$(HCORELIB_DEFAULT$(2)_H_$(4)) \\\n+\t$$(HSTDLIB_DEFAULT$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBSYNTAX_GLOB) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBSYNTAX_DSYM_GLOB)) \\\n+\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBSYNTAX_GLOB_$(4)) \\\n+\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBSYNTAX_DSYM_GLOB_$(4))) \\\n \t        $$(HLIB$(2)_H_$(4))\n \n-$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME): \\\n-\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_RUNTIME)\n+$$(HLIB$(2)_H_$(4))/$(CFG_RUNTIME_$(4)): \\\n+\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_RUNTIME_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(HLIB$(2)_H_$(4))/$$(CFG_CORELIB): \\\n-\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_CORELIB) \\\n-\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME)\n+$$(HLIB$(2)_H_$(4))/$(CFG_CORELIB_$(4)): \\\n+\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_CORELIB_$(4)) \\\n+\t$$(HLIB$(2)_H_$(4))/$(CFG_RUNTIME_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n # Subtle: We do not let the shell expand $(CORELIB_DSYM_GLOB) directly rather\n@@ -73,49 +75,49 @@ $$(HLIB$(2)_H_$(4))/$$(CFG_CORELIB): \\\n # glob, and cp reports an error because libcore-*.dylib.dsym does not exist.\n # Make instead expands the glob to nothing, which gives us the correct behavior.\n # (Copy .dsym file if it exists, but do nothing otherwise)\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(CORELIB_GLOB) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(CORELIB_DSYM_GLOB)) \\\n+\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(CORELIB_GLOB_$(4)) \\\n+\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(CORELIB_DSYM_GLOB_$(4))) \\\n \t        $$(HLIB$(2)_H_$(4))\n \n-$$(HLIB$(2)_H_$(4))/$$(CFG_STDLIB): \\\n-\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_STDLIB) \\\n-\t$$(HLIB$(2)_H_$(4))/$$(CFG_CORELIB) \\\n-\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME)\n+$$(HLIB$(2)_H_$(4))/$(CFG_STDLIB_$(4)): \\\n+\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_STDLIB_$(4)) \\\n+\t$$(HLIB$(2)_H_$(4))/$(CFG_CORELIB_$(4)) \\\n+\t$$(HLIB$(2)_H_$(4))/$(CFG_RUNTIME_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(STDLIB_GLOB) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(STDLIB_DSYM_GLOB)) \\\n+\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(STDLIB_GLOB_$(4)) \\\n+\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(STDLIB_DSYM_GLOB_$(4))) \\\n \t        $$(HLIB$(2)_H_$(4))\n \n $$(HLIB$(2)_H_$(4))/libcore.rlib: \\\n \t$$(TLIB$(1)_T_$(4)_H_$(3))/libcore.rlib \\\n-\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME)\n+\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n $$(HLIB$(2)_H_$(4))/libstd.rlib: \\\n \t$$(TLIB$(1)_T_$(4)_H_$(3))/libstd.rlib \\\n \t$$(HLIB$(2)_H_$(4))/libcore.rlib \\\n-\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME)\n+\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n $$(HLIB$(2)_H_$(4))/librustc.rlib: \\\n \t$$(TLIB$(1)_T_$(4)_H_$(3))/librustc.rlib \\\n \t$$(HLIB$(2)_H_$(4))/libcore.rlib \\\n \t$$(HLIB$(2)_H_$(4))/libstd.rlib \\\n-\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME)\n+\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(HLIB$(2)_H_$(4))/$$(CFG_RUSTLLVM): \\\n-\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_RUSTLLVM)\n+$$(HLIB$(2)_H_$(4))/$(CFG_RUSTLLVM_$(4)): \\\n+\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_RUSTLLVM_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n endef\n \n-$(foreach t,$(CFG_TARGET_TRIPLES),\t\t\t\t\t\\\n+$(foreach t,$(CFG_HOST_TRIPLES),\t\t\t\t\t\\\n \t$(eval $(call CP_HOST_STAGE_N,0,1,$(t),$(t)))\t\\\n \t$(eval $(call CP_HOST_STAGE_N,1,2,$(t),$(t)))\t\\\n \t$(eval $(call CP_HOST_STAGE_N,2,3,$(t),$(t))))"}, {"sha": "3824d77586b3da21168a973e9fe345c70e9da649", "filename": "mk/install.mk", "status": "modified", "additions": 74, "deletions": 54, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Finstall.mk", "raw_url": "https://github.com/rust-lang/rust/raw/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Finstall.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Finstall.mk?ref=81e370285f9709d133d114f405bd4f797f7dc3e9", "patch": "@@ -30,7 +30,7 @@ PREFIX_ROOT = $(CFG_PREFIX)\n PREFIX_BIN = $(PREFIX_ROOT)/bin\n PREFIX_LIB = $(PREFIX_ROOT)/$(CFG_LIBDIR)\n \n-define INSTALL_TARGET_N\n+define INSTALL_PREPARE_N\n   # $(1) is the target triple\n   # $(2) is the host triple\n \n@@ -43,69 +43,89 @@ PTR$(1)$(2) = $$(PREFIX_LIB)/rustc/$(1)\n PTB$(1)$(2) = $$(PTR$(1)$(2))/bin\n PTL$(1)$(2) = $$(PTR$(1)$(2))/$(CFG_LIBDIR)\n \n+endef\n+\n+$(foreach target,$(CFG_TARGET_TRIPLES), \\\n+ $(eval $(call INSTALL_PREPARE_N,$(target),$(CFG_BUILD_TRIPLE))))\n+\n+define INSTALL_TARGET_N\n+install-target-$(1)-host-$(2): $$(TSREQ$$(ISTAGE)_T_$(1)_H_$(2)) $$(SREQ$$(ISTAGE)_T_$(1)_H_$(2))\n+\t$$(Q)mkdir -p $$(PTL$(1)$(2))\n+\t$$(Q)$$(call INSTALL,$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(CFG_RUNTIME_$(1)))\n+\t$$(Q)$$(call INSTALL_LIB, \\\n+\t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(CORELIB_GLOB_$(1)))\n+\t$$(Q)$$(call INSTALL_LIB, \\\n+\t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(STDLIB_GLOB_$(1)))\n+\t$$(Q)$$(call INSTALL,$$(TL$(1)$(2)),$$(PTL$(1)$(2)),libmorestack.a)\n+\n+endef\n+\n+define INSTALL_HOST_N\n install-target-$(1)-host-$(2): $$(CSREQ$$(ISTAGE)_T_$(1)_H_$(2))\n \t$$(Q)mkdir -p $$(PTL$(1)$(2))\n-\t$$(Q)$$(call INSTALL,$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(CFG_RUNTIME))\n+\t$$(Q)$$(call INSTALL,$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(CFG_RUNTIME_$(1)))\n \t$$(Q)$$(call INSTALL_LIB, \\\n-\t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(CORELIB_GLOB))\n+\t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(CORELIB_GLOB_$(1)))\n \t$$(Q)$$(call INSTALL_LIB, \\\n-\t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(STDLIB_GLOB))\n+\t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(STDLIB_GLOB_$(1)))\n \t$$(Q)$$(call INSTALL_LIB, \\\n-\t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(LIBRUSTC_GLOB))\n+\t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(LIBRUSTC_GLOB_$(1)))\n \t$$(Q)$$(call INSTALL_LIB, \\\n-\t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(LIBSYNTAX_GLOB))\n+\t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(LIBSYNTAX_GLOB_$(1)))\n \t$$(Q)$$(call INSTALL_LIB, \\\n-\t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(LIBRUSTPKG_GLOB))\n+\t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(LIBRUSTPKG_GLOB_$(1)))\n \t$$(Q)$$(call INSTALL_LIB, \\\n-\t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(LIBRUSTDOC_GLOB))\n+\t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(LIBRUSTDOC_GLOB_$(1)))\n \t$$(Q)$$(call INSTALL_LIB, \\\n-\t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(LIBRUSTI_GLOB))\n+\t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(LIBRUSTI_GLOB_$(1)))\n \t$$(Q)$$(call INSTALL_LIB, \\\n-\t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(LIBRUST_GLOB))\n+\t\t$$(TL$(1)$(2)),$$(PTL$(1)$(2)),$$(LIBRUST_GLOB_$(1)))\n \t$$(Q)$$(call INSTALL,$$(TL$(1)$(2)),$$(PTL$(1)$(2)),libmorestack.a)\n \n endef\n \n $(foreach target,$(CFG_TARGET_TRIPLES), \\\n- $(eval $(call INSTALL_TARGET_N,$(target),$(CFG_HOST_TRIPLE))))\n+ $(if $(findstring $(target), $(CFG_BUILD_TRIPLE)), \\\n+  $(eval $(call INSTALL_HOST_N,$(target),$(CFG_BUILD_TRIPLE))), \\\n+  $(eval $(call INSTALL_TARGET_N,$(target),$(CFG_BUILD_TRIPLE)))))\n \n INSTALL_TARGET_RULES = $(foreach target,$(CFG_TARGET_TRIPLES), \\\n- install-target-$(target)-host-$(CFG_HOST_TRIPLE))\n+ install-target-$(target)-host-$(CFG_BUILD_TRIPLE))\n \n install: all install-host install-targets\n \n # Shorthand for build/stageN/bin\n-HB = $(HBIN$(ISTAGE)_H_$(CFG_HOST_TRIPLE))\n-HB2 = $(HBIN2_H_$(CFG_HOST_TRIPLE))\n+HB = $(HBIN$(ISTAGE)_H_$(CFG_BUILD_TRIPLE))\n+HB2 = $(HBIN2_H_$(CFG_BUILD_TRIPLE))\n # Shorthand for build/stageN/lib\n-HL = $(HLIB$(ISTAGE)_H_$(CFG_HOST_TRIPLE))\n+HL = $(HLIB$(ISTAGE)_H_$(CFG_BUILD_TRIPLE))\n # Shorthand for the prefix bin directory\n PHB = $(PREFIX_BIN)\n # Shorthand for the prefix bin directory\n PHL = $(PREFIX_LIB)\n \n-install-host: $(CSREQ$(ISTAGE)_T_$(CFG_HOST_TRIPLE)_H_$(CFG_HOST_TRIPLE))\n+install-host: $(CSREQ$(ISTAGE)_T_$(CFG_BUILD_TRIPLE)_H_$(CFG_BUILD_TRIPLE))\n \t$(Q)mkdir -p $(PREFIX_BIN)\n \t$(Q)mkdir -p $(PREFIX_LIB)\n \t$(Q)mkdir -p $(PREFIX_ROOT)/share/man/man1\n-\t$(Q)$(call INSTALL,$(HB2),$(PHB),rustc$(X))\n-\t$(Q)$(call INSTALL,$(HB2),$(PHB),rustpkg$(X))\n-\t$(Q)$(call INSTALL,$(HB2),$(PHB),rustdoc$(X))\n-\t$(Q)$(call INSTALL,$(HB2),$(PHB),rusti$(X))\n-\t$(Q)$(call INSTALL,$(HB2),$(PHB),rust$(X))\n-\t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_LIBRUSTC))\n-\t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_LIBRUSTPKG))\n-\t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_LIBRUSTDOC))\n-\t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_LIBRUSTI))\n-\t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_LIBRUST))\n-\t$(Q)$(call INSTALL_LIB,$(HL),$(PHL),$(CORELIB_GLOB))\n-\t$(Q)$(call INSTALL_LIB,$(HL),$(PHL),$(STDLIB_GLOB))\n-\t$(Q)$(call INSTALL_LIB,$(HL),$(PHL),$(LIBRUSTC_GLOB))\n-\t$(Q)$(call INSTALL_LIB,$(HL),$(PHL),$(LIBSYNTAX_GLOB))\n-\t$(Q)$(call INSTALL_LIB,$(HL),$(PHL),$(LIBRUSTI_GLOB))\n-\t$(Q)$(call INSTALL_LIB,$(HL),$(PHL),$(LIBRUST_GLOB))\n-\t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_RUNTIME))\n-\t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_RUSTLLVM))\n+\t$(Q)$(call INSTALL,$(HB2),$(PHB),rustc$(X_$(CFG_BUILD_TRIPLE)))\n+\t$(Q)$(call INSTALL,$(HB2),$(PHB),rustpkg$(X_$(CFG_BUILD_TRIPLE)))\n+\t$(Q)$(call INSTALL,$(HB2),$(PHB),rustdoc$(X_$(CFG_BUILD_TRIPLE)))\n+\t$(Q)$(call INSTALL,$(HB2),$(PHB),rusti$(X_$(CFG_BUILD_TRIPLE)))\n+\t$(Q)$(call INSTALL,$(HB2),$(PHB),rust$(X_$(CFG_BUILD_TRIPLE)))\n+\t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_LIBRUSTC_$(CFG_BUILD_TRIPLE)))\n+\t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_LIBRUSTPKG_$(CFG_BUILD_TRIPLE)))\n+\t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_LIBRUSTDOC_$(CFG_BUILD_TRIPLE)))\n+\t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_LIBRUSTI_$(CFG_BUILD_TRIPLE)))\n+\t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_LIBRUST_$(CFG_BUILD_TRIPLE)))\n+\t$(Q)$(call INSTALL_LIB,$(HL),$(PHL),$(CORELIB_GLOB_$(CFG_BUILD_TRIPLE)))\n+\t$(Q)$(call INSTALL_LIB,$(HL),$(PHL),$(STDLIB_GLOB_$(CFG_BUILD_TRIPLE)))\n+\t$(Q)$(call INSTALL_LIB,$(HL),$(PHL),$(LIBRUSTC_GLOB_$(CFG_BUILD_TRIPLE)))\n+\t$(Q)$(call INSTALL_LIB,$(HL),$(PHL),$(LIBSYNTAX_GLOB_$(CFG_BUILD_TRIPLE)))\n+\t$(Q)$(call INSTALL_LIB,$(HL),$(PHL),$(LIBRUSTI_GLOB_$(CFG_BUILD_TRIPLE)))\n+\t$(Q)$(call INSTALL_LIB,$(HL),$(PHL),$(LIBRUST_GLOB_$(CFG_BUILD_TRIPLE)))\n+\t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_RUNTIME_$(CFG_BUILD_TRIPLE)))\n+\t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_RUSTLLVM_$(CFG_BUILD_TRIPLE)))\n \t$(Q)$(call INSTALL,$(S)/man, \\\n \t     $(PREFIX_ROOT)/share/man/man1,rustc.1)\n \n@@ -116,27 +136,27 @@ HOST_LIB_FROM_HL_GLOB = \\\n   $(patsubst $(HL)/%,$(PHL)/%,$(wildcard $(HL)/$(1)))\n \n uninstall:\n-\t$(Q)rm -f $(PHB)/rustc$(X)\n-\t$(Q)rm -f $(PHB)/rustpkg$(X)\n-\t$(Q)rm -f $(PHB)/rusti$(X)\n-\t$(Q)rm -f $(PHB)/rust$(X)\n-\t$(Q)rm -f $(PHB)/rustdoc$(X)\n-\t$(Q)rm -f $(PHL)/$(CFG_RUSTLLVM)\n-\t$(Q)rm -f $(PHL)/$(CFG_LIBRUSTPKG)\n-\t$(Q)rm -f $(PHL)/$(CFG_LIBRUSTC)\n-\t$(Q)rm -f $(PHL)/$(CFG_LIBRUSTDOC)\n-\t$(Q)rm -f $(PHL)/$(CFG_LIBRUSTI)\n-\t$(Q)rm -f $(PHL)/$(CFG_LIBRUST)\n-\t$(Q)rm -f $(PHL)/$(CFG_RUNTIME)\n+\t$(Q)rm -f $(PHB)/rustc$(X_$(CFG_BUILD_TRIPLE))\n+\t$(Q)rm -f $(PHB)/rustpkg$(X_$(CFG_BUILD_TRIPLE))\n+\t$(Q)rm -f $(PHB)/rusti$(X_$(CFG_BUILD_TRIPLE))\n+\t$(Q)rm -f $(PHB)/rust$(X_$(CFG_BUILD_TRIPLE))\n+\t$(Q)rm -f $(PHB)/rustdoc$(X_$(CFG_BUILD_TRIPLE))\n+\t$(Q)rm -f $(PHL)/$(CFG_RUSTLLVM_$(CFG_BUILD_TRIPLE))\n+\t$(Q)rm -f $(PHL)/$(CFG_LIBRUSTPKG_$(CFG_BUILD_TRIPLE))\n+\t$(Q)rm -f $(PHL)/$(CFG_LIBRUSTC_$(CFG_BUILD_TRIPLE))\n+\t$(Q)rm -f $(PHL)/$(CFG_LIBRUSTDOC_$(CFG_BUILD_TRIPLE))\n+\t$(Q)rm -f $(PHL)/$(CFG_LIBRUSTI_$(CFG_BUILD_TRIPLE))\n+\t$(Q)rm -f $(PHL)/$(CFG_LIBRUST_$(CFG_BUILD_TRIPLE))\n+\t$(Q)rm -f $(PHL)/$(CFG_RUNTIME_$(CFG_BUILD_TRIPLE))\n \t$(Q)for i in \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(CORELIB_GLOB)) \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(STDLIB_GLOB)) \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTC_GLOB)) \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(LIBSYNTAX_GLOB)) \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTPKG_GLOB)) \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTDOC_GLOB)) \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTI_GLOB)) \\\n-          $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUST_GLOB)) \\\n+          $(call HOST_LIB_FROM_HL_GLOB,$(CORELIB_GLOB_$(CFG_BUILD_TRIPLE))) \\\n+          $(call HOST_LIB_FROM_HL_GLOB,$(STDLIB_GLOB_$(CFG_BUILD_TRIPLE))) \\\n+          $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTC_GLOB_$(CFG_BUILD_TRIPLE))) \\\n+          $(call HOST_LIB_FROM_HL_GLOB,$(LIBSYNTAX_GLOB_$(CFG_BUILD_TRIPLE))) \\\n+          $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTPKG_GLOB_$(CFG_BUILD_TRIPLE))) \\\n+          $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTDOC_GLOB_$(CFG_BUILD_TRIPLE))) \\\n+          $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUSTI_GLOB_$(CFG_BUILD_TRIPLE))) \\\n+          $(call HOST_LIB_FROM_HL_GLOB,$(LIBRUST_GLOB_$(CFG_BUILD_TRIPLE))) \\\n         ; \\\n         do rm -f $$i ; \\\n         done"}, {"sha": "77b6b4d96f3628c195139c9e630ad1e7fb391874", "filename": "mk/llvm.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Fllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Fllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fllvm.mk?ref=81e370285f9709d133d114f405bd4f797f7dc3e9", "patch": "@@ -30,5 +30,5 @@ endif\n \n endef\n \n-$(foreach target,$(CFG_TARGET_TRIPLES), \\\n- $(eval $(call DEF_LLVM_RULES,$(target))))\n+$(foreach host,$(CFG_HOST_TRIPLES), \\\n+ $(eval $(call DEF_LLVM_RULES,$(host))))"}, {"sha": "327f2ca31e00f8fcd7bb7c37efd2f61c9122ac18", "filename": "mk/perf.mk", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Fperf.mk", "raw_url": "https://github.com/rust-lang/rust/raw/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Fperf.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fperf.mk?ref=81e370285f9709d133d114f405bd4f797f7dc3e9", "patch": "@@ -10,16 +10,16 @@\n \n \n ifdef CFG_PERF_TOOL\n-rustc-perf$(X): $(CFG_HOST_TRIPLE)/stage2/bin/rustc$(X)\n+rustc-perf$(X): $(CFG_BUILD_TRIPLE)/stage2/bin/rustc$(X_$(CFG_BUILD_TRIPLE))\n \t@$(call E, perf compile: $@)\n-\t$(PERF_STAGE2_T_$(CFG_HOST_TRIPLE)_H_$(CFG_HOST_TRIPLE)) \\\n+\t$(PERF_STAGE2_T_$(CFG_BUILD_TRIPLE)_H_$(CFG_BUILD_TRIPLE)) \\\n \t\t -o $@ $(COMPILER_CRATE) >rustc-perf.err 2>&1\n \t$(Q)rm -f $(LIBRUSTC_GLOB)\n else\n-rustc-perf$(X): $(CFG_HOST_TRIPLE)/stage2/bin/rustc$(X)\n+rustc-perf$(X): $(CFG_BUILD_TRIPLE)/stage2/bin/rustc$(X_$(CFG_BUILD_TRIPLE))\n \t$(Q)touch $@\n endif\n \n-perf: check-stage2-perf rustc-perf$(X)\n-\t$(Q)find $(CFG_HOST_TRIPLE)/test/perf -name \\*.err | xargs cat\n+perf: check-stage2-perf rustc-perf$(X_$(CFG_BUILD_TRIPLE))\n+\t$(Q)find $(CFG_BUILD_TRIPLE)/test/perf -name \\*.err | xargs cat\n \t$(Q)cat rustc-perf.err"}, {"sha": "55d5a3c476e7397e94d79e3d757af4a975730aa2", "filename": "mk/platform.mk", "status": "modified", "additions": 279, "deletions": 242, "changes": 521, "blob_url": "https://github.com/rust-lang/rust/blob/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=81e370285f9709d133d114f405bd4f797f7dc3e9", "patch": "@@ -19,6 +19,13 @@ endef\n $(foreach t,$(CFG_TARGET_TRIPLES),$(eval $(call DEF_HOST_VAR,$(t))))\n $(foreach t,$(CFG_TARGET_TRIPLES),$(info cfg: host for $(t) is $(HOST_$(t))))\n \n+# Ditto for OSTYPE\n+define DEF_OSTYPE_VAR\n+  OSTYPE_$(1) = $(subst $(firstword $(subst -, ,$(1)))-,,$(1))\n+endef\n+$(foreach t,$(CFG_TARGET_TRIPLES),$(eval $(call DEF_OSTYPE_VAR,$(t))))\n+$(foreach t,$(CFG_TARGET_TRIPLES),$(info cfg: os for $(t) is $(OSTYPE_$(t))))\n+\n # FIXME: no-omit-frame-pointer is just so that task_start_wrapper\n # has a frame pointer and the stack walker can understand it. Turning off\n # frame pointers everywhere is overkill\n@@ -29,47 +36,33 @@ CFG_GCCISH_CFLAGS += -fno-omit-frame-pointer\n # embedded into the executable, so use a no-op command.\n CFG_DSYMUTIL := true\n \n-# Add a dSYM glob for all platforms, even though it will do nothing on\n-# non-Darwin platforms; omitting it causes a full -R copy of lib/\n-CFG_LIB_DSYM_GLOB=lib$(1)-*.dylib.dSYM\n+# Hack: not sure how to test if a file exists in make other than this\n+OS_SUPP = $(patsubst %,--suppressions=%,\\\n+      $(wildcard $(CFG_SRC_DIR)src/etc/$(CFG_OSTYPE).supp*))\n+\n+ifdef CFG_DISABLE_OPTIMIZE_CXX\n+  $(info cfg: disabling C++ optimization (CFG_DISABLE_OPTIMIZE_CXX))\n+  CFG_GCCISH_CFLAGS += -O0\n+else\n+  CFG_GCCISH_CFLAGS += -O2\n+endif\n \n-ifneq ($(findstring freebsd,$(CFG_OSTYPE)),)\n-  CFG_LIB_NAME=lib$(1).so\n-  CFG_LIB_GLOB=lib$(1)-*.so\n-  CFG_GCCISH_CFLAGS += -fPIC -I/usr/local/include\n-  CFG_GCCISH_LINK_FLAGS += -shared -fPIC -lpthread -lrt\n-  CFG_GCCISH_DEF_FLAG := -Wl,--export-dynamic,--dynamic-list=\n-  CFG_GCCISH_PRE_LIB_FLAGS := -Wl,-whole-archive\n-  CFG_GCCISH_POST_LIB_FLAGS := -Wl,-no-whole-archive\n-  CFG_GCCISH_CFLAGS_i386 += -m32\n-  CFG_GCCISH_LINK_FLAGS_i386 += -m32\n-  CFG_GCCISH_CFLAGS_x86_64 += -m64\n-  CFG_GCCISH_LINK_FLAGS_x86_64 += -m64\n-  CFG_UNIXY := 1\n-  CFG_FBSD := 1\n-  CFG_LDENV := LD_LIBRARY_PATH\n-  CFG_DEF_SUFFIX := .bsd.def\n-  CFG_INSTALL_NAME =\n-  CFG_PERF_TOOL := /usr/bin/time\n+ifdef CFG_VALGRIND\n+  CFG_VALGRIND += --error-exitcode=100 \\\n+                  --quiet \\\n+                  --suppressions=$(CFG_SRC_DIR)src/etc/x86.supp \\\n+                  $(OS_SUPP)\n+  ifdef CFG_ENABLE_HELGRIND\n+    CFG_VALGRIND += --tool=helgrind\n+  else\n+    CFG_VALGRIND += --tool=memcheck \\\n+                    --leak-check=full\n+  endif\n endif\n \n ifneq ($(findstring linux,$(CFG_OSTYPE)),)\n-  CFG_LIB_NAME=lib$(1).so\n-  CFG_LIB_GLOB=lib$(1)-*.so\n-  CFG_GCCISH_CFLAGS += -fPIC\n-  CFG_GCCISH_LINK_FLAGS += -shared -fPIC -ldl -lpthread -lrt\n-  CFG_GCCISH_DEF_FLAG := -Wl,--export-dynamic,--dynamic-list=\n-  CFG_GCCISH_PRE_LIB_FLAGS := -Wl,-whole-archive\n   # -znoexecstack is here because librt is for some reason being created\n   # with executable stack and Fedora (or SELinux) doesn't like that (#798)\n-  CFG_GCCISH_POST_LIB_FLAGS := -Wl,-no-whole-archive -Wl,-znoexecstack\n-  CFG_GCCISH_CFLAGS_i386 = -m32\n-  CFG_GCCISH_LINK_FLAGS_i386 = -m32\n-  CFG_GCCISH_CFLAGS_x86_64 = -m64\n-  CFG_GCCISH_LINK_FLAGS_x86_64 = -m64\n-  CFG_UNIXY := 1\n-  CFG_LDENV := LD_LIBRARY_PATH\n-  CFG_DEF_SUFFIX := .linux.def\n   ifdef CFG_PERF\n     ifneq ($(CFG_PERF_WITH_LOGFD),)\n         CFG_PERF_TOOL := $(CFG_PERF) stat -r 3 --log-fd 2\n@@ -84,136 +77,13 @@ ifneq ($(findstring linux,$(CFG_OSTYPE)),)\n       CFG_PERF_TOOL := /usr/bin/time --verbose\n     endif\n   endif\n-  CFG_INSTALL_NAME =\n-  # Linux requires LLVM to be built like this to get backtraces into Rust code\n-  CFG_LLVM_BUILD_ENV=\"CXXFLAGS=-fno-omit-frame-pointer\"\n-endif\n-\n-ifneq ($(findstring darwin,$(CFG_OSTYPE)),)\n-  CFG_LIB_NAME=lib$(1).dylib\n-  CFG_LIB_GLOB=lib$(1)-*.dylib\n-  CFG_UNIXY := 1\n-  CFG_LDENV := DYLD_LIBRARY_PATH\n-  CFG_GCCISH_LINK_FLAGS += -dynamiclib -lpthread -framework CoreServices -Wl,-no_compact_unwind\n-  CFG_GCCISH_DEF_FLAG := -Wl,-exported_symbols_list,\n-  # Darwin has a very blurry notion of \"64 bit\", and claims it's running\n-  # \"on an i386\" when the whole userspace is 64-bit and the compiler\n-  # emits 64-bit binaries by default. So we just force -m32 here. Smarter\n-  # approaches welcome!\n-  #\n-  # NB: Currently GCC's optimizer breaks rustrt (task-comm-1 hangs) on Darwin.\n-  CFG_GCCISH_CFLAGS_i386 := -m32 -arch i386\n-  CFG_GCCISH_CFLAGS_x86_64 := -m64 -arch x86_64\n-  CFG_GCCISH_LINK_FLAGS_i386 := -m32\n-  CFG_GCCISH_LINK_FLAGS_x86_64 := -m64\n-  CFG_DSYMUTIL := dsymutil\n-  CFG_DEF_SUFFIX := .darwin.def\n-  # Mac requires this flag to make rpath work\n-  CFG_INSTALL_NAME = -Wl,-install_name,@rpath/$(1)\n-endif\n-\n-# Hack: not sure how to test if a file exists in make other than this\n-OS_SUPP = $(patsubst %,--suppressions=%,\\\n-      $(wildcard $(CFG_SRC_DIR)src/etc/$(CFG_OSTYPE).supp*))\n-\n-ifneq ($(findstring mingw,$(CFG_OSTYPE)),)\n-  CFG_WINDOWSY := 1\n-endif\n-\n-ifdef CFG_DISABLE_OPTIMIZE_CXX\n-  $(info cfg: disabling C++ optimization (CFG_DISABLE_OPTIMIZE_CXX))\n-  CFG_GCCISH_CFLAGS += -O0\n-else\n-  CFG_GCCISH_CFLAGS += -O2\n-endif\n-\n-CFG_TESTLIB=$(CFG_BUILD_DIR)/$(2)/$(strip \\\n- $(if $(findstring stage0,$(1)), \\\n-       stage0/$(CFG_LIBDIR), \\\n-      $(if $(findstring stage1,$(1)), \\\n-           stage1/$(CFG_LIBDIR), \\\n-          $(if $(findstring stage2,$(1)), \\\n-               stage2/$(CFG_LIBDIR), \\\n-               $(if $(findstring stage3,$(1)), \\\n-                    stage3/$(CFG_LIBDIR), \\\n-               )))))/rustc/$(CFG_HOST_TRIPLE)/$(CFG_LIBDIR)\n-\n-ifdef CFG_UNIXY\n-  CFG_INFO := $(info cfg: unix-y environment)\n-\n-  CFG_PATH_MUNGE := true\n-  CFG_EXE_SUFFIX :=\n-  CFG_LDPATH :=\n-  CFG_RUN=$(2)\n-  CFG_RUN_TARG=$(call CFG_RUN,,$(2))\n-  CFG_RUN_TEST=$(call CFG_RUN,,$(CFG_VALGRIND) $(1))\n-  CFG_LIBUV_LINK_FLAGS=-lpthread\n-  ifdef CFG_FBSD\n-    CFG_LIBUV_LINK_FLAGS=-lpthread -lkvm\n-  endif\n-\n-  ifdef CFG_ENABLE_MINGW_CROSS\n-    CFG_WINDOWSY := 1\n-    CFG_INFO := $(info cfg: mingw-cross)\n-    CFG_GCCISH_CROSS := i586-mingw32msvc-\n-    ifdef CFG_VALGRIND\n-      CFG_VALGRIND += wine\n-    endif\n-\n-    CFG_GCCISH_CFLAGS := -march=i586\n-    CFG_GCCISH_PRE_LIB_FLAGS :=\n-    CFG_GCCISH_POST_LIB_FLAGS :=\n-    CFG_GCCISH_DEF_FLAG :=\n-    CFG_GCCISH_LINK_FLAGS := -shared\n-\n-    ifeq ($(CFG_CPUTYPE), x86_64)\n-      CFG_GCCISH_CFLAGS += -m32\n-      CFG_GCCISH_LINK_FLAGS += -m32\n-    endif\n-  endif\n-  ifdef CFG_VALGRIND\n-    CFG_VALGRIND += --error-exitcode=100 \\\n-                    --quiet \\\n-                    --suppressions=$(CFG_SRC_DIR)src/etc/x86.supp \\\n-                    $(OS_SUPP)\n-    ifdef CFG_ENABLE_HELGRIND\n-      CFG_VALGRIND += --tool=helgrind\n-    else\n-      CFG_VALGRIND += --tool=memcheck \\\n-                      --leak-check=full\n-    endif\n-  endif\n-endif\n-\n-\n-ifdef CFG_WINDOWSY\n-  CFG_INFO := $(info cfg: windows-y environment)\n-\n-  CFG_EXE_SUFFIX := .exe\n-  CFG_LIB_NAME=$(1).dll\n-  CFG_LIB_GLOB=$(1)-*.dll\n-  CFG_DEF_SUFFIX := .def\n-ifdef MSYSTEM\n-  CFG_LDPATH :=$(CFG_LDPATH):$$PATH\n-  CFG_RUN=PATH=\"$(CFG_LDPATH):$(1)\" $(2)\n-else\n-  CFG_LDPATH :=\n-  CFG_RUN=$(2)\n endif\n-  CFG_RUN_TARG=$(call CFG_RUN,$(HLIB$(1)_H_$(CFG_HOST_TRIPLE)),$(2))\n-  CFG_RUN_TEST=$(call CFG_RUN,$(call CFG_TESTLIB,$(1),$(3)),$(1))\n-  CFG_LIBUV_LINK_FLAGS=-lWs2_32 -lpsapi -liphlpapi\n \n-  ifndef CFG_ENABLE_MINGW_CROSS\n-    CFG_PATH_MUNGE := $(strip perl -i.bak -p             \\\n-                             -e 's@\\\\(\\S)@/\\1@go;'       \\\n-                             -e 's@^/([a-zA-Z])/@\\1:/@o;')\n-    CFG_GCCISH_CFLAGS += -march=i686\n-    CFG_GCCISH_LINK_FLAGS += -shared -fPIC\n-  endif\n-  CFG_INSTALL_NAME =\n-endif\n+# These flags will cause the compiler to produce a .d file\n+# next to the .o file that lists header deps.\n+CFG_DEPEND_FLAGS = -MMD -MP -MT $(1) -MF $(1:%.o=%.d)\n \n+AR := ar\n \n CFG_INFO := $(info cfg: using $(CFG_C_COMPILER))\n ifeq ($(CFG_C_COMPILER),clang)\n@@ -224,43 +94,8 @@ ifeq ($(CFG_C_COMPILER),clang)\n     CXX=clang++\n   endif\n   ifeq ($(origin CPP),default)\n-    CPP=clang -E\n+    CPP=clang\n   endif\n-  CFG_GCCISH_CFLAGS += -Wall -Werror -g\n-  CFG_GCCISH_CXXFLAGS += -fno-rtti\n-  CFG_GCCISH_LINK_FLAGS += -g\n-  # These flags will cause the compiler to produce a .d file\n-  # next to the .o file that lists header deps.\n-  CFG_DEPEND_FLAGS = -MMD -MP -MT $(1) -MF $(1:%.o=%.d)\n-\n-  define CFG_MAKE_CC\n-  CFG_COMPILE_C_$(1) = $$(CFG_GCCISH_CROSS)$$(CC)  \\\n-    $$(CFG_GCCISH_CFLAGS) $$(CFG_CLANG_CFLAGS)    \\\n-    $$(CFG_GCCISH_CFLAGS_$$(HOST_$(1)))       \\\n-      $$(CFG_CLANG_CFLAGS_$$(HOST_$(1)))        \\\n-        $$(CFG_DEPEND_FLAGS)                            \\\n-    -c -o $$(1) $$(2)\n-    CFG_LINK_C_$(1) = $$(CFG_GCCISH_CROSS)$$(CC) \\\n-    $$(CFG_GCCISH_LINK_FLAGS) -o $$(1)      \\\n-    $$(CFG_GCCISH_LINK_FLAGS_$$(HOST_$(1)))   \\\n-        $$(CFG_GCCISH_DEF_FLAG)$$(3) $$(2)      \\\n-      $$(call CFG_INSTALL_NAME,$$(4))\n-  CFG_COMPILE_CXX_$(1) = $$(CFG_GCCISH_CROSS)$$(CXX)  \\\n-    $$(CFG_GCCISH_CFLAGS) $$(CFG_CLANG_CFLAGS)    \\\n-    $$(CFG_GCCISH_CXXFLAGS)                       \\\n-    $$(CFG_GCCISH_CFLAGS_$$(HOST_$(1)))       \\\n-      $$(CFG_CLANG_CFLAGS_$$(HOST_$(1)))        \\\n-        $$(CFG_DEPEND_FLAGS)                            \\\n-    -c -o $$(1) $$(2)\n-    CFG_LINK_CXX_$(1) = $$(CFG_GCCISH_CROSS)$$(CXX) \\\n-    $$(CFG_GCCISH_LINK_FLAGS) -o $$(1)      \\\n-    $$(CFG_GCCISH_LINK_FLAGS_$$(HOST_$(1)))   \\\n-        $$(CFG_GCCISH_DEF_FLAG)$$(3) $$(2)      \\\n-      $$(call CFG_INSTALL_NAME,$$(4))\n-  endef\n-\n-  $(foreach target,$(CFG_TARGET_TRIPLES), \\\n-    $(eval $(call CFG_MAKE_CC,$(target))))\n else\n ifeq ($(CFG_C_COMPILER),gcc)\n   ifeq ($(origin CC),default)\n@@ -270,60 +105,262 @@ ifeq ($(CFG_C_COMPILER),gcc)\n     CXX=g++\n   endif\n   ifeq ($(origin CPP),default)\n-    CPP=gcc -E\n+    CPP=gcc\n   endif\n-  CFG_GCCISH_CFLAGS += -Wall -Werror -g\n-  CFG_GCCISH_CXXFLAGS += -fno-rtti\n-  CFG_GCCISH_LINK_FLAGS += -g\n-  # These flags will cause the compiler to produce a .d file\n-  # next to the .o file that lists header deps.\n-  CFG_DEPEND_FLAGS = -MMD -MP -MT $(1) -MF $(1:%.o=%.d)\n-\n-  define CFG_MAKE_CC\n-  CFG_COMPILE_C_$(1) = $$(CFG_GCCISH_CROSS)$$(CC)  \\\n-        $$(CFG_GCCISH_CFLAGS)             \\\n-      $$(CFG_GCCISH_CFLAGS_$$(HOST_$(1)))       \\\n-        $$(CFG_GCC_CFLAGS)                \\\n-        $$(CFG_GCC_CFLAGS_$$(HOST_$(1)))        \\\n-        $$(CFG_DEPEND_FLAGS)                            \\\n-        -c -o $$(1) $$(2)\n-    CFG_LINK_C_$(1) = $$(CFG_GCCISH_CROSS)$$(CC) \\\n-        $$(CFG_GCCISH_LINK_FLAGS) -o $$(1)      \\\n-    $$(CFG_GCCISH_LINK_FLAGS_$$(HOST_$(1)))   \\\n-        $$(CFG_GCCISH_DEF_FLAG)$$(3) $$(2)      \\\n-        $$(call CFG_INSTALL_NAME,$$(4))\n-  CFG_COMPILE_CXX_$(1) = $$(CFG_GCCISH_CROSS)$$(CXX)  \\\n-        $$(CFG_GCCISH_CFLAGS)             \\\n-        $$(CFG_GCCISH_CXXFLAGS)           \\\n-      $$(CFG_GCCISH_CFLAGS_$$(HOST_$(1)))       \\\n-        $$(CFG_GCC_CFLAGS)                \\\n-        $$(CFG_GCC_CFLAGS_$$(HOST_$(1)))        \\\n-        $$(CFG_DEPEND_FLAGS)                            \\\n-        -c -o $$(1) $$(2)\n-    CFG_LINK_CXX_$(1) = $$(CFG_GCCISH_CROSS)$$(CXX) \\\n-        $$(CFG_GCCISH_LINK_FLAGS) -o $$(1)      \\\n-    $$(CFG_GCCISH_LINK_FLAGS_$$(HOST_$(1)))   \\\n-        $$(CFG_GCCISH_DEF_FLAG)$$(3) $$(2)      \\\n-        $$(call CFG_INSTALL_NAME,$$(4))\n-  endef\n-\n-  $(foreach target,$(CFG_TARGET_TRIPLES), \\\n-    $(eval $(call CFG_MAKE_CC,$(target))))\n else\n   CFG_ERR := $(error please try on a system with gcc or clang)\n endif\n endif\n \n-# We're using llvm-mc as our assembler because it supports\n-# .cfi pseudo-ops on mac\n-define CFG_MAKE_ASSEMBLER\n-  CFG_ASSEMBLE_$(1)=$$(CPP) $$(CFG_DEPEND_FLAGS) $$(2) | \\\n-                    $$(LLVM_MC_$$(CFG_HOST_TRIPLE)) \\\n+\n+# x86_64-unknown-linux-gnu configuration\n+CC_x86_64-unknown-linux-gnu=$(CC)\n+CXX_x86_64-unknown-linux-gnu=$(CXX)\n+CPP_x86_64-unknown-linux-gnu=$(CPP)\n+AR_x86_64-unknown-linux-gnu=$(AR)\n+CFG_LIB_NAME_x86_64-unknown-linux-gnu=lib$(1).so\n+CFG_LIB_GLOB_x86_64-unknown-linux-gnu=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_x86_64-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n+CFG_GCCISH_CFLAGS_x86_64-unknown-linux-gnu := -Wall -Werror -g -fPIC -m64\n+CFG_GCCISH_CXXFLAGS_x86_64-unknown-linux-gnu := -fno-rtti\n+CFG_GCCISH_LINK_FLAGS_x86_64-unknown-linux-gnu := -shared -fPIC -ldl -lpthread -lrt -g -m64\n+CFG_GCCISH_DEF_FLAG_x86_64-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n+CFG_GCCISH_PRE_LIB_FLAGS_x86_64-unknown-linux-gnu := -Wl,-whole-archive\n+CFG_GCCISH_POST_LIB_FLAGS_x86_64-unknown-linux-gnu := -Wl,-no-whole-archive -Wl,-znoexecstack\n+CFG_DEF_SUFFIX_x86_64-unknown-linux-gnu := .linux.def\n+CFG_INSTALL_NAME_x86_64-unknown-linux-gnu =\n+CFG_LIBUV_LINK_FLAGS_x86_64-unknown-linux-gnu =\n+CFG_LLVM_BUILD_ENV_x86_64-unknown-linux-gnu=\"CXXFLAGS=-fno-omit-frame-pointer\"\n+CFG_EXE_SUFFIX_x86_64-unknown-linux-gnu =\n+CFG_WINDOWSY_x86_64-unknown-linux-gnu :=\n+CFG_UNIXY_x86_64-unknown-linux-gnu := 1\n+CFG_PATH_MUNGE_x86_64-unknown-linux-gnu := true\n+CFG_LDPATH_x86_64-unknown-linux-gnu :=\n+CFG_RUN_x86_64-unknown-linux-gnu=$(2)\n+CFG_RUN_TARG_x86_64-unknown-linux-gnu=$(call CFG_RUN_x86_64-unknown-linux-gnu,,$(2))\n+\n+# i686-unknown-linux-gnu configuration\n+CC_i686-unknown-linux-gnu=$(CC)\n+CXX_i686-unknown-linux-gnu=$(CXX)\n+CPP_i686-unknown-linux-gnu=$(CPP)\n+AR_i686-unknown-linux-gnu=$(AR)\n+CFG_LIB_NAME_i686-unknown-linux-gnu=lib$(1).so\n+CFG_LIB_GLOB_i686-unknown-linux-gnu=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_i686-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n+CFG_GCCISH_CFLAGS_i686-unknown-linux-gnu := -Wall -Werror -g -fPIC -m32\n+CFG_GCCISH_CXXFLAGS_i686-unknown-linux-gnu := -fno-rtti\n+CFG_GCCISH_LINK_FLAGS_i686-unknown-linux-gnu := -shared -fPIC -ldl -lpthread -lrt -g -m32\n+CFG_GCCISH_DEF_FLAG_i686-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n+CFG_GCCISH_PRE_LIB_FLAGS_i686-unknown-linux-gnu := -Wl,-whole-archive\n+CFG_GCCISH_POST_LIB_FLAGS_i686-unknown-linux-gnu := -Wl,-no-whole-archive -Wl,-znoexecstack\n+CFG_DEF_SUFFIX_i686-unknown-linux-gnu := .linux.def\n+CFG_INSTALL_NAME_i686-unknown-linux-gnu =\n+CFG_LIBUV_LINK_FLAGS_i686-unknown-linux-gnu =\n+CFG_LLVM_BUILD_ENV_i686-unknown-linux-gnu=\"CXXFLAGS=-fno-omit-frame-pointer\"\n+CFG_EXE_SUFFIX_i686-unknown-linux-gnu =\n+CFG_WINDOWSY_i686-unknown-linux-gnu :=\n+CFG_UNIXY_i686-unknown-linux-gnu := 1\n+CFG_PATH_MUNGE_i686-unknown-linux-gnu := true\n+CFG_LDPATH_i686-unknown-linux-gnu :=\n+CFG_RUN_i686-unknown-linux-gnu=$(2)\n+CFG_RUN_TARG_i686-unknown-linux-gnu=$(call CFG_RUN_i686-unknown-linux-gnu,,$(2))\n+\n+# x86_64-apple-darwin configuration\n+CC_x86_64-apple-darwin=$(CC)\n+CXX_x86_64-apple-darwin=$(CXX)\n+CPP_x86_64-apple-darwin=$(CPP)\n+AR_x86_64-apple-darwin=$(AR)\n+CFG_LIB_NAME_x86_64-apple-darwin=lib$(1).dylib\n+CFG_LIB_GLOB_x86_64-apple-darwin=lib$(1)-*.dylib\n+CFG_LIB_DSYM_GLOB_x86_64-apple-darwin=lib$(1)-*.dylib.dSYM\n+CFG_GCCISH_CFLAGS_x86_64-apple-darwin := -Wall -Werror -g -fPIC -m64 -arch x86_64\n+CFG_GCCISH_CXXFLAGS_x86_64-apple-darwin := -fno-rtti\n+CFG_GCCISH_LINK_FLAGS_x86_64-apple-darwin := -dynamiclib -lpthread -framework CoreServices -Wl,-no_compact_unwind -m64\n+CFG_GCCISH_DEF_FLAG_x86_64-apple-darwin := -Wl,-exported_symbols_list,\n+CFG_GCCISH_PRE_LIB_FLAGS_x86_64-apple-darwin :=\n+CFG_GCCISH_POST_LIB_FLAGS_x86_64-apple-darwin :=\n+CFG_DEF_SUFFIX_x86_64-apple-darwin := .darwin.def\n+CFG_INSTALL_NAME_x86_64-apple-darwin = -Wl,-install_name,@rpath/$(1)\n+CFG_LIBUV_LINK_FLAGS_x86_64-apple-darwin =\n+CFG_EXE_SUFFIX_x86_64-apple-darwin :=\n+CFG_WINDOWSY_x86_64-apple-darwin :=\n+CFG_UNIXY_x86_64-apple-darwin := 1\n+CFG_PATH_MUNGE_x86_64-apple-darwin := true\n+CFG_LDPATH_x86_64-apple-darwin :=\n+CFG_RUN_x86_64-apple-darwin=$(2)\n+CFG_RUN_TARG_x86_64-apple-darwin=$(call CFG_RUN_x86_64-apple-darwin,,$(2))\n+\n+# i686-apple-darwin configuration\n+CC_i686-apple-darwin=$(CC)\n+CXX_i686-apple-darwin=$(CXX)\n+CPP_i686-apple-darwin=$(CPP)\n+AR_i686-apple-darwin=$(AR)\n+CFG_LIB_NAME_i686-apple-darwin=lib$(1).dylib\n+CFG_LIB_GLOB_i686-apple-darwin=lib$(1)-*.dylib\n+CFG_LIB_DSYM_GLOB_i686-apple-darwin=lib$(1)-*.dylib.dSYM\n+CFG_GCCISH_CFLAGS_i686-apple-darwin := -Wall -Werror -g -fPIC -m32 -arch i386\n+CFG_GCCISH_CXXFLAGS_i686-apple-darwin := -fno-rtti\n+CFG_GCCISH_LINK_FLAGS_i686-apple-darwin := -dynamiclib -lpthread -framework CoreServices -Wl,-no_compact_unwind -m32\n+CFG_GCCISH_DEF_FLAG_i686-apple-darwin := -Wl,-exported_symbols_list,\n+CFG_GCCISH_PRE_LIB_FLAGS_i686-apple-darwin :=\n+CFG_GCCISH_POST_LIB_FLAGS_i686-apple-darwin :=\n+CFG_DEF_SUFFIX_i686-apple-darwin := .darwin.def\n+CFG_INSTALL_NAME_i686-apple-darwin = -Wl,-install_name,@rpath/$(1)\n+CFG_LIBUV_LINK_FLAGS_i686-apple-darwin =\n+CFG_EXE_SUFFIX_i686-apple-darwin :=\n+CFG_WINDOWSY_i686-apple-darwin :=\n+CFG_UNIXY_i686-apple-darwin := 1\n+CFG_PATH_MUNGE_i686-apple-darwin := true\n+CFG_LDPATH_i686-apple-darwin :=\n+CFG_RUN_i686-apple-darwin=$(2)\n+CFG_RUN_TARG_i686-apple-darwin=$(call CFG_RUN_i686-apple-darwin,,$(2))\n+\n+# arm-unknown-android configuration\n+CC_arm-unknown-android=$(CFG_ANDROID_CROSS_PATH)/bin/arm-linux-androideabi-gcc\n+CXX_arm-unknown-android=$(CFG_ANDROID_CROSS_PATH)/bin/arm-linux-androideabi-g++\n+CPP_arm-unknown-android=$(CFG_ANDROID_CROSS_PATH)/bin/arm-linux-androideabi-gcc -E\n+AR_arm-unknown-android=$(CFG_ANDROID_CROSS_PATH)/bin/arm-linux-androideabi-ar\n+CFG_LIB_NAME_arm-unknown-android=lib$(1).so\n+CFG_LIB_GLOB_arm-unknown-android=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_arm-unknown-android=lib$(1)-*.dylib.dSYM\n+CFG_GCCISH_CFLAGS_arm-unknown-android := -Wall -g -fPIC -D__arm__ -DANDROID -D__ANDROID__\n+CFG_GCCISH_CXXFLAGS_arm-unknown-android := -fno-rtti\n+CFG_GCCISH_LINK_FLAGS_arm-unknown-android := -shared -fPIC -ldl -g -lm -lsupc++ -lgnustl_shared\n+CFG_GCCISH_DEF_FLAG_arm-unknown-android := -Wl,--export-dynamic,--dynamic-list=\n+CFG_GCCISH_PRE_LIB_FLAGS_arm-unknown-android := -Wl,-whole-archive\n+CFG_GCCISH_POST_LIB_FLAGS_arm-unknown-android := -Wl,-no-whole-archive -Wl,-znoexecstack\n+CFG_DEF_SUFFIX_arm-unknown-android := .android.def\n+CFG_INSTALL_NAME_arm-unknown-android =\n+CFG_LIBUV_LINK_FLAGS_arm-unknown-android =\n+CFG_EXE_SUFFIX_arm-unknown-android :=\n+CFG_WINDOWSY_arm-unknown-android :=\n+CFG_UNIXY_arm-unknown-android := 1\n+CFG_PATH_MUNGE_arm-unknown-android := true\n+CFG_LDPATH_arm-unknown-android :=\n+CFG_RUN_arm-unknown-android=\n+CFG_RUN_TARG_arm-unknown-android=\n+RUSTC_FLAGS_arm-unknown-android :=--android-cross-path='$(CFG_ANDROID_CROSS_PATH)'\n+\n+# i686-pc-mingw32 configuration\n+CC_i686-pc-mingw32=$(CC)\n+CXX_i686-pc-mingw32=$(CXX)\n+CPP_i686-pc-mingw32=$(CPP)\n+AR_i686-pc-mingw32=$(AR)\n+CFG_LIB_NAME_i686-pc-mingw32=$(1).dll\n+CFG_LIB_GLOB_i686-pc-mingw32=$(1)-*.dll\n+CFG_LIB_DSYM_GLOB_i686-pc-mingw32=$(1)-*.dylib.dSYM\n+CFG_GCCISH_CFLAGS_i686-pc-mingw32 := -Wall -Werror -g -march=i686\n+CFG_GCCISH_CXXFLAGS_i686-pc-mingw32 := -fno-rtti\n+CFG_GCCISH_LINK_FLAGS_i686-pc-mingw32 := -shared -fPIC -g\n+CFG_GCCISH_DEF_FLAG_i686-pc-mingw32 :=\n+CFG_GCCISH_PRE_LIB_FLAGS_i686-pc-mingw32 := \n+CFG_GCCISH_POST_LIB_FLAGS_i686-pc-mingw32 := \n+CFG_DEF_SUFFIX_i686-pc-mingw32 := .mingw32.def\n+CFG_INSTALL_NAME_i686-pc-mingw32 =\n+CFG_LIBUV_LINK_FLAGS_i686-pc-mingw32 := -lWs2_32 -lpsapi -liphlpapi\n+CFG_EXE_SUFFIX_i686-pc-mingw32 := .exe\n+CFG_WINDOWSY_i686-pc-mingw32 := 1\n+CFG_UNIXY_i686-pc-mingw32 :=\n+CFG_PATH_MUNGE_i686-pc-mingw32 :=\n+CFG_LDPATH_i686-pc-mingw32 :=$(CFG_LDPATH_i686-pc-mingw32):$(PATH)\n+CFG_RUN_i686-pc-mingw32=PATH=\"$(CFG_LDPATH_i686-pc-mingw32):$(1)\" $(2)\n+CFG_RUN_TARG_i686-pc-mingw32=$(call CFG_RUN_i686-pc-mingw32,$(HLIB$(1)_H_$(CFG_BUILD_TRIPLE)),$(2))\n+\n+# i586-mingw32msvc configuration\n+CC_i586-mingw32msvc=$(CC)\n+CXX_i586-mingw32msvc=$(CXX)\n+CPP_i586-mingw32msvc=$(CPP)\n+AR_i586-mingw32msvc=$(AR)\n+CFG_LIB_NAME_i586-mingw32msvc=$(1).dll\n+CFG_LIB_GLOB_i586-mingw32msvc=$(1)-*.dll\n+CFG_LIB_DSYM_GLOB_i586-mingw32msvc=$(1)-*.dylib.dSYM\n+CFG_GCCISH_CFLAGS_i586-mingw32msvc := -Wall -Werror -g -march=586 -m32\n+CFG_GCCISH_CXXFLAGS_i586-mingw32msvc := -fno-rtti\n+CFG_GCCISH_LINK_FLAGS_i586-mingw32msvc := -shared -g -m32\n+CFG_GCCISH_DEF_FLAG_i586-mingw32msvc :=\n+CFG_GCCISH_PRE_LIB_FLAGS_i586-mingw32msvc :=\n+CFG_GCCISH_POST_LIB_FLAGS_i586-mingw32msvc :=\n+CFG_DEF_SUFFIX_i586-mingw32msvc := .mingw32.def\n+CFG_INSTALL_NAME_i586-mingw32msvc =\n+CFG_LIBUV_LINK_FLAGS_i586-mingw32msvc := -lWs2_32 -lpsapi -liphlpapi\n+CFG_EXE_SUFFIX_i586-mingw32msvc := .exe\n+CFG_WINDOWSY_i586-mingw32msvc := 1\n+CFG_UNIXY_i586-mingw32msvc :=\n+CFG_PATH_MUNGE_i586-mingw32msvc := $(strip perl -i.bak -p   \\\n+                             -e 's@\\\\(\\S)@/\\1@go;'       \\\n+                             -e 's@^/([a-zA-Z])/@\\1:/@o;')\n+CFG_LDPATH_i586-mingw32msvc :=\n+CFG_RUN_i586-mingw32msvc=\n+CFG_RUN_TARG_i586-mingw32msvc=\n+\n+# x86_64-unknown-freebsd configuration\n+CC_x86_64-unknown-freebsd=$(CC)\n+CXX_x86_64-unknown-freebsd=$(CXX)\n+CPP_x86_64-unknown-freebsd=$(CPP)\n+AR_x86_64-unknown-freebsd=$(AR)\n+CFG_LIB_NAME_x86_64-unknown-freebsd=lib$(1).so\n+CFG_LIB_GLOB_x86_64-unknown-freebsd=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_x86_64-unknown-freebsd=$(1)-*.dylib.dSYM\n+CFG_GCCISH_CFLAGS_x86_64-unknown-freebsd := -Wall -Werror -g -fPIC -I/usr/local/include\n+CFG_GCCISH_LINK_FLAGS_x86_64-unknown-freebsd := -shared -fPIC -g -lpthread -lrt\n+CFG_GCCISH_DEF_FLAG_x86_64-unknown-freebsd := -Wl,--export-dynamic,--dynamic-list=\n+CFG_GCCISH_PRE_LIB_FLAGS_x86_64-unknown-freebsd := -Wl,-whole-archive\n+CFG_GCCISH_POST_LIB_FLAGS_x86_64-unknown-freebsd := -Wl,-no-whole-archive\n+CFG_DEF_SUFFIX_x86_64-unknown-freebsd := .bsd.def\n+CFG_INSTALL_NAME_x86_64-unknown-freebsd =\n+CFG_LIBUV_LINK_FLAGS_x86_64-unknown-freebsd := -lpthread -lkvm\n+CFG_EXE_SUFFIX_x86_64-unknown-freebsd :=\n+CFG_WINDOWSY_x86_64-unknown-freebsd :=\n+CFG_UNIXY_x86_64-unknown-freebsd := 1\n+CFG_PATH_MUNGE_x86_64-unknown-freebsd :=\n+CFG_LDPATH_x86_64-unknown-freebsd :=\n+CFG_RUN_x86_64-unknown-freebsd=$(2)\n+CFG_RUN_TARG_x86_64-unknown-freebsd=$(call CFG_RUN_x86_64-unknown-freebsd,,$(2))\n+\n+\n+define CFG_MAKE_TOOLCHAIN\n+  CFG_COMPILE_C_$(1) = $$(CC_$(1))  \\\n+        $$(CFG_GCCISH_CFLAGS)      \\\n+        $$(CFG_GCCISH_CFLAGS_$(1)) \\\n+        $$(CFG_DEPEND_FLAGS)       \\\n+        -c -o $$(1) $$(2)\n+  CFG_LINK_C_$(1) = $$(CC_$(1)) \\\n+        $$(CFG_GCCISH_LINK_FLAGS) -o $$(1)          \\\n+        $$(CFG_GCCISH_LINK_FLAGS_$(1)))             \\\n+        $$(CFG_GCCISH_DEF_FLAG_$(1))$$(3) $$(2)     \\\n+        $$(call CFG_INSTALL_NAME_$(1),$$(4))\n+  CFG_COMPILE_CXX_$(1) = $$(CXX_$(1)) \\\n+        $$(CFG_GCCISH_CFLAGS)      \\\n+        $$(CFG_GCCISH_CXXFLAGS)    \\\n+        $$(CFG_GCCISH_CFLAGS_$(1)) \\\n+        $$(CFG_GCCISH_CXXFLAGS_$(1))    \\\n+        $$(CFG_DEPEND_FLAGS)       \\\n+        -c -o $$(1) $$(2)\n+  CFG_LINK_CXX_$(1) = $$(CXX_$(1)) \\\n+        $$(CFG_GCCISH_LINK_FLAGS) -o $$(1)             \\\n+        $$(CFG_GCCISH_LINK_FLAGS_$(1))                 \\\n+        $$(CFG_GCCISH_DEF_FLAG_$(1))$$(3) $$(2)        \\\n+        $$(call CFG_INSTALL_NAME_$(1),$$(4))\n+\n+  ifneq ($(1),arm-unknown-android)\n+\n+  # We're using llvm-mc as our assembler because it supports\n+  # .cfi pseudo-ops on mac\n+  CFG_ASSEMBLE_$(1)=$$(CPP_$(1)) -E $$(CFG_DEPEND_FLAGS) $$(2) | \\\n+                    $$(LLVM_MC_$$(CFG_BUILD_TRIPLE)) \\\n                     -assemble \\\n                     -filetype=obj \\\n                     -triple=$(1) \\\n                     -o=$$(1)\n+  else\n+\n+  # For the Android cross, use the Android assembler\n+  # XXX: We should be able to use the LLVM assembler\n+  CFG_ASSEMBLE_$(1)=$$(CXX_$(1)) $$(CFG_DEPEND_FLAGS) $$(2) -c -o $$(1)\n+\n+  endif\n+\n endef\n \n $(foreach target,$(CFG_TARGET_TRIPLES),\\\n-  $(eval $(call CFG_MAKE_ASSEMBLER,$(target))))\n+  $(eval $(call CFG_MAKE_TOOLCHAIN,$(target))))"}, {"sha": "c7f316bcfc72d0a8eff55cab08b405af7ceeb5bf", "filename": "mk/pp.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Fpp.mk", "raw_url": "https://github.com/rust-lang/rust/raw/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Fpp.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fpp.mk?ref=81e370285f9709d133d114f405bd4f797f7dc3e9", "patch": "@@ -26,10 +26,10 @@ else\n                        \"no-reformat\\|xfail-pretty\\|xfail-test\")\n endif\n \n-reformat: $(SREQ1$(CFG_HOST_TRIPLE))\n+reformat: $(SREQ1$(CFG_BUILD_TRIPLE))\n \t@$(call E, reformat [stage1]: $@)\n \tfor i in $(PP_INPUTS_FILTERED);  \\\n-    do $(call CFG_RUN_TARG,1,$(CFG_HOST_TRIPLE)/stage1/rustc$(X)) \\\n+    do $(call CFG_RUN_TARG_$(CFG_BUILD_TRIPLE),1,$(CFG_BUILD_TRIPLE)/stage1/rustc$(X_$(CFG_BUILD_TRIPLE))) \\\n        --pretty normal $$i >$$i.tmp; \\\n     if [ $$? -ne 0 ]; \\\n         then echo failed to print $$i; rm $$i.tmp; \\"}, {"sha": "d104d608e01497115b161e65b81563781e2c769f", "filename": "mk/rt.mk", "status": "modified", "additions": 35, "deletions": 23, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=81e370285f9709d133d114f405bd4f797f7dc3e9", "patch": "@@ -26,6 +26,7 @@\n # Hack for passing flags into LIBUV, see below.\n LIBUV_FLAGS_i386 = -m32 -fPIC\n LIBUV_FLAGS_x86_64 = -m64 -fPIC\n+LIBUV_FLAGS_arm = -fPIC -DANDROID -std=gnu99\n \n # when we're doing a snapshot build, we intentionally degrade as many\n # features in libuv and the runtime as possible, to ease portability.\n@@ -73,39 +74,33 @@ RUNTIME_CXXS_$(1) := \\\n               rt/memory_region.cpp \\\n               rt/boxed_region.cpp \\\n               rt/arch/$$(HOST_$(1))/context.cpp \\\n-              rt/arch/$$(HOST_$(1))/gpr.cpp\n+              rt/arch/$$(HOST_$(1))/gpr.cpp \\\n+              rt/rust_android_dummy.cpp\n \n RUNTIME_CS_$(1) := rt/linenoise/linenoise.c rt/linenoise/utf8.c\n \n RUNTIME_S_$(1) := rt/arch/$$(HOST_$(1))/_context.S \\\n                   rt/arch/$$(HOST_$(1))/ccall.S \\\n                   rt/arch/$$(HOST_$(1))/record_sp.S\n \n-ifeq ($$(HOST_$(1)), i386)\n-  LIBUV_ARCH_$(1) := ia32\n-else ifeq  ($$(HOST_$(1)), x86_64)\n-  LIBUV_ARCH_$(1) := x86_64\n-else ifeq  ($$(HOST_$(1)), arm)\n-  LIBUV_ARCH_$(1) := arm\n-else ifeq  ($$(HOST_$(1)), mips)\n-  LIBUV_ARCH_$(1) := mips\n-endif\n-\n-ifeq ($$(CFG_WINDOWSY), 1)\n+ifeq ($$(CFG_WINDOWSY_$(1)), 1)\n   LIBUV_OSTYPE_$(1) := win\n   LIBUV_LIB_$(1) := rt/$(1)/libuv/libuv.a\n-else ifeq ($(CFG_OSTYPE), apple-darwin)\n+else ifeq ($(OSTYPE_$(1)), apple-darwin)\n   LIBUV_OSTYPE_$(1) := mac\n   LIBUV_LIB_$(1) := rt/$(1)/libuv/libuv.a\n-else ifeq ($(CFG_OSTYPE), unknown-freebsd)\n+else ifeq ($(OSTYPE_$(1)), unknown-freebsd)\n   LIBUV_OSTYPE_$(1) := unix/freebsd\n   LIBUV_LIB_$(1) := rt/$(1)/libuv/libuv.a\n+else ifeq ($(OSTYPE_$(1)), unknown-android)\n+  LIBUV_OSTYPE_$(1) := unix/android\n+  LIBUV_LIB_$(1) := rt/$(1)/libuv/libuv.a\n else\n   LIBUV_OSTYPE_$(1) := unix/linux\n   LIBUV_LIB_$(1) := rt/$(1)/libuv/libuv.a\n endif\n \n-RUNTIME_DEF_$(1) := rt/rustrt$$(CFG_DEF_SUFFIX)\n+RUNTIME_DEF_$(1) := rt/rustrt$(CFG_DEF_SUFFIX_$(1))\n RUNTIME_INCS_$(1) := -I $$(S)src/rt -I $$(S)src/rt/isaac -I $$(S)src/rt/uthash \\\n                      -I $$(S)src/rt/arch/$$(HOST_$(1)) \\\n                      -I $$(S)src/rt/linenoise \\\n@@ -131,21 +126,21 @@ rt/$(1)/%.o: rt/%.c $$(MKFILE_DEPS)\n                  $$(SNAP_DEFINES)) $$<\n \n rt/$(1)/%.o: rt/%.S  $$(MKFILE_DEPS) \\\n-                     $$(LLVM_CONFIG_$$(CFG_HOST_TRIPLE))\n+                     $$(LLVM_CONFIG_$$(CFG_BUILD_TRIPLE))\n \t@$$(call E, compile: $$@)\n \t$$(Q)$$(call CFG_ASSEMBLE_$(1),$$@,$$<)\n \n rt/$(1)/arch/$$(HOST_$(1))/libmorestack.a: $$(MORESTACK_OBJ_$(1))\n \t@$$(call E, link: $$@)\n \t$$(Q)ar rcs $$@ $$<\n \n-rt/$(1)/$(CFG_RUNTIME): $$(RUNTIME_OBJS_$(1)) $$(MKFILE_DEPS) \\\n+rt/$(1)/$(CFG_RUNTIME_$(1)): $$(RUNTIME_OBJS_$(1)) $$(MKFILE_DEPS) \\\n                         $$(RUNTIME_DEF_$(1)) \\\n                         $$(RUNTIME_LIBS_$(1))\n \t@$$(call E, link: $$@)\n \t$$(Q)$$(call CFG_LINK_CXX_$(1),$$@, $$(RUNTIME_OBJS_$(1)) \\\n-\t  $$(CFG_GCCISH_POST_LIB_FLAGS) $$(RUNTIME_LIBS_$(1)) \\\n-\t  $$(CFG_LIBUV_LINK_FLAGS),$$(RUNTIME_DEF_$(1)),$$(CFG_RUNTIME))\n+\t  $$(CFG_GCCISH_POST_LIB_FLAGS_$(1)) $$(RUNTIME_LIBS_$(1)) \\\n+\t  $$(CFG_LIBUV_LINK_FLAGS_$(1)),$$(RUNTIME_DEF_$(1)),$$(CFG_RUNTIME_$(1)))\n \n # FIXME: For some reason libuv's makefiles can't figure out the\n # correct definition of CC on the mingw I'm using, so we are\n@@ -162,12 +157,25 @@ LIBUV_DEPS := $$(wildcard \\\n               $$(S)src/libuv/*/*/*/*)\n endif\n \n-ifdef CFG_WINDOWSY\n+# XXX: Shouldn't need platform-specific conditions here\n+ifdef CFG_WINDOWSY_$(1)\n $$(LIBUV_LIB_$(1)): $$(LIBUV_DEPS)\n \t$$(Q)$$(MAKE) -C $$(S)src/libuv/ \\\n \t\tbuilddir_name=\"$$(CFG_BUILD_DIR)/rt/$(1)/libuv\" \\\n \t\tOS=mingw \\\n \t\tV=$$(VERBOSE)\n+else ifeq ($(OSTYPE_$(1)), unknown-android)\n+$$(LIBUV_LIB_$(1)): $$(LIBUV_DEPS)\n+\t$$(Q)$$(MAKE) -C $$(S)src/libuv/ \\\n+\t\tCFLAGS=\"$$(LIBUV_FLAGS_$$(HOST_$(1))) $$(SNAP_DEFINES)\" \\\n+\t\tLDFLAGS=\"$$(LIBUV_FLAGS_$$(HOST_$(1)))\" \\\n+\t\tCC=\"$$(CC_$(1))\" \\\n+\t\tCXX=\"$$(CXX_$(1))\" \\\n+\t\tAR=\"$$(AR_$(1))\" \\\n+\t\tBUILDTYPE=Release \\\n+\t\tbuilddir_name=\"$$(CFG_BUILD_DIR)/rt/$(1)/libuv\" \\\n+\t\thost=android OS=linux \\\n+\t\tV=$$(VERBOSE)\n else\n $$(LIBUV_LIB_$(1)): $$(LIBUV_DEPS)\n \t$$(Q)$$(MAKE) -C $$(S)src/libuv/ \\\n@@ -196,13 +204,17 @@ endif\n \t@$$(call E, def: $$@)\n \t$$(Q)sed 's/^./_&/' $$< > $$@\n \n-ifdef CFG_WINDOWSY\n-%.def:\t%.def.in $$(MKFILE_DEPS)\n+%.android.def:  %.def.in $$(MKFILE_DEPS)\n+\t@$$(call E, def: $$@)\n+\t$$(Q)echo \"{\" > $$@\n+\t$$(Q)sed 's/.$$$$/&;/' $$< >> $$@\n+\t$$(Q)echo \"};\" >> $$@\n+\n+%.mingw32.def:\t%.def.in $$(MKFILE_DEPS)\n \t@$$(call E, def: $$@)\n \t$$(Q)echo LIBRARY $$* > $$@\n \t$$(Q)echo EXPORTS >> $$@\n \t$$(Q)sed 's/^./    &/' $$< >> $$@\n-endif\n \n endef\n "}, {"sha": "f1ce4445c61fb6c16fd0c469806c232b727036e7", "filename": "mk/rustllvm.mk", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Frustllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Frustllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frustllvm.mk?ref=81e370285f9709d133d114f405bd4f797f7dc3e9", "patch": "@@ -17,34 +17,34 @@ define DEF_RUSTLLVM_TARGETS\n # FIXME: Lately, on windows, llvm-config --includedir is not enough\n # to find the llvm includes (probably because we're not actually installing\n # llvm, but using it straight out of the build directory)\n-ifdef CFG_WINDOWSY\n+ifdef CFG_WINDOWSY_$(1)\n LLVM_EXTRA_INCDIRS_$(1)= -iquote $(S)src/llvm/include \\\n                          -iquote llvm/$(1)/include\n endif\n \n RUSTLLVM_OBJS_CS_$(1) := $$(addprefix rustllvm/, RustWrapper.cpp)\n \n-RUSTLLVM_DEF_$(1) := rustllvm/rustllvm$$(CFG_DEF_SUFFIX)\n+RUSTLLVM_DEF_$(1) := rustllvm/rustllvm$(CFG_DEF_SUFFIX_$(1))\n \n RUSTLLVM_INCS_$(1) = $$(LLVM_EXTRA_INCDIRS_$(1)) \\\n                      -iquote $$(LLVM_INCDIR_$(1)) \\\n                      -iquote $$(S)src/rustllvm/include\n RUSTLLVM_OBJS_OBJS_$(1) := $$(RUSTLLVM_OBJS_CS_$(1):rustllvm/%.cpp=rustllvm/$(1)/%.o)\n ALL_OBJ_FILES += $$(RUSTLLVM_OBJS_OBJS_$(1))\n \n-rustllvm/$(1)/$(CFG_RUSTLLVM): $$(RUSTLLVM_OBJS_OBJS_$(1)) \\\n+rustllvm/$(1)/$(CFG_RUSTLLVM_$(1)): $$(RUSTLLVM_OBJS_OBJS_$(1)) \\\n                           $$(MKFILE_DEPS) $$(RUSTLLVM_DEF_$(1))\n \t@$$(call E, link: $$@)\n \t$$(Q)$$(call CFG_LINK_CXX_$(1),$$@,$$(RUSTLLVM_OBJS_OBJS_$(1)) \\\n-\t  $$(CFG_GCCISH_PRE_LIB_FLAGS) $$(LLVM_LIBS_$(1)) \\\n-          $$(CFG_GCCISH_POST_LIB_FLAGS) \\\n-          $$(LLVM_LDFLAGS_$(1)),$$(RUSTLLVM_DEF_$(1)),$$(CFG_RUSTLLVM))\n+\t  $$(CFG_GCCISH_PRE_LIB_FLAGS_$(1)) $$(LLVM_LIBS_$(1)) \\\n+          $$(CFG_GCCISH_POST_LIB_FLAGS_$(1)) \\\n+          $$(LLVM_LDFLAGS_$(1)),$$(RUSTLLVM_DEF_$(1)),$$(CFG_RUSTLLVM_$(1)))\n \n rustllvm/$(1)/%.o: rustllvm/%.cpp $$(MKFILE_DEPS) $$(LLVM_CONFIG_$(1))\n \t@$$(call E, compile: $$@)\n \t$$(Q)$$(call CFG_COMPILE_CXX_$(1), $$@, $$(LLVM_CXXFLAGS_$(1)) $$(RUSTLLVM_INCS_$(1))) $$<\n endef\n \n # Instantiate template for all stages\n-$(foreach target,$(CFG_TARGET_TRIPLES), \\\n- $(eval $(call DEF_RUSTLLVM_TARGETS,$(target))))\n+$(foreach host,$(CFG_HOST_TRIPLES), \\\n+ $(eval $(call DEF_RUSTLLVM_TARGETS,$(host))))"}, {"sha": "ee52ed655ef750a33f8c37a4f0ee085d020874e1", "filename": "mk/snap.mk", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Fsnap.mk", "raw_url": "https://github.com/rust-lang/rust/raw/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Fsnap.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fsnap.mk?ref=81e370285f9709d133d114f405bd4f797f7dc3e9", "patch": "@@ -22,12 +22,12 @@ endif\n \n endef\n \n-$(foreach host,$(CFG_TARGET_TRIPLES),\t\t\t\t\t\t\\\n+$(foreach host,$(CFG_HOST_TRIPLES),\t\t\t\t\t\t\\\n  $(eval $(foreach stage,1 2 3,\t\t\t\t\t\t\t\t\\\n   $(eval $(call DEF_SNAP_FOR_STAGE_H,$(stage),$(host))))))\n \n-snap-stage1: snap-stage1-H-$(CFG_HOST_TRIPLE)\n+snap-stage1: snap-stage1-H-$(CFG_BUILD_TRIPLE)\n \n-snap-stage2: snap-stage2-H-$(CFG_HOST_TRIPLE)\n+snap-stage2: snap-stage2-H-$(CFG_BUILD_TRIPLE)\n \n-snap-stage3: snap-stage3-H-$(CFG_HOST_TRIPLE)\n+snap-stage3: snap-stage3-H-$(CFG_BUILD_TRIPLE)"}, {"sha": "7b5cbef1d72c3a6a7b3adce5503b92320015cebf", "filename": "mk/stage0.mk", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Fstage0.mk", "raw_url": "https://github.com/rust-lang/rust/raw/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Fstage0.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage0.mk?ref=81e370285f9709d133d114f405bd4f797f7dc3e9", "patch": "@@ -2,16 +2,16 @@\n \n \n \n-$(HBIN0_H_$(CFG_HOST_TRIPLE))/rustc$(X):\t\t\\\n+$(HBIN0_H_$(CFG_BUILD_TRIPLE))/rustc$(X_$(CFG_BUILD_TRIPLE)):\t\t\\\n \t\t$(S)src/snapshots.txt\t\t\t\t\t\\\n \t\t$(S)src/etc/get-snapshot.py $(MKFILE_DEPS)\n \t@$(call E, fetch: $@)\n #   Note: the variable \"SNAPSHOT_FILE\" is generally not set, and so\n #   we generally only pass one argument to this script.  \n ifdef CFG_ENABLE_LOCAL_RUST\n-\t$(Q)$(S)src/etc/local_stage0.sh $(CFG_HOST_TRIPLE) $(CFG_LOCAL_RUST_ROOT)\n+\t$(Q)$(S)src/etc/local_stage0.sh $(CFG_BUILD_TRIPLE) $(CFG_LOCAL_RUST_ROOT)\n else \n-\t$(Q)$(CFG_PYTHON) $(S)src/etc/get-snapshot.py $(CFG_HOST_TRIPLE) $(SNAPSHOT_FILE)\n+\t$(Q)$(CFG_PYTHON) $(S)src/etc/get-snapshot.py $(CFG_BUILD_TRIPLE) $(SNAPSHOT_FILE)\n ifdef CFG_ENABLE_PAX_FLAGS\n \t@$(call E, apply PaX flags: $@)\n \t@\"$(CFG_PAXCTL)\" -cm \"$@\"\n@@ -21,24 +21,24 @@ endif\n \n # Host libs will be extracted by the above rule\n \n-$(HLIB0_H_$(CFG_HOST_TRIPLE))/$(CFG_RUNTIME): \\\n-\t\t$(HBIN0_H_$(CFG_HOST_TRIPLE))/rustc$(X)\n+$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_RUNTIME_$(CFG_BUILD_TRIPLE)): \\\n+\t\t$(HBIN0_H_$(CFG_BUILD_TRIPLE))/rustc$(X_$(CFG_BUILD_TRIPLE))\n \t$(Q)touch $@\n \n-$(HLIB0_H_$(CFG_HOST_TRIPLE))/$(CFG_CORELIB): \\\n-\t\t$(HBIN0_H_$(CFG_HOST_TRIPLE))/rustc$(X)\n+$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_CORELIB_$(CFG_BUILD_TRIPLE)): \\\n+\t\t$(HBIN0_H_$(CFG_BUILD_TRIPLE))/rustc$(X_$(CFG_BUILD_TRIPLE))\n \t$(Q)touch $@\n \n-$(HLIB0_H_$(CFG_HOST_TRIPLE))/$(CFG_STDLIB): \\\n-\t\t$(HBIN0_H_$(CFG_HOST_TRIPLE))/rustc$(X)\n+$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_STDLIB_$(CFG_BUILD_TRIPLE)): \\\n+\t\t$(HBIN0_H_$(CFG_BUILD_TRIPLE))/rustc$(X_$(CFG_BUILD_TRIPLE))\n \t$(Q)touch $@\n \n-$(HLIB0_H_$(CFG_HOST_TRIPLE))/$(CFG_LIBRUSTC): \\\n-\t\t$(HBIN0_H_$(CFG_HOST_TRIPLE))/rustc$(X)\n+$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_LIBRUSTC_$(CFG_BUILD_TRIPLE)): \\\n+\t\t$(HBIN0_H_$(CFG_BUILD_TRIPLE))/rustc$(X_$(CFG_BUILD_TRIPLE))\n \t$(Q)touch $@\n \n-$(HLIB0_H_$(CFG_HOST_TRIPLE))/$(CFG_RUSTLLVM): \\\n-\t\t$(HBIN0_H_$(CFG_HOST_TRIPLE))/rustc$(X)\n+$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_RUSTLLVM_$(CFG_BUILD_TRIPLE)): \\\n+\t\t$(HBIN0_H_$(CFG_BUILD_TRIPLE))/rustc$(X_$(CFG_BUILD_TRIPLE))\n \t$(Q)touch $@\n \n # For other targets, let the host build the target:\n@@ -48,39 +48,39 @@ define BOOTSTRAP_STAGE0\n   # $(2) stage to bootstrap from\n   # $(3) target to bootstrap from\n \n-$$(HBIN0_H_$(1))/rustc$$(X):\t\t\t\t\t\t\t\t\\\n-\t\t$$(TBIN$(2)_T_$(1)_H_$(3))/rustc$$(X)\n+$$(HBIN0_H_$(1))/rustc$$(X_$(1)):\t\t\t\t\t\t\t\t\\\n+\t\t$$(TBIN$(2)_T_$(1)_H_$(3))/rustc$$(X_$(1))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(HLIB0_H_$(1))/$$(CFG_RUNTIME): \\\n-\t\t$$(TLIB$(2)_T_$(1)_H_$(3))/$$(CFG_RUNTIME)\n+$$(HLIB0_H_$(1))/$(CFG_RUNTIME_$(1)): \\\n+\t\t$$(TLIB$(2)_T_$(1)_H_$(3))/$(CFG_RUNTIME_$(1))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(HLIB0_H_$(1))/$(CFG_CORELIB): \\\n-\t\t$$(TLIB$(2)_T_$(1)_H_$(3))/$$(CFG_CORELIB)\n+$$(HLIB0_H_$(1))/$(CFG_CORELIB_$(1)): \\\n+\t\t$$(TLIB$(2)_T_$(1)_H_$(3))/$(CFG_CORELIB_$(1))\n \t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$(TLIB$(2)_T_$(1)_H_$(3))/$$(CORELIB_GLOB) $$@\n+\t$$(Q)cp $$(TLIB$(2)_T_$(1)_H_$(3))/$(CORELIB_GLOB_$(1)) $$@\n \n-$$(HLIB0_H_$(1))/$(CFG_STDLIB): \\\n-\t\t$$(TLIB$(2)_T_$(1)_H_$(3))/$$(CFG_STDLIB)\n+$$(HLIB0_H_$(1))/$(CFG_STDLIB_$(1)): \\\n+\t\t$$(TLIB$(2)_T_$(1)_H_$(3))/$(CFG_STDLIB_$(1))\n \t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$(TLIB$(2)_T_$(1)_H_$(3))/$$(STDLIB_GLOB) $$@\n+\t$$(Q)cp $$(TLIB$(2)_T_$(1)_H_$(3))/$(STDLIB_GLOB_$(1)) $$@\n \n-$$(HLIB0_H_$(1))/$(CFG_LIBRUSTC): \\\n-\t\t$$(TLIB$(2)_T_$(1)_H_$(3))/$$(CFG_LIBRUSTC)\n+$$(HLIB0_H_$(1))/$(CFG_LIBRUSTC_$(1)): \\\n+\t\t$$(TLIB$(2)_T_$(1)_H_$(3))/$(CFG_LIBRUSTC_$(1))\n \t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$(TLIB$(2)_T_$(1)_H_$(3))/$$(LIBRUSTC_GLOB) $$@\n+\t$$(Q)cp $$(TLIB$(2)_T_$(1)_H_$(3))/$(LIBRUSTC_GLOB_$(1)) $$@\n \n-$$(HLIB0_H_$(1))/$(CFG_RUSTLLVM): \\\n-\t\t$$(TLIB$(2)_T_$(1)_H_$(3))/$$(CFG_RUSTLLVM)\n+$$(HLIB0_H_$(1))/$(CFG_RUSTLLVM_$(1)): \\\n+\t\t$$(TLIB$(2)_T_$(1)_H_$(3))/$(CFG_RUSTLLVM_$(1))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n endef\n \n # Use stage1 to build other architectures: then you don't have to wait\n # for stage2, but you get the latest updates to the compiler source.\n-$(foreach t,$(NON_HOST_TRIPLES),\t\t\t\t\t\t\t\t\\\n- $(eval $(call BOOTSTRAP_STAGE0,$(t),1,$(CFG_HOST_TRIPLE))))\n+$(foreach t,$(NON_BUILD_HOST_TRIPLES),\t\t\t\t\t\t\t\t\\\n+ $(eval $(call BOOTSTRAP_STAGE0,$(t),1,$(CFG_BUILD_TRIPLE))))"}, {"sha": "fba1a6e0ee59109672fc58b5a2043664380533c8", "filename": "mk/target.mk", "status": "modified", "additions": 31, "deletions": 26, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=81e370285f9709d133d114f405bd4f797f7dc3e9", "patch": "@@ -22,58 +22,63 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a: \\\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUSTLLVM): \\\n-\t\trustllvm/$(2)/$$(CFG_RUSTLLVM)\n+$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUNTIME_$(2)): \\\n+\t\trt/$(2)/$(CFG_RUNTIME_$(2))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC):\t\t\\\n-\t\t$$(COMPILER_CRATE) $$(COMPILER_INPUTS)\t\t\\\n-                $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBSYNTAX)\n+$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_CORELIB_$(2)): \\\n+\t\t$$(CORELIB_CRATE) $$(CORELIB_INPUTS) \\\n+\t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< && touch $$@\n \n-$$(TBIN$(1)_T_$(2)_H_$(3))/rustc$$(X):\t\t\t\\\n-\t\t$$(DRIVER_CRATE) \t\t\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC)\n+$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2)): \\\n+\t\t$$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n+\t        $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_CORELIB_$(2)) \\\n+\t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) --cfg rustc -o $$@ $$<\n-ifdef CFG_ENABLE_PAX_FLAGS\n-\t@$$(call E, apply PaX flags: $$@)\n-\t@\"$(CFG_PAXCTL)\" -cm \"$$@\"\n-endif\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< && touch $$@\n \n-$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBSYNTAX): \\\n+$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBSYNTAX_$(3)): \\\n                 $$(LIBSYNTAX_CRATE) $$(LIBSYNTAX_INPUTS) \\\n \t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUSTLLVM)\t\\\n \t\t$$(TCORELIB_DEFAULT$(1)_T_$(2)_H_$(3))      \\\n \t\t$$(TSTDLIB_DEFAULT$(1)_T_$(2)_H_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) $(BORROWCK) -o $$@ $$< && touch $$@\n \n-$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUNTIME): \\\n-\t\trt/$(2)/$$(CFG_RUNTIME)\n+# Only build the compiler for host triples\n+ifneq ($$(findstring $(2),$$(CFG_HOST_TRIPLES)),)\n+\n+$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUSTLLVM_$(3)): \\\n+\t\trustllvm/$(2)/$(CFG_RUSTLLVM_$(3))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_CORELIB): \\\n-\t\t$$(CORELIB_CRATE) $$(CORELIB_INPUTS) \\\n-\t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\n+$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(3)):\t\t\\\n+\t\t$$(COMPILER_CRATE) $$(COMPILER_INPUTS)\t\t\\\n+                $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBSYNTAX_$(3)) \\\n+                $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUSTLLVM_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< && touch $$@\n \n-$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB): \\\n-\t\t$$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n-\t        $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_CORELIB) \\\n-\t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\n+$$(TBIN$(1)_T_$(2)_H_$(3))/rustc$$(X_$(3)):\t\t\t\\\n+\t\t$$(DRIVER_CRATE) \t\t\t\t\t\t\t\\\n+\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(3))\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< && touch $$@\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) --cfg rustc -o $$@ $$<\n+ifdef CFG_ENABLE_PAX_FLAGS\n+\t@$$(call E, apply PaX flags: $$@)\n+\t@\"$(CFG_PAXCTL)\" -cm \"$$@\"\n+endif\n+\n+endif\n \n endef\n \n # In principle, each host can build each target:\n-$(foreach source,$(CFG_TARGET_TRIPLES),\t\t\t\t\\\n+$(foreach source,$(CFG_HOST_TRIPLES),\t\t\t\t\\\n  $(foreach target,$(CFG_TARGET_TRIPLES),\t\t\t\\\n   $(eval $(call TARGET_STAGE_N,0,$(target),$(source)))\t\t\\\n   $(eval $(call TARGET_STAGE_N,1,$(target),$(source)))\t\t\\"}, {"sha": "c1852f52724fa2bdd03f13f9940678aff71510ca", "filename": "mk/tests.mk", "status": "modified", "additions": 95, "deletions": 56, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=81e370285f9709d133d114f405bd4f797f7dc3e9", "patch": "@@ -14,7 +14,9 @@\n ######################################################################\n \n # The names of crates that must be tested\n-TEST_CRATES = core std syntax rustc rustdoc rusti rust rustpkg\n+TEST_TARGET_CRATES = core std\n+TEST_HOST_CRATES = syntax rustc rustdoc rusti rust rustpkg\n+TEST_CRATES = $(TEST_TARGET_CRATES) $(TEST_HOST_CRATES)\n \n # Markdown files under doc/ that should have their code extracted and run\n DOC_TEST_NAMES = tutorial tutorial-ffi tutorial-macros tutorial-borrowed-ptr tutorial-tasks rust\n@@ -48,13 +50,6 @@ ifdef VERBOSE\n   CTEST_TESTARGS += --verbose\n endif\n \n-# Run the compiletest runner itself under valgrind\n-ifdef CTEST_VALGRIND\n-  CFG_RUN_CTEST=$(call CFG_RUN_TEST,$(2),$(3))\n-else\n-  CFG_RUN_CTEST=$(call CFG_RUN,$(TLIB$(1)_T_$(3)_H_$(3)),$(2))\n-endif\n-\n # If we're running perf then set this environment variable\n # to put the benchmarks into 'hard mode'\n ifeq ($(MAKECMDGOALS),perf)\n@@ -65,6 +60,39 @@ endif\n TEST_LOG_FILE=tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).log\n TEST_OK_FILE=tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).ok\n \n+define DEF_TARGET_COMMANDS\n+\n+ifdef CFG_UNIXY_$(1)\n+  CFG_RUN_TEST_$(1)=$$(call CFG_RUN_$(1),,$$(CFG_VALGRIND) $$(1))\n+endif\n+\n+ifdef CFG_WINDOWSY_$(1)\n+  CFG_TESTLIB_$(1)=$$(CFG_BUILD_DIR)/$$(2)/$$(strip \\\n+   $$(if $$(findstring stage0,$$(1)), \\\n+       stage0/$$(CFG_LIBDIR), \\\n+      $$(if $$(findstring stage1,$$(1)), \\\n+           stage1/$$(CFG_LIBDIR), \\\n+          $$(if $$(findstring stage2,$$(1)), \\\n+               stage2/$$(CFG_LIBDIR), \\\n+               $$(if $$(findstring stage3,$$(1)), \\\n+                    stage3/$$(CFG_LIBDIR), \\\n+               )))))/rustc/$$(CFG_BUILD_TRIPLE)/$$(CFG_LIBDIR)\n+  CFG_RUN_TEST_$(1)=$$(call CFG_RUN_$(1),$$(call CFG_TESTLIB_$(1),$$(1),$$(3)),$$(1))\n+endif\n+\n+# Run the compiletest runner itself under valgrind\n+ifdef CTEST_VALGRIND\n+CFG_RUN_CTEST_$(1)=$$(call CFG_RUN_TEST_$$(CFG_BUILD_TRIPLE),$$(2),$$(3))\n+else\n+CFG_RUN_CTEST_$(1)=$$(call CFG_RUN_$$(CFG_BUILD_TRIPLE),$$(TLIB$$(1)_T_$$(3)_H_$$(3)),$$(2))\n+endif\n+\n+endef\n+\n+$(foreach target,$(CFG_TARGET_TRIPLES), \\\n+  $(eval $(call DEF_TARGET_COMMANDS,$(target))))\n+\n+\n ######################################################################\n # Main test targets\n ######################################################################\n@@ -93,7 +121,7 @@ cleantmptestlogs:\n \t$(Q)rm -f tmp/*.log\n \n cleantestlibs:\n-\t$(Q)find $(CFG_HOST_TRIPLE)/test \\\n+\t$(Q)find $(CFG_BUILD_TRIPLE)/test \\\n          -name '*.[odasS]' -o \\\n          -name '*.so' -o      \\\n          -name '*.dylib' -o   \\\n@@ -175,10 +203,22 @@ check-stage$(1)-T-$(2)-H-$(3)-exec:     \t\t\t\t\\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-doc-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-exec\n \n+# Only test the compiler-dependent crates when the target is\n+# able to build a compiler (when the target triple is in the set of host triples)\n+ifneq ($$(findstring $(2),$$(CFG_HOST_TRIPLES)),)\n+\n check-stage$(1)-T-$(2)-H-$(3)-crates-exec: \\\n \t$$(foreach crate,$$(TEST_CRATES), \\\n            check-stage$(1)-T-$(2)-H-$(3)-$$(crate)-exec)\n \n+else\n+\n+check-stage$(1)-T-$(2)-H-$(3)-crates-exec: \\\n+\t$$(foreach crate,$$(TEST_TARGET_CRATES), \\\n+           check-stage$(1)-T-$(2)-H-$(3)-$$(crate)-exec)\n+\n+endif\n+\n check-stage$(1)-T-$(2)-H-$(3)-doc-exec: \\\n         $$(foreach docname,$$(DOC_TEST_NAMES), \\\n            check-stage$(1)-T-$(2)-H-$(3)-doc-$$(docname)-exec)\n@@ -192,7 +232,7 @@ check-stage$(1)-T-$(2)-H-$(3)-pretty-exec: \\\n \n endef\n \n-$(foreach host,$(CFG_TARGET_TRIPLES), \\\n+$(foreach host,$(CFG_HOST_TRIPLES), \\\n  $(foreach target,$(CFG_TARGET_TRIPLES), \\\n   $(foreach stage,$(STAGES), \\\n     $(eval $(call DEF_TEST_SETS,$(stage),$(target),$(host))))))\n@@ -204,58 +244,58 @@ $(foreach host,$(CFG_TARGET_TRIPLES), \\\n \n define TEST_RUNNER\n \n-$(3)/test/coretest.stage$(1)-$(2)$$(X):\t\t\t\\\n+$(3)/test/coretest.stage$(1)-$(2)$$(X_$(2)):\t\t\t\\\n \t\t$$(CORELIB_CRATE) $$(CORELIB_INPUTS)\t\\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB)\n+\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB_$(2))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-$(3)/test/stdtest.stage$(1)-$(2)$$(X):\t\t\t\\\n+$(3)/test/stdtest.stage$(1)-$(2)$$(X_$(2)):\t\t\t\\\n \t\t$$(STDLIB_CRATE) $$(STDLIB_INPUTS)\t\\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB)\n+\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB_$(2))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-$(3)/test/syntaxtest.stage$(1)-$(2)$$(X):\t\t\t\\\n+$(3)/test/syntaxtest.stage$(1)-$(2)$$(X_$(2)):\t\t\t\\\n \t\t$$(LIBSYNTAX_CRATE) $$(LIBSYNTAX_INPUTS)\t\\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB)\n+\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB_$(2))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-$(3)/test/rustctest.stage$(1)-$(2)$$(X):\t\t\t\t\t\\\n+$(3)/test/rustctest.stage$(1)-$(2)$$(X_$(2)):\t\t\t\t\t\\\n \t\t$$(COMPILER_CRATE) $$(COMPILER_INPUTS) \\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUSTLLVM) \\\n-                $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBSYNTAX)\n+\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUSTLLVM_$(2)) \\\n+                $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBSYNTAX_$(2))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-$(3)/test/rustpkgtest.stage$(1)-$(2)$$(X):\t\t\t\t\t\\\n+$(3)/test/rustpkgtest.stage$(1)-$(2)$$(X_$(2)):\t\t\t\t\t\\\n \t\t$$(RUSTPKG_LIB) $$(RUSTPKG_INPUTS)\t\t\\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC)\n+\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC_$(2))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-$(3)/test/rustitest.stage$(1)-$(2)$$(X):\t\t\t\t\t\\\n+$(3)/test/rustitest.stage$(1)-$(2)$$(X_$(2)):\t\t\t\t\t\\\n \t\t$$(RUSTI_LIB) $$(RUSTI_INPUTS)\t\t\\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC)\n+\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC_$(2))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-$(3)/test/rusttest.stage$(1)-$(2)$$(X):\t\t\t\t\t\\\n+$(3)/test/rusttest.stage$(1)-$(2)$$(X_$(2)):\t\t\t\t\t\\\n \t\t$$(RUST_LIB) $$(RUST_INPUTS)\t\t\\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC)\n+\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC_$(2))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n-$(3)/test/rustdoctest.stage$(1)-$(2)$$(X):\t\t\t\t\t\\\n+$(3)/test/rustdoctest.stage$(1)-$(2)$$(X_$(2)):\t\t\t\t\t\\\n \t\t$$(RUSTDOC_LIB) $$(RUSTDOC_INPUTS)\t\t\\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC)\n+\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC_$(2))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n endef\n \n-$(foreach host,$(CFG_TARGET_TRIPLES), \\\n+$(foreach host,$(CFG_HOST_TRIPLES), \\\n  $(eval $(foreach target,$(CFG_TARGET_TRIPLES), \\\n   $(eval $(foreach stage,$(STAGES), \\\n    $(eval $(call TEST_RUNNER,$(stage),$(target),$(host))))))))\n@@ -264,14 +304,14 @@ define DEF_TEST_CRATE_RULES\n check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4))\n \n $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n-\t\t$(3)/test/$(4)test.stage$(1)-$(2)$$(X)\n+\t\t$(3)/test/$(4)test.stage$(1)-$(2)$$(X_$(2))\n \t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_TEST,$$<,$(2),$(3)) $$(TESTARGS)\t\\\n+\t$$(Q)$$(call CFG_RUN_TEST_$(2),$$<,$(2),$(3)) $$(TESTARGS)\t\\\n \t--logfile $$(call TEST_LOG_FILE,$(1),$(2),$(3),$(4)) \\\n \t&& touch $$@\n endef\n \n-$(foreach host,$(CFG_TARGET_TRIPLES), \\\n+$(foreach host,$(CFG_HOST_TRIPLES), \\\n  $(foreach target,$(CFG_TARGET_TRIPLES), \\\n   $(foreach stage,$(STAGES), \\\n    $(foreach crate, $(TEST_CRATES), \\\n@@ -357,15 +397,15 @@ define DEF_CTEST_VARS\n \n # Prerequisites for compiletest tests\n TEST_SREQ$(1)_T_$(2)_H_$(3) = \\\n-\t$$(HBIN$(1)_H_$(3))/compiletest$$(X) \\\n+\t$$(HBIN$(1)_H_$(3))/compiletest$$(X_$(3)) \\\n \t$$(SREQ$(1)_T_$(2)_H_$(3))\n \n # Rules for the cfail/rfail/rpass/bench/perf test runner\n \n CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\t\t\t\\\n \t\t--compile-lib-path $$(HLIB$(1)_H_$(3))\t\t\t\t\\\n         --run-lib-path $$(TLIB$(1)_T_$(2)_H_$(3))\t\t\t\\\n-        --rustc-path $$(HBIN$(1)_H_$(3))/rustc$$(X)\t\t\t\\\n+        --rustc-path $$(HBIN$(1)_H_$(3))/rustc$$(X_$(3))\t\t\t\\\n         --aux-base $$(S)src/test/auxiliary/                 \\\n         --stage-id stage$(1)-$(2)\t\t\t\t\t\t\t\\\n        --rustcflags \"$$(CFG_RUSTC_FLAGS) --target=$(2)\"\t\\\n@@ -381,7 +421,7 @@ CTEST_DEPS_debuginfo_$(1)-T-$(2)-H-$(3) = $$(DEBUGINFO_TESTS)\n \n endef\n \n-$(foreach host,$(CFG_TARGET_TRIPLES), \\\n+$(foreach host,$(CFG_HOST_TRIPLES), \\\n  $(eval $(foreach target,$(CFG_TARGET_TRIPLES), \\\n   $(eval $(foreach stage,$(STAGES), \\\n    $(eval $(call DEF_CTEST_VARS,$(stage),$(target),$(host))))))))\n@@ -403,7 +443,7 @@ $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n \t\t$$(TEST_SREQ$(1)_T_$(2)_H_$(3)) \\\n                 $$(CTEST_DEPS_$(4)_$(1)-T-$(2)-H-$(3))\n \t@$$(call E, run $(4): $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n+\t$$(Q)$$(call CFG_RUN_CTEST_$(2),$(1),$$<,$(3)) \\\n \t\t$$(CTEST_ARGS$(1)-T-$(2)-H-$(3)-$(4)) \\\n \t\t--logfile $$(call TEST_LOG_FILE,$(1),$(2),$(3),$(4)) \\\n                 && touch $$@\n@@ -423,7 +463,7 @@ endef\n \n CTEST_NAMES = rpass rpass-full rfail cfail bench perf debuginfo\n \n-$(foreach host,$(CFG_TARGET_TRIPLES), \\\n+$(foreach host,$(CFG_HOST_TRIPLES), \\\n  $(eval $(foreach target,$(CFG_TARGET_TRIPLES), \\\n   $(eval $(foreach stage,$(STAGES), \\\n    $(eval $(foreach name,$(CTEST_NAMES), \\\n@@ -455,14 +495,14 @@ $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n \t        $$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n \t        $$(PRETTY_DEPS_$(4))\n \t@$$(call E, run pretty-rpass: $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n+\t$$(Q)$$(call CFG_RUN_CTEST_$(2),$(1),$$<,$(3)) \\\n \t\t$$(PRETTY_ARGS$(1)-T-$(2)-H-$(3)-$(4)) \\\n \t\t--logfile $$(call TEST_LOG_FILE,$(1),$(2),$(3),$(4)) \\\n                 && touch $$@\n \n endef\n \n-$(foreach host,$(CFG_TARGET_TRIPLES), \\\n+$(foreach host,$(CFG_HOST_TRIPLES), \\\n  $(foreach target,$(CFG_TARGET_TRIPLES), \\\n   $(foreach stage,$(STAGES), \\\n    $(foreach pretty-name,$(PRETTY_NAMES), \\\n@@ -482,14 +522,14 @@ $$(call TEST_OK_FILE,$(1),$(2),$(3),doc-$(4)): \\\n \t        $$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n                 doc-$(4)-extract$(3)\n \t@$$(call E, run doc-$(4): $$<)\n-\t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<,$(3)) \\\n+\t$$(Q)$$(call CFG_RUN_CTEST_$(2),$(1),$$<,$(3)) \\\n                 $$(DOC_TEST_ARGS$(1)-T-$(2)-H-$(3)-doc-$(4)) \\\n \t\t--logfile $$(call TEST_LOG_FILE,$(1),$(2),$(3),doc-$(4)) \\\n                 && touch $$@\n \n endef\n \n-$(foreach host,$(CFG_TARGET_TRIPLES), \\\n+$(foreach host,$(CFG_HOST_TRIPLES), \\\n  $(foreach target,$(CFG_TARGET_TRIPLES), \\\n   $(foreach stage,$(STAGES), \\\n    $(foreach docname,$(DOC_TEST_NAMES), \\\n@@ -511,7 +551,7 @@ doc-$(2)-extract$(1):\n \n endef\n \n-$(foreach host,$(CFG_TARGET_TRIPLES), \\\n+$(foreach host,$(CFG_HOST_TRIPLES), \\\n  $(foreach docname,$(DOC_TEST_NAMES), \\\n   $(eval $(call DEF_DOC_TEST_HOST,$(host),$(docname)))))\n \n@@ -546,7 +586,7 @@ endef\n \n $(foreach stage,$(STAGES), \\\n  $(foreach target,$(CFG_TARGET_TRIPLES), \\\n-  $(foreach host,$(CFG_TARGET_TRIPLES), \\\n+  $(foreach host,$(CFG_HOST_TRIPLES), \\\n    $(eval $(call DEF_CHECK_FOR_STAGE_AND_TARGET_AND_HOST,$(stage),$(target),$(host))))))\n \n define DEF_CHECK_FOR_STAGE_AND_TARGET_AND_HOST_AND_GROUP\n@@ -555,12 +595,12 @@ endef\n \n $(foreach stage,$(STAGES), \\\n  $(foreach target,$(CFG_TARGET_TRIPLES), \\\n-  $(foreach host,$(CFG_TARGET_TRIPLES), \\\n+  $(foreach host,$(CFG_HOST_TRIPLES), \\\n    $(foreach group,$(TEST_GROUPS), \\\n     $(eval $(call DEF_CHECK_FOR_STAGE_AND_TARGET_AND_HOST_AND_GROUP,$(stage),$(target),$(host),$(group)))))))\n \n define DEF_CHECK_FOR_STAGE\n-check-stage$(1): check-stage$(1)-H-$$(CFG_HOST_TRIPLE)\n+check-stage$(1): check-stage$(1)-H-$$(CFG_BUILD_TRIPLE)\n check-stage$(1)-H-all: $$(foreach target,$$(CFG_TARGET_TRIPLES), \\\n                            check-stage$(1)-H-$$(target))\n endef\n@@ -569,7 +609,7 @@ $(foreach stage,$(STAGES), \\\n  $(eval $(call DEF_CHECK_FOR_STAGE,$(stage))))\n \n define DEF_CHECK_FOR_STAGE_AND_GROUP\n-check-stage$(1)-$(2): check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-$(2)\n+check-stage$(1)-$(2): check-stage$(1)-H-$$(CFG_BUILD_TRIPLE)-$(2)\n check-stage$(1)-H-all-$(2): $$(foreach target,$$(CFG_TARGET_TRIPLES), \\\n                                check-stage$(1)-H-$$(target)-$(2))\n endef\n@@ -585,7 +625,7 @@ check-stage$(1)-H-$(2): $$(foreach target,$$(CFG_TARGET_TRIPLES), \\\n endef\n \n $(foreach stage,$(STAGES), \\\n- $(foreach host,$(CFG_TARGET_TRIPLES), \\\n+ $(foreach host,$(CFG_HOST_TRIPLES), \\\n   $(eval $(call DEF_CHECK_FOR_STAGE_AND_HOSTS,$(stage),$(host)))))\n \n define DEF_CHECK_FOR_STAGE_AND_HOSTS_AND_GROUP\n@@ -594,17 +634,16 @@ check-stage$(1)-H-$(2)-$(3): $$(foreach target,$$(CFG_TARGET_TRIPLES), \\\n endef\n \n $(foreach stage,$(STAGES), \\\n- $(foreach host,$(CFG_TARGET_TRIPLES), \\\n+ $(foreach host,$(CFG_HOST_TRIPLES), \\\n   $(foreach group,$(TEST_GROUPS), \\\n    $(eval $(call DEF_CHECK_FOR_STAGE_AND_HOSTS_AND_GROUP,$(stage),$(host),$(group))))))\n \n-\n ######################################################################\n # check-fast rules\n ######################################################################\n \n FT := run_pass_stage2\n-FT_LIB := $(call CFG_LIB_NAME,$(FT))\n+FT_LIB := $(call CFG_LIB_NAME_$(CFG_BUILD_TRIPLE),$(FT))\n FT_DRIVER := $(FT)_driver\n \n GENERATED += tmp/$(FT).rc tmp/$(FT_DRIVER).rs\n@@ -626,36 +665,36 @@ $$(TLIB2_T_$(2)_H_$(3))/$$(FT_LIB): \\\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE2_T_$(2)_H_$(3)) --lib -o $$@ $$<\n \n-$(3)/test/$$(FT_DRIVER)-$(2)$$(X): \\\n+$(3)/test/$$(FT_DRIVER)-$(2)$$(X_$(2)): \\\n \t\ttmp/$$(FT_DRIVER).rs \\\n \t\t$$(TLIB2_T_$(2)_H_$(3))/$$(FT_LIB) \\\n \t\t$$(SREQ2_T_$(2)_H_$(3))\n \t@$$(call E, compile_and_link: $$@ $$<)\n \t$$(STAGE2_T_$(2)_H_$(3)) -o $$@ $$<\n \n $(3)/test/$$(FT_DRIVER)-$(2).out: \\\n-\t\t$(3)/test/$$(FT_DRIVER)-$(2)$$(X) \\\n+\t\t$(3)/test/$$(FT_DRIVER)-$(2)$$(X_$(2)) \\\n \t\t$$(SREQ2_T_$(2)_H_$(3))\n-\t$$(Q)$$(call CFG_RUN_TEST,$$<,$(2),$(3)) \\\n+\t$$(Q)$$(call CFG_RUN_TEST_$(2),$$<,$(2),$(3)) \\\n \t--logfile tmp/$$(FT_DRIVER)-$(2).log\n \n check-fast-T-$(2)-H-$(3):     \t\t\t\\\n \t$(3)/test/$$(FT_DRIVER)-$(2).out\n \n endef\n \n-$(foreach host,$(CFG_TARGET_TRIPLES), \\\n+$(foreach host,$(CFG_HOST_TRIPLES), \\\n  $(eval $(foreach target,$(CFG_TARGET_TRIPLES), \\\n    $(eval $(call DEF_CHECK_FAST_FOR_T_H,,$(target),$(host))))))\n \n-check-fast: tidy check-fast-H-$(CFG_HOST_TRIPLE)\n+check-fast: tidy check-fast-H-$(CFG_BUILD_TRIPLE)\n \n define DEF_CHECK_FAST_FOR_H\n \n check-fast-H-$(1): \t\tcheck-fast-T-$(1)-H-$(1)\n \n endef\n \n-$(foreach target,$(CFG_TARGET_TRIPLES),\t\t\t\\\n- $(eval $(call DEF_CHECK_FAST_FOR_H,$(target))))\n+$(foreach host,$(CFG_HOST_TRIPLES),\t\t\t\\\n+ $(eval $(call DEF_CHECK_FAST_FOR_H,$(host))))\n "}, {"sha": "f2bc23633aeb51a26152695ba1f704c9d1c319b1", "filename": "mk/tools.mk", "status": "modified", "additions": 80, "deletions": 80, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/81e370285f9709d133d114f405bd4f797f7dc3e9/mk%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftools.mk?ref=81e370285f9709d133d114f405bd4f797f7dc3e9", "patch": "@@ -38,86 +38,86 @@ RUST_INPUTS := $(wildcard $(S)src/librust/*.rs)\n # have tools that need to built for other targets.\n define TOOLS_STAGE_N_TARGET\n \n-$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBFUZZER):          \\\n+$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBFUZZER_$(4)):          \\\n \t\t$$(FUZZER_LIB) $$(FUZZER_INPUTS)\t\t\t\\\n \t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_CORELIB)\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_STDLIB)\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTC)\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_CORELIB_$(4))\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_STDLIB_$(4))\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTC_$(4))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$< && touch $$@\n \n-$$(TBIN$(1)_T_$(4)_H_$(3))/fuzzer$$(X):\t\t\t\t\\\n+$$(TBIN$(1)_T_$(4)_H_$(3))/fuzzer$$(X_$(4)):\t\t\t\t\\\n \t\t$$(DRIVER_CRATE)\t\t\t\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBFUZZER)\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBFUZZER_$(4))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) --cfg fuzzer -o $$@ $$<\n \n-$$(TBIN$(1)_T_$(4)_H_$(3))/compiletest$$(X):\t\t\t\\\n+$$(TBIN$(1)_T_$(4)_H_$(3))/compiletest$$(X_$(4)):\t\t\t\\\n \t\t$$(COMPILETEST_CRATE) $$(COMPILETEST_INPUTS)\t\\\n \t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_CORELIB)      \\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_STDLIB)\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_CORELIB_$(4))      \\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_STDLIB_$(4))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$<\n \n-$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTPKG):\t\t\\\n+$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTPKG_$(4)):\t\t\\\n \t\t$$(RUSTPKG_LIB) $$(RUSTPKG_INPUTS)\t\t    \\\n \t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_CORELIB)\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_STDLIB)\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTC)\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_CORELIB_$(4))\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_STDLIB_$(4))\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTC_$(4))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$< && touch $$@\n \n-$$(TBIN$(1)_T_$(4)_H_$(3))/rustpkg$$(X):\t\t\t\t\\\n+$$(TBIN$(1)_T_$(4)_H_$(3))/rustpkg$$(X_$(4)):\t\t\t\t\\\n \t\t$$(DRIVER_CRATE) \t\t\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTPKG)\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTPKG_$(4))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) --cfg rustpkg -o $$@ $$<\n \n-$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTDOC):\t\t\\\n+$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTDOC_$(4)):\t\t\\\n \t\t$$(RUSTDOC_LIB) $$(RUSTDOC_INPUTS)\t\t\t\\\n \t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_CORELIB)\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_STDLIB)\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTC)\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_CORELIB_$(4))\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_STDLIB_$(4))\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTC_$(4))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$< && touch $$@\n \n-$$(TBIN$(1)_T_$(4)_H_$(3))/rustdoc$$(X):\t\t\t\\\n+$$(TBIN$(1)_T_$(4)_H_$(3))/rustdoc$$(X_$(4)):\t\t\t\\\n \t\t$$(DRIVER_CRATE) \t\t\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTDOC)\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTDOC_$(4))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) --cfg rustdoc -o $$@ $$<\n \n-$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTI):\t\t\\\n+$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTI_$(4)):\t\t\\\n \t\t$$(RUSTI_LIB) $$(RUSTI_INPUTS)\t\t\t\\\n \t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_CORELIB)\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_STDLIB)\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTC)\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_CORELIB_$(4))\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_STDLIB_$(4))\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTC_$(4))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$< && touch $$@\n \n-$$(TBIN$(1)_T_$(4)_H_$(3))/rusti$$(X):\t\t\t\\\n+$$(TBIN$(1)_T_$(4)_H_$(3))/rusti$$(X_$(4)):\t\t\t\\\n \t\t$$(DRIVER_CRATE) \t\t\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTI)\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(4))/$(CFG_LIBRUSTI_$(4))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) --cfg rusti -o $$@ $$<\n \n-$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUST):\t\t\\\n+$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUST_$(4)):\t\t\\\n \t\t$$(RUST_LIB) $$(RUST_INPUTS)\t\t\t\\\n \t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_CORELIB)\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_STDLIB)\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTC)\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_CORELIB_$(4))\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_STDLIB_$(4))\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTC_$(4))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$< && touch $$@\n \n-$$(TBIN$(1)_T_$(4)_H_$(3))/rust$$(X):\t\t\t\\\n+$$(TBIN$(1)_T_$(4)_H_$(3))/rust$$(X_$(4)):\t\t\t\\\n \t\t$$(DRIVER_CRATE) \t\t\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUST)\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUST_$(4))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) --cfg rust -o $$@ $$<\n \n@@ -129,107 +129,107 @@ define TOOLS_STAGE_N_HOST\n # Promote the stageN target to stageN+1 host\n # FIXME: Shouldn't need to depend on host/librustc.so once\n # rpath is working\n-$$(HLIB$(2)_H_$(4))/$$(CFG_LIBFUZZER):\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBFUZZER)\t\\\n-\t\t$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTC)\t\t\t\\\n+$$(HLIB$(2)_H_$(4))/$(CFG_LIBFUZZER_$(4)):\t\t\t\t\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBFUZZER_$(4))\t\\\n+\t\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTC_$(4))\t\t\t\\\n \t\t$$(HSREQ$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBFUZZER_GLOB) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBFUZZER_DSYM_GLOB)) \\\n+\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBFUZZER_GLOB_$(4)) \\\n+\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBFUZZER_DSYM_GLOB_$(4))) \\\n \t        $$(HLIB$(2)_H_$(4))\n \n-$$(HBIN$(2)_H_$(4))/fuzzer$$(X):\t\t\t\t\\\n-\t\t$$(TBIN$(1)_T_$(4)_H_$(3))/fuzzer$$(X)\t\\\n-\t\t$$(HLIB$(2)_H_$(4))/$$(CFG_LIBFUZZER)\t\\\n+$$(HBIN$(2)_H_$(4))/fuzzer$$(X_$(4)):\t\t\t\t\\\n+\t\t$$(TBIN$(1)_T_$(4)_H_$(3))/fuzzer$$(X_$(4))\t\\\n+\t\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBFUZZER_$(4))\t\\\n \t\t$$(HSREQ$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(HBIN$(2)_H_$(4))/compiletest$$(X):\t\t\t\t\\\n-\t\t$$(TBIN$(1)_T_$(4)_H_$(3))/compiletest$$(X)\t\\\n+$$(HBIN$(2)_H_$(4))/compiletest$$(X_$(4)):\t\t\t\t\\\n+\t\t$$(TBIN$(1)_T_$(4)_H_$(3))/compiletest$$(X_$(4))\t\\\n \t\t$$(HSREQ$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n \n-$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTPKG):\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTPKG)\t\\\n-\t\t$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTC)\t\t\\\n+$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTPKG_$(4)):\t\t\t\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTPKG_$(4))\t\\\n+\t\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTC_$(4))\t\t\\\n \t\t$$(HSREQ$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTPKG_GLOB) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTPKG_DSYM_GLOB)) \\\n+\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTPKG_GLOB_$(4)) \\\n+\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTPKG_DSYM_GLOB_$(4))) \\\n \t        $$(HLIB$(2)_H_$(4))\n \n-$$(HBIN$(2)_H_$(4))/rustpkg$$(X):\t\t\t\t\\\n-\t\t$$(TBIN$(1)_T_$(4)_H_$(3))/rustpkg$$(X)\t\\\n-\t\t$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTPKG)\t\\\n+$$(HBIN$(2)_H_$(4))/rustpkg$$(X_$(4)):\t\t\t\t\\\n+\t\t$$(TBIN$(1)_T_$(4)_H_$(3))/rustpkg$$(X_$(4))\t\\\n+\t\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTPKG_$(4))\t\\\n \t\t$$(HSREQ$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTDOC):\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTDOC)\t\\\n-\t\t$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTC)\t\t\t\\\n+$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTDOC_$(4)):\t\t\t\t\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTDOC_$(4))\t\\\n+\t\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTC_$(4))\t\t\t\\\n \t\t$$(HSREQ$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTDOC_GLOB) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTDOC_DSYM_GLOB)) \\\n+\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTDOC_GLOB_$(4)) \\\n+\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTDOC_DSYM_GLOB_$(4))) \\\n \t        $$(HLIB$(2)_H_$(4))\n \n-$$(HBIN$(2)_H_$(4))/rustdoc$$(X):\t\t\t\t\\\n-\t\t$$(TBIN$(1)_T_$(4)_H_$(3))/rustdoc$$(X)\t\\\n-\t\t$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTDOC)\t\\\n+$$(HBIN$(2)_H_$(4))/rustdoc$$(X_$(4)):\t\t\t\t\\\n+\t\t$$(TBIN$(1)_T_$(4)_H_$(3))/rustdoc$$(X_$(4))\t\\\n+\t\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTDOC_$(4))\t\\\n \t\t$$(HSREQ$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTI):\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTI)\t\\\n-\t\t$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTC)\t\t\t\\\n+$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTI_$(4)):\t\t\t\t\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTI_$(4))\t\\\n+\t\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTC_$(4))\t\t\t\\\n \t\t$$(HSREQ$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTI_GLOB) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTI_DSYM_GLOB)) \\\n+\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTI_GLOB_$(4)) \\\n+\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUSTI_DSYM_GLOB_$(4))) \\\n \t        $$(HLIB$(2)_H_$(4))\n \n-$$(HBIN$(2)_H_$(4))/rusti$$(X):\t\t\t\t\\\n-\t\t$$(TBIN$(1)_T_$(4)_H_$(3))/rusti$$(X)\t\\\n-\t\t$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTI)\t\\\n+$$(HBIN$(2)_H_$(4))/rusti$$(X_$(4)):\t\t\t\t\\\n+\t\t$$(TBIN$(1)_T_$(4)_H_$(3))/rusti$$(X_$(4))\t\\\n+\t\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTI_$(4))\t\\\n \t\t$$(HSREQ$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUST):\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUST)\t\\\n-\t\t$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTC)\t\t\t\\\n+$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUST_$(4)):\t\t\t\t\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUST_$(4))\t\\\n+\t\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUSTC_$(4))\t\t\t\\\n \t\t$$(HSREQ$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUST_GLOB) \\\n-\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUST_DSYM_GLOB)) \\\n+\t$$(Q)cp -R $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUST_GLOB_$(4)) \\\n+\t\t$$(wildcard $$(TLIB$(1)_T_$(4)_H_$(3))/$(LIBRUST_DSYM_GLOB)_$(4)) \\\n \t        $$(HLIB$(2)_H_$(4))\n \n-$$(HBIN$(2)_H_$(4))/rust$$(X):\t\t\t\t\\\n-\t\t$$(TBIN$(1)_T_$(4)_H_$(3))/rust$$(X)\t\\\n-\t\t$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUST)\t\\\n+$$(HBIN$(2)_H_$(4))/rust$$(X_$(4)):\t\t\t\t\\\n+\t\t$$(TBIN$(1)_T_$(4)_H_$(3))/rust$$(X_$(4))\t\\\n+\t\t$$(HLIB$(2)_H_$(4))/$(CFG_LIBRUST_$(4))\t\\\n \t\t$$(HSREQ$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n endef\n \n-$(foreach host,$(CFG_TARGET_TRIPLES),\t\t\t\t\\\n+$(foreach host,$(CFG_HOST_TRIPLES),\t\t\t\t\\\n $(foreach target,$(CFG_TARGET_TRIPLES),\t\t\t\t\\\n- $(eval $(call TOOLS_STAGE_N_TARGET,0,1,$(target),$(host)))\t\\\n- $(eval $(call TOOLS_STAGE_N_TARGET,1,2,$(target),$(host)))\t\\\n- $(eval $(call TOOLS_STAGE_N_TARGET,2,3,$(target),$(host)))))\n+ $(eval $(call TOOLS_STAGE_N_TARGET,0,1,$(host),$(target)))\t\\\n+ $(eval $(call TOOLS_STAGE_N_TARGET,1,2,$(host),$(target)))\t\\\n+ $(eval $(call TOOLS_STAGE_N_TARGET,2,3,$(host),$(target)))))\n \n-$(foreach host,$(CFG_TARGET_TRIPLES),\t\t\t\t\\\n+$(foreach host,$(CFG_HOST_TRIPLES),\t\t\t\t\\\n  $(eval $(call TOOLS_STAGE_N_HOST,0,1,$(host),$(host)))\t\\\n  $(eval $(call TOOLS_STAGE_N_HOST,1,2,$(host),$(host)))\t\\\n  $(eval $(call TOOLS_STAGE_N_HOST,2,3,$(host),$(host))))"}, {"sha": "7cde76522c71ea1d6325e7fe05bd9411c0ebfd28", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/81e370285f9709d133d114f405bd4f797f7dc3e9/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e370285f9709d133d114f405bd4f797f7dc3e9/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=81e370285f9709d133d114f405bd4f797f7dc3e9", "patch": "@@ -767,11 +767,18 @@ pub fn link_binary(sess: Session,\n     // instead of hard-coded gcc.\n     // For win32, there is no cc command,\n     // so we add a condition to make it use gcc.\n-    let cc_prog: ~str =\n-        if sess.targ_cfg.os == session::os_android {\n-            ~\"arm-linux-androideabi-g++\"\n-        } else if sess.targ_cfg.os == session::os_win32 { ~\"gcc\" }\n-        else { ~\"cc\" };\n+    let cc_prog: ~str = if sess.targ_cfg.os == session::os_android {\n+        match &sess.opts.android_cross_path {\n+            &Some(copy path) => {\n+                fmt!(\"%s/bin/arm-linux-androideabi-gcc\", path)\n+            }\n+            &None => {\n+                sess.fatal(~\"need Android NDK path for linking \\\n+                             (--android-cross-path)\")\n+            }\n+        }\n+    } else if sess.targ_cfg.os == session::os_win32 { ~\"gcc\" }\n+    else { ~\"cc\" };\n     // The invocations of cc share some flags across platforms\n \n     let mut cc_args =\n@@ -866,9 +873,7 @@ pub fn link_binary(sess: Session,\n     }\n \n     // Stack growth requires statically linking a __morestack function\n-    if sess.targ_cfg.os != session::os_android {\n     cc_args.push(~\"-lmorestack\");\n-    }\n \n     // Always want the runtime linked in\n     cc_args.push(~\"-lrustrt\");"}, {"sha": "b655744e17cf4d6ee74eb0f7fc201b9776331be6", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/81e370285f9709d133d114f405bd4f797f7dc3e9/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e370285f9709d133d114f405bd4f797f7dc3e9/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=81e370285f9709d133d114f405bd4f797f7dc3e9", "patch": "@@ -516,11 +516,11 @@ pub fn host_triple() -> ~str {\n     // FIXME (#2400): Instead of grabbing the host triple we really should\n     // be grabbing (at compile time) the target triple that this rustc is\n     // built with and calling that (at runtime) the host triple.\n-    let ht = env!(\"CFG_HOST_TRIPLE\");\n+    let ht = env!(\"CFG_BUILD_TRIPLE\");\n     return if ht != ~\"\" {\n             ht\n         } else {\n-            fail!(~\"rustc built without CFG_HOST_TRIPLE\")\n+            fail!(~\"rustc built without CFG_BUILD_TRIPLE\")\n         };\n }\n \n@@ -641,6 +641,8 @@ pub fn build_session_options(+binary: ~str,\n         .map(|s| Path(*s));\n     let cfg = parse_cfgspecs(getopts::opt_strs(matches, ~\"cfg\"));\n     let test = opt_present(matches, ~\"test\");\n+    let android_cross_path = getopts::opt_maybe_str(\n+        matches, ~\"android-cross-path\");\n     let sopts = @session::options {\n         crate_type: crate_type,\n         is_static: static,\n@@ -660,7 +662,8 @@ pub fn build_session_options(+binary: ~str,\n         test: test,\n         parse_only: parse_only,\n         no_trans: no_trans,\n-        debugging_opts: debugging_opts\n+        debugging_opts: debugging_opts,\n+        android_cross_path: android_cross_path\n     };\n     return sopts;\n }\n@@ -764,6 +767,8 @@ pub fn optgroups() -> ~[getopts::groups::OptGroup] {\n                           to compile for (see\n          http://sources.redhat.com/autobook/autobook/autobook_17.html\n                           for detail)\", ~\"TRIPLE\"),\n+  optopt(~\"\", ~\"android-cross-path\",\n+         ~\"The path to the Android NDK\", \"PATH\"),\n   optmulti(~\"W\", ~\"warn\",\n                         ~\"Set lint warnings\", ~\"OPT\"),\n   optmulti(~\"A\", ~\"allow\","}, {"sha": "61b42a7beccade7329eb4a6831495606b8d912b3", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81e370285f9709d133d114f405bd4f797f7dc3e9/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e370285f9709d133d114f405bd4f797f7dc3e9/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=81e370285f9709d133d114f405bd4f797f7dc3e9", "patch": "@@ -138,6 +138,7 @@ pub struct options {\n     parse_only: bool,\n     no_trans: bool,\n     debugging_opts: uint,\n+    android_cross_path: Option<~str>\n }\n \n pub struct crate_metadata {\n@@ -297,7 +298,8 @@ pub fn basic_options() -> @options {\n         test: false,\n         parse_only: false,\n         no_trans: false,\n-        debugging_opts: 0u\n+        debugging_opts: 0u,\n+        android_cross_path: None\n     }\n }\n "}, {"sha": "576ab1db8ea03889eb7b2274654afe7c5c867230", "filename": "src/libuv", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuv?ref=81e370285f9709d133d114f405bd4f797f7dc3e9", "patch": "@@ -1 +1 @@\n-Subproject commit da33bba7c04e0873b457a9a4290bed2adf620154\n+Subproject commit 576ab1db8ea03889eb7b2274654afe7c5c867230"}, {"sha": "bc1c0c23025337dcb0cac3409c4e82844dbe5037", "filename": "src/rt/arch/arm/morestack.S", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81e370285f9709d133d114f405bd4f797f7dc3e9/src%2Frt%2Farch%2Farm%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/81e370285f9709d133d114f405bd4f797f7dc3e9/src%2Frt%2Farch%2Farm%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Farm%2Fmorestack.S?ref=81e370285f9709d133d114f405bd4f797f7dc3e9", "patch": "@@ -0,0 +1,8 @@\n+.text\n+.code 32\n+.arm\n+.align\n+\n+.globl __morestack\n+.hidden __morestack\n+__morestack:"}, {"sha": "3c7034a2f9561576e6b7bd67b244d8cdd1b41aa6", "filename": "src/rt/rust_android_dummy.cpp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81e370285f9709d133d114f405bd4f797f7dc3e9/src%2Frt%2Frust_android_dummy.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/81e370285f9709d133d114f405bd4f797f7dc3e9/src%2Frt%2Frust_android_dummy.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_android_dummy.cpp?ref=81e370285f9709d133d114f405bd4f797f7dc3e9", "patch": "@@ -4,6 +4,7 @@\n \n #include \"rust_android_dummy.h\"\n #include <math.h>\n+#include <errno.h>\n \n #ifdef __ANDROID__\n \n@@ -13,6 +14,9 @@ char **backtrace_symbols(void *const *array, int size) { return 0; }\n \n void backtrace_symbols_fd (void *const *array, int size, int fd) {}\n \n+extern \"C\" volatile int* __errno_location() {\n+    return &errno;\n+}\n \n extern \"C\" float log2f(float f)\n {"}, {"sha": "a57840ffe09556ef138f009c1ae0d0a2d85c7151", "filename": "src/rt/rust_crate_map.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81e370285f9709d133d114f405bd4f797f7dc3e9/src%2Frt%2Frust_crate_map.h", "raw_url": "https://github.com/rust-lang/rust/raw/81e370285f9709d133d114f405bd4f797f7dc3e9/src%2Frt%2Frust_crate_map.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_crate_map.h?ref=81e370285f9709d133d114f405bd4f797f7dc3e9", "patch": "@@ -49,6 +49,7 @@ class cratemap {\n         case 0: return NULL;\n         case 1: return m_annihilate_fn;\n         default: assert(false && \"Unknown crate map version!\");\n+            return NULL; // Appease -Werror=return-type\n         }\n     }\n \n@@ -57,6 +58,7 @@ class cratemap {\n         case 0: return reinterpret_cast<const cratemap_v0 *>(this)->m_entries;\n         case 1: return m_entries;\n         default: assert(false && \"Unknown crate map version!\");\n+            return NULL; // Appease -Werror=return-type\n         }\n     }\n \n@@ -68,6 +70,7 @@ class cratemap {\n         case 1:\n             return &m_children[1];\n         default: assert(false && \"Unknown crate map version!\");\n+            return NULL; // Appease -Werror=return-type\n         }\n     }\n "}, {"sha": "2b86db6defe09f8345919b9c653585b876faedb5", "filename": "src/rt/rust_log.cpp", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81e370285f9709d133d114f405bd4f797f7dc3e9/src%2Frt%2Frust_log.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/81e370285f9709d133d114f405bd4f797f7dc3e9/src%2Frt%2Frust_log.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_log.cpp?ref=81e370285f9709d133d114f405bd4f797f7dc3e9", "patch": "@@ -314,9 +314,11 @@ void update_log_settings(void* crate_map, char* settings) {\n                      n_dirs, &n_matches);\n \n     if (n_matches < n_dirs) {\n-        printf(\"warning: got %\" PRIdPTR \" RUST_LOG specs, \"\n+        // NOTE: Android compiler is complaining about format specifiers here\n+        // and I don't understand why\n+        /*printf(\"warning: got %\" PRIdPTR \" RUST_LOG specs, \"\n                \"enabled %\" PRIdPTR \" flags.\",\n-               (uintptr_t)n_dirs, (uintptr_t)n_matches);\n+               (uintptr_t)n_dirs, (uintptr_t)n_matches);*/\n     }\n \n     free(buffer);"}]}