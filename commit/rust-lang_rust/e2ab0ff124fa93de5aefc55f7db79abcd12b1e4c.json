{"sha": "e2ab0ff124fa93de5aefc55f7db79abcd12b1e4c", "node_id": "C_kwDOAAsO6NoAKGUyYWIwZmYxMjRmYTkzZGU1YWVmYzU1ZjdkYjc5YWJjZDEyYjFlNGM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-15T10:28:37Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-15T10:28:37Z"}, "message": "Aggregate errors and warnings in the status message", "tree": {"sha": "8f8254979f928a39a81b8767989fe89e52dc51ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f8254979f928a39a81b8767989fe89e52dc51ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2ab0ff124fa93de5aefc55f7db79abcd12b1e4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2ab0ff124fa93de5aefc55f7db79abcd12b1e4c", "html_url": "https://github.com/rust-lang/rust/commit/e2ab0ff124fa93de5aefc55f7db79abcd12b1e4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2ab0ff124fa93de5aefc55f7db79abcd12b1e4c/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b8cd048258fd87ec08b6d287185a93f9ddbcc11", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b8cd048258fd87ec08b6d287185a93f9ddbcc11", "html_url": "https://github.com/rust-lang/rust/commit/8b8cd048258fd87ec08b6d287185a93f9ddbcc11"}], "stats": {"total": 82, "additions": 62, "deletions": 20}, "files": [{"sha": "12e5caf2cc9e43f0b0830cfaae8d3b28401dcd4a", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e2ab0ff124fa93de5aefc55f7db79abcd12b1e4c/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ab0ff124fa93de5aefc55f7db79abcd12b1e4c/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=e2ab0ff124fa93de5aefc55f7db79abcd12b1e4c", "patch": "@@ -36,11 +36,41 @@ impl Progress {\n }\n \n impl GlobalState {\n-    pub(crate) fn show_message(&mut self, typ: lsp_types::MessageType, message: String) {\n-        let message = message;\n-        self.send_notification::<lsp_types::notification::ShowMessage>(\n-            lsp_types::ShowMessageParams { typ, message },\n-        )\n+    pub(crate) fn show_message(\n+        &mut self,\n+        typ: lsp_types::MessageType,\n+        message: String,\n+        show_open_log_button: bool,\n+    ) {\n+        match self.config.open_server_logs() && show_open_log_button  {\n+            true => self.send_request::<lsp_types::request::ShowMessageRequest>(\n+                lsp_types::ShowMessageRequestParams {\n+                    typ,\n+                    message,\n+                    actions: Some(vec![lsp_types::MessageActionItem {\n+                        title: \"Open server logs\".to_owned(),\n+                        properties: Default::default(),\n+                    }]),\n+                },\n+                |this, resp| {\n+                    let lsp_server::Response { error: None, result: Some(result), .. } = resp\n+                    else { return };\n+                    if let Ok(Some(_item)) = crate::from_json::<\n+                        <lsp_types::request::ShowMessageRequest as lsp_types::request::Request>::Result,\n+                    >(\n+                        lsp_types::request::ShowMessageRequest::METHOD, &result\n+                    ) {\n+                        this.send_notification::<lsp_ext::OpenServerLogs>(());\n+                    }\n+                },\n+            ),\n+            false => self.send_notification::<lsp_types::notification::ShowMessage>(\n+                lsp_types::ShowMessageParams {\n+                    typ,\n+                    message,\n+                },\n+            ),\n+        }\n     }\n \n     /// Sends a notification to the client containing the error `message`."}, {"sha": "2752e710342e232edb605b069994f04e95ba8dcc", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e2ab0ff124fa93de5aefc55f7db79abcd12b1e4c/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ab0ff124fa93de5aefc55f7db79abcd12b1e4c/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=e2ab0ff124fa93de5aefc55f7db79abcd12b1e4c", "patch": "@@ -406,9 +406,19 @@ impl GlobalState {\n \n             if self.config.server_status_notification() {\n                 self.send_notification::<lsp_ext::ServerStatusNotification>(status);\n-            } else if let (lsp_ext::Health::Error, Some(message)) = (status.health, &status.message)\n-            {\n-                self.show_and_log_error(message.clone(), None);\n+            } else if let (health, Some(message)) = (status.health, &status.message) {\n+                let open_log_button = tracing::enabled!(tracing::Level::ERROR)\n+                    && (self.fetch_build_data_error().is_err()\n+                        || self.fetch_workspace_error().is_err());\n+                self.show_message(\n+                    match health {\n+                        lsp_ext::Health::Ok => lsp_types::MessageType::INFO,\n+                        lsp_ext::Health::Warning => lsp_types::MessageType::WARNING,\n+                        lsp_ext::Health::Error => lsp_types::MessageType::ERROR,\n+                    },\n+                    message.clone(),\n+                    open_log_button,\n+                );\n             }\n         }\n     }\n@@ -919,6 +929,7 @@ impl GlobalState {\n                                         this.show_message(\n                                             lsp_types::MessageType::WARNING,\n                                             error.to_string(),\n+                                            false,\n                                         );\n                                     }\n                                     this.update_configuration(config);"}, {"sha": "ffbea4de16f2b34c7a5dd3abbc7e1baf7d4bd2af", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e2ab0ff124fa93de5aefc55f7db79abcd12b1e4c/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ab0ff124fa93de5aefc55f7db79abcd12b1e4c/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=e2ab0ff124fa93de5aefc55f7db79abcd12b1e4c", "patch": "@@ -90,38 +90,39 @@ impl GlobalState {\n             quiescent: self.is_quiescent(),\n             message: None,\n         };\n+        let mut message = String::new();\n \n         if self.proc_macro_changed {\n             status.health = lsp_ext::Health::Warning;\n-            status.message =\n-                Some(\"Reload required due to source changes of a procedural macro.\".into())\n+            message.push_str(\"Reload required due to source changes of a procedural macro.\\n\\n\");\n         }\n         if let Err(_) = self.fetch_build_data_error() {\n             status.health = lsp_ext::Health::Warning;\n-            status.message =\n-                Some(\"Failed to run build scripts of some packages, check the logs.\".to_string());\n+            message.push_str(\"Failed to run build scripts of some packages.\\n\\n\");\n         }\n         if !self.config.cargo_autoreload()\n             && self.is_quiescent()\n             && self.fetch_workspaces_queue.op_requested()\n         {\n             status.health = lsp_ext::Health::Warning;\n-            status.message = Some(\"Workspace reload required\".to_string())\n+            message.push_str(\"Auto-reloading is disabled, a workspace reload required.\\n\\n\");\n         }\n-\n-        if let Err(_) = self.fetch_workspace_error() {\n-            status.health = lsp_ext::Health::Error;\n-            status.message = Some(\"Failed to load workspaces\".to_string())\n-        }\n-\n         if self.config.linked_projects().is_empty()\n             && self.config.detached_files().is_empty()\n             && self.config.notifications().cargo_toml_not_found\n         {\n             status.health = lsp_ext::Health::Warning;\n-            status.message = Some(\"Failed to discover workspace\".to_string())\n+            message.push_str(\"Failed to discover workspace.\\n\\n\");\n         }\n \n+        if let Err(_) = self.fetch_workspace_error() {\n+            status.health = lsp_ext::Health::Error;\n+            message.push_str(\"Failed to load workspaces\\n\\n\");\n+        }\n+\n+        if !message.is_empty() {\n+            status.message = Some(message.trim_end().to_owned());\n+        }\n         status\n     }\n "}]}