{"sha": "720293b6407ad883c609efb6badda990edf59769", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMDI5M2I2NDA3YWQ4ODNjNjA5ZWZiNmJhZGRhOTkwZWRmNTk3Njk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-16T09:08:29Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-06T12:14:27Z"}, "message": "do not premote non-ZST mutable references ever", "tree": {"sha": "8eddae7cd01e46b68f586d7d9c0ad6549666e5f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8eddae7cd01e46b68f586d7d9c0ad6549666e5f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/720293b6407ad883c609efb6badda990edf59769", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/720293b6407ad883c609efb6badda990edf59769", "html_url": "https://github.com/rust-lang/rust/commit/720293b6407ad883c609efb6badda990edf59769", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/720293b6407ad883c609efb6badda990edf59769/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c6003a7ad5e1f03c7c458003bf469d267df5688", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c6003a7ad5e1f03c7c458003bf469d267df5688", "html_url": "https://github.com/rust-lang/rust/commit/6c6003a7ad5e1f03c7c458003bf469d267df5688"}], "stats": {"total": 35, "additions": 19, "deletions": 16}, "files": [{"sha": "1d2295a37dddf10bfadfef0740136e396b5c343a", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/720293b6407ad883c609efb6badda990edf59769/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/720293b6407ad883c609efb6badda990edf59769/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=720293b6407ad883c609efb6badda990edf59769", "patch": "@@ -364,15 +364,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n                             // In theory, any zero-sized value could be borrowed\n                             // mutably without consequences. However, only &mut []\n                             // is allowed right now, and only in functions.\n-                            if self.const_kind\n-                                == Some(hir::ConstContext::Static(hir::Mutability::Mut))\n-                            {\n-                                // Inside a `static mut`, &mut [...] is also allowed.\n-                                match ty.kind() {\n-                                    ty::Array(..) | ty::Slice(_) => {}\n-                                    _ => return Err(Unpromotable),\n-                                }\n-                            } else if let ty::Array(_, len) = ty.kind() {\n+                            if let ty::Array(_, len) = ty.kind() {\n                                 // FIXME(eddyb) the `self.is_non_const_fn` condition\n                                 // seems unnecessary, given that this is merely a ZST.\n                                 match len.try_eval_usize(self.tcx, self.param_env) {\n@@ -673,13 +665,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n                     // In theory, any zero-sized value could be borrowed\n                     // mutably without consequences. However, only &mut []\n                     // is allowed right now, and only in functions.\n-                    if self.const_kind == Some(hir::ConstContext::Static(hir::Mutability::Mut)) {\n-                        // Inside a `static mut`, &mut [...] is also allowed.\n-                        match ty.kind() {\n-                            ty::Array(..) | ty::Slice(_) => {}\n-                            _ => return Err(Unpromotable),\n-                        }\n-                    } else if let ty::Array(_, len) = ty.kind() {\n+                    if let ty::Array(_, len) = ty.kind() {\n                         // FIXME(eddyb): We only return `Unpromotable` for `&mut []` inside a\n                         // const context which seems unnecessary given that this is merely a ZST.\n                         match len.try_eval_usize(self.tcx, self.param_env) {"}, {"sha": "d6457b3b2c12343128372d61b5d54cab9e655a05", "filename": "src/test/ui/consts/promotion-mutable-ref.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/720293b6407ad883c609efb6badda990edf59769/src%2Ftest%2Fui%2Fconsts%2Fpromotion-mutable-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/720293b6407ad883c609efb6badda990edf59769/src%2Ftest%2Fui%2Fconsts%2Fpromotion-mutable-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromotion-mutable-ref.rs?ref=720293b6407ad883c609efb6badda990edf59769", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+#![feature(const_mut_refs)]\n+\n+static mut TEST: i32 = {\n+    // We cannot promote this, as CTFE needs to be able to mutate it later.\n+    let x = &mut [1,2,3];\n+    x[0] += 1;\n+    x[0]\n+};\n+\n+// This still works -- it's not done via promotion.\n+#[allow(unused)]\n+static mut TEST2: &'static mut [i32] = &mut [0,1,2];\n+\n+fn main() {\n+    assert_eq!(unsafe { TEST }, 2);\n+}"}]}