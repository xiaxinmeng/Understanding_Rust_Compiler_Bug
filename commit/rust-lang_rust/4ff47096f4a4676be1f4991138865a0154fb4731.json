{"sha": "4ff47096f4a4676be1f4991138865a0154fb4731", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZjQ3MDk2ZjRhNDY3NmJlMWY0OTkxMTM4ODY1YTAxNTRmYjQ3MzE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-10T15:43:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-10T15:43:14Z"}, "message": "Merge #5296\n\n5296: Don't add braces after struct r=matklad a=matklad\n\nUnit structs are a thing\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "b5a4bb6045818abfe224829c115c769c4a68f950", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5a4bb6045818abfe224829c115c769c4a68f950"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ff47096f4a4676be1f4991138865a0154fb4731", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfCIySCRBK7hj4Ov3rIwAAdHIIAEMkqn4WkaDD2vrOBygM/j7d\n1aEIAGgT44IFebzocRzmoBdrG6rtad6fTovd3gv26ZQ6PAZK2zV2ugs6Kncoywkf\njlUoaIKO5mT4kWNDrpjwhokMuYV4oTs+q1lbCyWkx6d8RINYETiw7aIANQH1qosE\n3EmrP4N3sKDO442OhDr9ibSB+Q32VnjPjR2vExw9RWRPdIAQR3qKBiMMumHArlpu\n9O3cWPFa4JssMWVe/Z57jru64rkwNz5SYT5k0OjptraHBa4rF2Lh8Ij45ikxp68e\n/4hWautkjxwJKu1fmYIg1P9Vqb0l49YAc7mKUNALEzr4VKtkz+uOWA3clirOluk=\n=Vx7b\n-----END PGP SIGNATURE-----\n", "payload": "tree b5a4bb6045818abfe224829c115c769c4a68f950\nparent 5a195001d79995a6336988e18a2b78052917a02e\nparent 2d20c8f218710b7d98611cf501783a591b7dc0bb\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1594395794 +0000\ncommitter GitHub <noreply@github.com> 1594395794 +0000\n\nMerge #5296\n\n5296: Don't add braces after struct r=matklad a=matklad\n\nUnit structs are a thing\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ff47096f4a4676be1f4991138865a0154fb4731", "html_url": "https://github.com/rust-lang/rust/commit/4ff47096f4a4676be1f4991138865a0154fb4731", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ff47096f4a4676be1f4991138865a0154fb4731/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a195001d79995a6336988e18a2b78052917a02e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a195001d79995a6336988e18a2b78052917a02e", "html_url": "https://github.com/rust-lang/rust/commit/5a195001d79995a6336988e18a2b78052917a02e"}, {"sha": "2d20c8f218710b7d98611cf501783a591b7dc0bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d20c8f218710b7d98611cf501783a591b7dc0bb", "html_url": "https://github.com/rust-lang/rust/commit/2d20c8f218710b7d98611cf501783a591b7dc0bb"}], "stats": {"total": 40, "additions": 28, "deletions": 12}, "files": [{"sha": "fe873527f7cbf4eac8012f1f48770820e2e50ba7", "filename": "crates/ra_ide/src/completion/complete_keyword.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4ff47096f4a4676be1f4991138865a0154fb4731/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff47096f4a4676be1f4991138865a0154fb4731/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=4ff47096f4a4676be1f4991138865a0154fb4731", "patch": "@@ -88,24 +88,22 @@ pub(super) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n \n     if ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent {\n         add_keyword(ctx, acc, \"enum\", \"enum $0 {}\");\n-        add_keyword(ctx, acc, \"struct\", \"struct $0 {}\");\n+        add_keyword(ctx, acc, \"struct\", \"struct $0\");\n         add_keyword(ctx, acc, \"union\", \"union $0 {}\");\n     }\n \n-    if ctx.block_expr_parent || ctx.is_match_arm {\n+    if ctx.can_be_expr {\n         add_keyword(ctx, acc, \"match\", \"match $0 {}\");\n-        add_keyword(ctx, acc, \"loop\", \"loop {$0}\");\n-    }\n-    if ctx.block_expr_parent {\n         add_keyword(ctx, acc, \"while\", \"while $0 {}\");\n+        add_keyword(ctx, acc, \"loop\", \"loop {$0}\");\n+        add_keyword(ctx, acc, \"if\", \"if \");\n+        add_keyword(ctx, acc, \"if let\", \"if let \");\n     }\n+\n     if ctx.if_is_prev || ctx.block_expr_parent {\n         add_keyword(ctx, acc, \"let\", \"let \");\n     }\n-    if ctx.if_is_prev || ctx.block_expr_parent || ctx.is_match_arm {\n-        add_keyword(ctx, acc, \"if\", \"if \");\n-        add_keyword(ctx, acc, \"if let\", \"if let \");\n-    }\n+\n     if ctx.after_if {\n         add_keyword(ctx, acc, \"else\", \"else {$0}\");\n         add_keyword(ctx, acc, \"else if\", \"else if $0 {}\");\n@@ -343,9 +341,7 @@ mod tests {\n         check(\n             r#\"\n fn quux() -> i32 {\n-    match () {\n-        () => <|>\n-    }\n+    match () { () => <|> }\n }\n \"#,\n             expect![[r#\"\n@@ -355,6 +351,7 @@ fn quux() -> i32 {\n                 kw match\n                 kw return\n                 kw unsafe\n+                kw while\n             \"#]],\n         );\n     }\n@@ -525,4 +522,19 @@ pub mod future {\n             \"#]],\n         )\n     }\n+\n+    #[test]\n+    fn after_let() {\n+        check(\n+            r#\"fn main() { let _ = <|> }\"#,\n+            expect![[r#\"\n+                kw if\n+                kw if let\n+                kw loop\n+                kw match\n+                kw return\n+                kw while\n+            \"#]],\n+        )\n+    }\n }"}, {"sha": "8e1f6dd98da8734325f1511ea22f37440f0990a6", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ff47096f4a4676be1f4991138865a0154fb4731/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff47096f4a4676be1f4991138865a0154fb4731/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=4ff47096f4a4676be1f4991138865a0154fb4731", "patch": "@@ -53,6 +53,8 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) after_if: bool,\n     /// `true` if we are a statement or a last expr in the block.\n     pub(super) can_be_stmt: bool,\n+    /// `true` if we expect an expression at the cursor position.\n+    pub(super) can_be_expr: bool,\n     /// Something is typed at the \"top\" level, in module or impl/trait.\n     pub(super) is_new_item: bool,\n     /// The receiver if this is a field or method access, i.e. writing something.<|>\n@@ -127,6 +129,7 @@ impl<'a> CompletionContext<'a> {\n             path_prefix: None,\n             after_if: false,\n             can_be_stmt: false,\n+            can_be_expr: false,\n             is_new_item: false,\n             dot_receiver: None,\n             is_call: false,\n@@ -403,6 +406,7 @@ impl<'a> CompletionContext<'a> {\n                         None\n                     })\n                     .unwrap_or(false);\n+                self.can_be_expr = path.syntax().parent().and_then(ast::PathExpr::cast).is_some();\n \n                 if let Some(off) = name_ref.syntax().text_range().start().checked_sub(2.into()) {\n                     if let Some(if_expr) ="}]}