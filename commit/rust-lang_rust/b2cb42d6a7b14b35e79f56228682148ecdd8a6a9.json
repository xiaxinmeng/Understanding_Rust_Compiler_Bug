{"sha": "b2cb42d6a7b14b35e79f56228682148ecdd8a6a9", "node_id": "C_kwDOAAsO6NoAKGIyY2I0MmQ2YTdiMTRiMzVlNzlmNTYyMjg2ODIxNDhlY2RkOGE2YTk", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-07-05T07:19:13Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-11-17T12:46:43Z"}, "message": "Minimal implementation of implicit deref patterns", "tree": {"sha": "a017d92db5f6602805df299c3503a4f91a9e766c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a017d92db5f6602805df299c3503a4f91a9e766c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2cb42d6a7b14b35e79f56228682148ecdd8a6a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2cb42d6a7b14b35e79f56228682148ecdd8a6a9", "html_url": "https://github.com/rust-lang/rust/commit/b2cb42d6a7b14b35e79f56228682148ecdd8a6a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2cb42d6a7b14b35e79f56228682148ecdd8a6a9/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c75fe4c8547c276574cacb144919d67fd8ab302", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c75fe4c8547c276574cacb144919d67fd8ab302", "html_url": "https://github.com/rust-lang/rust/commit/7c75fe4c8547c276574cacb144919d67fd8ab302"}], "stats": {"total": 174, "additions": 174, "deletions": 0}, "files": [{"sha": "7e9d1078049b9ff85c00013c2b06f0507e8976c0", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2cb42d6a7b14b35e79f56228682148ecdd8a6a9/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2cb42d6a7b14b35e79f56228682148ecdd8a6a9/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=b2cb42d6a7b14b35e79f56228682148ecdd8a6a9", "patch": "@@ -302,6 +302,8 @@ language_item_table! {\n     Range,                   sym::Range,               range_struct,               Target::Struct,         GenericRequirement::None;\n     RangeToInclusive,        sym::RangeToInclusive,    range_to_inclusive_struct,  Target::Struct,         GenericRequirement::None;\n     RangeTo,                 sym::RangeTo,             range_to_struct,            Target::Struct,         GenericRequirement::None;\n+\n+    String,                  sym::String,              string,                     Target::Struct,         GenericRequirement::None;\n }\n \n pub enum GenericRequirement {"}, {"sha": "f2d5f754c6ff7f17253bd0c42c841a54695f0754", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2cb42d6a7b14b35e79f56228682148ecdd8a6a9/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2cb42d6a7b14b35e79f56228682148ecdd8a6a9/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=b2cb42d6a7b14b35e79f56228682148ecdd8a6a9", "patch": "@@ -401,6 +401,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n \n+        if let hir::ExprKind::Lit(Spanned { node: ast::LitKind::Str(..), .. }) = lt.kind {\n+            let tcx = self.tcx;\n+            let expected = self.resolve_vars_if_possible(expected);\n+            pat_ty = match expected.kind() {\n+                ty::Adt(def, _) if Some(def.did()) == tcx.lang_items().string() => expected,\n+                ty::Str => tcx.mk_static_str(),\n+                _ => pat_ty,\n+            };\n+        }\n+\n         // Somewhat surprising: in this case, the subtyping relation goes the\n         // opposite way as the other cases. Actually what we really want is not\n         // a subtyping relation at all but rather that there exists a LUB"}, {"sha": "e6c01b72b1bfe6050b5e4591243f3fa34e0c36cb", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b2cb42d6a7b14b35e79f56228682148ecdd8a6a9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2cb42d6a7b14b35e79f56228682148ecdd8a6a9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=b2cb42d6a7b14b35e79f56228682148ecdd8a6a9", "patch": "@@ -240,6 +240,39 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n \n             TestKind::Eq { value, ty } => {\n+                let tcx = self.tcx;\n+                if let ty::Adt(def, _) = ty.kind() && Some(def.did()) == tcx.lang_items().string() {\n+                    if !tcx.features().deref_patterns {\n+                        bug!(\"matching on `String` went through without enabling deref_patterns\");\n+                    }\n+                    let re_erased = tcx.lifetimes.re_erased;\n+                    let ref_string = self.temp(tcx.mk_imm_ref(re_erased, ty), test.span);\n+                    let ref_str_ty = tcx.mk_imm_ref(re_erased, tcx.types.str_);\n+                    let ref_str = self.temp(ref_str_ty, test.span);\n+                    let deref = tcx.require_lang_item(LangItem::Deref, None);\n+                    let method = trait_method(tcx, deref, sym::deref, ty, &[]);\n+                    let eq_block = self.cfg.start_new_block();\n+                    self.cfg.push_assign(block, source_info, ref_string, Rvalue::Ref(re_erased, BorrowKind::Shared, place));\n+                    self.cfg.terminate(\n+                        block,\n+                        source_info,\n+                        TerminatorKind::Call {\n+                            func: Operand::Constant(Box::new(Constant {\n+                                span: test.span,\n+                                user_ty: None,\n+                                literal: method,\n+                            })),\n+                            args: vec![Operand::Move(ref_string)],\n+                            destination: ref_str,\n+                            target: Some(eq_block),\n+                            cleanup: None,\n+                            from_hir_call: false,\n+                            fn_span: source_info.span\n+                        }\n+                    );\n+                    self.non_scalar_compare(eq_block, make_target_blocks, source_info, value, ref_str, ref_str_ty);\n+                    return;\n+                }\n                 if !ty.is_scalar() {\n                     // Use `PartialEq::eq` instead of `BinOp::Eq`\n                     // (the binop can only handle primitives)"}, {"sha": "5799ef778c4f646da5fd0e3421c2510324a4394d", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2cb42d6a7b14b35e79f56228682148ecdd8a6a9/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2cb42d6a7b14b35e79f56228682148ecdd8a6a9/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=b2cb42d6a7b14b35e79f56228682148ecdd8a6a9", "patch": "@@ -364,6 +364,7 @@ use crate::vec::Vec;\n #[derive(PartialOrd, Eq, Ord)]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"String\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(bootstrap), lang = \"String\")]\n pub struct String {\n     vec: Vec<u8>,\n }"}, {"sha": "aa854ed7532fcb95f94817c06df96acf2aa507f0", "filename": "src/test/ui/deref-patterns/basic.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b2cb42d6a7b14b35e79f56228682148ecdd8a6a9/src%2Ftest%2Fui%2Fderef-patterns%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2cb42d6a7b14b35e79f56228682148ecdd8a6a9/src%2Ftest%2Fui%2Fderef-patterns%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-patterns%2Fbasic.rs?ref=b2cb42d6a7b14b35e79f56228682148ecdd8a6a9", "patch": "@@ -0,0 +1,16 @@\n+// run-pass\n+// check-run-results\n+\n+fn main() {\n+    test(Some(String::from(\"42\")));\n+    test(Some(String::new()));\n+    test(None);\n+}\n+\n+fn test(o: Option<String>) {\n+    match o {\n+        Some(\"42\") => println!(\"the answer\"),\n+        Some(_) => println!(\"something else?\"),\n+        None => println!(\"nil\"),\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "e50df05828152c5e7356feffc3b2f70b1bde2e4e", "filename": "src/test/ui/deref-patterns/basic.run.stdout", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2cb42d6a7b14b35e79f56228682148ecdd8a6a9/src%2Ftest%2Fui%2Fderef-patterns%2Fbasic.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b2cb42d6a7b14b35e79f56228682148ecdd8a6a9/src%2Ftest%2Fui%2Fderef-patterns%2Fbasic.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-patterns%2Fbasic.run.stdout?ref=b2cb42d6a7b14b35e79f56228682148ecdd8a6a9", "patch": "@@ -0,0 +1,3 @@\n+the answer\n+something else?\n+nil"}, {"sha": "3be4a82d76c65ac650572ff5885e56d0e77cdf0d", "filename": "src/test/ui/deref-patterns/mir.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2cb42d6a7b14b35e79f56228682148ecdd8a6a9/src%2Ftest%2Fui%2Fderef-patterns%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2cb42d6a7b14b35e79f56228682148ecdd8a6a9/src%2Ftest%2Fui%2Fderef-patterns%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-patterns%2Fmir.rs?ref=b2cb42d6a7b14b35e79f56228682148ecdd8a6a9", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: -Z unpretty=mir\n+// build-pass\n+fn main() {\n+    let s = Some(String::new());\n+    let a;\n+    match s {\n+        Some(\"a\") => a = 1234,\n+        s => a = 4321,\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "211f50fa1a846f5c4e452d2fede665265eb73d2b", "filename": "src/test/ui/deref-patterns/mir.stdout", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/b2cb42d6a7b14b35e79f56228682148ecdd8a6a9/src%2Ftest%2Fui%2Fderef-patterns%2Fmir.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b2cb42d6a7b14b35e79f56228682148ecdd8a6a9/src%2Ftest%2Fui%2Fderef-patterns%2Fmir.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-patterns%2Fmir.stdout?ref=b2cb42d6a7b14b35e79f56228682148ecdd8a6a9", "patch": "@@ -0,0 +1,99 @@\n+// WARNING: This output format is intended for human consumers only\n+// and is subject to change without notice. Knock yourself out.\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/mir.rs:3:11: 3:11\n+    let _1: std::option::Option<std::string::String>; // in scope 0 at $DIR/mir.rs:4:9: 4:10\n+    let mut _2: std::string::String;     // in scope 0 at $DIR/mir.rs:4:18: 4:31\n+    let mut _4: &std::string::String;    // in scope 0 at $DIR/mir.rs:7:14: 7:17\n+    let mut _5: &str;                    // in scope 0 at $DIR/mir.rs:7:14: 7:17\n+    let mut _6: bool;                    // in scope 0 at $DIR/mir.rs:7:14: 7:17\n+    let mut _7: isize;                   // in scope 0 at $DIR/mir.rs:7:9: 7:18\n+    let mut _9: bool;                    // in scope 0 at $DIR/mir.rs:10:1: 10:2\n+    scope 1 {\n+        debug s => _1;                   // in scope 1 at $DIR/mir.rs:4:9: 4:10\n+        let _3: i32;                     // in scope 1 at $DIR/mir.rs:5:9: 5:10\n+        scope 2 {\n+            debug a => _3;               // in scope 2 at $DIR/mir.rs:5:9: 5:10\n+            let _8: std::option::Option<std::string::String>; // in scope 2 at $DIR/mir.rs:8:9: 8:10\n+            scope 3 {\n+                debug s => _8;           // in scope 3 at $DIR/mir.rs:8:9: 8:10\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        _9 = const false;                // scope 0 at $DIR/mir.rs:4:9: 4:10\n+        _2 = String::new() -> bb1;       // scope 0 at $DIR/mir.rs:4:18: 4:31\n+                                         // mir::Constant\n+                                         // + span: $DIR/mir.rs:4:18: 4:29\n+                                         // + literal: Const { ty: fn() -> String {String::new}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1: {\n+        _9 = const true;                 // scope 0 at $DIR/mir.rs:4:13: 4:32\n+        Deinit(_1);                      // scope 0 at $DIR/mir.rs:4:13: 4:32\n+        ((_1 as Some).0: std::string::String) = move _2; // scope 0 at $DIR/mir.rs:4:13: 4:32\n+        discriminant(_1) = 1;            // scope 0 at $DIR/mir.rs:4:13: 4:32\n+        _7 = discriminant(_1);           // scope 2 at $DIR/mir.rs:6:11: 6:12\n+        switchInt(move _7) -> [1_isize: bb3, otherwise: bb2]; // scope 2 at $DIR/mir.rs:6:5: 6:12\n+    }\n+\n+    bb2: {\n+        _9 = const false;                // scope 2 at $DIR/mir.rs:8:9: 8:10\n+        _8 = move _1;                    // scope 2 at $DIR/mir.rs:8:9: 8:10\n+        _3 = const 4321_i32;             // scope 3 at $DIR/mir.rs:8:14: 8:22\n+        drop(_8) -> [return: bb7, unwind: bb12]; // scope 2 at $DIR/mir.rs:8:21: 8:22\n+    }\n+\n+    bb3: {\n+        _4 = &((_1 as Some).0: std::string::String); // scope 2 at $DIR/mir.rs:7:14: 7:17\n+        _5 = <String as Deref>::deref(move _4) -> bb4; // scope 2 at $DIR/mir.rs:7:14: 7:17\n+                                         // mir::Constant\n+                                         // + span: $DIR/mir.rs:7:14: 7:17\n+                                         // + literal: Const { ty: for<'r> fn(&'r String) -> &'r <String as Deref>::Target {<String as Deref>::deref}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb4: {\n+        _6 = <str as PartialEq>::eq(_5, const \"a\") -> [return: bb5, unwind: bb12]; // scope 2 at $DIR/mir.rs:7:14: 7:17\n+                                         // mir::Constant\n+                                         // + span: $DIR/mir.rs:7:14: 7:17\n+                                         // + literal: Const { ty: for<'r, 's> fn(&'r str, &'s str) -> bool {<str as PartialEq>::eq}, val: Value(Scalar(<ZST>)) }\n+                                         // mir::Constant\n+                                         // + span: $DIR/mir.rs:7:14: 7:17\n+                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }\n+    }\n+\n+    bb5: {\n+        switchInt(move _6) -> [false: bb2, otherwise: bb6]; // scope 2 at $DIR/mir.rs:7:14: 7:17\n+    }\n+\n+    bb6: {\n+        _3 = const 1234_i32;             // scope 2 at $DIR/mir.rs:7:22: 7:30\n+        goto -> bb7;                     // scope 2 at $DIR/mir.rs:7:22: 7:30\n+    }\n+\n+    bb7: {\n+        switchInt(_9) -> [false: bb8, otherwise: bb10]; // scope 0 at $DIR/mir.rs:10:1: 10:2\n+    }\n+\n+    bb8: {\n+        _9 = const false;                // scope 0 at $DIR/mir.rs:10:1: 10:2\n+        return;                          // scope 0 at $DIR/mir.rs:10:2: 10:2\n+    }\n+\n+    bb9 (cleanup): {\n+        resume;                          // scope 0 at $DIR/mir.rs:3:1: 10:2\n+    }\n+\n+    bb10: {\n+        drop(_1) -> bb8;                 // scope 0 at $DIR/mir.rs:10:1: 10:2\n+    }\n+\n+    bb11 (cleanup): {\n+        drop(_1) -> bb9;                 // scope 0 at $DIR/mir.rs:10:1: 10:2\n+    }\n+\n+    bb12 (cleanup): {\n+        switchInt(_9) -> [false: bb9, otherwise: bb11]; // scope 0 at $DIR/mir.rs:10:1: 10:2\n+    }\n+}"}]}