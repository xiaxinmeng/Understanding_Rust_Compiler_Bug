{"sha": "be6c36414226d8ff6ad5047870d6ec7a0b2bd505", "node_id": "C_kwDOAAsO6NoAKGJlNmMzNjQxNDIyNmQ4ZmY2YWQ1MDQ3ODcwZDZlYzdhMGIyYmQ1MDU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-09T01:51:41Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-16T00:52:19Z"}, "message": "simplify_match_pair: avoid the second comparison if possible.\n\nAlso, the `try_to_bits` always succeeds, so use `unwrap`.", "tree": {"sha": "bcee7af7d45ea4680e470d7653f3167ccb1c9de2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcee7af7d45ea4680e470d7653f3167ccb1c9de2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be6c36414226d8ff6ad5047870d6ec7a0b2bd505", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be6c36414226d8ff6ad5047870d6ec7a0b2bd505", "html_url": "https://github.com/rust-lang/rust/commit/be6c36414226d8ff6ad5047870d6ec7a0b2bd505", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be6c36414226d8ff6ad5047870d6ec7a0b2bd505/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4cd04480bdfca84274dcbe80dae710bdbe0bd59", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4cd04480bdfca84274dcbe80dae710bdbe0bd59", "html_url": "https://github.com/rust-lang/rust/commit/c4cd04480bdfca84274dcbe80dae710bdbe0bd59"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "c6298904140c39ef9166191ac078d9b597ba18ed", "filename": "compiler/rustc_mir_build/src/build/matches/simplify.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/be6c36414226d8ff6ad5047870d6ec7a0b2bd505/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be6c36414226d8ff6ad5047870d6ec7a0b2bd505/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs?ref=be6c36414226d8ff6ad5047870d6ec7a0b2bd505", "patch": "@@ -227,15 +227,18 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     _ => (None, 0),\n                 };\n                 if let Some((min, max, sz)) = range {\n-                    if let (Some(lo), Some(hi)) = (lo.try_to_bits(sz), hi.try_to_bits(sz)) {\n-                        // We want to compare ranges numerically, but the order of the bitwise\n-                        // representation of signed integers does not match their numeric order.\n-                        // Thus, to correct the ordering, we need to shift the range of signed\n-                        // integers to correct the comparison. This is achieved by XORing with a\n-                        // bias (see pattern/_match.rs for another pertinent example of this\n-                        // pattern).\n-                        let (lo, hi) = (lo ^ bias, hi ^ bias);\n-                        if lo <= min && (hi > max || hi == max && end == RangeEnd::Included) {\n+                    // We want to compare ranges numerically, but the order of the bitwise\n+                    // representation of signed integers does not match their numeric order. Thus,\n+                    // to correct the ordering, we need to shift the range of signed integers to\n+                    // correct the comparison. This is achieved by XORing with a bias (see\n+                    // pattern/_match.rs for another pertinent example of this pattern).\n+                    //\n+                    // Also, for performance, it's important to only do the second `try_to_bits` if\n+                    // necessary.\n+                    let lo = lo.try_to_bits(sz).unwrap() ^ bias;\n+                    if lo <= min {\n+                        let hi = hi.try_to_bits(sz).unwrap() ^ bias;\n+                        if hi > max || hi == max && end == RangeEnd::Included {\n                             // Irrefutable pattern match.\n                             return Ok(());\n                         }"}]}