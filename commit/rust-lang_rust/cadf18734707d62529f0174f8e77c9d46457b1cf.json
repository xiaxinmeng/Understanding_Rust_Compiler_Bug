{"sha": "cadf18734707d62529f0174f8e77c9d46457b1cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhZGYxODczNDcwN2Q2MjUyOWYwMTc0ZjhlNzdjOWQ0NjQ1N2IxY2Y=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-06T01:13:44Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-08T19:59:02Z"}, "message": "dump-mir was causing cycles by invoking item-path-str at bad times\n\nWorkaround for now, but probably a better fix is to opt **in** to using\nthe types for impls (if we do that at all; maybe filename/line is\nbetter).", "tree": {"sha": "e9a34ebfff862a64da4438d546b47cb32e403d7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9a34ebfff862a64da4438d546b47cb32e403d7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cadf18734707d62529f0174f8e77c9d46457b1cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cadf18734707d62529f0174f8e77c9d46457b1cf", "html_url": "https://github.com/rust-lang/rust/commit/cadf18734707d62529f0174f8e77c9d46457b1cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cadf18734707d62529f0174f8e77c9d46457b1cf/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "222971f7d2a098b4b8b57520452ab475bc5ea45f", "url": "https://api.github.com/repos/rust-lang/rust/commits/222971f7d2a098b4b8b57520452ab475bc5ea45f", "html_url": "https://github.com/rust-lang/rust/commit/222971f7d2a098b4b8b57520452ab475bc5ea45f"}], "stats": {"total": 63, "additions": 61, "deletions": 2}, "files": [{"sha": "14f277d1767bbc3faf3915ddec606226c46d6327", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cadf18734707d62529f0174f8e77c9d46457b1cf/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadf18734707d62529f0174f8e77c9d46457b1cf/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=cadf18734707d62529f0174f8e77c9d46457b1cf", "patch": "@@ -13,6 +13,7 @@ use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::mir::*;\n use rustc::mir::transform::{MirSuite, MirPassIndex, MirSource};\n use rustc::ty::TyCtxt;\n+use rustc::ty::item_path;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::{Idx};\n use std::fmt::Display;\n@@ -48,7 +49,9 @@ pub fn dump_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         return;\n     }\n \n-    let node_path = tcx.item_path_str(tcx.hir.local_def_id(source.item_id()));\n+    let node_path = item_path::with_forced_impl_filename_line(|| { // see notes on #41697 below\n+        tcx.item_path_str(tcx.hir.local_def_id(source.item_id()))\n+    });\n     dump_matched_mir_node(tcx, pass_num, pass_name, &node_path,\n                           disambiguator, source, mir);\n     for (index, promoted_mir) in mir.promoted.iter_enumerated() {\n@@ -67,7 +70,9 @@ pub fn dump_enabled<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         Some(ref filters) => filters,\n     };\n     let node_id = source.item_id();\n-    let node_path = tcx.item_path_str(tcx.hir.local_def_id(node_id));\n+    let node_path = item_path::with_forced_impl_filename_line(|| { // see notes on #41697 below\n+        tcx.item_path_str(tcx.hir.local_def_id(node_id))\n+    });\n     filters.split(\"&\")\n            .any(|filter| {\n                filter == \"all\" ||\n@@ -76,6 +81,10 @@ pub fn dump_enabled<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n            })\n }\n \n+// #41697 -- we use `with_forced_impl_filename_line()` because\n+// `item_path_str()` would otherwise trigger `type_of`, and this can\n+// run while we are already attempting to evaluate `type_of`.\n+\n fn dump_matched_mir_node<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                    pass_num: Option<(MirSuite, MirPassIndex)>,\n                                    pass_name: &str,"}, {"sha": "d59b6a16562acbf213931a798b8a1e89d10fd19b", "filename": "src/test/run-pass/issue-41697.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/cadf18734707d62529f0174f8e77c9d46457b1cf/src%2Ftest%2Frun-pass%2Fissue-41697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadf18734707d62529f0174f8e77c9d46457b1cf/src%2Ftest%2Frun-pass%2Fissue-41697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-41697.rs?ref=cadf18734707d62529f0174f8e77c9d46457b1cf", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-Zdump-mir=NEVER_MATCHED\n+\n+// Regression test for #41697. Using dump-mir was triggering\n+// artificial cycles: during type-checking, we had to get the MIR for\n+// the constant expressions in `[u8; 2]`, which in turn would trigger\n+// an attempt to get the item-path, which in turn would request the\n+// types of the impl, which would trigger a cycle. We supressed this\n+// cycle now by forcing mir-dump to avoid asking for types of an impl.\n+\n+#![feature(rustc_attrs)]\n+\n+use std::sync::Arc;\n+\n+trait Foo {\n+    fn get(&self) -> [u8; 2];\n+}\n+\n+impl Foo for [u8; 2] {\n+    fn get(&self) -> [u8; 2] {\n+        *self\n+    }\n+}\n+\n+struct Bar<T: ?Sized>(T);\n+\n+fn unsize_fat_ptr<'a>(x: &'a Bar<Foo + Send + 'a>) -> &'a Bar<Foo + 'a> {\n+    x\n+}\n+\n+fn unsize_nested_fat_ptr(x: Arc<Foo + Send>) -> Arc<Foo> {\n+    x\n+}\n+\n+fn main() {\n+    let x: Box<Bar<Foo + Send>> = Box::new(Bar([1,2]));\n+    assert_eq!(unsize_fat_ptr(&*x).0.get(), [1, 2]);\n+\n+    let x: Arc<Foo + Send> = Arc::new([3, 4]);\n+    assert_eq!(unsize_nested_fat_ptr(x).get(), [3, 4]);\n+}"}]}