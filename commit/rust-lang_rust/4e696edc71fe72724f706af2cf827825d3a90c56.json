{"sha": "4e696edc71fe72724f706af2cf827825d3a90c56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNjk2ZWRjNzFmZTcyNzI0ZjcwNmFmMmNmODI3ODI1ZDNhOTBjNTY=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-12-12T22:21:42Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-12-12T23:05:12Z"}, "message": "rustbuild: Add cli option --keep-stage\n\nThis option is intended to be used like:\n\n./x.py build --stage 1 --keep-stage 0\n\nWhich skips all stage 0 steps, so that stage 1 can be recompiled\ndirectly (even if for example libcore has changes).\n\nThis is useful when working on `cfg(not(stage0))` parts of the\nlibraries, or when re-running stage 1 tests in libraries in general.", "tree": {"sha": "630a8b8573e5aa5a1e3db8b0181c65ac06c4683f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/630a8b8573e5aa5a1e3db8b0181c65ac06c4683f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e696edc71fe72724f706af2cf827825d3a90c56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e696edc71fe72724f706af2cf827825d3a90c56", "html_url": "https://github.com/rust-lang/rust/commit/4e696edc71fe72724f706af2cf827825d3a90c56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e696edc71fe72724f706af2cf827825d3a90c56/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd5dc057936f5d84ccd8c1d5965f60e669b589d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd5dc057936f5d84ccd8c1d5965f60e669b589d8", "html_url": "https://github.com/rust-lang/rust/commit/fd5dc057936f5d84ccd8c1d5965f60e669b589d8"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "e57ff30483329445d3a0ff79869e650bdfbaf636", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e696edc71fe72724f706af2cf827825d3a90c56/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e696edc71fe72724f706af2cf827825d3a90c56/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=4e696edc71fe72724f706af2cf827825d3a90c56", "patch": "@@ -29,6 +29,7 @@ use step;\n pub struct Flags {\n     pub verbose: bool,\n     pub stage: Option<u32>,\n+    pub keep_stage: Option<u32>,\n     pub build: String,\n     pub host: Vec<String>,\n     pub target: Vec<String>,\n@@ -68,6 +69,7 @@ impl Flags {\n         opts.optmulti(\"\", \"host\", \"host targets to build\", \"HOST\");\n         opts.optmulti(\"\", \"target\", \"target targets to build\", \"TARGET\");\n         opts.optopt(\"\", \"stage\", \"stage to build\", \"N\");\n+        opts.optopt(\"\", \"keep-stage\", \"stage to keep without recompiling\", \"N\");\n         opts.optopt(\"\", \"src\", \"path to the root of the rust checkout\", \"DIR\");\n         opts.optopt(\"j\", \"jobs\", \"number of jobs to run in parallel\", \"JOBS\");\n         opts.optflag(\"h\", \"help\", \"print this help message\");\n@@ -258,6 +260,7 @@ To learn more about a subcommand, run `./x.py <command> -h`\n         Flags {\n             verbose: m.opt_present(\"v\"),\n             stage: m.opt_str(\"stage\").map(|j| j.parse().unwrap()),\n+            keep_stage: m.opt_str(\"keep-stage\").map(|j| j.parse().unwrap()),\n             build: m.opt_str(\"build\").unwrap_or_else(|| {\n                 env::var(\"BUILD\").unwrap()\n             }),"}, {"sha": "d001b95cd6a553d02722a706d36665c2e441778e", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e696edc71fe72724f706af2cf827825d3a90c56/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e696edc71fe72724f706af2cf827825d3a90c56/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=4e696edc71fe72724f706af2cf827825d3a90c56", "patch": "@@ -871,6 +871,10 @@ invalid rule dependency graph detected, was a rule added and maybe typo'd?\n \n         // And finally, iterate over everything and execute it.\n         for step in order.iter() {\n+            if self.build.flags.keep_stage.map_or(false, |s| step.stage <= s) {\n+                self.build.verbose(&format!(\"keeping step {:?}\", step));\n+                continue;\n+            }\n             self.build.verbose(&format!(\"executing step {:?}\", step));\n             (self.rules[step.name].run)(step);\n         }"}]}