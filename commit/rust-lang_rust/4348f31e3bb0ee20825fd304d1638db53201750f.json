{"sha": "4348f31e3bb0ee20825fd304d1638db53201750f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNDhmMzFlM2JiMGVlMjA4MjVmZDMwNGQxNjM4ZGI1MzIwMTc1MGY=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-04-21T00:06:13Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-04-22T12:44:37Z"}, "message": "Alphabetize the `-C` and `-Z` options.\n\nIn the code, test, and docs, because it makes it much easier to find\nthings.\n\nOther than adding the comments about alphabetical order, this commit\nonly moves things around.", "tree": {"sha": "c7218efa4b68e6ec41972fb72a3c9402253c5bd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7218efa4b68e6ec41972fb72a3c9402253c5bd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4348f31e3bb0ee20825fd304d1638db53201750f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4348f31e3bb0ee20825fd304d1638db53201750f", "html_url": "https://github.com/rust-lang/rust/commit/4348f31e3bb0ee20825fd304d1638db53201750f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4348f31e3bb0ee20825fd304d1638db53201750f/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bfd62acb12a5e628d28950f9f94c3499216f10c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bfd62acb12a5e628d28950f9f94c3499216f10c", "html_url": "https://github.com/rust-lang/rust/commit/4bfd62acb12a5e628d28950f9f94c3499216f10c"}], "stats": {"total": 1184, "additions": 620, "deletions": 564}, "files": [{"sha": "a503679f19bf74e039cbecb0b82ee6dd1b95bb87", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 215, "deletions": 215, "changes": 430, "blob_url": "https://github.com/rust-lang/rust/blob/4348f31e3bb0ee20825fd304d1638db53201750f/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/4348f31e3bb0ee20825fd304d1638db53201750f/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=4348f31e3bb0ee20825fd304d1638db53201750f", "patch": "@@ -7,12 +7,100 @@ a version of this list for your exact compiler by running `rustc -C help`.\n \n This option is deprecated and does nothing.\n \n-## linker\n+## code-model\n \n-This flag controls which linker `rustc` invokes to link your code. It takes a\n-path to the linker executable. If this flag is not specified, the linker will\n-be inferred based on the target. See also the [linker-flavor](#linker-flavor)\n-flag for another way to specify the linker.\n+This option lets you choose which code model to use.\n+\n+To find the valid options for this flag, run `rustc --print code-models`.\n+\n+## codegen-units\n+\n+This flag controls how many code generation units the crate is split into. It\n+takes an integer greater than 0.\n+\n+When a crate is split into multiple codegen units, LLVM is able to process\n+them in parallel. Increasing parallelism may speed up compile times, but may\n+also produce slower code. Setting this to 1 may improve the performance of\n+generated code, but may be slower to compile.\n+\n+The default value, if not specified, is 16 for non-incremental builds. For\n+incremental builds the default is 256 which allows caching to be more granular.\n+\n+## debug-assertions\n+\n+This flag lets you turn `cfg(debug_assertions)` [conditional\n+compilation](../../reference/conditional-compilation.md#debug_assertions) on\n+or off. It takes one of the following values:\n+\n+* `y`, `yes`, `on`, or no value: enable debug-assertions.\n+* `n`, `no`, or `off`: disable debug-assertions.\n+\n+If not specified, debug assertions are automatically enabled only if the\n+[opt-level](#opt-level) is 0.\n+\n+## debuginfo\n+\n+This flag controls the generation of debug information. It takes one of the\n+following values:\n+\n+* `0`: no debug info at all (the default).\n+* `1`: line tables only.\n+* `2`: full debug info.\n+\n+Note: The [`-g` flag][option-g-debug] is an alias for `-C debuginfo=2`.\n+\n+## default-linker-libraries\n+\n+This flag controls whether or not the linker includes its default libraries.\n+It takes one of the following values:\n+\n+* `y`, `yes`, `on`, or no value: include default libraries (the default).\n+* `n`, `no`, or `off`: exclude default libraries.\n+\n+For example, for gcc flavor linkers, this issues the `-nodefaultlibs` flag to\n+the linker.\n+\n+## extra-filename\n+\n+This option allows you to put extra data in each output filename. It takes a\n+string to add as a suffix to the filename. See the [`--emit`\n+flag][option-emit] for more information.\n+\n+## force-frame-pointers\n+\n+This flag forces the use of frame pointers. It takes one of the following\n+values:\n+\n+* `y`, `yes`, `on`, or no value: force-enable frame pointers.\n+* `n`, `no`, or `off`: do not force-enable frame pointers. This does\n+  not necessarily mean frame pointers will be removed.\n+\n+The default behaviour, if frame pointers are not force-enabled, depends on the\n+target.\n+\n+## incremental\n+\n+This flag allows you to enable incremental compilation, which allows `rustc`\n+to save information after compiling a crate to be reused when recompiling the\n+crate, improving re-compile times. This takes a path to a directory where\n+incremental files will be stored.\n+\n+## inline-threshold\n+\n+This option lets you set the default threshold for inlining a function. It\n+takes an unsigned integer as a value. Inlining is based on a cost model, where\n+a higher threshold will allow more inlining.\n+\n+The default depends on the [opt-level](#opt-level):\n+\n+| opt-level | Threshold |\n+|-----------|-----------|\n+| 0         | N/A, only inlines always-inline functions |\n+| 1         | N/A, only inlines always-inline functions and LLVM lifetime intrinsics |\n+| 2         | 225 |\n+| 3         | 275 |\n+| s         | 75 |\n+| z         | 25 |\n \n ## link-arg\n \n@@ -25,6 +113,24 @@ This flag lets you append a single extra argument to the linker invocation.\n This flag lets you append multiple extra arguments to the linker invocation. The\n options should be separated by spaces.\n \n+## link-dead-code\n+\n+This flag controls whether the linker will keep dead code. It takes one of\n+the following values:\n+\n+* `y`, `yes`, `on`, or no value: keep dead code.\n+* `n`, `no`, or `off`: remove dead code (the default).\n+\n+An example of when this flag might be useful is when trying to construct code coverage\n+metrics.\n+\n+## linker\n+\n+This flag controls which linker `rustc` invokes to link your code. It takes a\n+path to the linker executable. If this flag is not specified, the linker will\n+be inferred based on the target. See also the [linker-flavor](#linker-flavor)\n+flag for another way to specify the linker.\n+\n ## linker-flavor\n \n This flag controls the linker flavor used by `rustc`. If a linker is given with\n@@ -51,16 +157,23 @@ flavor. Valid options are:\n \n [lld-flavor]: https://lld.llvm.org/Driver.html\n \n-## link-dead-code\n+## linker-plugin-lto\n \n-This flag controls whether the linker will keep dead code. It takes one of\n+This flag defers LTO optimizations to the linker. See\n+[linker-plugin-LTO](../linker-plugin-lto.md) for more details. It takes one of\n the following values:\n \n-* `y`, `yes`, `on`, or no value: keep dead code.\n-* `n`, `no`, or `off`: remove dead code (the default).\n+* `y`, `yes`, `on`, or no value: enable linker plugin LTO.\n+* `n`, `no`, or `off`: disable linker plugin LTO (the default).\n+* A path to the linker plugin.\n \n-An example of when this flag might be useful is when trying to construct code coverage\n-metrics.\n+## llvm-args\n+\n+This flag can be used to pass a list of arguments directly to LLVM.\n+\n+The list must be separated by spaces.\n+\n+Pass `--help` to see a list of options.\n \n ## lto\n \n@@ -92,78 +205,59 @@ opt-level=0`](#opt-level)). That is:\n \n See also [linker-plugin-lto](#linker-plugin-lto) for cross-language LTO.\n \n-## linker-plugin-lto\n-\n-This flag defers LTO optimizations to the linker. See\n-[linker-plugin-LTO](../linker-plugin-lto.md) for more details. It takes one of\n-the following values:\n-\n-* `y`, `yes`, `on`, or no value: enable linker plugin LTO.\n-* `n`, `no`, or `off`: disable linker plugin LTO (the default).\n-* A path to the linker plugin.\n-\n-## target-cpu\n-\n-This instructs `rustc` to generate code specifically for a particular processor.\n-\n-You can run `rustc --print target-cpus` to see the valid options to pass\n-here. Additionally, `native` can be passed to use the processor of the host\n-machine. Each target has a default base CPU.\n-\n-## target-feature\n-\n-Individual targets will support different features; this flag lets you control\n-enabling or disabling a feature. Each feature should be prefixed with a `+` to\n-enable it or `-` to disable it. Separate multiple features with commas.\n-\n-To see the valid options and an example of use, run `rustc --print\n-target-features`.\n+## metadata\n \n-Using this flag is unsafe and might result in [undefined runtime\n-behavior](../targets/known-issues.md).\n+This option allows you to control the metadata used for symbol mangling. This\n+takes a space-separated list of strings. Mangled symbols will incorporate a\n+hash of the metadata. This may be used, for example, to differentiate symbols\n+between two different versions of the same crate being linked.\n \n-See also the [`target_feature`\n-attribute](../../reference/attributes/codegen.md#the-target_feature-attribute)\n-for controlling features per-function.\n+## no-prepopulate-passes\n \n-This also supports the feature `+crt-static` and `-crt-static` to control\n-[static C runtime linkage](../../reference/linkage.html#static-and-dynamic-c-runtimes).\n+This flag tells the pass manager to use an empty list of passes, instead of the\n+usual pre-populated list of passes.\n \n-Each target and [`target-cpu`](#target-cpu) has a default set of enabled\n-features.\n+## no-redzone\n \n-## passes\n+This flag allows you to disable [the\n+red zone](https://en.wikipedia.org/wiki/Red_zone_\\(computing\\)). It takes one\n+of the following values:\n \n-This flag can be used to add extra [LLVM\n-passes](http://llvm.org/docs/Passes.html) to the compilation.\n+* `y`, `yes`, `on`, or no value: disable the red zone.\n+* `n`, `no`, or `off`: enable the red zone.\n \n-The list must be separated by spaces.\n+The default behaviour, if the flag is not specified, depends on the target.\n \n-See also the [`no-prepopulate-passes`](#no-prepopulate-passes) flag.\n+## no-stack-check\n \n-## llvm-args\n+This option is deprecated and does nothing.\n \n-This flag can be used to pass a list of arguments directly to LLVM.\n+## no-vectorize-loops\n \n-The list must be separated by spaces.\n+This flag disables [loop\n+vectorization](https://llvm.org/docs/Vectorizers.html#the-loop-vectorizer).\n \n-Pass `--help` to see a list of options.\n+## no-vectorize-slp\n \n-## save-temps\n+This flag disables vectorization using\n+[superword-level\n+parallelism](https://llvm.org/docs/Vectorizers.html#the-slp-vectorizer).\n \n-This flag controls whether temporary files generated during compilation are\n-deleted once compilation finishes. It takes one of the following values:\n+## opt-level\n \n-* `y`, `yes`, `on`, or no value: save temporary files.\n-* `n`, `no`, or `off`: delete temporary files (the default).\n+This flag controls the optimization level.\n \n-## rpath\n+* `0`: no optimizations, also turns on\n+  [`cfg(debug_assertions)`](#debug-assertions) (the default).\n+* `1`: basic optimizations.\n+* `2`: some optimizations.\n+* `3`: all optimizations.\n+* `s`: optimize for binary size.\n+* `z`: optimize for binary size, but also turn off loop vectorization.\n \n-This flag controls whether [`rpath`](https://en.wikipedia.org/wiki/Rpath) is\n-enabled. It takes one of the following values:\n+Note: The [`-O` flag][option-o-optimize] is an alias for `-C opt-level=2`.\n \n-* `y`, `yes`, `on`, or no value: enable rpath.\n-* `n`, `no`, or `off`: disable rpath (the default).\n+The default is `0`.\n \n ## overflow-checks\n \n@@ -178,29 +272,23 @@ one of the following values:\n If not specified, overflow checks are enabled if\n [debug-assertions](#debug-assertions) are enabled, disabled otherwise.\n \n-## no-prepopulate-passes\n-\n-This flag tells the pass manager to use an empty list of passes, instead of the\n-usual pre-populated list of passes.\n+## panic\n \n-## no-vectorize-loops\n+This option lets you control what happens when the code panics.\n \n-This flag disables [loop\n-vectorization](https://llvm.org/docs/Vectorizers.html#the-loop-vectorizer).\n+* `abort`: terminate the process upon panic\n+* `unwind`: unwind the stack upon panic\n \n-## no-vectorize-slp\n+If not specified, the default depends on the target.\n \n-This flag disables vectorization using\n-[superword-level\n-parallelism](https://llvm.org/docs/Vectorizers.html#the-slp-vectorizer).\n+## passes\n \n-## soft-float\n+This flag can be used to add extra [LLVM\n+passes](http://llvm.org/docs/Passes.html) to the compilation.\n \n-This option controls whether `rustc` generates code that emulates floating\n-point instructions in software. It takes one of the following values:\n+The list must be separated by spaces.\n \n-* `y`, `yes`, `on`, or no value: use soft floats.\n-* `n`, `no`, or `off`: use hardware floats (the default).\n+See also the [`no-prepopulate-passes`](#no-prepopulate-passes) flag.\n \n ## prefer-dynamic\n \n@@ -214,16 +302,20 @@ linkage. This flag takes one of the following values:\n * `y`, `yes`, `on`, or no value: use dynamic linking.\n * `n`, `no`, or `off`: use static linking (the default).\n \n-## no-redzone\n+## profile-generate\n \n-This flag allows you to disable [the\n-red zone](https://en.wikipedia.org/wiki/Red_zone_\\(computing\\)). It takes one\n-of the following values:\n+This flag allows for creating instrumented binaries that will collect\n+profiling data for use with profile-guided optimization (PGO). The flag takes\n+an optional argument which is the path to a directory into which the\n+instrumented binary will emit the collected data. See the chapter on\n+[profile-guided optimization] for more information.\n \n-* `y`, `yes`, `on`, or no value: disable the red zone.\n-* `n`, `no`, or `off`: enable the red zone.\n+## profile-use\n \n-The default behaviour, if the flag is not specified, depends on the target.\n+This flag specifies the profiling data file to be used for profile-guided\n+optimization (PGO). The flag takes a mandatory argument which is the path\n+to a valid `.profdata` file. See the chapter on\n+[profile-guided optimization] for more information.\n \n ## relocation-model\n \n@@ -233,38 +325,6 @@ use.\n \n To find the valid options for this flag, run `rustc --print relocation-models`.\n \n-## code-model\n-\n-This option lets you choose which code model to use.\n-\n-To find the valid options for this flag, run `rustc --print code-models`.\n-\n-## metadata\n-\n-This option allows you to control the metadata used for symbol mangling. This\n-takes a space-separated list of strings. Mangled symbols will incorporate a\n-hash of the metadata. This may be used, for example, to differentiate symbols\n-between two different versions of the same crate being linked.\n-\n-## extra-filename\n-\n-This option allows you to put extra data in each output filename. It takes a\n-string to add as a suffix to the filename. See the [`--emit`\n-flag][option-emit] for more information.\n-\n-## codegen-units\n-\n-This flag controls how many code generation units the crate is split into. It\n-takes an integer greater than 0.\n-\n-When a crate is split into multiple codegen units, LLVM is able to process\n-them in parallel. Increasing parallelism may speed up compile times, but may\n-also produce slower code. Setting this to 1 may improve the performance of\n-generated code, but may be slower to compile.\n-\n-The default value, if not specified, is 16 for non-incremental builds. For\n-incremental builds the default is 256 which allows caching to be more granular.\n-\n ## remark\n \n This flag lets you print remarks for optimization passes.\n@@ -273,119 +333,59 @@ The list of passes should be separated by spaces.\n \n `all` will remark on every pass.\n \n-## no-stack-check\n-\n-This option is deprecated and does nothing.\n-\n-## debuginfo\n-\n-This flag controls the generation of debug information. It takes one of the\n-following values:\n-\n-* `0`: no debug info at all (the default).\n-* `1`: line tables only.\n-* `2`: full debug info.\n-\n-Note: The [`-g` flag][option-g-debug] is an alias for `-C debuginfo=2`.\n-\n-## opt-level\n-\n-This flag controls the optimization level.\n-\n-* `0`: no optimizations, also turns on\n-  [`cfg(debug_assertions)`](#debug-assertions) (the default).\n-* `1`: basic optimizations.\n-* `2`: some optimizations.\n-* `3`: all optimizations.\n-* `s`: optimize for binary size.\n-* `z`: optimize for binary size, but also turn off loop vectorization.\n-\n-Note: The [`-O` flag][option-o-optimize] is an alias for `-C opt-level=2`.\n-\n-The default is `0`.\n-\n-## debug-assertions\n-\n-This flag lets you turn `cfg(debug_assertions)` [conditional\n-compilation](../../reference/conditional-compilation.md#debug_assertions) on\n-or off. It takes one of the following values:\n-\n-* `y`, `yes`, `on`, or no value: enable debug-assertions.\n-* `n`, `no`, or `off`: disable debug-assertions.\n-\n-If not specified, debug assertions are automatically enabled only if the\n-[opt-level](#opt-level) is 0.\n-\n-## inline-threshold\n-\n-This option lets you set the default threshold for inlining a function. It\n-takes an unsigned integer as a value. Inlining is based on a cost model, where\n-a higher threshold will allow more inlining.\n-\n-The default depends on the [opt-level](#opt-level):\n-\n-| opt-level | Threshold |\n-|-----------|-----------|\n-| 0         | N/A, only inlines always-inline functions |\n-| 1         | N/A, only inlines always-inline functions and LLVM lifetime intrinsics |\n-| 2         | 225 |\n-| 3         | 275 |\n-| s         | 75 |\n-| z         | 25 |\n+## rpath\n \n-## panic\n+This flag controls whether [`rpath`](https://en.wikipedia.org/wiki/Rpath) is\n+enabled. It takes one of the following values:\n \n-This option lets you control what happens when the code panics.\n+* `y`, `yes`, `on`, or no value: enable rpath.\n+* `n`, `no`, or `off`: disable rpath (the default).\n \n-* `abort`: terminate the process upon panic\n-* `unwind`: unwind the stack upon panic\n+## save-temps\n \n-If not specified, the default depends on the target.\n+This flag controls whether temporary files generated during compilation are\n+deleted once compilation finishes. It takes one of the following values:\n \n-## incremental\n+* `y`, `yes`, `on`, or no value: save temporary files.\n+* `n`, `no`, or `off`: delete temporary files (the default).\n \n-This flag allows you to enable incremental compilation, which allows `rustc`\n-to save information after compiling a crate to be reused when recompiling the\n-crate, improving re-compile times. This takes a path to a directory where\n-incremental files will be stored.\n+## soft-float\n \n-## profile-generate\n+This option controls whether `rustc` generates code that emulates floating\n+point instructions in software. It takes one of the following values:\n \n-This flag allows for creating instrumented binaries that will collect\n-profiling data for use with profile-guided optimization (PGO). The flag takes\n-an optional argument which is the path to a directory into which the\n-instrumented binary will emit the collected data. See the chapter on\n-[profile-guided optimization] for more information.\n+* `y`, `yes`, `on`, or no value: use soft floats.\n+* `n`, `no`, or `off`: use hardware floats (the default).\n \n-## profile-use\n+## target-cpu\n \n-This flag specifies the profiling data file to be used for profile-guided\n-optimization (PGO). The flag takes a mandatory argument which is the path\n-to a valid `.profdata` file. See the chapter on\n-[profile-guided optimization] for more information.\n+This instructs `rustc` to generate code specifically for a particular processor.\n \n-## force-frame-pointers\n+You can run `rustc --print target-cpus` to see the valid options to pass\n+here. Additionally, `native` can be passed to use the processor of the host\n+machine. Each target has a default base CPU.\n \n-This flag forces the use of frame pointers. It takes one of the following\n-values:\n+## target-feature\n \n-* `y`, `yes`, `on`, or no value: force-enable frame pointers.\n-* `n`, `no`, or `off`: do not force-enable frame pointers. This does\n-  not necessarily mean frame pointers will be removed.\n+Individual targets will support different features; this flag lets you control\n+enabling or disabling a feature. Each feature should be prefixed with a `+` to\n+enable it or `-` to disable it. Separate multiple features with commas.\n \n-The default behaviour, if frame pointers are not force-enabled, depends on the\n-target.\n+To see the valid options and an example of use, run `rustc --print\n+target-features`.\n \n-## default-linker-libraries\n+Using this flag is unsafe and might result in [undefined runtime\n+behavior](../targets/known-issues.md).\n \n-This flag controls whether or not the linker includes its default libraries.\n-It takes one of the following values:\n+See also the [`target_feature`\n+attribute](../../reference/attributes/codegen.md#the-target_feature-attribute)\n+for controlling features per-function.\n \n-* `y`, `yes`, `on`, or no value: include default libraries (the default).\n-* `n`, `no`, or `off`: exclude default libraries.\n+This also supports the feature `+crt-static` and `-crt-static` to control\n+[static C runtime linkage](../../reference/linkage.html#static-and-dynamic-c-runtimes).\n \n-For example, for gcc flavor linkers, this issues the `-nodefaultlibs` flag to\n-the linker.\n+Each target and [`target-cpu`](#target-cpu) has a default set of enabled\n+features.\n \n ## bitcode-in-rlib\n "}, {"sha": "544c512a99e1d917c77ed43c4d01f601fc4d4973", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 109, "deletions": 77, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/4348f31e3bb0ee20825fd304d1638db53201750f/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348f31e3bb0ee20825fd304d1638db53201750f/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=4348f31e3bb0ee20825fd304d1638db53201750f", "patch": "@@ -374,136 +374,140 @@ fn test_codegen_options_tracking_hash() {\n     let reference = Options::default();\n     let mut opts = Options::default();\n \n-    // Make sure the changing an [UNTRACKED] option leaves the hash unchanged\n+    // Make sure that changing an [UNTRACKED] option leaves the hash unchanged.\n+    // This list is in alphabetical order.\n+\n     opts.cg.ar = String::from(\"abc\");\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n-    opts.cg.linker = Some(PathBuf::from(\"linker\"));\n+    opts.cg.codegen_units = Some(42);\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n-    opts.cg.link_args = vec![String::from(\"abc\"), String::from(\"def\")];\n+    opts.cg.extra_filename = String::from(\"extra-filename\");\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n-    opts.cg.link_dead_code = true;\n+    opts.cg.incremental = Some(String::from(\"abc\"));\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n-    opts.cg.rpath = true;\n+    opts.cg.link_args = vec![String::from(\"abc\"), String::from(\"def\")];\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n-    opts.cg.extra_filename = String::from(\"extra-filename\");\n+    opts.cg.link_dead_code = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n-    opts.cg.codegen_units = Some(42);\n+    opts.cg.linker = Some(PathBuf::from(\"linker\"));\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n     opts.cg.remark = Passes::Some(vec![String::from(\"pass1\"), String::from(\"pass2\")]);\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n-    opts.cg.save_temps = true;\n+    opts.cg.rpath = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n-    opts.cg.incremental = Some(String::from(\"abc\"));\n+    opts.cg.save_temps = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n-    // Make sure changing a [TRACKED] option changes the hash\n+    // Make sure that changing a [TRACKED] option changes the hash.\n+    // This list is in alphabetical order.\n+\n     opts = reference.clone();\n-    opts.cg.lto = LtoCli::Fat;\n+    opts.cg.code_model = Some(String::from(\"code model\"));\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.cg.target_cpu = Some(String::from(\"abc\"));\n+    opts.cg.debug_assertions = Some(true);\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.cg.target_feature = String::from(\"all the features, all of them\");\n+    opts.cg.debuginfo = 0xdeadbeef;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.cg.passes = vec![String::from(\"1\"), String::from(\"2\")];\n+    opts.cg.debuginfo = 0xba5eba11;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.cg.llvm_args = vec![String::from(\"1\"), String::from(\"2\")];\n+    opts.cg.force_frame_pointers = Some(false);\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.cg.overflow_checks = Some(true);\n+    opts.cg.inline_threshold = Some(0xf007ba11);\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.cg.no_prepopulate_passes = true;\n+    opts.cg.linker_plugin_lto = LinkerPluginLto::LinkerPluginAuto;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.cg.no_vectorize_loops = true;\n+    opts.cg.llvm_args = vec![String::from(\"1\"), String::from(\"2\")];\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.cg.no_vectorize_slp = true;\n+    opts.cg.lto = LtoCli::Fat;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.cg.soft_float = true;\n+    opts.cg.metadata = vec![String::from(\"A\"), String::from(\"B\")];\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.cg.prefer_dynamic = true;\n+    opts.cg.no_prepopulate_passes = true;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n     opts.cg.no_redzone = Some(true);\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.cg.relocation_model = Some(String::from(\"relocation model\"));\n+    opts.cg.no_vectorize_loops = true;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.cg.code_model = Some(String::from(\"code model\"));\n+    opts.cg.no_vectorize_slp = true;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.debugging_opts.tls_model = Some(String::from(\"tls model\"));\n+    opts.cg.overflow_checks = Some(true);\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.cg.profile_generate = SwitchWithOptPath::Enabled(None);\n-    assert_ne!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+    opts.cg.panic = Some(PanicStrategy::Abort);\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.cg.profile_use = Some(PathBuf::from(\"abc\"));\n-    assert_ne!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+    opts.cg.passes = vec![String::from(\"1\"), String::from(\"2\")];\n+    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.cg.metadata = vec![String::from(\"A\"), String::from(\"B\")];\n+    opts.cg.prefer_dynamic = true;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.cg.debuginfo = 0xdeadbeef;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+    opts.cg.profile_generate = SwitchWithOptPath::Enabled(None);\n+    assert_ne!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.cg.debuginfo = 0xba5eba11;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+    opts.cg.profile_use = Some(PathBuf::from(\"abc\"));\n+    assert_ne!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.cg.force_frame_pointers = Some(false);\n+    opts.cg.relocation_model = Some(String::from(\"relocation model\"));\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.cg.debug_assertions = Some(true);\n+    opts.cg.soft_float = true;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.cg.inline_threshold = Some(0xf007ba11);\n+    opts.cg.target_cpu = Some(String::from(\"abc\"));\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.cg.panic = Some(PanicStrategy::Abort);\n+    opts.cg.target_feature = String::from(\"all the features, all of them\");\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.cg.linker_plugin_lto = LinkerPluginLto::LinkerPluginAuto;\n+    opts.debugging_opts.tls_model = Some(String::from(\"tls model\"));\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n@@ -516,113 +520,141 @@ fn test_debugging_options_tracking_hash() {\n     let reference = Options::default();\n     let mut opts = Options::default();\n \n-    // Make sure the changing an [UNTRACKED] option leaves the hash unchanged\n-    opts.debugging_opts.verbose = true;\n+    // Make sure that changing an [UNTRACKED] option leaves the hash unchanged.\n+    // This list is in alphabetical order.\n+\n+    opts.debugging_opts.ast_json = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-    opts.debugging_opts.time_passes = true;\n+\n+    opts.debugging_opts.ast_json_noexpand = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-    opts.debugging_opts.time_llvm_passes = true;\n+\n+    opts.debugging_opts.borrowck_stats = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-    opts.debugging_opts.input_stats = true;\n+\n+    opts.debugging_opts.dump_dep_graph = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-    opts.debugging_opts.borrowck_stats = true;\n+\n+    opts.debugging_opts.dump_mir = Some(String::from(\"abc\"));\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-    opts.debugging_opts.meta_stats = true;\n+\n+    opts.debugging_opts.dump_mir_dataflow = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-    opts.debugging_opts.print_link_args = true;\n+\n+    opts.debugging_opts.dump_mir_dir = String::from(\"abc\");\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-    opts.debugging_opts.print_llvm_passes = true;\n+\n+    opts.debugging_opts.dump_mir_graphviz = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-    opts.debugging_opts.ast_json = true;\n+\n+    opts.debugging_opts.input_stats = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-    opts.debugging_opts.ast_json_noexpand = true;\n+\n+    opts.debugging_opts.keep_hygiene_data = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n     opts.debugging_opts.ls = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-    opts.debugging_opts.save_analysis = true;\n+\n+    opts.debugging_opts.meta_stats = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-    opts.debugging_opts.print_region_graph = true;\n+\n+    opts.debugging_opts.no_analysis = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n     opts.debugging_opts.parse_only = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-    opts.debugging_opts.dump_dep_graph = true;\n+\n+    opts.debugging_opts.print_link_args = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-    opts.debugging_opts.query_dep_graph = true;\n+\n+    opts.debugging_opts.print_llvm_passes = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-    opts.debugging_opts.no_analysis = true;\n+\n+    opts.debugging_opts.print_mono_items = Some(String::from(\"abc\"));\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-    opts.debugging_opts.unstable_options = true;\n+\n+    opts.debugging_opts.print_region_graph = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-    opts.debugging_opts.trace_macros = true;\n+\n+    opts.debugging_opts.query_dep_graph = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-    opts.debugging_opts.keep_hygiene_data = true;\n+\n+    opts.debugging_opts.save_analysis = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-    opts.debugging_opts.print_mono_items = Some(String::from(\"abc\"));\n+\n+    opts.debugging_opts.time_llvm_passes = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-    opts.debugging_opts.dump_mir = Some(String::from(\"abc\"));\n+\n+    opts.debugging_opts.time_passes = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-    opts.debugging_opts.dump_mir_dir = String::from(\"abc\");\n+\n+    opts.debugging_opts.trace_macros = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-    opts.debugging_opts.dump_mir_graphviz = true;\n+\n+    opts.debugging_opts.unstable_options = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-    opts.debugging_opts.dump_mir_dataflow = true;\n+\n+    opts.debugging_opts.verbose = true;\n     assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n-    // Make sure changing a [TRACKED] option changes the hash\n+    // Make sure that changing a [TRACKED] option changes the hash.\n+    // This list is in alphabetical order.\n+\n     opts = reference.clone();\n-    opts.debugging_opts.asm_comments = true;\n+    opts.debugging_opts.allow_features = Some(vec![String::from(\"lang_items\")]);\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.debugging_opts.verify_llvm_ir = true;\n+    opts.debugging_opts.asm_comments = true;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.debugging_opts.no_landing_pads = true;\n+    opts.debugging_opts.fewer_names = true;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.debugging_opts.fewer_names = true;\n+    opts.debugging_opts.force_overflow_checks = Some(true);\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.debugging_opts.no_codegen = true;\n+    opts.debugging_opts.merge_functions = Some(MergeFunctions::Disabled);\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.debugging_opts.treat_err_as_bug = Some(1);\n+    opts.debugging_opts.mir_opt_level = 3;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.debugging_opts.report_delayed_bugs = true;\n+    opts.debugging_opts.no_codegen = true;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.debugging_opts.force_overflow_checks = Some(true);\n+    opts.debugging_opts.no_landing_pads = true;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.debugging_opts.show_span = Some(String::from(\"abc\"));\n+    opts.debugging_opts.relro_level = Some(RelroLevel::Full);\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.debugging_opts.mir_opt_level = 3;\n+    opts.debugging_opts.report_delayed_bugs = true;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.debugging_opts.relro_level = Some(RelroLevel::Full);\n+    opts.debugging_opts.show_span = Some(String::from(\"abc\"));\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.debugging_opts.merge_functions = Some(MergeFunctions::Disabled);\n+    opts.debugging_opts.symbol_mangling_version = SymbolManglingVersion::V0;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.debugging_opts.allow_features = Some(vec![String::from(\"lang_items\")]);\n+    opts.debugging_opts.treat_err_as_bug = Some(1);\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.debugging_opts.symbol_mangling_version = SymbolManglingVersion::V0;\n+    opts.debugging_opts.verify_llvm_ir = true;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n }\n "}, {"sha": "54b2f2fe470302a8872cbba94a9c8399f140897c", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 296, "deletions": 272, "changes": 568, "blob_url": "https://github.com/rust-lang/rust/blob/4348f31e3bb0ee20825fd304d1638db53201750f/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348f31e3bb0ee20825fd304d1638db53201750f/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=4348f31e3bb0ee20825fd304d1638db53201750f", "patch": "@@ -623,314 +623,309 @@ macro_rules! options {\n options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n           build_codegen_options, \"C\", \"codegen\",\n           CG_OPTIONS, cg_type_desc, cgsetters,\n+\n+    // This list is in alphabetical order.\n+    //\n+    // If you add a new option, please update:\n+    // - src/librustc_interface/tests.rs\n+    // - src/doc/rustc/src/codegen-options/index.md\n+\n     ar: String = (String::new(), parse_string, [UNTRACKED],\n         \"this option is deprecated and does nothing\"),\n-    linker: Option<PathBuf> = (None, parse_opt_pathbuf, [UNTRACKED],\n-        \"system linker to link outputs with\"),\n+    bitcode_in_rlib: bool = (true, parse_bool, [TRACKED],\n+        \"emit bitcode in rlibs (default: yes)\"),\n+    code_model: Option<String> = (None, parse_opt_string, [TRACKED],\n+        \"choose the code model to use (`rustc --print code-models` for details)\"),\n+    codegen_units: Option<usize> = (None, parse_opt_uint, [UNTRACKED],\n+        \"divide crate into N units to optimize in parallel\"),\n+    debug_assertions: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"explicitly enable the `cfg(debug_assertions)` directive\"),\n+    debuginfo: usize = (0, parse_uint, [TRACKED],\n+        \"debug info emission level (0 = no debug info, 1 = line tables only, \\\n+        2 = full debug info with variable and type information; default: 0)\"),\n+    default_linker_libraries: bool = (false, parse_bool, [UNTRACKED],\n+        \"allow the linker to link its default libraries (default: no)\"),\n+    extra_filename: String = (String::new(), parse_string, [UNTRACKED],\n+        \"extra data to put in each output filename\"),\n+    force_frame_pointers: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"force use of the frame pointers\"),\n+    incremental: Option<String> = (None, parse_opt_string, [UNTRACKED],\n+        \"enable incremental compilation\"),\n+    inline_threshold: Option<usize> = (None, parse_opt_uint, [TRACKED],\n+        \"set the threshold for inlining a function\"),\n     link_arg: (/* redirected to link_args */) = ((), parse_string_push, [UNTRACKED],\n         \"a single extra argument to append to the linker invocation (can be used several times)\"),\n     link_args: Vec<String> = (Vec::new(), parse_list, [UNTRACKED],\n         \"extra arguments to append to the linker invocation (space separated)\"),\n     link_dead_code: bool = (false, parse_bool, [UNTRACKED],\n         \"keep dead code at link time (useful for code coverage) (default: no)\"),\n-    lto: LtoCli = (LtoCli::Unspecified, parse_lto, [TRACKED],\n-        \"perform LLVM link-time optimizations\"),\n-    target_cpu: Option<String> = (None, parse_opt_string, [TRACKED],\n-        \"select target processor (`rustc --print target-cpus` for details)\"),\n-    target_feature: String = (String::new(), parse_string, [TRACKED],\n-        \"target specific attributes. (`rustc --print target-features` for details). \\\n-        This feature is unsafe.\"),\n-    passes: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n-        \"a list of extra LLVM passes to run (space separated)\"),\n+    linker: Option<PathBuf> = (None, parse_opt_pathbuf, [UNTRACKED],\n+        \"system linker to link outputs with\"),\n+    linker_flavor: Option<LinkerFlavor> = (None, parse_linker_flavor, [UNTRACKED],\n+        \"linker flavor\"),\n+    linker_plugin_lto: LinkerPluginLto = (LinkerPluginLto::Disabled,\n+        parse_linker_plugin_lto, [TRACKED],\n+        \"generate build artifacts that are compatible with linker-based LTO\"),\n     llvm_args: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n         \"a list of arguments to pass to LLVM (space separated)\"),\n-    save_temps: bool = (false, parse_bool, [UNTRACKED],\n-        \"save all temporary output files during compilation (default: no)\"),\n-    rpath: bool = (false, parse_bool, [UNTRACKED],\n-        \"set rpath values in libs/exes (default: no)\"),\n-    overflow_checks: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-        \"use overflow checks for integer arithmetic\"),\n+    lto: LtoCli = (LtoCli::Unspecified, parse_lto, [TRACKED],\n+        \"perform LLVM link-time optimizations\"),\n+    metadata: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n+        \"metadata to mangle symbol names with\"),\n     no_prepopulate_passes: bool = (false, parse_no_flag, [TRACKED],\n         \"give an empty list of passes to the pass manager\"),\n-    no_vectorize_loops: bool = (false, parse_no_flag, [TRACKED],\n-        \"disable loop vectorization optimization passes\"),\n-    no_vectorize_slp: bool = (false, parse_no_flag, [TRACKED],\n-        \"disable LLVM's SLP vectorization pass\"),\n-    soft_float: bool = (false, parse_bool, [TRACKED],\n-        \"use soft float ABI (*eabihf targets only) (default: no)\"),\n-    prefer_dynamic: bool = (false, parse_bool, [TRACKED],\n-        \"prefer dynamic linking to static linking (default: no)\"),\n     no_redzone: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"disable the use of the redzone\"),\n-    relocation_model: Option<String> = (None, parse_opt_string, [TRACKED],\n-        \"choose the relocation model to use (`rustc --print relocation-models` for details)\"),\n-    code_model: Option<String> = (None, parse_opt_string, [TRACKED],\n-        \"choose the code model to use (`rustc --print code-models` for details)\"),\n-    metadata: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n-        \"metadata to mangle symbol names with\"),\n-    extra_filename: String = (String::new(), parse_string, [UNTRACKED],\n-        \"extra data to put in each output filename\"),\n-    codegen_units: Option<usize> = (None, parse_opt_uint, [UNTRACKED],\n-        \"divide crate into N units to optimize in parallel\"),\n-    remark: Passes = (Passes::Some(Vec::new()), parse_passes, [UNTRACKED],\n-        \"print remarks for these optimization passes (space separated, or \\\"all\\\")\"),\n     no_stack_check: bool = (false, parse_no_flag, [UNTRACKED],\n         \"this option is deprecated and does nothing\"),\n-    debuginfo: usize = (0, parse_uint, [TRACKED],\n-        \"debug info emission level (0 = no debug info, 1 = line tables only, \\\n-         2 = full debug info with variable and type information; default: 0)\"),\n+    no_vectorize_loops: bool = (false, parse_no_flag, [TRACKED],\n+        \"disable loop vectorization optimization passes\"),\n+    no_vectorize_slp: bool = (false, parse_no_flag, [TRACKED],\n+        \"disable LLVM's SLP vectorization pass\"),\n     opt_level: String = (\"0\".to_string(), parse_string, [TRACKED],\n         \"optimization level (0-3, s, or z; default: 0)\"),\n-    force_frame_pointers: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-        \"force use of the frame pointers\"),\n-    debug_assertions: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-        \"explicitly enable the `cfg(debug_assertions)` directive\"),\n-    inline_threshold: Option<usize> = (None, parse_opt_uint, [TRACKED],\n-        \"set the threshold for inlining a function\"),\n-    panic: Option<PanicStrategy> = (None, parse_panic_strategy,\n-        [TRACKED], \"panic strategy to compile crate with\"),\n-    incremental: Option<String> = (None, parse_opt_string, [UNTRACKED],\n-        \"enable incremental compilation\"),\n-    default_linker_libraries: bool = (false, parse_bool, [UNTRACKED],\n-        \"allow the linker to link its default libraries (default: no)\"),\n-    linker_flavor: Option<LinkerFlavor> = (None, parse_linker_flavor, [UNTRACKED],\n-                                           \"linker flavor\"),\n-    linker_plugin_lto: LinkerPluginLto = (LinkerPluginLto::Disabled,\n-        parse_linker_plugin_lto, [TRACKED],\n-        \"generate build artifacts that are compatible with linker-based LTO\"),\n+    overflow_checks: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"use overflow checks for integer arithmetic\"),\n+    panic: Option<PanicStrategy> = (None, parse_panic_strategy, [TRACKED],\n+        \"panic strategy to compile crate with\"),\n+    passes: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n+        \"a list of extra LLVM passes to run (space separated)\"),\n+    prefer_dynamic: bool = (false, parse_bool, [TRACKED],\n+        \"prefer dynamic linking to static linking (default: no)\"),\n     profile_generate: SwitchWithOptPath = (SwitchWithOptPath::Disabled,\n         parse_switch_with_opt_path, [TRACKED],\n         \"compile the program with profiling instrumentation\"),\n     profile_use: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n         \"use the given `.profdata` file for profile-guided optimization\"),\n-    bitcode_in_rlib: bool = (true, parse_bool, [TRACKED],\n-        \"emit bitcode in rlibs (default: yes)\"),\n+    relocation_model: Option<String> = (None, parse_opt_string, [TRACKED],\n+        \"choose the relocation model to use (`rustc --print relocation-models` for details)\"),\n+    remark: Passes = (Passes::Some(Vec::new()), parse_passes, [UNTRACKED],\n+        \"print remarks for these optimization passes (space separated, or \\\"all\\\")\"),\n+    rpath: bool = (false, parse_bool, [UNTRACKED],\n+        \"set rpath values in libs/exes (default: no)\"),\n+    save_temps: bool = (false, parse_bool, [UNTRACKED],\n+        \"save all temporary output files during compilation (default: no)\"),\n+    soft_float: bool = (false, parse_bool, [TRACKED],\n+        \"use soft float ABI (*eabihf targets only) (default: no)\"),\n+    target_cpu: Option<String> = (None, parse_opt_string, [TRACKED],\n+        \"select target processor (`rustc --print target-cpus` for details)\"),\n+    target_feature: String = (String::new(), parse_string, [TRACKED],\n+        \"target specific attributes. (`rustc --print target-features` for details). \\\n+        This feature is unsafe.\"),\n+\n+    // This list is in alphabetical order.\n+    //\n+    // If you add a new option, please update:\n+    // - src/librustc_interface/tests.rs\n+    // - src/doc/rustc/src/codegen-options/index.md\n }\n \n options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           build_debugging_options, \"Z\", \"debugging\",\n           DB_OPTIONS, db_type_desc, dbsetters,\n-    codegen_backend: Option<String> = (None, parse_opt_string, [TRACKED],\n-        \"the backend to use\"),\n-    verbose: bool = (false, parse_bool, [UNTRACKED],\n-        \"in general, enable more debug printouts (default: no)\"),\n-    // o/w tests have closure@path\n-    span_free_formats: bool = (false, parse_bool, [UNTRACKED],\n-        \"exclude spans when debug-printing compiler state (default: no)\"),\n-    identify_regions: bool = (false, parse_bool, [UNTRACKED],\n-        \"display unnamed regions as `'<id>`, using a non-ident unique id (default: no)\"),\n-    borrowck: String = (\"migrate\".to_string(), parse_string, [UNTRACKED],\n-        \"select which borrowck is used (`mir` or `migrate`) (default: `migrate`)\"),\n-    time_passes: bool = (false, parse_bool, [UNTRACKED],\n-        \"measure time of each rustc pass (default: no)\"),\n-    time: bool = (false, parse_bool, [UNTRACKED],\n-        \"measure time of rustc processes (default: no)\"),\n-    time_llvm_passes: bool = (false, parse_bool, [UNTRACKED],\n-        \"measure time of each LLVM pass (default: no)\"),\n-    llvm_time_trace: bool = (false, parse_bool, [UNTRACKED],\n-        \"generate JSON tracing data file from LLVM data (default: no)\"),\n-    input_stats: bool = (false, parse_bool, [UNTRACKED],\n-        \"gather statistics about the input (default: no)\"),\n+\n+    // This list is in alphabetical order.\n+    //\n+    // If you add a new option, please update:\n+    // - src/librustc_interface/tests.rs\n+\n+    allow_features: Option<Vec<String>> = (None, parse_opt_comma_list, [TRACKED],\n+        \"only allow the listed language features to be enabled in code (space separated)\"),\n+    always_encode_mir: bool = (false, parse_bool, [TRACKED],\n+        \"encode MIR of all functions into the crate metadata (default: no)\"),\n     asm_comments: bool = (false, parse_bool, [TRACKED],\n         \"generate comments into the assembly (may change behavior) (default: no)\"),\n-    verify_llvm_ir: bool = (false, parse_bool, [TRACKED],\n-        \"verify LLVM IR (default: no)\"),\n-    borrowck_stats: bool = (false, parse_bool, [UNTRACKED],\n-        \"gather borrowck statistics (default: no)\"),\n-    no_landing_pads: bool = (false, parse_no_flag, [TRACKED],\n-        \"omit landing pads for unwinding\"),\n-    fewer_names: bool = (false, parse_bool, [TRACKED],\n-        \"reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR) \\\n-        (default: no)\"),\n-    meta_stats: bool = (false, parse_bool, [UNTRACKED],\n-        \"gather metadata statistics (default: no)\"),\n-    print_link_args: bool = (false, parse_bool, [UNTRACKED],\n-        \"print the arguments passed to the linker (default: no)\"),\n-    print_llvm_passes: bool = (false, parse_bool, [UNTRACKED],\n-        \"print the LLVM optimization passes being run (default: no)\"),\n     ast_json: bool = (false, parse_bool, [UNTRACKED],\n         \"print the AST as JSON and halt (default: no)\"),\n-    // We default to 1 here since we want to behave like\n-    // a sequential compiler for now. This'll likely be adjusted\n-    // in the future. Note that -Zthreads=0 is the way to get\n-    // the num_cpus behavior.\n-    threads: usize = (1, parse_threads, [UNTRACKED],\n-        \"use a thread pool with N threads\"),\n     ast_json_noexpand: bool = (false, parse_bool, [UNTRACKED],\n         \"print the pre-expansion AST as JSON and halt (default: no)\"),\n-    ls: bool = (false, parse_bool, [UNTRACKED],\n-        \"list the symbols defined by a library crate (default: no)\"),\n-    save_analysis: bool = (false, parse_bool, [UNTRACKED],\n-        \"write syntax and type analysis (in JSON format) information, in \\\n-         addition to normal output (default: no)\"),\n-    print_region_graph: bool = (false, parse_bool, [UNTRACKED],\n-        \"prints region inference graph. \\\n-         Use with RUST_REGION_GRAPH=help for more info (default: no)\"),\n-    parse_only: bool = (false, parse_bool, [UNTRACKED],\n-        \"parse only; do not compile, assemble, or link (default: no)\"),\n-    dual_proc_macros: bool = (false, parse_bool, [TRACKED],\n-        \"load proc macros for both target and host, but only link to the target (default: no)\"),\n-    no_codegen: bool = (false, parse_no_flag, [TRACKED],\n-        \"run all passes except codegen; no output\"),\n-    treat_err_as_bug: Option<usize> = (None, parse_treat_err_as_bug, [TRACKED],\n-        \"treat error number `val` that occurs as bug\"),\n-    report_delayed_bugs: bool = (false, parse_bool, [TRACKED],\n-        \"immediately print bugs registered with `delay_span_bug` (default: no)\"),\n-    macro_backtrace: bool = (false, parse_bool, [UNTRACKED],\n-        \"show macro backtraces (default: no)\"),\n-    teach: bool = (false, parse_bool, [TRACKED],\n-        \"show extended diagnostic help (default: no)\"),\n-    terminal_width: Option<usize> = (None, parse_opt_uint, [UNTRACKED],\n-        \"set the current terminal width\"),\n-    panic_abort_tests: bool = (false, parse_bool, [TRACKED],\n-        \"support compiling tests with panic=abort (default: no)\"),\n+    binary_dep_depinfo: bool = (false, parse_bool, [TRACKED],\n+        \"include artifacts (sysroot, crate dependencies) used during compilation in dep-info \\\n+        (default: no)\"),\n+    borrowck: String = (\"migrate\".to_string(), parse_string, [UNTRACKED],\n+        \"select which borrowck is used (`mir` or `migrate`) (default: `migrate`)\"),\n+    borrowck_stats: bool = (false, parse_bool, [UNTRACKED],\n+        \"gather borrowck statistics (default: no)\"),\n+    codegen_backend: Option<String> = (None, parse_opt_string, [TRACKED],\n+        \"the backend to use\"),\n+    control_flow_guard: CFGuard = (CFGuard::Disabled, parse_cfguard, [UNTRACKED],\n+        \"use Windows Control Flow Guard (`disabled`, `nochecks` or `checks`)\"),\n+    crate_attr: Vec<String> = (Vec::new(), parse_string_push, [TRACKED],\n+        \"inject the given attribute in the crate\"),\n+    debug_macros: bool = (false, parse_bool, [TRACKED],\n+        \"emit line numbers debug info inside macros (default: no)\"),\n+    deduplicate_diagnostics: bool = (true, parse_bool, [UNTRACKED],\n+        \"deduplicate identical diagnostics (default: yes)\"),\n+    dep_info_omit_d_target: bool = (false, parse_bool, [TRACKED],\n+        \"in dep-info output, omit targets for tracking dependencies of the dep-info files \\\n+        themselves (default: no)\"),\n     dep_tasks: bool = (false, parse_bool, [UNTRACKED],\n         \"print tasks that execute and the color their dep node gets (requires debug build) \\\n         (default: no)\"),\n-    incremental_info: bool = (false, parse_bool, [UNTRACKED],\n-        \"print high-level information about incremental reuse (or the lack thereof) \\\n+    dont_buffer_diagnostics: bool = (false, parse_bool, [UNTRACKED],\n+        \"emit diagnostics rather than buffering (breaks NLL error downgrading, sorting) \\\n         (default: no)\"),\n-    incremental_verify_ich: bool = (false, parse_bool, [UNTRACKED],\n-        \"verify incr. comp. hashes of green query instances (default: no)\"),\n-    incremental_ignore_spans: bool = (false, parse_bool, [UNTRACKED],\n-        \"ignore spans during ICH computation -- used for testing (default: no)\"),\n-    instrument_mcount: bool = (false, parse_bool, [TRACKED],\n-        \"insert function instrument code for mcount-based tracing (default: no)\"),\n+    dual_proc_macros: bool = (false, parse_bool, [TRACKED],\n+        \"load proc macros for both target and host, but only link to the target (default: no)\"),\n     dump_dep_graph: bool = (false, parse_bool, [UNTRACKED],\n         \"dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv) \\\n         (default: no)\"),\n-    query_dep_graph: bool = (false, parse_bool, [UNTRACKED],\n-        \"enable queries of the dependency graph for regression testing (default: no)\"),\n-    no_analysis: bool = (false, parse_no_flag, [UNTRACKED],\n-        \"parse and expand the source, but run no analysis\"),\n-    unstable_options: bool = (false, parse_bool, [UNTRACKED],\n-        \"adds unstable command line options to rustc interface (default: no)\"),\n-    force_overflow_checks: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-        \"force overflow checks on or off\"),\n-    trace_macros: bool = (false, parse_bool, [UNTRACKED],\n-        \"for every macro invocation, print its name and arguments (default: no)\"),\n-    debug_macros: bool = (false, parse_bool, [TRACKED],\n-        \"emit line numbers debug info inside macros (default: no)\"),\n-    no_generate_arange_section: bool = (false, parse_no_flag, [TRACKED],\n-        \"omit DWARF address ranges that give faster lookups\"),\n-    keep_hygiene_data: bool = (false, parse_bool, [UNTRACKED],\n-        \"keep hygiene data after analysis (default: no)\"),\n-    show_span: Option<String> = (None, parse_opt_string, [TRACKED],\n-        \"show spans for compiler debugging (expr|pat|ty)\"),\n-    print_type_sizes: bool = (false, parse_bool, [UNTRACKED],\n-        \"print layout information for each type encountered (default: no)\"),\n-    print_mono_items: Option<String> = (None, parse_opt_string, [UNTRACKED],\n-        \"print the result of the monomorphization collection pass\"),\n-    mir_opt_level: usize = (1, parse_uint, [TRACKED],\n-        \"MIR optimization level (0-3; default: 1)\"),\n-    mutable_noalias: bool = (false, parse_bool, [TRACKED],\n-        \"emit noalias metadata for mutable references (default: no)\"),\n     dump_mir: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"dump MIR state to file.\n         `val` is used to select which passes and functions to dump. For example:\n         `all` matches all passes and functions,\n         `foo` matches all passes for functions whose name contains 'foo',\n         `foo & ConstProp` only the 'ConstProp' pass for function names containing 'foo',\n         `foo | bar` all passes for function names containing 'foo' or 'bar'.\"),\n-\n+    dump_mir_dataflow: bool = (false, parse_bool, [UNTRACKED],\n+        \"in addition to `.mir` files, create graphviz `.dot` files with dataflow results \\\n+        (default: no)\"),\n     dump_mir_dir: String = (\"mir_dump\".to_string(), parse_string, [UNTRACKED],\n         \"the directory the MIR is dumped into (default: `mir_dump`)\"),\n-    dump_mir_graphviz: bool = (false, parse_bool, [UNTRACKED],\n-        \"in addition to `.mir` files, create graphviz `.dot` files (default: no)\"),\n-    dump_mir_dataflow: bool = (false, parse_bool, [UNTRACKED],\n-        \"in addition to `.mir` files, create graphviz `.dot` files with dataflow results (default: no)\"),\n     dump_mir_exclude_pass_number: bool = (false, parse_bool, [UNTRACKED],\n         \"exclude the pass number when dumping MIR (used in tests) (default: no)\"),\n-    mir_emit_retag: bool = (false, parse_bool, [TRACKED],\n-        \"emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 \\\n-        (default: no)\"),\n-    perf_stats: bool = (false, parse_bool, [UNTRACKED],\n-        \"print some performance-related statistics (default: no)\"),\n-    query_stats: bool = (false, parse_bool, [UNTRACKED],\n-        \"print some statistics about the query system (default: no)\"),\n-    hir_stats: bool = (false, parse_bool, [UNTRACKED],\n+    dump_mir_graphviz: bool = (false, parse_bool, [UNTRACKED],\n+        \"in addition to `.mir` files, create graphviz `.dot` files (default: no)\"),\n+    embed_bitcode: bool = (false, parse_bool, [TRACKED],\n+        \"embed LLVM bitcode in object files (default: no)\"),\n+    emit_stack_sizes: bool = (false, parse_bool, [UNTRACKED],\n+        \"emit a section containing stack size metadata (default: no)\"),\n+    fewer_names: bool = (false, parse_bool, [TRACKED],\n+        \"reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR) \\\n+        (default: no)\"),\n+    force_overflow_checks: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"force overflow checks on or off\"),\n+    force_unstable_if_unmarked: bool = (false, parse_bool, [TRACKED],\n+        \"force all crates to be `rustc_private` unstable (default: no)\"),\n+    fuel: Option<(String, u64)> = (None, parse_optimization_fuel, [TRACKED],\n+        \"set the optimization fuel quota for a crate\"),\n+    hir_stats: bool = (false, parse_bool, [UNTRACKED],\n         \"print some statistics about AST and HIR (default: no)\"),\n-    always_encode_mir: bool = (false, parse_bool, [TRACKED],\n-        \"encode MIR of all functions into the crate metadata (default: no)\"),\n-    unleash_the_miri_inside_of_you: bool = (false, parse_bool, [TRACKED],\n-        \"take the brakes off const evaluation. NOTE: this is unsound (default: no)\"),\n+    human_readable_cgu_names: bool = (false, parse_bool, [TRACKED],\n+        \"generate human-readable, predictable names for codegen units (default: no)\"),\n+    identify_regions: bool = (false, parse_bool, [UNTRACKED],\n+        \"display unnamed regions as `'<id>`, using a non-ident unique id (default: no)\"),\n+    incremental_ignore_spans: bool = (false, parse_bool, [UNTRACKED],\n+        \"ignore spans during ICH computation -- used for testing (default: no)\"),\n+    incremental_info: bool = (false, parse_bool, [UNTRACKED],\n+        \"print high-level information about incremental reuse (or the lack thereof) \\\n+        (default: no)\"),\n+    incremental_verify_ich: bool = (false, parse_bool, [UNTRACKED],\n+        \"verify incr. comp. hashes of green query instances (default: no)\"),\n+    inline_in_all_cgus: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"control whether `#[inline]` functions are in all CGUs\"),\n+    input_stats: bool = (false, parse_bool, [UNTRACKED],\n+        \"gather statistics about the input (default: no)\"),\n+    insert_sideeffect: bool = (false, parse_bool, [TRACKED],\n+        \"fix undefined behavior when a thread doesn't eventually make progress \\\n+        (such as entering an empty infinite loop) by inserting llvm.sideeffect \\\n+        (default: no)\"),\n+    instrument_mcount: bool = (false, parse_bool, [TRACKED],\n+        \"insert function instrument code for mcount-based tracing (default: no)\"),\n+    keep_hygiene_data: bool = (false, parse_bool, [UNTRACKED],\n+        \"keep hygiene data after analysis (default: no)\"),\n+    link_native_libraries: bool = (true, parse_bool, [UNTRACKED],\n+        \"link native libraries in the linker invocation (default: yes)\"),\n+    link_only: bool = (false, parse_bool, [TRACKED],\n+        \"link the `.rlink` file generated by `-Z no-link` (default: no)\"),\n+    llvm_time_trace: bool = (false, parse_bool, [UNTRACKED],\n+        \"generate JSON tracing data file from LLVM data (default: no)\"),\n+    ls: bool = (false, parse_bool, [UNTRACKED],\n+        \"list the symbols defined by a library crate (default: no)\"),\n+    macro_backtrace: bool = (false, parse_bool, [UNTRACKED],\n+        \"show macro backtraces (default: no)\"),\n+    merge_functions: Option<MergeFunctions> = (None, parse_merge_functions, [TRACKED],\n+        \"control the operation of the MergeFunctions LLVM pass, taking \\\n+        the same values as the target option of the same name\"),\n+    meta_stats: bool = (false, parse_bool, [UNTRACKED],\n+        \"gather metadata statistics (default: no)\"),\n+    mir_emit_retag: bool = (false, parse_bool, [TRACKED],\n+        \"emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 \\\n+        (default: no)\"),\n+    mir_opt_level: usize = (1, parse_uint, [TRACKED],\n+        \"MIR optimization level (0-3; default: 1)\"),\n+    mutable_noalias: bool = (false, parse_bool, [TRACKED],\n+        \"emit noalias metadata for mutable references (default: no)\"),\n+    new_llvm_pass_manager: bool = (false, parse_bool, [TRACKED],\n+        \"use new LLVM pass manager (default: no)\"),\n+    nll_facts: bool = (false, parse_bool, [UNTRACKED],\n+        \"dump facts from NLL analysis into side files (default: no)\"),\n+    no_analysis: bool = (false, parse_no_flag, [UNTRACKED],\n+        \"parse and expand the source, but run no analysis\"),\n+    no_codegen: bool = (false, parse_no_flag, [TRACKED],\n+        \"run all passes except codegen; no output\"),\n+    no_generate_arange_section: bool = (false, parse_no_flag, [TRACKED],\n+        \"omit DWARF address ranges that give faster lookups\"),\n+    no_interleave_lints: bool = (false, parse_no_flag, [UNTRACKED],\n+        \"execute lints separately; allows benchmarking individual lints\"),\n+    no_landing_pads: bool = (false, parse_no_flag, [TRACKED],\n+        \"omit landing pads for unwinding\"),\n+    no_leak_check: bool = (false, parse_no_flag, [UNTRACKED],\n+        \"disable the 'leak check' for subtyping; unsound, but useful for tests\"),\n+    no_link: bool = (false, parse_no_flag, [TRACKED],\n+        \"compile without linking\"),\n+    no_parallel_llvm: bool = (false, parse_no_flag, [UNTRACKED],\n+        \"run LLVM in non-parallel mode (while keeping codegen-units and ThinLTO)\"),\n+    no_profiler_runtime: bool = (false, parse_no_flag, [TRACKED],\n+        \"prevent automatic injection of the profiler_builtins crate\"),\n     osx_rpath_install_name: bool = (false, parse_bool, [TRACKED],\n         \"pass `-install_name @rpath/...` to the macOS linker (default: no)\"),\n-    sanitizer: Option<Sanitizer> = (None, parse_sanitizer, [TRACKED],\n-        \"use a sanitizer\"),\n-    sanitizer_recover: Vec<Sanitizer> = (vec![], parse_sanitizer_list, [TRACKED],\n-        \"enable recovery for selected sanitizers\"),\n-    sanitizer_memory_track_origins: usize = (0, parse_sanitizer_memory_track_origins, [TRACKED],\n-        \"enable origins tracking in MemorySanitizer\"),\n-    fuel: Option<(String, u64)> = (None, parse_optimization_fuel, [TRACKED],\n-        \"set the optimization fuel quota for a crate\"),\n-    print_fuel: Option<String> = (None, parse_opt_string, [TRACKED],\n-        \"make rustc print the total optimization fuel used by a crate\"),\n-    force_unstable_if_unmarked: bool = (false, parse_bool, [TRACKED],\n-        \"force all crates to be `rustc_private` unstable (default: no)\"),\n+    panic_abort_tests: bool = (false, parse_bool, [TRACKED],\n+        \"support compiling tests with panic=abort (default: no)\"),\n+    parse_only: bool = (false, parse_bool, [UNTRACKED],\n+        \"parse only; do not compile, assemble, or link (default: no)\"),\n+    perf_stats: bool = (false, parse_bool, [UNTRACKED],\n+        \"print some performance-related statistics (default: no)\"),\n+    plt: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"whether to use the PLT when calling into shared libraries;\n+        only has effect for PIC code on systems with ELF binaries\n+        (default: PLT is disabled if full relro is enabled)\"),\n+    polonius: bool = (false, parse_bool, [UNTRACKED],\n+        \"enable polonius-based borrow-checker (default: no)\"),\n     pre_link_arg: (/* redirected to pre_link_args */) = ((), parse_string_push, [UNTRACKED],\n         \"a single extra argument to prepend the linker invocation (can be used several times)\"),\n     pre_link_args: Vec<String> = (Vec::new(), parse_list, [UNTRACKED],\n         \"extra arguments to prepend to the linker invocation (space separated)\"),\n+    print_fuel: Option<String> = (None, parse_opt_string, [TRACKED],\n+        \"make rustc print the total optimization fuel used by a crate\"),\n+    print_link_args: bool = (false, parse_bool, [UNTRACKED],\n+        \"print the arguments passed to the linker (default: no)\"),\n+    print_llvm_passes: bool = (false, parse_bool, [UNTRACKED],\n+        \"print the LLVM optimization passes being run (default: no)\"),\n+    print_mono_items: Option<String> = (None, parse_opt_string, [UNTRACKED],\n+        \"print the result of the monomorphization collection pass\"),\n+    print_region_graph: bool = (false, parse_bool, [UNTRACKED],\n+        \"prints region inference graph. \\\n+        Use with RUST_REGION_GRAPH=help for more info (default: no)\"),\n+    print_type_sizes: bool = (false, parse_bool, [UNTRACKED],\n+        \"print layout information for each type encountered (default: no)\"),\n     profile: bool = (false, parse_bool, [TRACKED],\n         \"insert profiling code (default: no)\"),\n-    no_profiler_runtime: bool = (false, parse_no_flag, [TRACKED],\n-        \"prevent automatic injection of the profiler_builtins crate\"),\n+    query_dep_graph: bool = (false, parse_bool, [UNTRACKED],\n+        \"enable queries of the dependency graph for regression testing (default: no)\"),\n+    query_stats: bool = (false, parse_bool, [UNTRACKED],\n+        \"print some statistics about the query system (default: no)\"),\n     relro_level: Option<RelroLevel> = (None, parse_relro_level, [TRACKED],\n         \"choose which RELRO level to use\"),\n-    nll_facts: bool = (false, parse_bool, [UNTRACKED],\n-        \"dump facts from NLL analysis into side files (default: no)\"),\n-    dont_buffer_diagnostics: bool = (false, parse_bool, [UNTRACKED],\n-        \"emit diagnostics rather than buffering (breaks NLL error downgrading, sorting) \\\n-        (default: no)\"),\n-    polonius: bool = (false, parse_bool, [UNTRACKED],\n-        \"enable polonius-based borrow-checker (default: no)\"),\n-    thinlto: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-        \"enable ThinLTO when possible\"),\n-    inline_in_all_cgus: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-        \"control whether `#[inline]` functions are in all CGUs\"),\n-    tls_model: Option<String> = (None, parse_opt_string, [TRACKED],\n-        \"choose the TLS model to use (`rustc --print tls-models` for details)\"),\n-    saturating_float_casts: bool = (false, parse_bool, [TRACKED],\n-        \"make float->int casts UB-free: numbers outside the integer type's range are clipped to \\\n-         the max/min integer respectively, and NaN is mapped to 0 (default: no)\"),\n-    human_readable_cgu_names: bool = (false, parse_bool, [TRACKED],\n-        \"generate human-readable, predictable names for codegen units (default: no)\"),\n-    dep_info_omit_d_target: bool = (false, parse_bool, [TRACKED],\n-        \"in dep-info output, omit targets for tracking dependencies of the dep-info files \\\n-         themselves (default: no)\"),\n-    unpretty: Option<String> = (None, parse_unpretty, [UNTRACKED],\n-        \"present the input source, unstable (and less-pretty) variants;\n-        valid types are any of the types for `--pretty`, as well as:\n-        `expanded`, `expanded,identified`,\n-        `expanded,hygiene` (with internal representations),\n-        `everybody_loops` (all function bodies replaced with `loop {}`),\n-        `hir` (the HIR), `hir,identified`,\n-        `hir,typed` (HIR with types for each node),\n-        `hir-tree` (dump the raw HIR),\n-        `mir` (the MIR), or `mir-cfg` (graphviz formatted MIR)\"),\n+    report_delayed_bugs: bool = (false, parse_bool, [TRACKED],\n+        \"immediately print bugs registered with `delay_span_bug` (default: no)\"),\n     // The default historical behavior was to always run dsymutil, so we're\n     // preserving that temporarily, but we're likely to switch the default\n     // soon.\n     run_dsymutil: bool = (true, parse_bool, [TRACKED],\n         \"if on Mac, run `dsymutil` and delete intermediate object files (default: yes)\"),\n-    ui_testing: bool = (false, parse_bool, [UNTRACKED],\n-        \"emit compiler diagnostics in a form suitable for UI testing (default: no)\"),\n-    embed_bitcode: bool = (false, parse_bool, [TRACKED],\n-        \"embed LLVM bitcode in object files (default: no)\"),\n-    strip_debuginfo_if_disabled: bool = (false, parse_bool, [TRACKED],\n-        \"tell the linker to strip debuginfo when building without debuginfo enabled \\\n-        (default: no)\"),\n-    share_generics: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-        \"make the current crate share its generic instantiations\"),\n-    no_parallel_llvm: bool = (false, parse_no_flag, [UNTRACKED],\n-        \"run LLVM in non-parallel mode (while keeping codegen-units and ThinLTO)\"),\n-    no_leak_check: bool = (false, parse_no_flag, [UNTRACKED],\n-        \"disable the 'leak check' for subtyping; unsound, but useful for tests\"),\n-    no_interleave_lints: bool = (false, parse_no_flag, [UNTRACKED],\n-        \"execute lints separately; allows benchmarking individual lints\"),\n-    crate_attr: Vec<String> = (Vec::new(), parse_string_push, [TRACKED],\n-        \"inject the given attribute in the crate\"),\n+    sanitizer: Option<Sanitizer> = (None, parse_sanitizer, [TRACKED],\n+        \"use a sanitizer\"),\n+    sanitizer_memory_track_origins: usize = (0, parse_sanitizer_memory_track_origins, [TRACKED],\n+        \"enable origins tracking in MemorySanitizer\"),\n+    sanitizer_recover: Vec<Sanitizer> = (vec![], parse_sanitizer_list, [TRACKED],\n+        \"enable recovery for selected sanitizers\"),\n+    saturating_float_casts: bool = (false, parse_bool, [TRACKED],\n+        \"make float->int casts UB-free: numbers outside the integer type's range are clipped to \\\n+        the max/min integer respectively, and NaN is mapped to 0 (default: no)\"),\n+    save_analysis: bool = (false, parse_bool, [UNTRACKED],\n+        \"write syntax and type analysis (in JSON format) information, in \\\n+        addition to normal output (default: no)\"),\n     self_profile: SwitchWithOptPath = (SwitchWithOptPath::Disabled,\n         parse_switch_with_opt_path, [UNTRACKED],\n         \"run the self profiler and output the raw event data\"),\n@@ -940,39 +935,68 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         for example: `-Z self-profile-events=default,query-keys`\n         all options: none, all, default, generic-activity, query-provider, query-cache-hit\n                      query-blocked, incr-cache-load, query-keys, function-args, args, llvm\"),\n-    emit_stack_sizes: bool = (false, parse_bool, [UNTRACKED],\n-        \"emit a section containing stack size metadata (default: no)\"),\n-    plt: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-        \"whether to use the PLT when calling into shared libraries;\n-        only has effect for PIC code on systems with ELF binaries\n-        (default: PLT is disabled if full relro is enabled)\"),\n-    merge_functions: Option<MergeFunctions> = (None, parse_merge_functions, [TRACKED],\n-        \"control the operation of the MergeFunctions LLVM pass, taking \\\n-         the same values as the target option of the same name\"),\n-    allow_features: Option<Vec<String>> = (None, parse_opt_comma_list, [TRACKED],\n-        \"only allow the listed language features to be enabled in code (space separated)\"),\n+    share_generics: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"make the current crate share its generic instantiations\"),\n+    show_span: Option<String> = (None, parse_opt_string, [TRACKED],\n+        \"show spans for compiler debugging (expr|pat|ty)\"),\n+    // o/w tests have closure@path\n+    span_free_formats: bool = (false, parse_bool, [UNTRACKED],\n+        \"exclude spans when debug-printing compiler state (default: no)\"),\n+    src_hash_algorithm: Option<SourceFileHashAlgorithm> = (None, parse_src_file_hash, [TRACKED],\n+        \"hash algorithm of source files in debug info (`md5`, or `sha1`)\"),\n+    strip_debuginfo_if_disabled: bool = (false, parse_bool, [TRACKED],\n+        \"tell the linker to strip debuginfo when building without debuginfo enabled \\\n+        (default: no)\"),\n     symbol_mangling_version: SymbolManglingVersion = (SymbolManglingVersion::Legacy,\n         parse_symbol_mangling_version, [TRACKED],\n         \"which mangling version to use for symbol names\"),\n-    binary_dep_depinfo: bool = (false, parse_bool, [TRACKED],\n-        \"include artifacts (sysroot, crate dependencies) used during compilation in dep-info \\\n-        (default: no)\"),\n-    insert_sideeffect: bool = (false, parse_bool, [TRACKED],\n-        \"fix undefined behavior when a thread doesn't eventually make progress \\\n-         (such as entering an empty infinite loop) by inserting llvm.sideeffect \\\n-         (default: no)\"),\n-    deduplicate_diagnostics: bool = (true, parse_bool, [UNTRACKED],\n-        \"deduplicate identical diagnostics (default: yes)\"),\n-    control_flow_guard: CFGuard = (CFGuard::Disabled, parse_cfguard, [UNTRACKED],\n-        \"use Windows Control Flow Guard (`disabled`, `nochecks` or `checks`)\"),\n-    no_link: bool = (false, parse_no_flag, [TRACKED],\n-        \"compile without linking\"),\n-    link_only: bool = (false, parse_bool, [TRACKED],\n-        \"link the `.rlink` file generated by `-Z no-link` (default: no)\"),\n-    new_llvm_pass_manager: bool = (false, parse_bool, [TRACKED],\n-        \"use new LLVM pass manager (default: no)\"),\n-    link_native_libraries: bool = (true, parse_bool, [UNTRACKED],\n-        \"link native libraries in the linker invocation (default: yes)\"),\n-    src_hash_algorithm: Option<SourceFileHashAlgorithm> = (None, parse_src_file_hash, [TRACKED],\n-        \"hash algorithm of source files in debug info (`md5`, or `sha1`)\"),\n+    teach: bool = (false, parse_bool, [TRACKED],\n+        \"show extended diagnostic help (default: no)\"),\n+    terminal_width: Option<usize> = (None, parse_opt_uint, [UNTRACKED],\n+        \"set the current terminal width\"),\n+    thinlto: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"enable ThinLTO when possible\"),\n+    // We default to 1 here since we want to behave like\n+    // a sequential compiler for now. This'll likely be adjusted\n+    // in the future. Note that -Zthreads=0 is the way to get\n+    // the num_cpus behavior.\n+    threads: usize = (1, parse_threads, [UNTRACKED],\n+        \"use a thread pool with N threads\"),\n+    time: bool = (false, parse_bool, [UNTRACKED],\n+        \"measure time of rustc processes (default: no)\"),\n+    time_llvm_passes: bool = (false, parse_bool, [UNTRACKED],\n+        \"measure time of each LLVM pass (default: no)\"),\n+    time_passes: bool = (false, parse_bool, [UNTRACKED],\n+        \"measure time of each rustc pass (default: no)\"),\n+    tls_model: Option<String> = (None, parse_opt_string, [TRACKED],\n+        \"choose the TLS model to use (`rustc --print tls-models` for details)\"),\n+    trace_macros: bool = (false, parse_bool, [UNTRACKED],\n+        \"for every macro invocation, print its name and arguments (default: no)\"),\n+    treat_err_as_bug: Option<usize> = (None, parse_treat_err_as_bug, [TRACKED],\n+        \"treat error number `val` that occurs as bug\"),\n+    ui_testing: bool = (false, parse_bool, [UNTRACKED],\n+        \"emit compiler diagnostics in a form suitable for UI testing (default: no)\"),\n+    unleash_the_miri_inside_of_you: bool = (false, parse_bool, [TRACKED],\n+        \"take the brakes off const evaluation. NOTE: this is unsound (default: no)\"),\n+    unpretty: Option<String> = (None, parse_unpretty, [UNTRACKED],\n+        \"present the input source, unstable (and less-pretty) variants;\n+        valid types are any of the types for `--pretty`, as well as:\n+        `expanded`, `expanded,identified`,\n+        `expanded,hygiene` (with internal representations),\n+        `everybody_loops` (all function bodies replaced with `loop {}`),\n+        `hir` (the HIR), `hir,identified`,\n+        `hir,typed` (HIR with types for each node),\n+        `hir-tree` (dump the raw HIR),\n+        `mir` (the MIR), or `mir-cfg` (graphviz formatted MIR)\"),\n+    unstable_options: bool = (false, parse_bool, [UNTRACKED],\n+        \"adds unstable command line options to rustc interface (default: no)\"),\n+    verbose: bool = (false, parse_bool, [UNTRACKED],\n+        \"in general, enable more debug printouts (default: no)\"),\n+    verify_llvm_ir: bool = (false, parse_bool, [TRACKED],\n+        \"verify LLVM IR (default: no)\"),\n+\n+    // This list is in alphabetical order.\n+    //\n+    // If you add a new option, please update:\n+    // - src/librustc_interface/tests.rs\n }"}]}