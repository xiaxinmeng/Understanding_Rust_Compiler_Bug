{"sha": "1ab5593f951c07a6f0ed05fbbfe8f262863158a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYjU1OTNmOTUxYzA3YTZmMGVkMDVmYmJmZThmMjYyODYzMTU4YTA=", "commit": {"author": {"name": "gaolei", "email": "gaolei@zhihu.com", "date": "2019-09-19T07:13:40Z"}, "committer": {"name": "gaolei", "email": "gaolei@zhihu.com", "date": "2019-09-19T16:25:27Z"}, "message": "factor out pluralisation remains after #64280", "tree": {"sha": "75025d763369bc6d4c99b5023ad37a3d2502908d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75025d763369bc6d4c99b5023ad37a3d2502908d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ab5593f951c07a6f0ed05fbbfe8f262863158a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ab5593f951c07a6f0ed05fbbfe8f262863158a0", "html_url": "https://github.com/rust-lang/rust/commit/1ab5593f951c07a6f0ed05fbbfe8f262863158a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/comments", "author": null, "committer": null, "parents": [{"sha": "19d070393c05da7dfa1948f17872e55603a8c359", "url": "https://api.github.com/repos/rust-lang/rust/commits/19d070393c05da7dfa1948f17872e55603a8c359", "html_url": "https://github.com/rust-lang/rust/commit/19d070393c05da7dfa1948f17872e55603a8c359"}], "stats": {"total": 101, "additions": 56, "deletions": 45}, "files": [{"sha": "5906a6388a8bd5209ed84ebb67323ce065d37129", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=1ab5593f951c07a6f0ed05fbbfe8f262863158a0", "patch": "@@ -7,7 +7,7 @@\n use crate::lint::{LintPass, LateLintPass, LintArray};\n use crate::middle::stability;\n use crate::session::Session;\n-use errors::{Applicability, DiagnosticBuilder};\n+use errors::{Applicability, DiagnosticBuilder, pluralise};\n use syntax::ast;\n use syntax::source_map::Span;\n use syntax::symbol::Symbol;\n@@ -524,7 +524,7 @@ pub(crate) fn add_elided_lifetime_in_path_suggestion(\n     };\n     db.span_suggestion(\n         replace_span,\n-        &format!(\"indicate the anonymous lifetime{}\", if n >= 2 { \"s\" } else { \"\" }),\n+        &format!(\"indicate the anonymous lifetime{}\", pluralise!(n)),\n         suggestion,\n         Applicability::MachineApplicable\n     );"}, {"sha": "d833a34385b2d8400f0830c87d339250d915376d", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=1ab5593f951c07a6f0ed05fbbfe8f262863158a0", "patch": "@@ -17,7 +17,7 @@ use crate::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n use crate::rustc::lint;\n use crate::session::Session;\n use crate::util::nodemap::{DefIdMap, FxHashMap, FxHashSet, HirIdMap, HirIdSet};\n-use errors::{Applicability, DiagnosticBuilder};\n+use errors::{Applicability, DiagnosticBuilder, pluralise};\n use rustc_macros::HashStable;\n use std::borrow::Cow;\n use std::cell::Cell;\n@@ -3047,7 +3047,7 @@ pub fn report_missing_lifetime_specifiers(\n         span,\n         E0106,\n         \"missing lifetime specifier{}\",\n-        if count > 1 { \"s\" } else { \"\" }\n+        pluralise!(count)\n     )\n }\n "}, {"sha": "0b06ec070381129f8434904e14f71e706f206e4d", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=1ab5593f951c07a6f0ed05fbbfe8f262863158a0", "patch": "@@ -33,7 +33,7 @@ use crate::ty::subst::Subst;\n use crate::ty::SubtypePredicate;\n use crate::util::nodemap::{FxHashMap, FxHashSet};\n \n-use errors::{Applicability, DiagnosticBuilder};\n+use errors::{Applicability, DiagnosticBuilder, pluralise};\n use std::fmt;\n use syntax::ast;\n use syntax::symbol::{sym, kw};\n@@ -1186,7 +1186,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 _ => format!(\"{} {}argument{}\",\n                              arg_length,\n                              if distinct && arg_length > 1 { \"distinct \" } else { \"\" },\n-                             if arg_length == 1 { \"\" } else { \"s\" }),\n+                             pluralise!(arg_length))\n             }\n         };\n "}, {"sha": "5409cbc4129f0bf19a230431c23e8378d9094193", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=1ab5593f951c07a6f0ed05fbbfe8f262863158a0", "patch": "@@ -196,7 +196,7 @@ impl<'tcx> ty::TyS<'tcx> {\n                 let n = tcx.lift_to_global(&n).unwrap();\n                 match n.try_eval_usize(tcx, ty::ParamEnv::empty()) {\n                     Some(n) => {\n-                        format!(\"array of {} element{}\", n, if n != 1 { \"s\" } else { \"\" }).into()\n+                        format!(\"array of {} element{}\", n, pluralise!(n)).into()\n                     }\n                     None => \"array\".into(),\n                 }"}, {"sha": "2d4af2f606a2cc997f276861d254935e20fd237a", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=1ab5593f951c07a6f0ed05fbbfe8f262863158a0", "patch": "@@ -9,7 +9,7 @@ use lint::{LintPass, EarlyLintPass, LateLintPass};\n \n use syntax::ast;\n use syntax::attr;\n-use syntax::errors::Applicability;\n+use syntax::errors::{Applicability, pluralise};\n use syntax::feature_gate::{AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n use syntax::print::pprust;\n use syntax::symbol::{kw, sym};\n@@ -48,7 +48,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n         }\n \n         let ty = cx.tables.expr_ty(&expr);\n-        let type_permits_lack_of_use = check_must_use_ty(cx, ty, &expr, s.span, \"\", \"\", false);\n+        let type_permits_lack_of_use = check_must_use_ty(cx, ty, &expr, s.span, \"\", \"\", 1);\n \n         let mut fn_warned = false;\n         let mut op_warned = false;\n@@ -135,21 +135,21 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n             span: Span,\n             descr_pre: &str,\n             descr_post: &str,\n-            plural: bool,\n+            plural_len: usize,\n         ) -> bool {\n             if ty.is_unit() || cx.tcx.is_ty_uninhabited_from(\n                 cx.tcx.hir().get_module_parent(expr.hir_id), ty)\n             {\n                 return true;\n             }\n \n-            let plural_suffix = if plural { \"s\" } else { \"\" };\n+            let plural_suffix = pluralise!(plural_len);\n \n             match ty.sty {\n                 ty::Adt(..) if ty.is_box() => {\n                     let boxed_ty = ty.boxed_ty();\n                     let descr_pre = &format!(\"{}boxed \", descr_pre);\n-                    check_must_use_ty(cx, boxed_ty, expr, span, descr_pre, descr_post, plural)\n+                    check_must_use_ty(cx, boxed_ty, expr, span, descr_pre, descr_post, plural_len)\n                 }\n                 ty::Adt(def, _) => {\n                     check_must_use_def(cx, def.did, span, descr_pre, descr_post)\n@@ -202,7 +202,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                     for (i, ty) in tys.iter().map(|k| k.expect_ty()).enumerate() {\n                         let descr_post = &format!(\" in tuple element {}\", i);\n                         let span = *spans.get(i).unwrap_or(&span);\n-                        if check_must_use_ty(cx, ty, expr, span, descr_pre, descr_post, plural) {\n+                        if check_must_use_ty(\n+                            cx,\n+                            ty,\n+                            expr,\n+                            span,\n+                            descr_pre,\n+                            descr_post,\n+                            plural_len\n+                        ) {\n                             has_emitted = true;\n                         }\n                     }\n@@ -216,7 +224,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                             descr_pre,\n                             plural_suffix,\n                         );\n-                        check_must_use_ty(cx, ty, expr, span, descr_pre, descr_post, true)\n+                        check_must_use_ty(cx, ty, expr, span, descr_pre, descr_post, n as usize + 1)\n                     }\n                     // Otherwise, we don't lint, to avoid false positives.\n                     _ => false,"}, {"sha": "0d85be83e12e04d437889a85fdf594ddd81fae87", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=1ab5593f951c07a6f0ed05fbbfe8f262863158a0", "patch": "@@ -26,6 +26,8 @@\n use crate::Resolver;\n use crate::resolve_imports::ImportDirectiveSubclass;\n \n+use errors::pluralise;\n+\n use rustc::util::nodemap::NodeMap;\n use rustc::{lint, ty};\n use rustc_data_structures::fx::FxHashSet;\n@@ -295,7 +297,7 @@ impl Resolver<'_> {\n                 }).collect::<Vec<String>>();\n             span_snippets.sort();\n             let msg = format!(\"unused import{}{}\",\n-                            if len > 1 { \"s\" } else { \"\" },\n+                            pluralise!(len),\n                             if !span_snippets.is_empty() {\n                                 format!(\": {}\", span_snippets.join(\", \"))\n                             } else {"}, {"sha": "360343169bc3d83dc0b09e1e815f46b050fb79be", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=1ab5593f951c07a6f0ed05fbbfe8f262863158a0", "patch": "@@ -11,7 +11,7 @@ use crate::{Resolver, ResolutionError, Segment, ModuleKind};\n use crate::{names_to_string, module_to_string};\n use crate::diagnostics::Suggestion;\n \n-use errors::Applicability;\n+use errors::{Applicability, pluralise};\n \n use rustc_data_structures::ptr_key::PtrKey;\n use rustc::ty;\n@@ -728,7 +728,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n \n             let msg = format!(\n                 \"unresolved import{} {}\",\n-                if paths.len() > 1 { \"s\" } else { \"\" },\n+                pluralise!(paths.len()),\n                 paths.join(\", \"),\n             );\n "}, {"sha": "718d12484f741bf9cc5e78c3d059be0d677a2f57", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=1ab5593f951c07a6f0ed05fbbfe8f262863158a0", "patch": "@@ -1346,7 +1346,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 span,\n                 E0191,\n                 \"the value of the associated type{} {} must be specified\",\n-                if associated_types.len() == 1 { \"\" } else { \"s\" },\n+                pluralise!(associated_types.len()),\n                 names,\n             );\n             let (suggest, potential_assoc_types_spans) ="}, {"sha": "ef3f40dfdd9875907f85c9665727a9d9f7359780", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=1ab5593f951c07a6f0ed05fbbfe8f262863158a0", "patch": "@@ -17,7 +17,7 @@ use crate::util::common::ErrorReported;\n use crate::util::nodemap::FxHashMap;\n use crate::astconv::AstConv as _;\n \n-use errors::{Applicability, DiagnosticBuilder};\n+use errors::{Applicability, DiagnosticBuilder, pluralise};\n use syntax::ast;\n use syntax::symbol::{Symbol, kw, sym};\n use syntax::source_map::Span;\n@@ -1178,7 +1178,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             struct_span_err!(tcx.sess, span, E0063,\n                              \"missing field{} {}{} in initializer of `{}`\",\n-                             if remaining_fields.len() == 1 { \"\" } else { \"s\" },\n+                             pluralise!(remaining_fields.len()),\n                              remaining_fields_names,\n                              truncated_fields_error,\n                              adt_ty)"}, {"sha": "74e4f28255b162cb510845aa7cfbbc6446daf0fa", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=1ab5593f951c07a6f0ed05fbbfe8f262863158a0", "patch": "@@ -5,7 +5,7 @@ use crate::check::FnCtxt;\n use crate::middle::lang_items::FnOnceTraitLangItem;\n use crate::namespace::Namespace;\n use crate::util::nodemap::FxHashSet;\n-use errors::{Applicability, DiagnosticBuilder};\n+use errors::{Applicability, DiagnosticBuilder, pluralise};\n use rustc::hir::{self, ExprKind, Node, QPath};\n use rustc::hir::def::{Res, DefKind};\n use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, DefId};\n@@ -560,7 +560,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let help = format!(\"{an}other candidate{s} {were} found in the following \\\n                                         trait{s}, perhaps add a `use` for {one_of_them}:\",\n                                     an = if candidates.len() == 1 {\"an\" } else { \"\" },\n-                                    s = if candidates.len() == 1 { \"\" } else { \"s\" },\n+                                    s = pluralise!(candidates.len()),\n                                     were = if candidates.len() == 1 { \"was\" } else { \"were\" },\n                                     one_of_them = if candidates.len() == 1 {\n                                         \"it\""}, {"sha": "bd6586aa0777eba7dd89ccfa519eee043514475c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1ab5593f951c07a6f0ed05fbbfe8f262863158a0", "patch": "@@ -88,7 +88,7 @@ pub mod intrinsic;\n mod op;\n \n use crate::astconv::{AstConv, PathSeg};\n-use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n+use errors::{Applicability, DiagnosticBuilder, DiagnosticId, pluralise};\n use rustc::hir::{self, ExprKind, GenericArg, ItemKind, Node, PatKind, QPath};\n use rustc::hir::def::{CtorOf, Res, DefKind};\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n@@ -4843,5 +4843,5 @@ fn fatally_break_rust(sess: &Session) {\n }\n \n fn potentially_plural_count(count: usize, word: &str) -> String {\n-    format!(\"{} {}{}\", count, word, if count == 1 { \"\" } else { \"s\" })\n+    format!(\"{} {}{}\", count, word, pluralise!(count))\n }"}, {"sha": "d93a4052cd3932c6f09352970211e0ff8a7fb7ac", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=1ab5593f951c07a6f0ed05fbbfe8f262863158a0", "patch": "@@ -1,6 +1,6 @@\n use crate::check::FnCtxt;\n use crate::util::nodemap::FxHashMap;\n-use errors::{Applicability, DiagnosticBuilder};\n+use errors::{Applicability, DiagnosticBuilder, pluralise};\n use rustc::hir::{self, PatKind, Pat, HirId};\n use rustc::hir::def::{Res, DefKind, CtorKind};\n use rustc::hir::pat_util::EnumerateAndAdjustIterator;\n@@ -684,8 +684,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     fn e0023(&self, pat_span: Span, res: Res, subpats: &'tcx [P<Pat>], fields: &[ty::FieldDef]) {\n-        let subpats_ending = if subpats.len() == 1 { \"\" } else { \"s\" };\n-        let fields_ending = if fields.len() == 1 { \"\" } else { \"s\" };\n+        let subpats_ending = pluralise!(subpats.len());\n+        let fields_ending = pluralise!(fields.len());\n         let res_span = self.tcx.def_span(res.def_id());\n         struct_span_err!(\n             self.tcx.sess,\n@@ -1103,10 +1103,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             E0527,\n             \"pattern requires {} element{} but array has {}\",\n             min_len,\n-            if min_len != 1 { \"s\" } else { \"\" },\n+            pluralise!(min_len),\n             size,\n         )\n-        .span_label(span, format!(\"expected {} element{}\", size, if size != 1 { \"s\" } else { \"\" }))\n+        .span_label(span, format!(\"expected {} element{}\", size, pluralise!(size)))\n         .emit();\n     }\n \n@@ -1117,14 +1117,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             E0528,\n             \"pattern requires at least {} element{} but array has {}\",\n             min_len,\n-            if min_len != 1 { \"s\" } else { \"\" },\n+            pluralise!(min_len),\n             size,\n         ).span_label(\n             span,\n             format!(\n                 \"pattern cannot match array of {} element{}\",\n                 size,\n-                if size != 1 { \"s\" } else { \"\" },\n+                pluralise!(size),\n             ),\n         ).emit();\n     }"}, {"sha": "f9c07e3a2e4ff43e2449edea8cec164dcf82a270", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=1ab5593f951c07a6f0ed05fbbfe8f262863158a0", "patch": "@@ -8,6 +8,7 @@ use crate::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n \n use smallvec::{smallvec, SmallVec};\n \n+use errors::pluralise;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use syntax_pos::hygiene::{ExpnId, Transparency};\n@@ -348,10 +349,10 @@ impl LockstepIterSize {\n                         \"meta-variable `{}` repeats {} time{}, but `{}` repeats {} time{}\",\n                         l_id,\n                         l_len,\n-                        if l_len != 1 { \"s\" } else { \"\" },\n+                        pluralise!(l_len),\n                         r_id,\n                         r_len,\n-                        if r_len != 1 { \"s\" } else { \"\" },\n+                        pluralise!(r_len),\n                     );\n                     LockstepIterSize::Contradiction(msg)\n                 }"}, {"sha": "2d7f4f71ca4ee1dadf4f21a150a8b5cb05976656", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=1ab5593f951c07a6f0ed05fbbfe8f262863158a0", "patch": "@@ -11,7 +11,7 @@ use crate::ptr::P;\n use crate::symbol::{kw, sym};\n use crate::ThinVec;\n use crate::util::parser::AssocOp;\n-use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n+use errors::{Applicability, DiagnosticBuilder, DiagnosticId, pluralise};\n use rustc_data_structures::fx::FxHashSet;\n use syntax_pos::{Span, DUMMY_SP, MultiSpan, SpanSnippetError};\n use log::{debug, trace};\n@@ -532,15 +532,15 @@ impl<'a> Parser<'a> {\n             self.eat_to_tokens(&[&end]);\n             let span = lo.until(self.token.span);\n \n-            let plural = number_of_gt > 1 || number_of_shr >= 1;\n+            let total_num_of_gt = number_of_gt + number_of_shr * 2;\n             self.diagnostic()\n                 .struct_span_err(\n                     span,\n-                    &format!(\"unmatched angle bracket{}\", if plural { \"s\" } else { \"\" }),\n+                    &format!(\"unmatched angle bracket{}\", pluralise!(total_num_of_gt)),\n                 )\n                 .span_suggestion(\n                     span,\n-                    &format!(\"remove extra angle bracket{}\", if plural { \"s\" } else { \"\" }),\n+                    &format!(\"remove extra angle bracket{}\", pluralise!(total_num_of_gt)),\n                     String::new(),\n                     Applicability::MachineApplicable,\n                 )"}, {"sha": "dcd3c648017423314609ec26651ee2f8b4107699", "filename": "src/libsyntax/parse/parser/path.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs?ref=1ab5593f951c07a6f0ed05fbbfe8f262863158a0", "patch": "@@ -9,7 +9,7 @@ use crate::symbol::kw;\n \n use std::mem;\n use log::debug;\n-use errors::{Applicability};\n+use errors::{Applicability, pluralise};\n \n /// Specifies how to parse a path.\n #[derive(Copy, Clone, PartialEq)]\n@@ -347,20 +347,19 @@ impl<'a> Parser<'a> {\n                 let span = lo.with_hi(\n                     lo.lo() + BytePos(snapshot.unmatched_angle_bracket_count)\n                 );\n-                let plural = snapshot.unmatched_angle_bracket_count > 1;\n                 self.diagnostic()\n                     .struct_span_err(\n                         span,\n                         &format!(\n                             \"unmatched angle bracket{}\",\n-                            if plural { \"s\" } else { \"\" }\n+                            pluralise!(snapshot.unmatched_angle_bracket_count)\n                         ),\n                     )\n                     .span_suggestion(\n                         span,\n                         &format!(\n                             \"remove extra angle bracket{}\",\n-                            if plural { \"s\" } else { \"\" }\n+                            pluralise!(snapshot.unmatched_angle_bracket_count)\n                         ),\n                         String::new(),\n                         Applicability::MachineApplicable,"}, {"sha": "5697edd8e4867a5972ba23d743171b75b5f746bc", "filename": "src/libsyntax/parse/parser/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs?ref=1ab5593f951c07a6f0ed05fbbfe8f262863158a0", "patch": "@@ -11,7 +11,7 @@ use crate::symbol::{kw};\n \n use rustc_target::spec::abi::Abi;\n \n-use errors::{Applicability};\n+use errors::{Applicability, pluralise};\n \n /// Returns `true` if `IDENT t` can start a type -- `IDENT::a::b`, `IDENT<u8, u8>`,\n /// `IDENT<<u8 as Trait>::AssocTy>`.\n@@ -397,7 +397,7 @@ impl<'a> Parser<'a> {\n         }\n \n         if !negative_bounds.is_empty() || was_negative {\n-            let plural = negative_bounds.len() > 1;\n+            let negative_bounds_len = negative_bounds.len();\n             let last_span = negative_bounds.last().map(|sp| *sp);\n             let mut err = self.struct_span_err(\n                 negative_bounds,\n@@ -420,7 +420,7 @@ impl<'a> Parser<'a> {\n                 }\n                 err.span_suggestion_hidden(\n                     bound_list,\n-                    &format!(\"remove the trait bound{}\", if plural { \"s\" } else { \"\" }),\n+                    &format!(\"remove the trait bound{}\", pluralise!(negative_bounds_len)),\n                     new_bound_list,\n                     Applicability::MachineApplicable,\n                 );"}, {"sha": "26455df17b896421a6e27b079c331fb809768c72", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ab5593f951c07a6f0ed05fbbfe8f262863158a0/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=1ab5593f951c07a6f0ed05fbbfe8f262863158a0", "patch": "@@ -5,6 +5,7 @@ use fmt_macros as parse;\n \n use errors::DiagnosticBuilder;\n use errors::Applicability;\n+use errors::pluralise;\n \n use syntax::ast;\n use syntax::ext::base::{self, *};\n@@ -299,7 +300,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 &format!(\n                     \"{} positional argument{} in format string, but {}\",\n                     count,\n-                    if count != 1 { \"s\" } else { \"\" },\n+                    pluralise!(count),\n                     self.describe_num_args(),\n                 ),\n             );"}]}