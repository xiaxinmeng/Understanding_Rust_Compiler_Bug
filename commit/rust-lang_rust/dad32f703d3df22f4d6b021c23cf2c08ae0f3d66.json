{"sha": "dad32f703d3df22f4d6b021c23cf2c08ae0f3d66", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZDMyZjcwM2QzZGYyMmY0ZDZiMDIxYzIzY2YyYzA4YWUwZjNkNjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-25T06:40:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-25T06:40:54Z"}, "message": "auto merge of #9480 : brson/rust/noexit, r=thestinger\n\nThis can cause unexpected errors in the runtime when done while\r\nscheduler threads are still initializing. Required some restructuring\r\nof the main_args functions in our libraries.", "tree": {"sha": "90481a078ea52746f03c4487485e6bd05e6eadbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90481a078ea52746f03c4487485e6bd05e6eadbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dad32f703d3df22f4d6b021c23cf2c08ae0f3d66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dad32f703d3df22f4d6b021c23cf2c08ae0f3d66", "html_url": "https://github.com/rust-lang/rust/commit/dad32f703d3df22f4d6b021c23cf2c08ae0f3d66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dad32f703d3df22f4d6b021c23cf2c08ae0f3d66/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ed338caa7fd4017d57254cdc13a77e38505dd02", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ed338caa7fd4017d57254cdc13a77e38505dd02", "html_url": "https://github.com/rust-lang/rust/commit/6ed338caa7fd4017d57254cdc13a77e38505dd02"}, {"sha": "6d03897376f8737e28a93693f90bd651e9d08e92", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d03897376f8737e28a93693f90bd651e9d08e92", "html_url": "https://github.com/rust-lang/rust/commit/6d03897376f8737e28a93693f90bd651e9d08e92"}], "stats": {"total": 90, "additions": 45, "deletions": 45}, "files": [{"sha": "4721a6b412264f5864f9a16a36926220a2a71950", "filename": "src/libextra/test.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dad32f703d3df22f4d6b021c23cf2c08ae0f3d66/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad32f703d3df22f4d6b021c23cf2c08ae0f3d66/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=dad32f703d3df22f4d6b021c23cf2c08ae0f3d66", "patch": "@@ -30,7 +30,6 @@ use treemap::TreeMap;\n \n use std::clone::Clone;\n use std::comm::{stream, SharedChan, GenericPort, GenericChan};\n-use std::libc;\n use std::io;\n use std::result;\n use std::task;\n@@ -125,8 +124,9 @@ pub type MetricDiff = TreeMap<~str,MetricChange>;\n pub fn test_main(args: &[~str], tests: ~[TestDescAndFn]) {\n     let opts =\n         match parse_opts(args) {\n-            Ok(o) => o,\n-            Err(msg) => fail!(msg)\n+            Some(Ok(o)) => o,\n+            Some(Err(msg)) => fail!(msg),\n+            None => return\n         };\n     if !run_tests_console(&opts, tests) { fail!(\"Some tests failed\"); }\n }\n@@ -189,7 +189,7 @@ fn optgroups() -> ~[getopts::groups::OptGroup] {\n                      \"A.B\")]\n }\n \n-fn usage(binary: &str, helpstr: &str) -> ! {\n+fn usage(binary: &str, helpstr: &str) {\n     #[fixed_stack_segment]; #[inline(never)];\n \n     let message = fmt!(\"Usage: %s [OPTIONS] [FILTER]\", binary);\n@@ -217,20 +217,19 @@ Test Attributes:\n                      tests. This may also be written as #[ignore(cfg(...))] to\n                      ignore the test on certain configurations.\");\n     }\n-    unsafe { libc::exit(0) }\n }\n \n // Parses command line arguments into test options\n-pub fn parse_opts(args: &[~str]) -> OptRes {\n+pub fn parse_opts(args: &[~str]) -> Option<OptRes> {\n     let args_ = args.tail();\n     let matches =\n         match groups::getopts(args_, optgroups()) {\n           Ok(m) => m,\n-          Err(f) => return Err(f.to_err_msg())\n+          Err(f) => return Some(Err(f.to_err_msg()))\n         };\n \n-    if matches.opt_present(\"h\") { usage(args[0], \"h\"); }\n-    if matches.opt_present(\"help\") { usage(args[0], \"help\"); }\n+    if matches.opt_present(\"h\") { usage(args[0], \"h\"); return None; }\n+    if matches.opt_present(\"help\") { usage(args[0], \"help\"); return None; }\n \n     let filter =\n         if matches.free.len() > 0 {\n@@ -272,7 +271,7 @@ pub fn parse_opts(args: &[~str]) -> OptRes {\n         logfile: logfile\n     };\n \n-    Ok(test_opts)\n+    Some(Ok(test_opts))\n }\n \n pub fn opt_shard(maybestr: Option<~str>) -> Option<(uint,uint)> {\n@@ -1228,7 +1227,7 @@ mod tests {\n     fn first_free_arg_should_be_a_filter() {\n         let args = ~[~\"progname\", ~\"filter\"];\n         let opts = match parse_opts(args) {\n-            Ok(o) => o,\n+            Some(Ok(o)) => o,\n             _ => fail!(\"Malformed arg in first_free_arg_should_be_a_filter\")\n         };\n         assert!(\"filter\" == opts.filter.clone().unwrap());\n@@ -1238,7 +1237,7 @@ mod tests {\n     fn parse_ignored_flag() {\n         let args = ~[~\"progname\", ~\"filter\", ~\"--ignored\"];\n         let opts = match parse_opts(args) {\n-            Ok(o) => o,\n+            Some(Ok(o)) => o,\n             _ => fail!(\"Malformed arg in parse_ignored_flag\")\n         };\n         assert!((opts.run_ignored));"}, {"sha": "6ebce51b29f6d04b3b5867ecd7a36b28518b2017", "filename": "src/librust/rust.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dad32f703d3df22f4d6b021c23cf2c08ae0f3d66/src%2Flibrust%2Frust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad32f703d3df22f4d6b021c23cf2c08ae0f3d66/src%2Flibrust%2Frust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrust%2Frust.rs?ref=dad32f703d3df22f4d6b021c23cf2c08ae0f3d66", "patch": "@@ -44,7 +44,7 @@ impl ValidUsage {\n \n enum Action {\n     Call(extern \"Rust\" fn(args: &[~str]) -> ValidUsage),\n-    CallMain(&'static str, extern \"Rust\" fn(&[~str])),\n+    CallMain(&'static str, extern \"Rust\" fn(&[~str]) -> int),\n }\n \n enum UsageSource<'self> {\n@@ -185,18 +185,17 @@ fn cmd_run(args: &[~str]) -> ValidUsage {\n     }\n }\n \n-fn invoke(prog: &str, args: &[~str], f: &fn(&[~str])) {\n+fn invoke(prog: &str, args: &[~str], f: &fn(&[~str]) -> int) -> int {\n     let mut osargs = ~[prog.to_owned()];\n     osargs.push_all_move(args.to_owned());\n-    f(osargs);\n+    f(osargs)\n }\n \n fn do_command(command: &Command, args: &[~str]) -> ValidUsage {\n     match command.action {\n         Call(f) => f(args),\n         CallMain(prog, f) => {\n-            invoke(prog, args, f);\n-            Valid(0)\n+            Valid(invoke(prog, args, f))\n         }\n     }\n }"}, {"sha": "7599de1a9a3177802b8eb104def9ae8081f86082", "filename": "src/librustc/rustc.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dad32f703d3df22f4d6b021c23cf2c08ae0f3d66/src%2Flibrustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad32f703d3df22f4d6b021c23cf2c08ae0f3d66/src%2Flibrustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rs?ref=dad32f703d3df22f4d6b021c23cf2c08ae0f3d66", "patch": "@@ -394,13 +394,14 @@ pub fn monitor(f: ~fn(@diagnostic::Emitter)) {\n }\n \n pub fn main() {\n-    let args = os::args();\n-    main_args(args);\n+    std::os::set_exit_status(main_args(std::os::args()));\n }\n \n-pub fn main_args(args: &[~str]) {\n+pub fn main_args(args: &[~str]) -> int {\n     let owned_args = args.to_owned();\n     do monitor |demitter| {\n         run_compiler(owned_args, demitter);\n     }\n+\n+    return 0;\n }"}, {"sha": "c3d8cdf028e0c67aec1e3601ee49d601c743ef35", "filename": "src/librustdoc/rustdoc.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dad32f703d3df22f4d6b021c23cf2c08ae0f3d66/src%2Flibrustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad32f703d3df22f4d6b021c23cf2c08ae0f3d66/src%2Flibrustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rs?ref=dad32f703d3df22f4d6b021c23cf2c08ae0f3d66", "patch": "@@ -52,7 +52,7 @@ enum OutputFormat {\n }\n \n pub fn main() {\n-    main_args(std::os::args());\n+    std::os::set_exit_status(main_args(std::os::args()));\n }\n \n pub fn opts() -> ~[groups::OptGroup] {\n@@ -76,14 +76,14 @@ pub fn usage(argv0: &str) {\n                                   argv0), opts()));\n }\n \n-pub fn main_args(args: &[~str]) {\n+pub fn main_args(args: &[~str]) -> int {\n     //use extra::getopts::groups::*;\n \n     let matches = groups::getopts(args.tail(), opts()).unwrap();\n \n     if matches.opt_present(\"h\") || matches.opt_present(\"help\") {\n         usage(args[0]);\n-        return;\n+        return 0;\n     }\n \n     let (format, cratefile) = match matches.free.clone() {\n@@ -92,17 +92,17 @@ pub fn main_args(args: &[~str]) {\n         [s, _] => {\n             println!(\"Unknown output format: `{}`\", s);\n             usage(args[0]);\n-            exit(1);\n+            return 1;\n         }\n         [_, .._] => {\n             println!(\"Expected exactly one crate to process\");\n             usage(args[0]);\n-            exit(1);\n+            return 1;\n         }\n         _ => {\n             println!(\"Expected an output format and then one crate\");\n             usage(args[0]);\n-            exit(1);\n+            return 1;\n         }\n     };\n \n@@ -179,6 +179,8 @@ pub fn main_args(args: &[~str]) {\n     }\n     let ended = time::precise_time_ns();\n     info2!(\"Took {:.03f}s\", (ended as f64 - started as f64) / 1000000000f64);\n+\n+    return 0;\n }\n \n fn jsonify(crate: clean::Crate, res: ~[plugins::PluginJson], dst: Path) {\n@@ -208,9 +210,3 @@ fn jsonify(crate: clean::Crate, res: ~[plugins::PluginJson], dst: Path) {\n     let output = extra::json::Object(json).to_str();\n     file.write(output.as_bytes());\n }\n-\n-fn exit(status: int) -> ! {\n-    #[fixed_stack_segment]; #[inline(never)];\n-    use std::libc;\n-    unsafe { libc::exit(status as libc::c_int) }\n-}"}, {"sha": "eb94a112dd178e5c31a91dcbbde95c1c04c3c322", "filename": "src/librusti/rusti.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dad32f703d3df22f4d6b021c23cf2c08ae0f3d66/src%2Flibrusti%2Frusti.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad32f703d3df22f4d6b021c23cf2c08ae0f3d66/src%2Flibrusti%2Frusti.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rs?ref=dad32f703d3df22f4d6b021c23cf2c08ae0f3d66", "patch": "@@ -517,8 +517,7 @@ pub fn run_line(repl: &mut Repl, input: @io::Reader, out: @io::Writer, line: ~st\n }\n \n pub fn main() {\n-    let args = os::args();\n-    main_args(args);\n+    os::set_exit_status(main_args(os::args()));\n }\n \n struct Completer;\n@@ -534,7 +533,7 @@ impl CompletionCb for Completer {\n     }\n }\n \n-pub fn main_args(args: &[~str]) {\n+pub fn main_args(args: &[~str]) -> int {\n     #[fixed_stack_segment]; #[inline(never)];\n \n     let input = io::stdin();\n@@ -576,6 +575,8 @@ pub fn main_args(args: &[~str]) {\n             }\n         }\n     }\n+\n+    return 0;\n }\n \n #[cfg(test)]"}, {"sha": "c10ea2fb4247d814e5082df6f6a13d92519a9f8a", "filename": "src/librustpkg/rustpkg.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dad32f703d3df22f4d6b021c23cf2c08ae0f3d66/src%2Flibrustpkg%2Frustpkg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad32f703d3df22f4d6b021c23cf2c08ae0f3d66/src%2Flibrustpkg%2Frustpkg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rs?ref=dad32f703d3df22f4d6b021c23cf2c08ae0f3d66", "patch": "@@ -615,11 +615,10 @@ impl CtxMethods for BuildContext {\n \n pub fn main() {\n     io::println(\"WARNING: The Rust package manager is experimental and may be unstable\");\n-    let args = os::args();\n-    main_args(args);\n+    os::set_exit_status(main_args(os::args()));\n }\n \n-pub fn main_args(args: &[~str]) {\n+pub fn main_args(args: &[~str]) -> int {\n     let opts = ~[getopts::optflag(\"h\"), getopts::optflag(\"help\"),\n                                         getopts::optflag(\"no-link\"),\n                                         getopts::optflag(\"no-trans\"),\n@@ -645,7 +644,7 @@ pub fn main_args(args: &[~str]) {\n         result::Err(f) => {\n             error(fmt!(\"%s\", f.to_err_msg()));\n \n-            return;\n+            return 1;\n         }\n     };\n     let mut help = matches.opt_present(\"h\") ||\n@@ -662,7 +661,7 @@ pub fn main_args(args: &[~str]) {\n     if matches.opt_present(\"v\") ||\n        matches.opt_present(\"version\") {\n         rustc::version(args[0]);\n-        return;\n+        return 0;\n     }\n \n     let use_rust_path_hack = matches.opt_present(\"r\") ||\n@@ -701,7 +700,8 @@ pub fn main_args(args: &[~str]) {\n     args.shift();\n \n     if (args.len() < 1) {\n-        return usage::general();\n+        usage::general();\n+        return 1;\n     }\n \n     let rustc_flags = RustcFlags {\n@@ -739,11 +739,14 @@ pub fn main_args(args: &[~str]) {\n         }\n     }\n     let cmd = match cmd_opt {\n-        None => return usage::general(),\n+        None => {\n+            usage::general();\n+            return 0;\n+        }\n         Some(cmd) => {\n             help |= context::flags_ok_for_cmd(&rustc_flags, cfgs, *cmd, user_supplied_opt_level);\n             if help {\n-                return match *cmd {\n+                match *cmd {\n                     ~\"build\" => usage::build(),\n                     ~\"clean\" => usage::clean(),\n                     ~\"do\" => usage::do_cmd(),\n@@ -757,6 +760,7 @@ pub fn main_args(args: &[~str]) {\n                     ~\"unprefer\" => usage::unprefer(),\n                     _ => usage::general()\n                 };\n+                return 0;\n             } else {\n                 cmd\n             }\n@@ -794,8 +798,8 @@ pub fn main_args(args: &[~str]) {\n     // and at least one test case succeeds if rustpkg returns COPY_FAILED_CODE,\n     // when actually, it might set the exit code for that even if a different\n     // unhandled condition got raised.\n-    if result.is_err() { os::set_exit_status(COPY_FAILED_CODE); }\n-\n+    if result.is_err() { return COPY_FAILED_CODE; }\n+    return 0;\n }\n \n /**"}]}