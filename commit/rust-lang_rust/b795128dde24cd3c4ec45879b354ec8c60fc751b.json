{"sha": "b795128dde24cd3c4ec45879b354ec8c60fc751b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3OTUxMjhkZGUyNGNkM2M0ZWM0NTg3OWIzNTRlYzhjNjBmYzc1MWI=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-08T11:28:02Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-10T11:33:47Z"}, "message": "Use hir::GenericParam in ide_db::Definition instead of relisting all 3", "tree": {"sha": "e2898ec9ce50089f1ce269bc1ed34ad1a92fea51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2898ec9ce50089f1ce269bc1ed34ad1a92fea51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b795128dde24cd3c4ec45879b354ec8c60fc751b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b795128dde24cd3c4ec45879b354ec8c60fc751b", "html_url": "https://github.com/rust-lang/rust/commit/b795128dde24cd3c4ec45879b354ec8c60fc751b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b795128dde24cd3c4ec45879b354ec8c60fc751b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a0a47dd1492975959f6719202c3fb175df0349c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a0a47dd1492975959f6719202c3fb175df0349c", "html_url": "https://github.com/rust-lang/rust/commit/6a0a47dd1492975959f6719202c3fb175df0349c"}], "stats": {"total": 107, "additions": 65, "deletions": 42}, "files": [{"sha": "6cbf5cecfad6e2f3ab5a396efeac6ca953050452", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b795128dde24cd3c4ec45879b354ec8c60fc751b/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b795128dde24cd3c4ec45879b354ec8c60fc751b/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=b795128dde24cd3c4ec45879b354ec8c60fc751b", "patch": "@@ -1263,6 +1263,24 @@ pub enum GenericParam {\n }\n impl_from!(TypeParam, LifetimeParam, ConstParam for GenericParam);\n \n+impl GenericParam {\n+    pub fn module(self, db: &dyn HirDatabase) -> Module {\n+        match self {\n+            GenericParam::TypeParam(it) => it.module(db),\n+            GenericParam::LifetimeParam(it) => it.module(db),\n+            GenericParam::ConstParam(it) => it.module(db),\n+        }\n+    }\n+\n+    pub fn name(self, db: &dyn HirDatabase) -> Name {\n+        match self {\n+            GenericParam::TypeParam(it) => it.name(db),\n+            GenericParam::LifetimeParam(it) => it.name(db),\n+            GenericParam::ConstParam(it) => it.name(db),\n+        }\n+    }\n+}\n+\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub struct TypeParam {\n     pub(crate) id: TypeParamId,"}, {"sha": "4eecae697543f48f1c31a2c57d8c19ca0afcedb4", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b795128dde24cd3c4ec45879b354ec8c60fc751b/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b795128dde24cd3c4ec45879b354ec8c60fc751b/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=b795128dde24cd3c4ec45879b354ec8c60fc751b", "patch": "@@ -215,10 +215,8 @@ impl TryToNav for Definition {\n             Definition::ModuleDef(it) => it.try_to_nav(db),\n             Definition::SelfType(it) => it.try_to_nav(db),\n             Definition::Local(it) => Some(it.to_nav(db)),\n-            Definition::TypeParam(it) => it.try_to_nav(db),\n-            Definition::LifetimeParam(it) => it.try_to_nav(db),\n+            Definition::GenericParam(it) => it.try_to_nav(db),\n             Definition::Label(it) => Some(it.to_nav(db)),\n-            Definition::ConstParam(it) => it.try_to_nav(db),\n         }\n     }\n }\n@@ -389,6 +387,16 @@ impl TryToNav for hir::AssocItem {\n     }\n }\n \n+impl TryToNav for hir::GenericParam {\n+    fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n+        match self {\n+            hir::GenericParam::TypeParam(it) => it.try_to_nav(db),\n+            hir::GenericParam::ConstParam(it) => it.try_to_nav(db),\n+            hir::GenericParam::LifetimeParam(it) => it.try_to_nav(db),\n+        }\n+    }\n+}\n+\n impl ToNav for hir::Local {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         let src = self.source(db);"}, {"sha": "91f4241f9441d1956e65283f23b9b726a689971f", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b795128dde24cd3c4ec45879b354ec8c60fc751b/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b795128dde24cd3c4ec45879b354ec8c60fc751b/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=b795128dde24cd3c4ec45879b354ec8c60fc751b", "patch": "@@ -216,9 +216,7 @@ fn rewrite_intra_doc_link(\n         Definition::Field(it) => it.resolve_doc_path(db, link, ns),\n         Definition::SelfType(_)\n         | Definition::Local(_)\n-        | Definition::TypeParam(_)\n-        | Definition::ConstParam(_)\n-        | Definition::LifetimeParam(_)\n+        | Definition::GenericParam(_)\n         | Definition::Label(_) => return None,\n     }?;\n     let krate = resolved.module(db)?.krate();"}, {"sha": "c20185b164849477cd1d258e2a63afd96e746482", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b795128dde24cd3c4ec45879b354ec8c60fc751b/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b795128dde24cd3c4ec45879b354ec8c60fc751b/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=b795128dde24cd3c4ec45879b354ec8c60fc751b", "patch": "@@ -111,9 +111,7 @@ fn def_for_doc_comment(\n         Definition::Field(it) => it.resolve_doc_path(db, link, ns),\n         Definition::SelfType(_)\n         | Definition::Local(_)\n-        | Definition::TypeParam(_)\n-        | Definition::LifetimeParam(_)\n-        | Definition::ConstParam(_)\n+        | Definition::GenericParam(_)\n         | Definition::Label(_) => return None,\n     }\n }"}, {"sha": "c34708324441da3d63017ef7de4ce3654ff9ec7a", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b795128dde24cd3c4ec45879b354ec8c60fc751b/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b795128dde24cd3c4ec45879b354ec8c60fc751b/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=b795128dde24cd3c4ec45879b354ec8c60fc751b", "patch": "@@ -1,6 +1,6 @@\n use hir::{\n-    Adt, AsAssocItem, AssocItemContainer, FieldSource, HasAttrs, HasSource, HirDisplay, Module,\n-    ModuleDef, ModuleSource, Semantics,\n+    Adt, AsAssocItem, AssocItemContainer, FieldSource, GenericParam, HasAttrs, HasSource,\n+    HirDisplay, Module, ModuleDef, ModuleSource, Semantics,\n };\n use ide_db::base_db::SourceDatabase;\n use ide_db::{\n@@ -220,12 +220,12 @@ fn goto_type_action(db: &RootDatabase, def: Definition) -> Option<HoverAction> {\n         }\n     };\n \n-    if let Definition::TypeParam(it) = def {\n+    if let Definition::GenericParam(GenericParam::TypeParam(it)) = def {\n         it.trait_bounds(db).into_iter().for_each(|it| push_new_def(it.into()));\n     } else {\n         let ty = match def {\n             Definition::Local(it) => it.ty(db),\n-            Definition::ConstParam(it) => it.ty(db),\n+            Definition::GenericParam(GenericParam::ConstParam(it)) => it.ty(db),\n             _ => return None,\n         };\n \n@@ -357,9 +357,11 @@ fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<Markup> {\n             })\n         }\n         Definition::Label(it) => Some(Markup::fenced_block(&it.name(db))),\n-        Definition::LifetimeParam(it) => Some(Markup::fenced_block(&it.name(db))),\n-        Definition::TypeParam(type_param) => Some(Markup::fenced_block(&type_param.display(db))),\n-        Definition::ConstParam(it) => from_def_source(db, it, None),\n+        Definition::GenericParam(it) => match it {\n+            GenericParam::TypeParam(it) => Some(Markup::fenced_block(&it.display(db))),\n+            GenericParam::LifetimeParam(it) => Some(Markup::fenced_block(&it.name(db))),\n+            GenericParam::ConstParam(it) => from_def_source(db, it, None),\n+        },\n     };\n \n     fn from_def_source<A, D>(db: &RootDatabase, def: D, mod_path: Option<String>) -> Option<Markup>"}, {"sha": "0d5cd5f9a990a0bf7daa4d0803fa22b6cb730ac8", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b795128dde24cd3c4ec45879b354ec8c60fc751b/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b795128dde24cd3c4ec45879b354ec8c60fc751b/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=b795128dde24cd3c4ec45879b354ec8c60fc751b", "patch": "@@ -130,7 +130,10 @@ pub(crate) fn find_all_refs(\n                 kind = ReferenceKind::FieldShorthandForLocal;\n             }\n         }\n-    } else if matches!(def, Definition::LifetimeParam(_) | Definition::Label(_)) {\n+    } else if matches!(\n+        def,\n+        Definition::GenericParam(hir::GenericParam::LifetimeParam(_)) | Definition::Label(_)\n+    ) {\n         kind = ReferenceKind::Lifetime;\n     };\n "}, {"sha": "20eccf3c601eba326f5dcb0339b4b26745b23f80", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b795128dde24cd3c4ec45879b354ec8c60fc751b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b795128dde24cd3c4ec45879b354ec8c60fc751b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=b795128dde24cd3c4ec45879b354ec8c60fc751b", "patch": "@@ -328,8 +328,11 @@ fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n             }\n         },\n         Definition::SelfType(_) => HlTag::Symbol(SymbolKind::Impl),\n-        Definition::TypeParam(_) => HlTag::Symbol(SymbolKind::TypeParam),\n-        Definition::ConstParam(_) => HlTag::Symbol(SymbolKind::ConstParam),\n+        Definition::GenericParam(it) => match it {\n+            hir::GenericParam::TypeParam(_) => HlTag::Symbol(SymbolKind::TypeParam),\n+            hir::GenericParam::ConstParam(_) => HlTag::Symbol(SymbolKind::ConstParam),\n+            hir::GenericParam::LifetimeParam(_) => HlTag::Symbol(SymbolKind::LifetimeParam),\n+        },\n         Definition::Local(local) => {\n             let tag = if local.is_param(db) {\n                 HlTag::Symbol(SymbolKind::ValueParam)\n@@ -345,7 +348,6 @@ fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n             }\n             return h;\n         }\n-        Definition::LifetimeParam(_) => HlTag::Symbol(SymbolKind::LifetimeParam),\n         Definition::Label(_) => HlTag::Symbol(SymbolKind::Label),\n     }\n     .into()"}, {"sha": "d68fe42b022ed63d1949c8769f3340345fe0c667", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b795128dde24cd3c4ec45879b354ec8c60fc751b/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b795128dde24cd3c4ec45879b354ec8c60fc751b/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=b795128dde24cd3c4ec45879b354ec8c60fc751b", "patch": "@@ -6,8 +6,8 @@\n // FIXME: this badly needs rename/rewrite (matklad, 2020-02-06).\n \n use hir::{\n-    db::HirDatabase, ConstParam, Crate, Field, HasVisibility, Impl, Label, LifetimeParam, Local,\n-    MacroDef, Module, ModuleDef, Name, PathResolution, Semantics, TypeParam, Visibility,\n+    db::HirDatabase, Crate, Field, GenericParam, HasVisibility, Impl, Label, Local, MacroDef,\n+    Module, ModuleDef, Name, PathResolution, Semantics, Visibility,\n };\n use syntax::{\n     ast::{self, AstNode},\n@@ -24,9 +24,7 @@ pub enum Definition {\n     ModuleDef(ModuleDef),\n     SelfType(Impl),\n     Local(Local),\n-    TypeParam(TypeParam),\n-    LifetimeParam(LifetimeParam),\n-    ConstParam(ConstParam),\n+    GenericParam(GenericParam),\n     Label(Label),\n }\n \n@@ -38,9 +36,7 @@ impl Definition {\n             Definition::ModuleDef(it) => it.module(db),\n             Definition::SelfType(it) => Some(it.module(db)),\n             Definition::Local(it) => Some(it.module(db)),\n-            Definition::TypeParam(it) => Some(it.module(db)),\n-            Definition::LifetimeParam(it) => Some(it.module(db)),\n-            Definition::ConstParam(it) => Some(it.module(db)),\n+            Definition::GenericParam(it) => Some(it.module(db)),\n             Definition::Label(it) => Some(it.module(db)),\n         }\n     }\n@@ -52,9 +48,7 @@ impl Definition {\n             Definition::ModuleDef(def) => def.definition_visibility(db),\n             Definition::SelfType(_) => None,\n             Definition::Local(_) => None,\n-            Definition::TypeParam(_) => None,\n-            Definition::LifetimeParam(_) => None,\n-            Definition::ConstParam(_) => None,\n+            Definition::GenericParam(_) => None,\n             Definition::Label(_) => None,\n         }\n     }\n@@ -80,9 +74,7 @@ impl Definition {\n             },\n             Definition::SelfType(_) => return None,\n             Definition::Local(it) => it.name(db)?,\n-            Definition::TypeParam(it) => it.name(db),\n-            Definition::LifetimeParam(it) => it.name(db),\n-            Definition::ConstParam(it) => it.name(db),\n+            Definition::GenericParam(it) => it.name(db),\n             Definition::Label(it) => it.name(db),\n         };\n         Some(name)\n@@ -235,11 +227,11 @@ impl NameClass {\n                 },\n                 ast::TypeParam(it) => {\n                     let def = sema.to_def(&it)?;\n-                    Some(NameClass::Definition(Definition::TypeParam(def)))\n+                    Some(NameClass::Definition(Definition::GenericParam(def.into())))\n                 },\n                 ast::ConstParam(it) => {\n                     let def = sema.to_def(&it)?;\n-                    Some(NameClass::Definition(Definition::ConstParam(def)))\n+                    Some(NameClass::Definition(Definition::GenericParam(def.into())))\n                 },\n                 _ => None,\n             }\n@@ -257,7 +249,7 @@ impl NameClass {\n             match parent {\n                 ast::LifetimeParam(it) => {\n                     let def = sema.to_def(&it)?;\n-                    Some(NameClass::Definition(Definition::LifetimeParam(def)))\n+                    Some(NameClass::Definition(Definition::GenericParam(def.into())))\n                 },\n                 ast::Label(it) => {\n                     let def = sema.to_def(&it)?;\n@@ -393,15 +385,17 @@ impl NameRefClass {\n             | SyntaxKind::WHERE_PRED\n             | SyntaxKind::REF_TYPE => sema\n                 .resolve_lifetime_param(lifetime)\n-                .map(Definition::LifetimeParam)\n+                .map(GenericParam::LifetimeParam)\n+                .map(Definition::GenericParam)\n                 .map(NameRefClass::Definition),\n             // lifetime bounds, as in the 'b in 'a: 'b aren't wrapped in TypeBound nodes so we gotta check\n             // if our lifetime is in a LifetimeParam without being the constrained lifetime\n             _ if ast::LifetimeParam::cast(parent).and_then(|param| param.lifetime()).as_ref()\n                 != Some(lifetime) =>\n             {\n                 sema.resolve_lifetime_param(lifetime)\n-                    .map(Definition::LifetimeParam)\n+                    .map(GenericParam::LifetimeParam)\n+                    .map(Definition::GenericParam)\n                     .map(NameRefClass::Definition)\n             }\n             _ => None,\n@@ -422,10 +416,10 @@ impl From<PathResolution> for Definition {\n                 Definition::ModuleDef(def)\n             }\n             PathResolution::Local(local) => Definition::Local(local),\n-            PathResolution::TypeParam(par) => Definition::TypeParam(par),\n+            PathResolution::TypeParam(par) => Definition::GenericParam(par.into()),\n             PathResolution::Macro(def) => Definition::Macro(def),\n             PathResolution::SelfType(impl_def) => Definition::SelfType(impl_def),\n-            PathResolution::ConstParam(par) => Definition::ConstParam(par),\n+            PathResolution::ConstParam(par) => Definition::GenericParam(par.into()),\n         }\n     }\n }"}, {"sha": "773bfbc2c692869fb3abe87f9b10fbd55d30ff08", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b795128dde24cd3c4ec45879b354ec8c60fc751b/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b795128dde24cd3c4ec45879b354ec8c60fc751b/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=b795128dde24cd3c4ec45879b354ec8c60fc751b", "patch": "@@ -136,7 +136,7 @@ impl Definition {\n             return SearchScope::new(res);\n         }\n \n-        if let Definition::LifetimeParam(param) = self {\n+        if let Definition::GenericParam(hir::GenericParam::LifetimeParam(param)) = self {\n             let range = match param.parent(db) {\n                 hir::GenericDef::Function(it) => {\n                     it.source(db).and_then(|src| Some(src.value.syntax().text_range()))"}]}