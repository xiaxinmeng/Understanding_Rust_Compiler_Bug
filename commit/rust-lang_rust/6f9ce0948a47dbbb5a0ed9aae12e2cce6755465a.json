{"sha": "6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmOWNlMDk0OGE0N2RiYmI1YTBlZDlhYWUxMmUyY2NlNjc1NTQ2NWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-05T22:00:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-05T22:00:49Z"}, "message": "auto merge of #8997 : fhahn/rust/issue_8985, r=catamorphism,brson\n\nPatch for #8985", "tree": {"sha": "64a0cb6ba9e7796da1ffad8044dda1bb6d33adf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64a0cb6ba9e7796da1ffad8044dda1bb6d33adf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "html_url": "https://github.com/rust-lang/rust/commit/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1dde99e4b3d43d044cdead7240bbd5f0d7a0ce5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1dde99e4b3d43d044cdead7240bbd5f0d7a0ce5", "html_url": "https://github.com/rust-lang/rust/commit/d1dde99e4b3d43d044cdead7240bbd5f0d7a0ce5"}, {"sha": "de39874801761197bf10bf8d04bde1aa2bd82e15", "url": "https://api.github.com/repos/rust-lang/rust/commits/de39874801761197bf10bf8d04bde1aa2bd82e15", "html_url": "https://github.com/rust-lang/rust/commit/de39874801761197bf10bf8d04bde1aa2bd82e15"}], "stats": {"total": 294, "additions": 147, "deletions": 147}, "files": [{"sha": "ef8049aa717e5e3a5fb3da72b541134b427c094a", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -63,7 +63,7 @@ pub fn run(lib_path: &str,\n \n     Result {\n         status: output.status,\n-        out: str::from_bytes(output.output),\n-        err: str::from_bytes(output.error)\n+        out: str::from_utf8(output.output),\n+        err: str::from_utf8(output.error)\n     }\n }"}, {"sha": "525ff658dba0b5d8087bfc254b31d91e8346bd03", "filename": "src/libextra/base64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibextra%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibextra%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbase64.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -145,7 +145,7 @@ impl<'self> ToBase64 for &'self [u8] {\n         }\n \n         unsafe {\n-            str::raw::from_bytes_owned(v)\n+            str::raw::from_utf8_owned(v)\n         }\n     }\n }\n@@ -162,7 +162,7 @@ impl<'self> FromBase64 for &'self str {\n      * Convert any base64 encoded string (literal, `@`, `&`, or `~`)\n      * to the byte values it encodes.\n      *\n-     * You can use the `from_bytes` function in `std::str`\n+     * You can use the `from_utf8` function in `std::str`\n      * to turn a `[u8]` into a string with characters corresponding to those\n      * values.\n      *\n@@ -180,7 +180,7 @@ impl<'self> FromBase64 for &'self str {\n      *     printfln!(\"%s\", hello_str);\n      *     let bytes = hello_str.from_base64();\n      *     printfln!(\"%?\", bytes);\n-     *     let result_str = str::from_bytes(bytes);\n+     *     let result_str = str::from_utf8(bytes);\n      *     printfln!(\"%s\", result_str);\n      * }\n      * ~~~"}, {"sha": "70fd3a01ca4a6ca0d0cd370455e39ef29c51b783", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -523,7 +523,7 @@ impl Bitv {\n  * with the most significant bits of each byte coming first. Each\n  * bit becomes true if equal to 1 or false if equal to 0.\n  */\n-pub fn from_bytes(bytes: &[u8]) -> Bitv {\n+pub fn from_utf8(bytes: &[u8]) -> Bitv {\n     from_fn(bytes.len() * 8, |i| {\n         let b = bytes[i / 8] as uint;\n         let offset = i % 8;\n@@ -1275,8 +1275,8 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_from_bytes() {\n-        let bitv = from_bytes([0b10110110, 0b00000000, 0b11111111]);\n+    fn test_from_utf8() {\n+        let bitv = from_utf8([0b10110110, 0b00000000, 0b11111111]);\n         let str = ~\"10110110\" + \"00000000\" + \"11111111\";\n         assert_eq!(bitv.to_str(), str);\n     }\n@@ -1302,7 +1302,7 @@ mod tests {\n     #[test]\n     fn test_to_bools() {\n         let bools = ~[false, false, true, false, false, true, true, false];\n-        assert_eq!(from_bytes([0b00100110]).to_bools(), bools);\n+        assert_eq!(from_utf8([0b00100110]).to_bools(), bools);\n     }\n \n     #[test]"}, {"sha": "4e5094dab6341317190566f4abef9867754d24db", "filename": "src/libextra/ebml.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibextra%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibextra%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Febml.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -41,7 +41,7 @@ impl Doc {\n     }\n \n     pub fn as_str_slice<'a>(&'a self) -> &'a str {\n-        str::from_bytes_slice(self.data.slice(self.start, self.end))\n+        str::from_utf8_slice(self.data.slice(self.start, self.end))\n     }\n \n     pub fn as_str(&self) -> ~str {"}, {"sha": "b93b5fb43d445cdfd986ddd38db3ccc335c392b7", "filename": "src/libextra/hex.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibextra%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibextra%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fhex.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -45,7 +45,7 @@ impl<'self> ToHex for &'self [u8] {\n         }\n \n         unsafe {\n-            str::raw::from_bytes_owned(v)\n+            str::raw::from_utf8_owned(v)\n         }\n     }\n }\n@@ -62,7 +62,7 @@ impl<'self> FromHex for &'self str {\n      * Convert any hexadecimal encoded string (literal, `@`, `&`, or `~`)\n      * to the byte values it encodes.\n      *\n-     * You can use the `from_bytes` function in `std::str`\n+     * You can use the `from_utf8` function in `std::str`\n      * to turn a `[u8]` into a string with characters corresponding to those\n      * values.\n      *\n@@ -80,7 +80,7 @@ impl<'self> FromHex for &'self str {\n      *     printfln!(\"%s\", hello_str);\n      *     let bytes = hello_str.from_hex().unwrap();\n      *     printfln!(\"%?\", bytes);\n-     *     let result_str = str::from_bytes(bytes);\n+     *     let result_str = str::from_utf8(bytes);\n      *     printfln!(\"%s\", result_str);\n      * }\n      * ~~~"}, {"sha": "ee3e1966fe2ccb01bf46edde0d3986684af400e0", "filename": "src/libextra/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -858,7 +858,7 @@ impl<T : iterator::Iterator<char>> Parser<T> {\n \n /// Decodes a json value from an @io::Reader\n pub fn from_reader(rdr: @io::Reader) -> Result<Json, Error> {\n-    let s = str::from_bytes(rdr.read_whole_stream());\n+    let s = str::from_utf8(rdr.read_whole_stream());\n     let mut parser = Parser(~s.iter());\n     parser.parse()\n }"}, {"sha": "49a6210e3a9e2760e35a5bebdc5cd7b672c34f5f", "filename": "src/libextra/terminfo/parser/compiled.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -213,7 +213,7 @@ pub fn parse(file: @Reader, longnames: bool) -> Result<~TermInfo, ~str> {\n         return Err(~\"incompatible file: more string offsets than expected\");\n     }\n \n-    let names_str = str::from_bytes(file.read_bytes(names_bytes as uint - 1)); // don't read NUL\n+    let names_str = str::from_utf8(file.read_bytes(names_bytes as uint - 1)); // don't read NUL\n     let term_names: ~[~str] = names_str.split_iter('|').map(|s| s.to_owned()).collect();\n \n     file.read_byte(); // consume NUL"}, {"sha": "9a79e61e2330f42ec79705c014385898f0cd74b2", "filename": "src/libextra/uuid.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibextra%2Fuuid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibextra%2Fuuid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuuid.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -210,7 +210,7 @@ impl Uuid {\n     ///\n     /// # Arguments\n     /// * `b` An array or slice of 16 bytes\n-    pub fn from_bytes(b: &[u8]) -> Option<Uuid> {\n+    pub fn from_utf8(b: &[u8]) -> Option<Uuid> {\n         if b.len() != 16 {\n             return None\n         }\n@@ -307,7 +307,7 @@ impl Uuid {\n             s[i*2+0] = digit[0];\n             s[i*2+1] = digit[1];\n         }\n-        str::from_bytes(s)\n+        str::from_utf8(s)\n     }\n \n     /// Returns a string of hexadecimal digits, separated into groups with a hypen\n@@ -413,7 +413,7 @@ impl Uuid {\n             ub[i] = FromStrRadix::from_str_radix(vs.slice(i*2, (i+1)*2), 16).unwrap();\n         }\n \n-        Ok(Uuid::from_bytes(ub).unwrap())\n+        Ok(Uuid::from_utf8(ub).unwrap())\n     }\n }\n \n@@ -705,11 +705,11 @@ mod test {\n     }\n \n     #[test]\n-    fn test_from_bytes() {\n+    fn test_from_utf8() {\n         let b = ~[ 0xa1, 0xa2, 0xa3, 0xa4, 0xb1, 0xb2, 0xc1, 0xc2,\n                    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8 ];\n \n-        let u = Uuid::from_bytes(b).unwrap();\n+        let u = Uuid::from_utf8(b).unwrap();\n         let expected = ~\"a1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8\";\n \n         assert!(u.to_simple_str() == expected);\n@@ -729,7 +729,7 @@ mod test {\n         let b_in: [u8, ..16] = [ 0xa1, 0xa2, 0xa3, 0xa4, 0xb1, 0xb2, 0xc1, 0xc2,\n                                  0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8 ];\n \n-        let u = Uuid::from_bytes(b_in.clone()).unwrap();\n+        let u = Uuid::from_utf8(b_in.clone()).unwrap();\n \n         let b_out = u.to_bytes();\n "}, {"sha": "f334b104191722b3f1ee20420aeab207c76a56b7", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -386,7 +386,7 @@ pub mod write {\n                         cc_prog, prog.status));\n             sess.note(fmt!(\"%s arguments: %s\",\n                         cc_prog, cc_args.connect(\" \")));\n-            sess.note(str::from_bytes(prog.error + prog.output));\n+            sess.note(str::from_utf8(prog.error + prog.output));\n             sess.abort_if_errors();\n         }\n     }\n@@ -943,7 +943,7 @@ pub fn link_binary(sess: Session,\n                       cc_prog, prog.status));\n         sess.note(fmt!(\"%s arguments: %s\",\n                        cc_prog, cc_args.connect(\" \")));\n-        sess.note(str::from_bytes(prog.error + prog.output));\n+        sess.note(str::from_utf8(prog.error + prog.output));\n         sess.abort_if_errors();\n     }\n "}, {"sha": "18446acfef6b36d737a488f008b3aad6f6924def", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -1239,7 +1239,7 @@ fn read_path(d: ebml::Doc) -> (~str, uint) {\n     do reader::with_doc_data(d) |desc| {\n         let pos = io::u64_from_be_bytes(desc, 0u, 4u) as uint;\n         let pathbytes = desc.slice(4u, desc.len());\n-        let path = str::from_bytes(pathbytes);\n+        let path = str::from_utf8(pathbytes);\n \n         (path, pos)\n     }"}, {"sha": "6e4b6180fd2502fd2e81e03d603991a512d974c1", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -97,7 +97,7 @@ pub fn parse_ident(st: &mut PState, last: char) -> ast::Ident {\n \n fn parse_ident_(st: &mut PState, is_last: @fn(char) -> bool) ->\n    ast::Ident {\n-    let rslt = scan(st, is_last, str::from_bytes);\n+    let rslt = scan(st, is_last, str::from_utf8);\n     return st.tcx.sess.ident_of(rslt);\n }\n \n@@ -477,7 +477,7 @@ fn parse_abi_set(st: &mut PState) -> AbiSet {\n     let mut abis = AbiSet::empty();\n     while peek(st) != ']' {\n         // FIXME(#5422) str API should not force this copy\n-        let abi_str = scan(st, |c| c == ',', str::from_bytes);\n+        let abi_str = scan(st, |c| c == ',', str::from_utf8);\n         let abi = abi::lookup(abi_str).expect(abi_str);\n         abis.add(abi);\n     }"}, {"sha": "6c5c8631a147525732e772bc46dad31396f65d9a", "filename": "src/librustc/rustc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibrustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibrustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -161,7 +161,7 @@ Available lint options:\n         max_key = num::max(name.len(), max_key);\n     }\n     fn padded(max: uint, s: &str) -> ~str {\n-        str::from_bytes(vec::from_elem(max - s.len(), ' ' as u8)) + s\n+        str::from_utf8(vec::from_elem(max - s.len(), ' ' as u8)) + s\n     }\n     println(\"\\nAvailable lint checks:\\n\");\n     printfln!(\"    %s  %7.7s  %s\",\n@@ -244,7 +244,7 @@ pub fn run_compiler(args: &[~str], demitter: diagnostic::Emitter) {\n       1u => {\n         let ifile = matches.free[0].as_slice();\n         if \"-\" == ifile {\n-            let src = str::from_bytes(io::stdin().read_whole_stream());\n+            let src = str::from_utf8(io::stdin().read_whole_stream());\n             str_input(src.to_managed())\n         } else {\n             file_input(Path(ifile))"}, {"sha": "a1ea5a68c8277ceda113b5e708b8456c6cc74505", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -116,8 +116,8 @@ fn pandoc_writer(\n \n         debug!(\"pandoc result: %i\", output.status);\n         if output.status != 0 {\n-            error!(\"pandoc-out: %s\", str::from_bytes(output.output));\n-            error!(\"pandoc-err: %s\", str::from_bytes(output.error));\n+            error!(\"pandoc-out: %s\", str::from_utf8(output.output));\n+            error!(\"pandoc-err: %s\", str::from_utf8(output.error));\n             fail!(\"pandoc failed\");\n         }\n     }"}, {"sha": "25a415df3027cda0e147f61ab395be96ccb24a74", "filename": "src/librustpkg/rustpkg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibrustpkg%2Frustpkg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibrustpkg%2Frustpkg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -153,7 +153,7 @@ impl<'self> PkgScript<'self> {\n                    exe.to_str(), sysroot.to_str(), \"configs\");\n             let output = run::process_output(exe.to_str(), [sysroot.to_str(), ~\"configs\"]);\n             // Run the configs() function to get the configs\n-            let cfgs = str::from_bytes_slice(output.output).word_iter()\n+            let cfgs = str::from_utf8_slice(output.output).word_iter()\n                 .map(|w| w.to_owned()).collect();\n             (cfgs, output.status)\n         }"}, {"sha": "92b749f2787393d41318086690eb557483a4f13f", "filename": "src/librustpkg/source_control.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibrustpkg%2Fsource_control.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibrustpkg%2Fsource_control.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fsource_control.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -22,8 +22,8 @@ pub fn git_clone(source: &Path, target: &Path, v: &Version) {\n         debug!(\"Running: git clone %s %s\", source.to_str(), target.to_str());\n         let outp = run::process_output(\"git\", [~\"clone\", source.to_str(), target.to_str()]);\n         if outp.status != 0 {\n-            io::println(str::from_bytes_owned(outp.output.clone()));\n-            io::println(str::from_bytes_owned(outp.error));\n+            io::println(str::from_utf8_owned(outp.output.clone()));\n+            io::println(str::from_utf8_owned(outp.error));\n             fail!(\"Couldn't `git clone` %s\", source.to_str());\n         }\n         else {\n@@ -36,8 +36,8 @@ pub fn git_clone(source: &Path, target: &Path, v: &Version) {\n                                     fmt!(\"--git-dir=%s\", target.push(\".git\").to_str()),\n                                     ~\"checkout\", fmt!(\"%s\", *s)]);\n                     if outp.status != 0 {\n-                        io::println(str::from_bytes_owned(outp.output.clone()));\n-                        io::println(str::from_bytes_owned(outp.error));\n+                        io::println(str::from_utf8_owned(outp.output.clone()));\n+                        io::println(str::from_utf8_owned(outp.error));\n                         fail!(\"Couldn't `git checkout %s` in %s\",\n                               *s, target.to_str());\n                     }\n@@ -64,8 +64,8 @@ pub fn git_clone(source: &Path, target: &Path, v: &Version) {\n pub fn git_clone_general(source: &str, target: &Path, v: &Version) -> bool {\n     let outp = run::process_output(\"git\", [~\"clone\", source.to_str(), target.to_str()]);\n     if outp.status != 0 {\n-         debug!(str::from_bytes_owned(outp.output.clone()));\n-         debug!(str::from_bytes_owned(outp.error));\n+         debug!(str::from_utf8_owned(outp.output.clone()));\n+         debug!(str::from_utf8_owned(outp.error));\n          false\n     }\n     else {\n@@ -74,8 +74,8 @@ pub fn git_clone_general(source: &str, target: &Path, v: &Version) -> bool {\n                     let outp = process_output_in_cwd(\"git\", [~\"checkout\", fmt!(\"%s\", *s)],\n                                                          target);\n                     if outp.status != 0 {\n-                        debug!(str::from_bytes_owned(outp.output.clone()));\n-                        debug!(str::from_bytes_owned(outp.error));\n+                        debug!(str::from_utf8_owned(outp.output.clone()));\n+                        debug!(str::from_utf8_owned(outp.error));\n                         false\n                     }\n                     else {"}, {"sha": "a86f299276ab2c1c3f653eff9d9a2b88ef2517c6", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -123,7 +123,7 @@ fn run_git(args: &[~str], env: Option<~[(~str, ~str)]>, cwd: &Path, err_msg: &st\n     let rslt = prog.finish_with_output();\n     if rslt.status != 0 {\n         fail!(\"%s [git returned %?, output = %s, error = %s]\", err_msg,\n-           rslt.status, str::from_bytes(rslt.output), str::from_bytes(rslt.error));\n+           rslt.status, str::from_utf8(rslt.output), str::from_utf8(rslt.error));\n     }\n }\n \n@@ -230,8 +230,8 @@ fn command_line_test_with_env(args: &[~str], cwd: &Path, env: Option<~[(~str, ~s\n     });\n     let output = prog.finish_with_output();\n     debug!(\"Output from command %s with args %? was %s {%s}[%?]\",\n-                    cmd, args, str::from_bytes(output.output),\n-                   str::from_bytes(output.error),\n+                    cmd, args, str::from_utf8(output.output),\n+                   str::from_utf8(output.error),\n                    output.status);\n /*\n By the way, rustpkg *won't* return a nonzero exit code if it fails --\n@@ -242,7 +242,7 @@ to make sure the command succeeded\n     if output.status != 0 {\n         fail!(\"Command %s %? failed with exit code %?; its output was {{{ %s }}}\",\n               cmd, args, output.status,\n-              str::from_bytes(output.output) + str::from_bytes(output.error));\n+              str::from_utf8(output.output) + str::from_utf8(output.error));\n     }\n     output\n }\n@@ -358,7 +358,7 @@ fn built_library_exists(repo: &Path, short_name: &str) -> bool {\n fn command_line_test_output(args: &[~str]) -> ~[~str] {\n     let mut result = ~[];\n     let p_output = command_line_test(args, &os::getcwd());\n-    let test_output = str::from_bytes(p_output.output);\n+    let test_output = str::from_utf8(p_output.output);\n     for s in test_output.split_iter('\\n') {\n         result.push(s.to_owned());\n     }\n@@ -368,7 +368,7 @@ fn command_line_test_output(args: &[~str]) -> ~[~str] {\n fn command_line_test_output_with_env(args: &[~str], env: ~[(~str, ~str)]) -> ~[~str] {\n     let mut result = ~[];\n     let p_output = command_line_test_with_env(args, &os::getcwd(), Some(env));\n-    let test_output = str::from_bytes(p_output.output);\n+    let test_output = str::from_utf8(p_output.output);\n     for s in test_output.split_iter('\\n') {\n         result.push(s.to_owned());\n     }\n@@ -985,7 +985,7 @@ fn test_info() {\n     let expected_info = ~\"package foo\"; // fill in\n     let workspace = create_local_package(&PkgId::new(\"foo\"));\n     let output = command_line_test([~\"info\", ~\"foo\"], &workspace);\n-    assert_eq!(str::from_bytes(output.output), expected_info);\n+    assert_eq!(str::from_utf8(output.output), expected_info);\n }\n \n #[test]\n@@ -994,7 +994,7 @@ fn test_rustpkg_test() {\n     let expected_results = ~\"1 out of 1 tests passed\"; // fill in\n     let workspace = create_local_package_with_test(&PkgId::new(\"foo\"));\n     let output = command_line_test([~\"test\", ~\"foo\"], &workspace);\n-    assert_eq!(str::from_bytes(output.output), expected_results);\n+    assert_eq!(str::from_utf8(output.output), expected_results);\n }\n \n #[test]\n@@ -1004,7 +1004,7 @@ fn test_uninstall() {\n     let _output = command_line_test([~\"info\", ~\"foo\"], &workspace);\n     command_line_test([~\"uninstall\", ~\"foo\"], &workspace);\n     let output = command_line_test([~\"list\"], &workspace);\n-    assert!(!str::from_bytes(output.output).contains(\"foo\"));\n+    assert!(!str::from_utf8(output.output).contains(\"foo\"));\n }\n \n #[test]\n@@ -1073,8 +1073,8 @@ fn test_extern_mod() {\n     let outp = prog.finish_with_output();\n     if outp.status != 0 {\n         fail!(\"output was %s, error was %s\",\n-              str::from_bytes(outp.output),\n-              str::from_bytes(outp.error));\n+              str::from_utf8(outp.output),\n+              str::from_utf8(outp.error));\n     }\n     assert!(os::path_exists(&exec_file) && is_executable(&exec_file));\n }"}, {"sha": "d408177572f8ba4f9de793a63b801e023228117e", "filename": "src/librustpkg/version.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibrustpkg%2Fversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibrustpkg%2Fversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fversion.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -111,7 +111,7 @@ pub fn try_getting_local_version(local_path: &Path) -> Option<Version> {\n         }\n \n     let mut output = None;\n-    let output_text = str::from_bytes(outp.output);\n+    let output_text = str::from_utf8(outp.output);\n     for l in output_text.line_iter() {\n         if !l.is_whitespace() {\n             output = Some(l);\n@@ -141,15 +141,15 @@ pub fn try_getting_version(remote_path: &Path) -> Option<Version> {\n                                                 tmp_dir.to_str()]);\n         if outp.status == 0 {\n             debug!(\"Cloned it... ( %s, %s )\",\n-                   str::from_bytes(outp.output),\n-                   str::from_bytes(outp.error));\n+                   str::from_utf8(outp.output),\n+                   str::from_utf8(outp.error));\n             let mut output = None;\n             debug!(\"(getting version, now getting tags) executing {git --git-dir=%s tag -l}\",\n                    tmp_dir.push(\".git\").to_str());\n             let outp = run::process_output(\"git\",\n                                            [fmt!(\"--git-dir=%s\", tmp_dir.push(\".git\").to_str()),\n                                             ~\"tag\", ~\"-l\"]);\n-            let output_text = str::from_bytes(outp.output);\n+            let output_text = str::from_utf8(outp.output);\n             debug!(\"Full output: ( %s ) [%?]\", output_text, outp.status);\n             for l in output_text.line_iter() {\n                 debug!(\"A line of output: %s\", l);"}, {"sha": "ef0363404123ac37fe2f8183959a5d7a38c6c019", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -468,7 +468,7 @@ pub unsafe fn write(output: &mut io::Writer,\n pub unsafe fn format(fmt: &[rt::Piece], args: &[Argument]) -> ~str {\n     let mut output = MemWriter::new();\n     write(&mut output as &mut io::Writer, fmt, args);\n-    return str::from_bytes_owned(output.inner());\n+    return str::from_utf8_owned(output.inner());\n }\n \n impl<'self> Formatter<'self> {\n@@ -589,7 +589,7 @@ impl<'self> Formatter<'self> {\n \n     fn runplural(&mut self, value: uint, pieces: &[rt::Piece]) {\n         do ::uint::to_str_bytes(value, 10) |buf| {\n-            let valuestr = str::from_bytes_slice(buf);\n+            let valuestr = str::from_utf8_slice(buf);\n             for piece in pieces.iter() {\n                 self.run(piece, Some(valuestr));\n             }"}, {"sha": "ee94844661410edc02c2a5f48a3d71de8767be97", "filename": "src/libstd/io.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -642,7 +642,7 @@ impl<T:Reader> ReaderUtil for T {\n             }\n             bytes.push(ch as u8);\n         }\n-        str::from_bytes(bytes)\n+        str::from_utf8(bytes)\n     }\n \n     fn read_line(&self) -> ~str {\n@@ -651,7 +651,7 @@ impl<T:Reader> ReaderUtil for T {\n \n     fn read_chars(&self, n: uint) -> ~[char] {\n         // returns the (consumed offset, n_req), appends characters to &chars\n-        fn chars_from_bytes<T:Reader>(bytes: &~[u8], chars: &mut ~[char])\n+        fn chars_from_utf8<T:Reader>(bytes: &~[u8], chars: &mut ~[char])\n             -> (uint, uint) {\n             let mut i = 0;\n             let bytes_len = bytes.len();\n@@ -701,7 +701,7 @@ impl<T:Reader> ReaderUtil for T {\n                 break;\n             }\n             bytes.push_all(data);\n-            let (offset, nbreq) = chars_from_bytes::<T>(&bytes, &mut chars);\n+            let (offset, nbreq) = chars_from_utf8::<T>(&bytes, &mut chars);\n             let ncreq = n - chars.len();\n             // again we either know we need a certain number of bytes\n             // to complete a character, or we make sure we don't\n@@ -1761,7 +1761,7 @@ pub fn with_bytes_writer(f: &fn(@Writer)) -> ~[u8] {\n }\n \n pub fn with_str_writer(f: &fn(@Writer)) -> ~str {\n-    str::from_bytes(with_bytes_writer(f))\n+    str::from_utf8(with_bytes_writer(f))\n }\n \n // Utility functions\n@@ -1781,7 +1781,7 @@ pub fn seek_in_buf(offset: int, pos: uint, len: uint, whence: SeekStyle) ->\n pub fn read_whole_file_str(file: &Path) -> Result<~str, ~str> {\n     do read_whole_file(file).chain |bytes| {\n         if str::is_utf8(bytes) {\n-            Ok(str::from_bytes(bytes))\n+            Ok(str::from_utf8(bytes))\n         } else {\n             Err(file.to_str() + \" is not UTF-8\")\n         }"}, {"sha": "377d0a781349f9b2b9b776fcf734e41b0ce243a1", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -541,7 +541,7 @@ impl ToStrRadix for $T {\n         }\n         // We know we generated valid utf-8, so we don't need to go through that\n         // check.\n-        unsafe { str::raw::from_bytes_owned(buf) }\n+        unsafe { str::raw::from_utf8_owned(buf) }\n     }\n }\n "}, {"sha": "edfabd339af5c8e0987b64b7286a33a0e88d789d", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -417,7 +417,7 @@ pub fn float_to_str_common<T:NumCast+Zero+One+Eq+Ord+NumStrConv+Float+Round+\n         sign: SignFormat, digits: SignificantDigits) -> (~str, bool) {\n     let (bytes, special) = float_to_str_bytes_common(num, radix,\n                                negative_zero, sign, digits);\n-    (str::from_bytes(bytes), special)\n+    (str::from_utf8(bytes), special)\n }\n \n // Some constants for from_str_bytes_common's input validation,"}, {"sha": "af991045b45921ac37e2ddd20f6eaf7ac4f90cc9", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -396,7 +396,7 @@ impl ToStrRadix for $T {\n         }\n         // We know we generated valid utf-8, so we don't need to go through that\n         // check.\n-        unsafe { str::raw::from_bytes_owned(buf) }\n+        unsafe { str::raw::from_utf8_owned(buf) }\n     }\n }\n "}, {"sha": "c03d7bdf6a7f513f73af414464683d66e707472a", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -634,7 +634,7 @@ fn test_repr() {\n     fn exact_test<T>(t: &T, e:&str) {\n         let mut m = io::mem::MemWriter::new();\n         write_repr(&mut m as &mut io::Writer, t);\n-        let s = str::from_bytes_owned(m.inner());\n+        let s = str::from_utf8_owned(m.inner());\n         assert_eq!(s.as_slice(), e);\n     }\n "}, {"sha": "ad21dfea3cd183cb95803801ee5665bcfb8253e0", "filename": "src/libstd/rt/io/file.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Ffile.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -159,7 +159,7 @@ fn file_test_smoke_test_impl() {\n             let mut read_buf = [0, .. 1028];\n             let read_str = match read_stream.read(read_buf).unwrap() {\n                 -1|0 => fail!(\"shouldn't happen\"),\n-                n => str::from_bytes(read_buf.slice_to(n))\n+                n => str::from_utf8(read_buf.slice_to(n))\n             };\n             assert!(read_str == message.to_owned());\n         }\n@@ -230,7 +230,7 @@ fn file_test_io_non_positional_read_impl() {\n             }\n         }\n         unlink(filename);\n-        let read_str = str::from_bytes(read_mem);\n+        let read_str = str::from_utf8(read_mem);\n         assert!(read_str == message.to_owned());\n     }\n }\n@@ -262,7 +262,7 @@ fn file_test_io_seeking_impl() {\n             tell_pos_post_read = read_stream.tell();\n         }\n         unlink(filename);\n-        let read_str = str::from_bytes(read_mem);\n+        let read_str = str::from_utf8(read_mem);\n         assert!(read_str == message.slice(4, 8).to_owned());\n         assert!(tell_pos_pre_read == set_cursor);\n         assert!(tell_pos_post_read == message.len() as u64);\n@@ -295,7 +295,7 @@ fn file_test_io_seek_and_write_impl() {\n             read_stream.read(read_mem);\n         }\n         unlink(filename);\n-        let read_str = str::from_bytes(read_mem);\n+        let read_str = str::from_utf8(read_mem);\n         io::println(fmt!(\"read_str: '%?' final_msg: '%?'\", read_str, final_msg));\n         assert!(read_str == final_msg.to_owned());\n     }\n@@ -324,17 +324,17 @@ fn file_test_io_seek_shakedown_impl() {\n \n             read_stream.seek(-4, SeekEnd);\n             read_stream.read(read_mem);\n-            let read_str = str::from_bytes(read_mem);\n+            let read_str = str::from_utf8(read_mem);\n             assert!(read_str == chunk_three.to_owned());\n \n             read_stream.seek(-9, SeekCur);\n             read_stream.read(read_mem);\n-            let read_str = str::from_bytes(read_mem);\n+            let read_str = str::from_utf8(read_mem);\n             assert!(read_str == chunk_two.to_owned());\n \n             read_stream.seek(0, SeekSet);\n             read_stream.read(read_mem);\n-            let read_str = str::from_bytes(read_mem);\n+            let read_str = str::from_utf8(read_mem);\n             assert!(read_str == chunk_one.to_owned());\n         }\n         unlink(filename);"}, {"sha": "7c72ce6ba891ea13e107f5711d41eb351589d6d9", "filename": "src/libstd/rt/io/flate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibstd%2Frt%2Fio%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibstd%2Frt%2Fio%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fflate.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -117,7 +117,7 @@ mod test {\n         let mut out_bytes = [0, .. 100];\n         let bytes_read = inflate_reader.read(out_bytes).unwrap();\n         assert_eq!(bytes_read, in_bytes.len());\n-        let out_msg = str::from_bytes(out_bytes);\n+        let out_msg = str::from_utf8(out_bytes);\n         assert!(in_msg == out_msg);\n     }\n }"}, {"sha": "15fe9abaa2c50ef90156cf4e81e5a89d68d89a53", "filename": "src/libstd/rt/uv/file.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibstd%2Frt%2Fuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibstd%2Frt%2Fuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Ffile.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -329,7 +329,7 @@ mod test {\n                                 if nread > 0 {\n                                     let read_str = unsafe {\n                                         let read_buf = *read_buf_ptr;\n-                                        str::from_bytes(\n+                                        str::from_utf8(\n                                             vec::from_buf(\n                                                 read_buf.base, nread))\n                                     };\n@@ -393,7 +393,7 @@ mod test {\n             // nread == 0 would be EOF.. we know it's >= zero because otherwise\n             // the above assert would fail\n             if nread > 0 {\n-                let read_str = str::from_bytes(\n+                let read_str = str::from_utf8(\n                     read_mem.slice(0, nread as uint));\n                 assert!(read_str == ~\"hello\");\n                 // close"}, {"sha": "6e8908506544a043460804b6fdd0b586506f5205", "filename": "src/libstd/rt/uv/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fnet.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -83,7 +83,7 @@ fn uv_socket_addr_as_socket_addr<T>(addr: UvSocketAddr, f: &fn(SocketAddr) -> T)\n         };\n         port as u16\n     };\n-    let ip_str = str::from_bytes_slice(ip_name).trim_right_chars(&'\\x00');\n+    let ip_str = str::from_utf8_slice(ip_name).trim_right_chars(&'\\x00');\n     let ip_addr = FromStr::from_str(ip_str).unwrap();\n \n     // finally run the closure"}, {"sha": "6f9e3c43b0e84204e5ddb73dd7e10144bd7baf7a", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -1812,7 +1812,7 @@ fn file_test_uvio_full_simple_impl() {\n             let mut fd = (*io).fs_open(&Path(path), ro_fm, ro_fa).unwrap();\n             let mut read_vec = [0, .. 1028];\n             let nread = fd.read(read_vec).unwrap();\n-            let read_val = str::from_bytes(read_vec.slice(0, nread as uint));\n+            let read_val = str::from_utf8(read_vec.slice(0, nread as uint));\n             assert!(read_val == write_val.to_owned());\n         }\n         (*io).fs_unlink(&Path(path));"}, {"sha": "0fe9236253d2ebca0e32da402973ec8b37566cad", "filename": "src/libstd/run.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -997,7 +997,7 @@ mod tests {\n \n         let run::ProcessOutput {status, output, error}\n              = run::process_output(\"echo\", [~\"hello\"]);\n-        let output_str = str::from_bytes(output);\n+        let output_str = str::from_utf8(output);\n \n         assert_eq!(status, 0);\n         assert_eq!(output_str.trim().to_owned(), ~\"hello\");\n@@ -1012,7 +1012,7 @@ mod tests {\n \n         let run::ProcessOutput {status, output, error}\n              = run::process_output(\"/system/bin/sh\", [~\"-c\",~\"echo hello\"]);\n-        let output_str = str::from_bytes(output);\n+        let output_str = str::from_utf8(output);\n \n         assert_eq!(status, 0);\n         assert_eq!(output_str.trim().to_owned(), ~\"hello\");\n@@ -1091,7 +1091,7 @@ mod tests {\n             let reader = io::FILE_reader(file, false);\n             let buf = reader.read_whole_stream();\n             os::fclose(file);\n-            str::from_bytes(buf)\n+            str::from_utf8(buf)\n         }\n     }\n \n@@ -1132,7 +1132,7 @@ mod tests {\n         let mut prog = run::Process::new(\"echo\", [~\"hello\"], run::ProcessOptions::new());\n         let run::ProcessOutput {status, output, error}\n             = prog.finish_with_output();\n-        let output_str = str::from_bytes(output);\n+        let output_str = str::from_utf8(output);\n \n         assert_eq!(status, 0);\n         assert_eq!(output_str.trim().to_owned(), ~\"hello\");\n@@ -1149,7 +1149,7 @@ mod tests {\n                                          run::ProcessOptions::new());\n         let run::ProcessOutput {status, output, error}\n             = prog.finish_with_output();\n-        let output_str = str::from_bytes(output);\n+        let output_str = str::from_utf8(output);\n \n         assert_eq!(status, 0);\n         assert_eq!(output_str.trim().to_owned(), ~\"hello\");\n@@ -1167,7 +1167,7 @@ mod tests {\n         let run::ProcessOutput {status, output, error}\n             = prog.finish_with_output();\n \n-        let output_str = str::from_bytes(output);\n+        let output_str = str::from_utf8(output);\n \n         assert_eq!(status, 0);\n         assert_eq!(output_str.trim().to_owned(), ~\"hello\");\n@@ -1195,7 +1195,7 @@ mod tests {\n         let run::ProcessOutput {status, output, error}\n             = prog.finish_with_output();\n \n-        let output_str = str::from_bytes(output);\n+        let output_str = str::from_utf8(output);\n \n         assert_eq!(status, 0);\n         assert_eq!(output_str.trim().to_owned(), ~\"hello\");\n@@ -1272,7 +1272,7 @@ mod tests {\n     fn test_keep_current_working_dir() {\n         let mut prog = run_pwd(None);\n \n-        let output = str::from_bytes(prog.finish_with_output().output);\n+        let output = str::from_utf8(prog.finish_with_output().output);\n         let parent_dir = os::getcwd().normalize();\n         let child_dir = Path(output.trim()).normalize();\n \n@@ -1290,7 +1290,7 @@ mod tests {\n         let parent_dir = os::getcwd().dir_path().normalize();\n         let mut prog = run_pwd(Some(&parent_dir));\n \n-        let output = str::from_bytes(prog.finish_with_output().output);\n+        let output = str::from_utf8(prog.finish_with_output().output);\n         let child_dir = Path(output.trim()).normalize();\n \n         let parent_stat = parent_dir.stat().unwrap();\n@@ -1329,7 +1329,7 @@ mod tests {\n         if running_on_valgrind() { return; }\n \n         let mut prog = run_env(None);\n-        let output = str::from_bytes(prog.finish_with_output().output);\n+        let output = str::from_utf8(prog.finish_with_output().output);\n \n         let r = os::env();\n         for &(ref k, ref v) in r.iter() {\n@@ -1343,7 +1343,7 @@ mod tests {\n         if running_on_valgrind() { return; }\n \n         let mut prog = run_env(None);\n-        let output = str::from_bytes(prog.finish_with_output().output);\n+        let output = str::from_utf8(prog.finish_with_output().output);\n \n         let r = os::env();\n         for &(ref k, ref v) in r.iter() {\n@@ -1362,7 +1362,7 @@ mod tests {\n         new_env.push((~\"RUN_TEST_NEW_ENV\", ~\"123\"));\n \n         let mut prog = run_env(Some(new_env));\n-        let output = str::from_bytes(prog.finish_with_output().output);\n+        let output = str::from_utf8(prog.finish_with_output().output);\n \n         assert!(output.contains(\"RUN_TEST_NEW_ENV=123\"));\n     }"}, {"sha": "9d718c30edb85f1c320dca9c9ba1c2c9d3b33618", "filename": "src/libstd/str.rs", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -55,13 +55,13 @@ Section: Creating a string\n /// # Failure\n ///\n /// Raises the `not_utf8` condition if invalid UTF-8\n-pub fn from_bytes(vv: &[u8]) -> ~str {\n+pub fn from_utf8(vv: &[u8]) -> ~str {\n     use str::not_utf8::cond;\n \n-    match from_bytes_opt(vv) {\n+    match from_utf8_opt(vv) {\n         None => {\n             let first_bad_byte = *vv.iter().find(|&b| !is_utf8([*b])).unwrap();\n-            cond.raise(fmt!(\"from_bytes: input is not UTF-8; first bad byte is %u\",\n+            cond.raise(fmt!(\"from_utf8: input is not UTF-8; first bad byte is %u\",\n                             first_bad_byte as uint))\n         }\n         Some(s) => s\n@@ -70,9 +70,9 @@ pub fn from_bytes(vv: &[u8]) -> ~str {\n \n /// Convert a vector of bytes to a new UTF-8 string, if possible.\n /// Returns None if the vector contains invalid UTF-8.\n-pub fn from_bytes_opt(vv: &[u8]) -> Option<~str> {\n+pub fn from_utf8_opt(vv: &[u8]) -> Option<~str> {\n     if is_utf8(vv) {\n-        Some(unsafe { raw::from_bytes(vv) })\n+        Some(unsafe { raw::from_utf8(vv) })\n     } else {\n         None\n     }\n@@ -83,23 +83,23 @@ pub fn from_bytes_opt(vv: &[u8]) -> Option<~str> {\n /// # Failure\n ///\n /// Raises the `not_utf8` condition if invalid UTF-8\n-pub fn from_bytes_owned(vv: ~[u8]) -> ~str {\n+pub fn from_utf8_owned(vv: ~[u8]) -> ~str {\n     use str::not_utf8::cond;\n \n     if !is_utf8(vv) {\n         let first_bad_byte = *vv.iter().find(|&b| !is_utf8([*b])).unwrap();\n-        cond.raise(fmt!(\"from_bytes: input is not UTF-8; first bad byte is %u\",\n+        cond.raise(fmt!(\"from_utf8: input is not UTF-8; first bad byte is %u\",\n                         first_bad_byte as uint))\n     } else {\n-        unsafe { raw::from_bytes_owned(vv) }\n+        unsafe { raw::from_utf8_owned(vv) }\n     }\n }\n \n /// Consumes a vector of bytes to create a new utf-8 string.\n /// Returns None if the vector contains invalid UTF-8.\n-pub fn from_bytes_owned_opt(vv: ~[u8]) -> Option<~str> {\n+pub fn from_utf8_owned_opt(vv: ~[u8]) -> Option<~str> {\n     if is_utf8(vv) {\n-        Some(unsafe { raw::from_bytes_owned(vv) })\n+        Some(unsafe { raw::from_utf8_owned(vv) })\n     } else {\n         None\n     }\n@@ -113,14 +113,14 @@ pub fn from_bytes_owned_opt(vv: ~[u8]) -> Option<~str> {\n /// # Failure\n ///\n /// Fails if invalid UTF-8\n-pub fn from_bytes_slice<'a>(v: &'a [u8]) -> &'a str {\n-    from_bytes_slice_opt(v).expect(\"from_bytes_slice: not utf-8\")\n+pub fn from_utf8_slice<'a>(v: &'a [u8]) -> &'a str {\n+    from_utf8_slice_opt(v).expect(\"from_utf8_slice: not utf-8\")\n }\n \n /// Converts a vector to a string slice without performing any allocations.\n ///\n /// Returns None if the slice is not utf-8.\n-pub fn from_bytes_slice_opt<'a>(v: &'a [u8]) -> Option<&'a str> {\n+pub fn from_utf8_slice_opt<'a>(v: &'a [u8]) -> Option<&'a str> {\n     if is_utf8(v) {\n         Some(unsafe { cast::transmute(v) })\n     } else { None }\n@@ -1000,7 +1000,7 @@ pub mod raw {\n     }\n \n     /// Converts a vector of bytes to a new owned string.\n-    pub unsafe fn from_bytes(v: &[u8]) -> ~str {\n+    pub unsafe fn from_utf8(v: &[u8]) -> ~str {\n         do v.as_imm_buf |buf, len| {\n             from_buf_len(buf, len)\n         }\n@@ -1009,12 +1009,12 @@ pub mod raw {\n     /// Converts an owned vector of bytes to a new owned string. This assumes\n     /// that the utf-8-ness of the vector has already been validated\n     #[inline]\n-    pub unsafe fn from_bytes_owned(v: ~[u8]) -> ~str {\n+    pub unsafe fn from_utf8_owned(v: ~[u8]) -> ~str {\n         cast::transmute(v)\n     }\n \n     /// Converts a byte to a string.\n-    pub unsafe fn from_byte(u: u8) -> ~str { from_bytes([u]) }\n+    pub unsafe fn from_byte(u: u8) -> ~str { from_utf8([u]) }\n \n     /// Form a slice from a C string. Unsafe because the caller must ensure the\n     /// C string has the static lifetime, or else the return value may be\n@@ -2975,14 +2975,14 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_unsafe_from_bytes() {\n+    fn test_unsafe_from_utf8() {\n         let a = ~[65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 65u8];\n-        let b = unsafe { raw::from_bytes(a) };\n+        let b = unsafe { raw::from_utf8(a) };\n         assert_eq!(b, ~\"AAAAAAA\");\n     }\n \n     #[test]\n-    fn test_from_bytes() {\n+    fn test_from_utf8() {\n         let ss = ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n         let bb = ~[0xe0_u8, 0xb8_u8, 0xa8_u8,\n                   0xe0_u8, 0xb9_u8, 0x84_u8,\n@@ -2996,9 +2996,9 @@ mod tests {\n                   0x6d_u8];\n \n \n-        assert_eq!(ss, from_bytes(bb));\n+        assert_eq!(ss, from_utf8(bb));\n         assert_eq!(~\"\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf09\u0e1b\u0e23\u062f\u0648\u0644\u0629 \u0627\u0644\u0643\u0648\u064a\u062a\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\ud800\udf45\ud800\udf3f\ud800\udf3b\ud800\udf46\ud800\udf39\ud800\udf3b\ud800\udf30\",\n-                   from_bytes(bytes!(\"\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf09\u0e1b\u0e23\u062f\u0648\u0644\u0629 \u0627\u0644\u0643\u0648\u064a\u062a\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\ud800\udf45\ud800\udf3f\ud800\udf3b\ud800\udf46\ud800\udf39\ud800\udf3b\ud800\udf30\")));\n+                   from_utf8(bytes!(\"\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf09\u0e1b\u0e23\u062f\u0648\u0644\u0629 \u0627\u0644\u0643\u0648\u064a\u062a\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\ud800\udf45\ud800\udf3f\ud800\udf3b\ud800\udf46\ud800\udf39\ud800\udf3b\ud800\udf30\")));\n     }\n \n     #[test]\n@@ -3028,7 +3028,7 @@ mod tests {\n \n \n     #[test]\n-    fn test_from_bytes_fail() {\n+    fn test_from_utf8_fail() {\n         use str::not_utf8::cond;\n \n         let bb = ~[0xff_u8, 0xb8_u8, 0xa8_u8,\n@@ -3044,11 +3044,11 @@ mod tests {\n \n         let mut error_happened = false;\n         let _x = do cond.trap(|err| {\n-            assert_eq!(err, ~\"from_bytes: input is not UTF-8; first bad byte is 255\");\n+            assert_eq!(err, ~\"from_utf8: input is not UTF-8; first bad byte is 255\");\n             error_happened = true;\n             ~\"\"\n         }).inside {\n-            from_bytes(bb)\n+            from_utf8(bb)\n         };\n         assert!(error_happened);\n     }\n@@ -3133,7 +3133,7 @@ mod tests {\n         let s1: ~str = ~\"All mimsy were the borogoves\";\n \n         let v: ~[u8] = s1.as_bytes().to_owned();\n-        let s2: ~str = from_bytes(v);\n+        let s2: ~str = from_utf8(v);\n         let mut i: uint = 0u;\n         let n1: uint = s1.len();\n         let n2: uint = v.len();\n@@ -3656,73 +3656,73 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_str_from_bytes_slice() {\n+    fn test_str_from_utf8_slice() {\n         let xs = bytes!(\"hello\");\n-        assert_eq!(from_bytes_slice(xs), \"hello\");\n+        assert_eq!(from_utf8_slice(xs), \"hello\");\n \n         let xs = bytes!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n-        assert_eq!(from_bytes_slice(xs), \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n+        assert_eq!(from_utf8_slice(xs), \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n     }\n \n     #[test]\n     #[should_fail]\n-    fn test_str_from_bytes_slice_invalid() {\n+    fn test_str_from_utf8_slice_invalid() {\n         let xs = bytes!(\"hello\", 0xff);\n-        let _ = from_bytes_slice(xs);\n+        let _ = from_utf8_slice(xs);\n     }\n \n     #[test]\n-    fn test_str_from_bytes_slice_opt() {\n+    fn test_str_from_utf8_slice_opt() {\n         let xs = bytes!(\"hello\");\n-        assert_eq!(from_bytes_slice_opt(xs), Some(\"hello\"));\n+        assert_eq!(from_utf8_slice_opt(xs), Some(\"hello\"));\n \n         let xs = bytes!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n-        assert_eq!(from_bytes_slice_opt(xs), Some(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\"));\n+        assert_eq!(from_utf8_slice_opt(xs), Some(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\"));\n \n         let xs = bytes!(\"hello\", 0xff);\n-        assert_eq!(from_bytes_slice_opt(xs), None);\n+        assert_eq!(from_utf8_slice_opt(xs), None);\n     }\n \n     #[test]\n-    fn test_str_from_bytes() {\n+    fn test_str_from_utf8() {\n         let xs = bytes!(\"hello\");\n-        assert_eq!(from_bytes(xs), ~\"hello\");\n+        assert_eq!(from_utf8(xs), ~\"hello\");\n \n         let xs = bytes!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n-        assert_eq!(from_bytes(xs), ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n+        assert_eq!(from_utf8(xs), ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n     }\n \n     #[test]\n-    fn test_str_from_bytes_opt() {\n+    fn test_str_from_utf8_opt() {\n         let xs = bytes!(\"hello\").to_owned();\n-        assert_eq!(from_bytes_opt(xs), Some(~\"hello\"));\n+        assert_eq!(from_utf8_opt(xs), Some(~\"hello\"));\n \n         let xs = bytes!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n-        assert_eq!(from_bytes_opt(xs), Some(~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\"));\n+        assert_eq!(from_utf8_opt(xs), Some(~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\"));\n \n         let xs = bytes!(\"hello\", 0xff);\n-        assert_eq!(from_bytes_opt(xs), None);\n+        assert_eq!(from_utf8_opt(xs), None);\n     }\n \n     #[test]\n-    fn test_str_from_bytes_owned() {\n+    fn test_str_from_utf8_owned() {\n         let xs = bytes!(\"hello\").to_owned();\n-        assert_eq!(from_bytes_owned(xs), ~\"hello\");\n+        assert_eq!(from_utf8_owned(xs), ~\"hello\");\n \n         let xs = bytes!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\").to_owned();\n-        assert_eq!(from_bytes_owned(xs), ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n+        assert_eq!(from_utf8_owned(xs), ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n     }\n \n     #[test]\n-    fn test_str_from_bytes_owned_opt() {\n+    fn test_str_from_utf8_owned_opt() {\n         let xs = bytes!(\"hello\").to_owned();\n-        assert_eq!(from_bytes_owned_opt(xs), Some(~\"hello\"));\n+        assert_eq!(from_utf8_owned_opt(xs), Some(~\"hello\"));\n \n         let xs = bytes!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\").to_owned();\n-        assert_eq!(from_bytes_owned_opt(xs), Some(~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\"));\n+        assert_eq!(from_utf8_owned_opt(xs), Some(~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\"));\n \n         let xs = bytes!(\"hello\", 0xff).to_owned();\n-        assert_eq!(from_bytes_owned_opt(xs), None);\n+        assert_eq!(from_utf8_owned_opt(xs), None);\n     }\n }\n "}, {"sha": "c3a5afc1ec8d6f342a9a9a4d3890f82b0da106a0", "filename": "src/libstd/sys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibstd%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibstd%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -99,7 +99,7 @@ pub fn log_str<T>(t: &T) -> ~str {\n \n     let mut result = io::mem::MemWriter::new();\n     repr::write_repr(&mut result as &mut io::Writer, t);\n-    str::from_bytes_owned(result.inner())\n+    str::from_utf8_owned(result.inner())\n }\n #[cfg(stage0)]\n pub fn log_str<T>(t: &T) -> ~str {"}, {"sha": "7ca6224c31d5e5d37ddcd39d12e798843cfab6d1", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -338,7 +338,7 @@ pub fn gather_comments_and_literals(span_diagnostic:\n                                     path: @str,\n                                     srdr: @io::Reader)\n                                  -> (~[cmnt], ~[lit]) {\n-    let src = str::from_bytes(srdr.read_whole_stream()).to_managed();\n+    let src = str::from_utf8(srdr.read_whole_stream()).to_managed();\n     let cm = CodeMap::new();\n     let filemap = cm.new_filemap(path, src);\n     let rdr = lexer::new_low_level_string_reader(span_diagnostic, filemap);"}, {"sha": "f0bf7fc7a6b01d6439d2e2b3e3d6bec0ccd6a721", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -72,7 +72,7 @@ fn sort_and_fmt(mm: &HashMap<~[u8], uint>, total: uint) -> ~str {\n    for kv in pairs_sorted.iter() {\n        let (k,v) = (*kv).clone();\n        unsafe {\n-           let b = str::raw::from_bytes(k);\n+           let b = str::raw::from_utf8(k);\n            // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use\n            // to_ascii_move and to_str_move to not do a unnecessary copy.\n            buffer.push_str(fmt!(\"%s %0.3f\\n\", b.to_ascii().to_upper().to_str_ascii(), v));"}, {"sha": "ae3422540aa402aef38ee0c4171cb27a6f7362a8", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -60,7 +60,7 @@ impl Code {\n         }\n \n         reverse(result);\n-        str::from_bytes(result)\n+        str::from_utf8(result)\n     }\n }\n "}, {"sha": "d12a0abc9a624f6f08d20d2dd75c29c616f754a1", "filename": "src/test/run-pass/const-str-ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -17,13 +17,13 @@ static C: *u8 = B as *u8;\n pub fn main() {\n     unsafe {\n         let foo = &A as *u8;\n-        assert_eq!(str::raw::from_bytes(A), ~\"hi\");\n+        assert_eq!(str::raw::from_utf8(A), ~\"hi\");\n         assert_eq!(str::raw::from_buf_len(foo, A.len()), ~\"hi\");\n         assert_eq!(str::raw::from_buf_len(C, B.len()), ~\"hi\");\n         assert!(*C == A[0]);\n         assert!(*(&B[0] as *u8) == A[0]);\n \n-        let bar = str::raw::from_bytes(A).to_c_str();\n+        let bar = str::raw::from_utf8(A).to_c_str();\n         assert_eq!(bar.with_ref(|buf| str::raw::from_c_str(buf)), ~\"hi\");\n     }\n }"}, {"sha": "1c3e83f3cab248ef240c4aa4cc6a493fa06274a3", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -44,13 +44,13 @@ fn test_destroy_actually_kills(force: bool) {\n     #[cfg(unix,not(target_os=\"android\"))]\n     fn process_exists(pid: libc::pid_t) -> bool {\n         let run::ProcessOutput {output, _} = run::process_output(\"ps\", [~\"-p\", pid.to_str()]);\n-        str::from_bytes(output).contains(pid.to_str())\n+        str::from_utf8(output).contains(pid.to_str())\n     }\n \n     #[cfg(unix,target_os=\"android\")]\n     fn process_exists(pid: libc::pid_t) -> bool {\n         let run::ProcessOutput {output, _} = run::process_output(\"/system/bin/ps\", [pid.to_str()]);\n-        str::from_bytes(output).contains(~\"root\")\n+        str::from_utf8(output).contains(~\"root\")\n     }\n \n     #[cfg(windows)]"}, {"sha": "7cd26dd84c4abb25edfeef0d07b5fb611136261e", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -80,7 +80,7 @@ mod map_reduce {\n               mapper_done => { num_mappers -= 1; }\n               find_reducer(k, cc) => {\n                 let mut c;\n-                match reducers.find(&str::from_bytes(k)) {\n+                match reducers.find(&str::from_utf8(k)) {\n                   Some(&_c) => { c = _c; }\n                   None => { c = 0; }\n                 }"}, {"sha": "3f0c7e0704161c1d1170ea2faa2013fc173e729f", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=6f9ce0948a47dbbb5a0ed9aae12e2cce6755465a", "patch": "@@ -246,7 +246,7 @@ fn test_write() {\n         writeln!(w, \"{foo}\", foo=\"bar\");\n     }\n \n-    let s = str::from_bytes_owned(buf.inner());\n+    let s = str::from_utf8_owned(buf.inner());\n     t!(s, \"34helloline\\nbar\\n\");\n }\n "}]}