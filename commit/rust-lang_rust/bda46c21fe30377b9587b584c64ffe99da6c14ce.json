{"sha": "bda46c21fe30377b9587b584c64ffe99da6c14ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkYTQ2YzIxZmUzMDM3N2I5NTg3YjU4NGM2NGZmZTk5ZGE2YzE0Y2U=", "commit": {"author": {"name": "Scott A Carr", "email": "s.carr1024@gmail.com", "date": "2016-08-02T17:46:26Z"}, "committer": {"name": "Scott A Carr", "email": "s.carr1024@gmail.com", "date": "2016-08-02T17:46:26Z"}, "message": "reduce rightward drift, add fixme", "tree": {"sha": "48719471a95be33b81011b97612600889312d5eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48719471a95be33b81011b97612600889312d5eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bda46c21fe30377b9587b584c64ffe99da6c14ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bda46c21fe30377b9587b584c64ffe99da6c14ce", "html_url": "https://github.com/rust-lang/rust/commit/bda46c21fe30377b9587b584c64ffe99da6c14ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bda46c21fe30377b9587b584c64ffe99da6c14ce/comments", "author": {"login": "scottcarr", "id": 472477, "node_id": "MDQ6VXNlcjQ3MjQ3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/472477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottcarr", "html_url": "https://github.com/scottcarr", "followers_url": "https://api.github.com/users/scottcarr/followers", "following_url": "https://api.github.com/users/scottcarr/following{/other_user}", "gists_url": "https://api.github.com/users/scottcarr/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottcarr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottcarr/subscriptions", "organizations_url": "https://api.github.com/users/scottcarr/orgs", "repos_url": "https://api.github.com/users/scottcarr/repos", "events_url": "https://api.github.com/users/scottcarr/events{/privacy}", "received_events_url": "https://api.github.com/users/scottcarr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottcarr", "id": 472477, "node_id": "MDQ6VXNlcjQ3MjQ3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/472477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottcarr", "html_url": "https://github.com/scottcarr", "followers_url": "https://api.github.com/users/scottcarr/followers", "following_url": "https://api.github.com/users/scottcarr/following{/other_user}", "gists_url": "https://api.github.com/users/scottcarr/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottcarr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottcarr/subscriptions", "organizations_url": "https://api.github.com/users/scottcarr/orgs", "repos_url": "https://api.github.com/users/scottcarr/repos", "events_url": "https://api.github.com/users/scottcarr/events{/privacy}", "received_events_url": "https://api.github.com/users/scottcarr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62cdbea8c92ab525a1d546ce010485d10a1fb7b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/62cdbea8c92ab525a1d546ce010485d10a1fb7b9", "html_url": "https://github.com/rust-lang/rust/commit/62cdbea8c92ab525a1d546ce010485d10a1fb7b9"}], "stats": {"total": 82, "additions": 41, "deletions": 41}, "files": [{"sha": "3d8e013c5a7d80332459e90d0d282fb8ce010181", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/bda46c21fe30377b9587b584c64ffe99da6c14ce/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda46c21fe30377b9587b584c64ffe99da6c14ce/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=bda46c21fe30377b9587b584c64ffe99da6c14ce", "patch": "@@ -31,55 +31,55 @@ impl<'tcx> MirPass<'tcx> for Deaggregator {\n             None => { return; },\n             _ => {}\n         };\n+\n+        // Do not trigger on constants.  Could be revised in future\n         if let MirSource::Fn(_) = source {} else { return; }\n \n         let mut curr: usize = 0;\n         for bb in mir.basic_blocks_mut() {\n-            while let Some(idx) = get_aggregate_statement(curr, &bb.statements) {\n-                // do the replacement\n-                debug!(\"removing statement {:?}\", idx);\n-                let src_info = bb.statements[idx].source_info;\n-                let mut suffix_stmts = bb.statements.split_off(idx);\n-                let orig_stmt = suffix_stmts.remove(0);\n-                let StatementKind::Assign(ref lhs, ref rhs) = orig_stmt.kind;\n-                if let &Rvalue::Aggregate(ref agg_kind, ref operands) = rhs {\n-                    if let &AggregateKind::Adt(adt_def, variant, substs) = agg_kind {\n-                        let n = bb.statements.len();\n-                        bb.statements.reserve(n + operands.len() + suffix_stmts.len());\n-                        for (i, op) in operands.iter().enumerate() {\n-                            let ref variant_def = adt_def.variants[variant];\n-                            let ty = variant_def.fields[variant].ty(tcx, substs);\n-                            let rhs = Rvalue::Use(op.clone());\n+            let idx = match get_aggregate_statement(curr, &bb.statements) {\n+                Some(idx) => idx,\n+                None => continue,\n+            };\n+            // do the replacement\n+            debug!(\"removing statement {:?}\", idx);\n+            let src_info = bb.statements[idx].source_info;\n+            let suffix_stmts = bb.statements.split_off(idx+1);\n+            let orig_stmt = bb.statements.pop().unwrap();\n+            let StatementKind::Assign(ref lhs, ref rhs) = orig_stmt.kind;\n+            let (agg_kind, operands) = match rhs {\n+                &Rvalue::Aggregate(ref agg_kind, ref operands) => (agg_kind, operands),\n+                _ => span_bug!(src_info.span, \"expected aggregate, not {:?}\", rhs),\n+            };\n+            let (adt_def, variant, substs) = match agg_kind {\n+                &AggregateKind::Adt(adt_def, variant, substs) => (adt_def, variant, substs),\n+                _ => span_bug!(src_info.span, \"expected struct, not {:?}\", rhs),\n+            };\n+            let n = bb.statements.len();\n+            bb.statements.reserve(n + operands.len() + suffix_stmts.len());\n+            for (i, op) in operands.iter().enumerate() {\n+                let ref variant_def = adt_def.variants[variant];\n+                let ty = variant_def.fields[variant].ty(tcx, substs);\n+                let rhs = Rvalue::Use(op.clone());\n \n-                            // since we don't handle enums, we don't need a cast\n-                            let lhs_cast = lhs.clone();\n+                // since we don't handle enums, we don't need a cast\n+                let lhs_cast = lhs.clone();\n \n-                            // if we handled enums:\n-                            // let lhs_cast = if adt_def.variants.len() > 1 {\n-                            //     Lvalue::Projection(Box::new(LvalueProjection {\n-                            //         base: ai.lhs.clone(),\n-                            //         elem: ProjectionElem::Downcast(ai.adt_def, ai.variant),\n-                            //     }))\n-                            // } else {\n-                            //     lhs_cast\n-                            // };\n+                // FIXME we cannot deaggregate enums issue: 35186\n \n-                            let lhs_proj = Lvalue::Projection(Box::new(LvalueProjection {\n-                                base: lhs_cast,\n-                                elem: ProjectionElem::Field(Field::new(i), ty),\n-                            }));\n-                            let new_statement = Statement {\n-                                source_info: src_info,\n-                                kind: StatementKind::Assign(lhs_proj, rhs),\n-                            };\n-                            debug!(\"inserting: {:?} @ {:?}\", new_statement, idx + i);\n-                            bb.statements.push(new_statement);\n-                        }\n-                        curr = bb.statements.len();\n-                        bb.statements.extend(suffix_stmts);\n-                    }\n-                }\n+                let lhs_proj = Lvalue::Projection(Box::new(LvalueProjection {\n+                    base: lhs_cast,\n+                    elem: ProjectionElem::Field(Field::new(i), ty),\n+                }));\n+                let new_statement = Statement {\n+                    source_info: src_info,\n+                    kind: StatementKind::Assign(lhs_proj, rhs),\n+                };\n+                debug!(\"inserting: {:?} @ {:?}\", new_statement, idx + i);\n+                bb.statements.push(new_statement);\n             }\n+            curr = bb.statements.len();\n+            bb.statements.extend(suffix_stmts);\n         }\n     }\n }"}]}