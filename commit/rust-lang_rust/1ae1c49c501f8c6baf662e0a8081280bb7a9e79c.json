{"sha": "1ae1c49c501f8c6baf662e0a8081280bb7a9e79c", "node_id": "C_kwDOAAsO6NoAKDFhZTFjNDljNTAxZjhjNmJhZjY2MmUwYTgwODEyODBiYjdhOWU3OWM", "commit": {"author": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-01-16T18:55:27Z"}, "committer": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-01-16T21:00:31Z"}, "message": "document EarlyBinder::subst_identity and skip_binder", "tree": {"sha": "5f615e2a125485baa20b5ca3e90b88e4e5c864a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f615e2a125485baa20b5ca3e90b88e4e5c864a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ae1c49c501f8c6baf662e0a8081280bb7a9e79c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ae1c49c501f8c6baf662e0a8081280bb7a9e79c", "html_url": "https://github.com/rust-lang/rust/commit/1ae1c49c501f8c6baf662e0a8081280bb7a9e79c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ae1c49c501f8c6baf662e0a8081280bb7a9e79c/comments", "author": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "481725984b4cd94ef5c00917b01c1771b6e5299c", "url": "https://api.github.com/repos/rust-lang/rust/commits/481725984b4cd94ef5c00917b01c1771b6e5299c", "html_url": "https://github.com/rust-lang/rust/commit/481725984b4cd94ef5c00917b01c1771b6e5299c"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "3008c64199a116246dadde077dc6732ee85de017", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1ae1c49c501f8c6baf662e0a8081280bb7a9e79c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ae1c49c501f8c6baf662e0a8081280bb7a9e79c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=1ae1c49c501f8c6baf662e0a8081280bb7a9e79c", "patch": "@@ -538,6 +538,9 @@ impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for &'tcx ty::List<T> {\n /// Similar to [`super::Binder`] except that it tracks early bound generics, i.e. `struct Foo<T>(T)`\n /// needs `T` substituted immediately. This type primarily exists to avoid forgetting to call\n /// `subst`.\n+///\n+/// If you don't have anything to `subst`, you may be looking for\n+/// [`subst_identity`](EarlyBinder::subst_identity) or [`skip_binder`](EarlyBinder::skip_binder).\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n #[derive(Encodable, Decodable, HashStable)]\n pub struct EarlyBinder<T>(pub T);\n@@ -578,6 +581,14 @@ impl<T> EarlyBinder<T> {\n         EarlyBinder(value)\n     }\n \n+    /// Skips the binder and returns the \"bound\" value.\n+    /// This can be used to extract data that does not depend on generic parameters\n+    /// (e.g., getting the `DefId` of the inner value or getting the number of\n+    /// arguments of an `FnSig`). Otherwise, consider using\n+    /// [`subst_identity`](EarlyBinder::subst_identity).\n+    ///\n+    /// See also [`Binder::skip_binder`](super::Binder::skip_binder), which is\n+    /// the analogous operation on [`super::Binder`].\n     pub fn skip_binder(self) -> T {\n         self.0\n     }\n@@ -729,6 +740,14 @@ impl<'tcx, T: TypeFoldable<'tcx>> ty::EarlyBinder<T> {\n         self.0.fold_with(&mut folder)\n     }\n \n+    /// Makes the identity substitution `T0 => T0, ..., TN => TN`.\n+    /// Conceptually, this converts universally bound variables into placeholders\n+    /// when inside of a given item.\n+    ///\n+    /// For example, consider `for<T> fn foo<T>(){ .. }`:\n+    /// - Outside of `foo`, `T` is bound (represented by the presence of `EarlyBinder`).\n+    /// - Inside of the body of `foo`, we treat `T` as a placeholder by calling\n+    /// `subst_identity` to discharge the `EarlyBinder`.\n     pub fn subst_identity(self) -> T {\n         self.0\n     }"}]}