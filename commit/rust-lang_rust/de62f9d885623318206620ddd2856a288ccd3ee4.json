{"sha": "de62f9d885623318206620ddd2856a288ccd3ee4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNjJmOWQ4ODU2MjMzMTgyMDY2MjBkZGQyODU2YTI4OGNjZDNlZTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-18T12:23:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-18T12:23:54Z"}, "message": "Auto merge of #30286 - oli-obk:const_error_span, r=nikomatsakis\n\npreviously the error was erased and a `non-const path` error was emitted at the location of the field access instead of at the overflow location (as can be seen in the playground: http://is.gd/EuAF5F )", "tree": {"sha": "c52b297a99841a17ebba324e405cb32268853290", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c52b297a99841a17ebba324e405cb32268853290"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de62f9d885623318206620ddd2856a288ccd3ee4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de62f9d885623318206620ddd2856a288ccd3ee4", "html_url": "https://github.com/rust-lang/rust/commit/de62f9d885623318206620ddd2856a288ccd3ee4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de62f9d885623318206620ddd2856a288ccd3ee4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f963eb2870f6e2b972cd9d432dc0ece954ab6452", "url": "https://api.github.com/repos/rust-lang/rust/commits/f963eb2870f6e2b972cd9d432dc0ece954ab6452", "html_url": "https://github.com/rust-lang/rust/commit/f963eb2870f6e2b972cd9d432dc0ece954ab6452"}, {"sha": "88675939d25a22d9e636d98bb045ea7e4f6e5955", "url": "https://api.github.com/repos/rust-lang/rust/commits/88675939d25a22d9e636d98bb045ea7e4f6e5955", "html_url": "https://github.com/rust-lang/rust/commit/88675939d25a22d9e636d98bb045ea7e4f6e5955"}], "stats": {"total": 62, "additions": 37, "deletions": 25}, "files": [{"sha": "974231be0edf88c9cdc660b3f36f53a4d15fe85a", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 19, "deletions": 25, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/de62f9d885623318206620ddd2856a288ccd3ee4/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de62f9d885623318206620ddd2856a288ccd3ee4/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=de62f9d885623318206620ddd2856a288ccd3ee4", "patch": "@@ -1182,46 +1182,40 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n       },\n       hir::ExprTupField(ref base, index) => {\n         let base_hint = ty_hint.erase_hint();\n-        if let Ok(c) = eval_const_expr_partial(tcx, base, base_hint, fn_args) {\n-            if let Tuple(tup_id) = c {\n-                if let hir::ExprTup(ref fields) = tcx.map.expect_expr(tup_id).node {\n-                    if index.node < fields.len() {\n-                        return eval_const_expr_partial(tcx, &fields[index.node], base_hint, fn_args)\n-                    } else {\n-                        signal!(e, TupleIndexOutOfBounds);\n-                    }\n+        let c = try!(eval_const_expr_partial(tcx, base, base_hint, fn_args));\n+        if let Tuple(tup_id) = c {\n+            if let hir::ExprTup(ref fields) = tcx.map.expect_expr(tup_id).node {\n+                if index.node < fields.len() {\n+                    return eval_const_expr_partial(tcx, &fields[index.node], base_hint, fn_args)\n                 } else {\n-                    unreachable!()\n+                    signal!(e, TupleIndexOutOfBounds);\n                 }\n             } else {\n-                signal!(base, ExpectedConstTuple);\n+                unreachable!()\n             }\n         } else {\n-            signal!(base, NonConstPath)\n+            signal!(base, ExpectedConstTuple);\n         }\n       }\n       hir::ExprField(ref base, field_name) => {\n         let base_hint = ty_hint.erase_hint();\n         // Get the base expression if it is a struct and it is constant\n-        if let Ok(c) = eval_const_expr_partial(tcx, base, base_hint, fn_args) {\n-            if let Struct(struct_id) = c {\n-                if let hir::ExprStruct(_, ref fields, _) = tcx.map.expect_expr(struct_id).node {\n-                    // Check that the given field exists and evaluate it\n-                    // if the idents are compared run-pass/issue-19244 fails\n-                    if let Some(f) = fields.iter().find(|f| f.name.node\n-                                                         == field_name.node) {\n-                        return eval_const_expr_partial(tcx, &*f.expr, base_hint, fn_args)\n-                    } else {\n-                        signal!(e, MissingStructField);\n-                    }\n+        let c = try!(eval_const_expr_partial(tcx, base, base_hint, fn_args));\n+        if let Struct(struct_id) = c {\n+            if let hir::ExprStruct(_, ref fields, _) = tcx.map.expect_expr(struct_id).node {\n+                // Check that the given field exists and evaluate it\n+                // if the idents are compared run-pass/issue-19244 fails\n+                if let Some(f) = fields.iter().find(|f| f.name.node\n+                                                     == field_name.node) {\n+                    return eval_const_expr_partial(tcx, &*f.expr, base_hint, fn_args)\n                 } else {\n-                    unreachable!()\n+                    signal!(e, MissingStructField);\n                 }\n             } else {\n-                signal!(base, ExpectedConstStruct);\n+                unreachable!()\n             }\n         } else {\n-            signal!(base, NonConstPath);\n+            signal!(base, ExpectedConstStruct);\n         }\n       }\n       _ => signal!(e, MiscCatchAll)"}, {"sha": "8c607fc7e32b2ecbfa091fff24cdcb5c781d1888", "filename": "src/test/compile-fail/const-tup-index-span.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/de62f9d885623318206620ddd2856a288ccd3ee4/src%2Ftest%2Fcompile-fail%2Fconst-tup-index-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de62f9d885623318206620ddd2856a288ccd3ee4/src%2Ftest%2Fcompile-fail%2Fconst-tup-index-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-tup-index-span.rs?ref=de62f9d885623318206620ddd2856a288ccd3ee4", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test spans of errors\n+\n+const TUP: (usize,) = 5 << 64;\n+//~^ ERROR: attempted left shift with overflow [E0250]\n+const ARR: [i32; TUP.0] = [];\n+\n+fn main() {\n+}"}]}