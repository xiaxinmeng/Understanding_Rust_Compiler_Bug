{"sha": "58546803885164d488185fb9cb9fb04fcbe64e30", "node_id": "C_kwDOAAsO6NoAKDU4NTQ2ODAzODg1MTY0ZDQ4ODE4NWZiOWNiOWZiMDRmY2JlNjRlMzA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-07T07:31:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-07T07:31:53Z"}, "message": "Auto merge of #102767 - matthiaskrgr:rollup-vcbt81v, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #102577 (Warn about Visual Studio Code branding confusion)\n - #102720 (do not reverse the expected type and found type for ObligationCauseCo\u2026)\n - #102744 (rustdoc: remove unused CSS `.content .item-list`)\n - #102747 (rustdoc: remove unused CSS `.docblock a:not(.srclink)`)\n - #102748 (Disable compressed debug sections on i586-gnu)\n - #102761 (let-else: test else block with non-never uninhabited type)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "37e199929bff5c5e717e197a5dfe34e16dba6fb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37e199929bff5c5e717e197a5dfe34e16dba6fb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58546803885164d488185fb9cb9fb04fcbe64e30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58546803885164d488185fb9cb9fb04fcbe64e30", "html_url": "https://github.com/rust-lang/rust/commit/58546803885164d488185fb9cb9fb04fcbe64e30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58546803885164d488185fb9cb9fb04fcbe64e30/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf0fa76f2711a26ff114f005af886479867724f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf0fa76f2711a26ff114f005af886479867724f7", "html_url": "https://github.com/rust-lang/rust/commit/cf0fa76f2711a26ff114f005af886479867724f7"}, {"sha": "a09e2f6753078f3ab40b02e8c184d9b2fe07f342", "url": "https://api.github.com/repos/rust-lang/rust/commits/a09e2f6753078f3ab40b02e8c184d9b2fe07f342", "html_url": "https://github.com/rust-lang/rust/commit/a09e2f6753078f3ab40b02e8c184d9b2fe07f342"}], "stats": {"total": 83, "additions": 53, "deletions": 30}, "files": [{"sha": "9a0c379b4e44d1b237913c31b3329338940e25d0", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58546803885164d488185fb9cb9fb04fcbe64e30/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58546803885164d488185fb9cb9fb04fcbe64e30/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=58546803885164d488185fb9cb9fb04fcbe64e30", "patch": "@@ -977,9 +977,10 @@ fn link_natively<'a>(\n                      but `link.exe` was not found\",\n                 );\n                 sess.note_without_error(\n-                    \"please ensure that VS 2013, VS 2015, VS 2017, VS 2019 or VS 2022 \\\n-                     was installed with the Visual C++ option\",\n+                    \"please ensure that Visual Studio 2017 or later, or Build Tools \\\n+                     for Visual Studio were installed with the Visual C++ option.\",\n                 );\n+                sess.note_without_error(\"VS Code is a different product, and is not sufficient.\");\n             }\n             sess.abort_if_errors();\n         }"}, {"sha": "143508b785f1e55891fbea3ce5be6698c2012c37", "filename": "compiler/rustc_hir_analysis/src/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58546803885164d488185fb9cb9fb04fcbe64e30/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58546803885164d488185fb9cb9fb04fcbe64e30/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2F_match.rs?ref=58546803885164d488185fb9cb9fb04fcbe64e30", "patch": "@@ -259,7 +259,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 err.help(\"consider adding an `else` block that evaluates to the expected type\");\n                 error = true;\n             },\n-            ret_reason.is_none(),\n+            false,\n         );\n         error\n     }"}, {"sha": "38629c4fae7e215b03399f55bebeed13073772f4", "filename": "src/ci/docker/README.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Fci%2Fdocker%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Fci%2Fdocker%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2FREADME.md?ref=58546803885164d488185fb9cb9fb04fcbe64e30", "patch": "@@ -242,10 +242,14 @@ For targets: `i586-unknown-linux-gnu`\n - Operating System > Target OS = linux\n - Operating System > Linux kernel version = 3.2.101\n - Binary utilities > Version of binutils = 2.32\n+- Binary utilities > binutils extra config = --enable-compressed-debug-sections=none -- (\\*)\n - C-library > glibc version = 2.17.0\n - C compiler > gcc version = 8.3.0\n - C compiler > C++ = ENABLE\n \n+(\\*) Compressed debug is enabled by default for gas (assembly) on Linux/x86 targets,\n+     but that makes our `compiler_builtins` incompatible with binutils < 2.32.\n+\n ### `powerpc-linux-gnu.config`\n \n For targets: `powerpc-unknown-linux-gnu`"}, {"sha": "cdbd52d23bc37221faa3089a4dea824871306e07", "filename": "src/ci/docker/host-x86_64/dist-i586-gnu-i586-i686-musl/i586-linux-gnu.config", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-i586-gnu-i586-i686-musl%2Fi586-linux-gnu.config", "raw_url": "https://github.com/rust-lang/rust/raw/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-i586-gnu-i586-i686-musl%2Fi586-linux-gnu.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-i586-gnu-i586-i686-musl%2Fi586-linux-gnu.config?ref=58546803885164d488185fb9cb9fb04fcbe64e30", "patch": "@@ -336,7 +336,7 @@ CT_BINUTILS_LINKERS_LIST=\"ld\"\n CT_BINUTILS_LINKER_DEFAULT=\"bfd\"\n # CT_BINUTILS_PLUGINS is not set\n CT_BINUTILS_RELRO=m\n-CT_BINUTILS_EXTRA_CONFIG_ARRAY=\"\"\n+CT_BINUTILS_EXTRA_CONFIG_ARRAY=\"--enable-compressed-debug-sections=none\"\n # CT_BINUTILS_FOR_TARGET is not set\n CT_ALL_BINUTILS_CHOICES=\"BINUTILS\"\n "}, {"sha": "7999373511b6c15223f608fc0d5aa784ef38a04c", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=58546803885164d488185fb9cb9fb04fcbe64e30", "patch": "@@ -890,7 +890,7 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n             w,\n             \"implementors\",\n             \"Implementors\",\n-            \"<div class=\\\"item-list\\\" id=\\\"implementors-list\\\">\",\n+            \"<div id=\\\"implementors-list\\\">\",\n         );\n         for implementor in concrete {\n             render_implementor(cx, implementor, it, w, &implementor_dups, &[]);\n@@ -902,7 +902,7 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n                 w,\n                 \"synthetic-implementors\",\n                 \"Auto implementors\",\n-                \"<div class=\\\"item-list\\\" id=\\\"synthetic-implementors-list\\\">\",\n+                \"<div id=\\\"synthetic-implementors-list\\\">\",\n             );\n             for implementor in synthetic {\n                 render_implementor(\n@@ -923,15 +923,15 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n             w,\n             \"implementors\",\n             \"Implementors\",\n-            \"<div class=\\\"item-list\\\" id=\\\"implementors-list\\\"></div>\",\n+            \"<div id=\\\"implementors-list\\\"></div>\",\n         );\n \n         if t.is_auto(cx.tcx()) {\n             write_small_section_header(\n                 w,\n                 \"synthetic-implementors\",\n                 \"Auto implementors\",\n-                \"<div class=\\\"item-list\\\" id=\\\"synthetic-implementors-list\\\"></div>\",\n+                \"<div id=\\\"synthetic-implementors-list\\\"></div>\",\n             );\n         }\n     }"}, {"sha": "e29abbec69c2d98291847fb520422b37f2dd184b", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=58546803885164d488185fb9cb9fb04fcbe64e30", "patch": "@@ -690,11 +690,6 @@ pre, .rustdoc.source .example-wrap {\n \tborder: 1px solid var(--border-color);\n }\n \n-.content .item-list {\n-\tlist-style-type: none;\n-\tpadding: 0;\n-}\n-\n /* Shift \"where ...\" part of method or fn definition down a line */\n .content .method .where,\n .content .fn .where,\n@@ -773,8 +768,9 @@ h2.small-section-header > .anchor {\n }\n \n .all-items a:hover,\n-.docblock a:not(.srclink):not(.test-arrow):not(.scrape-help):hover,\n-.docblock-short a:not(.srclink):not(.test-arrow):not(.scrape-help):hover, .item-info a {\n+.docblock a:not(.test-arrow):not(.scrape-help):hover,\n+.docblock-short a:not(.test-arrow):not(.scrape-help):hover,\n+.item-info a {\n \ttext-decoration: underline;\n }\n "}, {"sha": "9e74ede8ff7b34a3325c94526fcffddb05d6bb0e", "filename": "src/test/rustdoc/impl-disambiguation.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Frustdoc%2Fimpl-disambiguation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Frustdoc%2Fimpl-disambiguation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-disambiguation.rs?ref=58546803885164d488185fb9cb9fb04fcbe64e30", "patch": "@@ -4,13 +4,13 @@ pub trait Foo {}\n \n pub struct Bar<T> { field: T }\n \n-// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//h3[@class=\"code-header\"]' \\\n+// @has foo/trait.Foo.html '//*[@id=\"implementors-list\"]//h3[@class=\"code-header\"]' \\\n //     \"impl Foo for Bar<u8>\"\n impl Foo for Bar<u8> {}\n-// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//h3[@class=\"code-header\"]' \\\n+// @has foo/trait.Foo.html '//*[@id=\"implementors-list\"]//h3[@class=\"code-header\"]' \\\n //     \"impl Foo for Bar<u16>\"\n impl Foo for Bar<u16> {}\n-// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//h3[@class=\"code-header\"]' \\\n+// @has foo/trait.Foo.html '//*[@id=\"implementors-list\"]//h3[@class=\"code-header\"]' \\\n //     \"impl<'a> Foo for &'a Bar<u8>\"\n impl<'a> Foo for &'a Bar<u8> {}\n \n@@ -22,9 +22,9 @@ pub mod mod2 {\n     pub enum Baz {}\n }\n \n-// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//h3[@class=\"code-header\"]' \\\n+// @has foo/trait.Foo.html '//*[@id=\"implementors-list\"]//h3[@class=\"code-header\"]' \\\n //     \"impl Foo for foo::mod1::Baz\"\n impl Foo for mod1::Baz {}\n-// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//h3[@class=\"code-header\"]' \\\n+// @has foo/trait.Foo.html '//*[@id=\"implementors-list\"]//h3[@class=\"code-header\"]' \\\n //     \"impl<'a> Foo for &'a foo::mod2::Baz\"\n impl<'a> Foo for &'a mod2::Baz {}"}, {"sha": "7b931727e446d829c691a62b7e4142700989547e", "filename": "src/test/rustdoc/impl-parts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Frustdoc%2Fimpl-parts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Frustdoc%2Fimpl-parts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-parts.rs?ref=58546803885164d488185fb9cb9fb04fcbe64e30", "patch": "@@ -7,6 +7,6 @@ pub struct Foo<T> { field: T }\n \n // @has impl_parts/struct.Foo.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n //     \"impl<T: Clone> !AnAutoTrait for Foo<T>where T: Sync,\"\n-// @has impl_parts/trait.AnAutoTrait.html '//*[@class=\"item-list\"]//h3[@class=\"code-header\"]' \\\n+// @has impl_parts/trait.AnAutoTrait.html '//*[@id=\"implementors-list\"]//h3[@class=\"code-header\"]' \\\n //     \"impl<T: Clone> !AnAutoTrait for Foo<T>where T: Sync,\"\n impl<T: Clone> !AnAutoTrait for Foo<T> where T: Sync {}"}, {"sha": "8155fcb56b697694f610fb589cb35f2be2da6807", "filename": "src/test/ui/async-await/issue-66387-if-without-else.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fasync-await%2Fissue-66387-if-without-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fasync-await%2Fissue-66387-if-without-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-66387-if-without-else.stderr?ref=58546803885164d488185fb9cb9fb04fcbe64e30", "patch": "@@ -4,7 +4,7 @@ error[E0317]: `if` may be missing an `else` clause\n LL | /     if true {\n LL | |         return 0;\n LL | |     }\n-   | |_____^ expected `()`, found `i32`\n+   | |_____^ expected `i32`, found `()`\n    |\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type"}, {"sha": "a931c89f47e72b801baac1eb50888c22314e6318", "filename": "src/test/ui/consts/control-flow/issue-50577.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stderr?ref=58546803885164d488185fb9cb9fb04fcbe64e30", "patch": "@@ -2,7 +2,7 @@ error[E0317]: `if` may be missing an `else` clause\n   --> $DIR/issue-50577.rs:3:16\n    |\n LL |         Drop = assert_eq!(1, 1),\n-   |                ^^^^^^^^^^^^^^^^ expected `()`, found `isize`\n+   |                ^^^^^^^^^^^^^^^^ expected `isize`, found `()`\n    |\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type"}, {"sha": "95604758a6b3e57f4bfbfa87bfe0642103d0928a", "filename": "src/test/ui/expr/if/if-without-else-result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-else-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-else-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-else-result.rs?ref=58546803885164d488185fb9cb9fb04fcbe64e30", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let a = if true { true };\n     //~^ ERROR `if` may be missing an `else` clause [E0317]\n-    //~| expected `()`, found `bool`\n+    //~| expected `bool`, found `()`\n     println!(\"{}\", a);\n }"}, {"sha": "317faf7c619f679635f00c7dcd33c716ddfb6d1d", "filename": "src/test/ui/expr/if/if-without-else-result.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-else-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-else-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-without-else-result.stderr?ref=58546803885164d488185fb9cb9fb04fcbe64e30", "patch": "@@ -5,7 +5,7 @@ LL |     let a = if true { true };\n    |             ^^^^^^^^^^----^^\n    |             |         |\n    |             |         found here\n-   |             expected `()`, found `bool`\n+   |             expected `bool`, found `()`\n    |\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type"}, {"sha": "59c465b9e14925ab977a00909a179249fe8bf916", "filename": "src/test/ui/expr/if/issue-4201.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fexpr%2Fif%2Fissue-4201.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fexpr%2Fif%2Fissue-4201.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fissue-4201.rs?ref=58546803885164d488185fb9cb9fb04fcbe64e30", "patch": "@@ -3,7 +3,7 @@ fn main() {\n         0\n     } else if false {\n //~^ ERROR `if` may be missing an `else` clause\n-//~| expected `()`, found integer\n+//~| expected integer, found `()`\n         1\n     };\n }"}, {"sha": "612fe77642ce5f7dcf3bf44f3e713aeb80b566eb", "filename": "src/test/ui/expr/if/issue-4201.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fexpr%2Fif%2Fissue-4201.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fexpr%2Fif%2Fissue-4201.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fissue-4201.stderr?ref=58546803885164d488185fb9cb9fb04fcbe64e30", "patch": "@@ -8,7 +8,7 @@ LL | |\n LL | |         1\n    | |         - found here\n LL | |     };\n-   | |_____^ expected `()`, found integer\n+   | |_____^ expected integer, found `()`\n    |\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type"}, {"sha": "dd0efa972ba3e2753efe820f3c8dfb4691c608b1", "filename": "src/test/ui/issues/issue-19991.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fissues%2Fissue-19991.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fissues%2Fissue-19991.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19991.rs?ref=58546803885164d488185fb9cb9fb04fcbe64e30", "patch": "@@ -3,7 +3,7 @@\n \n fn main() {\n     if let Some(homura) = Some(\"madoka\") { //~  ERROR missing an `else` clause\n-                                           //~| expected `()`, found integer\n+                                           //~| expected integer, found `()`\n         765\n     };\n }"}, {"sha": "57b0882b636e3a70e7532ccba5c7232487a5988e", "filename": "src/test/ui/issues/issue-19991.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fissues%2Fissue-19991.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Fissues%2Fissue-19991.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19991.stderr?ref=58546803885164d488185fb9cb9fb04fcbe64e30", "patch": "@@ -6,7 +6,7 @@ LL | |\n LL | |         765\n    | |         --- found here\n LL | |     };\n-   | |_____^ expected `()`, found integer\n+   | |_____^ expected integer, found `()`\n    |\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type"}, {"sha": "58d2c09776f985494c0c47b6eaad26309a139e58", "filename": "src/test/ui/let-else/let-else-non-diverging.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.rs?ref=58546803885164d488185fb9cb9fb04fcbe64e30", "patch": "@@ -8,4 +8,15 @@ fn main() {\n         }\n     };\n     let Some(x) = Some(1) else { Some(2) }; //~ ERROR does not diverge\n+\n+    // Ensure that uninhabited types do not \"diverge\".\n+    // This might be relaxed in the future, but when it is,\n+    // it should be an explicitly wanted descision.\n+    let Some(x) = Some(1) else { foo::<Uninhabited>() }; //~ ERROR does not diverge\n+}\n+\n+enum Uninhabited {}\n+\n+fn foo<T>() -> T {\n+    panic!()\n }"}, {"sha": "78551fcc434a86f81c5b763b4f4805f885724d1b", "filename": "src/test/ui/let-else/let-else-non-diverging.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58546803885164d488185fb9cb9fb04fcbe64e30/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.stderr?ref=58546803885164d488185fb9cb9fb04fcbe64e30", "patch": "@@ -39,6 +39,17 @@ LL |     let Some(x) = Some(1) else { Some(2) };\n    = help: try adding a diverging expression, such as `return` or `panic!(..)`\n    = help: ...or use `match` instead of `let...else`\n \n-error: aborting due to 3 previous errors\n+error[E0308]: `else` clause of `let...else` does not diverge\n+  --> $DIR/let-else-non-diverging.rs:15:32\n+   |\n+LL |     let Some(x) = Some(1) else { foo::<Uninhabited>() };\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^ expected `!`, found enum `Uninhabited`\n+   |\n+   = note: expected type `!`\n+              found enum `Uninhabited`\n+   = help: try adding a diverging expression, such as `return` or `panic!(..)`\n+   = help: ...or use `match` instead of `let...else`\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}