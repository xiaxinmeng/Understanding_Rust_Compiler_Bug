{"sha": "0462666c7067d8992501aa8997d16e18da021ee5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NjI2NjZjNzA2N2Q4OTkyNTAxYWE4OTk3ZDE2ZTE4ZGEwMjFlZTU=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-04-16T16:00:08Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-04-16T16:39:31Z"}, "message": "Add cloned_instead_of_copied lint", "tree": {"sha": "3b84102e7cdc94d254c1f293a253db52ffcf62b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b84102e7cdc94d254c1f293a253db52ffcf62b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0462666c7067d8992501aa8997d16e18da021ee5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0462666c7067d8992501aa8997d16e18da021ee5", "html_url": "https://github.com/rust-lang/rust/commit/0462666c7067d8992501aa8997d16e18da021ee5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0462666c7067d8992501aa8997d16e18da021ee5/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e0a3ff55c494dcb660e4cdae2dc4b697815dc86", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e0a3ff55c494dcb660e4cdae2dc4b697815dc86", "html_url": "https://github.com/rust-lang/rust/commit/1e0a3ff55c494dcb660e4cdae2dc4b697815dc86"}], "stats": {"total": 152, "additions": 151, "deletions": 1}, "files": [{"sha": "483365b5e91c3f2f6780f7bfa0193a87dd272c87", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0462666c7067d8992501aa8997d16e18da021ee5/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/0462666c7067d8992501aa8997d16e18da021ee5/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=0462666c7067d8992501aa8997d16e18da021ee5", "patch": "@@ -2148,6 +2148,7 @@ Released 2018-09-13\n [`clone_double_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#clone_double_ref\n [`clone_on_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy\n [`clone_on_ref_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_ref_ptr\n+[`cloned_instead_of_copied`]: https://rust-lang.github.io/rust-clippy/master/index.html#cloned_instead_of_copied\n [`cmp_nan`]: https://rust-lang.github.io/rust-clippy/master/index.html#cmp_nan\n [`cmp_null`]: https://rust-lang.github.io/rust-clippy/master/index.html#cmp_null\n [`cmp_owned`]: https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned"}, {"sha": "0f48799d339bd886541fa8875ed72324c6937b2f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0462666c7067d8992501aa8997d16e18da021ee5/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0462666c7067d8992501aa8997d16e18da021ee5/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=0462666c7067d8992501aa8997d16e18da021ee5", "patch": "@@ -759,6 +759,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         methods::BYTES_NTH,\n         methods::CHARS_LAST_CMP,\n         methods::CHARS_NEXT_CMP,\n+        methods::CLONED_INSTEAD_OF_COPIED,\n         methods::CLONE_DOUBLE_REF,\n         methods::CLONE_ON_COPY,\n         methods::CLONE_ON_REF_PTR,\n@@ -1380,6 +1381,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(matches::MATCH_WILDCARD_FOR_SINGLE_VARIANTS),\n         LintId::of(matches::MATCH_WILD_ERR_ARM),\n         LintId::of(matches::SINGLE_MATCH_ELSE),\n+        LintId::of(methods::CLONED_INSTEAD_OF_COPIED),\n         LintId::of(methods::FILTER_MAP_NEXT),\n         LintId::of(methods::IMPLICIT_CLONE),\n         LintId::of(methods::INEFFICIENT_TO_STRING),"}, {"sha": "ba97ab3900ca4b0f1a6960076c699641726e0054", "filename": "clippy_lints/src/methods/cloned_instead_of_copied.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0462666c7067d8992501aa8997d16e18da021ee5/clippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0462666c7067d8992501aa8997d16e18da021ee5/clippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs?ref=0462666c7067d8992501aa8997d16e18da021ee5", "patch": "@@ -0,0 +1,38 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_trait_method;\n+use clippy_utils::ty::{get_iterator_item_ty, is_copy};\n+use rustc_errors::Applicability;\n+use rustc_hir::Expr;\n+use rustc_lint::LateContext;\n+use rustc_middle::ty;\n+use rustc_span::{sym, Span};\n+\n+use super::CLONED_INSTEAD_OF_COPIED;\n+\n+pub fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, span: Span) {\n+    let recv_ty = cx.typeck_results().expr_ty_adjusted(recv);\n+    let inner_ty = match recv_ty.kind() {\n+        // `Option<T>` -> `T`\n+        ty::Adt(adt, subst) if cx.tcx.is_diagnostic_item(sym::option_type, adt.did) => subst.type_at(0),\n+        _ if is_trait_method(cx, expr, sym::Iterator) => match get_iterator_item_ty(cx, recv_ty) {\n+            // <T as Iterator>::Item\n+            Some(ty) => ty,\n+            _ => return,\n+        },\n+        _ => return,\n+    };\n+    match inner_ty.kind() {\n+        // &T where T: Copy\n+        ty::Ref(_, ty, _) if is_copy(cx, ty) => {},\n+        _ => return,\n+    };\n+    span_lint_and_sugg(\n+        cx,\n+        CLONED_INSTEAD_OF_COPIED,\n+        span,\n+        \"used `cloned` where `copied` could be used instead\",\n+        \"try\",\n+        \"copied\".into(),\n+        Applicability::MachineApplicable,\n+    )\n+}"}, {"sha": "49a9af2a46581af79a920e82fdf9a13eb9e16231", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0462666c7067d8992501aa8997d16e18da021ee5/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0462666c7067d8992501aa8997d16e18da021ee5/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=0462666c7067d8992501aa8997d16e18da021ee5", "patch": "@@ -8,6 +8,7 @@ mod chars_next_cmp;\n mod chars_next_cmp_with_unwrap;\n mod clone_on_copy;\n mod clone_on_ref_ptr;\n+mod cloned_instead_of_copied;\n mod expect_fun_call;\n mod expect_used;\n mod filetype_is_file;\n@@ -73,6 +74,29 @@ use rustc_span::symbol::SymbolStr;\n use rustc_span::{sym, Span};\n use rustc_typeck::hir_ty_to_ty;\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usages of `cloned()` on an `Iterator` or `Option` where\n+    /// `copied()` could be used instead.\n+    ///\n+    /// **Why is this bad?** `copied()` is better because it guarantees that the type being cloned\n+    /// implements `Copy`.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// [1, 2, 3].iter().cloned();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// [1, 2, 3].iter().copied();\n+    /// ```\n+    pub CLONED_INSTEAD_OF_COPIED,\n+    pedantic,\n+    \"used `cloned` where `copied` could be used instead\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for `.unwrap()` calls on `Option`s and on `Result`s.\n     ///\n@@ -1638,6 +1662,7 @@ impl_lint_pass!(Methods => [\n     CLONE_ON_COPY,\n     CLONE_ON_REF_PTR,\n     CLONE_DOUBLE_REF,\n+    CLONED_INSTEAD_OF_COPIED,\n     INEFFICIENT_TO_STRING,\n     NEW_RET_NO_SELF,\n     SINGLE_CHAR_PATTERN,\n@@ -1909,6 +1934,7 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n             (\"as_mut\", []) => useless_asref::check(cx, expr, \"as_mut\", recv),\n             (\"as_ref\", []) => useless_asref::check(cx, expr, \"as_ref\", recv),\n             (\"assume_init\", []) => uninit_assumed_init::check(cx, expr, recv),\n+            (\"cloned\", []) => cloned_instead_of_copied::check(cx, expr, recv, span),\n             (\"collect\", []) => match method_call!(recv) {\n                 Some((\"cloned\", [recv2], _)) => iter_cloned_collect::check(cx, expr, recv2),\n                 Some((\"map\", [m_recv, m_arg], _)) => {"}, {"sha": "64a80f2554fa4c0e413cd2c51be74fe3f20f6cb6", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0462666c7067d8992501aa8997d16e18da021ee5/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0462666c7067d8992501aa8997d16e18da021ee5/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=0462666c7067d8992501aa8997d16e18da021ee5", "patch": "@@ -13,7 +13,7 @@ use rustc_lint::LateContext;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n use rustc_middle::ty::{self, AdtDef, IntTy, Ty, TypeFoldable, UintTy};\n use rustc_span::sym;\n-use rustc_span::symbol::Symbol;\n+use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::DUMMY_SP;\n use rustc_trait_selection::traits::query::normalize::AtExt;\n \n@@ -52,6 +52,25 @@ pub fn contains_adt_constructor(ty: Ty<'_>, adt: &AdtDef) -> bool {\n     })\n }\n \n+/// Resolves `<T as Iterator>::Item` for `T`\n+/// Do not invoke without first verifying that the type implements `Iterator`\n+pub fn get_iterator_item_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n+    cx.tcx\n+        .get_diagnostic_item(sym::Iterator)\n+        .and_then(|iter_did| {\n+            cx.tcx.associated_items(iter_did).find_by_name_and_kind(\n+                cx.tcx,\n+                Ident::from_str(\"Item\"),\n+                ty::AssocKind::Type,\n+                iter_did,\n+            )\n+        })\n+        .map(|assoc| {\n+            let proj = cx.tcx.mk_projection(assoc.def_id, cx.tcx.mk_substs_trait(ty, &[]));\n+            cx.tcx.normalize_erasing_regions(cx.param_env, proj)\n+        })\n+}\n+\n /// Returns true if ty has `iter` or `iter_mut` methods\n pub fn has_iter_method(cx: &LateContext<'_>, probably_ref_ty: Ty<'_>) -> Option<Symbol> {\n     // FIXME: instead of this hard-coded list, we should check if `<adt>::iter`"}, {"sha": "4eb999e18e64e35c33e43fd1ecf9aff0aa0c6a55", "filename": "tests/ui/cloned_instead_of_copied.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0462666c7067d8992501aa8997d16e18da021ee5/tests%2Fui%2Fcloned_instead_of_copied.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0462666c7067d8992501aa8997d16e18da021ee5/tests%2Fui%2Fcloned_instead_of_copied.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcloned_instead_of_copied.fixed?ref=0462666c7067d8992501aa8997d16e18da021ee5", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+#![warn(clippy::cloned_instead_of_copied)]\n+\n+fn main() {\n+    // yay\n+    let _ = [1].iter().copied();\n+    let _ = vec![\"hi\"].iter().copied();\n+    let _ = Some(&1).copied();\n+    let _ = Box::new([1].iter()).copied();\n+    let _ = Box::new(Some(&1)).copied();\n+\n+    // nay\n+    let _ = [String::new()].iter().cloned();\n+    let _ = Some(&String::new()).cloned();\n+}"}, {"sha": "894496c0ebbb5de0831cafe122d3f9debbee39aa", "filename": "tests/ui/cloned_instead_of_copied.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0462666c7067d8992501aa8997d16e18da021ee5/tests%2Fui%2Fcloned_instead_of_copied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0462666c7067d8992501aa8997d16e18da021ee5/tests%2Fui%2Fcloned_instead_of_copied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcloned_instead_of_copied.rs?ref=0462666c7067d8992501aa8997d16e18da021ee5", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+#![warn(clippy::cloned_instead_of_copied)]\n+\n+fn main() {\n+    // yay\n+    let _ = [1].iter().cloned();\n+    let _ = vec![\"hi\"].iter().cloned();\n+    let _ = Some(&1).cloned();\n+    let _ = Box::new([1].iter()).cloned();\n+    let _ = Box::new(Some(&1)).cloned();\n+\n+    // nay\n+    let _ = [String::new()].iter().cloned();\n+    let _ = Some(&String::new()).cloned();\n+}"}, {"sha": "e0707d32146891a50f6caca35169c453870459f4", "filename": "tests/ui/cloned_instead_of_copied.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0462666c7067d8992501aa8997d16e18da021ee5/tests%2Fui%2Fcloned_instead_of_copied.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0462666c7067d8992501aa8997d16e18da021ee5/tests%2Fui%2Fcloned_instead_of_copied.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcloned_instead_of_copied.stderr?ref=0462666c7067d8992501aa8997d16e18da021ee5", "patch": "@@ -0,0 +1,34 @@\n+error: used `cloned` where `copied` could be used instead\n+  --> $DIR/cloned_instead_of_copied.rs:6:24\n+   |\n+LL |     let _ = [1].iter().cloned();\n+   |                        ^^^^^^ help: try: `copied`\n+   |\n+   = note: `-D clippy::cloned-instead-of-copied` implied by `-D warnings`\n+\n+error: used `cloned` where `copied` could be used instead\n+  --> $DIR/cloned_instead_of_copied.rs:7:31\n+   |\n+LL |     let _ = vec![\"hi\"].iter().cloned();\n+   |                               ^^^^^^ help: try: `copied`\n+\n+error: used `cloned` where `copied` could be used instead\n+  --> $DIR/cloned_instead_of_copied.rs:8:22\n+   |\n+LL |     let _ = Some(&1).cloned();\n+   |                      ^^^^^^ help: try: `copied`\n+\n+error: used `cloned` where `copied` could be used instead\n+  --> $DIR/cloned_instead_of_copied.rs:9:34\n+   |\n+LL |     let _ = Box::new([1].iter()).cloned();\n+   |                                  ^^^^^^ help: try: `copied`\n+\n+error: used `cloned` where `copied` could be used instead\n+  --> $DIR/cloned_instead_of_copied.rs:10:32\n+   |\n+LL |     let _ = Box::new(Some(&1)).cloned();\n+   |                                ^^^^^^ help: try: `copied`\n+\n+error: aborting due to 5 previous errors\n+"}]}