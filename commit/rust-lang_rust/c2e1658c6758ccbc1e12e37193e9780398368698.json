{"sha": "c2e1658c6758ccbc1e12e37193e9780398368698", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyZTE2NThjNjc1OGNjYmMxZTEyZTM3MTkzZTk3ODAzOTgzNjg2OTg=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-09T19:56:19Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-17T21:37:08Z"}, "message": "Use proc_macro for HashStable derive in libsyntax.", "tree": {"sha": "61e616d065fc81db5379d5acc4c6bc2ba2aec50d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61e616d065fc81db5379d5acc4c6bc2ba2aec50d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2e1658c6758ccbc1e12e37193e9780398368698", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2e1658c6758ccbc1e12e37193e9780398368698", "html_url": "https://github.com/rust-lang/rust/commit/c2e1658c6758ccbc1e12e37193e9780398368698", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2e1658c6758ccbc1e12e37193e9780398368698/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b0e702f6c610a46e71fbd881d282a497353cf20", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b0e702f6c610a46e71fbd881d282a497353cf20", "html_url": "https://github.com/rust-lang/rust/commit/5b0e702f6c610a46e71fbd881d282a497353cf20"}], "stats": {"total": 72, "additions": 23, "deletions": 49}, "files": [{"sha": "34bcba89261975a18543130c51030680501257ba", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2e1658c6758ccbc1e12e37193e9780398368698/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c2e1658c6758ccbc1e12e37193e9780398368698/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c2e1658c6758ccbc1e12e37193e9780398368698", "patch": "@@ -4411,6 +4411,7 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_index\",\n  \"rustc_lexer\",\n+ \"rustc_macros\",\n  \"scoped-tls\",\n  \"serialize\",\n  \"smallvec 1.0.0\","}, {"sha": "bfd4b31af2e56d9d5e585ae5044d5b70c457a5ee", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c2e1658c6758ccbc1e12e37193e9780398368698/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e1658c6758ccbc1e12e37193e9780398368698/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=c2e1658c6758ccbc1e12e37193e9780398368698", "patch": "@@ -55,11 +55,6 @@ impl<'a> ToStableHashKey<StableHashingContext<'a>> for ast::Name {\n     }\n }\n \n-impl_stable_hash_for!(enum ::syntax::ast::AsmDialect {\n-    Att,\n-    Intel\n-});\n-\n impl_stable_hash_for!(enum ::syntax_pos::hygiene::MacroKind {\n     Bang,\n     Attr,\n@@ -124,22 +119,6 @@ for ::syntax::attr::StabilityLevel {\n \n impl_stable_hash_for!(struct ::syntax::attr::RustcDeprecation { since, reason, suggestion });\n \n-impl_stable_hash_for!(enum ::syntax::attr::IntType {\n-    SignedInt(int_ty),\n-    UnsignedInt(uint_ty)\n-});\n-\n-impl_stable_hash_for!(enum ::syntax::ast::LitIntType {\n-    Signed(int_ty),\n-    Unsigned(int_ty),\n-    Unsuffixed\n-});\n-\n-impl_stable_hash_for!(enum ::syntax::ast::LitFloatType {\n-    Suffixed(float_ty),\n-    Unsuffixed\n-});\n-\n impl_stable_hash_for!(struct ::syntax::ast::Lit {\n     kind,\n     token,\n@@ -159,19 +138,7 @@ impl_stable_hash_for!(enum ::syntax::ast::LitKind {\n \n impl_stable_hash_for_spanned!(::syntax::ast::LitKind);\n \n-impl_stable_hash_for!(enum ::syntax::ast::IntTy { Isize, I8, I16, I32, I64, I128 });\n-impl_stable_hash_for!(enum ::syntax::ast::UintTy { Usize, U8, U16, U32, U64, U128 });\n-impl_stable_hash_for!(enum ::syntax::ast::FloatTy { F32, F64 });\n-impl_stable_hash_for!(enum ::syntax::ast::Unsafety { Unsafe, Normal });\n-impl_stable_hash_for!(enum ::syntax::ast::Constness { Const, NotConst });\n-impl_stable_hash_for!(enum ::syntax::ast::Defaultness { Default, Final });\n impl_stable_hash_for!(struct ::syntax::ast::Lifetime { id, ident });\n-impl_stable_hash_for!(enum ::syntax::ast::StrStyle { Cooked, Raw(pounds) });\n-impl_stable_hash_for!(enum ::syntax::ast::AttrStyle { Outer, Inner });\n-impl_stable_hash_for!(enum ::syntax::ast::Movability { Static, Movable });\n-impl_stable_hash_for!(enum ::syntax::ast::CaptureBy { Value, Ref });\n-impl_stable_hash_for!(enum ::syntax::ast::IsAuto { Yes, No });\n-impl_stable_hash_for!(enum ::syntax::ast::ImplPolarity { Positive, Negative });\n \n impl<'a> HashStable<StableHashingContext<'a>> for [ast::Attribute] {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {"}, {"sha": "dff23076c82e637a7bd0807425ef3e020ada950e", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2e1658c6758ccbc1e12e37193e9780398368698/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c2e1658c6758ccbc1e12e37193e9780398368698/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=c2e1658c6758ccbc1e12e37193e9780398368698", "patch": "@@ -20,5 +20,6 @@ errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n+rustc_macros = { path = \"../librustc_macros\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc_error_codes = { path = \"../librustc_error_codes\" }"}, {"sha": "fb9c7e9bd56a8b3aa0ab53fbdac8fa2126f04c14", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c2e1658c6758ccbc1e12e37193e9780398368698/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e1658c6758ccbc1e12e37193e9780398368698/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c2e1658c6758ccbc1e12e37193e9780398368698", "patch": "@@ -1328,7 +1328,7 @@ pub struct QSelf {\n }\n \n /// A capture clause used in closures and `async` blocks.\n-#[derive(Clone, Copy, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Copy, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum CaptureBy {\n     /// `move |x| y + x`.\n     Value,\n@@ -1339,7 +1339,7 @@ pub enum CaptureBy {\n /// The movability of a generator / closure literal:\n /// whether a generator contains self-references, causing it to be `!Unpin`.\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash,\n-         RustcEncodable, RustcDecodable, Debug, Copy)]\n+         RustcEncodable, RustcDecodable, Debug, Copy, HashStable_Generic)]\n pub enum Movability {\n     /// May contain self-references, `!Unpin`.\n     Static,\n@@ -1400,7 +1400,7 @@ impl MacroDef {\n }\n \n // Clippy uses Hash and PartialEq\n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy, Hash, PartialEq)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy, Hash, PartialEq, HashStable_Generic)]\n pub enum StrStyle {\n     /// A regular string, like `\"foo\"`.\n     Cooked,\n@@ -1451,7 +1451,7 @@ impl StrLit {\n \n // Clippy uses Hash and PartialEq\n /// Type of the integer literal based on provided suffix.\n-#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug, Hash, PartialEq)]\n+#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug, Hash, PartialEq, HashStable_Generic)]\n pub enum LitIntType {\n     /// e.g. `42_i32`.\n     Signed(IntTy),\n@@ -1462,7 +1462,7 @@ pub enum LitIntType {\n }\n \n /// Type of the float literal based on provided suffix.\n-#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug, Hash, PartialEq)]\n+#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug, Hash, PartialEq, HashStable_Generic)]\n pub enum LitFloatType {\n     /// A float literal with a suffix (`1f32` or `1E10f32`).\n     Suffixed(FloatTy),\n@@ -1609,7 +1609,8 @@ pub enum ImplItemKind {\n     Macro(Mac),\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable_Generic,\n+         RustcEncodable, RustcDecodable, Debug)]\n pub enum FloatTy {\n     F32,\n     F64,\n@@ -1638,7 +1639,8 @@ impl FloatTy {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable_Generic,\n+         RustcEncodable, RustcDecodable, Debug)]\n pub enum IntTy {\n     Isize,\n     I8,\n@@ -1690,7 +1692,8 @@ impl IntTy {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Copy, Debug)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable_Generic,\n+         RustcEncodable, RustcDecodable, Copy, Debug)]\n pub enum UintTy {\n     Usize,\n     U8,\n@@ -1863,7 +1866,7 @@ pub enum TraitObjectSyntax {\n /// Inline assembly dialect.\n ///\n /// E.g., `\"intel\"` as in `asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")`.\n-#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy, HashStable_Generic)]\n pub enum AsmDialect {\n     Att,\n     Intel,\n@@ -2021,14 +2024,14 @@ impl FnDecl {\n }\n \n /// Is the trait definition an auto trait?\n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum IsAuto {\n     Yes,\n     No,\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash,\n-         RustcEncodable, RustcDecodable, Debug)]\n+         RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum Unsafety {\n     Unsafe,\n     Normal,\n@@ -2085,21 +2088,21 @@ impl IsAsync {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum Constness {\n     Const,\n     NotConst,\n }\n \n /// Item defaultness.\n /// For details see the [RFC #2532](https://github.com/rust-lang/rfcs/pull/2532).\n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum Defaultness {\n     Default,\n     Final,\n }\n \n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, HashStable_Generic)]\n pub enum ImplPolarity {\n     /// `impl Trait for Type`\n     Positive,\n@@ -2233,7 +2236,7 @@ impl UseTree {\n /// Distinguishes between `Attribute`s that decorate items and Attributes that\n /// are contained as statements within items. These two cases need to be\n /// distinguished for pretty-printing.\n-#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy, HashStable_Generic)]\n pub enum AttrStyle {\n     Outer,\n     Inner,"}, {"sha": "d7f4c9469f65fc1972121fb418948787a37942fd", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e1658c6758ccbc1e12e37193e9780398368698/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e1658c6758ccbc1e12e37193e9780398368698/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=c2e1658c6758ccbc1e12e37193e9780398368698", "patch": "@@ -763,7 +763,7 @@ pub enum ReprAttr {\n     ReprAlign(u32),\n }\n \n-#[derive(Eq, PartialEq, Debug, RustcEncodable, RustcDecodable, Copy, Clone)]\n+#[derive(Eq, PartialEq, Debug, RustcEncodable, RustcDecodable, Copy, Clone, HashStable_Generic)]\n pub enum IntType {\n     SignedInt(ast::IntTy),\n     UnsignedInt(ast::UintTy)"}, {"sha": "23db4cf985cdc051b786bb794ebd93a72e0503e8", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2e1658c6758ccbc1e12e37193e9780398368698/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e1658c6758ccbc1e12e37193e9780398368698/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=c2e1658c6758ccbc1e12e37193e9780398368698", "patch": "@@ -19,6 +19,8 @@\n \n #![recursion_limit=\"256\"]\n \n+#[macro_use] extern crate rustc_macros;\n+\n pub use errors;\n use rustc_data_structures::sync::Lock;\n use rustc_index::bit_set::GrowableBitSet;"}]}