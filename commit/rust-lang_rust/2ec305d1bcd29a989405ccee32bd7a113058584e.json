{"sha": "2ec305d1bcd29a989405ccee32bd7a113058584e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYzMwNWQxYmNkMjlhOTg5NDA1Y2NlZTMyYmQ3YTExMzA1ODU4NGU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-09-22T18:47:06Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-09-25T11:09:08Z"}, "message": "Move checks for closure bounds out of kind.rs", "tree": {"sha": "553252321e8ef2d3618544a3d0f35616849af4eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/553252321e8ef2d3618544a3d0f35616849af4eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ec305d1bcd29a989405ccee32bd7a113058584e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ec305d1bcd29a989405ccee32bd7a113058584e", "html_url": "https://github.com/rust-lang/rust/commit/2ec305d1bcd29a989405ccee32bd7a113058584e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ec305d1bcd29a989405ccee32bd7a113058584e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "034f69ec4bd4ee59843ead5f40c5b3936a8eab4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/034f69ec4bd4ee59843ead5f40c5b3936a8eab4f", "html_url": "https://github.com/rust-lang/rust/commit/034f69ec4bd4ee59843ead5f40c5b3936a8eab4f"}], "stats": {"total": 245, "additions": 74, "deletions": 171}, "files": [{"sha": "23591de1b54d445e019129a2d3741da415490477", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ec305d1bcd29a989405ccee32bd7a113058584e/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec305d1bcd29a989405ccee32bd7a113058584e/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=2ec305d1bcd29a989405ccee32bd7a113058584e", "patch": "@@ -146,10 +146,7 @@ register_diagnostics!(\n     E0139,\n     E0140,\n     E0141,\n-    E0143,\n     E0144,\n-    E0145,\n-    E0146,\n     E0152,\n     E0153,\n     E0154,"}, {"sha": "0715baf2c5a94222b2f0c1309519c01baac8921b", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 0, "deletions": 135, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/2ec305d1bcd29a989405ccee32bd7a113058584e/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec305d1bcd29a989405ccee32bd7a113058584e/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=2ec305d1bcd29a989405ccee32bd7a113058584e", "patch": "@@ -30,11 +30,6 @@ pub struct Context<'a,'tcx:'a> {\n }\n \n impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n-    fn visit_fn(&mut self, fk: visit::FnKind, fd: &'v FnDecl,\n-                b: &'v Block, s: Span, n: NodeId) {\n-        check_fn(self, fk, fd, b, s, n);\n-    }\n-\n     fn visit_ty(&mut self, t: &Ty) {\n         check_ty(self, t);\n     }\n@@ -48,110 +43,6 @@ pub fn check_crate(tcx: &ty::ctxt) {\n     tcx.sess.abort_if_errors();\n }\n \n-// Yields the appropriate function to check the kind of closed over\n-// variables. `id` is the NodeId for some expression that creates the\n-// closure.\n-fn with_appropriate_checker(cx: &Context,\n-                            id: NodeId,\n-                            fn_span: Span,\n-                            b: |checker: |&Context, &ty::Freevar||) {\n-    fn check_for_uniq(cx: &Context,\n-                      fn_span: Span,\n-                      fv: &ty::Freevar,\n-                      bounds: ty::BuiltinBounds) {\n-        // all captured data must be owned, regardless of whether it is\n-        // moved in or copied in.\n-        let id = fv.def.def_id().node;\n-        let var_t = ty::node_id_to_type(cx.tcx, id);\n-\n-        check_freevar_bounds(cx, fn_span, fv.span, var_t, bounds, None);\n-    }\n-\n-    fn check_for_block(cx: &Context,\n-                       fn_span: Span,\n-                       fn_id: NodeId,\n-                       fv: &ty::Freevar,\n-                       bounds: ty::BuiltinBounds) {\n-        let id = fv.def.def_id().node;\n-        let var_t = ty::node_id_to_type(cx.tcx, id);\n-        let upvar_id = ty::UpvarId { var_id: id, closure_expr_id: fn_id };\n-        let upvar_borrow = cx.tcx.upvar_borrow(upvar_id);\n-        let implicit_borrowed_type =\n-            ty::mk_rptr(cx.tcx,\n-                        upvar_borrow.region,\n-                        ty::mt { mutbl: upvar_borrow.kind.to_mutbl_lossy(),\n-                                 ty: var_t });\n-        check_freevar_bounds(cx, fn_span, fv.span, implicit_borrowed_type,\n-                             bounds, Some(var_t));\n-    }\n-\n-    fn check_for_bare(cx: &Context, fv: &ty::Freevar) {\n-        span_err!(cx.tcx.sess, fv.span, E0143,\n-                  \"can't capture dynamic environment in a fn item; \\\n-                   use the || {} closure form instead\", \"{ ... }\");\n-    } // same check is done in resolve.rs, but shouldn't be done\n-\n-    let fty = ty::node_id_to_type(cx.tcx, id);\n-    match ty::get(fty).sty {\n-        ty::ty_closure(box ty::ClosureTy {\n-            store: ty::UniqTraitStore,\n-            bounds: bounds,\n-            ..\n-        }) => {\n-            b(|cx, fv| check_for_uniq(cx, fn_span, fv,\n-                                      bounds.builtin_bounds))\n-        }\n-\n-        ty::ty_closure(box ty::ClosureTy {\n-            store: ty::RegionTraitStore(..), bounds, ..\n-        }) => {\n-            b(|cx, fv| check_for_block(cx, fn_span, id, fv,\n-                                       bounds.builtin_bounds))\n-        }\n-\n-        ty::ty_bare_fn(_) => {\n-            b(check_for_bare)\n-        }\n-\n-        ty::ty_unboxed_closure(..) => {}\n-\n-        ref s => {\n-            cx.tcx.sess.bug(format!(\"expect fn type in kind checker, not \\\n-                                     {:?}\",\n-                                    s).as_slice());\n-        }\n-    }\n-}\n-\n-// Check that the free variables used in a shared/sendable closure conform\n-// to the copy/move kind bounds. Then recursively check the function body.\n-fn check_fn(\n-    cx: &mut Context,\n-    fk: visit::FnKind,\n-    decl: &FnDecl,\n-    body: &Block,\n-    sp: Span,\n-    fn_id: NodeId) {\n-\n-    // <Check kinds on free variables:\n-    with_appropriate_checker(cx, fn_id, sp, |chk| {\n-        ty::with_freevars(cx.tcx, fn_id, |freevars| {\n-            for fv in freevars.iter() {\n-                chk(cx, fv);\n-            }\n-        });\n-    });\n-\n-    match fk {\n-        visit::FkFnBlock(..) => {\n-            visit::walk_fn(cx, fk, decl, body, sp)\n-        }\n-        visit::FkItemFn(..) | visit::FkMethod(..) => {\n-            visit::walk_fn(cx, fk, decl, body, sp);\n-        }\n-    }\n-}\n-\n fn check_ty(cx: &mut Context, aty: &Ty) {\n     match aty.node {\n         TyPath(_, _, id) => {\n@@ -208,29 +99,3 @@ pub fn check_typaram_bounds(cx: &Context,\n     });\n }\n \n-pub fn check_freevar_bounds(cx: &Context, fn_span: Span, sp: Span, ty: ty::t,\n-                            bounds: ty::BuiltinBounds, referenced_ty: Option<ty::t>)\n-{\n-    check_builtin_bounds(cx, ty, bounds, |missing| {\n-        // Will be Some if the freevar is implicitly borrowed (stack closure).\n-        // Emit a less mysterious error message in this case.\n-        match referenced_ty {\n-            Some(rty) => {\n-                span_err!(cx.tcx.sess, sp, E0145,\n-                    \"cannot implicitly borrow variable of type `{}` in a \\\n-                     bounded stack closure (implicit reference does not fulfill `{}`)\",\n-                    ty_to_string(cx.tcx, rty), missing.user_string(cx.tcx));\n-            }\n-            None => {\n-                span_err!(cx.tcx.sess, sp, E0146,\n-                    \"cannot capture variable of type `{}`, which does \\\n-                     not fulfill `{}`, in a bounded closure\",\n-                    ty_to_string(cx.tcx, ty), missing.user_string(cx.tcx));\n-            }\n-        }\n-        span_note!(cx.tcx.sess, fn_span,\n-            \"this closure's environment must satisfy `{}`\",\n-            bounds.user_string(cx.tcx));\n-    });\n-}\n-"}, {"sha": "9b179d3e8951728831136973cedc3ee22110cb60", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ec305d1bcd29a989405ccee32bd7a113058584e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec305d1bcd29a989405ccee32bd7a113058584e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=2ec305d1bcd29a989405ccee32bd7a113058584e", "patch": "@@ -10,9 +10,9 @@\n \n /*! See `doc.rs` for high-level documentation */\n \n-use super::DUMMY_CAUSE;\n use super::{EvaluatedToMatch, EvaluatedToAmbiguity, EvaluatedToUnmatch};\n use super::{evaluate_impl};\n+use super::ObligationCause;\n use super::util;\n \n use middle::subst;\n@@ -39,7 +39,7 @@ pub fn impl_can_satisfy(infcx: &InferCtxt,\n     // Determine whether `impl2` can provide an implementation for those\n     // same types.\n     let param_env = ty::empty_parameter_environment();\n-    match evaluate_impl(infcx, &param_env, infcx.tcx, DUMMY_CAUSE,\n+    match evaluate_impl(infcx, &param_env, infcx.tcx, ObligationCause::dummy(),\n                         impl2_def_id, impl1_self_ty) {\n         EvaluatedToMatch | EvaluatedToAmbiguity => true,\n         EvaluatedToUnmatch => false,"}, {"sha": "db19ffd4fe222b160906e26328da730dc12f35f7", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2ec305d1bcd29a989405ccee32bd7a113058584e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec305d1bcd29a989405ccee32bd7a113058584e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=2ec305d1bcd29a989405ccee32bd7a113058584e", "patch": "@@ -77,11 +77,11 @@ pub enum ObligationCauseCode {\n     StructInitializerSized,    // S { ... } must be Sized\n     VariableType(ast::NodeId), // Type of each variable must be Sized\n     RepeatVec,                 // [T,..n] --> T must be Copy\n-}\n \n-pub static DUMMY_CAUSE: ObligationCause =\n-    ObligationCause { span: DUMMY_SP,\n-                      code: MiscObligation };\n+    // Captures of variable the given id by a closure (span is the\n+    // span of the closure)\n+    ClosureCapture(ast::NodeId, Span)\n+}\n \n pub type Obligations = subst::VecPerParamSpace<Obligation>;\n \n@@ -358,6 +358,10 @@ impl ObligationCause {\n     pub fn misc(span: Span) -> ObligationCause {\n         ObligationCause { span: span, code: MiscObligation }\n     }\n+\n+    pub fn dummy() -> ObligationCause {\n+        ObligationCause { span: DUMMY_SP, code: MiscObligation }\n+    }\n }\n \n impl<N> Vtable<N> {"}, {"sha": "d45155c2ccd125e95e5442dab0b0c2442c757919", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 48, "deletions": 20, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/2ec305d1bcd29a989405ccee32bd7a113058584e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec305d1bcd29a989405ccee32bd7a113058584e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=2ec305d1bcd29a989405ccee32bd7a113058584e", "patch": "@@ -120,11 +120,13 @@ and report an error, and it just seems like more mess in the end.)\n \n use middle::def;\n use middle::mem_categorization as mc;\n+use middle::traits;\n use middle::ty::{ReScope};\n use middle::ty;\n use middle::typeck::astconv::AstConv;\n use middle::typeck::check::FnCtxt;\n use middle::typeck::check::regionmanip;\n+use middle::typeck::check::vtable2;\n use middle::typeck::infer::resolve_and_force_all_but_regions;\n use middle::typeck::infer::resolve_type;\n use middle::typeck::infer;\n@@ -165,6 +167,11 @@ pub fn regionck_fn(fcx: &FnCtxt, id: ast::NodeId, blk: &ast::Block) {\n         // regionck assumes typeck succeeded\n         rcx.visit_fn_body(id, blk);\n     }\n+\n+    // Region checking a fn can introduce new trait obligations,\n+    // particularly around closure bounds.\n+    vtable2::select_all_fcx_obligations_or_error(fcx);\n+\n     fcx.infcx().resolve_regions_and_report_errors();\n }\n \n@@ -848,16 +855,6 @@ fn check_expr_fn_block(rcx: &mut Rcx,\n                 }\n             });\n         }\n-        ty::ty_closure(box ty::ClosureTy{store: ty::UniqTraitStore,\n-                                         bounds: ref bounds,\n-                                         ..}) => {\n-            // For proc, ensure that the *types* of the variables\n-            // outlive region bound, since they are captured by value.\n-            ty::with_freevars(tcx, expr.id, |freevars| {\n-                ensure_free_variable_types_outlive_closure_bound(\n-                    rcx, bounds.region_bound, expr, freevars);\n-            });\n-        }\n         ty::ty_unboxed_closure(_, region) => {\n             ty::with_freevars(tcx, expr.id, |freevars| {\n                 // No free variables means that there is no environment and\n@@ -868,8 +865,9 @@ fn check_expr_fn_block(rcx: &mut Rcx,\n                 // NDM -- this seems wrong, discuss with pcwalton, should\n                 // be straightforward enough.\n                 if !freevars.is_empty() {\n+                    let bounds = ty::region_existential_bound(region);\n                     ensure_free_variable_types_outlive_closure_bound(\n-                        rcx, region, expr, freevars);\n+                        rcx, bounds, expr, freevars);\n                 }\n             })\n         }\n@@ -881,20 +879,26 @@ fn check_expr_fn_block(rcx: &mut Rcx,\n     rcx.set_repeating_scope(repeating_scope);\n \n     match ty::get(function_type).sty {\n-        ty::ty_closure(box ty::ClosureTy {\n-                store: ty::RegionTraitStore(..),\n-                ..\n-            }) => {\n+        ty::ty_closure(box ty::ClosureTy { store: ty::RegionTraitStore(..), .. }) => {\n             ty::with_freevars(tcx, expr.id, |freevars| {\n                 propagate_upupvar_borrow_kind(rcx, expr, freevars);\n             })\n         }\n-        _ => ()\n+        _ => {}\n+    }\n+\n+    match ty::get(function_type).sty {\n+        ty::ty_closure(box ty::ClosureTy {bounds, ..}) => {\n+            ty::with_freevars(tcx, expr.id, |freevars| {\n+                ensure_free_variable_types_outlive_closure_bound(rcx, bounds, expr, freevars);\n+            })\n+        }\n+        _ => {}\n     }\n \n     fn ensure_free_variable_types_outlive_closure_bound(\n         rcx: &mut Rcx,\n-        region_bound: ty::Region,\n+        bounds: ty::ExistentialBounds,\n         expr: &ast::Expr,\n         freevars: &[ty::Freevar])\n     {\n@@ -908,7 +912,7 @@ fn check_expr_fn_block(rcx: &mut Rcx,\n         let tcx = rcx.fcx.ccx.tcx;\n \n         debug!(\"ensure_free_variable_types_outlive_closure_bound({}, {})\",\n-               region_bound.repr(tcx), expr.repr(tcx));\n+               bounds.region_bound.repr(tcx), expr.repr(tcx));\n \n         for freevar in freevars.iter() {\n             let var_node_id = {\n@@ -917,11 +921,35 @@ fn check_expr_fn_block(rcx: &mut Rcx,\n                 def_id.node\n             };\n \n-            let var_ty = rcx.resolve_node_type(var_node_id);\n+            // Compute the type of the field in the environment that\n+            // represents `var_node_id`.  For a by-value closure, this\n+            // will be the same as the type of the variable.  For a\n+            // by-reference closure, this will be `&T` where `T` is\n+            // the type of the variable.\n+            let raw_var_ty = rcx.resolve_node_type(var_node_id);\n+            let upvar_id = ty::UpvarId { var_id: var_node_id,\n+                                         closure_expr_id: expr.id };\n+            let var_ty = match rcx.fcx.inh.upvar_borrow_map.borrow().find(&upvar_id) {\n+                Some(upvar_borrow) => {\n+                    ty::mk_rptr(rcx.tcx(),\n+                                upvar_borrow.region,\n+                                ty::mt { mutbl: upvar_borrow.kind.to_mutbl_lossy(),\n+                                         ty: raw_var_ty })\n+                }\n+                None => raw_var_ty\n+            };\n \n+            // Check that the type meets the criteria of the existential bounds:\n+            for builtin_bound in bounds.builtin_bounds.iter() {\n+                let code = traits::ClosureCapture(var_node_id, expr.span);\n+                let cause = traits::ObligationCause::new(freevar.span, code);\n+                let obligation = traits::obligation_for_builtin_bound(rcx.tcx(), cause,\n+                                                                      var_ty, builtin_bound);\n+                rcx.fcx.inh.fulfillment_cx.borrow_mut().register_obligation(rcx.tcx(), obligation);\n+            }\n             type_must_outlive(\n                 rcx, infer::RelateProcBound(expr.span, var_node_id, var_ty),\n-                var_ty, region_bound);\n+                var_ty, bounds.region_bound);\n         }\n     }\n "}, {"sha": "345e74fbc90679fd239bb98e657a401b1475b6fb", "filename": "src/librustc/middle/typeck/check/vtable2.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ec305d1bcd29a989405ccee32bd7a113058584e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec305d1bcd29a989405ccee32bd7a113058584e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable2.rs?ref=2ec305d1bcd29a989405ccee32bd7a113058584e", "patch": "@@ -398,5 +398,13 @@ fn note_obligation_cause(fcx: &FnCtxt,\n                        \"use \\\"#[unsafe_destructor]\\\" on the implementation \\\n                        to force the compiler to allow this\");\n         }\n+        traits::ClosureCapture(var_id, closure_span) => {\n+            let name = ty::local_var_name_str(tcx, var_id);\n+            span_note!(tcx.sess, closure_span,\n+                       \"the closure that captures `{}` requires that all captured variables \\\"\n+                       implement the trait `{}`\",\n+                       name,\n+                       trait_name);\n+        }\n     }\n }"}, {"sha": "2ad6a1f72e2cc53c20d39ef8656a2a55d1ad07db", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ec305d1bcd29a989405ccee32bd7a113058584e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec305d1bcd29a989405ccee32bd7a113058584e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=2ec305d1bcd29a989405ccee32bd7a113058584e", "patch": "@@ -1560,7 +1560,7 @@ impl<'a, 'tcx> ErrorReportingHelpers for InferCtxt<'a, 'tcx> {\n                     \"...so that it can be closed over into an object\");\n             }\n             infer::RelateProcBound(span, var_node_id, _ty) => {\n-                self.tcx.sess.span_err(\n+                self.tcx.sess.span_note(\n                     span,\n                     format!(\n                         \"...so that the variable `{}` can be captured \\"}, {"sha": "6769740294bc6c7892c78c9b55048c05c3ff3b20", "filename": "src/test/compile-fail/closure-bounds-static-cant-capture-borrowed.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2ec305d1bcd29a989405ccee32bd7a113058584e/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-static-cant-capture-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec305d1bcd29a989405ccee32bd7a113058584e/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-static-cant-capture-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-static-cant-capture-borrowed.rs?ref=2ec305d1bcd29a989405ccee32bd7a113058584e", "patch": "@@ -12,8 +12,9 @@ fn bar(blk: ||:'static) {\n }\n \n fn foo(x: &()) {\n-    bar(|| {\n-        let _ = x; //~ ERROR captured variable `x` does not outlive\n+    bar(|| { //~ ERROR cannot infer an appropriate lifetime\n+        let _ = x;\n+        //~^ ERROR captured variable `x` does not outlive\n     })\n }\n "}, {"sha": "f292d1599823ffeffc8af60f1747be13d05cc71c", "filename": "src/test/compile-fail/kindck-nonsendable-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ec305d1bcd29a989405ccee32bd7a113058584e/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec305d1bcd29a989405ccee32bd7a113058584e/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs?ref=2ec305d1bcd29a989405ccee32bd7a113058584e", "patch": "@@ -15,8 +15,8 @@ fn foo(_x: Gc<uint>) {}\n \n fn main() {\n     let x = box(GC) 3u;\n-    let _: proc():Send = proc() foo(x); //~ ERROR does not fulfill `Send`\n-    let _: proc():Send = proc() foo(x); //~ ERROR does not fulfill `Send`\n-    let _: proc():Send = proc() foo(x); //~ ERROR does not fulfill `Send`\n+    let _: proc():Send = proc() foo(x); //~ ERROR `core::kinds::Send` is not implemented\n+    let _: proc():Send = proc() foo(x); //~ ERROR `core::kinds::Send` is not implemented\n+    let _: proc():Send = proc() foo(x); //~ ERROR `core::kinds::Send` is not implemented\n     let _: proc() = proc() foo(x);\n }"}, {"sha": "ddbfbc41ecaf3cfd18bdca3a60ac004eb5359069", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ec305d1bcd29a989405ccee32bd7a113058584e/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec305d1bcd29a989405ccee32bd7a113058584e/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=2ec305d1bcd29a989405ccee32bd7a113058584e", "patch": "@@ -37,7 +37,7 @@ fn main() {\n \n     task::spawn(proc() {\n         let y = x;\n-        //~^ ERROR does not fulfill `Send`\n+        //~^ ERROR `core::kinds::Send` is not implemented\n         println!(\"{:?}\", y);\n     });\n }"}]}