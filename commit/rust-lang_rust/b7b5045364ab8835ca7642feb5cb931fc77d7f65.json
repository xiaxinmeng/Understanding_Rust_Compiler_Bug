{"sha": "b7b5045364ab8835ca7642feb5cb931fc77d7f65", "node_id": "C_kwDOAAsO6NoAKGI3YjUwNDUzNjRhYjg4MzVjYTc2NDJmZWI1Y2I5MzFmYzc3ZDdmNjU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-11T10:59:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-11T10:59:27Z"}, "message": "Rollup merge of #97789 - ferrocene:pa-fix-issue-71363-test, r=cjgillot\n\nFix #71363's test by adding `-Z translate-remapped-path-to-local-path=no`\n\nThe test relies on `library/std/src/error.rs` not corresponding to a local path, but remapping might still find the related local file of a remapped path. To fix the test, this PR adds a new `-Z` flag to disable finding the corresponding local path of a remapped path.", "tree": {"sha": "ee086f527f79720d59c05ed36781932db360a016", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee086f527f79720d59c05ed36781932db360a016"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7b5045364ab8835ca7642feb5cb931fc77d7f65", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJipHWPCRBK7hj4Ov3rIwAAkWEIAIzYUfNU+dMIHVsh4GSL4G6B\nz/NuI1GxdXVu+Gj5q7Sm8HG3nhAdseAlvvzgNph+pp5bPdD5zGEllKu+K+dWyGmR\nWfjH/fXjjYpV0tlDQlGyP/Fvt3eqbwGGeoVobgxXnzrCuDsX5rf4z9K59ESQex13\ni5ZSWExrnZ3+kt/c0Nks4ErMcXjBmo7Z7FK5bzHrRdSTIQo3xuGzNJyupHQY2M2p\nqDX2agdC5jd+dCoktBtzFxDt6t0wliNrYyFHVfyt4sM2P5cEx/eWTqSWSmlkMpUW\nsgvIbIl4PJmND86bXb/Dj0QOizLg6JQtw9UvB5uTk3Hi7mnn5xzhkwXyoJ8rf48=\n=Nc/m\n-----END PGP SIGNATURE-----\n", "payload": "tree ee086f527f79720d59c05ed36781932db360a016\nparent 11d8ae2c7151b0b83f9c39594fdb47d8fa4d6ef2\nparent 410e2832e4037c786fbf037aae7b0907336f8809\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1654945167 +0200\ncommitter GitHub <noreply@github.com> 1654945167 +0200\n\nRollup merge of #97789 - ferrocene:pa-fix-issue-71363-test, r=cjgillot\n\nFix #71363's test by adding `-Z translate-remapped-path-to-local-path=no`\n\nThe test relies on `library/std/src/error.rs` not corresponding to a local path, but remapping might still find the related local file of a remapped path. To fix the test, this PR adds a new `-Z` flag to disable finding the corresponding local path of a remapped path.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7b5045364ab8835ca7642feb5cb931fc77d7f65", "html_url": "https://github.com/rust-lang/rust/commit/b7b5045364ab8835ca7642feb5cb931fc77d7f65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7b5045364ab8835ca7642feb5cb931fc77d7f65/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11d8ae2c7151b0b83f9c39594fdb47d8fa4d6ef2", "url": "https://api.github.com/repos/rust-lang/rust/commits/11d8ae2c7151b0b83f9c39594fdb47d8fa4d6ef2", "html_url": "https://github.com/rust-lang/rust/commit/11d8ae2c7151b0b83f9c39594fdb47d8fa4d6ef2"}, {"sha": "410e2832e4037c786fbf037aae7b0907336f8809", "url": "https://api.github.com/repos/rust-lang/rust/commits/410e2832e4037c786fbf037aae7b0907336f8809", "html_url": "https://github.com/rust-lang/rust/commit/410e2832e4037c786fbf037aae7b0907336f8809"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "3747fb5eca0ccf5121a4d07bd59d4a7bfa4ba074", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7b5045364ab8835ca7642feb5cb931fc77d7f65/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7b5045364ab8835ca7642feb5cb931fc77d7f65/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=b7b5045364ab8835ca7642feb5cb931fc77d7f65", "patch": "@@ -789,6 +789,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(thinlto, Some(true));\n     tracked!(thir_unsafeck, true);\n     tracked!(tls_model, Some(TlsModel::GeneralDynamic));\n+    tracked!(translate_remapped_path_to_local_path, false);\n     tracked!(trap_unreachable, Some(false));\n     tracked!(treat_err_as_bug, NonZeroUsize::new(1));\n     tracked!(tune_cpu, Some(String::from(\"abc\")));"}, {"sha": "07d7a75522e0de316f2830feb0e418ddeb0f8a80", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7b5045364ab8835ca7642feb5cb931fc77d7f65/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7b5045364ab8835ca7642feb5cb931fc77d7f65/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=b7b5045364ab8835ca7642feb5cb931fc77d7f65", "patch": "@@ -1486,6 +1486,8 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .filter(|_| {\n                 // Only spend time on further checks if we have what to translate *to*.\n                 sess.opts.real_rust_source_base_dir.is_some()\n+                    // Some tests need the translation to be always skipped.\n+                    && sess.opts.debugging_opts.translate_remapped_path_to_local_path\n             })\n             .filter(|virtual_dir| {\n                 // Don't translate away `/rustc/$hash` if we're still remapping to it,"}, {"sha": "007fa87189fb0c684ba1efab32680385194cc925", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7b5045364ab8835ca7642feb5cb931fc77d7f65/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7b5045364ab8835ca7642feb5cb931fc77d7f65/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=b7b5045364ab8835ca7642feb5cb931fc77d7f65", "patch": "@@ -1541,6 +1541,8 @@ options! {\n         \"choose the TLS model to use (`rustc --print tls-models` for details)\"),\n     trace_macros: bool = (false, parse_bool, [UNTRACKED],\n         \"for every macro invocation, print its name and arguments (default: no)\"),\n+    translate_remapped_path_to_local_path: bool = (true, parse_bool, [TRACKED],\n+        \"translate remapped paths into local paths when possible (default: yes)\"),\n     trap_unreachable: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"generate trap instructions for unreachable intrinsics (default: use target setting, usually yes)\"),\n     treat_err_as_bug: Option<NonZeroUsize> = (None, parse_treat_err_as_bug, [TRACKED],"}, {"sha": "bbb4a93623b144b8d182c675c292b2f3a4e25511", "filename": "src/test/ui/span/issue-71363.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b7b5045364ab8835ca7642feb5cb931fc77d7f65/src%2Ftest%2Fui%2Fspan%2Fissue-71363.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7b5045364ab8835ca7642feb5cb931fc77d7f65/src%2Ftest%2Fui%2Fspan%2Fissue-71363.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-71363.rs?ref=b7b5045364ab8835ca7642feb5cb931fc77d7f65", "patch": "@@ -1,10 +1,19 @@\n-// compile-flags: -Z simulate-remapped-rust-src-base=/rustc/xyz -Z ui-testing=no\n-// only-x86_64-unknown-linux-gnu\n-//---^ Limiting target as the above unstable flags don't play well on some environment.\n+// compile-flags: -Z simulate-remapped-rust-src-base=/rustc/xyz -Z translate-remapped-path-to-local-path=no -Z ui-testing=no\n \n struct MyError;\n impl std::error::Error for MyError {}\n //~^ ERROR: `MyError` doesn't implement `std::fmt::Display`\n //~| ERROR: `MyError` doesn't implement `Debug`\n \n fn main() {}\n+\n+// This test relies on library/std/src/error.rs *not* being included in the error message, so that\n+// we can test whether a file not included in the error message affects it (more specifically\n+// whether the line number of the excluded file affects the indentation of the other line numbers).\n+//\n+// To test this we're simulating a remap of the rust src base (so that library/std/src/error.rs\n+// does not point to a local file) *and* we're disabling the code to try mapping a remapped path to\n+// a local file (which would defeat the purpose of the former flag).\n+//\n+// Note that this comment is at the bottom of the file intentionally, as we need the line number of\n+// the impl to be lower than 10."}, {"sha": "04e2b46c31738f60a3719ca04722b6205bb89d48", "filename": "src/test/ui/span/issue-71363.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7b5045364ab8835ca7642feb5cb931fc77d7f65/src%2Ftest%2Fui%2Fspan%2Fissue-71363.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7b5045364ab8835ca7642feb5cb931fc77d7f65/src%2Ftest%2Fui%2Fspan%2Fissue-71363.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-71363.stderr?ref=b7b5045364ab8835ca7642feb5cb931fc77d7f65", "patch": "@@ -1,25 +1,25 @@\n error[E0277]: `MyError` doesn't implement `std::fmt::Display`\n- --> $DIR/issue-71363.rs:6:6\n+ --> $DIR/issue-71363.rs:4:6\n   |\n-6 | impl std::error::Error for MyError {}\n+4 | impl std::error::Error for MyError {}\n   |      ^^^^^^^^^^^^^^^^^ `MyError` cannot be formatted with the default formatter\n   |\n   = help: the trait `std::fmt::Display` is not implemented for `MyError`\n   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n note: required by a bound in `std::error::Error`\n \n error[E0277]: `MyError` doesn't implement `Debug`\n- --> $DIR/issue-71363.rs:6:6\n+ --> $DIR/issue-71363.rs:4:6\n   |\n-6 | impl std::error::Error for MyError {}\n+4 | impl std::error::Error for MyError {}\n   |      ^^^^^^^^^^^^^^^^^ `MyError` cannot be formatted using `{:?}`\n   |\n   = help: the trait `Debug` is not implemented for `MyError`\n   = note: add `#[derive(Debug)]` to `MyError` or manually `impl Debug for MyError`\n note: required by a bound in `std::error::Error`\n help: consider annotating `MyError` with `#[derive(Debug)]`\n   |\n-5 | #[derive(Debug)]\n+3 | #[derive(Debug)]\n   |\n \n error: aborting due to 2 previous errors"}]}