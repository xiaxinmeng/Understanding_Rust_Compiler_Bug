{"sha": "67128f1e4a880dd8c364f38e919bac19afb08282", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MTI4ZjFlNGE4ODBkZDhjMzY0ZjM4ZTkxOWJhYzE5YWZiMDgyODI=", "commit": {"author": {"name": "Duddino", "email": "rezziandrea106@gmail.com", "date": "2020-04-17T17:10:29Z"}, "committer": {"name": "Duddino", "email": "rezziandrea106@gmail.com", "date": "2020-04-17T17:10:29Z"}, "message": "Improved try_macro_suggestion", "tree": {"sha": "c9913ebcfad7846b48e7b85727c76b31a64da187", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9913ebcfad7846b48e7b85727c76b31a64da187"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67128f1e4a880dd8c364f38e919bac19afb08282", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67128f1e4a880dd8c364f38e919bac19afb08282", "html_url": "https://github.com/rust-lang/rust/commit/67128f1e4a880dd8c364f38e919bac19afb08282", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67128f1e4a880dd8c364f38e919bac19afb08282/comments", "author": null, "committer": null, "parents": [{"sha": "d3f5c274c6990db429b934212f1d9efd101104e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3f5c274c6990db429b934212f1d9efd101104e3", "html_url": "https://github.com/rust-lang/rust/commit/d3f5c274c6990db429b934212f1d9efd101104e3"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "e2b8da64dc76c86bcfbe06f1a86513978e49630d", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/67128f1e4a880dd8c364f38e919bac19afb08282/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67128f1e4a880dd8c364f38e919bac19afb08282/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=67128f1e4a880dd8c364f38e919bac19afb08282", "patch": "@@ -1054,7 +1054,7 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    pub(super) fn try_macro_suggestion(&mut self) -> DiagnosticBuilder<'a> {\n+    pub(super) fn try_macro_suggestion(&mut self) -> PResult<'a, P<Expr>> {\n         let is_try = self.token.is_keyword(kw::Try);\n         let is_questionmark = self.look_ahead(1, |t| t == &token::Not); //check for !\n         let is_open = self.look_ahead(2, |t| t == &token::OpenDelim(token::Paren)); //check for (\n@@ -1082,9 +1082,10 @@ impl<'a> Parser<'a> {\n                 //if the try! macro is empty, it isn't possible to suggest something using the `?` operator\n                 err.span_suggestion(lo.shrink_to_lo(), \"you can still access the deprecated `try!()` macro using the \\\"raw identifier\\\" syntax\", \"r#\".to_string(), Applicability::MachineApplicable);\n             }\n-            err\n+            err.emit();\n+            Ok(self.mk_expr_err(lo.to(hi)))\n         } else {\n-            self.expected_expression_found() // The user isn't trying to invoke the try! macro\n+            Err(self.expected_expression_found()) // The user isn't trying to invoke the try! macro\n         }\n     }\n "}, {"sha": "986f5410e26c0b454d83fa098d7a6f1a62185401", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67128f1e4a880dd8c364f38e919bac19afb08282/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67128f1e4a880dd8c364f38e919bac19afb08282/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=67128f1e4a880dd8c364f38e919bac19afb08282", "patch": "@@ -1006,7 +1006,7 @@ impl<'a> Parser<'a> {\n                 let expr = self.mk_expr(lo.to(self.prev_token.span), ExprKind::Lit(literal), attrs);\n                 self.maybe_recover_from_bad_qpath(expr, true)\n             }\n-            None => Err(self.try_macro_suggestion()),\n+            None => self.try_macro_suggestion(),\n         }\n     }\n "}]}