{"sha": "0c62ef08bd1a1860c4d6d1c22489d287a9359129", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNjJlZjA4YmQxYTE4NjBjNGQ2ZDFjMjI0ODlkMjg3YTkzNTkxMjk=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-08-12T16:43:14Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-09-06T00:46:38Z"}, "message": "Allow #[cold], #[track_caller] on closures. Fix whitespace in error messages.", "tree": {"sha": "facb3edd865afed01009480d785eaa2c6fc305f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/facb3edd865afed01009480d785eaa2c6fc305f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c62ef08bd1a1860c4d6d1c22489d287a9359129", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c62ef08bd1a1860c4d6d1c22489d287a9359129", "html_url": "https://github.com/rust-lang/rust/commit/0c62ef08bd1a1860c4d6d1c22489d287a9359129", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c62ef08bd1a1860c4d6d1c22489d287a9359129/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f745b34960b2146dbaa7337856e7c5461cca29d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f745b34960b2146dbaa7337856e7c5461cca29d5", "html_url": "https://github.com/rust-lang/rust/commit/f745b34960b2146dbaa7337856e7c5461cca29d5"}], "stats": {"total": 44, "additions": 16, "deletions": 28}, "files": [{"sha": "5fb59012fb719a8690dda8b90a3818f173ee5f54", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0c62ef08bd1a1860c4d6d1c22489d287a9359129/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c62ef08bd1a1860c4d6d1c22489d287a9359129/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=0c62ef08bd1a1860c4d6d1c22489d287a9359129", "patch": "@@ -121,12 +121,12 @@ impl CheckAttrVisitor<'tcx> {\n                     lint.build(\"`#[inline]` is ignored on constants\")\n                         .warn(\n                             \"this was previously accepted by the compiler but is \\\n-                               being phased out; it will become a hard error in \\\n-                               a future release!\",\n+                             being phased out; it will become a hard error in \\\n+                             a future release!\",\n                         )\n                         .note(\n                             \"see issue #65833 <https://github.com/rust-lang/rust/issues/65833> \\\n-                                 for more information\",\n+                             for more information\",\n                         )\n                         .emit();\n                 });\n@@ -165,7 +165,7 @@ impl CheckAttrVisitor<'tcx> {\n                 .emit();\n                 false\n             }\n-            Target::Fn | Target::Method(..) | Target::ForeignFn => true,\n+            Target::Fn | Target::Method(..) | Target::ForeignFn | Target::Closure => true,\n             _ => {\n                 struct_span_err!(\n                     self.tcx.sess,\n@@ -231,8 +231,8 @@ impl CheckAttrVisitor<'tcx> {\n                     lint.build(\"attribute should be applied to a function\")\n                         .warn(\n                             \"this was previously accepted by the compiler but is \\\n-                               being phased out; it will become a hard error in \\\n-                               a future release!\",\n+                             being phased out; it will become a hard error in \\\n+                             a future release!\",\n                         )\n                         .span_label(*span, \"not a function\")\n                         .emit();\n@@ -313,16 +313,16 @@ impl CheckAttrVisitor<'tcx> {\n     /// Checks if `#[cold]` is applied to a non-function. Returns `true` if valid.\n     fn check_cold(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) {\n         match target {\n-            Target::Fn | Target::Method(..) | Target::ForeignFn => {}\n+            Target::Fn | Target::Method(..) | Target::ForeignFn | Target::Closure => {}\n             _ => {\n                 // FIXME: #[cold] was previously allowed on non-functions and some crates used\n                 // this, so only emit a warning.\n                 self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n                     lint.build(\"attribute should be applied to a function\")\n                         .warn(\n                             \"this was previously accepted by the compiler but is \\\n-                               being phased out; it will become a hard error in \\\n-                               a future release!\",\n+                             being phased out; it will become a hard error in \\\n+                             a future release!\",\n                         )\n                         .span_label(*span, \"not a function\")\n                         .emit();\n@@ -343,8 +343,8 @@ impl CheckAttrVisitor<'tcx> {\n                         lint.build(\"attribute should be applied to a foreign function or static\");\n                     diag.warn(\n                         \"this was previously accepted by the compiler but is \\\n-                               being phased out; it will become a hard error in \\\n-                               a future release!\",\n+                         being phased out; it will become a hard error in \\\n+                         a future release!\",\n                     );\n \n                     // See issue #47725\n@@ -409,8 +409,8 @@ impl CheckAttrVisitor<'tcx> {\n                     lint.build(\"attribute should be applied to a function or static\")\n                         .warn(\n                             \"this was previously accepted by the compiler but is \\\n-                               being phased out; it will become a hard error in \\\n-                               a future release!\",\n+                             being phased out; it will become a hard error in \\\n+                             a future release!\",\n                         )\n                         .span_label(*span, \"not a function or static\")\n                         .emit();"}, {"sha": "f82eb338f4c68835a94f21697e469ae62ffd22c3", "filename": "src/test/ui/macros/issue-68060.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c62ef08bd1a1860c4d6d1c22489d287a9359129/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c62ef08bd1a1860c4d6d1c22489d287a9359129/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.rs?ref=0c62ef08bd1a1860c4d6d1c22489d287a9359129", "patch": "@@ -6,11 +6,9 @@ fn main() {\n             //~| ERROR: the feature named `` is not valid for this target\n             //~| NOTE: `` is not valid for this target\n             #[track_caller]\n-            //~^ ERROR: attribute should be applied to function [E0739]\n-            //~| ERROR: `#[track_caller]` requires Rust ABI [E0737]\n+            //~^ ERROR: `#[track_caller]` requires Rust ABI [E0737]\n             |_| (),\n             //~^ NOTE: not a function\n-            //~| NOTE: not a function\n         )\n         .next();\n }"}, {"sha": "a01c3827bb5a553bd6959331daa3e18b2db4d1cf", "filename": "src/test/ui/macros/issue-68060.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c62ef08bd1a1860c4d6d1c22489d287a9359129/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c62ef08bd1a1860c4d6d1c22489d287a9359129/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr?ref=0c62ef08bd1a1860c4d6d1c22489d287a9359129", "patch": "@@ -7,15 +7,6 @@ LL |             #[target_feature(enable = \"\")]\n LL |             |_| (),\n    |             ------ not a function\n \n-error[E0739]: attribute should be applied to function\n-  --> $DIR/issue-68060.rs:8:13\n-   |\n-LL |             #[track_caller]\n-   |             ^^^^^^^^^^^^^^^\n-...\n-LL |             |_| (),\n-   |             ------ not a function\n-\n error: the feature named `` is not valid for this target\n   --> $DIR/issue-68060.rs:4:30\n    |\n@@ -28,7 +19,6 @@ error[E0737]: `#[track_caller]` requires Rust ABI\n LL |             #[track_caller]\n    |             ^^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0737, E0739.\n-For more information about an error, try `rustc --explain E0737`.\n+For more information about this error, try `rustc --explain E0737`."}]}