{"sha": "c407785ac0b535dc98e9bf2d9c595111cfff31cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MDc3ODVhYzBiNTM1ZGM5OGU5YmYyZDljNTk1MTExY2ZmZjMxY2M=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-15T03:37:29Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-19T15:43:24Z"}, "message": "libgetopts: use `#[deriving(Copy)]`", "tree": {"sha": "3cf0801435a6ad7bc52b1e7b56200fa80e2313f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cf0801435a6ad7bc52b1e7b56200fa80e2313f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c407785ac0b535dc98e9bf2d9c595111cfff31cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c407785ac0b535dc98e9bf2d9c595111cfff31cc", "html_url": "https://github.com/rust-lang/rust/commit/c407785ac0b535dc98e9bf2d9c595111cfff31cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c407785ac0b535dc98e9bf2d9c595111cfff31cc/comments", "author": null, "committer": null, "parents": [{"sha": "4c62c76ef99aab3a752c4ebd74b63819cabee98f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c62c76ef99aab3a752c4ebd74b63819cabee98f", "html_url": "https://github.com/rust-lang/rust/commit/4c62c76ef99aab3a752c4ebd74b63819cabee98f"}], "stats": {"total": 18, "additions": 6, "deletions": 12}, "files": [{"sha": "b45d0c9b01ecde60392832e736d1d696c817e714", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c407785ac0b535dc98e9bf2d9c595111cfff31cc/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c407785ac0b535dc98e9bf2d9c595111cfff31cc/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=c407785ac0b535dc98e9bf2d9c595111cfff31cc", "patch": "@@ -118,7 +118,7 @@ pub enum Name {\n }\n \n /// Describes whether an option has an argument.\n-#[deriving(Clone, PartialEq, Eq)]\n+#[deriving(Clone, Copy, PartialEq, Eq)]\n pub enum HasArg {\n     /// The option requires an argument.\n     Yes,\n@@ -128,10 +128,8 @@ pub enum HasArg {\n     Maybe,\n }\n \n-impl Copy for HasArg {}\n-\n /// Describes how often an option may occur.\n-#[deriving(Clone, PartialEq, Eq)]\n+#[deriving(Clone, Copy, PartialEq, Eq)]\n pub enum Occur {\n     /// The option occurs once.\n     Req,\n@@ -141,8 +139,6 @@ pub enum Occur {\n     Multi,\n }\n \n-impl Copy for Occur {}\n-\n /// A description of a possible option.\n #[deriving(Clone, PartialEq, Eq)]\n pub struct Opt {\n@@ -211,7 +207,7 @@ pub enum Fail {\n }\n \n /// The type of failure that occurred.\n-#[deriving(PartialEq, Eq)]\n+#[deriving(Copy, PartialEq, Eq)]\n #[allow(missing_docs)]\n pub enum FailType {\n     ArgumentMissing_,\n@@ -221,8 +217,6 @@ pub enum FailType {\n     UnexpectedArgument_,\n }\n \n-impl Copy for FailType {}\n-\n /// The result of parsing a command line with a set of options.\n pub type Result = result::Result<Matches, Fail>;\n \n@@ -839,22 +833,22 @@ pub fn short_usage(program_name: &str, opts: &[OptGroup]) -> String {\n     line\n }\n \n+#[deriving(Copy)]\n enum SplitWithinState {\n     A,  // leading whitespace, initial state\n     B,  // words\n     C,  // internal and trailing whitespace\n }\n-impl Copy for SplitWithinState {}\n+#[deriving(Copy)]\n enum Whitespace {\n     Ws, // current char is whitespace\n     Cr  // current char is not whitespace\n }\n-impl Copy for Whitespace {}\n+#[deriving(Copy)]\n enum LengthLimit {\n     UnderLim, // current char makes current substring still fit in limit\n     OverLim   // current char makes current substring no longer fit in limit\n }\n-impl Copy for LengthLimit {}\n \n \n /// Splits a string into substrings with possibly internal whitespace,"}]}