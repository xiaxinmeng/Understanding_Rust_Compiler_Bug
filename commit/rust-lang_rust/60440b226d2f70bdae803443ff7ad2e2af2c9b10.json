{"sha": "60440b226d2f70bdae803443ff7ad2e2af2c9b10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNDQwYjIyNmQyZjcwYmRhZTgwMzQ0M2ZmN2FkMmUyYWYyYzliMTA=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-04T22:49:45Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-13T05:11:51Z"}, "message": "Refactor `noop_fold_stmt_kind` out of `noop_fold_stmt`.", "tree": {"sha": "03240ec5ae54c778f56f42cc9a43524c8bfc752d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03240ec5ae54c778f56f42cc9a43524c8bfc752d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60440b226d2f70bdae803443ff7ad2e2af2c9b10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60440b226d2f70bdae803443ff7ad2e2af2c9b10", "html_url": "https://github.com/rust-lang/rust/commit/60440b226d2f70bdae803443ff7ad2e2af2c9b10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60440b226d2f70bdae803443ff7ad2e2af2c9b10/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50f94f6c95c944f08c4af264f48260e42efefd47", "url": "https://api.github.com/repos/rust-lang/rust/commits/50f94f6c95c944f08c4af264f48260e42efefd47", "html_url": "https://github.com/rust-lang/rust/commit/50f94f6c95c944f08c4af264f48260e42efefd47"}], "stats": {"total": 50, "additions": 13, "deletions": 37}, "files": [{"sha": "9fb4d0203f41e28b3904b29878b11dfdf0f4b7ba", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 13, "deletions": 37, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/60440b226d2f70bdae803443ff7ad2e2af2c9b10/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60440b226d2f70bdae803443ff7ad2e2af2c9b10/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=60440b226d2f70bdae803443ff7ad2e2af2c9b10", "patch": "@@ -1320,51 +1320,27 @@ pub fn noop_fold_exprs<T: Folder>(es: Vec<P<Expr>>, folder: &mut T) -> Vec<P<Exp\n     es.move_flat_map(|e| folder.fold_opt_expr(e))\n }\n \n-pub fn noop_fold_stmt<T: Folder>(Stmt {node, span, id}: Stmt, folder: &mut T)\n-                                 -> SmallVector<Stmt> {\n+pub fn noop_fold_stmt<T: Folder>(Stmt {node, span, id}: Stmt, folder: &mut T) -> SmallVector<Stmt> {\n     let id = folder.new_id(id);\n     let span = folder.new_span(span);\n+    noop_fold_stmt_kind(node, folder).into_iter().map(|node| {\n+        Stmt { id: id, node: node, span: span }\n+    }).collect()\n+}\n \n+pub fn noop_fold_stmt_kind<T: Folder>(node: StmtKind, folder: &mut T) -> SmallVector<StmtKind> {\n     match node {\n-        StmtKind::Local(local) => SmallVector::one(Stmt {\n-            id: id,\n-            node: StmtKind::Local(folder.fold_local(local)),\n-            span: span,\n-        }),\n-        StmtKind::Item(item) => folder.fold_item(item).into_iter().map(|item| Stmt {\n-            id: id,\n-            node: StmtKind::Item(item),\n-            span: span,\n-        }).collect(),\n+        StmtKind::Local(local) => SmallVector::one(StmtKind::Local(folder.fold_local(local))),\n+        StmtKind::Item(item) => folder.fold_item(item).into_iter().map(StmtKind::Item).collect(),\n         StmtKind::Expr(expr) => {\n-            if let Some(expr) = folder.fold_opt_expr(expr) {\n-                SmallVector::one(Stmt {\n-                    id: id,\n-                    node: StmtKind::Expr(expr),\n-                    span: span,\n-                })\n-            } else {\n-                SmallVector::zero()\n-            }\n+            folder.fold_opt_expr(expr).into_iter().map(StmtKind::Expr).collect()\n         }\n         StmtKind::Semi(expr) => {\n-            if let Some(expr) = folder.fold_opt_expr(expr) {\n-                SmallVector::one(Stmt {\n-                    id: id,\n-                    node: StmtKind::Semi(expr),\n-                    span: span,\n-                })\n-            } else {\n-                SmallVector::zero()\n-            }\n+            folder.fold_opt_expr(expr).into_iter().map(StmtKind::Semi).collect()\n         }\n-        StmtKind::Mac(mac) => SmallVector::one(Stmt {\n-            id: id,\n-            node: StmtKind::Mac(mac.map(|(mac, semi, attrs)| {\n-                (folder.fold_mac(mac), semi, fold_attrs(attrs.into(), folder).into())\n-            })),\n-            span: span,\n-        })\n+        StmtKind::Mac(mac) => SmallVector::one(StmtKind::Mac(mac.map(|(mac, semi, attrs)| {\n+            (folder.fold_mac(mac), semi, fold_attrs(attrs.into(), folder).into())\n+        }))),\n     }\n }\n "}]}