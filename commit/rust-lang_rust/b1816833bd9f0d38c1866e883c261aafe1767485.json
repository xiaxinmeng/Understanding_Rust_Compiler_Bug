{"sha": "b1816833bd9f0d38c1866e883c261aafe1767485", "node_id": "C_kwDOAAsO6NoAKGIxODE2ODMzYmQ5ZjBkMzhjMTg2NmU4ODNjMjYxYWFmZTE3Njc0ODU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-04T15:25:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-04T15:25:32Z"}, "message": "Rollup merge of #105141 - ohno418:fix-ice-on-invalid-var-decl-in-macro-call, r=compiler-errors\n\nFix ICE on invalid variable declarations in macro calls\n\nThis fixes ICE that happens with invalid variable declarations in macro calls like:\n\n```rust\nmacro_rules! m { ($s:stmt) => {} }\nm! { var x }\nm! { auto x }\nm! { mut x }\n```\n\nFound this is because of not collecting tokens on recovery, so I changed to force collect them.\n\nFixes https://github.com/rust-lang/rust/issues/103529.", "tree": {"sha": "9ff3fe76b055afefda9e90fb85f6af808902e54a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ff3fe76b055afefda9e90fb85f6af808902e54a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1816833bd9f0d38c1866e883c261aafe1767485", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjjLvsCRBK7hj4Ov3rIwAA7ucIAH1MvVmCPHQ4aLxIxSWtQiVd\nVdIUhAbDjTPcRNLxOl3cJzCMRuOVpzjjxblWfizyfayWGvPhJfXR4y18T2Xu3gro\nGLk5acIw7BR1NGkQDmM93XgD5d+HqSwp3ZHqR3LtH6TTSLdEouNbroO651n3Jz63\nqJnTWvzGTQvK3mbeI0DpZR5X1rYLR8hLcCNzjtE2IrV7By09MFmo5yhakSpd9iNb\n6UmQ40a13wGeoGHFup/FPRZlBvlBadwxLlV1WDKvx+SbdUMKnufwUrcYKpk9yfVZ\ns9vx4JW48V4+HIj4m0sfkxN+wWMcZDSFm1Ac/jjFVgqZcuPdBUrKFgHzzp5WkN0=\n=DFJT\n-----END PGP SIGNATURE-----\n", "payload": "tree 9ff3fe76b055afefda9e90fb85f6af808902e54a\nparent 7dbd1603b873527cbce2ac3f289f271b138cfc68\nparent e4812583c70db2259b952829a7412dea96c5afdd\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670167532 +0100\ncommitter GitHub <noreply@github.com> 1670167532 +0100\n\nRollup merge of #105141 - ohno418:fix-ice-on-invalid-var-decl-in-macro-call, r=compiler-errors\n\nFix ICE on invalid variable declarations in macro calls\n\nThis fixes ICE that happens with invalid variable declarations in macro calls like:\n\n```rust\nmacro_rules! m { ($s:stmt) => {} }\nm! { var x }\nm! { auto x }\nm! { mut x }\n```\n\nFound this is because of not collecting tokens on recovery, so I changed to force collect them.\n\nFixes https://github.com/rust-lang/rust/issues/103529.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1816833bd9f0d38c1866e883c261aafe1767485", "html_url": "https://github.com/rust-lang/rust/commit/b1816833bd9f0d38c1866e883c261aafe1767485", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1816833bd9f0d38c1866e883c261aafe1767485/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dbd1603b873527cbce2ac3f289f271b138cfc68", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dbd1603b873527cbce2ac3f289f271b138cfc68", "html_url": "https://github.com/rust-lang/rust/commit/7dbd1603b873527cbce2ac3f289f271b138cfc68"}, {"sha": "e4812583c70db2259b952829a7412dea96c5afdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4812583c70db2259b952829a7412dea96c5afdd", "html_url": "https://github.com/rust-lang/rust/commit/e4812583c70db2259b952829a7412dea96c5afdd"}], "stats": {"total": 95, "additions": 76, "deletions": 19}, "files": [{"sha": "42197e6379749a264c325dbb332a41926754b515", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b1816833bd9f0d38c1866e883c261aafe1767485/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1816833bd9f0d38c1866e883c261aafe1767485/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=b1816833bd9f0d38c1866e883c261aafe1767485", "patch": "@@ -72,14 +72,22 @@ impl<'a> Parser<'a> {\n \n         Ok(Some(if self.token.is_keyword(kw::Let) {\n             self.parse_local_mk(lo, attrs, capture_semi, force_collect)?\n-        } else if self.is_kw_followed_by_ident(kw::Mut) {\n-            self.recover_stmt_local(lo, attrs, InvalidVariableDeclarationSub::MissingLet)?\n-        } else if self.is_kw_followed_by_ident(kw::Auto) {\n+        } else if self.is_kw_followed_by_ident(kw::Mut) && self.may_recover() {\n+            self.recover_stmt_local_after_let(lo, attrs, InvalidVariableDeclarationSub::MissingLet)?\n+        } else if self.is_kw_followed_by_ident(kw::Auto) && self.may_recover() {\n             self.bump(); // `auto`\n-            self.recover_stmt_local(lo, attrs, InvalidVariableDeclarationSub::UseLetNotAuto)?\n-        } else if self.is_kw_followed_by_ident(sym::var) {\n+            self.recover_stmt_local_after_let(\n+                lo,\n+                attrs,\n+                InvalidVariableDeclarationSub::UseLetNotAuto,\n+            )?\n+        } else if self.is_kw_followed_by_ident(sym::var) && self.may_recover() {\n             self.bump(); // `var`\n-            self.recover_stmt_local(lo, attrs, InvalidVariableDeclarationSub::UseLetNotVar)?\n+            self.recover_stmt_local_after_let(\n+                lo,\n+                attrs,\n+                InvalidVariableDeclarationSub::UseLetNotVar,\n+            )?\n         } else if self.check_path() && !self.token.is_qpath_start() && !self.is_path_start_item() {\n             // We have avoided contextual keywords like `union`, items with `crate` visibility,\n             // or `auto trait` items. We aim to parse an arbitrary path `a::b` but not something\n@@ -213,13 +221,21 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    fn recover_stmt_local(\n+    fn recover_stmt_local_after_let(\n         &mut self,\n         lo: Span,\n         attrs: AttrWrapper,\n         subdiagnostic: fn(Span) -> InvalidVariableDeclarationSub,\n     ) -> PResult<'a, Stmt> {\n-        let stmt = self.recover_local_after_let(lo, attrs)?;\n+        let stmt =\n+            self.collect_tokens_trailing_token(attrs, ForceCollect::Yes, |this, attrs| {\n+                let local = this.parse_local(attrs)?;\n+                // FIXME - maybe capture semicolon in recovery?\n+                Ok((\n+                    this.mk_stmt(lo.to(this.prev_token.span), StmtKind::Local(local)),\n+                    TrailingToken::None,\n+                ))\n+            })?;\n         self.sess.emit_err(InvalidVariableDeclaration { span: lo, sub: subdiagnostic(lo) });\n         Ok(stmt)\n     }\n@@ -243,17 +259,6 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    fn recover_local_after_let(&mut self, lo: Span, attrs: AttrWrapper) -> PResult<'a, Stmt> {\n-        self.collect_tokens_trailing_token(attrs, ForceCollect::No, |this, attrs| {\n-            let local = this.parse_local(attrs)?;\n-            // FIXME - maybe capture semicolon in recovery?\n-            Ok((\n-                this.mk_stmt(lo.to(this.prev_token.span), StmtKind::Local(local)),\n-                TrailingToken::None,\n-            ))\n-        })\n-    }\n-\n     /// Parses a local variable declaration.\n     fn parse_local(&mut self, attrs: AttrVec) -> PResult<'a, P<Local>> {\n         let lo = self.prev_token.span;"}, {"sha": "fa05baed7fc8e40ee5eadcef11b2a1055cea9082", "filename": "src/test/ui/macros/issue-103529.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b1816833bd9f0d38c1866e883c261aafe1767485/src%2Ftest%2Fui%2Fmacros%2Fissue-103529.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1816833bd9f0d38c1866e883c261aafe1767485/src%2Ftest%2Fui%2Fmacros%2Fissue-103529.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-103529.rs?ref=b1816833bd9f0d38c1866e883c261aafe1767485", "patch": "@@ -0,0 +1,13 @@\n+macro_rules! m {\n+    ($s:stmt) => {}\n+}\n+\n+m! { mut x }\n+//~^ ERROR expected expression, found keyword `mut`\n+//~| ERROR expected a statement\n+m! { auto x }\n+//~^ ERROR invalid variable declaration\n+m! { var x }\n+//~^ ERROR invalid variable declaration\n+\n+fn main() {}"}, {"sha": "61e322afc770986faaed5e35b5423ef67913ac25", "filename": "src/test/ui/macros/issue-103529.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b1816833bd9f0d38c1866e883c261aafe1767485/src%2Ftest%2Fui%2Fmacros%2Fissue-103529.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1816833bd9f0d38c1866e883c261aafe1767485/src%2Ftest%2Fui%2Fmacros%2Fissue-103529.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-103529.stderr?ref=b1816833bd9f0d38c1866e883c261aafe1767485", "patch": "@@ -0,0 +1,39 @@\n+error: expected expression, found keyword `mut`\n+  --> $DIR/issue-103529.rs:5:6\n+   |\n+LL | m! { mut x }\n+   |      ^^^ expected expression\n+\n+error: expected a statement\n+  --> $DIR/issue-103529.rs:5:10\n+   |\n+LL |     ($s:stmt) => {}\n+   |      ------- while parsing argument for this `stmt` macro fragment\n+...\n+LL | m! { mut x }\n+   |          ^\n+\n+error: invalid variable declaration\n+  --> $DIR/issue-103529.rs:8:6\n+   |\n+LL | m! { auto x }\n+   |      ^^^^\n+   |\n+help: write `let` instead of `auto` to introduce a new variable\n+   |\n+LL | m! { let x }\n+   |      ~~~\n+\n+error: invalid variable declaration\n+  --> $DIR/issue-103529.rs:10:6\n+   |\n+LL | m! { var x }\n+   |      ^^^\n+   |\n+help: write `let` instead of `var` to introduce a new variable\n+   |\n+LL | m! { let x }\n+   |      ~~~\n+\n+error: aborting due to 4 previous errors\n+"}]}