{"sha": "5f98537eb7b5f42c246a52c550813c3cff336069", "node_id": "C_kwDOAAsO6NoAKDVmOTg1MzdlYjdiNWY0MmMyNDZhNTJjNTUwODEzYzNjZmYzMzYwNjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-02T23:38:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-02T23:38:08Z"}, "message": "Auto merge of #98569 - nnethercote:finalize_resolutions_id, r=cjgillot\n\nAvoid unnecessary work in `finalize_resolutions_in`.\n\nIf `module.opt_def_id()` returns `None`, we can skip most of the work.\n\nr? `@lqd`", "tree": {"sha": "0ac275d526befbe400ef3fd1e8365299e9eaa9e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ac275d526befbe400ef3fd1e8365299e9eaa9e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f98537eb7b5f42c246a52c550813c3cff336069", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f98537eb7b5f42c246a52c550813c3cff336069", "html_url": "https://github.com/rust-lang/rust/commit/5f98537eb7b5f42c246a52c550813c3cff336069", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f98537eb7b5f42c246a52c550813c3cff336069/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2d93935ffba3ab9d7ccb5300771a2d29b4c8bf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2d93935ffba3ab9d7ccb5300771a2d29b4c8bf3", "html_url": "https://github.com/rust-lang/rust/commit/f2d93935ffba3ab9d7ccb5300771a2d29b4c8bf3"}, {"sha": "0e475b5d5e712c23547c4aa344a8af55e01e40ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e475b5d5e712c23547c4aa344a8af55e01e40ee", "html_url": "https://github.com/rust-lang/rust/commit/0e475b5d5e712c23547c4aa344a8af55e01e40ee"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "e6060ad46650ea9f77a80d0535e812f2196bb5ec", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5f98537eb7b5f42c246a52c550813c3cff336069/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f98537eb7b5f42c246a52c550813c3cff336069/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=5f98537eb7b5f42c246a52c550813c3cff336069", "patch": "@@ -1090,31 +1090,31 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         // Since import resolution is finished, globs will not define any more names.\n         *module.globs.borrow_mut() = Vec::new();\n \n-        let mut reexports = Vec::new();\n-\n-        module.for_each_child(self.r, |_, ident, _, binding| {\n-            // FIXME: Consider changing the binding inserted by `#[macro_export] macro_rules`\n-            // into the crate root to actual `NameBindingKind::Import`.\n-            if binding.is_import()\n-                || matches!(binding.kind, NameBindingKind::Res(_, _is_macro_export @ true))\n-            {\n-                let res = binding.res().expect_non_local();\n-                // Ambiguous imports are treated as errors at this point and are\n-                // not exposed to other crates (see #36837 for more details).\n-                if res != def::Res::Err && !binding.is_ambiguity() {\n-                    reexports.push(ModChild {\n-                        ident,\n-                        res,\n-                        vis: binding.vis,\n-                        span: binding.span,\n-                        macro_rules: false,\n-                    });\n+        if let Some(def_id) = module.opt_def_id() {\n+            let mut reexports = Vec::new();\n+\n+            module.for_each_child(self.r, |_, ident, _, binding| {\n+                // FIXME: Consider changing the binding inserted by `#[macro_export] macro_rules`\n+                // into the crate root to actual `NameBindingKind::Import`.\n+                if binding.is_import()\n+                    || matches!(binding.kind, NameBindingKind::Res(_, _is_macro_export @ true))\n+                {\n+                    let res = binding.res().expect_non_local();\n+                    // Ambiguous imports are treated as errors at this point and are\n+                    // not exposed to other crates (see #36837 for more details).\n+                    if res != def::Res::Err && !binding.is_ambiguity() {\n+                        reexports.push(ModChild {\n+                            ident,\n+                            res,\n+                            vis: binding.vis,\n+                            span: binding.span,\n+                            macro_rules: false,\n+                        });\n+                    }\n                 }\n-            }\n-        });\n+            });\n \n-        if !reexports.is_empty() {\n-            if let Some(def_id) = module.opt_def_id() {\n+            if !reexports.is_empty() {\n                 // Call to `expect_local` should be fine because current\n                 // code is only called for local modules.\n                 self.r.reexport_map.insert(def_id.expect_local(), reexports);"}]}