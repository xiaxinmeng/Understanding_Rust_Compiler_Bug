{"sha": "626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNmU3NGQ1ZjY0Y2RjODIwYjZjNmFjMWE1YTlhNDIwOTZjZDE0N2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-07T07:11:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-07T07:11:22Z"}, "message": "Auto merge of #58254 - kennytm:rollup, r=kennytm\n\nRollup of 23 pull requests\n\nSuccessful merges:\n\n - #58118 (Transition libtest to 2018 edition)\n - #58119 (libproc_macro => 2018)\n - #58123 (Avoid some bounds checks in binary_heap::{PeekMut,Hole})\n - #58124 (libsyntax_pos => 2018)\n - #58133 (libsyntax_ext => 2018)\n - #58136 (Improve error message and docs for non-UTF-8 bytes in stdio on Windows)\n - #58156 (update submodule: rust-installer from 27dec6c to ccdc47b)\n - #58192 (Do not ICE in codegen when using a extern_type static)\n - #58193 (Move librustc to 2018)\n - #58210 (Make an assert debug-only in `find_constraint_paths_between_regions`.)\n - #58217 (librustc_tsan => 2018)\n - #58218 (librustc_msan => 2018)\n - #58219 (librustc_asan => 2018)\n - #58220 (libprofiler_builtins => 2018)\n - #58223 (librustc_lsan => 2018)\n - #58225 (librustc_fs_util => 2018)\n - #58228 (librustc_plugin => 2018)\n - #58236 (librustc_resolve => 2018)\n - #58237 (Fix broken grammar in iter::from_fn() docs)\n - #58239 (librustc_apfloat => 2018)\n - #58240 (librustc_errors => 2018)\n - #58241 (librustc_llvm => 2018)\n - #58242 (Document the one TyKind that isn't documented)\n\nFailed merges:\n\n - #58185 (Remove images' url to make it work even without internet connection)\n\nr? @ghost", "tree": {"sha": "8f6ce3f11950029296f9d247706a3f9b8ae2d214", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f6ce3f11950029296f9d247706a3f9b8ae2d214"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "html_url": "https://github.com/rust-lang/rust/commit/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "825f355c7483746f3a17166f34dfabe3b2df1741", "url": "https://api.github.com/repos/rust-lang/rust/commits/825f355c7483746f3a17166f34dfabe3b2df1741", "html_url": "https://github.com/rust-lang/rust/commit/825f355c7483746f3a17166f34dfabe3b2df1741"}, {"sha": "000daf948a143557b07442c6c59d8fc473e377c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/000daf948a143557b07442c6c59d8fc473e377c8", "html_url": "https://github.com/rust-lang/rust/commit/000daf948a143557b07442c6c59d8fc473e377c8"}], "stats": {"total": 3966, "additions": 2038, "deletions": 1928}, "files": [{"sha": "6214e1ce24587e1baffc7d0f693644e3e984d18b", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -248,14 +248,18 @@ impl<T: Ord> Drop for PeekMut<'_, T> {\n impl<T: Ord> Deref for PeekMut<'_, T> {\n     type Target = T;\n     fn deref(&self) -> &T {\n-        &self.heap.data[0]\n+        debug_assert!(!self.heap.is_empty());\n+        // SAFE: PeekMut is only instantiated for non-empty heaps\n+        unsafe { self.heap.data.get_unchecked(0) }\n     }\n }\n \n #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n impl<T: Ord> DerefMut for PeekMut<'_, T> {\n     fn deref_mut(&mut self) -> &mut T {\n-        &mut self.heap.data[0]\n+        debug_assert!(!self.heap.is_empty());\n+        // SAFE: PeekMut is only instantiated for non-empty heaps\n+        unsafe { self.heap.data.get_unchecked_mut(0) }\n     }\n }\n \n@@ -865,7 +869,8 @@ impl<'a, T> Hole<'a, T> {\n     #[inline]\n     unsafe fn new(data: &'a mut [T], pos: usize) -> Self {\n         debug_assert!(pos < data.len());\n-        let elt = ptr::read(&data[pos]);\n+        // SAFE: pos should be inside the slice\n+        let elt = ptr::read(data.get_unchecked(pos));\n         Hole {\n             data,\n             elt: ManuallyDrop::new(elt),"}, {"sha": "6f45f082d6a3714be887c7e1e001b92d6053742e", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -504,10 +504,8 @@ pub fn once_with<A, F: FnOnce() -> A>(gen: F) -> OnceWith<F> {\n /// [`FusedIterator`]: trait.FusedIterator.html\n /// [`Iterator::size_hint`]: trait.Iterator.html#method.size_hint\n ///\n-/// The closure can use its its captures and environment\n-/// to track state across iterations.\n-/// Depending on how the iterator is used,\n-/// this may require specifying the `move` keyword on the closure.\n+/// The closure can use captures and its environment to track state across iterations. Depending on\n+/// how the iterator is used, this may require specifying the `move` keyword on the closure.\n ///\n /// # Examples\n ///"}, {"sha": "b3d0ee94f0e12f4ae52f3bc48ebb144dd2aca443", "filename": "src/libproc_macro/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibproc_macro%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibproc_macro%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2FCargo.toml?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"proc_macro\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n path = \"lib.rs\""}, {"sha": "0d8cc552d61ab3cdbd86ec1d39f1d6527ddb3aa9", "filename": "src/libproc_macro/bridge/buffer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibproc_macro%2Fbridge%2Fbuffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibproc_macro%2Fbridge%2Fbuffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fbuffer.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -6,7 +6,7 @@ use std::ops::{Deref, DerefMut};\n use std::slice;\n \n #[repr(C)]\n-struct Slice<'a, T: 'a> {\n+struct Slice<'a, T> {\n     data: &'a [T; 0],\n     len: usize,\n }\n@@ -42,7 +42,7 @@ pub struct Buffer<T: Copy> {\n     data: *mut T,\n     len: usize,\n     capacity: usize,\n-    extend_from_slice: extern \"C\" fn(Buffer<T>, Slice<T>) -> Buffer<T>,\n+    extend_from_slice: extern \"C\" fn(Buffer<T>, Slice<'_, T>) -> Buffer<T>,\n     drop: extern \"C\" fn(Buffer<T>),\n }\n \n@@ -139,7 +139,7 @@ impl<T: Copy> From<Vec<T>> for Buffer<T> {\n             }\n         }\n \n-        extern \"C\" fn extend_from_slice<T: Copy>(b: Buffer<T>, xs: Slice<T>) -> Buffer<T> {\n+        extern \"C\" fn extend_from_slice<T: Copy>(b: Buffer<T>, xs: Slice<'_, T>) -> Buffer<T> {\n             let mut v = to_vec(b);\n             v.extend_from_slice(&xs);\n             Buffer::from(v)"}, {"sha": "b198bdb144699908a7c1feb4a2ed411722912d29", "filename": "src/libproc_macro/bridge/client.rs", "status": "modified", "additions": 35, "deletions": 27, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibproc_macro%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibproc_macro%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fclient.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -66,7 +66,7 @@ macro_rules! define_handles {\n             impl<S: server::Types> DecodeMut<'_, '_, HandleStore<server::MarkedTypes<S>>>\n                 for Marked<S::$oty, $oty>\n             {\n-                fn decode(r: &mut Reader, s: &mut HandleStore<server::MarkedTypes<S>>) -> Self {\n+                fn decode(r: &mut Reader<'_>, s: &mut HandleStore<server::MarkedTypes<S>>) -> Self {\n                     s.$oty.take(handle::Handle::decode(r, &mut ()))\n                 }\n             }\n@@ -80,7 +80,7 @@ macro_rules! define_handles {\n             impl<S: server::Types> Decode<'_, 's, HandleStore<server::MarkedTypes<S>>>\n                 for &'s Marked<S::$oty, $oty>\n             {\n-                fn decode(r: &mut Reader, s: &'s HandleStore<server::MarkedTypes<S>>) -> Self {\n+                fn decode(r: &mut Reader<'_>, s: &'s HandleStore<server::MarkedTypes<S>>) -> Self {\n                     &s.$oty[handle::Handle::decode(r, &mut ())]\n                 }\n             }\n@@ -94,7 +94,10 @@ macro_rules! define_handles {\n             impl<S: server::Types> DecodeMut<'_, 's, HandleStore<server::MarkedTypes<S>>>\n                 for &'s mut Marked<S::$oty, $oty>\n             {\n-                fn decode(r: &mut Reader, s: &'s mut HandleStore<server::MarkedTypes<S>>) -> Self {\n+                fn decode(\n+                    r: &mut Reader<'_>,\n+                    s: &'s mut HandleStore<server::MarkedTypes<S>>\n+                ) -> Self {\n                     &mut s.$oty[handle::Handle::decode(r, &mut ())]\n                 }\n             }\n@@ -108,7 +111,7 @@ macro_rules! define_handles {\n             }\n \n             impl<S> DecodeMut<'_, '_, S> for $oty {\n-                fn decode(r: &mut Reader, s: &mut S) -> Self {\n+                fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {\n                     $oty(handle::Handle::decode(r, s))\n                 }\n             }\n@@ -130,7 +133,7 @@ macro_rules! define_handles {\n             impl<S: server::Types> DecodeMut<'_, '_, HandleStore<server::MarkedTypes<S>>>\n                 for Marked<S::$ity, $ity>\n             {\n-                fn decode(r: &mut Reader, s: &mut HandleStore<server::MarkedTypes<S>>) -> Self {\n+                fn decode(r: &mut Reader<'_>, s: &mut HandleStore<server::MarkedTypes<S>>) -> Self {\n                     s.$ity.copy(handle::Handle::decode(r, &mut ()))\n                 }\n             }\n@@ -144,7 +147,7 @@ macro_rules! define_handles {\n             }\n \n             impl<S> DecodeMut<'_, '_, S> for $ity {\n-                fn decode(r: &mut Reader, s: &mut S) -> Self {\n+                fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {\n                     $ity(handle::Handle::decode(r, s))\n                 }\n             }\n@@ -200,7 +203,7 @@ impl Clone for Literal {\n \n // FIXME(eddyb) `Literal` should not expose internal `Debug` impls.\n impl fmt::Debug for Literal {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(&self.debug())\n     }\n }\n@@ -212,7 +215,7 @@ impl Clone for SourceFile {\n }\n \n impl fmt::Debug for Span {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(&self.debug())\n     }\n }\n@@ -275,7 +278,7 @@ impl BridgeState<'_> {\n     ///\n     /// N.B., while `f` is running, the thread-local state\n     /// is `BridgeState::InUse`.\n-    fn with<R>(f: impl FnOnce(&mut BridgeState) -> R) -> R {\n+    fn with<R>(f: impl FnOnce(&mut BridgeState<'_>) -> R) -> R {\n         BRIDGE_STATE.with(|state| {\n             state.replace(BridgeState::InUse, |mut state| {\n                 // FIXME(#52812) pass `f` directly to `replace` when `RefMutL` is gone\n@@ -306,7 +309,7 @@ impl Bridge<'_> {\n         BRIDGE_STATE.with(|state| state.set(BridgeState::Connected(self), f))\n     }\n \n-    fn with<R>(f: impl FnOnce(&mut Bridge) -> R) -> R {\n+    fn with<R>(f: impl FnOnce(&mut Bridge<'_>) -> R) -> R {\n         BridgeState::with(|state| match state {\n             BridgeState::NotConnected => {\n                 panic!(\"procedural macro API is used outside of a procedural macro\");\n@@ -331,15 +334,15 @@ impl Bridge<'_> {\n #[derive(Copy, Clone)]\n pub struct Client<F> {\n     pub(super) get_handle_counters: extern \"C\" fn() -> &'static HandleCounters,\n-    pub(super) run: extern \"C\" fn(Bridge, F) -> Buffer<u8>,\n+    pub(super) run: extern \"C\" fn(Bridge<'_>, F) -> Buffer<u8>,\n     pub(super) f: F,\n }\n \n // FIXME(#53451) public to work around `Cannot create local mono-item` ICE,\n // affecting not only the function itself, but also the `BridgeState` `thread_local!`.\n pub extern \"C\" fn __run_expand1(\n-    mut bridge: Bridge,\n-    f: fn(::TokenStream) -> ::TokenStream,\n+    mut bridge: Bridge<'_>,\n+    f: fn(crate::TokenStream) -> crate::TokenStream,\n ) -> Buffer<u8> {\n     // The initial `cached_buffer` contains the input.\n     let mut b = bridge.cached_buffer.take();\n@@ -352,7 +355,7 @@ pub extern \"C\" fn __run_expand1(\n             // Put the `cached_buffer` back in the `Bridge`, for requests.\n             Bridge::with(|bridge| bridge.cached_buffer = b.take());\n \n-            let output = f(::TokenStream(input)).0;\n+            let output = f(crate::TokenStream(input)).0;\n \n             // Take the `cached_buffer` back out, for the output value.\n             b = Bridge::with(|bridge| bridge.cached_buffer.take());\n@@ -378,8 +381,8 @@ pub extern \"C\" fn __run_expand1(\n     b\n }\n \n-impl Client<fn(::TokenStream) -> ::TokenStream> {\n-    pub const fn expand1(f: fn(::TokenStream) -> ::TokenStream) -> Self {\n+impl Client<fn(crate::TokenStream) -> crate::TokenStream> {\n+    pub const fn expand1(f: fn(crate::TokenStream) -> crate::TokenStream) -> Self {\n         Client {\n             get_handle_counters: HandleCounters::get,\n             run: __run_expand1,\n@@ -391,8 +394,8 @@ impl Client<fn(::TokenStream) -> ::TokenStream> {\n // FIXME(#53451) public to work around `Cannot create local mono-item` ICE,\n // affecting not only the function itself, but also the `BridgeState` `thread_local!`.\n pub extern \"C\" fn __run_expand2(\n-    mut bridge: Bridge,\n-    f: fn(::TokenStream, ::TokenStream) -> ::TokenStream,\n+    mut bridge: Bridge<'_>,\n+    f: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,\n ) -> Buffer<u8> {\n     // The initial `cached_buffer` contains the input.\n     let mut b = bridge.cached_buffer.take();\n@@ -406,7 +409,7 @@ pub extern \"C\" fn __run_expand2(\n             // Put the `cached_buffer` back in the `Bridge`, for requests.\n             Bridge::with(|bridge| bridge.cached_buffer = b.take());\n \n-            let output = f(::TokenStream(input), ::TokenStream(input2)).0;\n+            let output = f(crate::TokenStream(input), crate::TokenStream(input2)).0;\n \n             // Take the `cached_buffer` back out, for the output value.\n             b = Bridge::with(|bridge| bridge.cached_buffer.take());\n@@ -432,8 +435,10 @@ pub extern \"C\" fn __run_expand2(\n     b\n }\n \n-impl Client<fn(::TokenStream, ::TokenStream) -> ::TokenStream> {\n-    pub const fn expand2(f: fn(::TokenStream, ::TokenStream) -> ::TokenStream) -> Self {\n+impl Client<fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream> {\n+    pub const fn expand2(\n+        f: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream\n+    ) -> Self {\n         Client {\n             get_handle_counters: HandleCounters::get,\n             run: __run_expand2,\n@@ -448,25 +453,25 @@ pub enum ProcMacro {\n     CustomDerive {\n         trait_name: &'static str,\n         attributes: &'static [&'static str],\n-        client: Client<fn(::TokenStream) -> ::TokenStream>,\n+        client: Client<fn(crate::TokenStream) -> crate::TokenStream>,\n     },\n \n     Attr {\n         name: &'static str,\n-        client: Client<fn(::TokenStream, ::TokenStream) -> ::TokenStream>,\n+        client: Client<fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream>,\n     },\n \n     Bang {\n         name: &'static str,\n-        client: Client<fn(::TokenStream) -> ::TokenStream>,\n+        client: Client<fn(crate::TokenStream) -> crate::TokenStream>,\n     },\n }\n \n impl ProcMacro {\n     pub const fn custom_derive(\n         trait_name: &'static str,\n         attributes: &'static [&'static str],\n-        expand: fn(::TokenStream) -> ::TokenStream,\n+        expand: fn(crate::TokenStream) -> crate::TokenStream,\n     ) -> Self {\n         ProcMacro::CustomDerive {\n             trait_name,\n@@ -477,15 +482,18 @@ impl ProcMacro {\n \n     pub const fn attr(\n         name: &'static str,\n-        expand: fn(::TokenStream, ::TokenStream) -> ::TokenStream,\n+        expand: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,\n     ) -> Self {\n         ProcMacro::Attr {\n             name,\n             client: Client::expand2(expand),\n         }\n     }\n \n-    pub const fn bang(name: &'static str, expand: fn(::TokenStream) -> ::TokenStream) -> Self {\n+    pub const fn bang(\n+        name: &'static str,\n+        expand: fn(crate::TokenStream) -> crate::TokenStream\n+    ) -> Self {\n         ProcMacro::Bang {\n             name,\n             client: Client::expand1(expand),"}, {"sha": "3173651b0395128bf59232f23578b63854881cc0", "filename": "src/libproc_macro/bridge/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibproc_macro%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibproc_macro%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fmod.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -17,7 +17,7 @@ use std::panic;\n use std::sync::atomic::AtomicUsize;\n use std::sync::Once;\n use std::thread;\n-use {Delimiter, Level, LineColumn, Spacing};\n+use crate::{Delimiter, Level, LineColumn, Spacing};\n \n /// Higher-order macro describing the server RPC API, allowing automatic\n /// generation of type-safe Rust APIs, both client-side and server-side.\n@@ -196,9 +196,9 @@ mod scoped_cell;\n #[forbid(unsafe_code)]\n pub mod server;\n \n-use self::buffer::Buffer;\n-pub use self::rpc::PanicMessage;\n-use self::rpc::{Decode, DecodeMut, Encode, Reader, Writer};\n+use buffer::Buffer;\n+pub use rpc::PanicMessage;\n+use rpc::{Decode, DecodeMut, Encode, Reader, Writer};\n \n /// An active connection between a server and a client.\n /// The server creates the bridge (`Bridge::run_server` in `server.rs`),"}, {"sha": "a3bc0d229084679e232db6d554c626647cac6022", "filename": "src/libproc_macro/bridge/rpc.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibproc_macro%2Fbridge%2Frpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibproc_macro%2Fbridge%2Frpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Frpc.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -40,7 +40,7 @@ macro_rules! rpc_encode_decode {\n         }\n \n         impl<S> DecodeMut<'_, '_, S> for $ty {\n-            fn decode(r: &mut Reader, s: &mut S) -> Self {\n+            fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {\n                 let mut byte = 0x80;\n                 let mut v = 0;\n                 let mut shift = 0;\n@@ -61,7 +61,7 @@ macro_rules! rpc_encode_decode {\n         }\n \n         impl<S> DecodeMut<'_, '_, S> for $name {\n-            fn decode(r: &mut Reader, s: &mut S) -> Self {\n+            fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {\n                 $name {\n                     $($field: DecodeMut::decode(r, s)),*\n                 }\n@@ -119,7 +119,7 @@ impl<S> Encode<S> for () {\n }\n \n impl<S> DecodeMut<'_, '_, S> for () {\n-    fn decode(_: &mut Reader, _: &mut S) -> Self {}\n+    fn decode(_: &mut Reader<'_>, _: &mut S) -> Self {}\n }\n \n impl<S> Encode<S> for u8 {\n@@ -129,7 +129,7 @@ impl<S> Encode<S> for u8 {\n }\n \n impl<S> DecodeMut<'_, '_, S> for u8 {\n-    fn decode(r: &mut Reader, _: &mut S) -> Self {\n+    fn decode(r: &mut Reader<'_>, _: &mut S) -> Self {\n         let x = r[0];\n         *r = &r[1..];\n         x\n@@ -146,7 +146,7 @@ impl<S> Encode<S> for bool {\n }\n \n impl<S> DecodeMut<'_, '_, S> for bool {\n-    fn decode(r: &mut Reader, s: &mut S) -> Self {\n+    fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {\n         match u8::decode(r, s) {\n             0 => false,\n             1 => true,\n@@ -162,7 +162,7 @@ impl<S> Encode<S> for char {\n }\n \n impl<S> DecodeMut<'_, '_, S> for char {\n-    fn decode(r: &mut Reader, s: &mut S) -> Self {\n+    fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {\n         char::from_u32(u32::decode(r, s)).unwrap()\n     }\n }\n@@ -174,7 +174,7 @@ impl<S> Encode<S> for NonZeroU32 {\n }\n \n impl<S> DecodeMut<'_, '_, S> for NonZeroU32 {\n-    fn decode(r: &mut Reader, s: &mut S) -> Self {\n+    fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {\n         Self::new(u32::decode(r, s)).unwrap()\n     }\n }\n@@ -251,7 +251,7 @@ impl<S> Encode<S> for String {\n }\n \n impl<S> DecodeMut<'_, '_, S> for String {\n-    fn decode(r: &mut Reader, s: &mut S) -> Self {\n+    fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {\n         <&str>::decode(r, s).to_string()\n     }\n }\n@@ -306,7 +306,7 @@ impl<S> Encode<S> for PanicMessage {\n }\n \n impl<S> DecodeMut<'_, '_, S> for PanicMessage {\n-    fn decode(r: &mut Reader, s: &mut S) -> Self {\n+    fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {\n         match Option::<String>::decode(r, s) {\n             Some(s) => PanicMessage::String(s),\n             None => PanicMessage::Unknown,"}, {"sha": "75806eb9d17602edbae8da9143391ba067d81897", "filename": "src/libproc_macro/bridge/server.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibproc_macro%2Fbridge%2Fserver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibproc_macro%2Fbridge%2Fserver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fserver.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -131,7 +131,7 @@ pub trait ExecutionStrategy {\n         &self,\n         dispatcher: &mut impl DispatcherTrait,\n         input: Buffer<u8>,\n-        run_client: extern \"C\" fn(Bridge, D) -> Buffer<u8>,\n+        run_client: extern \"C\" fn(Bridge<'_>, D) -> Buffer<u8>,\n         client_data: D,\n     ) -> Buffer<u8>;\n }\n@@ -143,7 +143,7 @@ impl ExecutionStrategy for SameThread {\n         &self,\n         dispatcher: &mut impl DispatcherTrait,\n         input: Buffer<u8>,\n-        run_client: extern \"C\" fn(Bridge, D) -> Buffer<u8>,\n+        run_client: extern \"C\" fn(Bridge<'_>, D) -> Buffer<u8>,\n         client_data: D,\n     ) -> Buffer<u8> {\n         let mut dispatch = |b| dispatcher.dispatch(b);\n@@ -168,7 +168,7 @@ impl ExecutionStrategy for CrossThread1 {\n         &self,\n         dispatcher: &mut impl DispatcherTrait,\n         input: Buffer<u8>,\n-        run_client: extern \"C\" fn(Bridge, D) -> Buffer<u8>,\n+        run_client: extern \"C\" fn(Bridge<'_>, D) -> Buffer<u8>,\n         client_data: D,\n     ) -> Buffer<u8> {\n         use std::sync::mpsc::channel;\n@@ -206,7 +206,7 @@ impl ExecutionStrategy for CrossThread2 {\n         &self,\n         dispatcher: &mut impl DispatcherTrait,\n         input: Buffer<u8>,\n-        run_client: extern \"C\" fn(Bridge, D) -> Buffer<u8>,\n+        run_client: extern \"C\" fn(Bridge<'_>, D) -> Buffer<u8>,\n         client_data: D,\n     ) -> Buffer<u8> {\n         use std::sync::{Arc, Mutex};\n@@ -273,7 +273,7 @@ fn run_server<\n     handle_counters: &'static client::HandleCounters,\n     server: S,\n     input: I,\n-    run_client: extern \"C\" fn(Bridge, D) -> Buffer<u8>,\n+    run_client: extern \"C\" fn(Bridge<'_>, D) -> Buffer<u8>,\n     client_data: D,\n ) -> Result<O, PanicMessage> {\n     let mut dispatcher = Dispatcher {\n@@ -289,7 +289,7 @@ fn run_server<\n     Result::decode(&mut &b[..], &mut dispatcher.handle_store)\n }\n \n-impl client::Client<fn(::TokenStream) -> ::TokenStream> {\n+impl client::Client<fn(crate::TokenStream) -> crate::TokenStream> {\n     pub fn run<S: Server>(\n         &self,\n         strategy: &impl ExecutionStrategy,\n@@ -313,7 +313,7 @@ impl client::Client<fn(::TokenStream) -> ::TokenStream> {\n     }\n }\n \n-impl client::Client<fn(::TokenStream, ::TokenStream) -> ::TokenStream> {\n+impl client::Client<fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream> {\n     pub fn run<S: Server>(\n         &self,\n         strategy: &impl ExecutionStrategy,"}, {"sha": "7a0c9419f62342f1ae4827987c77bfb398b3ee9f", "filename": "src/libproc_macro/diagnostic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibproc_macro%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibproc_macro%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fdiagnostic.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,4 +1,4 @@\n-use Span;\n+use crate::Span;\n \n /// An enum representing a diagnostic level.\n #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n@@ -80,7 +80,7 @@ macro_rules! diagnostic_child_methods {\n /// Iterator over the children diagnostics of a `Diagnostic`.\n #[derive(Debug, Clone)]\n #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n-pub struct Children<'a>(::std::slice::Iter<'a, Diagnostic>);\n+pub struct Children<'a>(std::slice::Iter<'a, Diagnostic>);\n \n #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n impl<'a> Iterator for Children<'a> {\n@@ -161,22 +161,22 @@ impl Diagnostic {\n \n     /// Returns an iterator over the children diagnostics of `self`.\n     #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n-    pub fn children(&self) -> Children {\n+    pub fn children(&self) -> Children<'_> {\n         Children(self.children.iter())\n     }\n \n     /// Emit the diagnostic.\n     #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n     pub fn emit(self) {\n-        fn to_internal(spans: Vec<Span>) -> ::bridge::client::MultiSpan {\n-            let mut multi_span = ::bridge::client::MultiSpan::new();\n+        fn to_internal(spans: Vec<Span>) -> crate::bridge::client::MultiSpan {\n+            let mut multi_span = crate::bridge::client::MultiSpan::new();\n             for span in spans {\n                 multi_span.push(span.0);\n             }\n             multi_span\n         }\n \n-        let mut diag = ::bridge::client::Diagnostic::new(\n+        let mut diag = crate::bridge::client::Diagnostic::new(\n             self.level,\n             &self.message[..],\n             to_internal(self.spans),"}, {"sha": "bb6f5e234f7c227038faa93ae10e06918f1cbd6d", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -17,7 +17,8 @@\n        test(no_crate_inject, attr(deny(warnings))),\n        test(attr(allow(dead_code, deprecated, unused_variables, unused_mut))))]\n \n-#![feature(nll)]\n+#![deny(rust_2018_idioms)]\n+\n #![feature(staged_api)]\n #![feature(const_fn)]\n #![feature(extern_types)]\n@@ -114,15 +115,15 @@ impl ToString for TokenStream {\n /// with `Delimiter::None` delimiters and negative numeric literals.\n #[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n impl fmt::Display for TokenStream {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(&self.to_string())\n     }\n }\n \n /// Prints token in a form convenient for debugging.\n #[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n impl fmt::Debug for TokenStream {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(\"TokenStream \")?;\n         f.debug_list().entries(self.clone()).finish()\n     }\n@@ -183,7 +184,7 @@ impl Extend<TokenStream> for TokenStream {\n /// Public implementation details for the `TokenStream` type, such as iterators.\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n pub mod token_stream {\n-    use {bridge, Group, Ident, Literal, Punct, TokenTree, TokenStream};\n+    use crate::{bridge, Group, Ident, Literal, Punct, TokenTree, TokenStream};\n \n     /// An iterator over `TokenStream`'s `TokenTree`s.\n     /// The iteration is \"shallow\", e.g., the iterator doesn't recurse into delimited groups,\n@@ -340,7 +341,7 @@ impl Span {\n /// Prints a span in a form convenient for debugging.\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Debug for Span {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.0.fmt(f)\n     }\n }\n@@ -398,7 +399,7 @@ impl SourceFile {\n \n #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n impl fmt::Debug for SourceFile {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"SourceFile\")\n             .field(\"path\", &self.path())\n             .field(\"is_real\", &self.is_real())\n@@ -483,7 +484,7 @@ impl TokenTree {\n /// Prints token tree in a form convenient for debugging.\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Debug for TokenTree {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         // Each of these has the name in the struct type in the derived debug,\n         // so don't bother with an extra layer of indirection\n         match *self {\n@@ -542,7 +543,7 @@ impl ToString for TokenTree {\n /// with `Delimiter::None` delimiters and negative numeric literals.\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Display for TokenTree {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(&self.to_string())\n     }\n }\n@@ -667,14 +668,14 @@ impl ToString for Group {\n /// with `Delimiter::None` delimiters.\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Display for Group {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(&self.to_string())\n     }\n }\n \n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Debug for Group {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Group\")\n             .field(\"delimiter\", &self.delimiter())\n             .field(\"stream\", &self.stream())\n@@ -763,14 +764,14 @@ impl ToString for Punct {\n /// back into the same character.\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Display for Punct {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(&self.to_string())\n     }\n }\n \n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Debug for Punct {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Punct\")\n             .field(\"ch\", &self.as_char())\n             .field(\"spacing\", &self.spacing())\n@@ -842,14 +843,14 @@ impl ToString for Ident {\n /// back into the same identifier.\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Display for Ident {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(&self.to_string())\n     }\n }\n \n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Debug for Ident {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Ident\")\n             .field(\"ident\", &self.to_string())\n             .field(\"span\", &self.span())\n@@ -1092,14 +1093,14 @@ impl ToString for Literal {\n /// back into the same literal (except for possible rounding for floating point literals).\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Display for Literal {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(&self.to_string())\n     }\n }\n \n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Debug for Literal {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         // FIXME(eddyb) `Literal` should not expose internal `Debug` impls.\n         self.0.fmt(f)\n     }"}, {"sha": "e3d31b78f4a09258b398160bd9185d5f2671e80a", "filename": "src/libproc_macro/quote.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibproc_macro%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibproc_macro%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fquote.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -4,7 +4,7 @@\n //! This quasiquoter uses macros 2.0 hygiene to reliably access\n //! items from `proc_macro`, to build a `proc_macro::TokenStream`.\n \n-use {Delimiter, Group, Ident, Literal, Punct, Spacing, Span, TokenStream, TokenTree};\n+use crate::{Delimiter, Group, Ident, Literal, Punct, Spacing, Span, TokenStream, TokenTree};\n \n macro_rules! quote_tt {\n     (($($t:tt)*)) => { Group::new(Delimiter::Parenthesis, quote!($($t)*)) };\n@@ -63,7 +63,7 @@ macro_rules! quote {\n #[unstable(feature = \"proc_macro_quote\", issue = \"54722\")]\n pub fn quote(stream: TokenStream) -> TokenStream {\n     if stream.is_empty() {\n-        return quote!(::TokenStream::new());\n+        return quote!(crate::TokenStream::new());\n     }\n     let mut after_dollar = false;\n     let tokens = stream\n@@ -73,7 +73,7 @@ pub fn quote(stream: TokenStream) -> TokenStream {\n                 after_dollar = false;\n                 match tree {\n                     TokenTree::Ident(_) => {\n-                        return Some(quote!(Into::<::TokenStream>::into(\n+                        return Some(quote!(Into::<crate::TokenStream>::into(\n                         Clone::clone(&(@ tree))),));\n                     }\n                     TokenTree::Punct(ref tt) if tt.as_char() == '$' => {}\n@@ -86,33 +86,33 @@ pub fn quote(stream: TokenStream) -> TokenStream {\n                 }\n             }\n \n-            Some(quote!(::TokenStream::from((@ match tree {\n-                TokenTree::Punct(tt) => quote!(::TokenTree::Punct(::Punct::new(\n+            Some(quote!(crate::TokenStream::from((@ match tree {\n+                TokenTree::Punct(tt) => quote!(crate::TokenTree::Punct(crate::Punct::new(\n                     (@ TokenTree::from(Literal::character(tt.as_char()))),\n                     (@ match tt.spacing() {\n-                        Spacing::Alone => quote!(::Spacing::Alone),\n-                        Spacing::Joint => quote!(::Spacing::Joint),\n+                        Spacing::Alone => quote!(crate::Spacing::Alone),\n+                        Spacing::Joint => quote!(crate::Spacing::Joint),\n                     }),\n                 ))),\n-                TokenTree::Group(tt) => quote!(::TokenTree::Group(::Group::new(\n+                TokenTree::Group(tt) => quote!(crate::TokenTree::Group(crate::Group::new(\n                     (@ match tt.delimiter() {\n-                        Delimiter::Parenthesis => quote!(::Delimiter::Parenthesis),\n-                        Delimiter::Brace => quote!(::Delimiter::Brace),\n-                        Delimiter::Bracket => quote!(::Delimiter::Bracket),\n-                        Delimiter::None => quote!(::Delimiter::None),\n+                        Delimiter::Parenthesis => quote!(crate::Delimiter::Parenthesis),\n+                        Delimiter::Brace => quote!(crate::Delimiter::Brace),\n+                        Delimiter::Bracket => quote!(crate::Delimiter::Bracket),\n+                        Delimiter::None => quote!(crate::Delimiter::None),\n                     }),\n                     (@ quote(tt.stream())),\n                 ))),\n-                TokenTree::Ident(tt) => quote!(::TokenTree::Ident(::Ident::new(\n+                TokenTree::Ident(tt) => quote!(crate::TokenTree::Ident(crate::Ident::new(\n                     (@ TokenTree::from(Literal::string(&tt.to_string()))),\n                     (@ quote_span(tt.span())),\n                 ))),\n-                TokenTree::Literal(tt) => quote!(::TokenTree::Literal({\n+                TokenTree::Literal(tt) => quote!(crate::TokenTree::Literal({\n                     let mut iter = (@ TokenTree::from(Literal::string(&tt.to_string())))\n-                        .parse::<::TokenStream>()\n+                        .parse::<crate::TokenStream>()\n                         .unwrap()\n                         .into_iter();\n-                    if let (Some(::TokenTree::Literal(mut lit)), None) =\n+                    if let (Some(crate::TokenTree::Literal(mut lit)), None) =\n                         (iter.next(), iter.next())\n                     {\n                         lit.set_span((@ quote_span(tt.span())));\n@@ -129,12 +129,12 @@ pub fn quote(stream: TokenStream) -> TokenStream {\n         panic!(\"unexpected trailing `$` in `quote!`\");\n     }\n \n-    quote!([(@ tokens)].iter().cloned().collect::<::TokenStream>())\n+    quote!([(@ tokens)].iter().cloned().collect::<crate::TokenStream>())\n }\n \n /// Quote a `Span` into a `TokenStream`.\n /// This is needed to implement a custom quoter.\n #[unstable(feature = \"proc_macro_quote\", issue = \"54722\")]\n pub fn quote_span(_: Span) -> TokenStream {\n-    quote!(::Span::def_site())\n+    quote!(crate::Span::def_site())\n }"}, {"sha": "0d36bd0b39d76b69a3f7e835e5e5c579828425f4", "filename": "src/libprofiler_builtins/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibprofiler_builtins%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibprofiler_builtins%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2FCargo.toml?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -3,6 +3,7 @@ authors = [\"The Rust Project Developers\"]\n build = \"build.rs\"\n name = \"profiler_builtins\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"profiler_builtins\""}, {"sha": "ff52a03d9dd9725fc0fed1c280be447e1ff7dec9", "filename": "src/libprofiler_builtins/build.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibprofiler_builtins%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibprofiler_builtins%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2Fbuild.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -2,8 +2,6 @@\n //!\n //! See the build.rs for libcompiler_builtins crate for details.\n \n-extern crate cc;\n-\n use std::env;\n use std::path::Path;\n "}, {"sha": "9c8d3a13b0812db33909bf3b7ff1161f9672574d", "filename": "src/libprofiler_builtins/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibprofiler_builtins%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibprofiler_builtins%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2Flib.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -5,5 +5,5 @@\n             reason = \"internal implementation detail of rustc right now\",\n             issue = \"0\")]\n #![allow(unused_features)]\n-#![feature(nll)]\n #![feature(staged_api)]\n+#![deny(rust_2018_idioms)]"}, {"sha": "c9a04f4c6834da2f571c2b26f9bc2167dbfeb106", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc\""}, {"sha": "f7ffbe8c65833af10c0a040c39df216296a7cd42", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,11 +1,11 @@\n-use cfg::*;\n-use middle::region;\n+use crate::cfg::*;\n+use crate::middle::region;\n use rustc_data_structures::graph::implementation as graph;\n use syntax::ptr::P;\n-use ty::{self, TyCtxt};\n+use crate::ty::{self, TyCtxt};\n \n-use hir::{self, PatKind};\n-use hir::def_id::DefId;\n+use crate::hir::{self, PatKind};\n+use crate::hir::def_id::DefId;\n \n struct CFGBuilder<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "969c38bd663298142a3501de55325566ca8f999f", "filename": "src/librustc/cfg/graphviz.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fcfg%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fcfg%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fgraphviz.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -4,9 +4,9 @@\n // For clarity, rename the graphviz crate locally to dot.\n use graphviz as dot;\n \n-use cfg;\n-use hir;\n-use ty::TyCtxt;\n+use crate::cfg;\n+use crate::hir;\n+use crate::ty::TyCtxt;\n \n pub type Node<'a> = (cfg::CFGIndex, &'a cfg::CFGNode);\n pub type Edge<'a> = &'a cfg::CFGEdge;"}, {"sha": "345dff88b5f0b14e1b481b9d9ff294ef9527e908", "filename": "src/librustc/cfg/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fcfg%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fcfg%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fmod.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -2,9 +2,9 @@\n //! Uses `Graph` as the underlying representation.\n \n use rustc_data_structures::graph::implementation as graph;\n-use ty::TyCtxt;\n-use hir;\n-use hir::def_id::DefId;\n+use crate::ty::TyCtxt;\n+use crate::hir;\n+use crate::hir::def_id::DefId;\n \n mod construct;\n pub mod graphviz;"}, {"sha": "13f6f9533297340d1b52c052f72cf32977d1e6e2", "filename": "src/librustc/dep_graph/cgu_reuse_tracker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fdep_graph%2Fcgu_reuse_tracker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fdep_graph%2Fcgu_reuse_tracker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fcgu_reuse_tracker.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -2,7 +2,7 @@\n //! compilation. This is used for incremental compilation tests and debug\n //! output.\n \n-use session::Session;\n+use crate::session::Session;\n use rustc_data_structures::fx::FxHashMap;\n use std::sync::{Arc, Mutex};\n use syntax_pos::Span;"}, {"sha": "58087b76266b5c7480bac2e354a355619c3b1c48", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -49,25 +49,25 @@\n //! user of the `DepNode` API of having to know how to compute the expected\n //! fingerprint for a given set of node parameters.\n \n-use mir::interpret::GlobalId;\n-use hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX};\n-use hir::map::DefPathHash;\n-use hir::HirId;\n+use crate::mir::interpret::GlobalId;\n+use crate::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX};\n+use crate::hir::map::DefPathHash;\n+use crate::hir::HirId;\n \n-use ich::{Fingerprint, StableHashingContext};\n+use crate::ich::{Fingerprint, StableHashingContext};\n use rustc_data_structures::stable_hasher::{StableHasher, HashStable};\n use std::fmt;\n use std::hash::Hash;\n use syntax_pos::symbol::InternedString;\n-use traits;\n-use traits::query::{\n+use crate::traits;\n+use crate::traits::query::{\n     CanonicalProjectionGoal, CanonicalTyGoal, CanonicalTypeOpAscribeUserTypeGoal,\n     CanonicalTypeOpEqGoal, CanonicalTypeOpSubtypeGoal, CanonicalPredicateGoal,\n     CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpNormalizeGoal,\n };\n-use ty::{TyCtxt, FnSig, Instance, InstanceDef,\n+use crate::ty::{TyCtxt, FnSig, Instance, InstanceDef,\n          ParamEnv, ParamEnvAnd, Predicate, PolyFnSig, PolyTraitRef, Ty};\n-use ty::subst::Substs;\n+use crate::ty::subst::Substs;\n \n // erase!() just makes tokens go away. It's used to specify which macro argument\n // is repeated (i.e., which sub-expression of the macro we are in) but don't need\n@@ -389,7 +389,7 @@ impl fmt::Debug for DepNode {\n \n         write!(f, \"(\")?;\n \n-        ::ty::tls::with_opt(|opt_tcx| {\n+        crate::ty::tls::with_opt(|opt_tcx| {\n             if let Some(tcx) = opt_tcx {\n                 if let Some(def_id) = self.extract_def_id(tcx) {\n                     write!(f, \"{}\", tcx.def_path_debug_str(def_id))?;\n@@ -825,6 +825,6 @@ impl WorkProductId {\n     }\n }\n \n-impl_stable_hash_for!(struct ::dep_graph::WorkProductId {\n+impl_stable_hash_for!(struct crate::dep_graph::WorkProductId {\n     hash\n });"}, {"sha": "a296a3379c2aca53bd8fe6571f821e7b4ee77688", "filename": "src/librustc/dep_graph/dep_tracking_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -2,7 +2,7 @@ use rustc_data_structures::fx::FxHashMap;\n use std::cell::RefCell;\n use std::hash::Hash;\n use std::marker::PhantomData;\n-use util::common::MemoizationMap;\n+use crate::util::common::MemoizationMap;\n \n use super::{DepKind, DepNodeIndex, DepGraph};\n "}, {"sha": "663c408ac22fd248601277b78508042a471a3571", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,4 +1,4 @@\n-use errors::{Diagnostic, DiagnosticBuilder};\n+use crate::errors::{Diagnostic, DiagnosticBuilder};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n@@ -7,11 +7,11 @@ use rustc_data_structures::sync::{Lrc, Lock, AtomicU32, Ordering};\n use std::env;\n use std::hash::Hash;\n use std::collections::hash_map::Entry;\n-use ty::{self, TyCtxt};\n-use util::common::{ProfileQueriesMsg, profq_msg};\n+use crate::ty::{self, TyCtxt};\n+use crate::util::common::{ProfileQueriesMsg, profq_msg};\n use parking_lot::{Mutex, Condvar};\n \n-use ich::{StableHashingContext, StableHashingContextProvider, Fingerprint};\n+use crate::ich::{StableHashingContext, StableHashingContextProvider, Fingerprint};\n \n use super::debug::EdgeFilter;\n use super::dep_node::{DepNode, DepKind, WorkProductId};\n@@ -669,7 +669,7 @@ impl DepGraph {\n                     // We failed to mark it green, so we try to force the query.\n                     debug!(\"try_mark_previous_green({:?}) --- trying to force \\\n                             dependency {:?}\", dep_node, dep_dep_node);\n-                    if ::ty::query::force_from_dep_node(tcx, dep_dep_node) {\n+                    if crate::ty::query::force_from_dep_node(tcx, dep_dep_node) {\n                         let dep_dep_node_color = data.colors.get(dep_dep_node_index);\n \n                         match dep_dep_node_color {"}, {"sha": "d971690bbe317788f2cd887289fd8fbabcc3c049", "filename": "src/librustc/dep_graph/prev.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fdep_graph%2Fprev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fdep_graph%2Fprev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fprev.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,4 +1,4 @@\n-use ich::Fingerprint;\n+use crate::ich::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use super::dep_node::DepNode;\n use super::serialized::{SerializedDepGraph, SerializedDepNodeIndex};"}, {"sha": "fc767defe9c712b4aed37c0dc8fc89fe71149581", "filename": "src/librustc/dep_graph/safe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fdep_graph%2Fsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fdep_graph%2Fsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fsafe.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,9 +1,9 @@\n //! The `DepGraphSafe` trait\n \n-use hir::BodyId;\n-use hir::def_id::DefId;\n+use crate::hir::BodyId;\n+use crate::hir::def_id::DefId;\n use syntax::ast::NodeId;\n-use ty::TyCtxt;\n+use crate::ty::TyCtxt;\n \n /// The `DepGraphSafe` trait is used to specify what kinds of values\n /// are safe to \"leak\" into a task. The idea is that this should be"}, {"sha": "b64f71ed908d823b079ced68670c3ae55389755a", "filename": "src/librustc/dep_graph/serialized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fserialized.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,7 +1,7 @@\n //! The data that we will serialize and deserialize.\n \n-use dep_graph::DepNode;\n-use ich::Fingerprint;\n+use crate::dep_graph::DepNode;\n+use crate::ich::Fingerprint;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n \n newtype_index! {"}, {"sha": "ba340ad251f2a8c364790846e7dba2f0aa7bc307", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -5,12 +5,12 @@\n //! item.\n \n \n-use ty::TyCtxt;\n-use ty::query::Providers;\n+use crate::ty::TyCtxt;\n+use crate::ty::query::Providers;\n \n-use hir;\n-use hir::def_id::DefId;\n-use hir::intravisit::{self, Visitor, NestedVisitorMap};\n+use crate::hir;\n+use crate::hir::def_id::DefId;\n+use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use std::fmt::{self, Display};\n use syntax_pos::Span;\n "}, {"sha": "6566c6041b6e5ebd964c752ab4fe4b35e7413262", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,10 +1,10 @@\n-use hir::def_id::DefId;\n-use util::nodemap::{NodeMap, DefIdMap};\n+use crate::hir::def_id::DefId;\n+use crate::util::nodemap::{NodeMap, DefIdMap};\n use syntax::ast;\n use syntax::ext::base::MacroKind;\n use syntax_pos::Span;\n-use hir;\n-use ty;\n+use crate::hir;\n+use crate::ty;\n \n use self::Namespace::*;\n "}, {"sha": "e06f09e21cbf310ad355ad96c5f96a31c393fc26", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,6 +1,6 @@\n-use ty;\n-use ty::TyCtxt;\n-use hir::map::definitions::FIRST_FREE_HIGH_DEF_INDEX;\n+use crate::ty;\n+use crate::ty::TyCtxt;\n+use crate::hir::map::definitions::FIRST_FREE_HIGH_DEF_INDEX;\n use rustc_data_structures::indexed_vec::Idx;\n use serialize;\n use std::fmt;"}, {"sha": "86c3fb9e4fcd7df5a6e623a94f4c502b3fc29b7c", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -33,9 +33,9 @@\n \n use syntax::ast::{NodeId, CRATE_NODE_ID, Ident, Name, Attribute};\n use syntax_pos::Span;\n-use hir::*;\n-use hir::def::Def;\n-use hir::map::Map;\n+use crate::hir::*;\n+use crate::hir::def::Def;\n+use crate::hir::map::Map;\n use super::itemlikevisit::DeepVisitor;\n \n #[derive(Copy, Clone)]"}, {"sha": "d0fd5bd6844b02b9ab5f02c4fcafc1dce589992d", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -30,24 +30,24 @@\n //! get confused if the spans from leaf AST nodes occur in multiple places\n //! in the HIR, especially for multiple identifiers.\n \n-use dep_graph::DepGraph;\n-use errors::Applicability;\n-use hir::{self, ParamName};\n-use hir::HirVec;\n-use hir::map::{DefKey, DefPathData, Definitions};\n-use hir::def_id::{DefId, DefIndex, DefIndexAddressSpace, CRATE_DEF_INDEX};\n-use hir::def::{Def, PathResolution, PerNS};\n-use hir::GenericArg;\n-use lint::builtin::{self, PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n+use crate::dep_graph::DepGraph;\n+use crate::errors::Applicability;\n+use crate::hir::{self, ParamName};\n+use crate::hir::HirVec;\n+use crate::hir::map::{DefKey, DefPathData, Definitions};\n+use crate::hir::def_id::{DefId, DefIndex, DefIndexAddressSpace, CRATE_DEF_INDEX};\n+use crate::hir::def::{Def, PathResolution, PerNS};\n+use crate::hir::GenericArg;\n+use crate::lint::builtin::{self, PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n                     ELIDED_LIFETIMES_IN_PATHS};\n-use middle::cstore::CrateStore;\n+use crate::middle::cstore::CrateStore;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::thin_vec::ThinVec;\n-use session::Session;\n-use session::config::nightly_options;\n-use util::common::FN_OUTPUT_NAME;\n-use util::nodemap::{DefIdMap, NodeMap};\n+use crate::session::Session;\n+use crate::session::config::nightly_options;\n+use crate::util::common::FN_OUTPUT_NAME;\n+use crate::util::nodemap::{DefIdMap, NodeMap};\n \n use std::collections::{BTreeSet, BTreeMap};\n use std::fmt::Debug;"}, {"sha": "d5fb578d8d4920fc14fa72061446fa2f7a80f61c", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -11,10 +11,10 @@\n //! nested within a uniquely determined `FnLike`), and users can ask\n //! for the `Code` associated with a particular NodeId.\n \n-use hir as ast;\n-use hir::map;\n-use hir::{Expr, FnDecl, Node};\n-use hir::intravisit::FnKind;\n+use crate::hir as ast;\n+use crate::hir::map;\n+use crate::hir::{Expr, FnDecl, Node};\n+use crate::hir::intravisit::FnKind;\n use syntax::ast::{Attribute, Ident, NodeId};\n use syntax_pos::Span;\n "}, {"sha": "f84bb77e29b27fedb57588e121badb256a39b204", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,19 +1,19 @@\n use super::*;\n-use dep_graph::{DepGraph, DepKind, DepNodeIndex};\n-use hir;\n-use hir::def_id::{LOCAL_CRATE, CrateNum};\n-use hir::intravisit::{Visitor, NestedVisitorMap};\n+use crate::dep_graph::{DepGraph, DepKind, DepNodeIndex};\n+use crate::hir;\n+use crate::hir::def_id::{LOCAL_CRATE, CrateNum};\n+use crate::hir::intravisit::{Visitor, NestedVisitorMap};\n use rustc_data_structures::svh::Svh;\n-use ich::Fingerprint;\n-use middle::cstore::CrateStore;\n-use session::CrateDisambiguator;\n-use session::Session;\n+use crate::ich::Fingerprint;\n+use crate::middle::cstore::CrateStore;\n+use crate::session::CrateDisambiguator;\n+use crate::session::Session;\n use std::iter::repeat;\n use syntax::ast::{NodeId, CRATE_NODE_ID};\n use syntax::source_map::SourceMap;\n use syntax_pos::Span;\n \n-use ich::StableHashingContext;\n+use crate::ich::StableHashingContext;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, StableHasherResult};\n \n /// A Visitor that walks over the HIR and collects Nodes into a HIR map\n@@ -253,7 +253,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n                     None => format!(\"{:?}\", node)\n                 };\n \n-                let forgot_str = if hir_id == ::hir::DUMMY_HIR_ID {\n+                let forgot_str = if hir_id == crate::hir::DUMMY_HIR_ID {\n                     format!(\"\\nMaybe you forgot to lower the node id {:?}?\", id)\n                 } else {\n                     String::new()"}, {"sha": "710170674f7611fdac5ada1d962f53c209d7783c", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,6 +1,6 @@\n-use hir::map::definitions::*;\n-use hir::def_id::{CRATE_DEF_INDEX, DefIndex, DefIndexAddressSpace};\n-use session::CrateDisambiguator;\n+use crate::hir::map::definitions::*;\n+use crate::hir::def_id::{CRATE_DEF_INDEX, DefIndex, DefIndexAddressSpace};\n+use crate::session::CrateDisambiguator;\n \n use syntax::ast::*;\n use syntax::ext::hygiene::Mark;\n@@ -10,7 +10,7 @@ use syntax::symbol::Symbol;\n use syntax::parse::token::{self, Token};\n use syntax_pos::Span;\n \n-use hir::map::{ITEM_LIKE_SPACE, REGULAR_SPACE};\n+use crate::hir::map::{ITEM_LIKE_SPACE, REGULAR_SPACE};\n \n /// Creates def ids for nodes in the AST.\n pub struct DefCollector<'a> {"}, {"sha": "a8193e1d34837ec08ba29435a9800908c82e8da2", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -4,23 +4,23 @@\n //! There are also some rather random cases (like const initializer\n //! expressions) that are mostly just leftovers.\n \n-use hir;\n-use hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE, DefIndexAddressSpace,\n+use crate::hir;\n+use crate::hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE, DefIndexAddressSpace,\n                   CRATE_DEF_INDEX};\n-use ich::Fingerprint;\n+use crate::ich::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::{IndexVec};\n use rustc_data_structures::stable_hasher::StableHasher;\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n-use session::CrateDisambiguator;\n+use crate::session::CrateDisambiguator;\n use std::borrow::Borrow;\n use std::fmt::Write;\n use std::hash::Hash;\n use syntax::ast;\n use syntax::ext::hygiene::Mark;\n use syntax::symbol::{Symbol, InternedString};\n use syntax_pos::{Span, DUMMY_SP};\n-use util::nodemap::NodeMap;\n+use crate::util::nodemap::NodeMap;\n \n /// The DefPathTable maps DefIndexes to DefKeys and vice versa.\n /// Internally the DefPathTable holds a tree of DefKeys, where each DefKey"}, {"sha": "2c3ff4c9b5c05bdd48f40518939a47046ea60147", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,7 +1,7 @@\n-use hir::def_id::{DefId, DefIndex, CRATE_DEF_INDEX};\n-use hir::{self, intravisit, HirId, ItemLocalId};\n+use crate::hir::def_id::{DefId, DefIndex, CRATE_DEF_INDEX};\n+use crate::hir::{self, intravisit, HirId, ItemLocalId};\n use syntax::ast::NodeId;\n-use hir::itemlikevisit::ItemLikeVisitor;\n+use crate::hir::itemlikevisit::ItemLikeVisitor;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{Lock, ParallelIterator, par_iter};\n "}, {"sha": "91fc12639baf5edc8c7ed48f1a460ef3a8aa80dc", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -3,11 +3,11 @@ pub use self::def_collector::{DefCollector, MacroInvocationData};\n pub use self::definitions::{Definitions, DefKey, DefPath, DefPathData,\n                             DisambiguatedDefPathData, DefPathHash};\n \n-use dep_graph::{DepGraph, DepNode, DepKind, DepNodeIndex};\n+use crate::dep_graph::{DepGraph, DepNode, DepKind, DepNodeIndex};\n \n-use hir::def_id::{CRATE_DEF_INDEX, DefId, LocalDefId, DefIndexAddressSpace};\n+use crate::hir::def_id::{CRATE_DEF_INDEX, DefId, LocalDefId, DefIndexAddressSpace};\n \n-use middle::cstore::CrateStoreDyn;\n+use crate::middle::cstore::CrateStoreDyn;\n \n use rustc_target::spec::abi::Abi;\n use rustc_data_structures::svh::Svh;\n@@ -17,15 +17,15 @@ use syntax::source_map::Spanned;\n use syntax::ext::base::MacroKind;\n use syntax_pos::{Span, DUMMY_SP};\n \n-use hir::*;\n-use hir::itemlikevisit::ItemLikeVisitor;\n-use hir::print::Nested;\n-use util::nodemap::FxHashMap;\n-use util::common::time;\n+use crate::hir::*;\n+use crate::hir::itemlikevisit::ItemLikeVisitor;\n+use crate::hir::print::Nested;\n+use crate::util::nodemap::FxHashMap;\n+use crate::util::common::time;\n \n use std::io;\n use std::result::Result::Err;\n-use ty::TyCtxt;\n+use crate::ty::TyCtxt;\n \n pub mod blocks;\n mod collector;\n@@ -1212,13 +1212,13 @@ impl Named for StructField { fn name(&self) -> Name { self.ident.name } }\n impl Named for TraitItem { fn name(&self) -> Name { self.ident.name } }\n impl Named for ImplItem { fn name(&self) -> Name { self.ident.name } }\n \n-pub fn map_crate<'hir>(sess: &::session::Session,\n+pub fn map_crate<'hir>(sess: &crate::session::Session,\n                        cstore: &CrateStoreDyn,\n                        forest: &'hir Forest,\n                        definitions: &'hir Definitions)\n                        -> Map<'hir> {\n     let ((map, crate_hash), hir_to_node_id) = join(|| {\n-        let hcx = ::ich::StableHashingContext::new(sess, &forest.krate, definitions, cstore);\n+        let hcx = crate::ich::StableHashingContext::new(sess, &forest.krate, definitions, cstore);\n \n         let mut collector = NodeCollector::root(sess,\n                                                 &forest.krate,\n@@ -1329,7 +1329,7 @@ fn node_id_to_string(map: &Map<'_>, id: NodeId, include_id: bool) -> String {\n     let path_str = || {\n         // This functionality is used for debugging, try to use TyCtxt to get\n         // the user-friendly path, otherwise fall back to stringifying DefPath.\n-        ::ty::tls::with_opt(|tcx| {\n+        crate::ty::tls::with_opt(|tcx| {\n             if let Some(tcx) = tcx {\n                 tcx.node_path_str(id)\n             } else if let Some(path) = map.def_path_from_id(id) {"}, {"sha": "f8fb2b88e2750dd5784937d3f767906236ee33a0", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -10,11 +10,11 @@ pub use self::PrimTy::*;\n pub use self::UnOp::*;\n pub use self::UnsafeSource::*;\n \n-use errors::FatalError;\n-use hir::def::Def;\n-use hir::def_id::{DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX};\n-use util::nodemap::{NodeMap, FxHashSet};\n-use mir::mono::Linkage;\n+use crate::errors::FatalError;\n+use crate::hir::def::Def;\n+use crate::hir::def_id::{DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX};\n+use crate::util::nodemap::{NodeMap, FxHashSet};\n+use crate::mir::mono::Linkage;\n \n use syntax_pos::{Span, DUMMY_SP, symbol::InternedString};\n use syntax::source_map::Spanned;\n@@ -27,8 +27,8 @@ use syntax::ptr::P;\n use syntax::symbol::{Symbol, keywords};\n use syntax::tokenstream::TokenStream;\n use syntax::util::parser::ExprPrecedence;\n-use ty::AdtKind;\n-use ty::query::Providers;\n+use crate::ty::AdtKind;\n+use crate::ty::query::Providers;\n \n use rustc_data_structures::sync::{ParallelIterator, par_iter, Send, Sync, scope};\n use rustc_data_structures::thin_vec::ThinVec;"}, {"sha": "c92cbc9b96c93c8c000fce236e88c4a47236d49a", "filename": "src/librustc/hir/pat_util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fhir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fhir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fpat_util.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,6 +1,6 @@\n-use hir::def::Def;\n-use hir::def_id::DefId;\n-use hir::{self, HirId, PatKind};\n+use crate::hir::def::Def;\n+use crate::hir::def_id::DefId;\n+use crate::hir::{self, HirId, PatKind};\n use syntax::ast;\n use syntax_pos::Span;\n "}, {"sha": "9b6fcf259be14ba49f0373fbc0a5be44db5c6216", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -11,9 +11,9 @@ use syntax::symbol::keywords;\n use syntax::util::parser::{self, AssocOp, Fixity};\n use syntax_pos::{self, BytePos, FileName};\n \n-use hir;\n-use hir::{PatKind, GenericBound, TraitBoundModifier, RangeEnd};\n-use hir::{GenericParam, GenericParamKind, GenericArg};\n+use crate::hir;\n+use crate::hir::{PatKind, GenericBound, TraitBoundModifier, RangeEnd};\n+use crate::hir::{GenericParam, GenericParamKind, GenericArg};\n \n use std::borrow::Cow;\n use std::cell::Cell;\n@@ -2401,7 +2401,7 @@ fn stmt_ends_with_semi(stmt: &hir::StmtKind) -> bool {\n }\n \n fn bin_op_to_assoc_op(op: hir::BinOpKind) -> AssocOp {\n-    use hir::BinOpKind::*;\n+    use crate::hir::BinOpKind::*;\n     match op {\n         Add => AssocOp::Add,\n         Sub => AssocOp::Subtract,"}, {"sha": "e60fdd62debd1f6249e6e1421db5d6d9f66d909a", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,11 +1,11 @@\n-use hir;\n-use hir::def_id::{DefId, DefIndex};\n-use hir::map::DefPathHash;\n-use hir::map::definitions::Definitions;\n-use ich::{self, CachingSourceMapView, Fingerprint};\n-use middle::cstore::CrateStore;\n-use ty::{TyCtxt, fast_reject};\n-use session::Session;\n+use crate::hir;\n+use crate::hir::def_id::{DefId, DefIndex};\n+use crate::hir::map::DefPathHash;\n+use crate::hir::map::definitions::Definitions;\n+use crate::ich::{self, CachingSourceMapView, Fingerprint};\n+use crate::middle::cstore::CrateStore;\n+use crate::ty::{TyCtxt, fast_reject};\n+use crate::session::Session;\n \n use std::cmp::Ord;\n use std::hash as std_hash;\n@@ -218,7 +218,7 @@ impl<'a> StableHashingContextProvider<'a> for StableHashingContext<'a> {\n     }\n }\n \n-impl<'a> ::dep_graph::DepGraphSafe for StableHashingContext<'a> {\n+impl<'a> crate::dep_graph::DepGraphSafe for StableHashingContext<'a> {\n }\n \n "}, {"sha": "17ed1a79d45e0ae293a3248b1b3d750e0995cdb5", "filename": "src/librustc/ich/impls_cstore.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fich%2Fimpls_cstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fich%2Fimpls_cstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_cstore.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,54 +1,52 @@\n //! This module contains `HashStable` implementations for various data types\n //! from rustc::middle::cstore in no particular order.\n \n-use middle;\n-\n-impl_stable_hash_for!(enum middle::cstore::DepKind {\n+impl_stable_hash_for!(enum crate::middle::cstore::DepKind {\n     UnexportedMacrosOnly,\n     MacrosOnly,\n     Implicit,\n     Explicit\n });\n \n-impl_stable_hash_for!(enum middle::cstore::NativeLibraryKind {\n+impl_stable_hash_for!(enum crate::middle::cstore::NativeLibraryKind {\n     NativeStatic,\n     NativeStaticNobundle,\n     NativeFramework,\n     NativeUnknown\n });\n \n-impl_stable_hash_for!(struct middle::cstore::NativeLibrary {\n+impl_stable_hash_for!(struct crate::middle::cstore::NativeLibrary {\n     kind,\n     name,\n     cfg,\n     foreign_module,\n     wasm_import_module\n });\n \n-impl_stable_hash_for!(struct middle::cstore::ForeignModule {\n+impl_stable_hash_for!(struct crate::middle::cstore::ForeignModule {\n     foreign_items,\n     def_id\n });\n \n-impl_stable_hash_for!(enum middle::cstore::LinkagePreference {\n+impl_stable_hash_for!(enum crate::middle::cstore::LinkagePreference {\n     RequireDynamic,\n     RequireStatic\n });\n \n-impl_stable_hash_for!(struct middle::cstore::ExternCrate {\n+impl_stable_hash_for!(struct crate::middle::cstore::ExternCrate {\n     src,\n     span,\n     path_len,\n     direct\n });\n \n-impl_stable_hash_for!(enum middle::cstore::ExternCrateSource {\n+impl_stable_hash_for!(enum crate::middle::cstore::ExternCrateSource {\n     Extern(def_id),\n     Use,\n     Path,\n });\n \n-impl_stable_hash_for!(struct middle::cstore::CrateSource {\n+impl_stable_hash_for!(struct crate::middle::cstore::CrateSource {\n     dylib,\n     rlib,\n     rmeta"}, {"sha": "2b359428b1fa169df978d561481e86a7a52732aa", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,10 +1,10 @@\n //! This module contains `HashStable` implementations for various HIR data\n //! types in no particular order.\n \n-use hir;\n-use hir::map::DefPathHash;\n-use hir::def_id::{DefId, LocalDefId, CrateNum, CRATE_DEF_INDEX};\n-use ich::{StableHashingContext, NodeIdHashingMode, Fingerprint};\n+use crate::hir;\n+use crate::hir::map::DefPathHash;\n+use crate::hir::def_id::{DefId, LocalDefId, CrateNum, CRATE_DEF_INDEX};\n+use crate::ich::{StableHashingContext, NodeIdHashingMode, Fingerprint};\n use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey,\n                                            StableHasher, StableHasherResult};\n use std::mem;\n@@ -619,7 +619,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::MatchSource {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use hir::MatchSource;\n+        use crate::hir::MatchSource;\n \n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match *self {\n@@ -1116,20 +1116,20 @@ impl_stable_hash_for!(struct hir::def::Export {\n     span\n });\n \n-impl_stable_hash_for!(struct ::middle::lib_features::LibFeatures {\n+impl_stable_hash_for!(struct crate::middle::lib_features::LibFeatures {\n     stable,\n     unstable\n });\n \n-impl<'a> HashStable<StableHashingContext<'a>> for ::middle::lang_items::LangItem {\n+impl<'a> HashStable<StableHashingContext<'a>> for crate::middle::lang_items::LangItem {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           _: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n         ::std::hash::Hash::hash(self, hasher);\n     }\n }\n \n-impl_stable_hash_for!(struct ::middle::lang_items::LanguageItems {\n+impl_stable_hash_for!(struct crate::middle::lang_items::LanguageItems {\n     items,\n     missing\n });"}, {"sha": "51fc78ffc866999844ffae550ed852d3d3de437d", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,8 +1,8 @@\n //! This module contains `HashStable` implementations for various MIR data\n //! types in no particular order.\n \n-use ich::StableHashingContext;\n-use mir;\n+use crate::ich::StableHashingContext;\n+use crate::mir;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n                                            StableHasherResult};\n use std::mem;"}, {"sha": "8a388fafce5e8201717ca6262683abdb7dcc3f3d", "filename": "src/librustc/ich/impls_misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fich%2Fimpls_misc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fich%2Fimpls_misc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_misc.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,7 +1,7 @@\n //! This module contains `HashStable` implementations for various data types\n //! that don't fit into any of the other impls_xxx modules.\n \n-impl_stable_hash_for!(enum ::session::search_paths::PathKind {\n+impl_stable_hash_for!(enum crate::session::search_paths::PathKind {\n     Native,\n     Crate,\n     Dependency,"}, {"sha": "f34423ccca655b065b3fe1a3eb706106646ed355", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,7 +1,7 @@\n //! This module contains `HashStable` implementations for various data types\n //! from libsyntax in no particular order.\n \n-use ich::StableHashingContext;\n+use crate::ich::StableHashingContext;\n \n use std::hash as std_hash;\n use std::mem;\n@@ -13,7 +13,7 @@ use syntax::symbol::{InternedString, LocalInternedString};\n use syntax::tokenstream;\n use syntax_pos::SourceFile;\n \n-use hir::def_id::{DefId, CrateNum, CRATE_DEF_INDEX};\n+use crate::hir::def_id::{DefId, CrateNum, CRATE_DEF_INDEX};\n \n use smallvec::SmallVec;\n use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey,"}, {"sha": "1e1dbd0b621ec2fbd303de733a5401227ed7a887", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,18 +1,18 @@\n //! This module contains `HashStable` implementations for various data types\n //! from rustc::ty in no particular order.\n \n-use ich::{Fingerprint, StableHashingContext, NodeIdHashingMode};\n+use crate::ich::{Fingerprint, StableHashingContext, NodeIdHashingMode};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey,\n                                            StableHasher, StableHasherResult};\n use std::cell::RefCell;\n use std::hash as std_hash;\n use std::mem;\n-use middle::region;\n-use infer;\n-use traits;\n-use ty;\n-use mir;\n+use crate::middle::region;\n+use crate::infer;\n+use crate::traits;\n+use crate::ty;\n+use crate::mir;\n \n impl<'a, 'gcx, T> HashStable<StableHashingContext<'a>>\n for &'gcx ty::List<T>\n@@ -306,7 +306,7 @@ impl_stable_hash_for!(\n         ByRef(id, alloc, offset),\n     }\n );\n-impl_stable_hash_for!(struct ::mir::interpret::RawConst<'tcx> {\n+impl_stable_hash_for!(struct crate::mir::interpret::RawConst<'tcx> {\n     alloc_id,\n     ty,\n });\n@@ -512,20 +512,22 @@ impl_stable_hash_for!(enum ty::GenericParamDefKind {\n });\n \n impl_stable_hash_for!(\n-    impl<T> for enum ::middle::resolve_lifetime::Set1<T> [ ::middle::resolve_lifetime::Set1 ] {\n+    impl<T> for enum crate::middle::resolve_lifetime::Set1<T>\n+        [ crate::middle::resolve_lifetime::Set1 ]\n+    {\n         Empty,\n         Many,\n         One(value),\n     }\n );\n \n-impl_stable_hash_for!(enum ::middle::resolve_lifetime::LifetimeDefOrigin {\n+impl_stable_hash_for!(enum crate::middle::resolve_lifetime::LifetimeDefOrigin {\n     ExplicitOrElided,\n     InBand,\n     Error,\n });\n \n-impl_stable_hash_for!(enum ::middle::resolve_lifetime::Region {\n+impl_stable_hash_for!(enum crate::middle::resolve_lifetime::Region {\n     Static,\n     EarlyBound(index, decl, is_in_band),\n     LateBound(db_index, decl, is_in_band),\n@@ -547,9 +549,9 @@ impl_stable_hash_for!(enum ty::cast::CastKind {\n     FnPtrAddrCast\n });\n \n-impl_stable_hash_for!(struct ::middle::region::Scope { id, data });\n+impl_stable_hash_for!(struct crate::middle::region::Scope { id, data });\n \n-impl_stable_hash_for!(enum ::middle::region::ScopeData {\n+impl_stable_hash_for!(enum crate::middle::region::ScopeData {\n     Node,\n     CallSite,\n     Arguments,\n@@ -588,7 +590,7 @@ for ty::TyKind<'gcx>\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use ty::TyKind::*;\n+        use crate::ty::TyKind::*;\n \n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match *self {\n@@ -882,20 +884,20 @@ impl_stable_hash_for!(enum traits::Reveal {\n     All\n });\n \n-impl_stable_hash_for!(enum ::middle::privacy::AccessLevel {\n+impl_stable_hash_for!(enum crate::middle::privacy::AccessLevel {\n     ReachableFromImplTrait,\n     Reachable,\n     Exported,\n     Public\n });\n \n impl<'a> HashStable<StableHashingContext<'a>>\n-for ::middle::privacy::AccessLevels {\n+for crate::middle::privacy::AccessLevels {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n         hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n-            let ::middle::privacy::AccessLevels {\n+            let crate::middle::privacy::AccessLevels {\n                 ref map\n             } = *self;\n \n@@ -908,14 +910,14 @@ impl_stable_hash_for!(struct ty::CrateInherentImpls {\n     inherent_impls\n });\n \n-impl_stable_hash_for!(enum ::session::CompileIncomplete {\n+impl_stable_hash_for!(enum crate::session::CompileIncomplete {\n     Stopped,\n     Errored(error_reported)\n });\n \n-impl_stable_hash_for!(struct ::util::common::ErrorReported {});\n+impl_stable_hash_for!(struct crate::util::common::ErrorReported {});\n \n-impl_stable_hash_for!(tuple_struct ::middle::reachable::ReachableSet {\n+impl_stable_hash_for!(tuple_struct crate::middle::reachable::ReachableSet {\n     reachable_set\n });\n \n@@ -924,7 +926,7 @@ for traits::Vtable<'gcx, N> where N: HashStable<StableHashingContext<'a>> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use traits::Vtable::*;\n+        use crate::traits::Vtable::*;\n \n         mem::discriminant(self).hash_stable(hcx, hasher);\n \n@@ -1105,7 +1107,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for traits::WhereClause<'tcx\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use traits::WhereClause::*;\n+        use crate::traits::WhereClause::*;\n \n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match self {\n@@ -1121,7 +1123,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for traits::WellFormed<'tcx>\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use traits::WellFormed::*;\n+        use crate::traits::WellFormed::*;\n \n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match self {\n@@ -1135,7 +1137,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for traits::FromEnv<'tcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use traits::FromEnv::*;\n+        use crate::traits::FromEnv::*;\n \n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match self {\n@@ -1149,7 +1151,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for traits::DomainGoal<'tcx>\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use traits::DomainGoal::*;\n+        use crate::traits::DomainGoal::*;\n \n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match self {\n@@ -1165,7 +1167,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for traits::Goal<'tcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use traits::GoalKind::*;\n+        use crate::traits::GoalKind::*;\n \n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match self {\n@@ -1208,7 +1210,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for traits::Clause<'tcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use traits::Clause::*;\n+        use crate::traits::Clause::*;\n \n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match self {"}, {"sha": "7b2b1184a633673aea7d4a9fa6af40addf5ba52b", "filename": "src/librustc/infer/at.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fat.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -27,7 +27,7 @@\n \n use super::*;\n \n-use ty::relate::{Relate, TypeRelation};\n+use crate::ty::relate::{Relate, TypeRelation};\n \n pub struct At<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     pub infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,"}, {"sha": "4e1c797a2c72a9de2fbb7b8879bb4c6625aea86a", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -5,15 +5,15 @@\n //!\n //! [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html\n \n-use infer::canonical::{\n+use crate::infer::canonical::{\n     Canonical, CanonicalTyVarKind, CanonicalVarInfo, CanonicalVarKind, Canonicalized,\n     OriginalQueryValues,\n };\n-use infer::InferCtxt;\n+use crate::infer::InferCtxt;\n use std::sync::atomic::Ordering;\n-use ty::fold::{TypeFoldable, TypeFolder};\n-use ty::subst::Kind;\n-use ty::{self, BoundVar, Lift, List, Ty, TyCtxt, TypeFlags};\n+use crate::ty::fold::{TypeFoldable, TypeFolder};\n+use crate::ty::subst::Kind;\n+use crate::ty::{self, BoundVar, Lift, List, Ty, TyCtxt, TypeFlags};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;"}, {"sha": "6f28c0b131f6130bd21e9b8886f31c151354796d", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -21,16 +21,16 @@\n //!\n //! [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html\n \n-use infer::{InferCtxt, RegionVariableOrigin, TypeVariableOrigin};\n+use crate::infer::{InferCtxt, RegionVariableOrigin, TypeVariableOrigin};\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::sync::Lrc;\n use serialize::UseSpecializedDecodable;\n use smallvec::SmallVec;\n use std::ops::Index;\n use syntax::source_map::Span;\n-use ty::fold::TypeFoldable;\n-use ty::subst::Kind;\n-use ty::{self, BoundVar, Lift, List, Region, TyCtxt};\n+use crate::ty::fold::TypeFoldable;\n+use crate::ty::subst::Kind;\n+use crate::ty::{self, BoundVar, Lift, List, Region, TyCtxt};\n \n mod canonicalizer;\n \n@@ -393,14 +393,14 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n }\n \n CloneTypeFoldableAndLiftImpls! {\n-    ::infer::canonical::Certainty,\n-    ::infer::canonical::CanonicalVarInfo,\n-    ::infer::canonical::CanonicalVarKind,\n+    crate::infer::canonical::Certainty,\n+    crate::infer::canonical::CanonicalVarInfo,\n+    crate::infer::canonical::CanonicalVarKind,\n }\n \n CloneTypeFoldableImpls! {\n     for <'tcx> {\n-        ::infer::canonical::CanonicalVarInfos<'tcx>,\n+        crate::infer::canonical::CanonicalVarInfos<'tcx>,\n     }\n }\n \n@@ -431,7 +431,7 @@ impl<'tcx> CanonicalVarValues<'tcx> {\n     /// we'll return a substitution `subst` with:\n     /// `subst.var_values == [Type(^0), Lifetime(^1), Type(^2)]`.\n     pub fn make_identity<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Self {\n-        use ty::subst::UnpackedKind;\n+        use crate::ty::subst::UnpackedKind;\n \n         CanonicalVarValues {\n             var_values: self.var_values.iter()"}, {"sha": "409afca43203dbd532172b495340412acf284093", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -7,26 +7,26 @@\n //!\n //! [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html\n \n-use infer::canonical::substitute::substitute_value;\n-use infer::canonical::{\n+use crate::infer::canonical::substitute::substitute_value;\n+use crate::infer::canonical::{\n     Canonical, CanonicalVarValues, CanonicalizedQueryResponse, Certainty,\n     OriginalQueryValues, QueryRegionConstraint, QueryResponse,\n };\n-use infer::region_constraints::{Constraint, RegionConstraintData};\n-use infer::InferCtxtBuilder;\n-use infer::{InferCtxt, InferOk, InferResult};\n+use crate::infer::region_constraints::{Constraint, RegionConstraintData};\n+use crate::infer::InferCtxtBuilder;\n+use crate::infer::{InferCtxt, InferOk, InferResult};\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::sync::Lrc;\n use std::fmt::Debug;\n use syntax_pos::DUMMY_SP;\n-use traits::query::{Fallible, NoSolution};\n-use traits::TraitEngine;\n-use traits::{Obligation, ObligationCause, PredicateObligation};\n-use ty::fold::TypeFoldable;\n-use ty::subst::{Kind, UnpackedKind};\n-use ty::{self, BoundVar, Lift, Ty, TyCtxt};\n-use util::captures::Captures;\n+use crate::traits::query::{Fallible, NoSolution};\n+use crate::traits::TraitEngine;\n+use crate::traits::{Obligation, ObligationCause, PredicateObligation};\n+use crate::ty::fold::TypeFoldable;\n+use crate::ty::subst::{Kind, UnpackedKind};\n+use crate::ty::{self, BoundVar, Lift, Ty, TyCtxt};\n+use crate::util::captures::Captures;\n \n impl<'cx, 'gcx, 'tcx> InferCtxtBuilder<'cx, 'gcx, 'tcx> {\n     /// The \"main method\" for a canonicalized trait query. Given the"}, {"sha": "5af4e8366818bfee581c52356dba8c459462dd2e", "filename": "src/librustc/infer/canonical/substitute.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -6,10 +6,10 @@\n //!\n //! [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html\n \n-use infer::canonical::{Canonical, CanonicalVarValues};\n-use ty::fold::TypeFoldable;\n-use ty::subst::UnpackedKind;\n-use ty::{self, TyCtxt};\n+use crate::infer::canonical::{Canonical, CanonicalVarValues};\n+use crate::ty::fold::TypeFoldable;\n+use crate::ty::subst::UnpackedKind;\n+use crate::ty::{self, TyCtxt};\n \n impl<'tcx, V> Canonical<'tcx, V> {\n     /// Instantiate the wrapped value, replacing each canonical value"}, {"sha": "7e22521473491029985f06b28454e4eadfbc3f79", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -29,13 +29,13 @@ use super::lub::Lub;\n use super::sub::Sub;\n use super::type_variable::TypeVariableValue;\n \n-use hir::def_id::DefId;\n-use ty::{IntType, UintType};\n-use ty::{self, Ty, TyCtxt};\n-use ty::error::TypeError;\n-use ty::relate::{self, Relate, RelateResult, TypeRelation};\n-use ty::subst::Substs;\n-use traits::{Obligation, PredicateObligations};\n+use crate::hir::def_id::DefId;\n+use crate::ty::{IntType, UintType};\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::error::TypeError;\n+use crate::ty::relate::{self, Relate, RelateResult, TypeRelation};\n+use crate::ty::subst::Substs;\n+use crate::traits::{Obligation, PredicateObligations};\n \n use syntax::ast;\n use syntax_pos::Span;"}, {"sha": "a4b62307a60b861a39b455a43935fe433d137c17", "filename": "src/librustc/infer/equate.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fequate.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,12 +1,12 @@\n use super::combine::{CombineFields, RelationDir};\n use super::{Subtype};\n \n-use hir::def_id::DefId;\n+use crate::hir::def_id::DefId;\n \n-use ty::{self, Ty, TyCtxt};\n-use ty::TyVar;\n-use ty::subst::Substs;\n-use ty::relate::{self, Relate, RelateResult, TypeRelation};\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::TyVar;\n+use crate::ty::subst::Substs;\n+use crate::ty::relate::{self, Relate, RelateResult, TypeRelation};\n \n /// Ensures `a` is made equal to `b`. Returns `a` on success.\n pub struct Equate<'combine, 'infcx: 'combine, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {"}, {"sha": "8510533391287a732d1028080efd64dd04200037", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -48,19 +48,19 @@\n use super::lexical_region_resolve::RegionResolutionError;\n use super::region_constraints::GenericKind;\n use super::{InferCtxt, RegionVariableOrigin, SubregionOrigin, TypeTrace, ValuePairs};\n-use infer::{self, SuppressRegionErrors};\n+use crate::infer::{self, SuppressRegionErrors};\n \n-use errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n-use hir;\n-use hir::def_id::DefId;\n-use hir::Node;\n-use middle::region;\n+use crate::errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n+use crate::hir;\n+use crate::hir::def_id::DefId;\n+use crate::hir::Node;\n+use crate::middle::region;\n use std::{cmp, fmt};\n use syntax::ast::DUMMY_NODE_ID;\n use syntax_pos::{Pos, Span};\n-use traits::{ObligationCause, ObligationCauseCode};\n-use ty::error::TypeError;\n-use ty::{self, subst::Subst, Region, Ty, TyCtxt, TyKind, TypeFoldable};\n+use crate::traits::{ObligationCause, ObligationCauseCode};\n+use crate::ty::error::TypeError;\n+use crate::ty::{self, subst::Subst, Region, Ty, TyCtxt, TyKind, TypeFoldable};\n \n mod note;\n \n@@ -1479,7 +1479,7 @@ enum FailureCode {\n impl<'tcx> ObligationCause<'tcx> {\n     fn as_failure_code(&self, terr: &TypeError<'tcx>) -> FailureCode {\n         use self::FailureCode::*;\n-        use traits::ObligationCauseCode::*;\n+        use crate::traits::ObligationCauseCode::*;\n         match self.code {\n             CompareImplMethodObligation { .. } => Error0308(\"method not compatible with trait\"),\n             MatchExpressionArm { source, .. } => Error0308(match source {\n@@ -1509,7 +1509,7 @@ impl<'tcx> ObligationCause<'tcx> {\n     }\n \n     fn as_requirement_str(&self) -> &'static str {\n-        use traits::ObligationCauseCode::*;\n+        use crate::traits::ObligationCauseCode::*;\n         match self.code {\n             CompareImplMethodObligation { .. } => \"method type is compatible with trait\",\n             ExprAssignable => \"expression is assignable\","}, {"sha": "fac498bd6dd78e7104d793ddf7b9f8fd9fef0bf5", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,11 +1,11 @@\n-use hir::{self, Local, Pat, Body, HirId};\n-use hir::intravisit::{self, Visitor, NestedVisitorMap};\n-use infer::InferCtxt;\n-use infer::type_variable::TypeVariableOrigin;\n-use ty::{self, Ty, Infer, TyVar};\n+use crate::hir::{self, Local, Pat, Body, HirId};\n+use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n+use crate::infer::InferCtxt;\n+use crate::infer::type_variable::TypeVariableOrigin;\n+use crate::ty::{self, Ty, Infer, TyVar};\n use syntax::source_map::CompilerDesugaringKind;\n use syntax_pos::Span;\n-use errors::DiagnosticBuilder;\n+use crate::errors::DiagnosticBuilder;\n \n struct FindLocalByTypeVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,"}, {"sha": "0f4401517792c15de3a6037aa463fa8959ae022e", "filename": "src/librustc/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,9 +1,9 @@\n //! Error Reporting for Anonymous Region Lifetime Errors\n //! where both the regions are anonymous.\n \n-use infer::error_reporting::nice_region_error::NiceRegionError;\n-use infer::error_reporting::nice_region_error::util::AnonymousArgInfo;\n-use util::common::ErrorReported;\n+use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n+use crate::infer::error_reporting::nice_region_error::util::AnonymousArgInfo;\n+use crate::util::common::ErrorReported;\n \n impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n     /// Print the error message for lifetime errors when both the concerned regions are anonymous."}, {"sha": "ea748874fc4e20a13e657fa68a0499119e5e22d1", "filename": "src/librustc/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,9 +1,9 @@\n-use hir;\n-use ty::{self, Region, TyCtxt};\n-use hir::Node;\n-use middle::resolve_lifetime as rl;\n-use hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use infer::error_reporting::nice_region_error::NiceRegionError;\n+use crate::hir;\n+use crate::ty::{self, Region, TyCtxt};\n+use crate::hir::Node;\n+use crate::middle::resolve_lifetime as rl;\n+use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n \n impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n     /// This function calls the `visit_ty` method for the parameters"}, {"sha": "dad1e3ba80da340ddf27a1fa634270f0c2a7dd3c", "filename": "src/librustc/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,9 +1,9 @@\n-use infer::InferCtxt;\n-use infer::lexical_region_resolve::RegionResolutionError;\n-use infer::lexical_region_resolve::RegionResolutionError::*;\n+use crate::infer::InferCtxt;\n+use crate::infer::lexical_region_resolve::RegionResolutionError;\n+use crate::infer::lexical_region_resolve::RegionResolutionError::*;\n use syntax::source_map::Span;\n-use ty::{self, TyCtxt};\n-use util::common::ErrorReported;\n+use crate::ty::{self, TyCtxt};\n+use crate::util::common::ErrorReported;\n \n mod different_lifetimes;\n mod find_anon_type;"}, {"sha": "d66bb274b34cef2b0d328724b2e494106c555571", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,9 +1,9 @@\n //! Error Reporting for Anonymous Region Lifetime Errors\n //! where one region is named and the other is anonymous.\n-use infer::error_reporting::nice_region_error::NiceRegionError;\n-use ty;\n-use util::common::ErrorReported;\n-use errors::Applicability;\n+use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n+use crate::ty;\n+use crate::util::common::ErrorReported;\n+use crate::errors::Applicability;\n \n impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n     /// When given a `ConcreteFailure` for a function with arguments containing a named region and"}, {"sha": "6432780de067032603fc247c36d942345e7c3089", "filename": "src/librustc/infer/error_reporting/nice_region_error/outlives_closure.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,13 +1,13 @@\n //! Error Reporting for Anonymous Region Lifetime Errors\n //! where both the regions are anonymous.\n \n-use infer::error_reporting::nice_region_error::NiceRegionError;\n-use infer::SubregionOrigin;\n-use ty::RegionKind;\n-use hir::{Expr, ExprKind::Closure};\n-use hir::Node;\n-use util::common::ErrorReported;\n-use infer::lexical_region_resolve::RegionResolutionError::SubSupConflict;\n+use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n+use crate::infer::SubregionOrigin;\n+use crate::ty::RegionKind;\n+use crate::hir::{Expr, ExprKind::Closure};\n+use crate::hir::Node;\n+use crate::util::common::ErrorReported;\n+use crate::infer::lexical_region_resolve::RegionResolutionError::SubSupConflict;\n \n impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n     /// Print the error message for lifetime errors when binding escapes a closure."}, {"sha": "6893a1fb168b8bc8cfd4f2d468bc7e86be1b7b5e", "filename": "src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,15 +1,15 @@\n-use errors::DiagnosticBuilder;\n-use hir::def_id::DefId;\n-use infer::error_reporting::nice_region_error::NiceRegionError;\n-use infer::lexical_region_resolve::RegionResolutionError;\n-use infer::ValuePairs;\n-use infer::{SubregionOrigin, TypeTrace};\n-use traits::{ObligationCause, ObligationCauseCode};\n-use ty;\n-use ty::error::ExpectedFound;\n-use ty::subst::Substs;\n-use util::common::ErrorReported;\n-use util::ppaux::RegionHighlightMode;\n+use crate::errors::DiagnosticBuilder;\n+use crate::hir::def_id::DefId;\n+use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n+use crate::infer::lexical_region_resolve::RegionResolutionError;\n+use crate::infer::ValuePairs;\n+use crate::infer::{SubregionOrigin, TypeTrace};\n+use crate::traits::{ObligationCause, ObligationCauseCode};\n+use crate::ty;\n+use crate::ty::error::ExpectedFound;\n+use crate::ty::subst::Substs;\n+use crate::util::common::ErrorReported;\n+use crate::util::ppaux::RegionHighlightMode;\n \n impl NiceRegionError<'me, 'gcx, 'tcx> {\n     /// When given a `ConcreteFailure` for a function with arguments containing a named region and"}, {"sha": "3f0297952278a104bd8639b717b3d084495864ac", "filename": "src/librustc/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,10 +1,10 @@\n //! Error Reporting for static impl Traits.\n \n-use infer::error_reporting::nice_region_error::NiceRegionError;\n-use infer::lexical_region_resolve::RegionResolutionError;\n-use ty::{BoundRegion, FreeRegion, RegionKind};\n-use util::common::ErrorReported;\n-use errors::Applicability;\n+use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n+use crate::infer::lexical_region_resolve::RegionResolutionError;\n+use crate::ty::{BoundRegion, FreeRegion, RegionKind};\n+use crate::util::common::ErrorReported;\n+use crate::errors::Applicability;\n \n impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n     /// Print the error message for lifetime errors when the return type is a static impl Trait."}, {"sha": "f73f8d8bb82be1b546ba8b53bc0418205c82c867", "filename": "src/librustc/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,10 +1,10 @@\n //! Helper functions corresponding to lifetime errors due to\n //! anonymous regions.\n \n-use hir;\n-use infer::error_reporting::nice_region_error::NiceRegionError;\n-use ty::{self, Region, Ty};\n-use hir::def_id::DefId;\n+use crate::hir;\n+use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n+use crate::ty::{self, Region, Ty};\n+use crate::hir::def_id::DefId;\n use syntax_pos::Span;\n \n // The struct contains the information about the anonymous region"}, {"sha": "efd7f3c55e900eff38501715800474feab253cc2", "filename": "src/librustc/infer/error_reporting/note.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,8 +1,8 @@\n-use infer::{self, InferCtxt, SubregionOrigin};\n-use middle::region;\n-use ty::{self, Region};\n-use ty::error::TypeError;\n-use errors::DiagnosticBuilder;\n+use crate::infer::{self, InferCtxt, SubregionOrigin};\n+use crate::middle::region;\n+use crate::ty::{self, Region};\n+use crate::ty::error::TypeError;\n+use crate::errors::DiagnosticBuilder;\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub(super) fn note_region_origin(&self,"}, {"sha": "201717b34ee41abfb18b89a5854c2e6925b26d69", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -31,9 +31,9 @@\n //! variable only once, and it does so as soon as it can, so it is reasonable to ask what the type\n //! inferencer knows \"so far\".\n \n-use ty::{self, Ty, TyCtxt, TypeFoldable};\n-use ty::fold::TypeFolder;\n-use util::nodemap::FxHashMap;\n+use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::fold::TypeFolder;\n+use crate::util::nodemap::FxHashMap;\n \n use std::collections::hash_map::Entry;\n "}, {"sha": "d205cfcf73b7eafca9604dde306ee4aa0dc86203", "filename": "src/librustc/infer/fudge.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffudge.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,6 +1,6 @@\n-use infer::type_variable::TypeVariableMap;\n-use ty::{self, Ty, TyCtxt};\n-use ty::fold::{TypeFoldable, TypeFolder};\n+use crate::infer::type_variable::TypeVariableMap;\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::fold::{TypeFoldable, TypeFolder};\n \n use super::InferCtxt;\n use super::RegionVariableOrigin;"}, {"sha": "910c6571853dc078580721c9068b19672b41b876", "filename": "src/librustc/infer/glb.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fglb.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -3,9 +3,9 @@ use super::InferCtxt;\n use super::lattice::{self, LatticeDir};\n use super::Subtype;\n \n-use traits::ObligationCause;\n-use ty::{self, Ty, TyCtxt};\n-use ty::relate::{Relate, RelateResult, TypeRelation};\n+use crate::traits::ObligationCause;\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::relate::{Relate, RelateResult, TypeRelation};\n \n /// \"Greatest lower bound\" (common subtype)\n pub struct Glb<'combine, 'infcx: 'combine, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {"}, {"sha": "c7fc446b9787b11ae2ad8797ab8ee1b0c4fad4b2", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -4,8 +4,8 @@\n use super::combine::CombineFields;\n use super::{HigherRankedType, InferCtxt, PlaceholderMap};\n \n-use ty::relate::{Relate, RelateResult, TypeRelation};\n-use ty::{self, Binder, TypeFoldable};\n+use crate::ty::relate::{Relate, RelateResult, TypeRelation};\n+use crate::ty::{self, Binder, TypeFoldable};\n \n impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n     pub fn higher_ranked_sub<T>("}, {"sha": "dfa086a64de61e01baae0b6217676760d732efcb", "filename": "src/librustc/infer/lattice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flattice.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -22,10 +22,10 @@\n use super::InferCtxt;\n use super::type_variable::TypeVariableOrigin;\n \n-use traits::ObligationCause;\n-use ty::TyVar;\n-use ty::{self, Ty};\n-use ty::relate::{RelateResult, TypeRelation};\n+use crate::traits::ObligationCause;\n+use crate::ty::TyVar;\n+use crate::ty::{self, Ty};\n+use crate::ty::relate::{RelateResult, TypeRelation};\n \n pub trait LatticeDir<'f, 'gcx: 'f+'tcx, 'tcx: 'f> : TypeRelation<'f, 'gcx, 'tcx> {\n     fn infcx(&self) -> &'f InferCtxt<'f, 'gcx, 'tcx>;"}, {"sha": "073a3f74422c6ff2bdf82ca62f0e3fe2f7b4ecc6", "filename": "src/librustc/infer/lexical_region_resolve/graphviz.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -8,14 +8,14 @@\n /// For clarity, rename the graphviz crate locally to dot.\n use graphviz as dot;\n \n-use hir::def_id::DefIndex;\n-use ty;\n-use middle::free_region::RegionRelations;\n-use middle::region;\n+use crate::hir::def_id::DefIndex;\n+use crate::ty;\n+use crate::middle::free_region::RegionRelations;\n+use crate::middle::region;\n use super::Constraint;\n-use infer::SubregionOrigin;\n-use infer::region_constraints::RegionConstraintData;\n-use util::nodemap::{FxHashMap, FxHashSet};\n+use crate::infer::SubregionOrigin;\n+use crate::infer::region_constraints::RegionConstraintData;\n+use crate::util::nodemap::{FxHashMap, FxHashSet};\n \n use std::borrow::Cow;\n use std::collections::hash_map::Entry::Vacant;"}, {"sha": "7add8a26ede09075a55593ec74a7ac486bb34435", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,13 +1,13 @@\n //! The code to do lexical region resolution.\n \n-use infer::region_constraints::Constraint;\n-use infer::region_constraints::GenericKind;\n-use infer::region_constraints::RegionConstraintData;\n-use infer::region_constraints::VarInfos;\n-use infer::region_constraints::VerifyBound;\n-use infer::RegionVariableOrigin;\n-use infer::SubregionOrigin;\n-use middle::free_region::RegionRelations;\n+use crate::infer::region_constraints::Constraint;\n+use crate::infer::region_constraints::GenericKind;\n+use crate::infer::region_constraints::RegionConstraintData;\n+use crate::infer::region_constraints::VarInfos;\n+use crate::infer::region_constraints::VerifyBound;\n+use crate::infer::RegionVariableOrigin;\n+use crate::infer::SubregionOrigin;\n+use crate::middle::free_region::RegionRelations;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::graph::implementation::{\n     Direction, Graph, NodeIndex, INCOMING, OUTGOING,\n@@ -16,11 +16,11 @@ use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use smallvec::SmallVec;\n use std::fmt;\n use std::u32;\n-use ty::fold::TypeFoldable;\n-use ty::{self, Ty, TyCtxt};\n-use ty::{ReEarlyBound, ReEmpty, ReErased, ReFree, ReStatic};\n-use ty::{ReLateBound, ReScope, RePlaceholder, ReVar};\n-use ty::{Region, RegionVid};\n+use crate::ty::fold::TypeFoldable;\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::{ReEarlyBound, ReEmpty, ReErased, ReFree, ReStatic};\n+use crate::ty::{ReLateBound, ReScope, RePlaceholder, ReVar};\n+use crate::ty::{Region, RegionVid};\n \n mod graphviz;\n "}, {"sha": "f9eb60d82d17b5c38d6aa61e5514dc4f8c0b65a7", "filename": "src/librustc/infer/lub.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flub.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -3,9 +3,9 @@ use super::InferCtxt;\n use super::lattice::{self, LatticeDir};\n use super::Subtype;\n \n-use traits::ObligationCause;\n-use ty::{self, Ty, TyCtxt};\n-use ty::relate::{Relate, RelateResult, TypeRelation};\n+use crate::traits::ObligationCause;\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::relate::{Relate, RelateResult, TypeRelation};\n \n /// \"Least upper bound\" (common supertype)\n pub struct Lub<'combine, 'infcx: 'combine, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {"}, {"sha": "06c94d133344c662ca4407b22d191e7460bc618f", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -5,31 +5,31 @@ pub use self::LateBoundRegionConversionTime::*;\n pub use self::RegionVariableOrigin::*;\n pub use self::SubregionOrigin::*;\n pub use self::ValuePairs::*;\n-pub use ty::IntVarValue;\n+pub use crate::ty::IntVarValue;\n \n use arena::SyncDroplessArena;\n-use errors::DiagnosticBuilder;\n-use hir::def_id::DefId;\n-use infer::canonical::{Canonical, CanonicalVarValues};\n-use middle::free_region::RegionRelations;\n-use middle::lang_items;\n-use middle::region;\n+use crate::errors::DiagnosticBuilder;\n+use crate::hir::def_id::DefId;\n+use crate::infer::canonical::{Canonical, CanonicalVarValues};\n+use crate::middle::free_region::RegionRelations;\n+use crate::middle::lang_items;\n+use crate::middle::region;\n use rustc_data_structures::unify as ut;\n-use session::config::BorrowckMode;\n+use crate::session::config::BorrowckMode;\n use std::cell::{Cell, Ref, RefCell, RefMut};\n use std::collections::BTreeMap;\n use std::fmt;\n use syntax::ast;\n use syntax_pos::symbol::InternedString;\n use syntax_pos::{self, Span};\n-use traits::{self, ObligationCause, PredicateObligations, TraitEngine};\n-use ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n-use ty::fold::TypeFoldable;\n-use ty::relate::RelateResult;\n-use ty::subst::{Kind, Substs};\n-use ty::{self, GenericParamDefKind, Ty, TyCtxt, CtxtInterners};\n-use ty::{FloatVid, IntVid, TyVid};\n-use util::nodemap::FxHashMap;\n+use crate::traits::{self, ObligationCause, PredicateObligations, TraitEngine};\n+use crate::ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n+use crate::ty::fold::TypeFoldable;\n+use crate::ty::relate::RelateResult;\n+use crate::ty::subst::{Kind, Substs};\n+use crate::ty::{self, GenericParamDefKind, Ty, TyCtxt, CtxtInterners};\n+use crate::ty::{FloatVid, IntVid, TyVid};\n+use crate::util::nodemap::FxHashMap;\n \n use self::combine::CombineFields;\n use self::lexical_region_resolve::LexicalRegionResolutions;\n@@ -617,8 +617,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn type_is_unconstrained_numeric(&'a self, ty: Ty<'_>) -> UnconstrainedNumeric {\n-        use ty::error::UnconstrainedNumeric::Neither;\n-        use ty::error::UnconstrainedNumeric::{UnconstrainedFloat, UnconstrainedInt};\n+        use crate::ty::error::UnconstrainedNumeric::Neither;\n+        use crate::ty::error::UnconstrainedNumeric::{UnconstrainedFloat, UnconstrainedInt};\n         match ty.sty {\n             ty::Infer(ty::IntVar(vid)) => {\n                 if self.int_unification_table"}, {"sha": "e28157f05f15f7cb22a23457b5334ab73b0d884b", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,16 +1,16 @@\n-use hir::def_id::DefId;\n-use hir;\n-use hir::Node;\n-use infer::{self, InferCtxt, InferOk, TypeVariableOrigin};\n-use infer::outlives::free_region_map::FreeRegionRelations;\n+use crate::hir::def_id::DefId;\n+use crate::hir;\n+use crate::hir::Node;\n+use crate::infer::{self, InferCtxt, InferOk, TypeVariableOrigin};\n+use crate::infer::outlives::free_region_map::FreeRegionRelations;\n use rustc_data_structures::fx::FxHashMap;\n use syntax::ast;\n-use traits::{self, PredicateObligation};\n-use ty::{self, Ty, TyCtxt, GenericParamDefKind};\n-use ty::fold::{BottomUpFolder, TypeFoldable, TypeFolder};\n-use ty::outlives::Component;\n-use ty::subst::{Kind, Substs, UnpackedKind};\n-use util::nodemap::DefIdMap;\n+use crate::traits::{self, PredicateObligation};\n+use crate::ty::{self, Ty, TyCtxt, GenericParamDefKind};\n+use crate::ty::fold::{BottomUpFolder, TypeFoldable, TypeFolder};\n+use crate::ty::outlives::Component;\n+use crate::ty::subst::{Kind, Substs, UnpackedKind};\n+use crate::util::nodemap::DefIdMap;\n \n pub type OpaqueTypeMap<'tcx> = DefIdMap<OpaqueTypeDecl<'tcx>>;\n "}, {"sha": "20d03f3c6edb57e7c5d2808b461461fba2e17449", "filename": "src/librustc/infer/outlives/env.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,10 +1,10 @@\n-use infer::outlives::free_region_map::FreeRegionMap;\n-use infer::{GenericKind, InferCtxt};\n+use crate::infer::outlives::free_region_map::FreeRegionMap;\n+use crate::infer::{GenericKind, InferCtxt};\n use rustc_data_structures::fx::FxHashMap;\n use syntax::ast;\n use syntax_pos::Span;\n-use traits::query::outlives_bounds::{self, OutlivesBound};\n-use ty::{self, Ty};\n+use crate::traits::query::outlives_bounds::{self, OutlivesBound};\n+use crate::ty::{self, Ty};\n \n /// The `OutlivesEnvironment` collects information about what outlives\n /// what in a given type-checking setting. For example, if we have a"}, {"sha": "7daf6d71980f6dd3d6e5d0525bed4318c5766818", "filename": "src/librustc/infer/outlives/free_region_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,4 +1,4 @@\n-use ty::{self, Lift, TyCtxt, Region};\n+use crate::ty::{self, Lift, TyCtxt, Region};\n use rustc_data_structures::transitive_relation::TransitiveRelation;\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, Default)]"}, {"sha": "884bd58b4023bac3e52b88e36a24cf1d98697816", "filename": "src/librustc/infer/outlives/obligations.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -59,14 +59,14 @@\n //! might later infer `?U` to something like `&'b u32`, which would\n //! imply that `'b: 'a`.\n \n-use infer::outlives::env::RegionBoundPairs;\n-use infer::outlives::verify::VerifyBoundCx;\n-use infer::{self, GenericKind, InferCtxt, RegionObligation, SubregionOrigin, VerifyBound};\n+use crate::infer::outlives::env::RegionBoundPairs;\n+use crate::infer::outlives::verify::VerifyBoundCx;\n+use crate::infer::{self, GenericKind, InferCtxt, RegionObligation, SubregionOrigin, VerifyBound};\n use rustc_data_structures::fx::FxHashMap;\n use syntax::ast;\n-use traits::ObligationCause;\n-use ty::outlives::Component;\n-use ty::{self, Region, Ty, TyCtxt, TypeFoldable};\n+use crate::traits::ObligationCause;\n+use crate::ty::outlives::Component;\n+use crate::ty::{self, Region, Ty, TyCtxt, TypeFoldable};\n \n impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// Registers that the given region obligation must be resolved"}, {"sha": "0457e7179461c2297335354c80be2e17d3507c92", "filename": "src/librustc/infer/outlives/verify.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,10 +1,10 @@\n-use hir::def_id::DefId;\n-use infer::outlives::env::RegionBoundPairs;\n-use infer::{GenericKind, VerifyBound};\n-use traits;\n-use ty::subst::{Subst, Substs};\n-use ty::{self, Ty, TyCtxt};\n-use util::captures::Captures;\n+use crate::hir::def_id::DefId;\n+use crate::infer::outlives::env::RegionBoundPairs;\n+use crate::infer::{GenericKind, VerifyBound};\n+use crate::traits;\n+use crate::ty::subst::{Subst, Substs};\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::util::captures::Captures;\n \n /// The `TypeOutlives` struct has the job of \"lowering\" a `T: 'a`\n /// obligation into a series of `'a: 'b` constraints and \"verifys\", as"}, {"sha": "500497dc011e1a65d1da2374baeda1785af35b90", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -9,10 +9,10 @@ use super::{MiscVariable, RegionVariableOrigin, SubregionOrigin};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::unify as ut;\n-use ty::ReStatic;\n-use ty::{self, Ty, TyCtxt};\n-use ty::{BrFresh, ReLateBound, ReVar};\n-use ty::{Region, RegionVid};\n+use crate::ty::ReStatic;\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::{BrFresh, ReLateBound, ReVar};\n+use crate::ty::{Region, RegionVid};\n \n use std::collections::BTreeMap;\n use std::{cmp, fmt, mem, u32};"}, {"sha": "4a8f0c34ead111381181dc6d756d89bc62c7c713", "filename": "src/librustc/infer/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fresolve.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,6 +1,6 @@\n use super::{InferCtxt, FixupError, FixupResult};\n-use ty::{self, Ty, TyCtxt, TypeFoldable};\n-use ty::fold::{TypeFolder, TypeVisitor};\n+use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::fold::{TypeFolder, TypeVisitor};\n \n ///////////////////////////////////////////////////////////////////////////\n // OPPORTUNISTIC TYPE RESOLVER"}, {"sha": "0cff42742c30a813e74f74abab7da0209306e7c3", "filename": "src/librustc/infer/sub.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fsub.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,11 +1,11 @@\n use super::SubregionOrigin;\n use super::combine::{CombineFields, RelationDir};\n \n-use traits::Obligation;\n-use ty::{self, Ty, TyCtxt};\n-use ty::TyVar;\n-use ty::fold::TypeFoldable;\n-use ty::relate::{Cause, Relate, RelateResult, TypeRelation};\n+use crate::traits::Obligation;\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::TyVar;\n+use crate::ty::fold::TypeFoldable;\n+use crate::ty::relate::{Cause, Relate, RelateResult, TypeRelation};\n use std::mem;\n \n /// Ensures `a` is made a subtype of `b`. Returns `a` on success."}, {"sha": "14f3261bfc20383f48f0012715b1089733ac2c0b", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,6 +1,6 @@\n use syntax::symbol::InternedString;\n use syntax_pos::Span;\n-use ty::{self, Ty};\n+use crate::ty::{self, Ty};\n \n use std::cmp;\n use std::marker::PhantomData;"}, {"sha": "09f800d9f9bfc97d8fce3c80dfacc95279a77928", "filename": "src/librustc/infer/unify_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Funify_key.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,4 +1,4 @@\n-use ty::{self, FloatVarValue, IntVarValue, Ty, TyCtxt};\n+use crate::ty::{self, FloatVarValue, IntVarValue, Ty, TyCtxt};\n use rustc_data_structures::unify::{NoError, EqUnifyValue, UnifyKey, UnifyValue};\n \n pub trait ToType {"}, {"sha": "d19513515201e8c57875a9dc69960aaf5a77e286", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 13, "deletions": 25, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -30,6 +30,9 @@\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n+#![deny(rust_2018_idioms)]\n+#![allow(explicit_outlives_requirements)]\n+\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(core_intrinsics)]\n@@ -64,41 +67,24 @@\n \n #![warn(elided_lifetimes_in_paths)]\n \n-extern crate arena;\n #[macro_use] extern crate bitflags;\n-extern crate core;\n-extern crate fmt_macros;\n extern crate getopts;\n-extern crate graphviz;\n-extern crate num_cpus;\n #[macro_use] extern crate lazy_static;\n #[macro_use] extern crate scoped_tls;\n #[cfg(windows)]\n extern crate libc;\n-extern crate polonius_engine;\n-extern crate rustc_target;\n #[macro_use] extern crate rustc_data_structures;\n-extern crate serialize;\n-extern crate parking_lot;\n-extern crate rustc_errors as errors;\n-extern crate rustc_rayon as rayon;\n-extern crate rustc_rayon_core as rayon_core;\n+\n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n-extern crate syntax_pos;\n-extern crate jobserver;\n-extern crate proc_macro;\n-extern crate chalk_engine;\n-extern crate rustc_fs_util;\n \n-extern crate serialize as rustc_serialize; // used by deriving\n+// FIXME: This import is used by deriving `RustcDecodable` and `RustcEncodable`. Removing this\n+// results in a bunch of \"failed to resolve\" errors. Hopefully, the compiler moves to serde or\n+// something, and we can get rid of this.\n+#[allow(rust_2018_idioms)]\n+extern crate serialize as rustc_serialize;\n \n-extern crate rustc_apfloat;\n-extern crate byteorder;\n-extern crate backtrace;\n-\n-#[macro_use]\n-extern crate smallvec;\n+#[macro_use] extern crate smallvec;\n \n // Note that librustc doesn't actually depend on these crates, see the note in\n // `Cargo.toml` for this crate about why these are here.\n@@ -166,9 +152,11 @@ pub mod util {\n // `libstd` uses the same trick.\n #[doc(hidden)]\n mod rustc {\n-    pub use lint;\n+    pub use crate::lint;\n }\n \n+use rustc_errors as errors;\n+\n // FIXME(#27438): right now the unit tests of librustc don't refer to any actual\n //                functions generated in librustc_data_structures (all\n //                references are through generic functions), but statics are"}, {"sha": "6ae7448645a20d5d0f42006f79d3f22229674369", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -4,9 +4,9 @@\n //! compiler code, rather than using their own custom pass. Those\n //! lints are all available in `rustc_lint::builtin`.\n \n-use errors::{Applicability, DiagnosticBuilder};\n-use lint::{LintPass, LateLintPass, LintArray};\n-use session::Session;\n+use crate::errors::{Applicability, DiagnosticBuilder};\n+use crate::lint::{LintPass, LateLintPass, LintArray};\n+use crate::session::Session;\n use syntax::ast;\n use syntax::source_map::Span;\n "}, {"sha": "27ead805d5dbd6ba92afc71cf9790fcea2d585ab", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -18,26 +18,26 @@ use self::TargetLint::*;\n \n use std::slice;\n use rustc_data_structures::sync::ReadGuard;\n-use lint::{EarlyLintPass, EarlyLintPassObject, LateLintPassObject};\n-use lint::{LintArray, Level, Lint, LintId, LintPass, LintBuffer};\n-use lint::builtin::BuiltinLintDiagnostics;\n-use lint::levels::{LintLevelSets, LintLevelsBuilder};\n-use middle::privacy::AccessLevels;\n-use rustc_serialize::{Decoder, Decodable, Encoder, Encodable};\n-use session::{config, early_error, Session};\n-use ty::{self, TyCtxt, Ty};\n-use ty::layout::{LayoutError, LayoutOf, TyLayout};\n-use util::nodemap::FxHashMap;\n-use util::common::time;\n+use crate::lint::{EarlyLintPass, EarlyLintPassObject, LateLintPassObject};\n+use crate::lint::{LintArray, Level, Lint, LintId, LintPass, LintBuffer};\n+use crate::lint::builtin::BuiltinLintDiagnostics;\n+use crate::lint::levels::{LintLevelSets, LintLevelsBuilder};\n+use crate::middle::privacy::AccessLevels;\n+use crate::rustc_serialize::{Decoder, Decodable, Encoder, Encodable};\n+use crate::session::{config, early_error, Session};\n+use crate::ty::{self, TyCtxt, Ty};\n+use crate::ty::layout::{LayoutError, LayoutOf, TyLayout};\n+use crate::util::nodemap::FxHashMap;\n+use crate::util::common::time;\n \n use std::default::Default as StdDefault;\n use syntax::ast;\n use syntax::edition;\n use syntax_pos::{MultiSpan, Span, symbol::{LocalInternedString, Symbol}};\n-use errors::DiagnosticBuilder;\n-use hir;\n-use hir::def_id::LOCAL_CRATE;\n-use hir::intravisit as hir_visit;\n+use crate::errors::DiagnosticBuilder;\n+use crate::hir;\n+use crate::hir::def_id::LOCAL_CRATE;\n+use crate::hir::intravisit as hir_visit;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::visit as ast_visit;\n "}, {"sha": "62bd54de7c92934d7d52623ec09fb0a284e4c601", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,20 +1,20 @@\n use std::cmp;\n \n-use errors::{Applicability, DiagnosticBuilder};\n-use hir::HirId;\n-use ich::StableHashingContext;\n-use lint::builtin;\n-use lint::context::CheckLintNameResult;\n-use lint::{self, Lint, LintId, Level, LintSource};\n+use crate::errors::{Applicability, DiagnosticBuilder};\n+use crate::hir::HirId;\n+use crate::ich::StableHashingContext;\n+use crate::lint::builtin;\n+use crate::lint::context::CheckLintNameResult;\n+use crate::lint::{self, Lint, LintId, Level, LintSource};\n use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey,\n                                            StableHasher, StableHasherResult};\n-use session::Session;\n+use crate::session::Session;\n use syntax::ast;\n use syntax::attr;\n use syntax::feature_gate;\n use syntax::source_map::MultiSpan;\n use syntax::symbol::Symbol;\n-use util::nodemap::FxHashMap;\n+use crate::util::nodemap::FxHashMap;\n \n pub struct LintLevelSets {\n     list: Vec<LintSet>,"}, {"sha": "4e6bf753b01aa4af75889d07746be18842f2ab74", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -23,25 +23,25 @@ pub use self::LintSource::*;\n \n use rustc_data_structures::sync::{self, Lrc};\n \n-use errors::{DiagnosticBuilder, DiagnosticId};\n-use hir::def_id::{CrateNum, LOCAL_CRATE};\n-use hir::intravisit;\n-use hir;\n-use lint::builtin::BuiltinLintDiagnostics;\n-use lint::builtin::parser::{QUESTION_MARK_MACRO_SEP, ILL_FORMED_ATTRIBUTE_INPUT};\n-use session::{Session, DiagnosticMessageId};\n+use crate::errors::{DiagnosticBuilder, DiagnosticId};\n+use crate::hir::def_id::{CrateNum, LOCAL_CRATE};\n+use crate::hir::intravisit;\n+use crate::hir;\n+use crate::lint::builtin::BuiltinLintDiagnostics;\n+use crate::lint::builtin::parser::{QUESTION_MARK_MACRO_SEP, ILL_FORMED_ATTRIBUTE_INPUT};\n+use crate::session::{Session, DiagnosticMessageId};\n use std::{hash, ptr};\n use syntax::ast;\n use syntax::source_map::{MultiSpan, ExpnFormat};\n use syntax::early_buffered_lints::BufferedEarlyLintId;\n use syntax::edition::Edition;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n-use ty::TyCtxt;\n-use ty::query::Providers;\n-use util::nodemap::NodeMap;\n+use crate::ty::TyCtxt;\n+use crate::ty::query::Providers;\n+use crate::util::nodemap::NodeMap;\n \n-pub use lint::context::{LateContext, EarlyContext, LintContext, LintStore,\n+pub use crate::lint::context::{LateContext, EarlyContext, LintContext, LintStore,\n                         check_crate, check_ast_crate, CheckLintNameResult,\n                         FutureIncompatibleInfo, BufferedEarlyLint};\n \n@@ -678,7 +678,7 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n             \"this was previously accepted by the compiler but is being phased out; \\\n              it will become a hard error\";\n \n-        let explanation = if lint_id == LintId::of(::lint::builtin::UNSTABLE_NAME_COLLISIONS) {\n+        let explanation = if lint_id == LintId::of(crate::lint::builtin::UNSTABLE_NAME_COLLISIONS) {\n             \"once this method is added to the standard library, \\\n              the ambiguity may cause an error or change in behavior!\"\n                 .to_owned()"}, {"sha": "2799f9424d9190e6d11ba028bdd96070ae786b1e", "filename": "src/librustc/middle/borrowck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,6 +1,6 @@\n-use ich::StableHashingContext;\n-use hir::HirId;\n-use util::nodemap::FxHashSet;\n+use crate::ich::StableHashingContext;\n+use crate::hir::HirId;\n+use crate::util::nodemap::FxHashSet;\n \n use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n                                            StableHasherResult};"}, {"sha": "6e9552a1e920916038a4c0f652eae7a70887f746", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -2,13 +2,13 @@\n //! are *mostly* used as a part of that interface, but these should\n //! probably get a better home if someone can find one.\n \n-use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n-use hir::map as hir_map;\n-use hir::map::definitions::{DefKey, DefPathTable};\n+use crate::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use crate::hir::map as hir_map;\n+use crate::hir::map::definitions::{DefKey, DefPathTable};\n use rustc_data_structures::svh::Svh;\n-use ty::{self, TyCtxt};\n-use session::{Session, CrateDisambiguator};\n-use session::search_paths::PathKind;\n+use crate::ty::{self, TyCtxt};\n+use crate::session::{Session, CrateDisambiguator};\n+use crate::session::search_paths::PathKind;\n \n use std::any::Any;\n use std::path::{Path, PathBuf};"}, {"sha": "6dffe8efba612a0d14cc3355eda403f50d64abd0", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -2,18 +2,18 @@\n // closely. The idea is that all reachable symbols are live, codes called\n // from live codes are live, and everything else is dead.\n \n-use hir::Node;\n-use hir::{self, PatKind};\n-use hir::intravisit::{self, Visitor, NestedVisitorMap};\n-use hir::itemlikevisit::ItemLikeVisitor;\n-\n-use hir::def::Def;\n-use hir::CodegenFnAttrFlags;\n-use hir::def_id::{DefId, LOCAL_CRATE};\n-use lint;\n-use middle::privacy;\n-use ty::{self, TyCtxt};\n-use util::nodemap::FxHashSet;\n+use crate::hir::Node;\n+use crate::hir::{self, PatKind};\n+use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n+use crate::hir::itemlikevisit::ItemLikeVisitor;\n+\n+use crate::hir::def::Def;\n+use crate::hir::CodegenFnAttrFlags;\n+use crate::hir::def_id::{DefId, LOCAL_CRATE};\n+use crate::lint;\n+use crate::middle::privacy;\n+use crate::ty::{self, TyCtxt};\n+use crate::util::nodemap::FxHashSet;\n \n use rustc_data_structures::fx::FxHashMap;\n "}, {"sha": "a24d25cba118453d49758cd0376e26d1f59841c0", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -51,13 +51,13 @@\n //! Additionally, the algorithm is geared towards finding *any* solution rather\n //! than finding a number of solutions (there are normally quite a few).\n \n-use hir::def_id::CrateNum;\n+use crate::hir::def_id::CrateNum;\n \n-use session::config;\n-use ty::TyCtxt;\n-use middle::cstore::{self, DepKind};\n-use middle::cstore::LinkagePreference::{self, RequireStatic, RequireDynamic};\n-use util::nodemap::FxHashMap;\n+use crate::session::config;\n+use crate::ty::TyCtxt;\n+use crate::middle::cstore::{self, DepKind};\n+use crate::middle::cstore::LinkagePreference::{self, RequireStatic, RequireDynamic};\n+use crate::util::nodemap::FxHashMap;\n use rustc_target::spec::PanicStrategy;\n \n /// A list of dependencies for a certain crate type."}, {"sha": "2d0e6c3917bb84822fa6c060941dd968dfd85c31", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,15 +1,15 @@\n-use hir::map as hir_map;\n-use hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n-use session::{config, Session};\n-use session::config::EntryFnType;\n+use crate::hir::map as hir_map;\n+use crate::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n+use crate::session::{config, Session};\n+use crate::session::config::EntryFnType;\n use syntax::ast::NodeId;\n use syntax::attr;\n use syntax::entry::EntryPointType;\n use syntax_pos::Span;\n-use hir::{Item, ItemKind, ImplItem, TraitItem};\n-use hir::itemlikevisit::ItemLikeVisitor;\n-use ty::TyCtxt;\n-use ty::query::Providers;\n+use crate::hir::{Item, ItemKind, ImplItem, TraitItem};\n+use crate::hir::itemlikevisit::ItemLikeVisitor;\n+use crate::ty::TyCtxt;\n+use crate::ty::query::Providers;\n \n struct EntryContext<'a, 'tcx: 'a> {\n     session: &'a Session,"}, {"sha": "6c43068a227728428957817b188e2900b9c6f02c", "filename": "src/librustc/middle/exported_symbols.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,11 +1,11 @@\n-use hir::def_id::{DefId, LOCAL_CRATE};\n-use ich::StableHashingContext;\n+use crate::hir::def_id::{DefId, LOCAL_CRATE};\n+use crate::ich::StableHashingContext;\n use rustc_data_structures::stable_hasher::{StableHasher, HashStable,\n                                            StableHasherResult};\n use std::cmp;\n use std::mem;\n-use ty;\n-use ty::subst::Substs;\n+use crate::ty;\n+use crate::ty::subst::Substs;\n \n /// The SymbolExportLevel of a symbols specifies from which kinds of crates\n /// the symbol will be exported. `C` symbols will be exported from any"}, {"sha": "0939f07f43bb3bea6ef9f44e9aa86effd158a6aa", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -9,20 +9,20 @@ pub use self::MatchMode::*;\n use self::TrackMatchMode::*;\n use self::OverloadedCallType::*;\n \n-use hir::def::Def;\n-use hir::def_id::DefId;\n-use infer::InferCtxt;\n-use middle::mem_categorization as mc;\n-use middle::region;\n-use ty::{self, TyCtxt, adjustment};\n-\n-use hir::{self, PatKind};\n+use crate::hir::def::Def;\n+use crate::hir::def_id::DefId;\n+use crate::infer::InferCtxt;\n+use crate::middle::mem_categorization as mc;\n+use crate::middle::region;\n+use crate::ty::{self, TyCtxt, adjustment};\n+\n+use crate::hir::{self, PatKind};\n use rustc_data_structures::sync::Lrc;\n use std::rc::Rc;\n use syntax::ast;\n use syntax::ptr::P;\n use syntax_pos::Span;\n-use util::nodemap::ItemLocalSet;\n+use crate::util::nodemap::ItemLocalSet;\n \n ///////////////////////////////////////////////////////////////////////////\n // The Delegate trait"}, {"sha": "e752643e842aa530aa1b1a6c00fd1b081a1523b3", "filename": "src/librustc/middle/free_region.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffree_region.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -5,10 +5,10 @@\n //! `TransitiveRelation` type and use that to decide when one free\n //! region outlives another and so forth.\n \n-use infer::outlives::free_region_map::{FreeRegionMap, FreeRegionRelations};\n-use hir::def_id::DefId;\n-use middle::region;\n-use ty::{self, TyCtxt, Region};\n+use crate::infer::outlives::free_region_map::{FreeRegionMap, FreeRegionRelations};\n+use crate::hir::def_id::DefId;\n+use crate::middle::region;\n+use crate::ty::{self, TyCtxt, Region};\n \n /// Combines a `region::ScopeTree` (which governs relationships between\n /// scopes) and a `FreeRegionMap` (which governs relationships between"}, {"sha": "ee361e9776313048cc2295a387020035514b8fc6", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,14 +1,14 @@\n-use hir::def::Def;\n-use hir::def_id::DefId;\n-use ty::{self, Ty, TyCtxt};\n-use ty::layout::{LayoutError, Pointer, SizeSkeleton, VariantIdx};\n-use ty::query::Providers;\n+use crate::hir::def::Def;\n+use crate::hir::def_id::DefId;\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::layout::{LayoutError, Pointer, SizeSkeleton, VariantIdx};\n+use crate::ty::query::Providers;\n \n use rustc_target::spec::abi::Abi::RustIntrinsic;\n use rustc_data_structures::indexed_vec::Idx;\n use syntax_pos::Span;\n-use hir::intravisit::{self, Visitor, NestedVisitorMap};\n-use hir;\n+use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n+use crate::hir;\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     for &module in tcx.hir().krate().modules.keys() {"}, {"sha": "3f9230ab551d55b82ae9a5002cd6cc1bd8ae117a", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -11,17 +11,17 @@\n \n pub use self::LangItem::*;\n \n-use hir::def_id::DefId;\n-use hir::check_attr::Target;\n-use ty::{self, TyCtxt};\n-use middle::weak_lang_items;\n-use util::nodemap::FxHashMap;\n+use crate::hir::def_id::DefId;\n+use crate::hir::check_attr::Target;\n+use crate::ty::{self, TyCtxt};\n+use crate::middle::weak_lang_items;\n+use crate::util::nodemap::FxHashMap;\n \n use syntax::ast;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n-use hir::itemlikevisit::ItemLikeVisitor;\n-use hir;\n+use crate::hir::itemlikevisit::ItemLikeVisitor;\n+use crate::hir;\n \n // The actual lang items defined come at the end of this file in one handy table.\n // So you probably just want to nip down to the end."}, {"sha": "45095d9bc986b392df5cee9c11213b7cc99fccaf", "filename": "src/librustc/middle/lib_features.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flib_features.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -4,13 +4,13 @@\n // and `#[unstable (..)]`), but are not declared in one single location\n // (unlike lang features), which means we need to collect them instead.\n \n-use ty::TyCtxt;\n+use crate::ty::TyCtxt;\n use syntax::symbol::Symbol;\n use syntax::ast::{Attribute, MetaItem, MetaItemKind};\n use syntax_pos::Span;\n-use hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n-use errors::DiagnosticId;\n+use crate::errors::DiagnosticId;\n \n pub struct LibFeatures {\n     // A map from feature to stabilisation version."}, {"sha": "ce4a0f69c2864b5ce1b1bff37ae5e5f91aaff5ae", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -97,13 +97,13 @@ use self::LoopKind::*;\n use self::LiveNodeKind::*;\n use self::VarKind::*;\n \n-use hir::def::*;\n-use hir::Node;\n-use ty::{self, TyCtxt};\n-use ty::query::Providers;\n-use lint;\n-use errors::Applicability;\n-use util::nodemap::{NodeMap, HirIdMap, HirIdSet};\n+use crate::hir::def::*;\n+use crate::hir::Node;\n+use crate::ty::{self, TyCtxt};\n+use crate::ty::query::Providers;\n+use crate::lint;\n+use crate::errors::Applicability;\n+use crate::util::nodemap::{NodeMap, HirIdMap, HirIdSet};\n \n use std::collections::{BTreeMap, VecDeque};\n use std::{fmt, u32};\n@@ -115,10 +115,10 @@ use syntax::ptr::P;\n use syntax::symbol::keywords;\n use syntax_pos::Span;\n \n-use hir;\n-use hir::{Expr, HirId};\n-use hir::def_id::DefId;\n-use hir::intravisit::{self, Visitor, FnKind, NestedVisitorMap};\n+use crate::hir;\n+use crate::hir::{Expr, HirId};\n+use crate::hir::def_id::DefId;\n+use crate::hir::intravisit::{self, Visitor, FnKind, NestedVisitorMap};\n \n /// For use with `propagate_through_loop`.\n enum LoopKind<'a> {\n@@ -406,7 +406,7 @@ fn add_from_pat<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, pat: &P<hir::Pat>) {\n     let mut pats = VecDeque::new();\n     pats.push_back(pat);\n     while let Some(pat) = pats.pop_front() {\n-        use hir::PatKind::*;\n+        use crate::hir::PatKind::*;\n         match pat.node {\n             Binding(_, _, _, _, ref inner_pat) => {\n                 pats.extend(inner_pat.iter());"}, {"sha": "04e4a0b39a2cabbb915f75972b60105fd4325b5e", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -58,19 +58,19 @@ pub use self::Note::*;\n \n use self::Aliasability::*;\n \n-use middle::region;\n-use hir::def_id::{DefId, LocalDefId};\n-use hir::Node;\n-use infer::InferCtxt;\n-use hir::def::{Def, CtorKind};\n-use ty::adjustment;\n-use ty::{self, Ty, TyCtxt};\n-use ty::fold::TypeFoldable;\n-use ty::layout::VariantIdx;\n-\n-use hir::{MutImmutable, MutMutable, PatKind};\n-use hir::pat_util::EnumerateAndAdjustIterator;\n-use hir;\n+use crate::middle::region;\n+use crate::hir::def_id::{DefId, LocalDefId};\n+use crate::hir::Node;\n+use crate::infer::InferCtxt;\n+use crate::hir::def::{Def, CtorKind};\n+use crate::ty::adjustment;\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::fold::TypeFoldable;\n+use crate::ty::layout::VariantIdx;\n+\n+use crate::hir::{MutImmutable, MutMutable, PatKind};\n+use crate::hir::pat_util::EnumerateAndAdjustIterator;\n+use crate::hir;\n use syntax::ast::{self, Name};\n use syntax_pos::Span;\n \n@@ -80,7 +80,7 @@ use std::hash::{Hash, Hasher};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::indexed_vec::Idx;\n use std::rc::Rc;\n-use util::nodemap::ItemLocalSet;\n+use crate::util::nodemap::ItemLocalSet;\n \n #[derive(Clone, Debug, PartialEq)]\n pub enum Categorization<'tcx> {"}, {"sha": "1655d8356a5a7804755f3e4ea8181de00dbf5edd", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -2,7 +2,7 @@\n //! outside their scopes. This pass will also generate a set of exported items\n //! which are available for use externally when compiled as a library.\n \n-use util::nodemap::{DefIdSet, FxHashMap};\n+use crate::util::nodemap::{DefIdSet, FxHashMap};\n \n use std::hash::Hash;\n use std::fmt;"}, {"sha": "73ba47d4119158cf592cc87206eed6702829391f", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -5,24 +5,24 @@\n // makes all other generics or inline functions that it references\n // reachable as well.\n \n-use hir::{CodegenFnAttrs, CodegenFnAttrFlags};\n-use hir::Node;\n-use hir::def::Def;\n-use hir::def_id::{DefId, CrateNum};\n+use crate::hir::{CodegenFnAttrs, CodegenFnAttrFlags};\n+use crate::hir::Node;\n+use crate::hir::def::Def;\n+use crate::hir::def_id::{DefId, CrateNum};\n use rustc_data_structures::sync::Lrc;\n-use ty::{self, TyCtxt};\n-use ty::query::Providers;\n-use middle::privacy;\n-use session::config;\n-use util::nodemap::{NodeSet, FxHashSet};\n+use crate::ty::{self, TyCtxt};\n+use crate::ty::query::Providers;\n+use crate::middle::privacy;\n+use crate::session::config;\n+use crate::util::nodemap::{NodeSet, FxHashSet};\n \n use rustc_target::spec::abi::Abi;\n use syntax::ast;\n-use hir;\n-use hir::def_id::LOCAL_CRATE;\n-use hir::intravisit::{Visitor, NestedVisitorMap};\n-use hir::itemlikevisit::ItemLikeVisitor;\n-use hir::intravisit;\n+use crate::hir;\n+use crate::hir::def_id::LOCAL_CRATE;\n+use crate::hir::intravisit::{Visitor, NestedVisitorMap};\n+use crate::hir::itemlikevisit::ItemLikeVisitor;\n+use crate::hir::intravisit;\n \n // Returns true if the given item must be inlined because it may be\n // monomorphized or it was marked with `#[inline]`. This will only return"}, {"sha": "ea077220e0be37680a22a8957b0951a733ef94d7", "filename": "src/librustc/middle/recursion_limit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -5,7 +5,7 @@\n // this via an attribute on the crate like `#![recursion_limit=\"22\"]`. This pass\n // just peeks and looks for that attribute.\n \n-use session::Session;\n+use crate::session::Session;\n use syntax::ast;\n \n use rustc_data_structures::sync::Once;"}, {"sha": "788d2185d6da26b621fabf9ebc8c9d6dcd6f8d66", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -6,24 +6,24 @@\n //!\n //! [rustc guide]: https://rust-lang.github.io/rustc-guide/mir/borrowck.html\n \n-use ich::{StableHashingContext, NodeIdHashingMode};\n-use util::nodemap::{FxHashMap, FxHashSet};\n-use ty;\n+use crate::ich::{StableHashingContext, NodeIdHashingMode};\n+use crate::util::nodemap::{FxHashMap, FxHashSet};\n+use crate::ty;\n \n use std::mem;\n use std::fmt;\n use rustc_data_structures::sync::Lrc;\n use syntax::source_map;\n use syntax::ast;\n use syntax_pos::{Span, DUMMY_SP};\n-use ty::TyCtxt;\n-use ty::query::Providers;\n-\n-use hir;\n-use hir::Node;\n-use hir::def_id::DefId;\n-use hir::intravisit::{self, Visitor, NestedVisitorMap};\n-use hir::{Block, Arm, Pat, PatKind, Stmt, Expr, Local};\n+use crate::ty::TyCtxt;\n+use crate::ty::query::Providers;\n+\n+use crate::hir;\n+use crate::hir::Node;\n+use crate::hir::def_id::DefId;\n+use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n+use crate::hir::{Block, Arm, Pat, PatKind, Stmt, Expr, Local};\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n                                            StableHasherResult};\n@@ -154,7 +154,7 @@ newtype_index! {\n     pub struct FirstStatementIndex { .. }\n }\n \n-impl_stable_hash_for!(struct ::middle::region::FirstStatementIndex { private });\n+impl_stable_hash_for!(struct crate::middle::region::FirstStatementIndex { private });\n \n // compilation error if size of `ScopeData` is not the same as a `u32`\n static_assert!(ASSERT_SCOPE_DATA: mem::size_of::<ScopeData>() == 4);"}, {"sha": "f7cd241236498e8cb66b11385d58050074509a58", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -5,16 +5,16 @@\n //! used between functions, and they operate in a purely top-down\n //! way. Therefore we break lifetime name resolution into a separate pass.\n \n-use hir::def::Def;\n-use hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n-use hir::map::Map;\n-use hir::{GenericArg, GenericParam, ItemLocalId, LifetimeName, Node, ParamName};\n-use ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n-\n-use errors::{Applicability, DiagnosticBuilder};\n-use rustc::lint;\n+use crate::hir::def::Def;\n+use crate::hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n+use crate::hir::map::Map;\n+use crate::hir::{GenericArg, GenericParam, ItemLocalId, LifetimeName, Node, ParamName};\n+use crate::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n+\n+use crate::errors::{Applicability, DiagnosticBuilder};\n+use crate::rustc::lint;\n use rustc_data_structures::sync::Lrc;\n-use session::Session;\n+use crate::session::Session;\n use std::borrow::Cow;\n use std::cell::Cell;\n use std::mem::replace;\n@@ -23,10 +23,10 @@ use syntax::attr;\n use syntax::ptr::P;\n use syntax::symbol::keywords;\n use syntax_pos::Span;\n-use util::nodemap::{DefIdMap, FxHashMap, FxHashSet, NodeMap, NodeSet};\n+use crate::util::nodemap::{DefIdMap, FxHashMap, FxHashSet, NodeMap, NodeSet};\n \n-use hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use hir::{self, GenericParamKind, LifetimeParamKind};\n+use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use crate::hir::{self, GenericParamKind, LifetimeParamKind};\n \n /// The origin of a named lifetime definition.\n ///\n@@ -216,7 +216,7 @@ pub struct ResolveLifetimes {\n         FxHashMap<LocalDefId, Lrc<FxHashMap<ItemLocalId, Lrc<Vec<ObjectLifetimeDefault>>>>>,\n }\n \n-impl_stable_hash_for!(struct ::middle::resolve_lifetime::ResolveLifetimes {\n+impl_stable_hash_for!(struct crate::middle::resolve_lifetime::ResolveLifetimes {\n     defs,\n     late_bound,\n     object_lifetime_defaults"}, {"sha": "34c77d08f5a7e1166daa967b17fdddba437d2008", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -3,23 +3,23 @@\n \n pub use self::StabilityLevel::*;\n \n-use lint::{self, Lint};\n-use hir::{self, Item, Generics, StructField, Variant, HirId};\n-use hir::def::Def;\n-use hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n-use hir::intravisit::{self, Visitor, NestedVisitorMap};\n-use ty::query::Providers;\n-use middle::privacy::AccessLevels;\n-use session::{DiagnosticMessageId, Session};\n+use crate::lint::{self, Lint};\n+use crate::hir::{self, Item, Generics, StructField, Variant, HirId};\n+use crate::hir::def::Def;\n+use crate::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n+use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n+use crate::ty::query::Providers;\n+use crate::middle::privacy::AccessLevels;\n+use crate::session::{DiagnosticMessageId, Session};\n use syntax::symbol::Symbol;\n use syntax_pos::{Span, MultiSpan};\n use syntax::ast;\n use syntax::ast::{NodeId, Attribute};\n use syntax::errors::Applicability;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax::attr::{self, Stability, Deprecation};\n-use ty::{self, TyCtxt};\n-use util::nodemap::{FxHashSet, FxHashMap};\n+use crate::ty::{self, TyCtxt};\n+use crate::util::nodemap::{FxHashSet, FxHashMap};\n \n use std::mem::replace;\n use std::cmp::Ordering;"}, {"sha": "119e855c58551cf616dda2e2eeeef0faeeb69052", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,18 +1,18 @@\n //! Validity checking for weak lang items\n \n-use session::config;\n-use middle::lang_items;\n+use crate::session::config;\n+use crate::middle::lang_items;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_target::spec::PanicStrategy;\n use syntax::ast;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n-use hir::def_id::DefId;\n-use hir::intravisit::{Visitor, NestedVisitorMap};\n-use hir::intravisit;\n-use hir;\n-use ty::TyCtxt;\n+use crate::hir::def_id::DefId;\n+use crate::hir::intravisit::{Visitor, NestedVisitorMap};\n+use crate::hir::intravisit;\n+use crate::hir;\n+use crate::ty::TyCtxt;\n \n macro_rules! weak_lang_items {\n     ($($name:ident, $item:ident, $sym:ident;)*) => ("}, {"sha": "1cc927b1f720f3a549493b8d7b906f55fb97c349", "filename": "src/librustc/mir/cache.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmir%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmir%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fcache.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -2,10 +2,10 @@ use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::sync::{RwLock, MappedReadGuard, ReadGuard};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n                                            StableHasherResult};\n-use ich::StableHashingContext;\n-use mir::{Mir, BasicBlock};\n+use crate::ich::StableHashingContext;\n+use crate::mir::{Mir, BasicBlock};\n \n-use rustc_serialize as serialize;\n+use crate::rustc_serialize as serialize;\n \n #[derive(Clone, Debug)]\n pub struct Cache {"}, {"sha": "7761e1fdafac55ce711afa6a47dd68ddb832dd2e", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -5,10 +5,10 @@ use super::{\n     truncate,\n };\n \n-use ty::layout::{Size, Align};\n+use crate::ty::layout::{Size, Align};\n use syntax::ast::Mutability;\n use std::iter;\n-use mir;\n+use crate::mir;\n use std::ops::{Deref, DerefMut};\n use rustc_data_structures::sorted_map::SortedMap;\n use rustc_target::abi::HasDataLayout;"}, {"sha": "870a51f95df1c7103bb5f1847f9e9a80d0a57312", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,17 +1,17 @@\n use std::{fmt, env};\n \n-use hir::map::definitions::DefPathData;\n-use mir;\n-use ty::{self, Ty, layout};\n-use ty::layout::{Size, Align, LayoutError};\n+use crate::hir::map::definitions::DefPathData;\n+use crate::mir;\n+use crate::ty::{self, Ty, layout};\n+use crate::ty::layout::{Size, Align, LayoutError};\n use rustc_target::spec::abi::Abi;\n \n use super::{RawConst, Pointer, InboundsCheck, ScalarMaybeUndef};\n \n use backtrace::Backtrace;\n \n-use ty::query::TyCtxtAt;\n-use errors::DiagnosticBuilder;\n+use crate::ty::query::TyCtxtAt;\n+use crate::errors::DiagnosticBuilder;\n \n use syntax_pos::{Pos, Span};\n use syntax::ast;\n@@ -42,7 +42,7 @@ pub type ConstEvalResult<'tcx> = Result<ty::Const<'tcx>, ErrorHandled>;\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct ConstEvalErr<'tcx> {\n     pub span: Span,\n-    pub error: ::mir::interpret::EvalErrorKind<'tcx, u64>,\n+    pub error: crate::mir::interpret::EvalErrorKind<'tcx, u64>,\n     pub stacktrace: Vec<FrameInfo<'tcx>>,\n }\n \n@@ -136,7 +136,7 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n                 .next()\n                 .unwrap_or(lint_root);\n             tcx.struct_span_lint_node(\n-                ::rustc::lint::builtin::CONST_ERR,\n+                crate::rustc::lint::builtin::CONST_ERR,\n                 node_id,\n                 tcx.span,\n                 message,"}, {"sha": "efd233f1f3854ea05ffbe35368e43bb4c6cf310e", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -25,17 +25,17 @@ pub use self::allocation::{\n pub use self::pointer::{Pointer, PointerArithmetic};\n \n use std::fmt;\n-use mir;\n-use hir::def_id::DefId;\n-use ty::{self, TyCtxt, Instance};\n-use ty::layout::{self, Size};\n+use crate::mir;\n+use crate::hir::def_id::DefId;\n+use crate::ty::{self, TyCtxt, Instance};\n+use crate::ty::layout::{self, Size};\n use std::io;\n-use rustc_serialize::{Encoder, Decodable, Encodable};\n+use crate::rustc_serialize::{Encoder, Decodable, Encodable};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{Lock as Mutex, HashMapExt};\n use rustc_data_structures::tiny_list::TinyList;\n use byteorder::{WriteBytesExt, ReadBytesExt, LittleEndian, BigEndian};\n-use ty::codec::TyDecoder;\n+use crate::ty::codec::TyDecoder;\n use std::sync::atomic::{AtomicU32, Ordering};\n use std::num::NonZeroU32;\n \n@@ -53,8 +53,8 @@ pub struct GlobalId<'tcx> {\n #[derive(Copy, Clone, Eq, Hash, Ord, PartialEq, PartialOrd, Debug)]\n pub struct AllocId(pub u64);\n \n-impl ::rustc_serialize::UseSpecializedEncodable for AllocId {}\n-impl ::rustc_serialize::UseSpecializedDecodable for AllocId {}\n+impl crate::rustc_serialize::UseSpecializedEncodable for AllocId {}\n+impl crate::rustc_serialize::UseSpecializedDecodable for AllocId {}\n \n #[derive(RustcDecodable, RustcEncodable)]\n enum AllocDiscriminant {"}, {"sha": "551e7b2fd41ecd61053779c4eb12478a2f07b915", "filename": "src/librustc/mir/interpret/pointer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,5 +1,5 @@\n-use mir;\n-use ty::layout::{self, HasDataLayout, Size};\n+use crate::mir;\n+use crate::ty::layout::{self, HasDataLayout, Size};\n \n use super::{\n     AllocId, EvalResult, InboundsCheck,"}, {"sha": "73917342814de59dba17b5a803d4ee1ae07c6289", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -515,7 +515,7 @@ impl<'tcx, Tag> ScalarMaybeUndef<Tag> {\n     }\n }\n \n-impl_stable_hash_for!(enum ::mir::interpret::ScalarMaybeUndef {\n+impl_stable_hash_for!(enum crate::mir::interpret::ScalarMaybeUndef {\n     Scalar(v),\n     Undef\n });"}, {"sha": "009997bfcf2c48d038518fe8e99144a26e765aa4", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -2,11 +2,11 @@\n //!\n //! [rustc guide]: https://rust-lang.github.io/rustc-guide/mir/index.html\n \n-use hir::def::CtorKind;\n-use hir::def_id::DefId;\n-use hir::{self, HirId, InlineAsm};\n-use mir::interpret::{ConstValue, EvalErrorKind, Scalar};\n-use mir::visit::MirVisitable;\n+use crate::hir::def::CtorKind;\n+use crate::hir::def_id::DefId;\n+use crate::hir::{self, HirId, InlineAsm};\n+use crate::mir::interpret::{ConstValue, EvalErrorKind, Scalar};\n+use crate::mir::visit::MirVisitable;\n use rustc_apfloat::ieee::{Double, Single};\n use rustc_apfloat::Float;\n use rustc_data_structures::fx::FxHashSet;\n@@ -15,7 +15,7 @@ use rustc_data_structures::graph::{self, GraphPredecessors, GraphSuccessors};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::sync::MappedReadGuard;\n-use rustc_serialize::{self as serialize};\n+use crate::rustc_serialize::{self as serialize};\n use smallvec::SmallVec;\n use std::borrow::Cow;\n use std::fmt::{self, Debug, Formatter, Write};\n@@ -26,16 +26,16 @@ use std::{iter, mem, option, u32};\n use syntax::ast::{self, Name};\n use syntax::symbol::InternedString;\n use syntax_pos::{Span, DUMMY_SP};\n-use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n-use ty::subst::{Subst, Substs};\n-use ty::layout::VariantIdx;\n-use ty::{\n+use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n+use crate::ty::subst::{Subst, Substs};\n+use crate::ty::layout::VariantIdx;\n+use crate::ty::{\n     self, AdtDef, CanonicalUserTypeAnnotations, ClosureSubsts, GeneratorSubsts, Region, Ty, TyCtxt,\n     UserTypeAnnotationIndex,\n };\n-use util::ppaux;\n+use crate::util::ppaux;\n \n-pub use mir::interpret::AssertMessage;\n+pub use crate::mir::interpret::AssertMessage;\n \n mod cache;\n pub mod interpret;\n@@ -676,7 +676,7 @@ impl_stable_hash_for!(enum self::MirPhase {\n });\n \n mod binding_form_impl {\n-    use ich::StableHashingContext;\n+    use crate::ich::StableHashingContext;\n     use rustc_data_structures::stable_hasher::{HashStable, StableHasher, StableHasherResult};\n \n     impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for super::BindingForm<'tcx> {\n@@ -2625,7 +2625,7 @@ CloneTypeFoldableAndLiftImpls! { ProjectionKind<'tcx>, }\n \n impl<'tcx> TypeFoldable<'tcx> for UserTypeProjection<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        use mir::ProjectionElem::*;\n+        use crate::mir::ProjectionElem::*;\n \n         let base = self.base.fold_with(folder);\n         let projs: Vec<_> = self.projs\n@@ -2671,7 +2671,7 @@ pub fn fmt_lazy_const_val(f: &mut impl Write, const_val: &ty::LazyConst<'_>) ->\n \n /// Write a `ConstValue` in a way closer to the original source code than the `Debug` output.\n pub fn fmt_const_val(f: &mut impl Write, const_val: ty::Const<'_>) -> fmt::Result {\n-    use ty::TyKind::*;\n+    use crate::ty::TyKind::*;\n     let value = const_val.val;\n     let ty = const_val.ty;\n     // print some primitives\n@@ -3116,7 +3116,7 @@ EnumTypeFoldableImpl! {\n \n impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        use mir::TerminatorKind::*;\n+        use crate::mir::TerminatorKind::*;\n \n         let kind = match self.kind {\n             Goto { target } => Goto { target },\n@@ -3229,7 +3229,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        use mir::TerminatorKind::*;\n+        use crate::mir::TerminatorKind::*;\n \n         match self.kind {\n             SwitchInt {\n@@ -3301,7 +3301,7 @@ impl<'tcx> TypeFoldable<'tcx> for Place<'tcx> {\n \n impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        use mir::Rvalue::*;\n+        use crate::mir::Rvalue::*;\n         match *self {\n             Use(ref op) => Use(op.fold_with(folder)),\n             Repeat(ref op, len) => Repeat(op.fold_with(folder), len),\n@@ -3343,7 +3343,7 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        use mir::Rvalue::*;\n+        use crate::mir::Rvalue::*;\n         match *self {\n             Use(ref op) => op.visit_with(visitor),\n             Repeat(ref op, _) => op.visit_with(visitor),\n@@ -3395,7 +3395,7 @@ where\n     T: TypeFoldable<'tcx>,\n {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        use mir::ProjectionElem::*;\n+        use crate::mir::ProjectionElem::*;\n \n         let base = self.base.fold_with(folder);\n         let elem = match self.elem {\n@@ -3409,7 +3409,7 @@ where\n     }\n \n     fn super_visit_with<Vs: TypeVisitor<'tcx>>(&self, visitor: &mut Vs) -> bool {\n-        use mir::ProjectionElem::*;\n+        use crate::mir::ProjectionElem::*;\n \n         self.base.visit_with(visitor) || match self.elem {\n             Field(_, ref ty) => ty.visit_with(visitor),"}, {"sha": "affa9f9fdd4d7181524225ad5b4cbe6b66383ff5", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,12 +1,12 @@\n-use hir::def_id::{DefId, CrateNum, LOCAL_CRATE};\n+use crate::hir::def_id::{DefId, CrateNum, LOCAL_CRATE};\n use syntax::ast::NodeId;\n use syntax::symbol::{Symbol, InternedString};\n-use ty::{Instance, TyCtxt};\n-use util::nodemap::FxHashMap;\n+use crate::ty::{Instance, TyCtxt};\n+use crate::util::nodemap::FxHashMap;\n use rustc_data_structures::base_n;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasherResult,\n                                            StableHasher};\n-use ich::{Fingerprint, StableHashingContext, NodeIdHashingMode};\n+use crate::ich::{Fingerprint, StableHashingContext, NodeIdHashingMode};\n use std::fmt;\n use std::hash::Hash;\n "}, {"sha": "ac3a97898b405816ec004bb87c4b8a572c6617b3", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -3,12 +3,12 @@\n  * building is complete.\n  */\n \n-use mir::*;\n-use ty::subst::{Subst, Substs};\n-use ty::{self, AdtDef, Ty, TyCtxt};\n-use ty::layout::VariantIdx;\n-use hir;\n-use ty::util::IntTypeExt;\n+use crate::mir::*;\n+use crate::ty::subst::{Subst, Substs};\n+use crate::ty::{self, AdtDef, Ty, TyCtxt};\n+use crate::ty::layout::VariantIdx;\n+use crate::hir;\n+use crate::ty::util::IntTypeExt;\n \n #[derive(Copy, Clone, Debug)]\n pub enum PlaceTy<'tcx> {"}, {"sha": "0180256661630d4cd7d6b3b1d90361ac083f2469", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,7 +1,7 @@\n-use hir::def_id::DefId;\n-use ty::subst::Substs;\n-use ty::{CanonicalUserTypeAnnotation, ClosureSubsts, GeneratorSubsts, Region, Ty};\n-use mir::*;\n+use crate::hir::def_id::DefId;\n+use crate::ty::subst::Substs;\n+use crate::ty::{CanonicalUserTypeAnnotation, ClosureSubsts, GeneratorSubsts, Region, Ty};\n+use crate::mir::*;\n use syntax_pos::Span;\n \n // # The MIR Visitor\n@@ -567,7 +567,7 @@ macro_rules! make_mir_visitor {\n             fn super_assert_message(&mut self,\n                                     msg: & $($mutability)* AssertMessage<'tcx>,\n                                     location: Location) {\n-                use mir::interpret::EvalErrorKind::*;\n+                use crate::mir::interpret::EvalErrorKind::*;\n                 if let BoundsCheck {\n                         ref $($mutability)* len,\n                         ref $($mutability)* index"}, {"sha": "1a92f2c0f7aa1604620ebcde75132338f3d5f8d0", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -3,13 +3,13 @@\n \n use std::str::FromStr;\n \n-use session::{early_error, early_warn, Session};\n-use session::search_paths::SearchPath;\n+use crate::session::{early_error, early_warn, Session};\n+use crate::session::search_paths::SearchPath;\n \n use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelroLevel};\n use rustc_target::spec::{Target, TargetTriple};\n-use lint;\n-use middle::cstore;\n+use crate::lint;\n+use crate::middle::cstore;\n \n use syntax::ast::{self, IntTy, UintTy, MetaItemKind};\n use syntax::source_map::{FileName, FilePathMapping};\n@@ -19,7 +19,7 @@ use syntax::parse;\n use syntax::symbol::Symbol;\n use syntax::feature_gate::UnstableFeatures;\n \n-use errors::{ColorConfig, FatalError, Handler};\n+use crate::errors::{ColorConfig, FatalError, Handler};\n \n use getopts;\n use std::collections::{BTreeMap, BTreeSet};\n@@ -2344,7 +2344,7 @@ pub mod nightly_options {\n     use getopts;\n     use syntax::feature_gate::UnstableFeatures;\n     use super::{ErrorOutputType, OptionStability, RustcOptGroup};\n-    use session::early_error;\n+    use crate::session::early_error;\n \n     pub fn is_unstable_enabled(matches: &getopts::Matches) -> bool {\n         is_nightly_build()\n@@ -2433,8 +2433,8 @@ impl fmt::Display for CrateType {\n /// we have an opt-in scheme here, so one is hopefully forced to think about\n /// how the hash should be calculated when adding a new command-line argument.\n mod dep_tracking {\n-    use lint;\n-    use middle::cstore;\n+    use crate::lint;\n+    use crate::middle::cstore;\n     use std::collections::BTreeMap;\n     use std::hash::Hash;\n     use std::path::PathBuf;\n@@ -2567,14 +2567,14 @@ mod dep_tracking {\n \n #[cfg(test)]\n mod tests {\n-    use errors;\n+    use crate::errors;\n     use getopts;\n-    use lint;\n-    use middle::cstore;\n-    use session::config::{build_configuration, build_session_options_and_crate_config};\n-    use session::config::{LtoCli, CrossLangLto};\n-    use session::build_session;\n-    use session::search_paths::SearchPath;\n+    use crate::lint;\n+    use crate::middle::cstore;\n+    use crate::session::config::{build_configuration, build_session_options_and_crate_config};\n+    use crate::session::config::{LtoCli, CrossLangLto};\n+    use crate::session::build_session;\n+    use crate::session::search_paths::SearchPath;\n     use std::collections::{BTreeMap, BTreeSet};\n     use std::iter::FromIterator;\n     use std::path::PathBuf;"}, {"sha": "77f190e281229bb314cc46a14151dc410f900102", "filename": "src/librustc/session/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Ffilesearch.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -7,7 +7,7 @@ use std::env;\n use std::fs;\n use std::path::{Path, PathBuf};\n \n-use session::search_paths::{SearchPath, PathKind};\n+use crate::session::search_paths::{SearchPath, PathKind};\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n \n #[derive(Copy, Clone)]"}, {"sha": "d2beb64b3886146001c860b42cc91671d611358b", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,36 +1,36 @@\n pub use self::code_stats::{DataTypeKind, SizeKind, FieldInfo, VariantInfo};\n use self::code_stats::CodeStats;\n \n-use dep_graph::cgu_reuse_tracker::CguReuseTracker;\n-use hir::def_id::CrateNum;\n+use crate::dep_graph::cgu_reuse_tracker::CguReuseTracker;\n+use crate::hir::def_id::CrateNum;\n use rustc_data_structures::fingerprint::Fingerprint;\n \n-use lint;\n-use lint::builtin::BuiltinLintDiagnostics;\n-use middle::allocator::AllocatorKind;\n-use middle::dependency_format;\n-use session::config::{OutputType, Lto};\n-use session::search_paths::{PathKind, SearchPath};\n-use util::nodemap::{FxHashMap, FxHashSet};\n-use util::common::{duration_to_secs_str, ErrorReported};\n-use util::common::ProfileQueriesMsg;\n+use crate::lint;\n+use crate::lint::builtin::BuiltinLintDiagnostics;\n+use crate::middle::allocator::AllocatorKind;\n+use crate::middle::dependency_format;\n+use crate::session::config::{OutputType, Lto};\n+use crate::session::search_paths::{PathKind, SearchPath};\n+use crate::util::nodemap::{FxHashMap, FxHashSet};\n+use crate::util::common::{duration_to_secs_str, ErrorReported};\n+use crate::util::common::ProfileQueriesMsg;\n \n use rustc_data_structures::base_n;\n use rustc_data_structures::sync::{\n     self, Lrc, Lock, OneThread, Once, RwLock, AtomicU64, AtomicUsize, Ordering,\n     Ordering::SeqCst,\n };\n \n-use errors::{self, DiagnosticBuilder, DiagnosticId, Applicability};\n-use errors::emitter::{Emitter, EmitterWriter};\n+use crate::errors::{self, DiagnosticBuilder, DiagnosticId, Applicability};\n+use crate::errors::emitter::{Emitter, EmitterWriter};\n use syntax::ast::{self, NodeId};\n use syntax::edition::Edition;\n use syntax::feature_gate::{self, AttributeType};\n use syntax::json::JsonEmitter;\n use syntax::source_map;\n use syntax::parse::{self, ParseSess};\n use syntax_pos::{MultiSpan, Span};\n-use util::profiling::SelfProfiler;\n+use crate::util::profiling::SelfProfiler;\n \n use rustc_target::spec::{PanicStrategy, RelroLevel, Target, TargetTriple};\n use rustc_data_structures::flock;"}, {"sha": "a950258cefd0cb90d82b684bac801d776eec9931", "filename": "src/librustc/session/search_paths.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fsearch_paths.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,6 +1,6 @@\n use std::path::{Path, PathBuf};\n-use session::{early_error, config};\n-use session::filesearch::make_target_lib_path;\n+use crate::session::{early_error, config};\n+use crate::session::filesearch::make_target_lib_path;\n \n #[derive(Clone, Debug)]\n pub struct SearchPath {"}, {"sha": "d1db49e05f1905d1d24001e7fdb2ac6511bd6c1a", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -6,12 +6,12 @@ use super::*;\n use std::collections::hash_map::Entry;\n use std::collections::VecDeque;\n \n-use infer::region_constraints::{Constraint, RegionConstraintData};\n-use infer::InferCtxt;\n+use crate::infer::region_constraints::{Constraint, RegionConstraintData};\n+use crate::infer::InferCtxt;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n \n-use ty::fold::TypeFolder;\n-use ty::{Region, RegionVid};\n+use crate::ty::fold::TypeFolder;\n+use crate::ty::{Region, RegionVid};\n \n // FIXME(twk): this is obviously not nice to duplicate like that\n #[derive(Eq, PartialEq, Hash, Copy, Clone, Debug)]"}, {"sha": "d9eb6d8157dfbdd3590af1e35eecd1fe10eb9510", "filename": "src/librustc/traits/chalk_fulfill.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fchalk_fulfill.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,4 +1,4 @@\n-use traits::{\n+use crate::traits::{\n     Environment,\n     InEnvironment,\n     TraitEngine,\n@@ -8,10 +8,10 @@ use traits::{\n     FulfillmentErrorCode,\n     SelectionError,\n };\n-use traits::query::NoSolution;\n-use infer::InferCtxt;\n-use infer::canonical::{Canonical, OriginalQueryValues};\n-use ty::{self, Ty};\n+use crate::traits::query::NoSolution;\n+use crate::infer::InferCtxt;\n+use crate::infer::canonical::{Canonical, OriginalQueryValues};\n+use crate::ty::{self, Ty};\n use rustc_data_structures::fx::FxHashSet;\n \n pub type CanonicalGoal<'tcx> = Canonical<'tcx, InEnvironment<'tcx, ty::Predicate<'tcx>>>;"}, {"sha": "eed9345afae169ea3c9c5c45a41b117c8fe25fea", "filename": "src/librustc/traits/codegen/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fcodegen%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fcodegen%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcodegen%2Fmod.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -3,16 +3,16 @@\n // seems likely that they should eventually be merged into more\n // general routines.\n \n-use dep_graph::{DepKind, DepTrackingMapConfig};\n+use crate::dep_graph::{DepKind, DepTrackingMapConfig};\n use std::marker::PhantomData;\n use syntax_pos::DUMMY_SP;\n-use infer::InferCtxt;\n+use crate::infer::InferCtxt;\n use syntax_pos::Span;\n-use traits::{FulfillmentContext, Obligation, ObligationCause, SelectionContext,\n+use crate::traits::{FulfillmentContext, Obligation, ObligationCause, SelectionContext,\n              TraitEngine, Vtable};\n-use ty::{self, Ty, TyCtxt};\n-use ty::subst::{Subst, Substs};\n-use ty::fold::TypeFoldable;\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::subst::{Subst, Substs};\n+use crate::ty::fold::TypeFoldable;\n \n /// Attempts to resolve an obligation to a vtable.. The result is\n /// a shallow vtable resolution -- meaning that we do not"}, {"sha": "4fe7a1507f737081bee3c721ed3d3accc62f4c27", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -4,17 +4,17 @@\n //! [trait-resolution]: https://rust-lang.github.io/rustc-guide/traits/resolution.html\n //! [trait-specialization]: https://rust-lang.github.io/rustc-guide/traits/specialization.html\n \n-use infer::CombinedSnapshot;\n-use hir::def_id::{DefId, LOCAL_CRATE};\n+use crate::infer::CombinedSnapshot;\n+use crate::hir::def_id::{DefId, LOCAL_CRATE};\n use syntax_pos::DUMMY_SP;\n-use traits::{self, Normalized, SelectionContext, Obligation, ObligationCause};\n-use traits::IntercrateMode;\n-use traits::select::IntercrateAmbiguityCause;\n-use ty::{self, Ty, TyCtxt};\n-use ty::fold::TypeFoldable;\n-use ty::subst::Subst;\n+use crate::traits::{self, Normalized, SelectionContext, Obligation, ObligationCause};\n+use crate::traits::IntercrateMode;\n+use crate::traits::select::IntercrateAmbiguityCause;\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::fold::TypeFoldable;\n+use crate::ty::subst::Subst;\n \n-use infer::{InferOk};\n+use crate::infer::{InferOk};\n \n /// Whether we do the orphan check relative to this crate or\n /// to some remote crate.\n@@ -39,7 +39,7 @@ pub struct OverlapResult<'tcx> {\n     pub involves_placeholder: bool,\n }\n \n-pub fn add_placeholder_note(err: &mut ::errors::DiagnosticBuilder<'_>) {\n+pub fn add_placeholder_note(err: &mut crate::errors::DiagnosticBuilder<'_>) {\n     err.note(&format!(\n         \"this behavior recently changed as a result of a bug fix; \\\n          see rust-lang/rust#56105 for details\""}, {"sha": "2f019d823ff5d2a7a5f3b6d02684d58ad502bd9b", "filename": "src/librustc/traits/engine.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fengine.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,7 +1,7 @@\n-use infer::InferCtxt;\n-use ty::{self, Ty, TyCtxt, ToPredicate};\n-use traits::Obligation;\n-use hir::def_id::DefId;\n+use crate::infer::InferCtxt;\n+use crate::ty::{self, Ty, TyCtxt, ToPredicate};\n+use crate::traits::Obligation;\n+use crate::hir::def_id::DefId;\n \n use super::{ChalkFulfillmentContext, FulfillmentContext, FulfillmentError};\n use super::{ObligationCause, PredicateObligation};"}, {"sha": "79afc593a4676126f2fa78f204f7b62786b29c2c", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -17,23 +17,23 @@ use super::{\n     Overflow,\n };\n \n-use errors::{Applicability, DiagnosticBuilder};\n-use hir;\n-use hir::Node;\n-use hir::def_id::DefId;\n-use infer::{self, InferCtxt};\n-use infer::type_variable::TypeVariableOrigin;\n+use crate::errors::{Applicability, DiagnosticBuilder};\n+use crate::hir;\n+use crate::hir::Node;\n+use crate::hir::def_id::DefId;\n+use crate::infer::{self, InferCtxt};\n+use crate::infer::type_variable::TypeVariableOrigin;\n use std::fmt;\n use syntax::ast;\n-use session::DiagnosticMessageId;\n-use ty::{self, AdtKind, ToPredicate, ToPolyTraitRef, Ty, TyCtxt, TypeFoldable};\n-use ty::GenericParamDefKind;\n-use ty::error::ExpectedFound;\n-use ty::fast_reject;\n-use ty::fold::TypeFolder;\n-use ty::subst::Subst;\n-use ty::SubtypePredicate;\n-use util::nodemap::{FxHashMap, FxHashSet};\n+use crate::session::DiagnosticMessageId;\n+use crate::ty::{self, AdtKind, ToPredicate, ToPolyTraitRef, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::GenericParamDefKind;\n+use crate::ty::error::ExpectedFound;\n+use crate::ty::fast_reject;\n+use crate::ty::fold::TypeFolder;\n+use crate::ty::subst::Subst;\n+use crate::ty::SubtypePredicate;\n+use crate::util::nodemap::{FxHashMap, FxHashSet};\n \n use syntax_pos::{DUMMY_SP, Span, ExpnInfo, ExpnFormat};\n "}, {"sha": "98784bccb6f820ed6606f3fb08268c99933c70f7", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,7 +1,7 @@\n-use infer::InferCtxt;\n-use mir::interpret::{GlobalId, ErrorHandled};\n-use ty::{self, Ty, TypeFoldable, ToPolyTraitRef};\n-use ty::error::ExpectedFound;\n+use crate::infer::InferCtxt;\n+use crate::mir::interpret::{GlobalId, ErrorHandled};\n+use crate::ty::{self, Ty, TypeFoldable, ToPolyTraitRef};\n+use crate::ty::error::ExpectedFound;\n use rustc_data_structures::obligation_forest::{DoCompleted, Error, ForestObligation};\n use rustc_data_structures::obligation_forest::{ObligationForest, ObligationProcessor};\n use rustc_data_structures::obligation_forest::{ProcessResult};"}, {"sha": "d1be8d377a84de747c7d66cef752a0be5f47a3ba", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -20,20 +20,20 @@ mod util;\n pub mod query;\n \n use chalk_engine;\n-use hir;\n-use hir::def_id::DefId;\n-use infer::{InferCtxt, SuppressRegionErrors};\n-use infer::outlives::env::OutlivesEnvironment;\n-use middle::region;\n-use mir::interpret::ErrorHandled;\n+use crate::hir;\n+use crate::hir::def_id::DefId;\n+use crate::infer::{InferCtxt, SuppressRegionErrors};\n+use crate::infer::outlives::env::OutlivesEnvironment;\n+use crate::middle::region;\n+use crate::mir::interpret::ErrorHandled;\n use rustc_data_structures::sync::Lrc;\n use syntax::ast;\n use syntax_pos::{Span, DUMMY_SP};\n-use ty::subst::Substs;\n-use ty::{self, AdtKind, List, Ty, TyCtxt, GenericParamDefKind, ToPredicate};\n-use ty::error::{ExpectedFound, TypeError};\n-use ty::fold::{TypeFolder, TypeFoldable, TypeVisitor};\n-use util::common::ErrorReported;\n+use crate::ty::subst::Substs;\n+use crate::ty::{self, AdtKind, List, Ty, TyCtxt, GenericParamDefKind, ToPredicate};\n+use crate::ty::error::{ExpectedFound, TypeError};\n+use crate::ty::fold::{TypeFolder, TypeFoldable, TypeVisitor};\n+use crate::util::common::ErrorReported;\n \n use std::fmt::Debug;\n use std::rc::Rc;"}, {"sha": "75eaa67e767c2d9bafcbec5e44ca85c67dda3a77", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -10,11 +10,11 @@\n \n use super::elaborate_predicates;\n \n-use hir::def_id::DefId;\n-use lint;\n-use traits::{self, Obligation, ObligationCause};\n-use ty::{self, Ty, TyCtxt, TypeFoldable, Predicate, ToPredicate};\n-use ty::subst::{Subst, Substs};\n+use crate::hir::def_id::DefId;\n+use crate::lint;\n+use crate::traits::{self, Obligation, ObligationCause};\n+use crate::ty::{self, Ty, TyCtxt, TypeFoldable, Predicate, ToPredicate};\n+use crate::ty::subst::{Subst, Substs};\n use std::borrow::Cow;\n use std::iter::{self};\n use syntax::ast::{self, Name};\n@@ -341,7 +341,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n             } else {\n                 // sanity check to make sure the receiver actually has the layout of a pointer\n \n-                use ty::layout::Abi;\n+                use crate::ty::layout::Abi;\n \n                 let param_env = self.param_env(method.def_id);\n "}, {"sha": "f61c32614cc931847700973c160074ef25b08314", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,9 +1,9 @@\n use fmt_macros::{Parser, Piece, Position};\n \n-use hir::def_id::DefId;\n-use ty::{self, TyCtxt, GenericParamDefKind};\n-use util::common::ErrorReported;\n-use util::nodemap::FxHashMap;\n+use crate::hir::def_id::DefId;\n+use crate::ty::{self, TyCtxt, GenericParamDefKind};\n+use crate::util::common::ErrorReported;\n+use crate::util::nodemap::FxHashMap;\n \n use syntax::ast::{MetaItem, NestedMetaItem};\n use syntax::attr;"}, {"sha": "99107a1a6d4e1e3944421d568cdd8ede788bbafd", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -12,16 +12,16 @@ use super::SelectionError;\n use super::{VtableImplData, VtableClosureData, VtableGeneratorData, VtableFnPointerData};\n use super::util;\n \n-use hir::def_id::DefId;\n-use infer::{InferCtxt, InferOk, LateBoundRegionConversionTime};\n-use infer::type_variable::TypeVariableOrigin;\n-use mir::interpret::{GlobalId};\n+use crate::hir::def_id::DefId;\n+use crate::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime};\n+use crate::infer::type_variable::TypeVariableOrigin;\n+use crate::mir::interpret::{GlobalId};\n use rustc_data_structures::snapshot_map::{Snapshot, SnapshotMap};\n use syntax::ast::Ident;\n-use ty::subst::{Subst, Substs};\n-use ty::{self, ToPredicate, ToPolyTraitRef, Ty, TyCtxt};\n-use ty::fold::{TypeFoldable, TypeFolder};\n-use util::common::FN_OUTPUT_NAME;\n+use crate::ty::subst::{Subst, Substs};\n+use crate::ty::{self, ToPredicate, ToPolyTraitRef, Ty, TyCtxt};\n+use crate::ty::fold::{TypeFoldable, TypeFolder};\n+use crate::util::common::FN_OUTPUT_NAME;\n \n /// Depending on the stage of compilation, we want projection to be\n /// more or less conservative."}, {"sha": "47ca416e6b5aae9a27526d804be8a18644537222", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,10 +1,10 @@\n-use infer::at::At;\n-use infer::InferOk;\n-use infer::canonical::OriginalQueryValues;\n+use crate::infer::at::At;\n+use crate::infer::InferOk;\n+use crate::infer::canonical::OriginalQueryValues;\n use std::iter::FromIterator;\n use syntax::source_map::Span;\n-use ty::subst::Kind;\n-use ty::{self, Ty, TyCtxt};\n+use crate::ty::subst::Kind;\n+use crate::ty::{self, Ty, TyCtxt};\n \n impl<'cx, 'gcx, 'tcx> At<'cx, 'gcx, 'tcx> {\n     /// Given a type `ty` of some value being dropped, computes a set"}, {"sha": "d5230f15c256536bf36d8a80333fa7eee52770a0", "filename": "src/librustc/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,6 +1,6 @@\n-use infer::InferCtxt;\n-use infer::canonical::OriginalQueryValues;\n-use traits::{EvaluationResult, PredicateObligation, SelectionContext,\n+use crate::infer::InferCtxt;\n+use crate::infer::canonical::OriginalQueryValues;\n+use crate::traits::{EvaluationResult, PredicateObligation, SelectionContext,\n              TraitQueryMode, OverflowError};\n \n impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {"}, {"sha": "6b9bdfd63f4d0a9e28b62e5fcabe7ee65eb38565", "filename": "src/librustc/traits/query/method_autoderef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Fmethod_autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Fmethod_autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fmethod_autoderef.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,6 +1,6 @@\n use rustc_data_structures::sync::Lrc;\n-use infer::canonical::{Canonical, QueryResponse};\n-use ty::Ty;\n+use crate::infer::canonical::{Canonical, QueryResponse};\n+use crate::ty::Ty;\n \n #[derive(Debug)]\n pub struct CandidateStep<'tcx> {"}, {"sha": "112a1d0e09c944e0b4281ebd34e3b1a51a4e8cd9", "filename": "src/librustc/traits/query/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -5,9 +5,9 @@\n //! The providers for the queries defined here can be found in\n //! `librustc_traits`.\n \n-use infer::canonical::Canonical;\n-use ty::error::TypeError;\n-use ty::{self, Ty};\n+use crate::infer::canonical::Canonical;\n+use crate::ty::error::TypeError;\n+use crate::ty::{self, Ty};\n \n pub mod dropck_outlives;\n pub mod evaluate_obligation;"}, {"sha": "f477f161bbb323f760edf08e3c1d63da023bb1f8", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -2,15 +2,15 @@\n //! which folds deeply, invoking the underlying\n //! `normalize_projection_ty` query when it encounters projections.\n \n-use infer::at::At;\n-use infer::canonical::OriginalQueryValues;\n-use infer::{InferCtxt, InferOk};\n-use mir::interpret::GlobalId;\n-use traits::project::Normalized;\n-use traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n-use ty::fold::{TypeFoldable, TypeFolder};\n-use ty::subst::{Subst, Substs};\n-use ty::{self, Ty, TyCtxt};\n+use crate::infer::at::At;\n+use crate::infer::canonical::OriginalQueryValues;\n+use crate::infer::{InferCtxt, InferOk};\n+use crate::mir::interpret::GlobalId;\n+use crate::traits::project::Normalized;\n+use crate::traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n+use crate::ty::fold::{TypeFoldable, TypeFolder};\n+use crate::ty::subst::{Subst, Substs};\n+use crate::ty::{self, Ty, TyCtxt};\n \n use super::NoSolution;\n "}, {"sha": "4fc61077e268a9d3216b4d2b130dd94a671372d2", "filename": "src/librustc/traits/query/normalize_erasing_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize_erasing_regions.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -7,8 +7,8 @@\n //! `normalize_ty_after_erasing_regions` query for each type found\n //! within. (This underlying query is what is cached.)\n \n-use ty::{self, Ty, TyCtxt};\n-use ty::fold::{TypeFoldable, TypeFolder};\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::fold::{TypeFoldable, TypeFolder};\n \n impl<'cx, 'tcx> TyCtxt<'cx, 'tcx, 'tcx> {\n     /// Erase the regions in `value` and then fully normalize all the"}, {"sha": "e57236b999babe2cddb71dcd39458cd9e6ba6612", "filename": "src/librustc/traits/query/outlives_bounds.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,12 +1,12 @@\n-use infer::InferCtxt;\n-use infer::canonical::OriginalQueryValues;\n+use crate::infer::InferCtxt;\n+use crate::infer::canonical::OriginalQueryValues;\n use syntax::ast;\n use syntax::source_map::Span;\n-use traits::{FulfillmentContext, ObligationCause, TraitEngine, TraitEngineExt};\n-use traits::query::NoSolution;\n-use ty::{self, Ty, TyCtxt};\n+use crate::traits::{FulfillmentContext, ObligationCause, TraitEngine, TraitEngineExt};\n+use crate::traits::query::NoSolution;\n+use crate::ty::{self, Ty, TyCtxt};\n \n-use ich::StableHashingContext;\n+use crate::ich::StableHashingContext;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n                                            StableHasherResult};\n use std::mem;"}, {"sha": "d9f573eb7e291a3d4987db36c7b981c211eec989", "filename": "src/librustc/traits/query/type_op/ascribe_user_type.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,8 +1,8 @@\n-use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n-use traits::query::Fallible;\n-use hir::def_id::DefId;\n-use ty::{ParamEnvAnd, Ty, TyCtxt};\n-use ty::subst::UserSubsts;\n+use crate::infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n+use crate::traits::query::Fallible;\n+use crate::hir::def_id::DefId;\n+use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n+use crate::ty::subst::UserSubsts;\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n pub struct AscribeUserType<'tcx> {"}, {"sha": "7e38282cc1adcd2d1d19dd4196f76cb7fb99f3c3", "filename": "src/librustc/traits/query/type_op/custom.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,12 +1,12 @@\n-use infer::{InferCtxt, InferOk};\n+use crate::infer::{InferCtxt, InferOk};\n use std::fmt;\n-use traits::query::Fallible;\n+use crate::traits::query::Fallible;\n \n-use infer::canonical::query_response;\n-use infer::canonical::QueryRegionConstraint;\n+use crate::infer::canonical::query_response;\n+use crate::infer::canonical::QueryRegionConstraint;\n use std::rc::Rc;\n use syntax::source_map::DUMMY_SP;\n-use traits::{ObligationCause, TraitEngine, TraitEngineExt};\n+use crate::traits::{ObligationCause, TraitEngine, TraitEngineExt};\n \n pub struct CustomTypeOp<F, G> {\n     closure: F,"}, {"sha": "5c3ccc9a995371c182437077ca8a5f080bcfe34b", "filename": "src/librustc/traits/query/type_op/eq.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,6 +1,6 @@\n-use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n-use traits::query::Fallible;\n-use ty::{ParamEnvAnd, Ty, TyCtxt};\n+use crate::infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n+use crate::traits::query::Fallible;\n+use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n pub struct Eq<'tcx> {"}, {"sha": "c48ca33b13fbcb02624db51e624de2b28208f7e7", "filename": "src/librustc/traits/query/type_op/implied_outlives_bounds.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,7 +1,7 @@\n-use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n-use traits::query::outlives_bounds::OutlivesBound;\n-use traits::query::Fallible;\n-use ty::{ParamEnvAnd, Ty, TyCtxt};\n+use crate::infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n+use crate::traits::query::outlives_bounds::OutlivesBound;\n+use crate::traits::query::Fallible;\n+use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n pub struct ImpliedOutlivesBounds<'tcx> {"}, {"sha": "fd13acc7796f87906c1b4ba5c46971b1a0c0a7d6", "filename": "src/librustc/traits/query/type_op/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,14 +1,14 @@\n-use infer::canonical::{\n+use crate::infer::canonical::{\n     Canonical, Canonicalized, CanonicalizedQueryResponse, OriginalQueryValues,\n     QueryRegionConstraint, QueryResponse,\n };\n-use infer::{InferCtxt, InferOk};\n+use crate::infer::{InferCtxt, InferOk};\n use std::fmt;\n use std::rc::Rc;\n-use traits::query::Fallible;\n-use traits::ObligationCause;\n-use ty::fold::TypeFoldable;\n-use ty::{Lift, ParamEnvAnd, TyCtxt};\n+use crate::traits::query::Fallible;\n+use crate::traits::ObligationCause;\n+use crate::ty::fold::TypeFoldable;\n+use crate::ty::{Lift, ParamEnvAnd, TyCtxt};\n \n pub mod ascribe_user_type;\n pub mod custom;"}, {"sha": "346c18516234cc131215f498d1889da1c09fbe3b", "filename": "src/librustc/traits/query/type_op/normalize.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,8 +1,8 @@\n-use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n+use crate::infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n use std::fmt;\n-use traits::query::Fallible;\n-use ty::fold::TypeFoldable;\n-use ty::{self, Lift, ParamEnvAnd, Ty, TyCtxt};\n+use crate::traits::query::Fallible;\n+use crate::ty::fold::TypeFoldable;\n+use crate::ty::{self, Lift, ParamEnvAnd, Ty, TyCtxt};\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n pub struct Normalize<T> {"}, {"sha": "fc0c1c022fc80a1c01725c74d0d732c65e9f25c0", "filename": "src/librustc/traits/query/type_op/outlives.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,8 +1,8 @@\n-use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n-use traits::query::dropck_outlives::trivial_dropck_outlives;\n-use traits::query::dropck_outlives::DropckOutlivesResult;\n-use traits::query::Fallible;\n-use ty::{ParamEnvAnd, Ty, TyCtxt};\n+use crate::infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n+use crate::traits::query::dropck_outlives::trivial_dropck_outlives;\n+use crate::traits::query::dropck_outlives::DropckOutlivesResult;\n+use crate::traits::query::Fallible;\n+use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n #[derive(Copy, Clone, Debug)]\n pub struct DropckOutlives<'tcx> {"}, {"sha": "50dedf6e87f40d59f508915860cdb1415ea1e587", "filename": "src/librustc/traits/query/type_op/prove_predicate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,6 +1,6 @@\n-use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n-use traits::query::Fallible;\n-use ty::{ParamEnvAnd, Predicate, TyCtxt};\n+use crate::infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n+use crate::traits::query::Fallible;\n+use crate::ty::{ParamEnvAnd, Predicate, TyCtxt};\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n pub struct ProvePredicate<'tcx> {"}, {"sha": "c45fb06313e1600d13e8486b2f8d45bb83a40429", "filename": "src/librustc/traits/query/type_op/subtype.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,6 +1,6 @@\n-use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n-use traits::query::Fallible;\n-use ty::{ParamEnvAnd, Ty, TyCtxt};\n+use crate::infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n+use crate::traits::query::Fallible;\n+use crate::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n pub struct Subtype<'tcx> {"}, {"sha": "1e4cd145e17605786feab891f64b1208f3c6257f", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -27,25 +27,25 @@ use super::{\n     VtableGeneratorData, VtableImplData, VtableObjectData, VtableTraitAliasData,\n };\n \n-use dep_graph::{DepKind, DepNodeIndex};\n-use hir::def_id::DefId;\n-use infer::{InferCtxt, InferOk, TypeFreshener};\n-use middle::lang_items;\n-use mir::interpret::GlobalId;\n-use ty::fast_reject;\n-use ty::relate::TypeRelation;\n-use ty::subst::{Subst, Substs};\n-use ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable};\n-\n-use hir;\n+use crate::dep_graph::{DepKind, DepNodeIndex};\n+use crate::hir::def_id::DefId;\n+use crate::infer::{InferCtxt, InferOk, TypeFreshener};\n+use crate::middle::lang_items;\n+use crate::mir::interpret::GlobalId;\n+use crate::ty::fast_reject;\n+use crate::ty::relate::TypeRelation;\n+use crate::ty::subst::{Subst, Substs};\n+use crate::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+\n+use crate::hir;\n use rustc_data_structures::bit_set::GrowableBitSet;\n use rustc_data_structures::sync::Lock;\n use rustc_target::spec::abi::Abi;\n use std::cmp;\n use std::fmt::{self, Display};\n use std::iter;\n use std::rc::Rc;\n-use util::nodemap::{FxHashMap, FxHashSet};\n+use crate::util::nodemap::{FxHashMap, FxHashSet};\n \n pub struct SelectionContext<'cx, 'gcx: 'cx + 'tcx, 'tcx: 'cx> {\n     infcx: &'cx InferCtxt<'cx, 'gcx, 'tcx>,\n@@ -103,7 +103,7 @@ impl IntercrateAmbiguityCause {\n     /// See #23980 for details.\n     pub fn add_intercrate_ambiguity_hint<'a, 'tcx>(\n         &self,\n-        err: &mut ::errors::DiagnosticBuilder<'_>,\n+        err: &mut crate::errors::DiagnosticBuilder<'_>,\n     ) {\n         err.note(&self.intercrate_ambiguity_hint());\n     }"}, {"sha": "e7187005c132a17c98d029953ab9bb15e4173d55", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -11,16 +11,16 @@\n \n pub mod specialization_graph;\n \n-use hir::def_id::DefId;\n-use infer::{InferCtxt, InferOk};\n-use lint;\n-use traits::{self, coherence, FutureCompatOverlapErrorKind, ObligationCause, TraitEngine};\n+use crate::hir::def_id::DefId;\n+use crate::infer::{InferCtxt, InferOk};\n+use crate::lint;\n+use crate::traits::{self, coherence, FutureCompatOverlapErrorKind, ObligationCause, TraitEngine};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n use syntax_pos::DUMMY_SP;\n-use traits::select::IntercrateAmbiguityCause;\n-use ty::{self, TyCtxt, TypeFoldable};\n-use ty::subst::{Subst, Substs};\n+use crate::traits::select::IntercrateAmbiguityCause;\n+use crate::ty::{self, TyCtxt, TypeFoldable};\n+use crate::ty::subst::{Subst, Substs};\n \n use super::{SelectionContext, FulfillmentContext};\n use super::util::impl_trait_ref_and_oblig;"}, {"sha": "010555744b6c316875c4e67060c55e5c0ee88708", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,16 +1,16 @@\n use super::OverlapError;\n \n-use hir::def_id::DefId;\n-use ich::{self, StableHashingContext};\n+use crate::hir::def_id::DefId;\n+use crate::ich::{self, StableHashingContext};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n                                            StableHasherResult};\n-use traits;\n-use ty::{self, TyCtxt, TypeFoldable};\n-use ty::fast_reject::{self, SimplifiedType};\n+use crate::traits;\n+use crate::ty::{self, TyCtxt, TypeFoldable};\n+use crate::ty::fast_reject::{self, SimplifiedType};\n use rustc_data_structures::sync::Lrc;\n use syntax::ast::Ident;\n-use util::captures::Captures;\n-use util::nodemap::{DefIdMap, FxHashMap};\n+use crate::util::captures::Captures;\n+use crate::util::nodemap::{DefIdMap, FxHashMap};\n \n /// A per-trait graph of impls in specialization order. At the moment, this\n /// graph forms a tree rooted with the trait itself, with all other nodes\n@@ -489,7 +489,7 @@ impl<'a, 'gcx, 'tcx> Ancestors {\n         trait_def_id: DefId,\n     ) -> impl Iterator<Item = NodeItem<ty::AssociatedItem>> + Captures<'gcx> + Captures<'tcx> + 'a {\n         self.flat_map(move |node| {\n-            use ty::AssociatedKind::*;\n+            use crate::ty::AssociatedKind::*;\n             node.items(tcx).filter(move |impl_item| match (trait_item_kind, impl_item.kind) {\n                 | (Const, Const)\n                 | (Method, Method)"}, {"sha": "c5cc9e8b401822907b339e0bdd5fdc7d864705bb", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,9 +1,9 @@\n use chalk_engine;\n use smallvec::SmallVec;\n-use traits;\n-use traits::project::Normalized;\n-use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n-use ty::{self, Lift, TyCtxt};\n+use crate::traits;\n+use crate::traits::project::Normalized;\n+use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n+use crate::ty::{self, Lift, TyCtxt};\n use syntax::symbol::InternedString;\n \n use std::fmt;\n@@ -163,7 +163,7 @@ impl<'tcx> fmt::Debug for traits::MismatchedProjectionTypes<'tcx> {\n \n impl<'tcx> fmt::Display for traits::WhereClause<'tcx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use traits::WhereClause::*;\n+        use crate::traits::WhereClause::*;\n \n         // Bypass ppaux because it does not print out anonymous regions.\n         fn write_region_name<'tcx>(\n@@ -206,7 +206,7 @@ impl<'tcx> fmt::Display for traits::WhereClause<'tcx> {\n \n impl<'tcx> fmt::Display for traits::WellFormed<'tcx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use traits::WellFormed::*;\n+        use crate::traits::WellFormed::*;\n \n         match self {\n             Trait(trait_ref) => write!(fmt, \"WellFormed({})\", trait_ref),\n@@ -217,7 +217,7 @@ impl<'tcx> fmt::Display for traits::WellFormed<'tcx> {\n \n impl<'tcx> fmt::Display for traits::FromEnv<'tcx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use traits::FromEnv::*;\n+        use crate::traits::FromEnv::*;\n \n         match self {\n             Trait(trait_ref) => write!(fmt, \"FromEnv({})\", trait_ref),\n@@ -228,7 +228,7 @@ impl<'tcx> fmt::Display for traits::FromEnv<'tcx> {\n \n impl<'tcx> fmt::Display for traits::DomainGoal<'tcx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use traits::DomainGoal::*;\n+        use crate::traits::DomainGoal::*;\n \n         match self {\n             Holds(wc) => write!(fmt, \"{}\", wc),\n@@ -246,7 +246,7 @@ impl<'tcx> fmt::Display for traits::DomainGoal<'tcx> {\n \n impl fmt::Display for traits::QuantifierKind {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use traits::QuantifierKind::*;\n+        use crate::traits::QuantifierKind::*;\n \n         match self {\n             Universal => write!(fmt, \"forall\"),\n@@ -361,7 +361,7 @@ impl<'tcx> TypeVisitor<'tcx> for BoundNamesCollector {\n \n impl<'tcx> fmt::Display for traits::Goal<'tcx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use traits::GoalKind::*;\n+        use crate::traits::GoalKind::*;\n \n         match self {\n             Implies(hypotheses, goal) => {\n@@ -420,7 +420,7 @@ impl<'tcx> fmt::Display for traits::ProgramClause<'tcx> {\n \n impl<'tcx> fmt::Display for traits::Clause<'tcx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use traits::Clause::*;\n+        use crate::traits::Clause::*;\n \n         match self {\n             Implies(clause) => write!(fmt, \"{}\", clause),"}, {"sha": "67c919ac91610d3171d31186c73e5a14693998ee", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,10 +1,10 @@\n-use hir;\n-use hir::def_id::DefId;\n-use traits::specialize::specialization_graph::NodeItem;\n-use ty::{self, Ty, TyCtxt, ToPredicate, ToPolyTraitRef};\n-use ty::outlives::Component;\n-use ty::subst::{Kind, Subst, Substs};\n-use util::nodemap::FxHashSet;\n+use crate::hir;\n+use crate::hir::def_id::DefId;\n+use crate::traits::specialize::specialization_graph::NodeItem;\n+use crate::ty::{self, Ty, TyCtxt, ToPredicate, ToPolyTraitRef};\n+use crate::ty::outlives::Component;\n+use crate::ty::subst::{Kind, Subst, Substs};\n+use crate::util::nodemap::FxHashSet;\n \n use super::{Obligation, ObligationCause, PredicateObligation, SelectionContext, Normalized};\n "}, {"sha": "07fa441bb8076e3cce51f434ef33e1e98a2ce14a", "filename": "src/librustc/ty/_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2F_match.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,6 +1,6 @@\n-use ty::{self, Ty, TyCtxt};\n-use ty::error::TypeError;\n-use ty::relate::{self, Relate, TypeRelation, RelateResult};\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::error::TypeError;\n+use crate::ty::relate::{self, Relate, TypeRelation, RelateResult};\n \n /// A type \"A\" *matches* \"B\" if the fresh types in B could be\n /// substituted with values so as to make it equal to A. Matching is"}, {"sha": "68e7bd6e16abec7e1557dc0d946ae2e57c84676a", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,7 +1,7 @@\n-use hir;\n-use hir::def_id::DefId;\n-use ty::{self, Ty, TyCtxt};\n-use ty::subst::Substs;\n+use crate::hir;\n+use crate::hir::def_id::DefId;\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::subst::Substs;\n \n \n /// Represents coercing a value to a different type of value."}, {"sha": "1290141b0a6b03314f3651a1dfd791bd12950845", "filename": "src/librustc/ty/binding.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fbinding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fbinding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fbinding.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,6 +1,6 @@\n-use hir::BindingAnnotation::*;\n-use hir::BindingAnnotation;\n-use hir::Mutability;\n+use crate::hir::BindingAnnotation::*;\n+use crate::hir::BindingAnnotation;\n+use crate::hir::Mutability;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum BindingMode {"}, {"sha": "0b2112f42d5955af0d6667bddada424807d6fbac", "filename": "src/librustc/ty/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcast.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,7 +1,7 @@\n // Helpers for handling cast expressions, used in both\n // typeck and codegen.\n \n-use ty::{self, Ty};\n+use crate::ty::{self, Ty};\n \n use syntax::ast;\n "}, {"sha": "c9775b102931538b1d56d7ab1749b08c008efee6", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -6,15 +6,15 @@\n // The functionality in here is shared between persisting to crate metadata and\n // persisting to incr. comp. caches.\n \n-use hir::def_id::{DefId, CrateNum};\n-use infer::canonical::{CanonicalVarInfo, CanonicalVarInfos};\n+use crate::hir::def_id::{DefId, CrateNum};\n+use crate::infer::canonical::{CanonicalVarInfo, CanonicalVarInfos};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_serialize::{Decodable, Decoder, Encoder, Encodable, opaque};\n+use crate::rustc_serialize::{Decodable, Decoder, Encoder, Encodable, opaque};\n use std::hash::Hash;\n use std::intrinsics;\n-use ty::{self, Ty, TyCtxt};\n-use ty::subst::Substs;\n-use mir::interpret::Allocation;\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::subst::Substs;\n+use crate::mir::interpret::Allocation;\n \n /// The shorthand encoding uses an enum's variant index `usize`\n /// and is offset by this value so it never matches a real variant.\n@@ -283,7 +283,7 @@ macro_rules! implement_ty_decoder {\n             use $crate::ty::codec::*;\n             use $crate::ty::subst::Substs;\n             use $crate::hir::def_id::{CrateNum};\n-            use rustc_serialize::{Decoder, SpecializedDecoder};\n+            use crate::rustc_serialize::{Decoder, SpecializedDecoder};\n             use std::borrow::Cow;\n \n             impl<$($typaram ),*> Decoder for $DecoderName<$($typaram),*> {"}, {"sha": "1bb63867289179d5b89f68ade81ea7ff492d3477", "filename": "src/librustc/ty/constness.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fconstness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fconstness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fconstness.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,9 +1,9 @@\n-use ty::query::Providers;\n-use hir::def_id::DefId;\n-use hir;\n-use ty::TyCtxt;\n+use crate::ty::query::Providers;\n+use crate::hir::def_id::DefId;\n+use crate::hir;\n+use crate::ty::TyCtxt;\n use syntax_pos::symbol::Symbol;\n-use hir::map::blocks::FnLikeNode;\n+use crate::hir::map::blocks::FnLikeNode;\n use syntax::attr;\n \n impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {"}, {"sha": "140c772256d3f3f5f13eec34deba997ecc6235d3", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,48 +1,48 @@\n //! type context book-keeping\n \n-use dep_graph::DepGraph;\n-use dep_graph::{DepNode, DepConstructor};\n-use errors::DiagnosticBuilder;\n-use session::Session;\n-use session::config::{BorrowckMode, OutputFilenames};\n-use session::config::CrateType;\n-use middle;\n-use hir::{TraitCandidate, HirId, ItemKind, ItemLocalId, Node};\n-use hir::def::{Def, Export};\n-use hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE};\n-use hir::map as hir_map;\n-use hir::map::DefPathHash;\n-use lint::{self, Lint};\n-use ich::{StableHashingContext, NodeIdHashingMode};\n-use infer::canonical::{Canonical, CanonicalVarInfo, CanonicalVarInfos};\n-use infer::outlives::free_region_map::FreeRegionMap;\n-use middle::cstore::CrateStoreDyn;\n-use middle::cstore::EncodedMetadata;\n-use middle::lang_items;\n-use middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n-use middle::stability;\n-use mir::{self, Mir, interpret, ProjectionKind};\n-use mir::interpret::Allocation;\n-use ty::subst::{Kind, Substs, Subst};\n-use ty::ReprOptions;\n-use traits;\n-use traits::{Clause, Clauses, GoalKind, Goal, Goals};\n-use ty::{self, Ty, TypeAndMut};\n-use ty::{TyS, TyKind, List};\n-use ty::{AdtKind, AdtDef, ClosureSubsts, GeneratorSubsts, Region, Const, LazyConst};\n-use ty::{PolyFnSig, InferTy, ParamTy, ProjectionTy, ExistentialPredicate, Predicate};\n-use ty::RegionKind;\n-use ty::{TyVar, TyVid, IntVar, IntVid, FloatVar, FloatVid};\n-use ty::TyKind::*;\n-use ty::GenericParamDefKind;\n-use ty::layout::{LayoutDetails, TargetDataLayout, VariantIdx};\n-use ty::query;\n-use ty::steal::Steal;\n-use ty::subst::{UserSubsts, UnpackedKind};\n-use ty::{BoundVar, BindingMode};\n-use ty::CanonicalPolyFnSig;\n-use util::nodemap::{DefIdMap, DefIdSet, ItemLocalMap};\n-use util::nodemap::{FxHashMap, FxHashSet};\n+use crate::dep_graph::DepGraph;\n+use crate::dep_graph::{DepNode, DepConstructor};\n+use crate::errors::DiagnosticBuilder;\n+use crate::session::Session;\n+use crate::session::config::{BorrowckMode, OutputFilenames};\n+use crate::session::config::CrateType;\n+use crate::middle;\n+use crate::hir::{TraitCandidate, HirId, ItemKind, ItemLocalId, Node};\n+use crate::hir::def::{Def, Export};\n+use crate::hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE};\n+use crate::hir::map as hir_map;\n+use crate::hir::map::DefPathHash;\n+use crate::lint::{self, Lint};\n+use crate::ich::{StableHashingContext, NodeIdHashingMode};\n+use crate::infer::canonical::{Canonical, CanonicalVarInfo, CanonicalVarInfos};\n+use crate::infer::outlives::free_region_map::FreeRegionMap;\n+use crate::middle::cstore::CrateStoreDyn;\n+use crate::middle::cstore::EncodedMetadata;\n+use crate::middle::lang_items;\n+use crate::middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n+use crate::middle::stability;\n+use crate::mir::{self, Mir, interpret, ProjectionKind};\n+use crate::mir::interpret::Allocation;\n+use crate::ty::subst::{Kind, Substs, Subst};\n+use crate::ty::ReprOptions;\n+use crate::traits;\n+use crate::traits::{Clause, Clauses, GoalKind, Goal, Goals};\n+use crate::ty::{self, Ty, TypeAndMut};\n+use crate::ty::{TyS, TyKind, List};\n+use crate::ty::{AdtKind, AdtDef, ClosureSubsts, GeneratorSubsts, Region, Const, LazyConst};\n+use crate::ty::{PolyFnSig, InferTy, ParamTy, ProjectionTy, ExistentialPredicate, Predicate};\n+use crate::ty::RegionKind;\n+use crate::ty::{TyVar, TyVid, IntVar, IntVid, FloatVar, FloatVid};\n+use crate::ty::TyKind::*;\n+use crate::ty::GenericParamDefKind;\n+use crate::ty::layout::{LayoutDetails, TargetDataLayout, VariantIdx};\n+use crate::ty::query;\n+use crate::ty::steal::Steal;\n+use crate::ty::subst::{UserSubsts, UnpackedKind};\n+use crate::ty::{BoundVar, BindingMode};\n+use crate::ty::CanonicalPolyFnSig;\n+use crate::util::nodemap::{DefIdMap, DefIdSet, ItemLocalMap};\n+use crate::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::interner::HashInterner;\n use smallvec::SmallVec;\n use rustc_data_structures::stable_hasher::{HashStable, hash_stable_hashmap,\n@@ -73,7 +73,7 @@ use syntax::feature_gate;\n use syntax::symbol::{Symbol, keywords, InternedString};\n use syntax_pos::Span;\n \n-use hir;\n+use crate::hir;\n \n pub struct AllArenas<'tcx> {\n     pub global: WorkerLocal<GlobalArenas<'tcx>>,\n@@ -1822,18 +1822,18 @@ pub mod tls {\n     use std::marker::PhantomData;\n     use std::ptr;\n     use syntax_pos;\n-    use ty::query;\n-    use errors::{Diagnostic, TRACK_DIAGNOSTICS};\n+    use crate::ty::query;\n+    use crate::errors::{Diagnostic, TRACK_DIAGNOSTICS};\n     use rustc_data_structures::OnDrop;\n     use rustc_data_structures::sync::{self, Lrc, Lock};\n     use rustc_data_structures::thin_vec::ThinVec;\n-    use dep_graph::TaskDeps;\n+    use crate::dep_graph::TaskDeps;\n \n     #[cfg(not(parallel_compiler))]\n     use std::cell::Cell;\n \n     #[cfg(parallel_compiler)]\n-    use rayon_core;\n+    use rustc_rayon_core as rayon_core;\n \n     /// This is the implicit state of rustc. It contains the current\n     /// TyCtxt and query. It is updated when creating a local interner or\n@@ -2114,8 +2114,8 @@ macro_rules! sty_debug_print {\n         // variable names.\n         #[allow(non_snake_case)]\n         mod inner {\n-            use ty::{self, TyCtxt};\n-            use ty::context::Interned;\n+            use crate::ty::{self, TyCtxt};\n+            use crate::ty::context::Interned;\n \n             #[derive(Copy, Clone)]\n             struct DebugStat {"}, {"sha": "0431afcc76c9e4250417d37cdc11b1e4fe32d5b1", "filename": "src/librustc/ty/erase_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferase_regions.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,5 +1,5 @@\n-use ty::{self, Ty, TyCtxt, TypeFlags};\n-use ty::fold::{TypeFolder, TypeFoldable};\n+use crate::ty::{self, Ty, TyCtxt, TypeFlags};\n+use crate::ty::fold::{TypeFolder, TypeFoldable};\n \n pub(super) fn provide(providers: &mut ty::query::Providers<'_>) {\n     *providers = ty::query::Providers {"}, {"sha": "d0c9677ea6ecb8d3b845a042303b17c7908affbf", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,13 +1,13 @@\n-use hir::def_id::DefId;\n-use ty::{self, Region, Ty, TyCtxt};\n+use crate::hir::def_id::DefId;\n+use crate::ty::{self, Region, Ty, TyCtxt};\n use std::borrow::Cow;\n use std::fmt;\n use rustc_target::spec::abi;\n use syntax::ast;\n-use errors::{Applicability, DiagnosticBuilder};\n+use crate::errors::{Applicability, DiagnosticBuilder};\n use syntax_pos::Span;\n \n-use hir;\n+use crate::hir;\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq)]\n pub struct ExpectedFound<T> {"}, {"sha": "59ab4561f2c8778811f567b6118e6b566aeed585", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,12 +1,12 @@\n-use hir::def_id::DefId;\n-use ich::StableHashingContext;\n+use crate::hir::def_id::DefId;\n+use crate::ich::StableHashingContext;\n use rustc_data_structures::stable_hasher::{StableHasher, StableHasherResult,\n                                            HashStable};\n use std::fmt::Debug;\n use std::hash::Hash;\n use std::mem;\n use syntax::ast;\n-use ty::{self, Ty, TyCtxt};\n+use crate::ty::{self, Ty, TyCtxt};\n \n use self::SimplifiedTypeGen::*;\n "}, {"sha": "25ec3e49cdf67361f2ccf2f56166f36a17632992", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,5 +1,5 @@\n-use ty::subst::Substs;\n-use ty::{self, Ty, TypeFlags, TypeFoldable};\n+use crate::ty::subst::Substs;\n+use crate::ty::{self, Ty, TypeFlags, TypeFoldable};\n \n #[derive(Debug)]\n pub struct FlagComputation {"}, {"sha": "306c69666e596b4bbf913e15b79102f9189f75d4", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -29,12 +29,12 @@\n //! These methods return true to indicate that the visitor has found what it is looking for\n //! and does not need to visit anything else.\n \n-use hir::def_id::DefId;\n-use ty::{self, Binder, Ty, TyCtxt, TypeFlags};\n+use crate::hir::def_id::DefId;\n+use crate::ty::{self, Binder, Ty, TyCtxt, TypeFlags};\n \n use std::collections::BTreeMap;\n use std::fmt;\n-use util::nodemap::FxHashSet;\n+use crate::util::nodemap::FxHashSet;\n \n /// The TypeFoldable trait is implemented for every type that can be folded.\n /// Basically, every type that has a corresponding method in TypeFolder."}, {"sha": "73b7d74d9dafe79ba76b5029cb3dc6c6a825217a", "filename": "src/librustc/ty/inhabitedness/def_id_forest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,8 +1,8 @@\n use std::mem;\n use smallvec::SmallVec;\n use syntax::ast::CRATE_NODE_ID;\n-use ty::context::TyCtxt;\n-use ty::{DefId, DefIdTree};\n+use crate::ty::context::TyCtxt;\n+use crate::ty::{DefId, DefIdTree};\n \n /// Represents a forest of DefIds closed under the ancestor relation. That is,\n /// if a DefId representing a module is contained in the forest then all"}, {"sha": "601ffe70eec18ce07a711c7bdac02e560a3f623b", "filename": "src/librustc/ty/inhabitedness/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,8 +1,8 @@\n-use ty::context::TyCtxt;\n-use ty::{AdtDef, VariantDef, FieldDef, Ty, TyS};\n-use ty::{self, DefId, Substs};\n-use ty::{AdtKind, Visibility};\n-use ty::TyKind::*;\n+use crate::ty::context::TyCtxt;\n+use crate::ty::{AdtDef, VariantDef, FieldDef, Ty, TyS};\n+use crate::ty::{self, DefId, Substs};\n+use crate::ty::{AdtKind, Visibility};\n+use crate::ty::TyKind::*;\n \n pub use self::def_id_forest::DefIdForest;\n "}, {"sha": "e4fe93d5deaeac812ed8955f5246419afb9a7ec4", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,9 +1,9 @@\n-use hir::Unsafety;\n-use hir::def_id::DefId;\n-use ty::{self, Ty, PolyFnSig, TypeFoldable, Substs, TyCtxt};\n-use traits;\n+use crate::hir::Unsafety;\n+use crate::hir::def_id::DefId;\n+use crate::ty::{self, Ty, PolyFnSig, TypeFoldable, Substs, TyCtxt};\n+use crate::traits;\n use rustc_target::spec::abi::Abi;\n-use util::ppaux;\n+use crate::util::ppaux;\n \n use std::fmt;\n use std::iter;\n@@ -141,7 +141,7 @@ impl<'tcx> InstanceDef<'tcx> {\n         &self,\n         tcx: TyCtxt<'a, 'tcx, 'tcx>\n     ) -> bool {\n-        use hir::map::DefPathData;\n+        use crate::hir::map::DefPathData;\n         let def_id = match *self {\n             ty::InstanceDef::Item(def_id) => def_id,\n             ty::InstanceDef::DropGlue(_, Some(_)) => return false,"}, {"sha": "f89e50d696945bda60e8c7c2cae0d7350de2ccb8", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,8 +1,8 @@\n-use hir;\n-use hir::map::DefPathData;\n-use hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use ty::{self, DefIdTree, Ty, TyCtxt};\n-use middle::cstore::{ExternCrate, ExternCrateSource};\n+use crate::hir;\n+use crate::hir::map::DefPathData;\n+use crate::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use crate::ty::{self, DefIdTree, Ty, TyCtxt};\n+use crate::middle::cstore::{ExternCrate, ExternCrateSource};\n use syntax::ast;\n use syntax::symbol::{keywords, LocalInternedString, Symbol};\n "}, {"sha": "8401d0861cad2f1e537ba94fa607e2d7272739fe", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,5 +1,5 @@\n-use session::{self, DataTypeKind};\n-use ty::{self, Ty, TyCtxt, TypeFoldable, ReprOptions};\n+use crate::session::{self, DataTypeKind};\n+use crate::ty::{self, Ty, TyCtxt, TypeFoldable, ReprOptions};\n \n use syntax::ast::{self, Ident, IntTy, UintTy};\n use syntax::attr;\n@@ -12,7 +12,7 @@ use std::iter;\n use std::mem;\n use std::ops::Bound;\n \n-use ich::StableHashingContext;\n+use crate::ich::StableHashingContext;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n                                            StableHasherResult};\n@@ -1872,7 +1872,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for Variants {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use ty::layout::Variants::*;\n+        use crate::ty::layout::Variants::*;\n         mem::discriminant(self).hash_stable(hcx, hasher);\n \n         match *self {\n@@ -1908,7 +1908,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for FieldPlacement {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use ty::layout::FieldPlacement::*;\n+        use crate::ty::layout::FieldPlacement::*;\n         mem::discriminant(self).hash_stable(hcx, hasher);\n \n         match *self {\n@@ -1941,7 +1941,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for Abi {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use ty::layout::Abi::*;\n+        use crate::ty::layout::Abi::*;\n         mem::discriminant(self).hash_stable(hcx, hasher);\n \n         match *self {\n@@ -1975,29 +1975,29 @@ impl<'a> HashStable<StableHashingContext<'a>> for Scalar {\n     }\n }\n \n-impl_stable_hash_for!(struct ::ty::layout::LayoutDetails {\n+impl_stable_hash_for!(struct crate::ty::layout::LayoutDetails {\n     variants,\n     fields,\n     abi,\n     size,\n     align\n });\n \n-impl_stable_hash_for!(enum ::ty::layout::Integer {\n+impl_stable_hash_for!(enum crate::ty::layout::Integer {\n     I8,\n     I16,\n     I32,\n     I64,\n     I128\n });\n \n-impl_stable_hash_for!(enum ::ty::layout::Primitive {\n+impl_stable_hash_for!(enum crate::ty::layout::Primitive {\n     Int(integer, signed),\n     Float(fty),\n     Pointer\n });\n \n-impl_stable_hash_for!(struct ::ty::layout::AbiAndPrefAlign {\n+impl_stable_hash_for!(struct crate::ty::layout::AbiAndPrefAlign {\n     abi,\n     pref\n });\n@@ -2023,7 +2023,7 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for LayoutError<'gcx>\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use ty::layout::LayoutError::*;\n+        use crate::ty::layout::LayoutError::*;\n         mem::discriminant(self).hash_stable(hcx, hasher);\n \n         match *self {"}, {"sha": "60e3ac673a0a0c0d20420afed63234faaf4556f5", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -4,31 +4,31 @@ pub use self::BorrowKind::*;\n pub use self::IntVarValue::*;\n pub use self::fold::TypeFoldable;\n \n-use hir::{map as hir_map, FreevarMap, GlobMap, TraitMap};\n-use hir::Node;\n-use hir::def::{Def, CtorKind, ExportMap};\n-use hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use hir::map::DefPathData;\n+use crate::hir::{map as hir_map, FreevarMap, GlobMap, TraitMap};\n+use crate::hir::Node;\n+use crate::hir::def::{Def, CtorKind, ExportMap};\n+use crate::hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use crate::hir::map::DefPathData;\n use rustc_data_structures::svh::Svh;\n-use ich::Fingerprint;\n-use ich::StableHashingContext;\n-use infer::canonical::Canonical;\n-use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n-use middle::resolve_lifetime::ObjectLifetimeDefault;\n-use mir::Mir;\n-use mir::interpret::{GlobalId, ErrorHandled};\n-use mir::GeneratorLayout;\n-use session::CrateDisambiguator;\n-use traits::{self, Reveal};\n-use ty;\n-use ty::layout::VariantIdx;\n-use ty::subst::{Subst, Substs};\n-use ty::util::{IntTypeExt, Discr};\n-use ty::walk::TypeWalker;\n-use util::captures::Captures;\n-use util::nodemap::{NodeSet, DefIdMap, FxHashMap};\n+use crate::ich::Fingerprint;\n+use crate::ich::StableHashingContext;\n+use crate::infer::canonical::Canonical;\n+use crate::middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n+use crate::middle::resolve_lifetime::ObjectLifetimeDefault;\n+use crate::mir::Mir;\n+use crate::mir::interpret::{GlobalId, ErrorHandled};\n+use crate::mir::GeneratorLayout;\n+use crate::session::CrateDisambiguator;\n+use crate::traits::{self, Reveal};\n+use crate::ty;\n+use crate::ty::layout::VariantIdx;\n+use crate::ty::subst::{Subst, Substs};\n+use crate::ty::util::{IntTypeExt, Discr};\n+use crate::ty::walk::TypeWalker;\n+use crate::util::captures::Captures;\n+use crate::util::nodemap::{NodeSet, DefIdMap, FxHashMap};\n use arena::SyncDroplessArena;\n-use session::DataTypeKind;\n+use crate::session::DataTypeKind;\n \n use serialize::{self, Encodable, Encoder};\n use std::cell::RefCell;\n@@ -50,7 +50,7 @@ use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::stable_hasher::{StableHasher, StableHasherResult,\n                                            HashStable};\n \n-use hir;\n+use crate::hir;\n \n pub use self::sty::{Binder, BoundTy, BoundTyKind, BoundVar, DebruijnIndex, INNERMOST};\n pub use self::sty::{FnSig, GenSig, CanonicalPolyFnSig, PolyFnSig, PolyGenSig};\n@@ -2277,7 +2277,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                     })\n                 } else {\n                     info!(\"invalid enum discriminant: {:#?}\", val);\n-                    ::mir::interpret::struct_error(\n+                    crate::mir::interpret::struct_error(\n                         tcx.at(tcx.def_span(expr_did)),\n                         \"constant evaluation of enum discriminant resulted in non-integer\",\n                     ).emit();"}, {"sha": "5b21ed5abd77b0b425045fb1e308158324be12a8", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -3,7 +3,7 @@\n // RFC for reference.\n \n use smallvec::SmallVec;\n-use ty::{self, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n \n #[derive(Debug)]\n pub enum Component<'tcx> {"}, {"sha": "255e39eaccd6d72b7e92a79007adc2821fc096d7", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,27 +1,27 @@\n-use dep_graph::SerializedDepNodeIndex;\n-use dep_graph::DepNode;\n-use hir::def_id::{CrateNum, DefId, DefIndex};\n-use mir::interpret::GlobalId;\n-use traits;\n-use traits::query::{\n+use crate::dep_graph::SerializedDepNodeIndex;\n+use crate::dep_graph::DepNode;\n+use crate::hir::def_id::{CrateNum, DefId, DefIndex};\n+use crate::mir::interpret::GlobalId;\n+use crate::traits;\n+use crate::traits::query::{\n     CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal,\n     CanonicalTypeOpAscribeUserTypeGoal, CanonicalTypeOpEqGoal, CanonicalTypeOpNormalizeGoal,\n     CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpSubtypeGoal,\n };\n-use ty::{self, ParamEnvAnd, Ty, TyCtxt};\n-use ty::subst::Substs;\n-use ty::query::queries;\n-use ty::query::Query;\n-use ty::query::QueryCache;\n-use util::profiling::ProfileCategory;\n+use crate::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n+use crate::ty::subst::Substs;\n+use crate::ty::query::queries;\n+use crate::ty::query::Query;\n+use crate::ty::query::QueryCache;\n+use crate::util::profiling::ProfileCategory;\n \n use std::borrow::Cow;\n use std::hash::Hash;\n use std::fmt::Debug;\n use syntax_pos::symbol::InternedString;\n use rustc_data_structures::sync::Lock;\n use rustc_data_structures::stable_hasher::HashStable;\n-use ich::StableHashingContext;\n+use crate::ich::StableHashingContext;\n \n // Query configuration and description traits.\n \n@@ -901,7 +901,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::optimized_mir<'tcx> {\n     fn try_load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                               id: SerializedDepNodeIndex)\n                               -> Option<Self::Value> {\n-        let mir: Option<::mir::Mir<'tcx>> = tcx.queries.on_disk_cache\n+        let mir: Option<crate::mir::Mir<'tcx>> = tcx.queries.on_disk_cache\n                                                .try_load_query_result(tcx, id);\n         mir.map(|x| tcx.alloc_mir(x))\n     }"}, {"sha": "0793366e6d479cd80792cfb586068ee3867b8539", "filename": "src/librustc/ty/query/job.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,25 +1,27 @@\n #![allow(warnings)]\n \n use std::mem;\n+use std::process;\n+use std::{fmt, ptr};\n+\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::{Lock, LockGuard, Lrc, Weak};\n use rustc_data_structures::OnDrop;\n use syntax_pos::Span;\n-use ty::tls;\n-use ty::query::Query;\n-use ty::query::plumbing::CycleError;\n+\n+use crate::ty::tls;\n+use crate::ty::query::Query;\n+use crate::ty::query::plumbing::CycleError;\n #[cfg(not(parallel_compiler))]\n-use ty::query::{\n+use crate::ty::query::{\n     plumbing::TryGetJob,\n     config::QueryDescription,\n };\n-use ty::context::TyCtxt;\n-use std::process;\n-use std::{fmt, ptr};\n+use crate::ty::context::TyCtxt;\n \n #[cfg(parallel_compiler)]\n use {\n-    rayon_core,\n+    rustc_rayon_core as rayon_core,\n     parking_lot::{Mutex, Condvar},\n     std::sync::atomic::Ordering,\n     std::thread,\n@@ -89,7 +91,7 @@ impl<'tcx> QueryJob<'tcx> {\n     /// For single threaded rustc there's no concurrent jobs running, so if we are waiting for any\n     /// query that means that there is a query cycle, thus this always running a cycle error.\n     #[cfg(parallel_compiler)]\n-    pub(super) fn await<'lcx>(\n+    pub(super) fn r#await<'lcx>(\n         &self,\n         tcx: TyCtxt<'_, 'tcx, 'lcx>,\n         span: Span,\n@@ -101,7 +103,7 @@ impl<'tcx> QueryJob<'tcx> {\n                 cycle: Lock::new(None),\n                 condvar: Condvar::new(),\n             });\n-            self.latch.await(&waiter);\n+            self.latch.r#await(&waiter);\n             // FIXME: Get rid of this lock. We have ownership of the QueryWaiter\n             // although another thread may still have a Lrc reference so we cannot\n             // use Lrc::get_mut\n@@ -200,7 +202,7 @@ impl<'tcx> QueryLatch<'tcx> {\n     }\n \n     /// Awaits the caller on this latch by blocking the current thread.\n-    fn await(&self, waiter: &Lrc<QueryWaiter<'tcx>>) {\n+    fn r#await(&self, waiter: &Lrc<QueryWaiter<'tcx>>) {\n         let mut info = self.info.lock();\n         if !info.complete {\n             // We push the waiter on to the `waiters` list. It can be accessed inside"}, {"sha": "f5eb7374cc19b445739a3b7f5d23bba044eeb49e", "filename": "src/librustc/ty/query/keys.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,12 +1,12 @@\n //! Defines the set of legal keys that can be used in queries.\n \n-use infer::canonical::Canonical;\n-use hir::def_id::{CrateNum, DefId, LOCAL_CRATE, DefIndex};\n-use traits;\n-use ty::{self, Ty, TyCtxt};\n-use ty::subst::Substs;\n-use ty::fast_reject::SimplifiedType;\n-use mir;\n+use crate::infer::canonical::Canonical;\n+use crate::hir::def_id::{CrateNum, DefId, LOCAL_CRATE, DefIndex};\n+use crate::traits;\n+use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::subst::Substs;\n+use crate::ty::fast_reject::SimplifiedType;\n+use crate::mir;\n \n use std::fmt::Debug;\n use std::hash::Hash;"}, {"sha": "20a700bb58dd16197884d98e16a083f67cf097f5", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,48 +1,48 @@\n-use dep_graph::{DepConstructor, DepNode};\n-use errors::DiagnosticBuilder;\n-use hir::def_id::{CrateNum, DefId, DefIndex};\n-use hir::def::{Def, Export};\n-use hir::{self, TraitCandidate, ItemLocalId, CodegenFnAttrs};\n+use crate::dep_graph::{DepConstructor, DepNode};\n+use crate::errors::DiagnosticBuilder;\n+use crate::hir::def_id::{CrateNum, DefId, DefIndex};\n+use crate::hir::def::{Def, Export};\n+use crate::hir::{self, TraitCandidate, ItemLocalId, CodegenFnAttrs};\n use rustc_data_structures::svh::Svh;\n-use infer::canonical::{self, Canonical};\n-use lint;\n-use middle::borrowck::BorrowCheckResult;\n-use middle::cstore::{ExternCrate, LinkagePreference, NativeLibrary, ForeignModule};\n-use middle::cstore::{NativeLibraryKind, DepKind, CrateSource};\n-use middle::privacy::AccessLevels;\n-use middle::reachable::ReachableSet;\n-use middle::region;\n-use middle::resolve_lifetime::{ResolveLifetimes, Region, ObjectLifetimeDefault};\n-use middle::stability::{self, DeprecationEntry};\n-use middle::lib_features::LibFeatures;\n-use middle::lang_items::{LanguageItems, LangItem};\n-use middle::exported_symbols::{SymbolExportLevel, ExportedSymbol};\n-use mir::interpret::{ConstEvalRawResult, ConstEvalResult};\n-use mir::mono::CodegenUnit;\n-use mir;\n-use mir::interpret::GlobalId;\n-use session::{CompileResult, CrateDisambiguator};\n-use session::config::{EntryFnType, OutputFilenames, OptLevel};\n-use traits::{self, Vtable};\n-use traits::query::{\n+use crate::infer::canonical::{self, Canonical};\n+use crate::lint;\n+use crate::middle::borrowck::BorrowCheckResult;\n+use crate::middle::cstore::{ExternCrate, LinkagePreference, NativeLibrary, ForeignModule};\n+use crate::middle::cstore::{NativeLibraryKind, DepKind, CrateSource};\n+use crate::middle::privacy::AccessLevels;\n+use crate::middle::reachable::ReachableSet;\n+use crate::middle::region;\n+use crate::middle::resolve_lifetime::{ResolveLifetimes, Region, ObjectLifetimeDefault};\n+use crate::middle::stability::{self, DeprecationEntry};\n+use crate::middle::lib_features::LibFeatures;\n+use crate::middle::lang_items::{LanguageItems, LangItem};\n+use crate::middle::exported_symbols::{SymbolExportLevel, ExportedSymbol};\n+use crate::mir::interpret::{ConstEvalRawResult, ConstEvalResult};\n+use crate::mir::mono::CodegenUnit;\n+use crate::mir;\n+use crate::mir::interpret::GlobalId;\n+use crate::session::{CompileResult, CrateDisambiguator};\n+use crate::session::config::{EntryFnType, OutputFilenames, OptLevel};\n+use crate::traits::{self, Vtable};\n+use crate::traits::query::{\n     CanonicalPredicateGoal, CanonicalProjectionGoal,\n     CanonicalTyGoal, CanonicalTypeOpAscribeUserTypeGoal,\n     CanonicalTypeOpEqGoal, CanonicalTypeOpSubtypeGoal, CanonicalTypeOpProvePredicateGoal,\n     CanonicalTypeOpNormalizeGoal, NoSolution,\n };\n-use traits::query::method_autoderef::MethodAutoderefStepsResult;\n-use traits::query::dropck_outlives::{DtorckConstraint, DropckOutlivesResult};\n-use traits::query::normalize::NormalizationResult;\n-use traits::query::outlives_bounds::OutlivesBound;\n-use traits::specialization_graph;\n-use traits::Clauses;\n-use ty::{self, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n-use ty::steal::Steal;\n-use ty::subst::Substs;\n-use util::nodemap::{DefIdSet, DefIdMap, ItemLocalSet};\n-use util::common::{ErrorReported};\n-use util::profiling::ProfileCategory::*;\n-use session::Session;\n+use crate::traits::query::method_autoderef::MethodAutoderefStepsResult;\n+use crate::traits::query::dropck_outlives::{DtorckConstraint, DropckOutlivesResult};\n+use crate::traits::query::normalize::NormalizationResult;\n+use crate::traits::query::outlives_bounds::OutlivesBound;\n+use crate::traits::specialization_graph;\n+use crate::traits::Clauses;\n+use crate::ty::{self, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n+use crate::ty::steal::Steal;\n+use crate::ty::subst::Substs;\n+use crate::util::nodemap::{DefIdSet, DefIdMap, ItemLocalSet};\n+use crate::util::common::{ErrorReported};\n+use crate::util::profiling::ProfileCategory::*;\n+use crate::session::Session;\n \n use rustc_data_structures::bit_set::BitSet;\n use rustc_data_structures::indexed_vec::IndexVec;"}, {"sha": "9c9bc0f6aa11c1cd788b3b2d805ea9af6d32efc8", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,28 +1,28 @@\n-use dep_graph::{DepNodeIndex, SerializedDepNodeIndex};\n-use errors::Diagnostic;\n-use hir;\n-use hir::def_id::{CrateNum, DefIndex, DefId, LocalDefId, LOCAL_CRATE};\n-use hir::map::definitions::DefPathHash;\n-use ich::{CachingSourceMapView, Fingerprint};\n-use mir::{self, interpret};\n-use mir::interpret::{AllocDecodingSession, AllocDecodingState};\n+use crate::dep_graph::{DepNodeIndex, SerializedDepNodeIndex};\n+use crate::errors::Diagnostic;\n+use crate::hir;\n+use crate::hir::def_id::{CrateNum, DefIndex, DefId, LocalDefId, LOCAL_CRATE};\n+use crate::hir::map::definitions::DefPathHash;\n+use crate::ich::{CachingSourceMapView, Fingerprint};\n+use crate::mir::{self, interpret};\n+use crate::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_data_structures::sync::{Lrc, Lock, HashMapExt, Once};\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n-use rustc_serialize::{Decodable, Decoder, Encodable, Encoder, opaque,\n+use crate::rustc_serialize::{Decodable, Decoder, Encodable, Encoder, opaque,\n                       SpecializedDecoder, SpecializedEncoder,\n                       UseSpecializedDecodable, UseSpecializedEncodable};\n-use session::{CrateDisambiguator, Session};\n+use crate::session::{CrateDisambiguator, Session};\n use std::mem;\n use syntax::ast::NodeId;\n use syntax::source_map::{SourceMap, StableSourceFileId};\n use syntax_pos::{BytePos, Span, DUMMY_SP, SourceFile};\n use syntax_pos::hygiene::{Mark, SyntaxContext, ExpnInfo};\n-use ty;\n-use ty::codec::{self as ty_codec, TyDecoder, TyEncoder};\n-use ty::context::TyCtxt;\n-use util::common::time;\n+use crate::ty;\n+use crate::ty::codec::{self as ty_codec, TyDecoder, TyEncoder};\n+use crate::ty::context::TyCtxt;\n+use crate::util::common::time;\n \n const TAG_FILE_FOOTER: u128 = 0xC0FFEE_C0FFEE_C0FFEE_C0FFEE_C0FFEE;\n \n@@ -202,7 +202,7 @@ impl<'sess> OnDiskCache<'sess> {\n             let mut query_result_index = EncodedQueryResultIndex::new();\n \n             time(tcx.sess, \"encode query results\", || {\n-                use ty::query::queries::*;\n+                use crate::ty::query::queries::*;\n                 let enc = &mut encoder;\n                 let qri = &mut query_result_index;\n \n@@ -225,11 +225,11 @@ impl<'sess> OnDiskCache<'sess> {\n                 encode_query_results::<specialization_graph_of<'_>, _>(tcx, enc, qri)?;\n \n                 // const eval is special, it only encodes successfully evaluated constants\n-                use ty::query::QueryAccessors;\n+                use crate::ty::query::QueryAccessors;\n                 let cache = const_eval::query_cache(tcx).borrow();\n                 assert!(cache.active.is_empty());\n                 for (key, entry) in cache.results.iter() {\n-                    use ty::query::config::QueryDescription;\n+                    use crate::ty::query::config::QueryDescription;\n                     if const_eval::cache_on_disk(tcx, key.clone()) {\n                         if let Ok(ref value) = entry.value {\n                             let dep_node = SerializedDepNodeIndex::new(entry.index.index());\n@@ -777,7 +777,7 @@ impl<'enc, 'a, 'tcx, E> CacheEncoder<'enc, 'a, 'tcx, E>\n                                                  value: &V)\n                                                  -> Result<(), E::Error>\n     {\n-        use ty::codec::TyEncoder;\n+        use crate::ty::codec::TyEncoder;\n         let start_pos = self.position();\n \n         tag.encode(self)?;"}, {"sha": "a26b21a1059fe4cfb2a209931c9eaec21293b2c4", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -2,19 +2,19 @@\n //! that generate the actual methods on tcx which find and execute the\n //! provider, manage the caches, and so forth.\n \n-use dep_graph::{DepNodeIndex, DepNode, DepKind, SerializedDepNodeIndex};\n-use errors::DiagnosticBuilder;\n-use errors::Level;\n-use errors::Diagnostic;\n-use errors::FatalError;\n-use ty::tls;\n-use ty::{TyCtxt};\n-use ty::query::Query;\n-use ty::query::config::{QueryConfig, QueryDescription};\n-use ty::query::job::{QueryJob, QueryResult, QueryInfo};\n-use ty::item_path;\n-\n-use util::common::{profq_msg, ProfileQueriesMsg, QueryMsg};\n+use crate::dep_graph::{DepNodeIndex, DepNode, DepKind, SerializedDepNodeIndex};\n+use crate::errors::DiagnosticBuilder;\n+use crate::errors::Level;\n+use crate::errors::Diagnostic;\n+use crate::errors::FatalError;\n+use crate::ty::tls;\n+use crate::ty::{TyCtxt};\n+use crate::ty::query::Query;\n+use crate::ty::query::config::{QueryConfig, QueryDescription};\n+use crate::ty::query::job::{QueryJob, QueryResult, QueryInfo};\n+use crate::ty::item_path;\n+\n+use crate::util::common::{profq_msg, ProfileQueriesMsg, QueryMsg};\n \n use rustc_data_structures::fx::{FxHashMap};\n use rustc_data_structures::sync::{Lrc, Lock};\n@@ -160,7 +160,7 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n             // thread\n             #[cfg(parallel_compiler)]\n             {\n-                if let Err(cycle) = job.await(tcx, span) {\n+                if let Err(cycle) = job.r#await(tcx, span) {\n                     return TryGetJob::JobCompleted(Err(cycle));\n                 }\n             }\n@@ -367,7 +367,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         // Fast path for when incr. comp. is off. `to_dep_node` is\n         // expensive for some DepKinds.\n         if !self.dep_graph.is_fully_enabled() {\n-            let null_dep_node = DepNode::new_no_params(::dep_graph::DepKind::Null);\n+            let null_dep_node = DepNode::new_no_params(crate::dep_graph::DepKind::Null);\n             return Ok(self.force_query_with_job::<Q>(key, job, null_dep_node).0);\n         }\n \n@@ -500,7 +500,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         dep_node_index: DepNodeIndex,\n     ) {\n         use rustc_data_structures::stable_hasher::{StableHasher, HashStable};\n-        use ich::Fingerprint;\n+        use crate::ich::Fingerprint;\n \n         assert!(Some(self.dep_graph.fingerprint_of(dep_node_index)) ==\n                 self.dep_graph.prev_fingerprint_of(dep_node),\n@@ -566,7 +566,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             self.dep_graph.mark_loaded_from_cache(dep_node_index, false);\n         }\n \n-        if dep_node.kind != ::dep_graph::DepKind::Null {\n+        if dep_node.kind != crate::dep_graph::DepKind::Null {\n             if unlikely!(!diagnostics.is_empty()) {\n                 self.queries.on_disk_cache\n                     .store_diagnostics(dep_node_index, diagnostics);\n@@ -698,13 +698,13 @@ macro_rules! define_queries_inner {\n         #[cfg(parallel_compiler)]\n         use ty::query::job::QueryResult;\n         use rustc_data_structures::sync::Lock;\n-        use {\n+        use crate::{\n             rustc_data_structures::stable_hasher::HashStable,\n             rustc_data_structures::stable_hasher::StableHasherResult,\n             rustc_data_structures::stable_hasher::StableHasher,\n             ich::StableHashingContext\n         };\n-        use util::profiling::ProfileCategory;\n+        use crate::util::profiling::ProfileCategory;\n \n         define_queries_struct! {\n             tcx: $tcx,\n@@ -947,7 +947,7 @@ macro_rules! define_queries_inner {\n             #[allow(unused)]\n             #[inline(always)]\n             fn to_dep_node(tcx: TyCtxt<'_, $tcx, '_>, key: &Self::Key) -> DepNode {\n-                use dep_graph::DepConstructor::*;\n+                use crate::dep_graph::DepConstructor::*;\n \n                 DepNode::new(tcx, $node(*key))\n             }\n@@ -1127,7 +1127,7 @@ macro_rules! define_provider_struct {\n pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n                                            dep_node: &DepNode)\n                                            -> bool {\n-    use hir::def_id::LOCAL_CRATE;\n+    use crate::hir::def_id::LOCAL_CRATE;\n \n     // We must avoid ever having to call force_from_dep_node() for a\n     // DepNode::CodegenUnit:\n@@ -1167,7 +1167,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n     macro_rules! force {\n         ($query:ident, $key:expr) => {\n             {\n-                tcx.force_query::<::ty::query::queries::$query<'_>>($key, DUMMY_SP, *dep_node);\n+                tcx.force_query::<crate::ty::query::queries::$query<'_>>($key, DUMMY_SP, *dep_node);\n             }\n         }\n     };\n@@ -1437,8 +1437,8 @@ macro_rules! impl_load_from_cache {\n             // Check whether the query invocation corresponding to the given\n             // DepNode is eligible for on-disk-caching.\n             pub fn cache_on_disk(&self, tcx: TyCtxt<'_, '_, '_>) -> bool {\n-                use ty::query::queries;\n-                use ty::query::QueryDescription;\n+                use crate::ty::query::queries;\n+                use crate::ty::query::QueryDescription;\n \n                 match self.kind {\n                     $(DepKind::$dep_kind => {"}, {"sha": "11f55208d6e48ba1ed762cd0945290fe4362db7d", "filename": "src/librustc/ty/query/values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fquery%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fquery%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fvalues.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,4 +1,4 @@\n-use ty::{self, Ty, TyCtxt};\n+use crate::ty::{self, Ty, TyCtxt};\n \n use syntax::symbol::Symbol;\n "}, {"sha": "3dbd0dc1d97f7dbd86280f3e58f7bb15a4a54fa2", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -4,18 +4,18 @@\n //! types or regions but can be other things. Examples of type relations are\n //! subtyping, type equality, etc.\n \n-use hir::def_id::DefId;\n-use ty::subst::{Kind, UnpackedKind, Substs};\n-use ty::{self, Ty, TyCtxt, TypeFoldable};\n-use ty::error::{ExpectedFound, TypeError};\n-use mir::interpret::GlobalId;\n-use util::common::ErrorReported;\n+use crate::hir::def_id::DefId;\n+use crate::ty::subst::{Kind, UnpackedKind, Substs};\n+use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::error::{ExpectedFound, TypeError};\n+use crate::mir::interpret::GlobalId;\n+use crate::util::common::ErrorReported;\n use syntax_pos::DUMMY_SP;\n use std::rc::Rc;\n use std::iter;\n use rustc_target::spec::abi;\n-use hir as ast;\n-use traits;\n+use crate::hir as ast;\n+use crate::traits;\n \n pub type RelateResult<'tcx, T> = Result<T, TypeError<'tcx>>;\n \n@@ -588,7 +588,7 @@ impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::ExistentialPredicate<'tcx>> {\n \n         let tcx = relation.tcx();\n         let v = a.iter().zip(b.iter()).map(|(ep_a, ep_b)| {\n-            use ty::ExistentialPredicate::*;\n+            use crate::ty::ExistentialPredicate::*;\n             match (*ep_a, *ep_b) {\n                 (Trait(ref a), Trait(ref b)) => Ok(Trait(relation.relate(a, b)?)),\n                 (Projection(ref a), Projection(ref b)) => Ok(Projection(relation.relate(a, b)?)),\n@@ -746,7 +746,7 @@ impl<'tcx> Relate<'tcx> for traits::WhereClause<'tcx> {\n     ) -> RelateResult<'tcx, traits::WhereClause<'tcx>>\n         where R: TypeRelation<'a, 'gcx, 'tcx>, 'gcx: 'tcx, 'tcx: 'a\n     {\n-        use traits::WhereClause::*;\n+        use crate::traits::WhereClause::*;\n         match (a, b) {\n             (Implemented(a_pred), Implemented(b_pred)) => {\n                 Ok(Implemented(relation.relate(a_pred, b_pred)?))\n@@ -783,7 +783,7 @@ impl<'tcx> Relate<'tcx> for traits::WellFormed<'tcx> {\n     ) -> RelateResult<'tcx, traits::WellFormed<'tcx>>\n         where R: TypeRelation<'a, 'gcx, 'tcx>, 'gcx: 'tcx, 'tcx: 'a\n     {\n-        use traits::WellFormed::*;\n+        use crate::traits::WellFormed::*;\n         match (a, b) {\n             (Trait(a_pred), Trait(b_pred)) => Ok(Trait(relation.relate(a_pred, b_pred)?)),\n             (Ty(a_ty), Ty(b_ty)) => Ok(Ty(relation.relate(a_ty, b_ty)?)),\n@@ -800,7 +800,7 @@ impl<'tcx> Relate<'tcx> for traits::FromEnv<'tcx> {\n     ) -> RelateResult<'tcx, traits::FromEnv<'tcx>>\n         where R: TypeRelation<'a, 'gcx, 'tcx>, 'gcx: 'tcx, 'tcx: 'a\n     {\n-        use traits::FromEnv::*;\n+        use crate::traits::FromEnv::*;\n         match (a, b) {\n             (Trait(a_pred), Trait(b_pred)) => Ok(Trait(relation.relate(a_pred, b_pred)?)),\n             (Ty(a_ty), Ty(b_ty)) => Ok(Ty(relation.relate(a_ty, b_ty)?)),\n@@ -817,7 +817,7 @@ impl<'tcx> Relate<'tcx> for traits::DomainGoal<'tcx> {\n     ) -> RelateResult<'tcx, traits::DomainGoal<'tcx>>\n         where R: TypeRelation<'a, 'gcx, 'tcx>, 'gcx: 'tcx, 'tcx: 'a\n     {\n-        use traits::DomainGoal::*;\n+        use crate::traits::DomainGoal::*;\n         match (a, b) {\n             (Holds(a_wc), Holds(b_wc)) => Ok(Holds(relation.relate(a_wc, b_wc)?)),\n             (WellFormed(a_wf), WellFormed(b_wf)) => Ok(WellFormed(relation.relate(a_wf, b_wf)?)),\n@@ -840,7 +840,7 @@ impl<'tcx> Relate<'tcx> for traits::Goal<'tcx> {\n     ) -> RelateResult<'tcx, traits::Goal<'tcx>>\n         where R: TypeRelation<'a, 'gcx, 'tcx>, 'gcx: 'tcx, 'tcx: 'a\n     {\n-        use traits::GoalKind::*;\n+        use crate::traits::GoalKind::*;\n         match (a, b) {\n             (Implies(a_clauses, a_goal), Implies(b_clauses, b_goal)) => {\n                 let clauses = relation.relate(a_clauses, b_clauses)?;\n@@ -904,7 +904,7 @@ impl<'tcx> Relate<'tcx> for traits::Clause<'tcx> {\n     ) -> RelateResult<'tcx, traits::Clause<'tcx>>\n         where R: TypeRelation<'a, 'gcx, 'tcx>, 'gcx: 'tcx, 'tcx: 'a\n     {\n-        use traits::Clause::*;\n+        use crate::traits::Clause::*;\n         match (a, b) {\n             (Implies(a_clause), Implies(b_clause)) => {\n                 let clause = relation.relate(a_clause, b_clause)?;"}, {"sha": "62a49238ebf3d71f0b2504a7a3e6ce1aeff2fa89", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -3,13 +3,13 @@\n //! hand, though we've recently added some macros (e.g.,\n //! `BraceStructLiftImpl!`) to help with the tedium.\n \n-use mir::ProjectionKind;\n-use mir::interpret::ConstValue;\n-use ty::{self, Lift, Ty, TyCtxt};\n-use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n+use crate::mir::ProjectionKind;\n+use crate::mir::interpret::ConstValue;\n+use crate::ty::{self, Lift, Ty, TyCtxt};\n+use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use smallvec::SmallVec;\n-use mir::interpret;\n+use crate::mir::interpret;\n \n use std::rc::Rc;\n \n@@ -23,35 +23,35 @@ CloneTypeFoldableAndLiftImpls! {\n     (),\n     bool,\n     usize,\n-    ::ty::layout::VariantIdx,\n+    crate::ty::layout::VariantIdx,\n     u64,\n     String,\n-    ::middle::region::Scope,\n+    crate::middle::region::Scope,\n     ::syntax::ast::FloatTy,\n     ::syntax::ast::NodeId,\n     ::syntax_pos::symbol::Symbol,\n-    ::hir::def::Def,\n-    ::hir::def_id::DefId,\n-    ::hir::InlineAsm,\n-    ::hir::MatchSource,\n-    ::hir::Mutability,\n-    ::hir::Unsafety,\n+    crate::hir::def::Def,\n+    crate::hir::def_id::DefId,\n+    crate::hir::InlineAsm,\n+    crate::hir::MatchSource,\n+    crate::hir::Mutability,\n+    crate::hir::Unsafety,\n     ::rustc_target::spec::abi::Abi,\n-    ::mir::Local,\n-    ::mir::Promoted,\n-    ::traits::Reveal,\n-    ::ty::adjustment::AutoBorrowMutability,\n-    ::ty::AdtKind,\n+    crate::mir::Local,\n+    crate::mir::Promoted,\n+    crate::traits::Reveal,\n+    crate::ty::adjustment::AutoBorrowMutability,\n+    crate::ty::AdtKind,\n     // Including `BoundRegion` is a *bit* dubious, but direct\n     // references to bound region appear in `ty::Error`, and aren't\n     // really meant to be folded. In general, we can only fold a fully\n     // general `Region`.\n-    ::ty::BoundRegion,\n-    ::ty::ClosureKind,\n-    ::ty::IntVarValue,\n-    ::ty::ParamTy,\n-    ::ty::UniverseIndex,\n-    ::ty::Variance,\n+    crate::ty::BoundRegion,\n+    crate::ty::ClosureKind,\n+    crate::ty::IntVarValue,\n+    crate::ty::ParamTy,\n+    crate::ty::UniverseIndex,\n+    crate::ty::Variance,\n     ::syntax_pos::Span,\n }\n \n@@ -421,7 +421,7 @@ impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for ty::error::ExpectedFound<T> {\n impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n     type Lifted = ty::error::TypeError<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n-        use ty::error::TypeError::*;\n+        use crate::ty::error::TypeError::*;\n \n         Some(match *self {\n             Mismatch => Mismatch,\n@@ -651,7 +651,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ProjectionKind<'tcx>> {\n \n impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        use ty::InstanceDef::*;\n+        use crate::ty::InstanceDef::*;\n         Self {\n             substs: self.substs.fold_with(folder),\n             def: match self.def {\n@@ -682,7 +682,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        use ty::InstanceDef::*;\n+        use crate::ty::InstanceDef::*;\n         self.substs.visit_with(visitor) ||\n         match self.def {\n             Item(did) | VtableShim(did) | Intrinsic(did) | Virtual(did, _) => {"}, {"sha": "d4c18c64c9951e4b1281ab7ff735897f33f61ffb", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,17 +1,17 @@\n //! This module contains `TyKind` and its major components.\n \n-use hir;\n-use hir::def_id::DefId;\n-use infer::canonical::Canonical;\n-use mir::interpret::ConstValue;\n-use middle::region;\n+use crate::hir;\n+use crate::hir::def_id::DefId;\n+use crate::infer::canonical::Canonical;\n+use crate::mir::interpret::ConstValue;\n+use crate::middle::region;\n use polonius_engine::Atom;\n use rustc_data_structures::indexed_vec::Idx;\n-use ty::subst::{Substs, Subst, Kind, UnpackedKind};\n-use ty::{self, AdtDef, TypeFlags, Ty, TyCtxt, TypeFoldable};\n-use ty::{List, TyS, ParamEnvAnd, ParamEnv};\n-use util::captures::Captures;\n-use mir::interpret::{Scalar, Pointer};\n+use crate::ty::subst::{Substs, Subst, Kind, UnpackedKind};\n+use crate::ty::{self, AdtDef, TypeFlags, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{List, TyS, ParamEnvAnd, ParamEnv};\n+use crate::util::captures::Captures;\n+use crate::mir::interpret::{Scalar, Pointer};\n \n use smallvec::SmallVec;\n use std::iter;\n@@ -107,6 +107,7 @@ pub enum TyKind<'tcx> {\n     /// definition and not a concrete use of it.\n     Adt(&'tcx AdtDef, &'tcx Substs<'tcx>),\n \n+    /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.\n     Foreign(DefId),\n \n     /// The pointee of a string slice. Written as `str`.\n@@ -550,7 +551,7 @@ impl<'a, 'gcx, 'tcx> ExistentialPredicate<'tcx> {\n impl<'a, 'gcx, 'tcx> Binder<ExistentialPredicate<'tcx>> {\n     pub fn with_self_ty(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, self_ty: Ty<'tcx>)\n         -> ty::Predicate<'tcx> {\n-        use ty::ToPredicate;\n+        use crate::ty::ToPredicate;\n         match *self.skip_binder() {\n             ExistentialPredicate::Trait(tr) => Binder(tr).with_self_ty(tcx, self_ty).to_predicate(),\n             ExistentialPredicate::Projection(p) =>"}, {"sha": "d7c322d0f840285c127e81dba83fb64c5895286c", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,9 +1,9 @@\n // Type substitutions.\n \n-use hir::def_id::DefId;\n-use infer::canonical::Canonical;\n-use ty::{self, Lift, List, Ty, TyCtxt};\n-use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n+use crate::hir::def_id::DefId;\n+use crate::infer::canonical::Canonical;\n+use crate::ty::{self, Lift, List, Ty, TyCtxt};\n+use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n \n use serialize::{self, Encodable, Encoder, Decodable, Decoder};\n use syntax_pos::{Span, DUMMY_SP};"}, {"sha": "5429a2504b97b24113dfb5fb596c6ab83951abd0", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,11 +1,11 @@\n-use hir;\n-use hir::def_id::DefId;\n-use hir::map::DefPathHash;\n-use ich::{self, StableHashingContext};\n-use traits::specialization_graph;\n-use ty::fast_reject;\n-use ty::fold::TypeFoldable;\n-use ty::{Ty, TyCtxt};\n+use crate::hir;\n+use crate::hir::def_id::DefId;\n+use crate::hir::map::DefPathHash;\n+use crate::ich::{self, StableHashingContext};\n+use crate::traits::specialization_graph;\n+use crate::ty::fast_reject;\n+use crate::ty::fold::TypeFoldable;\n+use crate::ty::{Ty, TyCtxt};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher,"}, {"sha": "61544932b4329570abb5903c3ca47d297cd4f1d6", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,18 +1,18 @@\n //! misc. type-system utilities too small to deserve their own file\n \n-use hir::def::Def;\n-use hir::def_id::DefId;\n-use hir::map::DefPathData;\n-use hir::{self, Node};\n-use ich::NodeIdHashingMode;\n-use traits::{self, ObligationCause};\n-use ty::{self, Ty, TyCtxt, GenericParamDefKind, TypeFoldable};\n-use ty::subst::{Subst, Substs, UnpackedKind};\n-use ty::query::TyCtxtAt;\n-use ty::TyKind::*;\n-use ty::layout::{Integer, IntegerExt};\n-use util::common::ErrorReported;\n-use middle::lang_items;\n+use crate::hir::def::Def;\n+use crate::hir::def_id::DefId;\n+use crate::hir::map::DefPathData;\n+use crate::hir::{self, Node};\n+use crate::ich::NodeIdHashingMode;\n+use crate::traits::{self, ObligationCause};\n+use crate::ty::{self, Ty, TyCtxt, GenericParamDefKind, TypeFoldable};\n+use crate::ty::subst::{Subst, Substs, UnpackedKind};\n+use crate::ty::query::TyCtxtAt;\n+use crate::ty::TyKind::*;\n+use crate::ty::layout::{Integer, IntegerExt};\n+use crate::util::common::ErrorReported;\n+use crate::middle::lang_items;\n \n use rustc_data_structures::stable_hasher::{StableHasher, HashStable};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};"}, {"sha": "126f5290af51389f55921de490e7c458051b869c", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,7 +1,7 @@\n //! An iterator over the type substructure.\n //! WARNING: this does not keep track of the region depth.\n \n-use ty::{self, Ty};\n+use crate::ty::{self, Ty};\n use smallvec::{self, SmallVec};\n \n // The TypeWalker's stack is hot enough that it's worth going to some effort to"}, {"sha": "2aae953c1c40a7c35e18e54a98b1b8b80004043c", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,12 +1,12 @@\n-use hir::def_id::DefId;\n-use infer::InferCtxt;\n-use ty::subst::Substs;\n-use traits;\n-use ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use crate::hir::def_id::DefId;\n+use crate::infer::InferCtxt;\n+use crate::ty::subst::Substs;\n+use crate::traits;\n+use crate::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use std::iter::once;\n use syntax::ast;\n use syntax_pos::Span;\n-use middle::lang_items;\n+use crate::middle::lang_items;\n \n /// Returns the set of obligations needed to make `ty` well-formed.\n /// If `ty` contains unresolved inference variables, this may include"}, {"sha": "02ddfab6d826e44c5030c669c7aba8fcd83d2a0d", "filename": "src/librustc/util/bug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Futil%2Fbug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Futil%2Fbug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fbug.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,6 +1,6 @@\n // These functions are used by macro expansion for bug! and span_bug!\n \n-use ty::tls;\n+use crate::ty::tls;\n use std::fmt;\n use syntax_pos::{Span, MultiSpan};\n "}, {"sha": "f6743ed75d92ea0507293a1f6899471e9f4ceafc", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -12,10 +12,10 @@ use std::time::{Duration, Instant};\n \n use std::sync::mpsc::{Sender};\n use syntax_pos::{SpanData};\n-use ty::TyCtxt;\n-use dep_graph::{DepNode};\n+use crate::ty::TyCtxt;\n+use crate::dep_graph::{DepNode};\n use lazy_static;\n-use session::Session;\n+use crate::session::Session;\n \n // The name of the associated type for `Fn` return types\n pub const FN_OUTPUT_NAME: &str = \"Output\";"}, {"sha": "6969b2f872ade293b0d0a57266bf7eddb58dc8c3", "filename": "src/librustc/util/nodemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Futil%2Fnodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Futil%2Fnodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fnodemap.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,7 +1,7 @@\n //! An efficient hash map for node IDs\n \n-use hir::def_id::DefId;\n-use hir::{HirId, ItemLocalId};\n+use crate::hir::def_id::DefId;\n+use crate::hir::{HirId, ItemLocalId};\n use syntax::ast;\n \n pub use rustc_data_structures::fx::FxHashMap;"}, {"sha": "2cd82d44af3aa863ac7793277e8516a88f07af66", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,15 +1,15 @@\n-use hir::def_id::DefId;\n-use hir::map::definitions::DefPathData;\n-use middle::region;\n-use ty::subst::{self, Subst};\n-use ty::{BrAnon, BrEnv, BrFresh, BrNamed};\n-use ty::{Bool, Char, Adt};\n-use ty::{Error, Str, Array, Slice, Float, FnDef, FnPtr};\n-use ty::{Param, Bound, RawPtr, Ref, Never, Tuple};\n-use ty::{Closure, Generator, GeneratorWitness, Foreign, Projection, Opaque};\n-use ty::{Placeholder, UnnormalizedProjection, Dynamic, Int, Uint, Infer};\n-use ty::{self, Ty, TyCtxt, TypeFoldable, GenericParamCount, GenericParamDefKind};\n-use util::nodemap::FxHashSet;\n+use crate::hir::def_id::DefId;\n+use crate::hir::map::definitions::DefPathData;\n+use crate::middle::region;\n+use crate::ty::subst::{self, Subst};\n+use crate::ty::{BrAnon, BrEnv, BrFresh, BrNamed};\n+use crate::ty::{Bool, Char, Adt};\n+use crate::ty::{Error, Str, Array, Slice, Float, FnDef, FnPtr};\n+use crate::ty::{Param, Bound, RawPtr, Ref, Never, Tuple};\n+use crate::ty::{Closure, Generator, GeneratorWitness, Foreign, Projection, Opaque};\n+use crate::ty::{Placeholder, UnnormalizedProjection, Dynamic, Int, Uint, Infer};\n+use crate::ty::{self, Ty, TyCtxt, TypeFoldable, GenericParamCount, GenericParamDefKind};\n+use crate::util::nodemap::FxHashSet;\n \n use std::cell::Cell;\n use std::fmt;\n@@ -18,7 +18,7 @@ use std::usize;\n use rustc_target::spec::abi::Abi;\n use syntax::ast::CRATE_NODE_ID;\n use syntax::symbol::{Symbol, InternedString};\n-use hir;\n+use crate::hir;\n \n /// The \"region highlights\" are used to control region printing during\n /// specific error messages. When a \"region highlight\" is enabled, it"}, {"sha": "0e03946f82a5cafd4feb24495cc4fa694a658ee0", "filename": "src/librustc/util/profiling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Futil%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc%2Futil%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fprofiling.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,4 +1,4 @@\n-use session::config::Options;\n+use crate::session::config::Options;\n \n use std::fs;\n use std::io::{self, StderrLock, Write};"}, {"sha": "c7496a9547ea6fdfc661b8abf2235a07da9a6811", "filename": "src/librustc_apfloat/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_apfloat%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_apfloat%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2FCargo.toml?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc_apfloat\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_apfloat\""}, {"sha": "58066a9cada47af91d375d3ccf5eed62c5f4687a", "filename": "src/librustc_apfloat/ieee.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_apfloat%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_apfloat%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Fieee.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,5 +1,5 @@\n-use {Category, ExpInt, IEK_INF, IEK_NAN, IEK_ZERO};\n-use {Float, FloatConvert, ParseError, Round, Status, StatusAnd};\n+use crate::{Category, ExpInt, IEK_INF, IEK_NAN, IEK_ZERO};\n+use crate::{Float, FloatConvert, ParseError, Round, Status, StatusAnd};\n \n use smallvec::{SmallVec, smallvec};\n use std::cmp::{self, Ordering};\n@@ -325,7 +325,7 @@ impl<S> Neg for IeeeFloat<S> {\n /// 1.01E-2              4        2       0.0101\n /// 1.01E-2              4        1       1.01E-2\n impl<S: Semantics> fmt::Display for IeeeFloat<S> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let width = f.width().unwrap_or(3);\n         let alternate = f.alternate();\n \n@@ -614,7 +614,7 @@ impl<S: Semantics> fmt::Display for IeeeFloat<S> {\n }\n \n impl<S: Semantics> fmt::Debug for IeeeFloat<S> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}({:?} | {}{:?} * 2^{})\",\n                self, self.category,\n                if self.sign { \"-\" } else { \"+\" },"}, {"sha": "17311f0688fe675925b461f6bc1900dcda3eea28", "filename": "src/librustc_apfloat/lib.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_apfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_apfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Flib.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -34,24 +34,20 @@\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![forbid(unsafe_code)]\n+#![deny(rust_2018_idioms)]\n \n-#![feature(nll)]\n #![feature(try_from)]\n // See librustc_cratesio_shim/Cargo.toml for a comment explaining this.\n #[allow(unused_extern_crates)]\n extern crate rustc_cratesio_shim;\n \n-#[macro_use]\n-extern crate bitflags;\n-extern crate smallvec;\n-\n use std::cmp::Ordering;\n use std::fmt;\n use std::ops::{Neg, Add, Sub, Mul, Div, Rem};\n use std::ops::{AddAssign, SubAssign, MulAssign, DivAssign, RemAssign};\n use std::str::FromStr;\n \n-bitflags! {\n+bitflags::bitflags! {\n     /// IEEE-754R 7: Default exception handling.\n     ///\n     /// UNDERFLOW or OVERFLOW are always returned or-ed with INEXACT."}, {"sha": "ddccfd6ca623bad963b921b8f434e8413fbd4d16", "filename": "src/librustc_apfloat/ppc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_apfloat%2Fppc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_apfloat%2Fppc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Fppc.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,5 +1,5 @@\n-use {Category, ExpInt, Float, FloatConvert, Round, ParseError, Status, StatusAnd};\n-use ieee;\n+use crate::{Category, ExpInt, Float, FloatConvert, Round, ParseError, Status, StatusAnd};\n+use crate::ieee;\n \n use std::cmp::Ordering;\n use std::fmt;\n@@ -124,7 +124,7 @@ impl<F: Float> Neg for DoubleFloat<F> {\n }\n \n impl<F: FloatConvert<Fallback<F>>> fmt::Display for DoubleFloat<F> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(&Fallback::from(*self), f)\n     }\n }"}, {"sha": "108b2114439d42010f5993758a13e8f87550610e", "filename": "src/librustc_apfloat/tests/ieee.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_apfloat%2Ftests%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_apfloat%2Ftests%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Ftests%2Fieee.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,9 +1,7 @@\n-#[macro_use]\n-extern crate rustc_apfloat;\n-\n use rustc_apfloat::{Category, ExpInt, IEK_INF, IEK_NAN, IEK_ZERO};\n use rustc_apfloat::{Float, FloatConvert, ParseError, Round, Status};\n use rustc_apfloat::ieee::{Half, Single, Double, Quad, X87DoubleExtended};\n+use rustc_apfloat::unpack;\n \n trait SingleExt {\n     fn from_f32(input: f32) -> Self;"}, {"sha": "02cdeb90a12be5efaf04e76488a0f647e23dd000", "filename": "src/librustc_apfloat/tests/ppc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_apfloat%2Ftests%2Fppc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_apfloat%2Ftests%2Fppc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Ftests%2Fppc.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,5 +1,3 @@\n-extern crate rustc_apfloat;\n-\n use rustc_apfloat::{Category, Float, Round};\n use rustc_apfloat::ppc::DoubleDouble;\n "}, {"sha": "7d9641c83ee7dbc40910532c4a09d89ade0774ee", "filename": "src/librustc_asan/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_asan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_asan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2FCargo.toml?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -3,6 +3,7 @@ authors = [\"The Rust Project Developers\"]\n build = \"build.rs\"\n name = \"rustc_asan\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_asan\""}, {"sha": "a2b4b090efb4ffb9aedec04e5328d685c5fc6e4d", "filename": "src/librustc_asan/build.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_asan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_asan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Fbuild.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,6 +1,3 @@\n-extern crate build_helper;\n-extern crate cmake;\n-\n use std::env;\n use build_helper::sanitizer_lib_boilerplate;\n "}, {"sha": "568bb540c471952e8cae17288848893916f7e2ec", "filename": "src/librustc_asan/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_asan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_asan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Flib.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,8 +1,9 @@\n #![sanitizer_runtime]\n-#![feature(nll)]\n #![feature(sanitizer_runtime)]\n #![feature(staged_api)]\n #![no_std]\n #![unstable(feature = \"sanitizer_runtime_lib\",\n             reason = \"internal implementation detail of sanitizers\",\n             issue = \"0\")]\n+\n+#![deny(rust_2018_idioms)]"}, {"sha": "596f97a038892678a01520619a43b108b2b9c0f0", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -41,6 +41,21 @@ impl<'a, 'tcx: 'a, V: CodegenObject> PlaceRef<'tcx, V> {\n         }\n     }\n \n+    fn new_thin_place<Bx: BuilderMethods<'a, 'tcx, Value = V>>(\n+        bx: &mut Bx,\n+        llval: V,\n+        layout: TyLayout<'tcx>,\n+        align: Align,\n+    ) -> PlaceRef<'tcx, V> {\n+        assert!(!bx.cx().type_has_metadata(layout.ty));\n+        PlaceRef {\n+            llval,\n+            llextra: None,\n+            layout,\n+            align\n+        }\n+    }\n+\n     pub fn alloca<Bx: BuilderMethods<'a, 'tcx, Value = V>>(\n         bx: &mut Bx,\n         layout: TyLayout<'tcx>,\n@@ -421,8 +436,10 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 }\n             }\n             mir::Place::Static(box mir::Static { def_id, ty }) => {\n+                // NB: The layout of a static may be unsized as is the case when working\n+                // with a static that is an extern_type.\n                 let layout = cx.layout_of(self.monomorphize(&ty));\n-                PlaceRef::new_sized(bx.get_static(def_id), layout, layout.align.abi)\n+                PlaceRef::new_thin_place(bx, bx.get_static(def_id), layout, layout.align.abi)\n             },\n             mir::Place::Projection(box mir::Projection {\n                 ref base,"}, {"sha": "02c011857bd2a7334e6c2587d768c4f49db54d29", "filename": "src/librustc_errors/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_errors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_errors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2FCargo.toml?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc_errors\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_errors\""}, {"sha": "aefe296ad0fa78d18436bb0397198ca94d66bcab", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,11 +1,11 @@\n-use CodeSuggestion;\n-use SubstitutionPart;\n-use Substitution;\n-use Applicability;\n-use Level;\n+use crate::CodeSuggestion;\n+use crate::SubstitutionPart;\n+use crate::Substitution;\n+use crate::Applicability;\n+use crate::Level;\n+use crate::snippet::Style;\n use std::fmt;\n use syntax_pos::{MultiSpan, Span};\n-use snippet::Style;\n \n #[must_use]\n #[derive(Clone, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]"}, {"sha": "fd4ea7f2d823f2db417edb1bfa52cd56b407492b", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,14 +1,15 @@\n-use Diagnostic;\n-use DiagnosticId;\n-use DiagnosticStyledString;\n-use Applicability;\n+use crate::Diagnostic;\n+use crate::DiagnosticId;\n+use crate::DiagnosticStyledString;\n+use crate::Applicability;\n \n-use Level;\n-use Handler;\n+use crate::Level;\n+use crate::Handler;\n use std::fmt::{self, Debug};\n use std::ops::{Deref, DerefMut};\n use std::thread::panicking;\n use syntax_pos::{MultiSpan, Span};\n+use log::debug;\n \n /// Used for emitting structured error messages and other diagnostic information.\n ///\n@@ -111,8 +112,8 @@ impl<'a> DiagnosticBuilder<'a> {\n         // implements `Drop`.\n         let diagnostic;\n         unsafe {\n-            diagnostic = ::std::ptr::read(&self.diagnostic);\n-            ::std::mem::forget(self);\n+            diagnostic = std::ptr::read(&self.diagnostic);\n+            std::mem::forget(self);\n         };\n         // Logging here is useful to help track down where in logs an error was\n         // actually emitted.\n@@ -298,7 +299,7 @@ impl<'a> DiagnosticBuilder<'a> {\n }\n \n impl<'a> Debug for DiagnosticBuilder<'a> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.diagnostic.fmt(f)\n     }\n }"}, {"sha": "061d23697fa3a26bd6be5b3212dfd06cd318d02f", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,28 +1,26 @@\n-use self::Destination::*;\n+use Destination::*;\n \n use syntax_pos::{SourceFile, Span, MultiSpan};\n \n-use {Level, CodeSuggestion, DiagnosticBuilder, SubDiagnostic, SourceMapperDyn, DiagnosticId};\n-use snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, StyledString, Style};\n-use styled_buffer::StyledBuffer;\n+use crate::{Level, CodeSuggestion, DiagnosticBuilder, SubDiagnostic, SourceMapperDyn, DiagnosticId};\n+use crate::snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, StyledString, Style};\n+use crate::styled_buffer::StyledBuffer;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n-use atty;\n use std::borrow::Cow;\n use std::io::prelude::*;\n use std::io;\n use std::cmp::{min, Reverse};\n use termcolor::{StandardStream, ColorChoice, ColorSpec, BufferWriter};\n use termcolor::{WriteColor, Color, Buffer};\n-use unicode_width;\n \n const ANONYMIZED_LINE_NUM: &str = \"LL\";\n \n /// Emitter trait for emitting errors.\n pub trait Emitter {\n     /// Emit a structured diagnostic.\n-    fn emit(&mut self, db: &DiagnosticBuilder);\n+    fn emit(&mut self, db: &DiagnosticBuilder<'_>);\n \n     /// Check if should show explanations about \"rustc --explain\"\n     fn should_show_explain(&self) -> bool {\n@@ -31,7 +29,7 @@ pub trait Emitter {\n }\n \n impl Emitter for EmitterWriter {\n-    fn emit(&mut self, db: &DiagnosticBuilder) {\n+    fn emit(&mut self, db: &DiagnosticBuilder<'_>) {\n         let mut primary_span = db.span.clone();\n         let mut children = db.children.clone();\n         let mut suggestions: &[_] = &[];\n@@ -1431,7 +1429,7 @@ fn emit_to_destination(rendered_buffer: &[Vec<StyledString>],\n                        dst: &mut Destination,\n                        short_message: bool)\n                        -> io::Result<()> {\n-    use lock;\n+    use crate::lock;\n \n     let mut dst = dst.writable();\n "}, {"sha": "831415ed0bb8c038725f01b5918c722452a3d17e", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -6,23 +6,15 @@\n #![allow(unused_attributes)]\n #![feature(range_contains)]\n #![cfg_attr(unix, feature(libc))]\n-#![feature(nll)]\n #![feature(optin_builtin_traits)]\n+#![deny(rust_2018_idioms)]\n \n-extern crate atty;\n-extern crate termcolor;\n-#[cfg(unix)]\n-extern crate libc;\n-#[macro_use]\n-extern crate log;\n-extern crate rustc_data_structures;\n-extern crate serialize as rustc_serialize;\n-extern crate syntax_pos;\n-extern crate unicode_width;\n+#[allow(unused_extern_crates)]\n+extern crate serialize as rustc_serialize; // used by deriving\n \n pub use emitter::ColorConfig;\n \n-use self::Level::*;\n+use Level::*;\n \n use emitter::{Emitter, EmitterWriter};\n \n@@ -144,7 +136,7 @@ impl CodeSuggestion {\n         use syntax_pos::{CharPos, Loc, Pos};\n \n         fn push_trailing(buf: &mut String,\n-                         line_opt: Option<&Cow<str>>,\n+                         line_opt: Option<&Cow<'_, str>>,\n                          lo: &Loc,\n                          hi_opt: Option<&Loc>) {\n             let (lo, hi_opt) = (lo.col.to_usize(), hi_opt.map(|hi| hi.col.to_usize()));\n@@ -247,7 +239,7 @@ impl FatalError {\n }\n \n impl fmt::Display for FatalError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"parser fatal error\")\n     }\n }\n@@ -264,7 +256,7 @@ impl error::Error for FatalError {\n pub struct ExplicitBug;\n \n impl fmt::Display for ExplicitBug {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"parser internal bug\")\n     }\n }\n@@ -496,7 +488,7 @@ impl Handler {\n         DiagnosticBuilder::new(self, Level::Fatal, msg)\n     }\n \n-    pub fn cancel(&self, err: &mut DiagnosticBuilder) {\n+    pub fn cancel(&self, err: &mut DiagnosticBuilder<'_>) {\n         err.cancel();\n     }\n \n@@ -698,12 +690,12 @@ impl Handler {\n         self.taught_diagnostics.borrow_mut().insert(code.clone())\n     }\n \n-    pub fn force_print_db(&self, mut db: DiagnosticBuilder) {\n+    pub fn force_print_db(&self, mut db: DiagnosticBuilder<'_>) {\n         self.emitter.borrow_mut().emit(&db);\n         db.cancel();\n     }\n \n-    fn emit_db(&self, db: &DiagnosticBuilder) {\n+    fn emit_db(&self, db: &DiagnosticBuilder<'_>) {\n         let diagnostic = &**db;\n \n         TRACK_DIAGNOSTICS.with(|track_diagnostics| {\n@@ -749,7 +741,7 @@ pub enum Level {\n }\n \n impl fmt::Display for Level {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.to_str().fmt(f)\n     }\n }"}, {"sha": "0c62ff0ff89b27e3f9f665c7cffd75cc4e3257f1", "filename": "src/librustc_errors/snippet.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_errors%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_errors%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fsnippet.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,6 +1,6 @@\n // Code for annotating snippets.\n \n-use Level;\n+use crate::Level;\n \n #[derive(Clone, Debug, PartialOrd, Ord, PartialEq, Eq)]\n pub struct Line {"}, {"sha": "6e03618d2b0b5f24b6d2296d5e9f60317284aaff", "filename": "src/librustc_errors/styled_buffer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_errors%2Fstyled_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_errors%2Fstyled_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fstyled_buffer.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,6 +1,6 @@\n // Code for creating styled buffers\n \n-use snippet::{Style, StyledString};\n+use crate::snippet::{Style, StyledString};\n \n #[derive(Debug)]\n pub struct StyledBuffer {"}, {"sha": "47918643f31fe624a99ae1c08d12dca2d694749e", "filename": "src/librustc_fs_util/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_fs_util%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_fs_util%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_fs_util%2FCargo.toml?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc_fs_util\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_fs_util\""}, {"sha": "340681d65c383807b13a01625ce1fa3475467314", "filename": "src/librustc_fs_util/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_fs_util%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_fs_util%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_fs_util%2Flib.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rust_2018_idioms)]\n+\n use std::path::{Path, PathBuf};\n use std::ffi::CString;\n use std::fs;"}, {"sha": "0fe327d5deeeb541106dc88a70ff436424ede95a", "filename": "src/librustc_llvm/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2FCargo.toml?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -3,6 +3,7 @@ authors = [\"The Rust Project Developers\"]\n name = \"rustc_llvm\"\n version = \"0.0.0\"\n build = \"build.rs\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_llvm\""}, {"sha": "7fa83dd977950ba6becd5b8b2f8e8c184dc7bedd", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,6 +1,3 @@\n-extern crate cc;\n-extern crate build_helper;\n-\n use std::process::Command;\n use std::env;\n use std::path::{PathBuf, Path};"}, {"sha": "99c5e2493edecbd402b49634f89bbeb443cbb69d", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,4 +1,4 @@\n-#![feature(nll)]\n+#![deny(rust_2018_idioms)]\n #![feature(static_nobundle)]\n \n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "9ad53ee6d0958ecab61c3d59673f54f2532c45cc", "filename": "src/librustc_lsan/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_lsan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_lsan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2FCargo.toml?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -3,6 +3,7 @@ authors = [\"The Rust Project Developers\"]\n build = \"build.rs\"\n name = \"rustc_lsan\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_lsan\""}, {"sha": "b8c7b7c2d5537d1980a9c31f72f91f74d753d2dd", "filename": "src/librustc_lsan/build.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_lsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_lsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Fbuild.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,6 +1,3 @@\n-extern crate build_helper;\n-extern crate cmake;\n-\n use std::env;\n use build_helper::sanitizer_lib_boilerplate;\n "}, {"sha": "568bb540c471952e8cae17288848893916f7e2ec", "filename": "src/librustc_lsan/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_lsan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_lsan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Flib.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,8 +1,9 @@\n #![sanitizer_runtime]\n-#![feature(nll)]\n #![feature(sanitizer_runtime)]\n #![feature(staged_api)]\n #![no_std]\n #![unstable(feature = \"sanitizer_runtime_lib\",\n             reason = \"internal implementation detail of sanitizers\",\n             issue = \"0\")]\n+\n+#![deny(rust_2018_idioms)]"}, {"sha": "550668a7ceecebd6150d657510462ab3a60bb770", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -205,7 +205,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             for constraint in self.constraint_graph\n                 .outgoing_edges(r, &self.constraints, fr_static)\n             {\n-                assert_eq!(constraint.sup, r);\n+                debug_assert_eq!(constraint.sup, r);\n                 let sub_region = constraint.sub;\n                 if let Trace::NotVisited = context[sub_region] {\n                     context[sub_region] = Trace::FromOutlivesConstraint(constraint);"}, {"sha": "7d88aa59b3adbaf0efc3f719f0d256653a1f4672", "filename": "src/librustc_msan/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_msan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_msan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2FCargo.toml?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -3,6 +3,7 @@ authors = [\"The Rust Project Developers\"]\n build = \"build.rs\"\n name = \"rustc_msan\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_msan\""}, {"sha": "1c66b0a9cd3cfe07b4c0d372931c7f7236e94ef7", "filename": "src/librustc_msan/build.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_msan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_msan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Fbuild.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,6 +1,3 @@\n-extern crate build_helper;\n-extern crate cmake;\n-\n use std::env;\n use build_helper::sanitizer_lib_boilerplate;\n "}, {"sha": "568bb540c471952e8cae17288848893916f7e2ec", "filename": "src/librustc_msan/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_msan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_msan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Flib.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,8 +1,9 @@\n #![sanitizer_runtime]\n-#![feature(nll)]\n #![feature(sanitizer_runtime)]\n #![feature(staged_api)]\n #![no_std]\n #![unstable(feature = \"sanitizer_runtime_lib\",\n             reason = \"internal implementation detail of sanitizers\",\n             issue = \"0\")]\n+\n+#![deny(rust_2018_idioms)]"}, {"sha": "5e23aa0d7f74e5ad4e4585470c38728ad4583878", "filename": "src/librustc_plugin/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_plugin%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_plugin%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2FCargo.toml?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -3,6 +3,7 @@ authors = [\"The Rust Project Developers\"]\n name = \"rustc_plugin\"\n version = \"0.0.0\"\n build = false\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_plugin\""}, {"sha": "68462bd83ef60dbd09f46cb338f677d73ed5f040", "filename": "src/librustc_plugin/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_plugin%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_plugin%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fdiagnostics.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,5 +1,7 @@\n #![allow(non_snake_case)]\n \n+use syntax::{register_diagnostic, register_diagnostics, register_long_diagnostics};\n+\n register_long_diagnostics! {\n \n }"}, {"sha": "9a31bddc1ededfca1a31d33cd81a44b92c34e5f1", "filename": "src/librustc_plugin/lib.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Flib.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -54,19 +54,13 @@\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n-#![feature(nll)]\n #![feature(rustc_diagnostic_macros)]\n \n #![recursion_limit=\"256\"]\n \n-#[macro_use] extern crate syntax;\n+#![deny(rust_2018_idioms)]\n \n-extern crate rustc;\n-extern crate rustc_metadata;\n-extern crate syntax_pos;\n-extern crate rustc_errors as errors;\n-\n-pub use self::registry::Registry;\n+pub use registry::Registry;\n \n mod diagnostics;\n pub mod registry;"}, {"sha": "1b88cf05f40d5c52f99e3c18fd5b5a2e48e22ea6", "filename": "src/librustc_plugin/load.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_plugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_plugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fload.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -3,18 +3,19 @@\n use rustc::session::Session;\n use rustc_metadata::creader::CrateLoader;\n use rustc_metadata::cstore::CStore;\n-use registry::Registry;\n+use crate::registry::Registry;\n \n use std::borrow::ToOwned;\n use std::env;\n use std::mem;\n use std::path::PathBuf;\n use syntax::ast;\n+use syntax::span_err;\n use syntax_pos::{Span, DUMMY_SP};\n \n /// Pointer to a registrar function.\n pub type PluginRegistrarFun =\n-    fn(&mut Registry);\n+    fn(&mut Registry<'_>);\n \n pub struct PluginRegistrar {\n     pub fun: PluginRegistrarFun,"}, {"sha": "0ce82f2ce521b306c56a547e8ade92c53708cddb", "filename": "src/librustc_resolve/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2FCargo.toml?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc_resolve\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_resolve\""}, {"sha": "750eb35a9885493a8c2597676dffd12ffcc0533f", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -3,14 +3,15 @@\n //! Here we build the \"reduced graph\": the graph of the module tree without\n //! any imports resolved.\n \n-use macros::{InvocationData, ParentScope, LegacyScope};\n-use resolve_imports::ImportDirective;\n-use resolve_imports::ImportDirectiveSubclass::{self, GlobImport, SingleImport};\n-use {Module, ModuleData, ModuleKind, NameBinding, NameBindingKind, Segment, ToNameBinding};\n-use {ModuleOrUniformRoot, PerNS, Resolver, ResolverArenas, ExternPreludeEntry};\n-use Namespace::{self, TypeNS, ValueNS, MacroNS};\n-use {resolve_error, resolve_struct_error, ResolutionError};\n-\n+use crate::macros::{InvocationData, ParentScope, LegacyScope};\n+use crate::resolve_imports::ImportDirective;\n+use crate::resolve_imports::ImportDirectiveSubclass::{self, GlobImport, SingleImport};\n+use crate::{Module, ModuleData, ModuleKind, NameBinding, NameBindingKind, Segment, ToNameBinding};\n+use crate::{ModuleOrUniformRoot, PerNS, Resolver, ResolverArenas, ExternPreludeEntry};\n+use crate::Namespace::{self, TypeNS, ValueNS, MacroNS};\n+use crate::{resolve_error, resolve_struct_error, ResolutionError};\n+\n+use rustc::bug;\n use rustc::hir::def::*;\n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, LOCAL_CRATE, DefId};\n use rustc::ty;\n@@ -21,7 +22,7 @@ use std::cell::Cell;\n use std::ptr;\n use rustc_data_structures::sync::Lrc;\n \n-use errors::Applicability;\n+use crate::errors::Applicability;\n \n use syntax::ast::{Name, Ident};\n use syntax::attr;\n@@ -34,12 +35,15 @@ use syntax::ext::hygiene::Mark;\n use syntax::ext::tt::macro_rules;\n use syntax::feature_gate::is_builtin_attr;\n use syntax::parse::token::{self, Token};\n+use syntax::span_err;\n use syntax::std_inject::injected_crate_name;\n use syntax::symbol::keywords;\n use syntax::visit::{self, Visitor};\n \n use syntax_pos::{Span, DUMMY_SP};\n \n+use log::debug;\n+\n impl<'a> ToNameBinding<'a> for (Module<'a>, ty::Visibility, Span, Mark) {\n     fn to_name_binding(self, arenas: &'a ResolverArenas<'a>) -> &'a NameBinding<'a> {\n         arenas.alloc_name_binding(NameBinding {"}, {"sha": "639960827c99636918f80fcd2849c43cdbfb95c2", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -10,8 +10,8 @@\n \n use std::ops::{Deref, DerefMut};\n \n-use Resolver;\n-use resolve_imports::ImportDirectiveSubclass;\n+use crate::Resolver;\n+use crate::resolve_imports::ImportDirectiveSubclass;\n \n use rustc::{lint, ty};\n use rustc::util::nodemap::NodeMap;\n@@ -113,7 +113,7 @@ impl<'a, 'b> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b> {\n     }\n }\n \n-pub fn check_crate(resolver: &mut Resolver, krate: &ast::Crate) {\n+pub fn check_crate(resolver: &mut Resolver<'_>, krate: &ast::Crate) {\n     for directive in resolver.potentially_unused_imports.iter() {\n         match directive.subclass {\n             _ if directive.used.get() ||"}, {"sha": "0db8689c0c17c27f855390636c7ba83099d27ad1", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,5 +1,7 @@\n #![allow(non_snake_case)]\n \n+use syntax::{register_diagnostic, register_diagnostics, register_long_diagnostics};\n+\n // Error messages for EXXXX errors.  Each message should start and end with a\n // new line, and be wrapped to 80 characters.  In vim you can `:set tw=80` and\n // use `gq` to wrap paragraphs. Use `:set tw=0` to disable."}, {"sha": "b131a6b62f9bf1dd2704c99522ae3c27e02ff01b", "filename": "src/librustc_resolve/error_reporting.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_resolve%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_resolve%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_reporting.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,10 +1,12 @@\n-use {CrateLint, PathResult, Segment};\n-use macros::ParentScope;\n+use crate::{CrateLint, PathResult, Segment};\n+use crate::macros::ParentScope;\n+use crate::resolve_imports::ImportResolver;\n \n use syntax::symbol::keywords;\n use syntax_pos::Span;\n \n-use resolve_imports::ImportResolver;\n+use log::debug;\n+\n use std::cmp::Reverse;\n \n impl<'a, 'b:'a> ImportResolver<'a, 'b> {"}, {"sha": "b166b1be02f459e563bdfdc30194ca630043bbd3", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 43, "deletions": 50, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -4,30 +4,19 @@\n \n #![feature(crate_visibility_modifier)]\n #![feature(label_break_value)]\n-#![feature(nll)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_sort_by_cached_key)]\n \n #![recursion_limit=\"256\"]\n \n-#[macro_use]\n-extern crate bitflags;\n-#[macro_use]\n-extern crate log;\n-#[macro_use]\n-extern crate syntax;\n-extern crate syntax_pos;\n-extern crate rustc_errors as errors;\n-extern crate arena;\n-#[macro_use]\n-extern crate rustc;\n-extern crate rustc_data_structures;\n-extern crate rustc_metadata;\n+#![deny(rust_2018_idioms)]\n+\n+use rustc_errors as errors;\n \n pub use rustc::hir::def::{Namespace, PerNS};\n \n-use self::TypeParameters::*;\n-use self::RibKind::*;\n+use TypeParameters::*;\n+use RibKind::*;\n \n use rustc::hir::map::{Definitions, DefCollector};\n use rustc::hir::{self, PrimTy, Bool, Char, Float, Int, Uint, Str};\n@@ -41,6 +30,7 @@ use rustc::hir::{Freevar, FreevarMap, TraitCandidate, TraitMap, GlobMap};\n use rustc::session::config::nightly_options;\n use rustc::ty;\n use rustc::util::nodemap::{NodeMap, NodeSet, FxHashMap, FxHashSet, DefIdMap};\n+use rustc::{bug, span_bug};\n \n use rustc_metadata::creader::CrateLoader;\n use rustc_metadata::cstore::CStore;\n@@ -62,10 +52,13 @@ use syntax::ast::{Item, ItemKind, ImplItem, ImplItemKind};\n use syntax::ast::{Label, Local, Mutability, Pat, PatKind, Path};\n use syntax::ast::{QSelf, TraitItemKind, TraitRef, Ty, TyKind};\n use syntax::ptr::P;\n+use syntax::{span_err, struct_span_err, unwrap_or, walk_list};\n \n use syntax_pos::{BytePos, Span, DUMMY_SP, MultiSpan};\n use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n \n+use log::debug;\n+\n use std::cell::{Cell, RefCell};\n use std::{cmp, fmt, iter, mem, ptr};\n use std::collections::BTreeSet;\n@@ -191,13 +184,13 @@ enum ResolutionError<'a> {\n ///\n /// This takes the error provided, combines it with the span and any additional spans inside the\n /// error and emits it.\n-fn resolve_error<'sess, 'a>(resolver: &'sess Resolver,\n+fn resolve_error<'sess, 'a>(resolver: &'sess Resolver<'_>,\n                             span: Span,\n                             resolution_error: ResolutionError<'a>) {\n     resolve_struct_error(resolver, span, resolution_error).emit();\n }\n \n-fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n+fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver<'_>,\n                                    span: Span,\n                                    resolution_error: ResolutionError<'a>)\n                                    -> DiagnosticBuilder<'sess> {\n@@ -1192,7 +1185,7 @@ impl<'a> ModuleData<'a> {\n }\n \n impl<'a> fmt::Debug for ModuleData<'a> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{:?}\", self.def())\n     }\n }\n@@ -1416,7 +1409,7 @@ impl<'a> NameBinding<'a> {\n     // in some later round and screw up our previously found resolution.\n     // See more detailed explanation in\n     // https://github.com/rust-lang/rust/pull/53778#issuecomment-419224049\n-    fn may_appear_after(&self, invoc_parent_expansion: Mark, binding: &NameBinding) -> bool {\n+    fn may_appear_after(&self, invoc_parent_expansion: Mark, binding: &NameBinding<'_>) -> bool {\n         // self > max(invoc, binding) => !(self <= invoc || self <= binding)\n         // Expansions are partially ordered, so \"may appear after\" is an inversion of\n         // \"certainly appears before or simultaneously\" and includes unordered cases.\n@@ -1630,14 +1623,14 @@ impl<'a> ResolverArenas<'a> {\n         }\n         module\n     }\n-    fn local_modules(&'a self) -> ::std::cell::Ref<'a, Vec<Module<'a>>> {\n+    fn local_modules(&'a self) -> std::cell::Ref<'a, Vec<Module<'a>>> {\n         self.local_modules.borrow()\n     }\n     fn alloc_name_binding(&'a self, name_binding: NameBinding<'a>) -> &'a NameBinding<'a> {\n         self.name_bindings.alloc(name_binding)\n     }\n     fn alloc_import_directive(&'a self, import_directive: ImportDirective<'a>)\n-                              -> &'a ImportDirective {\n+                              -> &'a ImportDirective<'_> {\n         self.import_directives.alloc(import_directive)\n     }\n     fn alloc_name_resolution(&'a self) -> &'a RefCell<NameResolution<'a>> {\n@@ -1754,7 +1747,7 @@ impl<'a> Resolver<'a> {\n         is_value: bool,\n         error_callback: F,\n     ) -> hir::Path\n-        where F: for<'c, 'b> FnOnce(&'c mut Resolver, Span, ResolutionError<'b>)\n+        where F: for<'c, 'b> FnOnce(&'c mut Resolver<'_>, Span, ResolutionError<'b>)\n     {\n         let namespace = if is_value { ValueNS } else { TypeNS };\n         let span = path.span;\n@@ -1819,7 +1812,7 @@ impl<'a> Resolver<'a> {\n         DefCollector::new(&mut definitions, Mark::root())\n             .collect_root(crate_name, session.local_crate_disambiguator());\n \n-        let mut extern_prelude: FxHashMap<Ident, ExternPreludeEntry> =\n+        let mut extern_prelude: FxHashMap<Ident, ExternPreludeEntry<'_>> =\n             session.opts.externs.iter().map(|kv| (Ident::from_str(kv.0), Default::default()))\n                                        .collect();\n \n@@ -2315,7 +2308,7 @@ impl<'a> Resolver<'a> {\n     // implementations thus found, for compatibility with old resolve pass.\n \n     pub fn with_scope<F, T>(&mut self, id: NodeId, f: F) -> T\n-        where F: FnOnce(&mut Resolver) -> T\n+        where F: FnOnce(&mut Resolver<'_>) -> T\n     {\n         let id = self.definitions.local_def_id(id);\n         let module = self.module_map.get(&id).cloned(); // clones a reference\n@@ -2342,7 +2335,7 @@ impl<'a> Resolver<'a> {\n     ///\n     /// Stops after meeting a closure.\n     fn search_label<P, R>(&self, mut ident: Ident, pred: P) -> Option<R>\n-        where P: Fn(&Rib, Ident) -> Option<R>\n+        where P: Fn(&Rib<'_>, Ident) -> Option<R>\n     {\n         for rib in self.label_ribs.iter().rev() {\n             match rib.kind {\n@@ -2527,7 +2520,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn with_type_parameter_rib<'b, F>(&'b mut self, type_parameters: TypeParameters<'a, 'b>, f: F)\n-        where F: FnOnce(&mut Resolver)\n+        where F: FnOnce(&mut Resolver<'_>)\n     {\n         match type_parameters {\n             HasTypeParameters(generics, rib_kind) => {\n@@ -2573,15 +2566,15 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn with_label_rib<F>(&mut self, f: F)\n-        where F: FnOnce(&mut Resolver)\n+        where F: FnOnce(&mut Resolver<'_>)\n     {\n         self.label_ribs.push(Rib::new(NormalRibKind));\n         f(self);\n         self.label_ribs.pop();\n     }\n \n     fn with_item_rib<F>(&mut self, f: F)\n-        where F: FnOnce(&mut Resolver)\n+        where F: FnOnce(&mut Resolver<'_>)\n     {\n         self.ribs[ValueNS].push(Rib::new(ItemRibKind));\n         self.ribs[TypeNS].push(Rib::new(ItemRibKind));\n@@ -2591,7 +2584,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn with_constant_rib<F>(&mut self, f: F)\n-        where F: FnOnce(&mut Resolver)\n+        where F: FnOnce(&mut Resolver<'_>)\n     {\n         self.ribs[ValueNS].push(Rib::new(ConstantItemRibKind));\n         self.label_ribs.push(Rib::new(ConstantItemRibKind));\n@@ -2601,7 +2594,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn with_current_self_type<T, F>(&mut self, self_type: &Ty, f: F) -> T\n-        where F: FnOnce(&mut Resolver) -> T\n+        where F: FnOnce(&mut Resolver<'_>) -> T\n     {\n         // Handle nested impls (inside fn bodies)\n         let previous_value = replace(&mut self.current_self_type, Some(self_type.clone()));\n@@ -2611,7 +2604,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn with_current_self_item<T, F>(&mut self, self_item: &Item, f: F) -> T\n-        where F: FnOnce(&mut Resolver) -> T\n+        where F: FnOnce(&mut Resolver<'_>) -> T\n     {\n         let previous_value = replace(&mut self.current_self_item, Some(self_item.id));\n         let result = f(self);\n@@ -2621,7 +2614,7 @@ impl<'a> Resolver<'a> {\n \n     /// This is called to resolve a trait reference from an `impl` (i.e., `impl Trait for Foo`)\n     fn with_optional_trait_ref<T, F>(&mut self, opt_trait_ref: Option<&TraitRef>, f: F) -> T\n-        where F: FnOnce(&mut Resolver, Option<DefId>) -> T\n+        where F: FnOnce(&mut Resolver<'_>, Option<DefId>) -> T\n     {\n         let mut new_val = None;\n         let mut new_id = None;\n@@ -2658,7 +2651,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn with_self_rib<F>(&mut self, self_def: Def, f: F)\n-        where F: FnOnce(&mut Resolver)\n+        where F: FnOnce(&mut Resolver<'_>)\n     {\n         let mut self_type_rib = Rib::new(NormalRibKind);\n \n@@ -2670,7 +2663,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn with_self_struct_ctor_rib<F>(&mut self, impl_id: DefId, f: F)\n-        where F: FnOnce(&mut Resolver)\n+        where F: FnOnce(&mut Resolver<'_>)\n     {\n         let self_def = Def::SelfCtor(impl_id);\n         let mut self_type_rib = Rib::new(NormalRibKind);\n@@ -2771,7 +2764,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn check_trait_item<F>(&mut self, ident: Ident, ns: Namespace, span: Span, err: F)\n-        where F: FnOnce(Name, &str) -> ResolutionError\n+        where F: FnOnce(Name, &str) -> ResolutionError<'_>\n     {\n         // If there is a TraitRef in scope for an impl, then the method must be in the\n         // trait.\n@@ -3102,7 +3095,7 @@ impl<'a> Resolver<'a> {\n                           id: NodeId,\n                           qself: Option<&QSelf>,\n                           path: &Path,\n-                          source: PathSource)\n+                          source: PathSource<'_>)\n                           -> PathResolution {\n         self.smart_resolve_path_with_crate_lint(id, qself, path, source, CrateLint::SimplePath(id))\n     }\n@@ -3120,7 +3113,7 @@ impl<'a> Resolver<'a> {\n         id: NodeId,\n         qself: Option<&QSelf>,\n         path: &Path,\n-        source: PathSource,\n+        source: PathSource<'_>,\n         crate_lint: CrateLint\n     ) -> PathResolution {\n         self.smart_resolve_path_fragment(\n@@ -3138,7 +3131,7 @@ impl<'a> Resolver<'a> {\n                                    qself: Option<&QSelf>,\n                                    path: &[Segment],\n                                    span: Span,\n-                                   source: PathSource,\n+                                   source: PathSource<'_>,\n                                    crate_lint: CrateLint)\n                                    -> PathResolution {\n         let ident_span = path.last().map_or(span, |ident| ident.ident.span);\n@@ -3581,7 +3574,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn type_ascription_suggestion(&self,\n-                                  err: &mut DiagnosticBuilder,\n+                                  err: &mut DiagnosticBuilder<'_>,\n                                   base_span: Span) {\n         debug!(\"type_ascription_suggetion {:?}\", base_span);\n         let cm = self.session.source_map();\n@@ -4040,7 +4033,7 @@ impl<'a> Resolver<'a> {\n         crate_lint: CrateLint,\n         path: &[Segment],\n         path_span: Span,\n-        second_binding: Option<&NameBinding>,\n+        second_binding: Option<&NameBinding<'_>>,\n     ) {\n         let (diag_id, diag_span) = match crate_lint {\n             CrateLint::No => return,\n@@ -4266,7 +4259,7 @@ impl<'a> Resolver<'a> {\n     where\n         FilterFn: Fn(Def) -> bool,\n     {\n-        let add_module_candidates = |module: Module, names: &mut Vec<TypoSuggestion>| {\n+        let add_module_candidates = |module: Module<'_>, names: &mut Vec<TypoSuggestion>| {\n             for (&(ident, _), resolution) in module.resolutions.borrow().iter() {\n                 if let Some(binding) = resolution.borrow().binding {\n                     if filter_fn(binding.def()) {\n@@ -4361,7 +4354,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn with_resolved_label<F>(&mut self, label: Option<Label>, id: NodeId, f: F)\n-        where F: FnOnce(&mut Resolver)\n+        where F: FnOnce(&mut Resolver<'_>)\n     {\n         if let Some(label) = label {\n             self.unused_labels.insert(id, label.ident.span);\n@@ -4950,7 +4943,7 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    fn binding_description(&self, b: &NameBinding, ident: Ident, from_prelude: bool) -> String {\n+    fn binding_description(&self, b: &NameBinding<'_>, ident: Ident, from_prelude: bool) -> String {\n         if b.span.is_dummy() {\n             let add_built_in = match b.def() {\n                 // These already contain the \"built-in\" prefix or look bad with it.\n@@ -4978,7 +4971,7 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    fn report_ambiguity_error(&self, ambiguity_error: &AmbiguityError) {\n+    fn report_ambiguity_error(&self, ambiguity_error: &AmbiguityError<'_>) {\n         let AmbiguityError { kind, ident, b1, b2, misc1, misc2 } = *ambiguity_error;\n         let (b1, b2, misc1, misc2, swapped) = if b2.span.is_dummy() && !b1.span.is_dummy() {\n             // We have to print the span-less alternative first, otherwise formatting looks bad.\n@@ -4992,7 +4985,7 @@ impl<'a> Resolver<'a> {\n                                        ident = ident, why = kind.descr());\n         err.span_label(ident.span, \"ambiguous name\");\n \n-        let mut could_refer_to = |b: &NameBinding, misc: AmbiguityErrorMisc, also: &str| {\n+        let mut could_refer_to = |b: &NameBinding<'_>, misc: AmbiguityErrorMisc, also: &str| {\n             let what = self.binding_description(b, ident, misc == AmbiguityErrorMisc::FromPrelude);\n             let note_msg = format!(\"`{ident}` could{also} refer to {what}\",\n                                    ident = ident, also = also, what = what);\n@@ -5073,7 +5066,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn report_conflict<'b>(&mut self,\n-                       parent: Module,\n+                       parent: Module<'_>,\n                        ident: Ident,\n                        ns: Namespace,\n                        new_binding: &NameBinding<'b>,\n@@ -5451,7 +5444,7 @@ fn import_candidate_to_enum_paths(suggestion: &ImportSuggestion) -> (String, Str\n /// When an entity with a given name is not available in scope, we search for\n /// entities with that name in all crates. This method allows outputting the\n /// results of this search in a programmer-friendly way\n-fn show_candidates(err: &mut DiagnosticBuilder,\n+fn show_candidates(err: &mut DiagnosticBuilder<'_>,\n                    // This is `None` if all placement locations are inside expansions\n                    span: Option<Span>,\n                    candidates: &[ImportSuggestion],\n@@ -5500,10 +5493,10 @@ fn show_candidates(err: &mut DiagnosticBuilder,\n }\n \n /// A somewhat inefficient routine to obtain the name of a module.\n-fn module_to_string(module: Module) -> Option<String> {\n+fn module_to_string(module: Module<'_>) -> Option<String> {\n     let mut names = Vec::new();\n \n-    fn collect_mod(names: &mut Vec<Ident>, module: Module) {\n+    fn collect_mod(names: &mut Vec<Ident>, module: Module<'_>) {\n         if let ModuleKind::Def(_, name) = module.kind {\n             if let Some(parent) = module.parent {\n                 names.push(Ident::with_empty_ctxt(name));"}, {"sha": "c8c0847a28eac023dbb3d3e9160ea121f227be96", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,16 +1,17 @@\n-use {AmbiguityError, AmbiguityKind, AmbiguityErrorMisc};\n-use {CrateLint, Resolver, ResolutionError, ScopeSet, Weak};\n-use {Module, ModuleKind, NameBinding, NameBindingKind, PathResult, Segment, ToNameBinding};\n-use {is_known_tool, resolve_error};\n-use ModuleOrUniformRoot;\n-use Namespace::*;\n-use build_reduced_graph::{BuildReducedGraphVisitor, IsMacroExport};\n-use resolve_imports::ImportResolver;\n+use crate::{AmbiguityError, AmbiguityKind, AmbiguityErrorMisc};\n+use crate::{CrateLint, Resolver, ResolutionError, ScopeSet, Weak};\n+use crate::{Module, ModuleKind, NameBinding, NameBindingKind, PathResult, Segment, ToNameBinding};\n+use crate::{is_known_tool, resolve_error};\n+use crate::ModuleOrUniformRoot;\n+use crate::Namespace::*;\n+use crate::build_reduced_graph::{BuildReducedGraphVisitor, IsMacroExport};\n+use crate::resolve_imports::ImportResolver;\n use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX, DefIndex,\n                          CrateNum, DefIndexAddressSpace};\n use rustc::hir::def::{Def, NonMacroAttrKind};\n use rustc::hir::map::{self, DefCollector};\n use rustc::{ty, lint};\n+use rustc::{bug, span_bug};\n use syntax::ast::{self, Ident};\n use syntax::attr;\n use syntax::errors::DiagnosticBuilder;\n@@ -26,7 +27,7 @@ use syntax::symbol::{Symbol, keywords};\n use syntax::visit::Visitor;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax_pos::{Span, DUMMY_SP};\n-use errors::Applicability;\n+use crate::errors::Applicability;\n \n use std::cell::Cell;\n use std::{mem, ptr};\n@@ -530,7 +531,7 @@ impl<'a> Resolver<'a> {\n             BuiltinTypes,\n         }\n \n-        bitflags! {\n+        bitflags::bitflags! {\n             struct Flags: u8 {\n                 const MACRO_RULES        = 1 << 0;\n                 const MODULE             = 1 << 1;\n@@ -560,7 +561,7 @@ impl<'a> Resolver<'a> {\n         // }\n         // So we have to save the innermost solution and continue searching in outer scopes\n         // to detect potential ambiguities.\n-        let mut innermost_result: Option<(&NameBinding, Flags)> = None;\n+        let mut innermost_result: Option<(&NameBinding<'_>, Flags)> = None;\n \n         // Go through all the scopes and try to resolve the name.\n         let rust_2015 = orig_ident.span.rust_2015();"}, {"sha": "712871408fa04e7c0e2675140b3e9d0bb8936651", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,13 +1,13 @@\n-use self::ImportDirectiveSubclass::*;\n+use ImportDirectiveSubclass::*;\n \n-use {AmbiguityError, AmbiguityKind, AmbiguityErrorMisc};\n-use {CrateLint, Module, ModuleOrUniformRoot, PerNS, ScopeSet, Weak};\n-use Namespace::{self, TypeNS, MacroNS};\n-use {NameBinding, NameBindingKind, ToNameBinding, PathResult, PrivacyError};\n-use {Resolver, Segment};\n-use {names_to_string, module_to_string};\n-use {resolve_error, ResolutionError};\n-use macros::ParentScope;\n+use crate::{AmbiguityError, AmbiguityKind, AmbiguityErrorMisc};\n+use crate::{CrateLint, Module, ModuleOrUniformRoot, PerNS, ScopeSet, Weak};\n+use crate::Namespace::{self, TypeNS, MacroNS};\n+use crate::{NameBinding, NameBindingKind, ToNameBinding, PathResult, PrivacyError};\n+use crate::{Resolver, Segment};\n+use crate::{names_to_string, module_to_string};\n+use crate::{resolve_error, ResolutionError};\n+use crate::macros::ParentScope;\n \n use rustc_data_structures::ptr_key::PtrKey;\n use rustc::ty;\n@@ -17,14 +17,18 @@ use rustc::hir::def_id::{CrateNum, DefId};\n use rustc::hir::def::*;\n use rustc::session::DiagnosticMessageId;\n use rustc::util::nodemap::FxHashSet;\n+use rustc::{bug, span_bug};\n \n use syntax::ast::{self, Ident, Name, NodeId, CRATE_NODE_ID};\n use syntax::ext::base::Determinacy::{self, Determined, Undetermined};\n use syntax::ext::hygiene::Mark;\n use syntax::symbol::keywords;\n use syntax::util::lev_distance::find_best_match_for_name;\n+use syntax::{struct_span_err, unwrap_or};\n use syntax_pos::{MultiSpan, Span};\n \n+use log::debug;\n+\n use std::cell::{Cell, RefCell};\n use std::{mem, ptr};\n \n@@ -623,14 +627,14 @@ pub struct ImportResolver<'a, 'b: 'a> {\n     pub resolver: &'a mut Resolver<'b>,\n }\n \n-impl<'a, 'b: 'a> ::std::ops::Deref for ImportResolver<'a, 'b> {\n+impl<'a, 'b: 'a> std::ops::Deref for ImportResolver<'a, 'b> {\n     type Target = Resolver<'b>;\n     fn deref(&self) -> &Resolver<'b> {\n         self.resolver\n     }\n }\n \n-impl<'a, 'b: 'a> ::std::ops::DerefMut for ImportResolver<'a, 'b> {\n+impl<'a, 'b: 'a> std::ops::DerefMut for ImportResolver<'a, 'b> {\n     fn deref_mut(&mut self) -> &mut Resolver<'b> {\n         self.resolver\n     }\n@@ -1316,7 +1320,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n }\n \n fn import_path_to_string(names: &[Ident],\n-                         subclass: &ImportDirectiveSubclass,\n+                         subclass: &ImportDirectiveSubclass<'_>,\n                          span: Span) -> String {\n     let pos = names.iter()\n         .position(|p| span == p.span && p.name != keywords::PathRoot.name());\n@@ -1336,7 +1340,7 @@ fn import_path_to_string(names: &[Ident],\n     }\n }\n \n-fn import_directive_subclass_to_string(subclass: &ImportDirectiveSubclass) -> String {\n+fn import_directive_subclass_to_string(subclass: &ImportDirectiveSubclass<'_>) -> String {\n     match *subclass {\n         SingleImport { source, .. } => source.to_string(),\n         GlobImport { .. } => \"*\".to_string(),"}, {"sha": "d805833a7efc12e4953405fb3799a96b0b06d5a6", "filename": "src/librustc_tsan/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_tsan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_tsan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2FCargo.toml?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -3,6 +3,7 @@ authors = [\"The Rust Project Developers\"]\n build = \"build.rs\"\n name = \"rustc_tsan\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_tsan\""}, {"sha": "ed9c37087c7e5a115ca4d8bc686fb049a83ac1ab", "filename": "src/librustc_tsan/build.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_tsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_tsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Fbuild.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,6 +1,3 @@\n-extern crate build_helper;\n-extern crate cmake;\n-\n use std::env;\n use build_helper::sanitizer_lib_boilerplate;\n "}, {"sha": "568bb540c471952e8cae17288848893916f7e2ec", "filename": "src/librustc_tsan/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_tsan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibrustc_tsan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Flib.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,8 +1,9 @@\n #![sanitizer_runtime]\n-#![feature(nll)]\n #![feature(sanitizer_runtime)]\n #![feature(staged_api)]\n #![no_std]\n #![unstable(feature = \"sanitizer_runtime_lib\",\n             reason = \"internal implementation detail of sanitizers\",\n             issue = \"0\")]\n+\n+#![deny(rust_2018_idioms)]"}, {"sha": "4068c0f9c7de5ca698f1056a004c4be31efaf9dd", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -131,6 +131,11 @@ fn handle_ebadf<T>(r: io::Result<T>, default: T) -> io::Result<T> {\n ///\n /// [`io::stdin`]: fn.stdin.html\n /// [`BufRead`]: trait.BufRead.html\n+///\n+/// ### Note: Windows Portability Consideration\n+/// When operating in a console, the Windows implementation of this stream does not support\n+/// non-UTF-8 byte sequences. Attempting to read bytes that are not valid UTF-8 will return\n+/// an error.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Stdin {\n     inner: Arc<Mutex<BufReader<Maybe<StdinRaw>>>>,\n@@ -144,6 +149,11 @@ pub struct Stdin {\n /// [`Read`]: trait.Read.html\n /// [`BufRead`]: trait.BufRead.html\n /// [`Stdin::lock`]: struct.Stdin.html#method.lock\n+///\n+/// ### Note: Windows Portability Consideration\n+/// When operating in a console, the Windows implementation of this stream does not support\n+/// non-UTF-8 byte sequences. Attempting to read bytes that are not valid UTF-8 will return\n+/// an error.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StdinLock<'a> {\n     inner: MutexGuard<'a, BufReader<Maybe<StdinRaw>>>,\n@@ -157,6 +167,11 @@ pub struct StdinLock<'a> {\n ///\n /// [lock]: struct.Stdin.html#method.lock\n ///\n+/// ### Note: Windows Portability Consideration\n+/// When operating in a console, the Windows implementation of this stream does not support\n+/// non-UTF-8 byte sequences. Attempting to read bytes that are not valid UTF-8 will return\n+/// an error.\n+///\n /// # Examples\n ///\n /// Using implicit synchronization:\n@@ -328,6 +343,11 @@ impl<'a> fmt::Debug for StdinLock<'a> {\n ///\n /// Created by the [`io::stdout`] method.\n ///\n+/// ### Note: Windows Portability Consideration\n+/// When operating in a console, the Windows implementation of this stream does not support\n+/// non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return\n+/// an error.\n+///\n /// [`lock`]: #method.lock\n /// [`io::stdout`]: fn.stdout.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -343,6 +363,11 @@ pub struct Stdout {\n /// This handle implements the [`Write`] trait, and is constructed via\n /// the [`Stdout::lock`] method.\n ///\n+/// ### Note: Windows Portability Consideration\n+/// When operating in a console, the Windows implementation of this stream does not support\n+/// non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return\n+/// an error.\n+///\n /// [`Write`]: trait.Write.html\n /// [`Stdout::lock`]: struct.Stdout.html#method.lock\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -358,6 +383,11 @@ pub struct StdoutLock<'a> {\n ///\n /// [Stdout::lock]: struct.Stdout.html#method.lock\n ///\n+/// ### Note: Windows Portability Consideration\n+/// When operating in a console, the Windows implementation of this stream does not support\n+/// non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return\n+/// an error.\n+///\n /// # Examples\n ///\n /// Using implicit synchronization:\n@@ -476,6 +506,11 @@ impl<'a> fmt::Debug for StdoutLock<'a> {\n /// For more information, see the [`io::stderr`] method.\n ///\n /// [`io::stderr`]: fn.stderr.html\n+///\n+/// ### Note: Windows Portability Consideration\n+/// When operating in a console, the Windows implementation of this stream does not support\n+/// non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return\n+/// an error.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Stderr {\n     inner: Arc<ReentrantMutex<RefCell<Maybe<StderrRaw>>>>,\n@@ -487,6 +522,11 @@ pub struct Stderr {\n /// the [`Stderr::lock`] method.\n ///\n /// [`Stderr::lock`]: struct.Stderr.html#method.lock\n+///\n+/// ### Note: Windows Portability Consideration\n+/// When operating in a console, the Windows implementation of this stream does not support\n+/// non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return\n+/// an error.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StderrLock<'a> {\n     inner: ReentrantMutexGuard<'a, RefCell<Maybe<StderrRaw>>>,\n@@ -496,6 +536,11 @@ pub struct StderrLock<'a> {\n ///\n /// This handle is not buffered.\n ///\n+/// ### Note: Windows Portability Consideration\n+/// When operating in a console, the Windows implementation of this stream does not support\n+/// non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return\n+/// an error.\n+///\n /// # Examples\n ///\n /// Using implicit synchronization:"}, {"sha": "0ea19a855257b4d8cc3a34f15d1b00f0746db03c", "filename": "src/libstd/sys/windows/stdio.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -188,7 +188,9 @@ impl Output {\n }\n \n fn invalid_encoding() -> io::Error {\n-    io::Error::new(io::ErrorKind::InvalidData, \"text was not valid unicode\")\n+    io::Error::new(io::ErrorKind::InvalidData,\n+                   \"Windows stdio in console mode does not support non-UTF-8 byte sequences; \\\n+                    see https://github.com/rust-lang/rust/issues/23344\")\n }\n \n fn readconsole_input_control(wakeup_mask: c::ULONG) -> c::CONSOLE_READCONSOLE_CONTROL {"}, {"sha": "c22b55b8c13a0f1846f523cfe468a3398f68b0ff", "filename": "src/libsyntax_ext/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2FCargo.toml?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"syntax_ext\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"syntax_ext\""}, {"sha": "ebcdceea7c5a90fcfc32846e28723621df5aaf63", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,20 +1,21 @@\n // Inline assembly support.\n //\n-use self::State::*;\n+use State::*;\n \n use rustc_data_structures::thin_vec::ThinVec;\n \n-use errors::DiagnosticBuilder;\n+use crate::errors::DiagnosticBuilder;\n+\n use syntax::ast;\n-use syntax::ext::base;\n-use syntax::ext::base::*;\n+use syntax::ext::base::{self, *};\n use syntax::feature_gate;\n use syntax::parse::{self, token};\n use syntax::ptr::P;\n use syntax::symbol::Symbol;\n use syntax::ast::AsmDialect;\n use syntax_pos::Span;\n use syntax::tokenstream;\n+use syntax::{span_err, struct_span_err};\n \n enum State {\n     Asm,\n@@ -40,7 +41,7 @@ impl State {\n \n const OPTIONS: &[&str] = &[\"volatile\", \"alignstack\", \"intel\"];\n \n-pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt,\n+pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                        sp: Span,\n                        tts: &[tokenstream::TokenTree])\n                        -> Box<dyn base::MacResult + 'cx> {"}, {"sha": "984ef26f5ab8b12d01b17ea00f3e7a32541b9f0d", "filename": "src/libsyntax_ext/assert.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,4 +1,5 @@\n-use errors::DiagnosticBuilder;\n+use crate::errors::DiagnosticBuilder;\n+\n use syntax::ast::{self, *};\n use syntax::source_map::Spanned;\n use syntax::ext::base::*;\n@@ -11,7 +12,7 @@ use syntax::tokenstream::{TokenStream, TokenTree};\n use syntax_pos::{Span, DUMMY_SP};\n \n pub fn expand_assert<'cx>(\n-    cx: &'cx mut ExtCtxt,\n+    cx: &'cx mut ExtCtxt<'_>,\n     sp: Span,\n     tts: &[TokenTree],\n ) -> Box<dyn MacResult + 'cx> {"}, {"sha": "e2104550878ec8366a26f144400a8c00085ddcc2", "filename": "src/libsyntax_ext/cfg.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcfg.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -2,17 +2,17 @@\n /// a literal `true` or `false` based on whether the given cfg matches the\n /// current compilation environment.\n \n-use errors::DiagnosticBuilder;\n+use crate::errors::DiagnosticBuilder;\n+\n use syntax::ast;\n-use syntax::ext::base::*;\n-use syntax::ext::base;\n+use syntax::ext::base::{self, *};\n use syntax::ext::build::AstBuilder;\n use syntax::attr;\n use syntax::tokenstream;\n use syntax::parse::token;\n use syntax_pos::Span;\n \n-pub fn expand_cfg<'cx>(cx: &mut ExtCtxt,\n+pub fn expand_cfg<'cx>(cx: &mut ExtCtxt<'_>,\n                        sp: Span,\n                        tts: &[tokenstream::TokenTree])\n                        -> Box<dyn base::MacResult + 'static> {"}, {"sha": "59d3f2c9c7813a0901097227b18546ead73315f8", "filename": "src/libsyntax_ext/compile_error.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fcompile_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fcompile_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcompile_error.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,11 +1,10 @@\n // The compiler code necessary to support the compile_error! extension.\n \n-use syntax::ext::base::*;\n-use syntax::ext::base;\n+use syntax::ext::base::{self, *};\n use syntax_pos::Span;\n use syntax::tokenstream;\n \n-pub fn expand_compile_error<'cx>(cx: &'cx mut ExtCtxt,\n+pub fn expand_compile_error<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                               sp: Span,\n                               tts: &[tokenstream::TokenTree])\n                               -> Box<dyn base::MacResult + 'cx> {"}, {"sha": "230b00c0f8f552767f0c061c10354cb7dc834e96", "filename": "src/libsyntax_ext/concat.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -3,12 +3,11 @@ use syntax::ext::base;\n use syntax::ext::build::AstBuilder;\n use syntax::symbol::Symbol;\n use syntax::tokenstream;\n-use syntax_pos;\n \n use std::string::String;\n \n pub fn expand_syntax_ext(\n-    cx: &mut base::ExtCtxt,\n+    cx: &mut base::ExtCtxt<'_>,\n     sp: syntax_pos::Span,\n     tts: &[tokenstream::TokenTree],\n ) -> Box<dyn base::MacResult + 'static> {"}, {"sha": "8c9eb4bf2d8ffac3a6a98956d72e647a0e269814", "filename": "src/libsyntax_ext/concat_idents.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat_idents.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,16 +1,15 @@\n use rustc_data_structures::thin_vec::ThinVec;\n \n use syntax::ast;\n-use syntax::ext::base::*;\n-use syntax::ext::base;\n+use syntax::ext::base::{self, *};\n use syntax::feature_gate;\n use syntax::parse::token;\n use syntax::ptr::P;\n use syntax_pos::Span;\n use syntax_pos::symbol::Symbol;\n use syntax::tokenstream::TokenTree;\n \n-pub fn expand_syntax_ext<'cx>(cx: &'cx mut ExtCtxt,\n+pub fn expand_syntax_ext<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                               sp: Span,\n                               tts: &[TokenTree])\n                               -> Box<dyn base::MacResult + 'cx> {"}, {"sha": "c7b805e0bdca6bf0dd8f23bf89760f4c83e6f359", "filename": "src/libsyntax_ext/deriving/bounds.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fbounds.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,19 +1,20 @@\n-use deriving::path_std;\n-use deriving::generic::*;\n-use deriving::generic::ty::*;\n+use crate::deriving::path_std;\n+use crate::deriving::generic::*;\n+use crate::deriving::generic::ty::*;\n+\n use syntax::ast::MetaItem;\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax_pos::Span;\n \n-pub fn expand_deriving_unsafe_bound(cx: &mut ExtCtxt,\n+pub fn expand_deriving_unsafe_bound(cx: &mut ExtCtxt<'_>,\n                                     span: Span,\n                                     _: &MetaItem,\n                                     _: &Annotatable,\n                                     _: &mut dyn FnMut(Annotatable)) {\n     cx.span_err(span, \"this unsafe trait should be implemented explicitly\");\n }\n \n-pub fn expand_deriving_copy(cx: &mut ExtCtxt,\n+pub fn expand_deriving_copy(cx: &mut ExtCtxt<'_>,\n                             span: Span,\n                             mitem: &MetaItem,\n                             item: &Annotatable,"}, {"sha": "b347092e1bc4c3208847acf79f3b6e93ee392f63", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,17 +1,16 @@\n-use deriving::path_std;\n-use deriving::generic::*;\n-use deriving::generic::ty::*;\n+use crate::deriving::path_std;\n+use crate::deriving::generic::*;\n+use crate::deriving::generic::ty::*;\n \n-use syntax::ast::{self, Expr, Generics, ItemKind, MetaItem, VariantData};\n-use syntax::ast::GenericArg;\n+use syntax::ast::{self, Expr, GenericArg, Generics, ItemKind, MetaItem, VariantData};\n use syntax::attr;\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n use syntax::ptr::P;\n use syntax::symbol::{Symbol, keywords};\n use syntax_pos::Span;\n \n-pub fn expand_deriving_clone(cx: &mut ExtCtxt,\n+pub fn expand_deriving_clone(cx: &mut ExtCtxt<'_>,\n                              span: Span,\n                              mitem: &MetaItem,\n                              item: &Annotatable,\n@@ -105,12 +104,12 @@ pub fn expand_deriving_clone(cx: &mut ExtCtxt,\n }\n \n fn cs_clone_shallow(name: &str,\n-                    cx: &mut ExtCtxt,\n+                    cx: &mut ExtCtxt<'_>,\n                     trait_span: Span,\n-                    substr: &Substructure,\n+                    substr: &Substructure<'_>,\n                     is_union: bool)\n                     -> P<Expr> {\n-    fn assert_ty_bounds(cx: &mut ExtCtxt, stmts: &mut Vec<ast::Stmt>,\n+    fn assert_ty_bounds(cx: &mut ExtCtxt<'_>, stmts: &mut Vec<ast::Stmt>,\n                         ty: P<ast::Ty>, span: Span, helper_name: &str) {\n         // Generate statement `let _: helper_name<ty>;`,\n         // set the expn ID so we can use the unstable struct.\n@@ -120,7 +119,7 @@ fn cs_clone_shallow(name: &str,\n                                         vec![GenericArg::Type(ty)], vec![]);\n         stmts.push(cx.stmt_let_type_only(span, cx.ty_path(assert_path)));\n     }\n-    fn process_variant(cx: &mut ExtCtxt, stmts: &mut Vec<ast::Stmt>, variant: &VariantData) {\n+    fn process_variant(cx: &mut ExtCtxt<'_>, stmts: &mut Vec<ast::Stmt>, variant: &VariantData) {\n         for field in variant.fields() {\n             // let _: AssertParamIsClone<FieldTy>;\n             assert_ty_bounds(cx, stmts, field.ty.clone(), field.span, \"AssertParamIsClone\");\n@@ -151,14 +150,14 @@ fn cs_clone_shallow(name: &str,\n }\n \n fn cs_clone(name: &str,\n-            cx: &mut ExtCtxt,\n+            cx: &mut ExtCtxt<'_>,\n             trait_span: Span,\n-            substr: &Substructure)\n+            substr: &Substructure<'_>)\n             -> P<Expr> {\n     let ctor_path;\n     let all_fields;\n     let fn_path = cx.std_path(&[\"clone\", \"Clone\", \"clone\"]);\n-    let subcall = |cx: &mut ExtCtxt, field: &FieldInfo| {\n+    let subcall = |cx: &mut ExtCtxt<'_>, field: &FieldInfo<'_>| {\n         let args = vec![cx.expr_addr_of(field.span, field.self_.clone())];\n         cx.expr_call_global(field.span, fn_path.clone(), args)\n     };"}, {"sha": "a1035ff641fa191fdf15b2b87ec89ed8922d5d5b", "filename": "src/libsyntax_ext/deriving/cmp/eq.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,6 +1,6 @@\n-use deriving::path_std;\n-use deriving::generic::*;\n-use deriving::generic::ty::*;\n+use crate::deriving::path_std;\n+use crate::deriving::generic::*;\n+use crate::deriving::generic::ty::*;\n \n use syntax::ast::{self, Expr, MetaItem, GenericArg};\n use syntax::ext::base::{Annotatable, ExtCtxt};\n@@ -9,7 +9,7 @@ use syntax::ptr::P;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n \n-pub fn expand_deriving_eq(cx: &mut ExtCtxt,\n+pub fn expand_deriving_eq(cx: &mut ExtCtxt<'_>,\n                           span: Span,\n                           mitem: &MetaItem,\n                           item: &Annotatable,\n@@ -44,8 +44,11 @@ pub fn expand_deriving_eq(cx: &mut ExtCtxt,\n     trait_def.expand_ext(cx, mitem, item, push, true)\n }\n \n-fn cs_total_eq_assert(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> P<Expr> {\n-    fn assert_ty_bounds(cx: &mut ExtCtxt, stmts: &mut Vec<ast::Stmt>,\n+fn cs_total_eq_assert(cx: &mut ExtCtxt<'_>,\n+                      trait_span: Span,\n+                      substr: &Substructure<'_>)\n+                      -> P<Expr> {\n+    fn assert_ty_bounds(cx: &mut ExtCtxt<'_>, stmts: &mut Vec<ast::Stmt>,\n                         ty: P<ast::Ty>, span: Span, helper_name: &str) {\n         // Generate statement `let _: helper_name<ty>;`,\n         // set the expn ID so we can use the unstable struct.\n@@ -55,7 +58,9 @@ fn cs_total_eq_assert(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n                                         vec![GenericArg::Type(ty)], vec![]);\n         stmts.push(cx.stmt_let_type_only(span, cx.ty_path(assert_path)));\n     }\n-    fn process_variant(cx: &mut ExtCtxt, stmts: &mut Vec<ast::Stmt>, variant: &ast::VariantData) {\n+    fn process_variant(cx: &mut ExtCtxt<'_>,\n+                       stmts: &mut Vec<ast::Stmt>,\n+                       variant: &ast::VariantData) {\n         for field in variant.fields() {\n             // let _: AssertParamIsEq<FieldTy>;\n             assert_ty_bounds(cx, stmts, field.ty.clone(), field.span, \"AssertParamIsEq\");"}, {"sha": "e4f939c151f3ef1564b3e35de6ca619fc04a54de", "filename": "src/libsyntax_ext/deriving/cmp/ord.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,6 +1,6 @@\n-use deriving::path_std;\n-use deriving::generic::*;\n-use deriving::generic::ty::*;\n+use crate::deriving::path_std;\n+use crate::deriving::generic::*;\n+use crate::deriving::generic::ty::*;\n \n use syntax::ast::{self, Expr, MetaItem};\n use syntax::ext::base::{Annotatable, ExtCtxt};\n@@ -9,7 +9,7 @@ use syntax::ptr::P;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n \n-pub fn expand_deriving_ord(cx: &mut ExtCtxt,\n+pub fn expand_deriving_ord(cx: &mut ExtCtxt<'_>,\n                            span: Span,\n                            mitem: &MetaItem,\n                            item: &Annotatable,\n@@ -44,7 +44,7 @@ pub fn expand_deriving_ord(cx: &mut ExtCtxt,\n }\n \n \n-pub fn ordering_collapsed(cx: &mut ExtCtxt,\n+pub fn ordering_collapsed(cx: &mut ExtCtxt<'_>,\n                           span: Span,\n                           self_arg_tags: &[ast::Ident])\n                           -> P<ast::Expr> {\n@@ -53,7 +53,7 @@ pub fn ordering_collapsed(cx: &mut ExtCtxt,\n     cx.expr_method_call(span, lft, cx.ident_of(\"cmp\"), vec![rgt])\n }\n \n-pub fn cs_cmp(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<Expr> {\n+pub fn cs_cmp(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>) -> P<Expr> {\n     let test_id = cx.ident_of(\"cmp\").gensym();\n     let equals_path = cx.path_global(span, cx.std_path(&[\"cmp\", \"Ordering\", \"Equal\"]));\n "}, {"sha": "07026ae37391997aa3f723f59830904194a22bf4", "filename": "src/libsyntax_ext/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,6 +1,6 @@\n-use deriving::{path_local, path_std};\n-use deriving::generic::*;\n-use deriving::generic::ty::*;\n+use crate::deriving::{path_local, path_std};\n+use crate::deriving::generic::*;\n+use crate::deriving::generic::ty::*;\n \n use syntax::ast::{BinOpKind, Expr, MetaItem};\n use syntax::ext::base::{Annotatable, ExtCtxt};\n@@ -9,22 +9,22 @@ use syntax::ptr::P;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n \n-pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt,\n+pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt<'_>,\n                                   span: Span,\n                                   mitem: &MetaItem,\n                                   item: &Annotatable,\n                                   push: &mut dyn FnMut(Annotatable)) {\n     // structures are equal if all fields are equal, and non equal, if\n     // any fields are not equal or if the enum variants are different\n-    fn cs_op(cx: &mut ExtCtxt,\n+    fn cs_op(cx: &mut ExtCtxt<'_>,\n              span: Span,\n-             substr: &Substructure,\n+             substr: &Substructure<'_>,\n              op: BinOpKind,\n              combiner: BinOpKind,\n              base: bool)\n              -> P<Expr>\n     {\n-        let op = |cx: &mut ExtCtxt, span: Span, self_f: P<Expr>, other_fs: &[P<Expr>]| {\n+        let op = |cx: &mut ExtCtxt<'_>, span: Span, self_f: P<Expr>, other_fs: &[P<Expr>]| {\n             let other_f = match (other_fs.len(), other_fs.get(0)) {\n                 (1, Some(o_f)) => o_f,\n                 _ => cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialEq)`\"),\n@@ -53,10 +53,10 @@ pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt,\n             substr)\n     }\n \n-    fn cs_eq(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<Expr> {\n+    fn cs_eq(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>) -> P<Expr> {\n         cs_op(cx, span, substr, BinOpKind::Eq, BinOpKind::And, true)\n     }\n-    fn cs_ne(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<Expr> {\n+    fn cs_ne(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>) -> P<Expr> {\n         cs_op(cx, span, substr, BinOpKind::Ne, BinOpKind::Or, false)\n     }\n "}, {"sha": "e99abeb118ea2f116194edf46a96efcc95f4d196", "filename": "src/libsyntax_ext/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,8 +1,8 @@\n-pub use self::OrderingOp::*;\n+pub use OrderingOp::*;\n \n-use deriving::{path_local, pathvec_std, path_std};\n-use deriving::generic::*;\n-use deriving::generic::ty::*;\n+use crate::deriving::{path_local, pathvec_std, path_std};\n+use crate::deriving::generic::*;\n+use crate::deriving::generic::ty::*;\n \n use syntax::ast::{self, BinOpKind, Expr, MetaItem};\n use syntax::ext::base::{Annotatable, ExtCtxt};\n@@ -11,7 +11,7 @@ use syntax::ptr::P;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n \n-pub fn expand_deriving_partial_ord(cx: &mut ExtCtxt,\n+pub fn expand_deriving_partial_ord(cx: &mut ExtCtxt<'_>,\n                                    span: Span,\n                                    mitem: &MetaItem,\n                                    item: &Annotatable,\n@@ -95,7 +95,7 @@ pub enum OrderingOp {\n     GeOp,\n }\n \n-pub fn some_ordering_collapsed(cx: &mut ExtCtxt,\n+pub fn some_ordering_collapsed(cx: &mut ExtCtxt<'_>,\n                                span: Span,\n                                op: OrderingOp,\n                                self_arg_tags: &[ast::Ident])\n@@ -112,7 +112,7 @@ pub fn some_ordering_collapsed(cx: &mut ExtCtxt,\n     cx.expr_method_call(span, lft, cx.ident_of(op_str), vec![rgt])\n }\n \n-pub fn cs_partial_cmp(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<Expr> {\n+pub fn cs_partial_cmp(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>) -> P<Expr> {\n     let test_id = cx.ident_of(\"cmp\").gensym();\n     let ordering = cx.path_global(span, cx.std_path(&[\"cmp\", \"Ordering\", \"Equal\"]));\n     let ordering_expr = cx.expr_path(ordering.clone());\n@@ -184,14 +184,14 @@ pub fn cs_partial_cmp(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<\n /// Strict inequality.\n fn cs_op(less: bool,\n          inclusive: bool,\n-         cx: &mut ExtCtxt,\n+         cx: &mut ExtCtxt<'_>,\n          span: Span,\n-         substr: &Substructure) -> P<Expr> {\n-    let ordering_path = |cx: &mut ExtCtxt, name: &str| {\n+         substr: &Substructure<'_>) -> P<Expr> {\n+    let ordering_path = |cx: &mut ExtCtxt<'_>, name: &str| {\n         cx.expr_path(cx.path_global(span, cx.std_path(&[\"cmp\", \"Ordering\", name])))\n     };\n \n-    let par_cmp = |cx: &mut ExtCtxt, span, self_f: P<Expr>, other_fs: &[P<Expr>], default| {\n+    let par_cmp = |cx: &mut ExtCtxt<'_>, span, self_f: P<Expr>, other_fs: &[P<Expr>], default| {\n         let other_f = match (other_fs.len(), other_fs.get(0)) {\n             (1, Some(o_f)) => o_f,\n             _ => cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialOrd)`\"),"}, {"sha": "7d9b8402cac3fc4a24161cf4aee17b3b0589a464", "filename": "src/libsyntax_ext/deriving/custom.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,4 +1,7 @@\n-use errors::FatalError;\n+use crate::errors::FatalError;\n+use crate::proc_macro_impl::EXEC_STRATEGY;\n+use crate::proc_macro_server;\n+\n use syntax::ast::{self, ItemKind, Attribute, Mac};\n use syntax::attr::{mark_used, mark_known};\n use syntax::source_map::Span;\n@@ -9,8 +12,6 @@ use syntax::tokenstream;\n use syntax::visit::Visitor;\n use syntax_pos::DUMMY_SP;\n \n-use proc_macro_impl::EXEC_STRATEGY;\n-\n struct MarkAttrs<'a>(&'a [ast::Name]);\n \n impl<'a> Visitor<'a> for MarkAttrs<'a> {\n@@ -25,15 +26,15 @@ impl<'a> Visitor<'a> for MarkAttrs<'a> {\n }\n \n pub struct ProcMacroDerive {\n-    pub client: ::proc_macro::bridge::client::Client<\n-        fn(::proc_macro::TokenStream) -> ::proc_macro::TokenStream,\n+    pub client: proc_macro::bridge::client::Client<\n+        fn(proc_macro::TokenStream) -> proc_macro::TokenStream,\n     >,\n     pub attrs: Vec<ast::Name>,\n }\n \n impl MultiItemModifier for ProcMacroDerive {\n     fn expand(&self,\n-              ecx: &mut ExtCtxt,\n+              ecx: &mut ExtCtxt<'_>,\n               span: Span,\n               _meta_item: &ast::MetaItem,\n               item: Annotatable)\n@@ -67,7 +68,7 @@ impl MultiItemModifier for ProcMacroDerive {\n         let token = Token::interpolated(token::NtItem(item));\n         let input = tokenstream::TokenTree::Token(DUMMY_SP, token).into();\n \n-        let server = ::proc_macro_server::Rustc::new(ecx);\n+        let server = proc_macro_server::Rustc::new(ecx);\n         let stream = match self.client.run(&EXEC_STRATEGY, server, input) {\n             Ok(stream) => stream,\n             Err(e) => {"}, {"sha": "7dc2d007d73d6b86835075ae38af8c96336cf294", "filename": "src/libsyntax_ext/deriving/debug.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,6 +1,6 @@\n-use deriving::path_std;\n-use deriving::generic::*;\n-use deriving::generic::ty::*;\n+use crate::deriving::path_std;\n+use crate::deriving::generic::*;\n+use crate::deriving::generic::ty::*;\n \n use rustc_data_structures::thin_vec::ThinVec;\n \n@@ -11,7 +11,7 @@ use syntax::ext::build::AstBuilder;\n use syntax::ptr::P;\n use syntax_pos::{DUMMY_SP, Span};\n \n-pub fn expand_deriving_debug(cx: &mut ExtCtxt,\n+pub fn expand_deriving_debug(cx: &mut ExtCtxt<'_>,\n                              span: Span,\n                              mitem: &MetaItem,\n                              item: &Annotatable,\n@@ -47,7 +47,7 @@ pub fn expand_deriving_debug(cx: &mut ExtCtxt,\n }\n \n /// We use the debug builders to do the heavy lifting here\n-fn show_substructure(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<Expr> {\n+fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>) -> P<Expr> {\n     // build fmt.debug_struct(<name>).field(<fieldname>, &<fieldval>)....build()\n     // or fmt.debug_tuple(<name>).field(&<fieldval>)....build()\n     // based on the \"shape\".\n@@ -124,7 +124,7 @@ fn show_substructure(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<E\n     cx.expr_block(block)\n }\n \n-fn stmt_let_undescore(cx: &mut ExtCtxt, sp: Span, expr: P<ast::Expr>) -> ast::Stmt {\n+fn stmt_let_undescore(cx: &mut ExtCtxt<'_>, sp: Span, expr: P<ast::Expr>) -> ast::Stmt {\n     let local = P(ast::Local {\n         pat: cx.pat_wild(sp),\n         ty: None,"}, {"sha": "b082351d5f68411f1bd0a45fbeb026c3104061eb", "filename": "src/libsyntax_ext/deriving/decodable.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,9 +1,9 @@\n //! The compiler code necessary for `#[derive(Decodable)]`. See encodable.rs for more.\n \n-use deriving::{self, pathvec_std};\n-use deriving::generic::*;\n-use deriving::generic::ty::*;\n-use deriving::warn_if_deprecated;\n+use crate::deriving::{self, pathvec_std};\n+use crate::deriving::generic::*;\n+use crate::deriving::generic::ty::*;\n+use crate::deriving::warn_if_deprecated;\n \n use syntax::ast;\n use syntax::ast::{Expr, MetaItem, Mutability};\n@@ -13,15 +13,15 @@ use syntax::ptr::P;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n \n-pub fn expand_deriving_rustc_decodable(cx: &mut ExtCtxt,\n+pub fn expand_deriving_rustc_decodable(cx: &mut ExtCtxt<'_>,\n                                        span: Span,\n                                        mitem: &MetaItem,\n                                        item: &Annotatable,\n                                        push: &mut dyn FnMut(Annotatable)) {\n     expand_deriving_decodable_imp(cx, span, mitem, item, push, \"rustc_serialize\")\n }\n \n-pub fn expand_deriving_decodable(cx: &mut ExtCtxt,\n+pub fn expand_deriving_decodable(cx: &mut ExtCtxt<'_>,\n                                  span: Span,\n                                  mitem: &MetaItem,\n                                  item: &Annotatable,\n@@ -30,7 +30,7 @@ pub fn expand_deriving_decodable(cx: &mut ExtCtxt,\n     expand_deriving_decodable_imp(cx, span, mitem, item, push, \"serialize\")\n }\n \n-fn expand_deriving_decodable_imp(cx: &mut ExtCtxt,\n+fn expand_deriving_decodable_imp(cx: &mut ExtCtxt<'_>,\n                                  span: Span,\n                                  mitem: &MetaItem,\n                                  item: &Annotatable,\n@@ -79,9 +79,9 @@ fn expand_deriving_decodable_imp(cx: &mut ExtCtxt,\n     trait_def.expand(cx, mitem, item, push)\n }\n \n-fn decodable_substructure(cx: &mut ExtCtxt,\n+fn decodable_substructure(cx: &mut ExtCtxt<'_>,\n                           trait_span: Span,\n-                          substr: &Substructure,\n+                          substr: &Substructure<'_>,\n                           krate: &str)\n                           -> P<Expr> {\n     let decoder = substr.nonself_args[0].clone();\n@@ -168,13 +168,13 @@ fn decodable_substructure(cx: &mut ExtCtxt,\n /// Create a decoder for a single enum variant/struct:\n /// - `outer_pat_path` is the path to this enum variant/struct\n /// - `getarg` should retrieve the `usize`-th field with name `@str`.\n-fn decode_static_fields<F>(cx: &mut ExtCtxt,\n+fn decode_static_fields<F>(cx: &mut ExtCtxt<'_>,\n                            trait_span: Span,\n                            outer_pat_path: ast::Path,\n                            fields: &StaticFields,\n                            mut getarg: F)\n                            -> P<Expr>\n-    where F: FnMut(&mut ExtCtxt, Span, Symbol, usize) -> P<Expr>\n+    where F: FnMut(&mut ExtCtxt<'_>, Span, Symbol, usize) -> P<Expr>\n {\n     match *fields {\n         Unnamed(ref fields, is_tuple) => {"}, {"sha": "6db0a29165a4a05e24e082fc2e71b42bd4de56a9", "filename": "src/libsyntax_ext/deriving/default.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,15 +1,16 @@\n-use deriving::path_std;\n-use deriving::generic::*;\n-use deriving::generic::ty::*;\n+use crate::deriving::path_std;\n+use crate::deriving::generic::*;\n+use crate::deriving::generic::ty::*;\n \n use syntax::ast::{Expr, MetaItem};\n use syntax::ext::base::{Annotatable, DummyResult, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n use syntax::ptr::P;\n use syntax::symbol::Symbol;\n+use syntax::span_err;\n use syntax_pos::Span;\n \n-pub fn expand_deriving_default(cx: &mut ExtCtxt,\n+pub fn expand_deriving_default(cx: &mut ExtCtxt<'_>,\n                                span: Span,\n                                mitem: &MetaItem,\n                                item: &Annotatable,\n@@ -42,7 +43,10 @@ pub fn expand_deriving_default(cx: &mut ExtCtxt,\n     trait_def.expand(cx, mitem, item, push)\n }\n \n-fn default_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> P<Expr> {\n+fn default_substructure(cx: &mut ExtCtxt<'_>,\n+                        trait_span: Span,\n+                        substr: &Substructure<'_>)\n+                        -> P<Expr> {\n     let default_ident = cx.std_path(&[\"default\", \"Default\", \"default\"]);\n     let default_call = |span| cx.expr_call_global(span, default_ident.clone(), Vec::new());\n "}, {"sha": "dd5646342b362efda30f758539884efe785c13a5", "filename": "src/libsyntax_ext/deriving/encodable.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -82,10 +82,10 @@\n //! }\n //! ```\n \n-use deriving::{self, pathvec_std};\n-use deriving::generic::*;\n-use deriving::generic::ty::*;\n-use deriving::warn_if_deprecated;\n+use crate::deriving::{self, pathvec_std};\n+use crate::deriving::generic::*;\n+use crate::deriving::generic::ty::*;\n+use crate::deriving::warn_if_deprecated;\n \n use syntax::ast::{Expr, ExprKind, MetaItem, Mutability};\n use syntax::ext::base::{Annotatable, ExtCtxt};\n@@ -94,15 +94,15 @@ use syntax::ptr::P;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n \n-pub fn expand_deriving_rustc_encodable(cx: &mut ExtCtxt,\n+pub fn expand_deriving_rustc_encodable(cx: &mut ExtCtxt<'_>,\n                                        span: Span,\n                                        mitem: &MetaItem,\n                                        item: &Annotatable,\n                                        push: &mut dyn FnMut(Annotatable)) {\n     expand_deriving_encodable_imp(cx, span, mitem, item, push, \"rustc_serialize\")\n }\n \n-pub fn expand_deriving_encodable(cx: &mut ExtCtxt,\n+pub fn expand_deriving_encodable(cx: &mut ExtCtxt<'_>,\n                                  span: Span,\n                                  mitem: &MetaItem,\n                                  item: &Annotatable,\n@@ -111,7 +111,7 @@ pub fn expand_deriving_encodable(cx: &mut ExtCtxt,\n     expand_deriving_encodable_imp(cx, span, mitem, item, push, \"serialize\")\n }\n \n-fn expand_deriving_encodable_imp(cx: &mut ExtCtxt,\n+fn expand_deriving_encodable_imp(cx: &mut ExtCtxt<'_>,\n                                  span: Span,\n                                  mitem: &MetaItem,\n                                  item: &Annotatable,\n@@ -162,9 +162,9 @@ fn expand_deriving_encodable_imp(cx: &mut ExtCtxt,\n     trait_def.expand(cx, mitem, item, push)\n }\n \n-fn encodable_substructure(cx: &mut ExtCtxt,\n+fn encodable_substructure(cx: &mut ExtCtxt<'_>,\n                           trait_span: Span,\n-                          substr: &Substructure,\n+                          substr: &Substructure<'_>,\n                           krate: &'static str)\n                           -> P<Expr> {\n     let encoder = substr.nonself_args[0].clone();"}, {"sha": "e6fe125da9f98eb2e25637d7039cba73bdabf9a5", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -174,8 +174,8 @@\n //!                 (<ident of C1>, <span of C1>, Named(vec![(<ident of x>, <span of x>)]))])\n //! ```\n \n-pub use self::StaticFields::*;\n-pub use self::SubstructureFields::*;\n+pub use StaticFields::*;\n+pub use SubstructureFields::*;\n \n use std::cell::RefCell;\n use std::iter;\n@@ -195,9 +195,9 @@ use syntax::symbol::{Symbol, keywords};\n use syntax::parse::ParseSess;\n use syntax_pos::{DUMMY_SP, Span};\n \n-use self::ty::{LifetimeBounds, Path, Ptr, PtrTy, Self_, Ty};\n+use ty::{LifetimeBounds, Path, Ptr, PtrTy, Self_, Ty};\n \n-use deriving;\n+use crate::deriving;\n \n pub mod ty;\n \n@@ -321,15 +321,15 @@ pub enum SubstructureFields<'a> {\n /// Combine the values of all the fields together. The last argument is\n /// all the fields of all the structures.\n pub type CombineSubstructureFunc<'a> =\n-    Box<dyn FnMut(&mut ExtCtxt, Span, &Substructure) -> P<Expr> + 'a>;\n+    Box<dyn FnMut(&mut ExtCtxt<'_>, Span, &Substructure<'_>) -> P<Expr> + 'a>;\n \n /// Deal with non-matching enum variants.  The tuple is a list of\n /// identifiers (one for each `Self` argument, which could be any of the\n /// variants since they have been collapsed together) and the identifiers\n /// holding the variant index value for each of the `Self` arguments.  The\n /// last argument is all the non-`Self` args of the method being derived.\n pub type EnumNonMatchCollapsedFunc<'a> =\n-    Box<dyn FnMut(&mut ExtCtxt, Span, (&[Ident], &[Ident]), &[P<Expr>]) -> P<Expr> + 'a>;\n+    Box<dyn FnMut(&mut ExtCtxt<'_>, Span, (&[Ident], &[Ident]), &[P<Expr>]) -> P<Expr> + 'a>;\n \n pub fn combine_substructure<'a>(f: CombineSubstructureFunc<'a>)\n                                 -> RefCell<CombineSubstructureFunc<'a>> {\n@@ -342,7 +342,7 @@ pub fn combine_substructure<'a>(f: CombineSubstructureFunc<'a>)\n fn find_type_parameters(ty: &ast::Ty,\n                         ty_param_names: &[ast::Name],\n                         span: Span,\n-                        cx: &ExtCtxt)\n+                        cx: &ExtCtxt<'_>)\n                         -> Vec<P<ast::Ty>> {\n     use syntax::visit;\n \n@@ -386,15 +386,15 @@ fn find_type_parameters(ty: &ast::Ty,\n \n impl<'a> TraitDef<'a> {\n     pub fn expand(self,\n-                  cx: &mut ExtCtxt,\n+                  cx: &mut ExtCtxt<'_>,\n                   mitem: &ast::MetaItem,\n                   item: &'a Annotatable,\n                   push: &mut dyn FnMut(Annotatable)) {\n         self.expand_ext(cx, mitem, item, push, false);\n     }\n \n     pub fn expand_ext(self,\n-                      cx: &mut ExtCtxt,\n+                      cx: &mut ExtCtxt<'_>,\n                       mitem: &ast::MetaItem,\n                       item: &'a Annotatable,\n                       push: &mut dyn FnMut(Annotatable),\n@@ -513,7 +513,7 @@ impl<'a> TraitDef<'a> {\n     /// where B1, ..., BN are the bounds given by `bounds_paths`.'. Z is a phantom type, and\n     /// therefore does not get bound by the derived trait.\n     fn create_derived_impl(&self,\n-                           cx: &mut ExtCtxt,\n+                           cx: &mut ExtCtxt<'_>,\n                            type_ident: Ident,\n                            generics: &Generics,\n                            field_tys: Vec<P<ast::Ty>>,\n@@ -696,7 +696,7 @@ impl<'a> TraitDef<'a> {\n     }\n \n     fn expand_struct_def(&self,\n-                         cx: &mut ExtCtxt,\n+                         cx: &mut ExtCtxt<'_>,\n                          struct_def: &'a VariantData,\n                          type_ident: Ident,\n                          generics: &Generics,\n@@ -746,7 +746,7 @@ impl<'a> TraitDef<'a> {\n     }\n \n     fn expand_enum_def(&self,\n-                       cx: &mut ExtCtxt,\n+                       cx: &mut ExtCtxt<'_>,\n                        enum_def: &'a EnumDef,\n                        type_attrs: &[ast::Attribute],\n                        type_ident: Ident,\n@@ -832,12 +832,12 @@ fn find_repr_type_name(sess: &ParseSess, type_attrs: &[ast::Attribute]) -> &'sta\n \n impl<'a> MethodDef<'a> {\n     fn call_substructure_method(&self,\n-                                cx: &mut ExtCtxt,\n-                                trait_: &TraitDef,\n+                                cx: &mut ExtCtxt<'_>,\n+                                trait_: &TraitDef<'_>,\n                                 type_ident: Ident,\n                                 self_args: &[P<Expr>],\n                                 nonself_args: &[P<Expr>],\n-                                fields: &SubstructureFields)\n+                                fields: &SubstructureFields<'_>)\n                                 -> P<Expr> {\n         let substructure = Substructure {\n             type_ident,\n@@ -847,13 +847,13 @@ impl<'a> MethodDef<'a> {\n             fields,\n         };\n         let mut f = self.combine_substructure.borrow_mut();\n-        let f: &mut CombineSubstructureFunc = &mut *f;\n+        let f: &mut CombineSubstructureFunc<'_> = &mut *f;\n         f(cx, trait_.span, &substructure)\n     }\n \n     fn get_ret_ty(&self,\n-                  cx: &mut ExtCtxt,\n-                  trait_: &TraitDef,\n+                  cx: &mut ExtCtxt<'_>,\n+                  trait_: &TraitDef<'_>,\n                   generics: &Generics,\n                   type_ident: Ident)\n                   -> P<ast::Ty> {\n@@ -866,8 +866,8 @@ impl<'a> MethodDef<'a> {\n \n     fn split_self_nonself_args\n         (&self,\n-         cx: &mut ExtCtxt,\n-         trait_: &TraitDef,\n+         cx: &mut ExtCtxt<'_>,\n+         trait_: &TraitDef<'_>,\n          type_ident: Ident,\n          generics: &Generics)\n          -> (Option<ast::ExplicitSelf>, Vec<P<Expr>>, Vec<P<Expr>>, Vec<(Ident, P<ast::Ty>)>) {\n@@ -912,8 +912,8 @@ impl<'a> MethodDef<'a> {\n     }\n \n     fn create_method(&self,\n-                     cx: &mut ExtCtxt,\n-                     trait_: &TraitDef,\n+                     cx: &mut ExtCtxt<'_>,\n+                     trait_: &TraitDef<'_>,\n                      type_ident: Ident,\n                      generics: &Generics,\n                      abi: Abi,\n@@ -1005,7 +1005,7 @@ impl<'a> MethodDef<'a> {\n     /// }\n     /// ```\n     fn expand_struct_method_body<'b>(&self,\n-                                     cx: &mut ExtCtxt,\n+                                     cx: &mut ExtCtxt<'_>,\n                                      trait_: &TraitDef<'b>,\n                                      struct_def: &'b VariantData,\n                                      type_ident: Ident,\n@@ -1077,8 +1077,8 @@ impl<'a> MethodDef<'a> {\n     }\n \n     fn expand_static_struct_method_body(&self,\n-                                        cx: &mut ExtCtxt,\n-                                        trait_: &TraitDef,\n+                                        cx: &mut ExtCtxt<'_>,\n+                                        trait_: &TraitDef<'_>,\n                                         struct_def: &VariantData,\n                                         type_ident: Ident,\n                                         self_args: &[P<Expr>],\n@@ -1125,7 +1125,7 @@ impl<'a> MethodDef<'a> {\n     /// as their results are unused.  The point of `__self_vi` and\n     /// `__arg_1_vi` is for `PartialOrd`; see #15503.)\n     fn expand_enum_method_body<'b>(&self,\n-                                   cx: &mut ExtCtxt,\n+                                   cx: &mut ExtCtxt<'_>,\n                                    trait_: &TraitDef<'b>,\n                                    enum_def: &'b EnumDef,\n                                    type_attrs: &[ast::Attribute],\n@@ -1179,7 +1179,7 @@ impl<'a> MethodDef<'a> {\n     /// }\n     /// ```\n     fn build_enum_match_tuple<'b>(&self,\n-                                  cx: &mut ExtCtxt,\n+                                  cx: &mut ExtCtxt<'_>,\n                                   trait_: &TraitDef<'b>,\n                                   enum_def: &'b EnumDef,\n                                   type_attrs: &[ast::Attribute],\n@@ -1230,7 +1230,7 @@ impl<'a> MethodDef<'a> {\n             .enumerate()\n             .filter(|&(_, v)| !(self.unify_fieldless_variants && v.node.data.fields().is_empty()))\n             .map(|(index, variant)| {\n-                let mk_self_pat = |cx: &mut ExtCtxt, self_arg_name: &str| {\n+                let mk_self_pat = |cx: &mut ExtCtxt<'_>, self_arg_name: &str| {\n                     let (p, idents) = trait_.create_enum_variant_pattern(cx,\n                                                      type_ident,\n                                                      variant,\n@@ -1296,7 +1296,7 @@ impl<'a> MethodDef<'a> {\n                                     other: others,\n                                     attrs,\n                         }\n-                    }).collect::<Vec<FieldInfo>>();\n+                    }).collect::<Vec<FieldInfo<'_>>>();\n \n                 // Now, for some given VariantK, we have built up\n                 // expressions for referencing every field of every\n@@ -1501,8 +1501,8 @@ impl<'a> MethodDef<'a> {\n     }\n \n     fn expand_static_enum_method_body(&self,\n-                                      cx: &mut ExtCtxt,\n-                                      trait_: &TraitDef,\n+                                      cx: &mut ExtCtxt<'_>,\n+                                      trait_: &TraitDef<'_>,\n                                       enum_def: &EnumDef,\n                                       type_ident: Ident,\n                                       self_args: &[P<Expr>],\n@@ -1527,7 +1527,7 @@ impl<'a> MethodDef<'a> {\n \n // general helper methods.\n impl<'a> TraitDef<'a> {\n-    fn summarise_struct(&self, cx: &mut ExtCtxt, struct_def: &VariantData) -> StaticFields {\n+    fn summarise_struct(&self, cx: &mut ExtCtxt<'_>, struct_def: &VariantData) -> StaticFields {\n         let mut named_idents = Vec::new();\n         let mut just_spans = Vec::new();\n         for field in struct_def.fields() {\n@@ -1553,7 +1553,7 @@ impl<'a> TraitDef<'a> {\n     }\n \n     fn create_subpatterns(&self,\n-                          cx: &mut ExtCtxt,\n+                          cx: &mut ExtCtxt<'_>,\n                           field_paths: Vec<ast::Ident>,\n                           mutbl: ast::Mutability,\n                           use_temporaries: bool)\n@@ -1573,7 +1573,7 @@ impl<'a> TraitDef<'a> {\n \n     fn create_struct_pattern\n         (&self,\n-         cx: &mut ExtCtxt,\n+         cx: &mut ExtCtxt<'_>,\n          struct_path: ast::Path,\n          struct_def: &'a VariantData,\n          prefix: &str,\n@@ -1633,7 +1633,7 @@ impl<'a> TraitDef<'a> {\n \n     fn create_enum_variant_pattern\n         (&self,\n-         cx: &mut ExtCtxt,\n+         cx: &mut ExtCtxt<'_>,\n          enum_ident: ast::Ident,\n          variant: &'a ast::Variant,\n          prefix: &str,\n@@ -1652,10 +1652,10 @@ impl<'a> TraitDef<'a> {\n pub fn cs_fold_fields<'a, F>(use_foldl: bool,\n                              mut f: F,\n                              base: P<Expr>,\n-                             cx: &mut ExtCtxt,\n+                             cx: &mut ExtCtxt<'_>,\n                              all_fields: &[FieldInfo<'a>])\n                              -> P<Expr>\n-    where F: FnMut(&mut ExtCtxt, Span, P<Expr>, P<Expr>, &[P<Expr>]) -> P<Expr>\n+    where F: FnMut(&mut ExtCtxt<'_>, Span, P<Expr>, P<Expr>, &[P<Expr>]) -> P<Expr>\n {\n     if use_foldl {\n         all_fields.iter().fold(base, |old, field| {\n@@ -1668,10 +1668,10 @@ pub fn cs_fold_fields<'a, F>(use_foldl: bool,\n     }\n }\n \n-pub fn cs_fold_enumnonmatch(mut enum_nonmatch_f: EnumNonMatchCollapsedFunc,\n-                            cx: &mut ExtCtxt,\n+pub fn cs_fold_enumnonmatch(mut enum_nonmatch_f: EnumNonMatchCollapsedFunc<'_>,\n+                            cx: &mut ExtCtxt<'_>,\n                             trait_span: Span,\n-                            substructure: &Substructure)\n+                            substructure: &Substructure<'_>)\n                             -> P<Expr>\n {\n     match *substructure.fields {\n@@ -1685,7 +1685,7 @@ pub fn cs_fold_enumnonmatch(mut enum_nonmatch_f: EnumNonMatchCollapsedFunc,\n     }\n }\n \n-pub fn cs_fold_static(cx: &mut ExtCtxt,\n+pub fn cs_fold_static(cx: &mut ExtCtxt<'_>,\n                       trait_span: Span)\n                       -> P<Expr>\n {\n@@ -1697,12 +1697,12 @@ pub fn cs_fold_static(cx: &mut ExtCtxt,\n pub fn cs_fold<F>(use_foldl: bool,\n                   f: F,\n                   base: P<Expr>,\n-                  enum_nonmatch_f: EnumNonMatchCollapsedFunc,\n-                  cx: &mut ExtCtxt,\n+                  enum_nonmatch_f: EnumNonMatchCollapsedFunc<'_>,\n+                  cx: &mut ExtCtxt<'_>,\n                   trait_span: Span,\n-                  substructure: &Substructure)\n+                  substructure: &Substructure<'_>)\n                   -> P<Expr>\n-    where F: FnMut(&mut ExtCtxt, Span, P<Expr>, P<Expr>, &[P<Expr>]) -> P<Expr>\n+    where F: FnMut(&mut ExtCtxt<'_>, Span, P<Expr>, P<Expr>, &[P<Expr>]) -> P<Expr>\n {\n     match *substructure.fields {\n         EnumMatching(.., ref all_fields) |\n@@ -1730,13 +1730,13 @@ pub fn cs_fold<F>(use_foldl: bool,\n pub fn cs_fold1<F, B>(use_foldl: bool,\n                       f: F,\n                       mut b: B,\n-                      enum_nonmatch_f: EnumNonMatchCollapsedFunc,\n-                      cx: &mut ExtCtxt,\n+                      enum_nonmatch_f: EnumNonMatchCollapsedFunc<'_>,\n+                      cx: &mut ExtCtxt<'_>,\n                       trait_span: Span,\n-                      substructure: &Substructure)\n+                      substructure: &Substructure<'_>)\n                       -> P<Expr>\n-    where F: FnMut(&mut ExtCtxt, Span, P<Expr>, P<Expr>, &[P<Expr>]) -> P<Expr>,\n-          B: FnMut(&mut ExtCtxt, Option<(Span, P<Expr>, &[P<Expr>])>) -> P<Expr>\n+    where F: FnMut(&mut ExtCtxt<'_>, Span, P<Expr>, P<Expr>, &[P<Expr>]) -> P<Expr>,\n+          B: FnMut(&mut ExtCtxt<'_>, Option<(Span, P<Expr>, &[P<Expr>])>) -> P<Expr>\n {\n     match *substructure.fields {\n         EnumMatching(.., ref all_fields) |\n@@ -1776,12 +1776,12 @@ pub fn cs_fold1<F, B>(use_foldl: bool,\n /// ```\n #[inline]\n pub fn cs_same_method<F>(f: F,\n-                         mut enum_nonmatch_f: EnumNonMatchCollapsedFunc,\n-                         cx: &mut ExtCtxt,\n+                         mut enum_nonmatch_f: EnumNonMatchCollapsedFunc<'_>,\n+                         cx: &mut ExtCtxt<'_>,\n                          trait_span: Span,\n-                         substructure: &Substructure)\n+                         substructure: &Substructure<'_>)\n                          -> P<Expr>\n-    where F: FnOnce(&mut ExtCtxt, Span, Vec<P<Expr>>) -> P<Expr>\n+    where F: FnOnce(&mut ExtCtxt<'_>, Span, Vec<P<Expr>>) -> P<Expr>\n {\n     match *substructure.fields {\n         EnumMatching(.., ref all_fields) |"}, {"sha": "ea6e07922b2b375396b07753b60d1c10d7c5fd3e", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,11 +1,10 @@\n //! A mini version of ast::Ty, which is easier to use, and features an explicit `Self` type to use\n //! when specifying impls to be derived.\n \n-pub use self::PtrTy::*;\n-pub use self::Ty::*;\n+pub use PtrTy::*;\n+pub use Ty::*;\n \n-use syntax::ast;\n-use syntax::ast::{Expr, GenericParamKind, Generics, Ident, SelfKind, GenericArg};\n+use syntax::ast::{self, Expr, GenericParamKind, Generics, Ident, SelfKind, GenericArg};\n use syntax::ext::base::ExtCtxt;\n use syntax::ext::build::AstBuilder;\n use syntax::source_map::{respan, DUMMY_SP};\n@@ -60,15 +59,15 @@ impl<'a> Path<'a> {\n     }\n \n     pub fn to_ty(&self,\n-                 cx: &ExtCtxt,\n+                 cx: &ExtCtxt<'_>,\n                  span: Span,\n                  self_ty: Ident,\n                  self_generics: &Generics)\n                  -> P<ast::Ty> {\n         cx.ty_path(self.to_path(cx, span, self_ty, self_generics))\n     }\n     pub fn to_path(&self,\n-                   cx: &ExtCtxt,\n+                   cx: &ExtCtxt<'_>,\n                    span: Span,\n                    self_ty: Ident,\n                    self_generics: &Generics)\n@@ -127,19 +126,19 @@ pub fn nil_ty<'r>() -> Ty<'r> {\n     Tuple(Vec::new())\n }\n \n-fn mk_lifetime(cx: &ExtCtxt, span: Span, lt: &Option<&str>) -> Option<ast::Lifetime> {\n+fn mk_lifetime(cx: &ExtCtxt<'_>, span: Span, lt: &Option<&str>) -> Option<ast::Lifetime> {\n     lt.map(|s|\n         cx.lifetime(span, Ident::from_str(s))\n     )\n }\n \n-fn mk_lifetimes(cx: &ExtCtxt, span: Span, lt: &Option<&str>) -> Vec<ast::Lifetime> {\n+fn mk_lifetimes(cx: &ExtCtxt<'_>, span: Span, lt: &Option<&str>) -> Vec<ast::Lifetime> {\n     mk_lifetime(cx, span, lt).into_iter().collect()\n }\n \n impl<'a> Ty<'a> {\n     pub fn to_ty(&self,\n-                 cx: &ExtCtxt,\n+                 cx: &ExtCtxt<'_>,\n                  span: Span,\n                  self_ty: Ident,\n                  self_generics: &Generics)\n@@ -167,7 +166,7 @@ impl<'a> Ty<'a> {\n     }\n \n     pub fn to_path(&self,\n-                   cx: &ExtCtxt,\n+                   cx: &ExtCtxt<'_>,\n                    span: Span,\n                    self_ty: Ident,\n                    generics: &Generics)\n@@ -193,11 +192,11 @@ impl<'a> Ty<'a> {\n }\n \n \n-fn mk_ty_param(cx: &ExtCtxt,\n+fn mk_ty_param(cx: &ExtCtxt<'_>,\n                span: Span,\n                name: &str,\n                attrs: &[ast::Attribute],\n-               bounds: &[Path],\n+               bounds: &[Path<'_>],\n                self_ident: Ident,\n                self_generics: &Generics)\n                -> ast::GenericParam {\n@@ -237,7 +236,7 @@ impl<'a> LifetimeBounds<'a> {\n         }\n     }\n     pub fn to_generics(&self,\n-                       cx: &ExtCtxt,\n+                       cx: &ExtCtxt<'_>,\n                        span: Span,\n                        self_ty: Ident,\n                        self_generics: &Generics)\n@@ -262,9 +261,9 @@ impl<'a> LifetimeBounds<'a> {\n     }\n }\n \n-pub fn get_explicit_self(cx: &ExtCtxt,\n+pub fn get_explicit_self(cx: &ExtCtxt<'_>,\n                          span: Span,\n-                         self_ptr: &Option<PtrTy>)\n+                         self_ptr: &Option<PtrTy<'_>>)\n                          -> (P<Expr>, ast::ExplicitSelf) {\n     // this constructs a fresh `self` path\n     let self_path = cx.expr_self(span);"}, {"sha": "0d4f2ddc3be7b02fd8267cd34d410297b1719ba7", "filename": "src/libsyntax_ext/deriving/hash.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,14 +1,14 @@\n-use deriving::{self, pathvec_std, path_std};\n-use deriving::generic::*;\n-use deriving::generic::ty::*;\n+use crate::deriving::{self, pathvec_std, path_std};\n+use crate::deriving::generic::*;\n+use crate::deriving::generic::ty::*;\n \n use syntax::ast::{Expr, MetaItem, Mutability};\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n use syntax::ptr::P;\n use syntax_pos::Span;\n \n-pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n+pub fn expand_deriving_hash(cx: &mut ExtCtxt<'_>,\n                             span: Span,\n                             mitem: &MetaItem,\n                             item: &Annotatable,\n@@ -50,7 +50,7 @@ pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n     hash_trait_def.expand(cx, mitem, item, push);\n }\n \n-fn hash_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> P<Expr> {\n+fn hash_substructure(cx: &mut ExtCtxt<'_>, trait_span: Span, substr: &Substructure<'_>) -> P<Expr> {\n     let state_expr = match (substr.nonself_args.len(), substr.nonself_args.get(0)) {\n         (1, Some(o_f)) => o_f,\n         _ => {"}, {"sha": "2c8a996cdb0cb495e93039f3bc578869b8f784ab", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -90,7 +90,7 @@ derive_traits! {\n }\n \n #[inline] // because `name` is a compile-time constant\n-fn warn_if_deprecated(ecx: &mut ExtCtxt, sp: Span, name: &str) {\n+fn warn_if_deprecated(ecx: &mut ExtCtxt<'_>, sp: Span, name: &str) {\n     if let Some(replacement) = match name {\n         \"Encodable\" => Some(\"RustcEncodable\"),\n         \"Decodable\" => Some(\"RustcDecodable\"),\n@@ -131,7 +131,7 @@ fn hygienic_type_parameter(item: &Annotatable, base: &str) -> String {\n }\n \n /// Constructs an expression that calls an intrinsic\n-fn call_intrinsic(cx: &ExtCtxt,\n+fn call_intrinsic(cx: &ExtCtxt<'_>,\n                   mut span: Span,\n                   intrinsic: &str,\n                   args: Vec<P<ast::Expr>>)"}, {"sha": "9bbd9fdec17d69d8951703488ba5c228e2d37d0c", "filename": "src/libsyntax_ext/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fdiagnostics.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,5 +1,7 @@\n #![allow(non_snake_case)]\n \n+use syntax::{register_diagnostic, register_long_diagnostics};\n+\n // Error messages for EXXXX errors.\n // Each message should start and end with a new line, and be wrapped to 80 characters.\n // In vim you can `:set tw=80` and use `gq` to wrap paragraphs. Use `:set tw=0` to disable."}, {"sha": "ccff4aec2c8c77f0bf87af561dd475436a5c39df", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -4,16 +4,15 @@\n //\n \n use syntax::ast::{self, Ident, GenericArg};\n-use syntax::ext::base::*;\n-use syntax::ext::base;\n+use syntax::ext::base::{self, *};\n use syntax::ext::build::AstBuilder;\n use syntax::symbol::{keywords, Symbol};\n use syntax_pos::Span;\n use syntax::tokenstream;\n \n use std::env;\n \n-pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt,\n+pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                               sp: Span,\n                               tts: &[tokenstream::TokenTree])\n                               -> Box<dyn base::MacResult + 'cx> {\n@@ -44,7 +43,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt,\n     MacEager::expr(e)\n }\n \n-pub fn expand_env<'cx>(cx: &'cx mut ExtCtxt,\n+pub fn expand_env<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                        sp: Span,\n                        tts: &[tokenstream::TokenTree])\n                        -> Box<dyn base::MacResult + 'cx> {"}, {"sha": "6bb7ee1d5ddfd9b174ce8367448c0aa2f9301ed4", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,9 +1,11 @@\n-use self::ArgumentType::*;\n-use self::Position::*;\n+use ArgumentType::*;\n+use Position::*;\n \n use fmt_macros as parse;\n \n-use errors::DiagnosticBuilder;\n+use crate::errors::DiagnosticBuilder;\n+use crate::errors::Applicability;\n+\n use syntax::ast;\n use syntax::ext::base::{self, *};\n use syntax::ext::build::AstBuilder;\n@@ -13,7 +15,6 @@ use syntax::ptr::P;\n use syntax::symbol::Symbol;\n use syntax::tokenstream;\n use syntax_pos::{MultiSpan, Span, DUMMY_SP};\n-use errors::Applicability;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use std::borrow::Cow;\n@@ -184,7 +185,7 @@ fn parse_args<'a>(\n }\n \n impl<'a, 'b> Context<'a, 'b> {\n-    fn resolve_name_inplace(&self, p: &mut parse::Piece) {\n+    fn resolve_name_inplace(&self, p: &mut parse::Piece<'_>) {\n         // NOTE: the `unwrap_or` branch is needed in case of invalid format\n         // arguments, e.g., `format_args!(\"{foo}\")`.\n         let lookup = |s| *self.names.get(s).unwrap_or(&0);\n@@ -208,7 +209,7 @@ impl<'a, 'b> Context<'a, 'b> {\n     /// Verifies one piece of a parse string, and remembers it if valid.\n     /// All errors are not emitted as fatal so we can continue giving errors\n     /// about this and possibly other format strings.\n-    fn verify_piece(&mut self, p: &parse::Piece) {\n+    fn verify_piece(&mut self, p: &parse::Piece<'_>) {\n         match *p {\n             parse::String(..) => {}\n             parse::NextArgument(ref arg) => {\n@@ -231,7 +232,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         }\n     }\n \n-    fn verify_count(&mut self, c: parse::Count) {\n+    fn verify_count(&mut self, c: parse::Count<'_>) {\n         match c {\n             parse::CountImplied |\n             parse::CountIs(..) => {}\n@@ -244,7 +245,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         }\n     }\n \n-    fn describe_num_args(&self) -> Cow<str> {\n+    fn describe_num_args(&self) -> Cow<'_, str> {\n         match self.args.len() {\n             0 => \"no arguments were given\".into(),\n             1 => \"there is 1 argument\".into(),\n@@ -385,11 +386,11 @@ impl<'a, 'b> Context<'a, 'b> {\n         self.count_args_index_offset = sofar;\n     }\n \n-    fn rtpath(ecx: &ExtCtxt, s: &str) -> Vec<ast::Ident> {\n+    fn rtpath(ecx: &ExtCtxt<'_>, s: &str) -> Vec<ast::Ident> {\n         ecx.std_path(&[\"fmt\", \"rt\", \"v1\", s])\n     }\n \n-    fn build_count(&self, c: parse::Count) -> P<ast::Expr> {\n+    fn build_count(&self, c: parse::Count<'_>) -> P<ast::Expr> {\n         let sp = self.macsp;\n         let count = |c, arg| {\n             let mut path = Context::rtpath(self.ecx, \"Count\");\n@@ -426,7 +427,7 @@ impl<'a, 'b> Context<'a, 'b> {\n     /// Build a static `rt::Argument` from a `parse::Piece` or append\n     /// to the `literal` string.\n     fn build_piece(&mut self,\n-                   piece: &parse::Piece,\n+                   piece: &parse::Piece<'_>,\n                    arg_index_consumed: &mut Vec<usize>)\n                    -> Option<P<ast::Expr>> {\n         let sp = self.macsp;\n@@ -647,7 +648,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         self.ecx.expr_call_global(self.macsp, path, fn_args)\n     }\n \n-    fn format_arg(ecx: &ExtCtxt,\n+    fn format_arg(ecx: &ExtCtxt<'_>,\n                   macsp: Span,\n                   mut sp: Span,\n                   ty: &ArgumentType,\n@@ -686,7 +687,7 @@ impl<'a, 'b> Context<'a, 'b> {\n     }\n }\n \n-pub fn expand_format_args<'cx>(ecx: &'cx mut ExtCtxt,\n+pub fn expand_format_args<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n                                mut sp: Span,\n                                tts: &[tokenstream::TokenTree])\n                                -> Box<dyn base::MacResult + 'cx> {\n@@ -703,7 +704,7 @@ pub fn expand_format_args<'cx>(ecx: &'cx mut ExtCtxt,\n }\n \n pub fn expand_format_args_nl<'cx>(\n-    ecx: &'cx mut ExtCtxt,\n+    ecx: &'cx mut ExtCtxt<'_>,\n     mut sp: Span,\n     tts: &[tokenstream::TokenTree],\n ) -> Box<dyn base::MacResult + 'cx> {\n@@ -734,7 +735,7 @@ pub fn expand_format_args_nl<'cx>(\n \n /// Take the various parts of `format_args!(efmt, args..., name=names...)`\n /// and construct the appropriate formatting expression.\n-pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n+pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt<'_>,\n                                     sp: Span,\n                                     efmt: P<ast::Expr>,\n                                     args: Vec<P<ast::Expr>>,\n@@ -952,7 +953,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n         piece\n     }).collect::<Vec<_>>();\n \n-    let numbered_position_args = pieces.iter().any(|arg: &parse::Piece| {\n+    let numbered_position_args = pieces.iter().any(|arg: &parse::Piece<'_>| {\n         match *arg {\n             parse::String(_) => false,\n             parse::NextArgument(arg) => {"}, {"sha": "381325b2963ef8a928f107dc818255c0efde3b06", "filename": "src/libsyntax_ext/format_foreign.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat_foreign.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -68,7 +68,7 @@ pub mod printf {\n         pub position: (usize, usize),\n     }\n \n-    impl<'a> Format<'a> {\n+    impl Format<'_> {\n         /// Translate this directive into an equivalent Rust formatting directive.\n         ///\n         /// Returns `None` in cases where the `printf` directive does not have an exact Rust\n@@ -249,12 +249,12 @@ pub mod printf {\n             }\n         }\n \n-        fn translate(&self, s: &mut String) -> ::std::fmt::Result {\n+        fn translate(&self, s: &mut String) -> std::fmt::Result {\n             use std::fmt::Write;\n             match *self {\n                 Num::Num(n) => write!(s, \"{}\", n),\n                 Num::Arg(n) => {\n-                    let n = n.checked_sub(1).ok_or(::std::fmt::Error)?;\n+                    let n = n.checked_sub(1).ok_or(std::fmt::Error)?;\n                     write!(s, \"{}$\", n)\n                 },\n                 Num::Next => write!(s, \"*\"),\n@@ -263,7 +263,7 @@ pub mod printf {\n     }\n \n     /// Returns an iterator over all substitutions in a given string.\n-    pub fn iter_subs(s: &str) -> Substitutions {\n+    pub fn iter_subs(s: &str) -> Substitutions<'_> {\n         Substitutions {\n             s,\n             pos: 0,\n@@ -309,7 +309,7 @@ pub mod printf {\n     }\n \n     /// Parse the next substitution from the input string.\n-    pub fn parse_next_substitution(s: &str) -> Option<(Substitution, &str)> {\n+    pub fn parse_next_substitution(s: &str) -> Option<(Substitution<'_>, &str)> {\n         use self::State::*;\n \n         let at = {\n@@ -389,7 +389,7 @@ pub mod printf {\n         let mut precision: Option<Num> = None;\n         let mut length: Option<&str> = None;\n         let mut type_: &str = \"\";\n-        let end: Cur;\n+        let end: Cur<'_>;\n \n         if let Start = state {\n             match c {\n@@ -575,7 +575,7 @@ pub mod printf {\n         Some((Substitution::Format(f), end.slice_after()))\n     }\n \n-    fn at_next_cp_while<F>(mut cur: Cur, mut pred: F) -> Cur\n+    fn at_next_cp_while<F>(mut cur: Cur<'_>, mut pred: F) -> Cur<'_>\n     where F: FnMut(char) -> bool {\n         loop {\n             match cur.next_cp() {\n@@ -769,7 +769,7 @@ pub mod shell {\n         Escape((usize, usize)),\n     }\n \n-    impl<'a> Substitution<'a> {\n+    impl Substitution<'_> {\n         pub fn as_str(&self) -> String {\n             match self {\n                 Substitution::Ordinal(n, _) => format!(\"${}\", n),\n@@ -804,7 +804,7 @@ pub mod shell {\n     }\n \n     /// Returns an iterator over all substitutions in a given string.\n-    pub fn iter_subs(s: &str) -> Substitutions {\n+    pub fn iter_subs(s: &str) -> Substitutions<'_> {\n         Substitutions {\n             s,\n             pos: 0,\n@@ -839,7 +839,7 @@ pub mod shell {\n     }\n \n     /// Parse the next substitution from the input string.\n-    pub fn parse_next_substitution(s: &str) -> Option<(Substitution, &str)> {\n+    pub fn parse_next_substitution(s: &str) -> Option<(Substitution<'_>, &str)> {\n         let at = {\n             let start = s.find('$')?;\n             match s[start+1..].chars().next()? {\n@@ -868,7 +868,7 @@ pub mod shell {\n         }\n     }\n \n-    fn at_next_cp_while<F>(mut cur: Cur, mut pred: F) -> Cur\n+    fn at_next_cp_while<F>(mut cur: Cur<'_>, mut pred: F) -> Cur<'_>\n     where F: FnMut(char) -> bool {\n         loop {\n             match cur.next_cp() {\n@@ -962,8 +962,6 @@ pub mod shell {\n }\n \n mod strcursor {\n-    use std;\n-\n     pub struct StrCursor<'a> {\n         s: &'a str,\n         pub at: usize,\n@@ -1028,16 +1026,16 @@ mod strcursor {\n         }\n     }\n \n-    impl<'a> Copy for StrCursor<'a> {}\n+    impl Copy for StrCursor<'_> {}\n \n     impl<'a> Clone for StrCursor<'a> {\n         fn clone(&self) -> StrCursor<'a> {\n             *self\n         }\n     }\n \n-    impl<'a> std::fmt::Debug for StrCursor<'a> {\n-        fn fmt(&self, fmt: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    impl std::fmt::Debug for StrCursor<'_> {\n+        fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n             write!(fmt, \"StrCursor({:?} | {:?})\", self.slice_before(), self.slice_after())\n         }\n     }"}, {"sha": "14dbd9300232bc2df40ecc98f6f9d3d5e7d060c4", "filename": "src/libsyntax_ext/global_asm.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_asm.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -8,21 +8,22 @@\n /// LLVM's `module asm \"some assembly here\"`. All of LLVM's caveats\n /// therefore apply.\n \n-use errors::DiagnosticBuilder;\n+use crate::errors::DiagnosticBuilder;\n+\n use syntax::ast;\n use syntax::source_map::respan;\n-use syntax::ext::base;\n-use syntax::ext::base::*;\n+use syntax::ext::base::{self, *};\n use syntax::feature_gate;\n use syntax::parse::token;\n use syntax::ptr::P;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n use syntax::tokenstream;\n+use smallvec::smallvec;\n \n pub const MACRO: &str = \"global_asm\";\n \n-pub fn expand_global_asm<'cx>(cx: &'cx mut ExtCtxt,\n+pub fn expand_global_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                               sp: Span,\n                               tts: &[tokenstream::TokenTree]) -> Box<dyn base::MacResult + 'cx> {\n     if !cx.ecfg.enable_global_asm() {"}, {"sha": "9308cfb3a4f2e6f1a92d87be87a819111b2ecc89", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -4,29 +4,21 @@\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n+#![deny(rust_2018_idioms)]\n+\n #![feature(in_band_lifetimes)]\n #![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_span)]\n #![feature(decl_macro)]\n-#![feature(nll)]\n #![feature(str_escape)]\n #![feature(rustc_diagnostic_macros)]\n \n #![recursion_limit=\"256\"]\n \n-extern crate fmt_macros;\n-#[macro_use]\n-extern crate syntax;\n-extern crate syntax_pos;\n extern crate proc_macro;\n-extern crate rustc_data_structures;\n-extern crate rustc_errors as errors;\n-extern crate rustc_target;\n-#[macro_use]\n-extern crate smallvec;\n-#[macro_use]\n-extern crate log;\n+\n+use rustc_errors as errors;\n \n mod diagnostics;\n "}, {"sha": "658ce98d268842bf4ccef0cf51a2e42457412d31", "filename": "src/libsyntax_ext/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flog_syntax.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -4,7 +4,7 @@ use syntax::print;\n use syntax::tokenstream;\n use syntax_pos;\n \n-pub fn expand_syntax_ext<'cx>(cx: &'cx mut base::ExtCtxt,\n+pub fn expand_syntax_ext<'cx>(cx: &'cx mut base::ExtCtxt<'_>,\n                               sp: syntax_pos::Span,\n                               tts: &[tokenstream::TokenTree])\n                               -> Box<dyn base::MacResult + 'cx> {"}, {"sha": "24d095145201e1430d6faadd36dde205940e3149", "filename": "src/libsyntax_ext/proc_macro_decls.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_decls.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,6 +1,7 @@\n use std::mem;\n \n-use errors;\n+use crate::deriving;\n+use crate::errors;\n \n use syntax::ast::{self, Ident};\n use syntax::attr;\n@@ -18,8 +19,6 @@ use syntax::visit::{self, Visitor};\n \n use syntax_pos::{Span, DUMMY_SP};\n \n-use deriving;\n-\n const PROC_MACRO_KINDS: [&str; 3] = [\"proc_macro_derive\", \"proc_macro_attribute\", \"proc_macro\"];\n \n struct ProcMacroDerive {\n@@ -324,7 +323,7 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n //          ];\n //      }\n fn mk_decls(\n-    cx: &mut ExtCtxt,\n+    cx: &mut ExtCtxt<'_>,\n     custom_derives: &[ProcMacroDerive],\n     custom_attrs: &[ProcMacroDef],\n     custom_macros: &[ProcMacroDef],"}, {"sha": "88e20e3dc7c9ea85bd458650eaa91514162ee889", "filename": "src/libsyntax_ext/proc_macro_impl.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fproc_macro_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fproc_macro_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_impl.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,27 +1,27 @@\n-use errors::FatalError;\n+use crate::errors::FatalError;\n+use crate::proc_macro_server;\n \n use syntax::source_map::Span;\n-use syntax::ext::base::*;\n+use syntax::ext::base::{self, *};\n use syntax::tokenstream::TokenStream;\n-use syntax::ext::base;\n \n-pub const EXEC_STRATEGY: ::proc_macro::bridge::server::SameThread =\n-    ::proc_macro::bridge::server::SameThread;\n+pub const EXEC_STRATEGY: proc_macro::bridge::server::SameThread =\n+    proc_macro::bridge::server::SameThread;\n \n pub struct AttrProcMacro {\n-    pub client: ::proc_macro::bridge::client::Client<\n-        fn(::proc_macro::TokenStream, ::proc_macro::TokenStream) -> ::proc_macro::TokenStream,\n+    pub client: proc_macro::bridge::client::Client<\n+        fn(proc_macro::TokenStream, proc_macro::TokenStream) -> proc_macro::TokenStream,\n     >,\n }\n \n impl base::AttrProcMacro for AttrProcMacro {\n     fn expand<'cx>(&self,\n-                   ecx: &'cx mut ExtCtxt,\n+                   ecx: &'cx mut ExtCtxt<'_>,\n                    span: Span,\n                    annotation: TokenStream,\n                    annotated: TokenStream)\n                    -> TokenStream {\n-        let server = ::proc_macro_server::Rustc::new(ecx);\n+        let server = proc_macro_server::Rustc::new(ecx);\n         match self.client.run(&EXEC_STRATEGY, server, annotation, annotated) {\n             Ok(stream) => stream,\n             Err(e) => {\n@@ -39,18 +39,18 @@ impl base::AttrProcMacro for AttrProcMacro {\n }\n \n pub struct BangProcMacro {\n-    pub client: ::proc_macro::bridge::client::Client<\n-        fn(::proc_macro::TokenStream) -> ::proc_macro::TokenStream,\n+    pub client: proc_macro::bridge::client::Client<\n+        fn(proc_macro::TokenStream) -> proc_macro::TokenStream,\n     >,\n }\n \n impl base::ProcMacro for BangProcMacro {\n     fn expand<'cx>(&self,\n-                   ecx: &'cx mut ExtCtxt,\n+                   ecx: &'cx mut ExtCtxt<'_>,\n                    span: Span,\n                    input: TokenStream)\n                    -> TokenStream {\n-        let server = ::proc_macro_server::Rustc::new(ecx);\n+        let server = proc_macro_server::Rustc::new(ecx);\n         match self.client.run(&EXEC_STRATEGY, server, input) {\n             Ok(stream) => stream,\n             Err(e) => {"}, {"sha": "730262683c0b7259b2496c68d8d2676f8718ccea", "filename": "src/libsyntax_ext/proc_macro_server.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_server.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,4 +1,5 @@\n-use errors::{self, Diagnostic, DiagnosticBuilder};\n+use crate::errors::{self, Diagnostic, DiagnosticBuilder};\n+\n use std::panic;\n \n use proc_macro::bridge::{server, TokenTree};\n@@ -369,7 +370,7 @@ pub(crate) struct Rustc<'a> {\n }\n \n impl<'a> Rustc<'a> {\n-    pub fn new(cx: &'a ExtCtxt) -> Self {\n+    pub fn new(cx: &'a ExtCtxt<'_>) -> Self {\n         // No way to determine def location for a proc macro right now, so use call location.\n         let location = cx.current_expansion.mark.expn_info().unwrap().call_site;\n         let to_span = |transparency| {\n@@ -650,7 +651,7 @@ impl server::Literal for Rustc<'_> {\n     }\n }\n \n-impl<'a> server::SourceFile for Rustc<'a> {\n+impl server::SourceFile for Rustc<'_> {\n     fn eq(&mut self, file1: &Self::SourceFile, file2: &Self::SourceFile) -> bool {\n         Lrc::ptr_eq(file1, file2)\n     }"}, {"sha": "832bebb6113e944151ee5b6ad105386e6960867b", "filename": "src/libsyntax_ext/test.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -13,7 +13,7 @@ use syntax::source_map::{ExpnInfo, MacroAttribute};\n use std::iter;\n \n pub fn expand_test(\n-    cx: &mut ExtCtxt,\n+    cx: &mut ExtCtxt<'_>,\n     attr_sp: Span,\n     _meta_item: &ast::MetaItem,\n     item: Annotatable,\n@@ -22,7 +22,7 @@ pub fn expand_test(\n }\n \n pub fn expand_bench(\n-    cx: &mut ExtCtxt,\n+    cx: &mut ExtCtxt<'_>,\n     attr_sp: Span,\n     _meta_item: &ast::MetaItem,\n     item: Annotatable,\n@@ -31,7 +31,7 @@ pub fn expand_bench(\n }\n \n pub fn expand_test_or_bench(\n-    cx: &mut ExtCtxt,\n+    cx: &mut ExtCtxt<'_>,\n     attr_sp: Span,\n     item: Annotatable,\n     is_bench: bool\n@@ -180,7 +180,7 @@ pub fn expand_test_or_bench(\n         ast::ItemKind::ExternCrate(Some(Symbol::intern(\"test\")))\n     );\n \n-    debug!(\"Synthetic test item:\\n{}\\n\", pprust::item_to_string(&test_const));\n+    log::debug!(\"Synthetic test item:\\n{}\\n\", pprust::item_to_string(&test_const));\n \n     vec![\n         // Access to libtest under a gensymed name\n@@ -210,7 +210,7 @@ fn should_fail(i: &ast::Item) -> bool {\n     attr::contains_name(&i.attrs, \"allow_fail\")\n }\n \n-fn should_panic(cx: &ExtCtxt, i: &ast::Item) -> ShouldPanic {\n+fn should_panic(cx: &ExtCtxt<'_>, i: &ast::Item) -> ShouldPanic {\n     match attr::find_by_name(&i.attrs, \"should_panic\") {\n         Some(attr) => {\n             let ref sd = cx.parse_sess.span_diagnostic;\n@@ -243,7 +243,7 @@ fn should_panic(cx: &ExtCtxt, i: &ast::Item) -> ShouldPanic {\n     }\n }\n \n-fn has_test_signature(cx: &ExtCtxt, i: &ast::Item) -> bool {\n+fn has_test_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n     let has_should_panic_attr = attr::contains_name(&i.attrs, \"should_panic\");\n     let ref sd = cx.parse_sess.span_diagnostic;\n     if let ast::ItemKind::Fn(ref decl, ref header, ref generics, _) = i.node {\n@@ -296,7 +296,7 @@ fn has_test_signature(cx: &ExtCtxt, i: &ast::Item) -> bool {\n     }\n }\n \n-fn has_bench_signature(cx: &ExtCtxt, i: &ast::Item) -> bool {\n+fn has_bench_signature(cx: &ExtCtxt<'_>, i: &ast::Item) -> bool {\n     let has_sig = if let ast::ItemKind::Fn(ref decl, _, _, _) = i.node {\n         // N.B., inadequate check, but we're running\n         // well before resolve, can't get too deep."}, {"sha": "63417b702d5693f40d2ff6de73e1a0176962e603", "filename": "src/libsyntax_ext/test_case.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Ftest_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Ftest_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_case.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -20,7 +20,7 @@ use syntax::source_map::{ExpnInfo, MacroAttribute};\n use syntax::feature_gate;\n \n pub fn expand(\n-    ecx: &mut ExtCtxt,\n+    ecx: &mut ExtCtxt<'_>,\n     attr_sp: Span,\n     _meta_item: &ast::MetaItem,\n     anno_item: Annotatable"}, {"sha": "4d35daf3de998577d9c52499c74293d0b086dc43", "filename": "src/libsyntax_ext/trace_macros.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_ext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftrace_macros.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1,11 +1,10 @@\n-use syntax::ext::base::ExtCtxt;\n-use syntax::ext::base;\n+use syntax::ext::base::{self, ExtCtxt};\n use syntax::feature_gate;\n use syntax::symbol::keywords;\n use syntax_pos::Span;\n use syntax::tokenstream::TokenTree;\n \n-pub fn expand_trace_macros(cx: &mut ExtCtxt,\n+pub fn expand_trace_macros(cx: &mut ExtCtxt<'_>,\n                            sp: Span,\n                            tt: &[TokenTree])\n                            -> Box<dyn base::MacResult + 'static> {"}, {"sha": "5658451c54f719466e4e9aed4c15560e7d0f9205", "filename": "src/libsyntax_pos/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_pos%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_pos%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2FCargo.toml?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"syntax_pos\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"syntax_pos\""}, {"sha": "18387bd5a091afea7df719989d87e8c599691714", "filename": "src/libsyntax_pos/analyze_source_file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_pos%2Fanalyze_source_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_pos%2Fanalyze_source_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fanalyze_source_file.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -36,7 +36,7 @@ pub fn analyze_source_file(\n     (lines, multi_byte_chars, non_narrow_chars)\n }\n \n-cfg_if! {\n+cfg_if::cfg_if! {\n     if #[cfg(all(any(target_arch = \"x86\", target_arch = \"x86_64\")))] {\n         fn analyze_source_file_dispatch(src: &str,\n                                     source_file_start_pos: BytePos,"}, {"sha": "a0b0052f26dab06e4251a72904f194db84d6effe", "filename": "src/libsyntax_pos/edition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_pos%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_pos%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fedition.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -27,7 +27,7 @@ pub const EDITION_NAME_LIST: &str = \"2015|2018\";\n pub const DEFAULT_EDITION: Edition = Edition::Edition2015;\n \n impl fmt::Display for Edition {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let s = match *self {\n             Edition::Edition2015 => \"2015\",\n             Edition::Edition2018 => \"2018\","}, {"sha": "0c645fc678caf7c95021174a967f133dc903c0d7", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -5,10 +5,10 @@\n //! and definition contexts*. J. Funct. Program. 22, 2 (March 2012), 181-216.\n //! DOI=10.1017/S0956796812000093 <https://doi.org/10.1017/S0956796812000093>\n \n-use GLOBALS;\n-use Span;\n-use edition::{Edition, DEFAULT_EDITION};\n-use symbol::{keywords, Symbol};\n+use crate::GLOBALS;\n+use crate::Span;\n+use crate::edition::{Edition, DEFAULT_EDITION};\n+use crate::symbol::{keywords, Symbol};\n \n use serialize::{Encodable, Decodable, Encoder, Decoder};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -525,7 +525,7 @@ impl SyntaxContext {\n }\n \n impl fmt::Debug for SyntaxContext {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"#{}\", self.0)\n     }\n }"}, {"sha": "13e7307570a4f9b09709957692fd77f94861079d", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 15, "deletions": 26, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -8,34 +8,23 @@\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n+#![deny(rust_2018_idioms)]\n+\n #![feature(const_fn)]\n #![feature(crate_visibility_modifier)]\n #![feature(custom_attribute)]\n-#![feature(nll)]\n #![feature(non_exhaustive)]\n #![feature(optin_builtin_traits)]\n #![feature(rustc_attrs)]\n #![feature(specialization)]\n #![feature(step_trait)]\n #![cfg_attr(not(stage0), feature(stdsimd))]\n \n-extern crate arena;\n-#[macro_use]\n-extern crate rustc_data_structures;\n-\n-#[macro_use]\n-extern crate scoped_tls;\n-\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n-extern crate serialize;\n+#[allow(unused_extern_crates)]\n extern crate serialize as rustc_serialize; // used by deriving\n \n-#[macro_use]\n-extern crate cfg_if;\n-\n-extern crate unicode_width;\n-\n pub mod edition;\n pub mod hygiene;\n pub use hygiene::{Mark, SyntaxContext, ExpnInfo, ExpnFormat, CompilerDesugaringKind};\n@@ -74,7 +63,7 @@ impl Globals {\n     }\n }\n \n-scoped_thread_local!(pub static GLOBALS: Globals);\n+scoped_tls::scoped_thread_local!(pub static GLOBALS: Globals);\n \n /// Differentiates between real files and common virtual files.\n #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash, RustcDecodable, RustcEncodable)]\n@@ -100,8 +89,8 @@ pub enum FileName {\n }\n \n impl std::fmt::Display for FileName {\n-    fn fmt(&self, fmt: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        use self::FileName::*;\n+    fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        use FileName::*;\n         match *self {\n             Real(ref path) => write!(fmt, \"{}\", path.display()),\n             Macros(ref name) => write!(fmt, \"<{} macros>\", name),\n@@ -127,7 +116,7 @@ impl From<PathBuf> for FileName {\n \n impl FileName {\n     pub fn is_real(&self) -> bool {\n-        use self::FileName::*;\n+        use FileName::*;\n         match *self {\n             Real(_) => true,\n             Macros(_) |\n@@ -143,7 +132,7 @@ impl FileName {\n     }\n \n     pub fn is_macros(&self) -> bool {\n-        use self::FileName::*;\n+        use FileName::*;\n         match *self {\n             Real(_) |\n             Anon(_) |\n@@ -611,7 +600,7 @@ impl serialize::UseSpecializedDecodable for Span {\n     }\n }\n \n-pub fn default_span_debug(span: Span, f: &mut fmt::Formatter) -> fmt::Result {\n+pub fn default_span_debug(span: Span, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n     f.debug_struct(\"Span\")\n         .field(\"lo\", &span.lo())\n         .field(\"hi\", &span.hi())\n@@ -620,13 +609,13 @@ pub fn default_span_debug(span: Span, f: &mut fmt::Formatter) -> fmt::Result {\n }\n \n impl fmt::Debug for Span {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         SPAN_DEBUG.with(|span_debug| span_debug.get()(*self, f))\n     }\n }\n \n impl fmt::Debug for SpanData {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         SPAN_DEBUG.with(|span_debug| span_debug.get()(Span::new(self.lo, self.hi, self.ctxt), f))\n     }\n }\n@@ -1009,7 +998,7 @@ impl Decodable for SourceFile {\n                 // `crate_of_origin` has to be set by the importer.\n                 // This value matches up with rustc::hir::def_id::INVALID_CRATE.\n                 // That constant is not available here unfortunately :(\n-                crate_of_origin: ::std::u32::MAX - 1,\n+                crate_of_origin: std::u32::MAX - 1,\n                 start_pos,\n                 end_pos,\n                 src: None,\n@@ -1025,7 +1014,7 @@ impl Decodable for SourceFile {\n }\n \n impl fmt::Debug for SourceFile {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(fmt, \"SourceFile({})\", self.name)\n     }\n }\n@@ -1111,7 +1100,7 @@ impl SourceFile {\n \n     /// Get a line from the list of pre-computed line-beginnings.\n     /// The line number here is 0-based.\n-    pub fn get_line(&self, line_number: usize) -> Option<Cow<str>> {\n+    pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {\n         fn get_until_newline(src: &str, begin: usize) -> &str {\n             // We can't use `lines.get(line_number+1)` because we might\n             // be parsing when we call this function and thus the current\n@@ -1353,7 +1342,7 @@ pub struct FileLines {\n     pub lines: Vec<LineInfo>\n }\n \n-thread_local!(pub static SPAN_DEBUG: Cell<fn(Span, &mut fmt::Formatter) -> fmt::Result> =\n+thread_local!(pub static SPAN_DEBUG: Cell<fn(Span, &mut fmt::Formatter<'_>) -> fmt::Result> =\n                 Cell::new(default_span_debug));\n \n #[derive(Debug)]"}, {"sha": "03d7a9eb7423800bf51aa5e0772bdd85a91c108d", "filename": "src/libsyntax_pos/span_encoding.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_pos%2Fspan_encoding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_pos%2Fspan_encoding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fspan_encoding.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -4,9 +4,9 @@\n // The encoding format for inline spans were obtained by optimizing over crates in rustc/libstd.\n // See https://internals.rust-lang.org/t/rfc-compiler-refactoring-spans/1357/28\n \n-use GLOBALS;\n-use {BytePos, SpanData};\n-use hygiene::SyntaxContext;\n+use crate::GLOBALS;\n+use crate::{BytePos, SpanData};\n+use crate::hygiene::SyntaxContext;\n \n use rustc_data_structures::fx::FxHashMap;\n use std::hash::{Hash, Hasher};"}, {"sha": "0eecdbfa9763442d176552f62686c1065b07235a", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -5,15 +5,16 @@\n use arena::DroplessArena;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n+use rustc_data_structures::newtype_index;\n use serialize::{Decodable, Decoder, Encodable, Encoder};\n \n use std::fmt;\n use std::str;\n use std::cmp::{PartialEq, Ordering, PartialOrd, Ord};\n use std::hash::{Hash, Hasher};\n \n-use hygiene::SyntaxContext;\n-use {Span, DUMMY_SP, GLOBALS};\n+use crate::hygiene::SyntaxContext;\n+use crate::{Span, DUMMY_SP, GLOBALS};\n \n #[derive(Copy, Clone, Eq)]\n pub struct Ident {\n@@ -100,13 +101,13 @@ impl Hash for Ident {\n }\n \n impl fmt::Debug for Ident {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}{:?}\", self.name, self.span.ctxt())\n     }\n }\n \n impl fmt::Display for Ident {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(&self.name, f)\n     }\n }\n@@ -181,7 +182,7 @@ impl Symbol {\n     pub fn as_str(self) -> LocalInternedString {\n         with_interner(|interner| unsafe {\n             LocalInternedString {\n-                string: ::std::mem::transmute::<&str, &str>(interner.get(self))\n+                string: std::mem::transmute::<&str, &str>(interner.get(self))\n             }\n         })\n     }\n@@ -198,7 +199,7 @@ impl Symbol {\n }\n \n impl fmt::Debug for Symbol {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let is_gensymed = with_interner(|interner| interner.is_gensymed(*self));\n         if is_gensymed {\n             write!(f, \"{}({:?})\", self, self.0)\n@@ -209,7 +210,7 @@ impl fmt::Debug for Symbol {\n }\n \n impl fmt::Display for Symbol {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(&self.as_str(), f)\n     }\n }\n@@ -226,7 +227,7 @@ impl Decodable for Symbol {\n     }\n }\n \n-impl<T: ::std::ops::Deref<Target=str>> PartialEq<T> for Symbol {\n+impl<T: std::ops::Deref<Target=str>> PartialEq<T> for Symbol {\n     fn eq(&self, other: &T) -> bool {\n         self.as_str() == other.deref()\n     }\n@@ -335,7 +336,7 @@ macro_rules! declare_keywords {(\n             };\n         )*\n \n-        impl ::std::str::FromStr for Keyword {\n+        impl std::str::FromStr for Keyword {\n             type Err = ();\n \n             fn from_str(s: &str) -> Result<Self, ()> {\n@@ -519,40 +520,40 @@ impl LocalInternedString {\n     }\n }\n \n-impl<U: ?Sized> ::std::convert::AsRef<U> for LocalInternedString\n+impl<U: ?Sized> std::convert::AsRef<U> for LocalInternedString\n where\n-    str: ::std::convert::AsRef<U>\n+    str: std::convert::AsRef<U>\n {\n     fn as_ref(&self) -> &U {\n         self.string.as_ref()\n     }\n }\n \n-impl<T: ::std::ops::Deref<Target = str>> ::std::cmp::PartialEq<T> for LocalInternedString {\n+impl<T: std::ops::Deref<Target = str>> std::cmp::PartialEq<T> for LocalInternedString {\n     fn eq(&self, other: &T) -> bool {\n         self.string == other.deref()\n     }\n }\n \n-impl ::std::cmp::PartialEq<LocalInternedString> for str {\n+impl std::cmp::PartialEq<LocalInternedString> for str {\n     fn eq(&self, other: &LocalInternedString) -> bool {\n         self == other.string\n     }\n }\n \n-impl<'a> ::std::cmp::PartialEq<LocalInternedString> for &'a str {\n+impl<'a> std::cmp::PartialEq<LocalInternedString> for &'a str {\n     fn eq(&self, other: &LocalInternedString) -> bool {\n         *self == other.string\n     }\n }\n \n-impl ::std::cmp::PartialEq<LocalInternedString> for String {\n+impl std::cmp::PartialEq<LocalInternedString> for String {\n     fn eq(&self, other: &LocalInternedString) -> bool {\n         self == other.string\n     }\n }\n \n-impl<'a> ::std::cmp::PartialEq<LocalInternedString> for &'a String {\n+impl<'a> std::cmp::PartialEq<LocalInternedString> for &'a String {\n     fn eq(&self, other: &LocalInternedString) -> bool {\n         *self == other.string\n     }\n@@ -561,19 +562,19 @@ impl<'a> ::std::cmp::PartialEq<LocalInternedString> for &'a String {\n impl !Send for LocalInternedString {}\n impl !Sync for LocalInternedString {}\n \n-impl ::std::ops::Deref for LocalInternedString {\n+impl std::ops::Deref for LocalInternedString {\n     type Target = str;\n     fn deref(&self) -> &str { self.string }\n }\n \n impl fmt::Debug for LocalInternedString {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(self.string, f)\n     }\n }\n \n impl fmt::Display for LocalInternedString {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(self.string, f)\n     }\n }\n@@ -640,7 +641,7 @@ impl Ord for InternedString {\n     }\n }\n \n-impl<T: ::std::ops::Deref<Target = str>> PartialEq<T> for InternedString {\n+impl<T: std::ops::Deref<Target = str>> PartialEq<T> for InternedString {\n     fn eq(&self, other: &T) -> bool {\n         self.with(|string| string == other.deref())\n     }\n@@ -676,20 +677,20 @@ impl<'a> PartialEq<InternedString> for &'a String {\n     }\n }\n \n-impl ::std::convert::From<InternedString> for String {\n+impl std::convert::From<InternedString> for String {\n     fn from(val: InternedString) -> String {\n         val.as_symbol().to_string()\n     }\n }\n \n impl fmt::Debug for InternedString {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.with(|str| fmt::Debug::fmt(&str, f))\n     }\n }\n \n impl fmt::Display for InternedString {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.with(|str| fmt::Display::fmt(&str, f))\n     }\n }\n@@ -709,7 +710,7 @@ impl Encodable for InternedString {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use Globals;\n+    use crate::Globals;\n \n     #[test]\n     fn interner_tests() {"}, {"sha": "10bdd6e877c4f2da1c17c9044cbae0d0da46dfd2", "filename": "src/libtest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibtest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibtest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2FCargo.toml?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"test\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"test\""}, {"sha": "a06497f98626aa9f03bc406b6450c2b8856222aa", "filename": "src/libtest/formatters/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibtest%2Fformatters%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibtest%2Fformatters%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fformatters%2Fjson.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -145,7 +145,7 @@ impl<T: Write> OutputFormatter for JsonFormatter<T> {\n struct EscapedString<S: AsRef<str>>(S);\n \n impl<S: AsRef<str>> ::std::fmt::Display for EscapedString<S> {\n-    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {\n         let mut start = 0;\n \n         for (i, byte) in self.0.as_ref().bytes().enumerate() {"}, {"sha": "cced66f4a22bdc0ae7970c6728005ae4e8be916f", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 99, "deletions": 67, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -17,11 +17,15 @@\n // this crate, which relies on this attribute (rather than the value of `--crate-name` passed by\n // cargo) to detect this crate.\n \n+#![deny(rust_2018_idioms)]\n #![crate_name = \"test\"]\n #![unstable(feature = \"test\", issue = \"27812\")]\n-#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"https://doc.rust-lang.org/nightly/\", test(attr(deny(warnings))))]\n+#![doc(\n+    html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+    html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n+    html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+    test(attr(deny(warnings)))\n+)]\n #![feature(asm)]\n #![feature(fnbox)]\n #![cfg_attr(any(unix, target_os = \"cloudabi\"), feature(libc, rustc_private))]\n@@ -32,10 +36,10 @@\n #![feature(termination_trait_lib)]\n #![feature(test)]\n \n-extern crate getopts;\n+use getopts;\n #[cfg(any(unix, target_os = \"cloudabi\"))]\n extern crate libc;\n-extern crate term;\n+use term;\n \n // FIXME(#54291): rustc and/or LLVM don't yet support building with panic-unwind\n //                on aarch64-pc-windows-msvc, so we don't link libtest against\n@@ -46,52 +50,57 @@ extern crate term;\n #[cfg(not(all(windows, target_arch = \"aarch64\")))]\n extern crate panic_unwind;\n \n-pub use self::TestFn::*;\n pub use self::ColorConfig::*;\n-pub use self::TestResult::*;\n-pub use self::TestName::*;\n-use self::TestEvent::*;\n use self::NamePadding::*;\n use self::OutputLocation::*;\n+use self::TestEvent::*;\n+pub use self::TestFn::*;\n+pub use self::TestName::*;\n+pub use self::TestResult::*;\n \n-use std::panic::{catch_unwind, AssertUnwindSafe};\n use std::any::Any;\n+use std::borrow::Cow;\n use std::boxed::FnBox;\n use std::cmp;\n use std::collections::BTreeMap;\n use std::env;\n use std::fmt;\n use std::fs::File;\n-use std::io::prelude::*;\n use std::io;\n+use std::io::prelude::*;\n+use std::panic::{catch_unwind, AssertUnwindSafe};\n use std::path::PathBuf;\n+use std::process;\n use std::process::Termination;\n use std::sync::mpsc::{channel, Sender};\n use std::sync::{Arc, Mutex};\n use std::thread;\n use std::time::{Duration, Instant};\n-use std::borrow::Cow;\n-use std::process;\n \n const TEST_WARN_TIMEOUT_S: u64 = 60;\n const QUIET_MODE_MAX_COLUMN: usize = 100; // insert a '\\n' after 100 tests in quiet mode\n \n // to be used by rustc to compile tests in libtest\n pub mod test {\n-    pub use {assert_test_result, filter_tests, parse_opts, run_test, test_main, test_main_static,\n-             Bencher, DynTestFn, DynTestName, Metric, MetricMap, Options, RunIgnored, ShouldPanic,\n-             StaticBenchFn, StaticTestFn, StaticTestName, TestDesc, TestDescAndFn, TestName,\n-             TestOpts, TestResult, TrFailed, TrFailedMsg, TrIgnored, TrOk};\n+    pub use crate::{\n+        assert_test_result, filter_tests, parse_opts, run_test, test_main, test_main_static,\n+        Bencher, DynTestFn, DynTestName, Metric, MetricMap, Options, RunIgnored, ShouldPanic,\n+        StaticBenchFn, StaticTestFn, StaticTestName, TestDesc, TestDescAndFn, TestName, TestOpts,\n+        TestResult, TrFailed, TrFailedMsg, TrIgnored, TrOk,\n+    };\n }\n \n-pub mod stats;\n mod formatters;\n+pub mod stats;\n \n-use formatters::{JsonFormatter, OutputFormatter, PrettyFormatter, TerseFormatter};\n+use crate::formatters::{JsonFormatter, OutputFormatter, PrettyFormatter, TerseFormatter};\n \n /// Whether to execute tests concurrently or not\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-pub enum Concurrent { Yes, No }\n+pub enum Concurrent {\n+    Yes,\n+    No,\n+}\n \n // The name of a test. By convention this follows the rules for rust\n // paths; i.e., it should be a series of identifiers separated by double\n@@ -131,7 +140,7 @@ impl TestName {\n     }\n }\n impl fmt::Display for TestName {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(self.as_slice(), f)\n     }\n }\n@@ -185,7 +194,7 @@ impl TestFn {\n }\n \n impl fmt::Debug for TestFn {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(match *self {\n             StaticTestFn(..) => \"StaticTestFn(..)\",\n             StaticBenchFn(..) => \"StaticBenchFn(..)\",\n@@ -329,8 +338,7 @@ pub fn test_main_static(tests: &[&TestDescAndFn]) {\n pub fn assert_test_result<T: Termination>(result: T) {\n     let code = result.report();\n     assert_eq!(\n-        code,\n-        0,\n+        code, 0,\n         \"the test returned a termination value with a non-zero status code ({}) \\\n          which indicates a failure\",\n         code\n@@ -558,14 +566,16 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n     let include_ignored = matches.opt_present(\"include-ignored\");\n     if !allow_unstable && include_ignored {\n         return Some(Err(\n-            \"The \\\"include-ignored\\\" flag is only accepted on the nightly compiler\".into()\n+            \"The \\\"include-ignored\\\" flag is only accepted on the nightly compiler\".into(),\n         ));\n     }\n \n     let run_ignored = match (include_ignored, matches.opt_present(\"ignored\")) {\n-        (true, true) => return Some(Err(\n-            \"the options --include-ignored and --ignored are mutually exclusive\".into()\n-        )),\n+        (true, true) => {\n+            return Some(Err(\n+                \"the options --include-ignored and --ignored are mutually exclusive\".into(),\n+            ));\n+        }\n         (true, false) => RunIgnored::Yes,\n         (false, true) => RunIgnored::Only,\n         (false, false) => RunIgnored::No,\n@@ -597,7 +607,7 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n                     \"argument for --test-threads must be a number > 0 \\\n                      (error: {})\",\n                     e\n-                )))\n+                )));\n             }\n         },\n         None => None,\n@@ -613,7 +623,7 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n                 \"argument for --color must be auto, always, or never (was \\\n                  {})\",\n                 v\n-            )))\n+            )));\n         }\n     };\n \n@@ -635,7 +645,7 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n                 \"argument for --format must be pretty, terse, or json (was \\\n                  {})\",\n                 v\n-            )))\n+            )));\n         }\n     };\n \n@@ -823,7 +833,7 @@ pub fn list_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Res\n     let mut nbench = 0;\n \n     for test in filter_tests(&opts, tests) {\n-        use TestFn::*;\n+        use crate::TestFn::*;\n \n         let TestDescAndFn {\n             desc: TestDesc { name, .. },\n@@ -1012,10 +1022,12 @@ fn use_color(opts: &TestOpts) -> bool {\n     }\n }\n \n-#[cfg(any(target_os = \"cloudabi\",\n-          target_os = \"redox\",\n-          all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n-          all(target_vendor = \"fortanix\", target_env = \"sgx\")))]\n+#[cfg(any(\n+    target_os = \"cloudabi\",\n+    target_os = \"redox\",\n+    all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n+    all(target_vendor = \"fortanix\", target_env = \"sgx\")\n+))]\n fn stdout_isatty() -> bool {\n     // FIXME: Implement isatty on Redox and SGX\n     false\n@@ -1246,21 +1258,34 @@ fn get_concurrency() -> usize {\n         1\n     }\n \n-    #[cfg(any(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n-              all(target_vendor = \"fortanix\", target_env = \"sgx\")))]\n+    #[cfg(any(\n+        all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n+        all(target_vendor = \"fortanix\", target_env = \"sgx\")\n+    ))]\n     fn num_cpus() -> usize {\n         1\n     }\n \n-    #[cfg(any(target_os = \"android\", target_os = \"cloudabi\", target_os = \"emscripten\",\n-              target_os = \"fuchsia\", target_os = \"ios\", target_os = \"linux\",\n-              target_os = \"macos\", target_os = \"solaris\"))]\n+    #[cfg(any(\n+        target_os = \"android\",\n+        target_os = \"cloudabi\",\n+        target_os = \"emscripten\",\n+        target_os = \"fuchsia\",\n+        target_os = \"ios\",\n+        target_os = \"linux\",\n+        target_os = \"macos\",\n+        target_os = \"solaris\"\n+    ))]\n     fn num_cpus() -> usize {\n         unsafe { libc::sysconf(libc::_SC_NPROCESSORS_ONLN) as usize }\n     }\n \n-    #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"bitrig\",\n-              target_os = \"netbsd\"))]\n+    #[cfg(any(\n+        target_os = \"freebsd\",\n+        target_os = \"dragonfly\",\n+        target_os = \"bitrig\",\n+        target_os = \"netbsd\"\n+    ))]\n     fn num_cpus() -> usize {\n         use std::ptr;\n \n@@ -1343,18 +1368,20 @@ pub fn filter_tests(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> Vec<TestDescA\n     }\n \n     // Skip tests that match any of the skip filters\n-    filtered.retain(|test| {\n-        !opts.skip.iter().any(|sf| matches_filter(test, sf))\n-    });\n+    filtered.retain(|test| !opts.skip.iter().any(|sf| matches_filter(test, sf)));\n \n     // maybe unignore tests\n     match opts.run_ignored {\n         RunIgnored::Yes => {\n-            filtered.iter_mut().for_each(|test| test.desc.ignore = false);\n-        },\n+            filtered\n+                .iter_mut()\n+                .for_each(|test| test.desc.ignore = false);\n+        }\n         RunIgnored::Only => {\n             filtered.retain(|test| test.desc.ignore);\n-            filtered.iter_mut().for_each(|test| test.desc.ignore = false);\n+            filtered\n+                .iter_mut()\n+                .for_each(|test| test.desc.ignore = false);\n         }\n         RunIgnored::No => {}\n     }\n@@ -1396,7 +1423,8 @@ pub fn run_test(\n ) {\n     let TestDescAndFn { desc, testfn } = test;\n \n-    let ignore_because_panic_abort = cfg!(target_arch = \"wasm32\") && !cfg!(target_os = \"emscripten\")\n+    let ignore_because_panic_abort = cfg!(target_arch = \"wasm32\")\n+        && !cfg!(target_os = \"emscripten\")\n         && desc.should_panic != ShouldPanic::No;\n \n     if force_ignore || desc.ignore || ignore_because_panic_abort {\n@@ -1454,12 +1482,12 @@ pub fn run_test(\n \n     match testfn {\n         DynBenchFn(bencher) => {\n-            ::bench::benchmark(desc, monitor_ch, opts.nocapture, |harness| {\n+            crate::bench::benchmark(desc, monitor_ch, opts.nocapture, |harness| {\n                 bencher.run(harness)\n             });\n         }\n         StaticBenchFn(benchfn) => {\n-            ::bench::benchmark(desc, monitor_ch, opts.nocapture, |harness| {\n+            crate::bench::benchmark(desc, monitor_ch, opts.nocapture, |harness| {\n                 (benchfn.clone())(harness)\n             });\n         }\n@@ -1487,7 +1515,8 @@ fn calc_result(desc: &TestDesc, task_result: Result<(), Box<dyn Any + Send>>) ->\n     match (&desc.should_panic, task_result) {\n         (&ShouldPanic::No, Ok(())) | (&ShouldPanic::Yes, Err(_)) => TrOk,\n         (&ShouldPanic::YesWithMessage(msg), Err(ref err)) => {\n-            if err.downcast_ref::<String>()\n+            if err\n+                .downcast_ref::<String>()\n                 .map(|e| &**e)\n                 .or_else(|| err.downcast_ref::<&'static str>().map(|e| *e))\n                 .map(|e| e.contains(msg))\n@@ -1534,7 +1563,8 @@ impl MetricMap {\n     }\n \n     pub fn fmt_metrics(&self) -> String {\n-        let v = self.0\n+        let v = self\n+            .0\n             .iter()\n             .map(|(k, v)| format!(\"{}: {} (+/- {})\", *k, v.value, v.noise))\n             .collect::<Vec<_>>();\n@@ -1643,7 +1673,8 @@ where\n \n         // If we've run for 100ms and seem to have converged to a\n         // stable median.\n-        if loop_run > Duration::from_millis(100) && summ.median_abs_dev_pct < 1.0\n+        if loop_run > Duration::from_millis(100)\n+            && summ.median_abs_dev_pct < 1.0\n             && summ.median - summ5.median < summ5.median_abs_dev\n         {\n             return summ5;\n@@ -1669,12 +1700,12 @@ where\n }\n \n pub mod bench {\n-    use std::panic::{catch_unwind, AssertUnwindSafe};\n+    use super::{BenchMode, BenchSamples, Bencher, MonitorMsg, Sender, Sink, TestDesc, TestResult};\n+    use crate::stats;\n     use std::cmp;\n     use std::io;\n+    use std::panic::{catch_unwind, AssertUnwindSafe};\n     use std::sync::{Arc, Mutex};\n-    use stats;\n-    use super::{BenchMode, BenchSamples, Bencher, MonitorMsg, Sender, Sink, TestDesc, TestResult};\n \n     pub fn benchmark<F>(desc: TestDesc, monitor_ch: Sender<MonitorMsg>, nocapture: bool, f: F)\n     where\n@@ -1749,14 +1780,15 @@ pub mod bench {\n \n #[cfg(test)]\n mod tests {\n-    use test::{filter_tests, parse_opts, run_test, DynTestFn, DynTestName, MetricMap, RunIgnored,\n-               ShouldPanic, StaticTestName, TestDesc, TestDescAndFn, TestOpts, TrFailed,\n-               TrFailedMsg, TrIgnored, TrOk};\n+    use crate::bench;\n+    use crate::test::{\n+        filter_tests, parse_opts, run_test, DynTestFn, DynTestName, MetricMap, RunIgnored,\n+        ShouldPanic, StaticTestName, TestDesc, TestDescAndFn, TestOpts, TrFailed, TrFailedMsg,\n+        TrIgnored, TrOk,\n+    };\n+    use crate::Bencher;\n+    use crate::Concurrent;\n     use std::sync::mpsc::channel;\n-    use bench;\n-    use Bencher;\n-    use Concurrent;\n-\n \n     fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n         vec![\n@@ -2156,7 +2188,7 @@ mod tests {\n             allow_fail: false,\n         };\n \n-        ::bench::benchmark(desc, tx, true, f);\n+        crate::bench::benchmark(desc, tx, true, f);\n         rx.recv().unwrap();\n     }\n \n@@ -2175,7 +2207,7 @@ mod tests {\n             allow_fail: false,\n         };\n \n-        ::bench::benchmark(desc, tx, true, f);\n+        crate::bench::benchmark(desc, tx, true, f);\n         rx.recv().unwrap();\n     }\n }"}, {"sha": "5c9421d5ea4b023089049f6e23529af7a2ddf165", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -319,8 +319,8 @@ pub fn winsorize(samples: &mut [f64], pct: f64) {\n \n #[cfg(test)]\n mod tests {\n-    use stats::Stats;\n-    use stats::Summary;\n+    use crate::stats::Stats;\n+    use crate::stats::Summary;\n     use std::f64;\n     use std::io::prelude::*;\n     use std::io;\n@@ -899,7 +899,7 @@ mod tests {\n mod bench {\n     extern crate test;\n     use self::test::Bencher;\n-    use stats::Stats;\n+    use crate::stats::Stats;\n \n     #[bench]\n     pub fn sum_three_items(b: &mut Bencher) {"}, {"sha": "5879fc0ce7781a2f109cea88da1c65d463e69be2", "filename": "src/test/run-make-fulldeps/static-extern-type/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Ftest%2Frun-make-fulldeps%2Fstatic-extern-type%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Ftest%2Frun-make-fulldeps%2Fstatic-extern-type%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fstatic-extern-type%2FMakefile?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -0,0 +1,5 @@\n+-include ../tools.mk\n+\n+all: $(call NATIVE_STATICLIB,define-foo)\n+\t$(RUSTC) -ldefine-foo use-foo.rs\n+\t$(call RUN,use-foo) || exit 1"}, {"sha": "39be5acfa11182f4c46ed1f09f3c4bf27100499b", "filename": "src/test/run-make-fulldeps/static-extern-type/define-foo.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Ftest%2Frun-make-fulldeps%2Fstatic-extern-type%2Fdefine-foo.c", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Ftest%2Frun-make-fulldeps%2Fstatic-extern-type%2Fdefine-foo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fstatic-extern-type%2Fdefine-foo.c?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -0,0 +1,11 @@\n+#include <stdint.h>\n+\n+struct Foo {\n+    uint8_t x;\n+};\n+\n+struct Foo FOO = { 42 };\n+\n+uint8_t bar(const struct Foo* foo) {\n+    return foo->x;\n+}"}, {"sha": "932b5b5944bc72d732f530e50fa268986e7400ad", "filename": "src/test/run-make-fulldeps/static-extern-type/use-foo.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Ftest%2Frun-make-fulldeps%2Fstatic-extern-type%2Fuse-foo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/626e74d5f64cdc820b6c6ac1a5a9a42096cd147a/src%2Ftest%2Frun-make-fulldeps%2Fstatic-extern-type%2Fuse-foo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fstatic-extern-type%2Fuse-foo.rs?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -0,0 +1,14 @@\n+#![feature(extern_types)]\n+\n+extern \"C\" {\n+    type Foo;\n+    static FOO: Foo;\n+    fn bar(foo: *const Foo) -> u8;\n+}\n+\n+fn main() {\n+    unsafe {\n+        let foo = &FOO;\n+        assert_eq!(bar(foo), 42);\n+    }\n+}"}, {"sha": "ccdc47b657a7600cbd0c2858eb52a8d712cfce18", "filename": "src/tools/rust-installer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-installer?ref=626e74d5f64cdc820b6c6ac1a5a9a42096cd147a", "patch": "@@ -1 +1 @@\n-Subproject commit 27dec6cae3a8132d8a073aad6775425c85095c99\n+Subproject commit ccdc47b657a7600cbd0c2858eb52a8d712cfce18"}]}