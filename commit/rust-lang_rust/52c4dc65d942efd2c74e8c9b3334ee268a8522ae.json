{"sha": "52c4dc65d942efd2c74e8c9b3334ee268a8522ae", "node_id": "C_kwDOAAsO6NoAKDUyYzRkYzY1ZDk0MmVmZDJjNzRlOGM5YjMzMzRlZTI2OGE4NTIyYWU", "commit": {"author": {"name": "J-ZhengLi", "email": "lizheng135@huawei.com", "date": "2023-03-14T01:15:23Z"}, "committer": {"name": "J-ZhengLi", "email": "lizheng135@huawei.com", "date": "2023-03-25T01:26:43Z"}, "message": "fix [`cast_possible_truncation`] offering wrong suggestion when casting from float\n\nsuggest `try_into` when casting to wildcard type;\nfix [`cast_possible_truncation`] suggesting useless parenthesis;\n\nremove suggesting for float to float conversion in [`cast_possible_truncation`]\n\nstyle nit", "tree": {"sha": "275c93de21cd6ece3fadadb0f5eded673d97c842", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/275c93de21cd6ece3fadadb0f5eded673d97c842"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52c4dc65d942efd2c74e8c9b3334ee268a8522ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52c4dc65d942efd2c74e8c9b3334ee268a8522ae", "html_url": "https://github.com/rust-lang/rust/commit/52c4dc65d942efd2c74e8c9b3334ee268a8522ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52c4dc65d942efd2c74e8c9b3334ee268a8522ae/comments", "author": {"login": "J-ZhengLi", "id": 32276130, "node_id": "MDQ6VXNlcjMyMjc2MTMw", "avatar_url": "https://avatars.githubusercontent.com/u/32276130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/J-ZhengLi", "html_url": "https://github.com/J-ZhengLi", "followers_url": "https://api.github.com/users/J-ZhengLi/followers", "following_url": "https://api.github.com/users/J-ZhengLi/following{/other_user}", "gists_url": "https://api.github.com/users/J-ZhengLi/gists{/gist_id}", "starred_url": "https://api.github.com/users/J-ZhengLi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/J-ZhengLi/subscriptions", "organizations_url": "https://api.github.com/users/J-ZhengLi/orgs", "repos_url": "https://api.github.com/users/J-ZhengLi/repos", "events_url": "https://api.github.com/users/J-ZhengLi/events{/privacy}", "received_events_url": "https://api.github.com/users/J-ZhengLi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "J-ZhengLi", "id": 32276130, "node_id": "MDQ6VXNlcjMyMjc2MTMw", "avatar_url": "https://avatars.githubusercontent.com/u/32276130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/J-ZhengLi", "html_url": "https://github.com/J-ZhengLi", "followers_url": "https://api.github.com/users/J-ZhengLi/followers", "following_url": "https://api.github.com/users/J-ZhengLi/following{/other_user}", "gists_url": "https://api.github.com/users/J-ZhengLi/gists{/gist_id}", "starred_url": "https://api.github.com/users/J-ZhengLi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/J-ZhengLi/subscriptions", "organizations_url": "https://api.github.com/users/J-ZhengLi/orgs", "repos_url": "https://api.github.com/users/J-ZhengLi/repos", "events_url": "https://api.github.com/users/J-ZhengLi/events{/privacy}", "received_events_url": "https://api.github.com/users/J-ZhengLi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "945e42fc1162f51b9ea859cc97cdd848ed1724f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/945e42fc1162f51b9ea859cc97cdd848ed1724f7", "html_url": "https://github.com/rust-lang/rust/commit/945e42fc1162f51b9ea859cc97cdd848ed1724f7"}], "stats": {"total": 160, "additions": 100, "deletions": 60}, "files": [{"sha": "95c2ecbf791b5a5262cf308e4ce3338a9a763dd2", "filename": "clippy_lints/src/casts/cast_possible_truncation.rs", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/52c4dc65d942efd2c74e8c9b3334ee268a8522ae/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c4dc65d942efd2c74e8c9b3334ee268a8522ae/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs?ref=52c4dc65d942efd2c74e8c9b3334ee268a8522ae", "patch": "@@ -2,8 +2,9 @@ use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n use clippy_utils::expr_or_init;\n use clippy_utils::source::snippet;\n+use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::{get_discriminant_value, is_isize_or_usize};\n-use rustc_errors::{Applicability, SuggestionStyle};\n+use rustc_errors::{Applicability, Diagnostic, SuggestionStyle};\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::LateContext;\n@@ -163,19 +164,34 @@ pub(super) fn check(\n         _ => return,\n     };\n \n-    let name_of_cast_from = snippet(cx, cast_expr.span, \"..\");\n-    let cast_to_snip = snippet(cx, cast_to_span, \"..\");\n-    let suggestion = format!(\"{cast_to_snip}::try_from({name_of_cast_from})\");\n-\n     span_lint_and_then(cx, CAST_POSSIBLE_TRUNCATION, expr.span, &msg, |diag| {\n         diag.help(\"if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\");\n-        diag.span_suggestion_with_style(\n-            expr.span,\n-            \"... or use `try_from` and handle the error accordingly\",\n-            suggestion,\n-            Applicability::Unspecified,\n-            // always show the suggestion in a separate line\n-            SuggestionStyle::ShowAlways,\n-        );\n+        if !cast_from.is_floating_point() {\n+            offer_suggestion(cx, expr, cast_expr, cast_to_span, diag);\n+        }\n     });\n }\n+\n+fn offer_suggestion(\n+    cx: &LateContext<'_>,\n+    expr: &Expr<'_>,\n+    cast_expr: &Expr<'_>,\n+    cast_to_span: Span,\n+    diag: &mut Diagnostic,\n+) {\n+    let cast_to_snip = snippet(cx, cast_to_span, \"..\");\n+    let suggestion = if cast_to_snip == \"_\" {\n+        format!(\"{}.try_into()\", Sugg::hir(cx, cast_expr, \"..\").maybe_par())\n+    } else {\n+        format!(\"{cast_to_snip}::try_from({})\", Sugg::hir(cx, cast_expr, \"..\"))\n+    };\n+\n+    diag.span_suggestion_with_style(\n+        expr.span,\n+        \"... or use `try_from` and handle the error accordingly\",\n+        suggestion,\n+        Applicability::Unspecified,\n+        // always show the suggestion in a separate line\n+        SuggestionStyle::ShowAlways,\n+    );\n+}"}, {"sha": "a86b85706a345f7b4da741d7fb549a9a6eff7cb2", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52c4dc65d942efd2c74e8c9b3334ee268a8522ae/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c4dc65d942efd2c74e8c9b3334ee268a8522ae/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=52c4dc65d942efd2c74e8c9b3334ee268a8522ae", "patch": "@@ -29,6 +29,12 @@ fn main() {\n     1f64 as isize;\n     1f64 as usize;\n     1f32 as u32 as u16;\n+    {\n+        let _x: i8 = 1i32 as _;\n+        1f32 as i32;\n+        1f64 as i32;\n+        1f32 as u8;\n+    }\n     // Test clippy::cast_possible_wrap\n     1u8 as i8;\n     1u16 as i16;"}, {"sha": "65ecf1aa37aaad744a9ba13f6b7c17e449fdfd9e", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 65, "deletions": 47, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/52c4dc65d942efd2c74e8c9b3334ee268a8522ae/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52c4dc65d942efd2c74e8c9b3334ee268a8522ae/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=52c4dc65d942efd2c74e8c9b3334ee268a8522ae", "patch": "@@ -44,10 +44,6 @@ LL |     1f32 as i32;\n    |\n    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n    = note: `-D clippy::cast-possible-truncation` implied by `-D warnings`\n-help: ... or use `try_from` and handle the error accordingly\n-   |\n-LL |     i32::try_from(1f32);\n-   |     ~~~~~~~~~~~~~~~~~~~\n \n error: casting `f32` to `u32` may truncate the value\n   --> $DIR/cast.rs:25:5\n@@ -56,10 +52,6 @@ LL |     1f32 as u32;\n    |     ^^^^^^^^^^^\n    |\n    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n-help: ... or use `try_from` and handle the error accordingly\n-   |\n-LL |     u32::try_from(1f32);\n-   |     ~~~~~~~~~~~~~~~~~~~\n \n error: casting `f32` to `u32` may lose the sign of the value\n   --> $DIR/cast.rs:25:5\n@@ -76,10 +68,6 @@ LL |     1f64 as f32;\n    |     ^^^^^^^^^^^\n    |\n    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n-help: ... or use `try_from` and handle the error accordingly\n-   |\n-LL |     f32::try_from(1f64);\n-   |     ~~~~~~~~~~~~~~~~~~~\n \n error: casting `i32` to `i8` may truncate the value\n   --> $DIR/cast.rs:27:5\n@@ -112,10 +100,6 @@ LL |     1f64 as isize;\n    |     ^^^^^^^^^^^^^\n    |\n    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n-help: ... or use `try_from` and handle the error accordingly\n-   |\n-LL |     isize::try_from(1f64);\n-   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `f64` to `usize` may truncate the value\n   --> $DIR/cast.rs:30:5\n@@ -124,10 +108,6 @@ LL |     1f64 as usize;\n    |     ^^^^^^^^^^^^^\n    |\n    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n-help: ... or use `try_from` and handle the error accordingly\n-   |\n-LL |     usize::try_from(1f64);\n-   |     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `f64` to `usize` may lose the sign of the value\n   --> $DIR/cast.rs:30:5\n@@ -154,63 +134,101 @@ LL |     1f32 as u32 as u16;\n    |     ^^^^^^^^^^^\n    |\n    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n-help: ... or use `try_from` and handle the error accordingly\n-   |\n-LL |     u32::try_from(1f32) as u16;\n-   |     ~~~~~~~~~~~~~~~~~~~\n \n error: casting `f32` to `u32` may lose the sign of the value\n   --> $DIR/cast.rs:31:5\n    |\n LL |     1f32 as u32 as u16;\n    |     ^^^^^^^^^^^\n \n+error: casting `i32` to `i8` may truncate the value\n+  --> $DIR/cast.rs:33:22\n+   |\n+LL |         let _x: i8 = 1i32 as _;\n+   |                      ^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n+help: ... or use `try_from` and handle the error accordingly\n+   |\n+LL |         let _x: i8 = 1i32.try_into();\n+   |                      ~~~~~~~~~~~~~~~\n+\n+error: casting `f32` to `i32` may truncate the value\n+  --> $DIR/cast.rs:34:9\n+   |\n+LL |         1f32 as i32;\n+   |         ^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n+\n+error: casting `f64` to `i32` may truncate the value\n+  --> $DIR/cast.rs:35:9\n+   |\n+LL |         1f64 as i32;\n+   |         ^^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n+\n+error: casting `f32` to `u8` may truncate the value\n+  --> $DIR/cast.rs:36:9\n+   |\n+LL |         1f32 as u8;\n+   |         ^^^^^^^^^^\n+   |\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n+\n+error: casting `f32` to `u8` may lose the sign of the value\n+  --> $DIR/cast.rs:36:9\n+   |\n+LL |         1f32 as u8;\n+   |         ^^^^^^^^^^\n+\n error: casting `u8` to `i8` may wrap around the value\n-  --> $DIR/cast.rs:33:5\n+  --> $DIR/cast.rs:39:5\n    |\n LL |     1u8 as i8;\n    |     ^^^^^^^^^\n    |\n    = note: `-D clippy::cast-possible-wrap` implied by `-D warnings`\n \n error: casting `u16` to `i16` may wrap around the value\n-  --> $DIR/cast.rs:34:5\n+  --> $DIR/cast.rs:40:5\n    |\n LL |     1u16 as i16;\n    |     ^^^^^^^^^^^\n \n error: casting `u32` to `i32` may wrap around the value\n-  --> $DIR/cast.rs:35:5\n+  --> $DIR/cast.rs:41:5\n    |\n LL |     1u32 as i32;\n    |     ^^^^^^^^^^^\n \n error: casting `u64` to `i64` may wrap around the value\n-  --> $DIR/cast.rs:36:5\n+  --> $DIR/cast.rs:42:5\n    |\n LL |     1u64 as i64;\n    |     ^^^^^^^^^^^\n \n error: casting `usize` to `isize` may wrap around the value\n-  --> $DIR/cast.rs:37:5\n+  --> $DIR/cast.rs:43:5\n    |\n LL |     1usize as isize;\n    |     ^^^^^^^^^^^^^^^\n \n error: casting `i32` to `u32` may lose the sign of the value\n-  --> $DIR/cast.rs:40:5\n+  --> $DIR/cast.rs:46:5\n    |\n LL |     -1i32 as u32;\n    |     ^^^^^^^^^^^^\n \n error: casting `isize` to `usize` may lose the sign of the value\n-  --> $DIR/cast.rs:42:5\n+  --> $DIR/cast.rs:48:5\n    |\n LL |     -1isize as usize;\n    |     ^^^^^^^^^^^^^^^^\n \n error: casting `i64` to `i8` may truncate the value\n-  --> $DIR/cast.rs:109:5\n+  --> $DIR/cast.rs:115:5\n    |\n LL |     (-99999999999i64).min(1) as i8; // should be linted because signed\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -222,7 +240,7 @@ LL |     i8::try_from((-99999999999i64).min(1)); // should be linted because sig\n    |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `u64` to `u8` may truncate the value\n-  --> $DIR/cast.rs:121:5\n+  --> $DIR/cast.rs:127:5\n    |\n LL |     999999u64.clamp(0, 256) as u8; // should still be linted\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -234,7 +252,7 @@ LL |     u8::try_from(999999u64.clamp(0, 256)); // should still be linted\n    |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E2` to `u8` may truncate the value\n-  --> $DIR/cast.rs:142:21\n+  --> $DIR/cast.rs:148:21\n    |\n LL |             let _ = self as u8;\n    |                     ^^^^^^^^^^\n@@ -246,15 +264,15 @@ LL |             let _ = u8::try_from(self);\n    |                     ~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E2::B` to `u8` will truncate the value\n-  --> $DIR/cast.rs:143:21\n+  --> $DIR/cast.rs:149:21\n    |\n LL |             let _ = Self::B as u8;\n    |                     ^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::cast-enum-truncation` implied by `-D warnings`\n \n error: casting `main::E5` to `i8` may truncate the value\n-  --> $DIR/cast.rs:179:21\n+  --> $DIR/cast.rs:185:21\n    |\n LL |             let _ = self as i8;\n    |                     ^^^^^^^^^^\n@@ -266,13 +284,13 @@ LL |             let _ = i8::try_from(self);\n    |                     ~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E5::A` to `i8` will truncate the value\n-  --> $DIR/cast.rs:180:21\n+  --> $DIR/cast.rs:186:21\n    |\n LL |             let _ = Self::A as i8;\n    |                     ^^^^^^^^^^^^^\n \n error: casting `main::E6` to `i16` may truncate the value\n-  --> $DIR/cast.rs:194:21\n+  --> $DIR/cast.rs:200:21\n    |\n LL |             let _ = self as i16;\n    |                     ^^^^^^^^^^^\n@@ -284,7 +302,7 @@ LL |             let _ = i16::try_from(self);\n    |                     ~~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E7` to `usize` may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:209:21\n+  --> $DIR/cast.rs:215:21\n    |\n LL |             let _ = self as usize;\n    |                     ^^^^^^^^^^^^^\n@@ -296,7 +314,7 @@ LL |             let _ = usize::try_from(self);\n    |                     ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `main::E10` to `u16` may truncate the value\n-  --> $DIR/cast.rs:250:21\n+  --> $DIR/cast.rs:256:21\n    |\n LL |             let _ = self as u16;\n    |                     ^^^^^^^^^^^\n@@ -308,28 +326,28 @@ LL |             let _ = u16::try_from(self);\n    |                     ~~~~~~~~~~~~~~~~~~~\n \n error: casting `u32` to `u8` may truncate the value\n-  --> $DIR/cast.rs:258:13\n+  --> $DIR/cast.rs:264:13\n    |\n LL |     let c = (q >> 16) as u8;\n    |             ^^^^^^^^^^^^^^^\n    |\n    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n-LL |     let c = u8::try_from((q >> 16));\n-   |             ~~~~~~~~~~~~~~~~~~~~~~~\n+LL |     let c = u8::try_from(q >> 16);\n+   |             ~~~~~~~~~~~~~~~~~~~~~\n \n error: casting `u32` to `u8` may truncate the value\n-  --> $DIR/cast.rs:261:13\n+  --> $DIR/cast.rs:267:13\n    |\n LL |     let c = (q / 1000) as u8;\n    |             ^^^^^^^^^^^^^^^^\n    |\n    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n-LL |     let c = u8::try_from((q / 1000));\n-   |             ~~~~~~~~~~~~~~~~~~~~~~~~\n+LL |     let c = u8::try_from(q / 1000);\n+   |             ~~~~~~~~~~~~~~~~~~~~~~\n \n-error: aborting due to 36 previous errors\n+error: aborting due to 41 previous errors\n "}]}