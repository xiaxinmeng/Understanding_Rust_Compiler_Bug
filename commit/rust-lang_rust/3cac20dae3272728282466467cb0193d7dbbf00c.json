{"sha": "3cac20dae3272728282466467cb0193d7dbbf00c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjYWMyMGRhZTMyNzI3MjgyODI0NjY0NjdjYjAxOTNkN2RiYmYwMGM=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-01-28T16:54:59Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-01-28T16:54:59Z"}, "message": "Correctly handle \"import foo = bar.zed;\".", "tree": {"sha": "a257f43c91b257ce34eb8eff0d4839af8787075f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a257f43c91b257ce34eb8eff0d4839af8787075f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cac20dae3272728282466467cb0193d7dbbf00c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cac20dae3272728282466467cb0193d7dbbf00c", "html_url": "https://github.com/rust-lang/rust/commit/3cac20dae3272728282466467cb0193d7dbbf00c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cac20dae3272728282466467cb0193d7dbbf00c/comments", "author": null, "committer": null, "parents": [{"sha": "13b7a356f8ec1542a4f84009e2f1fcd278bafd54", "url": "https://api.github.com/repos/rust-lang/rust/commits/13b7a356f8ec1542a4f84009e2f1fcd278bafd54", "html_url": "https://github.com/rust-lang/rust/commit/13b7a356f8ec1542a4f84009e2f1fcd278bafd54"}], "stats": {"total": 82, "additions": 54, "deletions": 28}, "files": [{"sha": "adaddddc84d615220d7fc8cd963d892a8ff20ae3", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cac20dae3272728282466467cb0193d7dbbf00c/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/3cac20dae3272728282466467cb0193d7dbbf00c/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=3cac20dae3272728282466467cb0193d7dbbf00c", "patch": "@@ -466,6 +466,7 @@ TEST_XFAILS_RUSTC := $(filter-out \\\n                         import5.rs \\\n                         import6.rs \\\n                         import7.rs \\\n+                        import8.rs \\\n                         item-name-overload.rs \\\n                         large-records.rs \\\n                         lazy-init.rs \\"}, {"sha": "70da87ddfe3a678bbca54e8c405280c08c9c6a20", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3cac20dae3272728282466467cb0193d7dbbf00c/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cac20dae3272728282466467cb0193d7dbbf00c/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=3cac20dae3272728282466467cb0193d7dbbf00c", "patch": "@@ -231,7 +231,7 @@ type variant = rec(str name, vec[variant_arg] args, def_id id, ann ann);\n type view_item = spanned[view_item_];\n tag view_item_ {\n     view_item_use(ident, vec[@meta_item], def_id);\n-    view_item_import(vec[ident], def_id, option.t[def]);\n+    view_item_import(ident, vec[ident], def_id, option.t[def]);\n }\n \n type item = spanned[item_];\n@@ -249,10 +249,8 @@ fn index_view_item(mod_index index, @view_item it) {\n         case(ast.view_item_use(?id, _, _)) {\n             index.insert(id, ast.mie_view_item(it));\n         }\n-        case(ast.view_item_import(?ids,_,_)) {\n-            auto len = _vec.len[ast.ident](ids);\n-            auto last_id = ids.(len - 1u);\n-            index.insert(last_id, ast.mie_view_item(it));\n+        case(ast.view_item_import(?def_ident,_,_,_)) {\n+            index.insert(def_ident, ast.mie_view_item(it));\n         }\n     }\n }"}, {"sha": "5c13ef86d85c33f5d3db04fec337c182054438b0", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3cac20dae3272728282466467cb0193d7dbbf00c/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cac20dae3272728282466467cb0193d7dbbf00c/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=3cac20dae3272728282466467cb0193d7dbbf00c", "patch": "@@ -1756,27 +1756,41 @@ impure fn parse_use(parser p) -> @ast.view_item {\n     ret @spanned(lo, hi, use_decl);\n }\n \n-impure fn parse_rest_import_name(parser p, ast.ident id) -> @ast.view_item {\n+impure fn parse_rest_import_name(parser p, ast.ident first,\n+                                 option.t[ast.ident] def_ident)\n+        -> @ast.view_item {\n     auto lo = p.get_span();\n     auto hi = lo;\n     let vec[ast.ident] identifiers = vec();\n-    identifiers += id;\n+    identifiers += first;\n     while (p.peek() != token.SEMI) {\n         expect(p, token.DOT);\n         auto i = parse_ident(p);\n         identifiers += i;\n     }\n     p.bump();\n-    auto import_decl = ast.view_item_import(identifiers, p.next_def_id(),\n+    auto defined_id;\n+    alt (def_ident) {\n+        case(some[ast.ident](?i)) {\n+            defined_id = i;\n+        }\n+        case (_) {\n+            auto len = _vec.len[ast.ident](identifiers);\n+            defined_id = identifiers.(len - 1u);\n+        }\n+    }\n+    auto import_decl = ast.view_item_import(defined_id, identifiers,\n+                                            p.next_def_id(),\n                                             none[ast.def]);\n     ret @spanned(lo, hi, import_decl);\n }\n \n-impure fn parse_full_import_name(parser p) -> @ast.view_item {\n+impure fn parse_full_import_name(parser p, ast.ident def_ident)\n+       -> @ast.view_item {\n     alt (p.peek()) {\n         case (token.IDENT(?ident)) {\n             p.bump();\n-            ret parse_rest_import_name(p, ident);\n+            ret parse_rest_import_name(p, ident, some(def_ident));\n         }\n         case (_) {\n             p.err(\"expecting an identifier\");\n@@ -1793,10 +1807,10 @@ impure fn parse_import(parser p) -> @ast.view_item {\n             alt (p.peek()) {\n                 case (token.EQ) {\n                     p.bump();\n-                    ret parse_full_import_name(p);\n+                    ret parse_full_import_name(p, ident);\n                 }\n                 case (_) {\n-                    ret parse_rest_import_name(p, ident);\n+                    ret parse_rest_import_name(p, ident, none[ast.ident]);\n                 }\n             }\n         }"}, {"sha": "711db111b642758f78dcda38be7336985e22fa2a", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3cac20dae3272728282466467cb0193d7dbbf00c/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cac20dae3272728282466467cb0193d7dbbf00c/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=3cac20dae3272728282466467cb0193d7dbbf00c", "patch": "@@ -213,7 +213,7 @@ type ast_fold[ENV] =\n          vec[@meta_item] meta_items,\n          def_id id) -> @view_item)                fold_view_item_use,\n \n-     (fn(&ENV e, &span sp, vec[ident] idents,\n+     (fn(&ENV e, &span sp, ident i, vec[ident] idents,\n          def_id id, option.t[def]) -> @view_item) fold_view_item_import,\n \n      // Additional nodes.\n@@ -725,14 +725,13 @@ fn fold_view_item[ENV](&ENV env, ast_fold[ENV] fld, @view_item vi)\n \n     alt (vi.node) {\n         case (ast.view_item_use(?ident, ?meta_items, ?def_id)) {\n-            // FIXME: what other folding should be done in here?\n             ret fld.fold_view_item_use(env_, vi.span, ident, meta_items,\n                                        def_id);\n         }\n-        case (ast.view_item_import(?idents, ?def_id, ?target_def)) {\n-            // FIXME: what other folding should be done in here?\n-            ret fld.fold_view_item_import(env_, vi.span, idents, def_id,\n-                                          target_def);\n+        case (ast.view_item_import(?def_ident, ?idents, ?def_id,\n+                                   ?target_def)) {\n+            ret fld.fold_view_item_import(env_, vi.span, def_ident, idents,\n+                                          def_id, target_def);\n         }\n     }\n \n@@ -1116,10 +1115,11 @@ fn identity_fold_view_item_use[ENV](&ENV e, &span sp, ident i,\n     ret @respan(sp, ast.view_item_use(i, meta_items, id));\n }\n \n-fn identity_fold_view_item_import[ENV](&ENV e, &span sp, vec[ident] is,\n-                                       def_id id, option.t[def] target_def)\n+fn identity_fold_view_item_import[ENV](&ENV e, &span sp, ident i,\n+                                       vec[ident] is, def_id id,\n+                                       option.t[def] target_def)\n     -> @view_item {\n-    ret @respan(sp, ast.view_item_import(is, id, target_def));\n+    ret @respan(sp, ast.view_item_import(i, is, id, target_def));\n }\n \n // Additional identities.\n@@ -1271,7 +1271,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_view_item_use =\n              bind identity_fold_view_item_use[ENV](_,_,_,_,_),\n          fold_view_item_import =\n-             bind identity_fold_view_item_import[ENV](_,_,_,_,_),\n+             bind identity_fold_view_item_import[ENV](_,_,_,_,_,_),\n \n          fold_block = bind identity_fold_block[ENV](_,_,_),\n          fold_fn = bind identity_fold_fn[ENV](_,_,_,_,_,_),"}, {"sha": "1af3b20596cd340f5104e15880e95fa0d09564f3", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3cac20dae3272728282466467cb0193d7dbbf00c/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cac20dae3272728282466467cb0193d7dbbf00c/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=3cac20dae3272728282466467cb0193d7dbbf00c", "patch": "@@ -50,7 +50,7 @@ fn unwrap_def(def_wrap d) -> def {\n         }\n         case (def_wrap_import(?it)) {\n             alt (it.node) {\n-                case (ast.view_item_import(_, ?id, ?target_def)) {\n+                case (ast.view_item_import(_, _, ?id, ?target_def)) {\n                     alt (target_def) {\n                         case (some[def](?d)) {\n                             ret d;\n@@ -106,7 +106,7 @@ fn find_final_def(&env e, import_map index,\n         alt (d) {\n             case (def_wrap_import(?imp)) {\n                 alt (imp.node) {\n-                    case (ast.view_item_import(?new_idents, ?d, _)) {\n+                    case (ast.view_item_import(_, ?new_idents, ?d, _)) {\n                         auto x = find_final_def(e, index, sp, new_idents,\n                                                some(d));\n                         ret found_something(e, index, sp, idents, x);\n@@ -235,7 +235,7 @@ fn lookup_name_wrapped(&env e, ast.ident i) -> option.t[tup(@env, def_wrap)] {\n             case (ast.view_item_use(_, _, ?id)) {\n                 ret def_wrap_use(i);\n             }\n-            case (ast.view_item_import(?idents,?d, _)) {\n+            case (ast.view_item_import(_, ?idents,?d, _)) {\n                 ret def_wrap_import(i);\n             }\n         }\n@@ -456,7 +456,7 @@ fn fold_expr_path(&env e, &span sp, &ast.path p, &option.t[def] d,\n }\n \n fn fold_view_item_import(&env e, &span sp,\n-                         import_map index,\n+                         import_map index, ident i,\n                          vec[ident] is, ast.def_id id,\n                          option.t[def] target_id) -> @ast.view_item {\n     // Produce errors for invalid imports\n@@ -472,7 +472,7 @@ fn fold_view_item_import(&env e, &span sp,\n         }\n     }\n     let option.t[def] target_def = some(unwrap_def(d));\n-    ret @fold.respan[ast.view_item_](sp, ast.view_item_import(is, id,\n+    ret @fold.respan[ast.view_item_](sp, ast.view_item_import(i, is, id,\n                                                               target_def));\n }\n \n@@ -514,7 +514,7 @@ fn resolve_imports(session.session sess, @ast.crate crate) -> @ast.crate {\n \n     auto import_index = new_def_hash[def_wrap]();\n     fld = @rec( fold_view_item_import\n-                    = bind fold_view_item_import(_,_,import_index,_,_,_),\n+                    = bind fold_view_item_import(_,_,import_index,_,_,_,_),\n                 update_env_for_crate = bind update_env_for_crate(_,_),\n                 update_env_for_item = bind update_env_for_item(_,_),\n                 update_env_for_block = bind update_env_for_block(_,_),"}, {"sha": "5031e98475b3d2db5a7fa8320fa7850352c94afc", "filename": "src/test/run-pass/import8.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3cac20dae3272728282466467cb0193d7dbbf00c/src%2Ftest%2Frun-pass%2Fimport8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cac20dae3272728282466467cb0193d7dbbf00c/src%2Ftest%2Frun-pass%2Fimport8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport8.rs?ref=3cac20dae3272728282466467cb0193d7dbbf00c", "patch": "@@ -0,0 +1,13 @@\n+import foo.x;\n+import z = foo.x;\n+\n+mod foo {\n+  fn x(int y) {\n+    log y;\n+  }\n+}\n+\n+fn main() {\n+  x(10);\n+  z(10);\n+}"}]}