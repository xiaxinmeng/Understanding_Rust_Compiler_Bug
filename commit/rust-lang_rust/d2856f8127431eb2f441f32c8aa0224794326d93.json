{"sha": "d2856f8127431eb2f441f32c8aa0224794326d93", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyODU2ZjgxMjc0MzFlYjJmNDQxZjMyYzhhYTAyMjQ3OTQzMjZkOTM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-10-06T19:07:28Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-10-07T18:18:49Z"}, "message": "Update per feedback", "tree": {"sha": "80a8b073db1d030f0423dfa3d0d07595d3f00e6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80a8b073db1d030f0423dfa3d0d07595d3f00e6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2856f8127431eb2f441f32c8aa0224794326d93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2856f8127431eb2f441f32c8aa0224794326d93", "html_url": "https://github.com/rust-lang/rust/commit/d2856f8127431eb2f441f32c8aa0224794326d93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2856f8127431eb2f441f32c8aa0224794326d93/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1db2fbec854a929546da4e224b31cc4724c9899", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1db2fbec854a929546da4e224b31cc4724c9899", "html_url": "https://github.com/rust-lang/rust/commit/c1db2fbec854a929546da4e224b31cc4724c9899"}], "stats": {"total": 90, "additions": 52, "deletions": 38}, "files": [{"sha": "eb80b1ff85d723302b23be14c224115374deb843", "filename": "AUTHORS.txt", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d2856f8127431eb2f441f32c8aa0224794326d93/AUTHORS.txt", "raw_url": "https://github.com/rust-lang/rust/raw/d2856f8127431eb2f441f32c8aa0224794326d93/AUTHORS.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/AUTHORS.txt?ref=d2856f8127431eb2f441f32c8aa0224794326d93", "patch": "@@ -8,7 +8,6 @@ Adam Bozanich <adam.boz@gmail.com>\n Adolfo Ochagav\u00eda <aochagavia92@gmail.com>\n Adrien Brault <adrien.brault@gmail.com>\n Adrien T\u00e9tar <adri-from-59@hotmail.fr>\n-Ahmed Charles <acharles@outlook.com>\n Ahmed Charles <ahmedcharles@gmail.com>\n Alan Andrade <alan.andradec@gmail.com>\n Alan Williams <mralert@gmail.com>\n@@ -116,7 +115,6 @@ Christopher Bergqvist <spambox0@digitalpoetry.se>\n Christopher Kendell <ckendell@outlook.com>\n Chuck Ries <chuck.ries@gmail.com>\n Clark Gaebel <cg.wowus.cg@gmail.com>\n-Clark Gaebel <cgaebel@mozilla.com>\n Clinton Ryan <clint.ryan3@gmail.com>\n Cody Schroeder <codys@cs.washington.edu>\n Cole Mickens <cole.mickens@gmail.com>\n@@ -265,8 +263,6 @@ Jag Talon <talon.jag@gmail.com>\n Jake Kaufman <theevocater@gmail.com>\n Jake Kerr <kodafox@gmail.com>\n Jake Scott <jake.net@gmail.com>\n-Jakub <jakub@jakub.cc>\n-Jakub Wieczorek <jakub@jakub.cc>\n Jakub Wieczorek <jakubw@jakubw.net>\n James Deng <cnjamesdeng@gmail.com>\n James Hurst <jamesrhurst@users.noreply.github.com>\n@@ -338,7 +334,6 @@ Junyoung Cho <june0.cho@samsung.com>\n JustAPerson <jpriest8@ymail.com>\n Justin Noah <justinnoah@gmail.com>\n Jyun-Yan You <jyyou.tw@gmail.com>\n-Jyun-Yan You <jyyou@cs.nctu.edu.tw>\n Kang Seonghoon <kang.seonghoon@mearie.org>\n Kasey Carrothers <kaseyc.808@gmail.com>\n Keegan McAllister <kmcallister@mozilla.com>\n@@ -365,7 +360,6 @@ Liigo Zhuang <com.liigo@gmail.com>\n Lindsey Kuper <lindsey@composition.al>\n Luca Bruno <lucab@debian.org>\n Luis de Bethencourt <luis@debethencourt.com>\n-Luqman Aden <laden@csclub.uwaterloo.ca>\n Luqman Aden <me@luqman.ca>\n Magnus Auvinen <magnus.auvinen@gmail.com>\n Mahmut Bulut <mahmutbulut0@gmail.com>\n@@ -415,7 +409,6 @@ Michael Sproul <micsproul@gmail.com>\n Michael Sullivan <sully@msully.net>\n Michael Williams <m.t.williams@live.com>\n Michael Woerister <michaelwoerister@gmail>\n-Michael Woerister <michaelwoerister@posteo>\n Michael Zhou <moz@google.com>\n Mick Koch <kchmck@gmail.com>\n Micka\u00ebl Delahaye <mickael.delahaye@gmail.com>\n@@ -443,7 +436,6 @@ Noam Yorav-Raphael <noamraph@gmail.com>\n Noufal Ibrahim <noufal@nibrahim.net.in>\n O S K Chaitanya <osk@medhas.org>\n OGINO Masanori <masanori.ogino@gmail.com>\n-Ogino Masanori <masanori.ogino@gmail.com>\n Olivier Saut <osaut@airpost.net>\n Olle Jonsson <olle.jonsson@gmail.com>\n Or Brostovski <tohava@gmail.com>\n@@ -455,7 +447,6 @@ Palmer Cox <p@lmercox.com>\n Paolo Falabella <paolo.falabella@gmail.com>\n Patrick Reisert <kpreisert@gmail.com>\n Patrick Walton <pcwalton@mimiga.net>\n-Patrick Walton <pwalton@mozilla.com>\n Patrick Yevsukov <patrickyevsukov@users.noreply.github.com>\n Patrik K\u00e5rlin <patrik.karlin@gmail.com>\n Paul Collins <paul@ondioline.org>\n@@ -502,7 +493,6 @@ Rob Hoelz <rob@hoelz.ro>\n Robert Buonpastore <robert.buonpastore@gmail.com>\n Robert Clipsham <robert@octarineparrot.com>\n Robert Gawdzik <rgawdzik@hotmail.com>\n-Robert Gawdzik \u2622 <rgawdzik@hotmail.com>\n Robert Irelan <rirelan@gmail.com>\n Robert Knight <robertknight@gmail.com>\n Robert Millar <robert.millar@cantab.net>\n@@ -543,7 +533,6 @@ Shamir Khodzha <khodzha.sh@gmail.com>\n SiegeLord <slabode@aim.com>\n Simon Barber-Dueck <sbarberdueck@gmail.com>\n Simon Persson <simon@flaskpost.org>\n-Simon Sapin <simon.sapin@exyr.org>\n Simon Sapin <simon@exyr.org>\n Squeaky <squeaky_pl@gmx.com>\n Stefan Plantikow <stefan.plantikow@googlemail.com>\n@@ -552,7 +541,6 @@ Sterling Greene <sterling.greene@gmail.com>\n Steve Klabnik <steve@steveklabnik.com>\n Steven De Coeyer <steven@banteng.be>\n Steven Fackler <sfackler@gmail.com>\n-Steven Fackler <sfackler@palantir.com>\n Steven Sheldon <steven@sasheldon.com>\n Steven Stewart-Gallus <sstewartgallus00@langara.bc.ca>\n Strahinja Val Markovic <val@markovic.io>"}, {"sha": "44530cb817affcb9f97af1b2a438ba13661d1554", "filename": "RELEASES.md", "status": "modified", "additions": 52, "deletions": 26, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/d2856f8127431eb2f441f32c8aa0224794326d93/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/d2856f8127431eb2f441f32c8aa0224794326d93/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=d2856f8127431eb2f441f32c8aa0224794326d93", "patch": "@@ -1,14 +1,15 @@\n Version 0.12.0 (October 2014)\n -----------------------------\n \n-  * ~1700 changes, numerous bugfixes\n+  * ~1900 changes, numerous bugfixes\n \n   * Highlights\n \n     * The introductory documentation (now called The Rust Guide) has\n       been completely rewritten, as have a number of supplementary\n       guides.\n-    * Rust's package manager, Cargo, is awesome.\n+    * Rust's package manager, Cargo, continues to improve and is,\n+      reportedly, 'awesome'.\n     * Many API's in `std` have been reviewed and updated for\n       consistency with the in-development Rust coding\n       guidelines. The standard library documentation tracks\n@@ -21,24 +22,47 @@ Version 0.12.0 (October 2014)\n     * Rust now works on 64-bit Windows.\n \n   * Language\n-    * A new slicing syntax (e.g. `[0..4]`) has been introduced behind\n-      the 'slicing_syntax' feature gate, and can be overloaded with\n-      the `Slice` or `SliceMut` traits.\n     * Indexing can be overloaded with the `Index` and `IndexMut`\n       traits.\n     * The `if let` construct takes a branch only if the `let` pattern\n       matches, currently behind the 'if_let' feature gate.\n-    * `let` and `match` bindings and argument names in macros are now\n-      hygienic.\n+    * 'where clauses', a more flexible syntax for specifying trait\n+      bounds that is more aesthetic, have been added for traits and\n+      free functions. Where clauses will in the future make it\n+      possible to constrain associated types, which would be\n+      impossible with the existing syntax.\n+    * A new slicing syntax (e.g. `[0..4]`) has been introduced behind\n+      the 'slicing_syntax' feature gate, and can be overloaded with\n+      the `AsSlice` or `AsSliceMut` traits.\n+    * The syntax for matching of sub-slices has been changed to use a\n+      postfix `..` instead of prefix (.e.g. `[a, b, c..]`), for\n+      consistency with other uses of `..` and to future-proof\n+      potential additional uses of the syntax.\n+    * The syntax for matching inclusive ranges in patterns has changed\n+      from `0..3` to `0...4` to be consistent with the exclusive range\n+      syntax for slicing.\n+    * Matching of sub-slices in non-tail positions (e.g.  `[a.., b,\n+      c]`) has been put behind the 'advanced_slice_patterns' feature\n+      gate and may be removed in the future.\n+    * Components of tuples and tuple structs can be extracted using\n+      the `value.0` syntax, currently behind the `tuple_indexing`\n+      feature gate.\n     * The `#[crate_id]` attribute is no longer supported; versioning\n       is handled by the package manager.\n-    * Mutation and assignment is no longer allowed in pattern guards.\n-    * Generic structs and enums can now have trait bounds.\n-    * `use foo = bar` is now written `use bar as foo`.\n+    * Renaming crate imports are now written `extern crate foo as bar`\n+      instead of `extern crate bar = foo`.\n+    * Renaming use statements are now written `use foo as bar` instead\n+      of `use bar = foo`.\n+    * `let` and `match` bindings and argument names in macros are now\n+      hygienic.\n     * The new, more efficient, closure types ('unboxed closures') have\n       been added under a feature gate, 'unboxed_closures'. These will\n       soon replace the existing closure types, once higher-ranked\n       trait lifetimes are added to the language.\n+    * `move` has been added as a keyword, for indicating closures\n+      that capture by value.\n+    * Mutation and assignment is no longer allowed in pattern guards.\n+    * Generic structs and enums can now have trait bounds.\n     * The `Share` trait is now called `Sync` to free up the term\n       'shared' to refer to 'shared reference' (the default reference\n       type.\n@@ -48,40 +72,42 @@ Version 0.12.0 (October 2014)\n     * As part of dynamically-sized types, the `Sized` trait has been\n       introduced, which qualifying types implement by default, and\n       which type parameters expect by default. To specify that a type\n-      parametr does not need to be sized, write `<Sized? T>`. Most\n+      parameter does not need to be sized, write `<Sized? T>`. Most\n       types are `Sized`, notable exceptions being unsized arrays\n       (`[T]`) and trait types.\n-    * Closures can return `!`, as in `|| -> !` or `proc() ->`.\n-    * The syntax for matching of sub-slices has been changed to use a\n-      postfix `..` instead of prefix (.e.g. `[a, b, c..]`), for\n-      consistency with other uses of `..` and to future-proof\n-      potential additional uses of the syntax.\n-    * Matching of sub-slices in non-tail positions (e.g.  `[a.., b,\n-      c]`) has been put behind the 'advanced_slice_patterns' feature\n-      gate and may be removed in the future.\n+    * Closures can return `!`, as in `|| -> !` or `proc() -> !`.\n+    * Lifetime bounds can now be applied to type parameters and object\n+      types.\n+    * The old, reference counted GC type, `Gc<T>` which was once\n+      denoted by the `@` sigil, has finally been removed. GC will be\n+      revisited in the future.\n \n   * Libraries\n     * Library documentation has been improved for a number of modules.\n     * Bit-vectors, collections::bitv has been modernized.\n     * The url crate is deprecated in favor of\n       http://github.com/servo/rust-url, which can be installed with\n       Cargo.\n-    * Most I/O stream types can be cloned and subsequently closed\n-      from a different thread.\n+    * Most I/O stream types can be cloned and subsequently closed from\n+      a different thread.\n     * A `std::time::Duration` type has been added for use in I/O\n       methods that rely on timers, as well as in the 'time' crate's\n       `Timespec` arithmetic.\n-    * The green-thread scheduler, libgreen, has been removed, as\n-      has the associated runtime I/O abstraction layer.\n+    * The runtime I/O abstraction layer that enabled the green thread\n+      scheduler to do non-thread-blocking I/O has been removed, along\n+      with the libuv-based implementation employed by the green thread\n+      scheduler. This will greatly simplify the future I/O work.\n+    * `collections::btree` has been rewritten to have a more\n+      idiomatic and efficient design.\n \n   * Tooling\n     * rustdoc output now indicates the stability levels of API's.\n     * The `--crate-name` flag can specify the name of the crate\n       being compiled, like `#[crate_name]`.\n-    * The `-C metadata` specifies additional metada to hash into\n+    * The `-C metadata` specifies additional metadata to hash into\n       symbol names, and `-C extra-filename` specifies additional\n-      information to put into the output filename, for use by\n-      the package manager for versioning.\n+      information to put into the output filename, for use by the\n+      package manager for versioning.\n     * debug info generation has continued to improve and should be\n       more reliable under both gdb and lldb.\n     * rustc has experimental support for compiling in parallel"}]}