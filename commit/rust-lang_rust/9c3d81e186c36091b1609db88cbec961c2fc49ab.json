{"sha": "9c3d81e186c36091b1609db88cbec961c2fc49ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljM2Q4MWUxODZjMzYwOTFiMTYwOWRiODhjYmVjOTYxYzJmYzQ5YWI=", "commit": {"author": {"name": "Giles Cope", "email": "gilescope@gmail.com", "date": "2021-06-10T19:16:35Z"}, "committer": {"name": "Giles Cope", "email": "gilescope@gmail.com", "date": "2021-06-10T19:16:35Z"}, "message": "Further simplification of to_digit", "tree": {"sha": "3341ad5dec31dcedd7938c59d25dccf932b7b51e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3341ad5dec31dcedd7938c59d25dccf932b7b51e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c3d81e186c36091b1609db88cbec961c2fc49ab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEh0hoVRXRPubZAqGkYx9jUtSpSe8FAmDCZU0ACgkQYx9jUtSp\nSe8MYBAAomoYY2N8lLvVJZH71qRYM8oqklU8U0o8+Trc80Q2u6QuTNYsu/X+0RxF\nfpJTt8jbyDq+jEyqIzxEuYHOIHhtIuKQbH26343Ip4uhUXtFfwHCvyNvsmFXNWH3\np48QTbV52hcVGiUJHqARKtZmcNq9dZN+Dt1aqw4dmH2IvGyurwi0S/LPEhvESZ9b\nlIqbFGKLki7vaqpMyuNGf5oEk5JV/IoiLUXobtOOI2GEVcbs9f56QqTXgnQ7dSrA\nL8M7KaFWTWYSQfq5JCKK9PL9gBr0YVzW+BsbgWnCQmNj6JcS+CU7HKGKAJQ/Unw3\nxqWmwYpPzJmOb0OiSuNbyzP3jOAsTdqGLRajtnMUn6U5evh9bTpRgSA8OSKYhlha\nKh38ncITnqbe6FjHlccwyTIabujWFvx4jzz1IwNpOeMIgziOrE9JvQ49FpJQajL2\nLgZQ8D7TgkwtLA4V6GPf078/2i2ngvxd1f3oZLmQVVYEIC0VYjFdqTyxXcjL7kFi\nIU9meiB3dsXC3vQ7nm7G7LDCBeh8nouLQjPd3lT5L73w+tIN4oG3W3oqVh0yq8jh\n1NcivhpL9ZWUs7VV23p6t5JcPf8XSbROMUg1AvVFUU7wr9Y6BaVQbTHwQr7R8VE2\nEyitHqW/0pkcePS9yYPh5EqZesqA3ckHJfHHvoppaMonx3G39pw=\n=0Z4Z\n-----END PGP SIGNATURE-----", "payload": "tree 3341ad5dec31dcedd7938c59d25dccf932b7b51e\nparent b3ac52646f7591a811fa9bf55995b24fd17ece08\nauthor Giles Cope <gilescope@gmail.com> 1623352595 +0100\ncommitter Giles Cope <gilescope@gmail.com> 1623352595 +0100\n\nFurther simplification of to_digit\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c3d81e186c36091b1609db88cbec961c2fc49ab", "html_url": "https://github.com/rust-lang/rust/commit/9c3d81e186c36091b1609db88cbec961c2fc49ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c3d81e186c36091b1609db88cbec961c2fc49ab/comments", "author": {"login": "gilescope", "id": 803976, "node_id": "MDQ6VXNlcjgwMzk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/803976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gilescope", "html_url": "https://github.com/gilescope", "followers_url": "https://api.github.com/users/gilescope/followers", "following_url": "https://api.github.com/users/gilescope/following{/other_user}", "gists_url": "https://api.github.com/users/gilescope/gists{/gist_id}", "starred_url": "https://api.github.com/users/gilescope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gilescope/subscriptions", "organizations_url": "https://api.github.com/users/gilescope/orgs", "repos_url": "https://api.github.com/users/gilescope/repos", "events_url": "https://api.github.com/users/gilescope/events{/privacy}", "received_events_url": "https://api.github.com/users/gilescope/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gilescope", "id": 803976, "node_id": "MDQ6VXNlcjgwMzk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/803976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gilescope", "html_url": "https://github.com/gilescope", "followers_url": "https://api.github.com/users/gilescope/followers", "following_url": "https://api.github.com/users/gilescope/following{/other_user}", "gists_url": "https://api.github.com/users/gilescope/gists{/gist_id}", "starred_url": "https://api.github.com/users/gilescope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gilescope/subscriptions", "organizations_url": "https://api.github.com/users/gilescope/orgs", "repos_url": "https://api.github.com/users/gilescope/repos", "events_url": "https://api.github.com/users/gilescope/events{/privacy}", "received_events_url": "https://api.github.com/users/gilescope/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3ac52646f7591a811fa9bf55995b24fd17ece08", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3ac52646f7591a811fa9bf55995b24fd17ece08", "html_url": "https://github.com/rust-lang/rust/commit/b3ac52646f7591a811fa9bf55995b24fd17ece08"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "7f7a1c21e4a29e067c1f8e2ddfec612ddeb614f0", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9c3d81e186c36091b1609db88cbec961c2fc49ab/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c3d81e186c36091b1609db88cbec961c2fc49ab/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=9c3d81e186c36091b1609db88cbec961c2fc49ab", "patch": "@@ -1,6 +1,5 @@\n //! impl char {}\n \n-use crate::intrinsics::likely;\n use crate::slice;\n use crate::str::from_utf8_unchecked_mut;\n use crate::unicode::printable::is_printable;\n@@ -332,21 +331,16 @@ impl char {\n     #[inline]\n     pub fn to_digit(self, radix: u32) -> Option<u32> {\n         assert!(radix <= 36, \"to_digit: radix is too high (maximum 36)\");\n-        // the code is split up here to improve execution speed for cases where\n-        // the `radix` is constant and 10 or smaller\n-        let val = if likely(radix <= 10) {\n-            // If not a digit, a number greater than radix will be created.\n-            (self as u32).wrapping_sub('0' as u32)\n-        } else {\n-            match self {\n-                '0'..='9' => self as u32 - '0' as u32,\n-                'a'..='z' => self as u32 - 'a' as u32 + 10,\n-                'A'..='Z' => self as u32 - 'A' as u32 + 10,\n-                _ => return None,\n+        // If not a digit, a number greater than radix will be created.\n+        let mut digit = (self as u32).wrapping_sub('0' as u32);\n+        if radix > 10 {\n+            if digit < 10 {\n+                return Some(digit);\n             }\n-        };\n-\n-        if val < radix { Some(val) } else { None }\n+            // Force the 6th bit to be set to ensure ascii is lower case.\n+            digit = (self as u32 | 0b10_0000).wrapping_sub('a' as u32).saturating_add(10);\n+        }\n+        (digit < radix).then_some(digit)\n     }\n \n     /// Returns an iterator that yields the hexadecimal Unicode escape of a"}, {"sha": "4353d2cda8a447a405c8ff6cd91a704a6ebb29c1", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c3d81e186c36091b1609db88cbec961c2fc49ab/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c3d81e186c36091b1609db88cbec961c2fc49ab/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=9c3d81e186c36091b1609db88cbec961c2fc49ab", "patch": "@@ -66,6 +66,7 @@\n #![feature(allow_internal_unstable)]\n #![feature(arbitrary_self_types)]\n #![feature(asm)]\n+#![feature(bool_to_option)]\n #![feature(cfg_target_has_atomic)]\n #![feature(const_heap)]\n #![feature(const_alloc_layout)]"}, {"sha": "51eca1e05d3438a463f07d7ffad33ee7aae7d015", "filename": "library/core/tests/char.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9c3d81e186c36091b1609db88cbec961c2fc49ab/library%2Fcore%2Ftests%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c3d81e186c36091b1609db88cbec961c2fc49ab/library%2Fcore%2Ftests%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fchar.rs?ref=9c3d81e186c36091b1609db88cbec961c2fc49ab", "patch": "@@ -67,10 +67,20 @@ fn test_to_digit() {\n     assert_eq!('A'.to_digit(16), Some(10));\n     assert_eq!('b'.to_digit(16), Some(11));\n     assert_eq!('B'.to_digit(16), Some(11));\n+    assert_eq!('A'.to_digit(36), Some(10));\n     assert_eq!('z'.to_digit(36), Some(35));\n     assert_eq!('Z'.to_digit(36), Some(35));\n-    assert_eq!(' '.to_digit(10), None);\n+    assert_eq!('['.to_digit(36), None);\n+    assert_eq!('`'.to_digit(36), None);\n+    assert_eq!('{'.to_digit(36), None);\n     assert_eq!('$'.to_digit(36), None);\n+    assert_eq!('@'.to_digit(16), None);\n+    assert_eq!('G'.to_digit(16), None);\n+    assert_eq!('g'.to_digit(16), None);\n+    assert_eq!(' '.to_digit(10), None);\n+    assert_eq!('/'.to_digit(10), None);\n+    assert_eq!(':'.to_digit(10), None);\n+    assert_eq!(':'.to_digit(11), None);\n }\n \n #[test]"}]}