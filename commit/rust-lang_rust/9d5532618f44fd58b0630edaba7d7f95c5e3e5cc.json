{"sha": "9d5532618f44fd58b0630edaba7d7f95c5e3e5cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNTUzMjYxOGY0NGZkNThiMDYzMGVkYWJhN2Q3Zjk1YzVlM2U1Y2M=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-02-24T08:35:00Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-02-25T17:08:55Z"}, "message": "resolve: Remove all the operator overloads from trait_map.", "tree": {"sha": "da95c006d02f981c6069503ca5408f9effe08bc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da95c006d02f981c6069503ca5408f9effe08bc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d5532618f44fd58b0630edaba7d7f95c5e3e5cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d5532618f44fd58b0630edaba7d7f95c5e3e5cc", "html_url": "https://github.com/rust-lang/rust/commit/9d5532618f44fd58b0630edaba7d7f95c5e3e5cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d5532618f44fd58b0630edaba7d7f95c5e3e5cc/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d096eefd8016103b524a6ef39a9d42092e51fc69", "url": "https://api.github.com/repos/rust-lang/rust/commits/d096eefd8016103b524a6ef39a9d42092e51fc69", "html_url": "https://github.com/rust-lang/rust/commit/d096eefd8016103b524a6ef39a9d42092e51fc69"}], "stats": {"total": 72, "additions": 0, "deletions": 72}, "files": [{"sha": "dbf548bed98bf931714539e092e0962810c31a8f", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/9d5532618f44fd58b0630edaba7d7f95c5e3e5cc/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5532618f44fd58b0630edaba7d7f95c5e3e5cc/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=9d5532618f44fd58b0630edaba7d7f95c5e3e5cc", "patch": "@@ -5264,67 +5264,6 @@ impl Resolver {\n                 let traits = self.search_for_traits_containing_method(ident);\n                 self.trait_map.insert(expr.id, @RefCell::new(traits));\n             }\n-            ExprBinary(_, BiAdd, _, _) | ExprAssignOp(_, BiAdd, _, _) => {\n-                let i = self.lang_items.add_trait();\n-                self.add_fixed_trait_for_expr(expr.id, i);\n-            }\n-            ExprBinary(_, BiSub, _, _) | ExprAssignOp(_, BiSub, _, _) => {\n-                let i = self.lang_items.sub_trait();\n-                self.add_fixed_trait_for_expr(expr.id, i);\n-            }\n-            ExprBinary(_, BiMul, _, _) | ExprAssignOp(_, BiMul, _, _) => {\n-                let i = self.lang_items.mul_trait();\n-                self.add_fixed_trait_for_expr(expr.id, i);\n-            }\n-            ExprBinary(_, BiDiv, _, _) | ExprAssignOp(_, BiDiv, _, _) => {\n-                let i = self.lang_items.div_trait();\n-                self.add_fixed_trait_for_expr(expr.id, i);\n-            }\n-            ExprBinary(_, BiRem, _, _) | ExprAssignOp(_, BiRem, _, _) => {\n-                let i = self.lang_items.rem_trait();\n-                self.add_fixed_trait_for_expr(expr.id, i);\n-            }\n-            ExprBinary(_, BiBitXor, _, _) | ExprAssignOp(_, BiBitXor, _, _) => {\n-                let i = self.lang_items.bitxor_trait();\n-                self.add_fixed_trait_for_expr(expr.id, i);\n-            }\n-            ExprBinary(_, BiBitAnd, _, _) | ExprAssignOp(_, BiBitAnd, _, _) => {\n-                let i = self.lang_items.bitand_trait();\n-                self.add_fixed_trait_for_expr(expr.id, i);\n-            }\n-            ExprBinary(_, BiBitOr, _, _) | ExprAssignOp(_, BiBitOr, _, _) => {\n-                let i = self.lang_items.bitor_trait();\n-                self.add_fixed_trait_for_expr(expr.id, i);\n-            }\n-            ExprBinary(_, BiShl, _, _) | ExprAssignOp(_, BiShl, _, _) => {\n-                let i = self.lang_items.shl_trait();\n-                self.add_fixed_trait_for_expr(expr.id, i);\n-            }\n-            ExprBinary(_, BiShr, _, _) | ExprAssignOp(_, BiShr, _, _) => {\n-                let i = self.lang_items.shr_trait();\n-                self.add_fixed_trait_for_expr(expr.id, i);\n-            }\n-            ExprBinary(_, BiLt, _, _) | ExprBinary(_, BiLe, _, _) |\n-            ExprBinary(_, BiGe, _, _) | ExprBinary(_, BiGt, _, _) => {\n-                let i = self.lang_items.ord_trait();\n-                self.add_fixed_trait_for_expr(expr.id, i);\n-            }\n-            ExprBinary(_, BiEq, _, _) | ExprBinary(_, BiNe, _, _) => {\n-                let i = self.lang_items.eq_trait();\n-                self.add_fixed_trait_for_expr(expr.id, i);\n-            }\n-            ExprUnary(_, UnNeg, _) => {\n-                let i = self.lang_items.neg_trait();\n-                self.add_fixed_trait_for_expr(expr.id, i);\n-            }\n-            ExprUnary(_, UnNot, _) => {\n-                let i = self.lang_items.not_trait();\n-                self.add_fixed_trait_for_expr(expr.id, i);\n-            }\n-            ExprIndex(..) => {\n-                let i = self.lang_items.index_trait();\n-                self.add_fixed_trait_for_expr(expr.id, i);\n-            }\n             _ => {\n                 // Nothing to do.\n             }\n@@ -5417,17 +5356,6 @@ impl Resolver {\n         found_traits.push(trait_def_id);\n     }\n \n-    fn add_fixed_trait_for_expr(&mut self,\n-                                    expr_id: NodeId,\n-                                    trait_id: Option<DefId>) {\n-        match trait_id {\n-            Some(trait_id) => {\n-                self.trait_map.insert(expr_id, @RefCell::new(~[trait_id]));\n-            }\n-            None => {}\n-        }\n-    }\n-\n     fn record_def(&mut self, node_id: NodeId, (def, lp): (Def, LastPrivate)) {\n         debug!(\"(recording def) recording {:?} for {:?}, last private {:?}\",\n                 def, node_id, lp);"}]}