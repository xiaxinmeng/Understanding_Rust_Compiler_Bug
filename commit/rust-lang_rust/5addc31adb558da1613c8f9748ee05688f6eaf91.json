{"sha": "5addc31adb558da1613c8f9748ee05688f6eaf91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZGRjMzFhZGI1NThkYTE2MTNjOGY5NzQ4ZWUwNTY4OGY2ZWFmOTE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2015-12-08T20:53:19Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2015-12-10T21:59:31Z"}, "message": "Make MIR encodable and store it in crate metadata.", "tree": {"sha": "63ff7e3fe6c4599d03cd82708098a9041297cb51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63ff7e3fe6c4599d03cd82708098a9041297cb51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5addc31adb558da1613c8f9748ee05688f6eaf91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5addc31adb558da1613c8f9748ee05688f6eaf91", "html_url": "https://github.com/rust-lang/rust/commit/5addc31adb558da1613c8f9748ee05688f6eaf91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5addc31adb558da1613c8f9748ee05688f6eaf91/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8eee116cb8532d5879cbef6af4a59d563d4fb644", "url": "https://api.github.com/repos/rust-lang/rust/commits/8eee116cb8532d5879cbef6af4a59d563d4fb644", "html_url": "https://github.com/rust-lang/rust/commit/8eee116cb8532d5879cbef6af4a59d563d4fb644"}], "stats": {"total": 197, "additions": 163, "deletions": 34}, "files": [{"sha": "9f75f9ebb9adf51ec1adff29a0486a0b78a245f3", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5addc31adb558da1613c8f9748ee05688f6eaf91/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5addc31adb558da1613c8f9748ee05688f6eaf91/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=5addc31adb558da1613c8f9748ee05688f6eaf91", "patch": "@@ -242,7 +242,7 @@ pub fn lookup_const_fn_by_id<'tcx>(tcx: &ty::ctxt<'tcx>, def_id: DefId)\n     }\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub enum ConstVal {\n     Float(f64),\n     Int(i64),"}, {"sha": "22a4ddd2f687b54db5ba18fcaef85f42e0429cd9", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5addc31adb558da1613c8f9748ee05688f6eaf91/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5addc31adb558da1613c8f9748ee05688f6eaf91/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=5addc31adb558da1613c8f9748ee05688f6eaf91", "patch": "@@ -28,6 +28,7 @@ use middle::def;\n use middle::lang_items;\n use middle::ty::{self, Ty};\n use middle::def_id::{DefId, DefIndex};\n+use mir::repr::Mir;\n use session::Session;\n use session::search_paths::PathKind;\n use util::nodemap::{FnvHashMap, NodeMap, NodeSet};\n@@ -100,6 +101,7 @@ pub enum InlinedItem {\n }\n \n /// A borrowed version of `hir::InlinedItem`.\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n pub enum InlinedItemRef<'a> {\n     Item(&'a hir::Item),\n     TraitItem(DefId, &'a hir::TraitItem),\n@@ -216,6 +218,8 @@ pub trait CrateStore<'tcx> : Any {\n     // misc. metadata\n     fn maybe_get_item_ast(&'tcx self, tcx: &ty::ctxt<'tcx>, def: DefId)\n                           -> FoundAst<'tcx>;\n+    fn maybe_get_item_mir(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+                          -> Option<Mir<'tcx>>;\n     // This is basically a 1-based range of ints, which is a little\n     // silly - I may fix that.\n     fn crates(&self) -> Vec<ast::CrateNum>;\n@@ -235,6 +239,7 @@ pub trait CrateStore<'tcx> : Any {\n                        item_symbols: &RefCell<NodeMap<String>>,\n                        link_meta: &LinkMeta,\n                        reachable: &NodeSet,\n+                       mir_map: &NodeMap<Mir<'tcx>>,\n                        krate: &hir::Crate) -> Vec<u8>;\n     fn metadata_encoding_version(&self) -> &[u8];\n }\n@@ -383,6 +388,9 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     // misc. metadata\n     fn maybe_get_item_ast(&'tcx self, tcx: &ty::ctxt<'tcx>, def: DefId)\n                           -> FoundAst<'tcx> { unimplemented!() }\n+    fn maybe_get_item_mir(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+                          -> Option<Mir<'tcx>> { unimplemented!() }\n+\n     // This is basically a 1-based range of ints, which is a little\n     // silly - I may fix that.\n     fn crates(&self) -> Vec<ast::CrateNum> { vec![] }\n@@ -404,6 +412,7 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n                        item_symbols: &RefCell<NodeMap<String>>,\n                        link_meta: &LinkMeta,\n                        reachable: &NodeSet,\n+                       mir_map: &NodeMap<Mir<'tcx>>,\n                        krate: &hir::Crate) -> Vec<u8> { vec![] }\n     fn metadata_encoding_version(&self) -> &[u8] { unimplemented!() }\n }"}, {"sha": "66b2a9d3ad0bfeb8dfab458cb7dc137adf5668e3", "filename": "src/librustc/middle/ty/sty.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5addc31adb558da1613c8f9748ee05688f6eaf91/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5addc31adb558da1613c8f9748ee05688f6eaf91/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fsty.rs?ref=5addc31adb558da1613c8f9748ee05688f6eaf91", "patch": "@@ -10,6 +10,7 @@\n \n //! This module contains TypeVariants and its major components\n \n+use middle::cstore;\n use middle::def_id::DefId;\n use middle::region;\n use middle::subst::{self, Substs};\n@@ -26,6 +27,8 @@ use syntax::abi;\n use syntax::ast::{self, Name};\n use syntax::parse::token::special_idents;\n \n+use serialize::{Decodable, Decoder};\n+\n use rustc_front::hir;\n \n use self::FnOutput::*;\n@@ -233,7 +236,7 @@ pub enum TypeVariants<'tcx> {\n /// closure C wind up influencing the decisions we ought to make for\n /// closure C (which would then require fixed point iteration to\n /// handle). Plus it fixes an ICE. :P\n-#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n+#[derive(Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct ClosureSubsts<'tcx> {\n     /// Lifetime and type parameters from the enclosing function.\n     /// These are separated out because trans wants to pass them around\n@@ -246,6 +249,23 @@ pub struct ClosureSubsts<'tcx> {\n     pub upvar_tys: Vec<Ty<'tcx>>\n }\n \n+impl<'tcx> Decodable for &'tcx ClosureSubsts<'tcx> {\n+    fn decode<S: Decoder>(s: &mut S) -> Result<&'tcx ClosureSubsts<'tcx>, S::Error> {\n+        let closure_substs = try! { Decodable::decode(s) };\n+        let dummy_def_id: DefId = unsafe { mem::zeroed() };\n+\n+        cstore::tls::with_decoding_context(s, |dcx, _| {\n+            // Intern the value\n+            let ty = dcx.tcx().mk_closure_from_closure_substs(dummy_def_id,\n+                                                              Box::new(closure_substs));\n+            match ty.sty {\n+                TyClosure(_, ref closure_substs) => Ok(&**closure_substs),\n+                _ => unreachable!()\n+            }\n+        })\n+    }\n+}\n+\n #[derive(Clone, PartialEq, Eq, Hash)]\n pub struct TraitTy<'tcx> {\n     pub principal: ty::PolyTraitRef<'tcx>,\n@@ -434,7 +454,7 @@ pub struct ClosureTy<'tcx> {\n     pub sig: PolyFnSig<'tcx>,\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub enum FnOutput<'tcx> {\n     FnConverging(Ty<'tcx>),\n     FnDiverging\n@@ -632,7 +652,7 @@ pub struct DebruijnIndex {\n ///\n /// [1] http://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/\n /// [2] http://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/\n-#[derive(Clone, PartialEq, Eq, Hash, Copy)]\n+#[derive(Clone, PartialEq, Eq, Hash, Copy, RustcEncodable, RustcDecodable)]\n pub enum Region {\n     // Region bound in a type or fn declaration which will be\n     // substituted 'early' -- that is, at the same time when type\n@@ -701,7 +721,7 @@ pub struct RegionVid {\n     pub index: u32\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub struct SkolemizedRegionVid {\n     pub index: u32\n }"}, {"sha": "049063f73a5bf7c4ac86d2b27cb58eb920f21409", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5addc31adb558da1613c8f9748ee05688f6eaf91/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5addc31adb558da1613c8f9748ee05688f6eaf91/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=5addc31adb558da1613c8f9748ee05688f6eaf91", "patch": "@@ -21,6 +21,7 @@ use std::fmt::{Debug, Formatter, Error};\n use std::u32;\n \n /// Lowered representation of a single function.\n+#[derive(RustcEncodable, RustcDecodable)]\n pub struct Mir<'tcx> {\n     /// List of basic blocks. References to basic block use a newtyped index type `BasicBlock`\n     /// that indexes into this vector.\n@@ -71,13 +72,13 @@ impl<'tcx> Mir<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // Mutability and borrow kinds\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n pub enum Mutability {\n     Mut,\n     Not,\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n pub enum BorrowKind {\n     /// Data must be immutable and is aliasable.\n     Shared,\n@@ -128,6 +129,7 @@ pub enum BorrowKind {\n \n // A \"variable\" is a binding declared by the user as part of the fn\n // decl, a let, etc.\n+#[derive(RustcEncodable, RustcDecodable)]\n pub struct VarDecl<'tcx> {\n     pub mutability: Mutability,\n     pub name: Name,\n@@ -136,6 +138,7 @@ pub struct VarDecl<'tcx> {\n \n // A \"temp\" is a temporary that we place on the stack. They are\n // anonymous, always mutable, and have only a type.\n+#[derive(RustcEncodable, RustcDecodable)]\n pub struct TempDecl<'tcx> {\n     pub ty: Ty<'tcx>,\n }\n@@ -151,6 +154,7 @@ pub struct TempDecl<'tcx> {\n //\n // there is only one argument, of type `(i32, u32)`, but two bindings\n // (`x` and `y`).\n+#[derive(RustcEncodable, RustcDecodable)]\n pub struct ArgDecl<'tcx> {\n     pub ty: Ty<'tcx>,\n }\n@@ -162,7 +166,7 @@ pub struct ArgDecl<'tcx> {\n /// list of the `Mir`.\n ///\n /// (We use a `u32` internally just to save memory.)\n-#[derive(Copy, Clone, PartialEq, Eq)]\n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n pub struct BasicBlock(u32);\n \n impl BasicBlock {\n@@ -186,12 +190,13 @@ impl Debug for BasicBlock {\n ///////////////////////////////////////////////////////////////////////////\n // BasicBlock and Terminator\n \n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable, RustcDecodable)]\n pub struct BasicBlockData<'tcx> {\n     pub statements: Vec<Statement<'tcx>>,\n     pub terminator: Terminator<'tcx>,\n }\n \n+#[derive(RustcEncodable, RustcDecodable)]\n pub enum Terminator<'tcx> {\n     /// block should have one successor in the graph; we jump there\n     Goto {\n@@ -289,7 +294,7 @@ impl<'tcx> Terminator<'tcx> {\n     }\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable, RustcDecodable)]\n pub struct CallData<'tcx> {\n     /// where the return value is written to\n     pub destination: Lvalue<'tcx>,\n@@ -346,18 +351,19 @@ impl<'tcx> Debug for Terminator<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // Statements\n \n+#[derive(RustcEncodable, RustcDecodable)]\n pub struct Statement<'tcx> {\n     pub span: Span,\n     pub kind: StatementKind<'tcx>,\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable, RustcDecodable)]\n pub enum StatementKind<'tcx> {\n     Assign(Lvalue<'tcx>, Rvalue<'tcx>),\n     Drop(DropKind, Lvalue<'tcx>),\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n pub enum DropKind {\n     Free, // free a partially constructed box, should go away eventually\n     Deep\n@@ -378,7 +384,7 @@ impl<'tcx> Debug for Statement<'tcx> {\n \n /// A path to a value; something that can be evaluated without\n /// changing or disturbing program state.\n-#[derive(Clone, PartialEq)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable)]\n pub enum Lvalue<'tcx> {\n     /// local variable declared by the user\n     Var(u32),\n@@ -404,13 +410,13 @@ pub enum Lvalue<'tcx> {\n /// or `*B` or `B[index]`. Note that it is parameterized because it is\n /// shared between `Constant` and `Lvalue`. See the aliases\n /// `LvalueProjection` etc below.\n-#[derive(Clone, Debug, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, RustcEncodable, RustcDecodable)]\n pub struct Projection<'tcx, B, V> {\n     pub base: B,\n     pub elem: ProjectionElem<'tcx, V>,\n }\n \n-#[derive(Clone, Debug, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, RustcEncodable, RustcDecodable)]\n pub enum ProjectionElem<'tcx, V> {\n     Deref,\n     Field(Field),\n@@ -448,7 +454,7 @@ pub type LvalueElem<'tcx> =\n     ProjectionElem<'tcx,Operand<'tcx>>;\n \n /// Index into the list of fields found in a `VariantDef`\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub struct Field(u32);\n \n impl Field {\n@@ -524,7 +530,7 @@ impl<'tcx> Debug for Lvalue<'tcx> {\n // lvalue). They are intentionally limited to prevent rvalues from\n // being nested in one another.\n \n-#[derive(Clone, PartialEq)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable)]\n pub enum Operand<'tcx> {\n     Consume(Lvalue<'tcx>),\n     Constant(Constant<'tcx>),\n@@ -543,7 +549,7 @@ impl<'tcx> Debug for Operand<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // Rvalues\n \n-#[derive(Clone)]\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n pub enum Rvalue<'tcx> {\n     // x (either a move or copy, depending on type of x)\n     Use(Operand<'tcx>),\n@@ -587,7 +593,7 @@ pub enum Rvalue<'tcx> {\n     InlineAsm(InlineAsm),\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq)]\n+#[derive(Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n pub enum CastKind {\n     Misc,\n \n@@ -605,15 +611,15 @@ pub enum CastKind {\n     Unsize,\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq)]\n+#[derive(Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n pub enum AggregateKind<'tcx> {\n     Vec,\n     Tuple,\n     Adt(AdtDef<'tcx>, usize, &'tcx Substs<'tcx>),\n     Closure(DefId, &'tcx ClosureSubsts<'tcx>),\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n pub enum BinOp {\n     /// The `+` operator (addition)\n     Add,\n@@ -649,7 +655,7 @@ pub enum BinOp {\n     Gt,\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n pub enum UnOp {\n     /// The `!` operator for logical inversion\n     Not,\n@@ -685,14 +691,14 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n // this does not necessarily mean that they are \"==\" in Rust -- in\n // particular one must be wary of `NaN`!\n \n-#[derive(Clone, Debug, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, RustcEncodable, RustcDecodable)]\n pub struct Constant<'tcx> {\n     pub span: Span,\n     pub ty: Ty<'tcx>,\n     pub literal: Literal<'tcx>,\n }\n \n-#[derive(Clone, Debug, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, RustcEncodable, RustcDecodable)]\n pub enum Literal<'tcx> {\n     Item {\n         def_id: DefId,"}, {"sha": "5186c9691334143dc10cdb44e2881c55fc27f5e1", "filename": "src/librustc_metadata/common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5addc31adb558da1613c8f9748ee05688f6eaf91/src%2Flibrustc_metadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5addc31adb558da1613c8f9748ee05688f6eaf91/src%2Flibrustc_metadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcommon.rs?ref=5addc31adb558da1613c8f9748ee05688f6eaf91", "patch": "@@ -120,7 +120,8 @@ enum_from_u32! {\n \n         tag_tree = 0x51,\n \n-        // GAP 0x52\n+        tag_mir = 0x52,\n+\n         tag_table = 0x53,\n         // GAP 0x54, 0x55\n         tag_table_def = 0x56,"}, {"sha": "ad00ef29e5f60e53c41d97d67dce5a13fbde6c48", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5addc31adb558da1613c8f9748ee05688f6eaf91/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5addc31adb558da1613c8f9748ee05688f6eaf91/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=5addc31adb558da1613c8f9748ee05688f6eaf91", "patch": "@@ -22,6 +22,7 @@ use middle::ty::{self, Ty};\n use middle::def_id::{DefId, DefIndex};\n \n use rustc::front::map as hir_map;\n+use rustc::mir::repr::Mir;\n use rustc::util::nodemap::{FnvHashMap, NodeMap, NodeSet};\n \n use std::cell::RefCell;\n@@ -421,6 +422,12 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         decoder::maybe_get_item_ast(&*cdata, tcx, def.index, decode_inlined_item)\n     }\n \n+    fn maybe_get_item_mir(&self, tcx: &ty::ctxt<'tcx>, def: DefId)\n+                          -> Option<Mir<'tcx>> {\n+        let cdata = self.get_crate_data(def.krate);\n+        decoder::maybe_get_item_mir(&*cdata, tcx, def.index)\n+    }\n+\n     fn crates(&self) -> Vec<ast::CrateNum>\n     {\n         let mut result = vec![];\n@@ -473,6 +480,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n                        item_symbols: &RefCell<NodeMap<String>>,\n                        link_meta: &LinkMeta,\n                        reachable: &NodeSet,\n+                       mir_map: &NodeMap<Mir<'tcx>>,\n                        krate: &hir::Crate) -> Vec<u8>\n     {\n         let encode_inlined_item: encoder::EncodeInlinedItem =\n@@ -486,7 +494,8 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n             link_meta: link_meta,\n             cstore: self,\n             encode_inlined_item: encode_inlined_item,\n-            reachable: reachable\n+            reachable: reachable,\n+            mir_map: mir_map,\n         };\n         encoder::encode_metadata(encode_params, krate)\n "}, {"sha": "d1917b29b9f1201178393cc4c0dc8be68f7356a7", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 56, "deletions": 2, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/5addc31adb558da1613c8f9748ee05688f6eaf91/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5addc31adb558da1613c8f9748ee05688f6eaf91/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=5addc31adb558da1613c8f9748ee05688f6eaf91", "patch": "@@ -18,6 +18,7 @@ use cstore::{self, crate_metadata};\n use common::*;\n use encoder::def_to_u64;\n use index;\n+use tls_context;\n use tydecode::TyDecoder;\n \n use rustc::back::svh::Svh;\n@@ -26,14 +27,17 @@ use rustc::util::nodemap::FnvHashMap;\n use rustc_front::hir;\n \n use middle::cstore::{LOCAL_CRATE, FoundAst, InlinedItem, LinkagePreference};\n-use middle::cstore::{DefLike, DlDef, DlField, DlImpl};\n+use middle::cstore::{DefLike, DlDef, DlField, DlImpl, tls};\n use middle::def;\n use middle::def_id::{DefId, DefIndex};\n use middle::lang_items;\n use middle::subst;\n use middle::ty::{ImplContainer, TraitContainer};\n use middle::ty::{self, RegionEscape, Ty};\n \n+use rustc::mir;\n+use rustc::mir::visit::MutVisitor;\n+\n use std::cell::{Cell, RefCell};\n use std::io::prelude::*;\n use std::io;\n@@ -48,7 +52,7 @@ use syntax::parse::token::{IdentInterner, special_idents};\n use syntax::parse::token;\n use syntax::ast;\n use syntax::abi;\n-use syntax::codemap;\n+use syntax::codemap::{self, Span};\n use syntax::print::pprust;\n use syntax::ptr::P;\n \n@@ -783,6 +787,56 @@ pub fn maybe_get_item_ast<'tcx>(cdata: Cmd, tcx: &ty::ctxt<'tcx>, id: DefIndex,\n     }\n }\n \n+pub fn maybe_get_item_mir<'tcx>(cdata: Cmd,\n+                                tcx: &ty::ctxt<'tcx>,\n+                                id: DefIndex)\n+                                -> Option<mir::repr::Mir<'tcx>> {\n+    let item_doc = cdata.lookup_item(id);\n+\n+    return reader::maybe_get_doc(item_doc, tag_mir as usize).map(|mir_doc| {\n+        let dcx = tls_context::DecodingContext {\n+            crate_metadata: cdata,\n+            tcx: tcx,\n+        };\n+        let mut decoder = reader::Decoder::new(mir_doc);\n+\n+        let mut mir = tls::enter_decoding_context(&dcx, &mut decoder, |_, decoder| {\n+            Decodable::decode(decoder).unwrap()\n+        });\n+\n+        let mut def_id_and_span_translator = MirDefIdAndSpanTranslator {\n+            crate_metadata: cdata,\n+            codemap: tcx.sess.codemap(),\n+            last_filemap_index_hint: Cell::new(0),\n+        };\n+\n+        def_id_and_span_translator.visit_mir(&mut mir);\n+\n+        mir\n+    });\n+\n+    struct MirDefIdAndSpanTranslator<'cdata, 'codemap> {\n+        crate_metadata: Cmd<'cdata>,\n+        codemap: &'codemap codemap::CodeMap,\n+        last_filemap_index_hint: Cell<usize>\n+    }\n+\n+    impl<'v, 'cdata, 'codemap> mir::visit::MutVisitor<'v>\n+        for MirDefIdAndSpanTranslator<'cdata, 'codemap>\n+    {\n+        fn visit_def_id(&mut self, def_id: &mut DefId) {\n+            *def_id = translate_def_id(self.crate_metadata, *def_id);\n+        }\n+\n+        fn visit_span(&mut self, span: &mut Span) {\n+            *span = translate_span(self.crate_metadata,\n+                                   self.codemap,\n+                                   &self.last_filemap_index_hint,\n+                                   *span);\n+        }\n+    }\n+}\n+\n fn get_explicit_self(item: rbml::Doc) -> ty::ExplicitSelfCategory {\n     fn get_mutability(ch: u8) -> hir::Mutability {\n         match ch as char {"}, {"sha": "a627eeb68807508c35b7845e4d8dab26e4e931c8", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5addc31adb558da1613c8f9748ee05688f6eaf91/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5addc31adb558da1613c8f9748ee05688f6eaf91/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=5addc31adb558da1613c8f9748ee05688f6eaf91", "patch": "@@ -30,6 +30,7 @@ use middle::ty::{self, Ty};\n use rustc::back::svh::Svh;\n use rustc::front::map::{LinkedPath, PathElem, PathElems};\n use rustc::front::map as ast_map;\n+use rustc::mir::repr::Mir;\n use rustc::session::config;\n use rustc::util::nodemap::{FnvHashMap, NodeMap, NodeSet};\n \n@@ -64,6 +65,7 @@ pub struct EncodeParams<'a, 'tcx: 'a> {\n     pub cstore: &'a cstore::CStore,\n     pub encode_inlined_item: EncodeInlinedItem<'a>,\n     pub reachable: &'a NodeSet,\n+    pub mir_map: &'a NodeMap<Mir<'tcx>>,\n }\n \n pub struct EncodeContext<'a, 'tcx: 'a> {\n@@ -76,6 +78,7 @@ pub struct EncodeContext<'a, 'tcx: 'a> {\n     pub encode_inlined_item: RefCell<EncodeInlinedItem<'a>>,\n     pub type_abbrevs: tyencode::abbrev_map<'tcx>,\n     pub reachable: &'a NodeSet,\n+    pub mir_map: &'a NodeMap<Mir<'tcx>>,\n }\n \n impl<'a, 'tcx> EncodeContext<'a,'tcx> {\n@@ -840,7 +843,24 @@ fn encode_inlined_item(ecx: &EncodeContext,\n                        ii: InlinedItemRef) {\n     let mut eii = ecx.encode_inlined_item.borrow_mut();\n     let eii: &mut EncodeInlinedItem = &mut *eii;\n-    eii(ecx, rbml_w, ii)\n+    eii(ecx, rbml_w, ii);\n+\n+    encode_mir(ecx, rbml_w, ii);\n+}\n+\n+fn encode_mir(ecx: &EncodeContext, rbml_w: &mut Encoder, ii: InlinedItemRef) {\n+    let id = match ii {\n+        InlinedItemRef::Item(item) => item.id,\n+        InlinedItemRef::TraitItem(_, trait_item) => trait_item.id,\n+        InlinedItemRef::ImplItem(_, impl_item) => impl_item.id,\n+        InlinedItemRef::Foreign(foreign_item) => foreign_item.id\n+    };\n+\n+    if let Some(mir) = ecx.mir_map.get(&id) {\n+        rbml_w.start_tag(tag_mir as usize);\n+        Encodable::encode(mir, rbml_w).unwrap();\n+        rbml_w.end_tag();\n+    }\n }\n \n const FN_FAMILY: char = 'f';\n@@ -1884,6 +1904,7 @@ pub fn encode_metadata(parms: EncodeParams, krate: &hir::Crate) -> Vec<u8> {\n         encode_inlined_item,\n         link_meta,\n         reachable,\n+        mir_map,\n         ..\n     } = parms;\n     let ecx = EncodeContext {\n@@ -1896,6 +1917,7 @@ pub fn encode_metadata(parms: EncodeParams, krate: &hir::Crate) -> Vec<u8> {\n         encode_inlined_item: RefCell::new(encode_inlined_item),\n         type_abbrevs: RefCell::new(FnvHashMap()),\n         reachable: reachable,\n+        mir_map: mir_map,\n     };\n \n     let mut wr = Cursor::new(Vec::new());"}, {"sha": "838a5435d4feee8b4a9c0e42b15e737a7cefc405", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5addc31adb558da1613c8f9748ee05688f6eaf91/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5addc31adb558da1613c8f9748ee05688f6eaf91/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=5addc31adb558da1613c8f9748ee05688f6eaf91", "patch": "@@ -2760,7 +2760,11 @@ fn register_method(ccx: &CrateContext,\n     }\n }\n \n-pub fn write_metadata(cx: &SharedCrateContext, krate: &hir::Crate, reachable: &NodeSet) -> Vec<u8> {\n+pub fn write_metadata<'a, 'tcx>(cx: &SharedCrateContext<'a, 'tcx>,\n+                                krate: &hir::Crate,\n+                                reachable: &NodeSet,\n+                                mir_map: &MirMap<'tcx>)\n+                                -> Vec<u8> {\n     use flate;\n \n     let any_library = cx.sess()\n@@ -2773,9 +2777,13 @@ pub fn write_metadata(cx: &SharedCrateContext, krate: &hir::Crate, reachable: &N\n     }\n \n     let cstore = &cx.tcx().sess.cstore;\n-    let metadata = cstore.encode_metadata(\n-        cx.tcx(), cx.export_map(), cx.item_symbols(), cx.link_meta(), reachable,\n-        krate);\n+    let metadata = cstore.encode_metadata(cx.tcx(),\n+                                          cx.export_map(),\n+                                          cx.item_symbols(),\n+                                          cx.link_meta(),\n+                                          reachable,\n+                                          mir_map,\n+                                          krate);\n     let mut compressed = cstore.metadata_encoding_version().to_vec();\n     compressed.extend_from_slice(&flate::deflate_bytes(&metadata));\n \n@@ -3045,7 +3053,7 @@ pub fn trans_crate<'tcx>(tcx: &ty::ctxt<'tcx>,\n     let reachable_symbol_ids = filter_reachable_ids(&shared_ccx);\n \n     // Translate the metadata.\n-    let metadata = write_metadata(&shared_ccx, krate, &reachable_symbol_ids);\n+    let metadata = write_metadata(&shared_ccx, krate, &reachable_symbol_ids, mir_map);\n \n     if shared_ccx.sess().trans_stats() {\n         let stats = shared_ccx.stats();"}]}