{"sha": "84432627815ced7befde505d64c615abaa938db8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NDMyNjI3ODE1Y2VkN2JlZmRlNTA1ZDY0YzYxNWFiYWE5MzhkYjg=", "commit": {"author": {"name": "Ivan Veselov", "email": "veselov@gmail.com", "date": "2019-05-22T19:51:36Z"}, "committer": {"name": "Ivan Veselov", "email": "veselov@gmail.com", "date": "2019-05-23T21:59:26Z"}, "message": "Use structopt for rustfmt-format-diff arguments parsing", "tree": {"sha": "50a2e37a2c1c638c24fcd2be51f0ba8ad8aa509d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50a2e37a2c1c638c24fcd2be51f0ba8ad8aa509d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84432627815ced7befde505d64c615abaa938db8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84432627815ced7befde505d64c615abaa938db8", "html_url": "https://github.com/rust-lang/rust/commit/84432627815ced7befde505d64c615abaa938db8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84432627815ced7befde505d64c615abaa938db8/comments", "author": {"login": "sphynx", "id": 26378, "node_id": "MDQ6VXNlcjI2Mzc4", "avatar_url": "https://avatars.githubusercontent.com/u/26378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sphynx", "html_url": "https://github.com/sphynx", "followers_url": "https://api.github.com/users/sphynx/followers", "following_url": "https://api.github.com/users/sphynx/following{/other_user}", "gists_url": "https://api.github.com/users/sphynx/gists{/gist_id}", "starred_url": "https://api.github.com/users/sphynx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sphynx/subscriptions", "organizations_url": "https://api.github.com/users/sphynx/orgs", "repos_url": "https://api.github.com/users/sphynx/repos", "events_url": "https://api.github.com/users/sphynx/events{/privacy}", "received_events_url": "https://api.github.com/users/sphynx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sphynx", "id": 26378, "node_id": "MDQ6VXNlcjI2Mzc4", "avatar_url": "https://avatars.githubusercontent.com/u/26378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sphynx", "html_url": "https://github.com/sphynx", "followers_url": "https://api.github.com/users/sphynx/followers", "following_url": "https://api.github.com/users/sphynx/following{/other_user}", "gists_url": "https://api.github.com/users/sphynx/gists{/gist_id}", "starred_url": "https://api.github.com/users/sphynx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sphynx/subscriptions", "organizations_url": "https://api.github.com/users/sphynx/orgs", "repos_url": "https://api.github.com/users/sphynx/repos", "events_url": "https://api.github.com/users/sphynx/events{/privacy}", "received_events_url": "https://api.github.com/users/sphynx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0664662b49c1ed3e99391c51132ddf01cd87c79", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0664662b49c1ed3e99391c51132ddf01cd87c79", "html_url": "https://github.com/rust-lang/rust/commit/e0664662b49c1ed3e99391c51132ddf01cd87c79"}], "stats": {"total": 134, "additions": 95, "deletions": 39}, "files": [{"sha": "80815b5f1d9bfda41150d48792d3cd638b28f6ef", "filename": "src/format-diff/main.rs", "status": "modified", "additions": 95, "deletions": 39, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/84432627815ced7befde505d64c615abaa938db8/src%2Fformat-diff%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84432627815ced7befde505d64c615abaa938db8/src%2Fformat-diff%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformat-diff%2Fmain.rs?ref=84432627815ced7befde505d64c615abaa938db8", "patch": "@@ -7,7 +7,6 @@\n use env_logger;\n #[macro_use]\n extern crate failure;\n-use getopts;\n #[macro_use]\n extern crate log;\n use regex;\n@@ -16,10 +15,13 @@ use serde_json as json;\n \n use std::collections::HashSet;\n use std::io::{self, BufRead};\n-use std::{env, process};\n+use std::process;\n \n use regex::Regex;\n \n+use structopt::clap::AppSettings;\n+use structopt::StructOpt;\n+\n /// The default pattern of files to format.\n ///\n /// We only want to format rust files by default.\n@@ -53,26 +55,40 @@ impl From<io::Error> for FormatDiffError {\n     }\n }\n \n-fn main() {\n-    env_logger::init();\n+#[derive(StructOpt, Debug)]\n+#[structopt(\n+    name = \"rustfmt-format-diff\",\n+    author = \"\",\n+    about = \"\",\n+    raw(setting = \"AppSettings::DisableVersion\"),\n+    raw(setting = \"AppSettings::NextLineHelp\")\n+)]\n+pub struct Opts {\n+    /// Skip the smallest prefix containing NUMBER slashes\n+    #[structopt(\n+        short = \"p\",\n+        long = \"skip-prefix\",\n+        value_name = \"NUMBER\",\n+        default_value = \"0\"\n+    )]\n+    skip_prefix: u32,\n \n-    let mut opts = getopts::Options::new();\n-    opts.optflag(\"h\", \"help\", \"show this message\");\n-    opts.optopt(\n-        \"p\",\n-        \"skip-prefix\",\n-        \"skip the smallest prefix containing NUMBER slashes\",\n-        \"NUMBER\",\n-    );\n-    opts.optopt(\n-        \"f\",\n-        \"filter\",\n-        \"custom pattern selecting file paths to reformat\",\n-        \"PATTERN\",\n-    );\n+    /// Custom pattern selecting file paths to reformat\n+    #[structopt(\n+        short = \"f\",\n+        long = \"filter\",\n+        value_name = \"PATTERN\",\n+        raw(default_value = \"DEFAULT_PATTERN\")\n+    )]\n+    filter: String,\n+}\n \n-    if let Err(e) = run(&opts) {\n-        println!(\"{}\", opts.usage(&e.to_string()));\n+fn main() {\n+    env_logger::init();\n+    let opts = Opts::from_args();\n+    if let Err(e) = run(opts) {\n+        println!(\"{}\", e);\n+        Opts::clap().print_help().expect(\"cannot write to stdout\");\n         process::exit(1);\n     }\n }\n@@ -83,25 +99,8 @@ struct Range {\n     range: [u32; 2],\n }\n \n-fn run(opts: &getopts::Options) -> Result<(), FormatDiffError> {\n-    let matches = opts.parse(env::args().skip(1))?;\n-\n-    if matches.opt_present(\"h\") {\n-        println!(\"{}\", opts.usage(\"usage: \"));\n-        return Ok(());\n-    }\n-\n-    let filter = matches\n-        .opt_str(\"f\")\n-        .unwrap_or_else(|| DEFAULT_PATTERN.to_owned());\n-\n-    let skip_prefix = matches\n-        .opt_str(\"p\")\n-        .and_then(|p| p.parse::<u32>().ok())\n-        .unwrap_or(0);\n-\n-    let (files, ranges) = scan_diff(io::stdin(), skip_prefix, &filter)?;\n-\n+fn run(opts: Opts) -> Result<(), FormatDiffError> {\n+    let (files, ranges) = scan_diff(io::stdin(), opts.skip_prefix, &opts.filter)?;\n     run_rustfmt(&files, &ranges)\n }\n \n@@ -238,3 +237,60 @@ fn scan_simple_git_diff() {\n         ]\n     );\n }\n+\n+#[cfg(test)]\n+mod cmd_line_tests {\n+    use super::*;\n+\n+    #[test]\n+    fn default_options() {\n+        let empty: Vec<String> = vec![];\n+        let o = Opts::from_iter(&empty);\n+        assert_eq!(DEFAULT_PATTERN, o.filter);\n+        assert_eq!(0, o.skip_prefix);\n+    }\n+\n+    #[test]\n+    fn good_options() {\n+        let o = Opts::from_iter(&[\"test\", \"-p\", \"10\", \"-f\", r\".*\\.hs\"]);\n+        assert_eq!(r\".*\\.hs\", o.filter);\n+        assert_eq!(10, o.skip_prefix);\n+    }\n+\n+    #[test]\n+    fn unexpected_option() {\n+        assert!(\n+            Opts::clap()\n+                .get_matches_from_safe(&[\"test\", \"unexpected\"])\n+                .is_err()\n+        );\n+    }\n+\n+    #[test]\n+    fn unexpected_flag() {\n+        assert!(\n+            Opts::clap()\n+                .get_matches_from_safe(&[\"test\", \"--flag\"])\n+                .is_err()\n+        );\n+    }\n+\n+    #[test]\n+    fn overridden_option() {\n+        assert!(\n+            Opts::clap()\n+                .get_matches_from_safe(&[\"test\", \"-p\", \"10\", \"-p\", \"20\"])\n+                .is_err()\n+        );\n+    }\n+\n+    #[test]\n+    fn negative_filter() {\n+        assert!(\n+            Opts::clap()\n+                .get_matches_from_safe(&[\"test\", \"-p\", \"-1\"])\n+                .is_err()\n+        );\n+    }\n+\n+}"}]}