{"sha": "0861ac061ef5c8b5d7ed2a95ef30f4a17710229d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NjFhYzA2MWVmNWM4YjVkN2VkMmE5NWVmMzBmNGExNzcxMDIyOWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-22T11:08:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-22T11:08:18Z"}, "message": "Cleanup errors", "tree": {"sha": "f6422fb3ac2d657500767b4fe6283e00e80e0631", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6422fb3ac2d657500767b4fe6283e00e80e0631"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0861ac061ef5c8b5d7ed2a95ef30f4a17710229d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0861ac061ef5c8b5d7ed2a95ef30f4a17710229d", "html_url": "https://github.com/rust-lang/rust/commit/0861ac061ef5c8b5d7ed2a95ef30f4a17710229d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0861ac061ef5c8b5d7ed2a95ef30f4a17710229d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c48fa087b6cc79ebfd81af9daf4a07d8019fd67", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c48fa087b6cc79ebfd81af9daf4a07d8019fd67", "html_url": "https://github.com/rust-lang/rust/commit/2c48fa087b6cc79ebfd81af9daf4a07d8019fd67"}], "stats": {"total": 50, "additions": 29, "deletions": 21}, "files": [{"sha": "777e634423e741dfc7361ed8d21faa49adf4605c", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0861ac061ef5c8b5d7ed2a95ef30f4a17710229d/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0861ac061ef5c8b5d7ed2a95ef30f4a17710229d/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=0861ac061ef5c8b5d7ed2a95ef30f4a17710229d", "patch": "@@ -6,14 +6,14 @@\n //! actual IO. See `vfs` and `project_model` in the `ra_lsp_server` crate for how\n //! actual IO is done and lowered to input.\n \n-use rustc_hash::FxHashMap;\n+use std::{fmt, str::FromStr};\n \n use ra_cfg::CfgOptions;\n use ra_syntax::SmolStr;\n+use rustc_hash::FxHashMap;\n use rustc_hash::FxHashSet;\n \n use crate::{RelativePath, RelativePathBuf};\n-use std::str::FromStr;\n \n /// `FileId` is an integer which uniquely identifies a file. File paths are\n /// messy and system-dependent, so most of the code should work directly with\n@@ -98,22 +98,6 @@ pub enum Edition {\n     Edition2015,\n }\n \n-#[derive(Debug)]\n-pub struct ParseEditionError {\n-    pub msg: String,\n-}\n-\n-impl FromStr for Edition {\n-    type Err = ParseEditionError;\n-    fn from_str(s: &str) -> Result<Self, Self::Err> {\n-        match s {\n-            \"2015\" => Ok(Edition::Edition2015),\n-            \"2018\" => Ok(Edition::Edition2018),\n-            _ => Err(ParseEditionError { msg: format!(\"unknown edition: {}\", s) }),\n-        }\n-    }\n-}\n-\n #[derive(Default, Debug, Clone, PartialEq, Eq)]\n pub struct Env {\n     entries: FxHashMap<String, String>,\n@@ -247,6 +231,32 @@ impl CrateGraph {\n     }\n }\n \n+#[derive(Debug)]\n+pub struct ParseEditionError {\n+    invalid_input: String,\n+}\n+\n+impl FromStr for Edition {\n+    type Err = ParseEditionError;\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        let res = match s {\n+            \"2015\" => Edition::Edition2015,\n+            \"2018\" => Edition::Edition2018,\n+            _ => Err(ParseEditionError { invalid_input: s.to_string() })?,\n+        };\n+        Ok(res)\n+    }\n+}\n+\n+impl fmt::Display for ParseEditionError {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"invalid edition: {:?}\", self.invalid_input)\n+    }\n+}\n+\n+impl std::error::Error for ParseEditionError {}\n+\n #[cfg(test)]\n mod tests {\n     use super::{CfgOptions, CrateGraph, Edition::Edition2018, Env, FileId, SmolStr};"}, {"sha": "c128e608d80c22e119fbf5fd98881f493fad8a65", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0861ac061ef5c8b5d7ed2a95ef30f4a17710229d/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0861ac061ef5c8b5d7ed2a95ef30f4a17710229d/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=0861ac061ef5c8b5d7ed2a95ef30f4a17710229d", "patch": "@@ -1,7 +1,6 @@\n //! FIXME: write short doc here\n \n use std::path::{Path, PathBuf};\n-use std::str::FromStr;\n \n use cargo_metadata::{CargoOpt, MetadataCommand};\n use ra_arena::{impl_arena_id, Arena, RawId};\n@@ -143,8 +142,7 @@ impl CargoWorkspace {\n         for meta_pkg in meta.packages {\n             let cargo_metadata::Package { id, edition, name, manifest_path, .. } = meta_pkg;\n             let is_member = ws_members.contains(&id);\n-            let edition = Edition::from_str(&edition)\n-                .map_err(|e| (format!(\"metadata for package {} failed: {}\", &name, e.msg)))?;\n+            let edition = edition.parse::<Edition>()?;\n             let pkg = packages.alloc(PackageData {\n                 name,\n                 manifest: manifest_path,"}]}