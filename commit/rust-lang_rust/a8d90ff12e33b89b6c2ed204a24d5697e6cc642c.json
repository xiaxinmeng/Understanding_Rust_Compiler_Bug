{"sha": "a8d90ff12e33b89b6c2ed204a24d5697e6cc642c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZDkwZmYxMmUzM2I4OWI2YzJlZDIwNGEyNGQ1Njk3ZTZjYzY0MmM=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-11-07T06:25:54Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-11-07T06:25:54Z"}, "message": "Update for changes in rustc.", "tree": {"sha": "e4f6d1045db4b8fa72c68a0ebcc42105c57e73cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4f6d1045db4b8fa72c68a0ebcc42105c57e73cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8d90ff12e33b89b6c2ed204a24d5697e6cc642c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8d90ff12e33b89b6c2ed204a24d5697e6cc642c", "html_url": "https://github.com/rust-lang/rust/commit/a8d90ff12e33b89b6c2ed204a24d5697e6cc642c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8d90ff12e33b89b6c2ed204a24d5697e6cc642c/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33b1676bdab6c0a8c36c57c0f4dc3c9586b4f90b", "url": "https://api.github.com/repos/rust-lang/rust/commits/33b1676bdab6c0a8c36c57c0f4dc3c9586b4f90b", "html_url": "https://github.com/rust-lang/rust/commit/33b1676bdab6c0a8c36c57c0f4dc3c9586b4f90b"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "f14baa2446c0b2cb34e5c3a2088c98a4ca8c6837", "filename": "src/interpreter/cast.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a8d90ff12e33b89b6c2ed204a24d5697e6cc642c/src%2Finterpreter%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d90ff12e33b89b6c2ed204a24d5697e6cc642c/src%2Finterpreter%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fcast.rs?ref=a8d90ff12e33b89b6c2ed204a24d5697e6cc642c", "patch": "@@ -92,21 +92,24 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     }\n \n     fn cast_ptr(&self, ptr: Pointer, ty: Ty<'tcx>) -> EvalResult<'tcx, PrimVal> {\n-        use primval::PrimValKind::*;\n         use rustc::ty::TypeVariants::*;\n         match ty.sty {\n             TyRef(..) | TyRawPtr(_) => Ok(PrimVal::from_ptr(ptr)),\n             TyFnPtr(_) => Ok(PrimVal::from_fn_ptr(ptr)),\n \n-            TyInt(IntTy::I8)  => Ok(PrimVal::new(ptr.to_int()? as u64, I8)),\n-            TyInt(IntTy::I16) => Ok(PrimVal::new(ptr.to_int()? as u64, I16)),\n-            TyInt(IntTy::I32) => Ok(PrimVal::new(ptr.to_int()? as u64, I32)),\n-            TyInt(IntTy::I64) => Ok(PrimVal::new(ptr.to_int()? as u64, I64)),\n-\n-            TyUint(UintTy::U8)  => Ok(PrimVal::new(ptr.to_int()? as u64, U8)),\n-            TyUint(UintTy::U16) => Ok(PrimVal::new(ptr.to_int()? as u64, U16)),\n-            TyUint(UintTy::U32) => Ok(PrimVal::new(ptr.to_int()? as u64, U32)),\n-            TyUint(UintTy::U64) => Ok(PrimVal::new(ptr.to_int()? as u64, U64)),\n+            TyInt(IntTy::I8) |\n+            TyInt(IntTy::I16) |\n+            TyInt(IntTy::I32) |\n+            TyInt(IntTy::I64) |\n+            TyInt(IntTy::Is) |\n+            TyUint(UintTy::U8) |\n+            TyUint(UintTy::U16) |\n+            TyUint(UintTy::U32) |\n+            TyUint(UintTy::U64) |\n+            TyUint(UintTy::Us) => {\n+                let val = PrimVal::from_ptr(ptr);\n+                self.transmute_primval(val, ty)\n+            }\n \n             _ => Err(EvalError::Unimplemented(format!(\"ptr to {:?} cast\", ty))),\n         }"}, {"sha": "b15f8b2d2d8a4dcb84133dbc87ff3b700e7b7767", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8d90ff12e33b89b6c2ed204a24d5697e6cc642c/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d90ff12e33b89b6c2ed204a24d5697e6cc642c/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=a8d90ff12e33b89b6c2ed204a24d5697e6cc642c", "patch": "@@ -1699,13 +1699,13 @@ pub fn run_mir_passes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut passes = ::rustc::mir::transform::Passes::new();\n     passes.push_hook(Box::new(::rustc_mir::transform::dump_mir::DumpMir));\n     passes.push_pass(Box::new(::rustc_mir::transform::no_landing_pads::NoLandingPads));\n-    passes.push_pass(Box::new(::rustc_mir::transform::simplify_cfg::SimplifyCfg::new(\"no-landing-pads\")));\n+    passes.push_pass(Box::new(::rustc_mir::transform::simplify::SimplifyCfg::new(\"no-landing-pads\")));\n \n     passes.push_pass(Box::new(::rustc_mir::transform::erase_regions::EraseRegions));\n \n     passes.push_pass(Box::new(::rustc_borrowck::ElaborateDrops));\n     passes.push_pass(Box::new(::rustc_mir::transform::no_landing_pads::NoLandingPads));\n-    passes.push_pass(Box::new(::rustc_mir::transform::simplify_cfg::SimplifyCfg::new(\"elaborate-drops\")));\n+    passes.push_pass(Box::new(::rustc_mir::transform::simplify::SimplifyCfg::new(\"elaborate-drops\")));\n     passes.push_pass(Box::new(::rustc_mir::transform::dump_mir::Marker(\"PreMiri\")));\n \n     passes.run_passes(tcx);"}]}