{"sha": "af42d37547c15732a7c9d358c0a14967aef75e96", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNDJkMzc1NDdjMTU3MzJhN2M5ZDM1OGMwYTE0OTY3YWVmNzVlOTY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-04-01T20:55:49Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-04-19T18:53:32Z"}, "message": "rustllvm: Fix RustWrapper.cpp", "tree": {"sha": "ac3c6c4a5c6920c60100e5d0966295dde58b7ed9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac3c6c4a5c6920c60100e5d0966295dde58b7ed9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af42d37547c15732a7c9d358c0a14967aef75e96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af42d37547c15732a7c9d358c0a14967aef75e96", "html_url": "https://github.com/rust-lang/rust/commit/af42d37547c15732a7c9d358c0a14967aef75e96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af42d37547c15732a7c9d358c0a14967aef75e96/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f903ae9e72ec02539373da22fd4d025422af7554", "url": "https://api.github.com/repos/rust-lang/rust/commits/f903ae9e72ec02539373da22fd4d025422af7554", "html_url": "https://github.com/rust-lang/rust/commit/f903ae9e72ec02539373da22fd4d025422af7554"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "7c22cc6cc2538f7c2c541bf9ca3cf50a8feea4bc", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/af42d37547c15732a7c9d358c0a14967aef75e96/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/af42d37547c15732a7c9d358c0a14967aef75e96/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=af42d37547c15732a7c9d358c0a14967aef75e96", "patch": "@@ -15,6 +15,8 @@\n //\n //===----------------------------------------------------------------------===\n \n+#include \"llvm/IR/InlineAsm.h\"\n+#include \"llvm/IR/LLVMContext.h\"\n #include \"llvm/Linker.h\"\n #include \"llvm/PassManager.h\"\n #include \"llvm/IR/InlineAsm.h\"\n@@ -152,7 +154,9 @@ class RustMCJITMemoryManager : public JITMemoryManager {\n                                        unsigned SectionID);\n \n   virtual uint8_t *allocateDataSection(uintptr_t Size, unsigned Alignment,\n-                                       unsigned SectionID);\n+                                       unsigned SectionID, bool isReadOnly);\n+\n+  virtual bool applyPermissions(std::string *Str);\n \n   virtual void *getPointerToNamedFunction(const std::string &Name,\n                                           bool AbortOnFailure = true);\n@@ -240,18 +244,24 @@ bool RustMCJITMemoryManager::loadCrate(const char* file, std::string* err) {\n }\n \n uint8_t *RustMCJITMemoryManager::allocateDataSection(uintptr_t Size,\n-                                                    unsigned Alignment,\n-                                                    unsigned SectionID) {\n+                                                     unsigned Alignment,\n+                                                     unsigned SectionID,\n+                                                     bool isReadOnly) {\n   if (!Alignment)\n     Alignment = 16;\n   uint8_t *Addr = (uint8_t*)calloc((Size + Alignment - 1)/Alignment, Alignment);\n   AllocatedDataMem.push_back(sys::MemoryBlock(Addr, Size));\n   return Addr;\n }\n \n+bool RustMCJITMemoryManager::applyPermissions(std::string *Str) {\n+    // Empty.\n+    return true;\n+}\n+\n uint8_t *RustMCJITMemoryManager::allocateCodeSection(uintptr_t Size,\n-                                                    unsigned Alignment,\n-                                                    unsigned SectionID) {\n+                                                     unsigned Alignment,\n+                                                     unsigned SectionID) {\n   if (!Alignment)\n     Alignment = 16;\n   unsigned NeedAllocate = Alignment * ((Size + Alignment - 1)/Alignment + 1);\n@@ -485,13 +495,12 @@ LLVMRustWriteOutputFile(LLVMPassManagerRef PMR,\n }\n \n extern \"C\" LLVMModuleRef LLVMRustParseAssemblyFile(const char *Filename) {\n-\n   SMDiagnostic d;\n   Module *m = ParseAssemblyFile(Filename, d, getGlobalContext());\n   if (m) {\n     return wrap(m);\n   } else {\n-    LLVMRustError = d.getMessage().data();\n+    LLVMRustError = d.getMessage().str().c_str();\n     return NULL;\n   }\n }"}]}