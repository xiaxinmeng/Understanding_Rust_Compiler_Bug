{"sha": "07ee86a6fd6ddf0750bf1f1e13b608e92a4e694f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZWU4NmE2ZmQ2ZGRmMDc1MGJmMWYxZTEzYjYwOGU5MmE0ZTY5NGY=", "commit": {"author": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-07-23T04:10:56Z"}, "committer": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-08-25T02:29:41Z"}, "message": "Normalize only after failure", "tree": {"sha": "7cd2c6e3e7c552fa986e651a2596d80bbada9f19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cd2c6e3e7c552fa986e651a2596d80bbada9f19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07ee86a6fd6ddf0750bf1f1e13b608e92a4e694f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07ee86a6fd6ddf0750bf1f1e13b608e92a4e694f", "html_url": "https://github.com/rust-lang/rust/commit/07ee86a6fd6ddf0750bf1f1e13b608e92a4e694f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07ee86a6fd6ddf0750bf1f1e13b608e92a4e694f/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d7707f3c4f72e6eb334d897354beca692b265d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d7707f3c4f72e6eb334d897354beca692b265d1", "html_url": "https://github.com/rust-lang/rust/commit/8d7707f3c4f72e6eb334d897354beca692b265d1"}], "stats": {"total": 76, "additions": 40, "deletions": 36}, "files": [{"sha": "1e0a2b0c42177af61fadb59b3979f3797048fe39", "filename": "compiler/rustc_mir/src/borrow_check/type_check/input_output.rs", "status": "modified", "additions": 40, "deletions": 36, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/07ee86a6fd6ddf0750bf1f1e13b608e92a4e694f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ee86a6fd6ddf0750bf1f1e13b608e92a4e694f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Finput_output.rs?ref=07ee86a6fd6ddf0750bf1f1e13b608e92a4e694f", "patch": "@@ -82,33 +82,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             let local = Local::new(argument_index + 1);\n \n             let mir_input_ty = body.local_decls[local].ty;\n-            // FIXME(jackh726): This is a hack. It's somewhat like\n-            // `rustc_traits::normalize_after_erasing_regions`. Ideally, we'd\n-            // like to normalize *before* inserting into `local_decls`, but I\n-            // couldn't figure out where the heck that was.\n-            let mir_input_ty = match self\n-                .infcx\n-                .at(&ObligationCause::dummy(), ty::ParamEnv::empty())\n-                .normalize(mir_input_ty)\n-            {\n-                Ok(n) => {\n-                    debug!(\"equate_inputs_and_outputs: {:?}\", n);\n-                    if n.obligations.iter().all(|o| {\n-                        matches!(\n-                            o.predicate.kind().skip_binder(),\n-                            ty::PredicateKind::RegionOutlives(_)\n-                        )\n-                    }) {\n-                        n.value\n-                    } else {\n-                        mir_input_ty\n-                    }\n-                }\n-                Err(_) => {\n-                    debug!(\"equate_inputs_and_outputs: NoSolution\");\n-                    mir_input_ty\n-                }\n-            };\n             let mir_input_span = body.local_decls[local].source_info.span;\n             self.equate_normalized_input_or_output(\n                 normalized_input_ty,\n@@ -191,17 +164,48 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     fn equate_normalized_input_or_output(&mut self, a: Ty<'tcx>, b: Ty<'tcx>, span: Span) {\n         debug!(\"equate_normalized_input_or_output(a={:?}, b={:?})\", a, b);\n \n-        if let Err(terr) =\n+        if let Err(_) =\n             self.eq_types(a, b, Locations::All(span), ConstraintCategory::BoringNoLocation)\n         {\n-            span_mirbug!(\n-                self,\n-                Location::START,\n-                \"equate_normalized_input_or_output: `{:?}=={:?}` failed with `{:?}`\",\n-                a,\n-                b,\n-                terr\n-            );\n+            // FIXME(jackh726): This is a hack. It's somewhat like\n+            // `rustc_traits::normalize_after_erasing_regions`. Ideally, we'd\n+            // like to normalize *before* inserting into `local_decls`, but I\n+            // couldn't figure out where the heck that was.\n+            let b = match self\n+                .infcx\n+                .at(&ObligationCause::dummy(), ty::ParamEnv::empty())\n+                .normalize(b)\n+            {\n+                Ok(n) => {\n+                    debug!(\"equate_inputs_and_outputs: {:?}\", n);\n+                    if n.obligations.iter().all(|o| {\n+                        matches!(\n+                            o.predicate.kind().skip_binder(),\n+                            ty::PredicateKind::RegionOutlives(_)\n+                        )\n+                    }) {\n+                        n.value\n+                    } else {\n+                        b\n+                    }\n+                }\n+                Err(_) => {\n+                    debug!(\"equate_inputs_and_outputs: NoSolution\");\n+                    b\n+                }\n+            };\n+            if let Err(terr) =\n+                self.eq_types(a, b, Locations::All(span), ConstraintCategory::BoringNoLocation)\n+            {\n+                span_mirbug!(\n+                    self,\n+                    Location::START,\n+                    \"equate_normalized_input_or_output: `{:?}=={:?}` failed with `{:?}`\",\n+                    a,\n+                    b,\n+                    terr\n+                );\n+            }\n         }\n     }\n }"}]}