{"sha": "8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYWY2ZWVlMmZlZTJmZmQ2ZDhlZWJhMTU0MjkxNmZjYmQ3YzZkYWQ=", "commit": {"author": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2016-03-28T20:22:14Z"}, "committer": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2016-03-31T20:04:23Z"}, "message": "librustc_mir: use bug!(), span_bug!()", "tree": {"sha": "a79163b62e32162e18c6ae9d36a3cf9246c6e0c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a79163b62e32162e18c6ae9d36a3cf9246c6e0c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad", "html_url": "https://github.com/rust-lang/rust/commit/8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad/comments", "author": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc8159b0ed63eb29254528fe9f078e3cec087b72", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc8159b0ed63eb29254528fe9f078e3cec087b72", "html_url": "https://github.com/rust-lang/rust/commit/cc8159b0ed63eb29254528fe9f078e3cec087b72"}], "stats": {"total": 147, "additions": 75, "deletions": 72}, "files": [{"sha": "d97245a5fc21bc6efb853c30e00198f84c58a5cd", "filename": "src/librustc_mir/build/expr/as_constant.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs?ref=8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad", "patch": "@@ -33,9 +33,10 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n             ExprKind::Literal { literal } =>\n                 Constant { span: span, ty: ty, literal: literal },\n             _ =>\n-                this.hir.span_bug(\n+                span_bug!(\n                     span,\n-                    &format!(\"expression is not a valid constant {:?}\", kind)),\n+                    \"expression is not a valid constant {:?}\",\n+                    kind),\n         }\n     }\n }"}, {"sha": "a2f7d2c9d725fdac9ae2ef1d2eb45ec5068019c4", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad", "patch": "@@ -38,7 +38,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         let temp_lifetime = match expr.temp_lifetime {\n             Some(t) => t,\n             None => {\n-                this.hir.span_bug(expr.span, \"no temp_lifetime for expr\");\n+                span_bug!(expr.span, \"no temp_lifetime for expr\");\n             }\n         };\n         this.schedule_drop(expr.span, temp_lifetime, &temp, expr_ty);"}, {"sha": "cabf5c955466c784db03f1a1393f581886594f16", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad", "patch": "@@ -162,10 +162,10 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         unpack!(block = self.simplify_candidate(block, &mut candidate));\n \n         if !candidate.match_pairs.is_empty() {\n-            self.hir.span_bug(candidate.match_pairs[0].pattern.span,\n-                              &format!(\"match pairs {:?} remaining after simplifying \\\n-                                        irrefutable pattern\",\n-                                       candidate.match_pairs));\n+            span_bug!(candidate.match_pairs[0].pattern.span,\n+                      \"match pairs {:?} remaining after simplifying \\\n+                       irrefutable pattern\",\n+                      candidate.match_pairs);\n         }\n \n         // now apply the bindings, which will also declare the variables"}, {"sha": "f70d4321a49b7669442abb9cfc73b52a76a48efa", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad", "patch": "@@ -521,8 +521,9 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n     }\n \n     fn error_simplifyable<'pat>(&mut self, match_pair: &MatchPair<'pat, 'tcx>) -> ! {\n-        self.hir.span_bug(match_pair.pattern.span,\n-                          &format!(\"simplifyable pattern found: {:?}\", match_pair.pattern))\n+        span_bug!(match_pair.pattern.span,\n+                  \"simplifyable pattern found: {:?}\",\n+                  match_pair.pattern)\n     }\n }\n "}, {"sha": "51069c3885704e11320dd42e77a6a1528bcc4eff", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad", "patch": "@@ -218,8 +218,8 @@ pub fn construct<'a,'tcx>(hir: Cx<'a,'tcx>,\n                    .enumerate()\n                    .all(|(index, block)| {\n                        if block.terminator.is_none() {\n-                           panic!(\"no terminator on block {:?} in fn {:?}\",\n-                               index, fn_id)\n+                           bug!(\"no terminator on block {:?} in fn {:?}\",\n+                                index, fn_id)\n                        }\n                        true\n                    }));"}, {"sha": "bda9cf058f6e966420dc7663f6d3864b4261070f", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad", "patch": "@@ -306,7 +306,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         debug!(\"exit_scope(extent={:?}, block={:?}, target={:?})\", extent, block, target);\n         let scope_count = 1 + self.scopes.iter().rev().position(|scope| scope.extent == extent)\n                                                       .unwrap_or_else(||{\n-            self.hir.span_bug(span, &format!(\"extent {:?} does not enclose\", extent))\n+            span_bug!(span, \"extent {:?} does not enclose\", extent)\n         });\n \n         let tmp = self.get_unit_temp();\n@@ -345,7 +345,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                            span: Span,\n                            label: Option<CodeExtent>)\n                            -> &mut LoopScope {\n-        let Builder { ref mut loop_scopes, ref mut hir, .. } = *self;\n+        let loop_scopes = &mut self.loop_scopes;\n         match label {\n             None => {\n                 // no label? return the innermost loop scope\n@@ -358,7 +358,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                            .filter(|loop_scope| loop_scope.extent == label)\n                            .next()\n             }\n-        }.unwrap_or_else(|| hir.span_bug(span, \"no enclosing loop scope found?\"))\n+        }.unwrap_or_else(|| span_bug!(span, \"no enclosing loop scope found?\"))\n     }\n \n     pub fn innermost_scope_id(&self) -> ScopeId {\n@@ -410,8 +410,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 scope.invalidate_cache()\n             }\n         }\n-        self.hir.span_bug(span,\n-                          &format!(\"extent {:?} not in scope to drop {:?}\", extent, lvalue));\n+        span_bug!(span, \"extent {:?} not in scope to drop {:?}\", extent, lvalue);\n     }\n \n     /// Schedule dropping of a not-yet-fully-initialised box.\n@@ -444,8 +443,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 scope.invalidate_cache();\n             }\n         }\n-        self.hir.span_bug(span,\n-                          &format!(\"extent {:?} not in scope to free {:?}\", extent, value));\n+        span_bug!(span, \"extent {:?} not in scope to free {:?}\", extent, value);\n     }\n \n     // Other\n@@ -531,7 +529,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         let tup_ty = if let ty::TyRef(_, tyandmut) = ref_ty.sty {\n             tyandmut.ty\n         } else {\n-            self.hir.span_bug(span, &format!(\"unexpected panic_bound_check type: {:?}\", func.ty));\n+            span_bug!(span, \"unexpected panic_bound_check type: {:?}\", func.ty);\n         };\n \n         let (tuple, tuple_ref) = (self.temp(tup_ty), self.temp(ref_ty));\n@@ -566,7 +564,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         let tup_ty = if let ty::TyRef(_, tyandmut) = ref_ty.sty {\n             tyandmut.ty\n         } else {\n-            self.hir.span_bug(span, &format!(\"unexpected panic type: {:?}\", func.ty));\n+            span_bug!(span, \"unexpected panic type: {:?}\", func.ty);\n         };\n \n         let (tuple, tuple_ref) = (self.temp(tup_ty), self.temp(ref_ty));"}, {"sha": "7e16883e7542c39c575c142f351482fc59b26026", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 33, "deletions": 28, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad", "patch": "@@ -64,11 +64,11 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n \n                     let sig = match method.ty.sty {\n                         ty::TyFnDef(_, _, fn_ty) => &fn_ty.sig,\n-                        _ => cx.tcx.sess.span_bug(self.span, \"type of method is not an fn\")\n+                        _ => span_bug!(self.span, \"type of method is not an fn\")\n                     };\n \n                     let sig = cx.tcx.no_late_bound_regions(sig).unwrap_or_else(|| {\n-                        cx.tcx.sess.span_bug(self.span, \"method call has late-bound regions\")\n+                        span_bug!(self.span, \"method call has late-bound regions\")\n                     });\n \n                     assert_eq!(sig.inputs.len(), 2);\n@@ -128,7 +128,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n             hir::ExprAddrOf(mutbl, ref expr) => {\n                 let region = match expr_ty.sty {\n                     ty::TyRef(r, _) => r,\n-                    _ => cx.tcx.sess.span_bug(expr.span, \"type of & not region\"),\n+                    _ => span_bug!(expr.span, \"type of & not region\"),\n                 };\n                 ExprKind::Borrow {\n                     region: *region,\n@@ -297,16 +297,18 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                                 }\n                             }\n                             ref def => {\n-                                cx.tcx.sess.span_bug(\n+                                span_bug!(\n                                     self.span,\n-                                    &format!(\"unexpected def: {:?}\", def));\n+                                    \"unexpected def: {:?}\",\n+                                    def);\n                             }\n                         }\n                     }\n                     _ => {\n-                        cx.tcx.sess.span_bug(\n+                        span_bug!(\n                             self.span,\n-                            &format!(\"unexpected type for struct literal: {:?}\", expr_ty));\n+                            \"unexpected type for struct literal: {:?}\",\n+                            expr_ty);\n                     }\n                 }\n             }\n@@ -316,9 +318,9 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                 let (def_id, substs) = match closure_ty.sty {\n                     ty::TyClosure(def_id, ref substs) => (def_id, substs),\n                     _ => {\n-                        cx.tcx.sess.span_bug(self.span,\n-                                             &format!(\"closure expr w/o closure type: {:?}\",\n-                                                      closure_ty));\n+                        span_bug!(self.span,\n+                                  \"closure expr w/o closure type: {:?}\",\n+                                  closure_ty);\n                     }\n                 };\n                 let upvars = cx.tcx.with_freevars(self.id, |freevars| {\n@@ -355,7 +357,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                     span: c.span,\n                     value: match const_eval::eval_const_expr(cx.tcx, c) {\n                         ConstVal::Integral(ConstInt::Usize(u)) => u,\n-                        other => panic!(\"constant evaluation of repeat count yielded {:?}\", other),\n+                        other => bug!(\"constant evaluation of repeat count yielded {:?}\", other),\n                     },\n                 }\n             },\n@@ -383,14 +385,16 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                     ty::TyStruct(adt_def, _) =>\n                         adt_def.variants[0].index_of_field_named(name.node),\n                     ref ty =>\n-                        cx.tcx.sess.span_bug(\n+                        span_bug!(\n                             self.span,\n-                            &format!(\"field of non-struct: {:?}\", ty)),\n+                            \"field of non-struct: {:?}\",\n+                            ty),\n                 };\n                 let index = index.unwrap_or_else(|| {\n-                    cx.tcx.sess.span_bug(\n+                    span_bug!(\n                         self.span,\n-                        &format!(\"no index found for field `{}`\", name.node));\n+                        \"no index found for field `{}`\",\n+                        name.node)\n                 });\n                 ExprKind::Field { lhs: source.to_ref(), name: Field::new(index) }\n             }\n@@ -474,8 +478,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                             Some(ty::FnConverging(&ty::TyS {\n                                 sty: ty::TyRef(region, mt), ..\n                             })) => (region, mt.mutbl),\n-                            _ => cx.tcx.sess.span_bug(\n-                                expr.span, \"autoderef returned bad type\")\n+                            _ => span_bug!(expr.span, \"autoderef returned bad type\")\n                         };\n \n                         expr = Expr {\n@@ -651,7 +654,7 @@ fn convert_path_expr<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>, expr: &'tcx hir::Expr)\n                 fields: vec![],\n                 base: None\n             },\n-            ref sty => panic!(\"unexpected sty: {:?}\", sty)\n+            ref sty => bug!(\"unexpected sty: {:?}\", sty)\n         },\n         Def::Variant(enum_id, variant_id) => match cx.tcx.node_id_to_type(expr.id).sty {\n             // A variant constructor. Should only be reached if not called in the same\n@@ -669,7 +672,7 @@ fn convert_path_expr<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>, expr: &'tcx hir::Expr)\n                     base: None\n                 };\n             },\n-            ref sty => panic!(\"unexpected sty: {:?}\", sty)\n+            ref sty => bug!(\"unexpected sty: {:?}\", sty)\n         },\n         Def::Const(def_id) |\n         Def::AssociatedConst(def_id) => {\n@@ -693,9 +696,10 @@ fn convert_path_expr<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>, expr: &'tcx hir::Expr)\n         def @ Def::Upvar(..) => return convert_var(cx, expr, def),\n \n         def =>\n-            cx.tcx.sess.span_bug(\n+            span_bug!(\n                 expr.span,\n-                &format!(\"def `{:?}` not yet implemented\", def)),\n+                \"def `{:?}` not yet implemented\",\n+                def),\n     };\n     ExprKind::Literal {\n         literal: Literal::Item { def_id: def_id, substs: substs }\n@@ -724,12 +728,12 @@ fn convert_var<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>,\n                     match expr.node {\n                         hir::ExprClosure(_, _, ref body) => body.id,\n                         _ => {\n-                            cx.tcx.sess.span_bug(expr.span, \"closure expr is not a closure expr\");\n+                            span_bug!(expr.span, \"closure expr is not a closure expr\");\n                         }\n                     }\n                 }\n                 _ => {\n-                    cx.tcx.sess.span_bug(expr.span, \"ast-map has garbage for closure expr\");\n+                    span_bug!(expr.span, \"ast-map has garbage for closure expr\");\n                 }\n             };\n \n@@ -809,9 +813,10 @@ fn convert_var<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>,\n             let upvar_capture = match cx.tcx.upvar_capture(upvar_id) {\n                 Some(c) => c,\n                 None => {\n-                    cx.tcx.sess.span_bug(\n+                    span_bug!(\n                         expr.span,\n-                        &format!(\"no upvar_capture for {:?}\", upvar_id));\n+                        \"no upvar_capture for {:?}\",\n+                        upvar_id);\n                 }\n             };\n             match upvar_capture {\n@@ -834,7 +839,7 @@ fn convert_var<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>,\n             }\n         }\n \n-        _ => cx.tcx.sess.span_bug(expr.span, \"type of & not region\"),\n+        _ => span_bug!(expr.span, \"type of & not region\"),\n     }\n }\n \n@@ -857,7 +862,7 @@ fn bin_op(op: hir::BinOp_) -> BinOp {\n         hir::BinOp_::BiNe => BinOp::Ne,\n         hir::BinOp_::BiGe => BinOp::Ge,\n         hir::BinOp_::BiGt => BinOp::Gt,\n-        _ => panic!(\"no equivalent for ast binop {:?}\", op),\n+        _ => bug!(\"no equivalent for ast binop {:?}\", op),\n     }\n }\n \n@@ -997,7 +1002,7 @@ fn loop_label<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>, expr: &'tcx hir::Expr) -> Cod\n     match cx.tcx.def_map.borrow().get(&expr.id).map(|d| d.full_def()) {\n         Some(Def::Label(loop_id)) => cx.tcx.region_maps.node_extent(loop_id),\n         d => {\n-            cx.tcx.sess.span_bug(expr.span, &format!(\"loop scope resolved to {:?}\", d));\n+            span_bug!(expr.span, \"loop scope resolved to {:?}\", d);\n         }\n     }\n }"}, {"sha": "05448a7deab369afd61a47c1e453701277e095e4", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad", "patch": "@@ -24,7 +24,6 @@ use rustc::middle::def_id::DefId;\n use rustc::infer::InferCtxt;\n use rustc::ty::subst::{Subst, Substs};\n use rustc::ty::{self, Ty, TyCtxt};\n-use syntax::codemap::Span;\n use syntax::parse::token;\n use rustc_front::hir;\n use rustc_const_math::{ConstInt, ConstUsize};\n@@ -57,7 +56,7 @@ impl<'a,'tcx:'a> Cx<'a, 'tcx> {\n     pub fn usize_literal(&mut self, value: u64) -> Literal<'tcx> {\n         match ConstUsize::new(value, self.tcx.sess.target.uint_type) {\n             Ok(val) => Literal::Value { value: ConstVal::Integral(ConstInt::Usize(val))},\n-            Err(_) => panic!(\"usize literal out of range for target\"),\n+            Err(_) => bug!(\"usize literal out of range for target\"),\n         }\n     }\n \n@@ -124,7 +123,7 @@ impl<'a,'tcx:'a> Cx<'a, 'tcx> {\n             }\n         }\n \n-        self.tcx.sess.bug(&format!(\"found no method `{}` in `{:?}`\", method_name, trait_def_id));\n+        bug!(\"found no method `{}` in `{:?}`\", method_name, trait_def_id);\n     }\n \n     pub fn num_variants(&mut self, adt_def: ty::AdtDef<'tcx>) -> usize {\n@@ -141,10 +140,6 @@ impl<'a,'tcx:'a> Cx<'a, 'tcx> {\n         self.tcx.type_needs_drop_given_env(ty, &self.infcx.parameter_environment)\n     }\n \n-    pub fn span_bug(&mut self, span: Span, message: &str) -> ! {\n-        self.tcx.sess.span_bug(span, message)\n-    }\n-\n     pub fn tcx(&self) -> &'a TyCtxt<'tcx> {\n         self.tcx\n     }"}, {"sha": "8ec8cd4bf814c28ce756cd70dcb6293d5f07b1fb", "filename": "src/librustc_mir/hair/cx/pattern.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs?ref=8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad", "patch": "@@ -97,21 +97,23 @@ impl<'patcx, 'cx, 'tcx> PatCx<'patcx, 'cx, 'tcx> {\n                                     Ok(pat) =>\n                                         return self.to_pattern(&pat),\n                                     Err(_) =>\n-                                        self.cx.tcx.sess.span_bug(\n+                                        span_bug!(\n                                             pat.span, \"illegal constant\"),\n                                 }\n                             }\n                             None => {\n-                                self.cx.tcx.sess.span_bug(\n+                                span_bug!(\n                                     pat.span,\n-                                    &format!(\"cannot eval constant: {:?}\", def_id))\n+                                    \"cannot eval constant: {:?}\",\n+                                    def_id)\n                             }\n                         }\n                     }\n                     _ =>\n-                        self.cx.tcx.sess.span_bug(\n+                        span_bug!(\n                             pat.span,\n-                            &format!(\"def not a constant: {:?}\", def)),\n+                            \"def not a constant: {:?}\",\n+                            def),\n                 }\n             }\n \n@@ -138,9 +140,10 @@ impl<'patcx, 'cx, 'tcx> PatCx<'patcx, 'cx, 'tcx> {\n                         self.slice_or_array_pattern(pat.span, ty, prefix, slice, suffix),\n \n                     ref sty =>\n-                        self.cx.tcx.sess.span_bug(\n+                        span_bug!(\n                             pat.span,\n-                            &format!(\"unexpanded type for vector pattern: {:?}\", sty)),\n+                            \"unexpanded type for vector pattern: {:?}\",\n+                            sty),\n                 }\n             }\n \n@@ -186,7 +189,7 @@ impl<'patcx, 'cx, 'tcx> PatCx<'patcx, 'cx, 'tcx> {\n                     if let ty::TyRef(_, mt) = ty.sty {\n                         ty = mt.ty;\n                     } else {\n-                        unreachable!(\"`ref {}` has wrong type {}\", ident.node, ty);\n+                        bug!(\"`ref {}` has wrong type {}\", ident.node, ty);\n                     }\n                 }\n \n@@ -222,7 +225,7 @@ impl<'patcx, 'cx, 'tcx> PatCx<'patcx, 'cx, 'tcx> {\n                 let adt_def = match pat_ty.sty {\n                     ty::TyStruct(adt_def, _) | ty::TyEnum(adt_def, _) => adt_def,\n                     _ => {\n-                        self.cx.tcx.sess.span_bug(\n+                        span_bug!(\n                             pat.span,\n                             \"struct pattern not applied to struct or enum\");\n                     }\n@@ -236,9 +239,10 @@ impl<'patcx, 'cx, 'tcx> PatCx<'patcx, 'cx, 'tcx> {\n                           .map(|field| {\n                               let index = variant_def.index_of_field_named(field.node.name);\n                               let index = index.unwrap_or_else(|| {\n-                                  self.cx.tcx.sess.span_bug(\n+                                  span_bug!(\n                                       pat.span,\n-                                      &format!(\"no field with name {:?}\", field.node.name));\n+                                      \"no field with name {:?}\",\n+                                      field.node.name);\n                               });\n                               FieldPattern {\n                                   field: Field::new(index),\n@@ -251,7 +255,7 @@ impl<'patcx, 'cx, 'tcx> PatCx<'patcx, 'cx, 'tcx> {\n             }\n \n             PatKind::QPath(..) => {\n-                self.cx.tcx.sess.span_bug(pat.span, \"unexpanded macro or bad constant etc\");\n+                span_bug!(pat.span, \"unexpanded macro or bad constant etc\");\n             }\n         };\n \n@@ -298,7 +302,7 @@ impl<'patcx, 'cx, 'tcx> PatCx<'patcx, 'cx, 'tcx> {\n             }\n \n             _ => {\n-                self.cx.tcx.sess.span_bug(span, \"unexpanded macro or bad constant etc\");\n+                span_bug!(span, \"unexpanded macro or bad constant etc\");\n             }\n         }\n     }\n@@ -327,8 +331,7 @@ impl<'patcx, 'cx, 'tcx> PatCx<'patcx, 'cx, 'tcx> {\n             }\n \n             _ => {\n-                self.cx.tcx.sess.span_bug(pat.span,\n-                                          &format!(\"inappropriate def for pattern: {:?}\", def));\n+                span_bug!(pat.span, \"inappropriate def for pattern: {:?}\", def);\n             }\n         }\n     }"}, {"sha": "e7c0a3d9cae018d8bbd589c1dcfaf729d65843dc", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad", "patch": "@@ -27,6 +27,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n \n #[macro_use] extern crate log;\n extern crate graphviz as dot;\n+#[macro_use]\n extern crate rustc;\n extern crate rustc_data_structures;\n extern crate rustc_front;"}, {"sha": "9ec88c1b59a69dfe066654b7e21b7cdf009119b2", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad", "patch": "@@ -165,8 +165,7 @@ fn build_mir<'a,'tcx:'a>(cx: Cx<'a,'tcx>,\n     let fn_sig = match cx.tcx().tables.borrow().liberated_fn_sigs.get(&fn_id) {\n         Some(f) => f.clone(),\n         None => {\n-            cx.tcx().sess.span_bug(span,\n-                                   &format!(\"no liberated fn sig for {:?}\", fn_id));\n+            span_bug!(span, \"no liberated fn sig for {:?}\", fn_id);\n         }\n     };\n "}]}