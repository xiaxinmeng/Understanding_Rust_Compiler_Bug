{"sha": "c53fa9a8983a0195076f436e70be24f449c37afc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1M2ZhOWE4OTgzYTAxOTUwNzZmNDM2ZTcwYmUyNGY0NDljMzdhZmM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-11-21T05:11:36Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-12-22T02:17:04Z"}, "message": "save-analysis: fix ICE on partially resolved path\n\nOccurs when we produce save-analysis before type checking is complete (due to errors).", "tree": {"sha": "213e881daaa15e7190e7a536e8e4b703259f3861", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/213e881daaa15e7190e7a536e8e4b703259f3861"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c53fa9a8983a0195076f436e70be24f449c37afc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c53fa9a8983a0195076f436e70be24f449c37afc", "html_url": "https://github.com/rust-lang/rust/commit/c53fa9a8983a0195076f436e70be24f449c37afc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c53fa9a8983a0195076f436e70be24f449c37afc/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a6ca7a38dbb34f89c8a0381db5ab23b56f44737", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a6ca7a38dbb34f89c8a0381db5ab23b56f44737", "html_url": "https://github.com/rust-lang/rust/commit/5a6ca7a38dbb34f89c8a0381db5ab23b56f44737"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "68836d8823ed521f2a7eb60ba1d5ce405a861159", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53fa9a8983a0195076f436e70be24f449c37afc/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53fa9a8983a0195076f436e70be24f449c37afc/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=c53fa9a8983a0195076f436e70be24f449c37afc", "patch": "@@ -545,7 +545,11 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n     }\n \n     pub fn get_path_data(&self, id: NodeId, path: &ast::Path) -> Option<Data> {\n+<<<<<<< HEAD\n         let def = self.get_path_def(id);\n+=======\n+        let def = option_try!(self.tcx.expect_resolution(id).maybe_full_def());\n+>>>>>>> save-analysis: fix ICE on partially resolved path\n         let sub_span = self.span_utils.span_for_last_ident(path.span);\n         filter!(self.span_utils, sub_span, path.span, None);\n         match def {"}]}