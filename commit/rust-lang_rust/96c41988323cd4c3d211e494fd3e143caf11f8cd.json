{"sha": "96c41988323cd4c3d211e494fd3e143caf11f8cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2YzQxOTg4MzIzY2Q0YzNkMjExZTQ5NGZkM2UxNDNjYWYxMWY4Y2Q=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2019-12-24T15:42:09Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-01-07T17:48:16Z"}, "message": "New lint: pats_with_wild_match_arm\n\n - Wildcard use with other pattern in same match arm", "tree": {"sha": "61235623f2297cd9948aef289b91457a42ea6a04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61235623f2297cd9948aef289b91457a42ea6a04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96c41988323cd4c3d211e494fd3e143caf11f8cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96c41988323cd4c3d211e494fd3e143caf11f8cd", "html_url": "https://github.com/rust-lang/rust/commit/96c41988323cd4c3d211e494fd3e143caf11f8cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96c41988323cd4c3d211e494fd3e143caf11f8cd/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c09206899656f5730f8007dbc86385122c34a9ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/c09206899656f5730f8007dbc86385122c34a9ca", "html_url": "https://github.com/rust-lang/rust/commit/c09206899656f5730f8007dbc86385122c34a9ca"}], "stats": {"total": 157, "additions": 156, "deletions": 1}, "files": [{"sha": "d4ecdabeb14f84b9cc22096744d36af125a193ba", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96c41988323cd4c3d211e494fd3e143caf11f8cd/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/96c41988323cd4c3d211e494fd3e143caf11f8cd/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=96c41988323cd4c3d211e494fd3e143caf11f8cd", "patch": "@@ -1241,6 +1241,7 @@ Released 2018-09-13\n [`panicking_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#panicking_unwrap\n [`partialeq_ne_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#partialeq_ne_impl\n [`path_buf_push_overwrite`]: https://rust-lang.github.io/rust-clippy/master/index.html#path_buf_push_overwrite\n+[`pats_with_wild_match_arm`]: https://rust-lang.github.io/rust-clippy/master/index.html#pats_with_wild_match_arm\n [`possible_missing_comma`]: https://rust-lang.github.io/rust-clippy/master/index.html#possible_missing_comma\n [`precedence`]: https://rust-lang.github.io/rust-clippy/master/index.html#precedence\n [`print_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#print_literal"}, {"sha": "2d83a5b41d0fd7c0365f8daa65a9df0dc8632211", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96c41988323cd4c3d211e494fd3e143caf11f8cd/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c41988323cd4c3d211e494fd3e143caf11f8cd/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=96c41988323cd4c3d211e494fd3e143caf11f8cd", "patch": "@@ -597,6 +597,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         &matches::MATCH_OVERLAPPING_ARM,\n         &matches::MATCH_REF_PATS,\n         &matches::MATCH_WILD_ERR_ARM,\n+        &matches::PATS_WITH_WILD_MATCH_ARM,\n         &matches::SINGLE_MATCH,\n         &matches::SINGLE_MATCH_ELSE,\n         &matches::WILDCARD_ENUM_MATCH_ARM,\n@@ -1001,6 +1002,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&integer_division::INTEGER_DIVISION),\n         LintId::of(&let_underscore::LET_UNDERSCORE_MUST_USE),\n         LintId::of(&literal_representation::DECIMAL_LITERAL_REPRESENTATION),\n+        LintId::of(&matches::PATS_WITH_WILD_MATCH_ARM),\n         LintId::of(&matches::WILDCARD_ENUM_MATCH_ARM),\n         LintId::of(&mem_forget::MEM_FORGET),\n         LintId::of(&methods::CLONE_ON_REF_PTR),"}, {"sha": "29d34c37988098ccf184637704a0a3136039dbe1", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/96c41988323cd4c3d211e494fd3e143caf11f8cd/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c41988323cd4c3d211e494fd3e143caf11f8cd/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=96c41988323cd4c3d211e494fd3e143caf11f8cd", "patch": "@@ -223,6 +223,26 @@ declare_clippy_lint! {\n     \"a wildcard enum match arm using `_`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for wildcard pattern used with others patterns in same match arm.\n+    ///\n+    /// **Why is this bad?** Wildcard pattern already covers any other pattern as it will match anyway.\n+    /// It makes the code less readable, especially to spot wildcard pattern use in match arm.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// match \"foo\" {\n+    ///     \"a\" => {},\n+    ///     \"bar\" | _ => {},\n+    /// }\n+    /// ```\n+    pub PATS_WITH_WILD_MATCH_ARM,\n+    restriction,\n+    \"a wildcard pattern used with others patterns in same match arm\"\n+}\n+\n declare_lint_pass!(Matches => [\n     SINGLE_MATCH,\n     MATCH_REF_PATS,\n@@ -231,7 +251,8 @@ declare_lint_pass!(Matches => [\n     MATCH_OVERLAPPING_ARM,\n     MATCH_WILD_ERR_ARM,\n     MATCH_AS_REF,\n-    WILDCARD_ENUM_MATCH_ARM\n+    WILDCARD_ENUM_MATCH_ARM,\n+    PATS_WITH_WILD_MATCH_ARM\n ]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Matches {\n@@ -246,6 +267,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Matches {\n             check_wild_err_arm(cx, ex, arms);\n             check_wild_enum_match(cx, ex, arms);\n             check_match_as_ref(cx, ex, arms, expr);\n+            check_pats_wild_match(cx, ex, arms, expr);\n         }\n         if let ExprKind::Match(ref ex, ref arms, _) = expr.kind {\n             check_match_ref_pats(cx, ex, arms, expr);\n@@ -664,6 +686,25 @@ fn check_match_as_ref(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>],\n     }\n }\n \n+fn check_pats_wild_match(cx: &LateContext<'_, '_>, _ex: &Expr, arms: &[Arm], _expr: &Expr) {\n+    for arm in arms {\n+        if let PatKind::Or(ref fields) = arm.pat.kind {\n+            // look for multiple fields where one at least matches Wild pattern\n+            if fields.len() > 1 && fields.into_iter().any(|pat| is_wild(pat)) {\n+                span_lint_and_sugg(\n+                    cx,\n+                    PATS_WITH_WILD_MATCH_ARM,\n+                    arm.pat.span,\n+                    \"wildcard pattern covers any other pattern as it will match anyway. Consider replacing with wildcard pattern only\",\n+                    \"try this\",\n+                    \"_\".to_string(),\n+                    Applicability::MachineApplicable,\n+                )\n+            }\n+        }\n+    }\n+}\n+\n /// Gets all arms that are unbounded `PatRange`s.\n fn all_ranges<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arms: &'tcx [Arm<'_>]) -> Vec<SpannedRange<Constant>> {\n     arms.iter()"}, {"sha": "a6b31876a7aa2c864dab4aa86945e9c7574cc989", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/96c41988323cd4c3d211e494fd3e143caf11f8cd/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c41988323cd4c3d211e494fd3e143caf11f8cd/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=96c41988323cd4c3d211e494fd3e143caf11f8cd", "patch": "@@ -1568,6 +1568,13 @@ pub const ALL_LINTS: [Lint; 345] = [\n         deprecation: None,\n         module: \"path_buf_push_overwrite\",\n     },\n+    Lint {\n+        name: \"pats_with_wild_match_arm\",\n+        group: \"restriction\",\n+        desc: \"a wildcard pattern used with others patterns in same match arm\",\n+        deprecation: None,\n+        module: \"matches\",\n+    },\n     Lint {\n         name: \"possible_missing_comma\",\n         group: \"correctness\","}, {"sha": "daa34af94363a66a17c80273ab4a3e1e5f8918d2", "filename": "tests/ui/pats_with_wild_match_arm.fixed", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/96c41988323cd4c3d211e494fd3e143caf11f8cd/tests%2Fui%2Fpats_with_wild_match_arm.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/96c41988323cd4c3d211e494fd3e143caf11f8cd/tests%2Fui%2Fpats_with_wild_match_arm.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpats_with_wild_match_arm.fixed?ref=96c41988323cd4c3d211e494fd3e143caf11f8cd", "patch": "@@ -0,0 +1,38 @@\n+// run-rustfix\n+\n+#![warn(clippy::pats_with_wild_match_arm)]\n+\n+fn main() {\n+    match \"foo\" {\n+        \"a\" => {\n+            dbg!(\"matched a\");\n+        },\n+        _ => {\n+            dbg!(\"matched (bar or) wild\");\n+        },\n+    };\n+    match \"foo\" {\n+        \"a\" => {\n+            dbg!(\"matched a\");\n+        },\n+        _ => {\n+            dbg!(\"matched (bar or bar2 or) wild\");\n+        },\n+    };\n+    match \"foo\" {\n+        \"a\" => {\n+            dbg!(\"matched a\");\n+        },\n+        _ => {\n+            dbg!(\"matched (bar or) wild\");\n+        },\n+    };\n+    match \"foo\" {\n+        \"a\" => {\n+            dbg!(\"matched a\");\n+        },\n+        _ => {\n+            dbg!(\"matched (bar or) wild\");\n+        },\n+    };\n+}"}, {"sha": "0410cecb5d67445e3a884fe214afe732973552b9", "filename": "tests/ui/pats_with_wild_match_arm.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/96c41988323cd4c3d211e494fd3e143caf11f8cd/tests%2Fui%2Fpats_with_wild_match_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c41988323cd4c3d211e494fd3e143caf11f8cd/tests%2Fui%2Fpats_with_wild_match_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpats_with_wild_match_arm.rs?ref=96c41988323cd4c3d211e494fd3e143caf11f8cd", "patch": "@@ -0,0 +1,38 @@\n+// run-rustfix\n+\n+#![warn(clippy::pats_with_wild_match_arm)]\n+\n+fn main() {\n+    match \"foo\" {\n+        \"a\" => {\n+            dbg!(\"matched a\");\n+        },\n+        \"bar\" | _ => {\n+            dbg!(\"matched (bar or) wild\");\n+        },\n+    };\n+    match \"foo\" {\n+        \"a\" => {\n+            dbg!(\"matched a\");\n+        },\n+        \"bar\" | \"bar2\" | _ => {\n+            dbg!(\"matched (bar or bar2 or) wild\");\n+        },\n+    };\n+    match \"foo\" {\n+        \"a\" => {\n+            dbg!(\"matched a\");\n+        },\n+        _ | \"bar\" | _ => {\n+            dbg!(\"matched (bar or) wild\");\n+        },\n+    };\n+    match \"foo\" {\n+        \"a\" => {\n+            dbg!(\"matched a\");\n+        },\n+        _ | \"bar\" => {\n+            dbg!(\"matched (bar or) wild\");\n+        },\n+    };\n+}"}, {"sha": "5b5d8d28738a7705071f26c52fa3840a803f2e2d", "filename": "tests/ui/pats_with_wild_match_arm.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/96c41988323cd4c3d211e494fd3e143caf11f8cd/tests%2Fui%2Fpats_with_wild_match_arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96c41988323cd4c3d211e494fd3e143caf11f8cd/tests%2Fui%2Fpats_with_wild_match_arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpats_with_wild_match_arm.stderr?ref=96c41988323cd4c3d211e494fd3e143caf11f8cd", "patch": "@@ -0,0 +1,28 @@\n+error: wildcard pattern covers any other pattern as it will match anyway. Consider replacing with wildcard pattern only\n+  --> $DIR/pats_with_wild_match_arm.rs:10:9\n+   |\n+LL |         \"bar\" | _ => {\n+   |         ^^^^^^^^^ help: try this: `_`\n+   |\n+   = note: `-D clippy::pats-with-wild-match-arm` implied by `-D warnings`\n+\n+error: wildcard pattern covers any other pattern as it will match anyway. Consider replacing with wildcard pattern only\n+  --> $DIR/pats_with_wild_match_arm.rs:18:9\n+   |\n+LL |         \"bar\" | \"bar2\" | _ => {\n+   |         ^^^^^^^^^^^^^^^^^^ help: try this: `_`\n+\n+error: wildcard pattern covers any other pattern as it will match anyway. Consider replacing with wildcard pattern only\n+  --> $DIR/pats_with_wild_match_arm.rs:26:9\n+   |\n+LL |         _ | \"bar\" | _ => {\n+   |         ^^^^^^^^^^^^^ help: try this: `_`\n+\n+error: wildcard pattern covers any other pattern as it will match anyway. Consider replacing with wildcard pattern only\n+  --> $DIR/pats_with_wild_match_arm.rs:34:9\n+   |\n+LL |         _ | \"bar\" => {\n+   |         ^^^^^^^^^ help: try this: `_`\n+\n+error: aborting due to 4 previous errors\n+"}]}