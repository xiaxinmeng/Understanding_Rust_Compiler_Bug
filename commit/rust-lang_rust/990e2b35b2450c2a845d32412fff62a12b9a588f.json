{"sha": "990e2b35b2450c2a845d32412fff62a12b9a588f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MGUyYjM1YjI0NTBjMmE4NDVkMzI0MTJmZmY2MmExMmI5YTU4OGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-17T16:26:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-17T16:26:28Z"}, "message": "Auto merge of #6528 - Jarcho:redundant_slicing, r=flip1995\n\nNew lint: redundant_slicing\n\nchangelog: Added lint: `redundant_slicing`\nfixes #6519\n\nThis will trigger on any type which implements `Index<RangeFull>` that returns the input type. This would be a false positive if the implementation does something other than return itself, but I'm not sure why you would ever want to do that.", "tree": {"sha": "b5717cae0fa0a752e1f0a8fce1a44c707be79867", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5717cae0fa0a752e1f0a8fce1a44c707be79867"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/990e2b35b2450c2a845d32412fff62a12b9a588f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/990e2b35b2450c2a845d32412fff62a12b9a588f", "html_url": "https://github.com/rust-lang/rust/commit/990e2b35b2450c2a845d32412fff62a12b9a588f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/990e2b35b2450c2a845d32412fff62a12b9a588f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0d331fbf414bdbbb03f950609d5538fe60f5dc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0d331fbf414bdbbb03f950609d5538fe60f5dc8", "html_url": "https://github.com/rust-lang/rust/commit/e0d331fbf414bdbbb03f950609d5538fe60f5dc8"}, {"sha": "9146a77032e7d8c96ccae177c60ddb04b6159329", "url": "https://api.github.com/repos/rust-lang/rust/commits/9146a77032e7d8c96ccae177c60ddb04b6159329", "html_url": "https://github.com/rust-lang/rust/commit/9146a77032e7d8c96ccae177c60ddb04b6159329"}], "stats": {"total": 102, "additions": 101, "deletions": 1}, "files": [{"sha": "85f6929f924e2474cdbacd7237889a207a00d722", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/990e2b35b2450c2a845d32412fff62a12b9a588f/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/990e2b35b2450c2a845d32412fff62a12b9a588f/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=990e2b35b2450c2a845d32412fff62a12b9a588f", "patch": "@@ -2162,6 +2162,7 @@ Released 2018-09-13\n [`redundant_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pattern\n [`redundant_pattern_matching`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pattern_matching\n [`redundant_pub_crate`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pub_crate\n+[`redundant_slicing`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_slicing\n [`redundant_static_lifetimes`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_static_lifetimes\n [`ref_in_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#ref_in_deref\n [`ref_option_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#ref_option_ref"}, {"sha": "70fdfd22caa068542ad463fd9f7754922bf1a095", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/990e2b35b2450c2a845d32412fff62a12b9a588f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/990e2b35b2450c2a845d32412fff62a12b9a588f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=990e2b35b2450c2a845d32412fff62a12b9a588f", "patch": "@@ -301,6 +301,7 @@ mod redundant_closure_call;\n mod redundant_else;\n mod redundant_field_names;\n mod redundant_pub_crate;\n+mod redundant_slicing;\n mod redundant_static_lifetimes;\n mod ref_option_ref;\n mod reference;\n@@ -849,6 +850,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &redundant_else::REDUNDANT_ELSE,\n         &redundant_field_names::REDUNDANT_FIELD_NAMES,\n         &redundant_pub_crate::REDUNDANT_PUB_CRATE,\n+        &redundant_slicing::REDUNDANT_SLICING,\n         &redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES,\n         &ref_option_ref::REF_OPTION_REF,\n         &reference::DEREF_ADDROF,\n@@ -1229,6 +1231,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box vec_init_then_push::VecInitThenPush::default());\n     store.register_late_pass(move || box types::PtrAsPtr::new(msrv));\n     store.register_late_pass(|| box case_sensitive_file_extension_comparisons::CaseSensitiveFileExtensionComparisons);\n+    store.register_late_pass(|| box redundant_slicing::RedundantSlicing);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1591,6 +1594,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&redundant_clone::REDUNDANT_CLONE),\n         LintId::of(&redundant_closure_call::REDUNDANT_CLOSURE_CALL),\n         LintId::of(&redundant_field_names::REDUNDANT_FIELD_NAMES),\n+        LintId::of(&redundant_slicing::REDUNDANT_SLICING),\n         LintId::of(&redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES),\n         LintId::of(&reference::DEREF_ADDROF),\n         LintId::of(&reference::REF_IN_DEREF),\n@@ -1835,6 +1839,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&ptr_offset_with_cast::PTR_OFFSET_WITH_CAST),\n         LintId::of(&ranges::RANGE_ZIP_WITH_LEN),\n         LintId::of(&redundant_closure_call::REDUNDANT_CLOSURE_CALL),\n+        LintId::of(&redundant_slicing::REDUNDANT_SLICING),\n         LintId::of(&reference::DEREF_ADDROF),\n         LintId::of(&reference::REF_IN_DEREF),\n         LintId::of(&repeat_once::REPEAT_ONCE),"}, {"sha": "01126e86199b41172d5087cba7fc7192cf4cf5c3", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/990e2b35b2450c2a845d32412fff62a12b9a588f/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/990e2b35b2450c2a845d32412fff62a12b9a588f/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=990e2b35b2450c2a845d32412fff62a12b9a588f", "patch": "@@ -131,7 +131,7 @@ fn reduce_unit_expression<'a>(cx: &LateContext<'_>, expr: &'a hir::Expr<'_>) ->\n             Some(expr.span)\n         },\n         hir::ExprKind::Block(ref block, _) => {\n-            match (&block.stmts[..], block.expr.as_ref()) {\n+            match (block.stmts, block.expr.as_ref()) {\n                 (&[], Some(inner_expr)) => {\n                     // If block only contains an expression,\n                     // reduce `{ X }` to `X`"}, {"sha": "e5ced13514f793088205d3a3b0284355f3cc6852", "filename": "clippy_lints/src/redundant_slicing.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/990e2b35b2450c2a845d32412fff62a12b9a588f/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/990e2b35b2450c2a845d32412fff62a12b9a588f/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_slicing.rs?ref=990e2b35b2450c2a845d32412fff62a12b9a588f", "patch": "@@ -0,0 +1,67 @@\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind, LangItem};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::{lint::in_external_macro, ty::TyS};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+use crate::utils::{is_type_lang_item, snippet_with_applicability, span_lint_and_sugg};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for redundant slicing expressions which use the full range, and\n+    /// do not change the type.\n+    ///\n+    /// **Why is this bad?** It unnecessarily adds complexity to the expression.\n+    ///\n+    /// **Known problems:** If the type being sliced has an implementation of `Index<RangeFull>`\n+    /// that actually changes anything then it can't be removed. However, this would be surprising\n+    /// to people reading the code and should have a note with it.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```ignore\n+    /// fn get_slice(x: &[u32]) -> &[u32] {\n+    ///     &x[..]\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```ignore\n+    /// fn get_slice(x: &[u32]) -> &[u32] {\n+    ///     x\n+    /// }\n+    /// ```\n+    pub REDUNDANT_SLICING,\n+    complexity,\n+    \"redundant slicing of the whole range of a type\"\n+}\n+\n+declare_lint_pass!(RedundantSlicing => [REDUNDANT_SLICING]);\n+\n+impl LateLintPass<'_> for RedundantSlicing {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if in_external_macro(cx.sess(), expr.span) {\n+            return;\n+        }\n+\n+        if_chain! {\n+            if let ExprKind::AddrOf(_, _, addressee) = expr.kind;\n+            if let ExprKind::Index(indexed, range) = addressee.kind;\n+            if is_type_lang_item(cx, cx.typeck_results().expr_ty_adjusted(range), LangItem::RangeFull);\n+            if TyS::same_type(cx.typeck_results().expr_ty(expr), cx.typeck_results().expr_ty(indexed));\n+            then {\n+                let mut app = Applicability::MachineApplicable;\n+                let hint = snippet_with_applicability(cx, indexed.span, \"..\", &mut app).into_owned();\n+\n+                span_lint_and_sugg(\n+                    cx,\n+                    REDUNDANT_SLICING,\n+                    expr.span,\n+                    \"redundant slicing of the whole range\",\n+                    \"use the original slice instead\",\n+                    hint,\n+                    app,\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "922b8b4ce57f613069b5c5a0c9575f0f6f2bf13a", "filename": "tests/ui/redundant_slicing.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/990e2b35b2450c2a845d32412fff62a12b9a588f/tests%2Fui%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/990e2b35b2450c2a845d32412fff62a12b9a588f/tests%2Fui%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_slicing.rs?ref=990e2b35b2450c2a845d32412fff62a12b9a588f", "patch": "@@ -0,0 +1,11 @@\n+#![allow(unused)]\n+#![warn(clippy::redundant_slicing)]\n+\n+fn main() {\n+    let x: &[u32] = &[0];\n+    let err = &x[..];\n+\n+    let v = vec![0];\n+    let ok = &v[..];\n+    let err = &(&v[..])[..];\n+}"}, {"sha": "9efd6484ad0c1769f884f59f75b5792aa1ed1b19", "filename": "tests/ui/redundant_slicing.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/990e2b35b2450c2a845d32412fff62a12b9a588f/tests%2Fui%2Fredundant_slicing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/990e2b35b2450c2a845d32412fff62a12b9a588f/tests%2Fui%2Fredundant_slicing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_slicing.stderr?ref=990e2b35b2450c2a845d32412fff62a12b9a588f", "patch": "@@ -0,0 +1,16 @@\n+error: redundant slicing of the whole range\n+  --> $DIR/redundant_slicing.rs:6:15\n+   |\n+LL |     let err = &x[..];\n+   |               ^^^^^^ help: use the original slice instead: `x`\n+   |\n+   = note: `-D clippy::redundant-slicing` implied by `-D warnings`\n+\n+error: redundant slicing of the whole range\n+  --> $DIR/redundant_slicing.rs:10:15\n+   |\n+LL |     let err = &(&v[..])[..];\n+   |               ^^^^^^^^^^^^^ help: use the original slice instead: `(&v[..])`\n+\n+error: aborting due to 2 previous errors\n+"}]}