{"sha": "6d23140ba03c77b28d94e042c94155899baba9da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMjMxNDBiYTAzYzc3YjI4ZDk0ZTA0MmM5NDE1NTg5OWJhYmE5ZGE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-31T17:38:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-31T17:38:55Z"}, "message": "Merge #2709\n\n2709: Work around synchrnonisation issue r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "3efa5daf54fe08cd1b310fa42c2ef469503fcedd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3efa5daf54fe08cd1b310fa42c2ef469503fcedd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d23140ba03c77b28d94e042c94155899baba9da", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeC4evCRBK7hj4Ov3rIwAAdHIIAHileYJ3mbWmZkRzwj5n04NI\nNPLz1QJGZn9wWdmTJEMiS0L4g2eO2Ksn9jQO0jgAma1j1w2IBa53xWyebno1Ib6X\no4DTkIHROJAQDAz/V2mDUVXAadKxLeFYI7OZS+EVljmDfmBwTQYzxFZ1Y1lyVTCq\n+uUYO7d/UjICgNM+SIQ3P7CshNlgFKhsIKdbcID3dSuIhVI/+15sq/b5vGINEJCj\nG9Sd/RJiCfnjRrPkqC2DXyYLiT7wqQlevWxDKMizKRNCUh2MtwhsaHKVh00mQiaN\npYjEgcw3G38lqXI3PCAeF7JqSE4H6mS6GoxY62mzqkaHkAHPCxmYtlpWb+BNzP8=\n=qOZl\n-----END PGP SIGNATURE-----\n", "payload": "tree 3efa5daf54fe08cd1b310fa42c2ef469503fcedd\nparent 1327aed7f6289043091aa9179282030c6f13ddbe\nparent 6368b40dd98b208da3758d4d1eed34cf276e3b09\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1577813935 +0000\ncommitter GitHub <noreply@github.com> 1577813935 +0000\n\nMerge #2709\n\n2709: Work around synchrnonisation issue r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d23140ba03c77b28d94e042c94155899baba9da", "html_url": "https://github.com/rust-lang/rust/commit/6d23140ba03c77b28d94e042c94155899baba9da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d23140ba03c77b28d94e042c94155899baba9da/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1327aed7f6289043091aa9179282030c6f13ddbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/1327aed7f6289043091aa9179282030c6f13ddbe", "html_url": "https://github.com/rust-lang/rust/commit/1327aed7f6289043091aa9179282030c6f13ddbe"}, {"sha": "6368b40dd98b208da3758d4d1eed34cf276e3b09", "url": "https://api.github.com/repos/rust-lang/rust/commits/6368b40dd98b208da3758d4d1eed34cf276e3b09", "html_url": "https://github.com/rust-lang/rust/commit/6368b40dd98b208da3758d4d1eed34cf276e3b09"}], "stats": {"total": 458, "additions": 235, "deletions": 223}, "files": [{"sha": "94948b10fe3fa7c84747117daf175e3079ac83c1", "filename": "editors/code/src/client.ts", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/6d23140ba03c77b28d94e042c94155899baba9da/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6d23140ba03c77b28d94e042c94155899baba9da/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=6d23140ba03c77b28d94e042c94155899baba9da", "patch": "@@ -0,0 +1,90 @@\n+import { homedir } from 'os';\n+import * as lc from 'vscode-languageclient';\n+\n+import { window, workspace } from 'vscode';\n+import { Config } from './config';\n+\n+export function createClient(config: Config): lc.LanguageClient {\n+    // '.' Is the fallback if no folder is open\n+    // TODO?: Workspace folders support Uri's (eg: file://test.txt). It might be a good idea to test if the uri points to a file.\n+    let folder: string = '.';\n+    if (workspace.workspaceFolders !== undefined) {\n+        folder = workspace.workspaceFolders[0].uri.fsPath.toString();\n+    }\n+\n+    const command = expandPathResolving(config.raLspServerPath);\n+    const run: lc.Executable = {\n+        command,\n+        options: { cwd: folder },\n+    };\n+    const serverOptions: lc.ServerOptions = {\n+        run,\n+        debug: run,\n+    };\n+    const traceOutputChannel = window.createOutputChannel(\n+        'Rust Analyzer Language Server Trace',\n+    );\n+    const clientOptions: lc.LanguageClientOptions = {\n+        documentSelector: [{ scheme: 'file', language: 'rust' }],\n+        initializationOptions: {\n+            publishDecorations: true,\n+            lruCapacity: config.lruCapacity,\n+            maxInlayHintLength: config.maxInlayHintLength,\n+            cargoWatchEnable: config.cargoWatchOptions.enable,\n+            cargoWatchArgs: config.cargoWatchOptions.arguments,\n+            cargoWatchCommand: config.cargoWatchOptions.command,\n+            cargoWatchAllTargets:\n+                config.cargoWatchOptions.allTargets,\n+            excludeGlobs: config.excludeGlobs,\n+            useClientWatching: config.useClientWatching,\n+            featureFlags: config.featureFlags,\n+            withSysroot: config.withSysroot,\n+            cargoFeatures: config.cargoFeatures,\n+        },\n+        traceOutputChannel,\n+    };\n+\n+    const res = new lc.LanguageClient(\n+        'rust-analyzer',\n+        'Rust Analyzer Language Server',\n+        serverOptions,\n+        clientOptions,\n+    );\n+\n+    // HACK: This is an awful way of filtering out the decorations notifications\n+    // However, pending proper support, this is the most effecitve approach\n+    // Proper support for this would entail a change to vscode-languageclient to allow not notifying on certain messages\n+    // Or the ability to disable the serverside component of highlighting (but this means that to do tracing we need to disable hihlighting)\n+    // This also requires considering our settings strategy, which is work which needs doing\n+    // @ts-ignore The tracer is private to vscode-languageclient, but we need access to it to not log publishDecorations requests\n+    res._tracer = {\n+        log: (messageOrDataObject: string | any, data?: string) => {\n+            if (typeof messageOrDataObject === 'string') {\n+                if (\n+                    messageOrDataObject.includes(\n+                        'rust-analyzer/publishDecorations',\n+                    ) ||\n+                    messageOrDataObject.includes(\n+                        'rust-analyzer/decorationsRequest',\n+                    )\n+                ) {\n+                    // Don't log publish decorations requests\n+                } else {\n+                    // @ts-ignore This is just a utility function\n+                    res.logTrace(messageOrDataObject, data);\n+                }\n+            } else {\n+                // @ts-ignore\n+                res.logObjectTrace(messageOrDataObject);\n+            }\n+        },\n+    };\n+    res.registerProposedFeatures()\n+    return res;\n+}\n+function expandPathResolving(path: string) {\n+    if (path.startsWith('~/')) {\n+        return path.replace('~', homedir());\n+    }\n+    return path;\n+}"}, {"sha": "cf37dc6f03b31257cd78c2b62ec0513d1993a87b", "filename": "editors/code/src/commands/analyzer_status.ts", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d23140ba03c77b28d94e042c94155899baba9da/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6d23140ba03c77b28d94e042c94155899baba9da/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts?ref=6d23140ba03c77b28d94e042c94155899baba9da", "patch": "@@ -49,9 +49,10 @@ class TextDocumentContentProvider\n         _uri: vscode.Uri,\n     ): vscode.ProviderResult<string> {\n         const editor = vscode.window.activeTextEditor;\n-        if (editor == null) return '';\n+        const client = this.ctx.client\n+        if (!editor || !client) return '';\n \n-        return this.ctx.client.sendRequest<string>(\n+        return client.sendRequest<string>(\n             'rust-analyzer/analyzerStatus',\n             null,\n         );"}, {"sha": "472f43b8db4230bea642da430c11ea06b93753b8", "filename": "editors/code/src/commands/expand_macro.ts", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d23140ba03c77b28d94e042c94155899baba9da/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6d23140ba03c77b28d94e042c94155899baba9da/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts?ref=6d23140ba03c77b28d94e042c94155899baba9da", "patch": "@@ -52,14 +52,15 @@ class TextDocumentContentProvider\n \n     async provideTextDocumentContent(_uri: vscode.Uri): Promise<string> {\n         const editor = vscode.window.activeTextEditor;\n-        if (editor == null) return '';\n+        const client = this.ctx.client\n+        if (!editor || !client) return '';\n \n         const position = editor.selection.active;\n         const request: lc.TextDocumentPositionParams = {\n             textDocument: { uri: editor.document.uri.toString() },\n             position,\n         };\n-        const expanded = await this.ctx.client.sendRequest<ExpandedMacro>(\n+        const expanded = await client.sendRequest<ExpandedMacro>(\n             'rust-analyzer/expandMacro',\n             request,\n         );"}, {"sha": "4431fdcf68f2e6c3c61e00a6c693d417d7547204", "filename": "editors/code/src/commands/index.ts", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6d23140ba03c77b28d94e042c94155899baba9da/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6d23140ba03c77b28d94e042c94155899baba9da/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=6d23140ba03c77b28d94e042c94155899baba9da", "patch": "@@ -15,18 +15,21 @@ import { run, runSingle } from './runnables';\n \n function collectGarbage(ctx: Ctx): Cmd {\n     return async () => {\n-        ctx.client.sendRequest<null>('rust-analyzer/collectGarbage', null);\n+        ctx.client?.sendRequest<null>('rust-analyzer/collectGarbage', null);\n     };\n }\n \n function showReferences(ctx: Ctx): Cmd {\n     return (uri: string, position: lc.Position, locations: lc.Location[]) => {\n-        vscode.commands.executeCommand(\n-            'editor.action.showReferences',\n-            vscode.Uri.parse(uri),\n-            ctx.client.protocol2CodeConverter.asPosition(position),\n-            locations.map(ctx.client.protocol2CodeConverter.asLocation),\n-        );\n+        let client = ctx.client;\n+        if (client) {\n+            vscode.commands.executeCommand(\n+                'editor.action.showReferences',\n+                vscode.Uri.parse(uri),\n+                client.protocol2CodeConverter.asPosition(position),\n+                locations.map(client.protocol2CodeConverter.asLocation),\n+            );\n+        }\n     };\n }\n \n@@ -36,6 +39,13 @@ function applySourceChange(ctx: Ctx): Cmd {\n     }\n }\n \n+function reload(ctx: Ctx): Cmd {\n+    return async () => {\n+        vscode.window.showInformationMessage('Reloading rust-analyzer...');\n+        await ctx.restartServer();\n+    }\n+}\n+\n export {\n     analyzerStatus,\n     expandMacro,\n@@ -49,4 +59,5 @@ export {\n     runSingle,\n     showReferences,\n     applySourceChange,\n+    reload\n };"}, {"sha": "7b08c32550399e2978e8c5bb3505d93696d78762", "filename": "editors/code/src/commands/join_lines.ts", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d23140ba03c77b28d94e042c94155899baba9da/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6d23140ba03c77b28d94e042c94155899baba9da/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts?ref=6d23140ba03c77b28d94e042c94155899baba9da", "patch": "@@ -6,13 +6,14 @@ import { applySourceChange, SourceChange } from '../source_change';\n export function joinLines(ctx: Ctx): Cmd {\n     return async () => {\n         const editor = ctx.activeRustEditor;\n-        if (!editor) return;\n+        const client = ctx.client;\n+        if (!editor || !client) return;\n \n         const request: JoinLinesParams = {\n-            range: ctx.client.code2ProtocolConverter.asRange(editor.selection),\n+            range: client.code2ProtocolConverter.asRange(editor.selection),\n             textDocument: { uri: editor.document.uri.toString() },\n         };\n-        const change = await ctx.client.sendRequest<SourceChange>(\n+        const change = await client.sendRequest<SourceChange>(\n             'rust-analyzer/joinLines',\n             request,\n         );"}, {"sha": "ec2790b63c1af0eb53c2bfaabcc5f30526d468c3", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6d23140ba03c77b28d94e042c94155899baba9da/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6d23140ba03c77b28d94e042c94155899baba9da/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=6d23140ba03c77b28d94e042c94155899baba9da", "patch": "@@ -16,25 +16,25 @@ export interface CargoFeatures {\n }\n \n export class Config {\n-    public highlightingOn = true;\n-    public rainbowHighlightingOn = false;\n-    public enableEnhancedTyping = true;\n-    public raLspServerPath = RA_LSP_DEBUG || 'ra_lsp_server';\n-    public lruCapacity: null | number = null;\n-    public displayInlayHints = true;\n-    public maxInlayHintLength: null | number = null;\n-    public excludeGlobs = [];\n-    public useClientWatching = true;\n-    public featureFlags = {};\n+    highlightingOn = true;\n+    rainbowHighlightingOn = false;\n+    enableEnhancedTyping = true;\n+    raLspServerPath = RA_LSP_DEBUG || 'ra_lsp_server';\n+    lruCapacity: null | number = null;\n+    displayInlayHints = true;\n+    maxInlayHintLength: null | number = null;\n+    excludeGlobs = [];\n+    useClientWatching = true;\n+    featureFlags = {};\n     // for internal use\n-    public withSysroot: null | boolean = null;\n-    public cargoWatchOptions: CargoWatchOptions = {\n+    withSysroot: null | boolean = null;\n+    cargoWatchOptions: CargoWatchOptions = {\n         enable: true,\n         arguments: [],\n         command: '',\n         allTargets: true,\n     };\n-    public cargoFeatures: CargoFeatures = {\n+    cargoFeatures: CargoFeatures = {\n         noDefaultFeatures: false,\n         allFeatures: true,\n         features: [],\n@@ -43,14 +43,12 @@ export class Config {\n     private prevEnhancedTyping: null | boolean = null;\n     private prevCargoFeatures: null | CargoFeatures = null;\n \n-    constructor() {\n-        vscode.workspace.onDidChangeConfiguration(_ =>\n-            this.userConfigChanged(),\n-        );\n-        this.userConfigChanged();\n+    constructor(ctx: vscode.ExtensionContext) {\n+        vscode.workspace.onDidChangeConfiguration(_ => this.refresh(), ctx.subscriptions);\n+        this.refresh();\n     }\n \n-    public userConfigChanged() {\n+    private refresh() {\n         const config = vscode.workspace.getConfiguration('rust-analyzer');\n \n         let requireReloadMessage = null;"}, {"sha": "13988056aa789e1c0eefb4198aa7cc6a529c9e14", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 48, "deletions": 27, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/6d23140ba03c77b28d94e042c94155899baba9da/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6d23140ba03c77b28d94e042c94155899baba9da/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=6d23140ba03c77b28d94e042c94155899baba9da", "patch": "@@ -1,21 +1,38 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n-import { Server } from './server';\n import { Config } from './config';\n+import { createClient } from './client'\n \n export class Ctx {\n+    readonly config: Config;\n+    // Because we have \"reload server\" action, various listeners **will** face a\n+    // situation where the client is not ready yet, and should be prepared to\n+    // deal with it.\n+    //\n+    // Ideally, this should be replaced with async getter though.\n+    client: lc.LanguageClient | null = null\n     private extCtx: vscode.ExtensionContext;\n+    private onDidRestartHooks: Array<(client: lc.LanguageClient) => void> = [];\n \n     constructor(extCtx: vscode.ExtensionContext) {\n+        this.config = new Config(extCtx)\n         this.extCtx = extCtx;\n     }\n \n-    get client(): lc.LanguageClient {\n-        return Server.client;\n-    }\n+    async restartServer() {\n+        let old = this.client;\n+        if (old) {\n+            await old.stop()\n+        }\n+        this.client = null;\n+        const client = createClient(this.config);\n+        this.pushCleanup(client.start());\n+        await client.onReady();\n \n-    get config(): Config {\n-        return Server.config;\n+        this.client = client\n+        for (const hook of this.onDidRestartHooks) {\n+            hook(client)\n+        }\n     }\n \n     get activeRustEditor(): vscode.TextEditor | undefined {\n@@ -62,30 +79,34 @@ export class Ctx {\n         this.extCtx.subscriptions.push(d);\n     }\n \n-    async sendRequestWithRetry<R>(\n-        method: string,\n-        param: any,\n-        token?: vscode.CancellationToken,\n-    ): Promise<R> {\n-        await this.client.onReady();\n-        for (const delay of [2, 4, 6, 8, 10, null]) {\n-            try {\n-                return await (token ? this.client.sendRequest(method, param, token) : this.client.sendRequest(method, param));\n-            } catch (e) {\n-                if (\n-                    e.code === lc.ErrorCodes.ContentModified &&\n-                    delay !== null\n-                ) {\n-                    await sleep(10 * (1 << delay));\n-                    continue;\n-                }\n-                throw e;\n-            }\n-        }\n-        throw 'unreachable';\n+    onDidRestart(hook: (client: lc.LanguageClient) => void) {\n+        this.onDidRestartHooks.push(hook)\n     }\n }\n \n export type Cmd = (...args: any[]) => any;\n \n+export async function sendRequestWithRetry<R>(\n+    client: lc.LanguageClient,\n+    method: string,\n+    param: any,\n+    token?: vscode.CancellationToken,\n+): Promise<R> {\n+    for (const delay of [2, 4, 6, 8, 10, null]) {\n+        try {\n+            return await (token ? client.sendRequest(method, param, token) : client.sendRequest(method, param));\n+        } catch (e) {\n+            if (\n+                e.code === lc.ErrorCodes.ContentModified &&\n+                delay !== null\n+            ) {\n+                await sleep(10 * (1 << delay));\n+                continue;\n+            }\n+            throw e;\n+        }\n+    }\n+    throw 'unreachable';\n+}\n+\n const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));"}, {"sha": "f9d2e9d909cb0cbc53b7e232607cdfa17755b1ab", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6d23140ba03c77b28d94e042c94155899baba9da/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6d23140ba03c77b28d94e042c94155899baba9da/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=6d23140ba03c77b28d94e042c94155899baba9da", "patch": "@@ -5,13 +5,12 @@ const seedrandom = seedrandom_; // https://github.com/jvandemo/generator-angular\n \n import { ColorTheme, TextMateRuleSettings } from './color_theme';\n \n-import { Ctx } from './ctx';\n+import { Ctx, sendRequestWithRetry } from './ctx';\n \n export function activateHighlighting(ctx: Ctx) {\n     const highlighter = new Highlighter(ctx);\n-\n-    ctx.client.onReady().then(() => {\n-        ctx.client.onNotification(\n+    ctx.onDidRestart(client => {\n+        client.onNotification(\n             'rust-analyzer/publishDecorations',\n             (params: PublishDecorationsParams) => {\n                 if (!ctx.config.highlightingOn) return;\n@@ -31,7 +30,7 @@ export function activateHighlighting(ctx: Ctx) {\n                 highlighter.setHighlights(targetEditor, params.decorations);\n             },\n         );\n-    });\n+    })\n \n     vscode.workspace.onDidChangeConfiguration(\n         _ => highlighter.removeHighlights(),\n@@ -42,11 +41,14 @@ export function activateHighlighting(ctx: Ctx) {\n         async (editor: vscode.TextEditor | undefined) => {\n             if (!editor || editor.document.languageId !== 'rust') return;\n             if (!ctx.config.highlightingOn) return;\n+            let client = ctx.client;\n+            if (!client) return;\n \n             const params: lc.TextDocumentIdentifier = {\n                 uri: editor.document.uri.toString(),\n             };\n-            const decorations = await ctx.sendRequestWithRetry<Decoration[]>(\n+            const decorations = await sendRequestWithRetry<Decoration[]>(\n+                client,\n                 'rust-analyzer/decorationsRequest',\n                 params,\n             );\n@@ -105,6 +107,8 @@ class Highlighter {\n     }\n \n     public setHighlights(editor: vscode.TextEditor, highlights: Decoration[]) {\n+        let client = this.ctx.client;\n+        if (!client) return;\n         // Initialize decorations if necessary\n         //\n         // Note: decoration objects need to be kept around so we can dispose them\n@@ -137,13 +141,13 @@ class Highlighter {\n                 colorfulIdents\n                     .get(d.bindingHash)![0]\n                     .push(\n-                        this.ctx.client.protocol2CodeConverter.asRange(d.range),\n+                        client.protocol2CodeConverter.asRange(d.range),\n                     );\n             } else {\n                 byTag\n                     .get(d.tag)!\n                     .push(\n-                        this.ctx.client.protocol2CodeConverter.asRange(d.range),\n+                        client.protocol2CodeConverter.asRange(d.range),\n                     );\n             }\n         }"}, {"sha": "e74d6996f844319643c2a392d177e45c445d3843", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6d23140ba03c77b28d94e042c94155899baba9da/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6d23140ba03c77b28d94e042c94155899baba9da/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=6d23140ba03c77b28d94e042c94155899baba9da", "patch": "@@ -1,7 +1,7 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n \n-import { Ctx } from './ctx';\n+import { Ctx, sendRequestWithRetry } from './ctx';\n \n export function activateInlayHints(ctx: Ctx) {\n     const hintsUpdater = new HintsUpdater(ctx);\n@@ -19,9 +19,7 @@ export function activateInlayHints(ctx: Ctx) {\n         hintsUpdater.setEnabled(ctx.config.displayInlayHints);\n     }, ctx.subscriptions);\n \n-    // XXX: don't await here;\n-    // Who knows what happens if an exception is thrown here...\n-    hintsUpdater.refresh();\n+    ctx.onDidRestart(_ => hintsUpdater.setEnabled(ctx.config.displayInlayHints))\n }\n \n interface InlayHintsParams {\n@@ -97,6 +95,8 @@ class HintsUpdater {\n     }\n \n     private async queryHints(documentUri: string): Promise<InlayHint[] | null> {\n+        let client = this.ctx.client;\n+        if (!client) return null\n         const request: InlayHintsParams = {\n             textDocument: { uri: documentUri },\n         };\n@@ -105,7 +105,8 @@ class HintsUpdater {\n         if (prev) prev.cancel();\n         this.pending.set(documentUri, tokenSource);\n         try {\n-            return await this.ctx.sendRequestWithRetry<InlayHint[] | null>(\n+            return await sendRequestWithRetry<InlayHint[] | null>(\n+                client,\n                 'rust-analyzer/inlayHints',\n                 request,\n                 tokenSource.token,"}, {"sha": "51dedd5efc7a9e96aacd805a999ef53c30aeed7e", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 17, "deletions": 44, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/6d23140ba03c77b28d94e042c94155899baba9da/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6d23140ba03c77b28d94e042c94155899baba9da/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=6d23140ba03c77b28d94e042c94155899baba9da", "patch": "@@ -1,10 +1,8 @@\n import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient';\n \n import * as commands from './commands';\n import { activateInlayHints } from './inlay_hints';\n-import { StatusDisplay } from './status_display';\n-import { Server } from './server';\n+import { activateStatusDisplay } from './status_display';\n import { Ctx } from './ctx';\n import { activateHighlighting } from './highlighting';\n \n@@ -13,6 +11,17 @@ let ctx!: Ctx;\n export async function activate(context: vscode.ExtensionContext) {\n     ctx = new Ctx(context);\n \n+    // Note: we try to start the server before we register various commands, so\n+    // that it registers its `onDidChangeDocument` handler before us.\n+    //\n+    // This a horribly, horribly wrong way to deal with this problem.\n+    try {\n+        await ctx.restartServer();\n+    } catch (e) {\n+        vscode.window.showErrorMessage(e.message);\n+    }\n+\n+\n     // Commands which invokes manually via command pallet, shortcut, etc.\n     ctx.registerCommand('analyzerStatus', commands.analyzerStatus);\n     ctx.registerCommand('collectGarbage', commands.collectGarbage);\n@@ -22,6 +31,7 @@ export async function activate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('syntaxTree', commands.syntaxTree);\n     ctx.registerCommand('expandMacro', commands.expandMacro);\n     ctx.registerCommand('run', commands.run);\n+    ctx.registerCommand('reload', commands.reload);\n \n     // Internal commands which are invoked by the server.\n     ctx.registerCommand('runSingle', commands.runSingle);\n@@ -31,48 +41,11 @@ export async function activate(context: vscode.ExtensionContext) {\n     if (ctx.config.enableEnhancedTyping) {\n         ctx.overrideCommand('type', commands.onEnter);\n     }\n-\n-    const watchStatus = new StatusDisplay(ctx.config.cargoWatchOptions.command);\n-    ctx.pushCleanup(watchStatus);\n-\n-    // Notifications are events triggered by the language server\n-    const allNotifications: [string, lc.GenericNotificationHandler][] = [\n-        [\n-            '$/progress',\n-            params => watchStatus.handleProgressNotification(params),\n-        ],\n-    ];\n-\n-    const startServer = () => Server.start(allNotifications);\n-    const reloadCommand = () => reloadServer(startServer);\n-\n-    vscode.commands.registerCommand('rust-analyzer.reload', reloadCommand);\n-\n-    // Start the language server, finally!\n-    try {\n-        await startServer();\n-    } catch (e) {\n-        vscode.window.showErrorMessage(e.message);\n-    }\n-\n+    activateStatusDisplay(ctx);\n     activateHighlighting(ctx);\n-\n-    if (ctx.config.displayInlayHints) {\n-        activateInlayHints(ctx);\n-    }\n+    activateInlayHints(ctx);\n }\n \n-export function deactivate(): Thenable<void> {\n-    if (!Server.client) {\n-        return Promise.resolve();\n-    }\n-    return Server.client.stop();\n-}\n-\n-async function reloadServer(startServer: () => Promise<void>) {\n-    if (Server.client != null) {\n-        vscode.window.showInformationMessage('Reloading rust-analyzer...');\n-        await Server.client.stop();\n-        await startServer();\n-    }\n+export async function deactivate() {\n+    await ctx?.client?.stop();\n }"}, {"sha": "2bb21da6bef4c6414e4b08fb3db92ae7c17a4557", "filename": "editors/code/src/server.ts", "status": "removed", "additions": 0, "deletions": 102, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/1327aed7f6289043091aa9179282030c6f13ddbe/editors%2Fcode%2Fsrc%2Fserver.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1327aed7f6289043091aa9179282030c6f13ddbe/editors%2Fcode%2Fsrc%2Fserver.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fserver.ts?ref=1327aed7f6289043091aa9179282030c6f13ddbe", "patch": "@@ -1,102 +0,0 @@\n-import { homedir } from 'os';\n-import * as lc from 'vscode-languageclient';\n-\n-import { window, workspace } from 'vscode';\n-import { Config } from './config';\n-\n-function expandPathResolving(path: string) {\n-    if (path.startsWith('~/')) {\n-        return path.replace('~', homedir());\n-    }\n-    return path;\n-}\n-\n-export class Server {\n-    public static config = new Config();\n-    public static client: lc.LanguageClient;\n-\n-    public static async start(\n-        notificationHandlers: Iterable<[string, lc.GenericNotificationHandler]>,\n-    ) {\n-        // '.' Is the fallback if no folder is open\n-        // TODO?: Workspace folders support Uri's (eg: file://test.txt). It might be a good idea to test if the uri points to a file.\n-        let folder: string = '.';\n-        if (workspace.workspaceFolders !== undefined) {\n-            folder = workspace.workspaceFolders[0].uri.fsPath.toString();\n-        }\n-\n-        const command = expandPathResolving(this.config.raLspServerPath);\n-        const run: lc.Executable = {\n-            command,\n-            options: { cwd: folder },\n-        };\n-        const serverOptions: lc.ServerOptions = {\n-            run,\n-            debug: run,\n-        };\n-        const traceOutputChannel = window.createOutputChannel(\n-            'Rust Analyzer Language Server Trace',\n-        );\n-        const clientOptions: lc.LanguageClientOptions = {\n-            documentSelector: [{ scheme: 'file', language: 'rust' }],\n-            initializationOptions: {\n-                publishDecorations: true,\n-                lruCapacity: Server.config.lruCapacity,\n-                maxInlayHintLength: Server.config.maxInlayHintLength,\n-                cargoWatchEnable: Server.config.cargoWatchOptions.enable,\n-                cargoWatchArgs: Server.config.cargoWatchOptions.arguments,\n-                cargoWatchCommand: Server.config.cargoWatchOptions.command,\n-                cargoWatchAllTargets:\n-                    Server.config.cargoWatchOptions.allTargets,\n-                excludeGlobs: Server.config.excludeGlobs,\n-                useClientWatching: Server.config.useClientWatching,\n-                featureFlags: Server.config.featureFlags,\n-                withSysroot: Server.config.withSysroot,\n-                cargoFeatures: Server.config.cargoFeatures,\n-            },\n-            traceOutputChannel,\n-        };\n-\n-        Server.client = new lc.LanguageClient(\n-            'rust-analyzer',\n-            'Rust Analyzer Language Server',\n-            serverOptions,\n-            clientOptions,\n-        );\n-        // HACK: This is an awful way of filtering out the decorations notifications\n-        // However, pending proper support, this is the most effecitve approach\n-        // Proper support for this would entail a change to vscode-languageclient to allow not notifying on certain messages\n-        // Or the ability to disable the serverside component of highlighting (but this means that to do tracing we need to disable hihlighting)\n-        // This also requires considering our settings strategy, which is work which needs doing\n-        // @ts-ignore The tracer is private to vscode-languageclient, but we need access to it to not log publishDecorations requests\n-        Server.client._tracer = {\n-            log: (messageOrDataObject: string | any, data?: string) => {\n-                if (typeof messageOrDataObject === 'string') {\n-                    if (\n-                        messageOrDataObject.includes(\n-                            'rust-analyzer/publishDecorations',\n-                        ) ||\n-                        messageOrDataObject.includes(\n-                            'rust-analyzer/decorationsRequest',\n-                        )\n-                    ) {\n-                        // Don't log publish decorations requests\n-                    } else {\n-                        // @ts-ignore This is just a utility function\n-                        Server.client.logTrace(messageOrDataObject, data);\n-                    }\n-                } else {\n-                    // @ts-ignore\n-                    Server.client.logObjectTrace(messageOrDataObject);\n-                }\n-            },\n-        };\n-        Server.client.registerProposedFeatures();\n-        Server.client.onReady().then(() => {\n-            for (const [type, handler] of notificationHandlers) {\n-                Server.client.onNotification(type, handler);\n-            }\n-        });\n-        Server.client.start();\n-    }\n-}"}, {"sha": "887191d9e5335eb663e1f81a39586f8f4c1d273a", "filename": "editors/code/src/source_change.ts", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6d23140ba03c77b28d94e042c94155899baba9da/editors%2Fcode%2Fsrc%2Fsource_change.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6d23140ba03c77b28d94e042c94155899baba9da/editors%2Fcode%2Fsrc%2Fsource_change.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fsource_change.ts?ref=6d23140ba03c77b28d94e042c94155899baba9da", "patch": "@@ -10,7 +10,10 @@ export interface SourceChange {\n }\n \n export async function applySourceChange(ctx: Ctx, change: SourceChange) {\n-    const wsEdit = ctx.client.protocol2CodeConverter.asWorkspaceEdit(\n+    const client = ctx.client;\n+    if (!client) return\n+\n+    const wsEdit = client.protocol2CodeConverter.asWorkspaceEdit(\n         change.workspaceEdit,\n     );\n     let created;\n@@ -32,10 +35,10 @@ export async function applySourceChange(ctx: Ctx, change: SourceChange) {\n         const doc = await vscode.workspace.openTextDocument(toOpenUri);\n         await vscode.window.showTextDocument(doc);\n     } else if (toReveal) {\n-        const uri = ctx.client.protocol2CodeConverter.asUri(\n+        const uri = client.protocol2CodeConverter.asUri(\n             toReveal.textDocument.uri,\n         );\n-        const position = ctx.client.protocol2CodeConverter.asPosition(\n+        const position = client.protocol2CodeConverter.asPosition(\n             toReveal.position,\n         );\n         const editor = vscode.window.activeTextEditor;"}, {"sha": "1454bf8b00cf2824e68b6cf619cf483811ae2b01", "filename": "editors/code/src/status_display.ts", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d23140ba03c77b28d94e042c94155899baba9da/editors%2Fcode%2Fsrc%2Fstatus_display.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6d23140ba03c77b28d94e042c94155899baba9da/editors%2Fcode%2Fsrc%2Fstatus_display.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fstatus_display.ts?ref=6d23140ba03c77b28d94e042c94155899baba9da", "patch": "@@ -1,8 +1,18 @@\n import * as vscode from 'vscode';\n \n+import { Ctx } from './ctx';\n+\n const spinnerFrames = ['\u280b', '\u2819', '\u2839', '\u2838', '\u283c', '\u2834', '\u2826', '\u2827', '\u2807', '\u280f'];\n \n-export class StatusDisplay implements vscode.Disposable {\n+export function activateStatusDisplay(ctx: Ctx) {\n+    const statusDisplay = new StatusDisplay(ctx.config.cargoWatchOptions.command);\n+    ctx.pushCleanup(statusDisplay);\n+    ctx.onDidRestart(client => {\n+        client.onNotification('$/progress', params => statusDisplay.handleProgressNotification(params));\n+    })\n+}\n+\n+class StatusDisplay implements vscode.Disposable {\n     packageName?: string;\n \n     private i = 0;"}]}