{"sha": "1e7a6b880c84176a11525e7be5b5a9b15f8143b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlN2E2Yjg4MGM4NDE3NmExMTUyNWU3YmU1YjVhOWIxNWY4MTQzYjE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-06-17T14:08:26Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-07-03T23:42:35Z"}, "message": "After inferring regions, scan for any bounds that are due to a lifetime\nbound that is likely to change. In that case, it will change to 'static,\nso then scan down the graph to see whether there are any hard\nconstraints that would prevent 'static from being a valid value\nhere. Report a warning.", "tree": {"sha": "ffa197b3112b9d2e51bae5938ead29658682e160", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffa197b3112b9d2e51bae5938ead29658682e160"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e7a6b880c84176a11525e7be5b5a9b15f8143b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e7a6b880c84176a11525e7be5b5a9b15f8143b1", "html_url": "https://github.com/rust-lang/rust/commit/1e7a6b880c84176a11525e7be5b5a9b15f8143b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e7a6b880c84176a11525e7be5b5a9b15f8143b1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "909957793e7008e602079e8fd4c74c9bbda37341", "url": "https://api.github.com/repos/rust-lang/rust/commits/909957793e7008e602079e8fd4c74c9bbda37341", "html_url": "https://github.com/rust-lang/rust/commit/909957793e7008e602079e8fd4c74c9bbda37341"}], "stats": {"total": 168, "additions": 168, "deletions": 0}, "files": [{"sha": "38df0284371d073ea8bab1ea90767bcead57d0ff", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1e7a6b880c84176a11525e7be5b5a9b15f8143b1/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7a6b880c84176a11525e7be5b5a9b15f8143b1/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=1e7a6b880c84176a11525e7be5b5a9b15f8143b1", "patch": "@@ -1160,6 +1160,42 @@ static mut FOO: Option<Box<usize>> = None;\n // error: mutable statics are not allowed to have destructors\n static mut BAR: Option<Vec<i32>> = None;\n ```\n+\"##,\n+\n+E0398: r##\"\n+In Rust 1.3, the default object lifetime bounds are expected to\n+change, as described in RFC #1156 [1]. You are getting a warning\n+because the compiler thinks it is possible that this change will cause\n+a compilation error in your code. It is possible, though unlikely,\n+that this is a false alarm.\n+\n+The heart of the change is that where `&'a Box<SomeTrait>` used to\n+default to `&'a Box<SomeTrait+'a>`, it now defaults to `&'a\n+Box<SomeTrait+'static>` (here, `SomeTrait` is the name of some trait\n+type). Note that the only types which are affected are references to\n+boxes, like `&Box<SomeTrait>` or `&[Box<SomeTrait>]`.  More common\n+types like `&SomeTrait` or `Box<SomeTrait>` are unaffected.\n+\n+To silence this warning, edit your code to use an explicit bound.\n+Most of the time, this means that you will want to change the\n+signature of a function that you are calling. For example, if\n+the error is reported on a call like `foo(x)`, and `foo` is\n+defined as follows:\n+\n+```\n+fn foo(arg: &Box<SomeTrait>) { ... }\n+```\n+\n+you might change it to:\n+\n+```\n+fn foo<'a>(arg: &Box<SomeTrait+'a>) { ... }\n+```\n+\n+This explicitly states that you expect the trait object `SomeTrait` to\n+contain references (with a maximum lifetime of `'a`).\n+\n+[1]: https://github.com/rust-lang/rfcs/pull/1156\n \"##\n \n }"}, {"sha": "891a39e723a62357ea34bc8a5c2aade37b3b3550", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1e7a6b880c84176a11525e7be5b5a9b15f8143b1/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7a6b880c84176a11525e7be5b5a9b15f8143b1/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=1e7a6b880c84176a11525e7be5b5a9b15f8143b1", "patch": "@@ -1358,9 +1358,56 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n             }\n         }\n \n+        // Check for future hostile edges tied to a bad default\n+        self.report_future_hostility(&graph);\n+\n         (0..self.num_vars() as usize).map(|idx| var_data[idx].value).collect()\n     }\n \n+    fn report_future_hostility(&self, graph: &RegionGraph) {\n+        let constraints = self.constraints.borrow();\n+        for edge in graph.all_edges() {\n+            match constraints[&edge.data] {\n+                SubregionOrigin::DefaultExistentialBound(_) => {\n+                    // this will become 'static in the future\n+                }\n+                _ => { continue; }\n+            }\n+\n+            // this constraint will become a 'static constraint in the\n+            // future, so walk outward and see if we have any hard\n+            // bounds that could not be inferred to 'static\n+            for nid in graph.depth_traverse(edge.target()) {\n+                for (_, succ) in graph.outgoing_edges(nid) {\n+                    match succ.data {\n+                        ConstrainVarSubReg(_, r) => {\n+                            match r {\n+                                ty::ReStatic | ty::ReInfer(_) => {\n+                                    /* OK */\n+                                }\n+                                ty::ReFree(_) | ty::ReScope(_) | ty::ReEmpty => {\n+                                    span_warn!(\n+                                        self.tcx.sess,\n+                                        constraints[&edge.data].span(),\n+                                        E0398,\n+                                        \"this code may fail to compile in Rust 1.3 due to \\\n+                                         the proposed change in object lifetime bound defaults\");\n+                                    return; // only issue the warning once per fn\n+                                }\n+                                ty::ReEarlyBound(..) | ty::ReLateBound(..) => {\n+                                    self.tcx.sess.span_bug(\n+                                        constraints[&succ.data].span(),\n+                                        \"relation to bound region\");\n+                                }\n+                            }\n+                        }\n+                        _ => { }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     fn construct_graph(&self) -> RegionGraph {\n         let num_vars = self.num_vars();\n "}, {"sha": "95f8b39c48745670db95b4248af6eab597806c18", "filename": "src/test/auxiliary/lifetime_bound_will_change_warning_lib.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1e7a6b880c84176a11525e7be5b5a9b15f8143b1/src%2Ftest%2Fauxiliary%2Flifetime_bound_will_change_warning_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7a6b880c84176a11525e7be5b5a9b15f8143b1/src%2Ftest%2Fauxiliary%2Flifetime_bound_will_change_warning_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flifetime_bound_will_change_warning_lib.rs?ref=1e7a6b880c84176a11525e7be5b5a9b15f8143b1", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+\n+// Helper for testing that we get suitable warnings when lifetime\n+// bound change will cause breakage.\n+\n+pub fn just_ref(x: &Fn()) {\n+}\n+\n+pub fn ref_obj(x: &Box<Fn()>) {\n+    // this will change to &Box<Fn()+'static>...\n+}"}, {"sha": "4b575703e7c7575672c0455f7d446b4e3d93ba16", "filename": "src/test/compile-fail/lifetime-bound-will-change-warning.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/1e7a6b880c84176a11525e7be5b5a9b15f8143b1/src%2Ftest%2Fcompile-fail%2Flifetime-bound-will-change-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7a6b880c84176a11525e7be5b5a9b15f8143b1/src%2Ftest%2Fcompile-fail%2Flifetime-bound-will-change-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-bound-will-change-warning.rs?ref=1e7a6b880c84176a11525e7be5b5a9b15f8143b1", "patch": "@@ -0,0 +1,64 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:lifetime_bound_will_change_warning_lib.rs\n+\n+// Test that we get suitable warnings when lifetime bound change will\n+// cause breakage.\n+\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+#![feature(rustc_attrs)]\n+\n+extern crate lifetime_bound_will_change_warning_lib as lib;\n+\n+fn just_ref(x: &Fn()) {\n+}\n+\n+fn ref_obj(x: &Box<Fn()>) {\n+    // this will change to &Box<Fn()+'static>...\n+\n+    // Note: no warning is issued here, because the type of `x` will change to 'static\n+    if false { ref_obj(x); }\n+}\n+\n+fn test1<'a>(x: &'a Box<Fn()+'a>) {\n+    // just_ref will stay the same.\n+    just_ref(&**x)\n+}\n+\n+fn test1cc<'a>(x: &'a Box<Fn()+'a>) {\n+    // same as test1, but cross-crate\n+    lib::just_ref(&**x)\n+}\n+\n+fn test2<'a>(x: &'a Box<Fn()+'a>) {\n+    // but ref_obj will not, so warn.\n+    ref_obj(x) //~ WARNING this code may fail to compile in Rust 1.3\n+}\n+\n+fn test2cc<'a>(x: &'a Box<Fn()+'a>) {\n+    // same as test2, but cross crate\n+    lib::ref_obj(x) //~ WARNING this code may fail to compile in Rust 1.3\n+}\n+\n+fn test3<'a>(x: &'a Box<Fn()+'static>) {\n+    // here, we have a 'static bound, so even when ref_obj changes, no error results\n+    ref_obj(x)\n+}\n+\n+fn test3cc<'a>(x: &'a Box<Fn()+'static>) {\n+    // same as test3, but cross crate\n+    lib::ref_obj(x)\n+}\n+\n+#[rustc_error]\n+fn main() { //~ ERROR compilation successful\n+}"}]}