{"sha": "5a7b377b6f71f75c9b3201d7af735b74aa8adf27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhN2IzNzdiNmY3MWY3NWM5YjMyMDFkN2FmNzM1Yjc0YWE4YWRmMjc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-29T19:23:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-29T19:23:52Z"}, "message": "Rollup merge of #70539 - DutchGhost:test-62220, r=Dylan-DPC\n\nadd test for 62220\n\nCloses #62220\n\nAdds a test for https://github.com/rust-lang/rust/issues/62220.\n\nIm not sure whether `check-pass` is sufficient here. I didn't put `run-pass` in, as I'm afraid that'll fail due to the `unimplemented!()` return in the code.", "tree": {"sha": "a339783b6360b4e3b7dd28e21082d71d340ee8e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a339783b6360b4e3b7dd28e21082d71d340ee8e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a7b377b6f71f75c9b3201d7af735b74aa8adf27", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJegPXICRBK7hj4Ov3rIwAAdHIIAGX9ArEIAgxcoEMkEjrrkfJI\n05/VuLV/otGUT9AuZ7X6ZrLvFUCvFZ/uT6iV7q3J3TtzCKRJTpOdT/YHGcP1C2gc\nLdwAoXInkuhpkwMzqUglAxI0SiZd/+UebiY2QS4ufgiosYah2E+2Hi6SfyoWhmYS\n4DxJ+hZi+1Q55v6+edu/Az4wWclPqyTNwH8VWoUo5NK/L6BLHR41xKZ+6OHCP75W\naOPnywu6QkOgOdBU40soOAytfTRzFvq+RHWHTtsVkWG8VK7v9XLIdUBEt1rQGBPA\nOlI8tEduUtLTj0JFjDlao/WCPPtEYA6vhfmg9h+qfDgVLPH4645gLC0ufqBFn40=\n=zLua\n-----END PGP SIGNATURE-----\n", "payload": "tree a339783b6360b4e3b7dd28e21082d71d340ee8e9\nparent d009ce441f59f6a65111d94bb822a1c28872006a\nparent 61d419314f3ea5c8e7d3380afc019db1070c4744\nauthor Dylan DPC <dylan.dpc@gmail.com> 1585509832 +0200\ncommitter GitHub <noreply@github.com> 1585509832 +0200\n\nRollup merge of #70539 - DutchGhost:test-62220, r=Dylan-DPC\n\nadd test for 62220\n\nCloses #62220\n\nAdds a test for https://github.com/rust-lang/rust/issues/62220.\n\nIm not sure whether `check-pass` is sufficient here. I didn't put `run-pass` in, as I'm afraid that'll fail due to the `unimplemented!()` return in the code.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a7b377b6f71f75c9b3201d7af735b74aa8adf27", "html_url": "https://github.com/rust-lang/rust/commit/5a7b377b6f71f75c9b3201d7af735b74aa8adf27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a7b377b6f71f75c9b3201d7af735b74aa8adf27/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d009ce441f59f6a65111d94bb822a1c28872006a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d009ce441f59f6a65111d94bb822a1c28872006a", "html_url": "https://github.com/rust-lang/rust/commit/d009ce441f59f6a65111d94bb822a1c28872006a"}, {"sha": "61d419314f3ea5c8e7d3380afc019db1070c4744", "url": "https://api.github.com/repos/rust-lang/rust/commits/61d419314f3ea5c8e7d3380afc019db1070c4744", "html_url": "https://github.com/rust-lang/rust/commit/61d419314f3ea5c8e7d3380afc019db1070c4744"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "c95b30632017531dd5d2ab0810c90bafc0014d9f", "filename": "src/test/ui/const-generics/issues/issue-62220.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5a7b377b6f71f75c9b3201d7af735b74aa8adf27/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7b377b6f71f75c9b3201d7af735b74aa8adf27/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs?ref=5a7b377b6f71f75c9b3201d7af735b74aa8adf27", "patch": "@@ -0,0 +1,22 @@\n+// build-pass\n+#![allow(incomplete_features)]\n+\n+#![feature(const_generics)]\n+pub struct Vector<T, const N: usize>([T; N]);\n+\n+pub type TruncatedVector<T, const N: usize> = Vector<T, { N - 1 }>;\n+\n+impl<T, const N: usize> Vector<T, { N }> {\n+    /// Drop the last component and return the vector with one fewer dimension.\n+    pub fn trunc(self) -> (TruncatedVector<T, { N }>, T) {\n+        unimplemented!()\n+    }\n+}\n+\n+fn vec4<T>(a: T, b: T, c: T, d: T) -> Vector<T, 4> {\n+    Vector([a, b, c, d])\n+}\n+\n+fn main() {\n+    let (_xyz, _w): (TruncatedVector<u32, 4>, u32) = vec4(0u32, 1, 2, 3).trunc();\n+}"}]}