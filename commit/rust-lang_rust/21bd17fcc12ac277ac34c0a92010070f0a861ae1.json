{"sha": "21bd17fcc12ac277ac34c0a92010070f0a861ae1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYmQxN2ZjYzEyYWMyNzdhYzM0YzBhOTIwMTAwNzBmMGE4NjFhZTE=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-08-15T05:47:28Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-08-21T01:02:24Z"}, "message": "Stage #[repr(packed)] in std::rt", "tree": {"sha": "febd8dbb212ff60fd3e3e47ee64c5cb274de18b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/febd8dbb212ff60fd3e3e47ee64c5cb274de18b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21bd17fcc12ac277ac34c0a92010070f0a861ae1", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21bd17fcc12ac277ac34c0a92010070f0a861ae1", "html_url": "https://github.com/rust-lang/rust/commit/21bd17fcc12ac277ac34c0a92010070f0a861ae1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21bd17fcc12ac277ac34c0a92010070f0a861ae1/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf5d28083dc25ae9a395b7e55e98af9c621574dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf5d28083dc25ae9a395b7e55e98af9c621574dc", "html_url": "https://github.com/rust-lang/rust/commit/cf5d28083dc25ae9a395b7e55e98af9c621574dc"}], "stats": {"total": 48, "additions": 40, "deletions": 8}, "files": [{"sha": "64537ea12d983ec58c3a041f54c4f8c771fa8e65", "filename": "src/libgreen/context.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21bd17fcc12ac277ac34c0a92010070f0a861ae1/src%2Flibgreen%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bd17fcc12ac277ac34c0a92010070f0a861ae1/src%2Flibgreen%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fcontext.rs?ref=21bd17fcc12ac277ac34c0a92010070f0a861ae1", "patch": "@@ -166,16 +166,16 @@ fn new_regs() -> Box<Registers> {\n \n #[cfg(target_arch = \"x86\")]\n fn initialize_call_frame(regs: &mut Registers, fptr: InitFn, arg: uint,\n-                         procedure: raw::Procedure, sp: *mut libc::uintptr_t) {\n-\n+                         procedure: raw::Procedure, sp: *mut uint) {\n+    let sp = sp as *mut uint;\n     // x86 has interesting stack alignment requirements, so do some alignment\n     // plus some offsetting to figure out what the actual stack should be.\n     let sp = align_down(sp);\n     let sp = mut_offset(sp, -4);\n \n-    unsafe { *mut_offset(sp, 2) = procedure.env as libc::uintptr_t };\n-    unsafe { *mut_offset(sp, 1) = procedure.code as libc::uintptr_t };\n-    unsafe { *mut_offset(sp, 0) = arg as libc::uintptr_t };\n+    unsafe { *mut_offset(sp, 2) = procedure.env as uint };\n+    unsafe { *mut_offset(sp, 1) = procedure.code as uint };\n+    unsafe { *mut_offset(sp, 0) = arg as uint };\n     let sp = mut_offset(sp, -1);\n     unsafe { *sp = 0 }; // The final return address\n \n@@ -316,7 +316,7 @@ fn initialize_call_frame(regs: &mut Registers, fptr: InitFn, arg: uint,\n }\n \n fn align_down(sp: *mut uint) -> *mut uint {\n-    let sp = (sp as libc::uintptr_t) & !(16 - 1);\n+    let sp = (sp as uint) & !(16 - 1);\n     sp as *mut uint\n }\n "}, {"sha": "4673e7b3ba2092b318b807fe42f140528ebae3fd", "filename": "src/libgreen/stack.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/21bd17fcc12ac277ac34c0a92010070f0a861ae1/src%2Flibgreen%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bd17fcc12ac277ac34c0a92010070f0a861ae1/src%2Flibgreen%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fstack.rs?ref=21bd17fcc12ac277ac34c0a92010070f0a861ae1", "patch": "@@ -68,7 +68,8 @@ impl Stack {\n \n         // FIXME: Using the FFI to call a C macro. Slow\n         stk.valgrind_id = unsafe {\n-            rust_valgrind_stack_register(stk.start() as *const libc::uintptr_t, stk.end() as *const libc::uintptr_t)\n+            rust_valgrind_stack_register(stk.start() as *const libc::uintptr_t,\n+                                         stk.end() as *const libc::uintptr_t)\n         };\n         return stk;\n     }"}, {"sha": "1b005f49b8818ba78fb44cc1946828d8e80e2da1", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/21bd17fcc12ac277ac34c0a92010070f0a861ae1/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bd17fcc12ac277ac34c0a92010070f0a861ae1/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=21bd17fcc12ac277ac34c0a92010070f0a861ae1", "patch": "@@ -701,7 +701,8 @@ mod imp {\n     static IMAGE_FILE_MACHINE_IA64: libc::DWORD = 0x0200;\n     static IMAGE_FILE_MACHINE_AMD64: libc::DWORD = 0x8664;\n \n-    #[repr(packed)]\n+    #[cfg(stage0)]\n+    #[packed]\n     struct SYMBOL_INFO {\n         SizeOfStruct: libc::c_ulong,\n         TypeIndex: libc::c_ulong,\n@@ -723,6 +724,30 @@ mod imp {\n         Name: [libc::c_char, ..MAX_SYM_NAME],\n     }\n \n+    #[cfg(not(stage0))]\n+    #[repr(C, packed)]\n+    struct SYMBOL_INFO {\n+        SizeOfStruct: libc::c_ulong,\n+        TypeIndex: libc::c_ulong,\n+        Reserved: [u64, ..2],\n+        Index: libc::c_ulong,\n+        Size: libc::c_ulong,\n+        ModBase: u64,\n+        Flags: libc::c_ulong,\n+        Value: u64,\n+        Address: u64,\n+        Register: libc::c_ulong,\n+        Scope: libc::c_ulong,\n+        Tag: libc::c_ulong,\n+        NameLen: libc::c_ulong,\n+        MaxNameLen: libc::c_ulong,\n+        // note that windows has this as 1, but it basically just means that\n+        // the name is inline at the end of the struct. For us, we just bump\n+        // the struct size up to MAX_SYM_NAME.\n+        Name: [libc::c_char, ..MAX_SYM_NAME],\n+    }\n+\n+\n     #[repr(C)]\n     enum ADDRESS_MODE {\n         AddrMode1616,\n@@ -772,6 +797,7 @@ mod imp {\n \n         static MAXIMUM_SUPPORTED_EXTENSION: uint = 512;\n \n+        #[repr(C)]\n         pub struct CONTEXT {\n             ContextFlags: libc::DWORD,\n             Dr0: libc::DWORD,\n@@ -800,6 +826,7 @@ mod imp {\n             ExtendedRegisters: [u8, ..MAXIMUM_SUPPORTED_EXTENSION],\n         }\n \n+        #[repr(C)]\n         pub struct FLOATING_SAVE_AREA {\n             ControlWord: libc::DWORD,\n             StatusWord: libc::DWORD,\n@@ -829,6 +856,7 @@ mod imp {\n         use libc::{c_longlong, c_ulonglong};\n         use libc::types::os::arch::extra::{WORD, DWORD, DWORDLONG};\n \n+        #[repr(C)]\n         pub struct CONTEXT {\n             P1Home: DWORDLONG,\n             P2Home: DWORDLONG,\n@@ -886,11 +914,13 @@ mod imp {\n             LastExceptionFromRip: DWORDLONG,\n         }\n \n+        #[repr(C)]\n         pub struct M128A {\n             Low:  c_ulonglong,\n             High: c_longlong\n         }\n \n+        #[repr(C)]\n         pub struct FLOATING_SAVE_AREA {\n             _Dummy: [u8, ..512] // FIXME: Fill this out\n         }\n@@ -907,6 +937,7 @@ mod imp {\n         }\n     }\n \n+    #[repr(C)]\n     struct Cleanup {\n         handle: libc::HANDLE,\n         SymCleanup: SymCleanupFn,"}]}