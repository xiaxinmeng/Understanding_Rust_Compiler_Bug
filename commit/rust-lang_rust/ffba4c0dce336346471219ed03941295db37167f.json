{"sha": "ffba4c0dce336346471219ed03941295db37167f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmYmE0YzBkY2UzMzYzNDY0NzEyMTllZDAzOTQxMjk1ZGIzNzE2N2Y=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-09T11:36:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-09T11:36:40Z"}, "message": "Merge #7931\n\n7931: Use `Type::new_with_resolver_inner` more r=jonas-schievink a=jonas-schievink\n\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "58ee7d973a97114ea28e8d5f659ca6cf05e69c2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58ee7d973a97114ea28e8d5f659ca6cf05e69c2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffba4c0dce336346471219ed03941295db37167f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgR13ICRBK7hj4Ov3rIwAAdHIIAKjki5Uqjrory/qTjO82AfW2\nsTmVLjcfIr/s176aRpF9uUndRJgVsMucPPUZY2Sb7MVqs6AMoCvOkyf3hEplzpG3\nCbDGzEuAY6pPgh4dvIwWWmPPAuqSZOofSnCblKwl7zKd5WqOgu84Rs0fNoEhW7rg\n69n6yUnUKmbNIsf+9YMM/+wAvp+Le4nUbaJfasbWnB0f/cIFMRqxmDgCxwCGaI8Y\nrZohAf+rmlt+fj3nUh6OfNlr4ti5D0prc/NILIPC3kfPDaUAM09kfcLYOFe0qemR\nlcEau1fi/drZ3IOq02AqvZlqGYKvrLT+92GD4H7EMLdJYQNw0qzcp5S1z+SFZ1Y=\n=oPzZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 58ee7d973a97114ea28e8d5f659ca6cf05e69c2d\nparent 844b7f741171219531d2ea03fd9b14ce26b219c8\nparent 30791c52956c4f474a782cc46c7fe8598dcf1df0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615289800 +0000\ncommitter GitHub <noreply@github.com> 1615289800 +0000\n\nMerge #7931\n\n7931: Use `Type::new_with_resolver_inner` more r=jonas-schievink a=jonas-schievink\n\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffba4c0dce336346471219ed03941295db37167f", "html_url": "https://github.com/rust-lang/rust/commit/ffba4c0dce336346471219ed03941295db37167f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffba4c0dce336346471219ed03941295db37167f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "844b7f741171219531d2ea03fd9b14ce26b219c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/844b7f741171219531d2ea03fd9b14ce26b219c8", "html_url": "https://github.com/rust-lang/rust/commit/844b7f741171219531d2ea03fd9b14ce26b219c8"}, {"sha": "30791c52956c4f474a782cc46c7fe8598dcf1df0", "url": "https://api.github.com/repos/rust-lang/rust/commits/30791c52956c4f474a782cc46c7fe8598dcf1df0", "html_url": "https://github.com/rust-lang/rust/commit/30791c52956c4f474a782cc46c7fe8598dcf1df0"}], "stats": {"total": 40, "additions": 14, "deletions": 26}, "files": [{"sha": "e3a332d30a4287264b58525aa9447d1325eda271", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 14, "deletions": 26, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ffba4c0dce336346471219ed03941295db37167f/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba4c0dce336346471219ed03941295db37167f/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=ffba4c0dce336346471219ed03941295db37167f", "patch": "@@ -812,13 +812,11 @@ impl Function {\n     /// Get this function's return type\n     pub fn ret_type(self, db: &dyn HirDatabase) -> Type {\n         let resolver = self.id.resolver(db.upcast());\n+        let krate = self.id.lookup(db.upcast()).container.module(db.upcast()).krate();\n         let ret_type = &db.function_data(self.id).ret_type;\n         let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n-        let environment = TraitEnvironment::lower(db, &resolver);\n-        Type {\n-            krate: self.id.lookup(db.upcast()).container.module(db.upcast()).krate(),\n-            ty: InEnvironment { value: Ty::from_hir_ext(&ctx, ret_type).0, environment },\n-        }\n+        let ty = Ty::from_hir_ext(&ctx, ret_type).0;\n+        Type::new_with_resolver_inner(db, krate, &resolver, ty)\n     }\n \n     pub fn self_param(self, db: &dyn HirDatabase) -> Option<SelfParam> {\n@@ -830,14 +828,15 @@ impl Function {\n \n     pub fn assoc_fn_params(self, db: &dyn HirDatabase) -> Vec<Param> {\n         let resolver = self.id.resolver(db.upcast());\n+        let krate = self.id.lookup(db.upcast()).container.module(db.upcast()).krate();\n         let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n         let environment = TraitEnvironment::lower(db, &resolver);\n         db.function_data(self.id)\n             .params\n             .iter()\n             .map(|type_ref| {\n                 let ty = Type {\n-                    krate: self.id.lookup(db.upcast()).container.module(db.upcast()).krate(),\n+                    krate,\n                     ty: InEnvironment {\n                         value: Ty::from_hir_ext(&ctx, type_ref).0,\n                         environment: environment.clone(),\n@@ -1402,12 +1401,9 @@ impl TypeParam {\n \n     pub fn ty(self, db: &dyn HirDatabase) -> Type {\n         let resolver = self.id.parent.resolver(db.upcast());\n-        let environment = TraitEnvironment::lower(db, &resolver);\n+        let krate = self.id.parent.module(db.upcast()).krate();\n         let ty = Ty::Placeholder(self.id);\n-        Type {\n-            krate: self.id.parent.module(db.upcast()).krate(),\n-            ty: InEnvironment { value: ty, environment },\n-        }\n+        Type::new_with_resolver_inner(db, krate, &resolver, ty)\n     }\n \n     pub fn trait_bounds(self, db: &dyn HirDatabase) -> Vec<Trait> {\n@@ -1426,14 +1422,11 @@ impl TypeParam {\n         let params = db.generic_defaults(self.id.parent);\n         let local_idx = hir_ty::param_idx(db, self.id)?;\n         let resolver = self.id.parent.resolver(db.upcast());\n-        let environment = TraitEnvironment::lower(db, &resolver);\n+        let krate = self.id.parent.module(db.upcast()).krate();\n         let ty = params.get(local_idx)?.clone();\n         let subst = Substs::type_params(db, self.id.parent);\n         let ty = ty.subst(&subst.prefix(local_idx));\n-        Some(Type {\n-            krate: self.id.parent.module(db.upcast()).krate(),\n-            ty: InEnvironment { value: ty, environment },\n-        })\n+        Some(Type::new_with_resolver_inner(db, krate, &resolver, ty))\n     }\n }\n \n@@ -1522,13 +1515,10 @@ impl Impl {\n     pub fn target_ty(self, db: &dyn HirDatabase) -> Type {\n         let impl_data = db.impl_data(self.id);\n         let resolver = self.id.resolver(db.upcast());\n+        let krate = self.id.lookup(db.upcast()).container.module(db.upcast()).krate();\n         let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n-        let environment = TraitEnvironment::lower(db, &resolver);\n         let ty = Ty::from_hir(&ctx, &impl_data.target_type);\n-        Type {\n-            krate: self.id.lookup(db.upcast()).container.module(db.upcast()).krate(),\n-            ty: InEnvironment { value: ty, environment },\n-        }\n+        Type::new_with_resolver_inner(db, krate, &resolver, ty)\n     }\n \n     pub fn items(self, db: &dyn HirDatabase) -> Vec<AssocItem> {\n@@ -1724,13 +1714,11 @@ impl Type {\n         };\n \n         match db.trait_solve(self.krate, goal)? {\n-            Solution::Unique(SolutionVariables(subst)) => subst.value.first().cloned(),\n+            Solution::Unique(SolutionVariables(subst)) => {\n+                subst.value.first().map(|ty| self.derived(ty.clone()))\n+            }\n             Solution::Ambig(_) => None,\n         }\n-        .map(|ty| Type {\n-            krate: self.krate,\n-            ty: InEnvironment { value: ty, environment: Arc::clone(&self.ty.environment) },\n-        })\n     }\n \n     pub fn is_copy(&self, db: &dyn HirDatabase) -> bool {"}]}