{"sha": "b08bbd7be046ca8ba56007ff8ae9dfe9ead06261", "node_id": "C_kwDOAAsO6NoAKGIwOGJiZDdiZTA0NmNhOGJhNTYwMDdmZjhhZTlkZmU5ZWFkMDYyNjE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-19T12:32:09Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-19T12:32:40Z"}, "message": "Enable hovering function parameter inlay hints", "tree": {"sha": "6ea0dbcdb90f2c00f7c2d70a6b5631efad0ed132", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ea0dbcdb90f2c00f7c2d70a6b5631efad0ed132"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b08bbd7be046ca8ba56007ff8ae9dfe9ead06261", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b08bbd7be046ca8ba56007ff8ae9dfe9ead06261", "html_url": "https://github.com/rust-lang/rust/commit/b08bbd7be046ca8ba56007ff8ae9dfe9ead06261", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b08bbd7be046ca8ba56007ff8ae9dfe9ead06261/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74230e26ffa4ad1bbdbf8229c7a6b55c464ca4db", "url": "https://api.github.com/repos/rust-lang/rust/commits/74230e26ffa4ad1bbdbf8229c7a6b55c464ca4db", "html_url": "https://github.com/rust-lang/rust/commit/74230e26ffa4ad1bbdbf8229c7a6b55c464ca4db"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "6df21e0e128c72e17ddc4050203f8a4d3cc216d3", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b08bbd7be046ca8ba56007ff8ae9dfe9ead06261/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08bbd7be046ca8ba56007ff8ae9dfe9ead06261/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=b08bbd7be046ca8ba56007ff8ae9dfe9ead06261", "patch": "@@ -592,23 +592,35 @@ fn param_name_hints(\n         .filter_map(|((param, _ty), arg)| {\n             // Only annotate hints for expressions that exist in the original file\n             let range = sema.original_range_opt(arg.syntax())?;\n-            let (param_name, param_syntax) = match param.as_ref()? {\n-                Either::Left(pat) => (\"self\".to_string(), pat.syntax()),\n+            let (param_name, name_syntax) = match param.as_ref()? {\n+                Either::Left(pat) => (\"self\".to_string(), pat.name()),\n                 Either::Right(pat) => match pat {\n-                    ast::Pat::IdentPat(it) => (it.name()?.to_string(), pat.syntax()),\n+                    ast::Pat::IdentPat(it) => (it.name()?.to_string(), it.name()),\n                     _ => return None,\n                 },\n             };\n-            Some((sema.original_range_opt(param_syntax), param_name, arg, range))\n+            Some((name_syntax, param_name, arg, range))\n         })\n         .filter(|(_, param_name, arg, _)| {\n             !should_hide_param_name_hint(sema, &callable, param_name, arg)\n         })\n-        .map(|(param_range, param_name, _, FileRange { range, .. })| InlayHint {\n-            range,\n-            kind: InlayKind::ParameterHint,\n-            label: param_name,\n-            tooltip: param_range.map(|it| InlayTooltip::HoverOffset(it.file_id, it.range.start())),\n+        .map(|(param, param_name, _, FileRange { range, .. })| {\n+            let mut tooltip = None;\n+            if let Some(name) = param {\n+                if let hir::CallableKind::Function(f) = callable.kind() {\n+                    // assert the file is cached so we can map out of macros\n+                    if let Some(_) = sema.source(f) {\n+                        tooltip = sema.original_range_opt(name.syntax());\n+                    }\n+                }\n+            }\n+\n+            InlayHint {\n+                range,\n+                kind: InlayKind::ParameterHint,\n+                label: param_name,\n+                tooltip: tooltip.map(|it| InlayTooltip::HoverOffset(it.file_id, it.range.start())),\n+            }\n         });\n \n     acc.extend(hints);"}, {"sha": "f91ab6ea79b35b616851d241f444559a250def7d", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b08bbd7be046ca8ba56007ff8ae9dfe9ead06261/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08bbd7be046ca8ba56007ff8ae9dfe9ead06261/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=b08bbd7be046ca8ba56007ff8ae9dfe9ead06261", "patch": "@@ -472,27 +472,30 @@ pub(crate) fn inlay_hint(\n             | InlayKind::ClosingBraceHint => None,\n         },\n         text_edits: None,\n-        data: match inlay_hint.tooltip {\n+        data: (|| match inlay_hint.tooltip {\n             Some(ide::InlayTooltip::HoverOffset(file_id, offset)) => {\n                 let uri = url(snap, file_id);\n+                let line_index = snap.file_line_index(file_id).ok()?;\n+\n                 let text_document = lsp_types::TextDocumentIdentifier { uri };\n                 to_value(lsp_ext::InlayHintResolveData {\n                     text_document,\n-                    position: lsp_ext::PositionOrRange::Position(position(line_index, offset)),\n+                    position: lsp_ext::PositionOrRange::Position(position(&line_index, offset)),\n                 })\n                 .ok()\n             }\n             Some(ide::InlayTooltip::HoverRanged(file_id, text_range)) => {\n                 let uri = url(snap, file_id);\n                 let text_document = lsp_types::TextDocumentIdentifier { uri };\n+                let line_index = snap.file_line_index(file_id).ok()?;\n                 to_value(lsp_ext::InlayHintResolveData {\n                     text_document,\n-                    position: lsp_ext::PositionOrRange::Range(range(line_index, text_range)),\n+                    position: lsp_ext::PositionOrRange::Range(range(&line_index, text_range)),\n                 })\n                 .ok()\n             }\n             _ => None,\n-        },\n+        })(),\n         tooltip: Some(match inlay_hint.tooltip {\n             Some(ide::InlayTooltip::String(s)) => lsp_types::InlayHintTooltip::String(s),\n             _ => lsp_types::InlayHintTooltip::String(inlay_hint.label),"}]}