{"sha": "86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2YjhkZWE1ZWNiMTBkZDEyZjllMzUyZTlmMzFjZWQ4OGExNmU1ZTg=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-03-23T05:45:16Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-03-23T06:04:43Z"}, "message": "Ignore tests on some platforms due to #53081", "tree": {"sha": "cb97eadc500256feef1642e04aa7f71e10eb60cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb97eadc500256feef1642e04aa7f71e10eb60cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl54UX8ACgkQtAh+UQ6Y\nsWS12Q/+PJaM2Rx+y08FhuLwQUhgIoggTvNgnTTP9z9j/E0oYe9iCAynOpHAgCWt\ng1Hd5h7BT2DnlfElV0DCBcfGC4deZnKS6qTQ0AGlDNxvoVvF/QrKKJOFhD9CKI+8\n05gRNj4sC6KLTp6hpmoDsK+Hpt8iTKwXWBjdxCp8HW1sRPN/RcF0ZFbDyeRw+ytU\nWuYAK0bXT5wTAsHkJ5G2VorbHfOQ/Gra1PVp4LB3qrjftpcYVhy1N058AvGz7mOE\nFEAjh4SPeQ2zLQy2TuPxMo9t/N5jRImI2jGFCQSc+haJoDZlXEPXLkM7JxJK7cmj\ntiRxdsTwypG3rLhy0RpN/M38yL/ckgqx7N84sdks2AboZ8jjrfDN10uAGpPYsW7z\ni5WpmbUxRU63fjjZEi4NlAnJXgfLDnsCJpWjaIhob145G5Jcag0MPvXOGCCwnv6J\nxZdmqGncLCZBwDLnpUKsvLuzISiUdK9oF9oFjci3nJj9638qyk5G4ilpQ55TpNUU\n6ENSVzxYjMevNo1jkRJbR8kh4BAlfENp8H0heBkonZtwRDqUZTHADl7RFV3zLULz\nUc+69rYCawqnw/QQMINbj1Es642asRoV8PFumvY8y4TxB0cfmgl4QkZkYepy2rfL\njVvJl8Rfh7JZ/SZWipTKWFllXOm1r540VyAqtayAsRrvEmCogD4=\n=t3rJ\n-----END PGP SIGNATURE-----", "payload": "tree cb97eadc500256feef1642e04aa7f71e10eb60cc\nparent 96e2d03d4b527b3870bb8cc4fd6dd41e57be109d\nauthor Aaron Hill <aa1ronham@gmail.com> 1584942316 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1584943483 -0400\n\nIgnore tests on some platforms due to #53081\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "html_url": "https://github.com/rust-lang/rust/commit/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96e2d03d4b527b3870bb8cc4fd6dd41e57be109d", "url": "https://api.github.com/repos/rust-lang/rust/commits/96e2d03d4b527b3870bb8cc4fd6dd41e57be109d", "html_url": "https://github.com/rust-lang/rust/commit/96e2d03d4b527b3870bb8cc4fd6dd41e57be109d"}], "stats": {"total": 157, "additions": 121, "deletions": 36}, "files": [{"sha": "1a647692018e58c78c6caf046c96d68f73e31227", "filename": "src/test/ui/copy-a-resource.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fcopy-a-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fcopy-a-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcopy-a-resource.rs?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,3 +1,8 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n+\n #[derive(Debug)]\n struct Foo {\n   i: isize,"}, {"sha": "71d2eead3554cd9fee40761adf0b716abb7a04b3", "filename": "src/test/ui/copy-a-resource.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fcopy-a-resource.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fcopy-a-resource.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcopy-a-resource.stderr?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `clone` found for struct `Foo` in the current scope\n-  --> $DIR/copy-a-resource.rs:18:16\n+  --> $DIR/copy-a-resource.rs:23:16\n    |\n LL | struct Foo {\n    | ---------- method `clone` not found for this"}, {"sha": "fa5afd24192611d8f552195f0773b801c1265c39", "filename": "src/test/ui/derives/derive-assoc-type-not-impl.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.rs?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,3 +1,8 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n+\n trait Foo {\n     type X;\n     fn method(&self) {}"}, {"sha": "f15aba97ded8110c7f5380a7d352edcd62814885", "filename": "src/test/ui/derives/derive-assoc-type-not-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `clone` found for struct `Bar<NotClone>` in the current scope\n-  --> $DIR/derive-assoc-type-not-impl.rs:18:30\n+  --> $DIR/derive-assoc-type-not-impl.rs:23:30\n    |\n LL | struct Bar<T: Foo> {\n    | ------------------"}, {"sha": "7f1d064cf3f5037e54189471f8997f26a2f4af3d", "filename": "src/test/ui/error-codes/E0004-2.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.rs?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,3 +1,8 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n+\n fn main() {\n     let x = Some(1);\n "}, {"sha": "e47a4fa755cacd235cb15372ce977b671359a37b", "filename": "src/test/ui/error-codes/E0004-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: `None` and `Some(_)` not covered\n-  --> $DIR/E0004-2.rs:4:11\n+  --> $DIR/E0004-2.rs:9:11\n    |\n LL |     match x { }\n    |           ^ patterns `None` and `Some(_)` not covered"}, {"sha": "75faad80579c67b05e71156b1eff27a55608cb84", "filename": "src/test/ui/error-codes/E0005.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Ferror-codes%2FE0005.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Ferror-codes%2FE0005.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0005.rs?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,3 +1,8 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n+\n fn main() {\n     let x = Some(1);\n     let Some(y) = x; //~ ERROR E0005"}, {"sha": "192b99440319117ad4afc4adae190144a2fc7bfb", "filename": "src/test/ui/error-codes/E0005.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,5 +1,5 @@\n error[E0005]: refutable pattern in local binding: `None` not covered\n-  --> $DIR/E0005.rs:3:9\n+  --> $DIR/E0005.rs:8:9\n    |\n LL |     let Some(y) = x;\n    |         ^^^^^^^ pattern `None` not covered"}, {"sha": "b26ede9c8e2190451f0aa9bad784951295d2c675", "filename": "src/test/ui/error-codes/E0297.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Ferror-codes%2FE0297.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Ferror-codes%2FE0297.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0297.rs?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,3 +1,8 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n+\n fn main() {\n     let xs : Vec<Option<i32>> = vec![Some(1), None];\n "}, {"sha": "4a75e9d1771f3b6ec8ec1e92f10849160580f120", "filename": "src/test/ui/error-codes/E0297.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Ferror-codes%2FE0297.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Ferror-codes%2FE0297.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0297.stderr?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,5 +1,5 @@\n error[E0005]: refutable pattern in `for` loop binding: `None` not covered\n-  --> $DIR/E0297.rs:4:9\n+  --> $DIR/E0297.rs:9:9\n    |\n LL |     for Some(x) in xs {}\n    |         ^^^^^^^ pattern `None` not covered"}, {"sha": "d2e52299c0d869981f19104c65ee357d2e0d389d", "filename": "src/test/ui/feature-gates/feature-gate-exhaustive-patterns.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.rs?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,3 +1,8 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n+\n #![feature(never_type)]\n \n fn foo() -> Result<u32, !> {"}, {"sha": "c2dd90b91e700eff7ed17aa112da6ed630dda824", "filename": "src/test/ui/feature-gates/feature-gate-exhaustive-patterns.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,5 +1,5 @@\n error[E0005]: refutable pattern in local binding: `Err(_)` not covered\n-  --> $DIR/feature-gate-exhaustive-patterns.rs:8:9\n+  --> $DIR/feature-gate-exhaustive-patterns.rs:13:9\n    |\n LL |     let Ok(_x) = foo();\n    |         ^^^^^^ pattern `Err(_)` not covered"}, {"sha": "616421112db672a99459f4f3d15be47b3107ccf9", "filename": "src/test/ui/generic-associated-types/iterable.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.rs?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,3 +1,8 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n+\n #![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n "}, {"sha": "e18c6cec64e71d4ac6d647efe46e0f4990a13e63", "filename": "src/test/ui/generic-associated-types/iterable.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,5 +1,5 @@\n error[E0271]: type mismatch resolving `for<'a> <<std::vec::Vec<T> as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <std::vec::Vec<T> as Iterable>::Item<'a>`\n-  --> $DIR/iterable.rs:15:5\n+  --> $DIR/iterable.rs:20:5\n    |\n LL | impl<T> Iterable for Vec<T> {\n    | --------------------------- in this `impl` item\n@@ -17,7 +17,7 @@ LL |     type Item;\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `for<'a> <<[T] as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <[T] as Iterable>::Item<'a>`\n-  --> $DIR/iterable.rs:27:5\n+  --> $DIR/iterable.rs:32:5\n    |\n LL | impl<T> Iterable for [T] {\n    | ------------------------ in this `impl` item\n@@ -35,7 +35,7 @@ LL |     type Item;\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `for<'a> <<std::vec::Vec<T> as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <std::vec::Vec<T> as Iterable>::Item<'a>`\n-  --> $DIR/iterable.rs:19:30\n+  --> $DIR/iterable.rs:24:30\n    |\n LL | trait Iterable {\n    | -------------- required by `Iterable`\n@@ -49,7 +49,7 @@ LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `for<'a> <<[T] as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <[T] as Iterable>::Item<'a>`\n-  --> $DIR/iterable.rs:31:30\n+  --> $DIR/iterable.rs:36:30\n    |\n LL | trait Iterable {\n    | -------------- required by `Iterable`"}, {"sha": "f00c2304733cafeeb4b61c444fe90cfff0a92ed6", "filename": "src/test/ui/issues/issue-2823.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fissues%2Fissue-2823.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fissues%2Fissue-2823.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2823.rs?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,3 +1,8 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n+\n struct C {\n     x: isize,\n }"}, {"sha": "6e11dd4028836b4b6df202304f78e70aadb29353", "filename": "src/test/ui/issues/issue-2823.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fissues%2Fissue-2823.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fissues%2Fissue-2823.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2823.stderr?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `clone` found for struct `C` in the current scope\n-  --> $DIR/issue-2823.rs:13:16\n+  --> $DIR/issue-2823.rs:18:16\n    |\n LL | struct C {\n    | -------- method `clone` not found for this"}, {"sha": "a8e72e9459e339084e07513b755bc3782959b8e7", "filename": "src/test/ui/issues/issue-69725.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fissues%2Fissue-69725.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fissues%2Fissue-69725.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69725.rs?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,3 +1,8 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n+\n // aux-build:issue-69725.rs\n \n extern crate issue_69725;"}, {"sha": "439fae9511167d08806b66d620e3cbd486697069", "filename": "src/test/ui/issues/issue-69725.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fissues%2Fissue-69725.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fissues%2Fissue-69725.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69725.stderr?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `clone` found for struct `issue_69725::Struct<A>` in the current scope\n-  --> $DIR/issue-69725.rs:7:32\n+  --> $DIR/issue-69725.rs:12:32\n    |\n LL |     let _ = Struct::<A>::new().clone();\n    |                                ^^^^^ method not found in `issue_69725::Struct<A>`"}, {"sha": "186731f2e7233ef010157be1ca968ebae35bb78d", "filename": "src/test/ui/non-copyable-void.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fnon-copyable-void.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fnon-copyable-void.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-copyable-void.rs?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,3 +1,8 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n+\n // ignore-wasm32-bare no libc to test ffi with\n \n #![feature(rustc_private)]"}, {"sha": "dd67a110d2218c11d79c5ebaddd3203dbc5af32e", "filename": "src/test/ui/non-copyable-void.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fnon-copyable-void.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fnon-copyable-void.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-copyable-void.stderr?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `clone` found for enum `libc::c_void` in the current scope\n-  --> $DIR/non-copyable-void.rs:11:23\n+  --> $DIR/non-copyable-void.rs:16:23\n    |\n LL |         let _z = (*y).clone();\n    |                       ^^^^^ method not found in `libc::c_void`"}, {"sha": "731f4ab9c784a59c6881578c10fc0c47e63018c8", "filename": "src/test/ui/noncopyable-class.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fnoncopyable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fnoncopyable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnoncopyable-class.rs?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,3 +1,8 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n+\n // Test that a class with a non-copyable field can't be\n // copied\n "}, {"sha": "472ce34870a0a71e710fd23802e6416732acd74e", "filename": "src/test/ui/noncopyable-class.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fnoncopyable-class.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fnoncopyable-class.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnoncopyable-class.stderr?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `clone` found for struct `Foo` in the current scope\n-  --> $DIR/noncopyable-class.rs:34:16\n+  --> $DIR/noncopyable-class.rs:39:16\n    |\n LL | struct Foo {\n    | ---------- method `clone` not found for this"}, {"sha": "728d4a64495b162ebe7f723063baa368434f6b52", "filename": "src/test/ui/pattern/usefulness/match-arm-statics-2.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.rs?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,3 +1,8 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n+\n use self::Direction::{North, East, South, West};\n \n #[derive(PartialEq, Eq)]"}, {"sha": "7bb6a700a3717d98b56d7575f7e48179094852bf", "filename": "src/test/ui/pattern/usefulness/match-arm-statics-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,13 +1,13 @@\n error[E0004]: non-exhaustive patterns: `(true, false)` not covered\n-  --> $DIR/match-arm-statics-2.rs:17:11\n+  --> $DIR/match-arm-statics-2.rs:22:11\n    |\n LL |     match (true, false) {\n    |           ^^^^^^^^^^^^^ pattern `(true, false)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Some(Some(West))` not covered\n-  --> $DIR/match-arm-statics-2.rs:29:11\n+  --> $DIR/match-arm-statics-2.rs:34:11\n    |\n LL |     match Some(Some(North)) {\n    |           ^^^^^^^^^^^^^^^^^ pattern `Some(Some(West))` not covered\n@@ -23,7 +23,7 @@ LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Foo { bar: Some(North), baz: NewBool(true) }` not covered\n-  --> $DIR/match-arm-statics-2.rs:48:11\n+  --> $DIR/match-arm-statics-2.rs:53:11\n    |\n LL | / struct Foo {\n LL | |     bar: Option<Direction>,"}, {"sha": "c7cde468bb9bfc5c8edc95e4b383450de194ecf8", "filename": "src/test/ui/pattern/usefulness/match-privately-empty.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.rs?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,3 +1,8 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n+\n #![feature(never_type)]\n #![feature(exhaustive_patterns)]\n "}, {"sha": "4dcbf05ecce2ba675f6f42c122a48b70e1140508", "filename": "src/test/ui/pattern/usefulness/match-privately-empty.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: `Some(Private { misc: true, .. })` not covered\n-  --> $DIR/match-privately-empty.rs:13:11\n+  --> $DIR/match-privately-empty.rs:18:11\n    |\n LL |     match private::DATA {\n    |           ^^^^^^^^^^^^^ pattern `Some(Private { misc: true, .. })` not covered"}, {"sha": "59f7bb892c68c03f0946e2b53e1cfc311a965373", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.rs?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,3 +1,8 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n+\n #![allow(illegal_floating_point_literal_pattern)]\n \n enum T { A, B }"}, {"sha": "dff2c8d9424c365746f068de3b153e81b3f1cf1f", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: `A` not covered\n-  --> $DIR/non-exhaustive-match.rs:7:11\n+  --> $DIR/non-exhaustive-match.rs:12:11\n    |\n LL | enum T { A, B }\n    | ---------------\n@@ -13,15 +13,15 @@ LL |     match x { T::B => { } }\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `false` not covered\n-  --> $DIR/non-exhaustive-match.rs:8:11\n+  --> $DIR/non-exhaustive-match.rs:13:11\n    |\n LL |     match true {\n    |           ^^^^ pattern `false` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Some(_)` not covered\n-  --> $DIR/non-exhaustive-match.rs:11:11\n+  --> $DIR/non-exhaustive-match.rs:16:11\n    |\n LL |     match Some(10) {\n    |           ^^^^^^^^ pattern `Some(_)` not covered\n@@ -34,23 +34,23 @@ LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `(_, _, std::i32::MIN..=3i32)` and `(_, _, 5i32..=std::i32::MAX)` not covered\n-  --> $DIR/non-exhaustive-match.rs:14:11\n+  --> $DIR/non-exhaustive-match.rs:19:11\n    |\n LL |     match (2, 3, 4) {\n    |           ^^^^^^^^^ patterns `(_, _, std::i32::MIN..=3i32)` and `(_, _, 5i32..=std::i32::MAX)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `(A, A)` not covered\n-  --> $DIR/non-exhaustive-match.rs:18:11\n+  --> $DIR/non-exhaustive-match.rs:23:11\n    |\n LL |     match (T::A, T::A) {\n    |           ^^^^^^^^^^^^ pattern `(A, A)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `B` not covered\n-  --> $DIR/non-exhaustive-match.rs:22:11\n+  --> $DIR/non-exhaustive-match.rs:27:11\n    |\n LL | enum T { A, B }\n    | ---------------\n@@ -64,15 +64,15 @@ LL |     match T::A {\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `[]` not covered\n-  --> $DIR/non-exhaustive-match.rs:33:11\n+  --> $DIR/non-exhaustive-match.rs:38:11\n    |\n LL |     match *vec {\n    |           ^^^^ pattern `[]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `[_, _, _, _, ..]` not covered\n-  --> $DIR/non-exhaustive-match.rs:46:11\n+  --> $DIR/non-exhaustive-match.rs:51:11\n    |\n LL |     match *vec {\n    |           ^^^^ pattern `[_, _, _, _, ..]` not covered"}, {"sha": "5be426eb38278be39a7d32b42efd6a83a02cd975", "filename": "src/test/ui/recursion/recursive-types-are-not-uninhabited.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.rs?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,3 +1,8 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n+\n struct R<'a> {\n     r: &'a R<'a>,\n }"}, {"sha": "f371d460cf733ceaa8031ce0b77c7e0a929660cc", "filename": "src/test/ui/recursion/recursive-types-are-not-uninhabited.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,5 +1,5 @@\n error[E0005]: refutable pattern in local binding: `Err(_)` not covered\n-  --> $DIR/recursive-types-are-not-uninhabited.rs:6:9\n+  --> $DIR/recursive-types-are-not-uninhabited.rs:11:9\n    |\n LL |     let Ok(x) = res;\n    |         ^^^^^ pattern `Err(_)` not covered"}, {"sha": "a959aaae05568916576c4b88c3c0624c9763e0d6", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.rs?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,3 +1,8 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n+\n use std::mem::zeroed;\n enum Void {}\n "}, {"sha": "9245e293caa853074c9bc657eae71483e166b37b", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: `Err(_)` not covered\n-  --> $DIR/uninhabited-matches-feature-gated.rs:6:19\n+  --> $DIR/uninhabited-matches-feature-gated.rs:11:19\n    |\n LL |     let _ = match x {\n    |                   ^ pattern `Err(_)` not covered\n@@ -12,7 +12,7 @@ LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `&Void` is non-empty\n-  --> $DIR/uninhabited-matches-feature-gated.rs:15:19\n+  --> $DIR/uninhabited-matches-feature-gated.rs:20:19\n    |\n LL | enum Void {}\n    | ------------ `Void` defined here\n@@ -23,31 +23,31 @@ LL |     let _ = match x {};\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `(Void,)` is non-empty\n-  --> $DIR/uninhabited-matches-feature-gated.rs:18:19\n+  --> $DIR/uninhabited-matches-feature-gated.rs:23:19\n    |\n LL |     let _ = match x {};\n    |                   ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `[Void; 1]` is non-empty\n-  --> $DIR/uninhabited-matches-feature-gated.rs:21:19\n+  --> $DIR/uninhabited-matches-feature-gated.rs:26:19\n    |\n LL |     let _ = match x {};\n    |                   ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[_, ..]` not covered\n-  --> $DIR/uninhabited-matches-feature-gated.rs:24:19\n+  --> $DIR/uninhabited-matches-feature-gated.rs:29:19\n    |\n LL |     let _ = match x {\n    |                   ^ pattern `&[_, ..]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Err(_)` not covered\n-  --> $DIR/uninhabited-matches-feature-gated.rs:32:19\n+  --> $DIR/uninhabited-matches-feature-gated.rs:37:19\n    |\n LL |     let _ = match x {\n    |                   ^ pattern `Err(_)` not covered\n@@ -60,7 +60,7 @@ LL |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0005]: refutable pattern in local binding: `Err(_)` not covered\n-  --> $DIR/uninhabited-matches-feature-gated.rs:37:9\n+  --> $DIR/uninhabited-matches-feature-gated.rs:42:9\n    |\n LL |     let Ok(x) = x;\n    |         ^^^^^ pattern `Err(_)` not covered"}, {"sha": "4b92475f1e4cd07f388ee089b2bfe74c8a075019", "filename": "src/test/ui/union/union-derive-clone.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.rs?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,3 +1,8 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n+\n #![feature(untagged_unions)]\n \n use std::mem::ManuallyDrop;"}, {"sha": "d0a82a96c165c88b28dbe4ca8650238e0ea409c8", "filename": "src/test/ui/union/union-derive-clone.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr?ref=86b8dea5ecb10dd12f9e352e9f31ced88a16e5e8", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `U1: std::marker::Copy` is not satisfied\n-  --> $DIR/union-derive-clone.rs:5:10\n+  --> $DIR/union-derive-clone.rs:10:10\n    |\n LL | #[derive(Clone)]\n    |          ^^^^^ the trait `std::marker::Copy` is not implemented for `U1`\n@@ -8,7 +8,7 @@ LL | #[derive(Clone)]\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0599]: no method named `clone` found for union `U5<CloneNoCopy>` in the current scope\n-  --> $DIR/union-derive-clone.rs:37:15\n+  --> $DIR/union-derive-clone.rs:42:15\n    |\n LL | union U5<T> {\n    | -----------"}]}