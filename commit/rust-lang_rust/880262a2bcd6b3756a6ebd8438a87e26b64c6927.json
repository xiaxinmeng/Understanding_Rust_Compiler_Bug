{"sha": "880262a2bcd6b3756a6ebd8438a87e26b64c6927", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MDI2MmEyYmNkNmIzNzU2YTZlYmQ4NDM4YTg3ZTI2YjY0YzY5Mjc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-03-07T23:50:13Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-03-10T16:19:20Z"}, "message": "Update syntax for `pub(restricted)`", "tree": {"sha": "60ca0755e81f6100721f7dd1b7196d8bff94673f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60ca0755e81f6100721f7dd1b7196d8bff94673f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/880262a2bcd6b3756a6ebd8438a87e26b64c6927", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/880262a2bcd6b3756a6ebd8438a87e26b64c6927", "html_url": "https://github.com/rust-lang/rust/commit/880262a2bcd6b3756a6ebd8438a87e26b64c6927", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/880262a2bcd6b3756a6ebd8438a87e26b64c6927/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f573db4f80c75f156df8a743f456bf087ec81dc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f573db4f80c75f156df8a743f456bf087ec81dc2", "html_url": "https://github.com/rust-lang/rust/commit/f573db4f80c75f156df8a743f456bf087ec81dc2"}], "stats": {"total": 111, "additions": 57, "deletions": 54}, "files": [{"sha": "12e3c2ff95b7d87a709201d98b8081695983d94e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 40, "deletions": 32, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/880262a2bcd6b3756a6ebd8438a87e26b64c6927/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880262a2bcd6b3756a6ebd8438a87e26b64c6927/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=880262a2bcd6b3756a6ebd8438a87e26b64c6927", "patch": "@@ -4605,7 +4605,7 @@ impl<'a> Parser<'a> {\n \n         let mut attrs = self.parse_outer_attributes()?;\n         let lo = self.span.lo;\n-        let vis = self.parse_visibility(true)?;\n+        let vis = self.parse_visibility()?;\n         let defaultness = self.parse_defaultness()?;\n         let (name, node) = if self.eat_keyword(keywords::Type) {\n             let name = self.parse_ident()?;\n@@ -4936,7 +4936,7 @@ impl<'a> Parser<'a> {\n             |p| {\n                 let attrs = p.parse_outer_attributes()?;\n                 let lo = p.span.lo;\n-                let mut vis = p.parse_visibility(false)?;\n+                let mut vis = p.parse_visibility()?;\n                 let ty_is_interpolated =\n                     p.token.is_interpolated() || p.look_ahead(1, |t| t.is_interpolated());\n                 let mut ty = p.parse_ty()?;\n@@ -4993,38 +4993,46 @@ impl<'a> Parser<'a> {\n     fn parse_struct_decl_field(&mut self) -> PResult<'a, StructField> {\n         let attrs = self.parse_outer_attributes()?;\n         let lo = self.span.lo;\n-        let vis = self.parse_visibility(true)?;\n+        let vis = self.parse_visibility()?;\n         self.parse_single_struct_field(lo, vis, attrs)\n     }\n \n-    // If `allow_path` is false, just parse the `pub` in `pub(path)` (but still parse `pub(crate)`)\n-    fn parse_visibility(&mut self, allow_path: bool) -> PResult<'a, Visibility> {\n-        let pub_crate = |this: &mut Self| {\n-            let span = this.prev_span;\n-            this.expect(&token::CloseDelim(token::Paren))?;\n-            Ok(Visibility::Crate(span))\n-        };\n-\n+    // Parse `pub`, `pub(crate)` and `pub(in path)` plus shortcuts\n+    // `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.\n+    fn parse_visibility(&mut self) -> PResult<'a, Visibility> {\n         if !self.eat_keyword(keywords::Pub) {\n-            Ok(Visibility::Inherited)\n-        } else if !allow_path {\n-            // Look ahead to avoid eating the `(` in `pub(path)` while still parsing `pub(crate)`\n-            if self.token == token::OpenDelim(token::Paren) &&\n-               self.look_ahead(1, |t| t.is_keyword(keywords::Crate)) {\n-                self.bump(); self.bump();\n-                pub_crate(self)\n-            } else {\n-                Ok(Visibility::Public)\n-            }\n-        } else if !self.eat(&token::OpenDelim(token::Paren)) {\n-            Ok(Visibility::Public)\n-        } else if self.eat_keyword(keywords::Crate) {\n-            pub_crate(self)\n-        } else {\n-            let path = self.parse_path(PathStyle::Mod)?.default_to_global();\n-            self.expect(&token::CloseDelim(token::Paren))?;\n-            Ok(Visibility::Restricted { path: P(path), id: ast::DUMMY_NODE_ID })\n-        }\n+            return Ok(Visibility::Inherited)\n+        }\n+\n+        if self.check(&token::OpenDelim(token::Paren)) {\n+            if self.look_ahead(1, |t| t.is_keyword(keywords::Crate)) {\n+                // `pub(crate)`\n+                self.bump(); // `(`\n+                self.bump(); // `crate`\n+                let vis = Visibility::Crate(self.prev_span);\n+                self.expect(&token::CloseDelim(token::Paren))?; // `)`\n+                return Ok(vis)\n+            } else if self.look_ahead(1, |t| t.is_keyword(keywords::In)) {\n+                // `pub(in path)`\n+                self.bump(); // `(`\n+                self.bump(); // `in`\n+                let path = self.parse_path(PathStyle::Mod)?.default_to_global(); // `path`\n+                let vis = Visibility::Restricted { path: P(path), id: ast::DUMMY_NODE_ID };\n+                self.expect(&token::CloseDelim(token::Paren))?; // `)`\n+                return Ok(vis)\n+            } else if self.look_ahead(2, |t| t == &token::CloseDelim(token::Paren)) &&\n+                      self.look_ahead(1, |t| t.is_keyword(keywords::Super) ||\n+                                             t.is_keyword(keywords::SelfValue)) {\n+                // `pub(self)` or `pub(super)`\n+                self.bump(); // `(`\n+                let path = self.parse_path(PathStyle::Mod)?.default_to_global(); // `super`/`self`\n+                let vis = Visibility::Restricted { path: P(path), id: ast::DUMMY_NODE_ID };\n+                self.expect(&token::CloseDelim(token::Paren))?; // `)`\n+                return Ok(vis)\n+            }\n+        }\n+\n+        Ok(Visibility::Public)\n     }\n \n     /// Parse defaultness: DEFAULT or nothing\n@@ -5499,7 +5507,7 @@ impl<'a> Parser<'a> {\n \n         let lo = self.span.lo;\n \n-        let visibility = self.parse_visibility(true)?;\n+        let visibility = self.parse_visibility()?;\n \n         if self.eat_keyword(keywords::Use) {\n             // USE ITEM\n@@ -5774,7 +5782,7 @@ impl<'a> Parser<'a> {\n     fn parse_foreign_item(&mut self) -> PResult<'a, Option<ForeignItem>> {\n         let attrs = self.parse_outer_attributes()?;\n         let lo = self.span.lo;\n-        let visibility = self.parse_visibility(true)?;\n+        let visibility = self.parse_visibility()?;\n \n         if self.check_keyword(keywords::Static) {\n             // FOREIGN STATIC ITEM"}, {"sha": "6f458da9b527ba861e1f330e77acb4e9771a2e7b", "filename": "src/test/compile-fail-fulldeps/auxiliary/pub_and_stability.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/880262a2bcd6b3756a6ebd8438a87e26b64c6927/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fpub_and_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880262a2bcd6b3756a6ebd8438a87e26b64c6927/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fpub_and_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fpub_and_stability.rs?ref=880262a2bcd6b3756a6ebd8438a87e26b64c6927", "patch": "@@ -55,7 +55,7 @@ mod m {\n         #[unstable(feature = \"unstable_undeclared\", issue = \"38412\")] // SILLY\n         pub(crate) b_crate: i32,\n         #[unstable(feature = \"unstable_declared\", issue = \"38412\")] // SILLY\n-        pub(m) c_mod: i32,\n+        pub(in m) c_mod: i32,\n         #[stable(feature = \"unit_test\", since = \"0.0.0\")] // SILLY\n         d_priv: i32\n     }\n@@ -71,7 +71,7 @@ mod m {\n         pub i32,\n \n         pub(crate) i32,\n-        pub(m) i32,\n+        pub(in m) i32,\n         i32);\n \n     impl Record {\n@@ -124,7 +124,7 @@ mod m {\n         #[unstable(feature = \"unstable_undeclared\", issue = \"38412\")] // SILLY\n         pub(crate) fn pub_crate(&self) -> i32 { self.d_priv }\n         #[unstable(feature = \"unstable_declared\", issue = \"38412\")] // SILLY\n-        pub(m) fn pub_mod(&self) -> i32 { self.d_priv }\n+        pub(in m) fn pub_mod(&self) -> i32 { self.d_priv }\n         #[stable(feature = \"unit_test\", since = \"0.0.0\")] // SILLY\n         fn private(&self) -> i32 { self.d_priv }\n     }\n@@ -138,7 +138,7 @@ mod m {\n         pub fn stable(&self) -> i32 { self.0 }\n \n         pub(crate) fn pub_crate(&self) -> i32 { self.0 }\n-        pub(m) fn pub_mod(&self) -> i32 { self.0 }\n+        pub(in m) fn pub_mod(&self) -> i32 { self.0 }\n         fn private(&self) -> i32 { self.0 }\n     }\n }"}, {"sha": "2d4b5545544c68556c2408360abf6be5c39326e8", "filename": "src/test/compile-fail/privacy/restricted/lookup-ignores-private.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/880262a2bcd6b3756a6ebd8438a87e26b64c6927/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Flookup-ignores-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880262a2bcd6b3756a6ebd8438a87e26b64c6927/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Flookup-ignores-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Flookup-ignores-private.rs?ref=880262a2bcd6b3756a6ebd8438a87e26b64c6927", "patch": "@@ -16,10 +16,10 @@ mod foo {\n     mod bar {\n         #[derive(Default)]\n         pub struct S {\n-            pub(foo) x: i32,\n+            pub(in foo) x: i32,\n         }\n         impl S {\n-            pub(foo) fn f(&self) -> i32 { 0 }\n+            pub(in foo) fn f(&self) -> i32 { 0 }\n         }\n \n         pub struct S2 {"}, {"sha": "53786d45c73ee36a2773d314348cd5558788236e", "filename": "src/test/compile-fail/privacy/restricted/struct-literal-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/880262a2bcd6b3756a6ebd8438a87e26b64c6927/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fstruct-literal-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880262a2bcd6b3756a6ebd8438a87e26b64c6927/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fstruct-literal-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fstruct-literal-field.rs?ref=880262a2bcd6b3756a6ebd8438a87e26b64c6927", "patch": "@@ -15,7 +15,7 @@\n mod foo {\n     pub mod bar {\n         pub struct S {\n-            pub(foo) x: i32,\n+            pub(in foo) x: i32,\n         }\n     }\n "}, {"sha": "d55ee8221cd733f96c4b672b9610951c04f95088", "filename": "src/test/compile-fail/privacy/restricted/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/880262a2bcd6b3756a6ebd8438a87e26b64c6927/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880262a2bcd6b3756a6ebd8438a87e26b64c6927/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftest.rs?ref=880262a2bcd6b3756a6ebd8438a87e26b64c6927", "patch": "@@ -57,6 +57,6 @@ fn main() {\n }\n \n mod pathological {\n-    pub(bad::path) mod m1 {} //~ ERROR failed to resolve. Maybe a missing `extern crate bad;`?\n-    pub(foo) mod m2 {} //~ ERROR visibilities can only be restricted to ancestor modules\n+    pub(in bad::path) mod m1 {} //~ ERROR failed to resolve. Maybe a missing `extern crate bad;`?\n+    pub(in foo) mod m2 {} //~ ERROR visibilities can only be restricted to ancestor modules\n }"}, {"sha": "cd0edc8fe7c4414775f91973b52877f5da9ee38f", "filename": "src/test/compile-fail/privacy/restricted/ty-params.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/880262a2bcd6b3756a6ebd8438a87e26b64c6927/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fty-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880262a2bcd6b3756a6ebd8438a87e26b64c6927/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fty-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fty-params.rs?ref=880262a2bcd6b3756a6ebd8438a87e26b64c6927", "patch": "@@ -11,16 +11,11 @@\n #![feature(pub_restricted)]\n \n macro_rules! m {\n-    ($p: path) => (pub($p) struct Z;)\n+    ($p: path) => (pub(in $p) struct Z;)\n }\n \n struct S<T>(T);\n m!{ S<u8> } //~ ERROR type or lifetime parameters in visibility path\n //~^ ERROR expected module, found struct `S`\n \n-mod foo {\n-    struct S(pub(foo<T>) ()); //~ ERROR type or lifetime parameters in visibility path\n-    //~^ ERROR cannot find type `T` in this scope\n-}\n-\n fn main() {}"}, {"sha": "20878a91ede9907d88c2f178a7f8b9672261e14b", "filename": "src/test/compile-fail/resolve-bad-visibility.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/880262a2bcd6b3756a6ebd8438a87e26b64c6927/src%2Ftest%2Fcompile-fail%2Fresolve-bad-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880262a2bcd6b3756a6ebd8438a87e26b64c6927/src%2Ftest%2Fcompile-fail%2Fresolve-bad-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-bad-visibility.rs?ref=880262a2bcd6b3756a6ebd8438a87e26b64c6927", "patch": "@@ -13,11 +13,11 @@\n enum E {}\n trait Tr {}\n \n-pub(E) struct S; //~ ERROR expected module, found enum `E`\n-pub(Tr) struct Z; //~ ERROR expected module, found trait `Tr`\n-pub(std::vec) struct F; //~ ERROR visibilities can only be restricted to ancestor modules\n-pub(nonexistent) struct G; //~ ERROR cannot find module `nonexistent` in the crate root\n-pub(too_soon) struct H; //~ ERROR cannot find module `too_soon` in the crate root\n+pub(in E) struct S; //~ ERROR expected module, found enum `E`\n+pub(in Tr) struct Z; //~ ERROR expected module, found trait `Tr`\n+pub(in std::vec) struct F; //~ ERROR visibilities can only be restricted to ancestor modules\n+pub(in nonexistent) struct G; //~ ERROR cannot find module `nonexistent` in the crate root\n+pub(in too_soon) struct H; //~ ERROR cannot find module `too_soon` in the crate root\n \n // Visibilities are resolved eagerly without waiting for modules becoming fully populated.\n // Visibilities can only use ancestor modules legally which are always available in time,"}, {"sha": "383224b2f92737ac886c22f726abb5d18173bb52", "filename": "src/test/ui/resolve/auxiliary/privacy-struct-ctor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/880262a2bcd6b3756a6ebd8438a87e26b64c6927/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fprivacy-struct-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880262a2bcd6b3756a6ebd8438a87e26b64c6927/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fprivacy-struct-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fprivacy-struct-ctor.rs?ref=880262a2bcd6b3756a6ebd8438a87e26b64c6927", "patch": "@@ -14,7 +14,7 @@ pub mod m {\n     pub struct S(u8);\n \n     pub mod n {\n-        pub(m) struct Z(pub(m::n) u8);\n+        pub(in m) struct Z(pub(in m::n) u8);\n     }\n }\n "}, {"sha": "68bd74719f55cdadcac6d7384040706f467e1e9e", "filename": "src/test/ui/resolve/privacy-struct-ctor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/880262a2bcd6b3756a6ebd8438a87e26b64c6927/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880262a2bcd6b3756a6ebd8438a87e26b64c6927/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.rs?ref=880262a2bcd6b3756a6ebd8438a87e26b64c6927", "patch": "@@ -18,7 +18,7 @@ mod m {\n     pub struct S(u8);\n \n     pub mod n {\n-        pub(m) struct Z(pub(m::n) u8);\n+        pub(in m) struct Z(pub(in m::n) u8);\n     }\n \n     use m::n::Z; // OK, only the type is imported"}]}