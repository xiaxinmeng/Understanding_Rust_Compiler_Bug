{"sha": "0de71f7bc9482c9d1ef7e9d36ec5d6c5fd378781", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZTcxZjdiYzk0ODJjOWQxZWY3ZTlkMzZlYzVkNmM1ZmQzNzg3ODE=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-09-03T22:32:06Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-09-09T22:42:20Z"}, "message": "Properly use FileSet API", "tree": {"sha": "476d805b91fde4be5801c50dbb696b49eb92abbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/476d805b91fde4be5801c50dbb696b49eb92abbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0de71f7bc9482c9d1ef7e9d36ec5d6c5fd378781", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0de71f7bc9482c9d1ef7e9d36ec5d6c5fd378781", "html_url": "https://github.com/rust-lang/rust/commit/0de71f7bc9482c9d1ef7e9d36ec5d6c5fd378781", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0de71f7bc9482c9d1ef7e9d36ec5d6c5fd378781/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17870a3e2c39770a99f9ab5ce090abbe1dc334d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/17870a3e2c39770a99f9ab5ce090abbe1dc334d2", "html_url": "https://github.com/rust-lang/rust/commit/17870a3e2c39770a99f9ab5ce090abbe1dc334d2"}], "stats": {"total": 87, "additions": 49, "deletions": 38}, "files": [{"sha": "1bc4690c9bdc0d2d9643660cbc64ed9183e48912", "filename": "crates/base_db/src/lib.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0de71f7bc9482c9d1ef7e9d36ec5d6c5fd378781/crates%2Fbase_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de71f7bc9482c9d1ef7e9d36ec5d6c5fd378781/crates%2Fbase_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Flib.rs?ref=0de71f7bc9482c9d1ef7e9d36ec5d6c5fd378781", "patch": "@@ -171,16 +171,14 @@ impl<T: SourceDatabaseExt> FileLoader for FileLoaderDelegate<&'_ T> {\n             module_files: &FileSet,\n             module_file: FileId,\n         ) -> Option<Vec<(FileId, String)>> {\n-            // TODO kb resolve path thinks that the input is a file...\n-            let directory_with_module_file = module_files.resolve_path(module_file, \"/../\")?;\n-            let directory_with_applicable_modules =\n-                match module_files.file_name_and_extension(module_file)? {\n-                    (\"mod\", \"rs\") | (\"lib\", \"rs\") => Some(directory_with_module_file),\n-                    (directory_with_module_name, \"rs\") => module_files\n-                        .resolve_path(directory_with_module_file, directory_with_module_name),\n-                    _ => None,\n-                }?;\n-            Some(module_files.list_files(directory_with_applicable_modules))\n+            match module_files.file_name_and_extension(module_file)? {\n+                (\"mod\", Some(\"rs\")) | (\"lib\", Some(\"rs\")) => {\n+                    module_files.list_files(module_file, None)\n+                }\n+                (directory_with_module_name, Some(\"rs\")) => module_files\n+                    .list_files(module_file, Some(&format!(\"../{}/\", directory_with_module_name))),\n+                _ => None,\n+            }\n         }\n \n         possible_sudmobules_opt(&self.source_root(module_file).file_set, module_file)"}, {"sha": "3f49f31e57f74d45339e03f7df84054bd673968a", "filename": "crates/vfs/src/file_set.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0de71f7bc9482c9d1ef7e9d36ec5d6c5fd378781/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de71f7bc9482c9d1ef7e9d36ec5d6c5fd378781/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Ffile_set.rs?ref=0de71f7bc9482c9d1ef7e9d36ec5d6c5fd378781", "patch": "@@ -20,34 +20,38 @@ impl FileSet {\n         self.files.len()\n     }\n     pub fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId> {\n-        let mut base = dbg!(self.paths[&anchor].clone());\n+        let mut base = self.paths[&anchor].clone();\n         base.pop();\n-        let path = dbg!(base).join(dbg!(path))?;\n+        let path = base.join(path)?;\n         self.files.get(&path).copied()\n     }\n \n-    pub fn file_name_and_extension(&self, file: FileId) -> Option<(&str, &str)> {\n+    pub fn file_name_and_extension(&self, file: FileId) -> Option<(&str, Option<&str>)> {\n         self.paths[&file].file_name_and_extension()\n     }\n \n-    pub fn list_files(&self, directory: FileId) -> Vec<(FileId, String)> {\n-        // TODO kb determine the ways to list all applicable files\n-        // Maybe leave list directory here only and the move the rest of the logic into the database impl?\n-        // cache results in Salsa?\n-\n-        dbg!(directory);\n-        /*\n-        [crates/vfs/src/file_set.rs:30] directory = \"/Users/someonetoignore/Downloads/tmp_dir/zzzz/src/\"\n-        [crates/vfs/src/file_set.rs:31] self.files.keys() = [\n-            \"/Users/someonetoignore/Downloads/tmp_dir/zzzz/src/test_mod_1/test_mod_2/test_mod_3.rs\",\n-            \"/Users/someonetoignore/Downloads/tmp_dir/zzzz/src/test_mod_1/test_mod_2.rs\",\n-            \"/Users/someonetoignore/Downloads/tmp_dir/zzzz/src/test_mod_1.rs\",\n-            \"/Users/someonetoignore/Downloads/tmp_dir/zzzz/src/lib.rs\",\n-            \"/Users/someonetoignore/Downloads/tmp_dir/zzzz/src/test_mod_3/test_mod_3_1.rs\",\n-            \"/Users/someonetoignore/Downloads/tmp_dir/zzzz/src/test_mod_3.rs\",\n-        ]\n-        */\n-        Vec::new()\n+    pub fn list_files(\n+        &self,\n+        anchor: FileId,\n+        anchor_relative_path: Option<&str>,\n+    ) -> Option<Vec<(FileId, String)>> {\n+        let anchor_directory = {\n+            let path = self.paths[&anchor].clone();\n+            match anchor_relative_path {\n+                Some(anchor_relative_path) => path.join(anchor_relative_path),\n+                None => path.join(\"../\"),\n+            }\n+        }?;\n+\n+        Some(\n+            self.paths\n+                .iter()\n+                .filter(|(_, path)| path.starts_with(&anchor_directory))\n+                // TODO kb need to ensure that no / exists after the anchor_directory\n+                .filter(|(_, path)| path.ends_with(\".rs\"))\n+                .map(|(&file_id, path)| (file_id, path.to_string()))\n+                .collect(),\n+        )\n     }\n     pub fn insert(&mut self, file_id: FileId, path: VfsPath) {\n         self.files.insert(path.clone(), file_id);"}, {"sha": "f2d07038bb4b172a8b20d560a3ba1eb0d8342549", "filename": "crates/vfs/src/vfs_path.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0de71f7bc9482c9d1ef7e9d36ec5d6c5fd378781/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de71f7bc9482c9d1ef7e9d36ec5d6c5fd378781/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Fvfs_path.rs?ref=0de71f7bc9482c9d1ef7e9d36ec5d6c5fd378781", "patch": "@@ -48,13 +48,19 @@ impl VfsPath {\n             (VfsPathRepr::VirtualPath(_), _) => false,\n         }\n     }\n+    pub fn ends_with(&self, suffix: &str) -> bool {\n+        match &self.0 {\n+            VfsPathRepr::PathBuf(p) => p.ends_with(suffix),\n+            VfsPathRepr::VirtualPath(p) => p.ends_with(suffix),\n+        }\n+    }\n \n-    pub fn file_name_and_extension(&self) -> Option<(&str, &str)> {\n+    pub fn file_name_and_extension(&self) -> Option<(&str, Option<&str>)> {\n         match &self.0 {\n-            VfsPathRepr::PathBuf(p) => p\n-                .file_stem()\n-                .zip(p.extension())\n-                .and_then(|(name, extension)| Some((name.to_str()?, extension.to_str()?))),\n+            VfsPathRepr::PathBuf(p) => Some((\n+                p.file_stem()?.to_str()?,\n+                p.extension().and_then(|extension| extension.to_str()),\n+            )),\n             VfsPathRepr::VirtualPath(p) => p.file_name_and_extension(),\n         }\n     }\n@@ -259,6 +265,9 @@ impl VirtualPath {\n     fn starts_with(&self, other: &VirtualPath) -> bool {\n         self.0.starts_with(&other.0)\n     }\n+    fn ends_with(&self, suffix: &str) -> bool {\n+        self.0.ends_with(suffix)\n+    }\n     fn pop(&mut self) -> bool {\n         let pos = match self.0.rfind('/') {\n             Some(pos) => pos,\n@@ -279,8 +288,8 @@ impl VirtualPath {\n         Some(res)\n     }\n \n-    pub fn file_name_and_extension(&self) -> Option<(&str, &str)> {\n+    pub fn file_name_and_extension(&self) -> Option<(&str, Option<&str>)> {\n         // TODO kb check if is a file\n-        Some((\"test_mod_1\", \"rs\"))\n+        Some((\"test_mod_1\", Some(\"rs\")))\n     }\n }"}]}