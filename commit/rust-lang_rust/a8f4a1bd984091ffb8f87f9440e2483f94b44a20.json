{"sha": "a8f4a1bd984091ffb8f87f9440e2483f94b44a20", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZjRhMWJkOTg0MDkxZmZiOGY4N2Y5NDQwZTI0ODNmOTRiNDRhMjA=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2017-03-15T04:10:02Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-03-17T20:28:53Z"}, "message": "Stabilize rc_raw feature, closes #37197", "tree": {"sha": "09e1c6b160d9151d0b7ec19ef15454a8a531f3ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09e1c6b160d9151d0b7ec19ef15454a8a531f3ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8f4a1bd984091ffb8f87f9440e2483f94b44a20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8f4a1bd984091ffb8f87f9440e2483f94b44a20", "html_url": "https://github.com/rust-lang/rust/commit/a8f4a1bd984091ffb8f87f9440e2483f94b44a20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8f4a1bd984091ffb8f87f9440e2483f94b44a20/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48890d497163bec75d40198b365b3ca670cc3454", "url": "https://api.github.com/repos/rust-lang/rust/commits/48890d497163bec75d40198b365b3ca670cc3454", "html_url": "https://github.com/rust-lang/rust/commit/48890d497163bec75d40198b365b3ca670cc3454"}], "stats": {"total": 108, "additions": 54, "deletions": 54}, "files": [{"sha": "b6191c4d43e8f1db42673e385d85f3fdb28a5f32", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a8f4a1bd984091ffb8f87f9440e2483f94b44a20/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f4a1bd984091ffb8f87f9440e2483f94b44a20/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=a8f4a1bd984091ffb8f87f9440e2483f94b44a20", "patch": "@@ -287,17 +287,15 @@ impl<T> Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(rc_raw)]\n-    ///\n     /// use std::sync::Arc;\n     ///\n     /// let x = Arc::new(10);\n     /// let x_ptr = Arc::into_raw(x);\n     /// assert_eq!(unsafe { *x_ptr }, 10);\n     /// ```\n-    #[unstable(feature = \"rc_raw\", issue = \"37197\")]\n-    pub fn into_raw(this: Self) -> *mut T {\n-        let ptr = unsafe { &mut (**this.ptr).data as *mut _ };\n+    #[stable(feature = \"rc_raw\", since = \"1.17.0\")]\n+    pub fn into_raw(this: Self) -> *const T {\n+        let ptr = unsafe { &(**this.ptr).data as *const _ };\n         mem::forget(this);\n         ptr\n     }\n@@ -315,8 +313,6 @@ impl<T> Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(rc_raw)]\n-    ///\n     /// use std::sync::Arc;\n     ///\n     /// let x = Arc::new(10);\n@@ -332,11 +328,11 @@ impl<T> Arc<T> {\n     ///\n     /// // The memory was freed when `x` went out of scope above, so `x_ptr` is now dangling!\n     /// ```\n-    #[unstable(feature = \"rc_raw\", issue = \"37197\")]\n-    pub unsafe fn from_raw(ptr: *mut T) -> Self {\n+    #[stable(feature = \"rc_raw\", since = \"1.17.0\")]\n+    pub unsafe fn from_raw(ptr: *const T) -> Self {\n         // To find the corresponding pointer to the `ArcInner` we need to subtract the offset of the\n         // `data` field from the pointer.\n-        Arc { ptr: Shared::new((ptr as *mut u8).offset(-offset_of!(ArcInner<T>, data)) as *mut _) }\n+        Arc { ptr: Shared::new((ptr as *const u8).offset(-offset_of!(ArcInner<T>, data)) as *const _) }\n     }\n }\n \n@@ -448,7 +444,7 @@ impl<T: ?Sized> Arc<T> {\n     // Non-inlined part of `drop`.\n     #[inline(never)]\n     unsafe fn drop_slow(&mut self) {\n-        let ptr = *self.ptr;\n+        let ptr = self.ptr.as_mut_ptr();\n \n         // Destroy the data at this time, even though we may not free the box\n         // allocation itself (there may still be weak pointers lying around).\n@@ -624,7 +620,7 @@ impl<T: Clone> Arc<T> {\n         // As with `get_mut()`, the unsafety is ok because our reference was\n         // either unique to begin with, or became one upon cloning the contents.\n         unsafe {\n-            let inner = &mut **this.ptr;\n+            let inner = &mut *this.ptr.as_mut_ptr();\n             &mut inner.data\n         }\n     }\n@@ -667,7 +663,7 @@ impl<T: ?Sized> Arc<T> {\n             // the Arc itself to be `mut`, so we're returning the only possible\n             // reference to the inner data.\n             unsafe {\n-                let inner = &mut **this.ptr;\n+                let inner = &mut *this.ptr.as_mut_ptr();\n                 Some(&mut inner.data)\n             }\n         } else {"}, {"sha": "e9b59017692eb3907747cb5d3874215823c44e8f", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a8f4a1bd984091ffb8f87f9440e2483f94b44a20/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f4a1bd984091ffb8f87f9440e2483f94b44a20/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=a8f4a1bd984091ffb8f87f9440e2483f94b44a20", "patch": "@@ -364,17 +364,15 @@ impl<T> Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(rc_raw)]\n-    ///\n     /// use std::rc::Rc;\n     ///\n     /// let x = Rc::new(10);\n     /// let x_ptr = Rc::into_raw(x);\n     /// assert_eq!(unsafe { *x_ptr }, 10);\n     /// ```\n-    #[unstable(feature = \"rc_raw\", issue = \"37197\")]\n-    pub fn into_raw(this: Self) -> *mut T {\n-        let ptr = unsafe { &mut (**this.ptr).value as *mut _ };\n+    #[stable(feature = \"rc_raw\", since = \"1.17.0\")]\n+    pub fn into_raw(this: Self) -> *const T {\n+        let ptr = unsafe { &mut (*this.ptr.as_mut_ptr()).value as *const _ };\n         mem::forget(this);\n         ptr\n     }\n@@ -392,8 +390,6 @@ impl<T> Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(rc_raw)]\n-    ///\n     /// use std::rc::Rc;\n     ///\n     /// let x = Rc::new(10);\n@@ -409,11 +405,11 @@ impl<T> Rc<T> {\n     ///\n     /// // The memory was freed when `x` went out of scope above, so `x_ptr` is now dangling!\n     /// ```\n-    #[unstable(feature = \"rc_raw\", issue = \"37197\")]\n-    pub unsafe fn from_raw(ptr: *mut T) -> Self {\n+    #[stable(feature = \"rc_raw\", since = \"1.17.0\")]\n+    pub unsafe fn from_raw(ptr: *const T) -> Self {\n         // To find the corresponding pointer to the `RcBox` we need to subtract the offset of the\n         // `value` field from the pointer.\n-        Rc { ptr: Shared::new((ptr as *mut u8).offset(-offset_of!(RcBox<T>, value)) as *mut _) }\n+        Rc { ptr: Shared::new((ptr as *const u8).offset(-offset_of!(RcBox<T>, value)) as *const _) }\n     }\n }\n \n@@ -543,7 +539,7 @@ impl<T: ?Sized> Rc<T> {\n     #[stable(feature = \"rc_unique\", since = \"1.4.0\")]\n     pub fn get_mut(this: &mut Self) -> Option<&mut T> {\n         if Rc::is_unique(this) {\n-            let inner = unsafe { &mut **this.ptr };\n+            let inner = unsafe { &mut *this.ptr.as_mut_ptr() };\n             Some(&mut inner.value)\n         } else {\n             None\n@@ -627,7 +623,7 @@ impl<T: Clone> Rc<T> {\n         // reference count is guaranteed to be 1 at this point, and we required\n         // the `Rc<T>` itself to be `mut`, so we're returning the only possible\n         // reference to the inner value.\n-        let inner = unsafe { &mut **this.ptr };\n+        let inner = unsafe { &mut *this.ptr.as_mut_ptr() };\n         &mut inner.value\n     }\n }\n@@ -673,7 +669,7 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Rc<T> {\n     /// ```\n     fn drop(&mut self) {\n         unsafe {\n-            let ptr = *self.ptr;\n+            let ptr = self.ptr.as_mut_ptr();\n \n             self.dec_strong();\n             if self.strong() == 0 {"}, {"sha": "10650dab583c392bb295e69f91425e3cdf645a58", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a8f4a1bd984091ffb8f87f9440e2483f94b44a20/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f4a1bd984091ffb8f87f9440e2483f94b44a20/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=a8f4a1bd984091ffb8f87f9440e2483f94b44a20", "patch": "@@ -133,10 +133,13 @@ mod std {\n #[derive(Clone, Copy, Debug, Hash, PartialEq, Eq)]\n pub enum Bound<T> {\n     /// An inclusive bound.\n+    #[stable(feature = \"collections_bound\", since = \"1.17.0\")]\n     Included(T),\n     /// An exclusive bound.\n+    #[stable(feature = \"collections_bound\", since = \"1.17.0\")]\n     Excluded(T),\n     /// An infinite endpoint. Indicates that there is no bound in this direction.\n+    #[stable(feature = \"collections_bound\", since = \"1.17.0\")]\n     Unbounded,\n }\n "}, {"sha": "f58c87b801f552852d2f7c4392971eeaf2d18c3c", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a8f4a1bd984091ffb8f87f9440e2483f94b44a20/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f4a1bd984091ffb8f87f9440e2483f94b44a20/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=a8f4a1bd984091ffb8f87f9440e2483f94b44a20", "patch": "@@ -142,7 +142,7 @@ impl<T> LinkedList<T> {\n \n             match self.head {\n                 None => self.tail = node,\n-                Some(head) => (**head).prev = node,\n+                Some(head) => (*head.as_mut_ptr()).prev = node,\n             }\n \n             self.head = node;\n@@ -154,12 +154,12 @@ impl<T> LinkedList<T> {\n     #[inline]\n     fn pop_front_node(&mut self) -> Option<Box<Node<T>>> {\n         self.head.map(|node| unsafe {\n-            let node = Box::from_raw(*node);\n+            let node = Box::from_raw(node.as_mut_ptr());\n             self.head = node.next;\n \n             match self.head {\n                 None => self.tail = None,\n-                Some(head) => (**head).prev = None,\n+                Some(head) => (*head.as_mut_ptr()).prev = None,\n             }\n \n             self.len -= 1;\n@@ -177,7 +177,7 @@ impl<T> LinkedList<T> {\n \n             match self.tail {\n                 None => self.head = node,\n-                Some(tail) => (**tail).next = node,\n+                Some(tail) => (*tail.as_mut_ptr()).next = node,\n             }\n \n             self.tail = node;\n@@ -189,12 +189,12 @@ impl<T> LinkedList<T> {\n     #[inline]\n     fn pop_back_node(&mut self) -> Option<Box<Node<T>>> {\n         self.tail.map(|node| unsafe {\n-            let node = Box::from_raw(*node);\n+            let node = Box::from_raw(node.as_mut_ptr());\n             self.tail = node.prev;\n \n             match self.tail {\n                 None => self.head = None,\n-                Some(tail) => (**tail).next = None,\n+                Some(tail) => (*tail.as_mut_ptr()).next = None,\n             }\n \n             self.len -= 1;\n@@ -269,8 +269,8 @@ impl<T> LinkedList<T> {\n             Some(tail) => {\n                 if let Some(other_head) = other.head.take() {\n                     unsafe {\n-                        (**tail).next = Some(other_head);\n-                        (**other_head).prev = Some(tail);\n+                        (*tail.as_mut_ptr()).next = Some(other_head);\n+                        (*other_head.as_mut_ptr()).prev = Some(tail);\n                     }\n \n                     self.tail = other.tail.take();\n@@ -484,7 +484,7 @@ impl<T> LinkedList<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn front_mut(&mut self) -> Option<&mut T> {\n-        self.head.map(|node| unsafe { &mut (**node).element })\n+        self.head.map(|node| unsafe { &mut (*node.as_mut_ptr()).element })\n     }\n \n     /// Provides a reference to the back element, or `None` if the list is\n@@ -530,7 +530,7 @@ impl<T> LinkedList<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn back_mut(&mut self) -> Option<&mut T> {\n-        self.tail.map(|node| unsafe { &mut (**node).element })\n+        self.tail.map(|node| unsafe { &mut (*node.as_mut_ptr()).element })\n     }\n \n     /// Adds an element first in the list.\n@@ -675,9 +675,9 @@ impl<T> LinkedList<T> {\n         let second_part_head;\n \n         unsafe {\n-            second_part_head = (**split_node.unwrap()).next.take();\n+            second_part_head = (*split_node.unwrap().as_mut_ptr()).next.take();\n             if let Some(head) = second_part_head {\n-                (**head).prev = None;\n+                (*head.as_mut_ptr()).prev = None;\n             }\n         }\n \n@@ -816,7 +816,7 @@ impl<'a, T> Iterator for IterMut<'a, T> {\n             None\n         } else {\n             self.head.map(|node| unsafe {\n-                let node = &mut **node;\n+                let node = &mut *node.as_mut_ptr();\n                 self.len -= 1;\n                 self.head = node.next;\n                 &mut node.element\n@@ -838,7 +838,7 @@ impl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n             None\n         } else {\n             self.tail.map(|node| unsafe {\n-                let node = &mut **node;\n+                let node = &mut *node.as_mut_ptr();\n                 self.len -= 1;\n                 self.tail = node.prev;\n                 &mut node.element\n@@ -896,8 +896,8 @@ impl<'a, T> IterMut<'a, T> {\n                     element: element,\n                 })));\n \n-                (**prev).next = node;\n-                (**head).prev = node;\n+                (*prev.as_mut_ptr()).next = node;\n+                (*head.as_mut_ptr()).prev = node;\n \n                 self.list.len += 1;\n             },\n@@ -929,7 +929,7 @@ impl<'a, T> IterMut<'a, T> {\n         if self.len == 0 {\n             None\n         } else {\n-            self.head.map(|node| unsafe { &mut (**node).element })\n+            self.head.map(|node| unsafe { &mut (*node.as_mut_ptr()).element })\n         }\n     }\n }"}, {"sha": "7b408af13aa2f4b435ad64beed14b0871dd77b8e", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8f4a1bd984091ffb8f87f9440e2483f94b44a20/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f4a1bd984091ffb8f87f9440e2483f94b44a20/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=a8f4a1bd984091ffb8f87f9440e2483f94b44a20", "patch": "@@ -2120,7 +2120,7 @@ unsafe impl<#[may_dangle] T> Drop for IntoIter<T> {\n         for _x in self.by_ref() {}\n \n         // RawVec handles deallocation\n-        let _ = unsafe { RawVec::from_raw_parts(*self.buf, self.cap) };\n+        let _ = unsafe { RawVec::from_raw_parts(self.buf.as_mut_ptr(), self.cap) };\n     }\n }\n \n@@ -2185,7 +2185,7 @@ impl<'a, T> Drop for Drain<'a, T> {\n \n         if self.tail_len > 0 {\n             unsafe {\n-                let source_vec = &mut **self.vec;\n+                let source_vec = &mut *self.vec.as_mut_ptr();\n                 // memmove back untouched tail, update to new length\n                 let start = source_vec.len();\n                 let tail = self.tail_start;"}, {"sha": "6a04d47a345e8e93de4e1c5e9dc6ae77ca14c69a", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f4a1bd984091ffb8f87f9440e2483f94b44a20/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f4a1bd984091ffb8f87f9440e2483f94b44a20/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=a8f4a1bd984091ffb8f87f9440e2483f94b44a20", "patch": "@@ -2125,7 +2125,7 @@ impl<'a, T: 'a> Drop for Drain<'a, T> {\n     fn drop(&mut self) {\n         for _ in self.by_ref() {}\n \n-        let source_deque = unsafe { &mut **self.deque };\n+        let source_deque = unsafe { &mut *self.deque.as_mut_ptr() };\n \n         // T = source_deque_tail; H = source_deque_head; t = drain_tail; h = drain_head\n         //"}, {"sha": "15174e72795acf5a4b18a688a0cc86ac9d5fe816", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a8f4a1bd984091ffb8f87f9440e2483f94b44a20/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f4a1bd984091ffb8f87f9440e2483f94b44a20/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=a8f4a1bd984091ffb8f87f9440e2483f94b44a20", "patch": "@@ -968,11 +968,19 @@ impl<T: ?Sized> Shared<T> {\n     /// # Safety\n     ///\n     /// `ptr` must be non-null.\n-    pub unsafe fn new(ptr: *mut T) -> Self {\n+    pub unsafe fn new(ptr: *const T) -> Self {\n         Shared { pointer: NonZero::new(ptr), _marker: PhantomData }\n     }\n }\n \n+#[unstable(feature = \"shared\", issue = \"27730\")]\n+impl<T: ?Sized> Shared<T> {\n+    /// Acquires the underlying pointer as a `*mut` pointer.\n+    pub unsafe fn as_mut_ptr(&self) -> *mut T {\n+        **self as _\n+    }\n+}\n+\n #[unstable(feature = \"shared\", issue = \"27730\")]\n impl<T: ?Sized> Clone for Shared<T> {\n     fn clone(&self) -> Self {\n@@ -988,10 +996,10 @@ impl<T: ?Sized, U: ?Sized> CoerceUnsized<Shared<U>> for Shared<T> where T: Unsiz\n \n #[unstable(feature = \"shared\", issue = \"27730\")]\n impl<T: ?Sized> Deref for Shared<T> {\n-    type Target = *mut T;\n+    type Target = *const T;\n \n     #[inline]\n-    fn deref(&self) -> &*mut T {\n+    fn deref(&self) -> &*const T {\n         unsafe { mem::transmute(&*self.pointer) }\n     }\n }"}, {"sha": "29fbcb70756ba08adeca9c87caff42d202225183", "filename": "src/librustc_data_structures/array_vec.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a8f4a1bd984091ffb8f87f9440e2483f94b44a20/src%2Flibrustc_data_structures%2Farray_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f4a1bd984091ffb8f87f9440e2483f94b44a20/src%2Flibrustc_data_structures%2Farray_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Farray_vec.rs?ref=a8f4a1bd984091ffb8f87f9440e2483f94b44a20", "patch": "@@ -248,7 +248,7 @@ impl<'a, A: Array> Drop for Drain<'a, A> {\n \n         if self.tail_len > 0 {\n             unsafe {\n-                let source_array_vec = &mut **self.array_vec;\n+                let source_array_vec = &mut *self.array_vec.as_mut_ptr();\n                 // memmove back untouched tail, update to new length\n                 let start = source_array_vec.len();\n                 let tail = self.tail_start;\n@@ -317,4 +317,3 @@ impl<T> Default for ManuallyDrop<T> {\n         ManuallyDrop::new()\n     }\n }\n-"}, {"sha": "8ecfd75dc95a922e00f9e127bb6bb53b14b0b92a", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8f4a1bd984091ffb8f87f9440e2483f94b44a20/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f4a1bd984091ffb8f87f9440e2483f94b44a20/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=a8f4a1bd984091ffb8f87f9440e2483f94b44a20", "patch": "@@ -27,7 +27,6 @@\n \n #![feature(shared)]\n #![feature(collections_range)]\n-#![feature(collections_bound)]\n #![cfg_attr(stage0,feature(field_init_shorthand))]\n #![feature(nonzero)]\n #![feature(rustc_private)]"}, {"sha": "211605bef1ee092aa8dc9201b78f1dc49fbcffb4", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f4a1bd984091ffb8f87f9440e2483f94b44a20/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f4a1bd984091ffb8f87f9440e2483f94b44a20/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=a8f4a1bd984091ffb8f87f9440e2483f94b44a20", "patch": "@@ -1154,7 +1154,7 @@ impl<'a, K, V> Iterator for Drain<'a, K, V> {\n     fn next(&mut self) -> Option<(SafeHash, K, V)> {\n         self.iter.next().map(|bucket| {\n             unsafe {\n-                (**self.table).size -= 1;\n+                (*self.table.as_mut_ptr()).size -= 1;\n                 let (k, v) = ptr::read(bucket.pair);\n                 (SafeHash { hash: ptr::replace(bucket.hash, EMPTY_BUCKET) }, k, v)\n             }"}, {"sha": "206a37b8e5db83e48b2e61d292b71e82bd6990d8", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8f4a1bd984091ffb8f87f9440e2483f94b44a20/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f4a1bd984091ffb8f87f9440e2483f94b44a20/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=a8f4a1bd984091ffb8f87f9440e2483f94b44a20", "patch": "@@ -245,7 +245,6 @@\n #![feature(char_escape_debug)]\n #![feature(char_internals)]\n #![feature(collections)]\n-#![feature(collections_bound)]\n #![feature(collections_range)]\n #![feature(compiler_builtins_lib)]\n #![feature(const_fn)]"}]}