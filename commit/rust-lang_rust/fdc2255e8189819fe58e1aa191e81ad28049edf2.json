{"sha": "fdc2255e8189819fe58e1aa191e81ad28049edf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkYzIyNTVlODE4OTgxOWZlNThlMWFhMTkxZTgxYWQyODA0OWVkZjI=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-04-11T05:47:04Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-04-11T05:47:04Z"}, "message": "UI test cleanup: Extract or_fun_call tests", "tree": {"sha": "093faf7181afe10edfa327503f5eb24500f0da49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/093faf7181afe10edfa327503f5eb24500f0da49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdc2255e8189819fe58e1aa191e81ad28049edf2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJEBAABCgAuFiEEj4U0bmbiMSg/mWqvgqphyqETl+YFAlyu1PoQHGRldkBwaGFu\nc2NoLm5ldAAKCRCCqmHKoROX5tYjD/9voAAkWEYw6mYGSOnLeYoMORaAZEayYZXa\nalnf5wAnOTlQkz6eBKUbLlPiKxcNzaw5rHNDIgTXus82RoDmr8DEe1KDi3TrNK3G\nZUK9CJ8J0c3RMtgrXzqB2qip8Muq3gUhoA5idDiJpfS6TsbgTn2We6ZZwHb1Y+S4\nnFPRWv3lRNoUV+Rn4Y+OXbI9KlM43+Wdslu2duDBCWe5y2uuWj/ppQFikYVs2bmb\nxZclZ6oKpNhDSCxO7VriSWAO2B6sYRhKlzP623VgrKX3tDE6AQsrKO3omU+cy53s\nDXrzvsobcmH04naoDPhghH4URHBpazAF8G0KRzgfYbwcb+qwteA5A9hVJYZ1JyaC\n09M/hqbI41zQQTHJEJcbZtAQC8Z8ZK7WbqSLIMauyo81knP/A1699dyrgK3Dj8G0\nWWh0rsW5zO3fS9lEJ0sgNzZV8XowOSR+QvUEG+F3pmCqHmSHuWQCdi55IXymAx8D\nioCupfWJIHC2WaSCvYnixstxrRxDP3KqbsZz8sAfqmPegk0yyweuziuB2B1H4ZN5\nnB8UbqGBj2C7QT5Al7j9gpgB4gmJw1kYKLNQgeLl+6+ngDUyj/HXJlH+BrIaPwVC\nsfzvkuChnM9ApksJP8m91nRUdn6HyW8N3RsUH8S0gZ63GfUTlKhg8ayCb0rqYLUT\nxTwUDZFiLQ==\n=NbwU\n-----END PGP SIGNATURE-----", "payload": "tree 093faf7181afe10edfa327503f5eb24500f0da49\nparent 2278814c8e33573b1c870c65f5fcbe69ea20601d\nauthor Philipp Hansch <dev@phansch.net> 1554961624 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1554961624 +0200\n\nUI test cleanup: Extract or_fun_call tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdc2255e8189819fe58e1aa191e81ad28049edf2", "html_url": "https://github.com/rust-lang/rust/commit/fdc2255e8189819fe58e1aa191e81ad28049edf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdc2255e8189819fe58e1aa191e81ad28049edf2/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2278814c8e33573b1c870c65f5fcbe69ea20601d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2278814c8e33573b1c870c65f5fcbe69ea20601d", "html_url": "https://github.com/rust-lang/rust/commit/2278814c8e33573b1c870c65f5fcbe69ea20601d"}], "stats": {"total": 300, "additions": 154, "deletions": 146}, "files": [{"sha": "7ddeb2f87e1e1c4f2eece7525993d09ec2a6019b", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/fdc2255e8189819fe58e1aa191e81ad28049edf2/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdc2255e8189819fe58e1aa191e81ad28049edf2/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=fdc2255e8189819fe58e1aa191e81ad28049edf2", "patch": "@@ -287,69 +287,6 @@ fn search_is_some() {\n     let _ = foo.rposition().is_some();\n }\n \n-/// Checks implementation of the `OR_FUN_CALL` lint.\n-fn or_fun_call() {\n-    struct Foo;\n-\n-    impl Foo {\n-        fn new() -> Foo {\n-            Foo\n-        }\n-    }\n-\n-    enum Enum {\n-        A(i32),\n-    }\n-\n-    fn make<T>() -> T {\n-        unimplemented!();\n-    }\n-\n-    let with_enum = Some(Enum::A(1));\n-    with_enum.unwrap_or(Enum::A(5));\n-\n-    let with_const_fn = Some(::std::time::Duration::from_secs(1));\n-    with_const_fn.unwrap_or(::std::time::Duration::from_secs(5));\n-\n-    let with_constructor = Some(vec![1]);\n-    with_constructor.unwrap_or(make());\n-\n-    let with_new = Some(vec![1]);\n-    with_new.unwrap_or(Vec::new());\n-\n-    let with_const_args = Some(vec![1]);\n-    with_const_args.unwrap_or(Vec::with_capacity(12));\n-\n-    let with_err: Result<_, ()> = Ok(vec![1]);\n-    with_err.unwrap_or(make());\n-\n-    let with_err_args: Result<_, ()> = Ok(vec![1]);\n-    with_err_args.unwrap_or(Vec::with_capacity(12));\n-\n-    let with_default_trait = Some(1);\n-    with_default_trait.unwrap_or(Default::default());\n-\n-    let with_default_type = Some(1);\n-    with_default_type.unwrap_or(u64::default());\n-\n-    let with_vec = Some(vec![1]);\n-    with_vec.unwrap_or(vec![]);\n-\n-    // FIXME #944: ~|SUGGESTION with_vec.unwrap_or_else(|| vec![]);\n-\n-    let without_default = Some(Foo);\n-    without_default.unwrap_or(Foo::new());\n-\n-    let mut map = HashMap::<u64, String>::new();\n-    map.entry(42).or_insert(String::new());\n-\n-    let mut btree = BTreeMap::<u64, String>::new();\n-    btree.entry(42).or_insert(String::new());\n-\n-    let stringy = Some(String::from(\"\"));\n-    let _ = stringy.unwrap_or(\"\".to_owned());\n-}\n-\n /// Checks implementation of `ITER_NTH` lint.\n fn iter_nth() {\n     let mut some_vec = vec![0, 1, 2, 3];"}, {"sha": "9f546e6989221e95c71d6ffcb4f98850d26d70c9", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 9, "deletions": 83, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/fdc2255e8189819fe58e1aa191e81ad28049edf2/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fdc2255e8189819fe58e1aa191e81ad28049edf2/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=fdc2255e8189819fe58e1aa191e81ad28049edf2", "patch": "@@ -227,131 +227,57 @@ LL | |                                }\n LL | |                    ).is_some();\n    | |______________________________^\n \n-error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:315:22\n-   |\n-LL |     with_constructor.unwrap_or(make());\n-   |                      ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(make)`\n-   |\n-   = note: `-D clippy::or-fun-call` implied by `-D warnings`\n-\n-error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/methods.rs:318:5\n-   |\n-LL |     with_new.unwrap_or(Vec::new());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n-\n-error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:321:21\n-   |\n-LL |     with_const_args.unwrap_or(Vec::with_capacity(12));\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| Vec::with_capacity(12))`\n-\n-error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:324:14\n-   |\n-LL |     with_err.unwrap_or(make());\n-   |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| make())`\n-\n-error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:327:19\n-   |\n-LL |     with_err_args.unwrap_or(Vec::with_capacity(12));\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| Vec::with_capacity(12))`\n-\n-error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/methods.rs:330:5\n-   |\n-LL |     with_default_trait.unwrap_or(Default::default());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n-\n-error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/methods.rs:333:5\n-   |\n-LL |     with_default_type.unwrap_or(u64::default());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n-\n-error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:336:14\n-   |\n-LL |     with_vec.unwrap_or(vec![]);\n-   |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| vec![])`\n-\n-error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:341:21\n-   |\n-LL |     without_default.unwrap_or(Foo::new());\n-   |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n-\n-error: use of `or_insert` followed by a function call\n-  --> $DIR/methods.rs:344:19\n-   |\n-LL |     map.entry(42).or_insert(String::new());\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n-\n-error: use of `or_insert` followed by a function call\n-  --> $DIR/methods.rs:347:21\n-   |\n-LL |     btree.entry(42).or_insert(String::new());\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n-\n-error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:350:21\n-   |\n-LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n-\n error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:361:23\n+  --> $DIR/methods.rs:298:23\n    |\n LL |         let bad_vec = some_vec.iter().nth(3);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::iter-nth` implied by `-D warnings`\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:362:26\n+  --> $DIR/methods.rs:299:26\n    |\n LL |         let bad_slice = &some_vec[..].iter().nth(3);\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:363:31\n+  --> $DIR/methods.rs:300:31\n    |\n LL |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:364:29\n+  --> $DIR/methods.rs:301:29\n    |\n LL |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:369:23\n+  --> $DIR/methods.rs:306:23\n    |\n LL |         let bad_vec = some_vec.iter_mut().nth(3);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:372:26\n+  --> $DIR/methods.rs:309:26\n    |\n LL |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:375:29\n+  --> $DIR/methods.rs:312:29\n    |\n LL |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-  --> $DIR/methods.rs:387:13\n+  --> $DIR/methods.rs:324:13\n    |\n LL |     let _ = opt.unwrap();\n    |             ^^^^^^^^^^^^\n    |\n    = note: `-D clippy::option-unwrap-used` implied by `-D warnings`\n \n-error: aborting due to 44 previous errors\n+error: aborting due to 32 previous errors\n "}, {"sha": "562120c3ea0f985cf2ebdf1215d76262130034f4", "filename": "tests/ui/or_fun_call.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/fdc2255e8189819fe58e1aa191e81ad28049edf2/tests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdc2255e8189819fe58e1aa191e81ad28049edf2/tests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.rs?ref=fdc2255e8189819fe58e1aa191e81ad28049edf2", "patch": "@@ -0,0 +1,69 @@\n+#![warn(clippy::or_fun_call)]\n+\n+use std::collections::BTreeMap;\n+use std::collections::HashMap;\n+\n+/// Checks implementation of the `OR_FUN_CALL` lint.\n+fn or_fun_call() {\n+    struct Foo;\n+\n+    impl Foo {\n+        fn new() -> Foo {\n+            Foo\n+        }\n+    }\n+\n+    enum Enum {\n+        A(i32),\n+    }\n+\n+    fn make<T>() -> T {\n+        unimplemented!();\n+    }\n+\n+    let with_enum = Some(Enum::A(1));\n+    with_enum.unwrap_or(Enum::A(5));\n+\n+    let with_const_fn = Some(::std::time::Duration::from_secs(1));\n+    with_const_fn.unwrap_or(::std::time::Duration::from_secs(5));\n+\n+    let with_constructor = Some(vec![1]);\n+    with_constructor.unwrap_or(make());\n+\n+    let with_new = Some(vec![1]);\n+    with_new.unwrap_or(Vec::new());\n+\n+    let with_const_args = Some(vec![1]);\n+    with_const_args.unwrap_or(Vec::with_capacity(12));\n+\n+    let with_err: Result<_, ()> = Ok(vec![1]);\n+    with_err.unwrap_or(make());\n+\n+    let with_err_args: Result<_, ()> = Ok(vec![1]);\n+    with_err_args.unwrap_or(Vec::with_capacity(12));\n+\n+    let with_default_trait = Some(1);\n+    with_default_trait.unwrap_or(Default::default());\n+\n+    let with_default_type = Some(1);\n+    with_default_type.unwrap_or(u64::default());\n+\n+    let with_vec = Some(vec![1]);\n+    with_vec.unwrap_or(vec![]);\n+\n+    // FIXME #944: ~|SUGGESTION with_vec.unwrap_or_else(|| vec![]);\n+\n+    let without_default = Some(Foo);\n+    without_default.unwrap_or(Foo::new());\n+\n+    let mut map = HashMap::<u64, String>::new();\n+    map.entry(42).or_insert(String::new());\n+\n+    let mut btree = BTreeMap::<u64, String>::new();\n+    btree.entry(42).or_insert(String::new());\n+\n+    let stringy = Some(String::from(\"\"));\n+    let _ = stringy.unwrap_or(\"\".to_owned());\n+}\n+\n+fn main() {}"}, {"sha": "40ae09cc20e776f6f7b6c4734bbe9e7cb4b6bbe1", "filename": "tests/ui/or_fun_call.stderr", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/fdc2255e8189819fe58e1aa191e81ad28049edf2/tests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fdc2255e8189819fe58e1aa191e81ad28049edf2/tests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.stderr?ref=fdc2255e8189819fe58e1aa191e81ad28049edf2", "patch": "@@ -0,0 +1,76 @@\n+error: use of `unwrap_or` followed by a function call\n+  --> $DIR/or_fun_call.rs:31:22\n+   |\n+LL |     with_constructor.unwrap_or(make());\n+   |                      ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(make)`\n+   |\n+   = note: `-D clippy::or-fun-call` implied by `-D warnings`\n+\n+error: use of `unwrap_or` followed by a call to `new`\n+  --> $DIR/or_fun_call.rs:34:5\n+   |\n+LL |     with_new.unwrap_or(Vec::new());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n+\n+error: use of `unwrap_or` followed by a function call\n+  --> $DIR/or_fun_call.rs:37:21\n+   |\n+LL |     with_const_args.unwrap_or(Vec::with_capacity(12));\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| Vec::with_capacity(12))`\n+\n+error: use of `unwrap_or` followed by a function call\n+  --> $DIR/or_fun_call.rs:40:14\n+   |\n+LL |     with_err.unwrap_or(make());\n+   |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| make())`\n+\n+error: use of `unwrap_or` followed by a function call\n+  --> $DIR/or_fun_call.rs:43:19\n+   |\n+LL |     with_err_args.unwrap_or(Vec::with_capacity(12));\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| Vec::with_capacity(12))`\n+\n+error: use of `unwrap_or` followed by a call to `default`\n+  --> $DIR/or_fun_call.rs:46:5\n+   |\n+LL |     with_default_trait.unwrap_or(Default::default());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n+\n+error: use of `unwrap_or` followed by a call to `default`\n+  --> $DIR/or_fun_call.rs:49:5\n+   |\n+LL |     with_default_type.unwrap_or(u64::default());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n+\n+error: use of `unwrap_or` followed by a function call\n+  --> $DIR/or_fun_call.rs:52:14\n+   |\n+LL |     with_vec.unwrap_or(vec![]);\n+   |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| vec![])`\n+\n+error: use of `unwrap_or` followed by a function call\n+  --> $DIR/or_fun_call.rs:57:21\n+   |\n+LL |     without_default.unwrap_or(Foo::new());\n+   |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n+\n+error: use of `or_insert` followed by a function call\n+  --> $DIR/or_fun_call.rs:60:19\n+   |\n+LL |     map.entry(42).or_insert(String::new());\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n+\n+error: use of `or_insert` followed by a function call\n+  --> $DIR/or_fun_call.rs:63:21\n+   |\n+LL |     btree.entry(42).or_insert(String::new());\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n+\n+error: use of `unwrap_or` followed by a function call\n+  --> $DIR/or_fun_call.rs:66:21\n+   |\n+LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n+\n+error: aborting due to 12 previous errors\n+"}]}