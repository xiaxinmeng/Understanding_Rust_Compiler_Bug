{"sha": "e293026e9c41a5322d95098c30e193fdb815c1bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyOTMwMjZlOWM0MWE1MzIyZDk1MDk4YzMwZTE5M2ZkYjgxNWMxYmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-08T14:21:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-08T14:21:46Z"}, "message": "auto merge of #9768 : pnkfelix/rust/fsk-fix-issue-9762, r=bstrie\n\nr? anyone\r\n\r\nAdd bindings for start and ends of keyword ranges; use bindings in match arms.\r\n\r\nAlso, fixed latent bug that inspired this change: the pattern in `is_any_keyword` had not been updated to match the new range of reserved keyword identifiers.\r\n\r\n(I briefly tried to expose the latent bug, but `is_any_keyword` is currently only called in contexts where a failure of this kind merely causes a bit more fruitless compilation before `check_reserved_keywords` is called by the parser, which correctly tags `sizeof` as reserved.)", "tree": {"sha": "1aa9d75621368723baf1f6381903bc0a09af39ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1aa9d75621368723baf1f6381903bc0a09af39ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e293026e9c41a5322d95098c30e193fdb815c1bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e293026e9c41a5322d95098c30e193fdb815c1bb", "html_url": "https://github.com/rust-lang/rust/commit/e293026e9c41a5322d95098c30e193fdb815c1bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e293026e9c41a5322d95098c30e193fdb815c1bb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ba803311393ec64c921e7d246951f79f6902d72", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ba803311393ec64c921e7d246951f79f6902d72", "html_url": "https://github.com/rust-lang/rust/commit/7ba803311393ec64c921e7d246951f79f6902d72"}, {"sha": "580adc9ad38bfe3585e8d17ba9ad4766cbc1ff1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/580adc9ad38bfe3585e8d17ba9ad4766cbc1ff1c", "html_url": "https://github.com/rust-lang/rust/commit/580adc9ad38bfe3585e8d17ba9ad4766cbc1ff1c"}], "stats": {"total": 51, "additions": 40, "deletions": 11}, "files": [{"sha": "f949524a7009ca3adc0df6137266ad189dc86fa6", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 40, "deletions": 11, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e293026e9c41a5322d95098c30e193fdb815c1bb/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e293026e9c41a5322d95098c30e193fdb815c1bb/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=e293026e9c41a5322d95098c30e193fdb815c1bb", "patch": "@@ -326,7 +326,7 @@ pub mod special_idents {\n     pub static unary_minus_fn : Ident = Ident { name: 6, ctxt: 0}; // apparently unused?\n     pub static clownshoes_extensions : Ident = Ident { name: 7, ctxt: 0};\n \n-    pub static self_ : Ident = Ident { name: 8, ctxt: 0}; // 'self'\n+    pub static self_ : Ident = Ident { name: super::SELF_KEYWORD_NAME, ctxt: 0}; // 'self'\n \n     /* for matcher NTs */\n     // none of these appear to be used, but perhaps references to\n@@ -352,7 +352,7 @@ pub mod special_idents {\n     pub static main : Ident = Ident { name: 24, ctxt: 0};\n     pub static opaque : Ident = Ident { name: 25, ctxt: 0};\n     pub static blk : Ident = Ident { name: 26, ctxt: 0};\n-    pub static statik : Ident = Ident { name: 27, ctxt: 0};\n+    pub static statik : Ident = Ident { name: super::STATIC_KEYWORD_NAME, ctxt: 0};\n     pub static clownshoes_foreign_mod: Ident = Ident { name: 28, ctxt: 0};\n     pub static unnamed_field: Ident = Ident { name: 29, ctxt: 0};\n     pub static c_abi: Ident = Ident { name: 30, ctxt: 0}; // apparently unused?\n@@ -414,8 +414,9 @@ pub type ident_interner = StrInterner;\n \n // return a fresh interner, preloaded with special identifiers.\n fn mk_fresh_ident_interner() -> @ident_interner {\n-    // the indices here must correspond to the numbers in\n-    // special_idents.\n+    // The indices here must correspond to the numbers in\n+    // special_idents, in Keyword to_ident(), and in static\n+    // constants below.\n     let init_vec = ~[\n         \"_\",                  // 0\n         \"anon\",               // 1\n@@ -473,8 +474,8 @@ fn mk_fresh_ident_interner() -> @ident_interner {\n         \"pub\",                // 52\n         \"ref\",                // 53\n         \"return\",             // 54\n-        \"static\",             // 27 -- also a special ident\n-        \"self\",               //  8 -- also a special ident\n+        \"static\",             // 27 -- also a special ident (prefill de-dupes)\n+        \"self\",               //  8 -- also a special ident (prefill de-dupes)\n         \"struct\",             // 55\n         \"super\",              // 56\n         \"true\",               // 57\n@@ -498,6 +499,32 @@ fn mk_fresh_ident_interner() -> @ident_interner {\n     @interner::StrInterner::prefill(init_vec)\n }\n \n+// NOTE remove stage0 pub'ed special cases after next snapshot.\n+#[cfg(stage0)]\n+pub static SELF_KEYWORD_NAME: uint = 8;\n+#[cfg(not(stage0))]\n+static SELF_KEYWORD_NAME: uint = 8;\n+#[cfg(stage0)]\n+pub static STATIC_KEYWORD_NAME: uint = 27;\n+#[cfg(not(stage0))]\n+static STATIC_KEYWORD_NAME: uint = 27;\n+#[cfg(stage0)]\n+pub static STRICT_KEYWORD_START: uint = 32;\n+#[cfg(not(stage0))]\n+static STRICT_KEYWORD_START: uint = 32;\n+#[cfg(stage0)]\n+pub static STRICT_KEYWORD_FINAL: uint = 64;\n+#[cfg(not(stage0))]\n+static STRICT_KEYWORD_FINAL: uint = 64;\n+#[cfg(stage0)]\n+pub static RESERVED_KEYWORD_START: uint = 65;\n+#[cfg(not(stage0))]\n+static RESERVED_KEYWORD_START: uint = 65;\n+#[cfg(stage0)]\n+pub static RESERVED_KEYWORD_FINAL: uint = 71;\n+#[cfg(not(stage0))]\n+static RESERVED_KEYWORD_FINAL: uint = 71;\n+\n // if an interner exists in TLS, return it. Otherwise, prepare a\n // fresh one.\n pub fn get_ident_interner() -> @ident_interner {\n@@ -675,8 +702,8 @@ pub mod keywords {\n                 Pub => Ident { name: 52, ctxt: 0 },\n                 Ref => Ident { name: 53, ctxt: 0 },\n                 Return => Ident { name: 54, ctxt: 0 },\n-                Static => Ident { name: 27, ctxt: 0 },\n-                Self => Ident { name: 8, ctxt: 0 },\n+                Static => Ident { name: super::STATIC_KEYWORD_NAME, ctxt: 0 },\n+                Self => Ident { name: super::SELF_KEYWORD_NAME, ctxt: 0 },\n                 Struct => Ident { name: 55, ctxt: 0 },\n                 Super => Ident { name: 56, ctxt: 0 },\n                 True => Ident { name: 57, ctxt: 0 },\n@@ -709,7 +736,8 @@ pub fn is_keyword(kw: keywords::Keyword, tok: &Token) -> bool {\n pub fn is_any_keyword(tok: &Token) -> bool {\n     match *tok {\n         token::IDENT(sid, false) => match sid.name {\n-            8 | 27 | 32 .. 70 => true,\n+            SELF_KEYWORD_NAME | STATIC_KEYWORD_NAME |\n+            STRICT_KEYWORD_START .. RESERVED_KEYWORD_FINAL => true,\n             _ => false,\n         },\n         _ => false\n@@ -719,7 +747,8 @@ pub fn is_any_keyword(tok: &Token) -> bool {\n pub fn is_strict_keyword(tok: &Token) -> bool {\n     match *tok {\n         token::IDENT(sid, false) => match sid.name {\n-            8 | 27 | 32 .. 64 => true,\n+            SELF_KEYWORD_NAME | STATIC_KEYWORD_NAME |\n+            STRICT_KEYWORD_START .. STRICT_KEYWORD_FINAL => true,\n             _ => false,\n         },\n         _ => false,\n@@ -729,7 +758,7 @@ pub fn is_strict_keyword(tok: &Token) -> bool {\n pub fn is_reserved_keyword(tok: &Token) -> bool {\n     match *tok {\n         token::IDENT(sid, false) => match sid.name {\n-            65 .. 71 => true,\n+            RESERVED_KEYWORD_START .. RESERVED_KEYWORD_FINAL => true,\n             _ => false,\n         },\n         _ => false,"}]}