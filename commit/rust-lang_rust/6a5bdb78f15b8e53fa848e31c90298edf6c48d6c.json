{"sha": "6a5bdb78f15b8e53fa848e31c90298edf6c48d6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNWJkYjc4ZjE1YjhlNTNmYTg0OGUzMWM5MDI5OGVkZjZjNDhkNmM=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-08-26T22:06:13Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-08-26T22:17:03Z"}, "message": "add mips64-gnu and mips64el-gnu targets\n\nWith this commit one can build no_core (and probably no_std as well)\nRust programs for these targets. It's not yet possible to cross compile\nstd for these targets because rust-lang/libc doesn't know about the\nmips64 architecture.\n\nThese targets have been tested by cross compiling the \"smallest hello\"\nprogram (see code below) and then running it under QEMU.\n\n``` rust\n#![feature(start)]\n#![feature(lang_items)]\n#![feature(no_core)]\n#![no_core]\n\n#[link(name = \"c\")]\nextern {\n    fn puts(_: *const u8);\n}\n\n#[start]\nfn start(_: isize, _: *const *const u8) -> isize {\n    unsafe {\n        let msg = b\"Hello, world!\\0\";\n        puts(msg as *const _ as *const u8);\n    }\n    0\n}\n\n#[lang = \"copy\"]\ntrait Copy {}\n\n#[lang = \"sized\"]\ntrait Sized {}\n```", "tree": {"sha": "5d4d4ca9868472d1cd5f13912d44def20ce9ce0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d4d4ca9868472d1cd5f13912d44def20ce9ce0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a5bdb78f15b8e53fa848e31c90298edf6c48d6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a5bdb78f15b8e53fa848e31c90298edf6c48d6c", "html_url": "https://github.com/rust-lang/rust/commit/6a5bdb78f15b8e53fa848e31c90298edf6c48d6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a5bdb78f15b8e53fa848e31c90298edf6c48d6c/comments", "author": null, "committer": null, "parents": [{"sha": "e07dd59eaeb7be95afd2fb3dc131108ae750c91c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e07dd59eaeb7be95afd2fb3dc131108ae750c91c", "html_url": "https://github.com/rust-lang/rust/commit/e07dd59eaeb7be95afd2fb3dc131108ae750c91c"}], "stats": {"total": 249, "additions": 239, "deletions": 10}, "files": [{"sha": "34aee77ae2107fbe45fcb960d74d2ffdd5c57bf1", "filename": "mk/cfg/mips64-unknown-linux-gnuabi64.mk", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a5bdb78f15b8e53fa848e31c90298edf6c48d6c/mk%2Fcfg%2Fmips64-unknown-linux-gnuabi64.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6a5bdb78f15b8e53fa848e31c90298edf6c48d6c/mk%2Fcfg%2Fmips64-unknown-linux-gnuabi64.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fmips64-unknown-linux-gnuabi64.mk?ref=6a5bdb78f15b8e53fa848e31c90298edf6c48d6c", "patch": "@@ -0,0 +1 @@\n+# rustbuild-only target"}, {"sha": "34aee77ae2107fbe45fcb960d74d2ffdd5c57bf1", "filename": "mk/cfg/mips64el-unknown-linux-gnuabi64.mk", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a5bdb78f15b8e53fa848e31c90298edf6c48d6c/mk%2Fcfg%2Fmips64el-unknown-linux-gnuabi64.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6a5bdb78f15b8e53fa848e31c90298edf6c48d6c/mk%2Fcfg%2Fmips64el-unknown-linux-gnuabi64.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fmips64el-unknown-linux-gnuabi64.mk?ref=6a5bdb78f15b8e53fa848e31c90298edf6c48d6c", "patch": "@@ -0,0 +1 @@\n+# rustbuild-only target"}, {"sha": "7e45b3206536007084206735de1d868717bf884e", "filename": "src/librustc_back/target/mips64_unknown_linux_gnuabi64.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6a5bdb78f15b8e53fa848e31c90298edf6c48d6c/src%2Flibrustc_back%2Ftarget%2Fmips64_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a5bdb78f15b8e53fa848e31c90298edf6c48d6c/src%2Flibrustc_back%2Ftarget%2Fmips64_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmips64_unknown_linux_gnuabi64.rs?ref=6a5bdb78f15b8e53fa848e31c90298edf6c48d6c", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::{Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    Ok(Target {\n+        llvm_target: \"mips64-unknown-linux-gnuabi64\".to_string(),\n+        target_endian: \"big\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n+        arch: \"mips64\".to_string(),\n+        target_os: \"linux\".to_string(),\n+        target_env: \"gnu\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        options: TargetOptions {\n+            // NOTE(mips64r2) matches C toolchain\n+            cpu: \"mips64r2\".to_string(),\n+            features: \"+mips64r2\".to_string(),\n+            max_atomic_width: 64,\n+            ..super::linux_base::opts()\n+        },\n+    })\n+}"}, {"sha": "338a5da1e1d1d64e87909a325d8eae6312424733", "filename": "src/librustc_back/target/mips64el_unknown_linux_gnuabi64.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6a5bdb78f15b8e53fa848e31c90298edf6c48d6c/src%2Flibrustc_back%2Ftarget%2Fmips64el_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a5bdb78f15b8e53fa848e31c90298edf6c48d6c/src%2Flibrustc_back%2Ftarget%2Fmips64el_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmips64el_unknown_linux_gnuabi64.rs?ref=6a5bdb78f15b8e53fa848e31c90298edf6c48d6c", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::{Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    Ok(Target {\n+        llvm_target: \"mips64el-unknown-linux-gnuabi64\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n+        arch: \"mips64\".to_string(),\n+        target_os: \"linux\".to_string(),\n+        target_env: \"gnu\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        options: TargetOptions {\n+            // NOTE(mips64r2) matches C toolchain\n+            cpu: \"mips64r2\".to_string(),\n+            features: \"+mips64r2\".to_string(),\n+            max_atomic_width: 64,\n+            ..super::linux_base::opts()\n+        },\n+    })\n+}"}, {"sha": "3c5ec84a8fa6854cbb791f238f80d670c862fd00", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a5bdb78f15b8e53fa848e31c90298edf6c48d6c/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a5bdb78f15b8e53fa848e31c90298edf6c48d6c/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=6a5bdb78f15b8e53fa848e31c90298edf6c48d6c", "patch": "@@ -128,6 +128,8 @@ supported_targets! {\n     (\"i686-unknown-linux-gnu\", i686_unknown_linux_gnu),\n     (\"i586-unknown-linux-gnu\", i586_unknown_linux_gnu),\n     (\"mips-unknown-linux-gnu\", mips_unknown_linux_gnu),\n+    (\"mips64-unknown-linux-gnuabi64\", mips64_unknown_linux_gnuabi64),\n+    (\"mips64el-unknown-linux-gnuabi64\", mips64el_unknown_linux_gnuabi64),\n     (\"mipsel-unknown-linux-gnu\", mipsel_unknown_linux_gnu),\n     (\"powerpc-unknown-linux-gnu\", powerpc_unknown_linux_gnu),\n     (\"powerpc64-unknown-linux-gnu\", powerpc64_unknown_linux_gnu),"}, {"sha": "5e264c80c4c1cd59b6fab7fb44c7c199853140a5", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a5bdb78f15b8e53fa848e31c90298edf6c48d6c/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a5bdb78f15b8e53fa848e31c90298edf6c48d6c/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=6a5bdb78f15b8e53fa848e31c90298edf6c48d6c", "patch": "@@ -21,6 +21,7 @@ use cabi_aarch64;\n use cabi_powerpc;\n use cabi_powerpc64;\n use cabi_mips;\n+use cabi_mips64;\n use cabi_asmjs;\n use machine::{llalign_of_min, llsize_of, llsize_of_real, llsize_of_store};\n use type_::Type;\n@@ -498,6 +499,7 @@ impl FnType {\n                 cabi_arm::compute_abi_info(ccx, self, flavor);\n             },\n             \"mips\" => cabi_mips::compute_abi_info(ccx, self),\n+            \"mips64\" => cabi_mips64::compute_abi_info(ccx, self),\n             \"powerpc\" => cabi_powerpc::compute_abi_info(ccx, self),\n             \"powerpc64\" => cabi_powerpc64::compute_abi_info(ccx, self),\n             \"asmjs\" => cabi_asmjs::compute_abi_info(ccx, self),"}, {"sha": "d3d3f83eac4316d13924815a478add919653532b", "filename": "src/librustc_trans/cabi_mips64.rs", "status": "added", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/6a5bdb78f15b8e53fa848e31c90298edf6c48d6c/src%2Flibrustc_trans%2Fcabi_mips64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a5bdb78f15b8e53fa848e31c90298edf6c48d6c/src%2Flibrustc_trans%2Fcabi_mips64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_mips64.rs?ref=6a5bdb78f15b8e53fa848e31c90298edf6c48d6c", "patch": "@@ -0,0 +1,168 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(non_upper_case_globals)]\n+\n+use libc::c_uint;\n+use std::cmp;\n+use llvm;\n+use llvm::{Integer, Pointer, Float, Double, Struct, Array, Vector};\n+use abi::{ArgType, FnType};\n+use context::CrateContext;\n+use type_::Type;\n+\n+fn align_up_to(off: usize, a: usize) -> usize {\n+    return (off + a - 1) / a * a;\n+}\n+\n+fn align(off: usize, ty: Type) -> usize {\n+    let a = ty_align(ty);\n+    return align_up_to(off, a);\n+}\n+\n+fn ty_align(ty: Type) -> usize {\n+    match ty.kind() {\n+        Integer => ((ty.int_width() as usize) + 7) / 8,\n+        Pointer => 8,\n+        Float => 4,\n+        Double => 8,\n+        Struct => {\n+          if ty.is_packed() {\n+            1\n+          } else {\n+            let str_tys = ty.field_types();\n+            str_tys.iter().fold(1, |a, t| cmp::max(a, ty_align(*t)))\n+          }\n+        }\n+        Array => {\n+            let elt = ty.element_type();\n+            ty_align(elt)\n+        }\n+        Vector => {\n+            let len = ty.vector_length();\n+            let elt = ty.element_type();\n+            ty_align(elt) * len\n+        }\n+        _ => bug!(\"ty_align: unhandled type\")\n+    }\n+}\n+\n+fn ty_size(ty: Type) -> usize {\n+    match ty.kind() {\n+        Integer => ((ty.int_width() as usize) + 7) / 8,\n+        Pointer => 8,\n+        Float => 4,\n+        Double => 8,\n+        Struct => {\n+            if ty.is_packed() {\n+                let str_tys = ty.field_types();\n+                str_tys.iter().fold(0, |s, t| s + ty_size(*t))\n+            } else {\n+                let str_tys = ty.field_types();\n+                let size = str_tys.iter().fold(0, |s, t| align(s, *t) + ty_size(*t));\n+                align(size, ty)\n+            }\n+        }\n+        Array => {\n+            let len = ty.array_length();\n+            let elt = ty.element_type();\n+            let eltsz = ty_size(elt);\n+            len * eltsz\n+        }\n+        Vector => {\n+            let len = ty.vector_length();\n+            let elt = ty.element_type();\n+            let eltsz = ty_size(elt);\n+            len * eltsz\n+        }\n+        _ => bug!(\"ty_size: unhandled type\")\n+    }\n+}\n+\n+fn classify_ret_ty(ccx: &CrateContext, ret: &mut ArgType) {\n+    if is_reg_ty(ret.ty) {\n+        ret.extend_integer_width_to(64);\n+    } else {\n+        ret.make_indirect(ccx);\n+    }\n+}\n+\n+fn classify_arg_ty(ccx: &CrateContext, arg: &mut ArgType, offset: &mut usize) {\n+    let orig_offset = *offset;\n+    let size = ty_size(arg.ty) * 8;\n+    let mut align = ty_align(arg.ty);\n+\n+    align = cmp::min(cmp::max(align, 4), 8);\n+    *offset = align_up_to(*offset, align);\n+    *offset += align_up_to(size, align * 8) / 8;\n+\n+    if !is_reg_ty(arg.ty) {\n+        arg.cast = Some(struct_ty(ccx, arg.ty));\n+        arg.pad = padding_ty(ccx, align, orig_offset);\n+    } else {\n+        arg.extend_integer_width_to(64);\n+    }\n+}\n+\n+fn is_reg_ty(ty: Type) -> bool {\n+    return match ty.kind() {\n+        Integer\n+        | Pointer\n+        | Float\n+        | Double\n+        | Vector => true,\n+        _ => false\n+    };\n+}\n+\n+fn padding_ty(ccx: &CrateContext, align: usize, offset: usize) -> Option<Type> {\n+    if ((align - 1 ) & offset) > 0 {\n+        Some(Type::i32(ccx))\n+    } else {\n+        None\n+    }\n+}\n+\n+fn coerce_to_int(ccx: &CrateContext, size: usize) -> Vec<Type> {\n+    let int_ty = Type::i32(ccx);\n+    let mut args = Vec::new();\n+\n+    let mut n = size / 64;\n+    while n > 0 {\n+        args.push(int_ty);\n+        n -= 1;\n+    }\n+\n+    let r = size % 64;\n+    if r > 0 {\n+        unsafe {\n+            args.push(Type::from_ref(llvm::LLVMIntTypeInContext(ccx.llcx(), r as c_uint)));\n+        }\n+    }\n+\n+    args\n+}\n+\n+fn struct_ty(ccx: &CrateContext, ty: Type) -> Type {\n+    let size = ty_size(ty) * 8;\n+    Type::struct_(ccx, &coerce_to_int(ccx, size), false)\n+}\n+\n+pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) {\n+    if !fty.ret.is_ignore() {\n+        classify_ret_ty(ccx, &mut fty.ret);\n+    }\n+\n+    let mut offset = if fty.ret.is_indirect() { 8 } else { 0 };\n+    for arg in &mut fty.args {\n+        if arg.is_ignore() { continue; }\n+        classify_arg_ty(ccx, arg, &mut offset);\n+    }\n+}"}, {"sha": "e05c31b1d88cdce6d187d3cbfa132f1b27a86381", "filename": "src/librustc_trans/cabi_powerpc.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6a5bdb78f15b8e53fa848e31c90298edf6c48d6c/src%2Flibrustc_trans%2Fcabi_powerpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a5bdb78f15b8e53fa848e31c90298edf6c48d6c/src%2Flibrustc_trans%2Fcabi_powerpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_powerpc.rs?ref=6a5bdb78f15b8e53fa848e31c90298edf6c48d6c", "patch": "@@ -28,11 +28,7 @@ fn align(off: usize, ty: Type) -> usize {\n \n fn ty_align(ty: Type) -> usize {\n     match ty.kind() {\n-        Integer => {\n-            unsafe {\n-                ((llvm::LLVMGetIntTypeWidth(ty.to_ref()) as usize) + 7) / 8\n-            }\n-        }\n+        Integer => ((ty.int_width() as usize) + 7) / 8,\n         Pointer => 4,\n         Float => 4,\n         Double => 8,\n@@ -54,11 +50,7 @@ fn ty_align(ty: Type) -> usize {\n \n fn ty_size(ty: Type) -> usize {\n     match ty.kind() {\n-        Integer => {\n-            unsafe {\n-                ((llvm::LLVMGetIntTypeWidth(ty.to_ref()) as usize) + 7) / 8\n-            }\n-        }\n+        Integer => ((ty.int_width() as usize) + 7) / 8,\n         Pointer => 4,\n         Float => 4,\n         Double => 8,"}, {"sha": "6ede55d5ff49af1bccc8c917cb9812809ad476d9", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a5bdb78f15b8e53fa848e31c90298edf6c48d6c/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a5bdb78f15b8e53fa848e31c90298edf6c48d6c/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=6a5bdb78f15b8e53fa848e31c90298edf6c48d6c", "patch": "@@ -98,6 +98,7 @@ mod cabi_aarch64;\n mod cabi_arm;\n mod cabi_asmjs;\n mod cabi_mips;\n+mod cabi_mips64;\n mod cabi_powerpc;\n mod cabi_powerpc64;\n mod cabi_x86;"}]}