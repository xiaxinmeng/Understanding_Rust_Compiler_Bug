{"sha": "dac6eeca92e08a252fa952a1e89f6cd9cb6ba6f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYzZlZWNhOTJlMDhhMjUyZmE5NTJhMWU4OWY2Y2Q5Y2I2YmE2ZjU=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-12-20T21:10:07Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2019-01-07T17:25:39Z"}, "message": "semi-revert libsyntax doctest parsing if a macro is wrapping main", "tree": {"sha": "54cd45593146bb486e17c6a6bddbf3df8f8f3b31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54cd45593146bb486e17c6a6bddbf3df8f8f3b31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dac6eeca92e08a252fa952a1e89f6cd9cb6ba6f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dac6eeca92e08a252fa952a1e89f6cd9cb6ba6f5", "html_url": "https://github.com/rust-lang/rust/commit/dac6eeca92e08a252fa952a1e89f6cd9cb6ba6f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dac6eeca92e08a252fa952a1e89f6cd9cb6ba6f5/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21ac19d8fefb023752645fcf2517ce0fad663bf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/21ac19d8fefb023752645fcf2517ce0fad663bf0", "html_url": "https://github.com/rust-lang/rust/commit/21ac19d8fefb023752645fcf2517ce0fad663bf0"}], "stats": {"total": 51, "additions": 48, "deletions": 3}, "files": [{"sha": "1f19fa2e7f598fbd8315fd62a6baba1170400264", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/dac6eeca92e08a252fa952a1e89f6cd9cb6ba6f5/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac6eeca92e08a252fa952a1e89f6cd9cb6ba6f5/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=dac6eeca92e08a252fa952a1e89f6cd9cb6ba6f5", "patch": "@@ -394,7 +394,7 @@ pub fn make_test(s: &str,\n \n     // Uses libsyntax to parse the doctest and find if there's a main fn and the extern\n     // crate already is included.\n-    let (already_has_main, already_has_extern_crate) = crate::syntax::with_globals(|| {\n+    let (already_has_main, already_has_extern_crate, found_macro) = crate::syntax::with_globals(|| {\n         use crate::syntax::{ast, parse::{self, ParseSess}, source_map::FilePathMapping};\n         use crate::syntax_pos::FileName;\n         use errors::emitter::EmitterWriter;\n@@ -412,6 +412,7 @@ pub fn make_test(s: &str,\n \n         let mut found_main = false;\n         let mut found_extern_crate = cratename.is_none();\n+        let mut found_macro = false;\n \n         let mut parser = match parse::maybe_new_parser_from_source_str(&sess, filename, source) {\n             Ok(p) => p,\n@@ -420,7 +421,7 @@ pub fn make_test(s: &str,\n                     err.cancel();\n                 }\n \n-                return (found_main, found_extern_crate);\n+                return (found_main, found_extern_crate, found_macro);\n             }\n         };\n \n@@ -448,6 +449,12 @@ pub fn make_test(s: &str,\n                         }\n                     }\n \n+                    if !found_macro {\n+                        if let ast::ItemKind::Mac(..) = item.node {\n+                            found_macro = true;\n+                        }\n+                    }\n+\n                     if found_main && found_extern_crate {\n                         break;\n                     }\n@@ -460,9 +467,28 @@ pub fn make_test(s: &str,\n             }\n         }\n \n-        (found_main, found_extern_crate)\n+        (found_main, found_extern_crate, found_macro)\n     });\n \n+    // If a doctest's `fn main` is being masked by a wrapper macro, the parsing loop above won't\n+    // see it. In that case, run the old text-based scan to see if they at least have a main\n+    // function written inside a macro invocation. See\n+    // https://github.com/rust-lang/rust/issues/56898\n+    let already_has_main = if found_macro && !already_has_main {\n+        s.lines()\n+            .map(|line| {\n+                let comment = line.find(\"//\");\n+                if let Some(comment_begins) = comment {\n+                    &line[0..comment_begins]\n+                } else {\n+                    line\n+                }\n+            })\n+            .any(|code| code.contains(\"fn main\"))\n+    } else {\n+        already_has_main\n+    };\n+\n     // Don't inject `extern crate std` because it's already injected by the\n     // compiler.\n     if !already_has_extern_crate && !opts.no_crate_inject && cratename != Some(\"std\") {\n@@ -1143,4 +1169,23 @@ assert_eq!(asdf::foo, 4);\n         let output = make_test(input, Some(\"asdf\"), false, &opts);\n         assert_eq!(output, (expected, 3));\n     }\n+\n+    #[test]\n+    fn make_test_main_in_macro() {\n+        let opts = TestOptions::default();\n+        let input =\n+\"#[macro_use] extern crate my_crate;\n+test_wrapper! {\n+    fn main() {}\n+}\";\n+        let expected =\n+\"#![allow(unused)]\n+#[macro_use] extern crate my_crate;\n+test_wrapper! {\n+    fn main() {}\n+}\".to_string();\n+\n+        let output = make_test(input, Some(\"my_crate\"), false, &opts);\n+        assert_eq!(output, (expected, 1));\n+    }\n }"}]}