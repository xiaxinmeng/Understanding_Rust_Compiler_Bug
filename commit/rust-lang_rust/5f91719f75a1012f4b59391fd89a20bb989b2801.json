{"sha": "5f91719f75a1012f4b59391fd89a20bb989b2801", "node_id": "C_kwDOAAsO6NoAKDVmOTE3MTlmNzVhMTAxMmY0YjU5MzkxZmQ4OWEyMGJiOTg5YjI4MDE", "commit": {"author": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-09-18T15:47:31Z"}, "committer": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-09-21T15:39:53Z"}, "message": "UPDATE - rename SessionSubdiagnostic macro to Subdiagnostic\n\nAlso renames:\n- sym::AddSubdiagnostic to sym:: Subdiagnostic\n- rustc_diagnostic_item = \"AddSubdiagnostic\" to rustc_diagnostic_item = \"Subdiagnostic\"", "tree": {"sha": "22886e03d601a14d82f4f0c65d8c673afdc35700", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22886e03d601a14d82f4f0c65d8c673afdc35700"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f91719f75a1012f4b59391fd89a20bb989b2801", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f91719f75a1012f4b59391fd89a20bb989b2801", "html_url": "https://github.com/rust-lang/rust/commit/5f91719f75a1012f4b59391fd89a20bb989b2801", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f91719f75a1012f4b59391fd89a20bb989b2801/comments", "author": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3396b207093c01065b63b0c58f1e6654629166d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3396b207093c01065b63b0c58f1e6654629166d", "html_url": "https://github.com/rust-lang/rust/commit/a3396b207093c01065b63b0c58f1e6654629166d"}], "stats": {"total": 258, "additions": 130, "deletions": 128}, "files": [{"sha": "052979d6d4568cc6ddc277601570cca415ab55b1", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=5f91719f75a1012f4b59391fd89a20bb989b2801", "patch": "@@ -1,5 +1,5 @@\n use rustc_errors::{fluent, AddToDiagnostic, Applicability, Diagnostic, DiagnosticArgFromDisplay};\n-use rustc_macros::{Diagnostic, SessionSubdiagnostic};\n+use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_span::{symbol::Ident, Span, Symbol};\n \n #[derive(Diagnostic, Clone, Copy)]\n@@ -221,7 +221,7 @@ pub struct InvalidAsmTemplateModifierRegClass {\n     pub sub: InvalidAsmTemplateModifierRegClassSub,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum InvalidAsmTemplateModifierRegClassSub {\n     #[note(ast_lowering::support_modifiers)]\n     SupportModifier { class_name: Symbol, modifiers: String },"}, {"sha": "035f0ce1cbc42c758406e121d7147ec25c8f97bd", "filename": "compiler/rustc_ast_passes/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs?ref=5f91719f75a1012f4b59391fd89a20bb989b2801", "patch": "@@ -71,7 +71,7 @@ pub struct InvalidVisibility {\n     pub note: Option<InvalidVisibilityNote>,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum InvalidVisibilityNote {\n     #[note(ast_passes::individual_impl_items)]\n     IndividualImplItems,"}, {"sha": "940a48ed915d592c5881d2f67db6c0d4faaf0c40", "filename": "compiler/rustc_attr/src/session_diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs?ref=5f91719f75a1012f4b59391fd89a20bb989b2801", "patch": "@@ -98,7 +98,7 @@ pub(crate) struct InvalidIssueString {\n \n // The error kinds of `IntErrorKind` are duplicated here in order to allow the messages to be\n // translatable.\n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub(crate) enum InvalidIssueStringCause {\n     #[label(attr::must_not_be_zero)]\n     MustNotBeZero {\n@@ -274,7 +274,7 @@ pub(crate) struct IncorrectReprFormatGeneric<'a> {\n     pub cause: Option<IncorrectReprFormatGenericCause<'a>>,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub(crate) enum IncorrectReprFormatGenericCause<'a> {\n     #[suggestion(attr::suggestion, code = \"{name}({int})\", applicability = \"machine-applicable\")]\n     Int {"}, {"sha": "9f19453a1a658717b41368436b21710530167fe0", "filename": "compiler/rustc_borrowck/src/session_diagnostics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs?ref=5f91719f75a1012f4b59391fd89a20bb989b2801", "patch": "@@ -1,5 +1,5 @@\n use rustc_errors::{IntoDiagnosticArg, MultiSpan};\n-use rustc_macros::{Diagnostic, LintDiagnostic, SessionSubdiagnostic};\n+use rustc_macros::{Diagnostic, LintDiagnostic, Subdiagnostic};\n use rustc_middle::ty::Ty;\n use rustc_span::Span;\n \n@@ -23,7 +23,7 @@ pub(crate) struct HigherRankedLifetimeError {\n     pub span: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub(crate) enum HigherRankedErrorCause {\n     #[note(borrowck::could_not_prove)]\n     CouldNotProve { predicate: String },\n@@ -72,7 +72,7 @@ pub(crate) struct FnMutError {\n     pub ty_err: FnMutReturnTypeErr,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub(crate) enum VarHereDenote {\n     #[label(borrowck::var_here_captured)]\n     Captured {\n@@ -91,7 +91,7 @@ pub(crate) enum VarHereDenote {\n     },\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub(crate) enum FnMutReturnTypeErr {\n     #[label(borrowck::returned_closure_escaped)]\n     ReturnClosure {\n@@ -117,7 +117,7 @@ pub(crate) struct LifetimeOutliveErr {\n     pub span: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub(crate) enum LifetimeReturnCategoryErr<'a> {\n     #[label(borrowck::returned_lifetime_wrong)]\n     WrongReturn {\n@@ -149,7 +149,7 @@ impl IntoDiagnosticArg for RegionName {\n     }\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub(crate) enum RequireStaticErr {\n     #[note(borrowck::used_impl_require_static)]\n     UsedImpl {"}, {"sha": "ff33ae7e8f224edd0971202b11807c08a75422cf", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=5f91719f75a1012f4b59391fd89a20bb989b2801", "patch": "@@ -268,14 +268,14 @@ type FluentId = Cow<'static, str>;\n /// Translatable messages for subdiagnostics are typically attributes attached to a larger Fluent\n /// message so messages of this type must be combined with a `DiagnosticMessage` (using\n /// `DiagnosticMessage::with_subdiagnostic_message`) before rendering. However, subdiagnostics from\n-/// the `SessionSubdiagnostic` derive refer to Fluent identifiers directly.\n+/// the `Subdiagnostic` derive refer to Fluent identifiers directly.\n #[rustc_diagnostic_item = \"SubdiagnosticMessage\"]\n pub enum SubdiagnosticMessage {\n     /// Non-translatable diagnostic message.\n     // FIXME(davidtwco): can a `Cow<'static, str>` be used here?\n     Str(String),\n     /// Identifier of a Fluent message. Instances of this variant are generated by the\n-    /// `SessionSubdiagnostic` derive.\n+    /// `Subdiagnostic` derive.\n     FluentIdentifier(FluentId),\n     /// Attribute of a Fluent message. Needs to be combined with a Fluent identifier to produce an\n     /// actual translated message. Instances of this variant are generated by the `fluent_messages`"}, {"sha": "c66889189add5479d8228a66a860e50a5d300931", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=5f91719f75a1012f4b59391fd89a20bb989b2801", "patch": "@@ -176,8 +176,9 @@ impl IntoDiagnosticArg for hir::ConstContext {\n }\n \n /// Trait implemented by error types. This should not be implemented manually. Instead, use\n-/// `#[derive(SessionSubdiagnostic)]` -- see [rustc_macros::SessionSubdiagnostic].\n-#[rustc_diagnostic_item = \"AddSubdiagnostic\"]\n+/// `#[derive(Subdiagnostic)]` -- see [rustc_macros::Subdiagnostic].\n+#[cfg_attr(bootstrap, rustc_diagnostic_item = \"AddSubdiagnostic\")]\n+#[cfg_attr(not(bootstrap), rustc_diagnostic_item = \"Subdiagnostic\")]\n pub trait AddToDiagnostic {\n     /// Add a subdiagnostic to an existing diagnostic.\n     fn add_to_diagnostic(self, diag: &mut Diagnostic);\n@@ -891,8 +892,8 @@ impl Diagnostic {\n         self\n     }\n \n-    /// Add a subdiagnostic from a type that implements `SessionSubdiagnostic` - see\n-    /// [rustc_macros::SessionSubdiagnostic].\n+    /// Add a subdiagnostic from a type that implements `Subdiagnostic` - see\n+    /// [rustc_macros::Subdiagnostic].\n     pub fn subdiagnostic(&mut self, subdiagnostic: impl AddToDiagnostic) -> &mut Self {\n         subdiagnostic.add_to_diagnostic(self);\n         self"}, {"sha": "6d2c7aac6af495c4fd017f77be0af978ce4b28d1", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=5f91719f75a1012f4b59391fd89a20bb989b2801", "patch": "@@ -593,7 +593,7 @@ pub fn compile_declarative_macro(\n     (mk_syn_ext(expander), rule_spans)\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n enum ExplainDocComment {\n     #[label(expand::explain_doc_comment_inner)]\n     Inner {"}, {"sha": "3a89d90c88a6eb38e5e1c0aa33a62ceecf5624fa", "filename": "compiler/rustc_lint/src/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs?ref=5f91719f75a1012f4b59391fd89a20bb989b2801", "patch": "@@ -1,5 +1,5 @@\n use rustc_errors::{fluent, AddToDiagnostic, IntoDiagnostic, ErrorGuaranteed, Handler};\n-use rustc_macros::{Diagnostic, SessionSubdiagnostic};\n+use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_session::lint::Level;\n use rustc_span::{Span, Symbol};\n \n@@ -51,7 +51,7 @@ pub struct MalformedAttribute {\n     pub sub: MalformedAttributeSub,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum MalformedAttributeSub {\n     #[label(lint::bad_attribute_argument)]\n     BadAttributeArgument(#[primary_span] Span),"}, {"sha": "942475d31fe32f879fcd13bbe05377e79e219eef", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=5f91719f75a1012f4b59391fd89a20bb989b2801", "patch": "@@ -404,7 +404,7 @@ impl LateLintPass<'_> for Diagnostics {\n                 let Impl { of_trait: Some(of_trait), .. } = impl_ &&\n                 let Some(def_id) = of_trait.trait_def_id() &&\n                 let Some(name) = cx.tcx.get_diagnostic_name(def_id) &&\n-                matches!(name, sym::Diagnostic | sym::AddSubdiagnostic | sym::DecorateLint)\n+                matches!(name, sym::Diagnostic | sym::Subdiagnostic | sym::DecorateLint)\n             {\n                 found_impl = true;\n                 break;"}, {"sha": "8eaa8b87c0f35f5a1cbc86380718532d4311b78d", "filename": "compiler/rustc_macros/src/diagnostics/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=5f91719f75a1012f4b59391fd89a20bb989b2801", "patch": "@@ -9,7 +9,7 @@ use diagnostic::{LintDiagnosticDerive, SessionDiagnosticDerive};\n pub(crate) use fluent::fluent_messages;\n use proc_macro2::TokenStream;\n use quote::format_ident;\n-use subdiagnostic::SessionSubdiagnosticDerive;\n+use subdiagnostic::SubdiagnosticDerive;\n use synstructure::Structure;\n \n /// Implements `#[derive(Diagnostic)]`, which allows for errors to be specified as a struct,\n@@ -108,12 +108,12 @@ pub fn lint_diagnostic_derive(s: Structure<'_>) -> TokenStream {\n     LintDiagnosticDerive::new(format_ident!(\"diag\"), s).into_tokens()\n }\n \n-/// Implements `#[derive(SessionSubdiagnostic)]`, which allows for labels, notes, helps and\n+/// Implements `#[derive(Subdiagnostic)]`, which allows for labels, notes, helps and\n /// suggestions to be specified as a structs or enums, independent from the actual diagnostics\n /// emitting code or diagnostic derives.\n ///\n /// ```ignore (rust)\n-/// #[derive(SessionSubdiagnostic)]\n+/// #[derive(Subdiagnostic)]\n /// pub enum ExpectedIdentifierLabel<'tcx> {\n ///     #[label(parser::expected_identifier)]\n ///     WithoutFound {\n@@ -128,7 +128,7 @@ pub fn lint_diagnostic_derive(s: Structure<'_>) -> TokenStream {\n ///     }\n /// }\n ///\n-/// #[derive(SessionSubdiagnostic)]\n+/// #[derive(Subdiagnostic)]\n /// #[suggestion_verbose(parser::raw_identifier)]\n /// pub struct RawIdentifierSuggestion<'tcx> {\n ///     #[primary_span]\n@@ -155,5 +155,5 @@ pub fn lint_diagnostic_derive(s: Structure<'_>) -> TokenStream {\n /// diag.subdiagnostic(RawIdentifierSuggestion { span, applicability, ident });\n /// ```\n pub fn session_subdiagnostic_derive(s: Structure<'_>) -> TokenStream {\n-    SessionSubdiagnosticDerive::new(s).into_tokens()\n+    SubdiagnosticDerive::new(s).into_tokens()\n }"}, {"sha": "bdeca3420bccac8ba3ee059f0efcfa455b2893ad", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=5f91719f75a1012f4b59391fd89a20bb989b2801", "patch": "@@ -98,19 +98,19 @@ impl quote::IdentFragment for SubdiagnosticKind {\n }\n \n /// The central struct for constructing the `add_to_diagnostic` method from an annotated struct.\n-pub(crate) struct SessionSubdiagnosticDerive<'a> {\n+pub(crate) struct SubdiagnosticDerive<'a> {\n     structure: Structure<'a>,\n     diag: syn::Ident,\n }\n \n-impl<'a> SessionSubdiagnosticDerive<'a> {\n+impl<'a> SubdiagnosticDerive<'a> {\n     pub(crate) fn new(structure: Structure<'a>) -> Self {\n         let diag = format_ident!(\"diag\");\n         Self { structure, diag }\n     }\n \n     pub(crate) fn into_tokens(self) -> TokenStream {\n-        let SessionSubdiagnosticDerive { mut structure, diag } = self;\n+        let SubdiagnosticDerive { mut structure, diag } = self;\n         let implementation = {\n             let ast = structure.ast();\n             let span = ast.span().unwrap();\n@@ -119,7 +119,7 @@ impl<'a> SessionSubdiagnosticDerive<'a> {\n                 syn::Data::Union(..) => {\n                     span_err(\n                         span,\n-                        \"`#[derive(SessionSubdiagnostic)]` can only be used on structs and enums\",\n+                        \"`#[derive(Subdiagnostic)]` can only be used on structs and enums\",\n                     );\n                 }\n             }\n@@ -146,7 +146,7 @@ impl<'a> SessionSubdiagnosticDerive<'a> {\n                     }\n                 }\n \n-                let mut builder = SessionSubdiagnosticDeriveBuilder {\n+                let mut builder = SubdiagnosticDeriveBuilder {\n                     diag: &diag,\n                     variant,\n                     span,\n@@ -178,10 +178,10 @@ impl<'a> SessionSubdiagnosticDerive<'a> {\n }\n \n /// Tracks persistent information required for building up the call to add to the diagnostic\n-/// for the final generated method. This is a separate struct to `SessionSubdiagnosticDerive`\n+/// for the final generated method. This is a separate struct to `SubdiagnosticDerive`\n /// only to be able to destructure and split `self.builder` and the `self.structure` up to avoid a\n /// double mut borrow later on.\n-struct SessionSubdiagnosticDeriveBuilder<'a> {\n+struct SubdiagnosticDeriveBuilder<'a> {\n     /// The identifier to use for the generated `DiagnosticBuilder` instance.\n     diag: &'a syn::Ident,\n \n@@ -205,7 +205,7 @@ struct SessionSubdiagnosticDeriveBuilder<'a> {\n     has_suggestion_parts: bool,\n }\n \n-impl<'a> HasFieldMap for SessionSubdiagnosticDeriveBuilder<'a> {\n+impl<'a> HasFieldMap for SubdiagnosticDeriveBuilder<'a> {\n     fn get_field_binding(&self, field: &String) -> Option<&TokenStream> {\n         self.fields.get(field)\n     }\n@@ -241,7 +241,7 @@ impl<'a> FromIterator<&'a SubdiagnosticKind> for KindsStatistics {\n     }\n }\n \n-impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n+impl<'a> SubdiagnosticDeriveBuilder<'a> {\n     fn identify_kind(&mut self) -> Result<Vec<(SubdiagnosticKind, Path)>, DiagnosticDeriveError> {\n         let mut kind_slugs = vec![];\n "}, {"sha": "8fd23ee5ced99f5904ed73a800074d1c096794fe", "filename": "compiler/rustc_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Flib.rs?ref=5f91719f75a1012f4b59391fd89a20bb989b2801", "patch": "@@ -161,7 +161,7 @@ decl_derive!(\n         suggestion_verbose)] => diagnostics::lint_diagnostic_derive\n );\n decl_derive!(\n-    [SessionSubdiagnostic, attributes(\n+    [Subdiagnostic, attributes(\n         // struct/variant attributes\n         label,\n         help,"}, {"sha": "a4ceb494569b1415ea73100fc8b71003dfe58498", "filename": "compiler/rustc_middle/src/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_middle%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_middle%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ferror.rs?ref=5f91719f75a1012f4b59391fd89a20bb989b2801", "patch": "@@ -25,7 +25,7 @@ pub struct OpaqueHiddenTypeMismatch<'tcx> {\n     pub sub: TypeMismatchReason,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum TypeMismatchReason {\n     #[label(middle::conflict_types)]\n     ConflictType {"}, {"sha": "78bc29fc3758ff5a9ade5ab5474fc2de9a79816e", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=5f91719f75a1012f4b59391fd89a20bb989b2801", "patch": "@@ -20,7 +20,7 @@ use rustc_errors::{\n     fluent, Applicability, DiagnosticBuilder, DiagnosticMessage, Handler, MultiSpan, PResult,\n };\n use rustc_errors::{pluralize, struct_span_err, Diagnostic, ErrorGuaranteed};\n-use rustc_macros::{Diagnostic, SessionSubdiagnostic};\n+use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{Span, SpanSnippetError, DUMMY_SP};\n@@ -261,7 +261,7 @@ struct BadTypePlus {\n     pub sub: BadTypePlusSub,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum BadTypePlusSub {\n     #[suggestion(\n         parser::add_paren,\n@@ -342,7 +342,7 @@ pub struct InvalidVariableDeclaration {\n     pub sub: InvalidVariableDeclarationSub,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum InvalidVariableDeclarationSub {\n     #[suggestion(\n         parser::switch_mut_let_order,\n@@ -372,7 +372,7 @@ pub(crate) struct InvalidComparisonOperator {\n     pub sub: InvalidComparisonOperatorSub,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub(crate) enum InvalidComparisonOperatorSub {\n     #[suggestion_short(\n         parser::use_instead,\n@@ -400,7 +400,7 @@ pub(crate) struct InvalidLogicalOperator {\n     pub sub: InvalidLogicalOperatorSub,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub(crate) enum InvalidLogicalOperatorSub {\n     #[suggestion_short(\n         parser::use_amp_amp_for_conjunction,\n@@ -605,7 +605,7 @@ pub(crate) struct IfExpressionMissingThenBlock {\n     pub sub: IfExpressionMissingThenBlockSub,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub(crate) enum IfExpressionMissingThenBlockSub {\n     #[help(parser::condition_possibly_unfinished)]\n     UnfinishedCondition(#[primary_span] Span),\n@@ -668,7 +668,7 @@ pub(crate) struct MissingInInForLoop {\n     pub sub: MissingInInForLoopSub,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub(crate) enum MissingInInForLoopSub {\n     // Has been misleading, at least in the past (closed Issue #48492), thus maybe-incorrect\n     #[suggestion_short(parser::use_in_not_of, applicability = \"maybe-incorrect\", code = \"in\")]"}, {"sha": "52aea9bba4325531351f20fb2b08e2b47fdfc510", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=5f91719f75a1012f4b59391fd89a20bb989b2801", "patch": "@@ -1,5 +1,5 @@\n use rustc_errors::{Applicability, MultiSpan};\n-use rustc_macros::{Diagnostic, LintDiagnostic, SessionSubdiagnostic};\n+use rustc_macros::{Diagnostic, LintDiagnostic, Subdiagnostic};\n use rustc_span::{Span, Symbol};\n \n #[derive(LintDiagnostic)]\n@@ -583,7 +583,7 @@ pub struct MacroExport;\n #[diag(passes::plugin_registrar)]\n pub struct PluginRegistrar;\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum UnusedNote {\n     #[note(passes::unused_empty_lints_note)]\n     EmptyList { name: Symbol },"}, {"sha": "f3a617c2f0fa1746067e62f8ab680e384c608c5f", "filename": "compiler/rustc_privacy/src/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs?ref=5f91719f75a1012f4b59391fd89a20bb989b2801", "patch": "@@ -1,5 +1,5 @@\n use rustc_errors::DiagnosticArgFromDisplay;\n-use rustc_macros::{Diagnostic, LintDiagnostic, SessionSubdiagnostic};\n+use rustc_macros::{Diagnostic, LintDiagnostic, Subdiagnostic};\n use rustc_span::{Span, Symbol};\n \n #[derive(Diagnostic)]\n@@ -14,7 +14,7 @@ pub struct FieldIsPrivate {\n     pub label: FieldIsPrivateLabel,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum FieldIsPrivateLabel {\n     #[label(privacy::field_is_private_is_update_syntax_label)]\n     IsUpdateSyntax {"}, {"sha": "ceec75fce28f12496bbf37a01803a2e1a0ea6ae5", "filename": "compiler/rustc_query_system/src/error.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_query_system%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_query_system%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Ferror.rs?ref=5f91719f75a1012f4b59391fd89a20bb989b2801", "patch": "@@ -1,6 +1,7 @@\n use rustc_errors::AddToDiagnostic;\n use rustc_session::Limit;\n use rustc_span::{Span, Symbol};\n+use rustc_macros::{Diagnostic, Subdiagnostic};\n \n pub struct CycleStack {\n     pub span: Span,\n@@ -20,15 +21,15 @@ pub enum HandleCycleError {\n     DelayBug,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum StackCount {\n     #[note(query_system::cycle_stack_single)]\n     Single,\n     #[note(query_system::cycle_stack_multiple)]\n     Multiple,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum Alias {\n     #[note(query_system::cycle_recursive_ty_alias)]\n     #[help(query_system::cycle_recursive_ty_alias_help1)]\n@@ -38,7 +39,7 @@ pub enum Alias {\n     Trait,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[note(query_system::cycle_usage)]\n pub struct CycleUsage {\n     #[primary_span]"}, {"sha": "997a45272bca82d1e4031a35921952dc286b65ff", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=5f91719f75a1012f4b59391fd89a20bb989b2801", "patch": "@@ -34,13 +34,13 @@ pub struct FeatureGateError<'a> {\n     pub explain: &'a str,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[note(session::feature_diagnostic_for_issue)]\n pub struct FeatureDiagnosticForIssue {\n     pub n: NonZeroU32,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[help(session::feature_diagnostic_help)]\n pub struct FeatureDiagnosticHelp {\n     pub feature: Symbol,"}, {"sha": "1baad6a9fd7a6ade4bdf61bc1cc5258b8ad995f0", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=5f91719f75a1012f4b59391fd89a20bb989b2801", "patch": "@@ -125,7 +125,6 @@ symbols! {\n     Symbols {\n         AcqRel,\n         Acquire,\n-        AddSubdiagnostic,\n         Alignment,\n         Any,\n         Arc,\n@@ -283,6 +282,7 @@ symbols! {\n         String,\n         StructuralEq,\n         StructuralPartialEq,\n+        Subdiagnostic,\n         SubdiagnosticMessage,\n         Sync,\n         T,"}, {"sha": "753c474a34bca365f608f4e0533139029e81a61f", "filename": "compiler/rustc_ty_utils/src/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs?ref=5f91719f75a1012f4b59391fd89a20bb989b2801", "patch": "@@ -1,6 +1,6 @@\n //! Errors emitted by ty_utils\n \n-use rustc_macros::{Diagnostic, SessionSubdiagnostic};\n+use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_middle::ty::Ty;\n use rustc_span::Span;\n \n@@ -22,7 +22,7 @@ pub struct GenericConstantTooComplex {\n     pub sub: GenericConstantTooComplexSub,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum GenericConstantTooComplexSub {\n     #[label(ty_utils::borrow_not_supported)]\n     BorrowNotSupported(#[primary_span] Span),"}, {"sha": "44df47e2fa00c47ec15b3f0fd5caf4bc92172322", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f91719f75a1012f4b59391fd89a20bb989b2801/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=5f91719f75a1012f4b59391fd89a20bb989b2801", "patch": "@@ -1,7 +1,7 @@\n //! Errors emitted by typeck.\n use rustc_errors::IntoDiagnostic;\n use rustc_errors::{error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed, Handler};\n-use rustc_macros::{Diagnostic, LintDiagnostic, SessionSubdiagnostic};\n+use rustc_macros::{Diagnostic, LintDiagnostic, Subdiagnostic};\n use rustc_middle::ty::Ty;\n use rustc_span::{symbol::Ident, Span, Symbol};\n \n@@ -194,7 +194,7 @@ pub struct AddressOfTemporaryTaken {\n     pub span: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum AddReturnTypeSuggestion {\n     #[suggestion(\n         typeck::add_return_type_add,\n@@ -217,7 +217,7 @@ pub enum AddReturnTypeSuggestion {\n     },\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum ExpectedReturnTypeLabel<'tcx> {\n     #[label(typeck::expected_default_return_type)]\n     Unit {"}, {"sha": "4c2c28dc3368138be498456cf04981350281e2b2", "filename": "src/test/ui-fulldeps/internal-lints/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f91719f75a1012f4b59391fd89a20bb989b2801/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f91719f75a1012f4b59391fd89a20bb989b2801/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs?ref=5f91719f75a1012f4b59391fd89a20bb989b2801", "patch": "@@ -15,7 +15,7 @@ use rustc_errors::{\n     AddToDiagnostic, IntoDiagnostic, Diagnostic, DiagnosticBuilder,\n     ErrorGuaranteed, Handler, fluent\n };\n-use rustc_macros::{Diagnostic, SessionSubdiagnostic};\n+use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_span::Span;\n \n #[derive(Diagnostic)]\n@@ -25,7 +25,7 @@ struct DeriveSessionDiagnostic {\n     span: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[note(parser::add_paren)]\n struct Note {\n     #[primary_span]"}, {"sha": "80ea908288103aab5c5858f6cabf64794a7862b3", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f91719f75a1012f4b59391fd89a20bb989b2801/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f91719f75a1012f4b59391fd89a20bb989b2801/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=5f91719f75a1012f4b59391fd89a20bb989b2801", "patch": "@@ -17,7 +17,7 @@ use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n extern crate rustc_macros;\n-use rustc_macros::{Diagnostic, LintDiagnostic, SessionSubdiagnostic};\n+use rustc_macros::{Diagnostic, LintDiagnostic, Subdiagnostic};\n \n extern crate rustc_middle;\n use rustc_middle::ty::Ty;\n@@ -462,7 +462,7 @@ struct NoApplicability {\n     suggestion: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[note(parser::add_paren)]\n struct Note;\n "}, {"sha": "9fbe7b1f4c8592e95ca646b4f4c659593bcd2abc", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.rs", "status": "modified", "additions": 65, "deletions": 65, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/5f91719f75a1012f4b59391fd89a20bb989b2801/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f91719f75a1012f4b59391fd89a20bb989b2801/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs?ref=5f91719f75a1012f4b59391fd89a20bb989b2801", "patch": "@@ -1,8 +1,8 @@\n // check-fail\n-// Tests error conditions for specifying subdiagnostics using #[derive(SessionSubdiagnostic)]\n+// Tests error conditions for specifying subdiagnostics using #[derive(Subdiagnostic)]\n \n // The proc_macro2 crate handles spans differently when on beta/stable release rather than nightly,\n-// changing the output of this test. Since SessionSubdiagnostic is strictly internal to the compiler\n+// changing the output of this test. Since Subdiagnostic is strictly internal to the compiler\n // the test is just ignored on stable and beta:\n // ignore-beta\n // ignore-stable\n@@ -17,17 +17,17 @@ extern crate rustc_macros;\n \n use rustc_errors::Applicability;\n use rustc_span::Span;\n-use rustc_macros::SessionSubdiagnostic;\n+use rustc_macros::Subdiagnostic;\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(parser::add_paren)]\n struct A {\n     #[primary_span]\n     span: Span,\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n enum B {\n     #[label(parser::add_paren)]\n     A {\n@@ -43,14 +43,14 @@ enum B {\n     }\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(parser::add_paren)]\n //~^ ERROR label without `#[primary_span]` field\n struct C {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label]\n //~^ ERROR `#[label]` is not a valid attribute\n struct D {\n@@ -59,7 +59,7 @@ struct D {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[foo]\n //~^ ERROR `#[foo]` is not a valid attribute\n //~^^ ERROR cannot find attribute `foo` in this scope\n@@ -69,7 +69,7 @@ struct E {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label = \"...\"]\n //~^ ERROR `#[label = ...]` is not a valid attribute\n struct F {\n@@ -78,7 +78,7 @@ struct F {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(bug = \"...\")]\n //~^ ERROR `#[label(bug = ...)]` is not a valid attribute\n struct G {\n@@ -87,7 +87,7 @@ struct G {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(\"...\")]\n //~^ ERROR `#[label(\"...\")]` is not a valid attribute\n struct H {\n@@ -96,7 +96,7 @@ struct H {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(slug = 4)]\n //~^ ERROR `#[label(slug = ...)]` is not a valid attribute\n struct J {\n@@ -105,7 +105,7 @@ struct J {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(slug(\"...\"))]\n //~^ ERROR `#[label(slug(...))]` is not a valid attribute\n struct K {\n@@ -114,7 +114,7 @@ struct K {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(slug)]\n //~^ ERROR cannot find value `slug` in module `rustc_errors::fluent`\n //~^^ NOTE not found in `rustc_errors::fluent`\n@@ -124,7 +124,7 @@ struct L {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label()]\n //~^ ERROR diagnostic slug must be first argument of a `#[label(...)]` attribute\n struct M {\n@@ -133,7 +133,7 @@ struct M {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(parser::add_paren, code = \"...\")]\n //~^ ERROR `code` is not a valid nested attribute of a `label` attribute\n struct N {\n@@ -142,7 +142,7 @@ struct N {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(parser::add_paren, applicability = \"machine-applicable\")]\n //~^ ERROR `applicability` is not a valid nested attribute of a `label` attribute\n struct O {\n@@ -151,7 +151,7 @@ struct O {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[foo]\n //~^ ERROR cannot find attribute `foo` in this scope\n //~^^ ERROR unsupported type attribute for subdiagnostic enum\n@@ -164,7 +164,7 @@ enum P {\n     }\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n enum Q {\n     #[bar]\n     //~^ ERROR `#[bar]` is not a valid attribute\n@@ -176,7 +176,7 @@ enum Q {\n     }\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n enum R {\n     #[bar = \"...\"]\n     //~^ ERROR `#[bar = ...]` is not a valid attribute\n@@ -188,7 +188,7 @@ enum R {\n     }\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n enum S {\n     #[bar = 4]\n     //~^ ERROR `#[bar = ...]` is not a valid attribute\n@@ -200,7 +200,7 @@ enum S {\n     }\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n enum T {\n     #[bar(\"...\")]\n     //~^ ERROR `#[bar(...)]` is not a valid attribute\n@@ -212,7 +212,7 @@ enum T {\n     }\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n enum U {\n     #[label(code = \"...\")]\n     //~^ ERROR diagnostic slug must be first argument of a `#[label(...)]` attribute\n@@ -223,7 +223,7 @@ enum U {\n     }\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n enum V {\n     #[label(parser::add_paren)]\n     A {\n@@ -239,7 +239,7 @@ enum V {\n     }\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(parser::add_paren)]\n //~^ ERROR label without `#[primary_span]` field\n struct W {\n@@ -248,7 +248,7 @@ struct W {\n     span: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(parser::add_paren)]\n struct X {\n     #[primary_span]\n@@ -258,7 +258,7 @@ struct X {\n     applicability: Applicability,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(parser::add_paren)]\n struct Y {\n     #[primary_span]\n@@ -269,7 +269,7 @@ struct Y {\n     bar: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(parser::add_paren)]\n struct Z {\n     #[primary_span]\n@@ -280,7 +280,7 @@ struct Z {\n     bar: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(parser::add_paren)]\n struct AA {\n     #[primary_span]\n@@ -291,7 +291,7 @@ struct AA {\n     bar: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(parser::add_paren)]\n struct AB {\n     #[primary_span]\n@@ -300,30 +300,30 @@ struct AB {\n     z: Z\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n union AC {\n //~^ ERROR unexpected unsupported untagged union\n     span: u32,\n     b: u64\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(parser::add_paren)]\n #[label(parser::add_paren)]\n struct AD {\n     #[primary_span]\n     span: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(parser::add_paren, parser::add_paren)]\n //~^ ERROR `#[label(parser::add_paren)]` is not a valid attribute\n struct AE {\n     #[primary_span]\n     span: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label(parser::add_paren)]\n struct AF {\n     #[primary_span]\n@@ -334,14 +334,14 @@ struct AF {\n     span_b: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n struct AG {\n     //~^ ERROR subdiagnostic kind not specified\n     #[primary_span]\n     span: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[suggestion(parser::add_paren, code = \"...\")]\n struct AH {\n     #[primary_span]\n@@ -351,7 +351,7 @@ struct AH {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n enum AI {\n     #[suggestion(parser::add_paren, code = \"...\")]\n     A {\n@@ -371,7 +371,7 @@ enum AI {\n     }\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[suggestion(parser::add_paren, code = \"...\", code = \"...\")]\n //~^ ERROR specified multiple times\n //~^^ NOTE previously specified here\n@@ -382,7 +382,7 @@ struct AJ {\n     applicability: Applicability,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[suggestion(parser::add_paren, code = \"...\")]\n struct AK {\n     #[primary_span]\n@@ -395,7 +395,7 @@ struct AK {\n     applicability_b: Applicability,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[suggestion(parser::add_paren, code = \"...\")]\n struct AL {\n     #[primary_span]\n@@ -405,14 +405,14 @@ struct AL {\n     applicability: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[suggestion(parser::add_paren, code = \"...\")]\n struct AM {\n     #[primary_span]\n     span: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[suggestion(parser::add_paren)]\n //~^ ERROR suggestion without `code = \"...\"`\n struct AN {\n@@ -422,39 +422,39 @@ struct AN {\n     applicability: Applicability,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[suggestion(parser::add_paren, code =\"...\", applicability = \"foo\")]\n //~^ ERROR invalid applicability\n struct AO {\n     #[primary_span]\n     span: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[help(parser::add_paren)]\n struct AP {\n     var: String\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[note(parser::add_paren)]\n struct AQ;\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[suggestion(parser::add_paren, code = \"...\")]\n //~^ ERROR suggestion without `#[primary_span]` field\n struct AR {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[suggestion(parser::add_paren, code =\"...\", applicability = \"machine-applicable\")]\n struct AS {\n     #[primary_span]\n     span: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[label]\n //~^ ERROR unsupported type attribute for subdiagnostic enum\n enum AT {\n@@ -466,23 +466,23 @@ enum AT {\n     }\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n struct AU {\n     #[primary_span]\n     span: Span,\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n //~^ ERROR `var` doesn't refer to a field on this type\n struct AV {\n     #[primary_span]\n     span: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n enum AW {\n     #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n     A {\n@@ -492,7 +492,7 @@ enum AW {\n     }\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n enum AX {\n     #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n //~^ ERROR `var` doesn't refer to a field on this type\n@@ -502,18 +502,18 @@ enum AX {\n     }\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[warning(parser::add_paren)]\n struct AY {}\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[warning(parser::add_paren)]\n struct AZ {\n     #[primary_span]\n     span: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[suggestion(parser::add_paren, code = \"...\")]\n //~^ ERROR suggestion without `#[primary_span]` field\n struct BA {\n@@ -528,31 +528,31 @@ struct BA {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[multipart_suggestion(parser::add_paren, code = \"...\", applicability = \"machine-applicable\")]\n //~^ ERROR multipart suggestion without any `#[suggestion_part(...)]` fields\n //~| ERROR `code` is not a valid nested attribute of a `multipart_suggestion` attribute\n struct BBa {\n     var: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n struct BBb {\n     #[suggestion_part]\n     //~^ ERROR `#[suggestion_part(...)]` attribute without `code = \"...\"`\n     span1: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n struct BBc {\n     #[suggestion_part()]\n     //~^ ERROR `#[suggestion_part(...)]` attribute without `code = \"...\"`\n     span1: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[multipart_suggestion(parser::add_paren)]\n //~^ ERROR multipart suggestion without any `#[suggestion_part(...)]` fields\n struct BC {\n@@ -561,7 +561,7 @@ struct BC {\n     span: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[multipart_suggestion(parser::add_paren)]\n struct BD {\n     #[suggestion_part]\n@@ -581,7 +581,7 @@ struct BD {\n     s2: String,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n struct BE {\n     #[suggestion_part(code = \"...\", code = \",,,\")]\n@@ -590,7 +590,7 @@ struct BE {\n     span: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n struct BF {\n     #[suggestion_part(code = \"(\")]\n@@ -599,7 +599,7 @@ struct BF {\n     second: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[multipart_suggestion(parser::add_paren)]\n struct BG {\n     #[applicability]\n@@ -610,7 +610,7 @@ struct BG {\n     second: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n //~^ NOTE previously specified here\n struct BH {\n@@ -623,7 +623,7 @@ struct BH {\n     second: Span,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n struct BI {\n     #[suggestion_part(code = \"\")]"}]}