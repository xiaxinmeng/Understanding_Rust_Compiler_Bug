{"sha": "8aa50e08af4bd2ecc6b2132d2db48edabe51f352", "node_id": "C_kwDOAAsO6NoAKDhhYTUwZTA4YWY0YmQyZWNjNmIyMTMyZDJkYjQ4ZWRhYmU1MWYzNTI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-08-05T12:54:14Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-08-05T12:54:14Z"}, "message": "Simplify", "tree": {"sha": "133e884cb07b9ddc9cfc5d5df41ec62ef0615f02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/133e884cb07b9ddc9cfc5d5df41ec62ef0615f02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8aa50e08af4bd2ecc6b2132d2db48edabe51f352", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8aa50e08af4bd2ecc6b2132d2db48edabe51f352", "html_url": "https://github.com/rust-lang/rust/commit/8aa50e08af4bd2ecc6b2132d2db48edabe51f352", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8aa50e08af4bd2ecc6b2132d2db48edabe51f352/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "352d3c6e50f4c64cded06b51ef81d4ac83b4e34c", "url": "https://api.github.com/repos/rust-lang/rust/commits/352d3c6e50f4c64cded06b51ef81d4ac83b4e34c", "html_url": "https://github.com/rust-lang/rust/commit/352d3c6e50f4c64cded06b51ef81d4ac83b4e34c"}], "stats": {"total": 60, "additions": 32, "deletions": 28}, "files": [{"sha": "f5e2e44307090151c24908cd5cf11a5896b0e709", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 32, "deletions": 28, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8aa50e08af4bd2ecc6b2132d2db48edabe51f352/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa50e08af4bd2ecc6b2132d2db48edabe51f352/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=8aa50e08af4bd2ecc6b2132d2db48edabe51f352", "patch": "@@ -25,16 +25,19 @@ use hir_def::{\n     Lookup, ModuleDefId, VariantId,\n };\n use hir_expand::{\n-    builtin_fn_macro::BuiltinFnLikeExpander, hygiene::Hygiene, name, name::AsName, HirFileId,\n-    InFile,\n+    builtin_fn_macro::BuiltinFnLikeExpander,\n+    hygiene::Hygiene,\n+    name,\n+    name::{AsName, Name},\n+    HirFileId, InFile,\n };\n use hir_ty::{\n     diagnostics::{\n         record_literal_missing_fields, record_pattern_missing_fields, unsafe_expressions,\n         UnsafeExpr,\n     },\n     method_resolution::{self, lang_names_for_bin_op},\n-    Adjust, Adjustment, AutoBorrow, InferenceResult, Interner, Substitution, TyExt, TyKind,\n+    Adjust, Adjustment, AutoBorrow, InferenceResult, Interner, Substitution, Ty, TyExt, TyKind,\n     TyLoweringContext,\n };\n use itertools::Itertools;\n@@ -266,8 +269,7 @@ impl SourceAnalyzer {\n         db: &dyn HirDatabase,\n         await_expr: &ast::AwaitExpr,\n     ) -> Option<FunctionId> {\n-        let expr_id = self.expr_id(db, &await_expr.expr()?.into())?;\n-        let ty = self.infer.as_ref()?.type_of_expr.get(expr_id)?;\n+        let ty = self.ty_of_expr(db, &await_expr.expr()?.into())?;\n \n         let op_fn = db\n             .lang_item(self.resolver.krate(), hir_expand::name![poll].to_smol_str())?\n@@ -287,12 +289,9 @@ impl SourceAnalyzer {\n             ast::UnaryOp::Not => name![not],\n             ast::UnaryOp::Neg => name![neg],\n         };\n-        let expr_id = self.expr_id(db, &prefix_expr.expr()?.into())?;\n-        let ty = self.infer.as_ref()?.type_of_expr.get(expr_id)?;\n+        let ty = self.ty_of_expr(db, &prefix_expr.expr()?.into())?;\n \n-        let trait_ =\n-            db.lang_item(self.resolver.krate(), lang_item_name.to_smol_str())?.as_trait()?;\n-        let op_fn = db.trait_data(trait_).method_by_name(&lang_item_name)?;\n+        let op_fn = self.lang_trait_fn(db, &lang_item_name, &lang_item_name)?;\n         let substs = hir_ty::TyBuilder::subst_for_def(db, op_fn).push(ty.clone()).build();\n \n         Some(self.resolve_impl_method_or_trait_def(db, op_fn, &substs))\n@@ -303,16 +302,12 @@ impl SourceAnalyzer {\n         db: &dyn HirDatabase,\n         index_expr: &ast::IndexExpr,\n     ) -> Option<FunctionId> {\n-        let base_expr_id = self.expr_id(db, &index_expr.base()?.into())?;\n-        let index_expr_id = self.expr_id(db, &index_expr.index()?.into())?;\n-        let base_ty = self.infer.as_ref()?.type_of_expr.get(base_expr_id)?;\n-        let index_ty = self.infer.as_ref()?.type_of_expr.get(index_expr_id)?;\n+        let base_ty = self.ty_of_expr(db, &index_expr.base()?.into())?;\n+        let index_ty = self.ty_of_expr(db, &index_expr.index()?.into())?;\n \n         let lang_item_name = name![index];\n \n-        let trait_ =\n-            db.lang_item(self.resolver.krate(), lang_item_name.to_smol_str())?.as_trait()?;\n-        let op_fn = db.trait_data(trait_).method_by_name(&lang_item_name)?;\n+        let op_fn = self.lang_trait_fn(db, &lang_item_name, &lang_item_name)?;\n         let substs = hir_ty::TyBuilder::subst_for_def(db, op_fn)\n             .push(base_ty.clone())\n             .push(index_ty.clone())\n@@ -326,15 +321,11 @@ impl SourceAnalyzer {\n         binop_expr: &ast::BinExpr,\n     ) -> Option<FunctionId> {\n         let op = binop_expr.op_kind()?;\n-        let lhs_expr_id = self.expr_id(db, &binop_expr.lhs()?.into())?;\n-        let rhs_expr_id = self.expr_id(db, &binop_expr.rhs()?.into())?;\n-        let lhs = self.infer.as_ref()?.type_of_expr.get(lhs_expr_id)?;\n-        let rhs = self.infer.as_ref()?.type_of_expr.get(rhs_expr_id)?;\n-\n-        let op_fn = lang_names_for_bin_op(op).and_then(|(name, lang_item)| {\n-            db.trait_data(db.lang_item(self.resolver.krate(), lang_item.to_smol_str())?.as_trait()?)\n-                .method_by_name(&name)\n-        })?;\n+        let lhs = self.ty_of_expr(db, &binop_expr.lhs()?.into())?;\n+        let rhs = self.ty_of_expr(db, &binop_expr.rhs()?.into())?;\n+\n+        let op_fn = lang_names_for_bin_op(op)\n+            .and_then(|(name, lang_item)| self.lang_trait_fn(db, &lang_item, &name))?;\n         let substs =\n             hir_ty::TyBuilder::subst_for_def(db, op_fn).push(lhs.clone()).push(rhs.clone()).build();\n \n@@ -346,8 +337,7 @@ impl SourceAnalyzer {\n         db: &dyn HirDatabase,\n         try_expr: &ast::TryExpr,\n     ) -> Option<FunctionId> {\n-        let expr_id = self.expr_id(db, &try_expr.expr()?.into())?;\n-        let ty = self.infer.as_ref()?.type_of_expr.get(expr_id)?;\n+        let ty = self.ty_of_expr(db, &try_expr.expr()?.into())?;\n \n         let op_fn =\n             db.lang_item(self.resolver.krate(), name![branch].to_smol_str())?.as_function()?;\n@@ -772,6 +762,20 @@ impl SourceAnalyzer {\n     ) -> FunctionId {\n         self.resolve_impl_method(db, func, substs).unwrap_or(func)\n     }\n+\n+    fn lang_trait_fn(\n+        &self,\n+        db: &dyn HirDatabase,\n+        lang_trait: &Name,\n+        method_name: &Name,\n+    ) -> Option<FunctionId> {\n+        db.trait_data(db.lang_item(self.resolver.krate(), lang_trait.to_smol_str())?.as_trait()?)\n+            .method_by_name(method_name)\n+    }\n+\n+    fn ty_of_expr(&self, db: &dyn HirDatabase, expr: &ast::Expr) -> Option<&Ty> {\n+        self.infer.as_ref()?.type_of_expr.get(self.expr_id(db, &expr)?)\n+    }\n }\n \n fn scope_for("}]}