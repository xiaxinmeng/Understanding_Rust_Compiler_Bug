{"sha": "0f48e6365be66d2938b08615146dcbfed82413f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNDhlNjM2NWJlNjZkMjkzOGIwODYxNTE0NmRjYmZlZDgyNDEzZjM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-05-21T18:06:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-21T18:06:09Z"}, "message": "Rollup merge of #85555 - LeSeulArtichaut:thir-unsafeck, r=nikomatsakis\n\nCheck for more things in THIR unsafeck\n\nReunion of #85306, #85381 and #85419 with conflicts resolved.\nr? `@nikomatsakis`", "tree": {"sha": "b1c4097c05f530c01a3380c553b6ccbcc85e2460", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1c4097c05f530c01a3380c553b6ccbcc85e2460"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f48e6365be66d2938b08615146dcbfed82413f3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgp/aRCRBK7hj4Ov3rIwAAmyIIAAa7IZDTITasa7XlIuEaX10h\nuUcTeqtzO9ufRjOIJG1GqSVE7aJuXgU3mdJP97G183uaxG7AL+AkE9YIAVyh9brV\nXQA2oMmLkaPYZ8EcU+rqWfrt9/9/qpgRoBbeSmBAEA0V3VgnLvRXLj8NjFaj486B\nUCvPgJ3Vq/1RD9heB67anSbdLpN/+ofZQYsOihMM7h9psqU7AxzKDX0uFRuOz4P+\nNBTRZ+lOO4yRY6T0lk2V8QrsWROZ8jmDjjtikjix/bfEjQTkP6ZfTcPafTCZggVJ\nup+vLdzXHicFSRiAAr+cbLPZFOfUGFpgb6XCcnkZsxhRSPr59yO6gjTeE+0MeBs=\n=Gnp4\n-----END PGP SIGNATURE-----\n", "payload": "tree b1c4097c05f530c01a3380c553b6ccbcc85e2460\nparent 9ec88ce78a9640324a2ad801b294ea5b8710139e\nparent 0e1afc4501eae89862a50ab24961a8d12ece0a37\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1621620369 +0200\ncommitter GitHub <noreply@github.com> 1621620369 +0200\n\nRollup merge of #85555 - LeSeulArtichaut:thir-unsafeck, r=nikomatsakis\n\nCheck for more things in THIR unsafeck\n\nReunion of #85306, #85381 and #85419 with conflicts resolved.\nr? `@nikomatsakis`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f48e6365be66d2938b08615146dcbfed82413f3", "html_url": "https://github.com/rust-lang/rust/commit/0f48e6365be66d2938b08615146dcbfed82413f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f48e6365be66d2938b08615146dcbfed82413f3/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ec88ce78a9640324a2ad801b294ea5b8710139e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ec88ce78a9640324a2ad801b294ea5b8710139e", "html_url": "https://github.com/rust-lang/rust/commit/9ec88ce78a9640324a2ad801b294ea5b8710139e"}, {"sha": "0e1afc4501eae89862a50ab24961a8d12ece0a37", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e1afc4501eae89862a50ab24961a8d12ece0a37", "html_url": "https://github.com/rust-lang/rust/commit/0e1afc4501eae89862a50ab24961a8d12ece0a37"}], "stats": {"total": 711, "additions": 645, "deletions": 66}, "files": [{"sha": "aa8193dab5d9cef13624bc35c857f018e53029af", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 68, "deletions": 9, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -7,8 +7,11 @@ use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint::builtin::{UNSAFE_OP_IN_UNSAFE_FN, UNUSED_UNSAFE};\n use rustc_session::lint::Level;\n use rustc_span::def_id::{DefId, LocalDefId};\n+use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n \n+use std::ops::Bound;\n+\n struct UnsafetyVisitor<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     thir: &'a Thir<'tcx>,\n@@ -19,6 +22,10 @@ struct UnsafetyVisitor<'a, 'tcx> {\n     /// `unsafe` block, and whether it has been used.\n     safety_context: SafetyContext,\n     body_unsafety: BodyUnsafety,\n+    /// The `#[target_feature]` attributes of the body. Used for checking\n+    /// calls to functions with `#[target_feature]` (RFC 2396).\n+    body_target_features: &'tcx Vec<Symbol>,\n+    is_const: bool,\n }\n \n impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n@@ -148,11 +155,55 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n             ExprKind::Call { fun, ty: _, args: _, from_hir_call: _, fn_span: _ } => {\n                 if self.thir[fun].ty.fn_sig(self.tcx).unsafety() == hir::Unsafety::Unsafe {\n                     self.requires_unsafe(expr.span, CallToUnsafeFunction);\n+                } else if let &ty::FnDef(func_did, _) = self.thir[fun].ty.kind() {\n+                    // If the called function has target features the calling function hasn't,\n+                    // the call requires `unsafe`.\n+                    if !self\n+                        .tcx\n+                        .codegen_fn_attrs(func_did)\n+                        .target_features\n+                        .iter()\n+                        .all(|feature| self.body_target_features.contains(feature))\n+                    {\n+                        self.requires_unsafe(expr.span, CallToFunctionWith);\n+                    }\n+                }\n+            }\n+            ExprKind::Deref { arg } => {\n+                if let ExprKind::StaticRef { def_id, .. } = self.thir[arg].kind {\n+                    if self.tcx.is_mutable_static(def_id) {\n+                        self.requires_unsafe(expr.span, UseOfMutableStatic);\n+                    } else if self.tcx.is_foreign_item(def_id) {\n+                        self.requires_unsafe(expr.span, UseOfExternStatic);\n+                    }\n+                } else if self.thir[arg].ty.is_unsafe_ptr() {\n+                    self.requires_unsafe(expr.span, DerefOfRawPointer);\n                 }\n             }\n             ExprKind::InlineAsm { .. } | ExprKind::LlvmInlineAsm { .. } => {\n                 self.requires_unsafe(expr.span, UseOfInlineAssembly);\n             }\n+            ExprKind::Adt {\n+                adt_def,\n+                variant_index: _,\n+                substs: _,\n+                user_ty: _,\n+                fields: _,\n+                base: _,\n+            } => match self.tcx.layout_scalar_valid_range(adt_def.did) {\n+                (Bound::Unbounded, Bound::Unbounded) => {}\n+                _ => self.requires_unsafe(expr.span, InitializingTypeWith),\n+            },\n+            ExprKind::Cast { source } => {\n+                let source = &self.thir[source];\n+                if self.tcx.features().const_raw_ptr_to_usize_cast\n+                    && self.is_const\n+                    && (source.ty.is_unsafe_ptr() || source.ty.is_fn_ptr())\n+                    && expr.ty.is_integral()\n+                {\n+                    self.requires_unsafe(expr.span, CastOfPointerToInt);\n+                }\n+            }\n             _ => {}\n         }\n \n@@ -195,15 +246,10 @@ impl BodyUnsafety {\n enum UnsafeOpKind {\n     CallToUnsafeFunction,\n     UseOfInlineAssembly,\n-    #[allow(dead_code)] // FIXME\n     InitializingTypeWith,\n-    #[allow(dead_code)] // FIXME\n     CastOfPointerToInt,\n-    #[allow(dead_code)] // FIXME\n     UseOfMutableStatic,\n-    #[allow(dead_code)] // FIXME\n     UseOfExternStatic,\n-    #[allow(dead_code)] // FIXME\n     DerefOfRawPointer,\n     #[allow(dead_code)] // FIXME\n     AssignToDroppingUnionField,\n@@ -213,7 +259,6 @@ enum UnsafeOpKind {\n     MutationOfLayoutConstrainedField,\n     #[allow(dead_code)] // FIXME\n     BorrowOfLayoutConstrainedField,\n-    #[allow(dead_code)] // FIXME\n     CallToFunctionWith,\n }\n \n@@ -287,6 +332,7 @@ pub fn check_unsafety<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     thir: &Thir<'tcx>,\n     expr: ExprId,\n+    def_id: LocalDefId,\n     hir_id: hir::HirId,\n ) {\n     let body_unsafety = tcx.hir().fn_sig_by_hir_id(hir_id).map_or(BodyUnsafety::Safe, |fn_sig| {\n@@ -296,10 +342,23 @@ pub fn check_unsafety<'tcx>(\n             BodyUnsafety::Safe\n         }\n     });\n+    let body_target_features = &tcx.codegen_fn_attrs(def_id).target_features;\n     let safety_context =\n         if body_unsafety.is_unsafe() { SafetyContext::UnsafeFn } else { SafetyContext::Safe };\n-    let mut visitor =\n-        UnsafetyVisitor { tcx, thir, safety_context, hir_context: hir_id, body_unsafety };\n+    let is_const = match tcx.hir().body_owner_kind(hir_id) {\n+        hir::BodyOwnerKind::Closure => false,\n+        hir::BodyOwnerKind::Fn => tcx.is_const_fn_raw(def_id.to_def_id()),\n+        hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => true,\n+    };\n+    let mut visitor = UnsafetyVisitor {\n+        tcx,\n+        thir,\n+        safety_context,\n+        hir_context: hir_id,\n+        body_unsafety,\n+        body_target_features,\n+        is_const,\n+    };\n     visitor.visit_expr(&thir[expr]);\n }\n \n@@ -311,7 +370,7 @@ crate fn thir_check_unsafety_inner<'tcx>(\n     let body_id = tcx.hir().body_owned_by(hir_id);\n     let body = tcx.hir().body(body_id);\n     let (thir, expr) = cx::build_thir(tcx, def, &body.value);\n-    check_unsafety(tcx, &thir, expr, hir_id);\n+    check_unsafety(tcx, &thir, expr, def.did, hir_id);\n }\n \n crate fn thir_check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) {"}, {"sha": "dcc9a243f0f399a0b73e63fe5820de16224cbcbe", "filename": "src/test/ui/cast/cast-ptr-to-int-const.mir.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.mir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -0,0 +1,19 @@\n+error[E0133]: cast of pointer to int is unsafe and requires unsafe function or block\n+  --> $DIR/cast-ptr-to-int-const.rs:10:9\n+   |\n+LL |         &Y as *const u32 as usize\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ cast of pointer to int\n+   |\n+   = note: casting pointers to integers in constants\n+\n+error[E0133]: cast of pointer to int is unsafe and requires unsafe function or block\n+  --> $DIR/cast-ptr-to-int-const.rs:17:5\n+   |\n+LL |     &0 as *const i32 as usize\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ cast of pointer to int\n+   |\n+   = note: casting pointers to integers in constants\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "01ea627679d135b0d4201ec25a5437f5065be6cb", "filename": "src/test/ui/cast/cast-ptr-to-int-const.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.rs?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,25 +1,19 @@\n-// gate-test-const_raw_ptr_to_usize_cast\n-// revisions: with_feature without_feature\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n \n-#![cfg_attr(with_feature, feature(const_raw_ptr_to_usize_cast))]\n+#![feature(const_raw_ptr_to_usize_cast)]\n \n fn main() {\n-    const X: usize = unsafe {\n-        main as usize //[without_feature]~ ERROR casting pointers to integers in constants is unstable\n-    };\n     const Y: u32 = 0;\n-    const Z: usize = unsafe {\n-        &Y as *const u32 as usize //[without_feature]~ ERROR is unstable\n-    };\n     // Cast in `const` without `unsafe` block\n     const SAFE: usize = {\n-        &Y as *const u32 as usize //[without_feature]~ ERROR is unstable\n-        //[with_feature]~^ ERROR cast of pointer to int is unsafe and requires unsafe\n+        &Y as *const u32 as usize\n+        //~^ ERROR cast of pointer to int is unsafe and requires unsafe\n     };\n }\n \n // Cast in `const fn` without `unsafe` block\n const fn test() -> usize {\n-    &0 as *const i32 as usize //[without_feature]~ ERROR is unstable\n-    //[with_feature]~^ ERROR cast of pointer to int is unsafe and requires unsafe\n+    &0 as *const i32 as usize\n+    //~^ ERROR cast of pointer to int is unsafe and requires unsafe\n }"}, {"sha": "dcc9a243f0f399a0b73e63fe5820de16224cbcbe", "filename": "src/test/ui/cast/cast-ptr-to-int-const.thir.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.thir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -0,0 +1,19 @@\n+error[E0133]: cast of pointer to int is unsafe and requires unsafe function or block\n+  --> $DIR/cast-ptr-to-int-const.rs:10:9\n+   |\n+LL |         &Y as *const u32 as usize\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ cast of pointer to int\n+   |\n+   = note: casting pointers to integers in constants\n+\n+error[E0133]: cast of pointer to int is unsafe and requires unsafe function or block\n+  --> $DIR/cast-ptr-to-int-const.rs:17:5\n+   |\n+LL |     &0 as *const i32 as usize\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ cast of pointer to int\n+   |\n+   = note: casting pointers to integers in constants\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "03e99eb752740c2822b372050269fc9679aacf15", "filename": "src/test/ui/cast/feature-gate-const_raw_ptr_to_usize_cast.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fcast%2Ffeature-gate-const_raw_ptr_to_usize_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fcast%2Ffeature-gate-const_raw_ptr_to_usize_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Ffeature-gate-const_raw_ptr_to_usize_cast.rs?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -0,0 +1,13 @@\n+fn main() {\n+    const X: usize = unsafe {\n+        main as usize //~ ERROR casting pointers to integers in constants is unstable\n+    };\n+    const Y: u32 = 0;\n+    const Z: usize = unsafe {\n+        &Y as *const u32 as usize //~ ERROR is unstable\n+    };\n+}\n+\n+const fn test() -> usize {\n+    &0 as *const i32 as usize //~ ERROR is unstable\n+}"}, {"sha": "4a0b424e1816b3d7df6a0d08821c1ccbb676d3ac", "filename": "src/test/ui/cast/feature-gate-const_raw_ptr_to_usize_cast.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fcast%2Ffeature-gate-const_raw_ptr_to_usize_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fcast%2Ffeature-gate-const_raw_ptr_to_usize_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Ffeature-gate-const_raw_ptr_to_usize_cast.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -0,0 +1,30 @@\n+error[E0658]: casting pointers to integers in constants is unstable\n+  --> $DIR/feature-gate-const_raw_ptr_to_usize_cast.rs:3:9\n+   |\n+LL |         main as usize\n+   |         ^^^^^^^^^^^^^\n+   |\n+   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n+   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n+\n+error[E0658]: casting pointers to integers in constants is unstable\n+  --> $DIR/feature-gate-const_raw_ptr_to_usize_cast.rs:7:9\n+   |\n+LL |         &Y as *const u32 as usize\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n+   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n+\n+error[E0658]: casting pointers to integers in constant functions is unstable\n+  --> $DIR/feature-gate-const_raw_ptr_to_usize_cast.rs:12:5\n+   |\n+LL |     &0 as *const i32 as usize\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n+   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "3afbea07931d40d7c6e49f63d6598a2e60fe7bc9", "filename": "src/test/ui/generator/issue-45729-unsafe-in-generator.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fgenerator%2Fissue-45729-unsafe-in-generator.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fgenerator%2Fissue-45729-unsafe-in-generator.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-45729-unsafe-in-generator.mir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n-  --> $DIR/issue-45729-unsafe-in-generator.rs:5:9\n+  --> $DIR/issue-45729-unsafe-in-generator.rs:8:9\n    |\n LL |         *(1 as *mut u32) = 42;\n    |         ^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer", "previous_filename": "src/test/ui/generator/issue-45729-unsafe-in-generator.stderr"}, {"sha": "379c36d2ca32187ceb96e38d470499988fd4bf02", "filename": "src/test/ui/generator/issue-45729-unsafe-in-generator.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fgenerator%2Fissue-45729-unsafe-in-generator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fgenerator%2Fissue-45729-unsafe-in-generator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-45729-unsafe-in-generator.rs?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n #![feature(generators)]\n \n fn main() {"}, {"sha": "a0905f98ca7c62d1157bbc577c31265a43ad8ec7", "filename": "src/test/ui/generator/issue-45729-unsafe-in-generator.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fgenerator%2Fissue-45729-unsafe-in-generator.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fgenerator%2Fissue-45729-unsafe-in-generator.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-45729-unsafe-in-generator.thir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n+  --> $DIR/issue-45729-unsafe-in-generator.rs:8:9\n+   |\n+LL |         *(1 as *mut u32) = 42;\n+   |         ^^^^^^^^^^^^^^^^ dereference of raw pointer\n+   |\n+   = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "c42498390c78d78dec74d915798c8f9556543d24", "filename": "src/test/ui/intrinsics/issue-28575.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fintrinsics%2Fissue-28575.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fintrinsics%2Fissue-28575.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fissue-28575.mir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: use of extern static is unsafe and requires unsafe function or block\n-  --> $DIR/issue-28575.rs:8:5\n+  --> $DIR/issue-28575.rs:11:5\n    |\n LL |     FOO()\n    |     ^^^ use of extern static", "previous_filename": "src/test/ui/intrinsics/issue-28575.stderr"}, {"sha": "410f664f89d44e97dd1927c4011948eed391d7b7", "filename": "src/test/ui/intrinsics/issue-28575.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fintrinsics%2Fissue-28575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fintrinsics%2Fissue-28575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fissue-28575.rs?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n #![feature(intrinsics)]\n \n extern \"C\" {"}, {"sha": "c42498390c78d78dec74d915798c8f9556543d24", "filename": "src/test/ui/intrinsics/issue-28575.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fintrinsics%2Fissue-28575.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fintrinsics%2Fissue-28575.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fissue-28575.thir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/issue-28575.rs:11:5\n+   |\n+LL |     FOO()\n+   |     ^^^ use of extern static\n+   |\n+   = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "8e7a2514dd6abab91e64ef939c15436badf449bc", "filename": "src/test/ui/issues/issue-14227.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fissues%2Fissue-14227.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fissues%2Fissue-14227.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14227.mir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: use of extern static is unsafe and requires unsafe function or block\n-  --> $DIR/issue-14227.rs:4:21\n+  --> $DIR/issue-14227.rs:7:21\n    |\n LL | static CRASH: u32 = symbol;\n    |                     ^^^^^^ use of extern static", "previous_filename": "src/test/ui/issues/issue-14227.stderr"}, {"sha": "5f866ec906144d59cdba44a9c8663abdbad607c1", "filename": "src/test/ui/issues/issue-14227.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fissues%2Fissue-14227.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fissues%2Fissue-14227.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14227.rs?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n extern \"C\" {\n     pub static symbol: u32;\n }"}, {"sha": "8e7a2514dd6abab91e64ef939c15436badf449bc", "filename": "src/test/ui/issues/issue-14227.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fissues%2Fissue-14227.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fissues%2Fissue-14227.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14227.thir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/issue-14227.rs:7:21\n+   |\n+LL | static CRASH: u32 = symbol;\n+   |                     ^^^^^^ use of extern static\n+   |\n+   = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "d7e8c08bb01b245b95b651bc69f22e087c94e87a", "filename": "src/test/ui/issues/issue-16538.mir.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fissues%2Fissue-16538.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fissues%2Fissue-16538.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16538.mir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,11 +1,11 @@\n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue-16538.rs:11:27\n+  --> $DIR/issue-16538.rs:14:27\n    |\n LL | static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `*const usize` cannot be shared between threads safely\n-  --> $DIR/issue-16538.rs:11:1\n+  --> $DIR/issue-16538.rs:14:1\n    |\n LL | static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `*const usize` cannot be shared between threads safely\n@@ -14,7 +14,7 @@ LL | static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n    = note: shared static variables must have a type that implements `Sync`\n \n error[E0133]: use of extern static is unsafe and requires unsafe function or block\n-  --> $DIR/issue-16538.rs:11:34\n+  --> $DIR/issue-16538.rs:14:34\n    |\n LL | static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n    |                                  ^^^^ use of extern static", "previous_filename": "src/test/ui/issues/issue-16538.stderr"}, {"sha": "1e8ecf015c85a8aff0950b3c99fa60b29db9f3d3", "filename": "src/test/ui/issues/issue-16538.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fissues%2Fissue-16538.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fissues%2Fissue-16538.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16538.rs?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n mod Y {\n     pub type X = usize;\n     extern \"C\" {"}, {"sha": "d7e8c08bb01b245b95b651bc69f22e087c94e87a", "filename": "src/test/ui/issues/issue-16538.thir.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fissues%2Fissue-16538.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fissues%2Fissue-16538.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16538.thir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -0,0 +1,27 @@\n+error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/issue-16538.rs:14:27\n+   |\n+LL | static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: `*const usize` cannot be shared between threads safely\n+  --> $DIR/issue-16538.rs:14:1\n+   |\n+LL | static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `*const usize` cannot be shared between threads safely\n+   |\n+   = help: the trait `Sync` is not implemented for `*const usize`\n+   = note: shared static variables must have a type that implements `Sync`\n+\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/issue-16538.rs:14:34\n+   |\n+LL | static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n+   |                                  ^^^^ use of extern static\n+   |\n+   = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0015, E0133, E0277.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "aff8bf7927dd17533cb1bc1f938ff8a65af6951e", "filename": "src/test/ui/issues/issue-28324.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fissues%2Fissue-28324.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fissues%2Fissue-28324.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28324.mir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: use of extern static is unsafe and requires unsafe function or block\n-  --> $DIR/issue-28324.rs:5:24\n+  --> $DIR/issue-28324.rs:8:24\n    |\n LL | pub static BAZ: u32 = *&error_message_count;\n    |                        ^^^^^^^^^^^^^^^^^^^^ use of extern static", "previous_filename": "src/test/ui/issues/issue-28324.stderr"}, {"sha": "fbe83e325edb47e682d2752299fba255e2d8d256", "filename": "src/test/ui/issues/issue-28324.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fissues%2Fissue-28324.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fissues%2Fissue-28324.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28324.rs?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n extern \"C\" {\n     static error_message_count: u32;\n }"}, {"sha": "c696c359830167cc580d55ead195fc8aa1190a0e", "filename": "src/test/ui/issues/issue-28324.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fissues%2Fissue-28324.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fissues%2Fissue-28324.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28324.thir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/issue-28324.rs:8:25\n+   |\n+LL | pub static BAZ: u32 = *&error_message_count;\n+   |                         ^^^^^^^^^^^^^^^^^^^ use of extern static\n+   |\n+   = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "96e50ba67991c62a91423fce16d9172b47d203a9", "filename": "src/test/ui/issues/issue-47412.mir.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fissues%2Fissue-47412.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fissues%2Fissue-47412.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47412.mir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,13 +1,13 @@\n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/issue-47412.rs:11:11\n+  --> $DIR/issue-47412.rs:14:11\n    |\n LL |     match u.void {}\n    |           ^^^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n-  --> $DIR/issue-47412.rs:17:11\n+  --> $DIR/issue-47412.rs:21:11\n    |\n LL |     match *ptr {}\n    |           ^^^^ dereference of raw pointer", "previous_filename": "src/test/ui/issues/issue-47412.stderr"}, {"sha": "d395285eee0a03cf01a1c0a79b6e1e951874f8a1", "filename": "src/test/ui/issues/issue-47412.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fissues%2Fissue-47412.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fissues%2Fissue-47412.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47412.rs?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n #[derive(Copy, Clone)]\n enum Void {}\n \n@@ -9,7 +12,8 @@ fn union_field() {\n     union Union { unit: (), void: Void }\n     let u = Union { unit: () };\n     match u.void {}\n-    //~^ ERROR access to union field is unsafe\n+    //[mir]~^ ERROR access to union field is unsafe\n+    // FIXME(thir-unsafeck): AccessToUnionField unimplemented\n }\n \n fn raw_ptr_deref() {"}, {"sha": "2d6004b7911d6255ce0e00b7a1f9b5fb7a61c1db", "filename": "src/test/ui/issues/issue-47412.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fissues%2Fissue-47412.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fissues%2Fissue-47412.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47412.thir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n+  --> $DIR/issue-47412.rs:21:11\n+   |\n+LL |     match *ptr {}\n+   |           ^^^^ dereference of raw pointer\n+   |\n+   = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "e0842bfa4cde4fb9b16130a2474efc28f4519dfc", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/check-pass.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fcheck-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fcheck-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fcheck-pass.rs?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -8,6 +8,8 @@\n \n // check-pass\n // only-x86_64\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n \n #![feature(target_feature_11)]\n "}, {"sha": "a59d7c2d784c7b5830a5e1545d4460588c45ffe6", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/closures-inherit-target_feature.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fclosures-inherit-target_feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fclosures-inherit-target_feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fclosures-inherit-target_feature.rs?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,6 +1,8 @@\n // Tests #73631: closures inherit `#[target_feature]` annotations\n \n // check-pass\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n // only-x86_64\n \n #![feature(target_feature_11)]"}, {"sha": "cf5815df56e1cddce670389423facf95ceefe986", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/fn-ptr.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.mir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/fn-ptr.rs:9:21\n+  --> $DIR/fn-ptr.rs:11:21\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ---------------------------------- `#[target_feature]` added here", "previous_filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/fn-ptr.stderr"}, {"sha": "c95d4a08e48bb1dc87506a37f827b2562298d2be", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/fn-ptr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.rs?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,3 +1,5 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n // only-x86_64\n \n #![feature(target_feature_11)]"}, {"sha": "cf5815df56e1cddce670389423facf95ceefe986", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/fn-ptr.thir.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.thir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -0,0 +1,18 @@\n+error[E0308]: mismatched types\n+  --> $DIR/fn-ptr.rs:11:21\n+   |\n+LL | #[target_feature(enable = \"sse2\")]\n+   | ---------------------------------- `#[target_feature]` added here\n+...\n+LL |     let foo: fn() = foo;\n+   |              ----   ^^^ cannot coerce functions with `#[target_feature]` to safe function pointers\n+   |              |\n+   |              expected due to this\n+   |\n+   = note: expected fn pointer `fn()`\n+                 found fn item `fn() {foo}`\n+   = note: functions with `#[target_feature]` can only be coerced to `unsafe` function pointers\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "79273a1dcbf887a4c78a9956dd050f94583203c0", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr", "status": "renamed", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.mir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,77 +1,77 @@\n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:21:5\n+  --> $DIR/safe-calls.rs:23:5\n    |\n LL |     sse2();\n    |     ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:22:5\n+  --> $DIR/safe-calls.rs:24:5\n    |\n LL |     avx_bmi2();\n    |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:23:5\n+  --> $DIR/safe-calls.rs:25:5\n    |\n LL |     Quux.avx_bmi2();\n    |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:28:5\n+  --> $DIR/safe-calls.rs:30:5\n    |\n LL |     avx_bmi2();\n    |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:29:5\n+  --> $DIR/safe-calls.rs:31:5\n    |\n LL |     Quux.avx_bmi2();\n    |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:34:5\n+  --> $DIR/safe-calls.rs:36:5\n    |\n LL |     sse2();\n    |     ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:35:5\n+  --> $DIR/safe-calls.rs:37:5\n    |\n LL |     avx_bmi2();\n    |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:36:5\n+  --> $DIR/safe-calls.rs:38:5\n    |\n LL |     Quux.avx_bmi2();\n    |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:42:5\n+  --> $DIR/safe-calls.rs:44:5\n    |\n LL |     sse2();\n    |     ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n-  --> $DIR/safe-calls.rs:45:18\n+  --> $DIR/safe-calls.rs:47:18\n    |\n LL | const name: () = sse2();\n    |                  ^^^^^^ call to function with `#[target_feature]`", "previous_filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/safe-calls.stderr"}, {"sha": "de0b89f46ba3fbd8a643a2009af9dc28f08da45e", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.rs?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,3 +1,5 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n // only-x86_64\n \n #![feature(target_feature_11)]"}, {"sha": "79273a1dcbf887a4c78a9956dd050f94583203c0", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.thir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -0,0 +1,83 @@\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:23:5\n+   |\n+LL |     sse2();\n+   |     ^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:24:5\n+   |\n+LL |     avx_bmi2();\n+   |     ^^^^^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:25:5\n+   |\n+LL |     Quux.avx_bmi2();\n+   |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:30:5\n+   |\n+LL |     avx_bmi2();\n+   |     ^^^^^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:31:5\n+   |\n+LL |     Quux.avx_bmi2();\n+   |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:36:5\n+   |\n+LL |     sse2();\n+   |     ^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:37:5\n+   |\n+LL |     avx_bmi2();\n+   |     ^^^^^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:38:5\n+   |\n+LL |     Quux.avx_bmi2();\n+   |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:44:5\n+   |\n+LL |     sse2();\n+   |     ^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+  --> $DIR/safe-calls.rs:47:18\n+   |\n+LL | const name: () = sse2();\n+   |                  ^^^^^^ call to function with `#[target_feature]`\n+   |\n+   = note: can only be called if the required target features are available\n+\n+error: aborting due to 10 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "cec5f9d9c9f934c37edf5f660adf261ed6956f74", "filename": "src/test/ui/safe-extern-statics-mut.mir.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fsafe-extern-statics-mut.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fsafe-extern-statics-mut.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsafe-extern-statics-mut.mir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,29 +1,29 @@\n error[E0133]: use of mutable static is unsafe and requires unsafe function or block\n-  --> $DIR/safe-extern-statics-mut.rs:11:13\n+  --> $DIR/safe-extern-statics-mut.rs:13:13\n    |\n LL |     let b = B;\n    |             ^ use of mutable static\n    |\n    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n \n error[E0133]: use of mutable static is unsafe and requires unsafe function or block\n-  --> $DIR/safe-extern-statics-mut.rs:12:14\n+  --> $DIR/safe-extern-statics-mut.rs:14:14\n    |\n LL |     let rb = &B;\n    |              ^^ use of mutable static\n    |\n    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n \n error[E0133]: use of mutable static is unsafe and requires unsafe function or block\n-  --> $DIR/safe-extern-statics-mut.rs:13:14\n+  --> $DIR/safe-extern-statics-mut.rs:15:14\n    |\n LL |     let xb = XB;\n    |              ^^ use of mutable static\n    |\n    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n \n error[E0133]: use of mutable static is unsafe and requires unsafe function or block\n-  --> $DIR/safe-extern-statics-mut.rs:14:15\n+  --> $DIR/safe-extern-statics-mut.rs:16:15\n    |\n LL |     let xrb = &XB;\n    |               ^^^ use of mutable static", "previous_filename": "src/test/ui/safe-extern-statics-mut.stderr"}, {"sha": "389a4589a713559c7f75831d28504fc5edf2b927", "filename": "src/test/ui/safe-extern-statics-mut.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fsafe-extern-statics-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fsafe-extern-statics-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsafe-extern-statics-mut.rs?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,4 +1,6 @@\n // aux-build:extern-statics.rs\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n \n extern crate extern_statics;\n use extern_statics::*;"}, {"sha": "8e6d2805a0ba4a4d6f3de41669612cb2d3983ffe", "filename": "src/test/ui/safe-extern-statics-mut.thir.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fsafe-extern-statics-mut.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fsafe-extern-statics-mut.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsafe-extern-statics-mut.thir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -0,0 +1,35 @@\n+error[E0133]: use of mutable static is unsafe and requires unsafe function or block\n+  --> $DIR/safe-extern-statics-mut.rs:13:13\n+   |\n+LL |     let b = B;\n+   |             ^ use of mutable static\n+   |\n+   = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n+\n+error[E0133]: use of mutable static is unsafe and requires unsafe function or block\n+  --> $DIR/safe-extern-statics-mut.rs:14:15\n+   |\n+LL |     let rb = &B;\n+   |               ^ use of mutable static\n+   |\n+   = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n+\n+error[E0133]: use of mutable static is unsafe and requires unsafe function or block\n+  --> $DIR/safe-extern-statics-mut.rs:15:14\n+   |\n+LL |     let xb = XB;\n+   |              ^^ use of mutable static\n+   |\n+   = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n+\n+error[E0133]: use of mutable static is unsafe and requires unsafe function or block\n+  --> $DIR/safe-extern-statics-mut.rs:16:16\n+   |\n+LL |     let xrb = &XB;\n+   |                ^^ use of mutable static\n+   |\n+   = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "102abd0816fec233c8ab08226aa4d218c6aa1164", "filename": "src/test/ui/safe-extern-statics.mir.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fsafe-extern-statics.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fsafe-extern-statics.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsafe-extern-statics.mir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,29 +1,29 @@\n error[E0133]: use of extern static is unsafe and requires unsafe function or block\n-  --> $DIR/safe-extern-statics.rs:11:13\n+  --> $DIR/safe-extern-statics.rs:13:13\n    |\n LL |     let a = A;\n    |             ^ use of extern static\n    |\n    = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n \n error[E0133]: use of extern static is unsafe and requires unsafe function or block\n-  --> $DIR/safe-extern-statics.rs:12:14\n+  --> $DIR/safe-extern-statics.rs:14:14\n    |\n LL |     let ra = &A;\n    |              ^^ use of extern static\n    |\n    = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n \n error[E0133]: use of extern static is unsafe and requires unsafe function or block\n-  --> $DIR/safe-extern-statics.rs:13:14\n+  --> $DIR/safe-extern-statics.rs:15:14\n    |\n LL |     let xa = XA;\n    |              ^^ use of extern static\n    |\n    = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n \n error[E0133]: use of extern static is unsafe and requires unsafe function or block\n-  --> $DIR/safe-extern-statics.rs:14:15\n+  --> $DIR/safe-extern-statics.rs:16:15\n    |\n LL |     let xra = &XA;\n    |               ^^^ use of extern static", "previous_filename": "src/test/ui/safe-extern-statics.stderr"}, {"sha": "0aa90c442ea75141f6318d310988a5ca5677876e", "filename": "src/test/ui/safe-extern-statics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fsafe-extern-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fsafe-extern-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsafe-extern-statics.rs?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,4 +1,6 @@\n // aux-build:extern-statics.rs\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n \n extern crate extern_statics;\n use extern_statics::*;"}, {"sha": "7fd2182c4c69387d2deab718b9dc1dbcd165afb7", "filename": "src/test/ui/safe-extern-statics.thir.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fsafe-extern-statics.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fsafe-extern-statics.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsafe-extern-statics.thir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -0,0 +1,35 @@\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/safe-extern-statics.rs:13:13\n+   |\n+LL |     let a = A;\n+   |             ^ use of extern static\n+   |\n+   = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n+\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/safe-extern-statics.rs:14:15\n+   |\n+LL |     let ra = &A;\n+   |               ^ use of extern static\n+   |\n+   = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n+\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/safe-extern-statics.rs:15:14\n+   |\n+LL |     let xa = XA;\n+   |              ^^ use of extern static\n+   |\n+   = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n+\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/safe-extern-statics.rs:16:16\n+   |\n+LL |     let xra = &XA;\n+   |                ^^ use of extern static\n+   |\n+   = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "a4659bc8712faf00f48778dee2d662e6648ff3b2", "filename": "src/test/ui/static/static-mut-foreign-requires-unsafe.mir.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-foreign-requires-unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-foreign-requires-unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-foreign-requires-unsafe.mir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,21 +1,21 @@\n error[E0133]: use of mutable static is unsafe and requires unsafe function or block\n-  --> $DIR/static-mut-foreign-requires-unsafe.rs:6:5\n+  --> $DIR/static-mut-foreign-requires-unsafe.rs:9:5\n    |\n LL |     a += 3;\n    |     ^^^^^^ use of mutable static\n    |\n    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n \n error[E0133]: use of mutable static is unsafe and requires unsafe function or block\n-  --> $DIR/static-mut-foreign-requires-unsafe.rs:7:5\n+  --> $DIR/static-mut-foreign-requires-unsafe.rs:10:5\n    |\n LL |     a = 4;\n    |     ^^^^^ use of mutable static\n    |\n    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n \n error[E0133]: use of mutable static is unsafe and requires unsafe function or block\n-  --> $DIR/static-mut-foreign-requires-unsafe.rs:8:14\n+  --> $DIR/static-mut-foreign-requires-unsafe.rs:11:14\n    |\n LL |     let _b = a;\n    |              ^ use of mutable static", "previous_filename": "src/test/ui/static/static-mut-foreign-requires-unsafe.stderr"}, {"sha": "4f96acb3375b8a433f508d03ba326e34edb2a773", "filename": "src/test/ui/static/static-mut-foreign-requires-unsafe.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-foreign-requires-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-foreign-requires-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-foreign-requires-unsafe.rs?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n extern \"C\" {\n     static mut a: i32;\n }"}, {"sha": "2c62d4d8f3bb1268c8a0f50fb25f79fe80a177c3", "filename": "src/test/ui/static/static-mut-foreign-requires-unsafe.thir.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-foreign-requires-unsafe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-foreign-requires-unsafe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-foreign-requires-unsafe.thir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -0,0 +1,27 @@\n+error[E0133]: use of mutable static is unsafe and requires unsafe function or block\n+  --> $DIR/static-mut-foreign-requires-unsafe.rs:9:5\n+   |\n+LL |     a += 3;\n+   |     ^ use of mutable static\n+   |\n+   = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n+\n+error[E0133]: use of mutable static is unsafe and requires unsafe function or block\n+  --> $DIR/static-mut-foreign-requires-unsafe.rs:10:5\n+   |\n+LL |     a = 4;\n+   |     ^ use of mutable static\n+   |\n+   = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n+\n+error[E0133]: use of mutable static is unsafe and requires unsafe function or block\n+  --> $DIR/static-mut-foreign-requires-unsafe.rs:11:14\n+   |\n+LL |     let _b = a;\n+   |              ^ use of mutable static\n+   |\n+   = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "0d4ce056fc28ae7c9bbecf42e49b3a9ffc1c2835", "filename": "src/test/ui/static/static-mut-requires-unsafe.mir.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-requires-unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-requires-unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-requires-unsafe.mir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,21 +1,21 @@\n error[E0133]: use of mutable static is unsafe and requires unsafe function or block\n-  --> $DIR/static-mut-requires-unsafe.rs:4:5\n+  --> $DIR/static-mut-requires-unsafe.rs:7:5\n    |\n LL |     a += 3;\n    |     ^^^^^^ use of mutable static\n    |\n    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n \n error[E0133]: use of mutable static is unsafe and requires unsafe function or block\n-  --> $DIR/static-mut-requires-unsafe.rs:5:5\n+  --> $DIR/static-mut-requires-unsafe.rs:8:5\n    |\n LL |     a = 4;\n    |     ^^^^^ use of mutable static\n    |\n    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n \n error[E0133]: use of mutable static is unsafe and requires unsafe function or block\n-  --> $DIR/static-mut-requires-unsafe.rs:6:14\n+  --> $DIR/static-mut-requires-unsafe.rs:9:14\n    |\n LL |     let _b = a;\n    |              ^ use of mutable static", "previous_filename": "src/test/ui/static/static-mut-requires-unsafe.stderr"}, {"sha": "ea3ba0950079e418356393def69a000c5b154316", "filename": "src/test/ui/static/static-mut-requires-unsafe.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-requires-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-requires-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-requires-unsafe.rs?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n static mut a: isize = 3;\n \n fn main() {"}, {"sha": "1a1cf14271a98902bb2042ff71263d46aeffad84", "filename": "src/test/ui/static/static-mut-requires-unsafe.thir.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-requires-unsafe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-requires-unsafe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-requires-unsafe.thir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -0,0 +1,27 @@\n+error[E0133]: use of mutable static is unsafe and requires unsafe function or block\n+  --> $DIR/static-mut-requires-unsafe.rs:7:5\n+   |\n+LL |     a += 3;\n+   |     ^ use of mutable static\n+   |\n+   = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n+\n+error[E0133]: use of mutable static is unsafe and requires unsafe function or block\n+  --> $DIR/static-mut-requires-unsafe.rs:8:5\n+   |\n+LL |     a = 4;\n+   |     ^ use of mutable static\n+   |\n+   = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n+\n+error[E0133]: use of mutable static is unsafe and requires unsafe function or block\n+  --> $DIR/static-mut-requires-unsafe.rs:9:14\n+   |\n+LL |     let _b = a;\n+   |              ^ use of mutable static\n+   |\n+   = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "ea7b2048e836fb96d775565f6c6a87f39f4ba2d5", "filename": "src/test/ui/traits/safety-fn-body.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Ftraits%2Fsafety-fn-body.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Ftraits%2Fsafety-fn-body.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsafety-fn-body.mir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n-  --> $DIR/safety-fn-body.rs:11:9\n+  --> $DIR/safety-fn-body.rs:14:9\n    |\n LL |         *self += 1;\n    |         ^^^^^^^^^^ dereference of raw pointer", "previous_filename": "src/test/ui/traits/safety-fn-body.stderr"}, {"sha": "2cc4fe1b344a494be6ce56714eac35dcd0b9e4d5", "filename": "src/test/ui/traits/safety-fn-body.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Ftraits%2Fsafety-fn-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Ftraits%2Fsafety-fn-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsafety-fn-body.rs?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,6 +1,9 @@\n // Check that an unsafe impl does not imply that unsafe actions are\n // legal in the methods.\n \n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n unsafe trait UnsafeTrait : Sized {\n     fn foo(self) { }\n }"}, {"sha": "94a1a2a03cdf2bf4a3ab95ebefb751962fa769ac", "filename": "src/test/ui/traits/safety-fn-body.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Ftraits%2Fsafety-fn-body.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Ftraits%2Fsafety-fn-body.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsafety-fn-body.thir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n+  --> $DIR/safety-fn-body.rs:14:9\n+   |\n+LL |         *self += 1;\n+   |         ^^^^^ dereference of raw pointer\n+   |\n+   = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "33f762ccf63016a0f1f9a94c5bd3ec1614b18e7a", "filename": "src/test/ui/unsafe/issue-45087-unreachable-unsafe.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Fissue-45087-unreachable-unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Fissue-45087-unreachable-unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Fissue-45087-unreachable-unsafe.mir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n-  --> $DIR/issue-45087-unreachable-unsafe.rs:3:5\n+  --> $DIR/issue-45087-unreachable-unsafe.rs:6:5\n    |\n LL |     *(1 as *mut u32) = 42;\n    |     ^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer", "previous_filename": "src/test/ui/unsafe/issue-45087-unreachable-unsafe.stderr"}, {"sha": "071cea8fbd78bd905a4f9cfea5951de842ad05a7", "filename": "src/test/ui/unsafe/issue-45087-unreachable-unsafe.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Fissue-45087-unreachable-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Fissue-45087-unreachable-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Fissue-45087-unreachable-unsafe.rs?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n fn main() {\n     return;\n     *(1 as *mut u32) = 42;"}, {"sha": "b89401ce837067a4fe8dbf62d6c363df24167936", "filename": "src/test/ui/unsafe/issue-45087-unreachable-unsafe.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Fissue-45087-unreachable-unsafe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Fissue-45087-unreachable-unsafe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Fissue-45087-unreachable-unsafe.thir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n+  --> $DIR/issue-45087-unreachable-unsafe.rs:6:5\n+   |\n+LL |     *(1 as *mut u32) = 42;\n+   |     ^^^^^^^^^^^^^^^^ dereference of raw pointer\n+   |\n+   = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "f9ef7834e1e50068d51ab30f28470a6d45969a4f", "filename": "src/test/ui/unsafe/ranged_ints.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Franged_ints.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Franged_ints.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints.mir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: initializing type with `rustc_layout_scalar_valid_range` attr is unsafe and requires unsafe function or block\n-  --> $DIR/ranged_ints.rs:7:14\n+  --> $DIR/ranged_ints.rs:10:14\n    |\n LL |     let _x = NonZero(0);\n    |              ^^^^^^^^^^ initializing type with `rustc_layout_scalar_valid_range` attr", "previous_filename": "src/test/ui/unsafe/ranged_ints.stderr"}, {"sha": "05efe87ba6e0352cf7ee2c0ebd95baab83be5d85", "filename": "src/test/ui/unsafe/ranged_ints.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Franged_ints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Franged_ints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints.rs?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n #![feature(rustc_attrs)]\n \n #[rustc_layout_scalar_valid_range_start(1)]"}, {"sha": "f9ef7834e1e50068d51ab30f28470a6d45969a4f", "filename": "src/test/ui/unsafe/ranged_ints.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Franged_ints.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Franged_ints.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints.thir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: initializing type with `rustc_layout_scalar_valid_range` attr is unsafe and requires unsafe function or block\n+  --> $DIR/ranged_ints.rs:10:14\n+   |\n+LL |     let _x = NonZero(0);\n+   |              ^^^^^^^^^^ initializing type with `rustc_layout_scalar_valid_range` attr\n+   |\n+   = note: initializing a layout restricted type's field with a value outside the valid range is undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "33d134c7ce59e8b7d2111d704d8de7ef91e77199", "filename": "src/test/ui/unsafe/ranged_ints_const.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Franged_ints_const.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Franged_ints_const.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints_const.mir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: initializing type with `rustc_layout_scalar_valid_range` attr is unsafe and requires unsafe function or block\n-  --> $DIR/ranged_ints_const.rs:8:34\n+  --> $DIR/ranged_ints_const.rs:11:34\n    |\n LL | const fn foo() -> NonZero<u32> { NonZero(0) }\n    |                                  ^^^^^^^^^^ initializing type with `rustc_layout_scalar_valid_range` attr", "previous_filename": "src/test/ui/unsafe/ranged_ints_const.stderr"}, {"sha": "472b09681507591db8d42bf05c9b95b18e9ddda6", "filename": "src/test/ui/unsafe/ranged_ints_const.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Franged_ints_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Franged_ints_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints_const.rs?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n #![feature(rustc_attrs)]\n \n #[rustc_layout_scalar_valid_range_start(1)]"}, {"sha": "33d134c7ce59e8b7d2111d704d8de7ef91e77199", "filename": "src/test/ui/unsafe/ranged_ints_const.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Franged_ints_const.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Franged_ints_const.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints_const.thir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: initializing type with `rustc_layout_scalar_valid_range` attr is unsafe and requires unsafe function or block\n+  --> $DIR/ranged_ints_const.rs:11:34\n+   |\n+LL | const fn foo() -> NonZero<u32> { NonZero(0) }\n+   |                                  ^^^^^^^^^^ initializing type with `rustc_layout_scalar_valid_range` attr\n+   |\n+   = note: initializing a layout restricted type's field with a value outside the valid range is undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "8293d029951faf0f219eef181b49f5136e12a347", "filename": "src/test/ui/unsafe/ranged_ints_macro.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Franged_ints_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Franged_ints_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints_macro.rs?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,4 +1,7 @@\n // build-pass\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n #![feature(rustc_attrs)]\n \n macro_rules! apply {"}, {"sha": "fee645e4118def822b21cc723cc18c6a5d5095fd", "filename": "src/test/ui/unsafe/unsafe-fn-assign-deref-ptr.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-assign-deref-ptr.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-assign-deref-ptr.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-assign-deref-ptr.mir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n-  --> $DIR/unsafe-fn-assign-deref-ptr.rs:2:5\n+  --> $DIR/unsafe-fn-assign-deref-ptr.rs:5:5\n    |\n LL |     *p = 0;\n    |     ^^^^^^ dereference of raw pointer", "previous_filename": "src/test/ui/unsafe/unsafe-fn-assign-deref-ptr.stderr"}, {"sha": "a94e94375ae6a3bcbe88daa32597348b743f46cf", "filename": "src/test/ui/unsafe/unsafe-fn-assign-deref-ptr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-assign-deref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-assign-deref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-assign-deref-ptr.rs?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n fn f(p: *mut u8) {\n     *p = 0; //~ ERROR dereference of raw pointer is unsafe\n     return;"}, {"sha": "498d26d30ffcfc1fbcd4c7e08da2c9f09254a81c", "filename": "src/test/ui/unsafe/unsafe-fn-assign-deref-ptr.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-assign-deref-ptr.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-assign-deref-ptr.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-assign-deref-ptr.thir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n+  --> $DIR/unsafe-fn-assign-deref-ptr.rs:5:5\n+   |\n+LL |     *p = 0;\n+   |     ^^ dereference of raw pointer\n+   |\n+   = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "a26149924458cd0c786af2d8063c857d8ccab44e", "filename": "src/test/ui/unsafe/unsafe-fn-deref-ptr.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.mir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n-  --> $DIR/unsafe-fn-deref-ptr.rs:2:12\n+  --> $DIR/unsafe-fn-deref-ptr.rs:5:12\n    |\n LL |     return *p;\n    |            ^^ dereference of raw pointer", "previous_filename": "src/test/ui/unsafe/unsafe-fn-deref-ptr.stderr"}, {"sha": "dc989535bd650a8551b29dc1fec404fe911a24ca", "filename": "src/test/ui/unsafe/unsafe-fn-deref-ptr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.rs?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n fn f(p: *const u8) -> u8 {\n     return *p; //~ ERROR dereference of raw pointer is unsafe\n }"}, {"sha": "6897e4e691ad009d114fdededd51a226fb75d1e8", "filename": "src/test/ui/unsafe/unsafe-fn-deref-ptr.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-deref-ptr.thir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n+  --> $DIR/unsafe-fn-deref-ptr.rs:5:12\n+   |\n+LL |     return *p;\n+   |            ^^ dereference of raw pointer\n+   |\n+   = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "99808495ea6757b2c73ae47906ad28b227053e36", "filename": "src/test/ui/unsafe/unsafe-unstable-const-fn.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.mir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n-  --> $DIR/unsafe-unstable-const-fn.rs:8:5\n+  --> $DIR/unsafe-unstable-const-fn.rs:11:5\n    |\n LL |     *a == b\n    |     ^^ dereference of raw pointer", "previous_filename": "src/test/ui/unsafe/unsafe-unstable-const-fn.stderr"}, {"sha": "0476759ca6d980f44af8889e640d5030178e0f79", "filename": "src/test/ui/unsafe/unsafe-unstable-const-fn.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.rs?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n #![stable(feature = \"foo\", since = \"1.33.0\")]\n #![feature(staged_api)]\n #![feature(const_raw_ptr_deref)]"}, {"sha": "49d6a96860b907c858a622123d14e6acc6f287e3", "filename": "src/test/ui/unsafe/unsafe-unstable-const-fn.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.thir.stderr?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n+  --> $DIR/unsafe-unstable-const-fn.rs:11:5\n+   |\n+LL |     *a == b\n+   |     ^^ dereference of raw pointer\n+   |\n+   = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "3f98388446003404aedd5b38de2718f7404fc5a2", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f48e6365be66d2938b08615146dcbfed82413f3/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=0f48e6365be66d2938b08615146dcbfed82413f3", "patch": "@@ -7,8 +7,8 @@ use std::path::Path;\n \n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n-const ROOT_ENTRY_LIMIT: usize = 1370;\n-const ISSUES_ENTRY_LIMIT: usize = 2555;\n+const ROOT_ENTRY_LIMIT: usize = 1371;\n+const ISSUES_ENTRY_LIMIT: usize = 2558;\n \n fn check_entries(path: &Path, bad: &mut bool) {\n     let dirs = walkdir::WalkDir::new(&path.join(\"test/ui\"))"}]}