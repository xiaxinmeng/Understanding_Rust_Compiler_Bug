{"sha": "b31a3dff480ffad248fa5b2c66fbe9b9d6726314", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMWEzZGZmNDgwZmZhZDI0OGZhNWIyYzY2ZmJlOWI5ZDY3MjYzMTQ=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-01-29T14:45:42Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-01-31T09:39:04Z"}, "message": "Small refactor of mutable_debug_assertions", "tree": {"sha": "54fbb83676e556ed29a94eecb19cdc340723260a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54fbb83676e556ed29a94eecb19cdc340723260a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b31a3dff480ffad248fa5b2c66fbe9b9d6726314", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl4z9bgACgkQaTCGhp1Q\nZjdKQA//bcn3cgsgI9/7DYMejmVjAUFgoK1KqJr6AGhogLh+NqsxPBiekOv1a7i5\n/pvakSeFkVfjynUHGXBOpN76pjX1jKwkHFzhj8qpD+keo+3wFOHALCY3/PipOqmb\nKyLYDgMinTKOsw2YnyZ0nuAFmHzi4hJB7llekbN9dinoaDVffK6sjzzq6qQ3dWbI\nbWPt5TdyVoFFYfCBCQVwxy0vf3cULYG0LQjRBeCj1Wpess2/u1FrFRSaewbFpLL+\nzIIL7tkIcXAgWMlqaMHuc9/+PDnWiK9ZkXTil4Y4YJ44Nv+2RyJ5Gvj+SB7Y+jhY\nMj/cgEqwjrRraqQa8aMoD0al3VpeBD0clhAs53vPGNakAr34MLXf/TfXlWVnSQGX\n5D9h3xkJIwc718mjzoOkcq0EvAJoFOicyydVSBDpS+nOpyrTaIONFjbUMbFA7S2D\nu96QGs+UD84bqmgrGK7L6R2Zo8ZOfO9CSN6r8IAkc5uQuaIjIpg5MbhJC7qpRysa\nYYNv4lKrwrXCkThcIwZ/awZd3StivMSTOpX9UZ7Hh5pw86NVnexDns+LvcUqHYQq\ndUslbez2yO/Q1QT0zXry3zMkCGEXXGnYELf+uszL6upRNI2ULv2yKzAj8bYfgQWs\n4ZBfaNSosB6YgvXAWD6KGXFGEgh4PIVoOeoOzlVMbn7HwBDT9fI=\n=SHQ8\n-----END PGP SIGNATURE-----", "payload": "tree 54fbb83676e556ed29a94eecb19cdc340723260a\nparent b90101251f19760f0841daa4ad8b2978a50bafb8\nauthor flip1995 <hello@philkrones.com> 1580309142 +0100\ncommitter flip1995 <hello@philkrones.com> 1580463544 +0100\n\nSmall refactor of mutable_debug_assertions\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b31a3dff480ffad248fa5b2c66fbe9b9d6726314", "html_url": "https://github.com/rust-lang/rust/commit/b31a3dff480ffad248fa5b2c66fbe9b9d6726314", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b31a3dff480ffad248fa5b2c66fbe9b9d6726314/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b90101251f19760f0841daa4ad8b2978a50bafb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b90101251f19760f0841daa4ad8b2978a50bafb8", "html_url": "https://github.com/rust-lang/rust/commit/b90101251f19760f0841daa4ad8b2978a50bafb8"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "94ef61dcf592281c635cd3e79ed14f7d52cbff73", "filename": "clippy_lints/src/mutable_debug_assertion.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b31a3dff480ffad248fa5b2c66fbe9b9d6726314/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31a3dff480ffad248fa5b2c66fbe9b9d6726314/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs?ref=b31a3dff480ffad248fa5b2c66fbe9b9d6726314", "patch": "@@ -61,38 +61,38 @@ fn extract_call<'a, 'tcx>(cx: &'a LateContext<'a, 'tcx>, e: &'tcx Expr<'_>) -> O\n         if block.stmts.len() == 1;\n         if let StmtKind::Semi(ref matchexpr) = block.stmts[0].kind;\n         then {\n+            // debug_assert\n             if_chain! {\n                 if let ExprKind::Match(ref ifclause, _, _) = matchexpr.kind;\n                 if let ExprKind::DropTemps(ref droptmp) = ifclause.kind;\n                 if let ExprKind::Unary(UnOp::UnNot, ref condition) = droptmp.kind;\n                 then {\n-                    // debug_assert\n                     let mut visitor = MutArgVisitor::new(cx);\n                     visitor.visit_expr(condition);\n                     return visitor.expr_span();\n-                } else {\n-                    // debug_assert_{eq,ne}\n-                    if_chain! {\n-                        if let ExprKind::Block(ref matchblock, _) = matchexpr.kind;\n-                        if let Some(ref matchheader) = matchblock.expr;\n-                        if let ExprKind::Match(ref headerexpr, _, _) = matchheader.kind;\n-                        if let ExprKind::Tup(ref conditions) = headerexpr.kind;\n-                        if conditions.len() == 2;\n-                        then {\n-                            if let ExprKind::AddrOf(BorrowKind::Ref, _, ref lhs) = conditions[0].kind {\n-                                let mut visitor = MutArgVisitor::new(cx);\n-                                visitor.visit_expr(lhs);\n-                                if let Some(span) = visitor.expr_span() {\n-                                    return Some(span);\n-                                }\n-                            }\n-                            if let ExprKind::AddrOf(BorrowKind::Ref, _, ref rhs) = conditions[1].kind {\n-                                let mut visitor = MutArgVisitor::new(cx);\n-                                visitor.visit_expr(rhs);\n-                                if let Some(span) = visitor.expr_span() {\n-                                    return Some(span);\n-                                }\n-                            }\n+                }\n+            }\n+\n+            // debug_assert_{eq,ne}\n+            if_chain! {\n+                if let ExprKind::Block(ref matchblock, _) = matchexpr.kind;\n+                if let Some(ref matchheader) = matchblock.expr;\n+                if let ExprKind::Match(ref headerexpr, _, _) = matchheader.kind;\n+                if let ExprKind::Tup(ref conditions) = headerexpr.kind;\n+                if conditions.len() == 2;\n+                then {\n+                    if let ExprKind::AddrOf(BorrowKind::Ref, _, ref lhs) = conditions[0].kind {\n+                        let mut visitor = MutArgVisitor::new(cx);\n+                        visitor.visit_expr(lhs);\n+                        if let Some(span) = visitor.expr_span() {\n+                            return Some(span);\n+                        }\n+                    }\n+                    if let ExprKind::AddrOf(BorrowKind::Ref, _, ref rhs) = conditions[1].kind {\n+                        let mut visitor = MutArgVisitor::new(cx);\n+                        visitor.visit_expr(rhs);\n+                        if let Some(span) = visitor.expr_span() {\n+                            return Some(span);\n                         }\n                     }\n                 }"}]}