{"sha": "16513d689e4fe30e58a37dd773af5be9210ebcbd", "node_id": "C_kwDOAAsO6NoAKDE2NTEzZDY4OWU0ZmUzMGU1OGEzN2RkNzczYWY1YmU5MjEwZWJjYmQ", "commit": {"author": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-07-19T21:06:52Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-07-29T22:26:10Z"}, "message": "Rename local_did to def_id\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "3b4375ba578709ef3142542c85d2ef411987ddea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b4375ba578709ef3142542c85d2ef411987ddea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16513d689e4fe30e58a37dd773af5be9210ebcbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16513d689e4fe30e58a37dd773af5be9210ebcbd", "html_url": "https://github.com/rust-lang/rust/commit/16513d689e4fe30e58a37dd773af5be9210ebcbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16513d689e4fe30e58a37dd773af5be9210ebcbd/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25bdc8965e7a80cb3a72da79ca568953738fe433", "url": "https://api.github.com/repos/rust-lang/rust/commits/25bdc8965e7a80cb3a72da79ca568953738fe433", "html_url": "https://github.com/rust-lang/rust/commit/25bdc8965e7a80cb3a72da79ca568953738fe433"}], "stats": {"total": 52, "additions": 28, "deletions": 24}, "files": [{"sha": "f66b1a2976f1cd0427da976c31a92d50fddcef88", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16513d689e4fe30e58a37dd773af5be9210ebcbd/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16513d689e4fe30e58a37dd773af5be9210ebcbd/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=16513d689e4fe30e58a37dd773af5be9210ebcbd", "patch": "@@ -328,7 +328,7 @@ impl<'tcx> pprust_hir::PpAnn for TypedAnnotation<'tcx> {\n             let typeck_results = self.maybe_typeck_results.get().or_else(|| {\n                 self.tcx\n                     .hir()\n-                    .maybe_body_owned_by(self.tcx.hir().local_def_id(expr.hir_id))\n+                    .maybe_body_owned_by(expr.hir_id.owner)\n                     .map(|body_id| self.tcx.typeck_body(body_id))\n             });\n "}, {"sha": "3e9d491af62d37d7c202544f9ca95cdb0d808487", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16513d689e4fe30e58a37dd773af5be9210ebcbd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16513d689e4fe30e58a37dd773af5be9210ebcbd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=16513d689e4fe30e58a37dd773af5be9210ebcbd", "patch": "@@ -49,8 +49,8 @@ pub fn find_param_with_region<'tcx>(\n     };\n \n     let hir = &tcx.hir();\n-    let local_did = id.as_local()?;\n-    let hir_id = hir.local_def_id_to_hir_id(local_did);\n+    let def_id = id.as_local()?;\n+    let hir_id = hir.local_def_id_to_hir_id(def_id);\n \n     // FIXME: use def_kind\n     // Don't perform this on closures\n@@ -61,7 +61,7 @@ pub fn find_param_with_region<'tcx>(\n         _ => {}\n     }\n \n-    let body_id = hir.maybe_body_owned_by(local_did)?;\n+    let body_id = hir.maybe_body_owned_by(def_id)?;\n \n     let owner_id = hir.body_owner(body_id);\n     let fn_decl = hir.fn_decl_by_hir_id(owner_id).unwrap();"}, {"sha": "f0886036899a2f4cd8797f65799013f57288ebe2", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/16513d689e4fe30e58a37dd773af5be9210ebcbd/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16513d689e4fe30e58a37dd773af5be9210ebcbd/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=16513d689e4fe30e58a37dd773af5be9210ebcbd", "patch": "@@ -1614,16 +1614,16 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     }\n \n     fn encode_info_for_anon_const(&mut self, id: hir::HirId) {\n-        let local_did = self.tcx.hir().local_def_id(id);\n-        debug!(\"EncodeContext::encode_info_for_anon_const({:?})\", local_did);\n-        let body_id = self.tcx.hir().body_owned_by(local_did);\n+        let def_id = self.tcx.hir().local_def_id(id);\n+        debug!(\"EncodeContext::encode_info_for_anon_const({:?})\", def_id);\n+        let body_id = self.tcx.hir().body_owned_by(def_id);\n         let const_data = self.encode_rendered_const_for_body(body_id);\n-        let qualifs = self.tcx.mir_const_qualif(local_did);\n+        let qualifs = self.tcx.mir_const_qualif(def_id);\n \n-        record!(self.tables.kind[local_did.to_def_id()] <- EntryKind::AnonConst);\n-        record!(self.tables.mir_const_qualif[local_did.to_def_id()] <- qualifs);\n-        record!(self.tables.rendered_const[local_did.to_def_id()] <- const_data);\n-        self.encode_item_type(local_did.to_def_id());\n+        record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::AnonConst);\n+        record!(self.tables.mir_const_qualif[def_id.to_def_id()] <- qualifs);\n+        record!(self.tables.rendered_const[def_id.to_def_id()] <- const_data);\n+        self.encode_item_type(def_id.to_def_id());\n     }\n \n     fn encode_native_libraries(&mut self) -> LazyArray<NativeLib> {"}, {"sha": "211a614717f8b7fe22083a5800c2a6edc89e8485", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16513d689e4fe30e58a37dd773af5be9210ebcbd/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16513d689e4fe30e58a37dd773af5be9210ebcbd/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=16513d689e4fe30e58a37dd773af5be9210ebcbd", "patch": "@@ -157,9 +157,9 @@ pub fn provide(providers: &mut Providers) {\n     };\n     providers.fn_arg_names = |tcx, id| {\n         let hir = tcx.hir();\n-        let local_did = id.expect_local();\n-        let hir_id = hir.local_def_id_to_hir_id(local_did);\n-        if let Some(body_id) = hir.maybe_body_owned_by(local_did) {\n+        let def_id = id.expect_local();\n+        let hir_id = hir.local_def_id_to_hir_id(def_id);\n+        if let Some(body_id) = hir.maybe_body_owned_by(def_id) {\n             tcx.arena.alloc_from_iter(hir.body_param_names(body_id))\n         } else if let Node::TraitItem(&TraitItem {\n             kind: TraitItemKind::Fn(_, TraitFn::Required(idents)),"}, {"sha": "063c076474e9027661b9be18d1e35c5885c379c4", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16513d689e4fe30e58a37dd773af5be9210ebcbd/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16513d689e4fe30e58a37dd773af5be9210ebcbd/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=16513d689e4fe30e58a37dd773af5be9210ebcbd", "patch": "@@ -26,7 +26,7 @@ use rustc_span::{BytePos, Span};\n pub(crate) fn check_match(tcx: TyCtxt<'_>, def_id: DefId) {\n     let body_id = match def_id.as_local() {\n         None => return,\n-        Some(did) => tcx.hir().body_owned_by(did),\n+        Some(def_id) => tcx.hir().body_owned_by(def_id),\n     };\n \n     let pattern_arena = TypedArena::default();"}, {"sha": "68d9bf22bf9c046f29fc567f37a1eda4ef44ff5a", "filename": "compiler/rustc_passes/src/upvars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16513d689e4fe30e58a37dd773af5be9210ebcbd/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16513d689e4fe30e58a37dd773af5be9210ebcbd/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs?ref=16513d689e4fe30e58a37dd773af5be9210ebcbd", "patch": "@@ -15,8 +15,8 @@ pub fn provide(providers: &mut Providers) {\n             return None;\n         }\n \n-        let local_did = def_id.expect_local();\n-        let body = tcx.hir().body(tcx.hir().maybe_body_owned_by(local_did)?);\n+        let local_def_id = def_id.expect_local();\n+        let body = tcx.hir().body(tcx.hir().maybe_body_owned_by(local_def_id)?);\n \n         let mut local_collector = LocalCollector::default();\n         local_collector.visit_body(body);"}, {"sha": "03a8de7c760f6d41241c9d3ece0bef8a06947057", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16513d689e4fe30e58a37dd773af5be9210ebcbd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16513d689e4fe30e58a37dd773af5be9210ebcbd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=16513d689e4fe30e58a37dd773af5be9210ebcbd", "patch": "@@ -1783,7 +1783,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         let generator_body = generator_did\n             .as_local()\n-            .and_then(|local_did| hir.maybe_body_owned_by(local_did))\n+            .and_then(|def_id| hir.maybe_body_owned_by(def_id))\n             .map(|body_id| hir.body(body_id));\n         let is_async = match generator_did.as_local() {\n             Some(_) => generator_body"}, {"sha": "b1af3051719e85ae348628ad4669581fa58a8cd2", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/16513d689e4fe30e58a37dd773af5be9210ebcbd/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16513d689e4fe30e58a37dd773af5be9210ebcbd/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=16513d689e4fe30e58a37dd773af5be9210ebcbd", "patch": "@@ -207,10 +207,14 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n         constness,\n     );\n \n-    let body_id = local_did\n-        .and_then(|id| tcx.hir().maybe_body_owned_by(id).map(|body| body.hir_id))\n-        .or(hir_id)\n-        .map_or(hir::CRATE_HIR_ID, |did| did);\n+    let body_id =\n+        local_did.and_then(|id| tcx.hir().maybe_body_owned_by(id).map(|body| body.hir_id));\n+    let body_id = match body_id {\n+        Some(id) => id,\n+        None if hir_id.is_some() => hir_id.unwrap(),\n+        _ => hir::CRATE_HIR_ID,\n+    };\n+\n     let cause = traits::ObligationCause::misc(tcx.def_span(def_id), body_id);\n     traits::normalize_param_env_or_error(tcx, unnormalized_env, cause)\n }"}, {"sha": "c0726868f77e22eb35b78e8637db18582b2e0a2d", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16513d689e4fe30e58a37dd773af5be9210ebcbd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16513d689e4fe30e58a37dd773af5be9210ebcbd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=16513d689e4fe30e58a37dd773af5be9210ebcbd", "patch": "@@ -138,7 +138,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n \n fn check_item(cx: &LateContext<'_>, hir_id: HirId) {\n     let hir = cx.tcx.hir();\n-    if let Some(body_id) = hir.maybe_body_owned_by(hir.local_def_id(hir_id)) {\n+    if let Some(body_id) = hir.maybe_body_owned_by(hir_id.expect_owner()) {\n         check_node(cx, hir_id, |v| {\n             v.expr(&v.bind(\"expr\", &hir.body(body_id).value));\n         });"}]}