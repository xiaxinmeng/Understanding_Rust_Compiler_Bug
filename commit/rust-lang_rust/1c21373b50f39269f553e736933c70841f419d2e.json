{"sha": "1c21373b50f39269f553e736933c70841f419d2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMjEzNzNiNTBmMzkyNjlmNTUzZTczNjkzM2M3MDg0MWY0MTlkMmU=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-08-05T19:21:52Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-08-05T19:21:52Z"}, "message": "add Box::try_new_uninit_slice for symmetry", "tree": {"sha": "eeb9db5bfbc1546c9b583bb300fd9c3525ced91c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eeb9db5bfbc1546c9b583bb300fd9c3525ced91c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c21373b50f39269f553e736933c70841f419d2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c21373b50f39269f553e736933c70841f419d2e", "html_url": "https://github.com/rust-lang/rust/commit/1c21373b50f39269f553e736933c70841f419d2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c21373b50f39269f553e736933c70841f419d2e/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55def120a4d54123625ad05c4d6384c5044642f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/55def120a4d54123625ad05c4d6384c5044642f1", "html_url": "https://github.com/rust-lang/rust/commit/55def120a4d54123625ad05c4d6384c5044642f1"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "722168523763a7bc7b0999aef90934ecf104ebc6", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1c21373b50f39269f553e736933c70841f419d2e/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c21373b50f39269f553e736933c70841f419d2e/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=1c21373b50f39269f553e736933c70841f419d2e", "patch": "@@ -589,6 +589,39 @@ impl<T> Box<[T]> {\n         unsafe { RawVec::with_capacity_zeroed(len).into_box(len) }\n     }\n \n+    /// Constructs a new boxed slice with uninitialized contents. Returns an error if\n+    /// the allocation fails\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(allocator_api, new_uninit)]\n+    ///\n+    /// let mut values = Box::<[u32]>::try_new_uninit_slice(3)?;\n+    /// let values = unsafe {\n+    ///     // Deferred initialization:\n+    ///     values[0].as_mut_ptr().write(1);\n+    ///     values[1].as_mut_ptr().write(2);\n+    ///     values[2].as_mut_ptr().write(3);\n+    ///     values.assume_init()\n+    /// };\n+    ///\n+    /// assert_eq!(*values, [1, 2, 3]);\n+    /// # Ok::<(), std::alloc::AllocError>(())\n+    /// ```\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[inline]\n+    pub fn try_new_uninit_slice(len: usize) -> Result<Box<[mem::MaybeUninit<T>]>, AllocError> {\n+        unsafe {\n+            let layout = match Layout::array::<mem::MaybeUninit<T>>(len) {\n+                Ok(l) => l,\n+                Err(_) => return Err(AllocError),\n+            };\n+            let ptr = Global.allocate(layout)?;\n+            Ok(RawVec::from_raw_parts_in(ptr.as_mut_ptr() as *mut _, len, Global).into_box(len))\n+        }\n+    }\n+\n     /// Constructs a new boxed slice with uninitialized contents, with the memory\n     /// being filled with `0` bytes. Returns an error if the allocation fails\n     ///"}]}