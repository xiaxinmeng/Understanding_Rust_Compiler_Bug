{"sha": "356d8ad1a310a2265e05d5c193d41704030d70d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NmQ4YWQxYTMxMGEyMjY1ZTA1ZDVjMTkzZDQxNzA0MDMwZDcwZDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-14T08:25:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-14T08:25:41Z"}, "message": "Auto merge of #76571 - lzutao:rustdoc-private-traits, r=jyn514\n\nIgnore rustc_private items from std docs\n\nBy ignoring rustc_private items for non local impl block,\nthis may fix #74672 and fix #75588 .\n\nThis might suppress #76529 if it is simple enough for backport.", "tree": {"sha": "f97a0fc2937b0c0ce03c872b574e14bd5fd84800", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f97a0fc2937b0c0ce03c872b574e14bd5fd84800"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/356d8ad1a310a2265e05d5c193d41704030d70d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/356d8ad1a310a2265e05d5c193d41704030d70d3", "html_url": "https://github.com/rust-lang/rust/commit/356d8ad1a310a2265e05d5c193d41704030d70d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/356d8ad1a310a2265e05d5c193d41704030d70d3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5f55b7e1562286798358730e06b0ba13b4c0ea6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5f55b7e1562286798358730e06b0ba13b4c0ea6", "html_url": "https://github.com/rust-lang/rust/commit/b5f55b7e1562286798358730e06b0ba13b4c0ea6"}, {"sha": "c743fc43420ff09a79cc23316e484631842556dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c743fc43420ff09a79cc23316e484631842556dc", "html_url": "https://github.com/rust-lang/rust/commit/c743fc43420ff09a79cc23316e484631842556dc"}], "stats": {"total": 75, "additions": 66, "deletions": 9}, "files": [{"sha": "f8987c6beca33966aa0e3594d10d905f22d21412", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/356d8ad1a310a2265e05d5c193d41704030d70d3/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356d8ad1a310a2265e05d5c193d41704030d70d3/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=356d8ad1a310a2265e05d5c193d41704030d70d3", "patch": "@@ -337,18 +337,13 @@ pub fn build_impl(\n     // reachable in rustdoc generated documentation\n     if !did.is_local() {\n         if let Some(traitref) = associated_trait {\n-            if !cx.renderinfo.borrow().access_levels.is_public(traitref.def_id) {\n+            let did = traitref.def_id;\n+            if !cx.renderinfo.borrow().access_levels.is_public(did) {\n                 return;\n             }\n-        }\n \n-        // Skip foreign unstable traits from lists of trait implementations and\n-        // such. This helps prevent dependencies of the standard library, for\n-        // example, from getting documented as \"traits `u32` implements\" which\n-        // isn't really too helpful.\n-        if let Some(trait_did) = associated_trait {\n-            if let Some(stab) = cx.tcx.lookup_stability(trait_did.def_id) {\n-                if stab.level.is_unstable() {\n+            if let Some(stab) = tcx.lookup_stability(did) {\n+                if stab.level.is_unstable() && stab.feature == sym::rustc_private {\n                     return;\n                 }\n             }\n@@ -372,6 +367,12 @@ pub fn build_impl(\n             if !cx.renderinfo.borrow().access_levels.is_public(did) {\n                 return;\n             }\n+\n+            if let Some(stab) = tcx.lookup_stability(did) {\n+                if stab.level.is_unstable() && stab.feature == sym::rustc_private {\n+                    return;\n+                }\n+            }\n         }\n     }\n "}, {"sha": "80d5c4ba8bb0981eaadc9272691f591249565941", "filename": "src/test/rustdoc/auxiliary/real_gimli.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/356d8ad1a310a2265e05d5c193d41704030d70d3/src%2Ftest%2Frustdoc%2Fauxiliary%2Freal_gimli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356d8ad1a310a2265e05d5c193d41704030d70d3/src%2Ftest%2Frustdoc%2Fauxiliary%2Freal_gimli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Freal_gimli.rs?ref=356d8ad1a310a2265e05d5c193d41704030d70d3", "patch": "@@ -0,0 +1,13 @@\n+// aux-build:realcore.rs\n+\n+#![crate_name = \"real_gimli\"]\n+#![feature(staged_api, extremely_unstable)]\n+#![unstable(feature = \"rustc_private\", issue = \"none\")]\n+\n+extern crate realcore;\n+\n+#[unstable(feature = \"rustc_private\", issue = \"none\")]\n+pub struct EndianSlice;\n+\n+#[unstable(feature = \"rustc_private\", issue = \"none\")]\n+impl realcore::Deref for EndianSlice {}"}, {"sha": "e0a906df002dae87ba8dd1240416c65e31ea296f", "filename": "src/test/rustdoc/auxiliary/realcore.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/356d8ad1a310a2265e05d5c193d41704030d70d3/src%2Ftest%2Frustdoc%2Fauxiliary%2Frealcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356d8ad1a310a2265e05d5c193d41704030d70d3/src%2Ftest%2Frustdoc%2Fauxiliary%2Frealcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Frealcore.rs?ref=356d8ad1a310a2265e05d5c193d41704030d70d3", "patch": "@@ -0,0 +1,15 @@\n+#![crate_name = \"realcore\"]\n+#![feature(staged_api)]\n+#![unstable(feature = \"extremely_unstable\", issue = \"none\")]\n+\n+#[unstable(feature = \"extremely_unstable_foo\", issue = \"none\")]\n+pub struct Foo {}\n+\n+#[unstable(feature = \"extremely_unstable_foo\", issue = \"none\")]\n+pub trait Join {}\n+\n+#[unstable(feature = \"extremely_unstable_foo\", issue = \"none\")]\n+impl Join for Foo {}\n+\n+#[stable(feature = \"faked_deref\", since = \"1.47.0\")]\n+pub trait Deref {}"}, {"sha": "835ed02ac00db9443db42c0ef601148403ba6dc2", "filename": "src/test/rustdoc/issue-75588.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/356d8ad1a310a2265e05d5c193d41704030d70d3/src%2Ftest%2Frustdoc%2Fissue-75588.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356d8ad1a310a2265e05d5c193d41704030d70d3/src%2Ftest%2Frustdoc%2Fissue-75588.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-75588.rs?ref=356d8ad1a310a2265e05d5c193d41704030d70d3", "patch": "@@ -0,0 +1,18 @@\n+// ignore-tidy-linelength\n+// aux-build:realcore.rs\n+// aux-build:real_gimli.rs\n+\n+// Ensure unstably exported traits have their Implementors sections.\n+\n+#![crate_name = \"foo\"]\n+#![feature(extremely_unstable_foo)]\n+\n+extern crate realcore;\n+extern crate real_gimli;\n+\n+// issue #74672\n+// @!has foo/trait.Deref.html '//*[@id=\"impl-Deref-for-EndianSlice\"]//code' 'impl Deref for EndianSlice'\n+pub use realcore::Deref;\n+\n+// @has foo/trait.Join.html '//*[@id=\"impl-Join-for-Foo\"]//code' 'impl Join for Foo'\n+pub use realcore::Join;"}, {"sha": "4fe493a850d48f81e26d2cfa811728647e06fd26", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/356d8ad1a310a2265e05d5c193d41704030d70d3/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356d8ad1a310a2265e05d5c193d41704030d70d3/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=356d8ad1a310a2265e05d5c193d41704030d70d3", "patch": "@@ -142,6 +142,16 @@ fn is_exception(file: &Path, link: &str) -> bool {\n     if let Some(entry) = LINKCHECK_EXCEPTIONS.iter().find(|&(f, _)| file.ends_with(f)) {\n         entry.1.contains(&link)\n     } else {\n+        // FIXME(#63351): Concat trait in alloc/slice reexported in primitive page\n+        //\n+        // NOTE: This cannot be added to `LINKCHECK_EXCEPTIONS` because the resolved path\n+        // calculated in `check` function is outside `build/<triple>/doc` dir.\n+        // So the `strip_prefix` method just returns the old absolute broken path.\n+        if file.ends_with(\"std/primitive.slice.html\") {\n+            if link.ends_with(\"primitive.slice.html\") {\n+                return true;\n+            }\n+        }\n         false\n     }\n }"}]}