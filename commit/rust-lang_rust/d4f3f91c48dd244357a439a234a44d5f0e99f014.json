{"sha": "d4f3f91c48dd244357a439a234a44d5f0e99f014", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZjNmOTFjNDhkZDI0NDM1N2E0MzlhMjM0YTQ0ZDVmMGU5OWYwMTQ=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-31T15:13:51Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-31T15:55:30Z"}, "message": "Enforce that Toolchain files are static and Crate files are dynamic\n\nThis also changes custom themes from Toolchain to Crate files.", "tree": {"sha": "75f38acc508e58f6c58cc0119da13754c6941e91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75f38acc508e58f6c58cc0119da13754c6941e91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4f3f91c48dd244357a439a234a44d5f0e99f014", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4f3f91c48dd244357a439a234a44d5f0e99f014", "html_url": "https://github.com/rust-lang/rust/commit/d4f3f91c48dd244357a439a234a44d5f0e99f014", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4f3f91c48dd244357a439a234a44d5f0e99f014/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f77ebd4ffaea7fc5af49425cafefe141e7458cc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f77ebd4ffaea7fc5af49425cafefe141e7458cc3", "html_url": "https://github.com/rust-lang/rust/commit/f77ebd4ffaea7fc5af49425cafefe141e7458cc3"}], "stats": {"total": 69, "additions": 40, "deletions": 29}, "files": [{"sha": "b19b29d2fa0d8832ec84f38dd6883c259141765b", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 35, "deletions": 28, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/d4f3f91c48dd244357a439a234a44d5f0e99f014/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4f3f91c48dd244357a439a234a44d5f0e99f014/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=d4f3f91c48dd244357a439a234a44d5f0e99f014", "patch": "@@ -44,11 +44,11 @@ enum SharedResource<'a> {\n     /// This file will never change, no matter what toolchain is used to build it.\n     ///\n     /// It does not have a resource suffix.\n-    Unversioned { name: &'a str },\n+    Unversioned { name: &'static str },\n     /// This file may change depending on the toolchain.\n     ///\n     /// It has a resource suffix.\n-    ToolchainSpecific { basename: &'a str },\n+    ToolchainSpecific { basename: &'static str },\n     /// This file may change for any crate within a build.\n     ///\n     /// This differs from normal crate-specific files because it has a resource suffix.\n@@ -157,11 +157,16 @@ pub(super) fn write_shared(\n             &options.emit,\n         )\n     };\n-    let write_toolchain = |p: &_, c: &_| {\n+    // Toolchain resources should never be dynamic.\n+    let write_toolchain = |p: &'static _, c: &'static _| {\n         cx.write_shared(SharedResource::ToolchainSpecific { basename: p }, c, &options.emit)\n     };\n-    let write_crate =\n-        |p, c: &_| cx.write_shared(SharedResource::CrateSpecific { basename: p }, c, &options.emit);\n+\n+    // Crate resources should always be dynamic.\n+    let write_crate = |p: &_, make_content: &dyn Fn() -> Result<Vec<u8>, Error>| {\n+        let content = make_content()?;\n+        cx.write_shared(SharedResource::CrateSpecific { basename: p }, content, &options.emit)\n+    };\n \n     // Add all the static files. These may already exist, but we just\n     // overwrite them anyway to make sure that they're fresh and up-to-date.\n@@ -185,10 +190,8 @@ pub(super) fn write_shared(\n             \"ayu\" => write_minify(\"ayu.css\", static_files::themes::AYU)?,\n             _ => {\n                 // Handle added third-party themes\n-                let content = try_err!(fs::read(&entry.path), &entry.path);\n-                // This is not exactly right: if compiled a second time with the same toolchain but different CLI args, the file could be different.\n-                // But docs.rs doesn't use this, so hopefully the issue doesn't come up.\n-                write_toolchain(&format!(\"{}.{}\", theme, extension), content.as_slice())?;\n+                let filename = format!(\"{}.{}\", theme, extension);\n+                write_crate(&filename, &|| Ok(try_err!(fs::read(&entry.path), &entry.path)))?;\n             }\n         };\n \n@@ -367,19 +370,22 @@ pub(super) fn write_shared(\n         }\n \n         let dst = cx.dst.join(&format!(\"source-files{}.js\", cx.shared.resource_suffix));\n-        let (mut all_sources, _krates) =\n-            try_err!(collect(&dst, &krate.name.as_str(), \"sourcesIndex\"), &dst);\n-        all_sources.push(format!(\n-            \"sourcesIndex[\\\"{}\\\"] = {};\",\n-            &krate.name,\n-            hierarchy.to_json_string()\n-        ));\n-        all_sources.sort();\n-        let v = format!(\n-            \"var N = null;var sourcesIndex = {{}};\\n{}\\ncreateSourceSidebar();\\n\",\n-            all_sources.join(\"\\n\")\n-        );\n-        write_crate(\"source-files.js\", &v)?;\n+        let make_sources = || {\n+            let (mut all_sources, _krates) =\n+                try_err!(collect(&dst, &krate.name.as_str(), \"sourcesIndex\"), &dst);\n+            all_sources.push(format!(\n+                \"sourcesIndex[\\\"{}\\\"] = {};\",\n+                &krate.name,\n+                hierarchy.to_json_string()\n+            ));\n+            all_sources.sort();\n+            Ok(format!(\n+                \"var N = null;var sourcesIndex = {{}};\\n{}\\ncreateSourceSidebar();\\n\",\n+                all_sources.join(\"\\n\")\n+            )\n+            .into_bytes())\n+        };\n+        write_crate(\"source-files.js\", &make_sources)?;\n     }\n \n     // Update the search index and crate list.\n@@ -392,16 +398,17 @@ pub(super) fn write_shared(\n     // Sort the indexes by crate so the file will be generated identically even\n     // with rustdoc running in parallel.\n     all_indexes.sort();\n-    {\n+    write_crate(\"search-index.js\", &|| {\n         let mut v = String::from(\"var searchIndex = JSON.parse('{\\\\\\n\");\n         v.push_str(&all_indexes.join(\",\\\\\\n\"));\n         v.push_str(\"\\\\\\n}');\\ninitSearch(searchIndex);\");\n-        write_crate(\"search-index.js\", &v)?;\n-    }\n+        Ok(v.into_bytes())\n+    })?;\n \n-    let crate_list =\n-        format!(\"window.ALL_CRATES = [{}];\", krates.iter().map(|k| format!(\"\\\"{}\\\"\", k)).join(\",\"));\n-    write_crate(\"crates.js\", &crate_list)?;\n+    write_crate(\"crates.js\", &|| {\n+        let krates = krates.iter().map(|k| format!(\"\\\"{}\\\"\", k)).join(\",\");\n+        Ok(format!(\"window.ALL_CRATES = [{}];\", krates).into_bytes())\n+    })?;\n \n     if options.enable_index_page {\n         if let Some(index_page) = options.index_page.clone() {"}, {"sha": "952c3aaf5602d215c83c7b882067b0d378101ea0", "filename": "src/test/run-make/emit-shared-files/Makefile", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d4f3f91c48dd244357a439a234a44d5f0e99f014/src%2Ftest%2Frun-make%2Femit-shared-files%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d4f3f91c48dd244357a439a234a44d5f0e99f014/src%2Ftest%2Frun-make%2Femit-shared-files%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Femit-shared-files%2FMakefile?ref=d4f3f91c48dd244357a439a234a44d5f0e99f014", "patch": "@@ -7,17 +7,20 @@ ALL_SHARED = $(TMPDIR)/all-shared\n all: crate-only toolchain-only all-shared\n \n crate-only:\n-\t$(RUSTDOC) -Z unstable-options --emit=crate-specific --output $(CRATE_ONLY) --resource-suffix=-xxx x.rs\n+\t$(RUSTDOC) -Z unstable-options --emit=crate-specific --output $(CRATE_ONLY) --resource-suffix=-xxx --theme y.css x.rs\n \t[ -e $(CRATE_ONLY)/search-index-xxx.js ]\n \t[ -e $(CRATE_ONLY)/settings.html ]\n \t[ -e $(CRATE_ONLY)/x/all.html ]\n \t[ -e $(CRATE_ONLY)/x/index.html ]\n+\t# FIXME: this probably shouldn't have a suffix\n+\t[ -e $(CRATE_ONLY)/y-xxx.css ]\n \t! [ -e $(CRATE_ONLY)/storage-xxx.js ]\n \t! [ -e $(CRATE_ONLY)/SourceSerifPro-It.ttf.woff ]\n \n toolchain-only:\n \t$(RUSTDOC) -Z unstable-options --emit=toolchain-shared-resources --output $(TOOLCHAIN_ONLY) --resource-suffix=-xxx x.rs\n \t[ -e $(TOOLCHAIN_ONLY)/storage-xxx.js ]\n+\t! [ -e $(TOOLCHAIN_ONLY)/y-xxx.css ]\n \t! [ -e $(TOOLCHAIN_ONLY)/SourceSerifPro-It.ttf.woff ]\n \t! [ -e $(TOOLCHAIN_ONLY)/search-index-xxx.js ]\n \t! [ -e $(TOOLCHAIN_ONLY)/x/index.html ]\n@@ -26,6 +29,7 @@ all-shared:\n \t$(RUSTDOC) -Z unstable-options --emit=toolchain-shared-resources,unversioned-shared-resources --output $(ALL_SHARED) --resource-suffix=-xxx x.rs\n \t[ -e $(ALL_SHARED)/storage-xxx.js ]\n \t[ -e $(ALL_SHARED)/SourceSerifPro-It.ttf.woff ]\n+\t! [ -e $(ALL_SHARED)/y-xxx.css ]\n \t! [ -e $(ALL_SHARED)/search-index-xxx.js ]\n \t! [ -e $(ALL_SHARED)/settings.html ]\n \t! [ -e $(ALL_SHARED)/x ]"}]}