{"sha": "76625eb0cc1491520348220c180a6dd3def83bb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2NjI1ZWIwY2MxNDkxNTIwMzQ4MjIwYzE4MGE2ZGQzZGVmODNiYjk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-27T23:16:35Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-05T06:33:09Z"}, "message": "or-patterns: syntax: adjust derive, format, and building.", "tree": {"sha": "ce99c4b8690fef26dcbfa72dc103019e52fd7fa6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce99c4b8690fef26dcbfa72dc103019e52fd7fa6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76625eb0cc1491520348220c180a6dd3def83bb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76625eb0cc1491520348220c180a6dd3def83bb9", "html_url": "https://github.com/rust-lang/rust/commit/76625eb0cc1491520348220c180a6dd3def83bb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76625eb0cc1491520348220c180a6dd3def83bb9/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "424492acc863bb83dc70eee5847b9f3d677f5e14", "url": "https://api.github.com/repos/rust-lang/rust/commits/424492acc863bb83dc70eee5847b9f3d677f5e14", "html_url": "https://github.com/rust-lang/rust/commit/424492acc863bb83dc70eee5847b9f3d677f5e14"}], "stats": {"total": 32, "additions": 14, "deletions": 18}, "files": [{"sha": "dc6cbfcf6ad5c56f6c22eaa46f04b6a935013830", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/76625eb0cc1491520348220c180a6dd3def83bb9/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76625eb0cc1491520348220c180a6dd3def83bb9/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=76625eb0cc1491520348220c180a6dd3def83bb9", "patch": "@@ -537,9 +537,9 @@ impl<'a> ExtCtxt<'a> {\n         let err_expr = self.expr(sp, ast::ExprKind::Ret(Some(err_inner_expr)));\n \n         // `Ok(__try_var) => __try_var`\n-        let ok_arm = self.arm(sp, vec![ok_pat], binding_expr);\n+        let ok_arm = self.arm(sp, ok_pat, binding_expr);\n         // `Err(__try_var) => return Err(__try_var)`\n-        let err_arm = self.arm(sp, vec![err_pat], err_expr);\n+        let err_arm = self.arm(sp, err_pat, err_expr);\n \n         // `match head { Ok() => ..., Err() => ... }`\n         self.expr_match(sp, head, vec![ok_arm, err_arm])\n@@ -606,10 +606,10 @@ impl<'a> ExtCtxt<'a> {\n         self.pat_tuple_struct(span, path, vec![pat])\n     }\n \n-    pub fn arm(&self, span: Span, pats: Vec<P<ast::Pat>>, expr: P<ast::Expr>) -> ast::Arm {\n+    pub fn arm(&self, span: Span, pat: P<ast::Pat>, expr: P<ast::Expr>) -> ast::Arm {\n         ast::Arm {\n             attrs: vec![],\n-            pats,\n+            pat,\n             guard: None,\n             body: expr,\n             span,\n@@ -618,7 +618,7 @@ impl<'a> ExtCtxt<'a> {\n     }\n \n     pub fn arm_unreachable(&self, span: Span) -> ast::Arm {\n-        self.arm(span, vec![self.pat_wild(span)], self.expr_unreachable(span))\n+        self.arm(span, self.pat_wild(span), self.expr_unreachable(span))\n     }\n \n     pub fn expr_match(&self, span: Span, arg: P<ast::Expr>, arms: Vec<ast::Arm>) -> P<Expr> {"}, {"sha": "1f4f5aa37099fb364ee7b694b180490590765b0d", "filename": "src/libsyntax_ext/deriving/cmp/ord.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76625eb0cc1491520348220c180a6dd3def83bb9/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76625eb0cc1491520348220c180a6dd3def83bb9/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs?ref=76625eb0cc1491520348220c180a6dd3def83bb9", "patch": "@@ -95,11 +95,9 @@ pub fn cs_cmp(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>) -> P<\n                     cx.expr_call_global(span, cmp_path.clone(), args)\n                 };\n \n-                let eq_arm = cx.arm(span,\n-                                    vec![cx.pat_path(span, equals_path.clone())],\n-                                    old);\n+                let eq_arm = cx.arm(span, cx.pat_path(span, equals_path.clone()), old);\n                 let neq_arm = cx.arm(span,\n-                                     vec![cx.pat_ident(span, test_id)],\n+                                     cx.pat_ident(span, test_id),\n                                      cx.expr_ident(span, test_id));\n \n                 cx.expr_match(span, new, vec![eq_arm, neq_arm])"}, {"sha": "debdc300e64955ebebf81864553cddd9d1a1759c", "filename": "src/libsyntax_ext/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76625eb0cc1491520348220c180a6dd3def83bb9/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76625eb0cc1491520348220c180a6dd3def83bb9/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=76625eb0cc1491520348220c180a6dd3def83bb9", "patch": "@@ -160,10 +160,10 @@ pub fn cs_partial_cmp(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_\n                 };\n \n                 let eq_arm = cx.arm(span,\n-                                    vec![cx.pat_some(span, cx.pat_path(span, ordering.clone()))],\n+                                    cx.pat_some(span, cx.pat_path(span, ordering.clone())),\n                                     old);\n                 let neq_arm = cx.arm(span,\n-                                    vec![cx.pat_ident(span, test_id)],\n+                                    cx.pat_ident(span, test_id),\n                                     cx.expr_ident(span, test_id));\n \n                 cx.expr_match(span, new, vec![eq_arm, neq_arm])"}, {"sha": "d3d604b72521d40112f1fa5370a3cd2face7fab9", "filename": "src/libsyntax_ext/deriving/decodable.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76625eb0cc1491520348220c180a6dd3def83bb9/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76625eb0cc1491520348220c180a6dd3def83bb9/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs?ref=76625eb0cc1491520348220c180a6dd3def83bb9", "patch": "@@ -119,9 +119,7 @@ fn decodable_substructure(cx: &mut ExtCtxt<'_>,\n                                                     vec![idx, exprdecode.clone()]))\n                 });\n \n-                arms.push(cx.arm(v_span,\n-                                 vec![cx.pat_lit(v_span, cx.expr_usize(v_span, i))],\n-                                 decoded));\n+                arms.push(cx.arm(v_span, cx.pat_lit(v_span, cx.expr_usize(v_span, i)), decoded));\n             }\n \n             arms.push(cx.arm_unreachable(trait_span));"}, {"sha": "893d89f06a16830859ce57631837e9bf51996b61", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76625eb0cc1491520348220c180a6dd3def83bb9/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76625eb0cc1491520348220c180a6dd3def83bb9/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=76625eb0cc1491520348220c180a6dd3def83bb9", "patch": "@@ -1071,7 +1071,7 @@ impl<'a> MethodDef<'a> {\n         for (arg_expr, pat) in self_args.iter().zip(patterns) {\n             body = cx.expr_match(trait_.span,\n                                  arg_expr.clone(),\n-                                 vec![cx.arm(trait_.span, vec![pat.clone()], body)])\n+                                 vec![cx.arm(trait_.span, pat.clone(), body)])\n         }\n \n         body\n@@ -1311,7 +1311,7 @@ impl<'a> MethodDef<'a> {\n                                                              nonself_args,\n                                                              &substructure);\n \n-                cx.arm(sp, vec![single_pat], arm_expr)\n+                cx.arm(sp, single_pat, arm_expr)\n             })\n             .collect();\n \n@@ -1337,7 +1337,7 @@ impl<'a> MethodDef<'a> {\n             _ => None,\n         };\n         if let Some(arm) = default {\n-            match_arms.push(cx.arm(sp, vec![cx.pat_wild(sp)], arm));\n+            match_arms.push(cx.arm(sp, cx.pat_wild(sp), arm));\n         }\n \n         // We will usually need the catch-all after matching the"}, {"sha": "9012bafad41553575ae9c1f9837e1425b60f9911", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76625eb0cc1491520348220c180a6dd3def83bb9/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76625eb0cc1491520348220c180a6dd3def83bb9/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=76625eb0cc1491520348220c180a6dd3def83bb9", "patch": "@@ -716,7 +716,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         // But the nested match expression is proved to perform not as well\n         // as series of let's; the first approach does.\n         let pat = self.ecx.pat_tuple(self.fmtsp, pats);\n-        let arm = self.ecx.arm(self.fmtsp, vec![pat], args_array);\n+        let arm = self.ecx.arm(self.fmtsp, pat, args_array);\n         let head = self.ecx.expr(self.fmtsp, ast::ExprKind::Tup(heads));\n         let result = self.ecx.expr_match(self.fmtsp, head, vec![arm]);\n "}]}