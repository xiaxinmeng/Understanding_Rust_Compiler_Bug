{"sha": "50568b8ee5665e637e3fe1a481723ea2ec8a6d03", "node_id": "C_kwDOAAsO6NoAKDUwNTY4YjhlZTU2NjVlNjM3ZTNmZTFhNDgxNzIzZWEyZWM4YTZkMDM", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-01-24T07:30:54Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-02-24T19:55:37Z"}, "message": "metadata: Tweak the way in which declarative macros are encoded\n\nTo make the `macro_rules` flag more readily available without decoding everything else", "tree": {"sha": "ae4ef91a6d55d8b113105d8f8d48f7174087da82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae4ef91a6d55d8b113105d8f8d48f7174087da82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50568b8ee5665e637e3fe1a481723ea2ec8a6d03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50568b8ee5665e637e3fe1a481723ea2ec8a6d03", "html_url": "https://github.com/rust-lang/rust/commit/50568b8ee5665e637e3fe1a481723ea2ec8a6d03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50568b8ee5665e637e3fe1a481723ea2ec8a6d03/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17b1afdbb234a1cdf5db92ec8639cbd2909ac629", "url": "https://api.github.com/repos/rust-lang/rust/commits/17b1afdbb234a1cdf5db92ec8639cbd2909ac629", "html_url": "https://github.com/rust-lang/rust/commit/17b1afdbb234a1cdf5db92ec8639cbd2909ac629"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "71bd449d0c1cdcd2b20d0bce064f967b223d71cc", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/50568b8ee5665e637e3fe1a481723ea2ec8a6d03/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50568b8ee5665e637e3fe1a481723ea2ec8a6d03/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=50568b8ee5665e637e3fe1a481723ea2ec8a6d03", "patch": "@@ -5,6 +5,7 @@ use crate::rmeta::table::{FixedSizeEncoding, Table};\n use crate::rmeta::*;\n \n use rustc_ast as ast;\n+use rustc_ast::ptr::P;\n use rustc_attr as attr;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashMap;\n@@ -1402,9 +1403,11 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         tcx.arena.alloc_from_iter(self.root.exported_symbols.decode((self, tcx)))\n     }\n \n-    fn get_macro(self, id: DefIndex, sess: &Session) -> MacroDef {\n+    fn get_macro(self, id: DefIndex, sess: &Session) -> ast::MacroDef {\n         match self.kind(id) {\n-            EntryKind::MacroDef(macro_def) => macro_def.decode((self, sess)),\n+            EntryKind::MacroDef(mac_args, macro_rules) => {\n+                ast::MacroDef { body: P(mac_args.decode((self, sess))), macro_rules }\n+            }\n             _ => bug!(),\n         }\n     }"}, {"sha": "fae76f80c4bdebc794f804f4d3cd934981681bcb", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50568b8ee5665e637e3fe1a481723ea2ec8a6d03/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50568b8ee5665e637e3fe1a481723ea2ec8a6d03/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=50568b8ee5665e637e3fe1a481723ea2ec8a6d03", "patch": "@@ -1407,7 +1407,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 EntryKind::Fn(self.lazy(data))\n             }\n             hir::ItemKind::Macro(ref macro_def, _) => {\n-                EntryKind::MacroDef(self.lazy(macro_def.clone()))\n+                EntryKind::MacroDef(self.lazy(&*macro_def.body), macro_def.macro_rules)\n             }\n             hir::ItemKind::Mod(ref m) => {\n                 return self.encode_info_for_mod(item.def_id, m);"}, {"sha": "a30cc034c4a969cd7dccb5a4c7b0195a51f3474c", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50568b8ee5665e637e3fe1a481723ea2ec8a6d03/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50568b8ee5665e637e3fe1a481723ea2ec8a6d03/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=50568b8ee5665e637e3fe1a481723ea2ec8a6d03", "patch": "@@ -2,7 +2,7 @@ use decoder::Metadata;\n use def_path_hash_map::DefPathHashMapRef;\n use table::{Table, TableBuilder};\n \n-use rustc_ast::{self as ast, MacroDef};\n+use rustc_ast as ast;\n use rustc_attr as attr;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n@@ -350,7 +350,7 @@ enum EntryKind {\n     Fn(Lazy<FnData>),\n     ForeignFn(Lazy<FnData>),\n     Mod(Lazy<[ModChild]>),\n-    MacroDef(Lazy<MacroDef>),\n+    MacroDef(Lazy<ast::MacArgs>, /*macro_rules*/ bool),\n     ProcMacro(MacroKind),\n     Closure,\n     Generator,"}]}