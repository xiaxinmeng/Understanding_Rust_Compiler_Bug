{"sha": "3c5882018f7f686a5a0b3a631cad33503987e5aa", "node_id": "C_kwDOAAsO6NoAKDNjNTg4MjAxOGY3ZjY4NmE1YTBiM2E2MzFjYWQzMzUwMzk4N2U1YWE", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-09-19T17:46:53Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-09-22T10:35:28Z"}, "message": "introduce mir::Unevaluated", "tree": {"sha": "120675558fb7bce2ff482fab8cc80bdaf8f33f2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/120675558fb7bce2ff482fab8cc80bdaf8f33f2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c5882018f7f686a5a0b3a631cad33503987e5aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c5882018f7f686a5a0b3a631cad33503987e5aa", "html_url": "https://github.com/rust-lang/rust/commit/3c5882018f7f686a5a0b3a631cad33503987e5aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c5882018f7f686a5a0b3a631cad33503987e5aa/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eeefe2ce6c158a8ea877ae68c250478940ae809", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eeefe2ce6c158a8ea877ae68c250478940ae809", "html_url": "https://github.com/rust-lang/rust/commit/6eeefe2ce6c158a8ea877ae68c250478940ae809"}], "stats": {"total": 13, "additions": 2, "deletions": 11}, "files": [{"sha": "aac64d854a6b531c9674099eb8bfc7e53b0a2ad0", "filename": "src/constant.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3c5882018f7f686a5a0b3a631cad33503987e5aa/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c5882018f7f686a5a0b3a631cad33503987e5aa/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=3c5882018f7f686a5a0b3a631cad33503987e5aa", "patch": "@@ -5,7 +5,6 @@ use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::{\n     read_target_uint, AllocId, ConstAllocation, ConstValue, ErrorHandled, GlobalAlloc, Scalar,\n };\n-use rustc_middle::ty::ConstKind;\n use rustc_span::DUMMY_SP;\n \n use cranelift_codegen::ir::GlobalValueData;\n@@ -42,15 +41,7 @@ pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n     let mut all_constants_ok = true;\n     for constant in &fx.mir.required_consts {\n         let unevaluated = match fx.monomorphize(constant.literal) {\n-            ConstantKind::Ty(ct) => match ct.kind() {\n-                ConstKind::Unevaluated(uv) => uv.expand(),\n-                ConstKind::Value(_) => continue,\n-                ConstKind::Param(_)\n-                | ConstKind::Infer(_)\n-                | ConstKind::Bound(_, _)\n-                | ConstKind::Placeholder(_)\n-                | ConstKind::Error(_) => unreachable!(\"{:?}\", ct),\n-            },\n+            ConstantKind::Ty(_) => unreachable!(),\n             ConstantKind::Unevaluated(uv, _) => uv,\n             ConstantKind::Val(..) => continue,\n         };\n@@ -118,7 +109,7 @@ pub(crate) fn codegen_constant<'tcx>(\n ) -> CValue<'tcx> {\n     let (const_val, ty) = match fx.monomorphize(constant.literal) {\n         ConstantKind::Ty(const_) => unreachable!(\"{:?}\", const_),\n-        ConstantKind::Unevaluated(ty::Unevaluated { def, substs, promoted }, ty)\n+        ConstantKind::Unevaluated(mir::Unevaluated { def, substs, promoted }, ty)\n             if fx.tcx.is_static(def.did) =>\n         {\n             assert!(substs.is_empty());"}]}