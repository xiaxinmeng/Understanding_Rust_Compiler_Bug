{"sha": "db7962532610cfbfb9be17e8d6c1b48acf5ed184", "node_id": "C_kwDOAAsO6NoAKGRiNzk2MjUzMjYxMGNmYmZiOWJlMTdlOGQ2YzFiNDhhY2Y1ZWQxODQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-27T15:44:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-27T15:44:53Z"}, "message": "Auto merge of #106183 - matthiaskrgr:rollup-ww6yzhi, r=matthiaskrgr\n\nRollup of 3 pull requests\n\nSuccessful merges:\n\n - #105817 (Remove unreasonable help message for auto trait)\n - #105994 (Add regression test for #99647)\n - #106066 (Always suggest as `MachineApplicable` in `recover_intersection_pat`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "aed378c750c8a930e823b93e31975135f02abfba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aed378c750c8a930e823b93e31975135f02abfba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db7962532610cfbfb9be17e8d6c1b48acf5ed184", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db7962532610cfbfb9be17e8d6c1b48acf5ed184", "html_url": "https://github.com/rust-lang/rust/commit/db7962532610cfbfb9be17e8d6c1b48acf5ed184", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db7962532610cfbfb9be17e8d6c1b48acf5ed184/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b38a6d373cb254697411147c0e49cd2e84864258", "url": "https://api.github.com/repos/rust-lang/rust/commits/b38a6d373cb254697411147c0e49cd2e84864258", "html_url": "https://github.com/rust-lang/rust/commit/b38a6d373cb254697411147c0e49cd2e84864258"}, {"sha": "b7657e9cecaf46128702c5a221c3a84fd6e7cae6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7657e9cecaf46128702c5a221c3a84fd6e7cae6", "html_url": "https://github.com/rust-lang/rust/commit/b7657e9cecaf46128702c5a221c3a84fd6e7cae6"}], "stats": {"total": 154, "additions": 105, "deletions": 49}, "files": [{"sha": "1afaae0e0209dfa9c176b69259ba9e92bda286cc", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db7962532610cfbfb9be17e8d6c1b48acf5ed184/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7962532610cfbfb9be17e8d6c1b48acf5ed184/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=db7962532610cfbfb9be17e8d6c1b48acf5ed184", "patch": "@@ -973,6 +973,9 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             });\n         } else {\n             debug_assert!(self.tcx.is_trait(trait_def_id));\n+            if self.tcx.trait_is_auto(trait_def_id) {\n+                return;\n+            }\n             for item in self.impl_or_trait_item(trait_def_id) {\n                 // Check whether `trait_def_id` defines a method with suitable name.\n                 if !self.has_applicable_self(&item) {"}, {"sha": "aa68929517842fca62c153aebf727486cb04b8a3", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db7962532610cfbfb9be17e8d6c1b48acf5ed184/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7962532610cfbfb9be17e8d6c1b48acf5ed184/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=db7962532610cfbfb9be17e8d6c1b48acf5ed184", "patch": "@@ -2306,6 +2306,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         _ => false,\n                     }\n                 }) && (type_is_local || info.def_id.is_local())\n+                    && !self.tcx.trait_is_auto(info.def_id)\n                     && self\n                         .associated_value(info.def_id, item_name)\n                         .filter(|item| {"}, {"sha": "0b057f2f577fe73e85489bf75063576cdf3c5d72", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/db7962532610cfbfb9be17e8d6c1b48acf5ed184/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7962532610cfbfb9be17e8d6c1b48acf5ed184/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=db7962532610cfbfb9be17e8d6c1b48acf5ed184", "patch": "@@ -491,17 +491,6 @@ impl<'a> Parser<'a> {\n \n         if let PatKind::Ident(_, _, sub @ None) = &mut rhs.kind {\n             // The user inverted the order, so help them fix that.\n-            let mut applicability = Applicability::MachineApplicable;\n-            // FIXME(bindings_after_at): Remove this code when stabilizing the feature.\n-            lhs.walk(&mut |p| match p.kind {\n-                // `check_match` is unhappy if the subpattern has a binding anywhere.\n-                PatKind::Ident(..) => {\n-                    applicability = Applicability::MaybeIncorrect;\n-                    false // Short-circuit.\n-                }\n-                _ => true,\n-            });\n-\n             let lhs_span = lhs.span;\n             // Move the LHS into the RHS as a subpattern.\n             // The RHS is now the full pattern.\n@@ -510,7 +499,12 @@ impl<'a> Parser<'a> {\n             self.struct_span_err(sp, \"pattern on wrong side of `@`\")\n                 .span_label(lhs_span, \"pattern on the left, should be on the right\")\n                 .span_label(rhs.span, \"binding on the right, should be on the left\")\n-                .span_suggestion(sp, \"switch the order\", pprust::pat_to_string(&rhs), applicability)\n+                .span_suggestion(\n+                    sp,\n+                    \"switch the order\",\n+                    pprust::pat_to_string(&rhs),\n+                    Applicability::MachineApplicable,\n+                )\n                 .emit();\n         } else {\n             // The special case above doesn't apply so we may have e.g. `A(x) @ B(y)`."}, {"sha": "1021774fc5f3141f52afe6fb2e4438999ff587d2", "filename": "src/test/ui/attributes/z-crate-attr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/db7962532610cfbfb9be17e8d6c1b48acf5ed184/src%2Ftest%2Fui%2Fattributes%2Fz-crate-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7962532610cfbfb9be17e8d6c1b48acf5ed184/src%2Ftest%2Fui%2Fattributes%2Fz-crate-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fz-crate-attr.rs?ref=db7962532610cfbfb9be17e8d6c1b48acf5ed184", "previous_filename": "src/test/ui/z-crate-attr.rs"}, {"sha": "f797beda8e6c547377d4bf5bfc67b33d15e2f284", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-99647.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/db7962532610cfbfb9be17e8d6c1b48acf5ed184/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-99647.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7962532610cfbfb9be17e8d6c1b48acf5ed184/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-99647.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-99647.rs?ref=db7962532610cfbfb9be17e8d6c1b48acf5ed184", "patch": "@@ -0,0 +1,15 @@\n+// edition:2018\n+// run-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(generic_const_exprs)]\n+\n+#[allow(unused)]\n+async fn foo<'a>() {\n+    let _data = &mut [0u8; { 1 + 4 }];\n+    bar().await\n+}\n+\n+async fn bar() {}\n+\n+fn main() {}"}, {"sha": "d7005065813a854823d8b3935b1355f2a571f0f3", "filename": "src/test/ui/methods/issues/issue-105732.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db7962532610cfbfb9be17e8d6c1b48acf5ed184/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-105732.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7962532610cfbfb9be17e8d6c1b48acf5ed184/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-105732.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-105732.rs?ref=db7962532610cfbfb9be17e8d6c1b48acf5ed184", "patch": "@@ -6,7 +6,8 @@ auto trait Foo {\n \n trait Bar {\n     fn f(&self) {\n-        self.g(); //~ ERROR the method `g` exists for reference `&Self`, but its trait bounds were not satisfied\n+        // issue #105788\n+        self.g(); //~ ERROR no method named `g` found for reference `&Self` in the current scope\n     }\n }\n "}, {"sha": "7696642548dfe8c5bb28c5b7dbb48b1946c7da51", "filename": "src/test/ui/methods/issues/issue-105732.stderr", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/db7962532610cfbfb9be17e8d6c1b48acf5ed184/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-105732.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db7962532610cfbfb9be17e8d6c1b48acf5ed184/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-105732.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-105732.stderr?ref=db7962532610cfbfb9be17e8d6c1b48acf5ed184", "patch": "@@ -6,21 +6,11 @@ LL | auto trait Foo {\n LL |     fn g(&self);\n    |     ---^-------- help: remove these associated items\n \n-error[E0599]: the method `g` exists for reference `&Self`, but its trait bounds were not satisfied\n-  --> $DIR/issue-105732.rs:9:14\n+error[E0599]: no method named `g` found for reference `&Self` in the current scope\n+  --> $DIR/issue-105732.rs:10:14\n    |\n LL |         self.g();\n-   |              ^\n-   |\n-   = note: the following trait bounds were not satisfied:\n-           `Self: Foo`\n-           which is required by `&Self: Foo`\n-           `&Self: Foo`\n-   = help: items from traits can only be used if the type parameter is bounded by the trait\n-help: the following trait defines an item `g`, perhaps you need to add a supertrait for it:\n-   |\n-LL | trait Bar: Foo {\n-   |          +++++\n+   |              ^ help: there is a method with a similar name: `f`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "44773095b87184bbee39c3acd0f2b293f217f672", "filename": "src/test/ui/parser/intersection-patterns-1.fixed", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/db7962532610cfbfb9be17e8d6c1b48acf5ed184/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-1.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/db7962532610cfbfb9be17e8d6c1b48acf5ed184/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-1.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-1.fixed?ref=db7962532610cfbfb9be17e8d6c1b48acf5ed184", "patch": "@@ -0,0 +1,35 @@\n+// This tests the parser recovery in `recover_intersection_pat`\n+// and serves as a regression test for the diagnostics issue #65400.\n+//\n+// The general idea is that for `$pat_lhs @ $pat_rhs` where\n+// `$pat_lhs` is not generated by `ref? mut? $ident` we want\n+// to suggest either switching the order or note that intersection\n+// patterns are not allowed.\n+\n+// run-rustfix\n+\n+#![allow(unused_variables)]\n+\n+fn main() {\n+    let s: Option<u8> = None;\n+\n+    match s {\n+        y @ Some(x) => {}\n+        //~^ ERROR pattern on wrong side of `@`\n+        //~| pattern on the left, should be on the right\n+        //~| binding on the right, should be on the left\n+        //~| HELP switch the order\n+        //~| SUGGESTION y @ Some(x)\n+        _ => {}\n+    }\n+\n+    match 2 {\n+        e @ 1..=5 => {}\n+        //~^ ERROR pattern on wrong side of `@`\n+        //~| pattern on the left, should be on the right\n+        //~| binding on the right, should be on the left\n+        //~| HELP switch the order\n+        //~| SUGGESTION e @ 1..=5\n+        _ => {}\n+    }\n+}"}, {"sha": "1036b9daf648a09730ad75aef4be40cb48847f52", "filename": "src/test/ui/parser/intersection-patterns-1.rs", "status": "renamed", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/db7962532610cfbfb9be17e8d6c1b48acf5ed184/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7962532610cfbfb9be17e8d6c1b48acf5ed184/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-1.rs?ref=db7962532610cfbfb9be17e8d6c1b48acf5ed184", "patch": "@@ -6,6 +6,10 @@\n // to suggest either switching the order or note that intersection\n // patterns are not allowed.\n \n+// run-rustfix\n+\n+#![allow(unused_variables)]\n+\n fn main() {\n     let s: Option<u8> = None;\n \n@@ -19,15 +23,6 @@ fn main() {\n         _ => {}\n     }\n \n-    match s {\n-        Some(x) @ Some(y) => {}\n-        //~^ ERROR left-hand side of `@` must be a binding\n-        //~| interpreted as a pattern, not a binding\n-        //~| also a pattern\n-        //~| NOTE bindings are `x`, `mut x`, `ref x`, and `ref mut x`\n-        _ => {}\n-    }\n-\n     match 2 {\n         1 ..= 5 @ e => {}\n         //~^ ERROR pattern on wrong side of `@`", "previous_filename": "src/test/ui/parser/intersection-patterns.rs"}, {"sha": "dc968656c91ff226f3a301c108bf4699d9f8e9f2", "filename": "src/test/ui/parser/intersection-patterns-1.stderr", "status": "renamed", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/db7962532610cfbfb9be17e8d6c1b48acf5ed184/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db7962532610cfbfb9be17e8d6c1b48acf5ed184/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-1.stderr?ref=db7962532610cfbfb9be17e8d6c1b48acf5ed184", "patch": "@@ -1,5 +1,5 @@\n error: pattern on wrong side of `@`\n-  --> $DIR/intersection-patterns.rs:13:9\n+  --> $DIR/intersection-patterns-1.rs:17:9\n    |\n LL |         Some(x) @ y => {}\n    |         -------^^^-\n@@ -8,19 +8,8 @@ LL |         Some(x) @ y => {}\n    |         pattern on the left, should be on the right\n    |         help: switch the order: `y @ Some(x)`\n \n-error: left-hand side of `@` must be a binding\n-  --> $DIR/intersection-patterns.rs:23:9\n-   |\n-LL |         Some(x) @ Some(y) => {}\n-   |         -------^^^-------\n-   |         |         |\n-   |         |         also a pattern\n-   |         interpreted as a pattern, not a binding\n-   |\n-   = note: bindings are `x`, `mut x`, `ref x`, and `ref mut x`\n-\n error: pattern on wrong side of `@`\n-  --> $DIR/intersection-patterns.rs:32:9\n+  --> $DIR/intersection-patterns-1.rs:27:9\n    |\n LL |         1 ..= 5 @ e => {}\n    |         -------^^^-\n@@ -29,5 +18,5 @@ LL |         1 ..= 5 @ e => {}\n    |         pattern on the left, should be on the right\n    |         help: switch the order: `e @ 1..=5`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n ", "previous_filename": "src/test/ui/parser/intersection-patterns.stderr"}, {"sha": "408415e87ef983762d9c6ee62e5c1dc8e5535d0f", "filename": "src/test/ui/parser/intersection-patterns-2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/db7962532610cfbfb9be17e8d6c1b48acf5ed184/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7962532610cfbfb9be17e8d6c1b48acf5ed184/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-2.rs?ref=db7962532610cfbfb9be17e8d6c1b48acf5ed184", "patch": "@@ -0,0 +1,20 @@\n+// This tests the parser recovery in `recover_intersection_pat`\n+// and serves as a regression test for the diagnostics issue #65400.\n+//\n+// The general idea is that for `$pat_lhs @ $pat_rhs` where\n+// `$pat_lhs` is not generated by `ref? mut? $ident` we want\n+// to suggest either switching the order or note that intersection\n+// patterns are not allowed.\n+\n+fn main() {\n+    let s: Option<u8> = None;\n+\n+    match s {\n+        Some(x) @ Some(y) => {}\n+        //~^ ERROR left-hand side of `@` must be a binding\n+        //~| interpreted as a pattern, not a binding\n+        //~| also a pattern\n+        //~| NOTE bindings are `x`, `mut x`, `ref x`, and `ref mut x`\n+        _ => {}\n+    }\n+}"}, {"sha": "f7e78814ca57c5f03183b62df02f54f1256eecbc", "filename": "src/test/ui/parser/intersection-patterns-2.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/db7962532610cfbfb9be17e8d6c1b48acf5ed184/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db7962532610cfbfb9be17e8d6c1b48acf5ed184/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-2.stderr?ref=db7962532610cfbfb9be17e8d6c1b48acf5ed184", "patch": "@@ -0,0 +1,13 @@\n+error: left-hand side of `@` must be a binding\n+  --> $DIR/intersection-patterns-2.rs:13:9\n+   |\n+LL |         Some(x) @ Some(y) => {}\n+   |         -------^^^-------\n+   |         |         |\n+   |         |         also a pattern\n+   |         interpreted as a pattern, not a binding\n+   |\n+   = note: bindings are `x`, `mut x`, `ref x`, and `ref mut x`\n+\n+error: aborting due to previous error\n+"}]}