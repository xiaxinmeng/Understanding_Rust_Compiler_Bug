{"sha": "730f7366bba5abdf5ae0c2f1222795e40d48f90c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMGY3MzY2YmJhNWFiZGY1YWUwYzJmMTIyMjc5NWU0MGQ0OGY5MGM=", "commit": {"author": {"name": "Benjamin Saunders", "email": "ben.e.saunders@gmail.com", "date": "2020-05-23T03:49:20Z"}, "committer": {"name": "Benjamin Saunders", "email": "ben.e.saunders@gmail.com", "date": "2020-05-24T07:03:35Z"}, "message": "Fix asinh of negative values\n\nWhen `x` has large magnitude, `x + ((x * x) + 1.0).sqrt()` approaches\n`x + x.abs()`. For negative values of `x`, this leads to catastrophic\ncancellation, resulting in large errors or even 0 being passed to\n`ln`, producing incorrect results including `-inf`.\n\nBecuase asinh is an odd function, i.e. -asinh(x) = asinh(-x) for all\nx, we can avoid the catastrophic cancellation and obtain correct\nresults by taking the absolute value of `self` for the first\nterm. `self * self` is always positive, so in effect this gives us\n`x.abs().asinh().copysign(x)` which as discussed above is\nalgebraically equivalent, but is much more accurate.", "tree": {"sha": "84536380e5fc3796d268a5f3e7ed9c0e770bd9de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84536380e5fc3796d268a5f3e7ed9c0e770bd9de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/730f7366bba5abdf5ae0c2f1222795e40d48f90c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/730f7366bba5abdf5ae0c2f1222795e40d48f90c", "html_url": "https://github.com/rust-lang/rust/commit/730f7366bba5abdf5ae0c2f1222795e40d48f90c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/730f7366bba5abdf5ae0c2f1222795e40d48f90c/comments", "author": {"login": "Ralith", "id": 104558, "node_id": "MDQ6VXNlcjEwNDU1OA==", "avatar_url": "https://avatars.githubusercontent.com/u/104558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ralith", "html_url": "https://github.com/Ralith", "followers_url": "https://api.github.com/users/Ralith/followers", "following_url": "https://api.github.com/users/Ralith/following{/other_user}", "gists_url": "https://api.github.com/users/Ralith/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ralith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ralith/subscriptions", "organizations_url": "https://api.github.com/users/Ralith/orgs", "repos_url": "https://api.github.com/users/Ralith/repos", "events_url": "https://api.github.com/users/Ralith/events{/privacy}", "received_events_url": "https://api.github.com/users/Ralith/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ralith", "id": 104558, "node_id": "MDQ6VXNlcjEwNDU1OA==", "avatar_url": "https://avatars.githubusercontent.com/u/104558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ralith", "html_url": "https://github.com/Ralith", "followers_url": "https://api.github.com/users/Ralith/followers", "following_url": "https://api.github.com/users/Ralith/following{/other_user}", "gists_url": "https://api.github.com/users/Ralith/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ralith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ralith/subscriptions", "organizations_url": "https://api.github.com/users/Ralith/orgs", "repos_url": "https://api.github.com/users/Ralith/repos", "events_url": "https://api.github.com/users/Ralith/events{/privacy}", "received_events_url": "https://api.github.com/users/Ralith/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d", "html_url": "https://github.com/rust-lang/rust/commit/215f2d3294b08dbdcf8f7d40de21ef1e7eae0a2d"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "ab468f42b3bd0c4d83856cefa9ca3d533a22a848", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/730f7366bba5abdf5ae0c2f1222795e40d48f90c/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/730f7366bba5abdf5ae0c2f1222795e40d48f90c/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=730f7366bba5abdf5ae0c2f1222795e40d48f90c", "patch": "@@ -835,7 +835,7 @@ impl f32 {\n         if self == Self::NEG_INFINITY {\n             Self::NEG_INFINITY\n         } else {\n-            (self + ((self * self) + 1.0).sqrt()).ln().copysign(self)\n+            (self.abs() + ((self * self) + 1.0).sqrt()).ln().copysign(self)\n         }\n     }\n \n@@ -1414,6 +1414,8 @@ mod tests {\n         assert!((-0.0f32).asinh().is_sign_negative()); // issue 63271\n         assert_approx_eq!(2.0f32.asinh(), 1.443635475178810342493276740273105f32);\n         assert_approx_eq!((-2.0f32).asinh(), -1.443635475178810342493276740273105f32);\n+        // regression test for the catastrophic cancellation fixed in 72486\n+        assert_approx_eq!((-3000.0f32).asinh(), -8.699514775987968673236893537700647f32);\n     }\n \n     #[test]"}, {"sha": "c033198f021c22bae6d44975ed55babb7340014f", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/730f7366bba5abdf5ae0c2f1222795e40d48f90c/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/730f7366bba5abdf5ae0c2f1222795e40d48f90c/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=730f7366bba5abdf5ae0c2f1222795e40d48f90c", "patch": "@@ -837,7 +837,7 @@ impl f64 {\n         if self == Self::NEG_INFINITY {\n             Self::NEG_INFINITY\n         } else {\n-            (self + ((self * self) + 1.0).sqrt()).ln().copysign(self)\n+            (self.abs() + ((self * self) + 1.0).sqrt()).ln().copysign(self)\n         }\n     }\n \n@@ -1443,6 +1443,8 @@ mod tests {\n         // issue 63271\n         assert_approx_eq!(2.0f64.asinh(), 1.443635475178810342493276740273105f64);\n         assert_approx_eq!((-2.0f64).asinh(), -1.443635475178810342493276740273105f64);\n+        // regression test for the catastrophic cancellation fixed in 72486\n+        assert_approx_eq!((-67452098.07139316f64).asinh(), -18.72007542627454439398548429400083);\n     }\n \n     #[test]"}]}