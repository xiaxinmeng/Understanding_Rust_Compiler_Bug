{"sha": "1afaf0b308618c7c33fb13684105e98671b82c4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhZmFmMGIzMDg2MThjN2MzM2ZiMTM2ODQxMDVlOTg2NzFiODJjNGI=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-16T22:30:59Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-16T22:30:59Z"}, "message": "set attributes on `invoke` instructions too\n\nalso removes the unused `FastInvoke` wrapper, as it's never actually\ngoing to be used (we can't *partially* switch to `fastcc`, and this is\nonly used for Rust functions)", "tree": {"sha": "ee4bd727b3fdb3911c812f5e58ee373df1e1d9f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee4bd727b3fdb3911c812f5e58ee373df1e1d9f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1afaf0b308618c7c33fb13684105e98671b82c4b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1afaf0b308618c7c33fb13684105e98671b82c4b", "html_url": "https://github.com/rust-lang/rust/commit/1afaf0b308618c7c33fb13684105e98671b82c4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1afaf0b308618c7c33fb13684105e98671b82c4b/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22b6f7481f592babf2b4e230120597c47750dae1", "url": "https://api.github.com/repos/rust-lang/rust/commits/22b6f7481f592babf2b4e230120597c47750dae1", "html_url": "https://github.com/rust-lang/rust/commit/22b6f7481f592babf2b4e230120597c47750dae1"}], "stats": {"total": 47, "additions": 18, "deletions": 29}, "files": [{"sha": "e8c2388a383ae000fc5f8e22899d2e2f0b636418", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1afaf0b308618c7c33fb13684105e98671b82c4b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1afaf0b308618c7c33fb13684105e98671b82c4b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=1afaf0b308618c7c33fb13684105e98671b82c4b", "patch": "@@ -926,7 +926,8 @@ pub fn invoke(bcx: @mut Block, llfn: ValueRef, llargs: ~[ValueRef],\n                               llfn,\n                               llargs,\n                               normal_bcx.llbb,\n-                              get_landing_pad(bcx));\n+                              get_landing_pad(bcx),\n+                              attributes);\n         return (llresult, normal_bcx);\n     } else {\n         unsafe {"}, {"sha": "4b03a2cac4b3ac09cc2a5c20ef246decbee915e9", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1afaf0b308618c7c33fb13684105e98671b82c4b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1afaf0b308618c7c33fb13684105e98671b82c4b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=1afaf0b308618c7c33fb13684105e98671b82c4b", "patch": "@@ -109,7 +109,8 @@ pub fn Invoke(cx: @mut Block,\n               Fn: ValueRef,\n               Args: &[ValueRef],\n               Then: BasicBlockRef,\n-              Catch: BasicBlockRef)\n+              Catch: BasicBlockRef,\n+              attributes: &[(uint, lib::llvm::Attribute)])\n            -> ValueRef {\n     if cx.unreachable {\n         return C_null(Type::i8());\n@@ -119,15 +120,7 @@ pub fn Invoke(cx: @mut Block,\n     debug!(\"Invoke(%s with arguments (%s))\",\n            cx.val_to_str(Fn),\n            Args.map(|a| cx.val_to_str(*a)).connect(\", \"));\n-    B(cx).invoke(Fn, Args, Then, Catch)\n-}\n-\n-pub fn FastInvoke(cx: @mut Block, Fn: ValueRef, Args: &[ValueRef],\n-                  Then: BasicBlockRef, Catch: BasicBlockRef) {\n-    if cx.unreachable { return; }\n-    check_not_terminated(cx);\n-    terminate(cx, \"FastInvoke\");\n-    B(cx).fast_invoke(Fn, Args, Then, Catch);\n+    B(cx).invoke(Fn, Args, Then, Catch, attributes)\n }\n \n pub fn Unreachable(cx: @mut Block) {"}, {"sha": "d7a4dbb3510feb5e707f0369cca934fd0df0f061", "filename": "src/librustc/middle/trans/builder.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1afaf0b308618c7c33fb13684105e98671b82c4b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1afaf0b308618c7c33fb13684105e98671b82c4b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs?ref=1afaf0b308618c7c33fb13684105e98671b82c4b", "patch": "@@ -154,30 +154,25 @@ impl Builder {\n                   llfn: ValueRef,\n                   args: &[ValueRef],\n                   then: BasicBlockRef,\n-                  catch: BasicBlockRef)\n+                  catch: BasicBlockRef,\n+                  attributes: &[(uint, lib::llvm::Attribute)])\n                   -> ValueRef {\n         self.count_insn(\"invoke\");\n         unsafe {\n-            llvm::LLVMBuildInvoke(self.llbuilder,\n-                                  llfn,\n-                                  vec::raw::to_ptr(args),\n-                                  args.len() as c_uint,\n-                                  then,\n-                                  catch,\n-                                  noname())\n+            let v = llvm::LLVMBuildInvoke(self.llbuilder,\n+                                          llfn,\n+                                          vec::raw::to_ptr(args),\n+                                          args.len() as c_uint,\n+                                          then,\n+                                          catch,\n+                                          noname());\n+            for &(idx, attr) in attributes.iter() {\n+                llvm::LLVMAddInstrAttribute(v, idx as c_uint, attr as c_uint);\n+            }\n+            v\n         }\n     }\n \n-    pub fn fast_invoke(&self,\n-                       llfn: ValueRef,\n-                       args: &[ValueRef],\n-                       then: BasicBlockRef,\n-                       catch: BasicBlockRef) {\n-        self.count_insn(\"fastinvoke\");\n-        let v = self.invoke(llfn, args, then, catch);\n-        lib::llvm::SetInstructionCallConv(v, lib::llvm::FastCallConv);\n-    }\n-\n     pub fn unreachable(&self) {\n         self.count_insn(\"unreachable\");\n         unsafe {"}]}