{"sha": "f875b91fdbf8eb8e5eeed0e155152ebd6232fad1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NzViOTFmZGJmOGViOGU1ZWVlZDBlMTU1MTUyZWJkNjIzMmZhZDE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-03T15:36:08Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-03T15:40:23Z"}, "message": "feat: join lines joins two ifs into `else if`", "tree": {"sha": "b71030dd49f08977379831df492a35309386e365", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b71030dd49f08977379831df492a35309386e365"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f875b91fdbf8eb8e5eeed0e155152ebd6232fad1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f875b91fdbf8eb8e5eeed0e155152ebd6232fad1", "html_url": "https://github.com/rust-lang/rust/commit/f875b91fdbf8eb8e5eeed0e155152ebd6232fad1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f875b91fdbf8eb8e5eeed0e155152ebd6232fad1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "668d0612452913624ef8aa4f17d7fef9ac08a75f", "url": "https://api.github.com/repos/rust-lang/rust/commits/668d0612452913624ef8aa4f17d7fef9ac08a75f", "html_url": "https://github.com/rust-lang/rust/commit/668d0612452913624ef8aa4f17d7fef9ac08a75f"}], "stats": {"total": 79, "additions": 78, "deletions": 1}, "files": [{"sha": "163f31c8ad764288468953e968405105c1c70a30", "filename": "crates/ide/src/join_lines.rs", "status": "modified", "additions": 78, "deletions": 1, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/f875b91fdbf8eb8e5eeed0e155152ebd6232fad1/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f875b91fdbf8eb8e5eeed0e155152ebd6232fad1/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fjoin_lines.rs?ref=f875b91fdbf8eb8e5eeed0e155152ebd6232fad1", "patch": "@@ -5,7 +5,7 @@ use itertools::Itertools;\n use syntax::{\n     algo::non_trivia_sibling,\n     ast::{self, AstNode, AstToken, IsString},\n-    Direction, NodeOrToken, SourceFile,\n+    Direction, NodeOrToken, SourceFile, SyntaxElement,\n     SyntaxKind::{self, USE_TREE, WHITESPACE},\n     SyntaxNode, SyntaxToken, TextRange, TextSize, T,\n };\n@@ -107,6 +107,7 @@ fn remove_newline(edit: &mut TextEditBuilder, token: &SyntaxToken, offset: TextS\n         edit.delete(TextRange::new(prev.text_range().start(), token.text_range().end()));\n         return;\n     }\n+\n     if prev.kind() == T![,] && next.kind() == T!['}'] {\n         // Removes: comma, newline (incl. surrounding whitespace)\n         let space = if let Some(left) = prev.prev_sibling_or_token() {\n@@ -133,6 +134,17 @@ fn remove_newline(edit: &mut TextEditBuilder, token: &SyntaxToken, offset: TextS\n         return;\n     }\n \n+    if let (Some(prev), Some(_next)) = (as_if_expr(&prev), as_if_expr(&next)) {\n+        match prev.else_token() {\n+            Some(_) => cov_mark::hit!(join_two_ifs_with_existing_else),\n+            None => {\n+                cov_mark::hit!(join_two_ifs);\n+                edit.replace(token.text_range(), \" else \".to_string());\n+                return;\n+            }\n+        }\n+    }\n+\n     // Special case that turns something like:\n     //\n     // ```\n@@ -200,6 +212,14 @@ fn is_trailing_comma(left: SyntaxKind, right: SyntaxKind) -> bool {\n     matches!((left, right), (T![,], T![')'] | T![']']))\n }\n \n+fn as_if_expr(element: &SyntaxElement) -> Option<ast::IfExpr> {\n+    let mut node = element.as_node()?.clone();\n+    if let Some(stmt) = ast::ExprStmt::cast(node.clone()) {\n+        node = stmt.expr()?.syntax().clone();\n+    }\n+    ast::IfExpr::cast(node)\n+}\n+\n fn compute_ws(left: SyntaxKind, right: SyntaxKind) -> &'static str {\n     match left {\n         T!['('] | T!['['] => return \"\",\n@@ -873,6 +893,7 @@ $0hello world\n \"#,\n         );\n     }\n+\n     #[test]\n     fn join_last_line_empty() {\n         check_join_lines(\n@@ -881,6 +902,62 @@ fn main() {$0}\n \"#,\n             r#\"\n fn main() {$0}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn join_two_ifs() {\n+        cov_mark::check!(join_two_ifs);\n+        check_join_lines(\n+            r#\"\n+fn main() {\n+    if foo {\n+\n+    }$0\n+    if bar {\n+\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    if foo {\n+\n+    }$0 else if bar {\n+\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn join_two_ifs_with_existing_else() {\n+        cov_mark::check!(join_two_ifs_with_existing_else);\n+        check_join_lines(\n+            r#\"\n+fn main() {\n+    if foo {\n+\n+    } else {\n+\n+    }$0\n+    if bar {\n+\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    if foo {\n+\n+    } else {\n+\n+    }$0 if bar {\n+\n+    }\n+}\n \"#,\n         );\n     }"}]}