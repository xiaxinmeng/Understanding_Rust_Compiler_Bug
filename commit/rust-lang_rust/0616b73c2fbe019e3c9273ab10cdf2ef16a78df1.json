{"sha": "0616b73c2fbe019e3c9273ab10cdf2ef16a78df1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MTZiNzNjMmZiZTAxOWUzYzkyNzNhYjEwY2RmMmVmMTZhNzhkZjE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-26T08:05:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-26T08:05:47Z"}, "message": "Rollup merge of #59362 - pnkfelix:demo-from-iterator-short-circuiting, r=Centril\n\nDemo `FromIterator` short-circuiting\n\nwhile looking at a FIXME in `FromIterator for Option` and `FromIterator for Result`, I realized that the current documentation does not have example code showing exactly what is meant by \"no further elements are taken.\"\n\nThe code snippets provided here are meant to correct that.", "tree": {"sha": "bf898498d8ae94f6e6e21a9b517ec7790d174254", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf898498d8ae94f6e6e21a9b517ec7790d174254"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0616b73c2fbe019e3c9273ab10cdf2ef16a78df1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcmd1bCRBK7hj4Ov3rIwAAdHIIAGIbMDquUS96LNL0jnUf53KB\nJjoomjoj+LDEuP/cs79yOzjcbT0tlMwjWiWQdiko45RN1xkoGKBNTIcXc1/m5dn5\nEyj6X3/tGhEVexijfxxyeU0ee6tLlX+kQv44IOjg33Jq3gCHZixdpmFIOBz6b3Uj\nA4+8lX+ueA6ZU1JBwAQqhf1e2g3si5VuCzfhhE1dhp8LaN1byIrQH1gHWHhjPAv/\n1PwtHf0dxGoQVPfDDGT5XT7SitmksU0MPouZE99oBhTAYuqClBjWhyRUAHmdx2fw\n2uMy1kf4oB9bw7QgosSTMUcE4VDOFsk6YtY6muuJIsjciONh46ZmMzIdyv9b0oo=\n=kWG1\n-----END PGP SIGNATURE-----\n", "payload": "tree bf898498d8ae94f6e6e21a9b517ec7790d174254\nparent e132e43e85fed008be31d813f13c041fc8b0551b\nparent 0e83e96852e9aacde2bf633bb17b293910073812\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1553587547 +0100\ncommitter GitHub <noreply@github.com> 1553587547 +0100\n\nRollup merge of #59362 - pnkfelix:demo-from-iterator-short-circuiting, r=Centril\n\nDemo `FromIterator` short-circuiting\n\nwhile looking at a FIXME in `FromIterator for Option` and `FromIterator for Result`, I realized that the current documentation does not have example code showing exactly what is meant by \"no further elements are taken.\"\n\nThe code snippets provided here are meant to correct that.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0616b73c2fbe019e3c9273ab10cdf2ef16a78df1", "html_url": "https://github.com/rust-lang/rust/commit/0616b73c2fbe019e3c9273ab10cdf2ef16a78df1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0616b73c2fbe019e3c9273ab10cdf2ef16a78df1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e132e43e85fed008be31d813f13c041fc8b0551b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e132e43e85fed008be31d813f13c041fc8b0551b", "html_url": "https://github.com/rust-lang/rust/commit/e132e43e85fed008be31d813f13c041fc8b0551b"}, {"sha": "0e83e96852e9aacde2bf633bb17b293910073812", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e83e96852e9aacde2bf633bb17b293910073812", "html_url": "https://github.com/rust-lang/rust/commit/0e83e96852e9aacde2bf633bb17b293910073812"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "3da92c0a05ac4ece408b25b610df2a07fbe18ff4", "filename": "src/libcore/option.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0616b73c2fbe019e3c9273ab10cdf2ef16a78df1/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0616b73c2fbe019e3c9273ab10cdf2ef16a78df1/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=0616b73c2fbe019e3c9273ab10cdf2ef16a78df1", "patch": "@@ -1315,6 +1315,26 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n     /// Since the last element is zero, it would underflow. Thus, the resulting\n     /// value is `None`.\n     ///\n+    /// Here is a variation on the previous example, showing that no\n+    /// further elements are taken from `iter` after the first `None`.\n+    ///\n+    /// ```\n+    /// let items = vec![3_u16, 2, 1, 10];\n+    ///\n+    /// let mut shared = 0;\n+    ///\n+    /// let res: Option<Vec<u16>> = items\n+    ///     .iter()\n+    ///     .map(|x| { shared += x; x.checked_sub(2) })\n+    ///     .collect();\n+    ///\n+    /// assert_eq!(res, None);\n+    /// assert_eq!(shared, 6);\n+    /// ```\n+    ///\n+    /// Since the third element caused an underflow, no further elements were taken,\n+    /// so the final value of `shared` is 6 (= `3 + 2 + 1`), not 16.\n+    ///\n     /// [`Iterator`]: ../iter/trait.Iterator.html\n     #[inline]\n     fn from_iter<I: IntoIterator<Item=Option<A>>>(iter: I) -> Option<V> {"}, {"sha": "9b7b83689861bca2bdea241c7ceb392c7a5c4ef8", "filename": "src/libcore/result.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0616b73c2fbe019e3c9273ab10cdf2ef16a78df1/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0616b73c2fbe019e3c9273ab10cdf2ef16a78df1/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=0616b73c2fbe019e3c9273ab10cdf2ef16a78df1", "patch": "@@ -1202,6 +1202,34 @@ impl<A, E, V: FromIterator<A>> FromIterator<Result<A, E>> for Result<V, E> {\n     /// ).collect();\n     /// assert_eq!(res, Ok(vec![2, 3]));\n     /// ```\n+    ///\n+    /// Here is another example that tries to subtract one from another list\n+    /// of integers, this time checking for underflow:\n+    ///\n+    /// ```\n+    /// let v = vec![1, 2, 0];\n+    /// let res: Result<Vec<u32>, &'static str> = v.iter().map(|x: &u32|\n+    ///     x.checked_sub(1).ok_or(\"Underflow!\")\n+    /// ).collect();\n+    /// assert_eq!(res, Err(\"Underflow!\"));\n+    /// ```\n+    ///\n+    /// Here is a variation on the previous example, showing that no\n+    /// further elements are taken from `iter` after the first `Err`.\n+    ///\n+    /// ```\n+    /// let v = vec![3, 2, 1, 10];\n+    /// let mut shared = 0;\n+    /// let res: Result<Vec<u32>, &'static str> = v.iter().map(|x: &u32| {\n+    ///     shared += x;\n+    ///     x.checked_sub(2).ok_or(\"Underflow!\")\n+    /// }).collect();\n+    /// assert_eq!(res, Err(\"Underflow!\"));\n+    /// assert_eq!(shared, 6);\n+    /// ```\n+    ///\n+    /// Since the third element caused an underflow, no further elements were taken,\n+    /// so the final value of `shared` is 6 (= `3 + 2 + 1`), not 16.\n     #[inline]\n     fn from_iter<I: IntoIterator<Item=Result<A, E>>>(iter: I) -> Result<V, E> {\n         // FIXME(#11084): This could be replaced with Iterator::scan when this"}]}