{"sha": "3eb35900c7f0b1c95455fb2088977b9ac468c96c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlYjM1OTAwYzdmMGIxYzk1NDU1ZmIyMDg4OTc3YjlhYzQ2OGM5NmM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-05T09:07:33Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-05T09:07:33Z"}, "message": "Remove ty::bind_params_in_type\n\nIt does nothing that substitute_type_params can't do better.", "tree": {"sha": "2f545a4d15b0e92ea102066f2106d9f62156675e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f545a4d15b0e92ea102066f2106d9f62156675e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3eb35900c7f0b1c95455fb2088977b9ac468c96c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3eb35900c7f0b1c95455fb2088977b9ac468c96c", "html_url": "https://github.com/rust-lang/rust/commit/3eb35900c7f0b1c95455fb2088977b9ac468c96c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3eb35900c7f0b1c95455fb2088977b9ac468c96c/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02505d8aa1cc8c44c921ef533c1106b629cfc218", "url": "https://api.github.com/repos/rust-lang/rust/commits/02505d8aa1cc8c44c921ef533c1106b629cfc218", "html_url": "https://github.com/rust-lang/rust/commit/02505d8aa1cc8c44c921ef533c1106b629cfc218"}], "stats": {"total": 76, "additions": 20, "deletions": 56}, "files": [{"sha": "ddbbd27f00c8c9f56109880fe2db0a19c7e907bd", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3eb35900c7f0b1c95455fb2088977b9ac468c96c/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb35900c7f0b1c95455fb2088977b9ac468c96c/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=3eb35900c7f0b1c95455fb2088977b9ac468c96c", "patch": "@@ -28,7 +28,6 @@ export node_id_to_ty_param_substs_opt_and_ty;\n export arg;\n export args_eq;\n export ast_constr_to_constr;\n-export bind_params_in_type;\n export block_ty;\n export constr;\n export constr_general;\n@@ -2632,23 +2631,6 @@ fn type_err_to_str(err: ty::type_err) -> str {\n     }\n }\n \n-\n-// Converts type parameters in a type to type variables and returns the\n-// resulting type along with a list of type variable IDs.\n-fn bind_params_in_type(cx: ctxt, next_ty_var: block() -> int, typ: t,\n-                       ty_param_count: uint) -> {ids: [int], ty: t} {\n-    let param_var_ids = [], i = 0u;\n-    while i < ty_param_count { param_var_ids += [next_ty_var()]; i += 1u; }\n-    let param_var_ids = @param_var_ids;\n-    fn binder(cx: ctxt, param_var_ids: @[int], index: uint,\n-              _did: def_id) -> t {\n-        ret mk_var(cx, param_var_ids[index]);\n-    }\n-    {ids: *param_var_ids,\n-     ty: fold_ty(cx, fm_param(bind binder(cx, param_var_ids, _, _)), typ)}\n-}\n-\n-\n // Replaces type parameters in the given type using the given list of\n // substitions.\n fn substitute_type_params(cx: ctxt, substs: [ty::t], typ: t) -> t {"}, {"sha": "e450952fc4ad274325d5288a36ac746ea12b516f", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 20, "deletions": 38, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/3eb35900c7f0b1c95455fb2088977b9ac468c96c/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb35900c7f0b1c95455fb2088977b9ac468c96c/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=3eb35900c7f0b1c95455fb2088977b9ac468c96c", "patch": "@@ -138,23 +138,16 @@ fn ty_param_bounds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n     }\n }\n \n-fn bind_params(fcx: @fn_ctxt, tp: ty::t, count: uint)\n-    -> {ids: [int], ty: ty::t} {\n-    ty::bind_params_in_type(fcx.ccx.tcx, {|| next_ty_var_id(fcx)}, tp, count)\n-}\n-\n // Instantiates the given path, which must refer to an item with the given\n // number of type parameters and type.\n fn instantiate_path(fcx: @fn_ctxt, pth: @ast::path,\n                     tpt: ty_param_bounds_and_ty, sp: span)\n     -> ty_param_substs_opt_and_ty {\n     let ty_param_count = vec::len(*tpt.bounds);\n-    let bind_result = bind_params(fcx, tpt.ty, ty_param_count);\n-    let ty_param_vars = bind_result.ids;\n-    let ty_substs_opt;\n-    let ty_substs_len = vec::len::<@ast::ty>(pth.node.types);\n+    let vars = vec::init_fn({|_i| next_ty_var(fcx)}, ty_param_count);\n+    let ty_substs_len = vec::len(pth.node.types);\n     if ty_substs_len > 0u {\n-        let param_var_len = vec::len(ty_param_vars);\n+        let param_var_len = vec::len(vars);\n         if param_var_len == 0u {\n             fcx.ccx.tcx.sess.span_fatal\n                 (sp, \"this item does not take type parameters\");\n@@ -165,32 +158,16 @@ fn instantiate_path(fcx: @fn_ctxt, pth: @ast::path,\n             fcx.ccx.tcx.sess.span_fatal\n                 (sp, \"not enough type parameters provided for this item\");\n         }\n-        let ty_substs: [ty::t] = [];\n-        let i = 0u;\n-        while i < ty_substs_len {\n-            let ty_var = ty::mk_var(fcx.ccx.tcx, ty_param_vars[i]);\n-            let ty_subst = ast_ty_to_ty_crate(fcx.ccx, pth.node.types[i]);\n-            let res_ty = demand::simple(fcx, pth.span, ty_var, ty_subst);\n-            ty_substs += [res_ty];\n-            i += 1u;\n+        vec::iter2(pth.node.types, vars) {|sub, var|\n+            let ty_subst = ast_ty_to_ty_crate(fcx.ccx, sub);\n+            demand::simple(fcx, pth.span, var, ty_subst);\n         }\n-        ty_substs_opt = some::<[ty::t]>(ty_substs);\n         if ty_param_count == 0u {\n-            fcx.ccx.tcx.sess.span_fatal(sp,\n-                                        \"this item does not take type \\\n-                                      parameters\");\n-        }\n-    } else {\n-        // We will acquire the type parameters through unification.\n-        let ty_substs: [ty::t] = [];\n-        let i = 0u;\n-        while i < ty_param_count {\n-            ty_substs += [ty::mk_var(fcx.ccx.tcx, ty_param_vars[i])];\n-            i += 1u;\n+            fcx.ccx.tcx.sess.span_fatal(\n+                sp, \"this item does not take type parameters\");\n         }\n-        ty_substs_opt = some::<[ty::t]>(ty_substs);\n     }\n-    ret {substs: ty_substs_opt, ty: tpt.ty};\n+    {substs: some(vars), ty: tpt.ty}\n }\n \n // Type tests\n@@ -1555,9 +1532,9 @@ fn lookup_method(fcx: @fn_ctxt, isc: resolve::iscopes,\n             alt vec::find(methods, {|m| m.ident == name}) {\n               some(m) {\n                 let {n_tps, ty: self_ty} = impl_self_ty(tcx, did);\n-                let {ids, ty: self_ty} = if n_tps > 0u {\n+                let {vars, ty: self_ty} = if n_tps > 0u {\n                     bind_params(fcx, self_ty, n_tps)\n-                } else { {ids: [], ty: self_ty} };\n+                } else { {vars: [], ty: self_ty} };\n                 alt unify::unify(fcx, ty, self_ty) {\n                   ures_ok(_) {\n                     if option::is_some(result) {\n@@ -1568,7 +1545,7 @@ fn lookup_method(fcx: @fn_ctxt, isc: resolve::iscopes,\n                         result = some({\n                             method_ty: ty_from_did(tcx, m.did),\n                             n_tps: m.n_tps,\n-                            substs: vec::map(ids, {|id| ty::mk_var(tcx, id)}),\n+                            substs: vars,\n                             origin: method_static(m.did)\n                         });\n                     }\n@@ -2451,6 +2428,12 @@ fn next_ty_var(fcx: @fn_ctxt) -> ty::t {\n     ret ty::mk_var(fcx.ccx.tcx, next_ty_var_id(fcx));\n }\n \n+fn bind_params(fcx: @fn_ctxt, tp: ty::t, count: uint)\n+    -> {vars: [ty::t], ty: ty::t} {\n+    let vars = vec::init_fn({|_i| next_ty_var(fcx)}, count);\n+    {vars: vars, ty: ty::substitute_type_params(fcx.ccx.tcx, vars, tp)}\n+}\n+\n fn get_self_info(ccx: @crate_ctxt) -> option::t<self_info> {\n     ret vec::last(ccx.self_infos);\n }\n@@ -2951,10 +2934,9 @@ mod dict {\n                 for im in *impls {\n                     if im.iface_did == some(iface_id) {\n                         let {n_tps, ty: self_ty} = impl_self_ty(tcx, im.did);\n-                        let {ids, ty: self_ty} = if n_tps > 0u {\n+                        let {vars, ty: self_ty} = if n_tps > 0u {\n                             bind_params(fcx, self_ty, n_tps)\n-                        } else { {ids: [], ty: self_ty} };\n-                        let vars = vec::map(ids, {|id| ty::mk_var(tcx, id)});\n+                        } else { {vars: [], ty: self_ty} };\n                         let im_bs = ty::lookup_item_type(tcx, im.did).bounds;\n                         // FIXME[impl] don't do this in fcx (or make\n                         // unify transactional by scrubbing bindings on fail)"}]}