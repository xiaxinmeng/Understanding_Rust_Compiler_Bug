{"sha": "738e58d57e0911a02c076f2b6064a7f471ecb0c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczOGU1OGQ1N2UwOTExYTAyYzA3NmYyYjYwNjRhN2Y0NzFlY2IwYzE=", "commit": {"author": {"name": "iirelu", "email": "anna@bawk.space", "date": "2018-09-19T15:01:07Z"}, "committer": {"name": "iirelu", "email": "anna@bawk.space", "date": "2018-09-19T15:01:07Z"}, "message": "Document impl keyword\n\nThis commit also splits out linky-line-thingies into two lines, which\njudging from the source code for tidy, should be enough to make it shut\nup and accept me for who I am, dammit.", "tree": {"sha": "23ef583edb6773a2b119940a8341feef86756848", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23ef583edb6773a2b119940a8341feef86756848"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/738e58d57e0911a02c076f2b6064a7f471ecb0c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/738e58d57e0911a02c076f2b6064a7f471ecb0c1", "html_url": "https://github.com/rust-lang/rust/commit/738e58d57e0911a02c076f2b6064a7f471ecb0c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/738e58d57e0911a02c076f2b6064a7f471ecb0c1/comments", "author": {"login": "iirelu", "id": 3432543, "node_id": "MDQ6VXNlcjM0MzI1NDM=", "avatar_url": "https://avatars.githubusercontent.com/u/3432543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iirelu", "html_url": "https://github.com/iirelu", "followers_url": "https://api.github.com/users/iirelu/followers", "following_url": "https://api.github.com/users/iirelu/following{/other_user}", "gists_url": "https://api.github.com/users/iirelu/gists{/gist_id}", "starred_url": "https://api.github.com/users/iirelu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iirelu/subscriptions", "organizations_url": "https://api.github.com/users/iirelu/orgs", "repos_url": "https://api.github.com/users/iirelu/repos", "events_url": "https://api.github.com/users/iirelu/events{/privacy}", "received_events_url": "https://api.github.com/users/iirelu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iirelu", "id": 3432543, "node_id": "MDQ6VXNlcjM0MzI1NDM=", "avatar_url": "https://avatars.githubusercontent.com/u/3432543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iirelu", "html_url": "https://github.com/iirelu", "followers_url": "https://api.github.com/users/iirelu/followers", "following_url": "https://api.github.com/users/iirelu/following{/other_user}", "gists_url": "https://api.github.com/users/iirelu/gists{/gist_id}", "starred_url": "https://api.github.com/users/iirelu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iirelu/subscriptions", "organizations_url": "https://api.github.com/users/iirelu/orgs", "repos_url": "https://api.github.com/users/iirelu/repos", "events_url": "https://api.github.com/users/iirelu/events{/privacy}", "received_events_url": "https://api.github.com/users/iirelu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5393b277aa769b6d5eab2a18f13cb99a333b4f88", "url": "https://api.github.com/repos/rust-lang/rust/commits/5393b277aa769b6d5eab2a18f13cb99a333b4f88", "html_url": "https://github.com/rust-lang/rust/commit/5393b277aa769b6d5eab2a18f13cb99a333b4f88"}], "stats": {"total": 76, "additions": 71, "deletions": 5}, "files": [{"sha": "6f8ff1a4b71d724d7ef38f79edad47fcb9ad8274", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 71, "deletions": 5, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/738e58d57e0911a02c076f2b6064a7f471ecb0c1/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/738e58d57e0911a02c076f2b6064a7f471ecb0c1/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=738e58d57e0911a02c076f2b6064a7f471ecb0c1", "patch": "@@ -35,7 +35,8 @@\n ///\n /// For more information on what `as` is capable of, see the [Reference]\n ///\n-/// [Reference]: https://doc.rust-lang.org/reference/expressions/operator-expr.html#type-cast-expressions\n+/// [Reference]:\n+/// https://doc.rust-lang.org/reference/expressions/operator-expr.html#type-cast-expressions\n /// [`crate`]: keyword.crate.html\n /// [`use`]: keyword.use.html\n mod as_keyword { }\n@@ -90,7 +91,8 @@ mod as_keyword { }\n ///\n /// [`static`]: keyword.static.html\n /// [pointer]: primitive.pointer.html\n-/// [Rust Book]: https://doc.rust-lang.org/stable/book/2018-edition/ch03-01-variables-and-mutability.html#differences-between-variables-and-constants\n+/// [Rust Book]:\n+/// https://doc.rust-lang.org/stable/book/2018-edition/ch03-01-variables-and-mutability.html#differences-between-variables-and-constants\n /// [Reference]: https://doc.rust-lang.org/reference/items/constant-items.html\n mod const_keyword { }\n \n@@ -221,7 +223,8 @@ mod enum_keyword { }\n ///\n /// For more information on FFI, check the [Rust book] or the [Reference].\n ///\n-/// [Rust book]: https://doc.rust-lang.org/book/second-edition/ch19-01-unsafe-rust.html#using-extern-functions-to-call-external-code\n+/// [Rust book]:\n+/// https://doc.rust-lang.org/book/second-edition/ch19-01-unsafe-rust.html#using-extern-functions-to-call-external-code\n /// [Reference]: https://doc.rust-lang.org/reference/items/external-blocks.html\n mod extern_keyword { }\n \n@@ -364,7 +367,8 @@ mod fn_keyword { }\n /// [`impl`]: keyword.impl.html\n /// [`break`]: keyword.break.html\n /// [`IntoIterator`]: iter/trait.IntoIterator.html\n-/// [Rust book]: https://doc.rust-lang.org/book/2018-edition/ch03-05-control-flow.html#looping-through-a-collection-with-for\n+/// [Rust book]:\n+/// https://doc.rust-lang.org/book/2018-edition/ch03-05-control-flow.html#looping-through-a-collection-with-for\n /// [Reference]: https://doc.rust-lang.org/reference/expressions/loop-expr.html#iterator-loops\n mod for_keyword { }\n \n@@ -442,10 +446,72 @@ mod for_keyword { }\n ///\n /// [`match`]: keyword.match.html\n /// [`let`]: keyword.let.html\n-/// [Rust book]: https://doc.rust-lang.org/stable/book/2018-edition/ch03-05-control-flow.html#if-expressions\n+/// [Rust book]:\n+/// https://doc.rust-lang.org/stable/book/2018-edition/ch03-05-control-flow.html#if-expressions\n /// [Reference]: https://doc.rust-lang.org/reference/expressions/if-expr.html\n mod if_keyword { }\n \n+#[doc(keyword = \"impl\")]\n+//\n+/// The implementation-defining keyword.\n+///\n+/// The `impl` keyword is primarily used for defining implementations on types. There are two kinds\n+/// of implementations: Inherent implementations and trait implementations. Inherent\n+/// implementations define functions that operate on a type, known in object-oriented languages as\n+/// methods. Trait implementations are used to give a type a trait, and implement any of the\n+/// required associated items or methods that it requires.\n+///\n+/// ```rust\n+/// struct Example {\n+///     number: i32,\n+/// }\n+///\n+/// impl Example {\n+///     fn boo() {\n+///         println!(\"boo! Example::boo() was called!\");\n+///     }\n+///\n+///     fn answer(&mut self) {\n+///         self.number += 42;\n+///     }\n+///\n+///     fn get_number(&self) -> i32 {\n+///         self.number\n+///     }\n+/// }\n+///\n+/// trait Thingy {\n+///     fn do_thingy(&self);\n+/// }\n+///\n+/// impl Thingy for Example {\n+///     fn do_thingy(&self) {\n+///         println!(\"doing a thing! also, number is {}!\", self.number);\n+///     }\n+/// }\n+/// ```\n+///\n+/// For more information on implementations, see the [Rust book][book1] or the [Reference].\n+///\n+/// The other use of the `impl` keyword is in `impl Trait` syntax, which can be seen as a shorthand\n+/// for \"a concrete type that implements this trait\". Its primary use is working with closures,\n+/// which have type definitions generated at compile time that can't be simply typed out.\n+///\n+/// ```rust\n+/// fn thing_returning_closure() -> impl Fn(i32) -> bool {\n+///     println!(\"here's a closure for you!\");\n+///     |x: i32| x % 3 == 0\n+/// }\n+/// ```\n+///\n+/// For more information on `impl Trait` syntax, see the [Rust book][book2].\n+///\n+/// [book1]: https://doc.rust-lang.org/stable/book/2018-edition/ch05-03-method-syntax.html\n+/// [Reference]: https://doc.rust-lang.org/reference/items/implementations.html\n+/// [book2]:\n+/// https://doc.rust-lang.org/stable/book/2018-edition/ch10-02-traits.html#returning-traits\n+mod impl_keyword { }\n+\n #[doc(keyword = \"let\")]\n //\n /// The `let` keyword."}]}