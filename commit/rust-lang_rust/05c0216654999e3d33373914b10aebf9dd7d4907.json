{"sha": "05c0216654999e3d33373914b10aebf9dd7d4907", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YzAyMTY2NTQ5OTllM2QzMzM3MzkxNGIxMGFlYmY5ZGQ3ZDQ5MDc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-23T22:15:50Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-24T05:16:11Z"}, "message": "rustc: Add ternary operator. Closes #565\n\nThe implementation is so simple it might be considered cheating: at almost\nevery step the expr_ternary is just converted to expr_if.", "tree": {"sha": "0525b430fbb836629dcda45fd0dd22b94886daa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0525b430fbb836629dcda45fd0dd22b94886daa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05c0216654999e3d33373914b10aebf9dd7d4907", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05c0216654999e3d33373914b10aebf9dd7d4907", "html_url": "https://github.com/rust-lang/rust/commit/05c0216654999e3d33373914b10aebf9dd7d4907", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05c0216654999e3d33373914b10aebf9dd7d4907/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5495ad17d185a683f7bb0635ff515d28768ce02d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5495ad17d185a683f7bb0635ff515d28768ce02d", "html_url": "https://github.com/rust-lang/rust/commit/5495ad17d185a683f7bb0635ff515d28768ce02d"}], "stats": {"total": 112, "additions": 110, "deletions": 2}, "files": [{"sha": "650e4eeddadc480335cb89c864b4be3c22d5276f", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/05c0216654999e3d33373914b10aebf9dd7d4907/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c0216654999e3d33373914b10aebf9dd7d4907/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=05c0216654999e3d33373914b10aebf9dd7d4907", "patch": "@@ -241,6 +241,7 @@ tag expr_ {\n     expr_lit(@lit);\n     expr_cast(@expr, @ty);\n     expr_if(@expr, block, option::t[@expr]);\n+    expr_ternary(@expr, @expr, @expr);\n     expr_while(@expr, block);\n     expr_for(@local, @expr, block);\n     expr_for_each(@local, @expr, block);\n@@ -550,6 +551,32 @@ fn is_constraint_arg(@expr e) -> bool {\n fn eq_ty(&@ty a, &@ty b) -> bool { ret std::box::ptr_eq(a, b); }\n \n fn hash_ty(&@ty t) -> uint { ret t.span.lo << 16u + t.span.hi; }\n+\n+fn block_from_expr(@expr e) -> block {\n+    let block_ blk_ =\n+        rec(stmts=[],\n+            expr=option::some[@expr](e),\n+            id=e.id);\n+    ret rec(node=blk_, span=e.span);\n+}\n+\n+// This is a convenience function to transfor ternary expressions to if\n+// expressions so that they can be treated the same\n+fn ternary_to_if(&@expr e) -> @ast::expr {\n+    alt (e.node) {\n+        case (expr_ternary(?cond, ?then, ?els)) {\n+            auto then_blk = block_from_expr(then);\n+            auto els_blk = block_from_expr(els);\n+            auto els_expr = @rec(id=els.id, node=expr_block(els_blk),\n+                                 span=els.span);\n+            ret @rec(id=e.id,\n+                     node=expr_if(cond, then_blk, option::some(els_expr)),\n+                     span=e.span);\n+        }\n+        case (_) { fail; }\n+    }\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "80a216393386262e6bc7887b1d2e9b43b16a58b2", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/05c0216654999e3d33373914b10aebf9dd7d4907/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c0216654999e3d33373914b10aebf9dd7d4907/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=05c0216654999e3d33373914b10aebf9dd7d4907", "patch": "@@ -1071,6 +1071,20 @@ fn parse_prefix_expr(&parser p) -> @ast::expr {\n     ret mk_expr(p, lo, hi, ex);\n }\n \n+fn parse_ternary(&parser p) -> @ast::expr {\n+    auto cond_expr = parse_binops(p);\n+    if (p.peek() == token::QUES) {\n+        p.bump();\n+        auto then_expr = parse_expr(p);\n+        expect(p, token::COLON);\n+        auto else_expr = parse_expr(p);\n+        ret mk_expr(p, cond_expr.span.lo, else_expr.span.hi,\n+                    ast::expr_ternary(cond_expr, then_expr, else_expr));\n+    } else {\n+        ret cond_expr;\n+    }\n+}\n+\n type op_spec = rec(token::token tok, ast::binop op, int prec);\n \n \n@@ -1128,7 +1142,7 @@ fn parse_more_binops(&parser p, @ast::expr lhs, int min_prec) -> @ast::expr {\n \n fn parse_assign_expr(&parser p) -> @ast::expr {\n     auto lo = p.get_lo_pos();\n-    auto lhs = parse_binops(p);\n+    auto lhs = parse_ternary(p);\n     alt (p.peek()) {\n         case (token::EQ) {\n             p.bump();"}, {"sha": "913c9d968b95ae8cdd17ee402d8f9631c2a357b7", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05c0216654999e3d33373914b10aebf9dd7d4907/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c0216654999e3d33373914b10aebf9dd7d4907/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=05c0216654999e3d33373914b10aebf9dd7d4907", "patch": "@@ -5746,6 +5746,9 @@ fn trans_expr_out(&@block_ctxt cx, &@ast::expr e, out_method output) ->\n             ret with_out_method(bind trans_if(cx, cond, thn, els, e.id, _),\n                                 cx, e.id, output);\n         }\n+        case (ast::expr_ternary(_, _, _)) {\n+            ret trans_expr_out(cx, ast::ternary_to_if(e), output);\n+        }\n         case (ast::expr_for(?decl, ?seq, ?body)) {\n             ret trans_for(cx, decl, seq, body);\n         }"}, {"sha": "525073451c591ae8c89bfb8f6412688d208627ad", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05c0216654999e3d33373914b10aebf9dd7d4907/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c0216654999e3d33373914b10aebf9dd7d4907/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=05c0216654999e3d33373914b10aebf9dd7d4907", "patch": "@@ -422,6 +422,9 @@ fn find_pre_post_expr(&fn_ctxt fcx, @expr e) {\n         case (expr_if(?antec, ?conseq, ?maybe_alt)) {\n             join_then_else(fcx, antec, conseq, maybe_alt, e.id, plain_if);\n         }\n+        case (expr_ternary(_, _, _)) {\n+            find_pre_post_expr(fcx, ternary_to_if(e));\n+        }\n         case (expr_binary(?bop, ?l, ?r)) {\n             /* *unless* bop is lazy (e.g. and, or)? \n                FIXME */"}, {"sha": "4bff6e1d8b493e7774f1a17ed1aac8d672d05f93", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05c0216654999e3d33373914b10aebf9dd7d4907/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c0216654999e3d33373914b10aebf9dd7d4907/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=05c0216654999e3d33373914b10aebf9dd7d4907", "patch": "@@ -489,6 +489,9 @@ fn find_pre_post_state_expr(&fn_ctxt fcx, &prestate pres, @expr e) -> bool {\n                 || changed;\n             ret changed;\n         }\n+        case (expr_ternary(_, _, _)) {\n+            ret find_pre_post_state_expr(fcx, pres, ternary_to_if(e));\n+        }\n         case (expr_binary(?bop, ?l, ?r)) {\n             /* FIXME: what if bop is lazy? */\n "}, {"sha": "af4ebc62df18c111e945b955a0fef1015b9afc55", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05c0216654999e3d33373914b10aebf9dd7d4907/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c0216654999e3d33373914b10aebf9dd7d4907/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=05c0216654999e3d33373914b10aebf9dd7d4907", "patch": "@@ -1609,6 +1609,9 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n             check_pred_expr(fcx, cond);\n             check_then_else(fcx, thn, elsopt, id, expr.span);\n         }\n+        case (ast::expr_ternary(_, _, _)) {\n+            check_expr(fcx, ast::ternary_to_if(expr));\n+        }\n         case (ast::expr_assert(?e)) {\n             check_expr(fcx, e);\n             auto ety = expr_ty(fcx.ccx.tcx, e);"}, {"sha": "48abf3f7a802f1b240f17a1645c0a3a39faf3dcb", "filename": "src/comp/middle/visit.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05c0216654999e3d33373914b10aebf9dd7d4907/src%2Fcomp%2Fmiddle%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c0216654999e3d33373914b10aebf9dd7d4907/src%2Fcomp%2Fmiddle%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fvisit.rs?ref=05c0216654999e3d33373914b10aebf9dd7d4907", "patch": "@@ -295,6 +295,11 @@ fn visit_expr[E](&@expr ex, &E e, &vt[E] v) {\n             vt(v).visit_block(b, e, v);\n             visit_expr_opt(eo, e, v);\n         }\n+        case (expr_ternary(?c, ?t, ?el)) {\n+            vt(v).visit_expr(c, e, v);\n+            vt(v).visit_expr(t, e, v);\n+            vt(v).visit_expr(el, e, v);\n+        }\n         case (expr_while(?x, ?b)) {\n             vt(v).visit_expr(x, e, v);\n             vt(v).visit_block(b, e, v);"}, {"sha": "89df2668421ae83a4f3cb88fddfce6841019fbbf", "filename": "src/comp/middle/walk.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05c0216654999e3d33373914b10aebf9dd7d4907/src%2Fcomp%2Fmiddle%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c0216654999e3d33373914b10aebf9dd7d4907/src%2Fcomp%2Fmiddle%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fwalk.rs?ref=05c0216654999e3d33373914b10aebf9dd7d4907", "patch": "@@ -307,7 +307,11 @@ fn walk_expr(&ast_visitor v, @ast::expr e) {\n             walk_block(v, b);\n             walk_expr_opt(v, eo);\n         }\n-        \n+        case (ast::expr_ternary(?c, ?t, ?e)) {\n+            walk_expr(v, c);\n+            walk_expr(v, t);\n+            walk_expr(v, e);\n+        }\n         case (ast::expr_while(?x, ?b)) {\n             walk_expr(v, x);\n             walk_block(v, b);"}, {"sha": "e2e73d849a7799e0caf92661c9510dcec0c856f2", "filename": "src/test/run-pass/ternary.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/05c0216654999e3d33373914b10aebf9dd7d4907/src%2Ftest%2Frun-pass%2Fternary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c0216654999e3d33373914b10aebf9dd7d4907/src%2Ftest%2Frun-pass%2Fternary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fternary.rs?ref=05c0216654999e3d33373914b10aebf9dd7d4907", "patch": "@@ -0,0 +1,46 @@\n+// xfail-stage0\n+\n+fn test_simple() {\n+  auto x = true ? 10 : 11;\n+  assert (x == 10);\n+}\n+\n+fn test_precedence() {\n+  auto x;\n+\n+  x = true == false ? 10 : 11;\n+  assert (x == 11);\n+\n+  x = true ? false ? 10 : 11 : 12;\n+  assert (x == 11);\n+\n+  auto y = false ? 10 : 0xF0 | 0x0F;\n+  assert (y == 0xFF);\n+}\n+\n+fn test_associativity() {\n+  // Ternary is right-associative\n+  auto x = false ? 10 : false ? 11 : 12;\n+  assert (x == 12);\n+}\n+\n+fn test_lval() {\n+  let @mutable int box1 = @mutable 10;\n+  let @mutable int box2 = @mutable 10;\n+  *(true ? box1 : box2) = 100;\n+  assert (*box1 == 100);\n+}\n+\n+fn test_as_stmt() {\n+  auto s;\n+  true ? s = 10 : s = 12;\n+  assert (s == 10);\n+}\n+\n+fn main() {\n+  test_simple();\n+  test_precedence();\n+  test_associativity();\n+  test_lval();\n+  test_as_stmt();\n+}\n\\ No newline at end of file"}]}