{"sha": "362625008ab9e3479f7e34212e1887a3ad6d93b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MjYyNTAwOGFiOWUzNDc5ZjdlMzQyMTJlMTg4N2EzYWQ2ZDkzYjg=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-27T16:15:31Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-27T16:15:40Z"}, "message": "Allow moving out of mutable unsafe pointers\n\nThis makes it possible to de-initialize values anywhere in\nmemory, which is needed, for example, for a fast imlementation\nof vec::pop.", "tree": {"sha": "4d507012166c426d0d69501fea4c79d4cc596040", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d507012166c426d0d69501fea4c79d4cc596040"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/362625008ab9e3479f7e34212e1887a3ad6d93b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/362625008ab9e3479f7e34212e1887a3ad6d93b8", "html_url": "https://github.com/rust-lang/rust/commit/362625008ab9e3479f7e34212e1887a3ad6d93b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/362625008ab9e3479f7e34212e1887a3ad6d93b8/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc55c06aa30a09f54e96e4049659fb1e3b85c486", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc55c06aa30a09f54e96e4049659fb1e3b85c486", "html_url": "https://github.com/rust-lang/rust/commit/dc55c06aa30a09f54e96e4049659fb1e3b85c486"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "7ecdd8be8f1adf9c9464bd29c6c9a00118bba5b5", "filename": "src/comp/middle/mut.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/362625008ab9e3479f7e34212e1887a3ad6d93b8/src%2Fcomp%2Fmiddle%2Fmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362625008ab9e3479f7e34212e1887a3ad6d93b8/src%2Fcomp%2Fmiddle%2Fmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmut.rs?ref=362625008ab9e3479f7e34212e1887a3ad6d93b8", "patch": "@@ -5,7 +5,7 @@ import syntax::visit;\n import syntax::ast_util;\n import driver::session::session;\n \n-enum deref_t { unbox, field, index, }\n+enum deref_t { unbox(bool), field, index, }\n \n type deref = @{mut: bool, kind: deref_t, outer_t: ty::t};\n \n@@ -20,15 +20,15 @@ fn expr_root(tcx: ty::ctxt, ex: @expr, autoderef: bool) ->\n         while true {\n             alt ty::struct(tcx, t) {\n               ty::ty_box(mt) {\n-                ds += [@{mut: mt.mut == mut, kind: unbox, outer_t: t}];\n+                ds += [@{mut: mt.mut == mut, kind: unbox(false), outer_t: t}];\n                 t = mt.ty;\n               }\n               ty::ty_uniq(mt) {\n-                ds += [@{mut: mt.mut == mut, kind: unbox, outer_t: t}];\n+                ds += [@{mut: mt.mut == mut, kind: unbox(false), outer_t: t}];\n                 t = mt.ty;\n               }\n               ty::ty_res(_, inner, tps) {\n-                ds += [@{mut: false, kind: unbox, outer_t: t}];\n+                ds += [@{mut: false, kind: unbox(false), outer_t: t}];\n                 t = ty::substitute_type_params(tcx, tps, inner);\n               }\n               ty::ty_enum(did, tps) {\n@@ -37,7 +37,7 @@ fn expr_root(tcx: ty::ctxt, ex: @expr, autoderef: bool) ->\n                        vec::len(variants[0].args) != 1u {\n                     break;\n                 }\n-                ds += [@{mut: false, kind: unbox, outer_t: t}];\n+                ds += [@{mut: false, kind: unbox(false), outer_t: t}];\n                 t = ty::substitute_type_params(tcx, tps, variants[0].args[0]);\n               }\n               _ { break; }\n@@ -85,15 +85,16 @@ fn expr_root(tcx: ty::ctxt, ex: @expr, autoderef: bool) ->\n           expr_unary(op, base) {\n             if op == deref {\n                 let base_t = ty::expr_ty(tcx, base);\n-                let is_mut = false;\n+                let is_mut = false, ptr = false;\n                 alt ty::struct(tcx, base_t) {\n                   ty::ty_box(mt) { is_mut = mt.mut == mut; }\n                   ty::ty_uniq(mt) { is_mut = mt.mut == mut; }\n                   ty::ty_res(_, _, _) { }\n                   ty::ty_enum(_, _) { }\n-                  ty::ty_ptr(mt) { is_mut = mt.mut == mut; }\n+                  ty::ty_ptr(mt) { is_mut = mt.mut == mut; ptr = true; }\n                 }\n-                ds += [@{mut: is_mut, kind: unbox, outer_t: base_t}];\n+                ds += [@{mut: is_mut, kind: unbox(ptr && is_mut),\n+                         outer_t: base_t}];\n                 ex = base;\n             } else { break; }\n           }\n@@ -187,7 +188,7 @@ fn check_lval(cx: @ctx, dest: @expr, msg: msg) {\n         } else if !root.ds[0].mut {\n             let name =\n                 alt root.ds[0].kind {\n-                  mut::unbox { \"immutable box\" }\n+                  mut::unbox(_) { \"immutable box\" }\n                   mut::field { \"immutable field\" }\n                   mut::index { \"immutable vec content\" }\n                 };\n@@ -212,7 +213,8 @@ fn check_move_rhs(cx: @ctx, src: @expr) {\n         let root = expr_root(cx.tcx, src, false);\n \n         // Not a path and no-derefs means this is a temporary.\n-        if vec::len(*root.ds) != 0u {\n+        if vec::len(*root.ds) != 0u &&\n+           root.ds[vec::len(*root.ds) - 1u].kind != unbox(true) {\n             cx.tcx.sess.span_err(src.span, \"moving out of a data structure\");\n         }\n       }"}, {"sha": "4dabab99c238317e12a8c7219da2574db4eb2148", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/362625008ab9e3479f7e34212e1887a3ad6d93b8/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362625008ab9e3479f7e34212e1887a3ad6d93b8/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=362625008ab9e3479f7e34212e1887a3ad6d93b8", "patch": "@@ -307,6 +307,14 @@ fn pop<T: copy>(&v: [const T]) -> T {\n     let e = v[ln];\n     v = slice(v, 0u, ln);\n     ret e;\n+// FIXME use this implementation after the next snapshot (27.01.2012)\n+/*  let new_ln = len(v) - 1u;\n+    assert (new_ln > 0u);\n+    let valptr = ptr::mut_addr_of(v[new_ln]);\n+    let val <- *valptr;\n+    unsafe::set_len(v, new_ln);\n+    val\n+*/\n }\n \n /*"}]}