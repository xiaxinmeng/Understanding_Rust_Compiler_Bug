{"sha": "cf0a01a161ebbf01230f2e12b7ec8ce9544d4d5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMGEwMWExNjFlYmJmMDEyMzBmMmUxMmI3ZWM4Y2U5NTQ0ZDRkNWY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-04-01T13:14:49Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-04-01T19:53:23Z"}, "message": "Rollup merge of #32652 - VFLashM:refcell_ref_coercion, r=alexcrichton\n\nAdded missing refcell ref/refmut coercions to unsized\n\nRef/RefMut should be coercible to unsized.\nThis commit adds a unit test and two missing CoerceUnsized implementations.", "tree": {"sha": "30a2090566bf99231359df78a2df4a96237fbd24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30a2090566bf99231359df78a2df4a96237fbd24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf0a01a161ebbf01230f2e12b7ec8ce9544d4d5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf0a01a161ebbf01230f2e12b7ec8ce9544d4d5f", "html_url": "https://github.com/rust-lang/rust/commit/cf0a01a161ebbf01230f2e12b7ec8ce9544d4d5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf0a01a161ebbf01230f2e12b7ec8ce9544d4d5f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e004ce1a322739b21960154d6174e41cd9c9666b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e004ce1a322739b21960154d6174e41cd9c9666b", "html_url": "https://github.com/rust-lang/rust/commit/e004ce1a322739b21960154d6174e41cd9c9666b"}, {"sha": "33db2d65ffd5b988fdedc8ed91b395abaa57f777", "url": "https://api.github.com/repos/rust-lang/rust/commits/33db2d65ffd5b988fdedc8ed91b395abaa57f777", "html_url": "https://github.com/rust-lang/rust/commit/33db2d65ffd5b988fdedc8ed91b395abaa57f777"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "b2cbc29b1c74c146bfef4bb62a6649eb80f6fe54", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf0a01a161ebbf01230f2e12b7ec8ce9544d4d5f/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0a01a161ebbf01230f2e12b7ec8ce9544d4d5f/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=cf0a01a161ebbf01230f2e12b7ec8ce9544d4d5f", "patch": "@@ -147,8 +147,8 @@\n use clone::Clone;\n use cmp::{PartialEq, Eq};\n use default::Default;\n-use marker::{Copy, Send, Sync, Sized};\n-use ops::{Deref, DerefMut, Drop, FnOnce};\n+use marker::{Copy, Send, Sync, Sized, Unsize};\n+use ops::{Deref, DerefMut, Drop, FnOnce, CoerceUnsized};\n use option::Option;\n use option::Option::{None, Some};\n \n@@ -634,6 +634,9 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n     }\n }\n \n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Ref<'b, U>> for Ref<'b, T> {}\n+\n impl<'b, T: ?Sized> RefMut<'b, T> {\n     /// Make a new `RefMut` for a component of the borrowed data, e.g. an enum\n     /// variant.\n@@ -766,6 +769,9 @@ impl<'b, T: ?Sized> DerefMut for RefMut<'b, T> {\n     }\n }\n \n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<RefMut<'b, U>> for RefMut<'b, T> {}\n+\n /// The core primitive for interior mutability in Rust.\n ///\n /// `UnsafeCell<T>` is a type that wraps some `T` and indicates unsafe interior operations on the"}, {"sha": "c0b22274ee9d628f09c36b4b7081629844d102f5", "filename": "src/libcoretest/cell.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cf0a01a161ebbf01230f2e12b7ec8ce9544d4d5f/src%2Flibcoretest%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0a01a161ebbf01230f2e12b7ec8ce9544d4d5f/src%2Flibcoretest%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fcell.rs?ref=cf0a01a161ebbf01230f2e12b7ec8ce9544d4d5f", "patch": "@@ -261,3 +261,23 @@ fn refcell_unsized() {\n     let comp: &mut [i32] = &mut [4, 2, 5];\n     assert_eq!(&*cell.borrow(), comp);\n }\n+\n+#[test]\n+fn refcell_ref_coercion() {\n+    let cell: RefCell<[i32; 3]> = RefCell::new([1, 2, 3]);\n+    {\n+        let mut cellref: RefMut<[i32; 3]> = cell.borrow_mut();\n+        cellref[0] = 4;\n+        let mut coerced: RefMut<[i32]> = cellref;\n+        coerced[2] = 5;\n+    }\n+    {\n+        let comp: &mut [i32] = &mut [4, 2, 5];\n+        let cellref: Ref<[i32; 3]> = cell.borrow();\n+        assert_eq!(&*cellref, comp);\n+        let coerced: Ref<[i32]> = cellref;\n+        assert_eq!(&*coerced, comp);\n+    }\n+}\n+\n+"}]}