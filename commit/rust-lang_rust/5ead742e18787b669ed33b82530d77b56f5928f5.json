{"sha": "5ead742e18787b669ed33b82530d77b56f5928f5", "node_id": "C_kwDOAAsO6NoAKDVlYWQ3NDJlMTg3ODdiNjY5ZWQzM2I4MjUzMGQ3N2I1NmY1OTI4ZjU", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-09-16T03:38:28Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-09-16T04:08:46Z"}, "message": "remap ParamEnv with obligation", "tree": {"sha": "48f9bd72ef087b8764e8e0421b1a4db4e16155f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48f9bd72ef087b8764e8e0421b1a4db4e16155f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ead742e18787b669ed33b82530d77b56f5928f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ead742e18787b669ed33b82530d77b56f5928f5", "html_url": "https://github.com/rust-lang/rust/commit/5ead742e18787b669ed33b82530d77b56f5928f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ead742e18787b669ed33b82530d77b56f5928f5/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08aeb1aa9b8baff7025fa4ae9958ce2ca0876c40", "url": "https://api.github.com/repos/rust-lang/rust/commits/08aeb1aa9b8baff7025fa4ae9958ce2ca0876c40", "html_url": "https://github.com/rust-lang/rust/commit/08aeb1aa9b8baff7025fa4ae9958ce2ca0876c40"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "4bdeaccf6688820d3d0cbe7d0b13380ec21698a6", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ead742e18787b669ed33b82530d77b56f5928f5/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ead742e18787b669ed33b82530d77b56f5928f5/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=5ead742e18787b669ed33b82530d77b56f5928f5", "patch": "@@ -436,7 +436,6 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n                     locations,\n                 );\n                 self.cx.param_env = prev;\n-                \n             }\n         }\n     }"}, {"sha": "da3b45a4d6b743a6325c4f49a955d9b42bd176a7", "filename": "compiler/rustc_infer/src/traits/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ead742e18787b669ed33b82530d77b56f5928f5/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ead742e18787b669ed33b82530d77b56f5928f5/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs?ref=5ead742e18787b669ed33b82530d77b56f5928f5", "patch": "@@ -67,6 +67,14 @@ impl<'tcx> PredicateObligation<'tcx> {\n             recursion_depth: self.recursion_depth,\n         })\n     }\n+\n+    pub fn without_const(mut self, tcx: TyCtxt<'tcx>) -> PredicateObligation<'tcx> {\n+        self.param_env = self.param_env.without_const();\n+        if let ty::PredicateKind::Trait(trait_pred) = self.predicate.kind().skip_binder() && trait_pred.is_const_if_const() {\n+            self.predicate = tcx.mk_predicate(self.predicate.kind().map_bound(|_| ty::PredicateKind::Trait(trait_pred.without_const())));\n+        }\n+        self\n+    }\n }\n \n impl<'tcx> TraitObligation<'tcx> {"}, {"sha": "23a3fcd974ad3eae820cba7c5c9ac84932992969", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ead742e18787b669ed33b82530d77b56f5928f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ead742e18787b669ed33b82530d77b56f5928f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=5ead742e18787b669ed33b82530d77b56f5928f5", "patch": "@@ -861,6 +861,11 @@ impl<'tcx> TraitPredicate<'tcx> {\n             (BoundConstness::ConstIfConst, hir::Constness::NotConst) => false,\n         }\n     }\n+\n+    pub fn without_const(mut self) -> Self {\n+        self.constness = BoundConstness::NotConst;\n+        self\n+    }\n }\n \n impl<'tcx> PolyTraitPredicate<'tcx> {"}, {"sha": "2de6fcb5c2f879645d9dbaf9e908a81491deb840", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5ead742e18787b669ed33b82530d77b56f5928f5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ead742e18787b669ed33b82530d77b56f5928f5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=5ead742e18787b669ed33b82530d77b56f5928f5", "patch": "@@ -1418,12 +1418,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         substs: SubstsRef<'tcx>,\n         code: impl Fn(usize, Span) -> ObligationCauseCode<'tcx>,\n     ) {\n-        let mut param_env = self.param_env;\n-        match self.tcx.def_kind(def_id) {\n+        let param_env = self.param_env;\n+\n+        let remap = match self.tcx.def_kind(def_id) {\n             // Associated consts have `Self: ~const Trait` bounds that should be satisfiable when\n             // `Self: Trait` is satisfied because it does not matter whether the impl is `const`.\n             // Therefore we have to remap the param env here to be non-const.\n-            hir::def::DefKind::AssocConst => param_env = param_env.without_const(),\n+            hir::def::DefKind::AssocConst => true,\n             hir::def::DefKind::AssocFn\n                 if self.tcx.def_kind(self.tcx.parent(def_id)) == hir::def::DefKind::Trait =>\n             {\n@@ -1437,19 +1438,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 //\n                 // FIXME(fee1-dead) FIXME(const_trait_impl): update this doc when trait methods can satisfy\n                 // `~const FnOnce` or can be coerced to `const fn` pointer.\n-                param_env = param_env.without_const();\n+                true\n             }\n-            _ => {}\n-        }\n+            _ => false,\n+        };\n         let (bounds, _) = self.instantiate_bounds(span, def_id, &substs);\n \n-        for obligation in traits::predicates_for_generics(\n+        for mut obligation in traits::predicates_for_generics(\n             |idx, predicate_span| {\n                 traits::ObligationCause::new(span, self.body_id, code(idx, predicate_span))\n             },\n             param_env,\n             bounds,\n         ) {\n+            if remap {\n+                obligation = obligation.without_const(self.tcx);\n+            }\n             self.register_predicate(obligation);\n         }\n     }"}]}