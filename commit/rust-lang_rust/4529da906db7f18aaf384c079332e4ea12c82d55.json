{"sha": "4529da906db7f18aaf384c079332e4ea12c82d55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MjlkYTkwNmRiN2YxOGFhZjM4NGMwNzkzMzJlNGVhMTJjODJkNTU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-24T11:01:02Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-24T11:16:36Z"}, "message": "for highlighting, search only the current file", "tree": {"sha": "df095e7f3a20f9c5b3df09c4722d0e3e406b122f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df095e7f3a20f9c5b3df09c4722d0e3e406b122f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4529da906db7f18aaf384c079332e4ea12c82d55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4529da906db7f18aaf384c079332e4ea12c82d55", "html_url": "https://github.com/rust-lang/rust/commit/4529da906db7f18aaf384c079332e4ea12c82d55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4529da906db7f18aaf384c079332e4ea12c82d55/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d186ec3beff14bc161d1c7b7c98b412c4f833d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d186ec3beff14bc161d1c7b7c98b412c4f833d9", "html_url": "https://github.com/rust-lang/rust/commit/6d186ec3beff14bc161d1c7b7c98b412c4f833d9"}], "stats": {"total": 141, "additions": 112, "deletions": 29}, "files": [{"sha": "0832229fd17cf5866c6221000112652d050d53b9", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4529da906db7f18aaf384c079332e4ea12c82d55/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4529da906db7f18aaf384c079332e4ea12c82d55/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=4529da906db7f18aaf384c079332e4ea12c82d55", "patch": "@@ -71,7 +71,7 @@ pub use crate::{\n     inlay_hints::{InlayHint, InlayKind},\n     line_index::{LineCol, LineIndex},\n     line_index_utils::translate_offset_with_edit,\n-    references::ReferenceSearchResult,\n+    references::{ReferenceSearchResult, SearchScope},\n     runnables::{Runnable, RunnableKind},\n     syntax_highlighting::HighlightedRange,\n };\n@@ -481,8 +481,9 @@ impl Analysis {\n     pub fn find_all_refs(\n         &self,\n         position: FilePosition,\n+        search_scope: Option<SearchScope>,\n     ) -> Cancelable<Option<ReferenceSearchResult>> {\n-        self.with_db(|db| references::find_all_refs(db, position).map(|it| it.info))\n+        self.with_db(|db| references::find_all_refs(db, position, search_scope).map(|it| it.info))\n     }\n \n     /// Returns a short text describing element at position."}, {"sha": "b5b1c9a16feaa28e233a06d2fc8da0d20996d879", "filename": "crates/ra_ide_api/src/references.rs", "status": "modified", "additions": 52, "deletions": 9, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/4529da906db7f18aaf384c079332e4ea12c82d55/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4529da906db7f18aaf384c079332e4ea12c82d55/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences.rs?ref=4529da906db7f18aaf384c079332e4ea12c82d55", "patch": "@@ -27,6 +27,8 @@ pub(crate) use self::{\n     rename::rename,\n };\n \n+pub use self::search_scope::SearchScope;\n+\n #[derive(Debug, Clone)]\n pub struct ReferenceSearchResult {\n     declaration: NavigationTarget,\n@@ -67,6 +69,7 @@ impl IntoIterator for ReferenceSearchResult {\n pub(crate) fn find_all_refs(\n     db: &RootDatabase,\n     position: FilePosition,\n+    search_scope: Option<SearchScope>,\n ) -> Option<RangeInfo<ReferenceSearchResult>> {\n     let parse = db.parse(position.file_id);\n     let syntax = parse.tree().syntax().clone();\n@@ -86,7 +89,15 @@ pub(crate) fn find_all_refs(\n         NameKind::GenericParam(_) => return None,\n     };\n \n-    let references = process_definition(db, def, name);\n+    let search_scope = {\n+        let base = def.search_scope(db);\n+        match search_scope {\n+            None => base,\n+            Some(scope) => base.intersection(&scope),\n+        }\n+    };\n+\n+    let references = process_definition(db, def, name, search_scope);\n \n     Some(RangeInfo::new(range, ReferenceSearchResult { declaration, references }))\n }\n@@ -107,11 +118,15 @@ fn find_name<'a>(\n     Some(RangeInfo::new(range, (name_ref.text().to_string(), def)))\n }\n \n-fn process_definition(db: &RootDatabase, def: NameDefinition, name: String) -> Vec<FileRange> {\n+fn process_definition(\n+    db: &RootDatabase,\n+    def: NameDefinition,\n+    name: String,\n+    scope: SearchScope,\n+) -> Vec<FileRange> {\n     let _p = profile(\"process_definition\");\n \n     let pat = name.as_str();\n-    let scope = def.search_scope(db);\n     let mut refs = vec![];\n \n     for (file_id, search_range) in scope {\n@@ -144,8 +159,8 @@ fn process_definition(db: &RootDatabase, def: NameDefinition, name: String) -> V\n #[cfg(test)]\n mod tests {\n     use crate::{\n-        mock_analysis::analysis_and_position, mock_analysis::single_file_with_position,\n-        ReferenceSearchResult,\n+        mock_analysis::{analysis_and_position, single_file_with_position, MockAnalysis},\n+        ReferenceSearchResult, SearchScope,\n     };\n \n     #[test]\n@@ -270,7 +285,7 @@ mod tests {\n         \"#;\n \n         let (analysis, pos) = analysis_and_position(code);\n-        let refs = analysis.find_all_refs(pos).unwrap().unwrap();\n+        let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n         assert_eq!(refs.len(), 3);\n     }\n \n@@ -296,7 +311,7 @@ mod tests {\n         \"#;\n \n         let (analysis, pos) = analysis_and_position(code);\n-        let refs = analysis.find_all_refs(pos).unwrap().unwrap();\n+        let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n         assert_eq!(refs.len(), 2);\n     }\n \n@@ -321,12 +336,40 @@ mod tests {\n         \"#;\n \n         let (analysis, pos) = analysis_and_position(code);\n-        let refs = analysis.find_all_refs(pos).unwrap().unwrap();\n+        let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n+        assert_eq!(refs.len(), 3);\n+    }\n+\n+    #[test]\n+    fn test_find_all_refs_with_scope() {\n+        let code = r#\"\n+            //- /lib.rs\n+            mod foo;\n+            mod bar;\n+\n+            pub fn quux<|>() {}\n+\n+            //- /foo.rs\n+            fn f() { super::quux(); }\n+\n+            //- /bar.rs\n+            fn f() { super::quux(); }\n+        \"#;\n+\n+        let (mock, pos) = MockAnalysis::with_files_and_position(code);\n+        let bar = mock.id_of(\"/bar.rs\");\n+        let analysis = mock.analysis();\n+\n+        let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n         assert_eq!(refs.len(), 3);\n+\n+        let refs =\n+            analysis.find_all_refs(pos, Some(SearchScope::single_file(bar))).unwrap().unwrap();\n+        assert_eq!(refs.len(), 2);\n     }\n \n     fn get_all_refs(text: &str) -> ReferenceSearchResult {\n         let (analysis, position) = single_file_with_position(text);\n-        analysis.find_all_refs(position).unwrap().unwrap()\n+        analysis.find_all_refs(position, None).unwrap().unwrap()\n     }\n }"}, {"sha": "ee6e73e1bfdf784bfcf52f4205859ac4b12a18a8", "filename": "crates/ra_ide_api/src/references/rename.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4529da906db7f18aaf384c079332e4ea12c82d55/crates%2Fra_ide_api%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4529da906db7f18aaf384c079332e4ea12c82d55/crates%2Fra_ide_api%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Frename.rs?ref=4529da906db7f18aaf384c079332e4ea12c82d55", "patch": "@@ -110,7 +110,7 @@ fn rename_reference(\n     position: FilePosition,\n     new_name: &str,\n ) -> Option<RangeInfo<SourceChange>> {\n-    let RangeInfo { range, info: refs } = find_all_refs(db, position)?;\n+    let RangeInfo { range, info: refs } = find_all_refs(db, position, None)?;\n \n     let edit = refs\n         .into_iter()\n@@ -255,13 +255,13 @@ mod tests {\n         \"#;\n \n         let (analysis, pos) = analysis_and_position(code);\n-        let refs = analysis.find_all_refs(pos).unwrap().unwrap();\n+        let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n         assert_eq!(refs.len(), 3);\n     }\n \n     fn get_all_refs(text: &str) -> ReferenceSearchResult {\n         let (analysis, position) = single_file_with_position(text);\n-        analysis.find_all_refs(position).unwrap().unwrap()\n+        analysis.find_all_refs(position, None).unwrap().unwrap()\n     }\n \n     #[test]"}, {"sha": "b6eb248b742b2a83a3113e04c8dabcf317bdf278", "filename": "crates/ra_ide_api/src/references/search_scope.rs", "status": "modified", "additions": 46, "deletions": 12, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/4529da906db7f18aaf384c079332e4ea12c82d55/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4529da906db7f18aaf384c079332e4ea12c82d55/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs?ref=4529da906db7f18aaf384c079332e4ea12c82d55", "patch": "@@ -2,30 +2,63 @@\n //! For `pub(crate)` things it's a crate, for `pub` things it's a crate and dependant crates.\n //! In some cases, the location of the references is known to within a `TextRange`,\n //! e.g. for things like local variables.\n+use std::mem;\n \n use hir::{DefWithBody, HasSource, ModuleSource};\n use ra_db::{FileId, SourceDatabase, SourceDatabaseExt};\n use ra_prof::profile;\n use ra_syntax::{AstNode, TextRange};\n-use rustc_hash::FxHashSet;\n+use rustc_hash::FxHashMap;\n \n use crate::db::RootDatabase;\n \n use super::{NameDefinition, NameKind};\n \n pub struct SearchScope {\n-    entries: FxHashSet<(FileId, Option<TextRange>)>,\n+    entries: FxHashMap<FileId, Option<TextRange>>,\n }\n \n impl SearchScope {\n-    fn new(entries: FxHashSet<(FileId, Option<TextRange>)>) -> SearchScope {\n+    fn new(entries: FxHashMap<FileId, Option<TextRange>>) -> SearchScope {\n         SearchScope { entries }\n     }\n+    pub fn single_file(file: FileId) -> SearchScope {\n+        SearchScope::new(std::iter::once((file, None)).collect())\n+    }\n+    pub(crate) fn intersection(&self, other: &SearchScope) -> SearchScope {\n+        let (mut small, mut large) = (&self.entries, &other.entries);\n+        if small.len() > large.len() {\n+            mem::swap(&mut small, &mut large)\n+        }\n+\n+        let res = small\n+            .iter()\n+            .filter_map(|(file_id, r1)| {\n+                let r2 = large.get(file_id)?;\n+                let r = intersect_ranges(*r1, *r2)?;\n+                Some((*file_id, r))\n+            })\n+            .collect();\n+        return SearchScope::new(res);\n+\n+        fn intersect_ranges(\n+            r1: Option<TextRange>,\n+            r2: Option<TextRange>,\n+        ) -> Option<Option<TextRange>> {\n+            match (r1, r2) {\n+                (None, r) | (r, None) => Some(r),\n+                (Some(r1), Some(r2)) => {\n+                    let r = r1.intersection(&r2)?;\n+                    Some(Some(r))\n+                }\n+            }\n+        }\n+    }\n }\n \n impl IntoIterator for SearchScope {\n     type Item = (FileId, Option<TextRange>);\n-    type IntoIter = std::collections::hash_set::IntoIter<Self::Item>;\n+    type IntoIter = std::collections::hash_map::IntoIter<FileId, Option<TextRange>>;\n     fn into_iter(self) -> Self::IntoIter {\n         self.entries.into_iter()\n     }\n@@ -39,13 +72,13 @@ impl NameDefinition {\n         let file_id = module_src.file_id.original_file(db);\n \n         if let NameKind::Pat((def, _)) = self.kind {\n-            let mut res = FxHashSet::default();\n+            let mut res = FxHashMap::default();\n             let range = match def {\n                 DefWithBody::Function(f) => f.source(db).ast.syntax().text_range(),\n                 DefWithBody::Const(c) => c.source(db).ast.syntax().text_range(),\n                 DefWithBody::Static(s) => s.source(db).ast.syntax().text_range(),\n             };\n-            res.insert((file_id, Some(range)));\n+            res.insert(file_id, Some(range));\n             return SearchScope::new(res);\n         }\n \n@@ -54,17 +87,17 @@ impl NameDefinition {\n \n         if vis.as_str() == \"pub(super)\" {\n             if let Some(parent_module) = self.container.parent(db) {\n-                let mut res = FxHashSet::default();\n+                let mut res = FxHashMap::default();\n                 let parent_src = parent_module.definition_source(db);\n                 let file_id = parent_src.file_id.original_file(db);\n \n                 match parent_src.ast {\n                     ModuleSource::Module(m) => {\n                         let range = Some(m.syntax().text_range());\n-                        res.insert((file_id, range));\n+                        res.insert(file_id, range);\n                     }\n                     ModuleSource::SourceFile(_) => {\n-                        res.insert((file_id, None));\n+                        res.insert(file_id, None);\n                         res.extend(parent_module.children(db).map(|m| {\n                             let src = m.definition_source(db);\n                             (src.file_id.original_file(db), None)\n@@ -78,7 +111,8 @@ impl NameDefinition {\n         if vis.as_str() != \"\" {\n             let source_root_id = db.file_source_root(file_id);\n             let source_root = db.source_root(source_root_id);\n-            let mut res = source_root.walk().map(|id| (id.into(), None)).collect::<FxHashSet<_>>();\n+            let mut res =\n+                source_root.walk().map(|id| (id.into(), None)).collect::<FxHashMap<_, _>>();\n \n             // FIXME: add \"pub(in path)\"\n \n@@ -101,12 +135,12 @@ impl NameDefinition {\n             }\n         }\n \n-        let mut res = FxHashSet::default();\n+        let mut res = FxHashMap::default();\n         let range = match module_src.ast {\n             ModuleSource::Module(m) => Some(m.syntax().text_range()),\n             ModuleSource::SourceFile(_) => None,\n         };\n-        res.insert((file_id, range));\n+        res.insert(file_id, range);\n         SearchScope::new(res)\n     }\n }"}, {"sha": "a29971d107aad58ad38c0e04180fab2aa8cf1b54", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4529da906db7f18aaf384c079332e4ea12c82d55/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4529da906db7f18aaf384c079332e4ea12c82d55/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=4529da906db7f18aaf384c079332e4ea12c82d55", "patch": "@@ -9,7 +9,9 @@ use lsp_types::{\n     Hover, HoverContents, Location, MarkupContent, MarkupKind, Position, PrepareRenameResponse,\n     Range, RenameParams, SymbolInformation, TextDocumentIdentifier, TextEdit, WorkspaceEdit,\n };\n-use ra_ide_api::{AssistId, FileId, FilePosition, FileRange, Query, Runnable, RunnableKind};\n+use ra_ide_api::{\n+    AssistId, FileId, FilePosition, FileRange, Query, Runnable, RunnableKind, SearchScope,\n+};\n use ra_prof::profile;\n use ra_syntax::{AstNode, SyntaxKind, TextRange, TextUnit};\n use rustc_hash::FxHashMap;\n@@ -485,7 +487,7 @@ pub fn handle_references(\n     let _p = profile(\"handle_references\");\n     let position = params.text_document_position.try_conv_with(&world)?;\n \n-    let refs = match world.analysis().find_all_refs(position)? {\n+    let refs = match world.analysis().find_all_refs(position, None)? {\n         None => return Ok(None),\n         Some(refs) => refs,\n     };\n@@ -748,7 +750,10 @@ pub fn handle_document_highlight(\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n \n-    let refs = match world.analysis().find_all_refs(params.try_conv_with(&world)?)? {\n+    let refs = match world\n+        .analysis()\n+        .find_all_refs(params.try_conv_with(&world)?, Some(SearchScope::single_file(file_id)))?\n+    {\n         None => return Ok(None),\n         Some(refs) => refs,\n     };"}]}