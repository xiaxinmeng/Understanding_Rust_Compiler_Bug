{"sha": "591337431df612dd4e0df8d46b6291358085ac7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MTMzNzQzMWRmNjEyZGQ0ZTBkZjhkNDZiNjI5MTM1ODA4NWFjN2M=", "commit": {"author": {"name": "Paul Collier", "email": "paul@paulcollier.ca", "date": "2015-01-18T00:18:19Z"}, "committer": {"name": "Paul Collier", "email": "paul@paulcollier.ca", "date": "2015-01-19T03:43:44Z"}, "message": "libsyntax: int types -> isize", "tree": {"sha": "b21290a0e67bbcc9435eeeef2852bd17e22f8d87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b21290a0e67bbcc9435eeeef2852bd17e22f8d87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/591337431df612dd4e0df8d46b6291358085ac7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/591337431df612dd4e0df8d46b6291358085ac7c", "html_url": "https://github.com/rust-lang/rust/commit/591337431df612dd4e0df8d46b6291358085ac7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/591337431df612dd4e0df8d46b6291358085ac7c/comments", "author": {"login": "pshc", "id": 6398, "node_id": "MDQ6VXNlcjYzOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pshc", "html_url": "https://github.com/pshc", "followers_url": "https://api.github.com/users/pshc/followers", "following_url": "https://api.github.com/users/pshc/following{/other_user}", "gists_url": "https://api.github.com/users/pshc/gists{/gist_id}", "starred_url": "https://api.github.com/users/pshc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pshc/subscriptions", "organizations_url": "https://api.github.com/users/pshc/orgs", "repos_url": "https://api.github.com/users/pshc/repos", "events_url": "https://api.github.com/users/pshc/events{/privacy}", "received_events_url": "https://api.github.com/users/pshc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pshc", "id": 6398, "node_id": "MDQ6VXNlcjYzOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pshc", "html_url": "https://github.com/pshc", "followers_url": "https://api.github.com/users/pshc/followers", "following_url": "https://api.github.com/users/pshc/following{/other_user}", "gists_url": "https://api.github.com/users/pshc/gists{/gist_id}", "starred_url": "https://api.github.com/users/pshc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pshc/subscriptions", "organizations_url": "https://api.github.com/users/pshc/orgs", "repos_url": "https://api.github.com/users/pshc/repos", "events_url": "https://api.github.com/users/pshc/events{/privacy}", "received_events_url": "https://api.github.com/users/pshc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a24b3a4d7769ad9a4863a2cc61c009056459a67", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a24b3a4d7769ad9a4863a2cc61c009056459a67", "html_url": "https://github.com/rust-lang/rust/commit/7a24b3a4d7769ad9a4863a2cc61c009056459a67"}], "stats": {"total": 80, "additions": 40, "deletions": 40}, "files": [{"sha": "8773c0f2f79b8825c4cf4138bb0902d6b530c535", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/591337431df612dd4e0df8d46b6291358085ac7c/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/591337431df612dd4e0df8d46b6291358085ac7c/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=591337431df612dd4e0df8d46b6291358085ac7c", "patch": "@@ -135,7 +135,7 @@ pub trait AstBuilder {\n     fn expr_lit(&self, sp: Span, lit: ast::Lit_) -> P<ast::Expr>;\n \n     fn expr_usize(&self, span: Span, i: usize) -> P<ast::Expr>;\n-    fn expr_int(&self, sp: Span, i: int) -> P<ast::Expr>;\n+    fn expr_int(&self, sp: Span, i: isize) -> P<ast::Expr>;\n     fn expr_u8(&self, sp: Span, u: u8) -> P<ast::Expr>;\n     fn expr_bool(&self, sp: Span, value: bool) -> P<ast::Expr>;\n \n@@ -644,7 +644,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn expr_usize(&self, span: Span, i: usize) -> P<ast::Expr> {\n         self.expr_lit(span, ast::LitInt(i as u64, ast::UnsignedIntLit(ast::TyUs(false))))\n     }\n-    fn expr_int(&self, sp: Span, i: int) -> P<ast::Expr> {\n+    fn expr_int(&self, sp: Span, i: isize) -> P<ast::Expr> {\n         self.expr_lit(sp, ast::LitInt(i as u64, ast::SignedIntLit(ast::TyIs(false),\n                                                                   ast::Sign::new(i))))\n     }"}, {"sha": "ca9091856d6b293c689b0caf2b491430fbe1b35d", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/591337431df612dd4e0df8d46b6291358085ac7c/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/591337431df612dd4e0df8d46b6291358085ac7c/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=591337431df612dd4e0df8d46b6291358085ac7c", "patch": "@@ -267,7 +267,7 @@ fn read_block_comment(rdr: &mut StringReader,\n         assert!(!curr_line.contains_char('\\n'));\n         lines.push(curr_line);\n     } else {\n-        let mut level: int = 1;\n+        let mut level: isize = 1;\n         while level > 0 {\n             debug!(\"=== block comment level {}\", level);\n             if rdr.is_eof() {"}, {"sha": "2fcf43f9eadb995c87c2d49f18d7eb20e23e7fd0", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/591337431df612dd4e0df8d46b6291358085ac7c/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/591337431df612dd4e0df8d46b6291358085ac7c/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=591337431df612dd4e0df8d46b6291358085ac7c", "patch": "@@ -519,7 +519,7 @@ impl<'a> StringReader<'a> {\n         let is_doc_comment = self.curr_is('*') || self.curr_is('!');\n         let start_bpos = self.last_pos - BytePos(2);\n \n-        let mut level: int = 1;\n+        let mut level: isize = 1;\n         let mut has_cr = false;\n         while level > 0 {\n             if self.is_eof() {"}, {"sha": "88825cb3f34641f9afbe3bfda09c0265e121a331", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/591337431df612dd4e0df8d46b6291358085ac7c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/591337431df612dd4e0df8d46b6291358085ac7c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=591337431df612dd4e0df8d46b6291358085ac7c", "patch": "@@ -290,8 +290,8 @@ pub struct Parser<'a> {\n     /// the previous token or None (only stashed sometimes).\n     pub last_token: Option<Box<token::Token>>,\n     pub buffer: [TokenAndSpan; 4],\n-    pub buffer_start: int,\n-    pub buffer_end: int,\n+    pub buffer_start: isize,\n+    pub buffer_end: isize,\n     pub tokens_consumed: usize,\n     pub restrictions: Restrictions,\n     pub quote_depth: usize, // not (yet) related to the quasiquoter\n@@ -934,7 +934,7 @@ impl<'a> Parser<'a> {\n             // Avoid token copies with `replace`.\n             let buffer_start = self.buffer_start as usize;\n             let next_index = (buffer_start + 1) & 3 as usize;\n-            self.buffer_start = next_index as int;\n+            self.buffer_start = next_index as isize;\n \n             let placeholder = TokenAndSpan {\n                 tok: token::Underscore,\n@@ -966,7 +966,7 @@ impl<'a> Parser<'a> {\n         self.token = next;\n         self.span = mk_sp(lo, hi);\n     }\n-    pub fn buffer_length(&mut self) -> int {\n+    pub fn buffer_length(&mut self) -> isize {\n         if self.buffer_start <= self.buffer_end {\n             return self.buffer_end - self.buffer_start;\n         }\n@@ -975,7 +975,7 @@ impl<'a> Parser<'a> {\n     pub fn look_ahead<R, F>(&mut self, distance: usize, f: F) -> R where\n         F: FnOnce(&token::Token) -> R,\n     {\n-        let dist = distance as int;\n+        let dist = distance as isize;\n         while self.buffer_length() < dist {\n             self.buffer[self.buffer_end as usize] = self.reader.real_token();\n             self.buffer_end = (self.buffer_end + 1) & 3;"}, {"sha": "ca99fb2ef899119defb93f50ba396cc86ff2eaa8", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/591337431df612dd4e0df8d46b6291358085ac7c/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/591337431df612dd4e0df8d46b6291358085ac7c/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=591337431df612dd4e0df8d46b6291358085ac7c", "patch": "@@ -71,19 +71,19 @@ pub enum Breaks {\n \n #[derive(Clone, Copy)]\n pub struct BreakToken {\n-    offset: int,\n-    blank_space: int\n+    offset: isize,\n+    blank_space: isize\n }\n \n #[derive(Clone, Copy)]\n pub struct BeginToken {\n-    offset: int,\n+    offset: isize,\n     breaks: Breaks\n }\n \n #[derive(Clone)]\n pub enum Token {\n-    String(String, int),\n+    String(String, isize),\n     Break(BreakToken),\n     Begin(BeginToken),\n     End,\n@@ -122,7 +122,7 @@ pub fn tok_str(token: &Token) -> String {\n }\n \n pub fn buf_str(toks: &[Token],\n-               szs: &[int],\n+               szs: &[isize],\n                left: usize,\n                right: usize,\n                lim: usize)\n@@ -155,25 +155,25 @@ pub enum PrintStackBreak {\n \n #[derive(Copy)]\n pub struct PrintStackElem {\n-    offset: int,\n+    offset: isize,\n     pbreak: PrintStackBreak\n }\n \n-static SIZE_INFINITY: int = 0xffff;\n+static SIZE_INFINITY: isize = 0xffff;\n \n pub fn mk_printer(out: Box<io::Writer+'static>, linewidth: usize) -> Printer {\n     // Yes 3, it makes the ring buffers big enough to never\n     // fall behind.\n     let n: usize = 3 * linewidth;\n     debug!(\"mk_printer {}\", linewidth);\n     let token: Vec<Token> = repeat(Token::Eof).take(n).collect();\n-    let size: Vec<int> = repeat(0i).take(n).collect();\n+    let size: Vec<isize> = repeat(0i).take(n).collect();\n     let scan_stack: Vec<usize> = repeat(0us).take(n).collect();\n     Printer {\n         out: out,\n         buf_len: n,\n-        margin: linewidth as int,\n-        space: linewidth as int,\n+        margin: linewidth as isize,\n+        space: linewidth as isize,\n         left: 0,\n         right: 0,\n         token: token,\n@@ -269,21 +269,21 @@ pub struct Printer {\n     pub out: Box<io::Writer+'static>,\n     buf_len: usize,\n     /// Width of lines we're constrained to\n-    margin: int,\n+    margin: isize,\n     /// Number of spaces left on line\n-    space: int,\n+    space: isize,\n     /// Index of left side of input stream\n     left: usize,\n     /// Index of right side of input stream\n     right: usize,\n     /// Ring-buffer stream goes through\n     token: Vec<Token> ,\n     /// Ring-buffer of calculated sizes\n-    size: Vec<int> ,\n+    size: Vec<isize> ,\n     /// Running size of stream \"...left\"\n-    left_total: int,\n+    left_total: isize,\n     /// Running size of stream \"...right\"\n-    right_total: int,\n+    right_total: isize,\n     /// Pseudo-stack, really a ring too. Holds the\n     /// primary-ring-buffers index of the Begin that started the\n     /// current block, possibly with the most recent Break after that\n@@ -300,7 +300,7 @@ pub struct Printer {\n     /// Stack of blocks-in-progress being flushed by print\n     print_stack: Vec<PrintStackElem> ,\n     /// Buffered indentation to avoid writing trailing whitespace\n-    pending_indentation: int,\n+    pending_indentation: isize,\n }\n \n impl Printer {\n@@ -479,7 +479,7 @@ impl Printer {\n \n         Ok(())\n     }\n-    pub fn check_stack(&mut self, k: int) {\n+    pub fn check_stack(&mut self, k: isize) {\n         if !self.scan_stack_empty {\n             let x = self.scan_top();\n             match self.token[x] {\n@@ -506,14 +506,14 @@ impl Printer {\n             }\n         }\n     }\n-    pub fn print_newline(&mut self, amount: int) -> io::IoResult<()> {\n+    pub fn print_newline(&mut self, amount: isize) -> io::IoResult<()> {\n         debug!(\"NEWLINE {}\", amount);\n         let ret = write!(self.out, \"\\n\");\n         self.pending_indentation = 0;\n         self.indent(amount);\n         return ret;\n     }\n-    pub fn indent(&mut self, amount: int) {\n+    pub fn indent(&mut self, amount: isize) {\n         debug!(\"INDENT {}\", amount);\n         self.pending_indentation += amount;\n     }\n@@ -536,7 +536,7 @@ impl Printer {\n         }\n         write!(self.out, \"{}\", s)\n     }\n-    pub fn print(&mut self, token: Token, l: int) -> io::IoResult<()> {\n+    pub fn print(&mut self, token: Token, l: isize) -> io::IoResult<()> {\n         debug!(\"print {} {} (remaining line space={})\", tok_str(&token), l,\n                self.space);\n         debug!(\"{}\", buf_str(&self.token[],\n@@ -622,7 +622,7 @@ impl Printer {\n // \"raw box\"\n pub fn rbox(p: &mut Printer, indent: usize, b: Breaks) -> io::IoResult<()> {\n     p.pretty_print(Token::Begin(BeginToken {\n-        offset: indent as int,\n+        offset: indent as isize,\n         breaks: b\n     }))\n }\n@@ -635,10 +635,10 @@ pub fn cbox(p: &mut Printer, indent: usize) -> io::IoResult<()> {\n     rbox(p, indent, Breaks::Consistent)\n }\n \n-pub fn break_offset(p: &mut Printer, n: usize, off: int) -> io::IoResult<()> {\n+pub fn break_offset(p: &mut Printer, n: usize, off: isize) -> io::IoResult<()> {\n     p.pretty_print(Token::Break(BreakToken {\n         offset: off,\n-        blank_space: n as int\n+        blank_space: n as isize\n     }))\n }\n \n@@ -651,7 +651,7 @@ pub fn eof(p: &mut Printer) -> io::IoResult<()> {\n }\n \n pub fn word(p: &mut Printer, wrd: &str) -> io::IoResult<()> {\n-    p.pretty_print(Token::String(/* bad */ wrd.to_string(), wrd.len() as int))\n+    p.pretty_print(Token::String(/* bad */ wrd.to_string(), wrd.len() as isize))\n }\n \n pub fn huge_word(p: &mut Printer, wrd: &str) -> io::IoResult<()> {\n@@ -678,7 +678,7 @@ pub fn hardbreak(p: &mut Printer) -> io::IoResult<()> {\n     spaces(p, SIZE_INFINITY as usize)\n }\n \n-pub fn hardbreak_tok_offset(off: int) -> Token {\n+pub fn hardbreak_tok_offset(off: isize) -> Token {\n     Token::Break(BreakToken {offset: off, blank_space: SIZE_INFINITY})\n }\n "}, {"sha": "c537ca60b18ca6edba44ee271111caa5c8705a29", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/591337431df612dd4e0df8d46b6291358085ac7c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/591337431df612dd4e0df8d46b6291358085ac7c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=591337431df612dd4e0df8d46b6291358085ac7c", "patch": "@@ -520,7 +520,7 @@ impl<'a> State<'a> {\n     pub fn bclose_maybe_open (&mut self, span: codemap::Span,\n                               indented: usize, close_box: bool) -> IoResult<()> {\n         try!(self.maybe_print_comment(span.hi));\n-        try!(self.break_offset_if_not_bol(1u, -(indented as int)));\n+        try!(self.break_offset_if_not_bol(1u, -(indented as isize)));\n         try!(word(&mut self.s, \"}\"));\n         if close_box {\n             try!(self.end()); // close the outer-box\n@@ -568,7 +568,7 @@ impl<'a> State<'a> {\n         Ok(())\n     }\n     pub fn break_offset_if_not_bol(&mut self, n: usize,\n-                                   off: int) -> IoResult<()> {\n+                                   off: isize) -> IoResult<()> {\n         if !self.is_bol() {\n             break_offset(&mut self.s, n, off)\n         } else {"}, {"sha": "da358b70225304b2271a275d45b59f173f9c25f1", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/591337431df612dd4e0df8d46b6291358085ac7c/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/591337431df612dd4e0df8d46b6291358085ac7c/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=591337431df612dd4e0df8d46b6291358085ac7c", "patch": "@@ -191,7 +191,7 @@ mod test {\n \n     #[test]\n     fn test_len() {\n-        let v: SmallVector<int> = SmallVector::zero();\n+        let v: SmallVector<isize> = SmallVector::zero();\n         assert_eq!(0, v.len());\n \n         assert_eq!(1, SmallVector::one(1i).len());\n@@ -214,7 +214,7 @@ mod test {\n \n     #[test]\n     fn test_from_iter() {\n-        let v: SmallVector<int> = (vec!(1i, 2, 3)).into_iter().collect();\n+        let v: SmallVector<isize> = (vec![1is, 2, 3]).into_iter().collect();\n         assert_eq!(3, v.len());\n         assert_eq!(&1, v.get(0));\n         assert_eq!(&2, v.get(1));\n@@ -224,7 +224,7 @@ mod test {\n     #[test]\n     fn test_move_iter() {\n         let v = SmallVector::zero();\n-        let v: Vec<int> = v.into_iter().collect();\n+        let v: Vec<isize> = v.into_iter().collect();\n         assert_eq!(Vec::new(), v);\n \n         let v = SmallVector::one(1i);\n@@ -237,7 +237,7 @@ mod test {\n     #[test]\n     #[should_fail]\n     fn test_expect_one_zero() {\n-        let _: int = SmallVector::zero().expect_one(\"\");\n+        let _: isize = SmallVector::zero().expect_one(\"\");\n     }\n \n     #[test]"}]}