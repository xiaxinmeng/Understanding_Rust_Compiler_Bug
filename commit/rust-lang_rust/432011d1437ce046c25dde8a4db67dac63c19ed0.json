{"sha": "432011d1437ce046c25dde8a4db67dac63c19ed0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMjAxMWQxNDM3Y2UwNDZjMjVkZGU4YTRkYjY3ZGFjNjNjMTllZDA=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-03-15T20:00:41Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-03-15T22:03:54Z"}, "message": "Fallout in testing.", "tree": {"sha": "a58820426c5f3e925c3cdb0d11faf4d408ee37c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a58820426c5f3e925c3cdb0d11faf4d408ee37c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/432011d1437ce046c25dde8a4db67dac63c19ed0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/432011d1437ce046c25dde8a4db67dac63c19ed0", "html_url": "https://github.com/rust-lang/rust/commit/432011d1437ce046c25dde8a4db67dac63c19ed0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/432011d1437ce046c25dde8a4db67dac63c19ed0/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "170ccd615f976fc9e90a8f14ce6c373bfdf01533", "url": "https://api.github.com/repos/rust-lang/rust/commits/170ccd615f976fc9e90a8f14ce6c373bfdf01533", "html_url": "https://github.com/rust-lang/rust/commit/170ccd615f976fc9e90a8f14ce6c373bfdf01533"}], "stats": {"total": 59, "additions": 29, "deletions": 30}, "files": [{"sha": "3fae49bfc6d3ef23e166d125b9a8ea8f409ec2cc", "filename": "src/doc/reference.md", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/432011d1437ce046c25dde8a4db67dac63c19ed0/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/432011d1437ce046c25dde8a4db67dac63c19ed0/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=432011d1437ce046c25dde8a4db67dac63c19ed0", "patch": "@@ -1961,16 +1961,18 @@ module through the rules above. It essentially allows public access into the\n re-exported item. For example, this program is valid:\n \n ```\n-pub use self::implementation as api;\n+pub use self::implementation::api;\n \n mod implementation {\n-    pub fn f() {}\n+    pub mod api {\n+        pub fn f() {}\n+    }\n }\n \n # fn main() {}\n ```\n \n-This means that any external crate referencing `implementation::f` would\n+This means that any external crate referencing `implementation::api::f` would\n receive a privacy violation, while the path `api::f` would be allowed.\n \n When re-exporting a private item, it can be thought of as allowing the \"privacy"}, {"sha": "991ab77419f5b511b3a7d5530b867ce951cf1867", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/432011d1437ce046c25dde8a4db67dac63c19ed0/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432011d1437ce046c25dde8a4db67dac63c19ed0/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=432011d1437ce046c25dde8a4db67dac63c19ed0", "patch": "@@ -121,13 +121,11 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n         debug!(\"current path: {}\",\n                ast_util::path_name_i(&self.cx.path));\n \n-        if is_test_fn(&self.cx, &*i) || is_bench_fn(&self.cx, &*i) {\n+        let i = if is_test_fn(&self.cx, &*i) || is_bench_fn(&self.cx, &*i) {\n             match i.node {\n                 ast::ItemFn(_, ast::Unsafety::Unsafe, _, _, _) => {\n                     let diag = self.cx.span_diagnostic;\n-                    diag.span_fatal(i.span,\n-                                    \"unsafe functions cannot be used for \\\n-                                     tests\");\n+                    diag.span_fatal(i.span, \"unsafe functions cannot be used for tests\");\n                 }\n                 _ => {\n                     debug!(\"this is a test function\");\n@@ -142,9 +140,18 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n                     self.tests.push(i.ident);\n                     // debug!(\"have {} test/bench functions\",\n                     //        cx.testfns.len());\n+\n+                    // Make all tests public so we can call them from outside\n+                    // the module (note that the tests are re-exported and must\n+                    // be made public themselves to avoid privacy errors).\n+                    let mut result = (*i).clone();\n+                    result.vis = ast::Public;\n+                    P(result)\n                 }\n             }\n-        }\n+        } else {\n+            i\n+        };\n \n         // We don't want to recurse into anything other than mods, since\n         // mods or tests inside of functions will break things"}, {"sha": "e60dbb290b079a6091c645a453b6889c0e19af6e", "filename": "src/test/auxiliary/privacy_reexport.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432011d1437ce046c25dde8a4db67dac63c19ed0/src%2Ftest%2Fauxiliary%2Fprivacy_reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432011d1437ce046c25dde8a4db67dac63c19ed0/src%2Ftest%2Fauxiliary%2Fprivacy_reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fprivacy_reexport.rs?ref=432011d1437ce046c25dde8a4db67dac63c19ed0", "patch": "@@ -10,6 +10,6 @@\n \n pub use foo as bar;\n \n-mod foo {\n+pub mod foo {\n     pub fn frob() {}\n }"}, {"sha": "13ee3f163616e8ccf207d9f283bed3fbebd30a4b", "filename": "src/test/compile-fail/lint-dead-code-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432011d1437ce046c25dde8a4db67dac63c19ed0/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432011d1437ce046c25dde8a4db67dac63c19ed0/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs?ref=432011d1437ce046c25dde8a4db67dac63c19ed0", "patch": "@@ -19,7 +19,7 @@ extern crate libc;\n \n pub use extern_foo as x;\n extern {\n-    fn extern_foo();\n+    pub fn extern_foo();\n }\n \n struct Foo; //~ ERROR: struct is never used"}, {"sha": "67dccb4c93e1ac0e6bb4fb6ed89610f2fe7a6923", "filename": "src/test/compile-fail/privacy1.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/432011d1437ce046c25dde8a4db67dac63c19ed0/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432011d1437ce046c25dde8a4db67dac63c19ed0/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs?ref=432011d1437ce046c25dde8a4db67dac63c19ed0", "patch": "@@ -27,10 +27,6 @@ mod bar {\n \n     // can't publicly re-export private items\n     pub use self::baz::{foo, bar};\n-    //~^ ERROR: function `bar` is private\n-\n-    pub use self::private::ppriv;\n-    //~^ ERROR: function `ppriv` is private\n \n     pub struct A;\n     impl A {\n@@ -61,10 +57,8 @@ mod bar {\n             fn bar2(&self) {}\n         }\n \n-        // both of these are re-exported by `bar`, but only one should be\n-        // validly re-exported\n         pub fn foo() {}\n-        fn bar() {}\n+        pub fn bar() {}\n     }\n \n     extern {\n@@ -92,10 +86,6 @@ mod bar {\n         pub fn gpub() {}\n         fn gpriv() {}\n     }\n-\n-    mod private {\n-        fn ppriv() {}\n-    }\n }\n \n pub fn gpub() {}\n@@ -142,13 +132,13 @@ mod foo {\n \n         ::bar::baz::foo(); //~ ERROR: function `foo` is inaccessible\n                            //~^ NOTE: module `baz` is private\n-        ::bar::baz::bar(); //~ ERROR: function `bar` is private\n+        ::bar::baz::bar(); //~ ERROR: function `bar` is inaccessible\n     }\n \n     fn test2() {\n         use bar::baz::{foo, bar};\n         //~^ ERROR: function `foo` is inaccessible\n-        //~^^ ERROR: function `bar` is private\n+        //~^^ ERROR: function `bar` is inaccessible\n         foo();\n         bar();\n     }"}, {"sha": "d074095dbdedd796e2c1d781c31250415100ae43", "filename": "src/test/run-pass/issue-16597.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432011d1437ce046c25dde8a4db67dac63c19ed0/src%2Ftest%2Frun-pass%2Fissue-16597.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432011d1437ce046c25dde8a4db67dac63c19ed0/src%2Ftest%2Frun-pass%2Fissue-16597.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16597.rs?ref=432011d1437ce046c25dde8a4db67dac63c19ed0", "patch": "@@ -15,5 +15,5 @@ mod test {\n     use super::*;\n \n     #[test]\n-    fn test(){}\n+    pub fn test(){}\n }"}, {"sha": "c297998b6493a08575bb65b5f8c4392735dab09a", "filename": "src/test/run-pass/issue-20823.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432011d1437ce046c25dde8a4db67dac63c19ed0/src%2Ftest%2Frun-pass%2Fissue-20823.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432011d1437ce046c25dde8a4db67dac63c19ed0/src%2Ftest%2Frun-pass%2Fissue-20823.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20823.rs?ref=432011d1437ce046c25dde8a4db67dac63c19ed0", "patch": "@@ -14,4 +14,4 @@\n #![deny(unstable)]\n \n #[test]\n-fn foo() {}\n+pub fn foo() {}"}, {"sha": "88bbba44bbe14a30135f5ad793287eabfa5814ee", "filename": "src/test/run-pass/issue-5950.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432011d1437ce046c25dde8a4db67dac63c19ed0/src%2Ftest%2Frun-pass%2Fissue-5950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432011d1437ce046c25dde8a4db67dac63c19ed0/src%2Ftest%2Frun-pass%2Fissue-5950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5950.rs?ref=432011d1437ce046c25dde8a4db67dac63c19ed0", "patch": "@@ -11,6 +11,6 @@\n \n pub use local as local_alias;\n \n-mod local { }\n+pub mod local { }\n \n pub fn main() {}"}, {"sha": "f7985efbc310fbdbcafc414e10c3442e60d8ea6e", "filename": "src/test/run-pass/test-fn-signature-verification-for-explicit-return-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/432011d1437ce046c25dde8a4db67dac63c19ed0/src%2Ftest%2Frun-pass%2Ftest-fn-signature-verification-for-explicit-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432011d1437ce046c25dde8a4db67dac63c19ed0/src%2Ftest%2Frun-pass%2Ftest-fn-signature-verification-for-explicit-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftest-fn-signature-verification-for-explicit-return-type.rs?ref=432011d1437ce046c25dde8a4db67dac63c19ed0", "patch": "@@ -13,8 +13,8 @@\n extern crate test;\n \n #[bench]\n-fn bench_explicit_return_type(_: &mut ::test::Bencher) -> () {}\n+pub fn bench_explicit_return_type(_: &mut ::test::Bencher) -> () {}\n \n #[test]\n-fn test_explicit_return_type() -> () {}\n+pub fn test_explicit_return_type() -> () {}\n "}, {"sha": "94d20f703a0fc33217176bd01cc065aab3730592", "filename": "src/test/run-pass/test-should-fail-good-message.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/432011d1437ce046c25dde8a4db67dac63c19ed0/src%2Ftest%2Frun-pass%2Ftest-should-fail-good-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432011d1437ce046c25dde8a4db67dac63c19ed0/src%2Ftest%2Frun-pass%2Ftest-should-fail-good-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftest-should-fail-good-message.rs?ref=432011d1437ce046c25dde8a4db67dac63c19ed0", "patch": "@@ -13,13 +13,13 @@\n \n #[test]\n #[should_panic(expected = \"foo\")]\n-fn test_foo() {\n+pub fn test_foo() {\n     panic!(\"foo bar\")\n }\n \n #[test]\n #[should_panic(expected = \"foo\")]\n-fn test_foo_dynamic() {\n+pub fn test_foo_dynamic() {\n     panic!(\"{} bar\", \"foo\")\n }\n "}]}