{"sha": "c16d52db7778fba1c8b6c07b06510cfd6c32ae4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNmQ1MmRiNzc3OGZiYTFjOGI2YzA3YjA2NTEwY2ZkNmMzMmFlNGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-09T17:27:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-09T17:27:35Z"}, "message": "Auto merge of #79387 - woodruffw-forks:ww/peer-cred-pid-macos, r=Amanieu\n\next/ucred: Support PID in peer creds on macOS\n\nThis is a follow-up to https://github.com/rust-lang/rust/pull/75148 (RFC: https://github.com/rust-lang/rust/issues/42839).\n\nThe original PR used `getpeereid` on macOS and the BSDs, since they don't (generally) support the `SO_PEERCRED` mechanism that Linux supplies.\n\nThis PR splits the macOS/iOS implementation of `peer_cred()` from that of the BSDs, since macOS supplies the `LOCAL_PEERPID` sockopt as a source of the missing PID. It also adds a `cfg`-gated tests that ensures that platforms with support for PIDs in `UCred` have the expected data.", "tree": {"sha": "6e9169604a2d082aa815aa5b07a45e28688d5c34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e9169604a2d082aa815aa5b07a45e28688d5c34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c16d52db7778fba1c8b6c07b06510cfd6c32ae4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c16d52db7778fba1c8b6c07b06510cfd6c32ae4f", "html_url": "https://github.com/rust-lang/rust/commit/c16d52db7778fba1c8b6c07b06510cfd6c32ae4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c16d52db7778fba1c8b6c07b06510cfd6c32ae4f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa55f668e5ea5388ec98b9340969527252239151", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa55f668e5ea5388ec98b9340969527252239151", "html_url": "https://github.com/rust-lang/rust/commit/fa55f668e5ea5388ec98b9340969527252239151"}, {"sha": "3d8329f6fc678024fc74754f4e483d6a83fee098", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d8329f6fc678024fc74754f4e483d6a83fee098", "html_url": "https://github.com/rust-lang/rust/commit/3d8329f6fc678024fc74754f4e483d6a83fee098"}], "stats": {"total": 72, "additions": 57, "deletions": 15}, "files": [{"sha": "1b4c18d3d84c420c3a20d0214f9ee3ddd68a9070", "filename": "library/std/src/sys/unix/ext/ucred.rs", "status": "modified", "additions": 43, "deletions": 14, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c16d52db7778fba1c8b6c07b06510cfd6c32ae4f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fucred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c16d52db7778fba1c8b6c07b06510cfd6c32ae4f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fucred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fucred.rs?ref=c16d52db7778fba1c8b6c07b06510cfd6c32ae4f", "patch": "@@ -28,15 +28,12 @@ pub struct UCred {\n #[cfg(any(target_os = \"android\", target_os = \"linux\"))]\n pub use self::impl_linux::peer_cred;\n \n-#[cfg(any(\n-    target_os = \"dragonfly\",\n-    target_os = \"freebsd\",\n-    target_os = \"ios\",\n-    target_os = \"macos\",\n-    target_os = \"openbsd\"\n-))]\n+#[cfg(any(target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))]\n pub use self::impl_bsd::peer_cred;\n \n+#[cfg(any(target_os = \"macos\", target_os = \"ios\",))]\n+pub use self::impl_mac::peer_cred;\n+\n #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n pub mod impl_linux {\n     use super::UCred;\n@@ -73,13 +70,7 @@ pub mod impl_linux {\n     }\n }\n \n-#[cfg(any(\n-    target_os = \"dragonfly\",\n-    target_os = \"macos\",\n-    target_os = \"ios\",\n-    target_os = \"freebsd\",\n-    target_os = \"openbsd\"\n-))]\n+#[cfg(any(target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))]\n pub mod impl_bsd {\n     use super::UCred;\n     use crate::io;\n@@ -95,3 +86,41 @@ pub mod impl_bsd {\n         }\n     }\n }\n+\n+#[cfg(any(target_os = \"macos\", target_os = \"ios\",))]\n+pub mod impl_mac {\n+    use super::UCred;\n+    use crate::os::unix::io::AsRawFd;\n+    use crate::os::unix::net::UnixStream;\n+    use crate::{io, mem};\n+    use libc::{c_void, getpeereid, getsockopt, pid_t, socklen_t, LOCAL_PEERPID, SOL_LOCAL};\n+\n+    pub fn peer_cred(socket: &UnixStream) -> io::Result<UCred> {\n+        let mut cred = UCred { uid: 1, gid: 1, pid: None };\n+        unsafe {\n+            let ret = getpeereid(socket.as_raw_fd(), &mut cred.uid, &mut cred.gid);\n+\n+            if ret != 0 {\n+                return Err(io::Error::last_os_error());\n+            }\n+\n+            let mut pid: pid_t = 1;\n+            let mut pid_size = mem::size_of::<pid_t>() as socklen_t;\n+\n+            let ret = getsockopt(\n+                socket.as_raw_fd(),\n+                SOL_LOCAL,\n+                LOCAL_PEERPID,\n+                &mut pid as *mut pid_t as *mut c_void,\n+                &mut pid_size,\n+            );\n+\n+            if ret == 0 && pid_size as usize == mem::size_of::<pid_t>() {\n+                cred.pid = Some(pid);\n+                Ok(cred)\n+            } else {\n+                Err(io::Error::last_os_error())\n+            }\n+        }\n+    }\n+}"}, {"sha": "42d79418cf78f81bbd204accfe10ed97e06ebb59", "filename": "library/std/src/sys/unix/ext/ucred/tests.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c16d52db7778fba1c8b6c07b06510cfd6c32ae4f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fucred%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c16d52db7778fba1c8b6c07b06510cfd6c32ae4f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fucred%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fucred%2Ftests.rs?ref=c16d52db7778fba1c8b6c07b06510cfd6c32ae4f", "patch": "@@ -1,5 +1,5 @@\n use crate::os::unix::net::UnixStream;\n-use libc::{getegid, geteuid};\n+use libc::{getegid, geteuid, getpid};\n \n #[test]\n #[cfg(any(\n@@ -23,3 +23,16 @@ fn test_socket_pair() {\n     assert_eq!(cred_a.uid, uid);\n     assert_eq!(cred_a.gid, gid);\n }\n+\n+#[test]\n+#[cfg(any(target_os = \"linux\", target_os = \"ios\", target_os = \"macos\",))]\n+fn test_socket_pair_pids(arg: Type) -> RetType {\n+    // Create two connected sockets and get their peer credentials.\n+    let (sock_a, sock_b) = UnixStream::pair().unwrap();\n+    let (cred_a, cred_b) = (sock_a.peer_cred().unwrap(), sock_b.peer_cred().unwrap());\n+\n+    // On supported platforms (see the cfg above), the credentials should always include the PID.\n+    let pid = unsafe { getpid() };\n+    assert_eq!(cred_a.pid, Some(pid));\n+    assert_eq!(cred_b.pid, Some(pid));\n+}"}]}