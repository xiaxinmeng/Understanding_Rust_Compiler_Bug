{"sha": "c63df7c64fbb1cd010e24ac4eb66b87aab8e650f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2M2RmN2M2NGZiYjFjZDAxMGUyNGFjNGViNjZiODdhYWI4ZTY1MGY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-11-10T21:27:40Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-11-10T21:27:40Z"}, "message": "Use non-short suggestion for parenthesised ..=", "tree": {"sha": "fa398c3d1aeaf1063dc6266cedbb44b18c6669cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa398c3d1aeaf1063dc6266cedbb44b18c6669cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c63df7c64fbb1cd010e24ac4eb66b87aab8e650f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c63df7c64fbb1cd010e24ac4eb66b87aab8e650f", "html_url": "https://github.com/rust-lang/rust/commit/c63df7c64fbb1cd010e24ac4eb66b87aab8e650f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c63df7c64fbb1cd010e24ac4eb66b87aab8e650f/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1487145493c54b41df16eb7ffe6fdd3b82e6a78", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1487145493c54b41df16eb7ffe6fdd3b82e6a78", "html_url": "https://github.com/rust-lang/rust/commit/c1487145493c54b41df16eb7ffe6fdd3b82e6a78"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "696fee04273fdaa186aa1dcd907f9f04c94ee006", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c63df7c64fbb1cd010e24ac4eb66b87aab8e650f/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c63df7c64fbb1cd010e24ac4eb66b87aab8e650f/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=c63df7c64fbb1cd010e24ac4eb66b87aab8e650f", "patch": "@@ -1432,20 +1432,26 @@ impl EarlyLintPass for EllipsisInclusiveRangePatterns {\n         if let Some((start, end, join)) = endpoints {\n             let msg = \"`...` range patterns are deprecated\";\n             let suggestion = \"use `..=` for an inclusive range\";\n-            let (span, replacement) = if parenthesise {\n+            if parenthesise {\n                 *visit_subpats = false;\n-                (pat.span, format!(\"&({}..={})\", expr_to_string(&start), expr_to_string(&end)))\n+                let mut err = cx.struct_span_lint(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS, pat.span, msg);\n+                err.span_suggestion_with_applicability(\n+                    pat.span,\n+                    suggestion,\n+                    format!(\"&({}..={})\", expr_to_string(&start), expr_to_string(&end)),\n+                    Applicability::MachineApplicable,\n+                );\n+                err.emit();\n             } else {\n-                (join, \"..=\".to_owned())\n+                let mut err = cx.struct_span_lint(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS, join, msg);\n+                err.span_suggestion_short_with_applicability(\n+                    join,\n+                    suggestion,\n+                    \"..=\".to_owned(),\n+                    Applicability::MachineApplicable,\n+                );\n+                err.emit();\n             };\n-            let mut err = cx.struct_span_lint(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS, span, msg);\n-            err.span_suggestion_short_with_applicability(\n-                span,\n-                suggestion,\n-                replacement,\n-                Applicability::MachineApplicable,\n-            );\n-            err.emit();\n         }\n     }\n }"}, {"sha": "b13afdbc023d46e6394a7f1e492c9bd77e20bf53", "filename": "src/test/ui/lint/inclusive-range-pattern-syntax.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c63df7c64fbb1cd010e24ac4eb66b87aab8e650f/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c63df7c64fbb1cd010e24ac4eb66b87aab8e650f/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr?ref=c63df7c64fbb1cd010e24ac4eb66b87aab8e650f", "patch": "@@ -14,5 +14,5 @@ warning: `...` range patterns are deprecated\n   --> $DIR/inclusive-range-pattern-syntax.rs:25:9\n    |\n LL |         &1...2 => {}\n-   |         ^^^^^^ help: use `..=` for an inclusive range\n+   |         ^^^^^^ help: use `..=` for an inclusive range: `&(1..=2)`\n "}, {"sha": "6fa67a5d4fa30c1295176e729670db0f49e60296", "filename": "src/test/ui/range/range-inclusive-pattern-precedence.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c63df7c64fbb1cd010e24ac4eb66b87aab8e650f/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c63df7c64fbb1cd010e24ac4eb66b87aab8e650f/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr?ref=c63df7c64fbb1cd010e24ac4eb66b87aab8e650f", "patch": "@@ -14,7 +14,7 @@ warning: `...` range patterns are deprecated\n   --> $DIR/range-inclusive-pattern-precedence.rs:24:9\n    |\n LL |         &0...9 => {}\n-   |         ^^^^^^ help: use `..=` for an inclusive range\n+   |         ^^^^^^ help: use `..=` for an inclusive range: `&(0..=9)`\n    |\n note: lint level defined here\n   --> $DIR/range-inclusive-pattern-precedence.rs:19:9"}]}