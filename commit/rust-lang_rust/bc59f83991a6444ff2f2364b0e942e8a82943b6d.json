{"sha": "bc59f83991a6444ff2f2364b0e942e8a82943b6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNTlmODM5OTFhNjQ0NGZmMmYyMzY0YjBlOTQyZThhODI5NDNiNmQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-05-12T12:58:37Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-05-12T18:25:26Z"}, "message": "Use traits from prelude for method resolution", "tree": {"sha": "e8aa2948b2bb301f453307c35311634cda5de43b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8aa2948b2bb301f453307c35311634cda5de43b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc59f83991a6444ff2f2364b0e942e8a82943b6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc59f83991a6444ff2f2364b0e942e8a82943b6d", "html_url": "https://github.com/rust-lang/rust/commit/bc59f83991a6444ff2f2364b0e942e8a82943b6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc59f83991a6444ff2f2364b0e942e8a82943b6d/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fda874dd4c84d4b53ed625e9eccc92c3fa9a48e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fda874dd4c84d4b53ed625e9eccc92c3fa9a48e", "html_url": "https://github.com/rust-lang/rust/commit/7fda874dd4c84d4b53ed625e9eccc92c3fa9a48e"}], "stats": {"total": 56, "additions": 42, "deletions": 14}, "files": [{"sha": "2fb219908e1dbc46ddc0ff7eed92f462db9fbe7c", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bc59f83991a6444ff2f2364b0e942e8a82943b6d/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc59f83991a6444ff2f2364b0e942e8a82943b6d/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=bc59f83991a6444ff2f2364b0e942e8a82943b6d", "patch": "@@ -3,7 +3,7 @@ use std::sync::Arc;\n \n use ra_syntax::ast;\n \n-use rustc_hash::FxHashMap;\n+use rustc_hash::{FxHashMap, FxHashSet};\n \n use crate::{\n     ModuleDef, Trait,\n@@ -193,19 +193,18 @@ impl Resolver {\n         names\n     }\n \n-    pub(crate) fn traits_in_scope<'a>(&'a self) -> impl Iterator<Item = Trait> + 'a {\n-        // FIXME prelude\n-        self.scopes\n-            .iter()\n-            .rev()\n-            .flat_map(|scope| {\n-                match scope {\n-                    Scope::ModuleScope(m) => Some(m.crate_def_map[m.module_id].scope.traits()),\n-                    _ => None,\n+    pub(crate) fn traits_in_scope(&self, db: &impl HirDatabase) -> FxHashSet<Trait> {\n+        let mut traits = FxHashSet::default();\n+        for scope in &self.scopes {\n+            if let Scope::ModuleScope(m) = scope {\n+                if let Some(prelude) = m.crate_def_map.prelude() {\n+                    let prelude_def_map = db.crate_def_map(prelude.krate);\n+                    traits.extend(prelude_def_map[prelude.module_id].scope.traits());\n                 }\n-                .into_iter()\n-            })\n-            .flatten()\n+                traits.extend(m.crate_def_map[m.module_id].scope.traits());\n+            }\n+        }\n+        traits\n     }\n \n     fn module(&self) -> Option<(&CrateDefMap, CrateModuleId)> {"}, {"sha": "34817a5ecd5c9b37fac5562d380f566ffd6889f6", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc59f83991a6444ff2f2364b0e942e8a82943b6d/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc59f83991a6444ff2f2364b0e942e8a82943b6d/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=bc59f83991a6444ff2f2364b0e942e8a82943b6d", "patch": "@@ -185,7 +185,7 @@ fn iterate_trait_method_candidates<T>(\n     mut callback: impl FnMut(&Ty, Function) -> Option<T>,\n ) -> Option<T> {\n     let krate = resolver.krate()?;\n-    'traits: for t in resolver.traits_in_scope() {\n+    'traits: for t in resolver.traits_in_scope(db) {\n         let data = t.trait_data(db);\n         // we'll be lazy about checking whether the type implements the\n         // trait, but if we find out it doesn't, we'll skip the rest of the"}, {"sha": "978cc2587fa2f6fca526cb6fa72a3c2e9e25ea05", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bc59f83991a6444ff2f2364b0e942e8a82943b6d/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc59f83991a6444ff2f2364b0e942e8a82943b6d/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=bc59f83991a6444ff2f2364b0e942e8a82943b6d", "patch": "@@ -2501,6 +2501,35 @@ fn test() { (&S).foo()<|>; }\n     assert_eq!(t, \"u128\");\n }\n \n+#[test]\n+fn method_resolution_trait_from_prelude() {\n+    let (mut db, pos) = MockDatabase::with_position(\n+        r#\"\n+//- /main.rs\n+struct S;\n+impl Clone for S {}\n+\n+fn test() {\n+    S.clone()<|>;\n+}\n+\n+//- /lib.rs\n+#[prelude_import] use foo::*;\n+\n+mod foo {\n+    trait Clone {\n+        fn clone(&self) -> Self;\n+    }\n+}\n+\"#,\n+    );\n+    db.set_crate_graph_from_fixture(crate_graph! {\n+        \"main\": (\"/main.rs\", [\"other_crate\"]),\n+        \"other_crate\": (\"/lib.rs\", []),\n+    });\n+    assert_eq!(\"S\", type_at_pos(&db, pos));\n+}\n+\n #[test]\n fn method_resolution_where_clause_for_unknown_trait() {\n     // The blanket impl shouldn't apply because we can't even resolve UnknownTrait"}]}