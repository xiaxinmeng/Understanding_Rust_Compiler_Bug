{"sha": "5038f5a70c8fd12703fe5d78b8d04918336e764c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMzhmNWE3MGM4ZmQxMjcwM2ZlNWQ3OGI4ZDA0OTE4MzM2ZTc2NGM=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-01T19:47:06Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-14T01:15:38Z"}, "message": "Tell expr_use_visitor which binops are by value", "tree": {"sha": "bb3982d4f22cd1e67b4b1799234ff9ccca2f7a77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb3982d4f22cd1e67b4b1799234ff9ccca2f7a77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5038f5a70c8fd12703fe5d78b8d04918336e764c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5038f5a70c8fd12703fe5d78b8d04918336e764c", "html_url": "https://github.com/rust-lang/rust/commit/5038f5a70c8fd12703fe5d78b8d04918336e764c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5038f5a70c8fd12703fe5d78b8d04918336e764c/comments", "author": null, "committer": null, "parents": [{"sha": "f64e52a7f703ecb18cbf7c39bd1479cd99bd20ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/f64e52a7f703ecb18cbf7c39bd1479cd99bd20ae", "html_url": "https://github.com/rust-lang/rust/commit/f64e52a7f703ecb18cbf7c39bd1479cd99bd20ae"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "59872c69462071ea13498501dafbd2c403bf27a4", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5038f5a70c8fd12703fe5d78b8d04918336e764c/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5038f5a70c8fd12703fe5d78b8d04918336e764c/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=5038f5a70c8fd12703fe5d78b8d04918336e764c", "patch": "@@ -30,7 +30,7 @@ use middle::ty::{MethodStatic, MethodStaticUnboxedClosure};\n use util::ppaux::Repr;\n \n use std::kinds;\n-use syntax::ast;\n+use syntax::{ast, ast_util};\n use syntax::ptr::P;\n use syntax::codemap::Span;\n \n@@ -438,7 +438,7 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n             ast::ExprPath(..) => { }\n \n             ast::ExprUnary(ast::UnDeref, ref base) => {      // *base\n-                if !self.walk_overloaded_operator(expr, &**base, Vec::new()) {\n+                if !self.walk_overloaded_operator(expr, &**base, Vec::new(), None) {\n                     self.select_from_expr(&**base);\n                 }\n             }\n@@ -452,7 +452,7 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n             }\n \n             ast::ExprIndex(ref lhs, ref rhs) => {       // lhs[rhs]\n-                if !self.walk_overloaded_operator(expr, &**lhs, vec![&**rhs]) {\n+                if !self.walk_overloaded_operator(expr, &**lhs, vec![&**rhs], None) {\n                     self.select_from_expr(&**lhs);\n                     self.consume_expr(&**rhs);\n                 }\n@@ -465,7 +465,7 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n                     (&None, &Some(ref e)) => vec![&**e],\n                     (&None, &None) => Vec::new()\n                 };\n-                let overloaded = self.walk_overloaded_operator(expr, &**base, args);\n+                let overloaded = self.walk_overloaded_operator(expr, &**base, args, None);\n                 assert!(overloaded);\n             }\n \n@@ -570,13 +570,14 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n             }\n \n             ast::ExprUnary(_, ref lhs) => {\n-                if !self.walk_overloaded_operator(expr, &**lhs, Vec::new()) {\n+                if !self.walk_overloaded_operator(expr, &**lhs, Vec::new(), None) {\n                     self.consume_expr(&**lhs);\n                 }\n             }\n \n-            ast::ExprBinary(_, ref lhs, ref rhs) => {\n-                if !self.walk_overloaded_operator(expr, &**lhs, vec![&**rhs]) {\n+            ast::ExprBinary(op, ref lhs, ref rhs) => {\n+                if !self.walk_overloaded_operator(expr, &**lhs, vec![&**rhs], Some(op))\n+                {\n                     self.consume_expr(&**lhs);\n                     self.consume_expr(&**rhs);\n                 }\n@@ -911,13 +912,24 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n     fn walk_overloaded_operator(&mut self,\n                                 expr: &ast::Expr,\n                                 receiver: &ast::Expr,\n-                                rhs: Vec<&ast::Expr>)\n+                                rhs: Vec<&ast::Expr>,\n+                                binop: Option<ast::BinOp>)\n                                 -> bool\n     {\n         if !self.typer.is_method_call(expr.id) {\n             return false;\n         }\n \n+        match binop {\n+            Some(binop) if ast_util::is_by_value_binop(binop) => {\n+                self.consume_expr(receiver);\n+                self.consume_expr(rhs[0]);\n+\n+                return true;\n+            },\n+            _ => {},\n+        }\n+\n         self.walk_expr(receiver);\n \n         // Arguments (but not receivers) to overloaded operator"}]}