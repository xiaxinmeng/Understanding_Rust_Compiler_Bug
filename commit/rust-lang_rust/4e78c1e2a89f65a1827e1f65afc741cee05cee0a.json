{"sha": "4e78c1e2a89f65a1827e1f65afc741cee05cee0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNzhjMWUyYTg5ZjY1YTE4MjdlMWY2NWFmYzc0MWNlZTA1Y2VlMGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-29T05:25:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-29T05:25:48Z"}, "message": "auto merge of #7479 : mozilla/rust/rollup, r=thestinger\n\n22b7eb3 r=thestinger \r\n28a3613 r=cmr\r\na0c31ec r=bstrie\r\nee7307e r=thestinger\r\nb9cf6a3 r=thestinger", "tree": {"sha": "d56131a1a347b4cc8c3e79dfda3b9a47221bcaa4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d56131a1a347b4cc8c3e79dfda3b9a47221bcaa4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e78c1e2a89f65a1827e1f65afc741cee05cee0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e78c1e2a89f65a1827e1f65afc741cee05cee0a", "html_url": "https://github.com/rust-lang/rust/commit/4e78c1e2a89f65a1827e1f65afc741cee05cee0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d681bccb6a2141012a747cc272991a7440cb2408", "url": "https://api.github.com/repos/rust-lang/rust/commits/d681bccb6a2141012a747cc272991a7440cb2408", "html_url": "https://github.com/rust-lang/rust/commit/d681bccb6a2141012a747cc272991a7440cb2408"}, {"sha": "21cc0ccea10bb9d1b83612d26c8e62d06fe365a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/21cc0ccea10bb9d1b83612d26c8e62d06fe365a1", "html_url": "https://github.com/rust-lang/rust/commit/21cc0ccea10bb9d1b83612d26c8e62d06fe365a1"}], "stats": {"total": 127, "additions": 67, "deletions": 60}, "files": [{"sha": "86dcbab93fde6afe107fde940c67507baa481208", "filename": "src/etc/zsh/_rust", "status": "modified", "additions": 36, "deletions": 35, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Fetc%2Fzsh%2F_rust", "raw_url": "https://github.com/rust-lang/rust/raw/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Fetc%2Fzsh%2F_rust", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fzsh%2F_rust?ref=4e78c1e2a89f65a1827e1f65afc741cee05cee0a", "patch": "@@ -29,36 +29,30 @@ _rustc_opts_switches=(\n     --target'[Target triple cpu-manufacturer-kernel\\[-os\\] to compile]'\n     --target-feature'[Target specific attributes (llc -mattr=help for detail)]'\n     --android-cross-path'[The path to the Android NDK]'\n-    {-W,--warn}'[Set lint warnings]'\n-    {-A,--allow}'[Set lint allowed]'\n-    {-D,--deny}'[Set lint denied]'\n-    {-F,--forbid}'[Set lint forbidden]'\n-    -Z'[Set internal debugging options]'\n     {-v,--version}'[Print version info and exit]'\n )\n-\n _rustc_opts_lint=(\n-    'path-statement:path statements with no effect'\n-    'deprecated-pattern:warn about deprecated uses of pattern bindings'\n-    'non-implicitly-copyable-typarams:passing non implicitly copyable types as copy type params'\n-    'missing-trait-doc:detects missing documentation for traits'\n-    'missing-struct-doc:detects missing documentation for structs'\n-    'ctypes:proper use of core::libc types in foreign modules'\n-    'implicit-copies:implicit copies of non implicitly copyable data'\n-    \"unused-mut:detect mut variables which don't need to be mutable\"\n-    'unused-imports:imports that are never used'\n-    'heap-memory:use of any (~ type or @ type) heap memory'\n-    'default-methods:allow default methods'\n-    'unused-variable:detect variables which are not used in any way'\n-    'dead-assignment:detect assignments that will never be read'\n-    'unrecognized-lint:unrecognized lint attribute'\n-    'type-limits:comparisons made useless by limits of the types involved'\n-    'unused-unsafe:unnecessary use of an `unsafe` block'\n-    'while-true:suggest using loop { } instead of while(true) { }'\n-    'non-camel-case-types:types, variants and traits should have camel case names'\n-    'managed-heap-memory:use of managed (@ type) heap memory'\n-    'unnecessary-allocation:detects unnecessary allocations that can be eliminated'\n-    'owned-heap-memory:use of owned (~ type) heap memory'\n+    'path-statement[path statements with no effect]'\n+    'deprecated-pattern[warn about deprecated uses of pattern bindings]'\n+    'non-implicitly-copyable-typarams[passing non implicitly copyable types as copy type params]'\n+    'missing-trait-doc[detects missing documentation for traits]'\n+    'missing-struct-doc[detects missing documentation for structs]'\n+    'ctypes[proper use of core::libc types in foreign modules]'\n+    'implicit-copies[implicit copies of non implicitly copyable data]'\n+    \"unused-mut[detect mut variables which don't need to be mutable]\"\n+    'unused-imports[imports that are never used]'\n+    'heap-memory[use of any (~ type or @ type) heap memory]'\n+    'default-methods[allow default methods]'\n+    'unused-variable[detect variables which are not used in any way]'\n+    'dead-assignment[detect assignments that will never be read]'\n+    'unrecognized-lint[unrecognized lint attribute]'\n+    'type-limits[comparisons made useless by limits of the types involved]'\n+    'unused-unsafe[unnecessary use of an `unsafe` block]'\n+    'while-true[suggest using loop { } instead of while(true) { }]'\n+    'non-camel-case-types[types, variants and traits should have camel case names]'\n+    'managed-heap-memory[use of managed (@ type) heap memory]'\n+    'unnecessary-allocation[detects unnecessary allocations that can be eliminated]'\n+    'owned-heap-memory[use of owned (~ type) heap memory]'\n )\n \n _rustc_opts_debug=(\n@@ -90,13 +84,20 @@ _rustc_opts_debug=(\n     'lint-llvm:Run the LLVM lint pass on the pre-optimization IR'\n )\n \n-_rustc() {\n-    case $words[2] in\n-        -[WADF]) _describe 'options' _rustc_opts_lint ;;\n-        -Z) _describe 'options' _rustc_opts_debug ;;\n-        -)  _arguments -s -w : \"$_rustc_opts_switches[@]\" ;;\n-        *) _files -g \"*.rs\" ;;\n-  esac\n+_rustc_opts_fun_lint(){\n+    _values -s , 'options' \\\n+        \"$_rustc_opts_lint[@]\"\n+}\n+\n+_rustc_opts_fun_debug(){\n+    _describe 'options' _rustc_opts_debug\n }\n \n-_rustc \"$@\"\n+_arguments -s :  \\\n+    '(-W --warn)'{-W,--warn}'[Set lint warnings]:lint options:_rustc_opts_fun_lint' \\\n+    '(-A --allow)'{-A,--allow}'[Set lint allowed]:lint options:_rustc_opts_fun_lint' \\\n+    '(-D --deny)'{-D,--deny}'[Set lint denied]:lint options:_rustc_opts_fun_lint' \\\n+    '(-F --forbid)'{-F,--forbid}'[Set lint forbidden]:lint options:_rustc_opts_fun_lint' \\\n+    '*-Z[Set internal debugging options]:debug options:_rustc_opts_fun_debug' \\\n+    \"$_rustc_opts_switches[@]\" \\\n+    '*::files:_files -g \"*.rs\"'"}, {"sha": "30067c92300cc6dead5b836bb976bd08438014c0", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=4e78c1e2a89f65a1827e1f65afc741cee05cee0a", "patch": "@@ -276,7 +276,8 @@ struct RWARCInner<T> { lock: RWlock, failed: bool, data: T }\n  *\n  * Unlike mutex_arcs, rw_arcs are safe, because they cannot be nested.\n  */\n-#[mutable]\n+#[mutable] // XXX remove after snap\n+#[no_freeze]\n struct RWARC<T> {\n     x: UnsafeAtomicRcBox<RWARCInner<T>>,\n }"}, {"sha": "2c6e7a30448cec148bc6806deb0922f4876f7503", "filename": "src/libextra/arena.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Flibextra%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Flibextra%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farena.rs?ref=4e78c1e2a89f65a1827e1f65afc741cee05cee0a", "patch": "@@ -65,7 +65,8 @@ struct Chunk {\n     is_pod: bool,\n }\n \n-#[mutable]\n+#[mutable] // XXX remove after snap\n+#[no_freeze]\n pub struct Arena {\n     // The head is separated out from the list as a unbenchmarked\n     // microoptimization, to avoid needing to case on the list to"}, {"sha": "4634a7db05e3c83865d366374cd878e4eeb00de4", "filename": "src/libextra/ebml.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Flibextra%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Flibextra%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Febml.rs?ref=4e78c1e2a89f65a1827e1f65afc741cee05cee0a", "patch": "@@ -97,11 +97,14 @@ pub mod reader {\n     use core::cast::transmute;\n     use core::int;\n     use core::io;\n+    use core::option::{None, Option, Some};\n \n     #[cfg(target_arch = \"x86\")]\n     #[cfg(target_arch = \"x86_64\")]\n-    use core::option::{None, Option, Some};\n     use core::ptr::offset;\n+\n+    #[cfg(target_arch = \"x86\")]\n+    #[cfg(target_arch = \"x86_64\")]\n     use core::unstable::intrinsics::bswap32;\n \n     // ebml reading"}, {"sha": "613c0b1ae417fd431a8bea1364a57c06b9a7dc81", "filename": "src/libextra/rc.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Flibextra%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Flibextra%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frc.rs?ref=4e78c1e2a89f65a1827e1f65afc741cee05cee0a", "patch": "@@ -36,7 +36,7 @@ struct RcBox<T> {\n \n /// Immutable reference counted pointer type\n #[unsafe_no_drop_flag]\n-#[non_sendable]\n+#[no_send]\n pub struct Rc<T> {\n     priv ptr: *mut RcBox<T>,\n }\n@@ -168,8 +168,9 @@ struct RcMutBox<T> {\n \n /// Mutable reference counted pointer type\n #[non_owned]\n-#[non_sendable]\n-#[mutable]\n+#[no_send]\n+#[mutable] // XXX remove after snap\n+#[no_freeze]\n #[unsafe_no_drop_flag]\n pub struct RcMut<T> {\n     priv ptr: *mut RcMutBox<T>,"}, {"sha": "d448a1588a674a3496c438543937c247c08c0f94", "filename": "src/libextra/term.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Flibextra%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Flibextra%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterm.rs?ref=4e78c1e2a89f65a1827e1f65afc741cee05cee0a", "patch": "@@ -120,13 +120,15 @@ impl Terminal {\n     pub fn reset(&self) {\n         let mut vars = Variables::new();\n         let s = do self.ti.strings.find_equiv(&(\"op\"))\n-                       .map_consume_default(Err(~\"can't find op\")) |&op| {\n+                       .map_consume_default(Err(~\"can't find terminfo capability `op`\")) |&op| {\n                            expand(op, [], &mut vars)\n                        };\n         if s.is_ok() {\n             self.out.write(s.unwrap());\n-        } else {\n+        } else if self.num_colors > 0 {\n             warn!(\"%s\", s.unwrap_err());\n+        } else {\n+            debug!(\"%s\", s.unwrap_err());\n         }\n     }\n "}, {"sha": "0b051662781e0b10eff55f5000118045eaa259a3", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=4e78c1e2a89f65a1827e1f65afc741cee05cee0a", "patch": "@@ -28,15 +28,14 @@ use middle::trans::type_of::*;\n use middle::ty;\n use middle::typeck;\n use util::common::indenter;\n-use util::ppaux::{Repr, ty_to_str};\n+use util::ppaux::Repr;\n \n use middle::trans::type_::Type;\n \n use core::vec;\n use syntax::ast_map::{path, path_mod, path_name};\n use syntax::ast_util;\n use syntax::{ast, ast_map};\n-use syntax::parse::token;\n \n /**\n The main \"translation\" pass for methods.  Generates code\n@@ -716,10 +715,9 @@ pub fn make_vtable(ccx: &mut CrateContext,\n             components.push(ptr)\n         }\n \n-        let name = fmt!(\"%s_vtable_%u\", ty_to_str(ccx.tcx, tydesc.ty), token::gensym(\"vtable\"));\n-\n         let tbl = C_struct(components);\n-        let vt_gvar = do name.as_c_str |buf| {\n+        let vtable = ccx.sess.str_of(gensym_name(\"vtable\"));\n+        let vt_gvar = do vtable.as_c_str |buf| {\n             llvm::LLVMAddGlobal(ccx.llmod, val_ty(tbl).to_ref(), buf)\n         };\n         llvm::LLVMSetInitializer(vt_gvar, tbl);"}, {"sha": "f1172fb1da65fc9063d06a21fdf757d29532829e", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=4e78c1e2a89f65a1827e1f65afc741cee05cee0a", "patch": "@@ -1969,7 +1969,7 @@ static TC_ONCE_CLOSURE: TypeContents =     TypeContents{bits: 0b0001_0000_0000};\n /// An enum with no variants.\n static TC_EMPTY_ENUM: TypeContents =       TypeContents{bits: 0b0010_0000_0000};\n \n-/// Contains a type marked with `#[non_sendable]`\n+/// Contains a type marked with `#[no_send]`\n static TC_NON_SENDABLE: TypeContents =     TypeContents{bits: 0b0100_0000_0000};\n \n /// Is a bare vector, str, function, trait, etc (only relevant at top level).\n@@ -2204,10 +2204,10 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n     }\n \n     fn apply_tc_attr(cx: ctxt, did: def_id, mut tc: TypeContents) -> TypeContents {\n-        if has_attr(cx, did, \"mutable\") {\n+        if has_attr(cx, did, \"no_freeze\") {\n             tc = tc + TC_MUTABLE;\n         }\n-        if has_attr(cx, did, \"non_sendable\") {\n+        if has_attr(cx, did, \"no_send\") {\n             tc = tc + TC_NON_SENDABLE;\n         }\n         tc"}, {"sha": "f0a3f24c307bddfafae66da1b7f51e636cddf7d0", "filename": "src/librustpkg/path_util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=4e78c1e2a89f65a1827e1f65afc741cee05cee0a", "patch": "@@ -40,7 +40,6 @@ static path_entry_separator: &'static str = \":\";\n /// DIR/.rust for any DIR that's the current working directory\n /// or an ancestor of it\n pub fn rust_path() -> ~[Path] {\n-    let env_path: ~str = os::getenv(\"RUST_PATH\").get_or_default(~\"\");\n     let mut env_rust_path: ~[Path] = match os::getenv(\"RUST_PATH\") {\n         Some(env_path) => {\n             let env_path_components: ~[&str] ="}, {"sha": "53ea11f2b0592dfe6b5406ab1390ed2b7e7da42d", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=4e78c1e2a89f65a1827e1f65afc741cee05cee0a", "patch": "@@ -22,7 +22,8 @@ A dynamic, mutable location.\n Similar to a mutable option type, but friendlier.\n */\n \n-#[mutable]\n+#[mutable] // XXX remove after snap\n+#[no_freeze]\n #[deriving(Clone, DeepClone, Eq)]\n #[allow(missing_doc)]\n pub struct Cell<T> {"}, {"sha": "765bf3b36f2850b833995f84b31d5446cac9b026", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=4e78c1e2a89f65a1827e1f65afc741cee05cee0a", "patch": "@@ -983,7 +983,7 @@ impl<'self, A, St> UnfoldrIterator<'self, A, St> {\n     /// Creates a new iterator with the specified closure as the \"iterator\n     /// function\" and an initial state to eventually pass to the iterator\n     #[inline]\n-    pub fn new<'a>(f: &'a fn(&mut St) -> Option<A>, initial_state: St)\n+    pub fn new<'a>(initial_state: St, f: &'a fn(&mut St) -> Option<A>)\n         -> UnfoldrIterator<'a, A, St> {\n         UnfoldrIterator {\n             f: f,\n@@ -1174,7 +1174,7 @@ mod tests {\n             }\n         }\n \n-        let mut it = UnfoldrIterator::new(count, 0);\n+        let mut it = UnfoldrIterator::new(0, count);\n         let mut i = 0;\n         for it.advance |counted| {\n             assert_eq!(counted, i);"}, {"sha": "35842a53a315bab89d0abf7003e9d540e0ab973f", "filename": "src/test/compile-fail/mutable-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Ftest%2Fcompile-fail%2Fmutable-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Ftest%2Fcompile-fail%2Fmutable-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-enum.rs?ref=4e78c1e2a89f65a1827e1f65afc741cee05cee0a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[mutable]\n+#[no_freeze]\n enum Foo { A }\n \n fn bar<T: Freeze>(_: T) {}"}, {"sha": "6f29fcfd96d205738b5384a699f1de719ad6602d", "filename": "src/test/compile-fail/mutable-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Ftest%2Fcompile-fail%2Fmutable-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Ftest%2Fcompile-fail%2Fmutable-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-struct.rs?ref=4e78c1e2a89f65a1827e1f65afc741cee05cee0a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[mutable]\n+#[no_freeze]\n struct Foo { a: int }\n \n fn bar<T: Freeze>(_: T) {}"}, {"sha": "b436bfb8b0fdb5f8accf99168349c420901937f0", "filename": "src/test/compile-fail/non_owned-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Ftest%2Fcompile-fail%2Fnon_owned-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Ftest%2Fcompile-fail%2Fnon_owned-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon_owned-enum.rs?ref=4e78c1e2a89f65a1827e1f65afc741cee05cee0a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[non_sendable]\n+#[no_send]\n enum Foo { A }\n \n fn bar<T: Send>(_: T) {}"}, {"sha": "542c3aa212bb953e12349364dee27822724050d4", "filename": "src/test/compile-fail/non_owned-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Ftest%2Fcompile-fail%2Fnon_owned-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Ftest%2Fcompile-fail%2Fnon_owned-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon_owned-struct.rs?ref=4e78c1e2a89f65a1827e1f65afc741cee05cee0a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[non_sendable]\n+#[no_send]\n struct Foo { a: int }\n \n fn bar<T: Send>(_: T) {}"}, {"sha": "7fcae90a8d1177d28fb8eb40f906fc5602cbb9df", "filename": "src/test/run-pass/unfoldr-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Ftest%2Frun-pass%2Funfoldr-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e78c1e2a89f65a1827e1f65afc741cee05cee0a/src%2Ftest%2Frun-pass%2Funfoldr-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funfoldr-cross-crate.rs?ref=4e78c1e2a89f65a1827e1f65afc741cee05cee0a", "patch": "@@ -24,7 +24,7 @@ fn main() {\n         }\n     }\n \n-    let mut it = UnfoldrIterator::new(count, 0);\n+    let mut it = UnfoldrIterator::new(0, count);\n     let mut i = 0;\n     for it.advance |counted| {\n         assert_eq!(counted, i);"}]}