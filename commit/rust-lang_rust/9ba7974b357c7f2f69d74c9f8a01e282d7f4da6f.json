{"sha": "9ba7974b357c7f2f69d74c9f8a01e282d7f4da6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliYTc5NzRiMzU3YzdmMmY2OWQ3NGM5ZjhhMDFlMjgyZDdmNGRhNmY=", "commit": {"author": {"name": "Darin Morrison", "email": "darinmorrison+git@gmail.com", "date": "2015-03-31T20:14:04Z"}, "committer": {"name": "Darin Morrison", "email": "darinmorrison+git@gmail.com", "date": "2015-03-31T20:17:13Z"}, "message": "book: reword timer bit", "tree": {"sha": "f4d2b16a709f62259e85bc0c57e4b2501285e3d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4d2b16a709f62259e85bc0c57e4b2501285e3d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ba7974b357c7f2f69d74c9f8a01e282d7f4da6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ba7974b357c7f2f69d74c9f8a01e282d7f4da6f", "html_url": "https://github.com/rust-lang/rust/commit/9ba7974b357c7f2f69d74c9f8a01e282d7f4da6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ba7974b357c7f2f69d74c9f8a01e282d7f4da6f/comments", "author": null, "committer": null, "parents": [{"sha": "80bf31dd514055177b22c3dc66836d39eb5b1648", "url": "https://api.github.com/repos/rust-lang/rust/commits/80bf31dd514055177b22c3dc66836d39eb5b1648", "html_url": "https://github.com/rust-lang/rust/commit/80bf31dd514055177b22c3dc66836d39eb5b1648"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "6b814a685424ef83220f8ce19f02d036bfe58b70", "filename": "src/doc/trpl/concurrency.md", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ba7974b357c7f2f69d74c9f8a01e282d7f4da6f/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ba7974b357c7f2f69d74c9f8a01e282d7f4da6f/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fconcurrency.md?ref=9ba7974b357c7f2f69d74c9f8a01e282d7f4da6f", "patch": "@@ -280,13 +280,15 @@ it returns an `Result<T, E>`, and because this is just an example, we `unwrap()`\n it to get a reference to the data. Real code would have more robust error handling\n here. We're then free to mutate it, since we have the lock.\n \n-This timer bit is a bit awkward, however. We have picked a reasonable amount of\n-time to wait, but it's entirely possible that we've picked too high, and that\n-we could be taking less time. It's also possible that we've picked too low,\n-and that we aren't actually finishing this computation.\n-\n-Rust's standard library provides a few more mechanisms for two threads to\n-synchronize with each other. Let's talk about one: channels.\n+Lastly, while the threads are running, we wait on a short timer. But\n+this is not ideal: we may have picked a reasonable amount of time to\n+wait but it's more likely we'll either be waiting longer than\n+necessary or not long enough, depending on just how much time the\n+threads actually take to finish computing when the program runs.\n+\n+A more precise alternative to the timer would be to use one of the\n+mechanisms provided by the Rust standard library for synchronizing\n+threads with each other. Let's talk about one of them: channels.\n \n ## Channels\n "}]}