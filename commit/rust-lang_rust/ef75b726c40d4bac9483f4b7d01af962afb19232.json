{"sha": "ef75b726c40d4bac9483f4b7d01af962afb19232", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNzViNzI2YzQwZDRiYWM5NDgzZjRiN2QwMWFmOTYyYWZiMTkyMzI=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-11-14T04:08:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-14T04:08:05Z"}, "message": "Merge pull request #3200 from scampi/issue-3194\n\ncompute the span after a struct-like item based on the ident description", "tree": {"sha": "555b0fae43a0ffe4371933ef501ae8a4c93a591d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/555b0fae43a0ffe4371933ef501ae8a4c93a591d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef75b726c40d4bac9483f4b7d01af962afb19232", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb65+lCRBK7hj4Ov3rIwAAdHIIALBmhEoiXfXLWFQ09NS+O3ps\n0i4o5hRq7jyQSKdyp0HFIMLzaEnj2JlJwj0bZn7ETBWC15DcvmBhmGyJUPb29SOf\nXsOCwr8Niochpd/d+Sc5NoZMjdpgl95zIZjEbSLBDgRmBWj/dZ4Z9CTAULOqfMhn\nFuyl6zKl7PSxWOm24Z1mB0kkwwavaZ4akkqesBDCS3jvYC1yPb5+FljxAp6OsYrn\n6SxU6DFLixEgY65tAJySCrw6gONsNOFH/mOW0CB23dn+fGcmmJQ2mEYrg4V0FuG0\ntKjuf9FnVo554TwZ5A+4RxtRmPDfo+qqI/Qs4xtbcZqQ+F2FSPW55pFxcKMHNzs=\n=JEmy\n-----END PGP SIGNATURE-----\n", "payload": "tree 555b0fae43a0ffe4371933ef501ae8a4c93a591d\nparent 34333bad20c89e9f6f96c5428924cd4c2f9c1315\nparent a4e97fa17bbf898a0d2675b5292d814cdef0b544\nauthor Nick Cameron <nrc@ncameron.org> 1542168485 +1300\ncommitter GitHub <noreply@github.com> 1542168485 +1300\n\nMerge pull request #3200 from scampi/issue-3194\n\ncompute the span after a struct-like item based on the ident description"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef75b726c40d4bac9483f4b7d01af962afb19232", "html_url": "https://github.com/rust-lang/rust/commit/ef75b726c40d4bac9483f4b7d01af962afb19232", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef75b726c40d4bac9483f4b7d01af962afb19232/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34333bad20c89e9f6f96c5428924cd4c2f9c1315", "url": "https://api.github.com/repos/rust-lang/rust/commits/34333bad20c89e9f6f96c5428924cd4c2f9c1315", "html_url": "https://github.com/rust-lang/rust/commit/34333bad20c89e9f6f96c5428924cd4c2f9c1315"}, {"sha": "a4e97fa17bbf898a0d2675b5292d814cdef0b544", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4e97fa17bbf898a0d2675b5292d814cdef0b544", "html_url": "https://github.com/rust-lang/rust/commit/a4e97fa17bbf898a0d2675b5292d814cdef0b544"}], "stats": {"total": 74, "additions": 71, "deletions": 3}, "files": [{"sha": "a4800e9ee01f6128ddae2e96c64dc1768e53539d", "filename": "src/items.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ef75b726c40d4bac9483f4b7d01af962afb19232/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef75b726c40d4bac9483f4b7d01af962afb19232/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=ef75b726c40d4bac9483f4b7d01af962afb19232", "patch": "@@ -464,7 +464,8 @@ impl<'a> FmtVisitor<'a> {\n                 BracePos::Auto\n             },\n             self.block_indent,\n-            mk_sp(span.lo(), body_start),\n+            // make a span that starts right after `enum Foo`\n+            mk_sp(ident.span.hi(), body_start),\n             last_line_width(&enum_header),\n         )\n         .unwrap();\n@@ -1186,7 +1187,8 @@ fn format_unit_struct(context: &RewriteContext, p: &StructParts, offset: Indent)\n             context.config.brace_style(),\n             BracePos::None,\n             offset,\n-            mk_sp(generics.span.lo(), hi),\n+            // make a span that starts right after `struct Foo`\n+            mk_sp(p.ident.span.hi(), hi),\n             last_line_width(&header_str),\n         )?\n     } else {\n@@ -1208,7 +1210,7 @@ pub fn format_struct_struct(\n     let header_str = struct_parts.format_header(context);\n     result.push_str(&header_str);\n \n-    let header_hi = span.lo() + BytePos(header_str.len() as u32);\n+    let header_hi = struct_parts.ident.span.hi();\n     let body_lo = context.snippet_provider.span_after(span, \"{\");\n \n     let generics_str = match struct_parts.generics {\n@@ -1222,6 +1224,7 @@ pub fn format_struct_struct(\n                 BracePos::Auto\n             },\n             offset,\n+            // make a span that starts right after `struct Foo`\n             mk_sp(header_hi, body_lo),\n             last_line_width(&result),\n         )?,"}, {"sha": "b80ce346b6c36541297269a29438c712ed31fd9e", "filename": "tests/source/issue-3194.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ef75b726c40d4bac9483f4b7d01af962afb19232/tests%2Fsource%2Fissue-3194.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef75b726c40d4bac9483f4b7d01af962afb19232/tests%2Fsource%2Fissue-3194.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3194.rs?ref=ef75b726c40d4bac9483f4b7d01af962afb19232", "patch": "@@ -0,0 +1,13 @@\n+mod m { struct S where A: B; }\n+\n+mod n { struct Foo where A: B { foo: usize } }\n+\n+mod o { enum Bar where A: B { Bar } }\n+\n+mod with_comments {\n+  mod m { struct S /* before where */ where A: B; /* after where */ }\n+  \n+  mod n { struct Foo /* before where */ where A: B /* after where */ { foo: usize } }\n+  \n+  mod o { enum Bar /* before where */ where A: B /* after where */ { Bar } }\n+}"}, {"sha": "a9614913ed14f617ba68220a564f877a5300ba3e", "filename": "tests/target/issue-3194.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ef75b726c40d4bac9483f4b7d01af962afb19232/tests%2Ftarget%2Fissue-3194.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef75b726c40d4bac9483f4b7d01af962afb19232/tests%2Ftarget%2Fissue-3194.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3194.rs?ref=ef75b726c40d4bac9483f4b7d01af962afb19232", "patch": "@@ -0,0 +1,52 @@\n+mod m {\n+    struct S\n+    where\n+        A: B;\n+}\n+\n+mod n {\n+    struct Foo\n+    where\n+        A: B,\n+    {\n+        foo: usize,\n+    }\n+}\n+\n+mod o {\n+    enum Bar\n+    where\n+        A: B,\n+    {\n+        Bar,\n+    }\n+}\n+\n+mod with_comments {\n+    mod m {\n+        struct S\n+        /* before where */\n+        where\n+            A: B; /* after where */\n+    }\n+\n+    mod n {\n+        struct Foo\n+        /* before where */\n+        where\n+            A: B, /* after where */\n+        {\n+            foo: usize,\n+        }\n+    }\n+\n+    mod o {\n+        enum Bar\n+        /* before where */\n+        where\n+            A: B, /* after where */\n+        {\n+            Bar,\n+        }\n+    }\n+}"}]}