{"sha": "1171dc74e0b8c06289d4cd628cc67368820cbbec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNzFkYzc0ZTBiOGMwNjI4OWQ0Y2Q2MjhjYzY3MzY4ODIwY2JiZWM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-11T12:07:32Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-11T12:08:00Z"}, "message": "internal: remove unused param", "tree": {"sha": "8de85c7ee1a6841f8d6476d067b67138b5c93a77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8de85c7ee1a6841f8d6476d067b67138b5c93a77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1171dc74e0b8c06289d4cd628cc67368820cbbec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1171dc74e0b8c06289d4cd628cc67368820cbbec", "html_url": "https://github.com/rust-lang/rust/commit/1171dc74e0b8c06289d4cd628cc67368820cbbec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1171dc74e0b8c06289d4cd628cc67368820cbbec/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5021f10660823f22b3b965348007afec79711e19", "url": "https://api.github.com/repos/rust-lang/rust/commits/5021f10660823f22b3b965348007afec79711e19", "html_url": "https://github.com/rust-lang/rust/commit/5021f10660823f22b3b965348007afec79711e19"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "f199d599d584584a0477a97c2744a83d5f11c5f2", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1171dc74e0b8c06289d4cd628cc67368820cbbec/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1171dc74e0b8c06289d4cd628cc67368820cbbec/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=1171dc74e0b8c06289d4cd628cc67368820cbbec", "patch": "@@ -112,7 +112,7 @@ pub(crate) fn external_docs(\n     let node = token.parent()?;\n     let definition = match_ast! {\n         match node {\n-            ast::NameRef(name_ref) => NameRefClass::classify(&sema, &name_ref).map(|d| d.referenced(sema.db))?,\n+            ast::NameRef(name_ref) => NameRefClass::classify(&sema, &name_ref).map(|d| d.referenced())?,\n             ast::Name(name) => NameClass::classify(&sema, &name).map(|d| d.referenced_or_defined(sema.db))?,\n             _ => return None,\n         }"}, {"sha": "a9557ea5effcd0c50f7e6d2eba6c326dd8a3f723", "filename": "crates/ide/src/goto_declaration.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1171dc74e0b8c06289d4cd628cc67368820cbbec/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1171dc74e0b8c06289d4cd628cc67368820cbbec/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_declaration.rs?ref=1171dc74e0b8c06289d4cd628cc67368820cbbec", "patch": "@@ -25,7 +25,7 @@ pub(crate) fn goto_declaration(\n         match parent {\n             ast::NameRef(name_ref) => {\n                 let name_kind = NameRefClass::classify(&sema, &name_ref)?;\n-                name_kind.referenced(sema.db)\n+                name_kind.referenced()\n             },\n             ast::Name(name) => {\n                 NameClass::classify(&sema, &name)?.referenced_or_defined(sema.db)"}, {"sha": "d0f7d8de89d9cf364690e7496f3f12640fa3c0e1", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1171dc74e0b8c06289d4cd628cc67368820cbbec/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1171dc74e0b8c06289d4cd628cc67368820cbbec/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=1171dc74e0b8c06289d4cd628cc67368820cbbec", "patch": "@@ -140,7 +140,7 @@ pub(crate) fn reference_definition(\n         |lifetime| NameRefClass::classify_lifetime(sema, lifetime),\n         |name_ref| NameRefClass::classify(sema, name_ref),\n     )?;\n-    let def = name_kind.referenced(sema.db);\n+    let def = name_kind.referenced();\n     def.try_to_nav(sema.db)\n }\n "}, {"sha": "c1f37e9ed028e8ded314adf02c7720cfe8dec5ac", "filename": "crates/ide/src/goto_implementation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1171dc74e0b8c06289d4cd628cc67368820cbbec/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1171dc74e0b8c06289d4cd628cc67368820cbbec/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_implementation.rs?ref=1171dc74e0b8c06289d4cd628cc67368820cbbec", "patch": "@@ -32,7 +32,7 @@ pub(crate) fn goto_implementation(\n             NameClass::classify(&sema, name).map(|class| class.referenced_or_defined(sema.db))\n         }\n         ast::NameLike::NameRef(name_ref) => {\n-            NameRefClass::classify(&sema, name_ref).map(|class| class.referenced(sema.db))\n+            NameRefClass::classify(&sema, name_ref).map(|class| class.referenced())\n         }\n         ast::NameLike::Lifetime(_) => None,\n     }?;"}, {"sha": "2cce43b41a925627e26e406cb0bc7a875f2a408a", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1171dc74e0b8c06289d4cd628cc67368820cbbec/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1171dc74e0b8c06289d4cd628cc67368820cbbec/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=1171dc74e0b8c06289d4cd628cc67368820cbbec", "patch": "@@ -101,10 +101,10 @@ pub(crate) fn hover(\n                 def => def.defined(db),\n             }),\n             ast::NameRef(name_ref) => {\n-                NameRefClass::classify(&sema, &name_ref).map(|d| d.referenced(db))\n+                NameRefClass::classify(&sema, &name_ref).map(|d| d.referenced())\n             },\n             ast::Lifetime(lifetime) => NameClass::classify_lifetime(&sema, &lifetime).map_or_else(\n-                || NameRefClass::classify_lifetime(&sema, &lifetime).map(|d| d.referenced(db)),\n+                || NameRefClass::classify_lifetime(&sema, &lifetime).map(|d| d.referenced()),\n                 |d| d.defined(db),\n             ),\n "}, {"sha": "9d0b5f8f06e157864b6a2b3c47e44a9beac85a85", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1171dc74e0b8c06289d4cd628cc67368820cbbec/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1171dc74e0b8c06289d4cd628cc67368820cbbec/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=1171dc74e0b8c06289d4cd628cc67368820cbbec", "patch": "@@ -116,14 +116,12 @@ pub(crate) fn find_def(\n     offset: TextSize,\n ) -> Option<Definition> {\n     let def = match sema.find_node_at_offset_with_descend(syntax, offset)? {\n-        ast::NameLike::NameRef(name_ref) => {\n-            NameRefClass::classify(sema, &name_ref)?.referenced(sema.db)\n-        }\n+        ast::NameLike::NameRef(name_ref) => NameRefClass::classify(sema, &name_ref)?.referenced(),\n         ast::NameLike::Name(name) => {\n             NameClass::classify(sema, &name)?.referenced_or_defined(sema.db)\n         }\n         ast::NameLike::Lifetime(lifetime) => NameRefClass::classify_lifetime(sema, &lifetime)\n-            .map(|class| class.referenced(sema.db))\n+            .map(|class| class.referenced())\n             .or_else(|| {\n                 NameClass::classify_lifetime(sema, &lifetime)\n                     .map(|class| class.referenced_or_defined(sema.db))"}, {"sha": "a1a03e775eab77b4e57ccc90352f0ead2f2f43a8", "filename": "crates/ide/src/rename.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1171dc74e0b8c06289d4cd628cc67368820cbbec/crates%2Fide%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1171dc74e0b8c06289d4cd628cc67368820cbbec/crates%2Fide%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frename.rs?ref=1171dc74e0b8c06289d4cd628cc67368820cbbec", "patch": "@@ -112,7 +112,7 @@ fn find_definition(\n         }\n         ast::NameLike::NameRef(name_ref) => {\n             if let Some(def) =\n-                NameRefClass::classify(sema, &name_ref).map(|class| class.referenced(sema.db))\n+                NameRefClass::classify(sema, &name_ref).map(|class| class.referenced())\n             {\n                 // if the name differs from the definitions name it has to be an alias\n                 if def.name(sema.db).map_or(false, |it| it.to_string() != name_ref.text()) {\n@@ -124,7 +124,7 @@ fn find_definition(\n             }\n         }\n         ast::NameLike::Lifetime(lifetime) => NameRefClass::classify_lifetime(sema, &lifetime)\n-            .map(|class| NameRefClass::referenced(class, sema.db))\n+            .map(|class| class.referenced())\n             .or_else(|| {\n                 NameClass::classify_lifetime(sema, &lifetime)\n                     .map(|it| it.referenced_or_defined(sema.db))"}, {"sha": "eb6f7a7e6c5124454a441e8a96f7b1eb2762d0ac", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1171dc74e0b8c06289d4cd628cc67368820cbbec/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1171dc74e0b8c06289d4cd628cc67368820cbbec/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=1171dc74e0b8c06289d4cd628cc67368820cbbec", "patch": "@@ -638,7 +638,7 @@ fn vars_used_in_body(ctx: &AssistContext, body: &FunctionBody) -> Vec<Local> {\n     body.descendants()\n         .filter_map(ast::NameRef::cast)\n         .filter_map(|name_ref| NameRefClass::classify(&ctx.sema, &name_ref))\n-        .map(|name_kind| name_kind.referenced(ctx.db()))\n+        .map(|name_kind| name_kind.referenced())\n         .filter_map(|definition| match definition {\n             Definition::Local(local) => Some(local),\n             _ => None,"}, {"sha": "2f944c53e3bb006685988eeedb6c4826b726b35e", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1171dc74e0b8c06289d4cd628cc67368820cbbec/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1171dc74e0b8c06289d4cd628cc67368820cbbec/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=1171dc74e0b8c06289d4cd628cc67368820cbbec", "patch": "@@ -186,7 +186,7 @@ impl NameClass {\n                             })\n                             .and_then(|name_ref| NameRefClass::classify(sema, &name_ref))?;\n \n-                        Some(NameClass::Definition(name_ref_class.referenced(sema.db)))\n+                        Some(NameClass::Definition(name_ref_class.referenced()))\n                     } else {\n                         let extern_crate = it.syntax().parent().and_then(ast::ExternCrate::cast)?;\n                         let resolved = sema.resolve_extern_crate(&extern_crate)?;\n@@ -309,7 +309,7 @@ pub enum NameRefClass {\n \n impl NameRefClass {\n     /// `Definition`, which this name refers to.\n-    pub fn referenced(self, _db: &dyn HirDatabase) -> Definition {\n+    pub fn referenced(self) -> Definition {\n         match self {\n             NameRefClass::Definition(def) => def,\n             NameRefClass::FieldShorthand { local_ref, field_ref: _ } => {"}]}