{"sha": "ff14cac621ce63d848abf615e45acd86fec32f50", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMTRjYWM2MjFjZTYzZDg0OGFiZjYxNWU0NWFjZDg2ZmVjMzJmNTA=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-31T16:58:57Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-15T18:32:30Z"}, "message": "Index Modules using their LocalDefId.", "tree": {"sha": "dac1e0e02a38ab94b0955239218e750d295981ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dac1e0e02a38ab94b0955239218e750d295981ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff14cac621ce63d848abf615e45acd86fec32f50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff14cac621ce63d848abf615e45acd86fec32f50", "html_url": "https://github.com/rust-lang/rust/commit/ff14cac621ce63d848abf615e45acd86fec32f50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff14cac621ce63d848abf615e45acd86fec32f50/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7878fa70d6ddac3528d6523ac732fade6e5ae93b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7878fa70d6ddac3528d6523ac732fade6e5ae93b", "html_url": "https://github.com/rust-lang/rust/commit/7878fa70d6ddac3528d6523ac732fade6e5ae93b"}], "stats": {"total": 65, "additions": 27, "deletions": 38}, "files": [{"sha": "4a0c44599056583f0d18431feec3f62f513d561f", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff14cac621ce63d848abf615e45acd86fec32f50/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff14cac621ce63d848abf615e45acd86fec32f50/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=ff14cac621ce63d848abf615e45acd86fec32f50", "patch": "@@ -35,10 +35,10 @@ impl ItemLowerer<'_, '_, '_> {\n \n impl<'a> Visitor<'a> for ItemLowerer<'a, '_, '_> {\n     fn visit_mod(&mut self, m: &'a Mod, _s: Span, _attrs: &[Attribute], n: NodeId) {\n-        let hir_id = self.lctx.lower_node_id(n);\n+        let def_id = self.lctx.lower_node_id(n).expect_owner();\n \n         self.lctx.modules.insert(\n-            hir_id,\n+            def_id,\n             hir::ModuleItems {\n                 items: BTreeSet::new(),\n                 trait_items: BTreeSet::new(),\n@@ -48,7 +48,7 @@ impl<'a> Visitor<'a> for ItemLowerer<'a, '_, '_> {\n         );\n \n         let old = self.lctx.current_module;\n-        self.lctx.current_module = hir_id;\n+        self.lctx.current_module = def_id;\n         visit::walk_mod(self, m);\n         self.lctx.current_module = old;\n     }"}, {"sha": "8a12206a4c2f7fa29999e23bf8c78a8dcbc1a231", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff14cac621ce63d848abf615e45acd86fec32f50/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff14cac621ce63d848abf615e45acd86fec32f50/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=ff14cac621ce63d848abf615e45acd86fec32f50", "patch": "@@ -48,7 +48,7 @@ use rustc_data_structures::sync::Lrc;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace, PartialRes, PerNS, Res};\n-use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId, CRATE_DEF_ID};\n use rustc_hir::definitions::{DefKey, DefPathData, Definitions};\n use rustc_hir::intravisit;\n use rustc_hir::{ConstArg, GenericArg, ParamName};\n@@ -110,7 +110,7 @@ struct LoweringContext<'a, 'hir: 'a> {\n \n     trait_impls: BTreeMap<DefId, Vec<hir::HirId>>,\n \n-    modules: BTreeMap<hir::HirId, hir::ModuleItems>,\n+    modules: BTreeMap<LocalDefId, hir::ModuleItems>,\n \n     generator_kind: Option<hir::GeneratorKind>,\n \n@@ -158,7 +158,7 @@ struct LoweringContext<'a, 'hir: 'a> {\n     /// vector.\n     in_scope_lifetimes: Vec<ParamName>,\n \n-    current_module: hir::HirId,\n+    current_module: LocalDefId,\n \n     type_def_lifetime_params: DefIdMap<usize>,\n \n@@ -314,8 +314,8 @@ pub fn lower_crate<'a, 'hir>(\n         is_in_dyn_type: false,\n         anonymous_lifetime_mode: AnonymousLifetimeMode::PassThrough,\n         type_def_lifetime_params: Default::default(),\n-        current_module: hir::CRATE_HIR_ID,\n-        current_hir_id_owner: vec![(LocalDefId { local_def_index: CRATE_DEF_INDEX }, 0)],\n+        current_module: CRATE_DEF_ID,\n+        current_hir_id_owner: vec![(CRATE_DEF_ID, 0)],\n         item_local_id_counters: Default::default(),\n         node_id_to_hir_id: IndexVec::new(),\n         generator_kind: None,"}, {"sha": "c9c670fdd4415e959b47992da1a6ae43e536ccbe", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff14cac621ce63d848abf615e45acd86fec32f50/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff14cac621ce63d848abf615e45acd86fec32f50/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=ff14cac621ce63d848abf615e45acd86fec32f50", "patch": "@@ -668,7 +668,7 @@ pub struct Crate<'hir> {\n \n     /// A list of modules written out in the order in which they\n     /// appear in the crate. This includes the main crate module.\n-    pub modules: BTreeMap<HirId, ModuleItems>,\n+    pub modules: BTreeMap<LocalDefId, ModuleItems>,\n     /// A list of proc macro HirIds, written out in the order in which\n     /// they are declared in the static array generated by proc_macro_harness.\n     pub proc_macros: Vec<HirId>,"}, {"sha": "544da4cd9aa7d44cd6f9df777b659011358932f0", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ff14cac621ce63d848abf615e45acd86fec32f50/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff14cac621ce63d848abf615e45acd86fec32f50/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=ff14cac621ce63d848abf615e45acd86fec32f50", "patch": "@@ -831,12 +831,11 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n             },\n             {\n                 par_iter(&tcx.hir().krate().modules).for_each(|(&module, _)| {\n-                    let local_def_id = tcx.hir().local_def_id(module);\n-                    tcx.ensure().check_mod_loops(local_def_id);\n-                    tcx.ensure().check_mod_attrs(local_def_id);\n-                    tcx.ensure().check_mod_naked_functions(local_def_id);\n-                    tcx.ensure().check_mod_unstable_api_usage(local_def_id);\n-                    tcx.ensure().check_mod_const_bodies(local_def_id);\n+                    tcx.ensure().check_mod_loops(module);\n+                    tcx.ensure().check_mod_attrs(module);\n+                    tcx.ensure().check_mod_naked_functions(module);\n+                    tcx.ensure().check_mod_unstable_api_usage(module);\n+                    tcx.ensure().check_mod_const_bodies(module);\n                 });\n             }\n         );\n@@ -861,10 +860,8 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n                         // \"not all control paths return a value\" is reported here.\n                         //\n                         // maybe move the check to a MIR pass?\n-                        let local_def_id = tcx.hir().local_def_id(module);\n-\n-                        tcx.ensure().check_mod_liveness(local_def_id);\n-                        tcx.ensure().check_mod_intrinsics(local_def_id);\n+                        tcx.ensure().check_mod_liveness(module);\n+                        tcx.ensure().check_mod_intrinsics(module);\n                     });\n                 });\n             }\n@@ -926,7 +923,7 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n             {\n                 sess.time(\"privacy_checking_modules\", || {\n                     par_iter(&tcx.hir().krate().modules).for_each(|(&module, _)| {\n-                        tcx.ensure().check_mod_privacy(tcx.hir().local_def_id(module));\n+                        tcx.ensure().check_mod_privacy(module);\n                     });\n                 });\n             }"}, {"sha": "e019b621aa359a378069ce079a0623471446188f", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff14cac621ce63d848abf615e45acd86fec32f50/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff14cac621ce63d848abf615e45acd86fec32f50/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=ff14cac621ce63d848abf615e45acd86fec32f50", "patch": "@@ -496,7 +496,7 @@ pub fn check_crate<'tcx, T: LateLintPass<'tcx>>(\n             tcx.sess.time(\"module_lints\", || {\n                 // Run per-module lints\n                 par_iter(&tcx.hir().krate().modules).for_each(|(&module, _)| {\n-                    tcx.ensure().lint_mod(tcx.hir().local_def_id(module));\n+                    tcx.ensure().lint_mod(module);\n                 });\n             });\n         },"}, {"sha": "5f9cf8771eadab2a6ffc8befbecec0815d728d12", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff14cac621ce63d848abf615e45acd86fec32f50/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff14cac621ce63d848abf615e45acd86fec32f50/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=ff14cac621ce63d848abf615e45acd86fec32f50", "patch": "@@ -73,11 +73,7 @@ pub fn provide(providers: &mut Providers) {\n     };\n     providers.hir_crate = |tcx, _| tcx.untracked_crate;\n     providers.index_hir = map::index_hir;\n-    providers.hir_module_items = |tcx, id| {\n-        let hir = tcx.hir();\n-        let module = hir.local_def_id_to_hir_id(id);\n-        &tcx.untracked_crate.modules[&module]\n-    };\n+    providers.hir_module_items = |tcx, id| &tcx.untracked_crate.modules[&id];\n     providers.hir_owner = |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].signature;\n     providers.hir_owner_nodes = |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].with_bodies.as_deref();\n     providers.def_span = |tcx, def_id| tcx.hir().span_if_local(def_id).unwrap_or(DUMMY_SP);"}, {"sha": "79e3b5952acaf22aa28f438d2cc52403fb63b851", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ff14cac621ce63d848abf615e45acd86fec32f50/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff14cac621ce63d848abf615e45acd86fec32f50/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=ff14cac621ce63d848abf615e45acd86fec32f50", "patch": "@@ -14,12 +14,9 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n     let errors = Lock::new(Vec::new());\n     let hir_map = tcx.hir();\n \n-    par_iter(&hir_map.krate().modules).for_each(|(module_id, _)| {\n-        let local_def_id = hir_map.local_def_id(*module_id);\n-        hir_map.visit_item_likes_in_module(\n-            local_def_id,\n-            &mut OuterVisitor { hir_map, errors: &errors },\n-        );\n+    par_iter(&hir_map.krate().modules).for_each(|(&module_id, _)| {\n+        hir_map\n+            .visit_item_likes_in_module(module_id, &mut OuterVisitor { hir_map, errors: &errors });\n     });\n \n     let errors = errors.into_inner();"}, {"sha": "7713381e62e467b8c739cf026e1e6b92f983591d", "filename": "compiler/rustc_typeck/src/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff14cac621ce63d848abf615e45acd86fec32f50/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff14cac621ce63d848abf615e45acd86fec32f50/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs?ref=ff14cac621ce63d848abf615e45acd86fec32f50", "patch": "@@ -59,7 +59,7 @@ pub fn impl_wf_check(tcx: TyCtxt<'_>) {\n     // but it's one that we must perform earlier than the rest of\n     // WfCheck.\n     for &module in tcx.hir().krate().modules.keys() {\n-        tcx.ensure().check_mod_impl_wf(tcx.hir().local_def_id(module));\n+        tcx.ensure().check_mod_impl_wf(module);\n     }\n }\n "}, {"sha": "6ddc26efeae35ac8a402f452edfe5182df83b817", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff14cac621ce63d848abf615e45acd86fec32f50/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff14cac621ce63d848abf615e45acd86fec32f50/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=ff14cac621ce63d848abf615e45acd86fec32f50", "patch": "@@ -369,7 +369,7 @@ pub fn check_crate(tcx: TyCtxt<'_>) -> Result<(), ErrorReported> {\n     tcx.sess.track_errors(|| {\n         tcx.sess.time(\"type_collecting\", || {\n             for &module in tcx.hir().krate().modules.keys() {\n-                tcx.ensure().collect_mod_item_types(tcx.hir().local_def_id(module));\n+                tcx.ensure().collect_mod_item_types(module);\n             }\n         });\n     })?;\n@@ -401,7 +401,7 @@ pub fn check_crate(tcx: TyCtxt<'_>) -> Result<(), ErrorReported> {\n     // NOTE: This is copy/pasted in librustdoc/core.rs and should be kept in sync.\n     tcx.sess.time(\"item_types_checking\", || {\n         for &module in tcx.hir().krate().modules.keys() {\n-            tcx.ensure().check_mod_item_types(tcx.hir().local_def_id(module));\n+            tcx.ensure().check_mod_item_types(module);\n         }\n     });\n "}, {"sha": "d79c47bbe3de652fe804204259b91df3d63ff977", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ff14cac621ce63d848abf615e45acd86fec32f50/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff14cac621ce63d848abf615e45acd86fec32f50/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=ff14cac621ce63d848abf615e45acd86fec32f50", "patch": "@@ -479,7 +479,7 @@ crate fn run_global_ctxt(\n     // NOTE: This is copy/pasted from typeck/lib.rs and should be kept in sync with those changes.\n     tcx.sess.time(\"item_types_checking\", || {\n         for &module in tcx.hir().krate().modules.keys() {\n-            tcx.ensure().check_mod_item_types(tcx.hir().local_def_id(module));\n+            tcx.ensure().check_mod_item_types(module);\n         }\n     });\n     tcx.sess.abort_if_errors();\n@@ -488,8 +488,7 @@ crate fn run_global_ctxt(\n     });\n     tcx.sess.time(\"check_mod_attrs\", || {\n         for &module in tcx.hir().krate().modules.keys() {\n-            let local_def_id = tcx.hir().local_def_id(module);\n-            tcx.ensure().check_mod_attrs(local_def_id);\n+            tcx.ensure().check_mod_attrs(module);\n         }\n     });\n "}]}