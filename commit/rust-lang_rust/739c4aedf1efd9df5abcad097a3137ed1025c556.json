{"sha": "739c4aedf1efd9df5abcad097a3137ed1025c556", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczOWM0YWVkZjFlZmQ5ZGY1YWJjYWQwOTdhMzEzN2VkMTAyNWM1NTY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-25T20:54:54Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-25T21:06:18Z"}, "message": "stdlib: Separate basic I/O reading functionality into a separate buf_reader object, like writing", "tree": {"sha": "3ab30d410024b6d174d8cf67bfb04ef91a7ab95f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ab30d410024b6d174d8cf67bfb04ef91a7ab95f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/739c4aedf1efd9df5abcad097a3137ed1025c556", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/739c4aedf1efd9df5abcad097a3137ed1025c556", "html_url": "https://github.com/rust-lang/rust/commit/739c4aedf1efd9df5abcad097a3137ed1025c556", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/739c4aedf1efd9df5abcad097a3137ed1025c556/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91c2b82b0947eece64df03f9e03d65a27d4ef0bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/91c2b82b0947eece64df03f9e03d65a27d4ef0bf", "html_url": "https://github.com/rust-lang/rust/commit/91c2b82b0947eece64df03f9e03d65a27d4ef0bf"}], "stats": {"total": 110, "additions": 85, "deletions": 25}, "files": [{"sha": "fe06bf4af9fd3deabff15ef43a3b7f0d6da4b65a", "filename": "src/lib/io.rs", "status": "modified", "additions": 81, "deletions": 24, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/739c4aedf1efd9df5abcad097a3137ed1025c556/src%2Flib%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739c4aedf1efd9df5abcad097a3137ed1025c556/src%2Flib%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fio.rs?ref=739c4aedf1efd9df5abcad097a3137ed1025c556", "patch": "@@ -11,8 +11,25 @@ native \"rust\" mod rustrt {\n \n tag seek_style {seek_set; seek_end; seek_cur;}\n \n+// The raw underlying reader class. All readers must implement this.\n+type buf_reader =\n+    state obj {\n+        impure fn read(uint len) -> vec[u8];\n+        impure fn unread_byte(int byte);\n+        impure fn eof() -> bool;\n+\n+        // FIXME: Seekable really should be orthogonal. We will need\n+        // inheritance.\n+        impure fn seek(int offset, seek_style whence);\n+        impure fn tell() -> uint;\n+    };\n+\n+// Convenience methods for reading.\n type reader =\n     state obj {\n+          // FIXME: This should inherit from buf_reader.\n+          impure fn get_buf_reader() -> buf_reader;\n+\n           impure fn read_byte() -> int;\n           impure fn unread_byte(int byte);\n           impure fn read_bytes(uint len) -> vec[u8];\n@@ -35,21 +52,58 @@ fn convert_whence(seek_style whence) -> int {\n     }\n }\n \n-state obj FILE_reader(os.libc.FILE f, bool must_close) {\n-    impure fn read_byte() -> int {\n-        ret os.libc.fgetc(f);\n+state obj FILE_buf_reader(os.libc.FILE f, bool must_close) {\n+    impure fn read(uint len) -> vec[u8] {\n+        auto buf = _vec.alloc[u8](len);\n+        auto read = os.libc.fread(_vec.buf[u8](buf), 1u, len, f);\n+        _vec.len_set[u8](buf, read);\n+        ret buf;\n     }\n     impure fn unread_byte(int byte) {\n         os.libc.ungetc(byte, f);\n     }\n+    impure fn eof() -> bool {\n+        ret os.libc.feof(f) != 0;\n+    }\n+    impure fn seek(int offset, seek_style whence) {\n+        check (os.libc.fseek(f, offset, convert_whence(whence)) == 0);\n+    }\n+    impure fn tell() -> uint {\n+        ret os.libc.ftell(f) as uint;\n+    }\n+    drop {\n+        if (must_close) { os.libc.fclose(f); }\n+    }\n+}\n+\n+// FIXME: When we have a \"self\" keyword, move this into read_byte(). This is\n+// only here so that multiple method implementations below can use it.\n+//\n+// FIXME: Return value should be option[u8], not int.\n+impure fn read_byte_from_buf_reader(buf_reader rdr) -> int {\n+    auto buf = rdr.read(1u);\n+    if (_vec.len[u8](buf) == 0u) {\n+        ret -1;\n+    }\n+    ret buf.(0) as int;\n+}\n+\n+// FIXME: Convert this into pseudomethods on buf_reader.\n+state obj new_reader(buf_reader rdr) {\n+    impure fn get_buf_reader() -> buf_reader {\n+        ret rdr;\n+    }\n+    impure fn read_byte() -> int {\n+        ret read_byte_from_buf_reader(rdr);\n+    }\n+    impure fn unread_byte(int byte) {\n+        ret rdr.unread_byte(byte);\n+    }\n     impure fn read_bytes(uint len) -> vec[u8] {\n-        auto buf = _vec.alloc[u8](len);\n-        auto read = os.libc.fread(_vec.buf[u8](buf), 1u, len, f);\n-        _vec.len_set[u8](buf, read);\n-        ret buf;\n+        ret rdr.read(len);\n     }\n     impure fn read_char() -> char {\n-        auto c0 = os.libc.fgetc(f);\n+        auto c0 = read_byte_from_buf_reader(rdr);\n         if (c0 == -1) {ret -1 as char;} // FIXME will this stay valid?\n         auto b0 = c0 as u8;\n         auto w = _str.utf8_char_width(b0);\n@@ -58,7 +112,7 @@ state obj FILE_reader(os.libc.FILE f, bool must_close) {\n         auto val = 0u;\n         while (w > 1u) {\n             w -= 1u;\n-            auto next = os.libc.fgetc(f);\n+            auto next = read_byte_from_buf_reader(rdr);\n             check(next > -1);\n             check(next & 0xc0 == 0x80);\n             val <<= 6u;\n@@ -69,17 +123,14 @@ state obj FILE_reader(os.libc.FILE f, bool must_close) {\n         ret val as char;\n     }        \n     impure fn eof() -> bool {\n-      auto ch = os.libc.fgetc(f);\n-      if (ch == -1) {ret true;}\n-      os.libc.ungetc(ch, f);\n-      ret false;\n+        ret rdr.eof();\n     }\n     impure fn read_line() -> str {\n         let vec[u8] buf = vec();\n         // No break yet in rustc\n         auto go_on = true;\n         while (go_on) {\n-            auto ch = os.libc.fgetc(f);\n+            auto ch = read_byte_from_buf_reader(rdr);\n             if (ch == -1 || ch == 10) {go_on = false;}\n             else {_vec.push[u8](buf, ch as u8);}\n         }\n@@ -89,7 +140,7 @@ state obj FILE_reader(os.libc.FILE f, bool must_close) {\n         let vec[u8] buf = vec();\n         auto go_on = true;\n         while (go_on) {\n-            auto ch = os.libc.fgetc(f);\n+            auto ch = read_byte_from_buf_reader(rdr);\n             if (ch < 1) {go_on = false;}\n             else {_vec.push[u8](buf, ch as u8);}\n         }\n@@ -100,7 +151,7 @@ state obj FILE_reader(os.libc.FILE f, bool must_close) {\n         auto val = 0u;\n         auto pos = 0u;\n         while (size > 0u) {\n-            val += (os.libc.fgetc(f) as uint) << pos;\n+            val += (read_byte_from_buf_reader(rdr) as uint) << pos;\n             pos += 8u;\n             size -= 1u;\n         }\n@@ -110,25 +161,22 @@ state obj FILE_reader(os.libc.FILE f, bool must_close) {\n         auto val = 0u;\n         auto pos = 0u;\n         while (size > 0u) {\n-            val += (os.libc.fgetc(f) as uint) << pos;\n+            val += (read_byte_from_buf_reader(rdr) as uint) << pos;\n             pos += 8u;\n             size -= 1u;\n         }\n         ret val as int;\n     }\n     impure fn seek(int offset, seek_style whence) {\n-        check(os.libc.fseek(f, offset, convert_whence(whence)) == 0);\n+        ret rdr.seek(offset, whence);\n     }\n     impure fn tell() -> uint {\n-        ret os.libc.ftell(f) as uint;\n-    }\n-    drop {\n-        if (must_close) {os.libc.fclose(f);}\n+        ret rdr.tell();\n     }\n }\n \n fn stdin() -> reader {\n-    ret FILE_reader(rustrt.rust_get_stdin(), false);\n+    ret new_reader(FILE_buf_reader(rustrt.rust_get_stdin(), false));\n }\n \n fn file_reader(str path) -> reader {\n@@ -137,9 +185,17 @@ fn file_reader(str path) -> reader {\n         log \"error opening \" + path;\n         fail;\n     }\n-    ret FILE_reader(f, true);\n+    ret new_reader(FILE_buf_reader(f, true));\n }\n \n+\n+// Byte buffer readers\n+\n+//state obj byte_buf_reader(vec[mutable? u8] buf) {\n+//    fn read(\n+//}\n+\n+\n // Writing\n \n tag fileflag {\n@@ -152,6 +208,7 @@ tag fileflag {\n type buf_writer = state obj {\n   fn write(vec[u8] v);\n \n+  // FIXME: Seekable really should be orthogonal. We will need inheritance.\n   fn seek(int offset, seek_style whence);\n   fn tell() -> uint; // FIXME: eventually u64\n };"}, {"sha": "d5230e9ae09c4290979f4a404b460d8d59370b77", "filename": "src/lib/linux_os.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/739c4aedf1efd9df5abcad097a3137ed1025c556/src%2Flib%2Flinux_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739c4aedf1efd9df5abcad097a3137ed1025c556/src%2Flib%2Flinux_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flinux_os.rs?ref=739c4aedf1efd9df5abcad097a3137ed1025c556", "patch": "@@ -17,6 +17,7 @@ native mod libc = \"libc.so.6\" {\n     fn fclose(FILE f);\n     fn fgetc(FILE f) -> int;\n     fn ungetc(int c, FILE f);\n+    fn feof(FILE f) -> int;\n     fn fread(vbuf buf, uint size, uint n, FILE f) -> uint;\n     fn fwrite(vbuf buf, uint size, uint n, FILE f) -> uint;\n     fn fseek(FILE f, int offset, int whence) -> int;"}, {"sha": "b0980bc5225810a0cb0a34a4fd4cdc448439c280", "filename": "src/lib/macos_os.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/739c4aedf1efd9df5abcad097a3137ed1025c556/src%2Flib%2Fmacos_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739c4aedf1efd9df5abcad097a3137ed1025c556/src%2Flib%2Fmacos_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmacos_os.rs?ref=739c4aedf1efd9df5abcad097a3137ed1025c556", "patch": "@@ -14,6 +14,7 @@ native mod libc = \"libc.dylib\" {\n     fn fclose(FILE f);\n     fn fgetc(FILE f) -> int;\n     fn ungetc(int c, FILE f);\n+    fn feof(FILE f) -> int;\n     fn fread(vbuf buf, uint size, uint n, FILE f) -> uint;\n     fn fwrite(vbuf buf, uint size, uint n, FILE f) -> uint;\n     fn fseek(FILE f, int offset, int whence) -> int;"}, {"sha": "105d01d591fd82901742d6ca5f7c03d5c3a50081", "filename": "src/lib/run_program.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/739c4aedf1efd9df5abcad097a3137ed1025c556/src%2Flib%2Frun_program.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739c4aedf1efd9df5abcad097a3137ed1025c556/src%2Flib%2Frun_program.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Frun_program.rs?ref=739c4aedf1efd9df5abcad097a3137ed1025c556", "patch": "@@ -48,7 +48,7 @@ impure fn start_program(str prog, vec[str] args) -> @program {\n             ret io.new_writer(io.fd_buf_writer(in_fd, false));\n         }\n         fn output() -> io.reader {\n-            ret io.FILE_reader(out_file, false);\n+            ret io.new_reader(io.FILE_buf_reader(out_file, false));\n         }\n         impure fn close_input() {\n             os.libc.close(in_fd);"}, {"sha": "b9191a480d952f8757890add2bcf8bd05deb8c1f", "filename": "src/lib/win32_os.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/739c4aedf1efd9df5abcad097a3137ed1025c556/src%2Flib%2Fwin32_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739c4aedf1efd9df5abcad097a3137ed1025c556/src%2Flib%2Fwin32_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fwin32_os.rs?ref=739c4aedf1efd9df5abcad097a3137ed1025c556", "patch": "@@ -13,6 +13,7 @@ native mod libc = \"msvcrt.dll\" {\n     fn fclose(FILE f);\n     fn fgetc(FILE f) -> int;\n     fn ungetc(int c, FILE f);\n+    fn feof(FILE f) -> int;\n     fn fread(vbuf buf, uint size, uint n, FILE f) -> uint;\n     fn fwrite(vbuf buf, uint size, uint n, FILE f) -> uint;\n     fn fseek(FILE f, int offset, int whence) -> int;"}]}