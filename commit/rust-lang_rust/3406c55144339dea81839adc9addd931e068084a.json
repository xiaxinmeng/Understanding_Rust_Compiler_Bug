{"sha": "3406c55144339dea81839adc9addd931e068084a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MDZjNTUxNDQzMzlkZWE4MTgzOWFkYzlhZGRkOTMxZTA2ODA4NGE=", "commit": {"author": {"name": "Josh Stone", "email": "cuviper@gmail.com", "date": "2016-05-21T23:36:25Z"}, "committer": {"name": "Josh Stone", "email": "cuviper@gmail.com", "date": "2016-05-22T07:09:33Z"}, "message": "mk: Add --enable-local-rebuild to bootstrap from the current release\n\nIn Linux distributions, it is often necessary to rebuild packages for\ncases like applying new patches or linking against new system libraries.\nIn this scenario, the rustc in the distro build environment may already\nmatch the current release that we're trying to rebuild.  Thus we don't\nwant to use the prior release's bootstrap key, nor `--cfg stage0` for\nthe prior unstable features.\n\nThe new `configure --enable-local-rebuild` option specifies that we are\nrebuilding from the current release.  The current bootstrap key is used\nfor the local rustc, and current stage1 features are also assumed.", "tree": {"sha": "c0b12c827943382bc01269634f43949248ce0f95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0b12c827943382bc01269634f43949248ce0f95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3406c55144339dea81839adc9addd931e068084a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3406c55144339dea81839adc9addd931e068084a", "html_url": "https://github.com/rust-lang/rust/commit/3406c55144339dea81839adc9addd931e068084a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3406c55144339dea81839adc9addd931e068084a/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14d6a10c597a5f1f95a2f0125a87e2107b5d80ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/14d6a10c597a5f1f95a2f0125a87e2107b5d80ff", "html_url": "https://github.com/rust-lang/rust/commit/14d6a10c597a5f1f95a2f0125a87e2107b5d80ff"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "b7053c5c54f5612fbc802c73a1b039f3b3767486", "filename": "configure", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3406c55144339dea81839adc9addd931e068084a/configure", "raw_url": "https://github.com/rust-lang/rust/raw/3406c55144339dea81839adc9addd931e068084a/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=3406c55144339dea81839adc9addd931e068084a", "patch": "@@ -599,6 +599,7 @@ opt debug-assertions 0 \"build with debugging assertions\"\n opt fast-make 0 \"use .gitmodules as timestamp for submodule deps\"\n opt ccache 0 \"invoke gcc/clang via ccache to reuse object files between builds\"\n opt local-rust 0 \"use an installed rustc rather than downloading a snapshot\"\n+opt local-rebuild 0 \"use an installed rustc matching the current version, for rebuilds\"\n opt llvm-static-stdcpp 0 \"statically link to libstdc++ for LLVM\"\n opt rpath 1 \"build rpaths into rustc itself\"\n opt stage0-landing-pads 1 \"enable landing pads during bootstrap with stage0\"\n@@ -847,6 +848,16 @@ then\n     BIN_SUF=.exe\n fi\n \n+# --enable-local-rebuild implies --enable-local-rust too\n+if [ -n \"$CFG_ENABLE_LOCAL_REBUILD\" ]\n+then\n+    if [ -z \"$CFG_ENABLE_LOCAL_RUST\" ]\n+    then\n+        CFG_ENABLE_LOCAL_RUST=1\n+        putvar CFG_ENABLE_LOCAL_RUST\n+    fi\n+fi\n+\n if [ -n \"$CFG_ENABLE_LOCAL_RUST\" ]\n then\n     system_rustc=$(which rustc)"}, {"sha": "6feb53ec7b17c5194f8e00b22c90225b1fd437c3", "filename": "mk/main.mk", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3406c55144339dea81839adc9addd931e068084a/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/3406c55144339dea81839adc9addd931e068084a/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=3406c55144339dea81839adc9addd931e068084a", "patch": "@@ -34,7 +34,14 @@ CFG_FILENAME_EXTRA=$(shell printf '%s' $(CFG_RELEASE)$(CFG_EXTRA_FILENAME) | $(C\n # intentionally not \"secure\" by any definition, this is largely just a deterrent\n # from users enabling unstable features on the stable compiler.\n CFG_BOOTSTRAP_KEY=$(CFG_FILENAME_EXTRA)\n+\n+# The stage0 compiler needs to use the previous key recorded in src/stage0.txt,\n+# except for local-rebuild when it just uses the same current key.\n+ifdef CFG_ENABLE_LOCAL_REBUILD\n+CFG_BOOTSTRAP_KEY_STAGE0=$(CFG_BOOTSTRAP_KEY)\n+else\n CFG_BOOTSTRAP_KEY_STAGE0=$(shell grep 'rustc_key' $(S)src/stage0.txt | sed 's/rustc_key: '//)\n+endif\n \n ifeq ($(CFG_RELEASE_CHANNEL),stable)\n # This is the normal semver version string, e.g. \"0.12.0\", \"0.12.0-nightly\"\n@@ -526,6 +533,11 @@ ifneq ($(strip $(CFG_BUILD)),$(strip $(3)))\n CFGFLAG$(1)_T_$(2)_H_$(3) = stage1\n \n RPATH_VAR$(1)_T_$(2)_H_$(3) := $$(TARGET_RPATH_VAR1_T_$(2)_H_$$(CFG_BUILD))\n+else\n+ifdef CFG_ENABLE_LOCAL_REBUILD\n+# Assume the local-rebuild rustc already has stage1 features too.\n+CFGFLAG$(1)_T_$(2)_H_$(3) = stage1\n+endif\n endif\n endif\n "}]}