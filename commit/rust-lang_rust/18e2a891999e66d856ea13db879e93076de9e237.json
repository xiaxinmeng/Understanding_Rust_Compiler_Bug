{"sha": "18e2a891999e66d856ea13db879e93076de9e237", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ZTJhODkxOTk5ZTY2ZDg1NmVhMTNkYjg3OWU5MzA3NmRlOWUyMzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-01T04:34:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-01T04:34:05Z"}, "message": "Auto merge of #74945 - dingxiangfei2009:promote-static-ref-deref, r=oli-obk\n\n[mir] Special treatment for dereferencing a borrow to a static definition\n\nFix #70584.\n\nAs suggested by @oli-obk in this [comment](https://github.com/rust-lang/rust/issues/70584#issuecomment-626009260), one can chase the definition of the local variable being de-referenced and check if it is a true static variable. If that is the case, `validate_place` will admit the promotion.\n\nThis is my first time to contribute to `rustc`, and I have two questions.\n1. A generalization to some extent is applied to decide if the promotion is possible in the static context. In case that there are more projection operations preceding the de-referencing, `validate_place` recursively decent into inner projection operations. I have put thoughts into its correctness but I am not totally sure about it.\n2. I have a hard time to find a good place for the test case. This patch has to do with MIR, but this test case would look out of place compared to other tests in `src/test/ui/mir` or `src/test/ui/borrowck` because it does not generate errors while others do. It is tentatively placed in `src/test/ui/statics` for now.\n\nThank you for any comments and suggestions!", "tree": {"sha": "9c0d326940607e173861961b77c0b49378a13cd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c0d326940607e173861961b77c0b49378a13cd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18e2a891999e66d856ea13db879e93076de9e237", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18e2a891999e66d856ea13db879e93076de9e237", "html_url": "https://github.com/rust-lang/rust/commit/18e2a891999e66d856ea13db879e93076de9e237", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18e2a891999e66d856ea13db879e93076de9e237/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22e6099330cde0e7b1529774fe27874f8326de7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/22e6099330cde0e7b1529774fe27874f8326de7a", "html_url": "https://github.com/rust-lang/rust/commit/22e6099330cde0e7b1529774fe27874f8326de7a"}, {"sha": "c5114549d74f6092517af6ea630ec5a26317ae93", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5114549d74f6092517af6ea630ec5a26317ae93", "html_url": "https://github.com/rust-lang/rust/commit/c5114549d74f6092517af6ea630ec5a26317ae93"}], "stats": {"total": 76, "additions": 74, "deletions": 2}, "files": [{"sha": "f68473480630b05fa3ef3b1234f984a6fd0da98c", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/18e2a891999e66d856ea13db879e93076de9e237/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18e2a891999e66d856ea13db879e93076de9e237/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=18e2a891999e66d856ea13db879e93076de9e237", "patch": "@@ -502,9 +502,47 @@ impl<'tcx> Validator<'_, 'tcx> {\n     fn validate_place(&self, place: PlaceRef<'tcx>) -> Result<(), Unpromotable> {\n         match place {\n             PlaceRef { local, projection: [] } => self.validate_local(local),\n-            PlaceRef { local: _, projection: [proj_base @ .., elem] } => {\n+            PlaceRef { local, projection: [proj_base @ .., elem] } => {\n                 match *elem {\n-                    ProjectionElem::Deref | ProjectionElem::Downcast(..) => {\n+                    ProjectionElem::Deref => {\n+                        let mut not_promotable = true;\n+                        // This is a special treatment for cases like *&STATIC where STATIC is a\n+                        // global static variable.\n+                        // This pattern is generated only when global static variables are directly\n+                        // accessed and is qualified for promotion safely.\n+                        if let TempState::Defined { location, .. } = self.temps[local] {\n+                            let def_stmt =\n+                                self.body[location.block].statements.get(location.statement_index);\n+                            if let Some(Statement {\n+                                kind:\n+                                    StatementKind::Assign(box (_, Rvalue::Use(Operand::Constant(c)))),\n+                                ..\n+                            }) = def_stmt\n+                            {\n+                                if let Some(did) = c.check_static_ptr(self.tcx) {\n+                                    if let Some(hir::ConstContext::Static(..)) = self.const_kind {\n+                                        // The `is_empty` predicate is introduced to exclude the case\n+                                        // where the projection operations are [ .field, * ].\n+                                        // The reason is because promotion will be illegal if field\n+                                        // accesses preceed the dereferencing.\n+                                        // Discussion can be found at\n+                                        // https://github.com/rust-lang/rust/pull/74945#discussion_r463063247\n+                                        // There may be opportunity for generalization, but this needs to be\n+                                        // accounted for.\n+                                        if proj_base.is_empty()\n+                                            && !self.tcx.is_thread_local_static(did)\n+                                        {\n+                                            not_promotable = false;\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                        if not_promotable {\n+                            return Err(Unpromotable);\n+                        }\n+                    }\n+                    ProjectionElem::Downcast(..) => {\n                         return Err(Unpromotable);\n                     }\n "}, {"sha": "bd8910bdb3f3f9af69c5b60cc87b023f28f53561", "filename": "src/test/ui/statics/static-promotion.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/18e2a891999e66d856ea13db879e93076de9e237/src%2Ftest%2Fui%2Fstatics%2Fstatic-promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18e2a891999e66d856ea13db879e93076de9e237/src%2Ftest%2Fui%2Fstatics%2Fstatic-promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatics%2Fstatic-promotion.rs?ref=18e2a891999e66d856ea13db879e93076de9e237", "patch": "@@ -0,0 +1,34 @@\n+// check-pass\n+\n+// Use of global static variables in literal values should be allowed for\n+// promotion.\n+// This test is to demonstrate the issue raised in\n+// https://github.com/rust-lang/rust/issues/70584\n+\n+// Literal values were previously promoted into local static values when\n+// other global static variables are used.\n+\n+struct A<T: 'static>(&'static T);\n+struct B<T: 'static + ?Sized> {\n+    x: &'static T,\n+}\n+static STR: &'static [u8] = b\"hi\";\n+static C: A<B<B<[u8]>>> = {\n+    A(&B {\n+        x: &B { x: STR },\n+    })\n+};\n+\n+pub struct Slice(&'static [i32]);\n+\n+static CONTENT: i32 = 42;\n+pub static CONTENT_MAP: Slice = Slice(&[CONTENT]);\n+\n+pub static FOO: (i32, i32) = (42, 43);\n+pub static CONTENT_MAP2: Slice = Slice(&[FOO.0]);\n+\n+fn main() {\n+    assert_eq!(b\"hi\", C.0.x.x);\n+    assert_eq!(&[42], CONTENT_MAP.0);\n+    assert_eq!(&[42], CONTENT_MAP2.0);\n+}"}]}