{"sha": "e41072479edd514ae6ebe00449ce4808204c5afb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MTA3MjQ3OWVkZDUxNGFlNmViZTAwNDQ5Y2U0ODA4MjA0YzVhZmI=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-23T10:28:27Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-23T10:29:05Z"}, "message": "fix ICE caused by wrongly ordered generic params", "tree": {"sha": "654f2b47437c1622594c85cb1d6353dc09808da6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/654f2b47437c1622594c85cb1d6353dc09808da6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e41072479edd514ae6ebe00449ce4808204c5afb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e41072479edd514ae6ebe00449ce4808204c5afb", "html_url": "https://github.com/rust-lang/rust/commit/e41072479edd514ae6ebe00449ce4808204c5afb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e41072479edd514ae6ebe00449ce4808204c5afb/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a2e4262e88bede44cfc5a3ab54e5b88442d6ed2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a2e4262e88bede44cfc5a3ab54e5b88442d6ed2", "html_url": "https://github.com/rust-lang/rust/commit/8a2e4262e88bede44cfc5a3ab54e5b88442d6ed2"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "658528b200dd153ca2a52bf3d1e5ce72fb3de244", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e41072479edd514ae6ebe00449ce4808204c5afb/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41072479edd514ae6ebe00449ce4808204c5afb/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=e41072479edd514ae6ebe00449ce4808204c5afb", "patch": "@@ -1298,7 +1298,10 @@ fn object_lifetime_defaults_for_item(\n             }\n             GenericParamKind::Const { .. } => {\n                 // Generic consts don't impose any constraints.\n-                None\n+                //\n+                // We still store a dummy value here to allow generic paramters\n+                // in arbitrary order.\n+                Some(Set1::Empty)\n             }\n         })\n         .collect()"}, {"sha": "c4734125e6f01108ca8abd0e106b679fa12bacd5", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e41072479edd514ae6ebe00449ce4808204c5afb/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41072479edd514ae6ebe00449ce4808204c5afb/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e41072479edd514ae6ebe00449ce4808204c5afb", "patch": "@@ -1888,14 +1888,24 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n     // Collect the predicates that were written inline by the user on each\n     // type parameter (e.g., `<T: Foo>`).\n     for param in ast_generics.params {\n-        if let GenericParamKind::Type { .. } = param.kind {\n-            let name = param.name.ident().name;\n-            let param_ty = ty::ParamTy::new(index, name).to_ty(tcx);\n-            index += 1;\n-\n-            let sized = SizedByDefault::Yes;\n-            let bounds = AstConv::compute_bounds(&icx, param_ty, &param.bounds, sized, param.span);\n-            predicates.extend(bounds.predicates(tcx, param_ty));\n+        match param.kind {\n+            // We already dealt with early bound lifetimes above.\n+            GenericParamKind::Lifetime { .. } => (),\n+            GenericParamKind::Type { .. } => {\n+                let name = param.name.ident().name;\n+                let param_ty = ty::ParamTy::new(index, name).to_ty(tcx);\n+                index += 1;\n+\n+                let sized = SizedByDefault::Yes;\n+                let bounds =\n+                    AstConv::compute_bounds(&icx, param_ty, &param.bounds, sized, param.span);\n+                predicates.extend(bounds.predicates(tcx, param_ty));\n+            }\n+            GenericParamKind::Const { .. } => {\n+                // Bounds on const parameters are currently not possible.\n+                debug_assert!(param.bounds.is_empty());\n+                index += 1;\n+            }\n         }\n     }\n "}]}