{"sha": "baf227ea0c1e07fc54395a51e4b3881d701180cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhZjIyN2VhMGMxZTA3ZmM1NDM5NWE1MWU0YjM4ODFkNzAxMTgwY2I=", "commit": {"author": {"name": "katelyn a. martin", "email": "me+rustlang@katelyn.world", "date": "2020-12-12T01:54:47Z"}, "committer": {"name": "katelyn a. martin", "email": "me+rustlang@katelyn.world", "date": "2021-03-09T19:40:33Z"}, "message": "add integration tests, unwind across FFI boundary\n\n ### Integration Tests\n\n    This commit introduces some new fixtures to the `run-make-fulldeps`\n    test suite.\n\n        * c-unwind-abi-catch-panic: Exercise unwinding a panic. This\n          catches a panic across an FFI boundary and downcasts it into\n          an integer.\n\n        * c-unwind-abi-catch-lib-panic: This is similar to the previous\n         `*catch-panic` test, however in this case the Rust code that\n         panics resides in a separate crate.\n\n ### Add `rust_eh_personality` to `#[no_std]` alloc tests\n\n    This commit addresses some test failures that now occur in the\n    following two tests:\n\n        * no_std-alloc-error-handler-custom.rs\n        * no_std-alloc-error-handler-default.rs\n\n    Each test now defines a `rust_eh_personality` extern function, in\n    the same manner as shown in the \"Writing an executable without\n    stdlib\" section of the `lang_items` documentation here:\n    https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib\n\n    Without this change, these tests would fail to compile due to a\n    linking error explaining that there was an \"undefined reference\n    to `rust_eh_personality'.\"\n\n ### Updated hash\n\n    * update 32-bit hash in `impl1` test\n\n ### Panics\n\n    This commit uses `panic!` macro invocations that return a string,\n    rather than using an integer as a panic payload.\n\n    Doing so avoids the following warnings that were observed during\n    rollup for the `*-msvc-1` targets:\n\n    ```\n    warning: panic message is not a string literal\n      --> panic.rs:10:16\n       |\n    10 |         panic!(x); // That is too big!\n       |                ^\n       |\n       = note: `#[warn(non_fmt_panic)]` on by default\n       = note: this is no longer accepted in Rust 2021\n    help: add a \"{}\" format string to Display the message\n       |\n    10 |         panic!(\"{}\", x); // That is too big!\n       |                ^^^^^\n    help: or use std::panic::panic_any instead\n       |\n    10 |         std::panic::panic_any(x); // That is too big!\n       |         ^^^^^^^^^^^^^^^^^^^^^\n\n    warning: 1 warning emitted\n    ```\n\n    See: https://github.com/rust-lang-ci/rust/runs/1992118428\n\n    As these errors imply, panicking without a format string will be\n    disallowed in Rust 2021, per #78500.", "tree": {"sha": "001a93d179cca9fed46bbfbc519ef5d8b8d0d9b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/001a93d179cca9fed46bbfbc519ef5d8b8d0d9b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/baf227ea0c1e07fc54395a51e4b3881d701180cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/baf227ea0c1e07fc54395a51e4b3881d701180cb", "html_url": "https://github.com/rust-lang/rust/commit/baf227ea0c1e07fc54395a51e4b3881d701180cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/baf227ea0c1e07fc54395a51e4b3881d701180cb/comments", "author": null, "committer": null, "parents": [{"sha": "0f33e9f2816358a4d8afd02af35bd23a4d6d0857", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f33e9f2816358a4d8afd02af35bd23a4d6d0857", "html_url": "https://github.com/rust-lang/rust/commit/0f33e9f2816358a4d8afd02af35bd23a4d6d0857"}], "stats": {"total": 172, "additions": 166, "deletions": 6}, "files": [{"sha": "a8515c533af57024cdd60d6082be08f848edd250", "filename": "src/test/run-make-fulldeps/c-unwind-abi-catch-lib-panic/Makefile", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/baf227ea0c1e07fc54395a51e4b3881d701180cb/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-lib-panic%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/baf227ea0c1e07fc54395a51e4b3881d701180cb/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-lib-panic%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-lib-panic%2FMakefile?ref=baf227ea0c1e07fc54395a51e4b3881d701180cb", "patch": "@@ -0,0 +1,30 @@\n+-include ../tools.mk\n+\n+all: archive\n+\t# Compile `main.rs`, which will link into our library, and run it.\n+\t$(RUSTC) main.rs\n+\t$(call RUN,main)\n+\n+ifdef IS_MSVC\n+archive: add.o panic.o\n+\t# Now, create an archive using these two objects.\n+\t$(AR) crus $(TMPDIR)/add.lib $(TMPDIR)/add.o $(TMPDIR)/panic.o\n+else\n+archive: add.o panic.o\n+\t# Now, create an archive using these two objects.\n+\t$(AR) crus $(TMPDIR)/libadd.a $(TMPDIR)/add.o $(TMPDIR)/panic.o\n+endif\n+\n+# Compile `panic.rs` into an object file.\n+#\n+# Note that we invoke `rustc` directly, so we may emit an object rather\n+# than an archive. We'll do that later.\n+panic.o:\n+\t$(BARE_RUSTC) $(RUSTFLAGS)  \\\n+\t\t--out-dir $(TMPDIR) \\\n+\t\t--emit=obj panic.rs\n+\n+# Compile `add.c` into an object file.\n+add.o:\n+\t$(call COMPILE_OBJ,$(TMPDIR)/add.o,add.c)\n+"}, {"sha": "444359451f6ecd0ff95756a737a0007e30414f53", "filename": "src/test/run-make-fulldeps/c-unwind-abi-catch-lib-panic/add.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/baf227ea0c1e07fc54395a51e4b3881d701180cb/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-lib-panic%2Fadd.c", "raw_url": "https://github.com/rust-lang/rust/raw/baf227ea0c1e07fc54395a51e4b3881d701180cb/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-lib-panic%2Fadd.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-lib-panic%2Fadd.c?ref=baf227ea0c1e07fc54395a51e4b3881d701180cb", "patch": "@@ -0,0 +1,12 @@\n+#ifdef _WIN32\n+__declspec(dllexport)\n+#endif\n+\n+// An external function, defined in Rust.\n+extern void panic_if_greater_than_10(unsigned x);\n+\n+unsigned add_small_numbers(unsigned a, unsigned b) {\n+    unsigned c = a + b;\n+    panic_if_greater_than_10(c);\n+    return c;\n+}"}, {"sha": "78a71219c7811d5d74cd3018bf39387b645cb6f8", "filename": "src/test/run-make-fulldeps/c-unwind-abi-catch-lib-panic/main.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/baf227ea0c1e07fc54395a51e4b3881d701180cb/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-lib-panic%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf227ea0c1e07fc54395a51e4b3881d701180cb/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-lib-panic%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-lib-panic%2Fmain.rs?ref=baf227ea0c1e07fc54395a51e4b3881d701180cb", "patch": "@@ -0,0 +1,35 @@\n+//! A test for calling `C-unwind` functions across foreign function boundaries.\n+//!\n+//! This test triggers a panic in a Rust library that our foreign function invokes. This shows\n+//! that we can unwind through the C code in that library, and catch the underlying panic.\n+#![feature(c_unwind)]\n+\n+use std::panic::{catch_unwind, AssertUnwindSafe};\n+\n+fn main() {\n+    // Call `add_small_numbers`, passing arguments that will NOT trigger a panic.\n+    let (a, b) = (9, 1);\n+    let c = unsafe { add_small_numbers(a, b) };\n+    assert_eq!(c, 10);\n+\n+    // Call `add_small_numbers`, passing arguments that will trigger a panic, and catch it.\n+    let caught_unwind = catch_unwind(AssertUnwindSafe(|| {\n+        let (a, b) = (10, 1);\n+        let _c = unsafe { add_small_numbers(a, b) };\n+        unreachable!(\"should have unwound instead of returned\");\n+    }));\n+\n+    // Assert that we did indeed panic, then unwrap and downcast the panic into the sum.\n+    assert!(caught_unwind.is_err());\n+    let panic_obj = caught_unwind.unwrap_err();\n+    let msg = panic_obj.downcast_ref::<String>().unwrap();\n+    assert_eq!(msg, \"11\");\n+}\n+\n+#[link(name = \"add\", kind = \"static\")]\n+extern \"C-unwind\" {\n+    /// An external function, defined in C.\n+    ///\n+    /// Returns the sum of two numbers, or panics if the sum is greater than 10.\n+    fn add_small_numbers(a: u32, b: u32) -> u32;\n+}"}, {"sha": "a99a04d5c6f4b1df2866279648bd87e709b68875", "filename": "src/test/run-make-fulldeps/c-unwind-abi-catch-lib-panic/panic.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/baf227ea0c1e07fc54395a51e4b3881d701180cb/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-lib-panic%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf227ea0c1e07fc54395a51e4b3881d701180cb/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-lib-panic%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-lib-panic%2Fpanic.rs?ref=baf227ea0c1e07fc54395a51e4b3881d701180cb", "patch": "@@ -0,0 +1,12 @@\n+#![crate_type = \"staticlib\"]\n+#![feature(c_unwind)]\n+\n+/// This function will panic if `x` is greater than 10.\n+///\n+/// This function is called by `add_small_numbers`.\n+#[no_mangle]\n+pub extern \"C-unwind\" fn panic_if_greater_than_10(x: u32) {\n+    if x > 10 {\n+        panic!(\"{}\", x); // That is too big!\n+    }\n+}"}, {"sha": "9553b7aeeb983d95bd033da64fb9dca70c358915", "filename": "src/test/run-make-fulldeps/c-unwind-abi-catch-panic/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/baf227ea0c1e07fc54395a51e4b3881d701180cb/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-panic%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/baf227ea0c1e07fc54395a51e4b3881d701180cb/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-panic%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-panic%2FMakefile?ref=baf227ea0c1e07fc54395a51e4b3881d701180cb", "patch": "@@ -0,0 +1,5 @@\n+-include ../tools.mk\n+\n+all: $(call NATIVE_STATICLIB,add)\n+\t$(RUSTC) main.rs\n+\t$(call RUN,main) || exit 1"}, {"sha": "444359451f6ecd0ff95756a737a0007e30414f53", "filename": "src/test/run-make-fulldeps/c-unwind-abi-catch-panic/add.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/baf227ea0c1e07fc54395a51e4b3881d701180cb/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-panic%2Fadd.c", "raw_url": "https://github.com/rust-lang/rust/raw/baf227ea0c1e07fc54395a51e4b3881d701180cb/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-panic%2Fadd.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-panic%2Fadd.c?ref=baf227ea0c1e07fc54395a51e4b3881d701180cb", "patch": "@@ -0,0 +1,12 @@\n+#ifdef _WIN32\n+__declspec(dllexport)\n+#endif\n+\n+// An external function, defined in Rust.\n+extern void panic_if_greater_than_10(unsigned x);\n+\n+unsigned add_small_numbers(unsigned a, unsigned b) {\n+    unsigned c = a + b;\n+    panic_if_greater_than_10(c);\n+    return c;\n+}"}, {"sha": "15d38d72160583c407c2b82547021a1ed3585068", "filename": "src/test/run-make-fulldeps/c-unwind-abi-catch-panic/main.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/baf227ea0c1e07fc54395a51e4b3881d701180cb/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-panic%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf227ea0c1e07fc54395a51e4b3881d701180cb/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-panic%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-unwind-abi-catch-panic%2Fmain.rs?ref=baf227ea0c1e07fc54395a51e4b3881d701180cb", "patch": "@@ -0,0 +1,44 @@\n+//! A test for calling `C-unwind` functions across foreign function boundaries.\n+//!\n+//! This test triggers a panic when calling a foreign function that calls *back* into Rust.\n+#![feature(c_unwind)]\n+\n+use std::panic::{catch_unwind, AssertUnwindSafe};\n+\n+fn main() {\n+    // Call `add_small_numbers`, passing arguments that will NOT trigger a panic.\n+    let (a, b) = (9, 1);\n+    let c = unsafe { add_small_numbers(a, b) };\n+    assert_eq!(c, 10);\n+\n+    // Call `add_small_numbers`, passing arguments that will trigger a panic, and catch it.\n+    let caught_unwind = catch_unwind(AssertUnwindSafe(|| {\n+        let (a, b) = (10, 1);\n+        let _c = unsafe { add_small_numbers(a, b) };\n+        unreachable!(\"should have unwound instead of returned\");\n+    }));\n+\n+    // Assert that we did indeed panic, then unwrap and downcast the panic into the sum.\n+    assert!(caught_unwind.is_err());\n+    let panic_obj = caught_unwind.unwrap_err();\n+    let msg = panic_obj.downcast_ref::<String>().unwrap();\n+    assert_eq!(msg, \"11\");\n+}\n+\n+#[link(name = \"add\", kind = \"static\")]\n+extern \"C-unwind\" {\n+    /// An external function, defined in C.\n+    ///\n+    /// Returns the sum of two numbers, or panics if the sum is greater than 10.\n+    fn add_small_numbers(a: u32, b: u32) -> u32;\n+}\n+\n+/// This function will panic if `x` is greater than 10.\n+///\n+/// This function is called by `add_small_numbers`.\n+#[no_mangle]\n+pub extern \"C-unwind\" fn panic_if_greater_than_10(x: u32) {\n+    if x > 10 {\n+        panic!(\"{}\", x); // That is too big!\n+    }\n+}"}, {"sha": "c9b4abbfd3fd3da70de7d7755909adcb979bb5a4", "filename": "src/test/ui/allocator/no_std-alloc-error-handler-custom.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/baf227ea0c1e07fc54395a51e4b3881d701180cb/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf227ea0c1e07fc54395a51e4b3881d701180cb/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs?ref=baf227ea0c1e07fc54395a51e4b3881d701180cb", "patch": "@@ -7,7 +7,7 @@\n // compile-flags:-C panic=abort\n // aux-build:helper.rs\n \n-#![feature(start, rustc_private, new_uninit, panic_info_message)]\n+#![feature(start, rustc_private, new_uninit, panic_info_message, lang_items)]\n #![feature(alloc_error_handler)]\n #![no_std]\n \n@@ -84,6 +84,13 @@ fn panic(panic_info: &core::panic::PanicInfo) -> ! {\n     }\n }\n \n+// Because we are compiling this code with `-C panic=abort`, this wouldn't normally be needed.\n+// However, `core` and `alloc` are both compiled with `-C panic=unwind`, which means that functions\n+// in these libaries will refer to `rust_eh_personality` if LLVM can not *prove* the contents won't\n+// unwind. So, for this test case we will define the symbol.\n+#[lang = \"eh_personality\"]\n+extern fn rust_eh_personality() {}\n+\n #[derive(Debug)]\n struct Page([[u64; 32]; 16]);\n "}, {"sha": "d6cd4a6af855fecd6b44f6dc5e600364303c1beb", "filename": "src/test/ui/allocator/no_std-alloc-error-handler-default.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/baf227ea0c1e07fc54395a51e4b3881d701180cb/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf227ea0c1e07fc54395a51e4b3881d701180cb/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-default.rs?ref=baf227ea0c1e07fc54395a51e4b3881d701180cb", "patch": "@@ -8,7 +8,7 @@\n // aux-build:helper.rs\n // gate-test-default_alloc_error_handler\n \n-#![feature(start, rustc_private, new_uninit, panic_info_message)]\n+#![feature(start, rustc_private, new_uninit, panic_info_message, lang_items)]\n #![feature(default_alloc_error_handler)]\n #![no_std]\n \n@@ -71,6 +71,13 @@ fn panic(panic_info: &core::panic::PanicInfo) -> ! {\n     }\n }\n \n+// Because we are compiling this code with `-C panic=abort`, this wouldn't normally be needed.\n+// However, `core` and `alloc` are both compiled with `-C panic=unwind`, which means that functions\n+// in these libaries will refer to `rust_eh_personality` if LLVM can not *prove* the contents won't\n+// unwind. So, for this test case we will define the symbol.\n+#[lang = \"eh_personality\"]\n+extern fn rust_eh_personality() {}\n+\n #[derive(Debug)]\n struct Page([[u64; 32]; 16]);\n "}, {"sha": "771695330d8bd92851a289e95b4618ae91f147aa", "filename": "src/test/ui/symbol-names/impl1.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/baf227ea0c1e07fc54395a51e4b3881d701180cb/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baf227ea0c1e07fc54395a51e4b3881d701180cb/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs?ref=baf227ea0c1e07fc54395a51e4b3881d701180cb", "patch": "@@ -74,7 +74,3 @@ fn main() {\n         }\n     };\n }\n-\n-// FIXME(katie): The 32-bit symbol hash probably needs updating as well, but I'm slightly unsure\n-// about how to do that. This comment is here so that we don't break the test due to error messages\n-// including incorrect line numbers."}]}