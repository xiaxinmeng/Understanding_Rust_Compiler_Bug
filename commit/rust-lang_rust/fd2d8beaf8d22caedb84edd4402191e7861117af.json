{"sha": "fd2d8beaf8d22caedb84edd4402191e7861117af", "node_id": "C_kwDOAAsO6NoAKGZkMmQ4YmVhZjhkMjJjYWVkYjg0ZWRkNDQwMjE5MWU3ODYxMTE3YWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-08T23:03:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-08T23:03:32Z"}, "message": "Auto merge of #10293 - Alexendoo:bool-assert-comparison-negation, r=dswij\n\nNegate suggestions when needed in `bool_assert_comparison`\n\nchangelog: none assuming this gets into the same release as #10218\n\nFixes #10291\n\nr? `@dswij`\n\nThanks to `@black-puppydog` for spotting it early", "tree": {"sha": "74aeabf76689f4d012e0c9a2385a14fcb9fed799", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74aeabf76689f4d012e0c9a2385a14fcb9fed799"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd2d8beaf8d22caedb84edd4402191e7861117af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd2d8beaf8d22caedb84edd4402191e7861117af", "html_url": "https://github.com/rust-lang/rust/commit/fd2d8beaf8d22caedb84edd4402191e7861117af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd2d8beaf8d22caedb84edd4402191e7861117af/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bb6ee5dce89b98e41472aa7650f7bf9c8a37d90", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bb6ee5dce89b98e41472aa7650f7bf9c8a37d90", "html_url": "https://github.com/rust-lang/rust/commit/3bb6ee5dce89b98e41472aa7650f7bf9c8a37d90"}, {"sha": "5546c82051e05f3f30733c9885f68f5bf9d1759a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5546c82051e05f3f30733c9885f68f5bf9d1759a", "html_url": "https://github.com/rust-lang/rust/commit/5546c82051e05f3f30733c9885f68f5bf9d1759a"}], "stats": {"total": 227, "additions": 176, "deletions": 51}, "files": [{"sha": "1d9096ea64d1c3fa261073102b1eff52fdb52209", "filename": "clippy_lints/src/bool_assert_comparison.rs", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/fd2d8beaf8d22caedb84edd4402191e7861117af/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2d8beaf8d22caedb84edd4402191e7861117af/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs?ref=fd2d8beaf8d22caedb84edd4402191e7861117af", "patch": "@@ -1,5 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::macros::{find_assert_eq_args, root_macro_call_first_node};\n+use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::{implements_trait, is_copy};\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n@@ -34,14 +35,16 @@ declare_clippy_lint! {\n \n declare_lint_pass!(BoolAssertComparison => [BOOL_ASSERT_COMPARISON]);\n \n-fn is_bool_lit(e: &Expr<'_>) -> bool {\n-    matches!(\n-        e.kind,\n-        ExprKind::Lit(Lit {\n-            node: LitKind::Bool(_),\n-            ..\n-        })\n-    ) && !e.span.from_expansion()\n+fn extract_bool_lit(e: &Expr<'_>) -> Option<bool> {\n+    if let ExprKind::Lit(Lit {\n+        node: LitKind::Bool(b), ..\n+    }) = e.kind\n+        && !e.span.from_expansion()\n+    {\n+        Some(b)\n+    } else {\n+        None\n+    }\n }\n \n fn is_impl_not_trait_with_bool_out<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n@@ -69,24 +72,23 @@ impl<'tcx> LateLintPass<'tcx> for BoolAssertComparison {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         let Some(macro_call) = root_macro_call_first_node(cx, expr) else { return };\n         let macro_name = cx.tcx.item_name(macro_call.def_id);\n-        if !matches!(\n-            macro_name.as_str(),\n-            \"assert_eq\" | \"debug_assert_eq\" | \"assert_ne\" | \"debug_assert_ne\"\n-        ) {\n-            return;\n-        }\n+        let eq_macro = match macro_name.as_str() {\n+            \"assert_eq\" | \"debug_assert_eq\" => true,\n+            \"assert_ne\" | \"debug_assert_ne\" => false,\n+            _ => return,\n+        };\n         let Some ((a, b, _)) = find_assert_eq_args(cx, expr, macro_call.expn) else { return };\n \n         let a_span = a.span.source_callsite();\n         let b_span = b.span.source_callsite();\n \n-        let (lit_span, non_lit_expr) = match (is_bool_lit(a), is_bool_lit(b)) {\n-            // assert_eq!(true, b)\n-            //            ^^^^^^\n-            (true, false) => (a_span.until(b_span), b),\n-            // assert_eq!(a, true)\n-            //             ^^^^^^\n-            (false, true) => (b_span.with_lo(a_span.hi()), a),\n+        let (lit_span, bool_value, non_lit_expr) = match (extract_bool_lit(a), extract_bool_lit(b)) {\n+            // assert_eq!(true/false, b)\n+            //            ^^^^^^^^^^^^\n+            (Some(bool_value), None) => (a_span.until(b_span), bool_value, b),\n+            // assert_eq!(a, true/false)\n+            //             ^^^^^^^^^^^^\n+            (None, Some(bool_value)) => (b_span.with_lo(a_span.hi()), bool_value, a),\n             // If there are two boolean arguments, we definitely don't understand\n             // what's going on, so better leave things as is...\n             //\n@@ -121,9 +123,16 @@ impl<'tcx> LateLintPass<'tcx> for BoolAssertComparison {\n                 // ^^^^^^^^^\n                 let name_span = cx.sess().source_map().span_until_char(macro_call.span, '!');\n \n+                let mut suggestions = vec![(name_span, non_eq_mac.to_string()), (lit_span, String::new())];\n+\n+                if bool_value ^ eq_macro {\n+                    let Some(sugg) = Sugg::hir_opt(cx, non_lit_expr) else { return };\n+                    suggestions.push((non_lit_expr.span, (!sugg).to_string()));\n+                }\n+\n                 diag.multipart_suggestion(\n                     format!(\"replace it with `{non_eq_mac}!(..)`\"),\n-                    vec![(name_span, non_eq_mac.to_string()), (lit_span, String::new())],\n+                    suggestions,\n                     Applicability::MachineApplicable,\n                 );\n             },"}, {"sha": "b8dd92906c8db229ad0cdef1d91e4dc7f54463f4", "filename": "tests/ui/bool_assert_comparison.fixed", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fd2d8beaf8d22caedb84edd4402191e7861117af/tests%2Fui%2Fbool_assert_comparison.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fd2d8beaf8d22caedb84edd4402191e7861117af/tests%2Fui%2Fbool_assert_comparison.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_assert_comparison.fixed?ref=fd2d8beaf8d22caedb84edd4402191e7861117af", "patch": "@@ -86,7 +86,7 @@ fn main() {\n     let b = ImplNotTraitWithBool;\n \n     assert_eq!(\"a\".len(), 1);\n-    assert!(\"a\".is_empty());\n+    assert!(!\"a\".is_empty());\n     assert!(\"\".is_empty());\n     assert!(\"\".is_empty());\n     assert_eq!(a!(), b!());\n@@ -97,16 +97,16 @@ fn main() {\n \n     assert_ne!(\"a\".len(), 1);\n     assert!(\"a\".is_empty());\n-    assert!(\"\".is_empty());\n-    assert!(\"\".is_empty());\n+    assert!(!\"\".is_empty());\n+    assert!(!\"\".is_empty());\n     assert_ne!(a!(), b!());\n     assert_ne!(a!(), \"\".is_empty());\n     assert_ne!(\"\".is_empty(), b!());\n     assert_ne!(a, true);\n-    assert!(b);\n+    assert!(!b);\n \n     debug_assert_eq!(\"a\".len(), 1);\n-    debug_assert!(\"a\".is_empty());\n+    debug_assert!(!\"a\".is_empty());\n     debug_assert!(\"\".is_empty());\n     debug_assert!(\"\".is_empty());\n     debug_assert_eq!(a!(), b!());\n@@ -117,27 +117,27 @@ fn main() {\n \n     debug_assert_ne!(\"a\".len(), 1);\n     debug_assert!(\"a\".is_empty());\n-    debug_assert!(\"\".is_empty());\n-    debug_assert!(\"\".is_empty());\n+    debug_assert!(!\"\".is_empty());\n+    debug_assert!(!\"\".is_empty());\n     debug_assert_ne!(a!(), b!());\n     debug_assert_ne!(a!(), \"\".is_empty());\n     debug_assert_ne!(\"\".is_empty(), b!());\n     debug_assert_ne!(a, true);\n-    debug_assert!(b);\n+    debug_assert!(!b);\n \n     // assert with error messages\n     assert_eq!(\"a\".len(), 1, \"tadam {}\", 1);\n     assert_eq!(\"a\".len(), 1, \"tadam {}\", true);\n-    assert!(\"a\".is_empty(), \"tadam {}\", 1);\n-    assert!(\"a\".is_empty(), \"tadam {}\", true);\n-    assert!(\"a\".is_empty(), \"tadam {}\", true);\n+    assert!(!\"a\".is_empty(), \"tadam {}\", 1);\n+    assert!(!\"a\".is_empty(), \"tadam {}\", true);\n+    assert!(!\"a\".is_empty(), \"tadam {}\", true);\n     assert_eq!(a, true, \"tadam {}\", false);\n \n     debug_assert_eq!(\"a\".len(), 1, \"tadam {}\", 1);\n     debug_assert_eq!(\"a\".len(), 1, \"tadam {}\", true);\n-    debug_assert!(\"a\".is_empty(), \"tadam {}\", 1);\n-    debug_assert!(\"a\".is_empty(), \"tadam {}\", true);\n-    debug_assert!(\"a\".is_empty(), \"tadam {}\", true);\n+    debug_assert!(!\"a\".is_empty(), \"tadam {}\", 1);\n+    debug_assert!(!\"a\".is_empty(), \"tadam {}\", true);\n+    debug_assert!(!\"a\".is_empty(), \"tadam {}\", true);\n     debug_assert_eq!(a, true, \"tadam {}\", false);\n \n     assert!(a!());\n@@ -158,4 +158,14 @@ fn main() {\n         }};\n     }\n     in_macro!(a);\n+\n+    assert!(\"\".is_empty());\n+    assert!(\"\".is_empty());\n+    assert!(!\"requires negation\".is_empty());\n+    assert!(!\"requires negation\".is_empty());\n+\n+    debug_assert!(\"\".is_empty());\n+    debug_assert!(\"\".is_empty());\n+    debug_assert!(!\"requires negation\".is_empty());\n+    debug_assert!(!\"requires negation\".is_empty());\n }"}, {"sha": "0a8ad34fda52a925d541a9fc4ce98b139948890c", "filename": "tests/ui/bool_assert_comparison.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd2d8beaf8d22caedb84edd4402191e7861117af/tests%2Fui%2Fbool_assert_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2d8beaf8d22caedb84edd4402191e7861117af/tests%2Fui%2Fbool_assert_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_assert_comparison.rs?ref=fd2d8beaf8d22caedb84edd4402191e7861117af", "patch": "@@ -158,4 +158,14 @@ fn main() {\n         }};\n     }\n     in_macro!(a);\n+\n+    assert_eq!(\"\".is_empty(), true);\n+    assert_ne!(\"\".is_empty(), false);\n+    assert_ne!(\"requires negation\".is_empty(), true);\n+    assert_eq!(\"requires negation\".is_empty(), false);\n+\n+    debug_assert_eq!(\"\".is_empty(), true);\n+    debug_assert_ne!(\"\".is_empty(), false);\n+    debug_assert_ne!(\"requires negation\".is_empty(), true);\n+    debug_assert_eq!(\"requires negation\".is_empty(), false);\n }"}, {"sha": "89cefc95a9f69a845f76b3c193541c8407cfbb57", "filename": "tests/ui/bool_assert_comparison.stderr", "status": "modified", "additions": 111, "deletions": 15, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/fd2d8beaf8d22caedb84edd4402191e7861117af/tests%2Fui%2Fbool_assert_comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd2d8beaf8d22caedb84edd4402191e7861117af/tests%2Fui%2Fbool_assert_comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_assert_comparison.stderr?ref=fd2d8beaf8d22caedb84edd4402191e7861117af", "patch": "@@ -8,7 +8,7 @@ LL |     assert_eq!(\"a\".is_empty(), false);\n help: replace it with `assert!(..)`\n    |\n LL -     assert_eq!(\"a\".is_empty(), false);\n-LL +     assert!(\"a\".is_empty());\n+LL +     assert!(!\"a\".is_empty());\n    |\n \n error: used `assert_eq!` with a literal bool\n@@ -68,7 +68,7 @@ LL |     assert_ne!(\"\".is_empty(), true);\n help: replace it with `assert!(..)`\n    |\n LL -     assert_ne!(\"\".is_empty(), true);\n-LL +     assert!(\"\".is_empty());\n+LL +     assert!(!\"\".is_empty());\n    |\n \n error: used `assert_ne!` with a literal bool\n@@ -80,7 +80,7 @@ LL |     assert_ne!(true, \"\".is_empty());\n help: replace it with `assert!(..)`\n    |\n LL -     assert_ne!(true, \"\".is_empty());\n-LL +     assert!(\"\".is_empty());\n+LL +     assert!(!\"\".is_empty());\n    |\n \n error: used `assert_ne!` with a literal bool\n@@ -92,7 +92,7 @@ LL |     assert_ne!(b, true);\n help: replace it with `assert!(..)`\n    |\n LL -     assert_ne!(b, true);\n-LL +     assert!(b);\n+LL +     assert!(!b);\n    |\n \n error: used `debug_assert_eq!` with a literal bool\n@@ -104,7 +104,7 @@ LL |     debug_assert_eq!(\"a\".is_empty(), false);\n help: replace it with `debug_assert!(..)`\n    |\n LL -     debug_assert_eq!(\"a\".is_empty(), false);\n-LL +     debug_assert!(\"a\".is_empty());\n+LL +     debug_assert!(!\"a\".is_empty());\n    |\n \n error: used `debug_assert_eq!` with a literal bool\n@@ -164,7 +164,7 @@ LL |     debug_assert_ne!(\"\".is_empty(), true);\n help: replace it with `debug_assert!(..)`\n    |\n LL -     debug_assert_ne!(\"\".is_empty(), true);\n-LL +     debug_assert!(\"\".is_empty());\n+LL +     debug_assert!(!\"\".is_empty());\n    |\n \n error: used `debug_assert_ne!` with a literal bool\n@@ -176,7 +176,7 @@ LL |     debug_assert_ne!(true, \"\".is_empty());\n help: replace it with `debug_assert!(..)`\n    |\n LL -     debug_assert_ne!(true, \"\".is_empty());\n-LL +     debug_assert!(\"\".is_empty());\n+LL +     debug_assert!(!\"\".is_empty());\n    |\n \n error: used `debug_assert_ne!` with a literal bool\n@@ -188,7 +188,7 @@ LL |     debug_assert_ne!(b, true);\n help: replace it with `debug_assert!(..)`\n    |\n LL -     debug_assert_ne!(b, true);\n-LL +     debug_assert!(b);\n+LL +     debug_assert!(!b);\n    |\n \n error: used `assert_eq!` with a literal bool\n@@ -200,7 +200,7 @@ LL |     assert_eq!(\"a\".is_empty(), false, \"tadam {}\", 1);\n help: replace it with `assert!(..)`\n    |\n LL -     assert_eq!(\"a\".is_empty(), false, \"tadam {}\", 1);\n-LL +     assert!(\"a\".is_empty(), \"tadam {}\", 1);\n+LL +     assert!(!\"a\".is_empty(), \"tadam {}\", 1);\n    |\n \n error: used `assert_eq!` with a literal bool\n@@ -212,7 +212,7 @@ LL |     assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n help: replace it with `assert!(..)`\n    |\n LL -     assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n-LL +     assert!(\"a\".is_empty(), \"tadam {}\", true);\n+LL +     assert!(!\"a\".is_empty(), \"tadam {}\", true);\n    |\n \n error: used `assert_eq!` with a literal bool\n@@ -224,7 +224,7 @@ LL |     assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n help: replace it with `assert!(..)`\n    |\n LL -     assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n-LL +     assert!(\"a\".is_empty(), \"tadam {}\", true);\n+LL +     assert!(!\"a\".is_empty(), \"tadam {}\", true);\n    |\n \n error: used `debug_assert_eq!` with a literal bool\n@@ -236,7 +236,7 @@ LL |     debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", 1);\n help: replace it with `debug_assert!(..)`\n    |\n LL -     debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", 1);\n-LL +     debug_assert!(\"a\".is_empty(), \"tadam {}\", 1);\n+LL +     debug_assert!(!\"a\".is_empty(), \"tadam {}\", 1);\n    |\n \n error: used `debug_assert_eq!` with a literal bool\n@@ -248,7 +248,7 @@ LL |     debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n help: replace it with `debug_assert!(..)`\n    |\n LL -     debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n-LL +     debug_assert!(\"a\".is_empty(), \"tadam {}\", true);\n+LL +     debug_assert!(!\"a\".is_empty(), \"tadam {}\", true);\n    |\n \n error: used `debug_assert_eq!` with a literal bool\n@@ -260,7 +260,7 @@ LL |     debug_assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n help: replace it with `debug_assert!(..)`\n    |\n LL -     debug_assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n-LL +     debug_assert!(\"a\".is_empty(), \"tadam {}\", true);\n+LL +     debug_assert!(!\"a\".is_empty(), \"tadam {}\", true);\n    |\n \n error: used `assert_eq!` with a literal bool\n@@ -299,5 +299,101 @@ LL -     renamed!(b, true);\n LL +     debug_assert!(b);\n    |\n \n-error: aborting due to 25 previous errors\n+error: used `assert_eq!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:162:5\n+   |\n+LL |     assert_eq!(\"\".is_empty(), true);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_eq!(\"\".is_empty(), true);\n+LL +     assert!(\"\".is_empty());\n+   |\n+\n+error: used `assert_ne!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:163:5\n+   |\n+LL |     assert_ne!(\"\".is_empty(), false);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_ne!(\"\".is_empty(), false);\n+LL +     assert!(\"\".is_empty());\n+   |\n+\n+error: used `assert_ne!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:164:5\n+   |\n+LL |     assert_ne!(\"requires negation\".is_empty(), true);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_ne!(\"requires negation\".is_empty(), true);\n+LL +     assert!(!\"requires negation\".is_empty());\n+   |\n+\n+error: used `assert_eq!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:165:5\n+   |\n+LL |     assert_eq!(\"requires negation\".is_empty(), false);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `assert!(..)`\n+   |\n+LL -     assert_eq!(\"requires negation\".is_empty(), false);\n+LL +     assert!(!\"requires negation\".is_empty());\n+   |\n+\n+error: used `debug_assert_eq!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:167:5\n+   |\n+LL |     debug_assert_eq!(\"\".is_empty(), true);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `debug_assert!(..)`\n+   |\n+LL -     debug_assert_eq!(\"\".is_empty(), true);\n+LL +     debug_assert!(\"\".is_empty());\n+   |\n+\n+error: used `debug_assert_ne!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:168:5\n+   |\n+LL |     debug_assert_ne!(\"\".is_empty(), false);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `debug_assert!(..)`\n+   |\n+LL -     debug_assert_ne!(\"\".is_empty(), false);\n+LL +     debug_assert!(\"\".is_empty());\n+   |\n+\n+error: used `debug_assert_ne!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:169:5\n+   |\n+LL |     debug_assert_ne!(\"requires negation\".is_empty(), true);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `debug_assert!(..)`\n+   |\n+LL -     debug_assert_ne!(\"requires negation\".is_empty(), true);\n+LL +     debug_assert!(!\"requires negation\".is_empty());\n+   |\n+\n+error: used `debug_assert_eq!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:170:5\n+   |\n+LL |     debug_assert_eq!(\"requires negation\".is_empty(), false);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with `debug_assert!(..)`\n+   |\n+LL -     debug_assert_eq!(\"requires negation\".is_empty(), false);\n+LL +     debug_assert!(!\"requires negation\".is_empty());\n+   |\n+\n+error: aborting due to 33 previous errors\n "}]}