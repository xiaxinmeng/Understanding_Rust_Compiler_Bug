{"sha": "c404092084c518d126f77c1369ab63e340ce693e", "node_id": "C_kwDOAAsO6NoAKGM0MDQwOTIwODRjNTE4ZDEyNmY3N2MxMzY5YWI2M2UzNDBjZTY5M2U", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-28T05:06:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-28T05:06:41Z"}, "message": "Rollup merge of #102642 - bryangarza:afit-tests, r=compiler-errors\n\nAdd tests for static async functions in traits\n\nThis patch adds test cases for AFIT, the majority of which are currently expected to run as `check-fail`.\n\n---\n\nNote: I grabbed the cases from https://hackmd.io/SwRcXCiWQV-WRJ4BYs53fA\n\nAlso, I'm not sure if the `async-associated-types2` and `async-associated-types2-desugared` are correct, I modified them a bit from the examples in the HackMD.", "tree": {"sha": "22d0c2285c536b3eec2ee96d59299610ee7c2e77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22d0c2285c536b3eec2ee96d59299610ee7c2e77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c404092084c518d126f77c1369ab63e340ce693e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjW2NhCRBK7hj4Ov3rIwAAJUYIAH3THhf7dbG3lg/mYhUptDW/\nvscXS7pv5bWYeRD5OSWVX6hPrmk05QEZuNpxLRy79yqjvcBsu+gZw2tt4DgZ3QUe\nvob84qUSJQXdVFFnVtHbemJfTiSEp83fn8JYERxiVBc+gRvbLI6aspj59uRb9ZRu\nPqgyLjfQglr4Hk6icl6jYhU8TXcQ/o/xnpwRO7lyDw95bbgtvyZ0DSdEfl8rPzOR\nscGdaKrm03BUQz7nlsBj2HPW9AiCtPVqB1fljMSfoFx7qklFr16TZIxNSgKCjFvx\nYWm9IMRDHKOWS02GsEuT4X5ZwACchvetQISHhv//T67Kax8lv1HjBLGg8QLrguA=\n=vKbd\n-----END PGP SIGNATURE-----\n", "payload": "tree 22d0c2285c536b3eec2ee96d59299610ee7c2e77\nparent cdd7afeaadf1c48eafb4dff4452439fa5d13a775\nparent bfdefdbfb740a2b41dbdf01299ecdf1610c54907\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1666933601 +0200\ncommitter GitHub <noreply@github.com> 1666933601 +0200\n\nRollup merge of #102642 - bryangarza:afit-tests, r=compiler-errors\n\nAdd tests for static async functions in traits\n\nThis patch adds test cases for AFIT, the majority of which are currently expected to run as `check-fail`.\n\n---\n\nNote: I grabbed the cases from https://hackmd.io/SwRcXCiWQV-WRJ4BYs53fA\n\nAlso, I'm not sure if the `async-associated-types2` and `async-associated-types2-desugared` are correct, I modified them a bit from the examples in the HackMD.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c404092084c518d126f77c1369ab63e340ce693e", "html_url": "https://github.com/rust-lang/rust/commit/c404092084c518d126f77c1369ab63e340ce693e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c404092084c518d126f77c1369ab63e340ce693e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdd7afeaadf1c48eafb4dff4452439fa5d13a775", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdd7afeaadf1c48eafb4dff4452439fa5d13a775", "html_url": "https://github.com/rust-lang/rust/commit/cdd7afeaadf1c48eafb4dff4452439fa5d13a775"}, {"sha": "bfdefdbfb740a2b41dbdf01299ecdf1610c54907", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfdefdbfb740a2b41dbdf01299ecdf1610c54907", "html_url": "https://github.com/rust-lang/rust/commit/bfdefdbfb740a2b41dbdf01299ecdf1610c54907"}], "stats": {"total": 579, "additions": 579, "deletions": 0}, "files": [{"sha": "a6f928f3b1bac653f2f95d4156331b090b30f3dc", "filename": "src/test/ui/async-await/in-trait/async-associated-types.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.rs?ref=c404092084c518d126f77c1369ab63e340ce693e", "patch": "@@ -0,0 +1,24 @@\n+// check-fail\n+// known-bug: #102682\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Debug;\n+\n+trait MyTrait<'a, 'b, T> where Self: 'a, T: Debug + Sized + 'b {\n+    type MyAssoc;\n+\n+    async fn foo(&'a self, key: &'b T) -> Self::MyAssoc;\n+}\n+\n+impl<'a, 'b, T: Debug + Sized + 'b, U: 'a> MyTrait<'a, 'b, T> for U {\n+    type MyAssoc = (&'a U, &'b T);\n+\n+    async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n+        (self, key)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "0985150eee0decc8fa070500d0e94fa030e875e6", "filename": "src/test/ui/async-await/in-trait/async-associated-types.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.stderr?ref=c404092084c518d126f77c1369ab63e340ce693e", "patch": "@@ -0,0 +1,57 @@\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n+  --> $DIR/async-associated-types.rs:19:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n+   |                                           ^^^^^^^^^^^^^^\n+   |\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n+  --> $DIR/async-associated-types.rs:16:6\n+   |\n+LL | impl<'a, 'b, T: Debug + Sized + 'b, U: 'a> MyTrait<'a, 'b, T> for U {\n+   |      ^^\n+note: ...so that the types are compatible\n+  --> $DIR/async-associated-types.rs:19:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n+   |                                           ^^^^^^^^^^^^^^\n+   = note: expected `(&'a U, &'b T)`\n+              found `(&U, &T)`\n+   = note: but, the lifetime must be valid for the static lifetime...\n+note: ...so that the types are compatible\n+  --> $DIR/async-associated-types.rs:19:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n+   |                                           ^^^^^^^^^^^^^^\n+   = note: expected `MyTrait<'static, 'static, T>`\n+              found `MyTrait<'_, '_, T>`\n+\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements\n+  --> $DIR/async-associated-types.rs:19:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n+   |                                           ^^^^^^^^^^^^^^\n+   |\n+note: first, the lifetime cannot outlive the lifetime `'b` as defined here...\n+  --> $DIR/async-associated-types.rs:16:10\n+   |\n+LL | impl<'a, 'b, T: Debug + Sized + 'b, U: 'a> MyTrait<'a, 'b, T> for U {\n+   |          ^^\n+note: ...so that the types are compatible\n+  --> $DIR/async-associated-types.rs:19:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n+   |                                           ^^^^^^^^^^^^^^\n+   = note: expected `(&'a U, &'b T)`\n+              found `(&U, &T)`\n+   = note: but, the lifetime must be valid for the static lifetime...\n+note: ...so that the types are compatible\n+  --> $DIR/async-associated-types.rs:19:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n+   |                                           ^^^^^^^^^^^^^^\n+   = note: expected `MyTrait<'static, 'static, T>`\n+              found `MyTrait<'_, '_, T>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "e546a0579c66f2f5774bd9b98b00943575b6a259", "filename": "src/test/ui/async-await/in-trait/async-associated-types2.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.rs?ref=c404092084c518d126f77c1369ab63e340ce693e", "patch": "@@ -0,0 +1,30 @@\n+// check-pass\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![feature(type_alias_impl_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::future::Future;\n+\n+trait MyTrait {\n+    type Fut<'a>: Future<Output = i32>\n+    where\n+        Self: 'a;\n+\n+    fn foo<'a>(&'a self) -> Self::Fut<'a>;\n+}\n+\n+impl MyTrait for i32 {\n+    type Fut<'a> = impl Future<Output = i32> + 'a\n+    where\n+        Self: 'a;\n+\n+    fn foo<'a>(&'a self) -> Self::Fut<'a> {\n+        async {\n+            *self\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "38ba297189c691ad05b8c4328a00fea2347a551c", "filename": "src/test/ui/async-await/in-trait/async-example-desugared-boxed-in-trait.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.rs?ref=c404092084c518d126f77c1369ab63e340ce693e", "patch": "@@ -0,0 +1,21 @@\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::future::Future;\n+use std::pin::Pin;\n+\n+trait MyTrait {\n+    fn foo(&self) -> Pin<Box<dyn Future<Output = i32> + '_>>;\n+}\n+\n+impl MyTrait for i32 {\n+    async fn foo(&self) -> i32 {\n+        //~^ ERROR method `foo` has an incompatible type for trait\n+        *self\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "22d2928f2f5641801c4b858ccbe6217d4aa8d830", "filename": "src/test/ui/async-await/in-trait/async-example-desugared-boxed-in-trait.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr?ref=c404092084c518d126f77c1369ab63e340ce693e", "patch": "@@ -0,0 +1,17 @@\n+error[E0053]: method `foo` has an incompatible type for trait\n+  --> $DIR/async-example-desugared-boxed-in-trait.rs:15:28\n+   |\n+LL |     async fn foo(&self) -> i32 {\n+   |                            ^^^ expected struct `Pin`, found opaque type\n+   |\n+note: type in trait\n+  --> $DIR/async-example-desugared-boxed-in-trait.rs:11:22\n+   |\n+LL |     fn foo(&self) -> Pin<Box<dyn Future<Output = i32> + '_>>;\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected fn pointer `fn(&i32) -> Pin<Box<dyn Future<Output = i32>>>`\n+              found fn pointer `fn(&i32) -> impl Future<Output = i32>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "61d7e2520eab7a8cea7c3f8f97fd2a932aa4d5bd", "filename": "src/test/ui/async-await/in-trait/async-example-desugared-boxed.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.rs?ref=c404092084c518d126f77c1369ab63e340ce693e", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::future::Future;\n+use std::pin::Pin;\n+\n+trait MyTrait {\n+    async fn foo(&self) -> i32;\n+}\n+\n+impl MyTrait for i32 {\n+    // This will break once a PR that implements #102745 is merged\n+    fn foo(&self) -> Pin<Box<dyn Future<Output = i32> + '_>> {\n+        Box::pin(async {\n+            *self\n+        })\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "feeda719e0306605bce7df6e8b8d74dff26c3972", "filename": "src/test/ui/async-await/in-trait/async-example-desugared-in-trait.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-in-trait.rs?ref=c404092084c518d126f77c1369ab63e340ce693e", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::future::Future;\n+\n+trait MyTrait {\n+    fn foo(&self) -> impl Future<Output = i32> + '_;\n+}\n+\n+impl MyTrait for i32 {\n+    // This will break once a PR that implements #102745 is merged\n+    async fn foo(&self) -> i32 {\n+        *self\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "1313c9edd861c213850af2725cadc84f52146fed", "filename": "src/test/ui/async-await/in-trait/async-example-desugared.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared.rs?ref=c404092084c518d126f77c1369ab63e340ce693e", "patch": "@@ -0,0 +1,23 @@\n+// check-pass\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::future::Future;\n+\n+trait MyTrait {\n+    async fn foo(&self) -> i32;\n+}\n+\n+impl MyTrait for i32 {\n+    // This will break once a PR that implements #102745 is merged\n+    fn foo(&self) -> impl Future<Output = i32> + '_ {\n+        async {\n+            *self\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "abf94ef7450fcfceeaf672224213af3a32e78cd6", "filename": "src/test/ui/async-await/in-trait/async-example.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example.rs?ref=c404092084c518d126f77c1369ab63e340ce693e", "patch": "@@ -0,0 +1,32 @@\n+// check-pass\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait MyTrait {\n+    async fn foo(&self) -> i32;\n+    async fn bar(&self) -> i32;\n+}\n+\n+impl MyTrait for i32 {\n+    async fn foo(&self) -> i32 {\n+        *self\n+    }\n+\n+    async fn bar(&self) -> i32 {\n+        self.foo().await\n+    }\n+}\n+\n+fn main() {\n+    let x = 5;\n+    // Calling from non-async context\n+    let _ = x.foo();\n+    let _ = x.bar();\n+    // Calling from async block in non-async context\n+    async {\n+        let _: i32 = x.foo().await;\n+        let _: i32 = x.bar().await;\n+    };\n+}"}, {"sha": "a73d55adfeced13a9f9d9becb8e16d500ef4ae09", "filename": "src/test/ui/async-await/in-trait/async-generics-and-bounds.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.rs?ref=c404092084c518d126f77c1369ab63e340ce693e", "patch": "@@ -0,0 +1,21 @@\n+// check-fail\n+// known-bug: #102682\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Debug;\n+use std::hash::Hash;\n+\n+trait MyTrait<T, U> {\n+    async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+}\n+\n+impl<T, U> MyTrait<T, U> for (T, U) {\n+    async fn foo(&self) -> &(T, U) {\n+        self\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "5c8d64fc6cb4c858810b1ea013dc2b3a2cb5f855", "filename": "src/test/ui/async-await/in-trait/async-generics-and-bounds.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.stderr?ref=c404092084c518d126f77c1369ab63e340ce693e", "patch": "@@ -0,0 +1,37 @@\n+error[E0311]: the parameter type `U` may not live long enough\n+  --> $DIR/async-generics-and-bounds.rs:12:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                            ^^^^^^^\n+   |\n+note: the parameter type `U` must be valid for the anonymous lifetime as defined here...\n+  --> $DIR/async-generics-and-bounds.rs:12:18\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                  ^\n+note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n+  --> $DIR/async-generics-and-bounds.rs:12:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                            ^^^^^^^\n+\n+error[E0311]: the parameter type `T` may not live long enough\n+  --> $DIR/async-generics-and-bounds.rs:12:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                            ^^^^^^^\n+   |\n+note: the parameter type `T` must be valid for the anonymous lifetime as defined here...\n+  --> $DIR/async-generics-and-bounds.rs:12:18\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                  ^\n+note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n+  --> $DIR/async-generics-and-bounds.rs:12:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                            ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0311`."}, {"sha": "67000e5770ee8c2c5fa4641103777a3c52a259d6", "filename": "src/test/ui/async-await/in-trait/async-generics.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.rs?ref=c404092084c518d126f77c1369ab63e340ce693e", "patch": "@@ -0,0 +1,18 @@\n+// check-fail\n+// known-bug: #102682\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait MyTrait<T, U> {\n+    async fn foo(&self) -> &(T, U);\n+}\n+\n+impl<T, U> MyTrait<T, U> for (T, U) {\n+    async fn foo(&self) -> &(T, U) {\n+        self\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "6ae73d9e3a60175029633c5aac78ef88e8c281da", "filename": "src/test/ui/async-await/in-trait/async-generics.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.stderr?ref=c404092084c518d126f77c1369ab63e340ce693e", "patch": "@@ -0,0 +1,37 @@\n+error[E0311]: the parameter type `U` may not live long enough\n+  --> $DIR/async-generics.rs:9:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                            ^^^^^^^\n+   |\n+note: the parameter type `U` must be valid for the anonymous lifetime as defined here...\n+  --> $DIR/async-generics.rs:9:18\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                  ^\n+note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n+  --> $DIR/async-generics.rs:9:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                            ^^^^^^^\n+\n+error[E0311]: the parameter type `T` may not live long enough\n+  --> $DIR/async-generics.rs:9:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                            ^^^^^^^\n+   |\n+note: the parameter type `T` must be valid for the anonymous lifetime as defined here...\n+  --> $DIR/async-generics.rs:9:18\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                  ^\n+note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n+  --> $DIR/async-generics.rs:9:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                            ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0311`."}, {"sha": "3f7448cecd157fa006043471198734e2d5c56184", "filename": "src/test/ui/async-await/in-trait/async-lifetimes-and-bounds.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.rs?ref=c404092084c518d126f77c1369ab63e340ce693e", "patch": "@@ -0,0 +1,20 @@\n+// check-fail\n+// known-bug: #102682\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Debug;\n+\n+trait MyTrait<'a, 'b, T> {\n+    async fn foo(&'a self, key: &'b T) -> (&'a Self, &'b T) where T: Debug + Sized;\n+}\n+\n+impl<'a, 'b, T, U> MyTrait<'a, 'b, T> for U {\n+    async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n+        (self, key)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "0f02420274333badbcbc3d84b3c0fd159a8bdcd6", "filename": "src/test/ui/async-await/in-trait/async-lifetimes-and-bounds.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.stderr?ref=c404092084c518d126f77c1369ab63e340ce693e", "patch": "@@ -0,0 +1,23 @@\n+error[E0309]: the parameter type `Self` may not live long enough\n+  --> $DIR/async-lifetimes-and-bounds.rs:11:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a Self, &'b T) where T: Debug + Sized;\n+   |                                           ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `Self: 'a`...\n+   = note: ...so that the reference type `&'a Self` does not outlive the data it points at\n+\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/async-lifetimes-and-bounds.rs:11:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a Self, &'b T) where T: Debug + Sized;\n+   |                                           ^^^^^^^^^^^^^^^^^ ...so that the reference type `&'b T` does not outlive the data it points at\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | trait MyTrait<'a, 'b, T: 'b> {\n+   |                        ++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0309`."}, {"sha": "acbac471cf7e8638e0a989e531c4f63b6ef5f519", "filename": "src/test/ui/async-await/in-trait/async-lifetimes.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes.rs?ref=c404092084c518d126f77c1369ab63e340ce693e", "patch": "@@ -0,0 +1,18 @@\n+// check-fail\n+// known-bug: #102682\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait MyTrait<'a, 'b, T> {\n+    async fn foo(&'a self, key: &'b T) -> (&'a Self, &'b T);\n+}\n+\n+impl<'a, 'b, T, U> MyTrait<'a, 'b, T> for U {\n+    async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n+        (self, key)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "9a7d294bb17669f6de727d113abcc4c78903e990", "filename": "src/test/ui/async-await/in-trait/async-lifetimes.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes.stderr?ref=c404092084c518d126f77c1369ab63e340ce693e", "patch": "@@ -0,0 +1,23 @@\n+error[E0309]: the parameter type `Self` may not live long enough\n+  --> $DIR/async-lifetimes.rs:9:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a Self, &'b T);\n+   |                                           ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `Self: 'a`...\n+   = note: ...so that the reference type `&'a Self` does not outlive the data it points at\n+\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/async-lifetimes.rs:9:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a Self, &'b T);\n+   |                                           ^^^^^^^^^^^^^^^^^ ...so that the reference type `&'b T` does not outlive the data it points at\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | trait MyTrait<'a, 'b, T: 'b> {\n+   |                        ++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0309`."}, {"sha": "6839abd381c3f9b3126a4038eaa83f1eb90bd0ef", "filename": "src/test/ui/async-await/in-trait/async-recursive-generic.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.rs?ref=c404092084c518d126f77c1369ab63e340ce693e", "patch": "@@ -0,0 +1,21 @@\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait MyTrait<T> {\n+    async fn foo_recursive(&self, n: usize) -> T;\n+}\n+\n+impl<T> MyTrait<T> for T where T: Copy {\n+    async fn foo_recursive(&self, n: usize) -> T {\n+        //~^ ERROR recursion in an `async fn` requires boxing\n+        if n > 0 {\n+            self.foo_recursive(n - 1).await\n+        } else {\n+            *self\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "cab173bdd5b7030a508a74d04ceb1baba74aa5dc", "filename": "src/test/ui/async-await/in-trait/async-recursive-generic.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.stderr?ref=c404092084c518d126f77c1369ab63e340ce693e", "patch": "@@ -0,0 +1,12 @@\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/async-recursive-generic.rs:11:48\n+   |\n+LL |     async fn foo_recursive(&self, n: usize) -> T {\n+   |                                                ^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0733`."}, {"sha": "61119f8095bcc0edcf2d380b3b54f827c0d4b59a", "filename": "src/test/ui/async-await/in-trait/async-recursive.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.rs?ref=c404092084c518d126f77c1369ab63e340ce693e", "patch": "@@ -0,0 +1,21 @@\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait MyTrait {\n+    async fn foo_recursive(&self, n: usize) -> i32;\n+}\n+\n+impl MyTrait for i32 {\n+    async fn foo_recursive(&self, n: usize) -> i32 {\n+        //~^ ERROR recursion in an `async fn` requires boxing\n+        if n > 0 {\n+            self.foo_recursive(n - 1).await\n+        } else {\n+            *self\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "9feff37b3fe46772ccebb3d3c778dd70d325fc68", "filename": "src/test/ui/async-await/in-trait/async-recursive.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.stderr?ref=c404092084c518d126f77c1369ab63e340ce693e", "patch": "@@ -0,0 +1,12 @@\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/async-recursive.rs:11:48\n+   |\n+LL |     async fn foo_recursive(&self, n: usize) -> i32 {\n+   |                                                ^^^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0733`."}, {"sha": "f94d32145a290297c1750035ba89297ecf8220eb", "filename": "src/test/ui/async-await/in-trait/fn-not-async-err.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.rs?ref=c404092084c518d126f77c1369ab63e340ce693e", "patch": "@@ -0,0 +1,17 @@\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait MyTrait {\n+    async fn foo(&self) -> i32;\n+}\n+\n+impl MyTrait for i32 {\n+    fn foo(&self) -> i32 {\n+        //~^ ERROR: `i32` is not a future [E0277]\n+        *self\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "03321dc5b5af16a4ccbd9baa3f78fb005151201b", "filename": "src/test/ui/async-await/in-trait/fn-not-async-err.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.stderr?ref=c404092084c518d126f77c1369ab63e340ce693e", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: `i32` is not a future\n+  --> $DIR/fn-not-async-err.rs:11:22\n+   |\n+LL |     fn foo(&self) -> i32 {\n+   |                      ^^^ `i32` is not a future\n+   |\n+   = help: the trait `Future` is not implemented for `i32`\n+   = note: i32 must be a future or must implement `IntoFuture` to be awaited\n+note: required by a bound in `MyTrait::foo::{opaque#0}`\n+  --> $DIR/fn-not-async-err.rs:7:28\n+   |\n+LL |     async fn foo(&self) -> i32;\n+   |                            ^^^ required by this bound in `MyTrait::foo::{opaque#0}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "594baa91ad8ba61c21eb6914ae4c0b24e5fedd0b", "filename": "src/test/ui/async-await/in-trait/fn-not-async-err2.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs?ref=c404092084c518d126f77c1369ab63e340ce693e", "patch": "@@ -0,0 +1,21 @@\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::future::Future;\n+\n+trait MyTrait {\n+    async fn foo(&self) -> i32;\n+}\n+\n+impl MyTrait for i32 {\n+    fn foo(&self) -> impl Future<Output = i32> {\n+        //~^ ERROR `impl Trait` only allowed in function and inherent method return types, not in `impl` method return [E0562]\n+        async {\n+            *self\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "f591f184772901e061a6928067e2484df9ce552c", "filename": "src/test/ui/async-await/in-trait/fn-not-async-err2.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c404092084c518d126f77c1369ab63e340ce693e/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.stderr?ref=c404092084c518d126f77c1369ab63e340ce693e", "patch": "@@ -0,0 +1,12 @@\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return\n+  --> $DIR/fn-not-async-err2.rs:13:22\n+   |\n+LL |     fn foo(&self) -> impl Future<Output = i32> {\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0562`."}]}