{"sha": "066d2eea250c9010358392c93ef40f36cbb9930b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2NmQyZWVhMjUwYzkwMTAzNTgzOTJjOTNlZjQwZjM2Y2JiOTkzMGI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-26T12:35:15Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-28T17:57:05Z"}, "message": "fix unsized extern types", "tree": {"sha": "b9f948ac57329dd8935177b324fa4b7e2ce1cefe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9f948ac57329dd8935177b324fa4b7e2ce1cefe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/066d2eea250c9010358392c93ef40f36cbb9930b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/066d2eea250c9010358392c93ef40f36cbb9930b", "html_url": "https://github.com/rust-lang/rust/commit/066d2eea250c9010358392c93ef40f36cbb9930b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/066d2eea250c9010358392c93ef40f36cbb9930b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f96208ca5bd34ba5e9106fe6527db43a9bdc3a8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f96208ca5bd34ba5e9106fe6527db43a9bdc3a8f", "html_url": "https://github.com/rust-lang/rust/commit/f96208ca5bd34ba5e9106fe6527db43a9bdc3a8f"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "9681b705d7eba1d28f8e2a5efee2fb4025ccd6be", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/066d2eea250c9010358392c93ef40f36cbb9930b/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066d2eea250c9010358392c93ef40f36cbb9930b/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=066d2eea250c9010358392c93ef40f36cbb9930b", "patch": "@@ -232,8 +232,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n         &self,\n         mplace: MPlaceTy<'tcx>,\n     ) -> EvalResult<'tcx, Option<Value>> {\n-        debug_assert_eq!(mplace.extra.is_some(), mplace.layout.is_unsized());\n-        if mplace.extra.is_some() {\n+        if mplace.layout.is_unsized() {\n             // Dont touch unsized\n             return Ok(None);\n         }"}, {"sha": "0a6fef3008433c04283d247bbba0d41a357cf315", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/066d2eea250c9010358392c93ef40f36cbb9930b/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066d2eea250c9010358392c93ef40f36cbb9930b/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=066d2eea250c9010358392c93ef40f36cbb9930b", "patch": "@@ -32,6 +32,8 @@ pub struct MemPlace {\n     pub ptr: Scalar,\n     pub align: Align,\n     /// Metadata for unsized places.  Interpretation is up to the type.\n+    /// Must not be present for sized types, but can be missing for unsized types\n+    /// (e.g. `extern type`).\n     pub extra: Option<Scalar>,\n }\n \n@@ -236,11 +238,12 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n     ) -> EvalResult<'tcx, MPlaceTy<'tcx>> {\n         let pointee_type = val.layout.ty.builtin_deref(true).unwrap().ty;\n         let layout = self.layout_of(pointee_type)?;\n-        let mplace = if layout.is_unsized() {\n-            let (ptr, extra) = val.to_scalar_pair()?;\n-            MemPlace { ptr, align: layout.align, extra: Some(extra) }\n-        } else {\n-            MemPlace { ptr: val.to_scalar()?, align: layout.align, extra: None }\n+        let align = layout.align;\n+        let mplace = match *val {\n+            Value::Scalar(ptr) =>\n+                MemPlace { ptr: ptr.not_undef()?, align, extra: None },\n+            Value::ScalarPair(ptr, extra) =>\n+                MemPlace { ptr: ptr.not_undef()?, align, extra: Some(extra.not_undef()?) },\n         };\n         Ok(MPlaceTy { mplace, layout })\n     }"}]}