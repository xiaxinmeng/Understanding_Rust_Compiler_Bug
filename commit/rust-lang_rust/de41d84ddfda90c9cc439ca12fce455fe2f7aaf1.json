{"sha": "de41d84ddfda90c9cc439ca12fce455fe2f7aaf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNDFkODRkZGZkYTkwYzljYzQzOWNhMTJmY2U0NTVmZTJmN2FhZjE=", "commit": {"author": {"name": "John-John Tedro", "email": "udoprog@tedro.se", "date": "2017-11-25T17:35:30Z"}, "committer": {"name": "John-John Tedro", "email": "udoprog@tedro.se", "date": "2017-11-25T20:15:03Z"}, "message": "Introduce LinkedList::remove_if", "tree": {"sha": "be5e7176b7bdecd7b6eb69ae58c46d603dba97a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be5e7176b7bdecd7b6eb69ae58c46d603dba97a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de41d84ddfda90c9cc439ca12fce455fe2f7aaf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de41d84ddfda90c9cc439ca12fce455fe2f7aaf1", "html_url": "https://github.com/rust-lang/rust/commit/de41d84ddfda90c9cc439ca12fce455fe2f7aaf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de41d84ddfda90c9cc439ca12fce455fe2f7aaf1/comments", "author": {"login": "udoprog", "id": 111092, "node_id": "MDQ6VXNlcjExMTA5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/111092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/udoprog", "html_url": "https://github.com/udoprog", "followers_url": "https://api.github.com/users/udoprog/followers", "following_url": "https://api.github.com/users/udoprog/following{/other_user}", "gists_url": "https://api.github.com/users/udoprog/gists{/gist_id}", "starred_url": "https://api.github.com/users/udoprog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/udoprog/subscriptions", "organizations_url": "https://api.github.com/users/udoprog/orgs", "repos_url": "https://api.github.com/users/udoprog/repos", "events_url": "https://api.github.com/users/udoprog/events{/privacy}", "received_events_url": "https://api.github.com/users/udoprog/received_events", "type": "User", "site_admin": false}, "committer": {"login": "udoprog", "id": 111092, "node_id": "MDQ6VXNlcjExMTA5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/111092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/udoprog", "html_url": "https://github.com/udoprog", "followers_url": "https://api.github.com/users/udoprog/followers", "following_url": "https://api.github.com/users/udoprog/following{/other_user}", "gists_url": "https://api.github.com/users/udoprog/gists{/gist_id}", "starred_url": "https://api.github.com/users/udoprog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/udoprog/subscriptions", "organizations_url": "https://api.github.com/users/udoprog/orgs", "repos_url": "https://api.github.com/users/udoprog/repos", "events_url": "https://api.github.com/users/udoprog/events{/privacy}", "received_events_url": "https://api.github.com/users/udoprog/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f47a9eb80bc3474b6e89637269ef1f92cfccb7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f47a9eb80bc3474b6e89637269ef1f92cfccb7f", "html_url": "https://github.com/rust-lang/rust/commit/2f47a9eb80bc3474b6e89637269ef1f92cfccb7f"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "689a267199430f62a7f2f92fbdec3bdb03d42db0", "filename": "src/liballoc/linked_list.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/de41d84ddfda90c9cc439ca12fce455fe2f7aaf1/src%2Fliballoc%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de41d84ddfda90c9cc439ca12fce455fe2f7aaf1/src%2Fliballoc%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flinked_list.rs?ref=de41d84ddfda90c9cc439ca12fce455fe2f7aaf1", "patch": "@@ -220,6 +220,28 @@ impl<T> LinkedList<T> {\n             node\n         })\n     }\n+\n+    /// Unlinks the specified node from the current list.\n+    ///\n+    /// Warning: this will not check that the provided node belongs to the current list.\n+    #[inline]\n+    unsafe fn unlink_node(&mut self, mut node: Shared<Node<T>>) {\n+        let node = node.as_mut();\n+\n+        match node.prev {\n+            Some(mut prev) => prev.as_mut().next = node.next.clone(),\n+            // this node is the head node\n+            None => self.head = node.next.clone(),\n+        };\n+\n+        match node.next {\n+            Some(mut next) => next.as_mut().prev = node.prev.clone(),\n+            // this node is the tail node\n+            None => self.tail = node.prev.clone(),\n+        };\n+\n+        self.len -= 1;\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -722,6 +744,50 @@ impl<T> LinkedList<T> {\n         second_part\n     }\n \n+    /// Removes any element matching the given predicate. Returns the elements which were removed\n+    /// in a new list.\n+    ///\n+    /// This operation should compute in O(n) time.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(linked_list_remove_if)]\n+    ///\n+    /// use std::collections::LinkedList;\n+    ///\n+    /// let mut d = LinkedList::new();\n+    /// d.push_back(1);\n+    /// d.push_back(2);\n+    /// d.push_back(3);\n+    /// assert_eq!(d.remove_if(|v| *v < 3).len(), 2);\n+    /// assert_eq!(d.len(), 1);\n+    /// ```\n+    #[unstable(feature = \"linked_list_remove_if\",\n+               reason = \"experimental method\",\n+               issue = \"0\")]\n+    pub fn remove_if<P>(&mut self, predicate: P) -> LinkedList<T>\n+        where P: Fn(&T) -> bool\n+    {\n+        let mut deleted = LinkedList::new();\n+\n+        let mut it = self.head;\n+\n+        while let Some(node) = it {\n+            unsafe {\n+                it = node.as_ref().next;\n+\n+                if predicate(&node.as_ref().element) {\n+                    self.unlink_node(node);\n+                    // move the unlinked node into the deleted list.\n+                    deleted.push_back_node(Box::from_raw(node.as_ptr()));\n+                }\n+            }\n+        }\n+\n+        deleted\n+    }\n+\n     /// Returns a place for insertion at the front of the list.\n     ///\n     /// Using this method with placement syntax is equivalent to\n@@ -1502,4 +1568,17 @@ mod tests {\n         }\n         assert_eq!(i, v.len());\n     }\n+\n+    #[test]\n+    fn remove_if_test() {\n+        let mut m: LinkedList<u32> = LinkedList::new();\n+        m.extend(&[1, 2, 3, 4, 5, 6]);\n+        let deleted = m.remove_if(|v| *v < 4);\n+\n+        check_links(&m);\n+        check_links(&deleted);\n+\n+        assert_eq!(deleted.into_iter().collect::<Vec<_>>(), &[1, 2, 3]);\n+        assert_eq!(m.into_iter().collect::<Vec<_>>(), &[4, 5, 6]);\n+    }\n }"}]}