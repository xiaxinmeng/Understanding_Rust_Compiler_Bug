{"sha": "8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0MjlkMTFhMGI4MGRmYWY4YTc5ZmIwZDVlOWJiNWZkNTA0NTU3MTI=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-05-24T21:52:01Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-05-24T22:56:02Z"}, "message": "Use AllFacts from polonius-engine", "tree": {"sha": "cf43d7ac562b83be835518cd5179b04de57b0922", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf43d7ac562b83be835518cd5179b04de57b0922"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAlsHQwQACgkQiMlBzaHU\nZDKfbxAAnPzx5HkYys416EEfL9Xr3Er68mTaduFcRRbg94cnyq7zWeB4CTA+6qXm\nNBYbudN3oDdHzVBB4iSYUkVglZyFRLwFo81nevUQEhq/QYxyEIe9NUrpCHxWIgp1\n91FH8NKzmSdNpsp43vBxOVXibOAwQ6N3GmrvHIABg6jWsEtjJWbQnv0sKv7H52rp\nhloBChIMGCVnw9qamGjicdo5Qf89DTI+Ez/Yze6hBAzt9hDaITT+rrnbIXZr10h1\nc6lh7C13R3zGmnyBdvNP/WkCCAXLQG5dHQzHjYC0hy492vDDmrSfbdExuPm+3/9m\nO2NkGFKsdVOB/TfmWaI1nyJwC5J9dtj+P0J6qcpg35fLM4gp9czdkhimi/+ckkzk\nBaF7wTte8keZPZakT54gmy5E+sehTzl9vKAoqmIVqy7oN8I+YTdOXWrs5Y9dgTLX\nr0j7yKLHaOmrnMjAd7JGLfGLhAg3Zw/9IPVsMmSgOhTIwRv3k35WwWEVJn4joYuD\nDvkYPHJ7V0iZPmOL0Cv8cBnc3u7nzOatqAd/mWBn+S+stpVgAzjbAX25lgHt+Mqw\neo2ypfL0NjpCqo6BmACq4HItlA6ckWk8oWyTqtc1F5qVT9erdO3FMQCl778Wt6bk\nyDV2YeExt3I6Q2h6kysOLuqW9bgVeal+i92yOfMowbnn2uLiRwQ=\n=Z/FW\n-----END PGP SIGNATURE-----", "payload": "tree cf43d7ac562b83be835518cd5179b04de57b0922\nparent 07465222ca9454d7c274908424a5e084710efd7e\nauthor Santiago Pastorino <spastorino@gmail.com> 1527198721 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1527202562 -0300\n\nUse AllFacts from polonius-engine\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712", "html_url": "https://github.com/rust-lang/rust/commit/8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07465222ca9454d7c274908424a5e084710efd7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/07465222ca9454d7c274908424a5e084710efd7e", "html_url": "https://github.com/rust-lang/rust/commit/07465222ca9454d7c274908424a5e084710efd7e"}], "stats": {"total": 108, "additions": 82, "deletions": 26}, "files": [{"sha": "ef545db1f2992b8fc723f2f9893799ec2e86dfd4", "filename": "src/Cargo.lock", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712", "patch": "@@ -1424,6 +1424,11 @@ name = \"pkg-config\"\n version = \"0.3.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"polonius-engine\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"precomputed-hash\"\n version = \"0.1.1\"\n@@ -1745,6 +1750,7 @@ dependencies = [\n  \"jobserver 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"polonius-engine 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc_macro 0.0.0\",\n  \"rustc_apfloat 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n@@ -2111,6 +2117,7 @@ dependencies = [\n  \"graphviz 0.0.0\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log_settings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"polonius-engine 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_apfloat 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n@@ -3107,6 +3114,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum phf_generator 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6b07ffcc532ccc85e3afc45865469bf5d9e4ef5bfcf9622e3cfe80c2d275ec03\"\n \"checksum phf_shared 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"07e24b0ca9643bdecd0632f2b3da6b1b89bbb0030e0b992afc1113b23a7bc2f2\"\n \"checksum pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a8b4c6b8165cd1a1cd4b9b120978131389f64bdaf456435caa41e630edba903\"\n+\"checksum polonius-engine 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6201ffe79e3da53bd065fbec2a9b391e5a0dc21038b39bb300612ddc658eb7ee\"\n \"checksum precomputed-hash 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"925383efa346730478fb4838dbe9137d2a47675ad789c546d150a6e1dd4ab31c\"\n \"checksum pretty_assertions 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a029430f0d744bc3d15dd474d591bed2402b645d024583082b9f63bb936dac6\"\n \"checksum proc-macro2 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"49b6a521dc81b643e9a51e0d1cf05df46d5a2f3c0280ea72bcb68276ba64a118\""}, {"sha": "4223b49a5b4f0d815c1f5a44e875d47d4b87f7ee", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712", "patch": "@@ -16,6 +16,7 @@ graphviz = { path = \"../libgraphviz\" }\n jobserver = \"0.1\"\n lazy_static = \"1.0.0\"\n log = { version = \"0.4\", features = [\"release_max_level_info\", \"std\"] }\n+polonius-engine = \"0.1.1\"\n proc_macro = { path = \"../libproc_macro\" }\n rustc_apfloat = { path = \"../librustc_apfloat\" }\n rustc_target = { path = \"../librustc_target\" }"}, {"sha": "08e49ea94bf026bd4eb5b754bd011e28b3f217b6", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712", "patch": "@@ -80,6 +80,7 @@ extern crate graphviz;\n #[macro_use] extern crate lazy_static;\n #[cfg(windows)]\n extern crate libc;\n+extern crate polonius_engine;\n extern crate rustc_target;\n #[macro_use] extern crate rustc_data_structures;\n extern crate serialize;"}, {"sha": "5980e19e69991ba34047f418171b9e092928dd14", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712", "patch": "@@ -14,6 +14,7 @@ use hir::def_id::DefId;\n \n use middle::const_val::ConstVal;\n use middle::region;\n+use polonius_engine::Atom;\n use rustc_data_structures::indexed_vec::Idx;\n use ty::subst::{Substs, Subst, Kind, UnpackedKind};\n use ty::{self, AdtDef, TypeFlags, Ty, TyCtxt, TypeFoldable};\n@@ -1169,6 +1170,24 @@ newtype_index!(RegionVid\n         DEBUG_FORMAT = custom,\n     });\n \n+impl Atom for RegionVid {\n+    fn index(self) -> usize {\n+        Idx::index(self)\n+    }\n+}\n+\n+impl From<usize> for RegionVid {\n+    fn from(i: usize) -> RegionVid {\n+        RegionVid::new(i)\n+    }\n+}\n+\n+impl From<RegionVid> for usize {\n+    fn from(vid: RegionVid) -> usize {\n+        Idx::index(vid)\n+    }\n+}\n+\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n pub enum InferTy {\n     TyVar(TyVid),"}, {"sha": "e88ff38ed7d34efcd847f6c4db331d467f16bfb2", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712", "patch": "@@ -14,6 +14,7 @@ bitflags = \"1.0\"\n graphviz = { path = \"../libgraphviz\" }\n log = \"0.4\"\n log_settings = \"0.1.1\"\n+polonius-engine = \"0.1.1\"\n rustc = { path = \"../librustc\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "6cb8e64b9f5b46d0226b27c2158abe524f75156d", "filename": "src/librustc_mir/borrow_check/nll/facts.rs", "status": "modified", "additions": 48, "deletions": 25, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs?ref=8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712", "patch": "@@ -10,41 +10,28 @@\n \n use borrow_check::location::{LocationIndex, LocationTable};\n use dataflow::indexes::BorrowIndex;\n+use polonius_engine::AllFacts as PoloniusAllFacts;\n+use polonius_engine::Atom;\n use rustc::ty::RegionVid;\n+use rustc_data_structures::indexed_vec::Idx;\n use std::error::Error;\n use std::fmt::Debug;\n use std::fs::{self, File};\n use std::io::Write;\n use std::path::Path;\n \n-/// The \"facts\" which are the basis of the NLL borrow analysis.\n-#[derive(Default)]\n-crate struct AllFacts {\n-    // `borrow_region(R, B, P)` -- the region R may refer to data from borrow B\n-    // starting at the point P (this is usually the point *after* a borrow rvalue)\n-    crate borrow_region: Vec<(RegionVid, BorrowIndex, LocationIndex)>,\n+crate type AllFacts = PoloniusAllFacts<RegionVid, BorrowIndex, LocationIndex>;\n \n-    // universal_region(R) -- this is a \"free region\" within fn body\n-    crate universal_region: Vec<RegionVid>,\n-\n-    // `cfg_edge(P,Q)` for each edge P -> Q in the control flow\n-    crate cfg_edge: Vec<(LocationIndex, LocationIndex)>,\n-\n-    // `killed(B,P)` when some prefix of the path borrowed at B is assigned at point P\n-    crate killed: Vec<(BorrowIndex, LocationIndex)>,\n-\n-    // `outlives(R1, R2, P)` when we require `R1@P: R2@P`\n-    crate outlives: Vec<(RegionVid, RegionVid, LocationIndex)>,\n-\n-    // `region_live_at(R, P)` when the region R appears in a live variable at P\n-    crate region_live_at: Vec<(RegionVid, LocationIndex)>,\n-\n-    // `invalidates(P, B)` when the borrow B is invalidated at point P\n-    crate invalidates: Vec<(LocationIndex, BorrowIndex)>,\n+crate trait AllFactsExt {\n+    fn write_to_dir(\n+        &self,\n+        dir: impl AsRef<Path>,\n+        location_table: &LocationTable,\n+    ) -> Result<(), Box<dyn Error>>;\n }\n \n-impl AllFacts {\n-    crate fn write_to_dir(\n+impl AllFactsExt for AllFacts {\n+    fn write_to_dir(\n         &self,\n         dir: impl AsRef<Path>,\n         location_table: &LocationTable,\n@@ -79,6 +66,42 @@ impl AllFacts {\n     }\n }\n \n+impl Atom for BorrowIndex {\n+    fn index(self) -> usize {\n+        Idx::index(self)\n+    }\n+}\n+\n+impl From<usize> for BorrowIndex {\n+    fn from(i: usize) -> BorrowIndex {\n+        BorrowIndex::new(i)\n+    }\n+}\n+\n+impl From<BorrowIndex> for usize {\n+    fn from(vid: BorrowIndex) -> usize {\n+        Idx::index(vid)\n+    }\n+}\n+\n+impl Atom for LocationIndex {\n+    fn index(self) -> usize {\n+        Idx::index(self)\n+    }\n+}\n+\n+impl From<usize> for LocationIndex {\n+    fn from(i: usize) -> LocationIndex {\n+        LocationIndex::new(i)\n+    }\n+}\n+\n+impl From<LocationIndex> for usize {\n+    fn from(vid: LocationIndex) -> usize {\n+        Idx::index(vid)\n+    }\n+}\n+\n struct FactWriter<'w> {\n     location_table: &'w LocationTable,\n     dir: &'w Path,"}, {"sha": "a91789733a95e9ed4222d763ee92c2e121044473", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712", "patch": "@@ -10,6 +10,7 @@\n \n use borrow_check::borrow_set::BorrowSet;\n use borrow_check::location::LocationTable;\n+use borrow_check::nll::facts::AllFactsExt;\n use dataflow::move_paths::MoveData;\n use dataflow::FlowAtLocation;\n use dataflow::MaybeInitializedPlaces;"}, {"sha": "610963af9e13c67eeb6cea6c4099b46ea2380925", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712", "patch": "@@ -34,7 +34,7 @@ pub(crate) mod indexes {\n \n     macro_rules! new_index {\n         ($Index:ident, $debug_name:expr) => {\n-            #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n+            #[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]\n             pub struct $Index(NonZeroUsize);\n \n             impl Idx for $Index {"}, {"sha": "ace4709ba1d645d057815258bb02b547e18e6bff", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712", "patch": "@@ -39,6 +39,7 @@ extern crate arena;\n extern crate bitflags;\n #[macro_use] extern crate log;\n extern crate graphviz as dot;\n+extern crate polonius_engine;\n #[macro_use]\n extern crate rustc;\n #[macro_use] extern crate rustc_data_structures;"}, {"sha": "ab323843bf4dcec9ca5bb5d14d7a5e186d3162f7", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=8429d11a0b80dfaf8a79fb0d5e9bb5fd50455712", "patch": "@@ -94,6 +94,7 @@ static WHITELIST: &'static [Crate] = &[\n     Crate(\"owning_ref\"),\n     Crate(\"parking_lot\"),\n     Crate(\"parking_lot_core\"),\n+    Crate(\"polonius-engine\"),\n     Crate(\"quick-error\"),\n     Crate(\"rand\"),\n     Crate(\"redox_syscall\"),"}]}