{"sha": "f14a0e2de484c2a61c80128a442827059c05783f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNGEwZTJkZTQ4NGMyYTYxYzgwMTI4YTQ0MjgyNzA1OWMwNTc4M2Y=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-06-18T00:48:16Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-06-19T00:38:38Z"}, "message": "Make a better error message for using #[feature] on stable rust\n\nIt now says '#[feature] may not be used on the stable release channel'.\n\nI had to convert this error from a lint to a normal compiler error.\n\nI left the lint previously-used for this in place since removing it is\na breaking change. It will just go unused until the end of time.\n\nFixes #24125", "tree": {"sha": "298de6f377e41dab1e89f319cd82df5040f81216", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/298de6f377e41dab1e89f319cd82df5040f81216"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f14a0e2de484c2a61c80128a442827059c05783f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f14a0e2de484c2a61c80128a442827059c05783f", "html_url": "https://github.com/rust-lang/rust/commit/f14a0e2de484c2a61c80128a442827059c05783f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f14a0e2de484c2a61c80128a442827059c05783f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b29cbe1ea94d4420d676ad43fddb9d8e346444b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b29cbe1ea94d4420d676ad43fddb9d8e346444b", "html_url": "https://github.com/rust-lang/rust/commit/9b29cbe1ea94d4420d676ad43fddb9d8e346444b"}], "stats": {"total": 108, "additions": 50, "deletions": 58}, "files": [{"sha": "567be56b17f29687f34c7a47b090475d0cbaa877", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 33, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f14a0e2de484c2a61c80128a442827059c05783f/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f14a0e2de484c2a61c80128a442827059c05783f/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=f14a0e2de484c2a61c80128a442827059c05783f", "patch": "@@ -28,9 +28,8 @@ use self::TargetLint::*;\n use middle::privacy::ExportedItems;\n use middle::ty::{self, Ty};\n use session::{early_error, Session};\n-use session::config::UnstableFeatures;\n use lint::{Level, LevelSource, Lint, LintId, LintArray, LintPass, LintPassObject};\n-use lint::{Default, CommandLine, Node, Allow, Warn, Deny, Forbid, ReleaseChannel};\n+use lint::{Default, CommandLine, Node, Allow, Warn, Deny, Forbid};\n use lint::builtin;\n use util::nodemap::FnvHashMap;\n \n@@ -208,23 +207,6 @@ impl LintStore {\n             }\n         }\n     }\n-\n-    fn maybe_stage_features(&mut self, sess: &Session) {\n-        let lvl = match sess.opts.unstable_features {\n-            UnstableFeatures::Default => return,\n-            UnstableFeatures::Disallow => Forbid,\n-            UnstableFeatures::Cheat => Allow\n-        };\n-        match self.by_name.get(\"unstable_features\") {\n-            Some(&Id(lint_id)) => if self.get_level_source(lint_id).0 != Forbid {\n-                self.set_level(lint_id, (lvl, ReleaseChannel))\n-            },\n-            Some(&Renamed(_, lint_id)) => if self.get_level_source(lint_id).0 != Forbid {\n-                self.set_level(lint_id, (lvl, ReleaseChannel))\n-            },\n-            None => unreachable!()\n-        }\n-    }\n }\n \n /// Context for lint checking.\n@@ -308,7 +290,6 @@ pub fn raw_emit_lint(sess: &Session, lint: &'static Lint,\n \n     let name = lint.name_lower();\n     let mut def = None;\n-    let mut note = None;\n     let msg = match source {\n         Default => {\n             format!(\"{}, #[{}({})] on by default\", msg,\n@@ -325,12 +306,6 @@ pub fn raw_emit_lint(sess: &Session, lint: &'static Lint,\n             def = Some(src);\n             msg.to_string()\n         }\n-        ReleaseChannel => {\n-            let release_channel = option_env!(\"CFG_RELEASE_CHANNEL\").unwrap_or(\"(unknown)\");\n-            note = Some(format!(\"this feature may not be used in the {} release channel\",\n-                                release_channel));\n-            msg.to_string()\n-        }\n     };\n \n     // For purposes of printing, we can treat forbid as deny.\n@@ -344,10 +319,6 @@ pub fn raw_emit_lint(sess: &Session, lint: &'static Lint,\n         _ => sess.bug(\"impossible level in raw_emit_lint\"),\n     }\n \n-    if let Some(note) = note {\n-        sess.note(&note[..]);\n-    }\n-\n     if let Some(span) = def {\n         sess.span_note(span, \"lint level defined here\");\n     }\n@@ -689,9 +660,6 @@ impl LintPass for GatherNodeLevels {\n pub fn check_crate(tcx: &ty::ctxt,\n                    exported_items: &ExportedItems) {\n \n-    // If this is a feature-staged build of rustc then flip several lints to 'forbid'\n-    tcx.sess.lint_store.borrow_mut().maybe_stage_features(&tcx.sess);\n-\n     let krate = tcx.map.krate();\n     let mut cx = Context::new(tcx, krate, exported_items);\n "}, {"sha": "fe893f6270203ddaf9708448c1885b7f1c3b94c8", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f14a0e2de484c2a61c80128a442827059c05783f/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f14a0e2de484c2a61c80128a442827059c05783f/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=f14a0e2de484c2a61c80128a442827059c05783f", "patch": "@@ -247,9 +247,6 @@ pub enum LintSource {\n \n     /// Lint level was set by a command-line flag.\n     CommandLine,\n-\n-    /// Lint level was set by the release channel.\n-    ReleaseChannel\n }\n \n pub type LevelSource = (Level, LintSource);"}, {"sha": "c6ce3a22d9b1c87cae3f3face29a9c151a529ea6", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f14a0e2de484c2a61c80128a442827059c05783f/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f14a0e2de484c2a61c80128a442827059c05783f/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=f14a0e2de484c2a61c80128a442827059c05783f", "patch": "@@ -32,6 +32,7 @@ use syntax::attr::AttrMetaMethods;\n use syntax::diagnostic::{ColorConfig, Auto, Always, Never, SpanHandler};\n use syntax::parse;\n use syntax::parse::token::InternedString;\n+use syntax::feature_gate::UnstableFeatures;\n \n use getopts;\n use std::collections::HashMap;\n@@ -119,21 +120,6 @@ pub struct Options {\n     pub unstable_features: UnstableFeatures\n }\n \n-#[derive(Clone, Copy)]\n-pub enum UnstableFeatures {\n-    /// Hard errors for unstable features are active, as on\n-    /// beta/stable channels.\n-    Disallow,\n-    /// Use the default lint levels\n-    Default,\n-    /// Errors are bypassed for bootstrapping. This is required any time\n-    /// during the build that feature-related lints are set to warn or above\n-    /// because the build turns on warnings-as-errors and uses lots of unstable\n-    /// features. As a result, this this is always required for building Rust\n-    /// itself.\n-    Cheat\n-}\n-\n #[derive(Clone, PartialEq, Eq)]\n pub enum PrintRequest {\n     FileNames,\n@@ -1074,7 +1060,7 @@ pub fn get_unstable_features_setting() -> UnstableFeatures {\n     match (disable_unstable_features, bootstrap_secret_key, bootstrap_provided_key) {\n         (_, Some(ref s), Some(ref p)) if s == p => UnstableFeatures::Cheat,\n         (true, _, _) => UnstableFeatures::Disallow,\n-        (false, _, _) => UnstableFeatures::Default\n+        (false, _, _) => UnstableFeatures::Allow\n     }\n }\n "}, {"sha": "762eb6e255deb02f7355d3f2bc1fc2b20408b52a", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f14a0e2de484c2a61c80128a442827059c05783f/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f14a0e2de484c2a61c80128a442827059c05783f/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=f14a0e2de484c2a61c80128a442827059c05783f", "patch": "@@ -513,7 +513,8 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         let features =\n             syntax::feature_gate::check_crate(sess.codemap(),\n                                               &sess.parse_sess.span_diagnostic,\n-                                              &krate, &attributes);\n+                                              &krate, &attributes,\n+                                              sess.opts.unstable_features);\n         *sess.features.borrow_mut() = features;\n         sess.abort_if_errors();\n     });\n@@ -543,7 +544,8 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         let features =\n             syntax::feature_gate::check_crate(sess.codemap(),\n                                               &sess.parse_sess.span_diagnostic,\n-                                              &krate, &attributes);\n+                                              &krate, &attributes,\n+                                              sess.opts.unstable_features);\n         *sess.features.borrow_mut() = features;\n         sess.abort_if_errors();\n     });"}, {"sha": "876d536b593776300d01cbb187ddd36cbf675b4c", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f14a0e2de484c2a61c80128a442827059c05783f/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f14a0e2de484c2a61c80128a442827059c05783f/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=f14a0e2de484c2a61c80128a442827059c05783f", "patch": "@@ -36,6 +36,7 @@ use syntax::codemap;\n use syntax::codemap::{Span, CodeMap, DUMMY_SP};\n use syntax::diagnostic::{Level, RenderSpan, Bug, Fatal, Error, Warning, Note, Help};\n use syntax::parse::token;\n+use syntax::feature_gate::UnstableFeatures;\n \n struct Env<'a, 'tcx: 'a> {\n     infcx: &'a infer::InferCtxt<'a, 'tcx>,\n@@ -103,6 +104,7 @@ fn test_env<F>(source_string: &str,\n     let mut options =\n         config::basic_options();\n     options.debugging_opts.verbose = true;\n+    options.unstable_features = UnstableFeatures::Allow;\n     let codemap =\n         CodeMap::new();\n     let diagnostic_handler ="}, {"sha": "43265e52d2c78735d35e6514ede35bfd84711896", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f14a0e2de484c2a61c80128a442827059c05783f/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f14a0e2de484c2a61c80128a442827059c05783f/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=f14a0e2de484c2a61c80128a442827059c05783f", "patch": "@@ -2215,7 +2215,7 @@ pub struct UnstableFeatures;\n declare_lint! {\n     UNSTABLE_FEATURES,\n     Allow,\n-    \"enabling unstable features\"\n+    \"enabling unstable features (deprecated. do not use)\"\n }\n \n impl LintPass for UnstableFeatures {"}, {"sha": "0803689e19e31d8020a4d3d736e6bb2e07d58167", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f14a0e2de484c2a61c80128a442827059c05783f/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f14a0e2de484c2a61c80128a442827059c05783f/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=f14a0e2de484c2a61c80128a442827059c05783f", "patch": "@@ -12,14 +12,14 @@ pub use self::MaybeTyped::*;\n use rustc_lint;\n use rustc_driver::driver;\n use rustc::session::{self, config};\n-use rustc::session::config::UnstableFeatures;\n use rustc::middle::{privacy, ty};\n use rustc::ast_map;\n use rustc::lint;\n use rustc_trans::back::link;\n use rustc_resolve as resolve;\n \n use syntax::{ast, codemap, diagnostic};\n+use syntax::feature_gate::UnstableFeatures;\n \n use std::cell::{RefCell, Cell};\n use std::collections::{HashMap, HashSet};\n@@ -106,7 +106,7 @@ pub fn run_core(search_paths: SearchPaths, cfgs: Vec<String>, externs: Externs,\n         target_triple: triple.unwrap_or(config::host_triple().to_string()),\n         cfg: config::parse_cfgspecs(cfgs),\n         // Ensure that rustdoc works even if rustc is feature-staged\n-        unstable_features: UnstableFeatures::Default,\n+        unstable_features: UnstableFeatures::Allow,\n         ..config::basic_options().clone()\n     };\n "}, {"sha": "3d0cf9236c25ca470f9e3491ed0548c049df41ee", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f14a0e2de484c2a61c80128a442827059c05783f/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f14a0e2de484c2a61c80128a442827059c05783f/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=f14a0e2de484c2a61c80128a442827059c05783f", "patch": "@@ -799,9 +799,46 @@ pub fn check_crate_macros(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast:\n }\n \n pub fn check_crate(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::Crate,\n-                   plugin_attributes: &[(String, AttributeType)]) -> Features\n+                   plugin_attributes: &[(String, AttributeType)],\n+                   unstable: UnstableFeatures) -> Features\n {\n+    maybe_stage_features(span_handler, krate, unstable);\n+\n     check_crate_inner(cm, span_handler, krate, plugin_attributes,\n                       |ctx, krate| visit::walk_crate(&mut PostExpansionVisitor { context: ctx },\n                                                      krate))\n }\n+\n+#[derive(Clone, Copy)]\n+pub enum UnstableFeatures {\n+    /// Hard errors for unstable features are active, as on\n+    /// beta/stable channels.\n+    Disallow,\n+    /// Allow features to me activated, as on nightly.\n+    Allow,\n+    /// Errors are bypassed for bootstrapping. This is required any time\n+    /// during the build that feature-related lints are set to warn or above\n+    /// because the build turns on warnings-as-errors and uses lots of unstable\n+    /// features. As a result, this this is always required for building Rust\n+    /// itself.\n+    Cheat\n+}\n+\n+fn maybe_stage_features(span_handler: &SpanHandler, krate: &ast::Crate,\n+                        unstable: UnstableFeatures) {\n+    let allow_features = match unstable {\n+        UnstableFeatures::Allow => true,\n+        UnstableFeatures::Disallow => false,\n+        UnstableFeatures::Cheat => true\n+    };\n+    if !allow_features {\n+        for attr in &krate.attrs {\n+            if attr.check_name(\"feature\") {\n+                let release_channel = option_env!(\"CFG_RELEASE_CHANNEL\").unwrap_or(\"(unknown)\");\n+                let ref msg = format!(\"#[feature] may not be used on the {} release channel\",\n+                                      release_channel);\n+                span_handler.span_err(attr.span, msg);\n+            }\n+        }\n+    }\n+}"}]}