{"sha": "3c2e4ff525a710987c4e01805edf051740cb022b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMmU0ZmY1MjVhNzEwOTg3YzRlMDE4MDVlZGYwNTE3NDBjYjAyMmI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-04T22:24:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-04T22:24:33Z"}, "message": "Rollup merge of #83820 - petrochenkov:nolinkargs, r=nagisa\n\nRemove attribute `#[link_args]`\n\nCloses https://github.com/rust-lang/rust/issues/29596\n\nThe attribute could always be replaced with `-C link-arg`, but cargo didn't provide a reasonable way to pass such flags to rustc.\nNow cargo supports `cargo:rustc-link-arg*` directives in build scripts (https://doc.rust-lang.org/cargo/reference/unstable.html#extra-link-arg), so this attribute can be removed.", "tree": {"sha": "5d5d3047093a747e9f411de20de4227ec8c0cf78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d5d3047093a747e9f411de20de4227ec8c0cf78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c2e4ff525a710987c4e01805edf051740cb022b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgajyiCRBK7hj4Ov3rIwAAdHIIAIRrZ/V3rrUnkXunAgGqKid9\nDD8IU76msCXcBNQh2Eb3K49udoUHP21brbY+2OvrdxnwNKGkKYecs/+TpEOctwSg\nFaGqmi7+PfCve15LUebITPXH3aZoLIO5uVf6fOuM6QbqYsSaIqZmuaV+8Dd0HFgS\n9187gslyu+Qr6Hp5NpllE8C2oTQELlVxFvgH+msZ7BVJ571sms7SFOx8bX1+Qwby\nM//pNYfJ/716m7yqxTpha+Y8PkgpWGttlv/b5tBsPe+nyrp2srj5rr5Ezx13mu2f\n39T4FaHT0khK5OGNdVyYMpyGFRGsG75fM86CGpb82/oj5XpdSjk7LeDVrYn84C0=\n=nrHY\n-----END PGP SIGNATURE-----\n", "payload": "tree 5d5d3047093a747e9f411de20de4227ec8c0cf78\nparent fbe89e20e83bd726b34ee0462ac96f2515f5945d\nparent 5839bff0bac6063147c8905388713a787577208f\nauthor Dylan DPC <dylan.dpc@gmail.com> 1617575073 +0200\ncommitter GitHub <noreply@github.com> 1617575073 +0200\n\nRollup merge of #83820 - petrochenkov:nolinkargs, r=nagisa\n\nRemove attribute `#[link_args]`\n\nCloses https://github.com/rust-lang/rust/issues/29596\n\nThe attribute could always be replaced with `-C link-arg`, but cargo didn't provide a reasonable way to pass such flags to rustc.\nNow cargo supports `cargo:rustc-link-arg*` directives in build scripts (https://doc.rust-lang.org/cargo/reference/unstable.html#extra-link-arg), so this attribute can be removed.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c2e4ff525a710987c4e01805edf051740cb022b", "html_url": "https://github.com/rust-lang/rust/commit/3c2e4ff525a710987c4e01805edf051740cb022b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c2e4ff525a710987c4e01805edf051740cb022b/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbe89e20e83bd726b34ee0462ac96f2515f5945d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe89e20e83bd726b34ee0462ac96f2515f5945d", "html_url": "https://github.com/rust-lang/rust/commit/fbe89e20e83bd726b34ee0462ac96f2515f5945d"}, {"sha": "5839bff0bac6063147c8905388713a787577208f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5839bff0bac6063147c8905388713a787577208f", "html_url": "https://github.com/rust-lang/rust/commit/5839bff0bac6063147c8905388713a787577208f"}], "stats": {"total": 231, "additions": 12, "deletions": 219}, "files": [{"sha": "ea75943d6f3147c768b278fffd438c96a0c1020f", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3c2e4ff525a710987c4e01805edf051740cb022b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2e4ff525a710987c4e01805edf051740cb022b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=3c2e4ff525a710987c4e01805edf051740cb022b", "patch": "@@ -1411,15 +1411,10 @@ fn add_link_script(cmd: &mut dyn Linker, sess: &Session, tmpdir: &Path, crate_ty\n     }\n }\n \n-/// Add arbitrary \"user defined\" args defined from command line and by `#[link_args]` attributes.\n+/// Add arbitrary \"user defined\" args defined from command line.\n /// FIXME: Determine where exactly these args need to be inserted.\n-fn add_user_defined_link_args(\n-    cmd: &mut dyn Linker,\n-    sess: &Session,\n-    codegen_results: &CodegenResults,\n-) {\n+fn add_user_defined_link_args(cmd: &mut dyn Linker, sess: &Session) {\n     cmd.args(&sess.opts.cg.link_args);\n-    cmd.args(&*codegen_results.crate_info.link_args);\n }\n \n /// Add arbitrary \"late link\" args defined by the target spec.\n@@ -1761,7 +1756,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     add_rpath_args(cmd, sess, codegen_results, out_filename);\n \n     // OBJECT-FILES-MAYBE, CUSTOMIZATION-POINT\n-    add_user_defined_link_args(cmd, sess, codegen_results);\n+    add_user_defined_link_args(cmd, sess);\n \n     // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n     cmd.finalize();"}, {"sha": "318eed76acf2b0558dbdb918540f9ec7cfc5f907", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c2e4ff525a710987c4e01805edf051740cb022b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2e4ff525a710987c4e01805edf051740cb022b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=3c2e4ff525a710987c4e01805edf051740cb022b", "patch": "@@ -754,7 +754,6 @@ impl CrateInfo {\n             is_no_builtins: Default::default(),\n             native_libraries: Default::default(),\n             used_libraries: tcx.native_libraries(LOCAL_CRATE).iter().map(Into::into).collect(),\n-            link_args: tcx.link_args(LOCAL_CRATE),\n             crate_name: Default::default(),\n             used_crates_dynamic: cstore::used_crates(tcx, LinkagePreference::RequireDynamic),\n             used_crates_static: cstore::used_crates(tcx, LinkagePreference::RequireStatic),"}, {"sha": "f0f45b067b35261a81230ae8436f634e47cf4ac7", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c2e4ff525a710987c4e01805edf051740cb022b/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2e4ff525a710987c4e01805edf051740cb022b/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=3c2e4ff525a710987c4e01805edf051740cb022b", "patch": "@@ -139,7 +139,6 @@ pub struct CrateInfo {\n     pub native_libraries: FxHashMap<CrateNum, Vec<NativeLib>>,\n     pub crate_name: FxHashMap<CrateNum, String>,\n     pub used_libraries: Vec<NativeLib>,\n-    pub link_args: Lrc<Vec<String>>,\n     pub used_crate_source: FxHashMap<CrateNum, Lrc<CrateSource>>,\n     pub used_crates_static: Vec<(CrateNum, LibSource)>,\n     pub used_crates_dynamic: Vec<(CrateNum, LibSource)>,"}, {"sha": "abbeb9554e3a99f091d590db60582a9fa95f0e24", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c2e4ff525a710987c4e01805edf051740cb022b/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2e4ff525a710987c4e01805edf051740cb022b/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=3c2e4ff525a710987c4e01805edf051740cb022b", "patch": "@@ -258,9 +258,6 @@ declare_features! (\n     // feature-group-start: actual feature gates\n     // -------------------------------------------------------------------------\n \n-    /// Allows using the `#[link_args]` attribute.\n-    (active, link_args, \"1.0.0\", Some(29596), None),\n-\n     /// Allows defining identifiers beyond ASCII.\n     (active, non_ascii_idents, \"1.0.0\", Some(55467), None),\n "}, {"sha": "7df9b3f0a796059025305ad316c331599f5b7e12", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c2e4ff525a710987c4e01805edf051740cb022b/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2e4ff525a710987c4e01805edf051740cb022b/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=3c2e4ff525a710987c4e01805edf051740cb022b", "patch": "@@ -279,11 +279,6 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n \n     // Linking:\n     gated!(naked, AssumedUsed, template!(Word), naked_functions, experimental!(naked)),\n-    gated!(\n-        link_args, Normal, template!(NameValueStr: \"args\"),\n-        \"the `link_args` attribute is experimental and not portable across platforms, \\\n-        it is recommended to use `#[link(name = \\\"foo\\\")] instead\",\n-    ),\n     gated!(\n         link_ordinal, AssumedUsed, template!(List: \"ordinal\"), raw_dylib,\n         experimental!(link_ordinal)"}, {"sha": "e1491576616627d13dc538b5442d163c3be065ea", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c2e4ff525a710987c4e01805edf051740cb022b/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2e4ff525a710987c4e01805edf051740cb022b/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=3c2e4ff525a710987c4e01805edf051740cb022b", "patch": "@@ -128,6 +128,10 @@ declare_features! (\n     /// Allows comparing raw pointers during const eval.\n     (removed, const_compare_raw_pointers, \"1.46.0\", Some(53020), None,\n      Some(\"cannot be allowed in const eval in any meaningful way\")),\n+    /// Allows using the `#[link_args]` attribute.\n+    (removed, link_args, \"1.53.0\", Some(29596), None,\n+     Some(\"removed in favor of using `-C link-arg=ARG` on command line, \\\n+           which is available from cargo build scripts with `cargo:rustc-link-arg` now\")),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: removed features"}, {"sha": "c4d9e3f77f071676abde7df7be011382ceb65b21", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c2e4ff525a710987c4e01805edf051740cb022b/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2e4ff525a710987c4e01805edf051740cb022b/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=3c2e4ff525a710987c4e01805edf051740cb022b", "patch": "@@ -26,7 +26,6 @@ pub use rmeta::{provide, provide_extern};\n \n mod dependency_format;\n mod foreign_modules;\n-mod link_args;\n mod native_libs;\n mod rmeta;\n "}, {"sha": "9e1ac33368c7fdad810b923f1455f56feebe34f9", "filename": "compiler/rustc_metadata/src/link_args.rs", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/fbe89e20e83bd726b34ee0462ac96f2515f5945d/compiler%2Frustc_metadata%2Fsrc%2Flink_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe89e20e83bd726b34ee0462ac96f2515f5945d/compiler%2Frustc_metadata%2Fsrc%2Flink_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flink_args.rs?ref=fbe89e20e83bd726b34ee0462ac96f2515f5945d", "patch": "@@ -1,57 +0,0 @@\n-use rustc_hir as hir;\n-use rustc_hir::itemlikevisit::ItemLikeVisitor;\n-use rustc_middle::ty::TyCtxt;\n-use rustc_span::symbol::{sym, Symbol};\n-use rustc_target::spec::abi::Abi;\n-\n-crate fn collect(tcx: TyCtxt<'_>) -> Vec<String> {\n-    let mut collector = Collector { tcx, args: Vec::new() };\n-    tcx.hir().krate().visit_all_item_likes(&mut collector);\n-\n-    for attr in tcx.hir().attrs(hir::CRATE_HIR_ID).iter() {\n-        if attr.has_name(sym::link_args) {\n-            if let Some(linkarg) = attr.value_str() {\n-                collector.add_link_args(linkarg);\n-            }\n-        }\n-    }\n-\n-    collector.args\n-}\n-\n-struct Collector<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-    args: Vec<String>,\n-}\n-\n-impl<'tcx> ItemLikeVisitor<'tcx> for Collector<'tcx> {\n-    fn visit_item(&mut self, it: &'tcx hir::Item<'tcx>) {\n-        let abi = match it.kind {\n-            hir::ItemKind::ForeignMod { abi, .. } => abi,\n-            _ => return,\n-        };\n-        if abi == Abi::Rust || abi == Abi::RustIntrinsic || abi == Abi::PlatformIntrinsic {\n-            return;\n-        }\n-\n-        // First, add all of the custom #[link_args] attributes\n-        let sess = &self.tcx.sess;\n-        for m in\n-            self.tcx.hir().attrs(it.hir_id()).iter().filter(|a| sess.check_name(a, sym::link_args))\n-        {\n-            if let Some(linkarg) = m.value_str() {\n-                self.add_link_args(linkarg);\n-            }\n-        }\n-    }\n-\n-    fn visit_trait_item(&mut self, _it: &'tcx hir::TraitItem<'tcx>) {}\n-    fn visit_impl_item(&mut self, _it: &'tcx hir::ImplItem<'tcx>) {}\n-    fn visit_foreign_item(&mut self, _it: &'tcx hir::ForeignItem<'tcx>) {}\n-}\n-\n-impl<'tcx> Collector<'tcx> {\n-    fn add_link_args(&mut self, args: Symbol) {\n-        self.args.extend(args.as_str().split(' ').filter(|s| !s.is_empty()).map(|s| s.to_string()))\n-    }\n-}"}, {"sha": "bebee9dac3b739d33353300c49e5824e04baaf6e", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c2e4ff525a710987c4e01805edf051740cb022b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2e4ff525a710987c4e01805edf051740cb022b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=3c2e4ff525a710987c4e01805edf051740cb022b", "patch": "@@ -1,6 +1,5 @@\n use crate::creader::{CStore, LoadedMacro};\n use crate::foreign_modules;\n-use crate::link_args;\n use crate::native_libs;\n use crate::rmeta::{self, encoder};\n \n@@ -295,10 +294,6 @@ pub fn provide(providers: &mut Providers) {\n                 foreign_modules::collect(tcx).into_iter().map(|m| (m.def_id, m)).collect();\n             Lrc::new(modules)\n         },\n-        link_args: |tcx, cnum| {\n-            assert_eq!(cnum, LOCAL_CRATE);\n-            Lrc::new(link_args::collect(tcx))\n-        },\n \n         // Returns a map from a sufficiently visible external item (i.e., an\n         // external item that is visible from at least one local module) to a"}, {"sha": "bac69e282a521672ae81467f3ae72581e2aac37c", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c2e4ff525a710987c4e01805edf051740cb022b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2e4ff525a710987c4e01805edf051740cb022b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=3c2e4ff525a710987c4e01805edf051740cb022b", "patch": "@@ -1253,11 +1253,6 @@ rustc_queries! {\n         desc { |tcx| \"native_library_kind({})\", tcx.def_path_str(def_id) }\n     }\n \n-    query link_args(_: CrateNum) -> Lrc<Vec<String>> {\n-        eval_always\n-        desc { \"looking up link arguments for a crate\" }\n-    }\n-\n     /// Does lifetime resolution, but does not descend into trait items. This\n     /// should only be used for resolving lifetimes of on trait definitions,\n     /// and is used to avoid cycles. Importantly, `resolve_lifetimes` still visits"}, {"sha": "106ac51d87cc14e1948d0e2f128797e41b0635bc", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c2e4ff525a710987c4e01805edf051740cb022b/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2e4ff525a710987c4e01805edf051740cb022b/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=3c2e4ff525a710987c4e01805edf051740cb022b", "patch": "@@ -282,7 +282,6 @@\n #![feature(intra_doc_pointers)]\n #![feature(iter_zip)]\n #![feature(lang_items)]\n-#![feature(link_args)]\n #![feature(linkage)]\n #![feature(llvm_asm)]\n #![feature(log_syntax)]"}, {"sha": "da36e1580012b7c37703b2ee882c620857f79f69", "filename": "src/doc/unstable-book/src/language-features/link-args.md", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fbe89e20e83bd726b34ee0462ac96f2515f5945d/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flink-args.md", "raw_url": "https://github.com/rust-lang/rust/raw/fbe89e20e83bd726b34ee0462ac96f2515f5945d/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flink-args.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flink-args.md?ref=fbe89e20e83bd726b34ee0462ac96f2515f5945d", "patch": "@@ -1,32 +0,0 @@\n-# `link_args`\n-\n-The tracking issue for this feature is: [#29596]\n-\n-[#29596]: https://github.com/rust-lang/rust/issues/29596\n-\n-------------------------\n-\n-You can tell `rustc` how to customize linking, and that is via the `link_args`\n-attribute. This attribute is applied to `extern` blocks and specifies raw flags\n-which need to get passed to the linker when producing an artifact. An example\n-usage would be:\n-\n-```rust,no_run\n-#![feature(link_args)]\n-\n-#[link_args = \"-foo -bar -baz\"]\n-extern \"C\" {}\n-# fn main() {}\n-```\n-\n-Note that this feature is currently hidden behind the `feature(link_args)` gate\n-because this is not a sanctioned way of performing linking. Right now `rustc`\n-shells out to the system linker (`gcc` on most systems, `link.exe` on MSVC), so\n-it makes sense to provide extra command line arguments, but this will not\n-always be the case. In the future `rustc` may use LLVM directly to link native\n-libraries, in which case `link_args` will have no meaning. You can achieve the\n-same effect as the `link_args` attribute with the `-C link-args` argument to\n-`rustc`.\n-\n-It is highly recommended to *not* use this attribute, and rather use the more\n-formal `#[link(...)]` attribute on `extern` blocks instead."}, {"sha": "93e70d3792cee969aed769e0c74cc9b59130766f", "filename": "src/test/incremental/hashes/extern_mods.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3c2e4ff525a710987c4e01805edf051740cb022b/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2e4ff525a710987c4e01805edf051740cb022b/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs?ref=3c2e4ff525a710987c4e01805edf051740cb022b", "patch": "@@ -12,7 +12,6 @@\n #![allow(warnings)]\n #![feature(rustc_attrs)]\n #![feature(unboxed_closures)]\n-#![feature(link_args)]\n #![crate_type = \"rlib\"]\n \n // Change function name --------------------------------------------------------\n@@ -146,21 +145,6 @@ extern \"C\" {\n     pub fn add_function2();\n }\n \n-// Change link-args ------------------------------------------------------------\n-#[cfg(cfail1)]\n-#[link_args = \"-foo -bar\"]\n-extern \"C\" {\n-    pub fn change_link_args(c: i32);\n-}\n-\n-#[cfg(not(cfail1))]\n-#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner,hir_owner_nodes\")]\n-#[rustc_clean(cfg = \"cfail3\")]\n-#[link_args = \"-foo -bar -baz\"]\n-extern \"C\" {\n-    pub fn change_link_args(c: i32);\n-}\n-\n // Change link-name ------------------------------------------------------------\n #[cfg(cfail1)]\n #[link(name = \"foo\")]"}, {"sha": "f94e882ccb68de5385d548c3ee8b27e1b07b34ea", "filename": "src/test/run-make-fulldeps/link-args-order/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c2e4ff525a710987c4e01805edf051740cb022b/src%2Ftest%2Frun-make-fulldeps%2Flink-args-order%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/3c2e4ff525a710987c4e01805edf051740cb022b/src%2Ftest%2Frun-make-fulldeps%2Flink-args-order%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flink-args-order%2FMakefile?ref=3c2e4ff525a710987c4e01805edf051740cb022b", "patch": "@@ -6,5 +6,5 @@ RUSTC_FLAGS = -C linker-flavor=ld -C link-arg=a -C link-args=\"b c\" -C link-args=\n RUSTC_FLAGS_PRE = -C linker-flavor=ld -Z pre-link-arg=a -Z pre-link-args=\"b c\" -Z pre-link-args=\"d e\" -Z pre-link-arg=f\n \n all:\n-\t$(RUSTC) $(RUSTC_FLAGS) empty.rs 2>&1 | $(CGREP) '\"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"'\n+\t$(RUSTC) $(RUSTC_FLAGS) empty.rs 2>&1 | $(CGREP) '\"a\" \"b\" \"c\" \"d\" \"e\" \"f\"'\n \t$(RUSTC) $(RUSTC_FLAGS_PRE) empty.rs 2>&1 | $(CGREP) '\"a\" \"b\" \"c\" \"d\" \"e\" \"f\"'"}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "src/test/run-make-fulldeps/link-args-order/empty.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c2e4ff525a710987c4e01805edf051740cb022b/src%2Ftest%2Frun-make-fulldeps%2Flink-args-order%2Fempty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2e4ff525a710987c4e01805edf051740cb022b/src%2Ftest%2Frun-make-fulldeps%2Flink-args-order%2Fempty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flink-args-order%2Fempty.rs?ref=3c2e4ff525a710987c4e01805edf051740cb022b", "patch": "@@ -1,6 +1 @@\n-#![feature(link_args)]\n-\n-#[link_args = \"g\"]\n-extern \"C\" {}\n-\n fn main() {}"}, {"sha": "e1c651f46fb4989d9ade586f2aa54193d764733b", "filename": "src/test/ui/feature-gates/feature-gate-link_args.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fbe89e20e83bd726b34ee0462ac96f2515f5945d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe89e20e83bd726b34ee0462ac96f2515f5945d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_args.rs?ref=fbe89e20e83bd726b34ee0462ac96f2515f5945d", "patch": "@@ -1,17 +0,0 @@\n-// Test that `#[link_args]` attribute is gated by `link_args`\n-// feature gate, both when it occurs where expected (atop\n-// `extern { }` blocks) and where unexpected.\n-\n-// sidestep warning (which is correct, but misleading for\n-// purposes of this test)\n-#![allow(unused_attributes)]\n-#![link_args = \"-l unexpected_use_as_inner_attr_on_mod\"]\n-//~^ ERROR the `link_args` attribute is experimental\n-\n-#[link_args = \"-l expected_use_case\"]\n-//~^ ERROR the `link_args` attribute is experimental\n-extern \"C\" {}\n-\n-#[link_args = \"-l unexected_use_on_non_extern_item\"]\n-//~^ ERROR: the `link_args` attribute is experimental\n-fn main() {}"}, {"sha": "ae4918f5c9f54e62ba8b8c4583a1078243fb247b", "filename": "src/test/ui/feature-gates/feature-gate-link_args.stderr", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fbe89e20e83bd726b34ee0462ac96f2515f5945d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fbe89e20e83bd726b34ee0462ac96f2515f5945d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_args.stderr?ref=fbe89e20e83bd726b34ee0462ac96f2515f5945d", "patch": "@@ -1,30 +0,0 @@\n-error[E0658]: the `link_args` attribute is experimental and not portable across platforms, it is recommended to use `#[link(name = \"foo\")] instead\n-  --> $DIR/feature-gate-link_args.rs:11:1\n-   |\n-LL | #[link_args = \"-l expected_use_case\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #29596 <https://github.com/rust-lang/rust/issues/29596> for more information\n-   = help: add `#![feature(link_args)]` to the crate attributes to enable\n-\n-error[E0658]: the `link_args` attribute is experimental and not portable across platforms, it is recommended to use `#[link(name = \"foo\")] instead\n-  --> $DIR/feature-gate-link_args.rs:15:1\n-   |\n-LL | #[link_args = \"-l unexected_use_on_non_extern_item\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #29596 <https://github.com/rust-lang/rust/issues/29596> for more information\n-   = help: add `#![feature(link_args)]` to the crate attributes to enable\n-\n-error[E0658]: the `link_args` attribute is experimental and not portable across platforms, it is recommended to use `#[link(name = \"foo\")] instead\n-  --> $DIR/feature-gate-link_args.rs:8:1\n-   |\n-LL | #![link_args = \"-l unexpected_use_as_inner_attr_on_mod\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #29596 <https://github.com/rust-lang/rust/issues/29596> for more information\n-   = help: add `#![feature(link_args)]` to the crate attributes to enable\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "34ac53be5beccac7387ead91dd2d8145c37c475f", "filename": "src/test/ui/issues/issue-15487.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fbe89e20e83bd726b34ee0462ac96f2515f5945d/src%2Ftest%2Fui%2Fissues%2Fissue-15487.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe89e20e83bd726b34ee0462ac96f2515f5945d/src%2Ftest%2Fui%2Fissues%2Fissue-15487.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15487.rs?ref=fbe89e20e83bd726b34ee0462ac96f2515f5945d", "patch": "@@ -1,13 +0,0 @@\n-// run-pass\n-#![allow(unused_attributes)]\n-// ignore-windows\n-// ignore-wasm32-bare no libs to link\n-// ignore-sgx no libs to link\n-#![feature(link_args)]\n-\n-#[link_args = \"-lc  -lm\"]\n-#[link_args = \" -lc\"]\n-#[link_args = \"-lc \"]\n-extern \"C\" {}\n-\n-fn main() {}"}, {"sha": "7418691d01409997789f6a3ca43692aeffd2870b", "filename": "src/test/ui/linkage-attr/invalid-link-args.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fbe89e20e83bd726b34ee0462ac96f2515f5945d/src%2Ftest%2Fui%2Flinkage-attr%2Finvalid-link-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe89e20e83bd726b34ee0462ac96f2515f5945d/src%2Ftest%2Fui%2Flinkage-attr%2Finvalid-link-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Finvalid-link-args.rs?ref=fbe89e20e83bd726b34ee0462ac96f2515f5945d", "patch": "@@ -1,14 +0,0 @@\n-// build-fail\n-// dont-check-compiler-stderr\n-// ignore-msvc due to linker-flavor=ld\n-// error-pattern:aFdEfSeVEEE\n-// compile-flags: -C linker-flavor=ld\n-\n-/* Make sure invalid link_args are printed to stderr. */\n-\n-#![feature(link_args)]\n-\n-#[link_args = \"aFdEfSeVEEE\"]\n-extern \"C\" {}\n-\n-fn main() {}"}, {"sha": "be4348e2bb71c96912d90bd4b558c79232eaa0a6", "filename": "src/tools/clippy/tests/ui/crate_level_checks/no_std_main_recursion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c2e4ff525a710987c4e01805edf051740cb022b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrate_level_checks%2Fno_std_main_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2e4ff525a710987c4e01805edf051740cb022b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrate_level_checks%2Fno_std_main_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrate_level_checks%2Fno_std_main_recursion.rs?ref=3c2e4ff525a710987c4e01805edf051740cb022b", "patch": "@@ -1,8 +1,8 @@\n+// compile-flags: -Clink-arg=-nostartfiles\n // ignore-macos\n // ignore-windows\n \n-#![feature(lang_items, link_args, start, libc)]\n-#![link_args = \"-nostartfiles\"]\n+#![feature(lang_items, start, libc)]\n #![no_std]\n \n use core::panic::PanicInfo;"}, {"sha": "235e0fc51799fad3d001e5b80cb54c481e164d77", "filename": "src/tools/clippy/tests/ui/empty_loop_no_std.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c2e4ff525a710987c4e01805edf051740cb022b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fempty_loop_no_std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2e4ff525a710987c4e01805edf051740cb022b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fempty_loop_no_std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fempty_loop_no_std.rs?ref=3c2e4ff525a710987c4e01805edf051740cb022b", "patch": "@@ -1,9 +1,9 @@\n+// compile-flags: -Clink-arg=-nostartfiles\n // ignore-macos\n // ignore-windows\n \n #![warn(clippy::empty_loop)]\n-#![feature(lang_items, link_args, start, libc)]\n-#![link_args = \"-nostartfiles\"]\n+#![feature(lang_items, start, libc)]\n #![no_std]\n \n use core::panic::PanicInfo;"}]}