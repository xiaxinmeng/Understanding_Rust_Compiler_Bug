{"sha": "ab79caa828cf955e658faa4386cf9e8e0a8c3e28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNzljYWE4MjhjZjk1NWU2NThmYWE0Mzg2Y2Y5ZThlMGE4YzNlMjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-08T14:10:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-08T14:10:07Z"}, "message": "Auto merge of #46247 - GuillaumeGomez:md-warnings, r=QuietMisdreqvus\n\nMd warnings\n\nFixes #45365.\n\nr? @QuietMisdreavus", "tree": {"sha": "385b47ae2d91a30e95475e94a7face13ccc85d80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/385b47ae2d91a30e95475e94a7face13ccc85d80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab79caa828cf955e658faa4386cf9e8e0a8c3e28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab79caa828cf955e658faa4386cf9e8e0a8c3e28", "html_url": "https://github.com/rust-lang/rust/commit/ab79caa828cf955e658faa4386cf9e8e0a8c3e28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab79caa828cf955e658faa4386cf9e8e0a8c3e28/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d", "html_url": "https://github.com/rust-lang/rust/commit/88fc3bc271cbc5c74777f855f6d213b74bf0eb9d"}, {"sha": "eb84f4243fa7e18f97ee39f6c0b751f4c329a4ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb84f4243fa7e18f97ee39f6c0b751f4c329a4ee", "html_url": "https://github.com/rust-lang/rust/commit/eb84f4243fa7e18f97ee39f6c0b751f4c329a4ee"}], "stats": {"total": 87, "additions": 64, "deletions": 23}, "files": [{"sha": "f404aa046c1aecf52bb34b3e4d14d2eae7c9a8ce", "filename": "src/doc/not_found.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ab79caa828cf955e658faa4386cf9e8e0a8c3e28/src%2Fdoc%2Fnot_found.md", "raw_url": "https://github.com/rust-lang/rust/raw/ab79caa828cf955e658faa4386cf9e8e0a8c3e28/src%2Fdoc%2Fnot_found.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnot_found.md?ref=ab79caa828cf955e658faa4386cf9e8e0a8c3e28", "patch": "@@ -13,20 +13,20 @@ Some things that might be helpful to you though:\n \n # Search\n \n-* <form action=\"https://duckduckgo.com/\">\n+<form action=\"https://duckduckgo.com/\">\n     <input type=\"text\" id=\"site-search\" name=\"q\" size=\"80\"></input>\n-    <input type=\"submit\" value=\"Search DuckDuckGo\">\n-</form>\n-* Rust doc search: <span id=\"core-search\"></span>\n+    <input type=\"submit\" value=\"Search DuckDuckGo\"></form>\n+\n+Rust doc search: <span id=\"core-search\"></span>\n \n # Reference\n \n-* [The Rust official site](https://www.rust-lang.org)\n-* [The Rust reference](https://doc.rust-lang.org/reference/index.html)\n+ * [The Rust official site](https://www.rust-lang.org)\n+ * [The Rust reference](https://doc.rust-lang.org/reference/index.html)\n \n # Docs\n \n-* [The standard library](https://doc.rust-lang.org/std/)\n+[The standard library](https://doc.rust-lang.org/std/)\n \n <script>\n function get_url_fragments() {"}, {"sha": "fbff6e83fb911a5b59a735c0b71e62b4104e8a37", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab79caa828cf955e658faa4386cf9e8e0a8c3e28/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab79caa828cf955e658faa4386cf9e8e0a8c3e28/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ab79caa828cf955e658faa4386cf9e8e0a8c3e28", "patch": "@@ -2521,7 +2521,7 @@ pub struct Span {\n }\n \n impl Span {\n-    fn empty() -> Span {\n+    pub fn empty() -> Span {\n         Span {\n             filename: \"\".to_string(),\n             loline: 0, locol: 0,"}, {"sha": "d423e53ca1870ef12059b568d0121ad539e7074d", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ab79caa828cf955e658faa4386cf9e8e0a8c3e28/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab79caa828cf955e658faa4386cf9e8e0a8c3e28/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=ab79caa828cf955e658faa4386cf9e8e0a8c3e28", "patch": "@@ -421,9 +421,19 @@ impl ToJson for IndexItemFunctionType {\n thread_local!(static CACHE_KEY: RefCell<Arc<Cache>> = Default::default());\n thread_local!(pub static CURRENT_LOCATION_KEY: RefCell<Vec<String>> =\n                     RefCell::new(Vec::new()));\n-thread_local!(static USED_ID_MAP: RefCell<FxHashMap<String, usize>> =\n+thread_local!(pub static USED_ID_MAP: RefCell<FxHashMap<String, usize>> =\n                     RefCell::new(init_ids()));\n \n+pub fn render_text<F: FnMut(RenderType) -> String>(mut render: F) -> (String, String) {\n+    // Save the state of USED_ID_MAP so it only gets updated once even\n+    // though we're rendering twice.\n+    let orig_used_id_map = USED_ID_MAP.with(|map| map.borrow().clone());\n+    let hoedown_output = render(RenderType::Hoedown);\n+    USED_ID_MAP.with(|map| *map.borrow_mut() = orig_used_id_map);\n+    let pulldown_output = render(RenderType::Pulldown);\n+    (hoedown_output, pulldown_output)\n+}\n+\n fn init_ids() -> FxHashMap<String, usize> {\n     [\n      \"main\",\n@@ -699,7 +709,10 @@ fn print_message(msg: &str, intro_msg: &mut bool, span: &Span, text: &str) {\n     println!(\"{}\", msg);\n }\n \n-fn render_difference(diff: &html_diff::Difference, intro_msg: &mut bool, span: &Span, text: &str) {\n+pub fn render_difference(diff: &html_diff::Difference,\n+                         intro_msg: &mut bool,\n+                         span: &Span,\n+                         text: &str) {\n     match *diff {\n         html_diff::Difference::NodeType { ref elem, ref opposite_elem } => {\n             print_message(&format!(\"    {} Types differ: expected: `{}`, found: `{}`\",\n@@ -1853,12 +1866,7 @@ fn render_markdown(w: &mut fmt::Formatter,\n                    prefix: &str,\n                    scx: &SharedContext)\n                    -> fmt::Result {\n-    // Save the state of USED_ID_MAP so it only gets updated once even\n-    // though we're rendering twice.\n-    let orig_used_id_map = USED_ID_MAP.with(|map| map.borrow().clone());\n-    let hoedown_output = format!(\"{}\", Markdown(md_text, RenderType::Hoedown));\n-    USED_ID_MAP.with(|map| *map.borrow_mut() = orig_used_id_map);\n-    let pulldown_output = format!(\"{}\", Markdown(md_text, RenderType::Pulldown));\n+    let (hoedown_output, pulldown_output) = render_text(|ty| format!(\"{}\", Markdown(md_text, ty)));\n     let mut differences = html_diff::get_differences(&pulldown_output, &hoedown_output);\n     differences.retain(|s| {\n         match *s {"}, {"sha": "9b94e9918f85096d6191383eda844c64d3169cdd", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 40, "deletions": 7, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ab79caa828cf955e658faa4386cf9e8e0a8c3e28/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab79caa828cf955e658faa4386cf9e8e0a8c3e28/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=ab79caa828cf955e658faa4386cf9e8e0a8c3e28", "patch": "@@ -19,10 +19,15 @@ use rustc::session::search_paths::SearchPaths;\n use rustc::session::config::Externs;\n use syntax::codemap::DUMMY_SP;\n \n+use clean::Span;\n+\n use externalfiles::{ExternalHtml, LoadStringError, load_string};\n \n-use html::render::reset_ids;\n+use html_diff;\n+\n+use html::render::{render_text, reset_ids};\n use html::escape::Escape;\n+use html::render::render_difference;\n use html::markdown;\n use html::markdown::{Markdown, MarkdownWithToc, find_testable_code, old_find_testable_code};\n use html::markdown::RenderType;\n@@ -52,6 +57,10 @@ fn extract_leading_metadata<'a>(s: &'a str) -> (Vec<&'a str>, &'a str) {\n pub fn render(input: &str, mut output: PathBuf, matches: &getopts::Matches,\n               external_html: &ExternalHtml, include_toc: bool,\n               render_type: RenderType) -> isize {\n+    // Span used for markdown hoedown/pulldown differences.\n+    let mut span = Span::empty();\n+    span.filename = input.to_owned();\n+\n     let input_p = Path::new(input);\n     output.push(input_p.file_stem().unwrap());\n     output.set_extension(\"html\");\n@@ -89,12 +98,36 @@ pub fn render(input: &str, mut output: PathBuf, matches: &getopts::Matches,\n \n     reset_ids(false);\n \n-    let rendered = if include_toc {\n-        format!(\"{}\", MarkdownWithToc(text, render_type))\n+    let (hoedown_output, pulldown_output) = if include_toc {\n+        // Save the state of USED_ID_MAP so it only gets updated once even\n+        // though we're rendering twice.\n+        render_text(|ty| format!(\"{}\", MarkdownWithToc(text, ty)))\n     } else {\n-        format!(\"{}\", Markdown(text, render_type))\n+        // Save the state of USED_ID_MAP so it only gets updated once even\n+        // though we're rendering twice.\n+        render_text(|ty| format!(\"{}\", Markdown(text, ty)))\n     };\n \n+    let mut differences = html_diff::get_differences(&pulldown_output, &hoedown_output);\n+    differences.retain(|s| {\n+        match *s {\n+            html_diff::Difference::NodeText { ref elem_text,\n+                                              ref opposite_elem_text,\n+                                              .. }\n+                if elem_text.split_whitespace().eq(opposite_elem_text.split_whitespace()) => {\n+                    false\n+            }\n+            _ => true,\n+        }\n+    });\n+\n+    if !differences.is_empty() {\n+        let mut intro_msg = false;\n+        for diff in differences {\n+            render_difference(&diff, &mut intro_msg, &span, text);\n+        }\n+    }\n+\n     let err = write!(\n         &mut out,\n         r#\"<!DOCTYPE html>\n@@ -126,16 +159,16 @@ pub fn render(input: &str, mut output: PathBuf, matches: &getopts::Matches,\n         css = css,\n         in_header = external_html.in_header,\n         before_content = external_html.before_content,\n-        text = rendered,\n+        text = if render_type == RenderType::Pulldown { pulldown_output } else { hoedown_output },\n         after_content = external_html.after_content,\n-        );\n+    );\n \n     match err {\n         Err(e) => {\n             eprintln!(\"rustdoc: cannot write to `{}`: {}\", output.display(), e);\n             6\n         }\n-        Ok(_) => 0\n+        Ok(_) => 0,\n     }\n }\n "}]}