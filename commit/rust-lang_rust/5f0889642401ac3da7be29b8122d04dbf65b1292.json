{"sha": "5f0889642401ac3da7be29b8122d04dbf65b1292", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMDg4OTY0MjQwMWFjM2RhN2JlMjliODEyMmQwNGRiZjY1YjEyOTI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-25T22:55:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-25T22:55:26Z"}, "message": "Merge #5069\n\n5069: DWIM introduce variable r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e7cf891ed12ec26e9dc17e774a0c71091dc0eae5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7cf891ed12ec26e9dc17e774a0c71091dc0eae5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f0889642401ac3da7be29b8122d04dbf65b1292", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe9SteCRBK7hj4Ov3rIwAAdHIIACms025+fD3DIAX1Y3T/Fibi\nqu13mMjEXtbtohTnTFyKD3LWxG8deIJiL5bPezD5ln0hWQRkjvzY4DdA7qJoFK9Q\nqmwmM94rZEt8QgChTEzv9EICgweb2eChHfeLm4XxTjQ3004pgzsQDvShCKk2ACkA\n4WbkdRLiqIo1Ah1sBXpVeFrLm+pLLdssoStZPoH4UOCK/4S5vV0/LrAYDyz58hO4\n3ncFd1BBfhz/ugvEblEDpyZdSVrPixBBkUM/hH7kzq3XeurXpXfw/HphaDERjSRt\nuuBgTlfLJDcpTcnTtX78RzsCdT+hIxbYcQOGkrctGEt7HpLzwbERWty7Mcoh+rI=\n=sTZI\n-----END PGP SIGNATURE-----\n", "payload": "tree e7cf891ed12ec26e9dc17e774a0c71091dc0eae5\nparent 6eb0349a7b2dd71eae6f1541cdd26e1ac50363d0\nparent 5f6f994256a4a91f1caba9cabfd7a4552180a9da\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1593125726 +0000\ncommitter GitHub <noreply@github.com> 1593125726 +0000\n\nMerge #5069\n\n5069: DWIM introduce variable r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f0889642401ac3da7be29b8122d04dbf65b1292", "html_url": "https://github.com/rust-lang/rust/commit/5f0889642401ac3da7be29b8122d04dbf65b1292", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f0889642401ac3da7be29b8122d04dbf65b1292/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eb0349a7b2dd71eae6f1541cdd26e1ac50363d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eb0349a7b2dd71eae6f1541cdd26e1ac50363d0", "html_url": "https://github.com/rust-lang/rust/commit/6eb0349a7b2dd71eae6f1541cdd26e1ac50363d0"}, {"sha": "5f6f994256a4a91f1caba9cabfd7a4552180a9da", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f6f994256a4a91f1caba9cabfd7a4552180a9da", "html_url": "https://github.com/rust-lang/rust/commit/5f6f994256a4a91f1caba9cabfd7a4552180a9da"}], "stats": {"total": 69, "additions": 53, "deletions": 16}, "files": [{"sha": "96affe49d32dcf88f98cf79070c7267ddd53d893", "filename": "crates/ra_assists/src/handlers/introduce_variable.rs", "status": "modified", "additions": 49, "deletions": 8, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/5f0889642401ac3da7be29b8122d04dbf65b1292/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0889642401ac3da7be29b8122d04dbf65b1292/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs?ref=5f0889642401ac3da7be29b8122d04dbf65b1292", "patch": "@@ -44,12 +44,26 @@ pub(crate) fn introduce_variable(acc: &mut Assists, ctx: &AssistContext) -> Opti\n     }\n     let target = expr.syntax().text_range();\n     acc.add(AssistId(\"introduce_variable\"), \"Extract into variable\", target, move |edit| {\n+        let field_shorthand = match expr.syntax().parent().and_then(ast::RecordField::cast) {\n+            Some(field) => field.name_ref(),\n+            None => None,\n+        };\n+\n         let mut buf = String::new();\n \n+        let var_name = match &field_shorthand {\n+            Some(it) => it.to_string(),\n+            None => \"var_name\".to_string(),\n+        };\n+        let expr_range = match &field_shorthand {\n+            Some(it) => it.syntax().text_range().cover(expr.syntax().text_range()),\n+            None => expr.syntax().text_range(),\n+        };\n+\n         if wrap_in_block {\n-            buf.push_str(\"{ let var_name = \");\n+            format_to!(buf, \"{{ let {} = \", var_name);\n         } else {\n-            buf.push_str(\"let var_name = \");\n+            format_to!(buf, \"let {} = \", var_name);\n         };\n         format_to!(buf, \"{}\", expr.syntax());\n \n@@ -64,13 +78,13 @@ pub(crate) fn introduce_variable(acc: &mut Assists, ctx: &AssistContext) -> Opti\n             if full_stmt.unwrap().semicolon_token().is_none() {\n                 buf.push_str(\";\");\n             }\n-            let offset = expr.syntax().text_range();\n             match ctx.config.snippet_cap {\n                 Some(cap) => {\n-                    let snip = buf.replace(\"let var_name\", \"let $0var_name\");\n-                    edit.replace_snippet(cap, offset, snip)\n+                    let snip =\n+                        buf.replace(&format!(\"let {}\", var_name), &format!(\"let $0{}\", var_name));\n+                    edit.replace_snippet(cap, expr_range, snip)\n                 }\n-                None => edit.replace(offset, buf),\n+                None => edit.replace(expr_range, buf),\n             }\n             return;\n         }\n@@ -88,11 +102,12 @@ pub(crate) fn introduce_variable(acc: &mut Assists, ctx: &AssistContext) -> Opti\n             buf.push_str(text);\n         }\n \n-        edit.replace(expr.syntax().text_range(), \"var_name\".to_string());\n+        edit.replace(expr_range, var_name.clone());\n         let offset = anchor_stmt.text_range().start();\n         match ctx.config.snippet_cap {\n             Some(cap) => {\n-                let snip = buf.replace(\"let var_name\", \"let $0var_name\");\n+                let snip =\n+                    buf.replace(&format!(\"let {}\", var_name), &format!(\"let $0{}\", var_name));\n                 edit.insert_snippet(cap, offset, snip)\n             }\n             None => edit.insert(offset, buf),\n@@ -503,6 +518,32 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn introduce_var_field_shorthand() {\n+        check_assist(\n+            introduce_variable,\n+            r#\"\n+struct S {\n+    foo: i32\n+}\n+\n+fn main() {\n+    S { foo: <|>1 + 1<|> }\n+}\n+\"#,\n+            r#\"\n+struct S {\n+    foo: i32\n+}\n+\n+fn main() {\n+    let $0foo = 1 + 1;\n+    S { foo }\n+}\n+\"#,\n+        )\n+    }\n+\n     #[test]\n     fn test_introduce_var_for_return_not_applicable() {\n         check_assist_not_applicable(introduce_variable, \"fn foo() { <|>return<|>; } \");"}, {"sha": "a8cc712492de9f443690d7ac3a18741b20e0ede0", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5f0889642401ac3da7be29b8122d04dbf65b1292/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0889642401ac3da7be29b8122d04dbf65b1292/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=5f0889642401ac3da7be29b8122d04dbf65b1292", "patch": "@@ -84,11 +84,7 @@ pub(crate) struct GlobalStateSnapshot {\n }\n \n impl GlobalState {\n-    pub(crate) fn new(\n-        sender: Sender<lsp_server::Message>,\n-        lru_capacity: Option<usize>,\n-        config: Config,\n-    ) -> GlobalState {\n+    pub(crate) fn new(sender: Sender<lsp_server::Message>, config: Config) -> GlobalState {\n         let loader = {\n             let (sender, receiver) = unbounded::<vfs::loader::Message>();\n             let handle =\n@@ -103,12 +99,13 @@ impl GlobalState {\n             Handle { handle, receiver }\n         };\n \n+        let analysis_host = AnalysisHost::new(config.lru_capacity);\n         GlobalState {\n             sender,\n             task_pool,\n             loader,\n             config,\n-            analysis_host: AnalysisHost::new(lru_capacity),\n+            analysis_host,\n             flycheck: None,\n             diagnostics: Default::default(),\n             mem_docs: FxHashSet::default(),"}, {"sha": "d03c68edff6fa0bc1a1893d1c4f9523d5dcf0832", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f0889642401ac3da7be29b8122d04dbf65b1292/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0889642401ac3da7be29b8122d04dbf65b1292/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=5f0889642401ac3da7be29b8122d04dbf65b1292", "patch": "@@ -44,8 +44,7 @@ pub fn main_loop(config: Config, connection: Connection) -> Result<()> {\n         SetThreadPriority(thread, thread_priority_above_normal);\n     }\n \n-    GlobalState::new(connection.sender.clone(), config.lru_capacity, config)\n-        .run(connection.receiver)\n+    GlobalState::new(connection.sender.clone(), config).run(connection.receiver)\n }\n \n enum Event {"}]}