{"sha": "b53993684549a76a4223bed15e4f04754e20c242", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1Mzk5MzY4NDU0OWE3NmE0MjIzYmVkMTVlNGYwNDc1NGUyMGMyNDI=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2018-05-03T23:24:21Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2018-05-03T23:24:21Z"}, "message": "Remove the deprecated std::net::{lookup_host,LookupHost}\n\nThese are unstable, and were deprecated by #47510, since Rust 1.25.  The\ninternal `sys` implementations are still kept to support the call in the\ncommon `resolve_socket_addr`.", "tree": {"sha": "d393a49b6e39d1aad9402c47e163095ae601c9e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d393a49b6e39d1aad9402c47e163095ae601c9e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b53993684549a76a4223bed15e4f04754e20c242", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b53993684549a76a4223bed15e4f04754e20c242", "html_url": "https://github.com/rust-lang/rust/commit/b53993684549a76a4223bed15e4f04754e20c242", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b53993684549a76a4223bed15e4f04754e20c242/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b", "html_url": "https://github.com/rust-lang/rust/commit/e82261dfbb5feaa2d28d2b138f4aabb2aa52c94b"}], "stats": {"total": 75, "additions": 3, "deletions": 72}, "files": [{"sha": "e80c3eeb876ceebd05cab882fce8da1ce7181ad6", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b53993684549a76a4223bed15e4f04754e20c242/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53993684549a76a4223bed15e4f04754e20c242/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=b53993684549a76a4223bed15e4f04754e20c242", "patch": "@@ -13,11 +13,10 @@ use hash;\n use io;\n use mem;\n use net::{ntoh, hton, IpAddr, Ipv4Addr, Ipv6Addr};\n-#[allow(deprecated)]\n-use net::lookup_host;\n use option;\n use sys::net::netc as c;\n use sys_common::{FromInner, AsInner, IntoInner};\n+use sys_common::net::lookup_host;\n use vec;\n use iter;\n use slice;\n@@ -856,7 +855,6 @@ impl ToSocketAddrs for (Ipv6Addr, u16) {\n     }\n }\n \n-#[allow(deprecated)]\n fn resolve_socket_addr(s: &str, p: u16) -> io::Result<vec::IntoIter<SocketAddr>> {\n     let ips = lookup_host(s)?;\n     let v: Vec<_> = ips.map(|mut a| { a.set_port(p); a }).collect();"}, {"sha": "be4bcee8a68aeb0f1c098670fb6cb3bc4c51ee71", "filename": "src/libstd/net/mod.rs", "status": "modified", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/b53993684549a76a4223bed15e4f04754e20c242/src%2Flibstd%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53993684549a76a4223bed15e4f04754e20c242/src%2Flibstd%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fmod.rs?ref=b53993684549a76a4223bed15e4f04754e20c242", "patch": "@@ -38,9 +38,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use fmt;\n use io::{self, Error, ErrorKind};\n-use sys_common::net as net_imp;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::ip::{IpAddr, Ipv4Addr, Ipv6Addr, Ipv6MulticastScope};\n@@ -128,66 +126,3 @@ fn each_addr<A: ToSocketAddrs, F, T>(addr: A, mut f: F) -> io::Result<T>\n                    \"could not resolve to any addresses\")\n     }))\n }\n-\n-/// An iterator over `SocketAddr` values returned from a host lookup operation.\n-#[unstable(feature = \"lookup_host\", reason = \"unsure about the returned \\\n-                                              iterator and returning socket \\\n-                                              addresses\",\n-           issue = \"27705\")]\n-#[rustc_deprecated(since = \"1.25.0\", reason = \"Use the ToSocketAddrs trait instead\")]\n-pub struct LookupHost(net_imp::LookupHost);\n-\n-#[unstable(feature = \"lookup_host\", reason = \"unsure about the returned \\\n-                                              iterator and returning socket \\\n-                                              addresses\",\n-           issue = \"27705\")]\n-#[rustc_deprecated(since = \"1.25.0\", reason = \"Use the ToSocketAddrs trait instead\")]\n-#[allow(deprecated)]\n-impl Iterator for LookupHost {\n-    type Item = SocketAddr;\n-    fn next(&mut self) -> Option<SocketAddr> { self.0.next() }\n-}\n-\n-#[unstable(feature = \"lookup_host\", reason = \"unsure about the returned \\\n-                                              iterator and returning socket \\\n-                                              addresses\",\n-           issue = \"27705\")]\n-#[rustc_deprecated(since = \"1.25.0\", reason = \"Use the ToSocketAddrs trait instead\")]\n-#[allow(deprecated)]\n-impl fmt::Debug for LookupHost {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.pad(\"LookupHost { .. }\")\n-    }\n-}\n-\n-/// Resolve the host specified by `host` as a number of `SocketAddr` instances.\n-///\n-/// This method may perform a DNS query to resolve `host` and may also inspect\n-/// system configuration to resolve the specified hostname.\n-///\n-/// The returned iterator will skip over any unknown addresses returned by the\n-/// operating system.\n-///\n-/// # Examples\n-///\n-/// ```no_run\n-/// #![feature(lookup_host)]\n-///\n-/// use std::net;\n-///\n-/// fn main() -> std::io::Result<()> {\n-///     for host in net::lookup_host(\"rust-lang.org\")? {\n-///         println!(\"found address: {}\", host);\n-///     }\n-///     Ok(())\n-/// }\n-/// ```\n-#[unstable(feature = \"lookup_host\", reason = \"unsure about the returned \\\n-                                              iterator and returning socket \\\n-                                              addresses\",\n-           issue = \"27705\")]\n-#[rustc_deprecated(since = \"1.25.0\", reason = \"Use the ToSocketAddrs trait instead\")]\n-#[allow(deprecated)]\n-pub fn lookup_host(host: &str) -> io::Result<LookupHost> {\n-    net_imp::lookup_host(host).map(LookupHost)\n-}"}, {"sha": "335a9c0d8bedbb72308c24c5a2e0147b63cad629", "filename": "src/test/run-pass/sync-send-in-std.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b53993684549a76a4223bed15e4f04754e20c242/src%2Ftest%2Frun-pass%2Fsync-send-in-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53993684549a76a4223bed15e4f04754e20c242/src%2Ftest%2Frun-pass%2Fsync-send-in-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsync-send-in-std.rs?ref=b53993684549a76a4223bed15e4f04754e20c242", "patch": "@@ -11,9 +11,7 @@\n // ignore-cloudabi networking not available\n // ignore-wasm32-bare networking not available\n \n-#![feature(lookup_host)]\n-\n-use std::net::lookup_host;\n+use std::net::ToSocketAddrs;\n \n fn is_sync<T>(_: T) where T: Sync {}\n fn is_send<T>(_: T) where T: Send {}\n@@ -30,5 +28,5 @@ macro_rules! all_sync_send {\n }\n \n fn main() {\n-    all_sync_send!(lookup_host(\"localhost\").unwrap(), next);\n+    all_sync_send!(\"localhost:80\".to_socket_addrs().unwrap(), next);\n }"}]}