{"sha": "6e7cf2e88b96995ed85b6f9b81c178f08ad5107c", "node_id": "C_kwDOAAsO6NoAKDZlN2NmMmU4OGI5Njk5NWVkODViNmY5YjgxYzE3OGYwOGFkNTEwN2M", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-11-30T08:29:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-30T08:29:06Z"}, "message": "Rollup merge of #91243 - jackh726:issue-91068, r=nikomatsakis\n\nDon't treat unnormalized function arguments as well-formed\n\nPartial revert of #88312\n\nr? ``@pnkfelix``\ncc ``@nikomatsakis``", "tree": {"sha": "e4c2db2ce9c715b93bd5390c835b8ec1569888f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4c2db2ce9c715b93bd5390c835b8ec1569888f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e7cf2e88b96995ed85b6f9b81c178f08ad5107c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhpeDSCRBK7hj4Ov3rIwAA/e0IALKdJnmttYMzVIKL6jgFUweD\nNLfl1IeGROMtvvSGSLrAZ92YStW1xaCTSO1lHeNKv8bNUbim52TpyQ/tGhP5+IpC\n9Ntp09KnrpNG09gFVJdAUi08fqZSpL2Cls5XRz/Ry50swoCJK5RbqP5KNo/3XhOY\nian3imjJe6CUoDPHBm2FXVSHrNff9l8e8DENqCwCTiGDBbR9uiGqxXz3Gk5S6OB1\nGvAXRzSS9CRAAdG5Sq2OfUVS77pCiZ+GphWYtXeiJ3pM5x7fsQvnxpFwymvApzPm\natVuMBHR8Ibaq2YpREX5IqmdgRHdKiEwEZ6Fuw27gsVwz4u1wTMUyLJ/pjqmPug=\n=qWcS\n-----END PGP SIGNATURE-----\n", "payload": "tree e4c2db2ce9c715b93bd5390c835b8ec1569888f5\nparent 4c948963306dc195d5b20a0b4300d90a2b423b8b\nparent 692e96c327321eba464d4ee57f55d448d031b607\nauthor Yuki Okushi <jtitor@2k36.org> 1638260946 +0900\ncommitter GitHub <noreply@github.com> 1638260946 +0900\n\nRollup merge of #91243 - jackh726:issue-91068, r=nikomatsakis\n\nDon't treat unnormalized function arguments as well-formed\n\nPartial revert of #88312\n\nr? ``@pnkfelix``\ncc ``@nikomatsakis``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e7cf2e88b96995ed85b6f9b81c178f08ad5107c", "html_url": "https://github.com/rust-lang/rust/commit/6e7cf2e88b96995ed85b6f9b81c178f08ad5107c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e7cf2e88b96995ed85b6f9b81c178f08ad5107c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c948963306dc195d5b20a0b4300d90a2b423b8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c948963306dc195d5b20a0b4300d90a2b423b8b", "html_url": "https://github.com/rust-lang/rust/commit/4c948963306dc195d5b20a0b4300d90a2b423b8b"}, {"sha": "692e96c327321eba464d4ee57f55d448d031b607", "url": "https://api.github.com/repos/rust-lang/rust/commits/692e96c327321eba464d4ee57f55d448d031b607", "html_url": "https://github.com/rust-lang/rust/commit/692e96c327321eba464d4ee57f55d448d031b607"}], "stats": {"total": 98, "additions": 52, "deletions": 46}, "files": [{"sha": "8d97c3cbb0b0ebd406fa9301d91827a36c08617d", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e7cf2e88b96995ed85b6f9b81c178f08ad5107c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7cf2e88b96995ed85b6f9b81c178f08ad5107c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=6e7cf2e88b96995ed85b6f9b81c178f08ad5107c", "patch": "@@ -256,7 +256,6 @@ impl UniversalRegionRelationsBuilder<'cx, 'tcx> {\n                 debug!(\"build: input_or_output={:?}\", ty);\n                 // We add implied bounds from both the unnormalized and normalized ty\n                 // See issue #87748\n-                let constraints_implied_1 = self.add_implied_bounds(ty);\n                 let TypeOpOutput { output: norm_ty, constraints: constraints1, .. } = self\n                     .param_env\n                     .and(type_op::normalize::Normalize::new(ty))\n@@ -284,10 +283,9 @@ impl UniversalRegionRelationsBuilder<'cx, 'tcx> {\n                 // }\n                 // ```\n                 // Both &Self::Bar and &() are WF\n-                let constraints_implied_2 =\n-                    if ty != norm_ty { self.add_implied_bounds(norm_ty) } else { None };\n+                let constraints_implied = self.add_implied_bounds(norm_ty);\n                 normalized_inputs_and_output.push(norm_ty);\n-                constraints1.into_iter().chain(constraints_implied_1).chain(constraints_implied_2)\n+                constraints1.into_iter().chain(constraints_implied)\n             })\n             .collect();\n "}, {"sha": "44fc81a889d1732b404cee3674066f1e1f2744e4", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6e7cf2e88b96995ed85b6f9b81c178f08ad5107c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7cf2e88b96995ed85b6f9b81c178f08ad5107c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=6e7cf2e88b96995ed85b6f9b81c178f08ad5107c", "patch": "@@ -264,14 +264,9 @@ fn compare_predicate_entailment<'tcx>(\n         // First liberate late bound regions and subst placeholders\n         let trait_sig = tcx.liberate_late_bound_regions(impl_m.def_id, tcx.fn_sig(trait_m.def_id));\n         let trait_sig = trait_sig.subst(tcx, trait_to_placeholder_substs);\n-        // Next, add all inputs and output as well-formed tys. Importantly,\n-        // we have to do this before normalization, since the normalized ty may\n-        // not contain the input parameters. See issue #87748.\n-        wf_tys.extend(trait_sig.inputs_and_output.iter());\n         let trait_sig =\n             inh.normalize_associated_types_in(impl_m_span, impl_m_hir_id, param_env, trait_sig);\n-        // Also add the resulting inputs and output as well-formed.\n-        // This probably isn't strictly necessary.\n+        // Add the resulting inputs and output as well-formed.\n         wf_tys.extend(trait_sig.inputs_and_output.iter());\n         let trait_fty = tcx.mk_fn_ptr(ty::Binder::dummy(trait_sig));\n "}, {"sha": "7bfd3f0ee804733ba763844cd99d693e55478724", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e7cf2e88b96995ed85b6f9b81c178f08ad5107c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7cf2e88b96995ed85b6f9b81c178f08ad5107c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=6e7cf2e88b96995ed85b6f9b81c178f08ad5107c", "patch": "@@ -391,7 +391,6 @@ fn typeck_with_fallback<'tcx>(\n             let mut wf_tys = FxHashSet::default();\n             // Compute the fty from point of view of inside the fn.\n             let fn_sig = tcx.liberate_late_bound_regions(def_id.to_def_id(), fn_sig);\n-            wf_tys.extend(fn_sig.inputs_and_output.iter());\n             let fn_sig = inh.normalize_associated_types_in(\n                 body.value.span,\n                 body_id.hir_id,"}, {"sha": "33a0c3275ca2a4d412a1daa19475f885c5287254", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6e7cf2e88b96995ed85b6f9b81c178f08ad5107c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7cf2e88b96995ed85b6f9b81c178f08ad5107c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=6e7cf2e88b96995ed85b6f9b81c178f08ad5107c", "patch": "@@ -1334,11 +1334,6 @@ fn check_fn_or_method<'fcx, 'tcx>(\n ) {\n     let sig = fcx.tcx.liberate_late_bound_regions(def_id, sig);\n \n-    // Unnormalized types in signature are WF too\n-    implied_bounds.extend(sig.inputs());\n-    // FIXME(#27579) return types should not be implied bounds\n-    implied_bounds.insert(sig.output());\n-\n     // Normalize the input and output types one at a time, using a different\n     // `WellFormedLoc` for each. We cannot call `normalize_associated_types`\n     // on the entire `FnSig`, since this would use the same `WellFormedLoc`"}, {"sha": "e37ec7f26651c27fe2ce0948318dc52fa63a279b", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6e7cf2e88b96995ed85b6f9b81c178f08ad5107c/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e7cf2e88b96995ed85b6f9b81c178f08ad5107c/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.nll.stderr?ref=6e7cf2e88b96995ed85b6f9b81c178f08ad5107c", "patch": "@@ -0,0 +1,14 @@\n+error: lifetime may not live long enough\n+  --> $DIR/implied-bounds-unnorm-associated-type.rs:14:5\n+   |\n+LL | fn f<'a, 'b>(s: &'b str, _: <&'a &'b () as Trait>::Type) -> &'a str {\n+   |      --  -- lifetime `'b` defined here\n+   |      |\n+   |      lifetime `'a` defined here\n+LL |     s\n+   |     ^ returning this value requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "2e5ac7d7398eb41e7b36194919ab1c151818ae1d", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6e7cf2e88b96995ed85b6f9b81c178f08ad5107c/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7cf2e88b96995ed85b6f9b81c178f08ad5107c/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.rs?ref=6e7cf2e88b96995ed85b6f9b81c178f08ad5107c", "patch": "@@ -0,0 +1,22 @@\n+// check-fail\n+// See issue #91068. Types in the substs of an associated type can't be implied\n+// to be WF, since they don't actually have to be constructed.\n+\n+trait Trait {\n+    type Type;\n+}\n+\n+impl<T> Trait for T {\n+    type Type = ();\n+}\n+\n+fn f<'a, 'b>(s: &'b str, _: <&'a &'b () as Trait>::Type) -> &'a str {\n+    s //~ ERROR lifetime mismatch [E0623]\n+}\n+\n+fn main() {\n+    let x = String::from(\"Hello World!\");\n+    let y = f(&x, ());\n+    drop(x);\n+    println!(\"{}\", y);\n+}"}, {"sha": "93ab5dceee9477fd5671029b68ea3e58ccde423c", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6e7cf2e88b96995ed85b6f9b81c178f08ad5107c/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e7cf2e88b96995ed85b6f9b81c178f08ad5107c/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.stderr?ref=6e7cf2e88b96995ed85b6f9b81c178f08ad5107c", "patch": "@@ -0,0 +1,13 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/implied-bounds-unnorm-associated-type.rs:14:5\n+   |\n+LL | fn f<'a, 'b>(s: &'b str, _: <&'a &'b () as Trait>::Type) -> &'a str {\n+   |                 -------      ----------\n+   |                 |\n+   |                 these two types are declared with different lifetimes...\n+LL |     s\n+   |     ^ ...but data from `s` flows here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "93c3b3937cb814f060d4cc0a4dc0698f47b8cf1e", "filename": "src/test/ui/generic-associated-types/issue-87748.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4c948963306dc195d5b20a0b4300d90a2b423b8b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87748.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c948963306dc195d5b20a0b4300d90a2b423b8b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87748.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87748.rs?ref=4c948963306dc195d5b20a0b4300d90a2b423b8b", "patch": "@@ -1,30 +0,0 @@\n-// Checks that we properly add implied bounds from unnormalized projections in\n-// inputs when typechecking functions.\n-\n-// check-pass\n-\n-#![feature(generic_associated_types)]\n-\n-trait MyTrait {\n-    type Assoc<'a, 'b> where 'b: 'a;\n-    fn do_sth(arg: Self::Assoc<'_, '_>);\n-}\n-\n-struct A;\n-struct B;\n-struct C;\n-\n-impl MyTrait for A {\n-    type Assoc<'a, 'b> where 'b: 'a = u32;\n-    fn do_sth(_: u32) {}\n-}\n-impl MyTrait for B {\n-    type Assoc<'a, 'b> where 'b: 'a = u32;\n-    fn do_sth(_: Self::Assoc<'_, '_>) {}\n-}\n-impl MyTrait for C {\n-    type Assoc<'a, 'b> where 'b: 'a = u32;\n-    fn do_sth(_: Self::Assoc<'static, 'static>) {}\n-}\n-\n-fn main () {}"}]}