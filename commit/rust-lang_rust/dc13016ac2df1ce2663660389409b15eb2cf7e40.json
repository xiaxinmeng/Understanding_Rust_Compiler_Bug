{"sha": "dc13016ac2df1ce2663660389409b15eb2cf7e40", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMTMwMTZhYzJkZjFjZTI2NjM2NjAzODk0MDliMTVlYjJjZjdlNDA=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-06-02T23:13:57Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-06-07T18:53:38Z"}, "message": "Make let_and_return a late lint pass", "tree": {"sha": "aa75a0caeb4a235d4ab59895a11f7e89591dd037", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa75a0caeb4a235d4ab59895a11f7e89591dd037"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc13016ac2df1ce2663660389409b15eb2cf7e40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc13016ac2df1ce2663660389409b15eb2cf7e40", "html_url": "https://github.com/rust-lang/rust/commit/dc13016ac2df1ce2663660389409b15eb2cf7e40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc13016ac2df1ce2663660389409b15eb2cf7e40/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67ec96c8f97ae810f72ccc08c8bf0c371ff11305", "url": "https://api.github.com/repos/rust-lang/rust/commits/67ec96c8f97ae810f72ccc08c8bf0c371ff11305", "html_url": "https://github.com/rust-lang/rust/commit/67ec96c8f97ae810f72ccc08c8bf0c371ff11305"}], "stats": {"total": 174, "additions": 91, "deletions": 83}, "files": [{"sha": "8b877f696afeaabd56da0d537718c78aa66aff46", "filename": "clippy_lints/src/let_and_return.rs", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/dc13016ac2df1ce2663660389409b15eb2cf7e40/clippy_lints%2Fsrc%2Flet_and_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc13016ac2df1ce2663660389409b15eb2cf7e40/clippy_lints%2Fsrc%2Flet_and_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_and_return.rs?ref=dc13016ac2df1ce2663660389409b15eb2cf7e40", "patch": "@@ -0,0 +1,82 @@\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Block, ExprKind, PatKind, StmtKind};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+use crate::utils::{in_macro, match_qpath, snippet_opt, span_lint_and_then};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `let`-bindings, which are subsequently\n+    /// returned.\n+    ///\n+    /// **Why is this bad?** It is just extraneous code. Remove it to make your code\n+    /// more rusty.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// fn foo() -> String {\n+    ///     let x = String::new();\n+    ///     x\n+    /// }\n+    /// ```\n+    /// instead, use\n+    /// ```\n+    /// fn foo() -> String {\n+    ///     String::new()\n+    /// }\n+    /// ```\n+    pub LET_AND_RETURN,\n+    style,\n+    \"creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a block\"\n+}\n+\n+declare_lint_pass!(LetReturn => [LET_AND_RETURN]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetReturn {\n+    fn check_block(&mut self, cx: &LateContext<'a, 'tcx>, block: &'tcx Block<'_>) {\n+        // we need both a let-binding stmt and an expr\n+        if_chain! {\n+            if let Some(retexpr) = block.expr;\n+            if let Some(stmt) = block.stmts.iter().last();\n+            if let StmtKind::Local(local) = &stmt.kind;\n+            if local.ty.is_none();\n+            if local.attrs.is_empty();\n+            if let Some(initexpr) = &local.init;\n+            if let PatKind::Binding(.., ident, _) = local.pat.kind;\n+            if let ExprKind::Path(qpath) = &retexpr.kind;\n+            if match_qpath(qpath, &[&*ident.name.as_str()]);\n+            if !in_external_macro(cx.sess(), initexpr.span);\n+            if !in_external_macro(cx.sess(), retexpr.span);\n+            if !in_external_macro(cx.sess(), local.span);\n+            if !in_macro(local.span);\n+            then {\n+                span_lint_and_then(\n+                    cx,\n+                    LET_AND_RETURN,\n+                    retexpr.span,\n+                    \"returning the result of a `let` binding from a block\",\n+                    |err| {\n+                        err.span_label(local.span, \"unnecessary `let` binding\");\n+\n+                        if let Some(snippet) = snippet_opt(cx, initexpr.span) {\n+                            err.multipart_suggestion(\n+                                \"return the expression directly\",\n+                                vec![\n+                                    (local.span, String::new()),\n+                                    (retexpr.span, snippet),\n+                                ],\n+                                Applicability::MachineApplicable,\n+                            );\n+                        } else {\n+                            err.span_help(initexpr.span, \"this expression can be directly returned\");\n+                        }\n+                    },\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "6bc9e23bac5dd0b952cde361fbceffb03a8da4e5", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc13016ac2df1ce2663660389409b15eb2cf7e40/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc13016ac2df1ce2663660389409b15eb2cf7e40/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=dc13016ac2df1ce2663660389409b15eb2cf7e40", "patch": "@@ -239,6 +239,7 @@ mod large_const_arrays;\n mod large_enum_variant;\n mod large_stack_arrays;\n mod len_zero;\n+mod let_and_return;\n mod let_if_seq;\n mod let_underscore;\n mod lifetimes;\n@@ -596,6 +597,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &large_stack_arrays::LARGE_STACK_ARRAYS,\n         &len_zero::LEN_WITHOUT_IS_EMPTY,\n         &len_zero::LEN_ZERO,\n+        &let_and_return::LET_AND_RETURN,\n         &let_if_seq::USELESS_LET_IF_SEQ,\n         &let_underscore::LET_UNDERSCORE_LOCK,\n         &let_underscore::LET_UNDERSCORE_MUST_USE,\n@@ -772,7 +774,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &regex::INVALID_REGEX,\n         &regex::REGEX_MACRO,\n         &regex::TRIVIAL_REGEX,\n-        &returns::LET_AND_RETURN,\n         &returns::NEEDLESS_RETURN,\n         &returns::UNUSED_UNIT,\n         &serde_api::SERDE_API_MISUSE,\n@@ -1022,6 +1023,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| box formatting::Formatting);\n     store.register_early_pass(|| box misc_early::MiscEarlyLints);\n     store.register_early_pass(|| box returns::Return);\n+    store.register_late_pass(|| box let_and_return::LetReturn);\n     store.register_early_pass(|| box collapsible_if::CollapsibleIf);\n     store.register_early_pass(|| box items_after_statements::ItemsAfterStatements);\n     store.register_early_pass(|| box precedence::Precedence);\n@@ -1265,6 +1267,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&large_enum_variant::LARGE_ENUM_VARIANT),\n         LintId::of(&len_zero::LEN_WITHOUT_IS_EMPTY),\n         LintId::of(&len_zero::LEN_ZERO),\n+        LintId::of(&let_and_return::LET_AND_RETURN),\n         LintId::of(&let_underscore::LET_UNDERSCORE_LOCK),\n         LintId::of(&lifetimes::EXTRA_UNUSED_LIFETIMES),\n         LintId::of(&lifetimes::NEEDLESS_LIFETIMES),\n@@ -1390,7 +1393,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&regex::INVALID_REGEX),\n         LintId::of(&regex::REGEX_MACRO),\n         LintId::of(&regex::TRIVIAL_REGEX),\n-        LintId::of(&returns::LET_AND_RETURN),\n         LintId::of(&returns::NEEDLESS_RETURN),\n         LintId::of(&returns::UNUSED_UNIT),\n         LintId::of(&serde_api::SERDE_API_MISUSE),\n@@ -1474,6 +1476,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&inherent_to_string::INHERENT_TO_STRING),\n         LintId::of(&len_zero::LEN_WITHOUT_IS_EMPTY),\n         LintId::of(&len_zero::LEN_ZERO),\n+        LintId::of(&let_and_return::LET_AND_RETURN),\n         LintId::of(&literal_representation::INCONSISTENT_DIGIT_GROUPING),\n         LintId::of(&loops::EMPTY_LOOP),\n         LintId::of(&loops::FOR_KV_MAP),\n@@ -1526,7 +1529,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES),\n         LintId::of(&regex::REGEX_MACRO),\n         LintId::of(&regex::TRIVIAL_REGEX),\n-        LintId::of(&returns::LET_AND_RETURN),\n         LintId::of(&returns::NEEDLESS_RETURN),\n         LintId::of(&returns::UNUSED_UNIT),\n         LintId::of(&single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),"}, {"sha": "3c939744173562515d8419edffabca457ec08e11", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 3, "deletions": 79, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/dc13016ac2df1ce2663660389409b15eb2cf7e40/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc13016ac2df1ce2663660389409b15eb2cf7e40/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=dc13016ac2df1ce2663660389409b15eb2cf7e40", "patch": "@@ -8,7 +8,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::BytePos;\n \n-use crate::utils::{in_macro, match_path_ast, snippet_opt, span_lint_and_sugg, span_lint_and_then};\n+use crate::utils::{snippet_opt, span_lint_and_sugg, span_lint_and_then};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for return statements at the end of a block.\n@@ -36,33 +36,6 @@ declare_clippy_lint! {\n     \"using a return statement like `return expr;` where an expression would suffice\"\n }\n \n-declare_clippy_lint! {\n-    /// **What it does:** Checks for `let`-bindings, which are subsequently\n-    /// returned.\n-    ///\n-    /// **Why is this bad?** It is just extraneous code. Remove it to make your code\n-    /// more rusty.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    /// ```rust\n-    /// fn foo() -> String {\n-    ///     let x = String::new();\n-    ///     x\n-    /// }\n-    /// ```\n-    /// instead, use\n-    /// ```\n-    /// fn foo() -> String {\n-    ///     String::new()\n-    /// }\n-    /// ```\n-    pub LET_AND_RETURN,\n-    style,\n-    \"creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a block\"\n-}\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for unit (`()`) expressions that can be removed.\n     ///\n@@ -90,7 +63,7 @@ enum RetReplacement {\n     Block,\n }\n \n-declare_lint_pass!(Return => [NEEDLESS_RETURN, LET_AND_RETURN, UNUSED_UNIT]);\n+declare_lint_pass!(Return => [NEEDLESS_RETURN, UNUSED_UNIT]);\n \n impl Return {\n     // Check the final stmt or expr in a block for unnecessary return.\n@@ -105,7 +78,7 @@ impl Return {\n         }\n     }\n \n-    // Check a the final expression in a block if it's a return.\n+    // Check the final expression in a block if it's a return.\n     fn check_final_expr(\n         &mut self,\n         cx: &EarlyContext<'_>,\n@@ -186,54 +159,6 @@ impl Return {\n             },\n         }\n     }\n-\n-    // Check for \"let x = EXPR; x\"\n-    fn check_let_return(cx: &EarlyContext<'_>, block: &ast::Block) {\n-        let mut it = block.stmts.iter();\n-\n-        // we need both a let-binding stmt and an expr\n-        if_chain! {\n-            if let Some(retexpr) = it.next_back();\n-            if let ast::StmtKind::Expr(ref retexpr) = retexpr.kind;\n-            if let Some(stmt) = it.next_back();\n-            if let ast::StmtKind::Local(ref local) = stmt.kind;\n-            // don't lint in the presence of type inference\n-            if local.ty.is_none();\n-            if local.attrs.is_empty();\n-            if let Some(ref initexpr) = local.init;\n-            if let ast::PatKind::Ident(_, ident, _) = local.pat.kind;\n-            if let ast::ExprKind::Path(_, ref path) = retexpr.kind;\n-            if match_path_ast(path, &[&*ident.name.as_str()]);\n-            if !in_external_macro(cx.sess(), initexpr.span);\n-            if !in_external_macro(cx.sess(), retexpr.span);\n-            if !in_external_macro(cx.sess(), local.span);\n-            if !in_macro(local.span);\n-            then {\n-                span_lint_and_then(\n-                    cx,\n-                    LET_AND_RETURN,\n-                    retexpr.span,\n-                    \"returning the result of a `let` binding from a block\",\n-                    |err| {\n-                        err.span_label(local.span, \"unnecessary `let` binding\");\n-\n-                        if let Some(snippet) = snippet_opt(cx, initexpr.span) {\n-                            err.multipart_suggestion(\n-                                \"return the expression directly\",\n-                                vec![\n-                                    (local.span, String::new()),\n-                                    (retexpr.span, snippet),\n-                                ],\n-                                Applicability::MachineApplicable,\n-                            );\n-                        } else {\n-                            err.span_help(initexpr.span, \"this expression can be directly returned\");\n-                        }\n-                    },\n-                );\n-            }\n-        }\n-    }\n }\n \n impl EarlyLintPass for Return {\n@@ -254,7 +179,6 @@ impl EarlyLintPass for Return {\n     }\n \n     fn check_block(&mut self, cx: &EarlyContext<'_>, block: &ast::Block) {\n-        Self::check_let_return(cx, block);\n         if_chain! {\n             if let Some(ref stmt) = block.stmts.last();\n             if let ast::StmtKind::Expr(ref expr) = stmt.kind;"}, {"sha": "bb191f9be92ca2b2c0da7dfa285250cb36798565", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc13016ac2df1ce2663660389409b15eb2cf7e40/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc13016ac2df1ce2663660389409b15eb2cf7e40/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=dc13016ac2df1ce2663660389409b15eb2cf7e40", "patch": "@@ -1023,7 +1023,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         group: \"style\",\n         desc: \"creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a block\",\n         deprecation: None,\n-        module: \"returns\",\n+        module: \"let_and_return\",\n     },\n     Lint {\n         name: \"let_underscore_lock\","}]}