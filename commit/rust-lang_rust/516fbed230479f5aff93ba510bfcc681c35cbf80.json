{"sha": "516fbed230479f5aff93ba510bfcc681c35cbf80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNmZiZWQyMzA0NzlmNWFmZjkzYmE1MTBiZmNjNjgxYzM1Y2JmODA=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-05T10:09:19Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-05T10:09:19Z"}, "message": "Fix bad spans for ast::ty parsing\n\nThe span would be pointing after the actual text.", "tree": {"sha": "eb4713ab5fad74c25e719a9f991ab8e7a90257c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb4713ab5fad74c25e719a9f991ab8e7a90257c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/516fbed230479f5aff93ba510bfcc681c35cbf80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/516fbed230479f5aff93ba510bfcc681c35cbf80", "html_url": "https://github.com/rust-lang/rust/commit/516fbed230479f5aff93ba510bfcc681c35cbf80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/516fbed230479f5aff93ba510bfcc681c35cbf80/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6559aa8bfb79b55280ea19d479aca681b5551cd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6559aa8bfb79b55280ea19d479aca681b5551cd7", "html_url": "https://github.com/rust-lang/rust/commit/6559aa8bfb79b55280ea19d479aca681b5551cd7"}], "stats": {"total": 15, "additions": 6, "deletions": 9}, "files": [{"sha": "990132e01bff52cd741b081aebf8b61e92c330b9", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/516fbed230479f5aff93ba510bfcc681c35cbf80/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516fbed230479f5aff93ba510bfcc681c35cbf80/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=516fbed230479f5aff93ba510bfcc681c35cbf80", "patch": "@@ -394,26 +394,23 @@ fn parse_type_constraints(p: parser) -> [@ast::ty_constr] {\n     ret parse_constrs(parse_constr_in_type, p);\n }\n \n-fn parse_ty_postfix(orig_t: ast::ty_, p: parser, colons_before_params: bool)\n-   -> @ast::ty {\n-    let lo = p.get_lo_pos();\n-\n+fn parse_ty_postfix(orig_t: ast::ty_, p: parser, colons_before_params: bool,\n+                    lo: uint) -> @ast::ty {\n     if colons_before_params && p.peek() == token::MOD_SEP {\n         p.bump();\n         expect(p, token::LT);\n     } else if !colons_before_params && p.peek() == token::LT {\n         p.bump();\n-    } else { ret @spanned(lo, p.get_lo_pos(), orig_t); }\n+    } else { ret @spanned(lo, p.get_last_hi_pos(), orig_t); }\n \n     // If we're here, we have explicit type parameter instantiation.\n     let seq = parse_seq_to_gt(some(token::COMMA), {|p| parse_ty(p, false)},\n                               p);\n \n     alt orig_t {\n       ast::ty_path(pth, ann) {\n-        let hi = p.get_hi_pos();\n-        ret @spanned(lo, hi,\n-                     ast::ty_path(@spanned(lo, hi,\n+        ret @spanned(lo, p.get_last_hi_pos(),\n+                     ast::ty_path(@spanned(lo, p.get_last_hi_pos(),\n                                            {global: pth.node.global,\n                                             idents: pth.node.idents,\n                                             types: seq}), ann));\n@@ -527,7 +524,7 @@ fn parse_ty(p: parser, colons_before_params: bool) -> @ast::ty {\n         let path = parse_path(p);\n         t = ast::ty_path(path, p.get_id());\n     } else { p.fatal(\"expecting type\"); }\n-    ret parse_ty_postfix(t, p, colons_before_params);\n+    ret parse_ty_postfix(t, p, colons_before_params, lo);\n }\n \n fn parse_arg_mode(p: parser) -> ast::mode {"}]}