{"sha": "433b1e36e19824742175de681b8579c861217207", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzM2IxZTM2ZTE5ODI0NzQyMTc1ZGU2ODFiODU3OWM4NjEyMTcyMDc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-14T23:13:53Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-15T08:45:28Z"}, "message": "Remove `Spanned` from `ast::Mac`", "tree": {"sha": "9cd2031e8007fa2f74f0f99a9492023d14f73edb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cd2031e8007fa2f74f0f99a9492023d14f73edb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/433b1e36e19824742175de681b8579c861217207", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/433b1e36e19824742175de681b8579c861217207", "html_url": "https://github.com/rust-lang/rust/commit/433b1e36e19824742175de681b8579c861217207", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/433b1e36e19824742175de681b8579c861217207/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b", "html_url": "https://github.com/rust-lang/rust/commit/73d2da08949eb5cd78e8081ea1ec9a068cdbaf6b"}], "stats": {"total": 106, "additions": 54, "deletions": 52}, "files": [{"sha": "6801fa8d8dbe5b0099ebc53e04fd73ec3ba4406d", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/433b1e36e19824742175de681b8579c861217207/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/433b1e36e19824742175de681b8579c861217207/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=433b1e36e19824742175de681b8579c861217207", "patch": "@@ -1345,7 +1345,7 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         // part of `walk_mac`, and (b) we should be calling\n         // `visit_path`, *but* that would require a `NodeId`, and I\n         // want to get #53686 fixed quickly. -nmatsakis\n-        ast_visit::walk_path(self, &mac.node.path);\n+        ast_visit::walk_path(self, &mac.path);\n \n         run_early_pass!(self, check_mac, mac);\n     }"}, {"sha": "c34828a6b45254f89e493f517e40eddac664e4e2", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/433b1e36e19824742175de681b8579c861217207/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/433b1e36e19824742175de681b8579c861217207/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=433b1e36e19824742175de681b8579c861217207", "patch": "@@ -1493,7 +1493,7 @@ impl EarlyLintPass for KeywordIdents {\n         self.check_tokens(cx, mac_def.stream());\n     }\n     fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &ast::Mac) {\n-        self.check_tokens(cx, mac.node.tts.clone().into());\n+        self.check_tokens(cx, mac.tts.clone().into());\n     }\n     fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: ast::Ident) {\n         self.check_ident_token(cx, UnderMacro(false), ident);"}, {"sha": "bd46ca4779a430fb56bc5a9bbfae1e9499bfa275", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/433b1e36e19824742175de681b8579c861217207/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/433b1e36e19824742175de681b8579c861217207/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=433b1e36e19824742175de681b8579c861217207", "patch": "@@ -824,7 +824,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             |this| visit::walk_enum_def(this, enum_definition, generics, item_id))\n     }\n \n-    fn visit_mac(&mut self, mac: &Spanned<Mac_>) {\n+    fn visit_mac(&mut self, mac: &Mac) {\n         // when a new macro kind is added but the author forgets to set it up for expansion\n         // because that's the only part that won't cause a compiler error\n         self.session.diagnostic()"}, {"sha": "71e26dac57c2a5f68b2cbad30031cc0e5201e2a8", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/433b1e36e19824742175de681b8579c861217207/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/433b1e36e19824742175de681b8579c861217207/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=433b1e36e19824742175de681b8579c861217207", "patch": "@@ -186,7 +186,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n             InvocationKind::Attr { ref attr, ref derives, after_derive, .. } =>\n                 (&attr.path, MacroKind::Attr, derives.clone(), after_derive),\n             InvocationKind::Bang { ref mac, .. } =>\n-                (&mac.node.path, MacroKind::Bang, Vec::new(), false),\n+                (&mac.path, MacroKind::Bang, Vec::new(), false),\n             InvocationKind::Derive { ref path, .. } =>\n                 (path, MacroKind::Derive, Vec::new(), false),\n             InvocationKind::DeriveContainer { ref derives, .. } => {"}, {"sha": "b8bfa671bcf31273b843ec2bc29536fadb646972", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/433b1e36e19824742175de681b8579c861217207/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/433b1e36e19824742175de681b8579c861217207/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=433b1e36e19824742175de681b8579c861217207", "patch": "@@ -1285,19 +1285,18 @@ pub enum Movability {\n     Movable,\n }\n \n-pub type Mac = Spanned<Mac_>;\n-\n /// Represents a macro invocation. The `Path` indicates which macro\n /// is being invoked, and the vector of token-trees contains the source\n /// of the macro invocation.\n ///\n /// N.B., the additional ident for a `macro_rules`-style macro is actually\n /// stored in the enclosing item.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub struct Mac_ {\n+pub struct Mac {\n     pub path: Path,\n     pub delim: MacDelimiter,\n     pub tts: TokenStream,\n+    pub span: Span,\n     pub prior_type_ascription: Option<(Span, bool)>,\n }\n \n@@ -1308,7 +1307,7 @@ pub enum MacDelimiter {\n     Brace,\n }\n \n-impl Mac_ {\n+impl Mac {\n     pub fn stream(&self) -> TokenStream {\n         self.tts.clone()\n     }"}, {"sha": "97983944931ba0271a482e0271be56b792a010f9", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/433b1e36e19824742175de681b8579c861217207/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/433b1e36e19824742175de681b8579c861217207/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=433b1e36e19824742175de681b8579c861217207", "patch": "@@ -492,22 +492,21 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             InvocationKind::Bang { mac, .. } => match ext {\n                 SyntaxExtensionKind::Bang(expander) => {\n                     self.gate_proc_macro_expansion_kind(span, fragment_kind);\n-                    let tok_result = expander.expand(self.cx, span, mac.node.stream());\n+                    let tok_result = expander.expand(self.cx, span, mac.stream());\n                     let result =\n-                        self.parse_ast_fragment(tok_result, fragment_kind, &mac.node.path, span);\n+                        self.parse_ast_fragment(tok_result, fragment_kind, &mac.path, span);\n                     self.gate_proc_macro_expansion(span, &result);\n                     result\n                 }\n                 SyntaxExtensionKind::LegacyBang(expander) => {\n                     let prev = self.cx.current_expansion.prior_type_ascription;\n-                    self.cx.current_expansion.prior_type_ascription =\n-                        mac.node.prior_type_ascription;\n-                    let tok_result = expander.expand(self.cx, span, mac.node.stream());\n+                    self.cx.current_expansion.prior_type_ascription = mac.prior_type_ascription;\n+                    let tok_result = expander.expand(self.cx, span, mac.stream());\n                     let result = if let Some(result) = fragment_kind.make_from(tok_result) {\n                         result\n                     } else {\n                         let msg = format!(\"non-{kind} macro in {kind} position: {path}\",\n-                                          kind = fragment_kind.name(), path = mac.node.path);\n+                                          kind = fragment_kind.name(), path = mac.path);\n                         self.cx.span_err(span, &msg);\n                         self.cx.trace_macros_diag();\n                         fragment_kind.dummy(span)"}, {"sha": "2d05f8f0b00478b8a35f65851f097c7c9057af8c", "filename": "src/libsyntax/ext/placeholders.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/433b1e36e19824742175de681b8579c861217207/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/433b1e36e19824742175de681b8579c861217207/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fplaceholders.rs?ref=433b1e36e19824742175de681b8579c861217207", "patch": "@@ -14,12 +14,13 @@ use rustc_data_structures::fx::FxHashMap;\n \n pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId) -> AstFragment {\n     fn mac_placeholder() -> ast::Mac {\n-        dummy_spanned(ast::Mac_ {\n+        ast::Mac {\n             path: ast::Path { span: DUMMY_SP, segments: Vec::new() },\n             tts: TokenStream::empty().into(),\n             delim: ast::MacDelimiter::Brace,\n+            span: DUMMY_SP,\n             prior_type_ascription: None,\n-        })\n+        }\n     }\n \n     let ident = ast::Ident::invalid();"}, {"sha": "d22c05d9b2eee7fe5a8d879f8654ee37f1da5ae1", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/433b1e36e19824742175de681b8579c861217207/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/433b1e36e19824742175de681b8579c861217207/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=433b1e36e19824742175de681b8579c861217207", "patch": "@@ -533,8 +533,8 @@ pub fn noop_visit_attribute<T: MutVisitor>(attr: &mut Attribute, vis: &mut T) {\n     vis.visit_span(span);\n }\n \n-pub fn noop_visit_mac<T: MutVisitor>(Spanned { node, span }: &mut Mac, vis: &mut T) {\n-    let Mac_ { path, delim: _, tts, .. } = node;\n+pub fn noop_visit_mac<T: MutVisitor>(mac: &mut Mac, vis: &mut T) {\n+    let Mac { path, delim: _, tts, span, prior_type_ascription: _ } = mac;\n     vis.visit_path(path);\n     vis.visit_tts(tts);\n     vis.visit_span(span);"}, {"sha": "f4b6a926734fb1ac01bb0f63af11a8f1294d135a", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/433b1e36e19824742175de681b8579c861217207/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/433b1e36e19824742175de681b8579c861217207/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=433b1e36e19824742175de681b8579c861217207", "patch": "@@ -8,13 +8,13 @@ use crate::ast::{self, Attribute, AttrStyle, Ident, CaptureBy, BlockCheckMode};\n use crate::ast::{Expr, ExprKind, RangeLimits, Label, Movability, IsAsync, Arm};\n use crate::ast::{Ty, TyKind, FunctionRetTy, Arg, FnDecl};\n use crate::ast::{BinOpKind, BinOp, UnOp};\n-use crate::ast::{Mac_, AnonConst, Field};\n+use crate::ast::{Mac, AnonConst, Field};\n \n use crate::parse::classify;\n use crate::parse::token::{self, Token};\n use crate::parse::diagnostics::{Error};\n use crate::print::pprust;\n-use crate::source_map::{self, respan, Span};\n+use crate::source_map::{self, Span};\n use crate::symbol::{kw, sym};\n use crate::util::parser::{AssocOp, Fixity, prec_let_scrutinee_needs_par};\n \n@@ -1011,12 +1011,13 @@ impl<'a> Parser<'a> {\n                         // MACRO INVOCATION expression\n                         let (delim, tts) = self.expect_delimited_token_tree()?;\n                         hi = self.prev_span;\n-                        ex = ExprKind::Mac(respan(lo.to(hi), Mac_ {\n+                        ex = ExprKind::Mac(Mac {\n                             path,\n                             tts,\n                             delim,\n+                            span: lo.to(hi),\n                             prior_type_ascription: self.last_type_ascription,\n-                        }));\n+                        });\n                     } else if self.check(&token::OpenDelim(token::Brace)) {\n                         if let Some(expr) = self.maybe_parse_struct_expr(lo, &path, &attrs) {\n                             return expr;"}, {"sha": "72819c9966035223fe24121f7c081470176dd6fe", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/433b1e36e19824742175de681b8579c861217207/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/433b1e36e19824742175de681b8579c861217207/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=433b1e36e19824742175de681b8579c861217207", "patch": "@@ -10,7 +10,7 @@ use crate::ast::{Visibility, VisibilityKind, Mutability, FnDecl, FnHeader};\n use crate::ast::{ForeignItem, ForeignItemKind};\n use crate::ast::{Ty, TyKind, GenericBounds, TraitRef};\n use crate::ast::{EnumDef, VariantData, StructField, AnonConst};\n-use crate::ast::{Mac, Mac_, MacDelimiter};\n+use crate::ast::{Mac, MacDelimiter};\n use crate::ext::base::DummyResult;\n use crate::parse::token;\n use crate::parse::parser::maybe_append;\n@@ -530,12 +530,13 @@ impl<'a> Parser<'a> {\n             }\n \n             let hi = self.prev_span;\n-            let mac = respan(mac_lo.to(hi), Mac_ {\n+            let mac = Mac {\n                 path,\n                 tts,\n                 delim,\n+                span: mac_lo.to(hi),\n                 prior_type_ascription: self.last_type_ascription,\n-            });\n+            };\n             let item =\n                 self.mk_item(lo.to(hi), Ident::invalid(), ItemKind::Mac(mac), visibility, attrs);\n             return Ok(Some(item));\n@@ -604,12 +605,13 @@ impl<'a> Parser<'a> {\n                 self.expect(&token::Semi)?;\n             }\n \n-            Ok(Some(respan(lo.to(self.prev_span), Mac_ {\n+            Ok(Some(Mac {\n                 path,\n                 tts,\n                 delim,\n+                span: lo.to(self.prev_span),\n                 prior_type_ascription: self.last_type_ascription,\n-            })))\n+            }))\n         } else {\n             Ok(None)\n         }"}, {"sha": "da44ebd8415997fed920aaa172e000954a5a43e3", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/433b1e36e19824742175de681b8579c861217207/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/433b1e36e19824742175de681b8579c861217207/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=433b1e36e19824742175de681b8579c861217207", "patch": "@@ -2,7 +2,7 @@ use super::{Parser, PResult, PathStyle};\n \n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n use crate::ptr::P;\n-use crate::ast::{self, Attribute, Pat, PatKind, FieldPat, RangeEnd, RangeSyntax, Mac_};\n+use crate::ast::{self, Attribute, Pat, PatKind, FieldPat, RangeEnd, RangeSyntax, Mac};\n use crate::ast::{BindingMode, Ident, Mutability, Path, QSelf, Expr, ExprKind};\n use crate::parse::token::{self};\n use crate::print::pprust;\n@@ -275,12 +275,13 @@ impl<'a> Parser<'a> {\n     fn parse_pat_mac_invoc(&mut self, lo: Span, path: Path) -> PResult<'a, PatKind> {\n         self.bump();\n         let (delim, tts) = self.expect_delimited_token_tree()?;\n-        let mac = respan(lo.to(self.prev_span), Mac_ {\n+        let mac = Mac {\n             path,\n             tts,\n             delim,\n+            span: lo.to(self.prev_span),\n             prior_type_ascription: self.last_type_ascription,\n-        });\n+        };\n         Ok(PatKind::Mac(mac))\n     }\n "}, {"sha": "c911caba4cd414605f26d901afa47408dd9ce6d5", "filename": "src/libsyntax/parse/parser/stmt.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/433b1e36e19824742175de681b8579c861217207/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/433b1e36e19824742175de681b8579c861217207/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs?ref=433b1e36e19824742175de681b8579c861217207", "patch": "@@ -5,7 +5,7 @@ use super::path::PathStyle;\n use crate::ptr::P;\n use crate::{maybe_whole, ThinVec};\n use crate::ast::{self, Stmt, StmtKind, Local, Block, BlockCheckMode, Expr, ExprKind};\n-use crate::ast::{Attribute, AttrStyle, VisibilityKind, MacStmtStyle, Mac_, MacDelimiter};\n+use crate::ast::{Attribute, AttrStyle, VisibilityKind, MacStmtStyle, Mac, MacDelimiter};\n use crate::ext::base::DummyResult;\n use crate::parse::{classify, DirectoryOwnership};\n use crate::parse::diagnostics::Error;\n@@ -99,12 +99,13 @@ impl<'a> Parser<'a> {\n                 MacStmtStyle::NoBraces\n             };\n \n-            let mac = respan(lo.to(hi), Mac_ {\n+            let mac = Mac {\n                 path,\n                 tts,\n                 delim,\n+                span: lo.to(hi),\n                 prior_type_ascription: self.last_type_ascription,\n-            });\n+            };\n             let node = if delim == MacDelimiter::Brace ||\n                           self.token == token::Semi || self.token == token::Eof {\n                 StmtKind::Mac(P((mac, style, attrs.into())))"}, {"sha": "337702b8d30c57bae465d51907c28d4f09bdc3e7", "filename": "src/libsyntax/parse/parser/ty.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/433b1e36e19824742175de681b8579c861217207/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/433b1e36e19824742175de681b8579c861217207/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs?ref=433b1e36e19824742175de681b8579c861217207", "patch": "@@ -4,9 +4,9 @@ use crate::{maybe_whole, maybe_recover_from_interpolated_ty_qpath};\n use crate::ptr::P;\n use crate::ast::{self, Ty, TyKind, MutTy, BareFnTy, FunctionRetTy, GenericParam, Lifetime, Ident};\n use crate::ast::{TraitBoundModifier, TraitObjectSyntax, GenericBound, GenericBounds, PolyTraitRef};\n-use crate::ast::{Mutability, AnonConst, FnDecl, Mac_};\n+use crate::ast::{Mutability, AnonConst, FnDecl, Mac};\n use crate::parse::token::{self, Token};\n-use crate::source_map::{respan, Span};\n+use crate::source_map::Span;\n use crate::symbol::{kw};\n \n use rustc_target::spec::abi::Abi;\n@@ -175,13 +175,14 @@ impl<'a> Parser<'a> {\n             if self.eat(&token::Not) {\n                 // Macro invocation in type position\n                 let (delim, tts) = self.expect_delimited_token_tree()?;\n-                let node = Mac_ {\n+                let mac = Mac {\n                     path,\n                     tts,\n                     delim,\n+                    span: lo.to(self.prev_span),\n                     prior_type_ascription: self.last_type_ascription,\n                 };\n-                TyKind::Mac(respan(lo.to(self.prev_span), node))\n+                TyKind::Mac(mac)\n             } else {\n                 // Just a type path or bound list (trait object type) starting with a trait.\n                 //   `Type`"}, {"sha": "9edc83a3594143caca13ccbe2dc2490c33f0f5e0", "filename": "src/libsyntax/parse/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/433b1e36e19824742175de681b8579c861217207/src%2Flibsyntax%2Fparse%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/433b1e36e19824742175de681b8579c861217207/src%2Flibsyntax%2Fparse%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftests.rs?ref=433b1e36e19824742175de681b8579c861217207", "patch": "@@ -273,7 +273,7 @@ fn ttdelim_span() {\n             \"foo!( fn main() { body } )\".to_string(), &sess).unwrap();\n \n         let tts: Vec<_> = match expr.node {\n-            ast::ExprKind::Mac(ref mac) => mac.node.stream().trees().collect(),\n+            ast::ExprKind::Mac(ref mac) => mac.stream().trees().collect(),\n             _ => panic!(\"not a macro\"),\n         };\n "}, {"sha": "fabbe1ede1bc67a526c200e43a166401bb678062", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/433b1e36e19824742175de681b8579c861217207/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/433b1e36e19824742175de681b8579c861217207/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=433b1e36e19824742175de681b8579c861217207", "patch": "@@ -1067,7 +1067,7 @@ impl<'a> State<'a> {\n             }\n             ast::ForeignItemKind::Macro(ref m) => {\n                 self.print_mac(m);\n-                match m.node.delim {\n+                match m.delim {\n                     MacDelimiter::Brace => {},\n                     _ => self.s.word(\";\")\n                 }\n@@ -1341,7 +1341,7 @@ impl<'a> State<'a> {\n             }\n             ast::ItemKind::Mac(ref mac) => {\n                 self.print_mac(mac);\n-                match mac.node.delim {\n+                match mac.delim {\n                     MacDelimiter::Brace => {}\n                     _ => self.s.word(\";\"),\n                 }\n@@ -1554,7 +1554,7 @@ impl<'a> State<'a> {\n             }\n             ast::TraitItemKind::Macro(ref mac) => {\n                 self.print_mac(mac);\n-                match mac.node.delim {\n+                match mac.delim {\n                     MacDelimiter::Brace => {}\n                     _ => self.s.word(\";\"),\n                 }\n@@ -1591,7 +1591,7 @@ impl<'a> State<'a> {\n             }\n             ast::ImplItemKind::Macro(ref mac) => {\n                 self.print_mac(mac);\n-                match mac.node.delim {\n+                match mac.delim {\n                     MacDelimiter::Brace => {}\n                     _ => self.s.word(\";\"),\n                 }\n@@ -1749,11 +1749,11 @@ impl<'a> State<'a> {\n \n     crate fn print_mac(&mut self, m: &ast::Mac) {\n         self.print_mac_common(\n-            Some(MacHeader::Path(&m.node.path)),\n+            Some(MacHeader::Path(&m.path)),\n             true,\n             None,\n-            m.node.delim.to_token(),\n-            m.node.stream(),\n+            m.delim.to_token(),\n+            m.stream(),\n             true,\n             m.span,\n         );"}, {"sha": "8c06bf25eb5ca9915fb7ed9d5314b2eeb653c0d0", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/433b1e36e19824742175de681b8579c861217207/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/433b1e36e19824742175de681b8579c861217207/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=433b1e36e19824742175de681b8579c861217207", "patch": "@@ -663,7 +663,7 @@ pub fn walk_stmt<'a, V: Visitor<'a>>(visitor: &mut V, statement: &'a Stmt) {\n }\n \n pub fn walk_mac<'a, V: Visitor<'a>>(visitor: &mut V, mac: &'a Mac) {\n-    visitor.visit_path(&mac.node.path, DUMMY_NODE_ID);\n+    visitor.visit_path(&mac.path, DUMMY_NODE_ID);\n }\n \n pub fn walk_anon_const<'a, V: Visitor<'a>>(visitor: &mut V, constant: &'a AnonConst) {"}, {"sha": "6301283460ac7460a333fb0bbb16c6abee796ed2", "filename": "src/libsyntax_ext/assert.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/433b1e36e19824742175de681b8579c861217207/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/433b1e36e19824742175de681b8579c861217207/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=433b1e36e19824742175de681b8579c861217207", "patch": "@@ -1,7 +1,6 @@\n use errors::{Applicability, DiagnosticBuilder};\n \n use syntax::ast::{self, *};\n-use syntax::source_map::Spanned;\n use syntax::ext::base::*;\n use syntax::parse::token::{self, TokenKind};\n use syntax::parse::parser::Parser;\n@@ -25,7 +24,7 @@ pub fn expand_assert<'cx>(\n     };\n \n     let sp = sp.apply_mark(cx.current_expansion.id);\n-    let panic_call = Mac_ {\n+    let panic_call = Mac {\n         path: Path::from_ident(Ident::new(sym::panic, sp)),\n         tts: custom_message.unwrap_or_else(|| {\n             TokenStream::from(TokenTree::token(\n@@ -37,17 +36,15 @@ pub fn expand_assert<'cx>(\n             ))\n         }).into(),\n         delim: MacDelimiter::Parenthesis,\n+        span: sp,\n         prior_type_ascription: None,\n     };\n     let if_expr = cx.expr_if(\n         sp,\n         cx.expr(sp, ExprKind::Unary(UnOp::Not, cond_expr)),\n         cx.expr(\n             sp,\n-            ExprKind::Mac(Spanned {\n-                span: sp,\n-                node: panic_call,\n-            }),\n+            ExprKind::Mac(panic_call),\n         ),\n         None,\n     );"}]}