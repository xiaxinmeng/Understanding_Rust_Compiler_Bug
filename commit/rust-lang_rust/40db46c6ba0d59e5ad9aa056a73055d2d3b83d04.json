{"sha": "40db46c6ba0d59e5ad9aa056a73055d2d3b83d04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwZGI0NmM2YmEwZDU5ZTVhZDlhYTA1NmE3MzA1NWQyZDNiODNkMDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-29T08:29:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-29T08:29:54Z"}, "message": "Auto merge of #26649 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #26593, #26644, #26645\n- Failed merges:", "tree": {"sha": "be3757177ea73f0486a9bf967d5ed2f754a30762", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be3757177ea73f0486a9bf967d5ed2f754a30762"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40db46c6ba0d59e5ad9aa056a73055d2d3b83d04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40db46c6ba0d59e5ad9aa056a73055d2d3b83d04", "html_url": "https://github.com/rust-lang/rust/commit/40db46c6ba0d59e5ad9aa056a73055d2d3b83d04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40db46c6ba0d59e5ad9aa056a73055d2d3b83d04/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a973e4cda5191040ca219fb4a4f8041e9b560301", "url": "https://api.github.com/repos/rust-lang/rust/commits/a973e4cda5191040ca219fb4a4f8041e9b560301", "html_url": "https://github.com/rust-lang/rust/commit/a973e4cda5191040ca219fb4a4f8041e9b560301"}, {"sha": "08a8ee19fb54b3f744bfd4047468c63a5147ef55", "url": "https://api.github.com/repos/rust-lang/rust/commits/08a8ee19fb54b3f744bfd4047468c63a5147ef55", "html_url": "https://github.com/rust-lang/rust/commit/08a8ee19fb54b3f744bfd4047468c63a5147ef55"}], "stats": {"total": 104, "additions": 99, "deletions": 5}, "files": [{"sha": "8968fabf1b4b37f54bcc03c6e34b75ac1980ed49", "filename": "Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40db46c6ba0d59e5ad9aa056a73055d2d3b83d04/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/40db46c6ba0d59e5ad9aa056a73055d2d3b83d04/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=40db46c6ba0d59e5ad9aa056a73055d2d3b83d04", "patch": "@@ -62,6 +62,7 @@\n #   * tidy-basic - show file / line stats\n #   * tidy-errors - show the highest rustc error code\n #   * tidy-features - show the status of language and lib features\n+#   * rustc-stage$(stage) - Only build up to a specific stage\n #\n # Then mix in some of these environment variables to harness the\n # ultimate power of The Rust Build System.\n@@ -90,7 +91,7 @@\n #\n # # Rust recipes for build system success\n #\n-#     // Modifying libstd? Use this comment to run unit tests just on your change\n+#     // Modifying libstd? Use this command to run unit tests just on your change\n #     make check-stage1-std NO_REBUILD=1 NO_BENCH=1\n #\n #     // Added a run-pass test? Use this to test running your test"}, {"sha": "4673169a7de3e81ad93bfa2be2d1f22db5ff9b67", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/40db46c6ba0d59e5ad9aa056a73055d2d3b83d04/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40db46c6ba0d59e5ad9aa056a73055d2d3b83d04/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=40db46c6ba0d59e5ad9aa056a73055d2d3b83d04", "patch": "@@ -360,6 +360,40 @@ integer type:\n http://doc.rust-lang.org/reference.html#ffi-attributes\n \"##,\n \n+E0109: r##\"\n+You tried to give a type parameter to a type which doesn't need it. Erroneous\n+code example:\n+\n+```\n+type X = u32<i32>; // error: type parameters are not allowed on this type\n+```\n+\n+Please check that you used the correct type and recheck its definition. Perhaps\n+it doesn't need the type parameter.\n+Example:\n+\n+```\n+type X = u32; // ok!\n+```\n+\"##,\n+\n+E0110: r##\"\n+You tried to give a lifetime parameter to a type which doesn't need it.\n+Erroneous code example:\n+\n+```\n+type X = u32<'static>; // error: lifetime parameters are not allowed on\n+                       //        this type\n+```\n+\n+Please check that you used the correct type and recheck its definition,\n+perhaps it doesn't need the lifetime parameter. Example:\n+\n+```\n+type X = u32; // ok!\n+```\n+\"##,\n+\n E0133: r##\"\n Using unsafe functionality, such as dereferencing raw pointers and calling\n functions via FFI or marked as unsafe, is potentially dangerous and disallowed\n@@ -1055,8 +1089,6 @@ register_diagnostics! {\n     E0017,\n     E0022,\n     E0038,\n-    E0109,\n-    E0110,\n     E0134,\n     E0135,\n     E0136,"}, {"sha": "d4977c5d3941c27dea7ad48d6f0b07740ad9bdcf", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 63, "deletions": 2, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/40db46c6ba0d59e5ad9aa056a73055d2d3b83d04/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40db46c6ba0d59e5ad9aa056a73055d2d3b83d04/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=40db46c6ba0d59e5ad9aa056a73055d2d3b83d04", "patch": "@@ -934,6 +934,51 @@ The number of supplied parameters much exactly match the number of defined type\n parameters.\n \"##,\n \n+E0088: r##\"\n+You gave too many lifetime parameters. Erroneous code example:\n+\n+```\n+fn f() {}\n+\n+fn main() {\n+    f::<'static>() // error: too many lifetime parameters provided\n+}\n+```\n+\n+Please check you give the right number of lifetime parameters. Example:\n+\n+```\n+fn f() {}\n+\n+fn main() {\n+    f() // ok!\n+}\n+```\n+\n+It's also important to note that the Rust compiler can generally\n+determine the lifetime by itself. Example:\n+\n+```\n+struct Foo {\n+    value: String\n+}\n+\n+impl Foo {\n+    // it can be written like this\n+    fn get_value<'a>(&'a self) -> &'a str { &self.value }\n+    // but the compiler works fine with this too:\n+    fn without_lifetime(&self) -> &str { &self.value }\n+}\n+\n+fn main() {\n+    let f = Foo { value: \"hello\".to_owned() };\n+\n+    println!(\"{}\", f.get_value());\n+    println!(\"{}\", f.without_lifetime());\n+}\n+```\n+\"##,\n+\n E0089: r##\"\n Not enough type parameters were supplied for a function. For example:\n \n@@ -959,6 +1004,24 @@ fn main() {\n ```\n \"##,\n \n+E0091: r##\"\n+You gave an unnecessary type parameter in a type alias. Erroneous code\n+example:\n+\n+```\n+type Foo<T> = u32; // error: type parameter `T` is unused\n+// or:\n+type Foo<A,B> = Box<A>; // error: type parameter `B` is unused\n+```\n+\n+Please check you didn't write too many type parameters. Example:\n+\n+```\n+type Foo = u32; // ok!\n+type Foo<A> = Box<A>; // ok!\n+```\n+\"##,\n+\n E0106: r##\"\n This error indicates that a lifetime is missing from a type. If it is an error\n inside a function signature, the problem may be with failing to adhere to the\n@@ -1585,9 +1648,7 @@ register_diagnostics! {\n     E0077,\n     E0085,\n     E0086,\n-    E0088,\n     E0090,\n-    E0091,\n     E0092,\n     E0093,\n     E0094,"}]}