{"sha": "d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwOGMwZjBlYzEyZDVmYjIzOGEzYTk5OTJlMmRhNGZhZGNmOWQxZDQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-08-03T08:19:36Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-08-03T08:26:41Z"}, "message": "Make ast::pat_bindings an iterator\n\nAnd use it to get rid of some repetetive code", "tree": {"sha": "521b2010c06562e08e8a0a61565a533b1c14a3e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/521b2010c06562e08e8a0a61565a533b1c14a3e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4", "html_url": "https://github.com/rust-lang/rust/commit/d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "948f8090ae66ea9207473bf97d5c0dfaee4244ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/948f8090ae66ea9207473bf97d5c0dfaee4244ed", "html_url": "https://github.com/rust-lang/rust/commit/948f8090ae66ea9207473bf97d5c0dfaee4244ed"}], "stats": {"total": 122, "additions": 48, "deletions": 74}, "files": [{"sha": "5d158afa6f1fb2ed6f23750fbefcb25f2d69d81f", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4", "patch": "@@ -310,22 +310,7 @@ fn check_alt(cx: &ctx, input: &@ast::expr, arms: &ast::arm[], sc: &scope,\n }\n \n fn arm_defnums(arm: &ast::arm) -> node_id[] {\n-    let dnums = ~[];\n-    fn walk_pat(found: &mutable node_id[], p: &@ast::pat) {\n-        alt p.node {\n-          ast::pat_bind(_) { found += ~[p.id]; }\n-          ast::pat_tag(_, children) {\n-            for child: @ast::pat  in children { walk_pat(found, child); }\n-          }\n-          ast::pat_rec(fields, _) {\n-            for f: ast::field_pat  in fields { walk_pat(found, f.pat); }\n-          }\n-          ast::pat_box(inner) { walk_pat(found, inner); }\n-          _ { }\n-        }\n-    }\n-    walk_pat(dnums, arm.pats.(0));\n-    ret dnums;\n+    ret ast::pat_binding_ids(arm.pats.(0));\n }\n \n fn check_for_each(cx: &ctx, local: &@ast::local, call: &@ast::expr,\n@@ -334,10 +319,7 @@ fn check_for_each(cx: &ctx, local: &@ast::local, call: &@ast::expr,\n     alt call.node {\n       ast::expr_call(f, args) {\n         let data = check_call(cx, f, args, sc);\n-        let bindings = ~[];\n-        for p: @ast::pat in ast::pat_bindings(local.node.pat) {\n-            bindings += ~[p.id];\n-        }\n+        let bindings = ast::pat_binding_ids(local.node.pat);\n         let new_sc = @{root_vars: data.root_vars,\n                        block_defnum: bindings.(ivec::len(bindings) - 1u),\n                        bindings: bindings,\n@@ -370,10 +352,7 @@ fn check_for(cx: &ctx, local: &@ast::local, seq: &@ast::expr, blk: &ast::blk,\n                                     util::ppaux::ty_to_str(cx.tcx, seq_t));\n       }\n     }\n-    let bindings = ~[];\n-    for p: @ast::pat in ast::pat_bindings(local.node.pat) {\n-        bindings += ~[p.id];\n-    }\n+    let bindings = ast::pat_binding_ids(local.node.pat);\n     let new_sc = @{root_vars: root_def,\n                    block_defnum: bindings.(ivec::len(bindings) - 1u),\n                    bindings: bindings,"}, {"sha": "8cd898b5813ce12f7ff938f9808eb749fd7772a1", "filename": "src/comp/middle/freevars.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffreevars.rs?ref=d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4", "patch": "@@ -69,7 +69,7 @@ fn collect_freevars(def_map: &resolve::def_map, sess: &session::session,\n         }\n     }\n     fn walk_local(e: env, local: &@ast::local) {\n-        for b: @ast::pat in ast::pat_bindings(local.node.pat) {\n+        for each b: @ast::pat in ast::pat_bindings(local.node.pat) {\n             set_add(e.decls, b.id);\n         }\n     }\n@@ -133,10 +133,7 @@ fn annotate_freevars(sess: &session::session, def_map: &resolve::def_map,\n             fn start_walk(b: &ast::blk, v: &visit::vt[()]) {\n                 v.visit_block(b, (), v);\n             }\n-            let bound = ~[];\n-            for b: @ast::pat in ast::pat_bindings(local.node.pat){\n-                bound += ~[b.id];\n-            }\n+            let bound = ast::pat_binding_ids(local.node.pat);\n             let vars =\n                 collect_freevars(e.def_map, e.sess, bind start_walk(body, _),\n                                  bound);"}, {"sha": "5aa955e7c44f05fec9d7bae1dc562c896e9151fe", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4", "patch": "@@ -1241,16 +1241,9 @@ fn check_item(e: &@env, i: &@ast::item, x: &(), v: &vt[()]) {\n }\n \n fn check_pat(ch: checker, p: &@ast::pat) {\n-    alt p.node {\n-      ast::pat_bind(name) { add_name(ch, p.span, name); }\n-      ast::pat_tag(_, children) {\n-        for child: @ast::pat in children { check_pat(ch, child); }\n-      }\n-      ast::pat_rec(fields, _) {\n-        for f: ast::field_pat  in fields { check_pat(ch, f.pat); }\n-      }\n-      ast::pat_box(inner) { check_pat(ch, inner); }\n-      _ { }\n+    for each p in ast::pat_bindings(p) {\n+        let ident = alt p.node { pat_bind(n) { n } };\n+        add_name(ch, p.span, ident);\n     }\n }\n "}, {"sha": "705a2dc534c678003a79c7aea3209240e5d657ec", "filename": "src/comp/middle/tstate/annotate.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs?ref=d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4", "patch": "@@ -44,9 +44,7 @@ fn collect_ids_stmt(s: &@stmt, rs: @mutable node_id[]) {\n }\n \n fn collect_ids_local(l: &@local, rs: @mutable node_id[]) {\n-    for p: @pat in pat_bindings(l.node.pat) {\n-        *rs += ~[p.id];\n-    }\n+    *rs += pat_binding_ids(l.node.pat);\n }\n \n fn node_ids_in_fn(f: &_fn, tps: &ty_param[], sp: &span, i: &fn_ident,"}, {"sha": "2b08dde75c6dcd7bafafc86bf4e89fdac743fe4c", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4", "patch": "@@ -1081,7 +1081,7 @@ type binding = {lhs: inst[], rhs: option::t[initializer]};\n \n fn local_to_bindings(loc : &@local) -> binding {\n     let lhs = ~[];\n-    for p: @pat in pat_bindings(loc.node.pat) {\n+    for each p: @pat in pat_bindings(loc.node.pat) {\n         let ident = alt p.node { pat_bind(name) { name } };\n         lhs += ~[{ident: ident, node: p.id}];\n     }"}, {"sha": "c420bc0151cfd892d995fc5ef4c340de9950d6b5", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4", "patch": "@@ -14,7 +14,7 @@ import syntax::ast::respan;\n type ctxt = {cs: @mutable sp_constr[], tcx: ty::ctxt};\n \n fn collect_local(loc: &@local, cx: &ctxt, v: &visit::vt[ctxt]) {\n-    for p: @pat in pat_bindings(loc.node.pat) {\n+    for each p: @pat in pat_bindings(loc.node.pat) {\n         let ident = alt p.node { pat_bind(id) { id } };\n         log \"collect_local: pushing \" + ident;\n         *cx.cs += ~[respan(loc.span, ninit(p.id, ident))];"}, {"sha": "473e1cfbf2bdd5d0e6d06681fa853f734a521b09", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4", "patch": "@@ -136,7 +136,7 @@ fn find_pre_post_loop(fcx: &fn_ctxt, l: &@local, index: &@expr, body: &blk,\n                       id: node_id) {\n     find_pre_post_expr(fcx, index);\n     find_pre_post_block(fcx, body);\n-    for p: @pat in pat_bindings(l.node.pat) {\n+    for each p: @pat in pat_bindings(l.node.pat) {\n         let ident = alt p.node { pat_bind(id) { id } };\n         let v_init = ninit(p.id, ident);\n         relax_precond_block(fcx, bit_num(fcx, v_init) as node_id, body);\n@@ -578,45 +578,46 @@ fn find_pre_post_stmt(fcx: &fn_ctxt, s: &stmt) {\n         alt adecl.node {\n           decl_local(alocals) {\n             for alocal: @local  in alocals {\n-                let bindings = pat_bindings(alocal.node.pat);\n                 alt alocal.node.init {\n                   some(an_init) {\n                     /* LHS always becomes initialized,\n                      whether or not this is a move */\n                     find_pre_post_expr(fcx, an_init.expr);\n-                    for p: @pat in bindings {\n+                    for each p: @pat in pat_bindings(alocal.node.pat) {\n                         copy_pre_post(fcx.ccx, p.id, an_init.expr);\n                     }\n                     /* Inherit ann from initializer, and add var being\n                        initialized to the postcondition */\n                     copy_pre_post(fcx.ccx, id, an_init.expr);\n \n+                    let p = none;\n                     alt an_init.expr.node {\n-                      expr_path(p) {\n-                        for pat: @pat in bindings {\n-                            let ident = alt pat.node { pat_bind(n) { n } };\n+                      expr_path(_p) { p = some(_p); }\n+                      _ { }\n+                    }\n+\n+                    for each pat: @pat in pat_bindings(alocal.node.pat) {\n+                        let ident = alt pat.node { pat_bind(n) { n } };\n+                        alt p {\n+                          some(p) {\n                             copy_in_postcond(fcx, id,\n                                              {ident: ident, node: pat.id},\n                                              {ident:\n                                               path_to_ident(fcx.ccx.tcx, p),\n                                               node: an_init.expr.id},\n                                              op_to_oper_ty(an_init.op));\n+                          }\n+                          none. {}\n                         }\n-                      }\n-                      _ { }\n-                    }\n-\n-                    for p: @pat in bindings {\n-                      let ident = alt p.node { pat_bind(name) { name } };\n-                      gen(fcx, id, ninit(p.id, ident));\n+                        gen(fcx, id, ninit(pat.id, ident));\n                     }\n \n                     if an_init.op == init_move && is_path(an_init.expr) {\n                         forget_in_postcond(fcx, id, an_init.expr.id);\n                     }\n                   }\n                   none. {\n-                    for p: @pat in bindings {\n+                    for each p: @pat in pat_bindings(alocal.node.pat) {\n                         clear_pp(node_id_to_ts_ann(fcx.ccx, p.id).conditions);\n                     }\n                     clear_pp(node_id_to_ts_ann(fcx.ccx, id).conditions);"}, {"sha": "a78522fcf3de16aac764a5573d9d77c60aa6346b", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4", "patch": "@@ -195,7 +195,7 @@ fn find_pre_post_state_loop(fcx: &fn_ctxt, pres: prestate, l: &@local,\n     // Make sure the index vars are considered initialized\n     // in the body\n     let index_post = tritv_clone(expr_poststate(fcx.ccx, index));\n-    for p: @pat in pat_bindings(l.node.pat) {\n+    for each p: @pat in pat_bindings(l.node.pat) {\n         let ident = alt p.node { pat_bind(name) { name } };\n         set_in_poststate_ident(fcx, p.id, ident, index_post);\n     }"}, {"sha": "ff8e6c0893c1ae869274c6dfa1334920a513ddda", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=d08c0f0ec12d5fb238a3a9992e2da4fadcf9d1d4", "patch": "@@ -154,23 +154,29 @@ fn pat_id_map(pat: &@pat) -> pat_id_map {\n     ret map;\n }\n \n-// FIXME This wanted to be an iter, but bug #791 got in the way.\n-fn pat_bindings(pat: &@pat) -> (@pat)[] {\n-    let found = ~[];\n-    fn recur(found: &mutable (@pat)[], pat: &@pat) {\n-        alt pat.node {\n-          pat_bind(_) { found += ~[pat]; }\n-          pat_tag(_, sub) {\n-            for p in sub { recur(found, p); }\n-          }\n-          pat_rec(fields, _) {\n-            for f: field_pat in fields { recur(found, f.pat); }\n-          }\n-          pat_box(sub) { recur(found, sub); }\n-          pat_wild. | pat_lit(_) {}\n+iter pat_bindings(pat: &@pat) -> @pat {\n+    alt pat.node {\n+      pat_bind(_) { put pat; }\n+      pat_tag(_, sub) {\n+        for p in sub {\n+            for each b in pat_bindings(p) { put b; }\n+        }\n+      }\n+      pat_rec(fields, _) {\n+        for f in fields {\n+            for each b in pat_bindings(f.pat) { put b; }\n         }\n+      }\n+      pat_box(sub) {\n+        for each b in pat_bindings(sub) { put b; }\n+      }\n+      pat_wild. | pat_lit(_) {}\n     }\n-    recur(found, pat);\n+}\n+\n+fn pat_binding_ids(pat: &@pat) -> node_id[] {\n+    let found = ~[];\n+    for each b in pat_bindings(pat) { found += ~[b.id]; }\n     ret found;\n }\n "}]}