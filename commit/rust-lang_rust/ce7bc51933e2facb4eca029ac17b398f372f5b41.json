{"sha": "ce7bc51933e2facb4eca029ac17b398f372f5b41", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlN2JjNTE5MzNlMmZhY2I0ZWNhMDI5YWMxN2IzOThmMzcyZjViNDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-16T10:09:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-16T10:09:36Z"}, "message": "Auto merge of #30300 - sanxiyn:syntax-ext, r=nikomatsakis\n\nThis reduces iteration time (`make rustc-stage1`) for moved syntax extensions from 11 minutes to 3 minutes on my machine.\n\nBecause of the signature change, this is a [breaking-change] for people directly calling `expand_crate`. I think it is rare: from GitHub search, only case I found is [glassful](https://github.com/kmcallister/glassful).", "tree": {"sha": "84695672384f43235514ea531a92c793122c3837", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84695672384f43235514ea531a92c793122c3837"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce7bc51933e2facb4eca029ac17b398f372f5b41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce7bc51933e2facb4eca029ac17b398f372f5b41", "html_url": "https://github.com/rust-lang/rust/commit/ce7bc51933e2facb4eca029ac17b398f372f5b41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce7bc51933e2facb4eca029ac17b398f372f5b41/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac2c5ff0241bdd090af11a74566bd00f03ae8ae0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac2c5ff0241bdd090af11a74566bd00f03ae8ae0", "html_url": "https://github.com/rust-lang/rust/commit/ac2c5ff0241bdd090af11a74566bd00f03ae8ae0"}, {"sha": "0883f10550299af021bbdec95b98693b395153b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0883f10550299af021bbdec95b98693b395153b6", "html_url": "https://github.com/rust-lang/rust/commit/0883f10550299af021bbdec95b98693b395153b6"}], "stats": {"total": 666, "additions": 337, "deletions": 329}, "files": [{"sha": "2b66baed45b9487a80af3d5e576ab9b3b9e17075", "filename": "mk/crates.mk", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -58,7 +58,7 @@ RUSTC_CRATES := rustc rustc_typeck rustc_mir rustc_borrowck rustc_resolve rustc_\n                 rustc_trans rustc_back rustc_llvm rustc_privacy rustc_lint \\\n                 rustc_data_structures rustc_front rustc_platform_intrinsics \\\n                 rustc_plugin rustc_metadata\n-HOST_CRATES := syntax $(RUSTC_CRATES) rustdoc fmt_macros\n+HOST_CRATES := syntax syntax_ext $(RUSTC_CRATES) rustdoc fmt_macros\n TOOLS := compiletest rustdoc rustc rustbook error-index-generator\n \n DEPS_core :=\n@@ -86,17 +86,18 @@ DEPS_serialize := std log\n DEPS_term := std log\n DEPS_test := std getopts serialize rbml term native:rust_test_helpers\n \n-DEPS_syntax := std term serialize log fmt_macros arena libc rustc_bitflags\n+DEPS_syntax := std term serialize log arena libc rustc_bitflags\n+DEPS_syntax_ext := syntax fmt_macros\n \n-DEPS_rustc := syntax flate arena serialize getopts rbml rustc_front\\\n+DEPS_rustc := syntax fmt_macros flate arena serialize getopts rbml rustc_front\\\n               log graphviz rustc_llvm rustc_back rustc_data_structures\n DEPS_rustc_back := std syntax rustc_llvm rustc_front flate log libc\n DEPS_rustc_borrowck := rustc rustc_front log graphviz syntax\n DEPS_rustc_data_structures := std log serialize\n DEPS_rustc_driver := arena flate getopts graphviz libc rustc rustc_back rustc_borrowck \\\n                      rustc_typeck rustc_mir rustc_resolve log syntax serialize rustc_llvm \\\n \t             rustc_trans rustc_privacy rustc_lint rustc_front rustc_plugin \\\n-                     rustc_metadata\n+                     rustc_metadata syntax_ext\n DEPS_rustc_front := std syntax log serialize\n DEPS_rustc_lint := rustc log syntax\n DEPS_rustc_llvm := native:rustllvm libc std rustc_bitflags"}, {"sha": "5f2548a550467c6e77fe4636aed92bac369375e9", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -54,6 +54,7 @@ use syntax::parse::token;\n use syntax::util::node_count::NodeCounter;\n use syntax::visit;\n use syntax;\n+use syntax_ext;\n \n pub fn compile_input(sess: Session,\n                      cstore: &CStore,\n@@ -563,12 +564,15 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n             recursion_limit: sess.recursion_limit.get(),\n             trace_mac: sess.opts.debugging_opts.trace_macros,\n         };\n-        let (ret, macro_names) = syntax::ext::expand::expand_crate(&sess.parse_sess,\n-                                                                    cfg,\n-                                                                    macros,\n-                                                                    syntax_exts,\n-                                                                    &mut feature_gated_cfgs,\n-                                                                    krate);\n+        let mut ecx = syntax::ext::base::ExtCtxt::new(&sess.parse_sess,\n+                                                      krate.config.clone(),\n+                                                      cfg,\n+                                                      &mut feature_gated_cfgs);\n+        syntax_ext::register_builtins(&mut ecx.syntax_env);\n+        let (ret, macro_names) = syntax::ext::expand::expand_crate(ecx,\n+                                                                   macros,\n+                                                                   syntax_exts,\n+                                                                   krate);\n         if cfg!(windows) {\n             env::set_var(\"PATH\", &_old_path);\n         }"}, {"sha": "fcbcdbacd33cb7e753ded519fb3c7b1e0639e6f9", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -57,6 +57,7 @@ extern crate rustc_llvm as llvm;\n extern crate log;\n #[macro_use]\n extern crate syntax;\n+extern crate syntax_ext;\n \n pub use syntax::diagnostic;\n "}, {"sha": "9d62e407cb9135ae445bbe9a676250092c07e6d1", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -464,26 +464,6 @@ fn initial_syntax_expander_table<'feat>(ecfg: &expand::ExpansionConfig<'feat>)\n \n     let mut syntax_expanders = SyntaxEnv::new();\n     syntax_expanders.insert(intern(\"macro_rules\"), MacroRulesTT);\n-    syntax_expanders.insert(intern(\"format_args\"),\n-                            // format_args uses `unstable` things internally.\n-                            NormalTT(Box::new(ext::format::expand_format_args), None, true));\n-    syntax_expanders.insert(intern(\"env\"),\n-                            builtin_normal_expander(\n-                                    ext::env::expand_env));\n-    syntax_expanders.insert(intern(\"option_env\"),\n-                            builtin_normal_expander(\n-                                    ext::env::expand_option_env));\n-    syntax_expanders.insert(intern(\"concat_idents\"),\n-                            builtin_normal_expander(\n-                                    ext::concat_idents::expand_syntax_ext));\n-    syntax_expanders.insert(intern(\"concat\"),\n-                            builtin_normal_expander(\n-                                    ext::concat::expand_syntax_ext));\n-    syntax_expanders.insert(intern(\"log_syntax\"),\n-                            builtin_normal_expander(\n-                                    ext::log_syntax::expand_syntax_ext));\n-\n-    ext::deriving::register_all(&mut syntax_expanders);\n \n     if ecfg.enable_quotes() {\n         // Quasi-quoting expanders\n@@ -552,15 +532,6 @@ fn initial_syntax_expander_table<'feat>(ecfg: &expand::ExpansionConfig<'feat>)\n     syntax_expanders.insert(intern(\"module_path\"),\n                             builtin_normal_expander(\n                                     ext::source_util::expand_mod));\n-    syntax_expanders.insert(intern(\"asm\"),\n-                            builtin_normal_expander(\n-                                    ext::asm::expand_asm));\n-    syntax_expanders.insert(intern(\"cfg\"),\n-                            builtin_normal_expander(\n-                                    ext::cfg::expand_cfg));\n-    syntax_expanders.insert(intern(\"trace_macros\"),\n-                            builtin_normal_expander(\n-                                    ext::trace_macros::expand_trace_macros));\n     syntax_expanders\n }\n "}, {"sha": "b1afe2bb69c024d4095ac4efb88be1598919926d", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -21,7 +21,7 @@ use attr::{AttrMetaMethods, WithAttrs};\n use codemap;\n use codemap::{Span, Spanned, ExpnInfo, NameAndSpan, MacroBang, MacroAttribute};\n use ext::base::*;\n-use feature_gate::{self, Features, GatedCfgAttr};\n+use feature_gate::{self, Features};\n use fold;\n use fold::*;\n use util::move_map::MoveMap;\n@@ -1276,15 +1276,11 @@ impl<'feat> ExpansionConfig<'feat> {\n     }\n }\n \n-pub fn expand_crate<'feat>(parse_sess: &parse::ParseSess,\n-                           cfg: ExpansionConfig<'feat>,\n-                           // these are the macros being imported to this crate:\n-                           imported_macros: Vec<ast::MacroDef>,\n-                           user_exts: Vec<NamedSyntaxExtension>,\n-                           feature_gated_cfgs: &mut Vec<GatedCfgAttr>,\n-                           c: Crate) -> (Crate, HashSet<Name>) {\n-    let mut cx = ExtCtxt::new(parse_sess, c.config.clone(), cfg,\n-                              feature_gated_cfgs);\n+pub fn expand_crate(mut cx: ExtCtxt,\n+                    // these are the macros being imported to this crate:\n+                    imported_macros: Vec<ast::MacroDef>,\n+                    user_exts: Vec<NamedSyntaxExtension>,\n+                    c: Crate) -> (Crate, HashSet<Name>) {\n     if std_inject::no_core(&c) {\n         cx.crate_root = None;\n     } else if std_inject::no_std(&c) {\n@@ -1305,7 +1301,7 @@ pub fn expand_crate<'feat>(parse_sess: &parse::ParseSess,\n \n         let mut ret = expander.fold_crate(c);\n         ret.exported_macros = expander.cx.exported_macros.clone();\n-        parse_sess.span_diagnostic.handler().abort_if_errors();\n+        cx.parse_sess.span_diagnostic.handler().abort_if_errors();\n         ret\n     };\n     return (ret, cx.syntax_env.names);\n@@ -1401,6 +1397,7 @@ mod tests {\n     use ast;\n     use ast::Name;\n     use codemap;\n+    use ext::base::ExtCtxt;\n     use ext::mtwt;\n     use fold::Folder;\n     use parse;\n@@ -1471,7 +1468,9 @@ mod tests {\n             src,\n             Vec::new(), &sess);\n         // should fail:\n-        expand_crate(&sess,test_ecfg(),vec!(),vec!(), &mut vec![], crate_ast);\n+        let mut gated_cfgs = vec![];\n+        let ecx = ExtCtxt::new(&sess, vec![], test_ecfg(), &mut gated_cfgs);\n+        expand_crate(ecx, vec![], vec![], crate_ast);\n     }\n \n     // make sure that macros can't escape modules\n@@ -1484,7 +1483,9 @@ mod tests {\n             \"<test>\".to_string(),\n             src,\n             Vec::new(), &sess);\n-        expand_crate(&sess,test_ecfg(),vec!(),vec!(), &mut vec![], crate_ast);\n+        let mut gated_cfgs = vec![];\n+        let ecx = ExtCtxt::new(&sess, vec![], test_ecfg(), &mut gated_cfgs);\n+        expand_crate(ecx, vec![], vec![], crate_ast);\n     }\n \n     // macro_use modules should allow macros to escape\n@@ -1496,14 +1497,18 @@ mod tests {\n             \"<test>\".to_string(),\n             src,\n             Vec::new(), &sess);\n-        expand_crate(&sess, test_ecfg(), vec!(), vec!(), &mut vec![], crate_ast);\n+        let mut gated_cfgs = vec![];\n+        let ecx = ExtCtxt::new(&sess, vec![], test_ecfg(), &mut gated_cfgs);\n+        expand_crate(ecx, vec![], vec![], crate_ast);\n     }\n \n     fn expand_crate_str(crate_str: String) -> ast::Crate {\n         let ps = parse::ParseSess::new();\n         let crate_ast = panictry!(string_to_parser(&ps, crate_str).parse_crate_mod());\n         // the cfg argument actually does matter, here...\n-        expand_crate(&ps,test_ecfg(),vec!(),vec!(), &mut vec![], crate_ast).0\n+        let mut gated_cfgs = vec![];\n+        let ecx = ExtCtxt::new(&ps, vec![], test_ecfg(), &mut gated_cfgs);\n+        expand_crate(ecx, vec![], vec![], crate_ast).0\n     }\n \n     // find the pat_ident paths in a crate"}, {"sha": "73d7025b4f155da5c197e14107c9021f541fa76d", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -37,7 +37,6 @@\n #![feature(str_escape)]\n #![feature(unicode)]\n \n-extern crate fmt_macros;\n extern crate serialize;\n extern crate term;\n extern crate libc;\n@@ -110,21 +109,12 @@ pub mod print {\n }\n \n pub mod ext {\n-    pub mod asm;\n     pub mod base;\n     pub mod build;\n-    pub mod cfg;\n-    pub mod concat;\n-    pub mod concat_idents;\n-    pub mod deriving;\n-    pub mod env;\n     pub mod expand;\n-    pub mod format;\n-    pub mod log_syntax;\n     pub mod mtwt;\n     pub mod quote;\n     pub mod source_util;\n-    pub mod trace_macros;\n \n     pub mod tt {\n         pub mod transcribe;"}, {"sha": "072be5712219aac3b4bea6a8d698aaf850449402", "filename": "src/libsyntax_ext/asm.rs", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -13,15 +13,15 @@\n  */\n use self::State::*;\n \n-use ast;\n-use codemap;\n-use codemap::Span;\n-use ext::base;\n-use ext::base::*;\n-use feature_gate;\n-use parse::token::{intern, InternedString};\n-use parse::token;\n-use ptr::P;\n+use syntax::ast;\n+use syntax::codemap;\n+use syntax::codemap::Span;\n+use syntax::ext::base;\n+use syntax::ext::base::*;\n+use syntax::feature_gate;\n+use syntax::parse::token::{intern, InternedString};\n+use syntax::parse::token;\n+use syntax::ptr::P;\n use syntax::ast::AsmDialect;\n \n enum State {", "previous_filename": "src/libsyntax/ext/asm.rs"}, {"sha": "1e1bf5388765f8d1d1297026683db44020e182cc", "filename": "src/libsyntax_ext/cfg.rs", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcfg.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -12,15 +12,15 @@\n /// a literal `true` or `false` based on whether the given cfg matches the\n /// current compilation environment.\n \n-use ast;\n-use codemap::Span;\n-use ext::base::*;\n-use ext::base;\n-use ext::build::AstBuilder;\n-use attr;\n-use attr::*;\n-use parse::token;\n-use config::CfgDiagReal;\n+use syntax::ast;\n+use syntax::codemap::Span;\n+use syntax::ext::base::*;\n+use syntax::ext::base;\n+use syntax::ext::build::AstBuilder;\n+use syntax::attr;\n+use syntax::attr::*;\n+use syntax::parse::token;\n+use syntax::config::CfgDiagReal;\n \n pub fn expand_cfg<'cx>(cx: &mut ExtCtxt,\n                        sp: Span,", "previous_filename": "src/libsyntax/ext/cfg.rs"}, {"sha": "de913fe043139d89883b3cb3a578c70d22e54e45", "filename": "src/libsyntax_ext/concat.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast;\n-use codemap;\n-use ext::base;\n-use ext::build::AstBuilder;\n-use parse::token;\n+use syntax::ast;\n+use syntax::codemap;\n+use syntax::ext::base;\n+use syntax::ext::build::AstBuilder;\n+use syntax::parse::token;\n \n use std::string::String;\n ", "previous_filename": "src/libsyntax/ext/concat.rs"}, {"sha": "9702b24ffd417c0fb8288e62856c276de615b151", "filename": "src/libsyntax_ext/concat_idents.rs", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat_idents.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast::{self, TokenTree};\n-use codemap::Span;\n-use ext::base::*;\n-use ext::base;\n-use feature_gate;\n-use parse::token;\n-use parse::token::str_to_ident;\n-use ptr::P;\n+use syntax::ast::{self, TokenTree};\n+use syntax::codemap::Span;\n+use syntax::ext::base::*;\n+use syntax::ext::base;\n+use syntax::feature_gate;\n+use syntax::parse::token;\n+use syntax::parse::token::str_to_ident;\n+use syntax::ptr::P;\n \n pub fn expand_syntax_ext<'cx>(cx: &mut ExtCtxt, sp: Span, tts: &[TokenTree])\n                               -> Box<base::MacResult+'cx> {", "previous_filename": "src/libsyntax/ext/concat_idents.rs"}, {"sha": "9bc0e08811071c42ed5aaa26e982ecaad9eea236", "filename": "src/libsyntax_ext/deriving/bounds.rs", "status": "renamed", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fbounds.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -8,11 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast::MetaItem;\n-use codemap::Span;\n-use ext::base::{ExtCtxt, Annotatable};\n-use ext::deriving::generic::*;\n-use ext::deriving::generic::ty::*;\n+use deriving::generic::*;\n+use deriving::generic::ty::*;\n+\n+use syntax::ast::MetaItem;\n+use syntax::codemap::Span;\n+use syntax::ext::base::{ExtCtxt, Annotatable};\n \n pub fn expand_deriving_unsafe_bound(cx: &mut ExtCtxt,\n                                     span: Span,", "previous_filename": "src/libsyntax/ext/deriving/bounds.rs"}, {"sha": "1825c3d347eeba61caac01f21e9ce46f49dc5db2", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "renamed", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -8,14 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast::{MetaItem, Expr};\n-use codemap::Span;\n-use ext::base::{ExtCtxt, Annotatable};\n-use ext::build::AstBuilder;\n-use ext::deriving::generic::*;\n-use ext::deriving::generic::ty::*;\n-use parse::token::InternedString;\n-use ptr::P;\n+use deriving::generic::*;\n+use deriving::generic::ty::*;\n+\n+use syntax::ast::{MetaItem, Expr};\n+use syntax::codemap::Span;\n+use syntax::ext::base::{ExtCtxt, Annotatable};\n+use syntax::ext::build::AstBuilder;\n+use syntax::parse::token::InternedString;\n+use syntax::ptr::P;\n \n pub fn expand_deriving_clone(cx: &mut ExtCtxt,\n                              span: Span,", "previous_filename": "src/libsyntax/ext/deriving/clone.rs"}, {"sha": "1b855c56a48bfe21c76c85427a1dfd32b2f0a234", "filename": "src/libsyntax_ext/deriving/cmp/eq.rs", "status": "renamed", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -8,14 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast::{MetaItem, Expr};\n-use codemap::Span;\n-use ext::base::{ExtCtxt, Annotatable};\n-use ext::build::AstBuilder;\n-use ext::deriving::generic::*;\n-use ext::deriving::generic::ty::*;\n-use parse::token::InternedString;\n-use ptr::P;\n+use deriving::generic::*;\n+use deriving::generic::ty::*;\n+\n+use syntax::ast::{MetaItem, Expr};\n+use syntax::codemap::Span;\n+use syntax::ext::base::{ExtCtxt, Annotatable};\n+use syntax::ext::build::AstBuilder;\n+use syntax::parse::token::InternedString;\n+use syntax::ptr::P;\n \n pub fn expand_deriving_eq(cx: &mut ExtCtxt,\n                           span: Span,", "previous_filename": "src/libsyntax/ext/deriving/cmp/eq.rs"}, {"sha": "95a5d184d0e6cd96016ae929504c1183c8dc6889", "filename": "src/libsyntax_ext/deriving/cmp/ord.rs", "status": "renamed", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -8,15 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast;\n-use ast::{MetaItem, Expr};\n-use codemap::Span;\n-use ext::base::{ExtCtxt, Annotatable};\n-use ext::build::AstBuilder;\n-use ext::deriving::generic::*;\n-use ext::deriving::generic::ty::*;\n-use parse::token::InternedString;\n-use ptr::P;\n+use deriving::generic::*;\n+use deriving::generic::ty::*;\n+\n+use syntax::ast;\n+use syntax::ast::{MetaItem, Expr};\n+use syntax::codemap::Span;\n+use syntax::ext::base::{ExtCtxt, Annotatable};\n+use syntax::ext::build::AstBuilder;\n+use syntax::parse::token::InternedString;\n+use syntax::ptr::P;\n \n pub fn expand_deriving_ord(cx: &mut ExtCtxt,\n                            span: Span,", "previous_filename": "src/libsyntax/ext/deriving/cmp/ord.rs"}, {"sha": "29be5a7ddc3a176ebf40b90e6637bc1242008ea7", "filename": "src/libsyntax_ext/deriving/cmp/partial_eq.rs", "status": "renamed", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -8,14 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast::{MetaItem, Expr, self};\n-use codemap::Span;\n-use ext::base::{ExtCtxt, Annotatable};\n-use ext::build::AstBuilder;\n-use ext::deriving::generic::*;\n-use ext::deriving::generic::ty::*;\n-use parse::token::InternedString;\n-use ptr::P;\n+use deriving::generic::*;\n+use deriving::generic::ty::*;\n+\n+use syntax::ast::{MetaItem, Expr, self};\n+use syntax::codemap::Span;\n+use syntax::ext::base::{ExtCtxt, Annotatable};\n+use syntax::ext::build::AstBuilder;\n+use syntax::parse::token::InternedString;\n+use syntax::ptr::P;\n \n pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt,\n                                   span: Span,", "previous_filename": "src/libsyntax/ext/deriving/cmp/partial_eq.rs"}, {"sha": "bd825e5c8df0e24c58abbd285523d32ce09ecd0c", "filename": "src/libsyntax_ext/deriving/cmp/partial_ord.rs", "status": "renamed", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -10,15 +10,16 @@\n \n pub use self::OrderingOp::*;\n \n-use ast;\n-use ast::{MetaItem, Expr};\n-use codemap::Span;\n-use ext::base::{ExtCtxt, Annotatable};\n-use ext::build::AstBuilder;\n-use ext::deriving::generic::*;\n-use ext::deriving::generic::ty::*;\n-use parse::token::InternedString;\n-use ptr::P;\n+use deriving::generic::*;\n+use deriving::generic::ty::*;\n+\n+use syntax::ast;\n+use syntax::ast::{MetaItem, Expr};\n+use syntax::codemap::Span;\n+use syntax::ext::base::{ExtCtxt, Annotatable};\n+use syntax::ext::build::AstBuilder;\n+use syntax::parse::token::InternedString;\n+use syntax::ptr::P;\n \n pub fn expand_deriving_partial_ord(cx: &mut ExtCtxt,\n                                    span: Span,", "previous_filename": "src/libsyntax/ext/deriving/cmp/partial_ord.rs"}, {"sha": "ed3f764c1d2aa46328cd990f4898fdc0523ba0f8", "filename": "src/libsyntax_ext/deriving/debug.rs", "status": "renamed", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -8,15 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast;\n-use ast::{MetaItem, Expr};\n-use codemap::{Span, respan};\n-use ext::base::{ExtCtxt, Annotatable};\n-use ext::build::AstBuilder;\n-use ext::deriving::generic::*;\n-use ext::deriving::generic::ty::*;\n-use parse::token;\n-use ptr::P;\n+use deriving::generic::*;\n+use deriving::generic::ty::*;\n+\n+use syntax::ast;\n+use syntax::ast::{MetaItem, Expr};\n+use syntax::codemap::{Span, respan};\n+use syntax::ext::base::{ExtCtxt, Annotatable};\n+use syntax::ext::build::AstBuilder;\n+use syntax::parse::token;\n+use syntax::ptr::P;\n \n pub fn expand_deriving_debug(cx: &mut ExtCtxt,\n                             span: Span,", "previous_filename": "src/libsyntax/ext/deriving/debug.rs"}, {"sha": "4ea4f04623a0139a806f70a10d4553ce131d85a3", "filename": "src/libsyntax_ext/deriving/decodable.rs", "status": "renamed", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -10,16 +10,17 @@\n \n //! The compiler code necessary for `#[derive(Decodable)]`. See encodable.rs for more.\n \n-use ast;\n-use ast::{MetaItem, Expr, MutMutable};\n-use codemap::Span;\n-use ext::base::{ExtCtxt, Annotatable};\n-use ext::build::AstBuilder;\n-use ext::deriving::generic::*;\n-use ext::deriving::generic::ty::*;\n-use parse::token::InternedString;\n-use parse::token;\n-use ptr::P;\n+use deriving::generic::*;\n+use deriving::generic::ty::*;\n+\n+use syntax::ast;\n+use syntax::ast::{MetaItem, Expr, MutMutable};\n+use syntax::codemap::Span;\n+use syntax::ext::base::{ExtCtxt, Annotatable};\n+use syntax::ext::build::AstBuilder;\n+use syntax::parse::token::InternedString;\n+use syntax::parse::token;\n+use syntax::ptr::P;\n \n pub fn expand_deriving_rustc_decodable(cx: &mut ExtCtxt,\n                                        span: Span,", "previous_filename": "src/libsyntax/ext/deriving/decodable.rs"}, {"sha": "bee63a98c252f9f696596abe6434cc4a015be7d5", "filename": "src/libsyntax_ext/deriving/default.rs", "status": "renamed", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -8,14 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast::{MetaItem, Expr};\n-use codemap::Span;\n-use ext::base::{ExtCtxt, Annotatable};\n-use ext::build::AstBuilder;\n-use ext::deriving::generic::*;\n-use ext::deriving::generic::ty::*;\n-use parse::token::InternedString;\n-use ptr::P;\n+use deriving::generic::*;\n+use deriving::generic::ty::*;\n+\n+use syntax::ast::{MetaItem, Expr};\n+use syntax::codemap::Span;\n+use syntax::ext::base::{ExtCtxt, Annotatable};\n+use syntax::ext::build::AstBuilder;\n+use syntax::parse::token::InternedString;\n+use syntax::ptr::P;\n \n pub fn expand_deriving_default(cx: &mut ExtCtxt,\n                                span: Span,", "previous_filename": "src/libsyntax/ext/deriving/default.rs"}, {"sha": "02747d38c00434c75aa2701a1a0ec9fa7b207e9e", "filename": "src/libsyntax_ext/deriving/encodable.rs", "status": "renamed", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -88,14 +88,15 @@\n //! }\n //! ```\n \n-use ast::{MetaItem, Expr, ExprRet, MutMutable};\n-use codemap::Span;\n-use ext::base::{ExtCtxt,Annotatable};\n-use ext::build::AstBuilder;\n-use ext::deriving::generic::*;\n-use ext::deriving::generic::ty::*;\n-use parse::token;\n-use ptr::P;\n+use deriving::generic::*;\n+use deriving::generic::ty::*;\n+\n+use syntax::ast::{MetaItem, Expr, ExprRet, MutMutable};\n+use syntax::codemap::Span;\n+use syntax::ext::base::{ExtCtxt,Annotatable};\n+use syntax::ext::build::AstBuilder;\n+use syntax::parse::token;\n+use syntax::ptr::P;\n \n pub fn expand_deriving_rustc_encodable(cx: &mut ExtCtxt,\n                                        span: Span,", "previous_filename": "src/libsyntax/ext/deriving/encodable.rs"}, {"sha": "5977144dae708b402011020338cb0b91b9691209", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "renamed", "additions": 18, "deletions": 88, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -192,23 +192,23 @@ use std::cell::RefCell;\n use std::collections::HashSet;\n use std::vec;\n \n-use abi::Abi;\n-use abi;\n-use ast;\n-use ast::{EnumDef, Expr, Ident, Generics, VariantData};\n-use ast_util;\n-use attr;\n-use attr::AttrMetaMethods;\n-use ext::base::{ExtCtxt, Annotatable};\n-use ext::build::AstBuilder;\n-use codemap::{self, DUMMY_SP};\n-use codemap::Span;\n-use diagnostic::SpanHandler;\n-use util::move_map::MoveMap;\n-use owned_slice::OwnedSlice;\n-use parse::token::{intern, InternedString};\n-use parse::token::special_idents;\n-use ptr::P;\n+use syntax::abi::Abi;\n+use syntax::abi;\n+use syntax::ast;\n+use syntax::ast::{EnumDef, Expr, Ident, Generics, VariantData};\n+use syntax::ast_util;\n+use syntax::attr;\n+use syntax::attr::AttrMetaMethods;\n+use syntax::ext::base::{ExtCtxt, Annotatable};\n+use syntax::ext::build::AstBuilder;\n+use syntax::codemap::{self, DUMMY_SP};\n+use syntax::codemap::Span;\n+use syntax::diagnostic::SpanHandler;\n+use syntax::util::move_map::MoveMap;\n+use syntax::owned_slice::OwnedSlice;\n+use syntax::parse::token::{intern, InternedString};\n+use syntax::parse::token::special_idents;\n+use syntax::ptr::P;\n \n use self::ty::{LifetimeBounds, Path, Ptr, PtrTy, Self_, Ty};\n \n@@ -347,7 +347,7 @@ pub fn combine_substructure<'a>(f: CombineSubstructureFunc<'a>)\n /// type. For a type parameter `<T>`, it looks for either a `TyPath` that\n /// is not global and starts with `T`, or a `TyQPath`.\n fn find_type_parameters(ty: &ast::Ty, ty_param_names: &[ast::Name]) -> Vec<P<ast::Ty>> {\n-    use visit;\n+    use syntax::visit;\n \n     struct Visitor<'a> {\n         ty_param_names: &'a [ast::Name],\n@@ -1632,73 +1632,3 @@ pub fn cs_same_method<F>(f: F,\n         }\n     }\n }\n-\n-/// Fold together the results of calling the derived method on all the\n-/// fields. `use_foldl` controls whether this is done left-to-right\n-/// (`true`) or right-to-left (`false`).\n-#[inline]\n-pub fn cs_same_method_fold<F>(use_foldl: bool,\n-                              mut f: F,\n-                              base: P<Expr>,\n-                              enum_nonmatch_f: EnumNonMatchCollapsedFunc,\n-                              cx: &mut ExtCtxt,\n-                              trait_span: Span,\n-                              substructure: &Substructure)\n-                              -> P<Expr> where\n-    F: FnMut(&mut ExtCtxt, Span, P<Expr>, P<Expr>) -> P<Expr>,\n-{\n-    cs_same_method(\n-        |cx, span, vals| {\n-            if use_foldl {\n-                vals.into_iter().fold(base.clone(), |old, new| {\n-                    f(cx, span, old, new)\n-                })\n-            } else {\n-                vals.into_iter().rev().fold(base.clone(), |old, new| {\n-                    f(cx, span, old, new)\n-                })\n-            }\n-        },\n-        enum_nonmatch_f,\n-        cx, trait_span, substructure)\n-}\n-\n-/// Use a given binop to combine the result of calling the derived method\n-/// on all the fields.\n-#[inline]\n-pub fn cs_binop(binop: ast::BinOp_, base: P<Expr>,\n-                enum_nonmatch_f: EnumNonMatchCollapsedFunc,\n-                cx: &mut ExtCtxt, trait_span: Span,\n-                substructure: &Substructure) -> P<Expr> {\n-    cs_same_method_fold(\n-        true, // foldl is good enough\n-        |cx, span, old, new| {\n-            cx.expr_binary(span,\n-                           binop,\n-                           old, new)\n-\n-        },\n-        base,\n-        enum_nonmatch_f,\n-        cx, trait_span, substructure)\n-}\n-\n-/// cs_binop with binop == or\n-#[inline]\n-pub fn cs_or(enum_nonmatch_f: EnumNonMatchCollapsedFunc,\n-             cx: &mut ExtCtxt, span: Span,\n-             substructure: &Substructure) -> P<Expr> {\n-    cs_binop(ast::BiOr, cx.expr_bool(span, false),\n-             enum_nonmatch_f,\n-             cx, span, substructure)\n-}\n-\n-/// cs_binop with binop == and\n-#[inline]\n-pub fn cs_and(enum_nonmatch_f: EnumNonMatchCollapsedFunc,\n-              cx: &mut ExtCtxt, span: Span,\n-              substructure: &Substructure) -> P<Expr> {\n-    cs_binop(ast::BiAnd, cx.expr_bool(span, true),\n-             enum_nonmatch_f,\n-             cx, span, substructure)\n-}", "previous_filename": "src/libsyntax/ext/deriving/generic/mod.rs"}, {"sha": "0c4a81361aef2568e3705b795d4bba9ae55149fa", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "renamed", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -14,17 +14,18 @@\n pub use self::PtrTy::*;\n pub use self::Ty::*;\n \n-use ast;\n-use ast::{Expr,Generics,Ident};\n-use ext::base::ExtCtxt;\n-use ext::build::AstBuilder;\n-use codemap::{Span,respan};\n-use owned_slice::OwnedSlice;\n-use parse::token::special_idents;\n-use ptr::P;\n+use syntax::ast;\n+use syntax::ast::{Expr,Generics,Ident};\n+use syntax::ext::base::ExtCtxt;\n+use syntax::ext::build::AstBuilder;\n+use syntax::codemap::{Span,respan};\n+use syntax::owned_slice::OwnedSlice;\n+use syntax::parse::token::special_idents;\n+use syntax::ptr::P;\n \n /// The types of pointers\n #[derive(Clone, Eq, PartialEq)]\n+#[allow(dead_code)]\n pub enum PtrTy<'a> {\n     /// &'lifetime mut\n     Borrowed(Option<&'a str>, ast::Mutability),", "previous_filename": "src/libsyntax/ext/deriving/generic/ty.rs"}, {"sha": "6bd21f7c0e0caa9d29babb64ce173647766f1125", "filename": "src/libsyntax_ext/deriving/hash.rs", "status": "renamed", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast::{MetaItem, Expr, MutMutable};\n-use codemap::Span;\n-use ext::base::{ExtCtxt, Annotatable};\n-use ext::build::AstBuilder;\n-use ext::deriving::generic::*;\n-use ext::deriving::generic::ty::*;\n-use ptr::P;\n+use deriving::generic::*;\n+use deriving::generic::ty::*;\n+\n+use syntax::ast::{MetaItem, Expr, MutMutable};\n+use syntax::codemap::Span;\n+use syntax::ext::base::{ExtCtxt, Annotatable};\n+use syntax::ext::build::AstBuilder;\n+use syntax::ptr::P;\n \n pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n                             span: Span,", "previous_filename": "src/libsyntax/ext/deriving/hash.rs"}, {"sha": "919540724ca6d0de2977398d005aa62a94aaffc4", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "renamed", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -13,13 +13,14 @@\n //! FIXME (#2810): hygiene. Search for \"__\" strings (in other files too). We also assume \"extra\" is\n //! the standard library, and \"std\" is the core library.\n \n-use ast::{MetaItem, MetaWord};\n-use attr::AttrMetaMethods;\n-use ext::base::{ExtCtxt, SyntaxEnv, MultiDecorator, MultiItemDecorator, MultiModifier, Annotatable};\n-use ext::build::AstBuilder;\n-use feature_gate;\n-use codemap::Span;\n-use parse::token::{intern, intern_and_get_ident};\n+use syntax::ast::{MetaItem, MetaWord};\n+use syntax::attr::AttrMetaMethods;\n+use syntax::ext::base::{ExtCtxt, SyntaxEnv, Annotatable};\n+use syntax::ext::base::{MultiDecorator, MultiItemDecorator, MultiModifier};\n+use syntax::ext::build::AstBuilder;\n+use syntax::feature_gate;\n+use syntax::codemap::Span;\n+use syntax::parse::token::{intern, intern_and_get_ident};\n \n macro_rules! pathvec {\n     ($($x:ident)::+) => (\n@@ -35,7 +36,7 @@ macro_rules! path {\n \n macro_rules! path_local {\n     ($x:ident) => (\n-        ::ext::deriving::generic::ty::Path::new_local(stringify!($x))\n+        ::deriving::generic::ty::Path::new_local(stringify!($x))\n     )\n }\n \n@@ -51,7 +52,7 @@ macro_rules! pathvec_std {\n \n macro_rules! path_std {\n     ($($x:tt)*) => (\n-        ::ext::deriving::generic::ty::Path::new( pathvec_std!( $($x)* ) )\n+        ::deriving::generic::ty::Path::new( pathvec_std!( $($x)* ) )\n     )\n }\n ", "previous_filename": "src/libsyntax/ext/deriving/mod.rs"}, {"sha": "121fe01976ef712a8e8415f18876ed18a80c2e88", "filename": "src/libsyntax_ext/deriving/primitive.rs", "status": "renamed", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fprimitive.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -8,15 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast::{MetaItem, Expr};\n-use ast;\n-use codemap::Span;\n-use ext::base::{ExtCtxt, Annotatable};\n-use ext::build::AstBuilder;\n-use ext::deriving::generic::*;\n-use ext::deriving::generic::ty::*;\n-use parse::token::InternedString;\n-use ptr::P;\n+use deriving::generic::*;\n+use deriving::generic::ty::*;\n+\n+use syntax::ast::{MetaItem, Expr};\n+use syntax::ast;\n+use syntax::codemap::Span;\n+use syntax::ext::base::{ExtCtxt, Annotatable};\n+use syntax::ext::build::AstBuilder;\n+use syntax::parse::token::InternedString;\n+use syntax::ptr::P;\n \n pub fn expand_deriving_from_primitive(cx: &mut ExtCtxt,\n                                       span: Span,", "previous_filename": "src/libsyntax/ext/deriving/primitive.rs"}, {"sha": "f1dd6854a3a40c01dfcbbcb1887b15c19b072c03", "filename": "src/libsyntax_ext/env.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -14,12 +14,12 @@\n  * interface.\n  */\n \n-use ast;\n-use codemap::Span;\n-use ext::base::*;\n-use ext::base;\n-use ext::build::AstBuilder;\n-use parse::token;\n+use syntax::ast;\n+use syntax::codemap::Span;\n+use syntax::ext::base::*;\n+use syntax::ext::base;\n+use syntax::ext::build::AstBuilder;\n+use syntax::parse::token;\n \n use std::env;\n ", "previous_filename": "src/libsyntax/ext/env.rs"}, {"sha": "24094f797e6c272895305c5a18213e830ca99c1e", "filename": "src/libsyntax_ext/format.rs", "status": "renamed", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -11,16 +11,17 @@\n use self::ArgumentType::*;\n use self::Position::*;\n \n-use ast;\n-use codemap::{Span, respan};\n-use ext::base::*;\n-use ext::base;\n-use ext::build::AstBuilder;\n use fmt_macros as parse;\n-use fold::Folder;\n-use parse::token::special_idents;\n-use parse::token;\n-use ptr::P;\n+\n+use syntax::ast;\n+use syntax::codemap::{Span, respan};\n+use syntax::ext::base::*;\n+use syntax::ext::base;\n+use syntax::ext::build::AstBuilder;\n+use syntax::fold::Folder;\n+use syntax::parse::token::special_idents;\n+use syntax::parse::token;\n+use syntax::ptr::P;\n \n use std::collections::HashMap;\n ", "previous_filename": "src/libsyntax/ext/format.rs"}, {"sha": "f4dd621c97ecdcb02a856531b6fe75f9bb476f76", "filename": "src/libsyntax_ext/lib.rs", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -0,0 +1,89 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Syntax extensions in the Rust compiler.\n+\n+#![crate_name = \"syntax_ext\"]\n+#![crate_type = \"dylib\"]\n+#![crate_type = \"rlib\"]\n+#![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+\n+#![cfg_attr(stage0, feature(custom_attribute))]\n+#![cfg_attr(stage0, staged_api)]\n+#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n+\n+#![feature(rustc_private)]\n+#![feature(staged_api)]\n+#![feature(str_char)]\n+\n+extern crate fmt_macros;\n+extern crate syntax;\n+\n+use syntax::ext::base::{MacroExpanderFn, NormalTT};\n+use syntax::ext::base::{SyntaxEnv, SyntaxExtension};\n+use syntax::parse::token::intern;\n+\n+// A variant of 'try!' that panics on Err(FatalError). This is used as a\n+// crutch on the way towards a non-panic!-prone parser. It should be used\n+// for fatal parsing errors; eventually we plan to convert all code using\n+// panictry to just use normal try\n+macro_rules! panictry {\n+    ($e:expr) => ({\n+        use std::result::Result::{Ok, Err};\n+        use syntax::diagnostic::FatalError;\n+        match $e {\n+            Ok(e) => e,\n+            Err(FatalError) => panic!(FatalError)\n+        }\n+    })\n+}\n+\n+mod asm;\n+mod cfg;\n+mod concat;\n+mod concat_idents;\n+mod env;\n+mod format;\n+mod log_syntax;\n+mod trace_macros;\n+\n+// for custom_derive\n+pub mod deriving;\n+\n+pub fn register_builtins(env: &mut SyntaxEnv) {\n+    // utility function to simplify creating NormalTT syntax extensions\n+    fn builtin_normal_expander(f: MacroExpanderFn) -> SyntaxExtension {\n+        NormalTT(Box::new(f), None, false)\n+    }\n+\n+    env.insert(intern(\"asm\"),\n+               builtin_normal_expander(asm::expand_asm));\n+    env.insert(intern(\"cfg\"),\n+               builtin_normal_expander(cfg::expand_cfg));\n+    env.insert(intern(\"concat\"),\n+               builtin_normal_expander(concat::expand_syntax_ext));\n+    env.insert(intern(\"concat_idents\"),\n+               builtin_normal_expander(concat_idents::expand_syntax_ext));\n+    env.insert(intern(\"env\"),\n+               builtin_normal_expander(env::expand_env));\n+    env.insert(intern(\"option_env\"),\n+               builtin_normal_expander(env::expand_option_env));\n+    env.insert(intern(\"format_args\"),\n+               // format_args uses `unstable` things internally.\n+               NormalTT(Box::new(format::expand_format_args), None, true));\n+    env.insert(intern(\"log_syntax\"),\n+               builtin_normal_expander(log_syntax::expand_syntax_ext));\n+    env.insert(intern(\"trace_macros\"),\n+               builtin_normal_expander(trace_macros::expand_trace_macros));\n+\n+    deriving::register_all(env);\n+}"}, {"sha": "ee944abb645dc8b86cb04b98645732b716fbc4cf", "filename": "src/libsyntax_ext/log_syntax.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flog_syntax.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast;\n-use codemap;\n-use ext::base;\n-use feature_gate;\n-use print;\n+use syntax::ast;\n+use syntax::codemap;\n+use syntax::ext::base;\n+use syntax::feature_gate;\n+use syntax::print;\n \n pub fn expand_syntax_ext<'cx>(cx: &'cx mut base::ExtCtxt,\n                               sp: codemap::Span,", "previous_filename": "src/libsyntax/ext/log_syntax.rs"}, {"sha": "7b1e985442adb93d9f577c4019b5a1678e798ae8", "filename": "src/libsyntax_ext/trace_macros.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Flibsyntax_ext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftrace_macros.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast::TokenTree;\n-use codemap::Span;\n-use ext::base::ExtCtxt;\n-use ext::base;\n-use feature_gate;\n-use parse::token::keywords;\n+use syntax::ast::TokenTree;\n+use syntax::codemap::Span;\n+use syntax::ext::base::ExtCtxt;\n+use syntax::ext::base;\n+use syntax::feature_gate;\n+use syntax::parse::token::keywords;\n \n \n pub fn expand_trace_macros(cx: &mut ExtCtxt,", "previous_filename": "src/libsyntax/ext/trace_macros.rs"}, {"sha": "a3f42edbed2a88a761a86c72d35a5a7b75847815", "filename": "src/test/auxiliary/custom_derive_plugin.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -15,17 +15,18 @@\n #![feature(rustc_private)]\n \n extern crate syntax;\n+extern crate syntax_ext;\n extern crate rustc;\n extern crate rustc_plugin;\n \n use syntax::ast;\n use syntax::codemap::Span;\n use syntax::ext::base::{MultiDecorator, ExtCtxt, Annotatable};\n use syntax::ext::build::AstBuilder;\n-use syntax::ext::deriving::generic::{cs_fold, TraitDef, MethodDef, combine_substructure};\n-use syntax::ext::deriving::generic::ty::{Literal, LifetimeBounds, Path, borrowed_explicit_self};\n use syntax::parse::token;\n use syntax::ptr::P;\n+use syntax_ext::deriving::generic::{cs_fold, TraitDef, MethodDef, combine_substructure};\n+use syntax_ext::deriving::generic::ty::{Literal, LifetimeBounds, Path, borrowed_explicit_self};\n use rustc_plugin::Registry;\n \n #[plugin_registrar]"}, {"sha": "fe12d3b1f080f4450abb2e2f9b8c10a21ba3e519", "filename": "src/test/auxiliary/custom_derive_plugin_attr.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7bc51933e2facb4eca029ac17b398f372f5b41/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin_attr.rs?ref=ce7bc51933e2facb4eca029ac17b398f372f5b41", "patch": "@@ -15,6 +15,7 @@\n #![feature(rustc_private)]\n \n extern crate syntax;\n+extern crate syntax_ext;\n extern crate rustc;\n extern crate rustc_plugin;\n \n@@ -23,11 +24,11 @@ use syntax::attr::AttrMetaMethods;\n use syntax::codemap::Span;\n use syntax::ext::base::{MultiDecorator, ExtCtxt, Annotatable};\n use syntax::ext::build::AstBuilder;\n-use syntax::ext::deriving::generic::{cs_fold, TraitDef, MethodDef, combine_substructure};\n-use syntax::ext::deriving::generic::{Substructure, Struct, EnumMatching};\n-use syntax::ext::deriving::generic::ty::{Literal, LifetimeBounds, Path, borrowed_explicit_self};\n use syntax::parse::token;\n use syntax::ptr::P;\n+use syntax_ext::deriving::generic::{cs_fold, TraitDef, MethodDef, combine_substructure};\n+use syntax_ext::deriving::generic::{Substructure, Struct, EnumMatching};\n+use syntax_ext::deriving::generic::ty::{Literal, LifetimeBounds, Path, borrowed_explicit_self};\n use rustc_plugin::Registry;\n \n #[plugin_registrar]"}]}