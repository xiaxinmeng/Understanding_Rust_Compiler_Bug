{"sha": "f43e69a64eea0caf8b9f5ced31e7f77dc0d33d65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0M2U2OWE2NGVlYTBjYWY4YjlmNWNlZDMxZTdmNzdkYzBkMzNkNjU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-05-04T16:25:07Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-05-04T16:25:36Z"}, "message": "Handle recursive types in canonicalization", "tree": {"sha": "08a4e6edf39302e086fe6495fee4de1545e1f8f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08a4e6edf39302e086fe6495fee4de1545e1f8f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f43e69a64eea0caf8b9f5ced31e7f77dc0d33d65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f43e69a64eea0caf8b9f5ced31e7f77dc0d33d65", "html_url": "https://github.com/rust-lang/rust/commit/f43e69a64eea0caf8b9f5ced31e7f77dc0d33d65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f43e69a64eea0caf8b9f5ced31e7f77dc0d33d65/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5795d773dbcce67577851da02e4d659f0daf1a12", "url": "https://api.github.com/repos/rust-lang/rust/commits/5795d773dbcce67577851da02e4d659f0daf1a12", "html_url": "https://github.com/rust-lang/rust/commit/5795d773dbcce67577851da02e4d659f0daf1a12"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "2ec1a769284595638a666b01b8116bf08ae608bb", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f43e69a64eea0caf8b9f5ced31e7f77dc0d33d65/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f43e69a64eea0caf8b9f5ced31e7f77dc0d33d65/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=f43e69a64eea0caf8b9f5ced31e7f77dc0d33d65", "patch": "@@ -351,7 +351,7 @@ impl SourceAnalyzer {\n         callback: impl FnMut(&Ty, Function) -> Option<T>,\n     ) -> Option<T> {\n         // There should be no inference vars in types passed here\n-        // TODO check that?\n+        // FIXME check that?\n         let canonical = crate::ty::Canonical { value: ty, num_vars: 0 };\n         crate::ty::method_resolution::iterate_method_candidates(\n             &canonical,"}, {"sha": "8ca7e957d336be46e4f3323b467329107f9c783b", "filename": "crates/ra_hir/src/ty/infer/unify.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f43e69a64eea0caf8b9f5ced31e7f77dc0d33d65/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f43e69a64eea0caf8b9f5ced31e7f77dc0d33d65/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Funify.rs?ref=f43e69a64eea0caf8b9f5ced31e7f77dc0d33d65", "patch": "@@ -9,7 +9,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     where\n         'a: 'b,\n     {\n-        Canonicalizer { ctx: self, free_vars: Vec::new() }\n+        Canonicalizer { ctx: self, free_vars: Vec::new(), var_stack: Vec::new() }\n     }\n }\n \n@@ -19,6 +19,10 @@ where\n {\n     ctx: &'b mut InferenceContext<'a, D>,\n     free_vars: Vec<InferTy>,\n+    /// A stack of type variables that is used to detect recursive types (which\n+    /// are an error, but we need to protect against them to avoid stack\n+    /// overflows).\n+    var_stack: Vec<super::TypeVarId>,\n }\n \n pub(super) struct Canonicalized<T> {\n@@ -42,9 +46,15 @@ where\n         ty.fold(&mut |ty| match ty {\n             Ty::Infer(tv) => {\n                 let inner = tv.to_inner();\n-                // TODO prevent infinite loops? => keep var stack\n+                if self.var_stack.contains(&inner) {\n+                    // recursive type\n+                    return tv.fallback_value();\n+                }\n                 if let Some(known_ty) = self.ctx.var_unification_table.probe_value(inner).known() {\n-                    self.do_canonicalize_ty(known_ty.clone())\n+                    self.var_stack.push(inner);\n+                    let result = self.do_canonicalize_ty(known_ty.clone());\n+                    self.var_stack.pop();\n+                    result\n                 } else {\n                     let free_var = InferTy::TypeVar(self.ctx.var_unification_table.find(inner));\n                     let position = self.add(free_var);"}, {"sha": "74370bae973edaf6dd99e373bc9a31a890018740", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f43e69a64eea0caf8b9f5ced31e7f77dc0d33d65/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f43e69a64eea0caf8b9f5ced31e7f77dc0d33d65/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=f43e69a64eea0caf8b9f5ced31e7f77dc0d33d65", "patch": "@@ -183,7 +183,7 @@ where\n     fn struct_datum(&self, struct_id: chalk_ir::StructId) -> Arc<StructDatum> {\n         debug!(\"struct_datum {:?}\", struct_id);\n         let type_ctor = from_chalk(self.db, struct_id);\n-        // TODO might be nicer if we can create a fake GenericParams for the TypeCtor\n+        // FIXME might be nicer if we can create a fake GenericParams for the TypeCtor\n         let (num_params, upstream) = match type_ctor {\n             TypeCtor::Bool\n             | TypeCtor::Char"}]}