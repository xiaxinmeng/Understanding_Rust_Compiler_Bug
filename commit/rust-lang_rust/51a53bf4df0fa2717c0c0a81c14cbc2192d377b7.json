{"sha": "51a53bf4df0fa2717c0c0a81c14cbc2192d377b7", "node_id": "C_kwDOAAsO6NoAKDUxYTUzYmY0ZGYwZmEyNzE3YzBjMGE4MWMxNGNiYzIxOTJkMzc3Yjc", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-03-06T17:18:36Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-03-06T17:18:36Z"}, "message": "remove unnecessary `..` patterns", "tree": {"sha": "d98d4a70de4aa7ee5e3050ba7fe63dc0d70468c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d98d4a70de4aa7ee5e3050ba7fe63dc0d70468c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51a53bf4df0fa2717c0c0a81c14cbc2192d377b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51a53bf4df0fa2717c0c0a81c14cbc2192d377b7", "html_url": "https://github.com/rust-lang/rust/commit/51a53bf4df0fa2717c0c0a81c14cbc2192d377b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51a53bf4df0fa2717c0c0a81c14cbc2192d377b7/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d53e19540e7e201042c8b07a236e5351de085a42", "url": "https://api.github.com/repos/rust-lang/rust/commits/d53e19540e7e201042c8b07a236e5351de085a42", "html_url": "https://github.com/rust-lang/rust/commit/d53e19540e7e201042c8b07a236e5351de085a42"}], "stats": {"total": 18, "additions": 7, "deletions": 11}, "files": [{"sha": "7a272308fb051af3e51861a78d23e8ff22369900", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/51a53bf4df0fa2717c0c0a81c14cbc2192d377b7/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51a53bf4df0fa2717c0c0a81c14cbc2192d377b7/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=51a53bf4df0fa2717c0c0a81c14cbc2192d377b7", "patch": "@@ -2064,17 +2064,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 )),\n                 _ => None,\n             });\n-            if let ImplTraitContext::TypeAliasesOpaqueTy { ref mut capturable_lifetimes, .. } =\n-                itctx\n-            {\n+            if let ImplTraitContext::TypeAliasesOpaqueTy { ref mut capturable_lifetimes } = itctx {\n                 capturable_lifetimes.extend(lt_def_names.clone());\n             }\n \n             let res = this.lower_trait_ref(&p.trait_ref, itctx.reborrow());\n \n-            if let ImplTraitContext::TypeAliasesOpaqueTy { ref mut capturable_lifetimes, .. } =\n-                itctx\n-            {\n+            if let ImplTraitContext::TypeAliasesOpaqueTy { ref mut capturable_lifetimes } = itctx {\n                 for param in lt_def_names {\n                     capturable_lifetimes.remove(&param);\n                 }"}, {"sha": "d84a96e40fb013a5ad7c493ffbd7b236930ab5d5", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51a53bf4df0fa2717c0c0a81c14cbc2192d377b7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51a53bf4df0fa2717c0c0a81c14cbc2192d377b7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=51a53bf4df0fa2717c0c0a81c14cbc2192d377b7", "patch": "@@ -657,7 +657,7 @@ pub fn write_allocations<'tcx>(\n     }\n     fn alloc_ids_from_const(val: ConstValue<'_>) -> impl Iterator<Item = AllocId> + '_ {\n         match val {\n-            ConstValue::Scalar(interpret::Scalar::Ptr(ptr, _size)) => {\n+            ConstValue::Scalar(interpret::Scalar::Ptr(ptr, _)) => {\n                 Either::Left(Either::Left(std::iter::once(ptr.provenance)))\n             }\n             ConstValue::Scalar(interpret::Scalar::Int { .. }) => {"}, {"sha": "fd1c0239b596511b011a76acd04436b0d90ff95c", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51a53bf4df0fa2717c0c0a81c14cbc2192d377b7/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51a53bf4df0fa2717c0c0a81c14cbc2192d377b7/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=51a53bf4df0fa2717c0c0a81c14cbc2192d377b7", "patch": "@@ -852,7 +852,7 @@ impl ReachEverythingInTheInterfaceVisitor<'_, '_> {\n                         self.visit(self.ev.tcx.type_of(param.def_id));\n                     }\n                 }\n-                GenericParamDefKind::Const { has_default, .. } => {\n+                GenericParamDefKind::Const { has_default } => {\n                     self.visit(self.ev.tcx.type_of(param.def_id));\n                     if has_default {\n                         self.visit(self.ev.tcx.const_param_default(param.def_id));"}, {"sha": "f2ddc3ea7fa3909eebfebdd593ef60acc0fbf0a1", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51a53bf4df0fa2717c0c0a81c14cbc2192d377b7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51a53bf4df0fa2717c0c0a81c14cbc2192d377b7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=51a53bf4df0fa2717c0c0a81c14cbc2192d377b7", "patch": "@@ -405,7 +405,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 }\n                 hir::Node::Item(hir::Item {\n                     kind:\n-                        hir::ItemKind::Trait(_, _, generics, _, _)\n+                        hir::ItemKind::Trait(_, _, generics, ..)\n                         | hir::ItemKind::Impl(hir::Impl { generics, .. }),\n                     ..\n                 }) if projection.is_some() => {"}, {"sha": "b3213451d76c43049bddb5ecef655d312455c6a5", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51a53bf4df0fa2717c0c0a81c14cbc2192d377b7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51a53bf4df0fa2717c0c0a81c14cbc2192d377b7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=51a53bf4df0fa2717c0c0a81c14cbc2192d377b7", "patch": "@@ -1403,7 +1403,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             self.fcx.var_for_def(self.span, param)\n                         }\n                     }\n-                    GenericParamDefKind::Const { has_default, .. } => {\n+                    GenericParamDefKind::Const { has_default } => {\n                         if !infer_args && has_default {\n                             tcx.const_param_default(param.def_id)\n                                 .subst_spanned(tcx, substs.unwrap(), Some(self.span))"}, {"sha": "fcece84b09fb5fecc6d439de20c8811f30bc038e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51a53bf4df0fa2717c0c0a81c14cbc2192d377b7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51a53bf4df0fa2717c0c0a81c14cbc2192d377b7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=51a53bf4df0fa2717c0c0a81c14cbc2192d377b7", "patch": "@@ -451,7 +451,7 @@ impl Clean<GenericParamDef> for ty::GenericParamDef {\n                     },\n                 )\n             }\n-            ty::GenericParamDefKind::Const { has_default, .. } => (\n+            ty::GenericParamDefKind::Const { has_default } => (\n                 self.name,\n                 GenericParamDefKind::Const {\n                     did: self.def_id,"}]}