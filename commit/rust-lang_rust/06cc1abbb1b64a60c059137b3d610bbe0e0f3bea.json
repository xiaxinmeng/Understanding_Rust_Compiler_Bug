{"sha": "06cc1abbb1b64a60c059137b3d610bbe0e0f3bea", "node_id": "C_kwDOAAsO6NoAKDA2Y2MxYWJiYjFiNjRhNjBjMDU5MTM3YjNkNjEwYmJlMGUwZjNiZWE", "commit": {"author": {"name": "Serial", "email": "69764315+Serial-ATA@users.noreply.github.com", "date": "2022-04-26T22:22:37Z"}, "committer": {"name": "Serial", "email": "69764315+Serial-ATA@users.noreply.github.com", "date": "2022-04-26T22:22:37Z"}, "message": "Move js out to its own file", "tree": {"sha": "40d69adbb724a04fb40b77bb957dbc89d54a6dfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40d69adbb724a04fb40b77bb957dbc89d54a6dfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06cc1abbb1b64a60c059137b3d610bbe0e0f3bea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06cc1abbb1b64a60c059137b3d610bbe0e0f3bea", "html_url": "https://github.com/rust-lang/rust/commit/06cc1abbb1b64a60c059137b3d610bbe0e0f3bea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06cc1abbb1b64a60c059137b3d610bbe0e0f3bea/comments", "author": {"login": "Serial-ATA", "id": 69764315, "node_id": "MDQ6VXNlcjY5NzY0MzE1", "avatar_url": "https://avatars.githubusercontent.com/u/69764315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Serial-ATA", "html_url": "https://github.com/Serial-ATA", "followers_url": "https://api.github.com/users/Serial-ATA/followers", "following_url": "https://api.github.com/users/Serial-ATA/following{/other_user}", "gists_url": "https://api.github.com/users/Serial-ATA/gists{/gist_id}", "starred_url": "https://api.github.com/users/Serial-ATA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Serial-ATA/subscriptions", "organizations_url": "https://api.github.com/users/Serial-ATA/orgs", "repos_url": "https://api.github.com/users/Serial-ATA/repos", "events_url": "https://api.github.com/users/Serial-ATA/events{/privacy}", "received_events_url": "https://api.github.com/users/Serial-ATA/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Serial-ATA", "id": 69764315, "node_id": "MDQ6VXNlcjY5NzY0MzE1", "avatar_url": "https://avatars.githubusercontent.com/u/69764315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Serial-ATA", "html_url": "https://github.com/Serial-ATA", "followers_url": "https://api.github.com/users/Serial-ATA/followers", "following_url": "https://api.github.com/users/Serial-ATA/following{/other_user}", "gists_url": "https://api.github.com/users/Serial-ATA/gists{/gist_id}", "starred_url": "https://api.github.com/users/Serial-ATA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Serial-ATA/subscriptions", "organizations_url": "https://api.github.com/users/Serial-ATA/orgs", "repos_url": "https://api.github.com/users/Serial-ATA/repos", "events_url": "https://api.github.com/users/Serial-ATA/events{/privacy}", "received_events_url": "https://api.github.com/users/Serial-ATA/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdc896165928de3e04b02f3f5632094fe337ebbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdc896165928de3e04b02f3f5632094fe337ebbc", "html_url": "https://github.com/rust-lang/rust/commit/bdc896165928de3e04b02f3f5632094fe337ebbc"}], "stats": {"total": 748, "additions": 374, "deletions": 374}, "files": [{"sha": "5a59f94ec918bbc3c824b828f97a53ea98979034", "filename": ".github/deploy.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06cc1abbb1b64a60c059137b3d610bbe0e0f3bea/.github%2Fdeploy.sh", "raw_url": "https://github.com/rust-lang/rust/raw/06cc1abbb1b64a60c059137b3d610bbe0e0f3bea/.github%2Fdeploy.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fdeploy.sh?ref=06cc1abbb1b64a60c059137b3d610bbe0e0f3bea", "patch": "@@ -8,6 +8,7 @@ rm -rf out/master/ || exit 0\n echo \"Making the docs for master\"\n mkdir out/master/\n cp util/gh-pages/index.html out/master\n+cp util/gh-pages/script.js out/master\n cp util/gh-pages/lints.json out/master\n \n if [[ -n $TAG_NAME ]]; then"}, {"sha": "552c30f8353fd9adf30ae49edd4d7f3f38d79761", "filename": "util/gh-pages/index.html", "status": "modified", "additions": 1, "deletions": 374, "changes": 375, "blob_url": "https://github.com/rust-lang/rust/blob/06cc1abbb1b64a60c059137b3d610bbe0e0f3bea/util%2Fgh-pages%2Findex.html", "raw_url": "https://github.com/rust-lang/rust/raw/06cc1abbb1b64a60c059137b3d610bbe0e0f3bea/util%2Fgh-pages%2Findex.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fgh-pages%2Findex.html?ref=06cc1abbb1b64a60c059137b3d610bbe0e0f3bea", "patch": "@@ -516,379 +516,6 @@ <h2 class=\"panel-title\">\n     <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.5.0/highlight.min.js\"></script>\n     <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.5.0/languages/rust.min.js\"></script>\n     <script src=\"https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.4.12/angular.min.js\"></script>\n-    <script>\n-    (function () {\n-        var md = window.markdownit({\n-            html: true,\n-            linkify: true,\n-            typographer: true,\n-            highlight: function (str, lang) {\n-                if (lang && hljs.getLanguage(lang)) {\n-                    try {\n-                        return '<pre class=\"hljs\"><code>' +\n-                            hljs.highlight(lang, str, true).value +\n-                            '</code></pre>';\n-                    } catch (__) {}\n-                }\n-\n-                return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n-            }\n-        });\n-\n-        function scrollToLint(lintId) {\n-            var target = document.getElementById(lintId);\n-            if (!target) {\n-                return;\n-            }\n-            target.scrollIntoView();\n-        }\n-\n-        function scrollToLintByURL($scope) {\n-            var removeListener = $scope.$on('ngRepeatFinished', function(ngRepeatFinishedEvent) {\n-                scrollToLint(window.location.hash.slice(1));\n-                removeListener();\n-            });\n-        }\n-\n-        function selectGroup($scope, selectedGroup) {\n-            var groups = $scope.groups;\n-            for (var group in groups) {\n-                if (groups.hasOwnProperty(group)) {\n-                    if (group === selectedGroup) {\n-                        groups[group] = true;\n-                    } else {\n-                        groups[group] = false;\n-                    }\n-                }\n-            }\n-        }\n-\n-        angular.module(\"clippy\", [])\n-        .filter('markdown', function ($sce) {\n-            return function (text) {\n-                return $sce.trustAsHtml(\n-                    md.render(text || '')\n-                    // Oh deer, what a hack :O\n-                    .replace('<table', '<table class=\"table\"')\n-                );\n-            };\n-        })\n-        .directive('themeDropdown', function ($document) {\n-            return {\n-                restrict: 'A',\n-                link: function ($scope, $element, $attr) {\n-                    $element.bind('click', function () {\n-                        $element.toggleClass('open');\n-                        $element.addClass('open-recent');\n-                    });\n-\n-                    $document.bind('click', function () {\n-                        if (!$element.hasClass('open-recent')) {\n-                            $element.removeClass('open');\n-                        }\n-                        $element.removeClass('open-recent');\n-                    })\n-                }\n-            }\n-        })\n-        .directive('filterDropdown', function ($document) {\n-            return {\n-                restrict: 'A',\n-                link: function ($scope, $element, $attr) {\n-                    $element.bind('click', function (event) {\n-                        if (event.target.closest('button')) {\n-                            $element.toggleClass('open');\n-                        } else {\n-                            $element.addClass('open');\n-                        }\n-                        $element.addClass('open-recent');\n-                    });\n-\n-                    $document.bind('click', function () {\n-                        if (!$element.hasClass('open-recent')) {\n-                            $element.removeClass('open');\n-                        }\n-                        $element.removeClass('open-recent');\n-                    })\n-                }\n-            }\n-        })\n-        .directive('onFinishRender', function ($timeout) {\n-            return {\n-                restrict: 'A',\n-                link: function (scope, element, attr) {\n-                    if (scope.$last === true) {\n-                        $timeout(function () {\n-                            scope.$emit(attr.onFinishRender);\n-                        });\n-                    }\n-                }\n-            };\n-        })\n-        .controller(\"lintList\", function ($scope, $http, $timeout) {\n-            // Level filter\n-            var LEVEL_FILTERS_DEFAULT = {allow: true, warn: true, deny: true, none: true};\n-            $scope.levels = LEVEL_FILTERS_DEFAULT;\n-            $scope.byLevels = function (lint) {\n-                return $scope.levels[lint.level];\n-            };\n-\n-            var GROUPS_FILTER_DEFAULT = {\n-                cargo: true,\n-                complexity: true,\n-                correctness: true,\n-                deprecated: false,\n-                nursery: true,\n-                pedantic: true,\n-                perf: true,\n-                restriction: true,\n-                style: true,\n-                suspicious: true,\n-            };\n-            $scope.groups = GROUPS_FILTER_DEFAULT;\n-            const THEMES_DEFAULT = {\n-                light: \"Light\",\n-                rust: \"Rust\",\n-                coal: \"Coal\",\n-                navy: \"Navy\",\n-                ayu: \"Ayu\"\n-            };\n-            $scope.themes = THEMES_DEFAULT;\n-\n-            const DEFAULT_VERSION_FILTERS = {\n-                \">=\": { enabled: false, version_str: \"\" },\n-                \"<=\": { enabled: false, version_str: \"\" },\n-                \"==\": { enabled: false, version_str: \"\" },\n-            };\n-            // Weird workaround to get a copy of the object\n-            $scope.version_filters = JSON.parse(JSON.stringify(DEFAULT_VERSION_FILTERS));\n-            $scope.version_regex = new RegExp('\\\\d\\.\\\\d{2}\\.\\\\d');\n-\n-            $scope.selectTheme = function (theme) {\n-                setTheme(theme, true);\n-            }\n-\n-            $scope.toggleLevels = function (value) {\n-                const levels = $scope.levels;\n-                for (const key in levels) {\n-                    if (levels.hasOwnProperty(key)) {\n-                        levels[key] = value;\n-                    }\n-                }\n-            };\n-\n-            $scope.toggleGroups = function (value) {\n-                const groups = $scope.groups;\n-                for (const key in groups) {\n-                    if (groups.hasOwnProperty(key)) {\n-                        groups[key] = value;\n-                    }\n-                }\n-            };\n-\n-            $scope.selectedValuesCount = function (obj) {\n-                return Object.values(obj).filter(x => x).length;\n-            }\n-\n-            $scope.clearVersionFilters = function () {\n-                $scope.version_filters = JSON.parse(JSON.stringify(DEFAULT_VERSION_FILTERS));\n-            }\n-\n-            $scope.versionSymbol = function() {\n-                const version_filters = $scope.version_filters;\n-                let filter = \">=\";\n-                for (const key in version_filters) {\n-                    if (version_filters[key]) {\n-                        filter = key;\n-                    }\n-                }\n-\n-                return filter;\n-            }\n-\n-            $scope.byVersion = function(lint) {\n-                function validate_version_str(ver) {\n-                    return ver.length === 6 && $scope.version_regex.test(ver);\n-                }\n-\n-                function cmp_version(ver1, ver2, filter) {\n-                    // < 0: lint_version < version\n-                    // 0: equal\n-                    // > 0: lint_version > version\n-                    let result = ver1.localeCompare(ver2, undefined, {\n-                        numeric: true,\n-                        sensitivity: \"base\"\n-                    });\n-\n-                    // \"==\" gets the highest priority, since all filters are inclusive\n-                    return (result === 0) || (filter === \">=\" && result > 0) || (filter === \"<=\" && result < 0);\n-                }\n-\n-                let filters = $scope.version_filters;\n-\n-                // Strip the \"pre \" prefix for pre 1.29.0 lints\n-                let lint_version = lint.version.startsWith(\"pre \") ? lint.version.substring(4, lint.version.length) : lint.version;\n-\n-                for (const filter in filters) {\n-                    let version_str = filters[filter].version_str;\n-\n-                    // Skip the work for version strings with invalid lengths or characters\n-                    if (!filters[filter].enabled || !validate_version_str(version_str)) {\n-                        continue;\n-                    }\n-\n-                    let result = cmp_version(lint_version, version_str, filter);\n-                    if (result && filter === \"==\") {\n-                        return true;\n-                    } else if (!result) {\n-                        return false;\n-                    }\n-\n-                    let cmp_filter;\n-                    if (filter === \">=\") {\n-                        cmp_filter = \"<=\";\n-                    } else {\n-                        cmp_filter = \">=\";\n-                    }\n-\n-                    let cmp_version_str = filters[cmp_filter].version_str;\n-                    if (!filters[cmp_filter].enabled || !validate_version_str(cmp_version_str)) {\n-                        return true;\n-                    }\n-\n-                    return cmp_version(lint_version, cmp_version_str, cmp_filter);\n-                }\n-\n-                return true;\n-            }\n-\n-            $scope.byGroups = function (lint) {\n-                return $scope.groups[lint.group];\n-            };\n-\n-            $scope.bySearch = function (lint, index, array) {\n-                let searchStr = $scope.search;\n-                // It can be `null` I haven't missed this value\n-                if (searchStr == null || searchStr.length < 3) {\n-                    return true;\n-                }\n-                searchStr = searchStr.toLowerCase();\n-\n-                // Search by id\n-                if (lint.id.indexOf(searchStr.replace(\"-\", \"_\")) !== -1) {\n-                    return true;\n-                }\n-\n-                // Search the description\n-                // The use of `for`-loops instead of `foreach` enables us to return early\n-                let terms = searchStr.split(\" \");\n-                let docsLowerCase = lint.docs.toLowerCase();\n-                for (index = 0; index < terms.length; index++) {\n-                    // This is more likely and will therefor be checked first\n-                    if (docsLowerCase.indexOf(terms[index]) !== -1) {\n-                        continue;\n-                    }\n-\n-                    if (lint.id.indexOf(terms[index]) !== -1) {\n-                        continue;\n-                    }\n-\n-                    return false;\n-                }\n-\n-                return true;\n-            }\n-\n-            // Get data\n-            $scope.open = {};\n-            $scope.loading = true;\n-            // This will be used to jump into the source code of the version that this documentation is for.\n-            $scope.docVersion = window.location.pathname.split('/')[2] || \"master\";\n-\n-            if (window.location.hash.length > 1) {\n-                $scope.search = window.location.hash.slice(1);\n-                $scope.open[window.location.hash.slice(1)] = true;\n-                scrollToLintByURL($scope);\n-            }\n-\n-            $http.get('./lints.json')\n-            .success(function (data) {\n-                $scope.data = data;\n-                $scope.loading = false;\n-\n-                var selectedGroup = getQueryVariable(\"sel\");\n-                if (selectedGroup) {\n-                    selectGroup($scope, selectedGroup.toLowerCase());\n-                }\n-\n-                scrollToLintByURL($scope);\n-\n-                setTimeout(function () {\n-                    var el = document.getElementById('filter-input');\n-                    if (el) { el.focus() }\n-                }, 0);\n-            })\n-            .error(function (data) {\n-                $scope.error = data;\n-                $scope.loading = false;\n-            });\n-\n-            window.addEventListener('hashchange', function () {\n-                // trigger re-render\n-                $timeout(function () {\n-                    $scope.levels = LEVEL_FILTERS_DEFAULT;\n-                    $scope.search = window.location.hash.slice(1);\n-                    $scope.open[window.location.hash.slice(1)] = true;\n-\n-                    scrollToLintByURL($scope);\n-                });\n-                return true;\n-            }, false);\n-        });\n-    })();\n-\n-    function getQueryVariable(variable) {\n-        var query = window.location.search.substring(1);\n-        var vars = query.split('&');\n-        for (var i = 0; i < vars.length; i++) {\n-            var pair = vars[i].split('=');\n-            if (decodeURIComponent(pair[0]) == variable) {\n-                return decodeURIComponent(pair[1]);\n-            }\n-        }\n-    }\n-\n-    function setTheme(theme, store) {\n-        let enableHighlight = false;\n-        let enableNight = false;\n-        let enableAyu = false;\n-\n-        if (theme == \"ayu\") {\n-            enableAyu = true;\n-        } else if (theme == \"coal\" || theme == \"navy\") {\n-            enableNight = true;\n-        } else if (theme == \"rust\") {\n-            enableHighlight = true;\n-        } else {\n-            enableHighlight = true;\n-            // this makes sure that an unknown theme request gets set to a known one\n-            theme = \"light\";\n-        }\n-        document.getElementsByTagName(\"body\")[0].className = theme;\n-\n-        document.getElementById(\"styleHighlight\").disabled = !enableHighlight;\n-        document.getElementById(\"styleNight\").disabled = !enableNight;\n-        document.getElementById(\"styleAyu\").disabled = !enableAyu;\n-\n-        if (store) {\n-            try {\n-                localStorage.setItem('clippy-lint-list-theme', theme);\n-            } catch (e) { }\n-        }\n-    }\n-\n-    // loading the theme after the initial load\n-    setTheme(localStorage.getItem('clippy-lint-list-theme'), false);\n-    </script>\n+    <script src=\"script.js\"></script>\n </body>\n </html>\n\\ No newline at end of file"}, {"sha": "469a9306aee5fbffb9e9d1b6ba49b68c02bed5eb", "filename": "util/gh-pages/script.js", "status": "added", "additions": 372, "deletions": 0, "changes": 372, "blob_url": "https://github.com/rust-lang/rust/blob/06cc1abbb1b64a60c059137b3d610bbe0e0f3bea/util%2Fgh-pages%2Fscript.js", "raw_url": "https://github.com/rust-lang/rust/raw/06cc1abbb1b64a60c059137b3d610bbe0e0f3bea/util%2Fgh-pages%2Fscript.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fgh-pages%2Fscript.js?ref=06cc1abbb1b64a60c059137b3d610bbe0e0f3bea", "patch": "@@ -0,0 +1,372 @@\n+(function () {\n+    var md = window.markdownit({\n+        html: true,\n+        linkify: true,\n+        typographer: true,\n+        highlight: function (str, lang) {\n+            if (lang && hljs.getLanguage(lang)) {\n+                try {\n+                    return '<pre class=\"hljs\"><code>' +\n+                        hljs.highlight(lang, str, true).value +\n+                        '</code></pre>';\n+                } catch (__) {}\n+            }\n+\n+            return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n+        }\n+    });\n+\n+    function scrollToLint(lintId) {\n+        var target = document.getElementById(lintId);\n+        if (!target) {\n+            return;\n+        }\n+        target.scrollIntoView();\n+    }\n+\n+    function scrollToLintByURL($scope) {\n+        var removeListener = $scope.$on('ngRepeatFinished', function(ngRepeatFinishedEvent) {\n+            scrollToLint(window.location.hash.slice(1));\n+            removeListener();\n+        });\n+    }\n+\n+    function selectGroup($scope, selectedGroup) {\n+        var groups = $scope.groups;\n+        for (var group in groups) {\n+            if (groups.hasOwnProperty(group)) {\n+                if (group === selectedGroup) {\n+                    groups[group] = true;\n+                } else {\n+                    groups[group] = false;\n+                }\n+            }\n+        }\n+    }\n+\n+    angular.module(\"clippy\", [])\n+        .filter('markdown', function ($sce) {\n+            return function (text) {\n+                return $sce.trustAsHtml(\n+                    md.render(text || '')\n+                        // Oh deer, what a hack :O\n+                        .replace('<table', '<table class=\"table\"')\n+                );\n+            };\n+        })\n+        .directive('themeDropdown', function ($document) {\n+            return {\n+                restrict: 'A',\n+                link: function ($scope, $element, $attr) {\n+                    $element.bind('click', function () {\n+                        $element.toggleClass('open');\n+                        $element.addClass('open-recent');\n+                    });\n+\n+                    $document.bind('click', function () {\n+                        if (!$element.hasClass('open-recent')) {\n+                            $element.removeClass('open');\n+                        }\n+                        $element.removeClass('open-recent');\n+                    })\n+                }\n+            }\n+        })\n+        .directive('filterDropdown', function ($document) {\n+            return {\n+                restrict: 'A',\n+                link: function ($scope, $element, $attr) {\n+                    $element.bind('click', function (event) {\n+                        if (event.target.closest('button')) {\n+                            $element.toggleClass('open');\n+                        } else {\n+                            $element.addClass('open');\n+                        }\n+                        $element.addClass('open-recent');\n+                    });\n+\n+                    $document.bind('click', function () {\n+                        if (!$element.hasClass('open-recent')) {\n+                            $element.removeClass('open');\n+                        }\n+                        $element.removeClass('open-recent');\n+                    })\n+                }\n+            }\n+        })\n+        .directive('onFinishRender', function ($timeout) {\n+            return {\n+                restrict: 'A',\n+                link: function (scope, element, attr) {\n+                    if (scope.$last === true) {\n+                        $timeout(function () {\n+                            scope.$emit(attr.onFinishRender);\n+                        });\n+                    }\n+                }\n+            };\n+        })\n+        .controller(\"lintList\", function ($scope, $http, $timeout) {\n+            // Level filter\n+            var LEVEL_FILTERS_DEFAULT = {allow: true, warn: true, deny: true, none: true};\n+            $scope.levels = LEVEL_FILTERS_DEFAULT;\n+            $scope.byLevels = function (lint) {\n+                return $scope.levels[lint.level];\n+            };\n+\n+            var GROUPS_FILTER_DEFAULT = {\n+                cargo: true,\n+                complexity: true,\n+                correctness: true,\n+                deprecated: false,\n+                nursery: true,\n+                pedantic: true,\n+                perf: true,\n+                restriction: true,\n+                style: true,\n+                suspicious: true,\n+            };\n+            $scope.groups = GROUPS_FILTER_DEFAULT;\n+            const THEMES_DEFAULT = {\n+                light: \"Light\",\n+                rust: \"Rust\",\n+                coal: \"Coal\",\n+                navy: \"Navy\",\n+                ayu: \"Ayu\"\n+            };\n+            $scope.themes = THEMES_DEFAULT;\n+\n+            const DEFAULT_VERSION_FILTERS = {\n+                \">=\": { enabled: false, version_str: \"\" },\n+                \"<=\": { enabled: false, version_str: \"\" },\n+                \"==\": { enabled: false, version_str: \"\" },\n+            };\n+            // Weird workaround to get a copy of the object\n+            $scope.version_filters = JSON.parse(JSON.stringify(DEFAULT_VERSION_FILTERS));\n+            $scope.version_regex = new RegExp('\\\\d\\.\\\\d{2}\\.\\\\d');\n+\n+            $scope.selectTheme = function (theme) {\n+                setTheme(theme, true);\n+            }\n+\n+            $scope.toggleLevels = function (value) {\n+                const levels = $scope.levels;\n+                for (const key in levels) {\n+                    if (levels.hasOwnProperty(key)) {\n+                        levels[key] = value;\n+                    }\n+                }\n+            };\n+\n+            $scope.toggleGroups = function (value) {\n+                const groups = $scope.groups;\n+                for (const key in groups) {\n+                    if (groups.hasOwnProperty(key)) {\n+                        groups[key] = value;\n+                    }\n+                }\n+            };\n+\n+            $scope.selectedValuesCount = function (obj) {\n+                return Object.values(obj).filter(x => x).length;\n+            }\n+\n+            $scope.clearVersionFilters = function () {\n+                $scope.version_filters = JSON.parse(JSON.stringify(DEFAULT_VERSION_FILTERS));\n+            }\n+\n+            $scope.versionSymbol = function() {\n+                const version_filters = $scope.version_filters;\n+                let filter = \">=\";\n+                for (const key in version_filters) {\n+                    if (version_filters[key]) {\n+                        filter = key;\n+                    }\n+                }\n+\n+                return filter;\n+            }\n+\n+            $scope.byVersion = function(lint) {\n+                function validate_version_str(ver) {\n+                    return ver.length === 6 && $scope.version_regex.test(ver);\n+                }\n+\n+                function cmp_version(ver1, ver2, filter) {\n+                    // < 0: lint_version < version\n+                    // 0: equal\n+                    // > 0: lint_version > version\n+                    let result = ver1.localeCompare(ver2, undefined, {\n+                        numeric: true,\n+                        sensitivity: \"base\"\n+                    });\n+\n+                    // \"==\" gets the highest priority, since all filters are inclusive\n+                    return (result === 0) || (filter === \">=\" && result > 0) || (filter === \"<=\" && result < 0);\n+                }\n+\n+                let filters = $scope.version_filters;\n+\n+                // Strip the \"pre \" prefix for pre 1.29.0 lints\n+                let lint_version = lint.version.startsWith(\"pre \") ? lint.version.substring(4, lint.version.length) : lint.version;\n+\n+                for (const filter in filters) {\n+                    let version_str = filters[filter].version_str;\n+\n+                    // Skip the work for version strings with invalid lengths or characters\n+                    if (!filters[filter].enabled || !validate_version_str(version_str)) {\n+                        continue;\n+                    }\n+\n+                    let result = cmp_version(lint_version, version_str, filter);\n+                    if (result && filter === \"==\") {\n+                        return true;\n+                    } else if (!result) {\n+                        return false;\n+                    }\n+\n+                    let cmp_filter;\n+                    if (filter === \">=\") {\n+                        cmp_filter = \"<=\";\n+                    } else {\n+                        cmp_filter = \">=\";\n+                    }\n+\n+                    let cmp_version_str = filters[cmp_filter].version_str;\n+                    if (!filters[cmp_filter].enabled || !validate_version_str(cmp_version_str)) {\n+                        return true;\n+                    }\n+\n+                    return cmp_version(lint_version, cmp_version_str, cmp_filter);\n+                }\n+\n+                return true;\n+            }\n+\n+            $scope.byGroups = function (lint) {\n+                return $scope.groups[lint.group];\n+            };\n+\n+            $scope.bySearch = function (lint, index, array) {\n+                let searchStr = $scope.search;\n+                // It can be `null` I haven't missed this value\n+                if (searchStr == null || searchStr.length < 3) {\n+                    return true;\n+                }\n+                searchStr = searchStr.toLowerCase();\n+\n+                // Search by id\n+                if (lint.id.indexOf(searchStr.replace(\"-\", \"_\")) !== -1) {\n+                    return true;\n+                }\n+\n+                // Search the description\n+                // The use of `for`-loops instead of `foreach` enables us to return early\n+                let terms = searchStr.split(\" \");\n+                let docsLowerCase = lint.docs.toLowerCase();\n+                for (index = 0; index < terms.length; index++) {\n+                    // This is more likely and will therefor be checked first\n+                    if (docsLowerCase.indexOf(terms[index]) !== -1) {\n+                        continue;\n+                    }\n+\n+                    if (lint.id.indexOf(terms[index]) !== -1) {\n+                        continue;\n+                    }\n+\n+                    return false;\n+                }\n+\n+                return true;\n+            }\n+\n+            // Get data\n+            $scope.open = {};\n+            $scope.loading = true;\n+            // This will be used to jump into the source code of the version that this documentation is for.\n+            $scope.docVersion = window.location.pathname.split('/')[2] || \"master\";\n+\n+            if (window.location.hash.length > 1) {\n+                $scope.search = window.location.hash.slice(1);\n+                $scope.open[window.location.hash.slice(1)] = true;\n+                scrollToLintByURL($scope);\n+            }\n+\n+            $http.get('./lints.json')\n+                .success(function (data) {\n+                    $scope.data = data;\n+                    $scope.loading = false;\n+\n+                    var selectedGroup = getQueryVariable(\"sel\");\n+                    if (selectedGroup) {\n+                        selectGroup($scope, selectedGroup.toLowerCase());\n+                    }\n+\n+                    scrollToLintByURL($scope);\n+\n+                    setTimeout(function () {\n+                        var el = document.getElementById('filter-input');\n+                        if (el) { el.focus() }\n+                    }, 0);\n+                })\n+                .error(function (data) {\n+                    $scope.error = data;\n+                    $scope.loading = false;\n+                });\n+\n+            window.addEventListener('hashchange', function () {\n+                // trigger re-render\n+                $timeout(function () {\n+                    $scope.levels = LEVEL_FILTERS_DEFAULT;\n+                    $scope.search = window.location.hash.slice(1);\n+                    $scope.open[window.location.hash.slice(1)] = true;\n+\n+                    scrollToLintByURL($scope);\n+                });\n+                return true;\n+            }, false);\n+        });\n+})();\n+\n+function getQueryVariable(variable) {\n+    var query = window.location.search.substring(1);\n+    var vars = query.split('&');\n+    for (var i = 0; i < vars.length; i++) {\n+        var pair = vars[i].split('=');\n+        if (decodeURIComponent(pair[0]) == variable) {\n+            return decodeURIComponent(pair[1]);\n+        }\n+    }\n+}\n+\n+function setTheme(theme, store) {\n+    let enableHighlight = false;\n+    let enableNight = false;\n+    let enableAyu = false;\n+\n+    if (theme == \"ayu\") {\n+        enableAyu = true;\n+    } else if (theme == \"coal\" || theme == \"navy\") {\n+        enableNight = true;\n+    } else if (theme == \"rust\") {\n+        enableHighlight = true;\n+    } else {\n+        enableHighlight = true;\n+        // this makes sure that an unknown theme request gets set to a known one\n+        theme = \"light\";\n+    }\n+    document.getElementsByTagName(\"body\")[0].className = theme;\n+\n+    document.getElementById(\"styleHighlight\").disabled = !enableHighlight;\n+    document.getElementById(\"styleNight\").disabled = !enableNight;\n+    document.getElementById(\"styleAyu\").disabled = !enableAyu;\n+\n+    if (store) {\n+        try {\n+            localStorage.setItem('clippy-lint-list-theme', theme);\n+        } catch (e) { }\n+    }\n+}\n+\n+// loading the theme after the initial load\n+setTheme(localStorage.getItem('clippy-lint-list-theme'), false);"}]}