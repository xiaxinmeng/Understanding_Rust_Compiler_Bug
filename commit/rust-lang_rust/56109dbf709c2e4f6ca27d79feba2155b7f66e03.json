{"sha": "56109dbf709c2e4f6ca27d79feba2155b7f66e03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MTA5ZGJmNzA5YzJlNGY2Y2EyN2Q3OWZlYmEyMTU1YjdmNjZlMDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-15T06:33:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-15T06:33:48Z"}, "message": "Auto merge of #49884 - alexcrichton:less-unwrap, r=Mark-Simulacrum\n\ncore: Remove panics from some `Layout` methods\n\n`Layout` is often used at the core of allocation APIs and is as a result pretty\nsensitive to codegen in various circumstances. I was profiling `-C opt-level=z`\nwith a wasm project recently and noticed that the `unwrap()` wasn't removed\ninside of `Layout`, causing the program to be much larger than it otherwise\nwould be. If inlining were more aggressive LLVM would have figured out that the\npanic could be eliminated, but in general the methods here can't panic in the\nfirst place!\n\nAs a result this commit makes the following tweaks:\n\n* Removes `unwrap()` and replaces it with `unsafe` in `Layout::new` and\n  `Layout::for_value`. For posterity though a debug assertion was left behind.\n* Removes an `unwrap()` in favor of `?` in the `repeat` method. The comment\n  indicating that the function call couldn't panic wasn't quite right in that if\n  `alloc_size` becomes too large and if `align` is high enough it could indeed\n  cause a panic.\n\nThis'll hopefully mean that panics never get introduced into code in the first\nplace, ensuring that `opt-level=z` is closer to `opt-level=s` in this regard.", "tree": {"sha": "1b79b0ea110c5fa582712185642a32bc6279d3c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b79b0ea110c5fa582712185642a32bc6279d3c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56109dbf709c2e4f6ca27d79feba2155b7f66e03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56109dbf709c2e4f6ca27d79feba2155b7f66e03", "html_url": "https://github.com/rust-lang/rust/commit/56109dbf709c2e4f6ca27d79feba2155b7f66e03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56109dbf709c2e4f6ca27d79feba2155b7f66e03/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc001fa07f1e44f88b59c74290a2dd916824d33c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc001fa07f1e44f88b59c74290a2dd916824d33c", "html_url": "https://github.com/rust-lang/rust/commit/bc001fa07f1e44f88b59c74290a2dd916824d33c"}, {"sha": "68e555b7d03eefe4a226e6a0ae3fd13a118cb27e", "url": "https://api.github.com/repos/rust-lang/rust/commits/68e555b7d03eefe4a226e6a0ae3fd13a118cb27e", "html_url": "https://github.com/rust-lang/rust/commit/68e555b7d03eefe4a226e6a0ae3fd13a118cb27e"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "f08baa3dd71c3146ec312b325b66eff00761f6df", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/56109dbf709c2e4f6ca27d79feba2155b7f66e03/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56109dbf709c2e4f6ca27d79feba2155b7f66e03/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=56109dbf709c2e4f6ca27d79feba2155b7f66e03", "patch": "@@ -145,15 +145,26 @@ impl Layout {\n     /// Constructs a `Layout` suitable for holding a value of type `T`.\n     pub fn new<T>() -> Self {\n         let (size, align) = size_align::<T>();\n-        Layout::from_size_align(size, align).unwrap()\n+        // Note that the align is guaranteed by rustc to be a power of two and\n+        // the size+align combo is guaranteed to fit in our address space. As a\n+        // result use the unchecked constructor here to avoid inserting code\n+        // that panics if it isn't optimized well enough.\n+        debug_assert!(Layout::from_size_align(size, align).is_ok());\n+        unsafe {\n+            Layout::from_size_align_unchecked(size, align)\n+        }\n     }\n \n     /// Produces layout describing a record that could be used to\n     /// allocate backing structure for `T` (which could be a trait\n     /// or other unsized type like a slice).\n     pub fn for_value<T: ?Sized>(t: &T) -> Self {\n         let (size, align) = (mem::size_of_val(t), mem::align_of_val(t));\n-        Layout::from_size_align(size, align).unwrap()\n+        // See rationale in `new` for why this us using an unsafe variant below\n+        debug_assert!(Layout::from_size_align(size, align).is_ok());\n+        unsafe {\n+            Layout::from_size_align_unchecked(size, align)\n+        }\n     }\n \n     /// Creates a layout describing the record that can hold a value\n@@ -234,12 +245,7 @@ impl Layout {\n             .ok_or(LayoutErr { private: () })?;\n         let alloc_size = padded_size.checked_mul(n)\n             .ok_or(LayoutErr { private: () })?;\n-\n-        // We can assume that `self.align` is a power-of-two.\n-        // Furthermore, `alloc_size` has already been rounded up\n-        // to a multiple of `self.align`; therefore, the call to\n-        // `Layout::from_size_align` below should never panic.\n-        Ok((Layout::from_size_align(alloc_size, self.align).unwrap(), padded_size))\n+        Ok((Layout::from_size_align(alloc_size, self.align)?, padded_size))\n     }\n \n     /// Creates a layout describing the record for `self` followed by"}]}