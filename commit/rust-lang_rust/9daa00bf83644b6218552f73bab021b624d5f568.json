{"sha": "9daa00bf83644b6218552f73bab021b624d5f568", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYWEwMGJmODM2NDRiNjIxODU1MmY3M2JhYjAyMWI2MjRkNWY1Njg=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-05-31T19:24:18Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-05-31T23:18:55Z"}, "message": "rustc: Teach rustc to use block results as fn return values. Closes #372", "tree": {"sha": "ee7ce79ae9211230f76b8f2a2f3636b5174c7cba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee7ce79ae9211230f76b8f2a2f3636b5174c7cba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9daa00bf83644b6218552f73bab021b624d5f568", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9daa00bf83644b6218552f73bab021b624d5f568", "html_url": "https://github.com/rust-lang/rust/commit/9daa00bf83644b6218552f73bab021b624d5f568", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9daa00bf83644b6218552f73bab021b624d5f568/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "223c7dfb1190b2d97a780b09a57ea5bfd99a4f10", "url": "https://api.github.com/repos/rust-lang/rust/commits/223c7dfb1190b2d97a780b09a57ea5bfd99a4f10", "html_url": "https://github.com/rust-lang/rust/commit/223c7dfb1190b2d97a780b09a57ea5bfd99a4f10"}], "stats": {"total": 144, "additions": 141, "deletions": 3}, "files": [{"sha": "18d4999297ba99e364f813c6e816bbca8f68d997", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9daa00bf83644b6218552f73bab021b624d5f568/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9daa00bf83644b6218552f73bab021b624d5f568/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=9daa00bf83644b6218552f73bab021b624d5f568", "patch": "@@ -6892,7 +6892,14 @@ fn trans_fn(@local_ctxt cx, &ast::span sp, &ast::_fn f, ast::def_id fid,\n \n     auto lltop = bcx.llbb;\n \n-    auto res = trans_block(bcx, f.body, return);\n+    auto block_ty = node_ann_type(cx.ccx, f.body.node.a);\n+    auto res = if (!ty::type_is_nil(cx.ccx.tcx, block_ty)\n+                   && !ty::type_is_bot(cx.ccx.tcx, block_ty)) {\n+        trans_block(bcx, f.body, save_in(fcx.llretptr))\n+    } else {\n+        trans_block(bcx, f.body, return)\n+    };\n+\n     if (!is_terminated(res.bcx)) {\n         // FIXME: until LLVM has a unit type, we are moving around\n         // C_nil values rather than their void type."}, {"sha": "fc449de714805aafcfbb39a9bf18119f7309e187", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9daa00bf83644b6218552f73bab021b624d5f568/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9daa00bf83644b6218552f73bab021b624d5f568/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=9daa00bf83644b6218552f73bab021b624d5f568", "patch": "@@ -140,6 +140,8 @@ import front::ast::stmt_expr;\n import front::ast::block;\n import front::ast::block_;\n \n+import middle::ty::expr_ann;\n+\n import util::common::new_def_hash;\n import util::common::decl_lhs;\n import util::common::uistr;\n@@ -696,6 +698,15 @@ fn find_pre_post_block(&fn_ctxt fcx, block b) -> () {\n \n fn find_pre_post_fn(&fn_ctxt fcx, &_fn f) -> () {\n     find_pre_post_block(fcx, f.body);\n+\n+    // Treat the tail expression as a return statement\n+    alt (f.body.node.expr) {\n+        case (some(?tailexpr)) {\n+            auto tailann = expr_ann(tailexpr);\n+            set_postcond_false(fcx.ccx, tailann);\n+        }\n+        case (none) { /* fallthrough */ }\n+    }\n }\n \n fn fn_pre_post(crate_ctxt ccx, &_fn f, &span sp, &ident i, &def_id id,"}, {"sha": "77231200e8d75c34268753a26239dc0db37ac015", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9daa00bf83644b6218552f73bab021b624d5f568/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9daa00bf83644b6218552f73bab021b624d5f568/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=9daa00bf83644b6218552f73bab021b624d5f568", "patch": "@@ -150,6 +150,11 @@ import front::ast::stmt_expr;\n import front::ast::block;\n import front::ast::block_;\n \n+import middle::ty::expr_ann;\n+import middle::ty::expr_ty;\n+import middle::ty::type_is_nil;\n+import middle::ty::type_is_bot;\n+\n import util::common::new_def_hash;\n import util::common::decl_lhs;\n import util::common::uistr;\n@@ -753,8 +758,36 @@ fn find_pre_post_state_block(&fn_ctxt fcx, &prestate pres0, &block b)\n \n fn find_pre_post_state_fn(&fn_ctxt fcx, &_fn f) -> bool {\n     auto num_local_vars = num_locals(fcx.enclosing);\n-    ret find_pre_post_state_block(fcx,\n-          empty_prestate(num_local_vars), f.body);\n+    auto changed = find_pre_post_state_block(fcx,\n+                     empty_prestate(num_local_vars), f.body);\n+\n+    // Treat the tail expression as a return statement\n+    alt (f.body.node.expr) {\n+        case (some(?tailexpr)) {\n+            auto tailann = expr_ann(tailexpr);\n+            auto tailty = expr_ty(fcx.ccx.tcx, tailexpr);\n+\n+            // Since blocks and alts and ifs that don't have results\n+            // implicitly result in nil, we have to be careful to not\n+            // interpret nil-typed block results as the result of a\n+            // function with some other return type\n+            if (!type_is_nil(fcx.ccx.tcx, tailty)\n+                && !type_is_bot(fcx.ccx.tcx, tailty)) {\n+\n+                set_poststate_ann(fcx.ccx, tailann,\n+                                  false_postcond(num_local_vars));\n+                alt (fcx.enclosing.cf) {\n+                    case (noreturn) {\n+                        kill_poststate(fcx, tailann, fcx.id);\n+                    }\n+                    case (_) { }\n+                }\n+            }\n+        }\n+        case (none) { /* fallthrough */ }\n+    }\n+\n+    ret changed;\n }\n \n //"}, {"sha": "8baa6a3ac18b8d515471226a0d9131af6235ea7e", "filename": "src/test/compile-fail/missing-return2.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9daa00bf83644b6218552f73bab021b624d5f568/src%2Ftest%2Fcompile-fail%2Fmissing-return2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9daa00bf83644b6218552f73bab021b624d5f568/src%2Ftest%2Fcompile-fail%2Fmissing-return2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing-return2.rs?ref=9daa00bf83644b6218552f73bab021b624d5f568", "patch": "@@ -0,0 +1,14 @@\n+// xfail-stage0\n+// error-pattern: return\n+\n+fn f() -> int {\n+  // Make sure typestate doesn't interpret this alt expression\n+  // as the function result\n+  alt (true) {\n+    case (true) {\n+    }\n+  }\n+}\n+\n+fn main() {\n+}"}, {"sha": "c328f91046b2ae5715cbd5f2684273c388f0c7fc", "filename": "src/test/run-fail/expr-fn-fail.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9daa00bf83644b6218552f73bab021b624d5f568/src%2Ftest%2Frun-fail%2Fexpr-fn-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9daa00bf83644b6218552f73bab021b624d5f568/src%2Ftest%2Frun-fail%2Fexpr-fn-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexpr-fn-fail.rs?ref=9daa00bf83644b6218552f73bab021b624d5f568", "patch": "@@ -0,0 +1,8 @@\n+// xfail-stage0\n+// error-pattern:explicit failure\n+\n+fn f() -> ! { fail }\n+\n+fn main() {\n+  f();\n+}"}, {"sha": "75963d6d79721e0f6a9e8020866e07c072dbd1f0", "filename": "src/test/run-pass/expr-fn.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/9daa00bf83644b6218552f73bab021b624d5f568/src%2Ftest%2Frun-pass%2Fexpr-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9daa00bf83644b6218552f73bab021b624d5f568/src%2Ftest%2Frun-pass%2Fexpr-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-fn.rs?ref=9daa00bf83644b6218552f73bab021b624d5f568", "patch": "@@ -0,0 +1,65 @@\n+// xfail-stage0\n+\n+fn test_int() {\n+  fn f() -> int { 10 }\n+  assert (f() == 10);\n+}\n+\n+fn test_vec() {\n+  fn f() -> vec[int] { [10, 11] }\n+  assert (f().(1) == 11);\n+}\n+\n+fn test_generic() {\n+  fn f[T](&T t) -> T { t }\n+  assert (f(10) == 10);\n+}\n+\n+fn test_alt() {\n+  fn f() -> int {\n+    alt (true) {\n+      case (false) { 10 }\n+      case (true) { 20 }\n+    }\n+  }\n+  assert (f() == 20);\n+}\n+\n+fn test_if() {\n+  fn f() -> int { if (true) { 10 } else { 20 } }\n+  assert (f() == 10);\n+}\n+\n+fn test_block() {\n+  fn f() -> int {{ 10 }}\n+  assert (f() == 10);\n+}\n+\n+fn test_ret() {\n+  fn f() -> int {\n+    ret 10 // no semi\n+  }\n+  assert (f() == 10);\n+}\n+\n+// From issue #372\n+fn test_372() {\n+  fn f() -> int { auto x = { 3 }; x }\n+  assert (f() == 3);\n+}\n+\n+fn test_nil() {\n+  ()\n+}\n+\n+fn main() {\n+  test_int();\n+  test_vec();\n+  test_generic();\n+  test_alt();\n+  test_if();\n+  test_block();\n+  test_ret();\n+  test_372();\n+  test_nil();\n+}"}]}