{"sha": "8a811a1213bb965056488d9cad8ccaf9fd207867", "node_id": "C_kwDOAAsO6NoAKDhhODExYTEyMTNiYjk2NTA1NjQ4OGQ5Y2FkOGNjYWY5ZmQyMDc4Njc", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-02-16T09:56:01Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-03-09T09:52:04Z"}, "message": "bless tests", "tree": {"sha": "555528ffae0a6b8a272d32afffeb595b12c19c5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/555528ffae0a6b8a272d32afffeb595b12c19c5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a811a1213bb965056488d9cad8ccaf9fd207867", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a811a1213bb965056488d9cad8ccaf9fd207867", "html_url": "https://github.com/rust-lang/rust/commit/8a811a1213bb965056488d9cad8ccaf9fd207867", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a811a1213bb965056488d9cad8ccaf9fd207867/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40e4bd2d02508db499ebf0feb7407957abf947f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/40e4bd2d02508db499ebf0feb7407957abf947f6", "html_url": "https://github.com/rust-lang/rust/commit/40e4bd2d02508db499ebf0feb7407957abf947f6"}], "stats": {"total": 648, "additions": 358, "deletions": 290}, "files": [{"sha": "29ea0a0726ca52a99507ae0b73b6a9a1006918f2", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -311,7 +311,7 @@ dependencies = [\n \n [[package]]\n name = \"cargo\"\n-version = \"0.62.0\"\n+version = \"0.61.0\"\n dependencies = [\n  \"anyhow\",\n  \"atty\","}, {"sha": "e2acd610b80530cf6c0e4909d089c7cd33455a19", "filename": "src/test/mir-opt/const_allocation2.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -21,44 +21,44 @@ fn main() -> () {\n }\n \n alloc1 (static: FOO, size: 16, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc28\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc22\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n }\n \n-alloc28 (size: 72, align: 8) {\n-    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc13\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc22 (size: 72, align: 8) {\n+    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc9\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 __ __ __ __ \u2502 ............\u2591\u2591\u2591\u2591\n-    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc18\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc26\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc14\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc20\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x40 \u2502 03 00 00 00 00 00 00 00                         \u2502 ........\n }\n \n-alloc13 (size: 0, align: 8) {}\n+alloc9 (size: 0, align: 8) {}\n \n-alloc18 (size: 16, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc16\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc17\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc14 (size: 16, align: 8) {\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc12\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc13\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n }\n \n-alloc16 (size: 1, align: 1) {\n+alloc12 (size: 1, align: 1) {\n     05                                              \u2502 .\n }\n \n-alloc17 (size: 1, align: 1) {\n+alloc13 (size: 1, align: 1) {\n     06                                              \u2502 .\n }\n \n-alloc26 (size: 24, align: 8) {\n-    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc22+0x3\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc23\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n-    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc25+0x2\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc20 (size: 24, align: 8) {\n+    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc17+0x3\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc18\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc19+0x2\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n }\n \n-alloc22 (size: 4, align: 1) {\n+alloc17 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }\n \n-alloc23 (size: 1, align: 1) {\n+alloc18 (size: 1, align: 1) {\n     2a                                              \u2502 *\n }\n \n-alloc25 (size: 4, align: 1) {\n+alloc19 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }"}, {"sha": "122bef522cf4d88b5c6ff655f1b692bc957ee462", "filename": "src/test/mir-opt/deduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -26,7 +26,7 @@\n -         _2 = transmute::<&str, &[u8]>(move _8) -> bb14; // scope 2 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n +         _2 = transmute::<&str, &[u8]>(move _8) -> bb12; // scope 2 at $SRC_DIR/core/src/str/mod.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/str/mod.rs:LL:COL\n+                                           // + span: $DIR/deduplicate_blocks.rs:3:11: 3:23\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&str) -> &[u8] {transmute::<&str, &[u8]>}, val: Value(Scalar(<ZST>)) }\n       }\n   "}, {"sha": "cb79cdd3579ead0b30592929ba3c5a2dd174ca44", "filename": "src/test/mir-opt/inline/inline_diverging.g.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -39,7 +39,7 @@\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-diverging.rs:16:9: 16:14\n -                                          // + literal: Const { ty: fn() -> ! {panic}, val: Value(Scalar(<ZST>)) }\n-+                                          // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n++                                          // + span: $DIR/inline-diverging.rs:16:9: 16:16\n +                                          // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }\n +                                          // mir::Constant\n +                                          // + span: $SRC_DIR/std/src/panic.rs:LL:COL"}, {"sha": "1f736301c76999f3b2f3a34fe300ea0e1e1147f8", "filename": "src/test/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -46,11 +46,15 @@\n -     bb1: {\n +         discriminant(_4) = 0;            // scope 2 at $DIR/inline-generator.rs:15:5: 15:41\n           _3 = &mut _4;                    // scope 0 at $DIR/inline-generator.rs:9:23: 9:31\n--         _2 = Pin::<&mut impl Generator<bool>>::new(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:9:14: 9:32\n+-         _2 = Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:41]>::new(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:9:14: 9:32\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-generator.rs:9:14: 9:22\n -                                          // + user_ty: UserType(0)\n+<<<<<<< HEAD\n -                                          // + literal: Const { ty: fn(&mut impl Generator<bool>) -> Pin<&mut impl Generator<bool>> {Pin::<&mut impl Generator<bool>>::new}, val: Value(Scalar(<ZST>)) }\n+=======\n+-                                          // + literal: Const { ty: fn(&mut [generator@$DIR/inline-generator.rs:15:5: 15:41]) -> Pin<&mut [generator@$DIR/inline-generator.rs:15:5: 15:41]> {Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:41]>::new}, val: Value(Scalar(<ZST>)) }\n+>>>>>>> a4feb9af018 (bless tests)\n -     }\n - \n -     bb2: {\n@@ -62,10 +66,14 @@\n +         StorageDead(_6);                 // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         StorageDead(_5);                 // scope 4 at $SRC_DIR/core/src/pin.rs:LL:COL\n           StorageDead(_3);                 // scope 0 at $DIR/inline-generator.rs:9:31: 9:32\n--         _1 = <impl Generator<bool> as Generator<bool>>::resume(move _2, const false) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n+-         _1 = <[generator@$DIR/inline-generator.rs:15:5: 15:41] as Generator<bool>>::resume(move _2, const false) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-generator.rs:9:33: 9:39\n+<<<<<<< HEAD\n -                                          // + literal: Const { ty: for<'r> fn(Pin<&'r mut impl Generator<bool>>, bool) -> GeneratorState<<impl Generator<bool> as Generator<bool>>::Yield, <impl Generator<bool> as Generator<bool>>::Return> {<impl Generator<bool> as Generator<bool>>::resume}, val: Value(Scalar(<ZST>)) }\n+=======\n+-                                          // + literal: Const { ty: for<'r> fn(Pin<&'r mut [generator@$DIR/inline-generator.rs:15:5: 15:41]>, bool) -> GeneratorState<<[generator@$DIR/inline-generator.rs:15:5: 15:41] as Generator<bool>>::Yield, <[generator@$DIR/inline-generator.rs:15:5: 15:41] as Generator<bool>>::Return> {<[generator@$DIR/inline-generator.rs:15:5: 15:41] as Generator<bool>>::resume}, val: Value(Scalar(<ZST>)) }\n+>>>>>>> a4feb9af018 (bless tests)\n +         StorageLive(_7);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n +         _7 = const false;                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n +         StorageLive(_10);                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46"}, {"sha": "f2cdd987091d66580dcbc4b70b59b60079fff41f", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.64bit.diff", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -34,7 +34,14 @@\n -         (*_5) = Vec::<u32>::new() -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         StorageLive(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _7 = &mut (*_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+<<<<<<< HEAD\n +         ((*_7).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+=======\n++         ((*_7).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32>::NEW; // scope 3 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++                                          // ty::Const\n++                                          // + ty: alloc::raw_vec::RawVec<u32>\n++                                          // + val: Unevaluated(alloc::raw_vec::RawVec::<T>::NEW, [u32], None)\n+>>>>>>> a4feb9af018 (bless tests)\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n -                                          // + user_ty: UserType(1)\n@@ -44,8 +51,13 @@\n -     bb2: {\n +                                          // + span: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n+<<<<<<< HEAD\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n +         ((*_7).1: usize) = const 0_usize; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+=======\n++                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(5:77 ~ alloc[bd09]::raw_vec::{impl#0}::NEW), const_param_did: None }, substs: [u32], promoted: None }) }\n++         ((*_7).1: usize) = const 0_usize; // scope 3 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+>>>>>>> a4feb9af018 (bless tests)\n +         StorageDead(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n           _1 = move _5;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n           StorageDead(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43"}, {"sha": "92daef637e45b8b653ae0f371865e79913d2723b", "filename": "src/test/mir-opt/inline/issue_78442.bar.Inline.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -25,11 +25,11 @@\n       bb1: {\n           _3 = &_4;                        // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n           StorageLive(_5);                 // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n--         _2 = <impl Fn() as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n+-         _2 = <fn() {foo} as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n -                                          // mir::Constant\n -                                          // + span: $DIR/issue-78442.rs:11:5: 11:15\n--                                          // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl Fn(), ()) -> <impl Fn() as FnOnce<()>>::Output {<impl Fn() as Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n-+         _2 = move (*_3)() -> [return: bb5, unwind: bb3]; // scope 1 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n+-                                          // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r fn() {foo}, ()) -> <fn() {foo} as FnOnce<()>>::Output {<fn() {foo} as Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n++         _2 = move (*_3)() -> [return: bb5, unwind: bb3]; // scope 1 at $DIR/issue-78442.rs:11:5: 11:17\n       }\n   \n       bb2: {"}, {"sha": "ba9da7678e7233a520e20d098ee7159654f0ff54", "filename": "src/test/mir-opt/inline/issue_78442.bar.RevealAll.diff", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -25,10 +25,12 @@\n           _3 = &_4;                        // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n           StorageLive(_5);                 // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n           nop;                             // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n-          _2 = <impl Fn() as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n+-         _2 = <impl Fn() as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n++         _2 = <fn() {foo} as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n                                            // mir::Constant\n                                            // + span: $DIR/issue-78442.rs:11:5: 11:15\n-                                           // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl Fn(), ()) -> <impl Fn() as FnOnce<()>>::Output {<impl Fn() as Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl Fn(), ()) -> <impl Fn() as FnOnce<()>>::Output {<impl Fn() as Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n++                                          // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r fn() {foo}, ()) -> <fn() {foo} as FnOnce<()>>::Output {<fn() {foo} as Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb2: {"}, {"sha": "c5c063e8cecf1a13c383d69128cf5043db1254df", "filename": "src/test/mir-opt/issues/issue_59352.num_to_digit.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -38,7 +38,7 @@ fn num_to_digit(_1: char) -> u32 {\n         _8 = _2;                         // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         _7 = char::methods::<impl char>::to_digit(move _8, const 8_u32) -> bb5; // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n                                          // mir::Constant\n-                                         // + span: $SRC_DIR/core/src/char/methods.rs:LL:COL\n+                                         // + span: $DIR/issue-59352.rs:14:8: 14:23\n                                          // + literal: Const { ty: fn(char, u32) -> Option<u32> {char::methods::<impl char>::to_digit}, val: Value(Scalar(<ZST>)) }\n     }\n "}, {"sha": "9f235248ca59f9a2c61112c005979684576aa0a5", "filename": "src/test/mir-opt/nll/named_lifetimes_basic.use_x.nll.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -42,7 +42,7 @@ fn use_x(_1: &'_#6r mut i32, _2: &'_#7r u32, _3: &'_#8r u32, _4: &'_#9r u32) ->\n     let mut _0: bool;                    // return place in scope 0 at $DIR/named-lifetimes-basic.rs:12:81: 12:85\n \n     bb0: {\n-        _0 = const Const(Value(Scalar(0x01)): bool); // bb0[0]: scope 0 at $DIR/named-lifetimes-basic.rs:12:88: 12:92\n+        _0 = const ConstValue(Scalar(0x01): bool); // bb0[0]: scope 0 at $DIR/named-lifetimes-basic.rs:12:88: 12:92\n         return;                          // bb0[1]: scope 0 at $DIR/named-lifetimes-basic.rs:12:94: 12:94\n     }\n }"}, {"sha": "95997b2070172d955de39b41256af0eec0df2c76", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.64bit.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -45,11 +45,11 @@ fn main() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n-        _1 = [const Const(Value(Scalar(0x0000000000000001)): usize), const Const(Value(Scalar(0x0000000000000002)): usize), const Const(Value(Scalar(0x0000000000000003)): usize)]; // bb0[1]: scope 0 at $DIR/region-subtyping-basic.rs:17:17: 17:26\n+        _1 = [const ConstValue(Scalar(0x0000000000000001): usize), const ConstValue(Scalar(0x0000000000000002): usize), const ConstValue(Scalar(0x0000000000000003): usize)]; // bb0[1]: scope 0 at $DIR/region-subtyping-basic.rs:17:17: 17:26\n         FakeRead(ForLet(None), _1);      // bb0[2]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n         StorageLive(_2);                 // bb0[3]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n         StorageLive(_3);                 // bb0[4]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n-        _3 = const Const(Value(Scalar(0x0000000000000000)): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n+        _3 = const ConstValue(Scalar(0x0000000000000000): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n         _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n         _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind: bb7]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n@@ -62,15 +62,15 @@ fn main() -> () {\n         _6 = _2;                         // bb1[3]: scope 2 at $DIR/region-subtyping-basic.rs:19:13: 19:14\n         FakeRead(ForLet(None), _6);      // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n         StorageLive(_7);                 // bb1[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        _7 = const Const(Value(Scalar(0x01)): bool); // bb1[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+        _7 = const ConstValue(Scalar(0x01): bool); // bb1[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n         switchInt(move _7) -> [Const(Value(Scalar(0x00)): bool): bb4, otherwise: bb2]; // bb1[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n     }\n \n     bb2: {\n         StorageLive(_8);                 // bb2[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n         StorageLive(_9);                 // bb2[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n         _9 = (*_6);                      // bb2[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n-        _8 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb3, unwind: bb7]; // bb2[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+        _8 = ConstValue(Scalar(<ZST>): fn(usize) -> bool {use_x})(move _9) -> [return: bb3, unwind: bb7]; // bb2[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:21:9: 21:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n@@ -79,21 +79,21 @@ fn main() -> () {\n     bb3: {\n         StorageDead(_9);                 // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n         StorageDead(_8);                 // bb3[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb3[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n+        _0 = const ConstValue(Scalar(<ZST>): ()); // bb3[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n         goto -> bb6;                     // bb3[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb4: {\n         StorageLive(_10);                // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n-        _10 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x0000000000000016)): usize)) -> [return: bb5, unwind: bb7]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n+        _10 = ConstValue(Scalar(<ZST>): fn(usize) -> bool {use_x})(const ConstValue(Scalar(0x0000000000000016): usize)) -> [return: bb5, unwind: bb7]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:23:9: 23:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb5: {\n         StorageDead(_10);                // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:18: 23:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n+        _0 = const ConstValue(Scalar(<ZST>): ()); // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n         goto -> bb6;                     // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n "}, {"sha": "ec76424afa55e0b6226546635205a4dcad6b77ce", "filename": "src/test/mir-opt/remove_storage_markers.main.RemoveStorageMarkers.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -58,7 +58,7 @@\n           _14 = &mut (*_8);                // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n           _7 = <std::ops::Range<i32> as iter::range::RangeIteratorImpl>::spec_next(move _14) -> bb4; // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                           // + span: $DIR/remove_storage_markers.rs:8:14: 8:19\n                                            // + literal: Const { ty: for<'r> fn(&'r mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as iter::range::RangeIteratorImpl>::Item> {<std::ops::Range<i32> as iter::range::RangeIteratorImpl>::spec_next}, val: Value(Scalar(<ZST>)) }\n       }\n   "}, {"sha": "9b899ee316a0e737398a978e3f97947a1598e35a", "filename": "src/test/ui/associated-consts/defaults-cyclic-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.rs?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -1,9 +1,9 @@\n // build-fail\n-//~^ ERROR cycle detected when normalizing `<() as Tr>::A`\n \n // Cyclic assoc. const defaults don't error unless *used*\n trait Tr {\n     const A: u8 = Self::B;\n+    //~^ ERROR cycle detected when const-evaluating + checking `Tr::A`\n \n     const B: u8 = Self::A;\n }"}, {"sha": "550897790e9ff1fd8396a4b9f297f95490bef4e2", "filename": "src/test/ui/associated-consts/defaults-cyclic-fail.stderr", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.stderr?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -1,37 +1,15 @@\n-error[E0391]: cycle detected when normalizing `<() as Tr>::A`\n-   |\n-note: ...which requires simplifying constant for the type system `Tr::A`...\n-  --> $DIR/defaults-cyclic-fail.rs:6:5\n-   |\n-LL |     const A: u8 = Self::B;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires simplifying constant for the type system `Tr::A`...\n-  --> $DIR/defaults-cyclic-fail.rs:6:5\n-   |\n-LL |     const A: u8 = Self::B;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `Tr::A`...\n-  --> $DIR/defaults-cyclic-fail.rs:6:5\n+error[E0391]: cycle detected when const-evaluating + checking `Tr::A`\n+  --> $DIR/defaults-cyclic-fail.rs:5:5\n    |\n LL |     const A: u8 = Self::B;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which requires normalizing `<() as Tr>::B`...\n-note: ...which requires simplifying constant for the type system `Tr::B`...\n-  --> $DIR/defaults-cyclic-fail.rs:8:5\n    |\n-LL |     const B: u8 = Self::A;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires simplifying constant for the type system `Tr::B`...\n-  --> $DIR/defaults-cyclic-fail.rs:8:5\n-   |\n-LL |     const B: u8 = Self::A;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating + checking `Tr::B`...\n   --> $DIR/defaults-cyclic-fail.rs:8:5\n    |\n LL |     const B: u8 = Self::A;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which again requires normalizing `<() as Tr>::A`, completing the cycle\n+   = note: ...which again requires const-evaluating + checking `Tr::A`, completing the cycle\n note: cycle used when const-evaluating + checking `main::promoted[1]`\n   --> $DIR/defaults-cyclic-fail.rs:14:1\n    |"}, {"sha": "14b09072533df80c00fa05e6fa5bb5f44bb5d4a4", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-impl.stderr", "status": "modified", "additions": 12, "deletions": 25, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -1,30 +1,9 @@\n-error[E0391]: cycle detected when simplifying constant for the type system `IMPL_REF_BAR`\n+error[E0391]: cycle detected when const-evaluating + checking `IMPL_REF_BAR`\n   --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:7:1\n    |\n LL | const IMPL_REF_BAR: u32 = GlobalImplRef::BAR;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires simplifying constant for the type system `IMPL_REF_BAR`...\n-  --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:7:1\n-   |\n-LL | const IMPL_REF_BAR: u32 = GlobalImplRef::BAR;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `IMPL_REF_BAR`...\n-  --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:7:1\n-   |\n-LL | const IMPL_REF_BAR: u32 = GlobalImplRef::BAR;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which requires normalizing `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR`...\n-note: ...which requires simplifying constant for the type system `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR`...\n-  --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:12:5\n-   |\n-LL |     const BAR: u32 = IMPL_REF_BAR;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires simplifying constant for the type system `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR`...\n-  --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:12:5\n-   |\n-LL |     const BAR: u32 = IMPL_REF_BAR;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating + checking `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:12:5\n    |\n@@ -35,9 +14,17 @@ note: ...which requires caching mir of `<impl at $DIR/issue-24949-assoc-const-st\n    |\n LL |     const BAR: u32 = IMPL_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which requires normalizing `IMPL_REF_BAR`...\n-   = note: ...which again requires simplifying constant for the type system `IMPL_REF_BAR`, completing the cycle\n-   = note: cycle used when running analysis passes on this crate\n+note: ...which requires const-evaluating + checking `IMPL_REF_BAR`...\n+  --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:7:1\n+   |\n+LL | const IMPL_REF_BAR: u32 = GlobalImplRef::BAR;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which again requires const-evaluating + checking `IMPL_REF_BAR`, completing the cycle\n+note: cycle used when simplifying constant for the type system `IMPL_REF_BAR`\n+  --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:7:1\n+   |\n+LL | const IMPL_REF_BAR: u32 = GlobalImplRef::BAR;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "682f56a6a5575516994cb09c63cf4c510c537650", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-trait-default.stderr", "status": "modified", "additions": 12, "deletions": 25, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -1,30 +1,9 @@\n-error[E0391]: cycle detected when simplifying constant for the type system `DEFAULT_REF_BAR`\n+error[E0391]: cycle detected when const-evaluating + checking `DEFAULT_REF_BAR`\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:11:1\n    |\n LL | const DEFAULT_REF_BAR: u32 = <GlobalDefaultRef>::BAR;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires simplifying constant for the type system `DEFAULT_REF_BAR`...\n-  --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:11:1\n-   |\n-LL | const DEFAULT_REF_BAR: u32 = <GlobalDefaultRef>::BAR;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `DEFAULT_REF_BAR`...\n-  --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:11:1\n-   |\n-LL | const DEFAULT_REF_BAR: u32 = <GlobalDefaultRef>::BAR;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which requires normalizing `<GlobalDefaultRef as FooDefault>::BAR`...\n-note: ...which requires simplifying constant for the type system `FooDefault::BAR`...\n-  --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:8:5\n-   |\n-LL |     const BAR: u32 = DEFAULT_REF_BAR;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires simplifying constant for the type system `FooDefault::BAR`...\n-  --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:8:5\n-   |\n-LL |     const BAR: u32 = DEFAULT_REF_BAR;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating + checking `FooDefault::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:8:5\n    |\n@@ -35,9 +14,17 @@ note: ...which requires caching mir of `FooDefault::BAR` for CTFE...\n    |\n LL |     const BAR: u32 = DEFAULT_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which requires normalizing `DEFAULT_REF_BAR`...\n-   = note: ...which again requires simplifying constant for the type system `DEFAULT_REF_BAR`, completing the cycle\n-   = note: cycle used when running analysis passes on this crate\n+note: ...which requires const-evaluating + checking `DEFAULT_REF_BAR`...\n+  --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:11:1\n+   |\n+LL | const DEFAULT_REF_BAR: u32 = <GlobalDefaultRef>::BAR;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which again requires const-evaluating + checking `DEFAULT_REF_BAR`, completing the cycle\n+note: cycle used when simplifying constant for the type system `DEFAULT_REF_BAR`\n+  --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:11:1\n+   |\n+LL | const DEFAULT_REF_BAR: u32 = <GlobalDefaultRef>::BAR;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "41db7a633183bb8ec1552a5798cdb7b4de6c3484", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-trait.stderr", "status": "modified", "additions": 12, "deletions": 25, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -1,30 +1,9 @@\n-error[E0391]: cycle detected when simplifying constant for the type system `TRAIT_REF_BAR`\n+error[E0391]: cycle detected when const-evaluating + checking `TRAIT_REF_BAR`\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:7:1\n    |\n LL | const TRAIT_REF_BAR: u32 = <GlobalTraitRef>::BAR;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires simplifying constant for the type system `TRAIT_REF_BAR`...\n-  --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:7:1\n-   |\n-LL | const TRAIT_REF_BAR: u32 = <GlobalTraitRef>::BAR;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `TRAIT_REF_BAR`...\n-  --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:7:1\n-   |\n-LL | const TRAIT_REF_BAR: u32 = <GlobalTraitRef>::BAR;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which requires normalizing `<GlobalTraitRef as Foo>::BAR`...\n-note: ...which requires simplifying constant for the type system `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 13:2>::BAR`...\n-  --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:12:5\n-   |\n-LL |     const BAR: u32 = TRAIT_REF_BAR;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires simplifying constant for the type system `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 13:2>::BAR`...\n-  --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:12:5\n-   |\n-LL |     const BAR: u32 = TRAIT_REF_BAR;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating + checking `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 13:2>::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:12:5\n    |\n@@ -35,9 +14,17 @@ note: ...which requires caching mir of `<impl at $DIR/issue-24949-assoc-const-st\n    |\n LL |     const BAR: u32 = TRAIT_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which requires normalizing `TRAIT_REF_BAR`...\n-   = note: ...which again requires simplifying constant for the type system `TRAIT_REF_BAR`, completing the cycle\n-   = note: cycle used when running analysis passes on this crate\n+note: ...which requires const-evaluating + checking `TRAIT_REF_BAR`...\n+  --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:7:1\n+   |\n+LL | const TRAIT_REF_BAR: u32 = <GlobalTraitRef>::BAR;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which again requires const-evaluating + checking `TRAIT_REF_BAR`, completing the cycle\n+note: cycle used when simplifying constant for the type system `TRAIT_REF_BAR`\n+  --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:7:1\n+   |\n+LL | const TRAIT_REF_BAR: u32 = <GlobalTraitRef>::BAR;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "90baca253d26852da2c7f0c13a097ce78faec054", "filename": "src/test/ui/borrowck/issue-88434-minimal-example.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.rs?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -1,6 +1,8 @@\n // Regression test related to issue 88434\n \n const _CONST: &() = &f(&|_| {});\n+//~^ ERROR any use of this value will cause an error\n+//~| WARNING this was previously accepted by the compiler but is being phased out\n \n const fn f<F>(_: &F)\n where"}, {"sha": "d0c60ef628e60b15c856d1b99130fb7125bf8af0", "filename": "src/test/ui/borrowck/issue-88434-minimal-example.stderr", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -1,17 +1,38 @@\n error[E0080]: evaluation of constant value failed\n+<<<<<<< HEAD\n   --> $DIR/issue-88434-minimal-example.rs:9:5\n+=======\n+  --> $DIR/issue-88434-minimal-example.rs:12:5\n+>>>>>>> a4feb9af018 (bless tests)\n    |\n LL | const _CONST: &() = &f(&|_| {});\n    |                      ---------- inside `_CONST` at $DIR/issue-88434-minimal-example.rs:3:22\n ...\n LL |     panic!()\n    |     ^^^^^^^^\n    |     |\n+<<<<<<< HEAD\n    |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-minimal-example.rs:9:5\n    |     inside `f::<[closure@$DIR/issue-88434-minimal-example.rs:3:25: 3:31]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n+=======\n+   |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-minimal-example.rs:12:5\n+   |     inside `f::<[closure@$DIR/issue-88434-minimal-example.rs:4:25: 4:31]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n+>>>>>>> a4feb9af018 (bless tests)\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to previous error\n+error: any use of this value will cause an error\n+  --> $DIR/issue-88434-minimal-example.rs:4:21\n+   |\n+LL | const _CONST: &() = &f(&|_| {});\n+   | --------------------^^^^^^^^^^^-\n+   |                     |\n+   |                     referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "b1fc1615ece7728e0c8eb4c76e18e9206a5b2cf3", "filename": "src/test/ui/borrowck/issue-88434-removal-index-should-be-less.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.rs?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -1,6 +1,8 @@\n // Regression test for issue 88434\n \n const _CONST: &[u8] = &f(&[], |_| {});\n+//~^ ERROR any use of this value will cause an error\n+//~| WARNING this was previously\n \n const fn f<F>(_: &[u8], _: F) -> &[u8]\n where"}, {"sha": "f2a381a73ef49f38e19e37abec81f4bd3a1c5d71", "filename": "src/test/ui/borrowck/issue-88434-removal-index-should-be-less.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -1,17 +1,29 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-88434-removal-index-should-be-less.rs:9:5\n+  --> $DIR/issue-88434-removal-index-should-be-less.rs:12:5\n    |\n LL | const _CONST: &[u8] = &f(&[], |_| {});\n    |                        -------------- inside `_CONST` at $DIR/issue-88434-removal-index-should-be-less.rs:3:24\n ...\n LL |     panic!()\n    |     ^^^^^^^^\n    |     |\n-   |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-removal-index-should-be-less.rs:9:5\n-   |     inside `f::<[closure@$DIR/issue-88434-removal-index-should-be-less.rs:3:31: 3:37]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n+   |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-removal-index-should-be-less.rs:12:5\n+   |     inside `f::<[closure@$DIR/issue-88434-removal-index-should-be-less.rs:4:31: 4:37]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to previous error\n+error: any use of this value will cause an error\n+  --> $DIR/issue-88434-removal-index-should-be-less.rs:4:23\n+   |\n+LL | const _CONST: &[u8] = &f(&[], |_| {});\n+   | ----------------------^^^^^^^^^^^^^^^-\n+   |                       |\n+   |                       referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "4933ba4514db2be9d5325953d8975583a6a2252b", "filename": "src/test/ui/const-ptr/out_of_bounds_read.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -4,7 +4,7 @@ error[E0080]: evaluation of constant value failed\n LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n-   |         memory access failed: alloc7 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n+   |         memory access failed: alloc5 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n    |         inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n   ::: $DIR/out_of_bounds_read.rs:13:33\n@@ -18,7 +18,7 @@ error[E0080]: evaluation of constant value failed\n LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n-   |         memory access failed: alloc7 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n+   |         memory access failed: alloc5 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n    |         inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n   ::: $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -37,7 +37,7 @@ error[E0080]: evaluation of constant value failed\n LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n-   |         memory access failed: alloc7 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n+   |         memory access failed: alloc5 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n    |         inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n   ::: $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL"}, {"sha": "c9460498951fda8a90aeacad17250685f733c2ef", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -1,4 +1,3 @@\n-//~ERROR constructed but no error reported\n // compile-flags: -Ztreat-err-as-bug=2\n // build-fail\n // failure-status: 101\n@@ -23,5 +22,7 @@ const X: i32 = 1 / 0; //~WARN any use of this value will cause an error\n fn main() {\n     let x: &'static i32 = &X;\n     //~^ ERROR evaluation of constant value failed\n+    //~| ERROR erroneous constant used\n+    //~| WARNING this was previously accepted by the compiler\n     println!(\"x={}\", x);\n }"}, {"sha": "9e990738bbcca2b5b8452d3e548299640379ff02", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.stderr", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -1,26 +1,36 @@\n warning: any use of this value will cause an error\n-  --> $DIR/const-eval-query-stack.rs:20:16\n+  --> $DIR/const-eval-query-stack.rs:19:16\n    |\n LL | const X: i32 = 1 / 0;\n    | ---------------^^^^^-\n    |                |\n    |                attempt to divide `1_i32` by zero\n    |\n note: the lint level is defined here\n-  --> $DIR/const-eval-query-stack.rs:19:8\n+  --> $DIR/const-eval-query-stack.rs:18:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-eval-query-stack.rs:24:28\n+  --> $DIR/const-eval-query-stack.rs:23:28\n    |\n LL |     let x: &'static i32 = &X;\n    |                            ^ referenced constant has errors\n+\n+error: erroneous constant used\n+  --> $DIR/const-eval-query-stack.rs:23:27\n+   |\n+LL |     let x: &'static i32 = &X;\n+   |                           ^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n query stack during panic:\n-#0 [try_normalize_mir_const_after_erasing_regions] normalizing `main::promoted[1]`\n-#1 [optimized_mir] optimizing MIR for `main`\n-#2 [collect_and_partition_mono_items] collect_and_partition_mono_items\n+#0 [optimized_mir] optimizing MIR for `main`\n+#1 [collect_and_partition_mono_items] collect_and_partition_mono_items\n end of query stack"}, {"sha": "6924956bdf706f174ccc7a68c4ed529d30f2ad8c", "filename": "src/test/ui/consts/const-integer-bool-ops.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -6,6 +6,7 @@ const X: usize = 42 && 39;\n //~| ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARR: [i32; X] = [99; 34];\n+//~^ ERROR evaluation of constant value failed\n \n const X1: usize = 42 || 39;\n //~^ ERROR mismatched types\n@@ -15,6 +16,7 @@ const X1: usize = 42 || 39;\n //~| ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARR1: [i32; X1] = [99; 47];\n+//~^ ERROR evaluation of constant value failed\n \n const X2: usize = -42 || -39;\n //~^ ERROR mismatched types\n@@ -24,6 +26,7 @@ const X2: usize = -42 || -39;\n //~| ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARR2: [i32; X2] = [99; 18446744073709551607];\n+//~^ ERROR evaluation of constant value failed\n \n const X3: usize = -42 && -39;\n //~^ ERROR mismatched types\n@@ -33,36 +36,43 @@ const X3: usize = -42 && -39;\n //~| ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARR3: [i32; X3] = [99; 6];\n+//~^ ERROR evaluation of constant value failed\n \n const Y: usize = 42.0 == 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR: [i32; Y] = [99; 1];\n+//~^ ERROR evaluation of constant value failed\n \n const Y1: usize = 42.0 >= 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR1: [i32; Y1] = [99; 1];\n+//~^ ERROR evaluation of constant value failed\n \n const Y2: usize = 42.0 <= 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR2: [i32; Y2] = [99; 1];\n+//~^ ERROR evaluation of constant value failed\n \n const Y3: usize = 42.0 > 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR3: [i32; Y3] = [99; 0];\n+//~^ ERROR evaluation of constant value failed\n \n const Y4: usize = 42.0 < 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR4: [i32; Y4] = [99; 0];\n+//~^ ERROR evaluation of constant value failed\n \n const Y5: usize = 42.0 != 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR5: [i32; Y5] = [99; 0];\n+//~^ ERROR evaluation of constant value failed\n \n fn main() {\n     let _ = ARR;"}, {"sha": "9001fefd1029f314bc95f9bae48efc75a5baf0cd", "filename": "src/test/ui/consts/const-integer-bool-ops.stderr", "status": "modified", "additions": 78, "deletions": 17, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -16,96 +16,157 @@ error[E0308]: mismatched types\n LL | const X: usize = 42 && 39;\n    |                  ^^^^^^^^ expected `usize`, found `bool`\n \n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-integer-bool-ops.rs:8:18\n+   |\n+LL | const ARR: [i32; X] = [99; 34];\n+   |                  ^ referenced constant has errors\n+\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:10:19\n+  --> $DIR/const-integer-bool-ops.rs:11:19\n    |\n LL | const X1: usize = 42 || 39;\n    |                   ^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:10:25\n+  --> $DIR/const-integer-bool-ops.rs:11:25\n    |\n LL | const X1: usize = 42 || 39;\n    |                         ^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:10:19\n+  --> $DIR/const-integer-bool-ops.rs:11:19\n    |\n LL | const X1: usize = 42 || 39;\n    |                   ^^^^^^^^ expected `usize`, found `bool`\n \n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-integer-bool-ops.rs:18:19\n+   |\n+LL | const ARR1: [i32; X1] = [99; 47];\n+   |                   ^^ referenced constant has errors\n+\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:19:19\n+  --> $DIR/const-integer-bool-ops.rs:21:19\n    |\n LL | const X2: usize = -42 || -39;\n    |                   ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:19:26\n+  --> $DIR/const-integer-bool-ops.rs:21:26\n    |\n LL | const X2: usize = -42 || -39;\n    |                          ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:19:19\n+  --> $DIR/const-integer-bool-ops.rs:21:19\n    |\n LL | const X2: usize = -42 || -39;\n    |                   ^^^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0308]: mismatched types\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const-integer-bool-ops.rs:28:19\n    |\n+LL | const ARR2: [i32; X2] = [99; 18446744073709551607];\n+   |                   ^^ referenced constant has errors\n+\n+error[E0308]: mismatched types\n+  --> $DIR/const-integer-bool-ops.rs:31:19\n+   |\n LL | const X3: usize = -42 && -39;\n    |                   ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:28:26\n+  --> $DIR/const-integer-bool-ops.rs:31:26\n    |\n LL | const X3: usize = -42 && -39;\n    |                          ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:28:19\n+  --> $DIR/const-integer-bool-ops.rs:31:19\n    |\n LL | const X3: usize = -42 && -39;\n    |                   ^^^^^^^^^^ expected `usize`, found `bool`\n \n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-integer-bool-ops.rs:38:19\n+   |\n+LL | const ARR3: [i32; X3] = [99; 6];\n+   |                   ^^ referenced constant has errors\n+\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:37:18\n+  --> $DIR/const-integer-bool-ops.rs:41:18\n    |\n LL | const Y: usize = 42.0 == 42.0;\n    |                  ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-integer-bool-ops.rs:44:19\n+   |\n+LL | const ARRR: [i32; Y] = [99; 1];\n+   |                   ^ referenced constant has errors\n+\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:42:19\n+  --> $DIR/const-integer-bool-ops.rs:47:19\n    |\n LL | const Y1: usize = 42.0 >= 42.0;\n    |                   ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-integer-bool-ops.rs:50:20\n+   |\n+LL | const ARRR1: [i32; Y1] = [99; 1];\n+   |                    ^^ referenced constant has errors\n+\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:47:19\n+  --> $DIR/const-integer-bool-ops.rs:53:19\n    |\n LL | const Y2: usize = 42.0 <= 42.0;\n    |                   ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-integer-bool-ops.rs:56:20\n+   |\n+LL | const ARRR2: [i32; Y2] = [99; 1];\n+   |                    ^^ referenced constant has errors\n+\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:52:19\n+  --> $DIR/const-integer-bool-ops.rs:59:19\n    |\n LL | const Y3: usize = 42.0 > 42.0;\n    |                   ^^^^^^^^^^^ expected `usize`, found `bool`\n \n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-integer-bool-ops.rs:62:20\n+   |\n+LL | const ARRR3: [i32; Y3] = [99; 0];\n+   |                    ^^ referenced constant has errors\n+\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:57:19\n+  --> $DIR/const-integer-bool-ops.rs:65:19\n    |\n LL | const Y4: usize = 42.0 < 42.0;\n    |                   ^^^^^^^^^^^ expected `usize`, found `bool`\n \n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-integer-bool-ops.rs:68:20\n+   |\n+LL | const ARRR4: [i32; Y4] = [99; 0];\n+   |                    ^^ referenced constant has errors\n+\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:62:19\n+  --> $DIR/const-integer-bool-ops.rs:71:19\n    |\n LL | const Y5: usize = 42.0 != 42.0;\n    |                   ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n-error: aborting due to 18 previous errors\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-integer-bool-ops.rs:74:20\n+   |\n+LL | const ARRR5: [i32; Y5] = [99; 0];\n+   |                    ^^ referenced constant has errors\n+\n+error: aborting due to 28 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0080, E0308.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "0f420ae1b6b7cc6689dce73199da330bc194873f", "filename": "src/test/ui/consts/const-mut-refs/issue-76510.64bit.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.64bit.stderr?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -19,7 +19,13 @@ error[E0596]: cannot borrow data in a `&` reference as mutable\n LL | const S: &'static mut str = &mut \" hello \";\n    |                             ^^^^^^^^^^^^^^ cannot borrow as mutable\n \n-error: aborting due to 3 previous errors\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-76510.rs:11:70\n+   |\n+LL |         let s = transmute::<(*const u8, usize), &ManuallyDrop<str>>((S.as_ptr(), 3));\n+   |                                                                      ^ referenced constant has errors\n+\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0596, E0658, E0764.\n-For more information about an error, try `rustc --explain E0596`.\n+Some errors have detailed explanations: E0080, E0596, E0658, E0764.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "08cf64ee330db74af03b8bc009206907bd4462bf", "filename": "src/test/ui/consts/const-mut-refs/issue-76510.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.rs?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -9,6 +9,7 @@ const S: &'static mut str = &mut \" hello \";\n \n const fn trigger() -> [(); unsafe {\n         let s = transmute::<(*const u8, usize), &ManuallyDrop<str>>((S.as_ptr(), 3));\n+        //~^ ERROR evaluation of constant value failed\n         0\n     }] {\n     [(); 0]"}, {"sha": "763263c6aeb4f9a86c81c99459d07590c6b06733", "filename": "src/test/ui/consts/const-tup-index-span.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.rs?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -4,6 +4,7 @@ const TUP: (usize,) = 5usize << 64;\n //~^ ERROR mismatched types\n //~| expected tuple, found `usize`\n const ARR: [i32; TUP.0] = [];\n+//~^ ERROR evaluation of constant value failed\n \n fn main() {\n }"}, {"sha": "b178e05e27a095b3c10102f6b0f63a3c7fb2b2a6", "filename": "src/test/ui/consts/const-tup-index-span.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -11,6 +11,13 @@ help: use a trailing comma to create a tuple with one element\n LL | const TUP: (usize,) = (5usize << 64,);\n    |                       +            ++\n \n-error: aborting due to previous error\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-tup-index-span.rs:6:18\n+   |\n+LL | const ARR: [i32; TUP.0] = [];\n+   |                  ^^^ referenced constant has errors\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0080, E0308.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "a0225d3ffc39fe47481288a58937e08ea3a9aedf", "filename": "src/test/ui/consts/invalid-union.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -6,7 +6,7 @@ LL | fn main() {\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n-               \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc7\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+               \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc6\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n            }\n \n error: erroneous constant used"}, {"sha": "9ac6c984cb0cdd8fedb3f9883455c20c40e68d65", "filename": "src/test/ui/consts/issue-36163.stderr", "status": "modified", "additions": 6, "deletions": 34, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fconsts%2Fissue-36163.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fconsts%2Fissue-36163.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-36163.stderr?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -1,48 +1,20 @@\n-error[E0391]: cycle detected when simplifying constant for the type system `Foo::B::{constant#0}`\n+error[E0391]: cycle detected when const-evaluating + checking `Foo::B::{constant#0}`\n   --> $DIR/issue-36163.rs:4:9\n    |\n LL |     B = A,\n    |         ^\n    |\n-note: ...which requires simplifying constant for the type system `Foo::B::{constant#0}`...\n-  --> $DIR/issue-36163.rs:4:9\n-   |\n-LL |     B = A,\n-   |         ^\n-note: ...which requires const-evaluating + checking `Foo::B::{constant#0}`...\n-  --> $DIR/issue-36163.rs:4:9\n-   |\n-LL |     B = A,\n-   |         ^\n-   = note: ...which requires normalizing `A`...\n-note: ...which requires simplifying constant for the type system `A`...\n-  --> $DIR/issue-36163.rs:1:1\n-   |\n-LL | const A: isize = Foo::B as isize;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires simplifying constant for the type system `A`...\n-  --> $DIR/issue-36163.rs:1:1\n-   |\n-LL | const A: isize = Foo::B as isize;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating + checking `A`...\n   --> $DIR/issue-36163.rs:1:1\n    |\n LL | const A: isize = Foo::B as isize;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which requires normalizing `A`...\n-   = note: ...which again requires simplifying constant for the type system `Foo::B::{constant#0}`, completing the cycle\n-note: cycle used when collecting item types in top-level module\n-  --> $DIR/issue-36163.rs:1:1\n+   = note: ...which again requires const-evaluating + checking `Foo::B::{constant#0}`, completing the cycle\n+note: cycle used when simplifying constant for the type system `Foo::B::{constant#0}`\n+  --> $DIR/issue-36163.rs:4:9\n    |\n-LL | / const A: isize = Foo::B as isize;\n-LL | |\n-LL | | enum Foo {\n-LL | |     B = A,\n-LL | | }\n-LL | |\n-LL | | fn main() {}\n-   | |____________^\n+LL |     B = A,\n+   |         ^\n \n error: aborting due to previous error\n "}, {"sha": "4856418ed600229d153ce311781e0b01196b158c", "filename": "src/test/ui/issues/issue-17252.stderr", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -1,21 +1,10 @@\n-error[E0391]: cycle detected when normalizing `FOO`\n-   |\n-note: ...which requires simplifying constant for the type system `FOO`...\n-  --> $DIR/issue-17252.rs:1:1\n-   |\n-LL | const FOO: usize = FOO;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires simplifying constant for the type system `FOO`...\n+error[E0391]: cycle detected when const-evaluating + checking `FOO`\n   --> $DIR/issue-17252.rs:1:1\n    |\n LL | const FOO: usize = FOO;\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `FOO`...\n-  --> $DIR/issue-17252.rs:1:1\n    |\n-LL | const FOO: usize = FOO;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which again requires normalizing `FOO`, completing the cycle\n+   = note: ...which immediately requires const-evaluating + checking `FOO` again\n note: cycle used when const-evaluating + checking `main::{constant#0}`\n   --> $DIR/issue-17252.rs:4:18\n    |"}, {"sha": "9366050d7ecdf86f1714a4592ea579f06f331112", "filename": "src/test/ui/issues/issue-23302-1.stderr", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fissues%2Fissue-23302-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fissues%2Fissue-23302-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23302-1.stderr?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -1,26 +1,15 @@\n-error[E0391]: cycle detected when simplifying constant for the type system `X::A::{constant#0}`\n+error[E0391]: cycle detected when const-evaluating + checking `X::A::{constant#0}`\n   --> $DIR/issue-23302-1.rs:4:9\n    |\n LL |     A = X::A as isize,\n    |         ^^^^^^^^^^^^^\n    |\n-note: ...which requires simplifying constant for the type system `X::A::{constant#0}`...\n+   = note: ...which immediately requires const-evaluating + checking `X::A::{constant#0}` again\n+note: cycle used when simplifying constant for the type system `X::A::{constant#0}`\n   --> $DIR/issue-23302-1.rs:4:9\n    |\n LL |     A = X::A as isize,\n    |         ^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `X::A::{constant#0}`...\n-  --> $DIR/issue-23302-1.rs:4:9\n-   |\n-LL |     A = X::A as isize,\n-   |         ^^^^^^^^^^^^^\n-   = note: ...which requires normalizing `X::A as isize`...\n-   = note: ...which again requires simplifying constant for the type system `X::A::{constant#0}`, completing the cycle\n-note: cycle used when collecting item types in top-level module\n-  --> $DIR/issue-23302-1.rs:3:1\n-   |\n-LL | enum X {\n-   | ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b97ae287a47a976dba3119de24dbf178abd080fd", "filename": "src/test/ui/issues/issue-23302-2.stderr", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fissues%2Fissue-23302-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fissues%2Fissue-23302-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23302-2.stderr?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -1,26 +1,15 @@\n-error[E0391]: cycle detected when simplifying constant for the type system `Y::A::{constant#0}`\n+error[E0391]: cycle detected when const-evaluating + checking `Y::A::{constant#0}`\n   --> $DIR/issue-23302-2.rs:4:9\n    |\n LL |     A = Y::B as isize,\n    |         ^^^^^^^^^^^^^\n    |\n-note: ...which requires simplifying constant for the type system `Y::A::{constant#0}`...\n+   = note: ...which immediately requires const-evaluating + checking `Y::A::{constant#0}` again\n+note: cycle used when simplifying constant for the type system `Y::A::{constant#0}`\n   --> $DIR/issue-23302-2.rs:4:9\n    |\n LL |     A = Y::B as isize,\n    |         ^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `Y::A::{constant#0}`...\n-  --> $DIR/issue-23302-2.rs:4:9\n-   |\n-LL |     A = Y::B as isize,\n-   |         ^^^^^^^^^^^^^\n-   = note: ...which requires normalizing `Y::B as isize`...\n-   = note: ...which again requires simplifying constant for the type system `Y::A::{constant#0}`, completing the cycle\n-note: cycle used when collecting item types in top-level module\n-  --> $DIR/issue-23302-2.rs:3:1\n-   |\n-LL | enum Y {\n-   | ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1a07d4a95bcfacca5b69d2f7d3467b211118b8ff", "filename": "src/test/ui/issues/issue-23302-3.stderr", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.stderr?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -1,38 +1,20 @@\n-error[E0391]: cycle detected when simplifying constant for the type system `A`\n+error[E0391]: cycle detected when const-evaluating + checking `A`\n   --> $DIR/issue-23302-3.rs:1:1\n    |\n LL | const A: i32 = B;\n    | ^^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires simplifying constant for the type system `A`...\n-  --> $DIR/issue-23302-3.rs:1:1\n-   |\n-LL | const A: i32 = B;\n-   | ^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `A`...\n-  --> $DIR/issue-23302-3.rs:1:1\n-   |\n-LL | const A: i32 = B;\n-   | ^^^^^^^^^^^^^^^^^\n-   = note: ...which requires normalizing `B`...\n-note: ...which requires simplifying constant for the type system `B`...\n-  --> $DIR/issue-23302-3.rs:3:1\n-   |\n-LL | const B: i32 = A;\n-   | ^^^^^^^^^^^^^^^^^\n-note: ...which requires simplifying constant for the type system `B`...\n+note: ...which requires const-evaluating + checking `B`...\n   --> $DIR/issue-23302-3.rs:3:1\n    |\n LL | const B: i32 = A;\n    | ^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `B`...\n-  --> $DIR/issue-23302-3.rs:3:1\n+   = note: ...which again requires const-evaluating + checking `A`, completing the cycle\n+note: cycle used when simplifying constant for the type system `A`\n+  --> $DIR/issue-23302-3.rs:1:1\n    |\n-LL | const B: i32 = A;\n+LL | const A: i32 = B;\n    | ^^^^^^^^^^^^^^^^^\n-   = note: ...which requires normalizing `A`...\n-   = note: ...which again requires simplifying constant for the type system `A`, completing the cycle\n-   = note: cycle used when running analysis passes on this crate\n \n error: aborting due to previous error\n "}, {"sha": "64873ac35a00213e78fc7479e75ba180f5029a34", "filename": "src/test/ui/issues/issue-41394.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fissues%2Fissue-41394.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fissues%2Fissue-41394.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41394.rs?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -5,6 +5,7 @@ enum Foo {\n \n enum Bar {\n     A = Foo::A as isize\n+    //~^ ERROR evaluation of constant value failed\n }\n \n fn main() {}"}, {"sha": "47a24547d4533dcf333588d10315f2c42f942f7c", "filename": "src/test/ui/issues/issue-41394.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fissues%2Fissue-41394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fissues%2Fissue-41394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41394.stderr?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -6,6 +6,13 @@ LL |     A = \"\" + 1\n    |         |\n    |         &str\n \n-error: aborting due to previous error\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-41394.rs:7:9\n+   |\n+LL |     A = Foo::A as isize\n+   |         ^^^^^^^^^^^^^^^ referenced constant has errors\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0369`.\n+Some errors have detailed explanations: E0080, E0369.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "ddd391415414763bb38d0f06348458cea2ee85e6", "filename": "src/test/ui/issues/issue-54954.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fissues%2Fissue-54954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fissues%2Fissue-54954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54954.rs?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -9,6 +9,8 @@ trait Tt {\n }\n \n fn f(z: [f32; ARR_LEN]) -> [f32; ARR_LEN] {\n+  //~^ ERROR evaluation of constant value failed\n+  //~| ERROR evaluation of constant value failed\n     z\n }\n "}, {"sha": "6e8d3cac9a7e4f365ea3b338c0d6f793157733cb", "filename": "src/test/ui/issues/issue-54954.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -12,7 +12,19 @@ LL | const ARR_LEN: usize = Tt::const_val::<[i8; 123]>();\n    |\n    = note: cannot satisfy `_: Tt`\n \n-error: aborting due to 2 previous errors\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-54954.rs:11:15\n+   |\n+LL | fn f(z: [f32; ARR_LEN]) -> [f32; ARR_LEN] {\n+   |               ^^^^^^^ referenced constant has errors\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-54954.rs:11:34\n+   |\n+LL | fn f(z: [f32; ARR_LEN]) -> [f32; ARR_LEN] {\n+   |                                  ^^^^^^^ referenced constant has errors\n+\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0283, E0379.\n-For more information about an error, try `rustc --explain E0283`.\n+Some errors have detailed explanations: E0080, E0283, E0379.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "6851b67cb3b3aa3cfa3ac81fe21e3c3af4d4f4b5", "filename": "src/test/ui/issues/issue-69602-type-err-during-codegen-ice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.rs?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -19,4 +19,5 @@ impl TraitB for B { //~ ERROR not all trait items implemented, missing: `MyA`\n \n fn main() {\n     let _ = [0; B::VALUE];\n+    //~^ ERROR evaluation of constant value failed\n }"}, {"sha": "cb5b397849c06334fd95724b85d41571ea078e79", "filename": "src/test/ui/issues/issue-69602-type-err-during-codegen-ice.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.stderr?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -13,7 +13,13 @@ LL |     type MyA: TraitA;\n LL | impl TraitB for B {\n    | ^^^^^^^^^^^^^^^^^ missing `MyA` in implementation\n \n-error: aborting due to 2 previous errors\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-69602-type-err-during-codegen-ice.rs:21:17\n+   |\n+LL |     let _ = [0; B::VALUE];\n+   |                 ^^^^^^^^ referenced constant has errors\n+\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0046, E0437.\n+Some errors have detailed explanations: E0046, E0080, E0437.\n For more information about an error, try `rustc --explain E0046`."}, {"sha": "c2946ad94b0b79a53ec943fb08081279b6f2df7d", "filename": "src/test/ui/issues/issue-77919.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fissues%2Fissue-77919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fissues%2Fissue-77919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77919.rs?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -1,5 +1,6 @@\n fn main() {\n     [1; <Multiply<Five, Five>>::VAL];\n+    //~^ ERROR evaluation of constant value failed\n }\n trait TypeVal<T> {\n     const VAL: T;"}, {"sha": "8d5d6cb03774926416d439f78849abaa6dd0f534", "filename": "src/test/ui/issues/issue-77919.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fissues%2Fissue-77919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fissues%2Fissue-77919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77919.stderr?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -1,5 +1,5 @@\n error[E0412]: cannot find type `PhantomData` in this scope\n-  --> $DIR/issue-77919.rs:9:9\n+  --> $DIR/issue-77919.rs:10:9\n    |\n LL |     _n: PhantomData,\n    |         ^^^^^^^^^^^ not found in this scope\n@@ -10,23 +10,29 @@ LL | use std::marker::PhantomData;\n    |\n \n error[E0412]: cannot find type `VAL` in this scope\n-  --> $DIR/issue-77919.rs:11:63\n+  --> $DIR/issue-77919.rs:12:63\n    |\n LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n    |          -                                                    ^^^ not found in this scope\n    |          |\n    |          help: you might be missing a type parameter: `, VAL`\n \n error[E0046]: not all trait items implemented, missing: `VAL`\n-  --> $DIR/issue-77919.rs:11:1\n+  --> $DIR/issue-77919.rs:12:1\n    |\n LL |     const VAL: T;\n    |     ------------- `VAL` from trait\n ...\n LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `VAL` in implementation\n \n-error: aborting due to 3 previous errors\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-77919.rs:2:9\n+   |\n+LL |     [1; <Multiply<Five, Five>>::VAL];\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0046, E0412.\n+Some errors have detailed explanations: E0046, E0080, E0412.\n For more information about an error, try `rustc --explain E0046`."}, {"sha": "78a20cf8ebb05eab5f6d74fbc37b91bbeb28c38c", "filename": "src/test/ui/resolve/issue-50599.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.rs?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -2,4 +2,5 @@ fn main() {\n     const N: u32 = 1_000;\n     const M: usize = (f64::from(N) * std::f64::LOG10_2) as usize; //~ ERROR cannot find value\n     let mut digits = [0u32; M];\n+    //~^ ERROR evaluation of constant value failed\n }"}, {"sha": "effa16e55e54ea599fb5852ba93ffe51aa1a8da1", "filename": "src/test/ui/resolve/issue-50599.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.stderr?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -11,6 +11,13 @@ LL | use std::f32::consts::LOG10_2;\n LL | use std::f64::consts::LOG10_2;\n    |\n \n-error: aborting due to previous error\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-50599.rs:4:29\n+   |\n+LL |     let mut digits = [0u32; M];\n+   |                             ^ referenced constant has errors\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0425`.\n+Some errors have detailed explanations: E0080, E0425.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "51bd116fbd61c071caed3376d2ffbe5f8aa668fa", "filename": "src/test/ui/type/type-dependent-def-issue-49241.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -2,4 +2,5 @@ fn main() {\n     let v = vec![0];\n     const l: usize = v.count(); //~ ERROR attempt to use a non-constant value in a constant\n     let s: [u32; l] = v.into_iter().collect();\n+    //~^ ERROR evaluation of constant value failed\n }"}, {"sha": "02f267c6c8d73419c7cb6da9f6f5c78a8109051c", "filename": "src/test/ui/type/type-dependent-def-issue-49241.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a811a1213bb965056488d9cad8ccaf9fd207867/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr?ref=8a811a1213bb965056488d9cad8ccaf9fd207867", "patch": "@@ -6,6 +6,13 @@ LL |     const l: usize = v.count();\n    |     |\n    |     help: consider using `let` instead of `const`: `let l`\n \n-error: aborting due to previous error\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/type-dependent-def-issue-49241.rs:4:18\n+   |\n+LL |     let s: [u32; l] = v.into_iter().collect();\n+   |                  ^ referenced constant has errors\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0435`.\n+Some errors have detailed explanations: E0080, E0435.\n+For more information about an error, try `rustc --explain E0080`."}]}