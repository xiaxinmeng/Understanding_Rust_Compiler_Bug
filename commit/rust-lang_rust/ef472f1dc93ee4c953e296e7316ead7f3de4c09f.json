{"sha": "ef472f1dc93ee4c953e296e7316ead7f3de4c09f", "node_id": "C_kwDOAAsO6NoAKGVmNDcyZjFkYzkzZWU0Yzk1M2UyOTZlNzMxNmVhZDdmM2RlNGMwOWY", "commit": {"author": {"name": "bdbai", "email": "bdbaiapp@163.com", "date": "2021-12-13T13:41:21Z"}, "committer": {"name": "bdbai", "email": "bdbaiapp@163.com", "date": "2021-12-13T13:41:21Z"}, "message": "Stabilize arc_new_cyclic", "tree": {"sha": "1c72896cb0a5926edfd9caf57fa5372af186abd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c72896cb0a5926edfd9caf57fa5372af186abd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef472f1dc93ee4c953e296e7316ead7f3de4c09f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef472f1dc93ee4c953e296e7316ead7f3de4c09f", "html_url": "https://github.com/rust-lang/rust/commit/ef472f1dc93ee4c953e296e7316ead7f3de4c09f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef472f1dc93ee4c953e296e7316ead7f3de4c09f/comments", "author": {"login": "bdbai", "id": 5270106, "node_id": "MDQ6VXNlcjUyNzAxMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/5270106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bdbai", "html_url": "https://github.com/bdbai", "followers_url": "https://api.github.com/users/bdbai/followers", "following_url": "https://api.github.com/users/bdbai/following{/other_user}", "gists_url": "https://api.github.com/users/bdbai/gists{/gist_id}", "starred_url": "https://api.github.com/users/bdbai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bdbai/subscriptions", "organizations_url": "https://api.github.com/users/bdbai/orgs", "repos_url": "https://api.github.com/users/bdbai/repos", "events_url": "https://api.github.com/users/bdbai/events{/privacy}", "received_events_url": "https://api.github.com/users/bdbai/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bdbai", "id": 5270106, "node_id": "MDQ6VXNlcjUyNzAxMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/5270106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bdbai", "html_url": "https://github.com/bdbai", "followers_url": "https://api.github.com/users/bdbai/followers", "following_url": "https://api.github.com/users/bdbai/following{/other_user}", "gists_url": "https://api.github.com/users/bdbai/gists{/gist_id}", "starred_url": "https://api.github.com/users/bdbai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bdbai/subscriptions", "organizations_url": "https://api.github.com/users/bdbai/orgs", "repos_url": "https://api.github.com/users/bdbai/repos", "events_url": "https://api.github.com/users/bdbai/events{/privacy}", "received_events_url": "https://api.github.com/users/bdbai/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d6d0899c8bf9d321ffa12426ca7ae7e3e15478a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d6d0899c8bf9d321ffa12426ca7ae7e3e15478a", "html_url": "https://github.com/rust-lang/rust/commit/6d6d0899c8bf9d321ffa12426ca7ae7e3e15478a"}], "stats": {"total": 83, "additions": 58, "deletions": 25}, "files": [{"sha": "b92fbac36d92e8f956d78b43d032a1886d8465bb", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ef472f1dc93ee4c953e296e7316ead7f3de4c09f/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef472f1dc93ee4c953e296e7316ead7f3de4c09f/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=ef472f1dc93ee4c953e296e7316ead7f3de4c09f", "patch": "@@ -374,32 +374,47 @@ impl<T> Rc<T> {\n         }\n     }\n \n-    /// Constructs a new `Rc<T>` using a weak reference to itself. Attempting\n-    /// to upgrade the weak reference before this function returns will result\n-    /// in a `None` value. However, the weak reference may be cloned freely and\n-    /// stored for use at a later time.\n+    /// Constructs a new `Rc<T>` using a closure `data_fn` that has access to a\n+    /// weak reference to the constructing `Rc<T>`.\n+    ///\n+    /// Generally, a structure circularly referencing itself, either directly or\n+    /// indirectly, should not hold a strong reference to prevent a memory leak.\n+    /// In `data_fn`, initialization of `T` can make use of the weak reference\n+    /// by cloning and storing it inside `T` for use at a later time.\n+    ///\n+    /// Since the new `Rc<T>` is not fully-constructed until `Rc<T>::new_cyclic`\n+    /// returns, calling [`upgrade`] on the weak reference inside `data_fn` will\n+    /// fail and result in a `None` value.\n+    ///\n+    /// # Panics\n+    /// If `data_fn` panics, the panic is propagated to the caller, and the\n+    /// temporary [`Weak<T>`] is dropped normally.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(arc_new_cyclic)]\n     /// #![allow(dead_code)]\n     /// use std::rc::{Rc, Weak};\n     ///\n     /// struct Gadget {\n-    ///     self_weak: Weak<Self>,\n-    ///     // ... more fields\n+    ///     me: Weak<Gadget>,\n     /// }\n+    ///\n     /// impl Gadget {\n-    ///     pub fn new() -> Rc<Self> {\n-    ///         Rc::new_cyclic(|self_weak| {\n-    ///             Gadget { self_weak: self_weak.clone(), /* ... */ }\n-    ///         })\n+    ///     /// Construct a reference counted Gadget.\n+    ///     fn new() -> Rc<Self> {\n+    ///         Rc::new_cyclic(|me| Gadget { me: me.clone() })\n+    ///     }\n+    ///\n+    ///     /// Return a reference counted pointer to Self.\n+    ///     fn me(&self) -> Rc<Self> {\n+    ///         self.me.upgrade().unwrap()\n     ///     }\n     /// }\n     /// ```\n+    /// [`upgrade`]: Weak::upgrade\n     #[cfg(not(no_global_oom_handling))]\n-    #[unstable(feature = \"arc_new_cyclic\", issue = \"75861\")]\n+    #[stable(feature = \"arc_new_cyclic\", since = \"1.59.0\")]\n     pub fn new_cyclic(data_fn: impl FnOnce(&Weak<T>) -> T) -> Rc<T> {\n         // Construct the inner in the \"uninitialized\" state with a single\n         // weak reference."}, {"sha": "4deec0146e472ffaab974bdca9d94017ec933ce0", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ef472f1dc93ee4c953e296e7316ead7f3de4c09f/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef472f1dc93ee4c953e296e7316ead7f3de4c09f/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=ef472f1dc93ee4c953e296e7316ead7f3de4c09f", "patch": "@@ -351,29 +351,47 @@ impl<T> Arc<T> {\n         unsafe { Self::from_inner(Box::leak(x).into()) }\n     }\n \n-    /// Constructs a new `Arc<T>` using a weak reference to itself. Attempting\n-    /// to upgrade the weak reference before this function returns will result\n-    /// in a `None` value. However, the weak reference may be cloned freely and\n-    /// stored for use at a later time.\n+    /// Constructs a new `Arc<T>` using a closure `data_fn` that has access to\n+    /// a weak reference to the constructing `Arc<T>`.\n     ///\n-    /// # Examples\n+    /// Generally, a structure circularly referencing itself, either directly or\n+    /// indirectly, should not hold a strong reference to prevent a memory leak.\n+    /// In `data_fn`, initialization of `T` can make use of the weak reference\n+    /// by cloning and storing it inside `T` for use at a later time.\n+    ///\n+    /// Since the new `Arc<T>` is not fully-constructed until\n+    /// `Arc<T>::new_cyclic` returns, calling [`upgrade`] on the weak\n+    /// reference inside `data_fn` will fail and result in a `None` value.\n+    ///\n+    /// # Panics\n+    /// If `data_fn` panics, the panic is propagated to the caller, and the\n+    /// temporary [`Weak<T>`] is dropped normally.\n+    ///\n+    /// # Example\n     /// ```\n-    /// #![feature(arc_new_cyclic)]\n     /// #![allow(dead_code)]\n-    ///\n     /// use std::sync::{Arc, Weak};\n     ///\n-    /// struct Foo {\n-    ///     me: Weak<Foo>,\n+    /// struct Gadget {\n+    ///     me: Weak<Gadget>,\n     /// }\n     ///\n-    /// let foo = Arc::new_cyclic(|me| Foo {\n-    ///     me: me.clone(),\n-    /// });\n+    /// impl Gadget {\n+    ///     /// Construct a reference counted Gadget.\n+    ///     fn new() -> Arc<Self> {\n+    ///         Arc::new_cyclic(|me| Gadget { me: me.clone() })\n+    ///     }\n+    ///\n+    ///     /// Return a reference counted pointer to Self.\n+    ///     fn me(&self) -> Arc<Self> {\n+    ///         self.me.upgrade().unwrap()\n+    ///     }\n+    /// }\n     /// ```\n+    /// [`upgrade`]: Weak::upgrade\n     #[cfg(not(no_global_oom_handling))]\n     #[inline]\n-    #[unstable(feature = \"arc_new_cyclic\", issue = \"75861\")]\n+    #[stable(feature = \"arc_new_cyclic\", since = \"1.59.0\")]\n     pub fn new_cyclic(data_fn: impl FnOnce(&Weak<T>) -> T) -> Arc<T> {\n         // Construct the inner in the \"uninitialized\" state with a single\n         // weak reference."}]}