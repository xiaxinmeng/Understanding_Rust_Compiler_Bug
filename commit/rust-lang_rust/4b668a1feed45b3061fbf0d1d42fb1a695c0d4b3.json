{"sha": "4b668a1feed45b3061fbf0d1d42fb1a695c0d4b3", "node_id": "C_kwDOAAsO6NoAKDRiNjY4YTFmZWVkNDViMzA2MWZiZjBkMWQ0MmZiMWE2OTVjMGQ0YjM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-27T20:33:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-27T20:33:33Z"}, "message": "Rollup merge of #103718 - matklad:infer-lazy, r=dtolnay\n\nMore inference-friendly API for lazy\n\nThe signature for new was\n\n```\nfn new<F>(f: F) -> Lazy<T, F>\n```\n\nNotably, with `F` unconstrained, `T` can be literally anything, and just `let _ = Lazy::new(|| 92)` would not typecheck.\n\nThis historiacally was a necessity -- `new` is a `const` function, it couldn't have any bounds. Today though, we can move `new` under the `F: FnOnce() -> T` bound, which gives the compiler enough data to infer the type of T from closure.", "tree": {"sha": "68ccf98bcfa2d79d78ae0fbe27a4a505a056b1c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68ccf98bcfa2d79d78ae0fbe27a4a505a056b1c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b668a1feed45b3061fbf0d1d42fb1a695c0d4b3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjq1adCRBK7hj4Ov3rIwAAzuUIAFfHm46RYlGZIBCeqNHLVrVc\n2kHEqJc5kj/8KT4BJyfIJlVQP96xSrAl9QbT6WUgeUmRzqv11pLkN0zGfeES6FkC\nJIpS1DlHYNL0Us7QCnFSW5mEDoXbW5Ekcvk9Sqv6wmdjza+kDR32JO5o9vLiZcse\n5M9+MJbotjZXPQVSgUlhLD90uib8fwAmQfsMHbQ24bzVRj1t/Twggwn6rSvm8m2T\ntMOsOmHXYhVgLlkrXvlhVCBOAGc4afMc8kzR49bXDvNKJ/MmnUBafbs//s/PuZy4\nIaeXtAhwlGLCGcuGkN0uRGMzXpJNLkE8fB8OWUBSyAxf/LmLq0MFLxLZ86tvsJ4=\n=H2OU\n-----END PGP SIGNATURE-----\n", "payload": "tree 68ccf98bcfa2d79d78ae0fbe27a4a505a056b1c2\nparent db7962532610cfbfb9be17e8d6c1b48acf5ed184\nparent 3cddc8bff6d5357fc68a87c802a7f4fa3e1642a7\nauthor Michael Goulet <michael@errs.io> 1672173213 -0800\ncommitter GitHub <noreply@github.com> 1672173213 -0800\n\nRollup merge of #103718 - matklad:infer-lazy, r=dtolnay\n\nMore inference-friendly API for lazy\n\nThe signature for new was\n\n```\nfn new<F>(f: F) -> Lazy<T, F>\n```\n\nNotably, with `F` unconstrained, `T` can be literally anything, and just `let _ = Lazy::new(|| 92)` would not typecheck.\n\nThis historiacally was a necessity -- `new` is a `const` function, it couldn't have any bounds. Today though, we can move `new` under the `F: FnOnce() -> T` bound, which gives the compiler enough data to infer the type of T from closure.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b668a1feed45b3061fbf0d1d42fb1a695c0d4b3", "html_url": "https://github.com/rust-lang/rust/commit/4b668a1feed45b3061fbf0d1d42fb1a695c0d4b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b668a1feed45b3061fbf0d1d42fb1a695c0d4b3/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db7962532610cfbfb9be17e8d6c1b48acf5ed184", "url": "https://api.github.com/repos/rust-lang/rust/commits/db7962532610cfbfb9be17e8d6c1b48acf5ed184", "html_url": "https://github.com/rust-lang/rust/commit/db7962532610cfbfb9be17e8d6c1b48acf5ed184"}, {"sha": "3cddc8bff6d5357fc68a87c802a7f4fa3e1642a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cddc8bff6d5357fc68a87c802a7f4fa3e1642a7", "html_url": "https://github.com/rust-lang/rust/commit/3cddc8bff6d5357fc68a87c802a7f4fa3e1642a7"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "19f80daef1d3bc99c162d5ad00d396c6d181b4ce", "filename": "library/core/src/cell/lazy.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b668a1feed45b3061fbf0d1d42fb1a695c0d4b3/library%2Fcore%2Fsrc%2Fcell%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b668a1feed45b3061fbf0d1d42fb1a695c0d4b3/library%2Fcore%2Fsrc%2Fcell%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell%2Flazy.rs?ref=4b668a1feed45b3061fbf0d1d42fb1a695c0d4b3", "patch": "@@ -35,7 +35,7 @@ pub struct LazyCell<T, F = fn() -> T> {\n     init: Cell<Option<F>>,\n }\n \n-impl<T, F> LazyCell<T, F> {\n+impl<T, F: FnOnce() -> T> LazyCell<T, F> {\n     /// Creates a new lazy value with the given initializing function.\n     ///\n     /// # Examples\n@@ -55,9 +55,7 @@ impl<T, F> LazyCell<T, F> {\n     pub const fn new(init: F) -> LazyCell<T, F> {\n         LazyCell { cell: OnceCell::new(), init: Cell::new(Some(init)) }\n     }\n-}\n \n-impl<T, F: FnOnce() -> T> LazyCell<T, F> {\n     /// Forces the evaluation of this lazy value and returns a reference to\n     /// the result.\n     ///"}, {"sha": "c7c3c479b71db92af495eaa0407940efcdd622e9", "filename": "library/core/tests/lazy.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b668a1feed45b3061fbf0d1d42fb1a695c0d4b3/library%2Fcore%2Ftests%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b668a1feed45b3061fbf0d1d42fb1a695c0d4b3/library%2Fcore%2Ftests%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flazy.rs?ref=4b668a1feed45b3061fbf0d1d42fb1a695c0d4b3", "patch": "@@ -106,6 +106,12 @@ fn lazy_new() {\n     assert_eq!(called.get(), 1);\n }\n \n+// Check that we can infer `T` from closure's type.\n+#[test]\n+fn lazy_type_inference() {\n+    let _ = LazyCell::new(|| ());\n+}\n+\n #[test]\n fn aliasing_in_get() {\n     let x = OnceCell::new();"}, {"sha": "bf5a716fa03898dd344a31c46a89a2d643dcf226", "filename": "library/std/src/sync/lazy_lock.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4b668a1feed45b3061fbf0d1d42fb1a695c0d4b3/library%2Fstd%2Fsrc%2Fsync%2Flazy_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b668a1feed45b3061fbf0d1d42fb1a695c0d4b3/library%2Fstd%2Fsrc%2Fsync%2Flazy_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Flazy_lock.rs?ref=4b668a1feed45b3061fbf0d1d42fb1a695c0d4b3", "patch": "@@ -46,17 +46,14 @@ pub struct LazyLock<T, F = fn() -> T> {\n     cell: OnceLock<T>,\n     init: Cell<Option<F>>,\n }\n-\n-impl<T, F> LazyLock<T, F> {\n+impl<T, F: FnOnce() -> T> LazyLock<T, F> {\n     /// Creates a new lazy value with the given initializing\n     /// function.\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub const fn new(f: F) -> LazyLock<T, F> {\n         LazyLock { cell: OnceLock::new(), init: Cell::new(Some(f)) }\n     }\n-}\n \n-impl<T, F: FnOnce() -> T> LazyLock<T, F> {\n     /// Forces the evaluation of this lazy value and\n     /// returns a reference to result. This is equivalent\n     /// to the `Deref` impl, but is explicit."}, {"sha": "a5d4e25c5962a77885dcc906e5a7e8ae4babbc45", "filename": "library/std/src/sync/lazy_lock/tests.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b668a1feed45b3061fbf0d1d42fb1a695c0d4b3/library%2Fstd%2Fsrc%2Fsync%2Flazy_lock%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b668a1feed45b3061fbf0d1d42fb1a695c0d4b3/library%2Fstd%2Fsrc%2Fsync%2Flazy_lock%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Flazy_lock%2Ftests.rs?ref=4b668a1feed45b3061fbf0d1d42fb1a695c0d4b3", "patch": "@@ -136,6 +136,12 @@ fn sync_lazy_poisoning() {\n     }\n }\n \n+// Check that we can infer `T` from closure's type.\n+#[test]\n+fn lazy_type_inference() {\n+    let _ = LazyCell::new(|| ());\n+}\n+\n #[test]\n fn is_sync_send() {\n     fn assert_traits<T: Send + Sync>() {}"}]}