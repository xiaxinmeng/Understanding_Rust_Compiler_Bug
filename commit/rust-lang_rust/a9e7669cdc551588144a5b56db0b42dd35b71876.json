{"sha": "a9e7669cdc551588144a5b56db0b42dd35b71876", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZTc2NjljZGM1NTE1ODgxNDRhNWI1NmRiMGI0MmRkMzViNzE4NzY=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-12-19T03:41:20Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-12-19T07:35:53Z"}, "message": "Rebasing fixes.", "tree": {"sha": "c67441c5a1f7dbec4370a291966e4651eee8f852", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c67441c5a1f7dbec4370a291966e4651eee8f852"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9e7669cdc551588144a5b56db0b42dd35b71876", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9e7669cdc551588144a5b56db0b42dd35b71876", "html_url": "https://github.com/rust-lang/rust/commit/a9e7669cdc551588144a5b56db0b42dd35b71876", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9e7669cdc551588144a5b56db0b42dd35b71876/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4c0c0ff42e81a47c4e1e6985db62a28a8576406", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4c0c0ff42e81a47c4e1e6985db62a28a8576406", "html_url": "https://github.com/rust-lang/rust/commit/f4c0c0ff42e81a47c4e1e6985db62a28a8576406"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "5d5440b887d8941004ca2bf4011de214d297624c", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9e7669cdc551588144a5b56db0b42dd35b71876/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9e7669cdc551588144a5b56db0b42dd35b71876/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=a9e7669cdc551588144a5b56db0b42dd35b71876", "patch": "@@ -94,7 +94,7 @@ static CALLBACKS: [atomic::AtomicUint, ..MAX_CALLBACKS] =\n          atomic::INIT_ATOMIC_UINT, atomic::INIT_ATOMIC_UINT];\n static CALLBACK_CNT: atomic::AtomicUint = atomic::INIT_ATOMIC_UINT;\n \n-thread_local!(static PANICKING: Cell<bool> = Cell::new(false))\n+thread_local! { static PANICKING: Cell<bool> = Cell::new(false) }\n \n /// Invoke a closure, capturing the cause of panic if one occurs.\n ///"}, {"sha": "a39c8d6d8fed8b722c9d870edf62bd23cbd1e602", "filename": "src/libstd/sys/common/backtrace.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a9e7669cdc551588144a5b56db0b42dd35b71876/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9e7669cdc551588144a5b56db0b42dd35b71876/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs?ref=a9e7669cdc551588144a5b56db0b42dd35b71876", "patch": "@@ -40,8 +40,18 @@ pub fn demangle(writer: &mut Writer, s: &str) -> IoResult<()> {\n     // expecting, we just print it literally. Note that we must handle non-rust\n     // symbols because we could have any function in the backtrace.\n     let mut valid = true;\n+    let mut inner = s;\n     if s.len() > 4 && s.starts_with(\"_ZN\") && s.ends_with(\"E\") {\n-        let mut chars = s.slice(3, s.len() - 1).chars();\n+        inner = s.slice(3, s.len() - 1);\n+    // On Windows, dbghelp strips leading underscores, so we accept \"ZN...E\" form too.\n+    } else if s.len() > 3 && s.starts_with(\"ZN\") && s.ends_with(\"E\") {\n+        inner = s.slice(2, s.len() - 1);\n+    } else {\n+        valid = false;\n+    }\n+\n+    if valid {\n+        let mut chars = inner.chars();\n         while valid {\n             let mut i = 0;\n             for c in chars {\n@@ -58,32 +68,29 @@ pub fn demangle(writer: &mut Writer, s: &str) -> IoResult<()> {\n                 valid = false;\n             }\n         }\n-    } else {\n-        valid = false;\n     }\n \n     // Alright, let's do this.\n     if !valid {\n         try!(writer.write_str(s));\n     } else {\n-        let mut s = s.slice_from(3);\n         let mut first = true;\n-        while s.len() > 1 {\n+        while inner.len() > 0 {\n             if !first {\n                 try!(writer.write_str(\"::\"));\n             } else {\n                 first = false;\n             }\n-            let mut rest = s;\n+            let mut rest = inner;\n             while rest.char_at(0).is_numeric() {\n                 rest = rest.slice_from(1);\n             }\n-            let i: uint = from_str(s.slice_to(s.len() - rest.len())).unwrap();\n-            s = rest.slice_from(i);\n+            let i: uint = from_str(inner.slice_to(inner.len() - rest.len())).unwrap();\n+            inner = rest.slice_from(i);\n             rest = rest.slice_to(i);\n             while rest.len() > 0 {\n                 if rest.starts_with(\"$\") {\n-                    macro_rules! demangle(\n+                    macro_rules! demangle {\n                         ($($pat:expr => $demangled:expr),*) => ({\n                             $(if rest.starts_with($pat) {\n                                 try!(writer.write_str($demangled));\n@@ -95,7 +102,8 @@ pub fn demangle(writer: &mut Writer, s: &str) -> IoResult<()> {\n                             }\n \n                         })\n-                    )\n+                    }\n+\n                     // see src/librustc/back/link.rs for these mappings\n                     demangle! (\n                         \"$SP$\" => \"@\","}, {"sha": "dc21feb17a8e83c660788c6d720399debf17cb8c", "filename": "src/libstd/sys/common/thread_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9e7669cdc551588144a5b56db0b42dd35b71876/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9e7669cdc551588144a5b56db0b42dd35b71876/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs?ref=a9e7669cdc551588144a5b56db0b42dd35b71876", "patch": "@@ -23,7 +23,7 @@ struct ThreadInfo {\n     thread: Thread,\n }\n \n-thread_local!(static THREAD_INFO: RefCell<Option<ThreadInfo>> = RefCell::new(None))\n+thread_local! { static THREAD_INFO: RefCell<Option<ThreadInfo>> = RefCell::new(None) }\n \n impl ThreadInfo {\n     fn with<R>(f: |&mut ThreadInfo| -> R) -> R {"}, {"sha": "f2f543dd9697f228d5ce78b4fd6f0190c085c44a", "filename": "src/libstd/sys/windows/backtrace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9e7669cdc551588144a5b56db0b42dd35b71876/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9e7669cdc551588144a5b56db0b42dd35b71876/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs?ref=a9e7669cdc551588144a5b56db0b42dd35b71876", "patch": "@@ -304,12 +304,12 @@ pub fn write(w: &mut Writer) -> IoResult<()> {\n         Err(..) => return Ok(()),\n     };\n \n-    macro_rules! sym( ($e:expr, $t:ident) => (unsafe {\n+    macro_rules! sym{ ($e:expr, $t:ident) => (unsafe {\n         match lib.symbol($e) {\n             Ok(f) => mem::transmute::<*mut u8, $t>(f),\n             Err(..) => return Ok(())\n         }\n-    }) )\n+    }) }\n \n     // Fetch the symbols necessary from dbghelp.dll\n     let SymFromAddr = sym!(\"SymFromAddr\", SymFromAddrFn);"}]}