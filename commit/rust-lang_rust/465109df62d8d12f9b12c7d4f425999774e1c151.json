{"sha": "465109df62d8d12f9b12c7d4f425999774e1c151", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NTEwOWRmNjJkOGQxMmY5YjEyYzdkNGY0MjU5OTk3NzRlMWMxNTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-13T17:36:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-13T17:36:47Z"}, "message": "auto merge of #13452 : Ryman/rust/fix_uint_as_u, r=alexcrichton\n\nFixes #13359.", "tree": {"sha": "54f37bd1c7fb1645e786a38ef06ee71871ce2542", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54f37bd1c7fb1645e786a38ef06ee71871ce2542"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/465109df62d8d12f9b12c7d4f425999774e1c151", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/465109df62d8d12f9b12c7d4f425999774e1c151", "html_url": "https://github.com/rust-lang/rust/commit/465109df62d8d12f9b12c7d4f425999774e1c151", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/465109df62d8d12f9b12c7d4f425999774e1c151/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7240fad25e309ae5d8ebfb2b7544a1e62f9382fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/7240fad25e309ae5d8ebfb2b7544a1e62f9382fe", "html_url": "https://github.com/rust-lang/rust/commit/7240fad25e309ae5d8ebfb2b7544a1e62f9382fe"}, {"sha": "888517df4d5c83423f9722b32c6fe1b113b58208", "url": "https://api.github.com/repos/rust-lang/rust/commits/888517df4d5c83423f9722b32c6fe1b113b58208", "html_url": "https://github.com/rust-lang/rust/commit/888517df4d5c83423f9722b32c6fe1b113b58208"}], "stats": {"total": 87, "additions": 59, "deletions": 28}, "files": [{"sha": "8a85232444f69a0ba3ebc12f90882a81b1ef6e7b", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/465109df62d8d12f9b12c7d4f425999774e1c151/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/465109df62d8d12f9b12c7d4f425999774e1c151/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=465109df62d8d12f9b12c7d4f425999774e1c151", "patch": "@@ -341,10 +341,8 @@ pub fn ty_to_str(cx: &ctxt, typ: t) -> ~str {\n       ty_bot => ~\"!\",\n       ty_bool => ~\"bool\",\n       ty_char => ~\"char\",\n-      ty_int(ast::TyI) => ~\"int\",\n-      ty_int(t) => ast_util::int_ty_to_str(t),\n-      ty_uint(ast::TyU) => ~\"uint\",\n-      ty_uint(t) => ast_util::uint_ty_to_str(t),\n+      ty_int(t) => ast_util::int_ty_to_str(t, None),\n+      ty_uint(t) => ast_util::uint_ty_to_str(t, None),\n       ty_float(t) => ast_util::float_ty_to_str(t),\n       ty_box(typ) => ~\"@\" + ty_to_str(cx, typ),\n       ty_uniq(typ) => ~\"~\" + ty_to_str(cx, typ),"}, {"sha": "1674902fb96592eeb6c38e6b25b00dd5952c7b18", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/465109df62d8d12f9b12c7d4f425999774e1c151/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/465109df62d8d12f9b12c7d4f425999774e1c151/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=465109df62d8d12f9b12c7d4f425999774e1c151", "patch": "@@ -707,7 +707,7 @@ pub enum IntTy {\n \n impl fmt::Show for IntTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f.buf, \"{}\", ast_util::int_ty_to_str(*self))\n+        write!(f.buf, \"{}\", ast_util::int_ty_to_str(*self, None))\n     }\n }\n \n@@ -722,7 +722,7 @@ pub enum UintTy {\n \n impl fmt::Show for UintTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f.buf, \"{}\", ast_util::uint_ty_to_str(*self))\n+        write!(f.buf, \"{}\", ast_util::uint_ty_to_str(*self, None))\n     }\n }\n "}, {"sha": "e0b84438353bef9aedd31e728e90397ded42d940", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/465109df62d8d12f9b12c7d4f425999774e1c151/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/465109df62d8d12f9b12c7d4f425999774e1c151/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=465109df62d8d12f9b12c7d4f425999774e1c151", "patch": "@@ -132,13 +132,21 @@ pub fn is_path(e: @Expr) -> bool {\n     return match e.node { ExprPath(_) => true, _ => false };\n }\n \n-pub fn int_ty_to_str(t: IntTy) -> ~str {\n-    match t {\n-        TyI => ~\"\",\n-        TyI8 => ~\"i8\",\n-        TyI16 => ~\"i16\",\n-        TyI32 => ~\"i32\",\n-        TyI64 => ~\"i64\"\n+// Get a string representation of a signed int type, with its value.\n+// We want to avoid \"45int\" and \"-3int\" in favor of \"45\" and \"-3\"\n+pub fn int_ty_to_str(t: IntTy, val: Option<i64>) -> ~str {\n+    let s = match t {\n+        TyI if val.is_some() => \"\",\n+        TyI => \"int\",\n+        TyI8 => \"i8\",\n+        TyI16 => \"i16\",\n+        TyI32 => \"i32\",\n+        TyI64 => \"i64\"\n+    };\n+\n+    match val {\n+        Some(n) => format!(\"{}{}\", n, s),\n+        None => s.to_owned()\n     }\n }\n \n@@ -151,13 +159,21 @@ pub fn int_ty_max(t: IntTy) -> u64 {\n     }\n }\n \n-pub fn uint_ty_to_str(t: UintTy) -> ~str {\n-    match t {\n-        TyU => ~\"u\",\n-        TyU8 => ~\"u8\",\n-        TyU16 => ~\"u16\",\n-        TyU32 => ~\"u32\",\n-        TyU64 => ~\"u64\"\n+// Get a string representation of an unsigned int type, with its value.\n+// We want to avoid \"42uint\" in favor of \"42u\"\n+pub fn uint_ty_to_str(t: UintTy, val: Option<u64>) -> ~str {\n+    let s = match t {\n+        TyU if val.is_some() => \"u\",\n+        TyU => \"uint\",\n+        TyU8 => \"u8\",\n+        TyU16 => \"u16\",\n+        TyU32 => \"u32\",\n+        TyU64 => \"u64\"\n+    };\n+\n+    match val {\n+        Some(n) => format!(\"{}{}\", n, s),\n+        None => s.to_owned()\n     }\n }\n "}, {"sha": "101c748b1ec05316fc2c6194b715b8d9f3e68f8e", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/465109df62d8d12f9b12c7d4f425999774e1c151/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/465109df62d8d12f9b12c7d4f425999774e1c151/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=465109df62d8d12f9b12c7d4f425999774e1c151", "patch": "@@ -201,12 +201,8 @@ pub fn to_str(t: &Token) -> ~str {\n           res.push_char('\\'');\n           res.into_owned()\n       }\n-      LIT_INT(i, t) => {\n-          i.to_str() + ast_util::int_ty_to_str(t)\n-      }\n-      LIT_UINT(u, t) => {\n-          u.to_str() + ast_util::uint_ty_to_str(t)\n-      }\n+      LIT_INT(i, t) => ast_util::int_ty_to_str(t, Some(i)),\n+      LIT_UINT(u, t) => ast_util::uint_ty_to_str(t, Some(u)),\n       LIT_INT_UNSUFFIXED(i) => { i.to_str() }\n       LIT_FLOAT(s, t) => {\n         let mut body = StrBuf::from_str(get_ident(s).get());"}, {"sha": "f2f0df00ee4787fdd17efa2815acc1124bb5ea48", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/465109df62d8d12f9b12c7d4f425999774e1c151/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/465109df62d8d12f9b12c7d4f425999774e1c151/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=465109df62d8d12f9b12c7d4f425999774e1c151", "patch": "@@ -2171,10 +2171,10 @@ impl<'a> State<'a> {\n                 word(&mut self.s, res.into_owned())\n             }\n             ast::LitInt(i, t) => {\n-                word(&mut self.s, format!(\"{}{}\", i, ast_util::int_ty_to_str(t)))\n+                word(&mut self.s, ast_util::int_ty_to_str(t, Some(i)))\n             }\n             ast::LitUint(u, t) => {\n-                word(&mut self.s, format!(\"{}{}\", u, ast_util::uint_ty_to_str(t)))\n+                word(&mut self.s, ast_util::uint_ty_to_str(t, Some(u)))\n             }\n             ast::LitIntUnsuffixed(i) => {\n                 word(&mut self.s, format!(\"{}\", i))"}, {"sha": "07197bd3f3cae5b788800719681803efb5176837", "filename": "src/test/compile-fail/issue13359.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/465109df62d8d12f9b12c7d4f425999774e1c151/src%2Ftest%2Fcompile-fail%2Fissue13359.rs", "raw_url": "https://github.com/rust-lang/rust/raw/465109df62d8d12f9b12c7d4f425999774e1c151/src%2Ftest%2Fcompile-fail%2Fissue13359.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue13359.rs?ref=465109df62d8d12f9b12c7d4f425999774e1c151", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo(_s: i16) { }\n+\n+fn bar(_s: u32) { }\n+\n+fn main() {\n+    foo(1*(1 as int));\n+    //~^ ERROR: mismatched types: expected `i16` but found `int` (expected `i16` but found `int`)\n+\n+    bar(1*(1 as uint));\n+    //~^ ERROR: mismatched types: expected `u32` but found `uint` (expected `u32` but found `uint`)\n+}"}]}