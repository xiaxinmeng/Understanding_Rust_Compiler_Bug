{"sha": "a3e03e42e1298b49b647c8f80050421458414385", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzZTAzZTQyZTEyOThiNDliNjQ3YzhmODAwNTA0MjE0NTg0MTQzODU=", "commit": {"author": {"name": "fkjogu", "email": "fkjogu@users.noreply.github.com", "date": "2016-11-24T08:49:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-24T08:49:30Z"}, "message": "Define `bound` argument in std::sync::mpsc::sync_channel\n\nThe `bound` argument in `std::sync::mpsc::sync:channel(bound: usize)` was not defined in the documentation.", "tree": {"sha": "048440611be48b1d3c5caf40e23c89f84319f6c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/048440611be48b1d3c5caf40e23c89f84319f6c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3e03e42e1298b49b647c8f80050421458414385", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3e03e42e1298b49b647c8f80050421458414385", "html_url": "https://github.com/rust-lang/rust/commit/a3e03e42e1298b49b647c8f80050421458414385", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3e03e42e1298b49b647c8f80050421458414385/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "696fab844aef55eb4bcbeb470c01ce7d301c51ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/696fab844aef55eb4bcbeb470c01ce7d301c51ed", "html_url": "https://github.com/rust-lang/rust/commit/696fab844aef55eb4bcbeb470c01ce7d301c51ed"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "ca6e46eb15ac6451630d2159b05abc728cdbb9e4", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a3e03e42e1298b49b647c8f80050421458414385/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3e03e42e1298b49b647c8f80050421458414385/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=a3e03e42e1298b49b647c8f80050421458414385", "patch": "@@ -491,11 +491,11 @@ pub fn channel<T>() -> (Sender<T>, Receiver<T>) {\n /// becomes available. These channels differ greatly in the semantics of the\n /// sender from asynchronous channels, however.\n ///\n-/// This channel has an internal buffer on which messages will be queued. When\n-/// the internal buffer becomes full, future sends will *block* waiting for the\n-/// buffer to open up. Note that a buffer size of 0 is valid, in which case this\n-/// becomes  \"rendezvous channel\" where each send will not return until a recv\n-/// is paired with it.\n+/// This channel has an internal buffer on which messages will be queued. `bound`\n+/// specifies the buffer size. When the internal buffer becomes full, future sends\n+/// will *block* waiting for the buffer to open up. Note that a buffer size of 0\n+/// is valid, in which case this becomes  \"rendezvous channel\" where each send will\n+/// not return until a recv is paired with it.\n ///\n /// As with asynchronous channels, all senders will panic in `send` if the\n /// `Receiver` has been destroyed."}]}