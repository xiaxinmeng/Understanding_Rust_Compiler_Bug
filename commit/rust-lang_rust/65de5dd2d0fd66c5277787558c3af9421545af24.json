{"sha": "65de5dd2d0fd66c5277787558c3af9421545af24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZGU1ZGQyZDBmZDY2YzUyNzc3ODc1NThjM2FmOTQyMTU0NWFmMjQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-20T16:15:33Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-20T16:15:33Z"}, "message": "simplify even more", "tree": {"sha": "a609487519dad70ca9f4043359d1b83eaf927fbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a609487519dad70ca9f4043359d1b83eaf927fbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65de5dd2d0fd66c5277787558c3af9421545af24", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXaBalAAoJEFbW7qD8Z6xGJRcP/ifG14WknlRmWIFscXdSOnTS\n37b4Z1ZjRFlW355liybuCxLB+7NW+shZcCRuk3aYzJG8BMWk8mUIBe0nBagEqB+w\nU0XmtwhPsMTi6jigcxyjqPXGIYkmS07VynVirKrxJHoDVXuSYv7dNjom7BWuy4To\nZNwBWkJTmEdO8Q8ljjnq1mNzLhIMt1nDUr1Jhd7wJm8HgDEeuIftDD4qThoLWBGa\ntsOaYoyfZ+GQErAprTCEwC3zvdXpgd/KItnOP8KHqVTQ5GZYY1P/E7aCSIwVmdi+\nFYVfvr4lCFg7vTz2IHB9SrJhJl5ernvRvgS5NUEKGg8t/eBFpJsmhjne+oKsdD8w\noAaPASogmDYxjaOl6ZdZl4MEYXGPdYQXk0dxWSfHzki6XmbzLVJzS1L+lThlJffr\nc/ng8nBJRbUBD0OsAVEl2kh1Ei8cvZnulkuYpiE1a4NFxxd9+dyas5sMZBTy50bO\nZF+/741GDY1/uFMra6wQcDwV2hPB26cwtAeh549imgDpywlg4kmHhvch8t5EaLYu\nKW+VMvCWwW21oDKufwUD2nnUac86FhpnInh6zg2D0ozAYVlaByGtlxt36DfvarXb\nyja7uI/CPt5lE2kbCj2Gal8QvHFI3aGbXzVUCt0a6ZxAFxtOaYhigbVSyDZdR2pc\nipN+u1jwttNi0qZ7uQAO\n=g9pL\n-----END PGP SIGNATURE-----", "payload": "tree a609487519dad70ca9f4043359d1b83eaf927fbe\nparent c7039dbb2b601cff4a929e01c4941b00becadab2\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466439333 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466439333 +0200\n\nsimplify even more"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65de5dd2d0fd66c5277787558c3af9421545af24", "html_url": "https://github.com/rust-lang/rust/commit/65de5dd2d0fd66c5277787558c3af9421545af24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65de5dd2d0fd66c5277787558c3af9421545af24/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7039dbb2b601cff4a929e01c4941b00becadab2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7039dbb2b601cff4a929e01c4941b00becadab2", "html_url": "https://github.com/rust-lang/rust/commit/c7039dbb2b601cff4a929e01c4941b00becadab2"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "6b17a63b65862f57250f71b26e5b384b4ae53849", "filename": "src/primval.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/65de5dd2d0fd66c5277787558c3af9421545af24/src%2Fprimval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65de5dd2d0fd66c5277787558c3af9421545af24/src%2Fprimval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fprimval.rs?ref=65de5dd2d0fd66c5277787558c3af9421545af24", "patch": "@@ -69,32 +69,30 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n     match bin_op {\n         // can have rhs with a different numeric type\n         Shl | Shr => {\n-            // these numbers are the maximum number of bits a bitshift rhs could possibly have\n-            // e.g. u16 can be bitshifted by 0..16, so 2^4 - 1 is the largest possible bitshift\n-            let mask_bits = match left {\n-                I8(_) => 3,\n-                I16(_) => 4,\n-                I32(_) => 5,\n-                I64(_) => 6,\n-                U8(_) => 3,\n-                U16(_) => 4,\n-                U32(_) => 5,\n-                U64(_) => 6,\n+            // these numbers are the maximum number a bitshift rhs could possibly have\n+            // e.g. u16 can be bitshifted by 0..16, so masking with 0b1111 (16 - 1) will ensure we are in that range\n+            let type_bits: u32 = match left {\n+                I8(_) | U8(_) => 8,\n+                I16(_) | U16(_) => 16,\n+                I32(_) | U32(_) => 32,\n+                I64(_) | U64(_) => 64,\n                 _ => unreachable!(),\n             };\n-            let mask = (1 << mask_bits) - 1;\n+            assert!(type_bits.is_power_of_two());\n+            // turn into `u32` because `overflowing_sh{l,r}` only take `u32`\n             let r = match right {\n-                I8(i) => i as u8 & mask,\n-                I16(i) => i as u8 & mask,\n-                I32(i) => i as u8 & mask,\n-                I64(i) => i as u8 & mask,\n-                U8(i) => i as u8 & mask,\n-                U16(i) => i as u8 & mask,\n-                U32(i) => i as u8 & mask,\n-                U64(i) => i as u8 & mask,\n+                I8(i) => i as u32,\n+                I16(i) => i as u32,\n+                I32(i) => i as u32,\n+                I64(i) => i as u32,\n+                U8(i) => i as u32,\n+                U16(i) => i as u32,\n+                U32(i) => i as u32,\n+                U64(i) => i as u32,\n                 _ => panic!(\"bad MIR: bitshift rhs is not integral\"),\n             };\n-            let r = r as u32;\n+            // apply mask\n+            let r = r & (type_bits - 1);\n             macro_rules! shift {\n                 ($v:ident, $l:ident, $r:ident) => ({\n                     match bin_op {"}]}