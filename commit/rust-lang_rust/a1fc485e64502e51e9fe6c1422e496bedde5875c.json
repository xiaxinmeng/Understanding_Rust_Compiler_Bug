{"sha": "a1fc485e64502e51e9fe6c1422e496bedde5875c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZmM0ODVlNjQ1MDJlNTFlOWZlNmMxNDIyZTQ5NmJlZGRlNTg3NWM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-09T06:18:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-09T06:18:31Z"}, "message": "Rollup merge of #66050 - smaeul:patch/powerpc-abi-2, r=eddyb\n\nFix C aggregate-passing ABI on powerpc\n\nThe existing code (which looks like it was copied from MIPS) passes\naggregates by value in registers. This is wrong. According to the SVR4\npowerpc psABI, all aggregates are passed indirectly.\n\nSee #64259 for more discussion, which addresses the ABI for the special\ncase of ZSTs (empty structs).", "tree": {"sha": "54e4166179d750cc3b7f7bc2947d35249396ed00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54e4166179d750cc3b7f7bc2947d35249396ed00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1fc485e64502e51e9fe6c1422e496bedde5875c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdxlo3CRBK7hj4Ov3rIwAAdHIIAHRsTh7U783fBPsnU2UpCXXC\nIGplsCSAmAOBf5Ms9rG8OJ7iHujls8fSSukc8TGvulKN6Xe4zXv6HZrOVzSQ5Tkk\nTbUD7nHnFhohXXvFaNwbRfVk4gH2hSEpcd1NbFeG9vZOZu2X9T26VdzAtXAlEo10\nPBHIJfG3mmBUnKtCsmU1hbJp7Bzc6ch5KPODOd9W6XWfu6FvYcNYSm5JmBPWbYkA\nsxHCvg/wtKqxARhkg+362KZtKjAxu2sa2kM5BhG46v/ymruLURRViQUJMVY5wTzw\ngzJQps9Tya/PbTOnWNzxHOSEvLQ69At6kuu8cTZ+Ukz8C4hQUH6nfxS2A3yKlns=\n=hcdC\n-----END PGP SIGNATURE-----\n", "payload": "tree 54e4166179d750cc3b7f7bc2947d35249396ed00\nparent 666f9f9aa0c193715c68e068880f9c5ce75506c5\nparent e648aa8e89f4d30dd1e7242de0ce1fd660bfd422\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1573280311 +0100\ncommitter GitHub <noreply@github.com> 1573280311 +0100\n\nRollup merge of #66050 - smaeul:patch/powerpc-abi-2, r=eddyb\n\nFix C aggregate-passing ABI on powerpc\n\nThe existing code (which looks like it was copied from MIPS) passes\naggregates by value in registers. This is wrong. According to the SVR4\npowerpc psABI, all aggregates are passed indirectly.\n\nSee #64259 for more discussion, which addresses the ABI for the special\ncase of ZSTs (empty structs).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1fc485e64502e51e9fe6c1422e496bedde5875c", "html_url": "https://github.com/rust-lang/rust/commit/a1fc485e64502e51e9fe6c1422e496bedde5875c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1fc485e64502e51e9fe6c1422e496bedde5875c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "666f9f9aa0c193715c68e068880f9c5ce75506c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/666f9f9aa0c193715c68e068880f9c5ce75506c5", "html_url": "https://github.com/rust-lang/rust/commit/666f9f9aa0c193715c68e068880f9c5ce75506c5"}, {"sha": "e648aa8e89f4d30dd1e7242de0ce1fd660bfd422", "url": "https://api.github.com/repos/rust-lang/rust/commits/e648aa8e89f4d30dd1e7242de0ce1fd660bfd422", "html_url": "https://github.com/rust-lang/rust/commit/e648aa8e89f4d30dd1e7242de0ce1fd660bfd422"}], "stats": {"total": 43, "additions": 11, "deletions": 32}, "files": [{"sha": "aced12aa32acba0c266d785e920907e38be0a9a8", "filename": "src/librustc_target/abi/call/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1fc485e64502e51e9fe6c1422e496bedde5875c/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1fc485e64502e51e9fe6c1422e496bedde5875c/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=a1fc485e64502e51e9fe6c1422e496bedde5875c", "patch": "@@ -554,7 +554,7 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n             \"arm\" => arm::compute_abi_info(cx, self),\n             \"mips\" => mips::compute_abi_info(cx, self),\n             \"mips64\" => mips64::compute_abi_info(cx, self),\n-            \"powerpc\" => powerpc::compute_abi_info(cx, self),\n+            \"powerpc\" => powerpc::compute_abi_info(self),\n             \"powerpc64\" => powerpc64::compute_abi_info(cx, self),\n             \"s390x\" => s390x::compute_abi_info(cx, self),\n             \"msp430\" => msp430::compute_abi_info(self),"}, {"sha": "740bd7222f237034bbcc7a6d6dbbd430a71b6980", "filename": "src/librustc_target/abi/call/powerpc.rs", "status": "modified", "additions": 10, "deletions": 31, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a1fc485e64502e51e9fe6c1422e496bedde5875c/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1fc485e64502e51e9fe6c1422e496bedde5875c/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc.rs?ref=a1fc485e64502e51e9fe6c1422e496bedde5875c", "patch": "@@ -1,49 +1,28 @@\n-use crate::abi::call::{ArgAbi, FnAbi, Reg, Uniform};\n-use crate::abi::{HasDataLayout, LayoutOf, Size, TyLayoutMethods};\n+use crate::abi::call::{ArgAbi, FnAbi};\n \n-fn classify_ret<'a, Ty, C>(cx: &C, ret: &mut ArgAbi<'_, Ty>, offset: &mut Size)\n-    where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> + HasDataLayout\n-{\n-    if !ret.layout.is_aggregate() {\n-        ret.extend_integer_width_to(32);\n-    } else {\n+fn classify_ret<Ty>(ret: &mut ArgAbi<'_, Ty>) {\n+    if ret.layout.is_aggregate() {\n         ret.make_indirect();\n-        *offset += cx.data_layout().pointer_size;\n+    } else {\n+        ret.extend_integer_width_to(32);\n     }\n }\n \n-fn classify_arg<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'_, Ty>, offset: &mut Size)\n-    where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> + HasDataLayout\n-{\n-    let dl = cx.data_layout();\n-    let size = arg.layout.size;\n-    let align = arg.layout.align.max(dl.i32_align).min(dl.i64_align).abi;\n-\n+fn classify_arg<Ty>(arg: &mut ArgAbi<'_, Ty>) {\n     if arg.layout.is_aggregate() {\n-        arg.cast_to(Uniform {\n-            unit: Reg::i32(),\n-            total: size\n-        });\n-        if !offset.is_aligned(align) {\n-            arg.pad_with(Reg::i32());\n-        }\n+        arg.make_indirect();\n     } else {\n         arg.extend_integer_width_to(32);\n     }\n-\n-    *offset = offset.align_to(align) + size.align_to(align);\n }\n \n-pub fn compute_abi_info<'a, Ty, C>(cx: &C, fn_abi: &mut FnAbi<'_, Ty>)\n-    where Ty: TyLayoutMethods<'a, C>, C: LayoutOf<Ty = Ty> + HasDataLayout\n-{\n-    let mut offset = Size::ZERO;\n+pub fn compute_abi_info<Ty>(fn_abi: &mut FnAbi<'_, Ty>) {\n     if !fn_abi.ret.is_ignore() {\n-        classify_ret(cx, &mut fn_abi.ret, &mut offset);\n+        classify_ret(&mut fn_abi.ret);\n     }\n \n     for arg in &mut fn_abi.args {\n         if arg.is_ignore() { continue; }\n-        classify_arg(cx, arg, &mut offset);\n+        classify_arg(arg);\n     }\n }"}]}