{"sha": "7a164509d3ed0b7dfc5f79b2e0053a4abef5fb1b", "node_id": "C_kwDOAAsO6NoAKDdhMTY0NTA5ZDNlZDBiN2RmYzVmNzliMmUwMDUzYTRhYmVmNWZiMWI", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-24T12:50:12Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-24T13:10:05Z"}, "message": "Merge add_handler into catch_switch\n\nSome codegen backends may require all handlers to be immediately known", "tree": {"sha": "d1a17f132d7e118a9df1c9c1cbfade975f9821cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1a17f132d7e118a9df1c9c1cbfade975f9821cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a164509d3ed0b7dfc5f79b2e0053a4abef5fb1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a164509d3ed0b7dfc5f79b2e0053a4abef5fb1b", "html_url": "https://github.com/rust-lang/rust/commit/7a164509d3ed0b7dfc5f79b2e0053a4abef5fb1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a164509d3ed0b7dfc5f79b2e0053a4abef5fb1b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9646fa76b4876cbfe50fd89d3f179c27685f874", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9646fa76b4876cbfe50fd89d3f179c27685f874", "html_url": "https://github.com/rust-lang/rust/commit/e9646fa76b4876cbfe50fd89d3f179c27685f874"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "185aa3a5b40905f55593f7bd88531e477a81463a", "filename": "compiler/rustc_codegen_gcc/src/builder.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7a164509d3ed0b7dfc5f79b2e0053a4abef5fb1b/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a164509d3ed0b7dfc5f79b2e0053a4abef5fb1b/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs?ref=7a164509d3ed0b7dfc5f79b2e0053a4abef5fb1b", "patch": "@@ -1291,11 +1291,12 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         unimplemented!();\n     }\n \n-    fn catch_switch(&mut self, _parent: Option<RValue<'gcc>>, _unwind: Option<Block<'gcc>>, _num_handlers: usize) -> RValue<'gcc> {\n-        unimplemented!();\n-    }\n-\n-    fn add_handler(&mut self, _catch_switch: RValue<'gcc>, _handler: Block<'gcc>) {\n+    fn catch_switch(\n+        &mut self,\n+        _parent: Option<RValue<'gcc>>,\n+        _unwind: Option<Block<'gcc>>,\n+        _handlers: &[Block<'gcc>],\n+    ) -> RValue<'gcc> {\n         unimplemented!();\n     }\n "}, {"sha": "02b9f23c4d6a6171a64a19d34580dd4721159817", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7a164509d3ed0b7dfc5f79b2e0053a4abef5fb1b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a164509d3ed0b7dfc5f79b2e0053a4abef5fb1b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=7a164509d3ed0b7dfc5f79b2e0053a4abef5fb1b", "patch": "@@ -1028,25 +1028,25 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         &mut self,\n         parent: Option<&'ll Value>,\n         unwind: Option<&'ll BasicBlock>,\n-        num_handlers: usize,\n+        handlers: &[&'ll BasicBlock],\n     ) -> &'ll Value {\n         let name = cstr!(\"catchswitch\");\n         let ret = unsafe {\n             llvm::LLVMRustBuildCatchSwitch(\n                 self.llbuilder,\n                 parent,\n                 unwind,\n-                num_handlers as c_uint,\n+                handlers.len() as c_uint,\n                 name.as_ptr(),\n             )\n         };\n-        ret.expect(\"LLVM does not have support for catchswitch\")\n-    }\n-\n-    fn add_handler(&mut self, catch_switch: &'ll Value, handler: &'ll BasicBlock) {\n-        unsafe {\n-            llvm::LLVMRustAddHandler(catch_switch, handler);\n+        let ret = ret.expect(\"LLVM does not have support for catchswitch\");\n+        for handler in handlers {\n+            unsafe {\n+                llvm::LLVMRustAddHandler(ret, handler);\n+            }\n         }\n+        ret\n     }\n \n     // Atomic Operations"}, {"sha": "f51d014bfb39a97f2af4c07efccff68fe5771af8", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a164509d3ed0b7dfc5f79b2e0053a4abef5fb1b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a164509d3ed0b7dfc5f79b2e0053a4abef5fb1b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=7a164509d3ed0b7dfc5f79b2e0053a4abef5fb1b", "patch": "@@ -525,9 +525,8 @@ fn codegen_msvc_try<'ll>(\n \n         normal.ret(bx.const_i32(0));\n \n-        let cs = catchswitch.catch_switch(None, None, 2);\n-        catchswitch.add_handler(cs, catchpad_rust.llbb());\n-        catchswitch.add_handler(cs, catchpad_foreign.llbb());\n+        let cs =\n+            catchswitch.catch_switch(None, None, &[catchpad_rust.llbb(), catchpad_foreign.llbb()]);\n \n         // We can't use the TypeDescriptor defined in libpanic_unwind because it\n         // might be in another DLL and the SEH encoding only supports specifying"}, {"sha": "ee7ca7f6e4661cb5b1bb9e62fe11ca78fd67a1b3", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a164509d3ed0b7dfc5f79b2e0053a4abef5fb1b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a164509d3ed0b7dfc5f79b2e0053a4abef5fb1b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=7a164509d3ed0b7dfc5f79b2e0053a4abef5fb1b", "patch": "@@ -1346,8 +1346,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     let mut cp_bx = self.new_block(&format!(\"cp_funclet{:?}\", bb));\n                     ret_llbb = cs_bx.llbb();\n \n-                    let cs = cs_bx.catch_switch(None, None, 1);\n-                    cs_bx.add_handler(cs, cp_bx.llbb());\n+                    let cs = cs_bx.catch_switch(None, None, &[cp_bx.llbb()]);\n \n                     // The \"null\" here is actually a RTTI type descriptor for the\n                     // C++ personality function, but `catch (...)` has no type so"}, {"sha": "6c88241350f9d678ce3482861330ecf3c57d4a7c", "filename": "compiler/rustc_codegen_ssa/src/traits/builder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a164509d3ed0b7dfc5f79b2e0053a4abef5fb1b/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a164509d3ed0b7dfc5f79b2e0053a4abef5fb1b/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs?ref=7a164509d3ed0b7dfc5f79b2e0053a4abef5fb1b", "patch": "@@ -441,9 +441,8 @@ pub trait BuilderMethods<'a, 'tcx>:\n         &mut self,\n         parent: Option<Self::Value>,\n         unwind: Option<Self::BasicBlock>,\n-        num_handlers: usize,\n+        handlers: &[Self::BasicBlock],\n     ) -> Self::Value;\n-    fn add_handler(&mut self, catch_switch: Self::Value, handler: Self::BasicBlock);\n \n     fn atomic_cmpxchg(\n         &mut self,"}]}