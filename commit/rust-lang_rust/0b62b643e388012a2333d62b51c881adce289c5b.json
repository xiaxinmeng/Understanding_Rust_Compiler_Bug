{"sha": "0b62b643e388012a2333d62b51c881adce289c5b", "node_id": "C_kwDOAAsO6NoAKDBiNjJiNjQzZTM4ODAxMmEyMzMzZDYyYjUxYzg4MWFkY2UyODljNWI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-10T17:47:08Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-10T21:21:02Z"}, "message": "clippy::complexity fixes", "tree": {"sha": "9876389a9e3eddbe1ff773237f564dcdb68be246", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9876389a9e3eddbe1ff773237f564dcdb68be246"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b62b643e388012a2333d62b51c881adce289c5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b62b643e388012a2333d62b51c881adce289c5b", "html_url": "https://github.com/rust-lang/rust/commit/0b62b643e388012a2333d62b51c881adce289c5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b62b643e388012a2333d62b51c881adce289c5b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "291cadb2d8160d9cc576739d5ef7189ad34010f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/291cadb2d8160d9cc576739d5ef7189ad34010f9", "html_url": "https://github.com/rust-lang/rust/commit/291cadb2d8160d9cc576739d5ef7189ad34010f9"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "3eed2e4a11e3acbedb23d674325470538cff3b77", "filename": "src/abi/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b62b643e388012a2333d62b51c881adce289c5b/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b62b643e388012a2333d62b51c881adce289c5b/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=0b62b643e388012a2333d62b51c881adce289c5b", "patch": "@@ -25,7 +25,7 @@ fn clif_sig_from_fn_abi<'tcx>(\n ) -> Signature {\n     let call_conv = conv_to_call_conv(tcx.sess, fn_abi.conv, default_call_conv);\n \n-    let inputs = fn_abi.args.iter().map(|arg_abi| arg_abi.get_abi_param(tcx).into_iter()).flatten();\n+    let inputs = fn_abi.args.iter().flat_map(|arg_abi| arg_abi.get_abi_param(tcx).into_iter());\n \n     let (return_ptr, returns) = fn_abi.ret.get_abi_return(tcx);\n     // Sometimes the first param is an pointer to the place where the return value needs to be stored.\n@@ -513,10 +513,9 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n                 args.into_iter()\n                     .enumerate()\n                     .skip(if first_arg_override.is_some() { 1 } else { 0 })\n-                    .map(|(i, arg)| {\n+                    .flat_map(|(i, arg)| {\n                         adjust_arg_for_abi(fx, arg.value, &fn_abi.args[i], arg.is_owned).into_iter()\n-                    })\n-                    .flatten(),\n+                    }),\n             )\n             .collect::<Vec<Value>>();\n "}, {"sha": "7ad242949000d31f1c58e1fd8b19db0f827b4f0e", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b62b643e388012a2333d62b51c881adce289c5b/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b62b643e388012a2333d62b51c881adce289c5b/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=0b62b643e388012a2333d62b51c881adce289c5b", "patch": "@@ -1000,7 +1000,7 @@ fn codegen_panic_inner<'tcx>(\n     let symbol_name = fx.tcx.symbol_name(instance).name;\n \n     fx.lib_call(\n-        &*symbol_name,\n+        symbol_name,\n         args.iter().map(|&arg| AbiParam::new(fx.bcx.func.dfg.value_type(arg))).collect(),\n         vec![],\n         args,"}, {"sha": "0615c06c0fe34d63879b569b2694a433e85b2cba", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b62b643e388012a2333d62b51c881adce289c5b/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b62b643e388012a2333d62b51c881adce289c5b/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=0b62b643e388012a2333d62b51c881adce289c5b", "patch": "@@ -75,7 +75,7 @@ fn clif_type_from_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Option<types::Typ\n         ty::Adt(adt_def, _) if adt_def.repr().simd() => {\n             let (element, count) = match &tcx.layout_of(ParamEnv::reveal_all().and(ty)).unwrap().abi\n             {\n-                Abi::Vector { element, count } => (element.clone(), *count),\n+                Abi::Vector { element, count } => (*element, *count),\n                 _ => unreachable!(),\n             };\n "}, {"sha": "04e0897dad516e70a81a620709cf9b386cb194b7", "filename": "src/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b62b643e388012a2333d62b51c881adce289c5b/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b62b643e388012a2333d62b51c881adce289c5b/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=0b62b643e388012a2333d62b51c881adce289c5b", "patch": "@@ -290,7 +290,7 @@ fn data_id_for_static(\n         };\n \n         let data_id = match module.declare_data(\n-            &*symbol_name,\n+            symbol_name,\n             linkage,\n             is_mutable,\n             attrs.flags.contains(CodegenFnAttrFlags::THREAD_LOCAL),\n@@ -338,7 +338,7 @@ fn data_id_for_static(\n     };\n \n     let data_id = match module.declare_data(\n-        &*symbol_name,\n+        symbol_name,\n         linkage,\n         is_mutable,\n         attrs.flags.contains(CodegenFnAttrFlags::THREAD_LOCAL),"}, {"sha": "c4a5627e662f1d06907855640591c6cb985153c2", "filename": "src/debuginfo/emit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b62b643e388012a2333d62b51c881adce289c5b/src%2Fdebuginfo%2Femit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b62b643e388012a2333d62b51c881adce289c5b/src%2Fdebuginfo%2Femit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Femit.rs?ref=0b62b643e388012a2333d62b51c881adce289c5b", "patch": "@@ -113,7 +113,7 @@ impl Writer for WriterRelocate {\n                     offset: offset as u32,\n                     size,\n                     name: DebugRelocName::Symbol(symbol),\n-                    addend: addend as i64,\n+                    addend,\n                     kind: object::RelocationKind::Absolute,\n                 });\n                 self.write_udata(0, size)"}, {"sha": "6f96cb00df0fcf1a5c841671f0c16286e76dfa64", "filename": "src/driver/aot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b62b643e388012a2333d62b51c881adce289c5b/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b62b643e388012a2333d62b51c881adce289c5b/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=0b62b643e388012a2333d62b51c881adce289c5b", "patch": "@@ -381,7 +381,7 @@ pub(crate) fn run_aot(\n     };\n \n     if tcx.dep_graph.is_fully_enabled() {\n-        for cgu in &*cgus {\n+        for cgu in cgus {\n             tcx.ensure().codegen_unit(cgu.name());\n         }\n     }\n@@ -421,7 +421,7 @@ pub(crate) fn run_aot(\n                     CguReuse::PreLto => unreachable!(),\n                     CguReuse::PostLto => {\n                         concurrency_limiter.job_already_done();\n-                        OngoingModuleCodegen::Sync(reuse_workproduct_for_cgu(tcx, &*cgu))\n+                        OngoingModuleCodegen::Sync(reuse_workproduct_for_cgu(tcx, cgu))\n                     }\n                 }\n             })"}, {"sha": "3ba530c040f7f9236df19902f083896f6074dcc8", "filename": "src/inline_asm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b62b643e388012a2333d62b51c881adce289c5b/src%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b62b643e388012a2333d62b51c881adce289c5b/src%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finline_asm.rs?ref=0b62b643e388012a2333d62b51c881adce289c5b", "patch": "@@ -242,7 +242,7 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n                 }\n             }\n             InlineAsmOperand::Const { ref value } => {\n-                let (const_value, ty) = crate::constant::eval_mir_constant(fx, &*value)\n+                let (const_value, ty) = crate::constant::eval_mir_constant(fx, value)\n                     .unwrap_or_else(|| span_bug!(span, \"asm const cannot be resolved\"));\n                 let value = rustc_codegen_ssa::common::asm_const_to_str(\n                     fx.tcx,\n@@ -334,13 +334,13 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n             }\n             CInlineAsmOperand::Out { reg: _, late: _, place } => {\n                 if let Some(place) = place {\n-                    outputs.push((asm_gen.stack_slots_output[i].unwrap(), place.clone()));\n+                    outputs.push((asm_gen.stack_slots_output[i].unwrap(), *place));\n                 }\n             }\n             CInlineAsmOperand::InOut { reg: _, _late: _, in_value, out_place } => {\n                 inputs.push((asm_gen.stack_slots_input[i].unwrap(), in_value.load_scalar(fx)));\n                 if let Some(out_place) = out_place {\n-                    outputs.push((asm_gen.stack_slots_output[i].unwrap(), out_place.clone()));\n+                    outputs.push((asm_gen.stack_slots_output[i].unwrap(), *out_place));\n                 }\n             }\n             CInlineAsmOperand::Const { value: _ } | CInlineAsmOperand::Symbol { symbol: _ } => {}"}, {"sha": "bc227df11c8886e7a847291ed3a95d95a4bee184", "filename": "src/main_shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b62b643e388012a2333d62b51c881adce289c5b/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b62b643e388012a2333d62b51c881adce289c5b/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=0b62b643e388012a2333d62b51c881adce289c5b", "patch": "@@ -28,7 +28,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n \n     if main_def_id.is_local() {\n         let instance = Instance::mono(tcx, main_def_id).polymorphize(tcx);\n-        if !is_jit && module.get_name(&*tcx.symbol_name(instance).name).is_none() {\n+        if !is_jit && module.get_name(tcx.symbol_name(instance).name).is_none() {\n             return;\n         }\n     } else if !is_primary_cgu {"}, {"sha": "8c9ae9ba3b6b39e21ee158ea230d941f86b53745", "filename": "src/unsize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b62b643e388012a2333d62b51c881adce289c5b/src%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b62b643e388012a2333d62b51c881adce289c5b/src%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funsize.rs?ref=0b62b643e388012a2333d62b51c881adce289c5b", "patch": "@@ -55,7 +55,7 @@ pub(crate) fn unsized_info<'tcx>(\n                 old_info\n             }\n         }\n-        (_, &ty::Dynamic(ref data, ..)) => crate::vtable::get_vtable(fx, source, data.principal()),\n+        (_, ty::Dynamic(data, ..)) => crate::vtable::get_vtable(fx, source, data.principal()),\n         _ => bug!(\"unsized_info: invalid unsizing {:?} -> {:?}\", source, target),\n     }\n }"}]}