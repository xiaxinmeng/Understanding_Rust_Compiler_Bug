{"sha": "f107923cc05fdb6a85be30d0495692b47ec174b2", "node_id": "C_kwDOAAsO6NoAKGYxMDc5MjNjYzA1ZmRiNmE4NWJlMzBkMDQ5NTY5MmI0N2VjMTc0YjI", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-06-22T18:03:39Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-06-22T18:09:23Z"}, "message": "Slightly tweak invalid atomic ordering lint messages.\n\nCo-authored-by: Esteban Kuber <estebank@users.noreply.github.com>", "tree": {"sha": "a8218e469114c5bdc4150532ac9193c7562c7116", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8218e469114c5bdc4150532ac9193c7562c7116"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f107923cc05fdb6a85be30d0495692b47ec174b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f107923cc05fdb6a85be30d0495692b47ec174b2", "html_url": "https://github.com/rust-lang/rust/commit/f107923cc05fdb6a85be30d0495692b47ec174b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f107923cc05fdb6a85be30d0495692b47ec174b2/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c1f221845f41e1c5663ec7f963181c9b6be95d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c1f221845f41e1c5663ec7f963181c9b6be95d0", "html_url": "https://github.com/rust-lang/rust/commit/1c1f221845f41e1c5663ec7f963181c9b6be95d0"}], "stats": {"total": 376, "additions": 188, "deletions": 188}, "files": [{"sha": "cfd6d7ac09faa1b2d902e4317f32adc664882b3c", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f107923cc05fdb6a85be30d0495692b47ec174b2/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f107923cc05fdb6a85be30d0495692b47ec174b2/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=f107923cc05fdb6a85be30d0495692b47ec174b2", "patch": "@@ -1554,11 +1554,11 @@ impl InvalidAtomicOrdering {\n         if matches!(fail_ordering, sym::Release | sym::AcqRel) {\n             cx.struct_span_lint(INVALID_ATOMIC_ORDERING, fail_order_arg.span, |diag| {\n                 diag.build(&format!(\n-                    \"{method}'s failure ordering may not be `Release` or `AcqRel`, \\\n-                    since a failed {method} does not result in a write\",\n+                    \"`{method}`'s failure ordering may not be `Release` or `AcqRel`, \\\n+                    since a failed `{method}` does not result in a write\",\n                 ))\n                 .span_label(fail_order_arg.span, \"invalid failure ordering\")\n-                .help(\"consider using Acquire or Relaxed failure ordering instead\")\n+                .help(\"consider using `Acquire` or `Relaxed` failure ordering instead\")\n                 .emit();\n             });\n         }\n@@ -1578,14 +1578,14 @@ impl InvalidAtomicOrdering {\n                 };\n             cx.struct_span_lint(INVALID_ATOMIC_ORDERING, success_order_arg.span, |diag| {\n                 diag.build(&format!(\n-                    \"{method}'s success ordering must be at least as strong as its failure ordering\"\n+                    \"`{method}`'s success ordering must be at least as strong as its failure ordering\"\n                 ))\n-                .span_label(fail_order_arg.span, format!(\"{fail_ordering} failure ordering\"))\n-                .span_label(success_order_arg.span, format!(\"{success_ordering} success ordering\"))\n+                .span_label(fail_order_arg.span, format!(\"`{fail_ordering}` failure ordering\"))\n+                .span_label(success_order_arg.span, format!(\"`{success_ordering}` success ordering\"))\n                 .span_suggestion_short(\n                     success_order_arg.span,\n-                    format!(\"consider using {success_suggestion} success ordering instead\"),\n-                    success_suggestion.to_string(),\n+                    format!(\"consider using `{success_suggestion}` success ordering instead\"),\n+                    format!(\"std::sync::atomic::Ordering::{success_suggestion}\"),\n                     Applicability::MaybeIncorrect,\n                 )\n                 .emit();"}, {"sha": "0e0d604ae046d0307dd7ba7973639af53761b56f", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-exchange-weak.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f107923cc05fdb6a85be30d0495692b47ec174b2/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f107923cc05fdb6a85be30d0495692b47ec174b2/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.rs?ref=f107923cc05fdb6a85be30d0495692b47ec174b2", "patch": "@@ -20,43 +20,43 @@ fn main() {\n \n     // AcqRel is always forbidden as a failure ordering\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Relaxed, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Acquire, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::AcqRel, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::SeqCst, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n \n     // Release is always forbidden as a failure ordering\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Release);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Acquire, Ordering::Release);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Release, Ordering::Release);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::AcqRel, Ordering::Release);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::SeqCst, Ordering::Release);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n \n     // Release success order forbids failure order of Acquire or SeqCst\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::Acquire);\n-    //~^ ERROR compare_exchange_weak's success ordering must be at least as strong as\n+    //~^ ERROR `compare_exchange_weak`'s success ordering must be at least as strong as\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::SeqCst);\n-    //~^ ERROR compare_exchange_weak's success ordering must be at least as strong as\n+    //~^ ERROR `compare_exchange_weak`'s success ordering must be at least as strong as\n \n     // Relaxed success order also forbids failure order of Acquire or SeqCst\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::SeqCst);\n-    //~^ ERROR compare_exchange_weak's success ordering must be at least as strong as\n+    //~^ ERROR `compare_exchange_weak`'s success ordering must be at least as strong as\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Acquire);\n-    //~^ ERROR compare_exchange_weak's success ordering must be at least as strong as\n+    //~^ ERROR `compare_exchange_weak`'s success ordering must be at least as strong as\n \n     // Acquire/AcqRel forbids failure order of SeqCst\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Acquire, Ordering::SeqCst);\n-    //~^ ERROR compare_exchange_weak's success ordering must be at least as strong as\n+    //~^ ERROR `compare_exchange_weak`'s success ordering must be at least as strong as\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::AcqRel, Ordering::SeqCst);\n-    //~^ ERROR compare_exchange_weak's success ordering must be at least as strong as\n+    //~^ ERROR `compare_exchange_weak`'s success ordering must be at least as strong as\n }"}, {"sha": "d5e53418b6fb880766d13492c53fded3d45b3a6b", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-exchange-weak.stderr", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/f107923cc05fdb6a85be30d0495692b47ec174b2/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f107923cc05fdb6a85be30d0495692b47ec174b2/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.stderr?ref=f107923cc05fdb6a85be30d0495692b47ec174b2", "patch": "@@ -1,137 +1,137 @@\n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`, since a failed compare_exchange_weak does not result in a write\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:22:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Relaxed, Ordering::AcqRel);\n    |                                                                   ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = note: `#[deny(invalid_atomic_ordering)]` on by default\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`, since a failed compare_exchange_weak does not result in a write\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:24:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Acquire, Ordering::AcqRel);\n    |                                                                   ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`, since a failed compare_exchange_weak does not result in a write\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:26:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::AcqRel);\n    |                                                                   ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`, since a failed compare_exchange_weak does not result in a write\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:28:66\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::AcqRel, Ordering::AcqRel);\n    |                                                                  ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`, since a failed compare_exchange_weak does not result in a write\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:30:66\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::SeqCst, Ordering::AcqRel);\n    |                                                                  ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`, since a failed compare_exchange_weak does not result in a write\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:34:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Release);\n    |                                                                   ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`, since a failed compare_exchange_weak does not result in a write\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:36:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Acquire, Ordering::Release);\n    |                                                                   ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`, since a failed compare_exchange_weak does not result in a write\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:38:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Release, Ordering::Release);\n    |                                                                   ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`, since a failed compare_exchange_weak does not result in a write\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:40:66\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::AcqRel, Ordering::Release);\n    |                                                                  ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`, since a failed compare_exchange_weak does not result in a write\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:42:66\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::SeqCst, Ordering::Release);\n    |                                                                  ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's success ordering must be at least as strong as its failure ordering\n+error: `compare_exchange_weak`'s success ordering must be at least as strong as its failure ordering\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:46:48\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::Acquire);\n-   |                                                ^^^^^^^^^^^^^^^^^  ----------------- Acquire failure ordering\n+   |                                                ^^^^^^^^^^^^^^^^^  ----------------- `Acquire` failure ordering\n    |                                                |\n-   |                                                Release success ordering\n-   |                                                help: consider using AcqRel success ordering instead\n+   |                                                `Release` success ordering\n+   |                                                help: consider using `AcqRel` success ordering instead\n \n-error: compare_exchange_weak's success ordering must be at least as strong as its failure ordering\n+error: `compare_exchange_weak`'s success ordering must be at least as strong as its failure ordering\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:48:48\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::SeqCst);\n-   |                                                ^^^^^^^^^^^^^^^^^  ---------------- SeqCst failure ordering\n+   |                                                ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n    |                                                |\n-   |                                                Release success ordering\n-   |                                                help: consider using SeqCst success ordering instead\n+   |                                                `Release` success ordering\n+   |                                                help: consider using `SeqCst` success ordering instead\n \n-error: compare_exchange_weak's success ordering must be at least as strong as its failure ordering\n+error: `compare_exchange_weak`'s success ordering must be at least as strong as its failure ordering\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:52:48\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::SeqCst);\n-   |                                                ^^^^^^^^^^^^^^^^^  ---------------- SeqCst failure ordering\n+   |                                                ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n    |                                                |\n-   |                                                Relaxed success ordering\n-   |                                                help: consider using SeqCst success ordering instead\n+   |                                                `Relaxed` success ordering\n+   |                                                help: consider using `SeqCst` success ordering instead\n \n-error: compare_exchange_weak's success ordering must be at least as strong as its failure ordering\n+error: `compare_exchange_weak`'s success ordering must be at least as strong as its failure ordering\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:54:48\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Acquire);\n-   |                                                ^^^^^^^^^^^^^^^^^  ----------------- Acquire failure ordering\n+   |                                                ^^^^^^^^^^^^^^^^^  ----------------- `Acquire` failure ordering\n    |                                                |\n-   |                                                Relaxed success ordering\n-   |                                                help: consider using Acquire success ordering instead\n+   |                                                `Relaxed` success ordering\n+   |                                                help: consider using `Acquire` success ordering instead\n \n-error: compare_exchange_weak's success ordering must be at least as strong as its failure ordering\n+error: `compare_exchange_weak`'s success ordering must be at least as strong as its failure ordering\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:58:48\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Acquire, Ordering::SeqCst);\n-   |                                                ^^^^^^^^^^^^^^^^^  ---------------- SeqCst failure ordering\n+   |                                                ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n    |                                                |\n-   |                                                Acquire success ordering\n-   |                                                help: consider using SeqCst success ordering instead\n+   |                                                `Acquire` success ordering\n+   |                                                help: consider using `SeqCst` success ordering instead\n \n-error: compare_exchange_weak's success ordering must be at least as strong as its failure ordering\n+error: `compare_exchange_weak`'s success ordering must be at least as strong as its failure ordering\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:60:48\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::AcqRel, Ordering::SeqCst);\n-   |                                                ^^^^^^^^^^^^^^^^  ---------------- SeqCst failure ordering\n+   |                                                ^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n    |                                                |\n-   |                                                AcqRel success ordering\n-   |                                                help: consider using SeqCst success ordering instead\n+   |                                                `AcqRel` success ordering\n+   |                                                help: consider using `SeqCst` success ordering instead\n \n error: aborting due to 16 previous errors\n "}, {"sha": "da98d854262a5a9e791e40932866d18a241c1f83", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-exchange.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f107923cc05fdb6a85be30d0495692b47ec174b2/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f107923cc05fdb6a85be30d0495692b47ec174b2/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.rs?ref=f107923cc05fdb6a85be30d0495692b47ec174b2", "patch": "@@ -18,43 +18,43 @@ fn main() {\n \n     // AcqRel is always forbidden as a failure ordering\n     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n \n     // Release is always forbidden as a failure ordering\n     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Release);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::Release);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Release);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::Release);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::Release);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n \n     // Release success order forbids failure order of Acquire or SeqCst\n     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Acquire);\n-    //~^ ERROR compare_exchange's success ordering must be at least as strong as\n+    //~^ ERROR `compare_exchange`'s success ordering must be at least as strong as\n     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::SeqCst);\n-    //~^ ERROR compare_exchange's success ordering must be at least as strong as\n+    //~^ ERROR `compare_exchange`'s success ordering must be at least as strong as\n \n     // Relaxed success order also forbids failure order of Acquire or SeqCst\n     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::SeqCst);\n-    //~^ ERROR compare_exchange's success ordering must be at least as strong as\n+    //~^ ERROR `compare_exchange`'s success ordering must be at least as strong as\n     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Acquire);\n-    //~^ ERROR compare_exchange's success ordering must be at least as strong as\n+    //~^ ERROR `compare_exchange`'s success ordering must be at least as strong as\n \n     // Acquire/AcqRel forbids failure order of SeqCst\n     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::SeqCst);\n-    //~^ ERROR compare_exchange's success ordering must be at least as strong as\n+    //~^ ERROR `compare_exchange`'s success ordering must be at least as strong as\n     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::SeqCst);\n-    //~^ ERROR compare_exchange's success ordering must be at least as strong as\n+    //~^ ERROR `compare_exchange`'s success ordering must be at least as strong as\n }"}, {"sha": "41121a20dee99dabe6e6e7d2f5c0459876c31868", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-exchange.stderr", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/f107923cc05fdb6a85be30d0495692b47ec174b2/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f107923cc05fdb6a85be30d0495692b47ec174b2/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.stderr?ref=f107923cc05fdb6a85be30d0495692b47ec174b2", "patch": "@@ -1,137 +1,137 @@\n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`, since a failed compare_exchange does not result in a write\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:20:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::AcqRel);\n    |                                                         ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = note: `#[deny(invalid_atomic_ordering)]` on by default\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`, since a failed compare_exchange does not result in a write\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:22:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::AcqRel);\n    |                                                         ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`, since a failed compare_exchange does not result in a write\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:24:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::AcqRel);\n    |                                                         ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`, since a failed compare_exchange does not result in a write\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:26:56\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::AcqRel);\n    |                                                        ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`, since a failed compare_exchange does not result in a write\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:28:56\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::AcqRel);\n    |                                                        ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`, since a failed compare_exchange does not result in a write\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:32:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Release);\n    |                                                         ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`, since a failed compare_exchange does not result in a write\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:34:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::Release);\n    |                                                         ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`, since a failed compare_exchange does not result in a write\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:36:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Release);\n    |                                                         ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`, since a failed compare_exchange does not result in a write\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:38:56\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::Release);\n    |                                                        ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`, since a failed compare_exchange does not result in a write\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:40:56\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::Release);\n    |                                                        ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's success ordering must be at least as strong as its failure ordering\n+error: `compare_exchange`'s success ordering must be at least as strong as its failure ordering\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:44:38\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Acquire);\n-   |                                      ^^^^^^^^^^^^^^^^^  ----------------- Acquire failure ordering\n+   |                                      ^^^^^^^^^^^^^^^^^  ----------------- `Acquire` failure ordering\n    |                                      |\n-   |                                      Release success ordering\n-   |                                      help: consider using AcqRel success ordering instead\n+   |                                      `Release` success ordering\n+   |                                      help: consider using `AcqRel` success ordering instead\n \n-error: compare_exchange's success ordering must be at least as strong as its failure ordering\n+error: `compare_exchange`'s success ordering must be at least as strong as its failure ordering\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:46:38\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::SeqCst);\n-   |                                      ^^^^^^^^^^^^^^^^^  ---------------- SeqCst failure ordering\n+   |                                      ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n    |                                      |\n-   |                                      Release success ordering\n-   |                                      help: consider using SeqCst success ordering instead\n+   |                                      `Release` success ordering\n+   |                                      help: consider using `SeqCst` success ordering instead\n \n-error: compare_exchange's success ordering must be at least as strong as its failure ordering\n+error: `compare_exchange`'s success ordering must be at least as strong as its failure ordering\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:50:38\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::SeqCst);\n-   |                                      ^^^^^^^^^^^^^^^^^  ---------------- SeqCst failure ordering\n+   |                                      ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n    |                                      |\n-   |                                      Relaxed success ordering\n-   |                                      help: consider using SeqCst success ordering instead\n+   |                                      `Relaxed` success ordering\n+   |                                      help: consider using `SeqCst` success ordering instead\n \n-error: compare_exchange's success ordering must be at least as strong as its failure ordering\n+error: `compare_exchange`'s success ordering must be at least as strong as its failure ordering\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:52:38\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Acquire);\n-   |                                      ^^^^^^^^^^^^^^^^^  ----------------- Acquire failure ordering\n+   |                                      ^^^^^^^^^^^^^^^^^  ----------------- `Acquire` failure ordering\n    |                                      |\n-   |                                      Relaxed success ordering\n-   |                                      help: consider using Acquire success ordering instead\n+   |                                      `Relaxed` success ordering\n+   |                                      help: consider using `Acquire` success ordering instead\n \n-error: compare_exchange's success ordering must be at least as strong as its failure ordering\n+error: `compare_exchange`'s success ordering must be at least as strong as its failure ordering\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:56:38\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::SeqCst);\n-   |                                      ^^^^^^^^^^^^^^^^^  ---------------- SeqCst failure ordering\n+   |                                      ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n    |                                      |\n-   |                                      Acquire success ordering\n-   |                                      help: consider using SeqCst success ordering instead\n+   |                                      `Acquire` success ordering\n+   |                                      help: consider using `SeqCst` success ordering instead\n \n-error: compare_exchange's success ordering must be at least as strong as its failure ordering\n+error: `compare_exchange`'s success ordering must be at least as strong as its failure ordering\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:58:38\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::SeqCst);\n-   |                                      ^^^^^^^^^^^^^^^^  ---------------- SeqCst failure ordering\n+   |                                      ^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n    |                                      |\n-   |                                      AcqRel success ordering\n-   |                                      help: consider using SeqCst success ordering instead\n+   |                                      `AcqRel` success ordering\n+   |                                      help: consider using `SeqCst` success ordering instead\n \n error: aborting due to 16 previous errors\n "}, {"sha": "73eda182aa8793b0e3db9a9f54ba69d1dd2932a5", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-fetch-update.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f107923cc05fdb6a85be30d0495692b47ec174b2/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f107923cc05fdb6a85be30d0495692b47ec174b2/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.rs?ref=f107923cc05fdb6a85be30d0495692b47ec174b2", "patch": "@@ -18,43 +18,43 @@ fn main() {\n \n     // AcqRel is always forbidden as a failure ordering\n     let _ = x.fetch_update(Ordering::Relaxed, Ordering::AcqRel, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::Acquire, Ordering::AcqRel, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::Release, Ordering::AcqRel, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::AcqRel, Ordering::AcqRel, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::SeqCst, Ordering::AcqRel, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n \n     // Release is always forbidden as a failure ordering\n     let _ = x.fetch_update(Ordering::Relaxed, Ordering::Release, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::Acquire, Ordering::Release, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::Release, Ordering::Release, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::AcqRel, Ordering::Release, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::SeqCst, Ordering::Release, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n \n     // Release success order forbids failure order of Acquire or SeqCst\n     let _ = x.fetch_update(Ordering::Release, Ordering::Acquire, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's success ordering must be at least as strong as\n+    //~^ ERROR `fetch_update`'s success ordering must be at least as strong as\n     let _ = x.fetch_update(Ordering::Release, Ordering::SeqCst, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's success ordering must be at least as strong as\n+    //~^ ERROR `fetch_update`'s success ordering must be at least as strong as\n \n     // Relaxed success order also forbids failure order of Acquire or SeqCst\n     let _ = x.fetch_update(Ordering::Relaxed, Ordering::SeqCst, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's success ordering must be at least as strong as\n+    //~^ ERROR `fetch_update`'s success ordering must be at least as strong as\n     let _ = x.fetch_update(Ordering::Relaxed, Ordering::Acquire, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's success ordering must be at least as strong as\n+    //~^ ERROR `fetch_update`'s success ordering must be at least as strong as\n \n     // Acquire/AcqRel forbids failure order of SeqCst\n     let _ = x.fetch_update(Ordering::Acquire, Ordering::SeqCst, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's success ordering must be at least as strong as\n+    //~^ ERROR `fetch_update`'s success ordering must be at least as strong as\n     let _ = x.fetch_update(Ordering::AcqRel, Ordering::SeqCst, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's success ordering must be at least as strong as\n+    //~^ ERROR `fetch_update`'s success ordering must be at least as strong as\n }"}, {"sha": "7bea56d57fbab646f175d39f2d7c8f6a14abe22d", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-fetch-update.stderr", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/f107923cc05fdb6a85be30d0495692b47ec174b2/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f107923cc05fdb6a85be30d0495692b47ec174b2/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.stderr?ref=f107923cc05fdb6a85be30d0495692b47ec174b2", "patch": "@@ -1,137 +1,137 @@\n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`, since a failed fetch_update does not result in a write\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:20:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::AcqRel, |old| Some(old + 1));\n    |                                               ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = note: `#[deny(invalid_atomic_ordering)]` on by default\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`, since a failed fetch_update does not result in a write\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:22:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Acquire, Ordering::AcqRel, |old| Some(old + 1));\n    |                                               ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`, since a failed fetch_update does not result in a write\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:24:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Release, Ordering::AcqRel, |old| Some(old + 1));\n    |                                               ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`, since a failed fetch_update does not result in a write\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:26:46\n    |\n LL |     let _ = x.fetch_update(Ordering::AcqRel, Ordering::AcqRel, |old| Some(old + 1));\n    |                                              ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`, since a failed fetch_update does not result in a write\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:28:46\n    |\n LL |     let _ = x.fetch_update(Ordering::SeqCst, Ordering::AcqRel, |old| Some(old + 1));\n    |                                              ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`, since a failed fetch_update does not result in a write\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:32:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::Release, |old| Some(old + 1));\n    |                                               ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`, since a failed fetch_update does not result in a write\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:34:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Acquire, Ordering::Release, |old| Some(old + 1));\n    |                                               ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`, since a failed fetch_update does not result in a write\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:36:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Release, Ordering::Release, |old| Some(old + 1));\n    |                                               ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`, since a failed fetch_update does not result in a write\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:38:46\n    |\n LL |     let _ = x.fetch_update(Ordering::AcqRel, Ordering::Release, |old| Some(old + 1));\n    |                                              ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`, since a failed fetch_update does not result in a write\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:40:46\n    |\n LL |     let _ = x.fetch_update(Ordering::SeqCst, Ordering::Release, |old| Some(old + 1));\n    |                                              ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using Acquire or Relaxed failure ordering instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's success ordering must be at least as strong as its failure ordering\n+error: `fetch_update`'s success ordering must be at least as strong as its failure ordering\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:44:28\n    |\n LL |     let _ = x.fetch_update(Ordering::Release, Ordering::Acquire, |old| Some(old + 1));\n-   |                            ^^^^^^^^^^^^^^^^^  ----------------- Acquire failure ordering\n+   |                            ^^^^^^^^^^^^^^^^^  ----------------- `Acquire` failure ordering\n    |                            |\n-   |                            Release success ordering\n-   |                            help: consider using AcqRel success ordering instead\n+   |                            `Release` success ordering\n+   |                            help: consider using `AcqRel` success ordering instead\n \n-error: fetch_update's success ordering must be at least as strong as its failure ordering\n+error: `fetch_update`'s success ordering must be at least as strong as its failure ordering\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:46:28\n    |\n LL |     let _ = x.fetch_update(Ordering::Release, Ordering::SeqCst, |old| Some(old + 1));\n-   |                            ^^^^^^^^^^^^^^^^^  ---------------- SeqCst failure ordering\n+   |                            ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n    |                            |\n-   |                            Release success ordering\n-   |                            help: consider using SeqCst success ordering instead\n+   |                            `Release` success ordering\n+   |                            help: consider using `SeqCst` success ordering instead\n \n-error: fetch_update's success ordering must be at least as strong as its failure ordering\n+error: `fetch_update`'s success ordering must be at least as strong as its failure ordering\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:50:28\n    |\n LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::SeqCst, |old| Some(old + 1));\n-   |                            ^^^^^^^^^^^^^^^^^  ---------------- SeqCst failure ordering\n+   |                            ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n    |                            |\n-   |                            Relaxed success ordering\n-   |                            help: consider using SeqCst success ordering instead\n+   |                            `Relaxed` success ordering\n+   |                            help: consider using `SeqCst` success ordering instead\n \n-error: fetch_update's success ordering must be at least as strong as its failure ordering\n+error: `fetch_update`'s success ordering must be at least as strong as its failure ordering\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:52:28\n    |\n LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::Acquire, |old| Some(old + 1));\n-   |                            ^^^^^^^^^^^^^^^^^  ----------------- Acquire failure ordering\n+   |                            ^^^^^^^^^^^^^^^^^  ----------------- `Acquire` failure ordering\n    |                            |\n-   |                            Relaxed success ordering\n-   |                            help: consider using Acquire success ordering instead\n+   |                            `Relaxed` success ordering\n+   |                            help: consider using `Acquire` success ordering instead\n \n-error: fetch_update's success ordering must be at least as strong as its failure ordering\n+error: `fetch_update`'s success ordering must be at least as strong as its failure ordering\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:56:28\n    |\n LL |     let _ = x.fetch_update(Ordering::Acquire, Ordering::SeqCst, |old| Some(old + 1));\n-   |                            ^^^^^^^^^^^^^^^^^  ---------------- SeqCst failure ordering\n+   |                            ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n    |                            |\n-   |                            Acquire success ordering\n-   |                            help: consider using SeqCst success ordering instead\n+   |                            `Acquire` success ordering\n+   |                            help: consider using `SeqCst` success ordering instead\n \n-error: fetch_update's success ordering must be at least as strong as its failure ordering\n+error: `fetch_update`'s success ordering must be at least as strong as its failure ordering\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:58:28\n    |\n LL |     let _ = x.fetch_update(Ordering::AcqRel, Ordering::SeqCst, |old| Some(old + 1));\n-   |                            ^^^^^^^^^^^^^^^^  ---------------- SeqCst failure ordering\n+   |                            ^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n    |                            |\n-   |                            AcqRel success ordering\n-   |                            help: consider using SeqCst success ordering instead\n+   |                            `AcqRel` success ordering\n+   |                            help: consider using `SeqCst` success ordering instead\n \n error: aborting due to 16 previous errors\n "}]}