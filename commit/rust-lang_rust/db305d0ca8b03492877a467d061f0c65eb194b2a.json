{"sha": "db305d0ca8b03492877a467d061f0c65eb194b2a", "node_id": "C_kwDOAAsO6NoAKGRiMzA1ZDBjYThiMDM0OTI4NzdhNDY3ZDA2MWYwYzY1ZWIxOTRiMmE", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-31T10:43:40Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-01-21T10:25:21Z"}, "message": "Use strict provenance APIs in ty::tls", "tree": {"sha": "7dfa191a109ea04bdd9d4d3691ec2c6a21075022", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7dfa191a109ea04bdd9d4d3691ec2c6a21075022"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db305d0ca8b03492877a467d061f0c65eb194b2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db305d0ca8b03492877a467d061f0c65eb194b2a", "html_url": "https://github.com/rust-lang/rust/commit/db305d0ca8b03492877a467d061f0c65eb194b2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db305d0ca8b03492877a467d061f0c65eb194b2a/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d11b77005c9304e45db7b1321d8d4b324366e2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d11b77005c9304e45db7b1321d8d4b324366e2f", "html_url": "https://github.com/rust-lang/rust/commit/0d11b77005c9304e45db7b1321d8d4b324366e2f"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "95148de251824ad0aceb5dbe48777fcbceaeddbc", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db305d0ca8b03492877a467d061f0c65eb194b2a/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db305d0ca8b03492877a467d061f0c65eb194b2a/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=db305d0ca8b03492877a467d061f0c65eb194b2a", "patch": "@@ -43,6 +43,7 @@\n #![feature(min_specialization)]\n #![feature(trusted_len)]\n #![feature(type_alias_impl_trait)]\n+#![feature(strict_provenance)]\n #![feature(associated_type_bounds)]\n #![feature(rustc_attrs)]\n #![feature(control_flow_enum)]"}, {"sha": "71b025dc1be4b6523d343cdc3269508141a92560", "filename": "compiler/rustc_middle/src/ty/context/tls.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/db305d0ca8b03492877a467d061f0c65eb194b2a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db305d0ca8b03492877a467d061f0c65eb194b2a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs?ref=db305d0ca8b03492877a467d061f0c65eb194b2a", "patch": "@@ -55,16 +55,16 @@ mod tlv {\n     /// Gets Rayon's thread-local variable, which is preserved for Rayon jobs.\n     /// This is used to get the pointer to the current `ImplicitCtxt`.\n     #[inline]\n-    pub(super) fn get_tlv() -> usize {\n-        rayon_core::tlv::get()\n+    pub(super) fn get_tlv() -> *const () {\n+        ptr::from_exposed_addr(rayon_core::tlv::get())\n     }\n \n     /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs\n     /// to `value` during the call to `f`. It is restored to its previous value after.\n     /// This is used to set the pointer to the new `ImplicitCtxt`.\n     #[inline]\n-    pub(super) fn with_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {\n-        rayon_core::tlv::with(value, f)\n+    pub(super) fn with_tlv<F: FnOnce() -> R, R>(value: *const (), f: F) -> R {\n+        rayon_core::tlv::with(value.expose_addr(), f)\n     }\n }\n \n@@ -75,34 +75,44 @@ mod tlv {\n \n     thread_local! {\n         /// A thread local variable that stores a pointer to the current `ImplicitCtxt`.\n-        static TLV: Cell<usize> = const { Cell::new(0) };\n+        static TLV: Cell<*const ()> = const { Cell::new(ptr::null()) };\n     }\n \n     /// Gets the pointer to the current `ImplicitCtxt`.\n     #[inline]\n-    pub(super) fn get_tlv() -> usize {\n+    pub(super) fn get_tlv() -> *const () {\n         TLV.with(|tlv| tlv.get())\n     }\n \n     /// Sets TLV to `value` during the call to `f`.\n     /// It is restored to its previous value after.\n     /// This is used to set the pointer to the new `ImplicitCtxt`.\n     #[inline]\n-    pub(super) fn with_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {\n+    pub(super) fn with_tlv<F: FnOnce() -> R, R>(value: *const (), f: F) -> R {\n         let old = get_tlv();\n         let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));\n         TLV.with(|tlv| tlv.set(value));\n         f()\n     }\n }\n \n+#[inline]\n+fn erase(context: &ImplicitCtxt<'_, '_>) -> *const () {\n+    context as *const _ as *const ()\n+}\n+\n+#[inline]\n+unsafe fn downcast<'a, 'tcx>(context: *const ()) -> &'a ImplicitCtxt<'a, 'tcx> {\n+    &*(context as *const ImplicitCtxt<'a, 'tcx>)\n+}\n+\n /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.\n #[inline]\n pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R\n where\n     F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,\n {\n-    tlv::with_tlv(context as *const _ as usize, || f(&context))\n+    tlv::with_tlv(erase(context), || f(&context))\n }\n \n /// Allows access to the current `ImplicitCtxt` in a closure if one is available.\n@@ -112,14 +122,14 @@ where\n     F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,\n {\n     let context = tlv::get_tlv();\n-    if context == 0 {\n+    if context.is_null() {\n         f(None)\n     } else {\n         // We could get an `ImplicitCtxt` pointer from another thread.\n         // Ensure that `ImplicitCtxt` is `Sync`.\n         sync::assert_sync::<ImplicitCtxt<'_, '_>>();\n \n-        unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }\n+        unsafe { f(Some(downcast(context))) }\n     }\n }\n "}]}