{"sha": "ae6aa22cf26fede2177abe4ff974030058885b7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlNmFhMjJjZjI2ZmVkZTIxNzdhYmU0ZmY5NzQwMzAwNTg4ODViN2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-20T11:11:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-20T11:11:19Z"}, "message": "Auto merge of #78646 - tgnottingham:packed_fingerprints, r=nnethercote\n\nUse PackedFingerprint in DepNode to reduce memory consumption", "tree": {"sha": "1ac0d18bb1c33ab1d20e77aed4c0ce78a80476ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ac0d18bb1c33ab1d20e77aed4c0ce78a80476ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae6aa22cf26fede2177abe4ff974030058885b7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae6aa22cf26fede2177abe4ff974030058885b7a", "html_url": "https://github.com/rust-lang/rust/commit/ae6aa22cf26fede2177abe4ff974030058885b7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae6aa22cf26fede2177abe4ff974030058885b7a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "172acf8f61018df3719e42e633ffd62ebecaa1e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/172acf8f61018df3719e42e633ffd62ebecaa1e7", "html_url": "https://github.com/rust-lang/rust/commit/172acf8f61018df3719e42e633ffd62ebecaa1e7"}, {"sha": "142932ab197bbb0e1f64fa22d5a0d1c3e0fec83a", "url": "https://api.github.com/repos/rust-lang/rust/commits/142932ab197bbb0e1f64fa22d5a0d1c3e0fec83a", "html_url": "https://github.com/rust-lang/rust/commit/142932ab197bbb0e1f64fa22d5a0d1c3e0fec83a"}], "stats": {"total": 83, "additions": 76, "deletions": 7}, "files": [{"sha": "01efcaf6f448d8f59778dce8a3e8989bd50fd441", "filename": "compiler/rustc_data_structures/src/fingerprint.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/ae6aa22cf26fede2177abe4ff974030058885b7a/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae6aa22cf26fede2177abe4ff974030058885b7a/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs?ref=ae6aa22cf26fede2177abe4ff974030058885b7a", "patch": "@@ -151,8 +151,67 @@ impl<D: rustc_serialize::Decoder> FingerprintDecoder for D {\n         panic!(\"Cannot decode `Fingerprint` with `{}`\", std::any::type_name::<D>());\n     }\n }\n+\n impl FingerprintDecoder for opaque::Decoder<'_> {\n     fn decode_fingerprint(&mut self) -> Result<Fingerprint, String> {\n         Fingerprint::decode_opaque(self)\n     }\n }\n+\n+// `PackedFingerprint` wraps a `Fingerprint`. Its purpose is to, on certain\n+// architectures, behave like a `Fingerprint` without alignment requirements.\n+// This behavior is only enabled on x86 and x86_64, where the impact of\n+// unaligned accesses is tolerable in small doses.\n+//\n+// This may be preferable to use in large collections of structs containing\n+// fingerprints, as it can reduce memory consumption by preventing the padding\n+// that the more strictly-aligned `Fingerprint` can introduce. An application of\n+// this is in the query dependency graph, which contains a large collection of\n+// `DepNode`s. As of this writing, the size of a `DepNode` decreases by ~30%\n+// (from 24 bytes to 17) by using the packed representation here, which\n+// noticeably decreases total memory usage when compiling large crates.\n+//\n+// The wrapped `Fingerprint` is private to reduce the chance of a client\n+// invoking undefined behavior by taking a reference to the packed field.\n+#[cfg_attr(any(target_arch = \"x86\", target_arch = \"x86_64\"), repr(packed))]\n+#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]\n+pub struct PackedFingerprint(Fingerprint);\n+\n+impl std::fmt::Display for PackedFingerprint {\n+    #[inline]\n+    fn fmt(&self, formatter: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        // Copy to avoid taking reference to packed field.\n+        let copy = self.0;\n+        copy.fmt(formatter)\n+    }\n+}\n+\n+impl<E: rustc_serialize::Encoder> Encodable<E> for PackedFingerprint {\n+    #[inline]\n+    fn encode(&self, s: &mut E) -> Result<(), E::Error> {\n+        // Copy to avoid taking reference to packed field.\n+        let copy = self.0;\n+        copy.encode(s)\n+    }\n+}\n+\n+impl<D: rustc_serialize::Decoder> Decodable<D> for PackedFingerprint {\n+    #[inline]\n+    fn decode(d: &mut D) -> Result<Self, D::Error> {\n+        Fingerprint::decode(d).map(|f| PackedFingerprint(f))\n+    }\n+}\n+\n+impl From<Fingerprint> for PackedFingerprint {\n+    #[inline]\n+    fn from(f: Fingerprint) -> PackedFingerprint {\n+        PackedFingerprint(f)\n+    }\n+}\n+\n+impl From<PackedFingerprint> for Fingerprint {\n+    #[inline]\n+    fn from(f: PackedFingerprint) -> Fingerprint {\n+        f.0\n+    }\n+}"}, {"sha": "01604477c3ee36366c97023e3cac1cf706e46308", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae6aa22cf26fede2177abe4ff974030058885b7a/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae6aa22cf26fede2177abe4ff974030058885b7a/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=ae6aa22cf26fede2177abe4ff974030058885b7a", "patch": "@@ -31,6 +31,7 @@\n #![feature(once_cell)]\n #![feature(maybe_uninit_uninit_array)]\n #![allow(rustc::default_hash_types)]\n+#![deny(unaligned_references)]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "38bc3b46b0f15f69cc61a6b408f75e5c0eb9608c", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ae6aa22cf26fede2177abe4ff974030058885b7a/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae6aa22cf26fede2177abe4ff974030058885b7a/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=ae6aa22cf26fede2177abe4ff974030058885b7a", "patch": "@@ -193,6 +193,15 @@ macro_rules! define_dep_nodes {\n \n         pub type DepNode = rustc_query_system::dep_graph::DepNode<DepKind>;\n \n+        // We keep a lot of `DepNode`s in memory during compilation. It's not\n+        // required that their size stay the same, but we don't want to change\n+        // it inadvertently. This assert just ensures we're aware of any change.\n+        #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+        static_assert_size!(DepNode, 17);\n+\n+        #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n+        static_assert_size!(DepNode, 24);\n+\n         pub trait DepNodeExt: Sized {\n             /// Construct a DepNode from the given DepKind and DefPathHash. This\n             /// method will assert that the given DepKind actually requires a\n@@ -227,7 +236,7 @@ macro_rules! define_dep_nodes {\n                 debug_assert!(kind.can_reconstruct_query_key() && kind.has_params());\n                 DepNode {\n                     kind,\n-                    hash: def_path_hash.0,\n+                    hash: def_path_hash.0.into(),\n                 }\n             }\n \n@@ -243,7 +252,7 @@ macro_rules! define_dep_nodes {\n             /// has been removed.\n             fn extract_def_id(&self, tcx: TyCtxt<'tcx>) -> Option<DefId> {\n                 if self.kind.can_reconstruct_query_key() {\n-                    let def_path_hash = DefPathHash(self.hash);\n+                    let def_path_hash = DefPathHash(self.hash.into());\n                     tcx.def_path_hash_to_def_id.as_ref()?.get(&def_path_hash).cloned()\n                 } else {\n                     None"}, {"sha": "3d9e739cd28c7e92803e7c408afbbd633e3f6c4c", "filename": "compiler/rustc_query_system/src/dep_graph/dep_node.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ae6aa22cf26fede2177abe4ff974030058885b7a/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae6aa22cf26fede2177abe4ff974030058885b7a/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=ae6aa22cf26fede2177abe4ff974030058885b7a", "patch": "@@ -44,7 +44,7 @@\n \n use super::{DepContext, DepKind};\n \n-use rustc_data_structures::fingerprint::Fingerprint;\n+use rustc_data_structures::fingerprint::{Fingerprint, PackedFingerprint};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n \n use std::fmt;\n@@ -53,7 +53,7 @@ use std::hash::Hash;\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]\n pub struct DepNode<K> {\n     pub kind: K,\n-    pub hash: Fingerprint,\n+    pub hash: PackedFingerprint,\n }\n \n impl<K: DepKind> DepNode<K> {\n@@ -62,7 +62,7 @@ impl<K: DepKind> DepNode<K> {\n     /// does not require any parameters.\n     pub fn new_no_params(kind: K) -> DepNode<K> {\n         debug_assert!(!kind.has_params());\n-        DepNode { kind, hash: Fingerprint::ZERO }\n+        DepNode { kind, hash: Fingerprint::ZERO.into() }\n     }\n \n     pub fn construct<Ctxt, Key>(tcx: Ctxt, kind: K, arg: &Key) -> DepNode<K>\n@@ -71,7 +71,7 @@ impl<K: DepKind> DepNode<K> {\n         Key: DepNodeParams<Ctxt>,\n     {\n         let hash = arg.to_fingerprint(tcx);\n-        let dep_node = DepNode { kind, hash };\n+        let dep_node = DepNode { kind, hash: hash.into() };\n \n         #[cfg(debug_assertions)]\n         {"}, {"sha": "617ec84ae71a91226689b2bb4615032d990b9210", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae6aa22cf26fede2177abe4ff974030058885b7a/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae6aa22cf26fede2177abe4ff974030058885b7a/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=ae6aa22cf26fede2177abe4ff974030058885b7a", "patch": "@@ -976,7 +976,7 @@ impl<K: DepKind> CurrentDepGraph<K> {\n             // Fingerprint::combine() is faster than sending Fingerprint\n             // through the StableHasher (at least as long as StableHasher\n             // is so slow).\n-            hash: self.anon_id_seed.combine(hasher.finish()),\n+            hash: self.anon_id_seed.combine(hasher.finish()).into(),\n         };\n \n         self.intern_node(target_dep_node, task_deps.reads, Fingerprint::ZERO)"}]}