{"sha": "e4f33d5ae789b6081b73a125d3a847cd5d43b5c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZjMzZDVhZTc4OWI2MDgxYjczYTEyNWQzYTg0N2NkNWQ0M2I1Yzg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-19T15:51:05Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-19T15:51:05Z"}, "message": "Rollup merge of #33611 - vvanders:master, r=steveklabnik\n\nAdd a note about Higher-Ranked Trait Bounds in docs on Closures.\n\nI hit a snag with lifetimes a few days ago and it wasn't until @birkenfeld pointed out Higher-Ranked Trait Bounds that I was able to solve the issue involving lifetimes on closure traits. This adds a small section in the book so that other users can find it.\n\nr? @steveklabnik", "tree": {"sha": "fa186c7c5138d0ed015741b69791a1b95f5bb60c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa186c7c5138d0ed015741b69791a1b95f5bb60c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4f33d5ae789b6081b73a125d3a847cd5d43b5c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4f33d5ae789b6081b73a125d3a847cd5d43b5c8", "html_url": "https://github.com/rust-lang/rust/commit/e4f33d5ae789b6081b73a125d3a847cd5d43b5c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4f33d5ae789b6081b73a125d3a847cd5d43b5c8/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9ca735a7b34cbe38e8ccc58d89d7a49c5b68ee2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9ca735a7b34cbe38e8ccc58d89d7a49c5b68ee2", "html_url": "https://github.com/rust-lang/rust/commit/c9ca735a7b34cbe38e8ccc58d89d7a49c5b68ee2"}, {"sha": "64feba03d76641a8eb290f3f8409d6be04b3fe11", "url": "https://api.github.com/repos/rust-lang/rust/commits/64feba03d76641a8eb290f3f8409d6be04b3fe11", "html_url": "https://github.com/rust-lang/rust/commit/64feba03d76641a8eb290f3f8409d6be04b3fe11"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "e690f4edd47deadc6616237cb64bfc8c13b47732", "filename": "src/doc/book/closures.md", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e4f33d5ae789b6081b73a125d3a847cd5d43b5c8/src%2Fdoc%2Fbook%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/e4f33d5ae789b6081b73a125d3a847cd5d43b5c8/src%2Fdoc%2Fbook%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fclosures.md?ref=e4f33d5ae789b6081b73a125d3a847cd5d43b5c8", "patch": "@@ -319,6 +319,53 @@ assert_eq!(3, answer);\n Now we take a trait object, a `&Fn`. And we have to make a reference\n to our closure when we pass it to `call_with_one`, so we use `&||`.\n \n+A quick note about closures that use explicit lifetimes. Sometimes you might have a closure\n+that takes a reference like so:\n+\n+```\n+fn call_with_ref<F>(some_closure:F) -> i32\n+    where F: Fn(&i32) -> i32 {\n+\n+    let mut value = 0;\n+    some_closure(&value)\n+}\n+```\n+\n+Normally you can specify the lifetime of the parameter to our closure. We\n+could annotate it on the function declaration:\n+\n+```ignore\n+fn call_with_ref<'a, F>(some_closure:F) -> i32 \n+    where F: Fn(&'a 32) -> i32 {\n+```\n+\n+However this presents a problem with in our case. When you specify the explict\n+lifetime on a function it binds that lifetime to the *entire* scope of the function\n+instead of just the invocation scope of our closure. This means that the borrow checker\n+will see a mutable reference in the same lifetime as our immutable reference and fail\n+to compile.\n+\n+In order to say that we only need the lifetime to be valid for the invocation scope\n+of the closure we can use Higher-Ranked Trait Bounds with the `for<...>` syntax:\n+\n+```ignore\n+fn call_with_ref<F>(some_closure:F) -> i32\n+    where F: for<'a> Fn(&'a 32) -> i32 {\n+```\n+\n+This lets the Rust compiler find the minimum lifetime to invoke our closure and \n+satisfy the borrow checker's rules. Our function then compiles and excutes as we\n+expect.\n+\n+```\n+fn call_with_ref<F>(some_closure:F) -> i32\n+    where F: for<'a> Fn(&'a i32) -> i32 {\n+\n+    let mut value = 0;\n+    some_closure(&value)\n+}\n+```\n+\n # Function pointers and closures\n \n A function pointer is kind of like a closure that has no environment. As such,"}]}