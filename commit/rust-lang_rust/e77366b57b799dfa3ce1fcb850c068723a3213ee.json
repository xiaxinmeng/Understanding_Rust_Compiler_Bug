{"sha": "e77366b57b799dfa3ce1fcb850c068723a3213ee", "node_id": "C_kwDOAAsO6NoAKGU3NzM2NmI1N2I3OTlkZmEzY2UxZmNiODUwYzA2ODcyM2EzMjEzZWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-16T18:43:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-16T18:43:04Z"}, "message": "Auto merge of #111650 - matthiaskrgr:rollup-n7w17v4, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #107680 (Hide repr attribute from doc of types without guaranteed repr)\n - #111488 (Use error term in projection if missing associated item in new solver)\n - #111533 (Handle error body in generator layout)\n - #111573 (Erase `ReError` properly)\n - #111592 (Change Vec examples to not assert exact capacity except where it is guaranteed)\n - #111610 (fix(diagnostic): wrap parens for ref impl trait param)\n - #111642 ([rustdoc] Only keep impl blocks from bodies)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ede7c5b5c1272a50cf067778a62eafc957629416", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ede7c5b5c1272a50cf067778a62eafc957629416"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e77366b57b799dfa3ce1fcb850c068723a3213ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e77366b57b799dfa3ce1fcb850c068723a3213ee", "html_url": "https://github.com/rust-lang/rust/commit/e77366b57b799dfa3ce1fcb850c068723a3213ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e77366b57b799dfa3ce1fcb850c068723a3213ee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b652d9a0fd5c5a7eeacd1ae8299166941c221230", "url": "https://api.github.com/repos/rust-lang/rust/commits/b652d9a0fd5c5a7eeacd1ae8299166941c221230", "html_url": "https://github.com/rust-lang/rust/commit/b652d9a0fd5c5a7eeacd1ae8299166941c221230"}, {"sha": "54a49769fa106b0732dcc15f68e59f4a07ffa909", "url": "https://api.github.com/repos/rust-lang/rust/commits/54a49769fa106b0732dcc15f68e59f4a07ffa909", "html_url": "https://github.com/rust-lang/rust/commit/54a49769fa106b0732dcc15f68e59f4a07ffa909"}], "stats": {"total": 348, "additions": 286, "deletions": 62}, "files": [{"sha": "d3495d3dbd71ae57703ff4ecb38e645c4c4efff1", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e77366b57b799dfa3ce1fcb850c068723a3213ee/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77366b57b799dfa3ce1fcb850c068723a3213ee/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=e77366b57b799dfa3ce1fcb850c068723a3213ee", "patch": "@@ -1514,8 +1514,8 @@ fn opaque_type_cycle_error(\n                     }\n                     if tcx.sess.opts.unstable_opts.drop_tracking_mir\n                         && let DefKind::Generator = tcx.def_kind(closure_def_id)\n+                        && let Some(generator_layout) = tcx.mir_generator_witnesses(closure_def_id)\n                     {\n-                        let generator_layout = tcx.mir_generator_witnesses(closure_def_id);\n                         for interior_ty in &generator_layout.field_tys {\n                             label_match(interior_ty.ty, interior_ty.source_info.span);\n                         }"}, {"sha": "550a87e6102bfffce5dbf3555347f7d6c6f32fc8", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 46, "deletions": 31, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/e77366b57b799dfa3ce1fcb850c068723a3213ee/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77366b57b799dfa3ce1fcb850c068723a3213ee/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=e77366b57b799dfa3ce1fcb850c068723a3213ee", "patch": "@@ -2633,47 +2633,62 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 Nothing,\n                             }\n                             let ast_generics = hir.get_generics(id.owner.def_id).unwrap();\n-                            let (sp, mut introducer) = if let Some(span) =\n-                                ast_generics.bounds_span_for_suggestions(def_id)\n-                            {\n-                                (span, Introducer::Plus)\n-                            } else if let Some(colon_span) = param.colon_span {\n-                                (colon_span.shrink_to_hi(), Introducer::Nothing)\n-                            } else {\n-                                (param.span.shrink_to_hi(), Introducer::Colon)\n-                            };\n-                            if matches!(\n-                                param.kind,\n-                                hir::GenericParamKind::Type { synthetic: true, .. },\n-                            ) {\n-                                introducer = Introducer::Plus\n-                            }\n                             let trait_def_ids: FxHashSet<DefId> = ast_generics\n                                 .bounds_for_param(def_id)\n                                 .flat_map(|bp| bp.bounds.iter())\n                                 .filter_map(|bound| bound.trait_ref()?.trait_def_id())\n                                 .collect();\n-                            if !candidates.iter().any(|t| trait_def_ids.contains(&t.def_id)) {\n-                                err.span_suggestions(\n-                                    sp,\n-                                    message(format!(\n-                                        \"restrict type parameter `{}` with\",\n-                                        param.name.ident(),\n-                                    )),\n+                            if candidates.iter().any(|t| trait_def_ids.contains(&t.def_id)) {\n+                                return;\n+                            }\n+                            let msg = message(format!(\n+                                \"restrict type parameter `{}` with\",\n+                                param.name.ident(),\n+                            ));\n+                            let bounds_span = ast_generics.bounds_span_for_suggestions(def_id);\n+                            if rcvr_ty.is_ref() && param.is_impl_trait() && bounds_span.is_some() {\n+                                err.multipart_suggestions(\n+                                    msg,\n                                     candidates.iter().map(|t| {\n-                                        format!(\n-                                            \"{} {}\",\n-                                            match introducer {\n-                                                Introducer::Plus => \" +\",\n-                                                Introducer::Colon => \":\",\n-                                                Introducer::Nothing => \"\",\n-                                            },\n-                                            self.tcx.def_path_str(t.def_id),\n-                                        )\n+                                        vec![\n+                                            (param.span.shrink_to_lo(), \"(\".to_string()),\n+                                            (\n+                                                bounds_span.unwrap(),\n+                                                format!(\" + {})\", self.tcx.def_path_str(t.def_id)),\n+                                            ),\n+                                        ]\n                                     }),\n                                     Applicability::MaybeIncorrect,\n                                 );\n+                                return;\n                             }\n+\n+                            let (sp, introducer) = if let Some(span) = bounds_span {\n+                                (span, Introducer::Plus)\n+                            } else if let Some(colon_span) = param.colon_span {\n+                                (colon_span.shrink_to_hi(), Introducer::Nothing)\n+                            } else if param.is_impl_trait() {\n+                                (param.span.shrink_to_hi(), Introducer::Plus)\n+                            } else {\n+                                (param.span.shrink_to_hi(), Introducer::Colon)\n+                            };\n+\n+                            err.span_suggestions(\n+                                sp,\n+                                msg,\n+                                candidates.iter().map(|t| {\n+                                    format!(\n+                                        \"{} {}\",\n+                                        match introducer {\n+                                            Introducer::Plus => \" +\",\n+                                            Introducer::Colon => \":\",\n+                                            Introducer::Nothing => \"\",\n+                                        },\n+                                        self.tcx.def_path_str(t.def_id)\n+                                    )\n+                                }),\n+                                Applicability::MaybeIncorrect,\n+                            );\n                             return;\n                         }\n                         Node::Item(hir::Item {"}, {"sha": "79eb48a1a315547bf2c392b8ff9f9019aa39cd76", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e77366b57b799dfa3ce1fcb850c068723a3213ee/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77366b57b799dfa3ce1fcb850c068723a3213ee/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=e77366b57b799dfa3ce1fcb850c068723a3213ee", "patch": "@@ -1516,8 +1516,11 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             if encode_opt {\n                 record!(self.tables.optimized_mir[def_id.to_def_id()] <- tcx.optimized_mir(def_id));\n \n-                if tcx.sess.opts.unstable_opts.drop_tracking_mir && let DefKind::Generator = self.tcx.def_kind(def_id) {\n-                    record!(self.tables.mir_generator_witnesses[def_id.to_def_id()] <- tcx.mir_generator_witnesses(def_id));\n+                if tcx.sess.opts.unstable_opts.drop_tracking_mir\n+                    && let DefKind::Generator = self.tcx.def_kind(def_id)\n+                    && let Some(witnesses) = tcx.mir_generator_witnesses(def_id)\n+                {\n+                    record!(self.tables.mir_generator_witnesses[def_id.to_def_id()] <- witnesses);\n                 }\n             }\n             if encode_const {"}, {"sha": "f564f5e99e815b195bbb9ae7903f64d5358989ec", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e77366b57b799dfa3ce1fcb850c068723a3213ee/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77366b57b799dfa3ce1fcb850c068723a3213ee/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=e77366b57b799dfa3ce1fcb850c068723a3213ee", "patch": "@@ -527,7 +527,7 @@ rustc_queries! {\n         }\n     }\n \n-    query mir_generator_witnesses(key: DefId) -> &'tcx mir::GeneratorLayout<'tcx> {\n+    query mir_generator_witnesses(key: DefId) -> &'tcx Option<mir::GeneratorLayout<'tcx>> {\n         arena_cache\n         desc { |tcx| \"generator witness types for `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }"}, {"sha": "e6d51c4ec9770f2f3f5bd176d0c1380c617ef88c", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e77366b57b799dfa3ce1fcb850c068723a3213ee/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77366b57b799dfa3ce1fcb850c068723a3213ee/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=e77366b57b799dfa3ce1fcb850c068723a3213ee", "patch": "@@ -1708,7 +1708,9 @@ impl<'tcx> Region<'tcx> {\n             ty::ReErased => {\n                 flags = flags | TypeFlags::HAS_RE_ERASED;\n             }\n-            ty::ReError(_) => {}\n+            ty::ReError(_) => {\n+                flags = flags | TypeFlags::HAS_FREE_REGIONS;\n+            }\n         }\n \n         debug!(\"type_flags({:?}) = {:?}\", self, flags);"}, {"sha": "eb903ebfd99fb96833877c53d598256367430a93", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e77366b57b799dfa3ce1fcb850c068723a3213ee/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77366b57b799dfa3ce1fcb850c068723a3213ee/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=e77366b57b799dfa3ce1fcb850c068723a3213ee", "patch": "@@ -668,10 +668,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         def_id: DefId,\n     ) -> impl Iterator<Item = ty::EarlyBinder<Ty<'tcx>>> {\n-        let generator_layout = &self.mir_generator_witnesses(def_id);\n+        let generator_layout = self.mir_generator_witnesses(def_id);\n         generator_layout\n-            .field_tys\n-            .iter()\n+            .as_ref()\n+            .map_or_else(|| [].iter(), |l| l.field_tys.iter())\n             .filter(|decl| !decl.ignore_for_traits)\n             .map(|decl| ty::EarlyBinder(decl.ty))\n     }"}, {"sha": "891e446942e018bafa7918242fb0266924812d5d", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e77366b57b799dfa3ce1fcb850c068723a3213ee/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77366b57b799dfa3ce1fcb850c068723a3213ee/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=e77366b57b799dfa3ce1fcb850c068723a3213ee", "patch": "@@ -1397,7 +1397,7 @@ fn create_cases<'tcx>(\n pub(crate) fn mir_generator_witnesses<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: LocalDefId,\n-) -> GeneratorLayout<'tcx> {\n+) -> Option<GeneratorLayout<'tcx>> {\n     assert!(tcx.sess.opts.unstable_opts.drop_tracking_mir);\n \n     let (body, _) = tcx.mir_promoted(def_id);\n@@ -1410,6 +1410,7 @@ pub(crate) fn mir_generator_witnesses<'tcx>(\n     // Get the interior types and substs which typeck computed\n     let movable = match *gen_ty.kind() {\n         ty::Generator(_, _, movability) => movability == hir::Movability::Movable,\n+        ty::Error(_) => return None,\n         _ => span_bug!(body.span, \"unexpected generator type {}\", gen_ty),\n     };\n \n@@ -1425,7 +1426,7 @@ pub(crate) fn mir_generator_witnesses<'tcx>(\n \n     check_suspend_tys(tcx, &generator_layout, &body);\n \n-    generator_layout\n+    Some(generator_layout)\n }\n \n impl<'tcx> MirPass<'tcx> for StateTransform {"}, {"sha": "d322807442130dfa07726d2c1652ecb7ab21638b", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e77366b57b799dfa3ce1fcb850c068723a3213ee/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77366b57b799dfa3ce1fcb850c068723a3213ee/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=e77366b57b799dfa3ce1fcb850c068723a3213ee", "patch": "@@ -124,10 +124,24 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n             };\n \n             if !assoc_def.item.defaultness(tcx).has_value() {\n-                tcx.sess.delay_span_bug(\n+                let guar = tcx.sess.delay_span_bug(\n                     tcx.def_span(assoc_def.item.def_id),\n                     \"missing value for assoc item in impl\",\n                 );\n+                let error_term = match assoc_def.item.kind {\n+                    ty::AssocKind::Const => tcx\n+                        .const_error(\n+                            tcx.type_of(goal.predicate.def_id())\n+                                .subst(tcx, goal.predicate.projection_ty.substs),\n+                            guar,\n+                        )\n+                        .into(),\n+                    ty::AssocKind::Type => tcx.ty_error(guar).into(),\n+                    ty::AssocKind::Fn => unreachable!(),\n+                };\n+                ecx.eq(goal.param_env, goal.predicate.term, error_term)\n+                    .expect(\"expected goal term to be fully unconstrained\");\n+                return ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes);\n             }\n \n             // Getting the right substitutions here is complex, e.g. given:"}, {"sha": "ea17f23434bce6c12f56744e6cd14e5cad820bb1", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e77366b57b799dfa3ce1fcb850c068723a3213ee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77366b57b799dfa3ce1fcb850c068723a3213ee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=e77366b57b799dfa3ce1fcb850c068723a3213ee", "patch": "@@ -2447,10 +2447,9 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             && generator_did.is_local()\n             // Try to avoid cycles.\n             && !generator_within_in_progress_typeck\n+            && let Some(generator_info) = self.tcx.mir_generator_witnesses(generator_did)\n         {\n-            let generator_info = &self.tcx.mir_generator_witnesses(generator_did);\n             debug!(?generator_info);\n-\n             'find_source: for (variant, source_info) in\n                 generator_info.variant_fields.iter().zip(&generator_info.variant_source_info)\n             {"}, {"sha": "82f30a26d41c5257a23e593303552f00341c8dc3", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e77366b57b799dfa3ce1fcb850c068723a3213ee/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77366b57b799dfa3ce1fcb850c068723a3213ee/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=e77366b57b799dfa3ce1fcb850c068723a3213ee", "patch": "@@ -646,14 +646,14 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///\n     /// // The vector contains no items, even though it has capacity for more\n     /// assert_eq!(vec.len(), 0);\n-    /// assert_eq!(vec.capacity(), 10);\n+    /// assert!(vec.capacity() >= 10);\n     ///\n     /// // These are all done without reallocating...\n     /// for i in 0..10 {\n     ///     vec.push(i);\n     /// }\n     /// assert_eq!(vec.len(), 10);\n-    /// assert_eq!(vec.capacity(), 10);\n+    /// assert!(vec.capacity() >= 10);\n     ///\n     /// // ...but this may make the vector reallocate\n     /// vec.push(11);\n@@ -877,7 +877,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// ```\n     /// let mut vec: Vec<i32> = Vec::with_capacity(10);\n     /// vec.push(42);\n-    /// assert_eq!(vec.capacity(), 10);\n+    /// assert!(vec.capacity() >= 10);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1028,7 +1028,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// ```\n     /// let mut vec = Vec::with_capacity(10);\n     /// vec.extend([1, 2, 3]);\n-    /// assert_eq!(vec.capacity(), 10);\n+    /// assert!(vec.capacity() >= 10);\n     /// vec.shrink_to_fit();\n     /// assert!(vec.capacity() >= 3);\n     /// ```\n@@ -1055,7 +1055,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// ```\n     /// let mut vec = Vec::with_capacity(10);\n     /// vec.extend([1, 2, 3]);\n-    /// assert_eq!(vec.capacity(), 10);\n+    /// assert!(vec.capacity() >= 10);\n     /// vec.shrink_to(4);\n     /// assert!(vec.capacity() >= 4);\n     /// vec.shrink_to(0);\n@@ -1090,7 +1090,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// let mut vec = Vec::with_capacity(10);\n     /// vec.extend([1, 2, 3]);\n     ///\n-    /// assert_eq!(vec.capacity(), 10);\n+    /// assert!(vec.capacity() >= 10);\n     /// let slice = vec.into_boxed_slice();\n     /// assert_eq!(slice.into_vec().capacity(), 3);\n     /// ```"}, {"sha": "d1c1ae6526b6ee0b59b28417563bf75ad007badd", "filename": "library/core/src/any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e77366b57b799dfa3ce1fcb850c068723a3213ee/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77366b57b799dfa3ce1fcb850c068723a3213ee/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=e77366b57b799dfa3ce1fcb850c068723a3213ee", "patch": "@@ -866,7 +866,7 @@ where\n ///\n /// A data provider provides values by calling this type's provide methods.\n #[unstable(feature = \"provide_any\", issue = \"96024\")]\n-#[repr(transparent)]\n+#[cfg_attr(not(doc), repr(transparent))] // work around https://github.com/rust-lang/rust/issues/90435\n pub struct Demand<'a>(dyn Erased<'a> + 'a);\n \n impl<'a> Demand<'a> {"}, {"sha": "b73abbbaca7ad52408b23d1c1c7a3cfb1d73feae", "filename": "library/core/src/ffi/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e77366b57b799dfa3ce1fcb850c068723a3213ee/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77366b57b799dfa3ce1fcb850c068723a3213ee/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs?ref=e77366b57b799dfa3ce1fcb850c068723a3213ee", "patch": "@@ -203,7 +203,7 @@ mod c_long_definition {\n //     be UB.\n #[doc = include_str!(\"c_void.md\")]\n #[cfg_attr(not(bootstrap), lang = \"c_void\")]\n-#[repr(u8)]\n+#[cfg_attr(not(doc), repr(u8))] // work around https://github.com/rust-lang/rust/issues/90435\n #[stable(feature = \"core_c_void\", since = \"1.30.0\")]\n pub enum c_void {\n     #[unstable(\n@@ -244,7 +244,7 @@ impl fmt::Debug for c_void {\n     target_os = \"uefi\",\n     windows,\n ))]\n-#[repr(transparent)]\n+#[cfg_attr(not(doc), repr(transparent))] // work around https://github.com/rust-lang/rust/issues/90435\n #[unstable(\n     feature = \"c_variadic\",\n     reason = \"the `c_variadic` feature has not been properly tested on \\\n@@ -296,7 +296,7 @@ impl<'f> fmt::Debug for VaListImpl<'f> {\n     not(target_os = \"uefi\"),\n     not(windows),\n ))]\n-#[repr(C)]\n+#[cfg_attr(not(doc), repr(C))] // work around https://github.com/rust-lang/rust/issues/66401\n #[derive(Debug)]\n #[unstable(\n     feature = \"c_variadic\",\n@@ -316,7 +316,7 @@ pub struct VaListImpl<'f> {\n \n /// PowerPC ABI implementation of a `va_list`.\n #[cfg(all(target_arch = \"powerpc\", not(target_os = \"uefi\"), not(windows)))]\n-#[repr(C)]\n+#[cfg_attr(not(doc), repr(C))] // work around https://github.com/rust-lang/rust/issues/66401\n #[derive(Debug)]\n #[unstable(\n     feature = \"c_variadic\",\n@@ -336,7 +336,7 @@ pub struct VaListImpl<'f> {\n \n /// s390x ABI implementation of a `va_list`.\n #[cfg(target_arch = \"s390x\")]\n-#[repr(C)]\n+#[cfg_attr(not(doc), repr(C))] // work around https://github.com/rust-lang/rust/issues/66401\n #[derive(Debug)]\n #[unstable(\n     feature = \"c_variadic\",\n@@ -355,7 +355,7 @@ pub struct VaListImpl<'f> {\n \n /// x86_64 ABI implementation of a `va_list`.\n #[cfg(all(target_arch = \"x86_64\", not(target_os = \"uefi\"), not(windows)))]\n-#[repr(C)]\n+#[cfg_attr(not(doc), repr(C))] // work around https://github.com/rust-lang/rust/issues/66401\n #[derive(Debug)]\n #[unstable(\n     feature = \"c_variadic\",\n@@ -373,7 +373,7 @@ pub struct VaListImpl<'f> {\n }\n \n /// A wrapper for a `va_list`\n-#[repr(transparent)]\n+#[cfg_attr(not(doc), repr(transparent))] // work around https://github.com/rust-lang/rust/issues/90435\n #[derive(Debug)]\n #[unstable(\n     feature = \"c_variadic\","}, {"sha": "7043ab5ff2b41815fa3138fbaf56dd57b01f1af1", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e77366b57b799dfa3ce1fcb850c068723a3213ee/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77366b57b799dfa3ce1fcb850c068723a3213ee/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=e77366b57b799dfa3ce1fcb850c068723a3213ee", "patch": "@@ -232,7 +232,7 @@ impl fmt::Debug for Context<'_> {\n ///\n /// [`Future::poll()`]: core::future::Future::poll\n /// [`Poll::Pending`]: core::task::Poll::Pending\n-#[repr(transparent)]\n+#[cfg_attr(not(doc), repr(transparent))] // work around https://github.com/rust-lang/rust/issues/66401\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub struct Waker {\n     waker: RawWaker,"}, {"sha": "e0f3c7beef68943daad4461fa70ea9bf4fdc3daa", "filename": "library/portable-simd/crates/core_simd/src/masks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e77366b57b799dfa3ce1fcb850c068723a3213ee/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77366b57b799dfa3ce1fcb850c068723a3213ee/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmasks.rs?ref=e77366b57b799dfa3ce1fcb850c068723a3213ee", "patch": "@@ -88,7 +88,7 @@ impl_element! { isize }\n /// The layout of this type is unspecified, and may change between platforms\n /// and/or Rust versions, and code should not assume that it is equivalent to\n /// `[T; LANES]`.\n-#[repr(transparent)]\n+#[cfg_attr(not(doc), repr(transparent))] // work around https://github.com/rust-lang/rust/issues/90435\n pub struct Mask<T, const LANES: usize>(mask_impl::Mask<T, LANES>)\n where\n     T: MaskElement,"}, {"sha": "8f8dc6b709053a24eb9d670d7cffa10ccb3f757f", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e77366b57b799dfa3ce1fcb850c068723a3213ee/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77366b57b799dfa3ce1fcb850c068723a3213ee/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=e77366b57b799dfa3ce1fcb850c068723a3213ee", "patch": "@@ -5,7 +5,7 @@ use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId, LocalDefIdSet};\n-use rustc_hir::intravisit::{walk_item, Visitor};\n+use rustc_hir::intravisit::{walk_body, walk_item, Visitor};\n use rustc_hir::{Node, CRATE_HIR_ID};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::TyCtxt;\n@@ -106,6 +106,7 @@ pub(crate) struct RustdocVisitor<'a, 'tcx> {\n     exact_paths: DefIdMap<Vec<Symbol>>,\n     modules: Vec<Module<'tcx>>,\n     is_importable_from_parent: bool,\n+    inside_body: bool,\n }\n \n impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n@@ -129,6 +130,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             exact_paths: Default::default(),\n             modules: vec![om],\n             is_importable_from_parent: true,\n+            inside_body: false,\n         }\n     }\n \n@@ -368,6 +370,26 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         import_id: Option<LocalDefId>,\n     ) {\n         debug!(\"visiting item {:?}\", item);\n+        if self.inside_body {\n+            // Only impls can be \"seen\" outside a body. For example:\n+            //\n+            // ```\n+            // struct Bar;\n+            //\n+            // fn foo() {\n+            //     impl Bar { fn bar() {} }\n+            // }\n+            // Bar::bar();\n+            // ```\n+            if let hir::ItemKind::Impl(impl_) = item.kind &&\n+                // Don't duplicate impls when inlining or if it's implementing a trait, we'll pick\n+                // them up regardless of where they're located.\n+                impl_.of_trait.is_none()\n+            {\n+                self.add_to_current_mod(item, None, None);\n+            }\n+            return;\n+        }\n         let name = renamed.unwrap_or(item.ident.name);\n         let tcx = self.cx.tcx;\n \n@@ -564,4 +586,10 @@ impl<'a, 'tcx> Visitor<'tcx> for RustdocVisitor<'a, 'tcx> {\n     fn visit_lifetime(&mut self, _: &hir::Lifetime) {\n         // Unneeded.\n     }\n+\n+    fn visit_body(&mut self, b: &'tcx hir::Body<'tcx>) {\n+        let prev = mem::replace(&mut self.inside_body, true);\n+        walk_body(self, b);\n+        self.inside_body = prev;\n+    }\n }"}, {"sha": "9b7688c332c44e05691f6d38cff157e1635bff70", "filename": "tests/rustdoc/nested-items-issue-111415.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e77366b57b799dfa3ce1fcb850c068723a3213ee/tests%2Frustdoc%2Fnested-items-issue-111415.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77366b57b799dfa3ce1fcb850c068723a3213ee/tests%2Frustdoc%2Fnested-items-issue-111415.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fnested-items-issue-111415.rs?ref=e77366b57b799dfa3ce1fcb850c068723a3213ee", "patch": "@@ -0,0 +1,36 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/111415>.\n+// This test ensures that only impl blocks are documented in bodies.\n+\n+#![crate_name = \"foo\"]\n+\n+// @has 'foo/index.html'\n+// Checking there are only three sections.\n+// @count - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 3\n+// @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Structs'\n+// @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Functions'\n+// @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Traits'\n+// Checking that there are only three items.\n+// @count - '//*[@id=\"main-content\"]//*[@class=\"item-name\"]' 3\n+// @has - '//*[@id=\"main-content\"]//a[@href=\"struct.Bar.html\"]' 'Bar'\n+// @has - '//*[@id=\"main-content\"]//a[@href=\"fn.foo.html\"]' 'foo'\n+// @has - '//*[@id=\"main-content\"]//a[@href=\"trait.Foo.html\"]' 'Foo'\n+\n+// Now checking that the `foo` method is visible in `Bar` page.\n+// @has 'foo/struct.Bar.html'\n+// @has - '//*[@id=\"method.foo\"]/*[@class=\"code-header\"]' 'pub fn foo()'\n+// @has - '//*[@id=\"method.bar\"]/*[@class=\"code-header\"]' 'fn bar()'\n+pub struct Bar;\n+\n+pub trait Foo {\n+    fn bar() {}\n+}\n+\n+pub fn foo() {\n+    pub mod inaccessible {}\n+    pub fn inner() {}\n+    pub const BAR: u32 = 0;\n+    impl Bar {\n+        pub fn foo() {}\n+    }\n+    impl Foo for Bar {}\n+}"}, {"sha": "addbe5d658aee5e10fe67db2a75f8a55e99ee5cd", "filename": "tests/ui/borrowck/erase-error-in-mir-drop-tracking.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e77366b57b799dfa3ce1fcb850c068723a3213ee/tests%2Fui%2Fborrowck%2Ferase-error-in-mir-drop-tracking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77366b57b799dfa3ce1fcb850c068723a3213ee/tests%2Fui%2Fborrowck%2Ferase-error-in-mir-drop-tracking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Ferase-error-in-mir-drop-tracking.rs?ref=e77366b57b799dfa3ce1fcb850c068723a3213ee", "patch": "@@ -0,0 +1,23 @@\n+// compile-flags: -Zdrop-tracking-mir\n+// edition:2021\n+\n+use std::future::Future;\n+\n+trait Client {\n+    type Connecting<'a>: Future + Send\n+    where\n+        Self: 'a;\n+\n+    fn connect(&'_ self) -> Self::Connecting<'a>;\n+    //~^ ERROR use of undeclared lifetime name `'a`\n+}\n+\n+fn call_connect<C>(c: &'_ C) -> impl '_ + Future + Send\n+where\n+    C: Client + Send + Sync,\n+{\n+    async move { c.connect().await }\n+    //~^ ERROR `C` does not live long enough\n+}\n+\n+fn main() {}"}, {"sha": "53abe3dc9521d2d6c31af99aa8e46369f3061fc0", "filename": "tests/ui/borrowck/erase-error-in-mir-drop-tracking.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e77366b57b799dfa3ce1fcb850c068723a3213ee/tests%2Fui%2Fborrowck%2Ferase-error-in-mir-drop-tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e77366b57b799dfa3ce1fcb850c068723a3213ee/tests%2Fui%2Fborrowck%2Ferase-error-in-mir-drop-tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Ferase-error-in-mir-drop-tracking.stderr?ref=e77366b57b799dfa3ce1fcb850c068723a3213ee", "patch": "@@ -0,0 +1,24 @@\n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/erase-error-in-mir-drop-tracking.rs:11:46\n+   |\n+LL |     fn connect(&'_ self) -> Self::Connecting<'a>;\n+   |                                              ^^ undeclared lifetime\n+   |\n+help: consider introducing lifetime `'a` here\n+   |\n+LL |     fn connect<'a>(&'_ self) -> Self::Connecting<'a>;\n+   |               ++++\n+help: consider introducing lifetime `'a` here\n+   |\n+LL | trait Client<'a> {\n+   |             ++++\n+\n+error: `C` does not live long enough\n+  --> $DIR/erase-error-in-mir-drop-tracking.rs:19:5\n+   |\n+LL |     async move { c.connect().await }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0261`."}, {"sha": "f99d9ab6bf860c224ca5eb7afdf8913d25218bb7", "filename": "tests/ui/generator/drop-tracking-error-body.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e77366b57b799dfa3ce1fcb850c068723a3213ee/tests%2Fui%2Fgenerator%2Fdrop-tracking-error-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77366b57b799dfa3ce1fcb850c068723a3213ee/tests%2Fui%2Fgenerator%2Fdrop-tracking-error-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fdrop-tracking-error-body.rs?ref=e77366b57b799dfa3ce1fcb850c068723a3213ee", "patch": "@@ -0,0 +1,18 @@\n+// compile-flags: -Zdrop-tracking-mir --edition=2021\n+\n+#![feature(generators)]\n+\n+pub async fn async_bad_body() {\n+    match true {} //~ ERROR non-exhaustive patterns: type `bool` is non-empty\n+}\n+\n+pub fn generator_bad_body() {\n+    || {\n+        // 'non-exhaustive pattern' only seems to be reported once, so this annotation doesn't work\n+        // keep the function around so we can make sure it doesn't ICE\n+        match true {}; // ERROR non-exhaustive patterns: type `bool` is non-empty\n+        yield ();\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "28a6892336ff2db8351e5d6d82479f9f2359646a", "filename": "tests/ui/generator/drop-tracking-error-body.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e77366b57b799dfa3ce1fcb850c068723a3213ee/tests%2Fui%2Fgenerator%2Fdrop-tracking-error-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e77366b57b799dfa3ce1fcb850c068723a3213ee/tests%2Fui%2Fgenerator%2Fdrop-tracking-error-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fdrop-tracking-error-body.stderr?ref=e77366b57b799dfa3ce1fcb850c068723a3213ee", "patch": "@@ -0,0 +1,17 @@\n+error[E0004]: non-exhaustive patterns: type `bool` is non-empty\n+  --> $DIR/drop-tracking-error-body.rs:6:11\n+   |\n+LL |     match true {}\n+   |           ^^^^\n+   |\n+   = note: the matched value is of type `bool`\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n+   |\n+LL ~     match true {\n+LL +         _ => todo!(),\n+LL ~     }\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "e87a9d28ae1f73834bebcbe062a9329e708f8b7a", "filename": "tests/ui/impl-trait/issue-103181-1.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e77366b57b799dfa3ce1fcb850c068723a3213ee/tests%2Fui%2Fimpl-trait%2Fissue-103181-1.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e77366b57b799dfa3ce1fcb850c068723a3213ee/tests%2Fui%2Fimpl-trait%2Fissue-103181-1.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-103181-1.current.stderr?ref=e77366b57b799dfa3ce1fcb850c068723a3213ee", "patch": "@@ -1,5 +1,5 @@\n error[E0046]: not all trait items implemented, missing: `Error`\n-  --> $DIR/issue-103181-1.rs:9:5\n+  --> $DIR/issue-103181-1.rs:11:5\n    |\n LL |         type Error;\n    |         ---------- `Error` from trait", "previous_filename": "tests/ui/impl-trait/issue-103181-1.stderr"}, {"sha": "e87a9d28ae1f73834bebcbe062a9329e708f8b7a", "filename": "tests/ui/impl-trait/issue-103181-1.next.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e77366b57b799dfa3ce1fcb850c068723a3213ee/tests%2Fui%2Fimpl-trait%2Fissue-103181-1.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e77366b57b799dfa3ce1fcb850c068723a3213ee/tests%2Fui%2Fimpl-trait%2Fissue-103181-1.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-103181-1.next.stderr?ref=e77366b57b799dfa3ce1fcb850c068723a3213ee", "patch": "@@ -0,0 +1,12 @@\n+error[E0046]: not all trait items implemented, missing: `Error`\n+  --> $DIR/issue-103181-1.rs:11:5\n+   |\n+LL |         type Error;\n+   |         ---------- `Error` from trait\n+LL |     }\n+LL |     impl HttpBody for () {\n+   |     ^^^^^^^^^^^^^^^^^^^^ missing `Error` in implementation\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0046`."}, {"sha": "5154abcd690704dd103ea6904e3100f588e2dc60", "filename": "tests/ui/impl-trait/issue-103181-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e77366b57b799dfa3ce1fcb850c068723a3213ee/tests%2Fui%2Fimpl-trait%2Fissue-103181-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77366b57b799dfa3ce1fcb850c068723a3213ee/tests%2Fui%2Fimpl-trait%2Fissue-103181-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-103181-1.rs?ref=e77366b57b799dfa3ce1fcb850c068723a3213ee", "patch": "@@ -1,3 +1,5 @@\n+// revisions: current next\n+//[next] compile-flags: -Ztrait-solver=next\n // edition:2021\n \n mod hyper {"}, {"sha": "8ba9e1fdd62213fc09c20324ca4d85d56323bbdf", "filename": "tests/ui/suggestions/issue-99597.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e77366b57b799dfa3ce1fcb850c068723a3213ee/tests%2Fui%2Fsuggestions%2Fissue-99597.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77366b57b799dfa3ce1fcb850c068723a3213ee/tests%2Fui%2Fsuggestions%2Fissue-99597.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-99597.rs?ref=e77366b57b799dfa3ce1fcb850c068723a3213ee", "patch": "@@ -0,0 +1,15 @@\n+#![allow(dead_code)]\n+\n+trait T1 { }\n+\n+trait T2 {\n+    fn test(&self) { }\n+}\n+\n+fn go(s: &impl T1) {\n+    //~^ SUGGESTION (\n+    s.test();\n+    //~^ ERROR no method named `test`\n+}\n+\n+fn main() { }"}, {"sha": "bdf2a07c143b4db9fab2a8fde39284028253b55f", "filename": "tests/ui/suggestions/issue-99597.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e77366b57b799dfa3ce1fcb850c068723a3213ee/tests%2Fui%2Fsuggestions%2Fissue-99597.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e77366b57b799dfa3ce1fcb850c068723a3213ee/tests%2Fui%2Fsuggestions%2Fissue-99597.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-99597.stderr?ref=e77366b57b799dfa3ce1fcb850c068723a3213ee", "patch": "@@ -0,0 +1,15 @@\n+error[E0599]: no method named `test` found for reference `&impl T1` in the current scope\n+  --> $DIR/issue-99597.rs:11:7\n+   |\n+LL |     s.test();\n+   |       ^^^^ method not found in `&impl T1`\n+   |\n+   = help: items from traits can only be used if the type parameter is bounded by the trait\n+help: the following trait defines an item `test`, perhaps you need to restrict type parameter `impl T1` with it:\n+   |\n+LL | fn go(s: &(impl T1 + T2)) {\n+   |           +        +++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}]}