{"sha": "84e450347b00ca9a06b3f763fdebff8257e210e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ZTQ1MDM0N2IwMGNhOWEwNmIzZjc2M2ZkZWJmZjgyNTdlMjEwZTg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-20T02:32:03Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:26Z"}, "message": "librustc: De-`@mut` `provided_method_sources` in the type context", "tree": {"sha": "25bc5d991ffb007e96996b5ad9a9e929acb620c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25bc5d991ffb007e96996b5ad9a9e929acb620c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84e450347b00ca9a06b3f763fdebff8257e210e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84e450347b00ca9a06b3f763fdebff8257e210e8", "html_url": "https://github.com/rust-lang/rust/commit/84e450347b00ca9a06b3f763fdebff8257e210e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84e450347b00ca9a06b3f763fdebff8257e210e8/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cf6abc84a92a2556225edbe3f6a07a39ff06a3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f", "html_url": "https://github.com/rust-lang/rust/commit/7cf6abc84a92a2556225edbe3f6a07a39ff06a3f"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "4e95247ea53c817986b8eb4c4fadbc4b1f289796", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/84e450347b00ca9a06b3f763fdebff8257e210e8/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84e450347b00ca9a06b3f763fdebff8257e210e8/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=84e450347b00ca9a06b3f763fdebff8257e210e8", "patch": "@@ -316,7 +316,7 @@ struct ctxt_ {\n     normalized_cache: @mut HashMap<t, t>,\n     lang_items: middle::lang_items::LanguageItems,\n     // A mapping of fake provided method def_ids to the default implementation\n-    provided_method_sources: @mut HashMap<ast::DefId, ast::DefId>,\n+    provided_method_sources: RefCell<HashMap<ast::DefId, ast::DefId>>,\n     supertraits: @mut HashMap<ast::DefId, @~[@TraitRef]>,\n \n     // Maps from def-id of a type or region parameter to its\n@@ -1005,7 +1005,7 @@ pub fn mk_ctxt(s: session::Session,\n         adjustments: RefCell::new(HashMap::new()),\n         normalized_cache: new_ty_hash(),\n         lang_items: lang_items,\n-        provided_method_sources: @mut HashMap::new(),\n+        provided_method_sources: RefCell::new(HashMap::new()),\n         supertraits: @mut HashMap::new(),\n         destructor_for_type: @mut HashMap::new(),\n         destructors: @mut HashSet::new(),\n@@ -3530,7 +3530,8 @@ pub fn def_has_ty_params(def: ast::Def) -> bool {\n }\n \n pub fn provided_source(cx: ctxt, id: ast::DefId) -> Option<ast::DefId> {\n-    cx.provided_method_sources.find(&id).map(|x| *x)\n+    let provided_method_sources = cx.provided_method_sources.borrow();\n+    provided_method_sources.get().find(&id).map(|x| *x)\n }\n \n pub fn provided_trait_methods(cx: ctxt, id: ast::DefId) -> ~[@Method] {\n@@ -4531,7 +4532,9 @@ pub fn populate_implementations_for_type_if_necessary(tcx: ctxt,\n         // the map. This is a bit unfortunate.\n         for method in implementation.methods.iter() {\n             for source in method.provided_source.iter() {\n-                tcx.provided_method_sources.insert(method.def_id, *source);\n+                let mut provided_method_sources =\n+                    tcx.provided_method_sources.borrow_mut();\n+                provided_method_sources.get().insert(method.def_id, *source);\n             }\n         }\n \n@@ -4580,7 +4583,9 @@ pub fn populate_implementations_for_trait_if_necessary(\n         // the map. This is a bit unfortunate.\n         for method in implementation.methods.iter() {\n             for source in method.provided_source.iter() {\n-                tcx.provided_method_sources.insert(method.def_id, *source);\n+                let mut provided_method_sources =\n+                    tcx.provided_method_sources.borrow_mut();\n+                provided_method_sources.get().insert(method.def_id, *source);\n             }\n         }\n "}, {"sha": "47f4cc5ea1523554e4eb836e76c62e306e7d0c45", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/84e450347b00ca9a06b3f763fdebff8257e210e8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84e450347b00ca9a06b3f763fdebff8257e210e8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=84e450347b00ca9a06b3f763fdebff8257e210e8", "patch": "@@ -372,8 +372,10 @@ impl CoherenceChecker {\n \n             // Pair the new synthesized ID up with the\n             // ID of the method.\n-            self.crate_context.tcx.provided_method_sources\n-                .insert(new_did, trait_method.def_id);\n+            let mut provided_method_sources =\n+                self.crate_context.tcx.provided_method_sources.borrow_mut();\n+            provided_method_sources.get().insert(new_did,\n+                                                 trait_method.def_id);\n         }\n     }\n \n@@ -653,7 +655,9 @@ impl CoherenceChecker {\n         // the map. This is a bit unfortunate.\n         for method in implementation.methods.iter() {\n             for source in method.provided_source.iter() {\n-                tcx.provided_method_sources.insert(method.def_id, *source);\n+                let mut provided_method_sources = tcx.provided_method_sources\n+                                                     .borrow_mut();\n+                provided_method_sources.get().insert(method.def_id, *source);\n             }\n         }\n "}]}