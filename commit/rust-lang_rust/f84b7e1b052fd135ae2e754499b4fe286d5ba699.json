{"sha": "f84b7e1b052fd135ae2e754499b4fe286d5ba699", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NGI3ZTFiMDUyZmQxMzVhZTJlNzU0NDk5YjRmZTI4NmQ1YmE2OTk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-22T19:28:16Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-22T22:20:04Z"}, "message": "Provide context on E0308 involving fn items", "tree": {"sha": "c8c910bf3359b602588affd5be512d2b1da68a2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8c910bf3359b602588affd5be512d2b1da68a2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f84b7e1b052fd135ae2e754499b4fe286d5ba699", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f84b7e1b052fd135ae2e754499b4fe286d5ba699", "html_url": "https://github.com/rust-lang/rust/commit/f84b7e1b052fd135ae2e754499b4fe286d5ba699", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f84b7e1b052fd135ae2e754499b4fe286d5ba699/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a39c7787ba246353178e099373b9240be0d9e603", "url": "https://api.github.com/repos/rust-lang/rust/commits/a39c7787ba246353178e099373b9240be0d9e603", "html_url": "https://github.com/rust-lang/rust/commit/a39c7787ba246353178e099373b9240be0d9e603"}], "stats": {"total": 110, "additions": 99, "deletions": 11}, "files": [{"sha": "7fdcbd31df3c5085663428ea3fb2c1cafaeff250", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f84b7e1b052fd135ae2e754499b4fe286d5ba699/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84b7e1b052fd135ae2e754499b4fe286d5ba699/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=f84b7e1b052fd135ae2e754499b4fe286d5ba699", "patch": "@@ -1256,7 +1256,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             (ty::FnDef(did1, substs1), ty::FnPtr(sig2)) => {\n                 let sig1 = self.tcx.fn_sig(*did1).subst(self.tcx, substs1);\n                 let mut values = self.cmp_fn_sig(&sig1, sig2);\n-                values.0.push_normal(format!(\n+                values.0.push_highlighted(format!(\n                     \" {{{}}}\",\n                     self.tcx.def_path_str_with_substs(*did1, substs1)\n                 ));"}, {"sha": "f4f630e94a70a184e1dea71341c0047d6dc19f5b", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f84b7e1b052fd135ae2e754499b4fe286d5ba699/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84b7e1b052fd135ae2e754499b4fe286d5ba699/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=f84b7e1b052fd135ae2e754499b4fe286d5ba699", "patch": "@@ -34,6 +34,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n         self.suggest_boxing_when_appropriate(err, expr, expected, expr_ty);\n         self.suggest_missing_await(err, expr, expected, expr_ty);\n+        self.note_need_for_fn_pointer(err, expected, expr_ty);\n     }\n \n     // Requires that the two types unify, and prints an error message if"}, {"sha": "234a573b725ee183e84664308ce4d966aacfb0c3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f84b7e1b052fd135ae2e754499b4fe286d5ba699/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84b7e1b052fd135ae2e754499b4fe286d5ba699/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f84b7e1b052fd135ae2e754499b4fe286d5ba699", "patch": "@@ -5496,6 +5496,48 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn note_need_for_fn_pointer(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        expected: Ty<'tcx>,\n+        found: Ty<'tcx>,\n+    ) {\n+        match (&expected.kind, &found.kind) {\n+            (ty::FnDef(did1, substs1), ty::FnDef(did2, substs2)) => {\n+                let sig1 = self.tcx.fn_sig(*did1).subst(self.tcx, substs1);\n+                let sig2 = self.tcx.fn_sig(*did2).subst(self.tcx, substs2);\n+                if sig1 != sig2 {\n+                    return;\n+                }\n+                err.note(\n+                    \"different `fn` items always have unique types, even if their signatures are \\\n+                     the same\",\n+                );\n+                err.help(&format!(\"change the expectation to require function pointer `{}`\", sig1));\n+                err.help(&format!(\n+                    \"if the expectation is due to type inference, cast the expected `fn` to a \\\n+                     function pointer: `{} as {}`\",\n+                    self.tcx.def_path_str_with_substs(*did1, substs1),\n+                    sig1\n+                ));\n+            }\n+            (ty::FnDef(did, substs), ty::FnPtr(sig2)) => {\n+                let sig1 = self.tcx.fn_sig(*did).subst(self.tcx, substs);\n+                if sig1 != *sig2 {\n+                    return;\n+                }\n+                err.help(&format!(\"change the expectation to require function pointer `{}`\", sig1));\n+                err.help(&format!(\n+                    \"if the expectation is due to type inference, cast the expected `fn` to a \\\n+                     function pointer: `{} as {}`\",\n+                    self.tcx.def_path_str_with_substs(*did, substs),\n+                    sig1\n+                ));\n+            }\n+            _ => {}\n+        }\n+    }\n+\n     /// A common error is to add an extra semicolon:\n     ///\n     /// ```"}, {"sha": "256b9d45755c3ba587b903f5eb9620ae80dac838", "filename": "src/test/ui/fn/fn-item-type.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f84b7e1b052fd135ae2e754499b4fe286d5ba699/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f84b7e1b052fd135ae2e754499b4fe286d5ba699/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.rs?ref=f84b7e1b052fd135ae2e754499b4fe286d5ba699", "patch": "@@ -12,22 +12,44 @@ impl<T> Foo for T { /* `foo` is still default here */ }\n fn main() {\n     eq(foo::<u8>, bar::<u8>);\n     //~^ ERROR mismatched types\n-    //~|  expected fn item `fn(_) -> _ {foo::<u8>}`\n-    //~|  found fn item `fn(_) -> _ {bar::<u8>}`\n-    //~|  expected fn item, found a different fn item\n+    //~| expected fn item `fn(_) -> _ {foo::<u8>}`\n+    //~| found fn item `fn(_) -> _ {bar::<u8>}`\n+    //~| expected fn item, found a different fn item\n+    //~| different `fn` items always have unique types, even if their signatures are the same\n+    //~| change the expectation to require function pointer\n+    //~| if the expectation is due to type inference, cast the expected `fn` to a function pointer\n \n     eq(foo::<u8>, foo::<i8>);\n     //~^ ERROR mismatched types\n     //~| expected `u8`, found `i8`\n+    //~| different `fn` items always have unique types, even if their signatures are the same\n+    //~| change the expectation to require function pointer\n+    //~| if the expectation is due to type inference, cast the expected `fn` to a function pointer\n \n     eq(bar::<String>, bar::<Vec<u8>>);\n     //~^ ERROR mismatched types\n-    //~|  expected fn item `fn(_) -> _ {bar::<std::string::String>}`\n-    //~|  found fn item `fn(_) -> _ {bar::<std::vec::Vec<u8>>}`\n-    //~|  expected struct `std::string::String`, found struct `std::vec::Vec`\n+    //~| expected fn item `fn(_) -> _ {bar::<std::string::String>}`\n+    //~| found fn item `fn(_) -> _ {bar::<std::vec::Vec<u8>>}`\n+    //~| expected struct `std::string::String`, found struct `std::vec::Vec`\n+    //~| different `fn` items always have unique types, even if their signatures are the same\n+    //~| change the expectation to require function pointer\n+    //~| if the expectation is due to type inference, cast the expected `fn` to a function pointer\n \n     // Make sure we distinguish between trait methods correctly.\n     eq(<u8 as Foo>::foo, <u16 as Foo>::foo);\n     //~^ ERROR mismatched types\n     //~| expected `u8`, found `u16`\n+    //~| different `fn` items always have unique types, even if their signatures are the same\n+    //~| change the expectation to require function pointer\n+    //~| if the expectation is due to type inference, cast the expected `fn` to a function pointer\n+\n+    eq(foo::<u8>, bar::<u8> as fn(isize) -> isize);\n+    //~^ ERROR mismatched types\n+    //~| expected fn item `fn(_) -> _ {foo::<u8>}`\n+    //~| found fn pointer `fn(_) -> _`\n+    //~| expected fn item, found fn pointer\n+    //~| change the expectation to require function pointer\n+    //~| if the expectation is due to type inference, cast the expected `fn` to a function pointer\n+\n+    eq(foo::<u8> as fn(isize) -> isize, bar::<u8>); // ok!\n }"}, {"sha": "84f5e034340ebc69b8fa2ac73a0a9e7e97f90805", "filename": "src/test/ui/fn/fn-item-type.stderr", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f84b7e1b052fd135ae2e754499b4fe286d5ba699/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f84b7e1b052fd135ae2e754499b4fe286d5ba699/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr?ref=f84b7e1b052fd135ae2e754499b4fe286d5ba699", "patch": "@@ -6,34 +6,57 @@ LL |     eq(foo::<u8>, bar::<u8>);\n    |\n    = note: expected fn item `fn(_) -> _ {foo::<u8>}`\n               found fn item `fn(_) -> _ {bar::<u8>}`\n+   = note: different `fn` items always have unique types, even if their signatures are the same\n+   = help: change the expectation to require function pointer `fn(isize) -> isize`\n+   = help: if the expectation is due to type inference, cast the expected `fn` to a function pointer: `foo::<u8> as fn(isize) -> isize`\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-item-type.rs:19:19\n+  --> $DIR/fn-item-type.rs:22:19\n    |\n LL |     eq(foo::<u8>, foo::<i8>);\n    |                   ^^^^^^^^^ expected `u8`, found `i8`\n    |\n    = note: expected fn item `fn(_) -> _ {foo::<u8>}`\n               found fn item `fn(_) -> _ {foo::<i8>}`\n+   = note: different `fn` items always have unique types, even if their signatures are the same\n+   = help: change the expectation to require function pointer `fn(isize) -> isize`\n+   = help: if the expectation is due to type inference, cast the expected `fn` to a function pointer: `foo::<u8> as fn(isize) -> isize`\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-item-type.rs:23:23\n+  --> $DIR/fn-item-type.rs:29:23\n    |\n LL |     eq(bar::<String>, bar::<Vec<u8>>);\n    |                       ^^^^^^^^^^^^^^ expected struct `std::string::String`, found struct `std::vec::Vec`\n    |\n    = note: expected fn item `fn(_) -> _ {bar::<std::string::String>}`\n               found fn item `fn(_) -> _ {bar::<std::vec::Vec<u8>>}`\n+   = note: different `fn` items always have unique types, even if their signatures are the same\n+   = help: change the expectation to require function pointer `fn(isize) -> isize`\n+   = help: if the expectation is due to type inference, cast the expected `fn` to a function pointer: `bar::<std::string::String> as fn(isize) -> isize`\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-item-type.rs:30:26\n+  --> $DIR/fn-item-type.rs:39:26\n    |\n LL |     eq(<u8 as Foo>::foo, <u16 as Foo>::foo);\n    |                          ^^^^^^^^^^^^^^^^^ expected `u8`, found `u16`\n    |\n    = note: expected fn item `fn() {<u8 as Foo>::foo}`\n               found fn item `fn() {<u16 as Foo>::foo}`\n+   = note: different `fn` items always have unique types, even if their signatures are the same\n+   = help: change the expectation to require function pointer `fn()`\n+   = help: if the expectation is due to type inference, cast the expected `fn` to a function pointer: `<u8 as Foo>::foo as fn()`\n \n-error: aborting due to 4 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/fn-item-type.rs:46:19\n+   |\n+LL |     eq(foo::<u8>, bar::<u8> as fn(isize) -> isize);\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected fn item, found fn pointer\n+   |\n+   = note: expected fn item `fn(_) -> _ {foo::<u8>}`\n+           found fn pointer `fn(_) -> _`\n+   = help: change the expectation to require function pointer `fn(isize) -> isize`\n+   = help: if the expectation is due to type inference, cast the expected `fn` to a function pointer: `foo::<u8> as fn(isize) -> isize`\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}